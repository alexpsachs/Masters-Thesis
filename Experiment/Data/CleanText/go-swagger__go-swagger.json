{
    "casualjim": "This is addressed now by allowing users to specify named custom string formats.  So people can implement passwords whichever way they see fit.\n. There is a strfmt.Password now. closed with #7\n. done by todo list tutorial\n. pretty high up :)\nI'm currently writing tests for the generator stuff, to get my confidence level up. And the client is the one I want to get working first.\n. :+1:  I'll let you know when I have something that might work \n. @nmonterroso I don't intend for this to become a part of swagger-codegen.  I started out trying to get it to work with swagger-codegen, but as I got further in my implementation I first had to let go of the object model, then the mustache templates.\nThere are a number of reasons why that is: \n- I get to use go: fmt.Sprintf(\"%#v\", example) to get proper go representations of types for examples\n- Using mustache requires me to use multipass rendering, go templates allow me to render in 1 pass.\n- Reuse of mustache templates is fairly limited\n- I'm going to make use of static code analysis prior to generating certain models and so on. All of this would require a lot of extra work in java while it's much easier to do so in go.\nI also ran into some bugs in the codegen at that time. Trying to debug 3 languages (go, java and mustache) while not really knowing all the things I would need added more cognitive overhead than I was willing to deal with. \nI've only just worked out how to map all the possible type combinations that are supported in swagger to go.  Perhaps when it's all worked out there might a user who cares enough to port it to swagger-codegen. \n. This branch will be sleeping for a while.\nIf you wanted experimental, this is it. It will generate a client for simple things.\nIn the mean time I'm working on the branch template-refactor, where I'm completing the generation of schema's to more idiomatic go. This is a bit more complex than I had anticipated, anyway it will go something like this:\n- defintion of primitive => type alias/name\n- defintion of array => type alias/name\n- definition of map => type alias/name\n- definition of object with properties => struct\n- definition of ref => type alias/name\n- object with only additional properties => map[string]T\n- object with additional properties and properties => custom serializer\n- schema with schema array in items => tuple (struct with properties {p1,p2,p3,...}, custom serializer)\n- schema with all of => struct\n  - all of schema with ref => embedded value\n  - all of schema with properties => properties are included in struct\n  - adding an all of schema with just \"x-isnullable\": true turns the schema into a pointer\n- schema with additional items and a single schema, nothing special happens it's an invalid schema\n- schema with additional items and multiple schema's in items => struct (like tuple but with an extra property for the additional items, custom serializer)\nI've got quite a bit of this working on that branch, but it breaks other templates at this moment.\nI have the custom structs, serializers and validators for this\n. A quick update:\nI'm finally through most of the work for schemas. Currently adding support for enum validations in all allowed positions.\nsupporting additionalItems and additionalProperties specifically across the board has been less than trivial. \nSo I hope to finally be able to merge and close this issue in a couple of days\n. This ticket is labeled with raspberry pi 3 bounty. Solve the ticket and I'll send you a pi\n. This ticket is labeled with raspberry pi 3 bounty. Solve the ticket and I'll send you a pi\n. related: #98 \n. yeah it's a best effort one. we can close this issue with your comment. it's resolved :). not really valuable or still mandated by:\nhttps://github.com/apigee-127/sway/blob/master/docs/versions/2.0.md#semantic-validation\n. I have this for the client on the template-refactor branch, but no such thing for the server yet\n. it will be fixed when I'm able to merge my branch back in. I'm no longer using // for comments :)\n. this should be fixed now on master\n. Thanks a lot, there are 2 test failures here. \nOne is related to the path change. \nThe other one I don't know why it does that but might be because of the same reason.\n. thanks!\n. I thnk they moved here: https://github.com/go-swagger/go-swagger/tree/master/httpkit/validate\n. you could also try to pull in the templates for this from the gen-client branch. i fixed those things on there and the templates for the server shouldn't have changed.\n. try running go generate ./generator  that should update the embedded templates.\nSorry don't have any docs about this stuff yet\n. I think somebody fixed that in #25 \n. I think this is no longer an issue so I'm going to close this one\n. I think somebody else submitted that PR earlier (the go generate bindata one)\n. thanks!\n. can you give me a few days to get my client branch integrated. I'm not worried about this particular feature as much as with how this can be done without having to change go-swagger for each thing people might find useful.\nI have resorted to annotations and scanning in template-refactor and gen-client branches.\nWhile sql might seem appropriate I don't know if I want go-swagger to have support for sql in the core of the project because not everybody uses sql at all and one goal is to keep dependencies of go-swagger very limited.\nI hope this makes sense? So if you take a look at where I'm going with this stuff in the template-refactor branch, and you can come up with a proposal that would play nice with those annotations and such. I would gladly merge it in.\n. is this still an issue? what is the thing you're trying to achieve?\n. This was for the grpc gateway project?\nDoes that work, does it require more work? \n. you want the hostname format not uri format\n. I updated the included schema for swagger. This now validates\n\u00b1 ivan@aether:~/go/src/github.com/go-swagger/go-swagger\ngit:(master) \u00bb swagger validate https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json\nThe swagger spec at \"https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json\" is valid against swagger specification 2.0\n. yeah this one is in more places on the master branch. In the template-refactor branch there is no more upfront mangling of names\n. this should now be fixed on master\n. this should not render actually, this should throw an error.\n. I think you can define your schema like this:\nyaml\npaths:                                                      \n  '/_debug':                                                \n    get:                                                    \n      tags: ['debug']                                       \n      operationId: 'getDebug'                               \n      summary: 'Debug route strictly for testing.'          \n      responses:                                            \n        '200':                                              \n          descrition: 'Debug result.'                       \n          schema:\n             anyOf:\n               - type: object\n               - type: arrray\n                 items:\n                   type: object\n. as far as I know the items from this PR are incorporated in the code generation. Just this PR was never merged.\nWhat specifically is still changing order? Is it the properties on models or the operations? \n. Going to close this pull request, the changes in here were manually merged\n. I can't find it here as being supported: https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#definitionsObject\nI'll ask though and see if perhaps it should be.\n. There has been a bunch of discussion on these things in the swagger-spec repo. But as things stand, while json schema supports it, it's not supported for swagger at this point.\nThe markdown document linked to earlier is the source of truth for the swagger 2.0 spec definition.\nit wouldn't be hard to support it, but swagger currently doesn't allow for it.\n@webron  can you confirm that what I wrote here is the actual state of affairs\n. But you can reference to URL's not just to local files wherever you would reference the definition.\nThings don't need to be defined in 1 file, but you also don't strictly need to import global definitions. You can just reference remote entities\njson\n{ \"$ref\":  \"http://someurl.somewhere.example/#definitions/Person\" }\n. the work around is simple: just start with a swagger.json file that has the missing bits.\n. fixed by 00053a5aa\n. at this point we make use of the go loader package. This allows us to discover your application and which files to scan for the doc comments. \nThis application needs to read composed structs and so on, and it's a lot easier to interrogate the application if you know where all the files are and not just the ones you created in this particular folder.\nUnfortunately it does require to be able to read   \nHow about a main class that doesn't require appengine imports? \nI've personally never used appening so I don't really know what is involved. \n. I guess what I mean is if your code doesn't compile, how are you running it?\nAnd what I also meant is; if this is important to you, you could look at forking and submitting a pull request.\nI, personally, still have a bunch of other things that need fixing in here before I want to look at a niche like appengine. \n. but the custom sdk they use also includes a custom go command doesn't it?\nI think the problem you're having is related to your GOPATH content and can be fixed there.\nafaik go always needs to compile your stuff, whether that's in the SDK env or not, have you tried installing go-swagger in the SDK provided GOPATH? \nI'll leave this open so i can track this\n. the server generator on master now supports the response model part of this issue.\nStill no way to set the reason\n. Looks like there won't be a way to set the response reason for the go http server.\nClosing this now:\nhttps://github.com/golang/go/issues/8990\n. Would the following solution work better (not yet implemented though)\nresponses:\ndefault:errorResponse:Generic Error\n200:photoResponse:multi word description\n. In the end it was easier to just reuse the documentation on the response struct. So that's what it is doing. It's not using the syntax proposed earlier.\n. Yes I'll try to fix some this weekend.\nThe swagger version fix is relatively easy, haven't really looked into the other one yet\nThis is the cause for the first one: https://github.com/go-swagger/go-swagger/blob/master/spec/spec.go#L124-L126\n. I botched a merge this weekend and I'm catching up. Please keep submitting issues as you find them though.\nIf it's critical to what you're trying to do, the latest working version of the server generator was: 797d4ba62b1\n. I botched a merge this weekend and I'm catching up. Please keep submitting issues as you find them though.\nIf it's critical to what you're trying to do, the latest working version of the server generator was: 797d4ba\n. You can take a look here:\nhttps://github.com/go-swagger/go-swagger/tree/master/fixtures/goparsing/petstore\nthere are a few more issues to work out with the generation of a server and client before I can work on the docs and provide proper examples. (see #5)\nThis one is not a fully functional API but it shows all the annotations in use:\nhttps://github.com/go-swagger/go-swagger/tree/master/fixtures/goparsing/classification\n. http://go-swagger.github.io/generate/spec/\n. The items property is required for an array.\nA $ref hijacks everything in the object so the type array shouldn't even be picked up\njson\n{ \n  \"responses\": {\n     \"200\": {\n       \"description\": \"Success\",\n      \"schema\": {\n          \"type\": \"array\",\n          \"items\": {\n             \"$ref\": \"#/definitions/DeleteResponse\"\n          }\n       }\n    }\n  }\n}\n. could you get me the entire spec? it would be helpful to see the context around the children thing.\n. Hi thanks for the context, I think this is a bug related to the java implementation of swagger, which is another project under another organization.\nI think you'll find that the people (@fehguy) from the swagger-core project might be able to help you better, I'm not familiar with the java implementation and its frameworks.  https://github.com/swagger-api/swagger-core \n. ah here it's actually expected.\nTo get a pointer here the spec should read:\nyaml\n'/order':                                                                                \n  post:                                                                                  \n    tags: ['order']                                                                      \n    operationId: 'postOrder'                                                             \n    summary: 'Creates a new Order.'                                                      \n    parameters:                                                                          \n      - name: 'order'                                                                    \n        in: 'body'                                                                       \n        required: false                                                                   \n        schema: { '$ref': '#/definitions/OrderPlacement' }\n. duplicate of issue #16 \nduplicate of issue #18 \nthe invalid example is a valid issue, ideally this would have just contained that one issue as the other ones are already known\n. afaik I'm allowed to just ignore invalid things, this could be a validation error though, is that what you mean?\n. O I get it now. You still have to reference your parameter. The global parameters are not defaults for every operation. They are like a databag to share, but you still have to provide a $ref to the named parameter if you want to use them\n. because there is nothing to fix, see my comment. You have to still refer to them as $ref wherever you want to use them.\nWhatever you define in the parameters property at the top level is like definitions, they  aren't defaults for every single operation in your spec.\n. The info type is not detected because it's not in use in any of the code that is annotated for the routes. Swagger should only include things that are in use so that's why this model isn't picked up even though it's annotated with swagger:model.\n. it reads comments in blocks and follows go parsing rules\n// swagger:route ....\n//\n// full description here. instead of requiring 2 headers, if you're going to do versioning through headers. it should be in your media type.\nSo you want something like: application/vnd.company.app-v1+json\n. You can add headers to responses and to parameters. Those can in turn be shared to a certain degree through the use of $ref\nFrom the swagger specification:\n- Content Types\n- Fixed fields on parameter object\n- Fixed fields on response objects\nIf you think the specification would be improved by adding global headers to the API, you can submit an issue at the swagger-spec repo, there are many more people following that repository and it will get a discussion going.\n. thanks for this spec, it has exposed some other issues with anonymous objects and their validations. \nI've pushed the fix for this particular issue but it will still generate code that won't compile at this stage. \nIf it's urgent you can make some edits manually \nfor NewProtoType i had to add an enum validation:\n``` go\npackage models\n// This file was generated by the swagger tool.\n// Editing this file might prove futile when you re-run the swagger generate command\nimport (\n    \"encoding/json\"\n\"github.com/go-swagger/go-swagger/errors\"\n\"github.com/go-swagger/go-swagger/httpkit/validate\"\n\"github.com/go-swagger/go-swagger/strfmt\"\n\n)\n/*\nDescription of a new prototype\nswagger:model NewPrototype\n*/\ntype NewPrototype struct {\n/* Repository creating user to whom the rule should apply\n */\nActivatingUser struct {\n\n    /* The username for the activating_user\n\n    Required: true\n    */\n    Name string `json:\"name\"`\n} `json:\"activating_user,omitempty\"`\n\n/* Information about the user or team to which the rule grants access\n\nRequired: true\n*/\nDelegate struct {\n\n    /* Whether the delegate is a user or a team\n\n    Required: true\n    */\n    Kind string `json:\"kind\"`\n\n    /* The name for the delegate team or user\n\n    Required: true\n    */\n    Name string `json:\"name\"`\n} `json:\"delegate\"`\n\n/* Role that should be applied to the delegate\n\nRequired: true\n*/\nRole string `json:\"role\"`\n\n}\n// Validate validates this new prototype\nfunc (m *NewPrototype) Validate(formats strfmt.Registry) error {\nvar res []error\n\nif err := m.validateActivatingUser(formats); err != nil {\n    res = append(res, err)\n}\n\nif err := m.validateDelegate(formats); err != nil {\n    res = append(res, err)\n}\n\nif err := m.validateRole(formats); err != nil {\n    res = append(res, err)\n}\n\nif len(res) > 0 {\n    return errors.CompositeValidationError(res...)\n}\n\nreturn nil\n\n}\nfunc (m *NewPrototype) validateActivatingUser(formats strfmt.Registry) error {\nif err := validate.Required(\"activating_user\"+\".\"+\"name\", \"body\", string(m.ActivatingUser.Name)); err != nil {\n    return err\n}\n\nreturn nil\n\n}\nfunc (m *NewPrototype) validateDelegate(formats strfmt.Registry) error {\nif err := validate.Required(\"delegate\"+\".\"+\"kind\", \"body\", string(m.Delegate.Kind)); err != nil {\n    return err\n}\n\nif err := m.validateKindEnum(\"delegate\"+\".\"+\"kind\", \"body\", m.Delegate.Kind); err != nil {\n    return err\n}\n\nif err := validate.Required(\"delegate\"+\".\"+\"name\", \"body\", string(m.Delegate.Name)); err != nil {\n    return err\n}\n\nreturn nil\n\n}\nvar newPrototypeRoleEnum []interface{}\nfunc (m *NewPrototype) validateRoleEnum(path, location string, value string) error {\n    if newPrototypeRoleEnum == nil {\n        var res []string\n        if err := json.Unmarshal([]byte([\"read\",\"write\",\"admin\"]), &res); err != nil {\n            return err\n        }\n        for _, v := range res {\n            newPrototypeRoleEnum = append(newPrototypeRoleEnum, v)\n        }\n    }\n    return validate.Enum(path, location, value, newPrototypeRoleEnum)\n}\nfunc (m *NewPrototype) validateRole(formats strfmt.Registry) error {\nif err := validate.Required(\"role\", \"body\", string(m.Role)); err != nil {\n    return err\n}\n\nif err := m.validateRoleEnum(\"role\", \"body\", m.Role); err != nil {\n    return err\n}\n\nreturn nil\n\n}\nvar newPrototypeKindEnum []interface{}\nfunc (m *NewPrototype) validateKindEnum(path, location string, value string) error {\n    if newPrototypeKindEnum == nil {\n        var res []string\n        if err := json.Unmarshal([]byte([\"user\",\"team\"]), &res); err != nil {\n            return err\n        }\n        for _, v := range res {\n            newPrototypeKindEnum = append(newPrototypeKindEnum, v)\n        }\n    }\n    return validate.Enum(path, location, value, newPrototypeKindEnum)\n}\n```\nand for RunParameters I had to change unmarshal\n``` go\npackage models\nimport \"encoding/json\"\n// This file was generated by the swagger tool.\n// Editing this file might prove futile when you re-run the swagger generate command\n/*\nOptional run parameters for activating the build trigger\nswagger:model RunParameters\n*/\ntype RunParameters struct {\n/* (SCM only) If specified, the name of the branch to build.\n */\nBranchName string `json:\"branch_name,omitempty\"`\n\n/* (Custom Only) If specified, the ref/SHA1 used to checkout a git repository.\n */\nCommitSha string `json:\"commit_sha,omitempty\"`\n\n/* (SCM Only) If specified, the ref to build.\n */\nRefs map[string]interface{} `json:\"refs,omitempty\"`\n\n}\n// UnmarshalJSON unmarshals this object with additional properties from JSON\nfunc (m RunParameters) UnmarshalJSON(data []byte) error {\n    // stage 1, bind the properties\n    var stage1 RunParameters\n    if err := json.Unmarshal(data, &stage1); err != nil {\n        return err\n    }\n    m = stage1\n// stage 2, remove properties and add to map\n//if err := json.Unmarshal(data, &stage2); err != nil {\n//return err\n//}\n\n//delete(stage2, \"branch_name\")\n\n//delete(stage2, \"commit_sha\")\n\n//delete(stage2, \"refs\")\n\n//m.Refs = stage2[\"refs\"]\n\nreturn nil\n\n}\n// MarshalJSON marshals this object with additional properties into a JSON object\nfunc (m RunParameters) MarshalJSON() ([]byte, error) {\n    // make JSON object for known properties\n    props, err := json.Marshal(m)\n    if err != nil {\n        return nil, err\n    }\nreturn props, nil\n\n}\n```\nI'll try to fix those too\n. I've put the remaining things from this issue in new issues, so closing this one\n. I'm able to generate a client for quay.io that compiles off the spec, without requiring edits\n. I'm going to keep it there, this is coming from a spec that is in use in the actual world.  The JSON Schema definition of the swagger spec allows it, should that change I'll update support for it too.\nhttps://github.com/swagger-api/swagger-spec/blob/master/schemas/v2.0/schema.json#L988-L998\n. if I follow the packages then the makeplans.Booking model lives in a different repo is that right?\nAnd one is a git repo and the other a mercurial one?\n. in that gist there is no mention of booking responses besides the mention in the route comment. I'm assuming in the actual code there is a thing like:\ngo\ntype BookingResponses []BookingResponse\n. In the end the generated spec has a faulty ref where it uses the model instead of the response as $ref. Manual editing fixes this\ndiff\n     \"BookingResponse\": {\n       \"description\": \"BookingResponse represents a scheduled appointment\",\n       \"schema\": {\n-        \"$ref\": \"#/definitions/Booking\"\n+        \"$ref\": \"#/definitions/BookingResponse\"\n       }\n     }\n   }\n. I can't reproduce this problem.\nfor the code in that gist I get the following spec.\njson\n{\n  \"consumes\": [\n    \"application/json\"\n  ],\n  \"produces\": [\n    \"application/json\"\n  ],\n  \"schemes\": [\n    \"https\"\n  ],\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"description\": \"the purpose of this application is to provide an application\\nthat is using plain go code to define an API\",\n    \"title\": \"API.\",\n    \"version\": \"0.0.1\"\n  },\n  \"host\": \"localhost\",\n  \"paths\": {\n    \"/admin/bookings/\": {\n      \"get\": {\n        \"consumes\": [\n          \"application/json\"\n        ],\n        \"produces\": [\n          \"application/json\"\n        ],\n        \"schemes\": [\n          \"http\",\n          \"https\"\n        ],\n        \"tags\": [\n          \"booking\"\n        ],\n        \"summary\": \"Bookings lists all the appointments that have been made on the site.\",\n        \"operationId\": \"Bookings\",\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/responses/BookingResponse\"\n          }\n        }\n      }\n    }\n  },\n  \"definitions\": {\n    \"Booking\": {\n      \"description\": \"A Booking in the system\",\n      \"type\": \"object\",\n      \"required\": [\n        \"id\",\n        \"Subject\"\n      ],\n      \"properties\": {\n        \"Subject\": {\n          \"description\": \"Subject the subject of this booking\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"description\": \"ID the id of the booking\",\n          \"type\": \"integer\",\n          \"format\": \"int64\",\n          \"x-go-name\": \"ID\",\n          \"readOnly\": true\n        }\n      },\n      \"x-go-package\": \"github.com/go-swagger/scan-repo-boundary/makeplans\"\n    }\n  },\n  \"responses\": {\n    \"BookingResponse\": {\n      \"description\": \"BookingResponse represents a scheduled appointment\",\n      \"schema\": {\n        \"$ref\": \"#/definitions/Booking\"\n      }\n    }\n  }\n}\n.  thanks for the effort :100: \n. you mean like after generating, how to use it to make calls to the API you generated a client for?\nI have as top priority now writing a documentation site, I will do this this weekend.\nI'll try to write a sample for it in a couple of hours, once the day job ends :)\n. you want to pass in this guy:\nhttps://github.com/go-swagger/go-swagger/blob/master/httpkit/client/runtime.go#L31\nThe idea is that there are other transports later on like nanomsg, zeromq, websocket and so on.\n. example is here: http://go-swagger.github.io/generate/client/\n. https://goswagger.io/generate/client.html. https://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/client/todo_list_client.go#L51. Yes that's also not from this project, swaggerhub uses swagger-codegen. would it be possible to show me the spec?\n. this might be because of lack of a space between the colon after a key and the value\nresults in the error:\nyaml\ndefinitions:\n  error:\n    type: object\n    required:\n      - message\n    properties:\n      code:\n        type: integer\n        format: int64\n      message:\n        type:string\ncorrect: \nyaml\ndefinitions:\n  error:\n    type: object\n    required:\n      - message\n    properties:\n      code:\n        type: integer\n        format: int64\n      message:\n        type: string\n. considering there was no answer for this long, I'm going to close this and assume there was a resolution.\n. run the generation process with: DEBUG=1 SWAGGER_DEBUG=1. the problem with line numbers and so on is not the problem in go-swagger it's with the stdlib json and go-yaml implementations.\nif you're able to share the spec I may be able to help you out but for now we have no control over linenumbers and character positions because we are reliant on the way go's stdlib json library works. I'm open to any suggestions on making this better because I know it's a problem. thanks!\n. I'm going to close this issue because the information from these commits have been added to the master branch here.\n. this might be a duplicate of #21 \n. contributes to #82\n. I think that should be fixed now, made it reference with https \nsorry about that\n. I can't reproduce this :(\n``` shellsession\n\u00b1 ivan@aether:~/go/src/github.com/go-swagger/go-swagger\ngit:(issue-22) \u2717 !? \u00bb docker pull golang\n...\nStatus: Downloaded newer image for golang:latest\n\u00b1 ivan@aether:~/go/src/github.com/go-swagger/go-swagger\ngit:(issue-22) \u2717 !? \u00bb docker run --rm -it golang go get -u github.com/go-swagger/go-swagger/... && echo \"$?\"\n0\n```\n. I've replaced the submodules with subtree integrations and things seem to work now.\nIt appears to be unhappy because the submodules have a .git file, perhaps it's this thing https://github.com/golang/go/issues/7764\n. fixed by 74f252d\n. it's this package: https://godoc.org/golang.org/x/net/context\n. - https://github.com/zach-klippenstein/goregen\n- https://github.com/dvyukov/go-fuzz\n- https://github.com/manveru/faker\n- https://github.com/Pallinder/go-randomdata\n- https://github.com/google/gofuzz\n. There are 2 places where this is useful.\nScenario 1 (and that's the one we're after with this ticket)\nYou have several teams: 1 html5, 1 ios, 1 android, 1 backend \nYou start a new project and you need to stub data, instead of the backend team being a bottleneck. people can plug in the handlers that generate quasi meaningful random data and they can build their UI's with not every text field looking like crap.\nYou want to play with an API but locally, you get the swagger spec and genreate a stub API.\n. This ticket is labeled with raspberry pi 3 bounty. Solve the ticket and I'll send you a pi\n. This ticket is labeled with raspberry pi 3 bounty. Solve the ticket and I'll send you a pi\n. related: #98\n. I guess they only differ on what the assertions are that are being made. This ticket is labeled with raspberry pi 3 bounty. Solve the ticket and I'll send you a pi\n. :100: for weirdness on this one\n. This has to do with operations that are currently lacking an operation ID.\nUnfortunately swagger defines those as optional, but it should do better name mangling\n. I can't fix this because the reason for this is that there are duplicate operationIds defined. They have to be globally unique to the specification, not just to the tag.\nfrom the swagger spec for operationId:\n\nUnique string used to identify the operation. The id MUST be unique among all operations described in the API. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is recommended to follow common programming naming conventions.\n. this issue has some more context about it: \nhttps://github.com/swagger-api/swagger-spec/issues/381\n. looks like swagger codegen doesn't want a working client\n. closing because swagger-codegen doesn't want a working codegenerator\n. The swagger: annotation comments are only detected at the beginning of a line.\n\nStrictly speaking the swagger:model annotation isn't needed unless you want to rename model to something with lower case or something else.\nfor the response part I think you need a little bit more glue.\n``` go\npackage models\n// Entity \n// swagger:model \ntype Entity struct {\n    arangolite.Document\n    Created     time.Time json:\"created,omitempty\"\n    LastUpdated time.Time json:\"lastUpdated,omitempty\"\n    Type        *string    json:\"type,omitempty\"\n}\n```\n``` go\npackage controllers\n// swagger:response listEntityResponse\ntype listEntityResponse struct {\n  // in: body\n  Payload []Entity\n}\n// Find \n// swagger:route GET /entities find entities\n// Responses:\n//  200: listEntityResponse\nfunc (c EntitiesCtrl) Find(w http.ResponseWriter, r http.Request) {\n    userID, err := c.pg.GetUserID(r)\n    if err != nil {\n        c.r.JSONError(w, http.StatusUnauthorized, errs.API.Internal, err)\n        return\n    }\nfilter, err := c.pg.GetFilter(r)\nif err != nil {\n    c.r.JSONError(w, http.StatusBadRequest, errs.API.FilterDecoding, err)\n    return\n}\n\nentities, err := c.i.Find(userID, filter)\nif err != nil {\n    switch err.(type) {\n    case errs.ErrInvalidFilter:\n        c.r.JSONError(w, 422, errs.API.InvalidFilter, err)\n    default:\n        c.r.JSONError(w, http.StatusInternalServerError, errs.API.Internal, err)\n    }\n    return\n}\n\nc.r.JSON(w, http.StatusOK, entities)\n\n}\n```\n. By forcing you to use go code to document your API you ensure that if you were to rename your models.Entity struct, compilation of your API would fail and your documentation is kept up to date wrt to type information.\nSo I didn't want to reinvent the type system, and I think ultimately it leads to less work than more work. I also don't think of documentation as just being comments, documentation is what it is ultimately rendered not how you define it.  (eg. go's example functions)\nBy allowing you to specify the doc comment you tried to use first we'd have introduced more maintenance burden than is absolutely required and we'd have made the go-swagger code even more complex, for a feature that's one of the major features of the go language: static type checking. \nIn swagger a response is always headers + body with an optional status code. If you choose to not define any headers that's fine, but it just means there are no response headers as part of the contract your service makes with the world.\n. There isn't much to detect really. Operations can override the security definitions on a per case basis.\nFor the security schemes it can get complicated quickly and because of this, perhaps it's better to just document how you can use an existing yaml file as input to the generate spec command, and explain that the discovered data is just merged with the input spec.\nclosing for now\n. fixed by: b73a1c8351724660a983e177343fbdcfc613581f\n. it means that when you generate a server you must do this in a location inside the GOPATH.\ngo-swagger uses the go build infrastructure so it needs to be able to resolve dependencies etc.\n. if you put your code in the configure_XXX.go file then it won't get overwritten\n. to use the client, yes you need your own main()\nThe code usage is documented a bit here, please let me know of any difficulties you encounter with that:\nhttp://go-swagger.github.io/generate/client/\n. for your own sanity please join: https://slackin.goswagger.io/\n. for a client for a todo list, you want to use the client facade which is going to be in the ./client package\nhttps://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/client/to_do_list_client.go#L15-L39\nThere you have 3 things that are immediately useful.\nIf you don't have to change or configure a thing then you can go with the Default one, no setup is required.\nIf you're sure you're going to work with HTTP (atm I'm guessing this is 100% of the cases) then the NewHTTPClient() might work fine for you.\nif you need more customization then you are required to pass in a transport and so on. This is mostly because after the first release it is getting different transports and I want them to be a matter of config.\n. circle ci now supports docker images. not moving to shippable\n. this was implemented in the 0.7.x version. generate client and server commands detect swagger.{json,yml}\n. Perhaps building on this:\nhttps://github.com/JnBrymn/gopar\nThere might be other more advanced PEG generators out here\n. probably a lot more mature\nhttps://github.com/PuerkitoBio/pigeon\n. i mean you will be able to do \nswagger check-update\nand then it will check the value of the current binary version against the value of the latest version known on github and print either \"up to date, carry on\" or \"out of date, you can run go get -u github.com/go-swagger/go-swagger/cmd/... to update to the latest version\". \n. This seems like a nice way to deal with it:\nhttps://github.com/sanbornm/go-selfupdate\n. I agree that this is a good thing to have, at least a way to order that's not alphabetical.\nBut for now the implementation uses a map and there is no weight option defined yet, so alphabetical is the only way to get a stable sort (and stable diffs across generations)\nI think it would require adding a vendor extension x-weight or changing the object model for swagger to not use maps and use slices with some convenience methods \n. There are 2 ways to set the host and you can choose which one you like best.\nThe first one as you discovered is altering the swagger spec document.\nThe second one is:\ngo\napiclient.Default.Transport.Host = config.Host\n. I'm sorry that doesn't work, it's this:\n``` go\nimport (\n  httptransport \"github.com/go-swagger/go-swagger/httpkit/client\"\n  apiclient \"github.com/jawspeak/go-stash-restclient/client\"\n)\nfunc ConfigHost() {\n  // do stuff that reads the json config\n// load the swagger spec from embedded document\n  doc, err := spec.New(apiclient.SwaggerJSON, \"\")\n  if err != nil {\n    log.Fatal(err)\n  }\ntransport := httptransport.New(doc)\n  transport.Host = config.Host\napiclient.Default.SetTransport(transport)\n}\n```\n. I added the config options etc to the documentation page of the client on the site too\n. I would say it implements what you asked for. it has some logic for deciding when to turn a value into  pointer. This is represented by the IsNullable property. it actually looks at the defined validations to make this decision.\nSo the value of minLength etc affects it.\n. I think this is the place to change that: https://github.com/go-swagger/go-swagger/blob/master/generator/shared.go#L239-L259\n. @ecnahc515 I don't know if this is something that should be supported on the client.\nWhen the spec specifies default values, the API is saying: when this value isn't here then it will be as if this default value was provided.\nIf an API documents default values, it has to also work with them, otherwise the contract they shared with 3rd parties is not valid.\n. there is also this: https://github.com/tikalk/commandcar\nobviously it's not go and not as semantically nice but it's an option to get a CLI right now\n. This ticket is labeled with raspberry pi 3 bounty. Solve the ticket and I'll send you a pi\n. it already works this way.\nThere is no param type json but the anntotations you provide should in fact work in that way.\n. At this moment I'm inclinded to say that this is an optimization with pretty low ROI. But I'll leave the ticket open, and if more people want it they should put their +1 here.\n. It was never spelled out in this thread why it is the way it is, so here it goes:\nThe reason a body struct is wrapped atm is because for swagger a response is headers + body, and so my scanner wants to preserve that behavior.\nI wouldn't refuse a PR that addresses this through a swagger:bodyResponse annotation instead of swagger:model or swagger:response\n. I think it would mostly mean getting a consumer and producer for protobuf. (json: https://github.com/go-swagger/go-swagger/blob/fada99442c6b8ca0d1dd46762d7fcfb2f20a5583/httpkit/json.go)\nhttps://github.com/go-swagger/go-swagger/blob/fada99442c6b8ca0d1dd46762d7fcfb2f20a5583/generator/support.go#L346-L360\nAnd adding struct tags to the fields:\nhttps://github.com/go-swagger/go-swagger/blob/fada99442c6b8ca0d1dd46762d7fcfb2f20a5583/generator/templates/structfield.gotmpl#L2\nhttps://github.com/go-swagger/go-swagger/blob/fada99442c6b8ca0d1dd46762d7fcfb2f20a5583/generator/templates/schemabody.gotmpl#L6\nThere are cases where you'd have to provide a custom serializer (allOf) (you can generate anonymous structs etc to get the right protobuf out).\nhttps://github.com/go-swagger/go-swagger/blob/fada99442c6b8ca0d1dd46762d7fcfb2f20a5583/generator/templates/tupleserializer.gotmpl\nhttps://github.com/go-swagger/go-swagger/blob/fada99442c6b8ca0d1dd46762d7fcfb2f20a5583/generator/templates/additionalpropertiesserializer.gotmpl\n. On the server this would probably look something like this: https://github.com/go-swagger/go-swagger/blob/2e7f0243284c49d83ba0a2329426dee4755672b6/amqpkit/server.go\n. yes it is of great interest to me. Added an appveyor build. \nThe build runs but there are all kinds of test failures at this point. https://ci.appveyor.com/project/casualjim/go-swagger\nI think some have to do because of the filepath helper usage when resolving refs.\nPlease help with getting this tool to work on windows if you require it\n. thanks to @faguirre1 for making the builds work on windows!\n. yeah that would be the client generated or at least the runtime for the generated client.\n. k will close this ticket then :)\nThanks for the info!\n. can you add a test in the type resolvers tests that makes sure the isNullable method works for both keys?\nMostly to have this behavior described by tests so that people don't accidentally delete it in the future as part of unrelated work.\n. this is a new issue or at least it's different from the one that's reported. But it is a bug\n. is this an issue? because because each PricingComponent implementation will have its own MarshalJSON and UnmarshalJSON implementation.\nhave you seen it actually output bad data?\n. The default value in this spec should be an object not a string. The error message could be better though.\n. :+1: Thanks a lot  \ncontributes to https://github.com/go-swagger/go-swagger/issues/153\nThere are probably a few more issues for running this on windows\n. I want to have a first release out by january. Now this is largely a volunteering effort so I don't want to commit to an actual date, for as long as there aren't many people contributing to this repository.\nIt says the project is sponsored by vmware, but that mostly means that I get to work on it from time to time during working hours. I have other responsibilities there too so it's not like they let me work in it full-time.\nI've made 3 initial milestones for this project and I'm still working on the first one, which is arguably the hardest one because it needs to get the spec implementation ready.\nAt this point the API is largely stable, there are a few things to iron out in models code generation, and as you're aware certain things are passing validation and they don't necessarily have to.\nSo in short, I'm looking for help :) the more help I get the quicker the releases come. Submitting bugs is already great help. \nhttps://github.com/go-swagger/go-swagger/milestones\nWith the exception of showstoppers the issues for the \"first release milestone\" are frozen.\n. There are binary releases available now. You can get swagger in a variety of ways without having to build it from source.\n. yeah you're right. I'll remove it again, forgot I went with Nr instead.\nI wanted to translate things like 16x16 to SixteenBySixteen and 16+16 to SixteenAndSixteen but decided too much clever\n. Thanks :+1:\n. thanks @aleksandr-vin :+1: \n. when a value is marked allowEmptyValue then the key should be sent. It is a hint for nullability, for some applications the absence of a key is treated different from the absence of a value.  \nSo is the issue you're describing here with an allowEmptyValue of true or false?\n. then the code that is generated is the code that it should generate. If you don't want it to add the key to the request, the spec should be defined with not required and   allowEmptyValue of false.\n. can this be closed?\n. going with yes because of crickets\n. There is an example at the bottom of this page: \nhttp://goswagger.io/generate/server/\n. thanks :+1: \n. not a priority because it essentially means a rewrite of runtime/middleware to accomodate the request/response of fasthttp.\nOther than that there is already a compatibility layer in fasthttp which allows it to serve plain http.Handler which we expose already. The spec you linked doesn't actually validate:\ngit:(master) \u2717 !? \u00bb swagger validate https://gist.githubusercontent.com/mephux/474d9512cbe54411900f/raw/126932f41177b76df44bbd1199f22ad6a28ff2a8/kube.json\nThe swagger spec at \"https://gist.githubusercontent.com/mephux/474d9512cbe54411900f/raw/126932f41177b76df44bbd1199f22ad6a28ff2a8/kube.json\" is invalid against swagger specification 2.0. see errors :\n- object has no key \"integer\"\nSo in that spec I see a bunch of $ref: \"integers\" that shouldn't be the case. Those should be types not $refs.\nOnce you include a $ref in a json object the rest of the json object has to be ignored, those are the json schema rules.\n. Currently my validator isn't super fast but you're right I should make it validate before generating and let people opt-out by specifying --skip-validation\nThe main reason for a spec needing to be valid is that there are a some rules that have to be followed and having a valid spec ensures that those are consistent.\nSo in terms of figuring out what is wrong I'd say it starts with a valid spec doc :).\n. This ticket is labeled with raspberry pi 3 bounty. Solve the ticket and I'll send you a pi\n. implemented by allowing people to provide their own http client go-openapi/runtime#21. turned into\n``` shellsession\nUsage:\n  swagger [OPTIONS] init spec [spec-OPTIONS]\nHelp Options:\n  -h, --help                   Show this help message\n[spec command options]\n          --format=[yaml|json] the format for the spec document (default: yaml)\n          --title=             the title of the API\n          --description=       the description of the API\n          --version=           the version of the API (default: 0.1.0)\n          --terms=             the terms of services\n          --consumes=          add a content type to the global consumes definitions, can repeat (default: application/json)\n          --produces=          add a content type to the global produces definitions, can repeat (default: application/json)\n          --scheme=            add a scheme to the global schemes definition, can repeat (default: http)\n          --contact.name=      name of the primary contact for the API\n          --contact.url=       url of the primary contact for the API\n          --contact.email=     email of the primary contact for the API\n          --license.name=      name of the license for the API\n          --license.url=       url of the license for the API\n```\n. fixed by 82666990b023f668ea6d7f4bfb3ffbcb7c95d3ac\n. duplicate of #175 \nand I can't reproduce this with the code on master\n. The 3rd case is an invalid case because you can't use $ref in that position according to the swagger specification json schema.\n. And thanks for this very nice bug report btw. \n. Take a look here for easily turning builtin literals to pointer values:\nhttps://github.com/go-swagger/go-swagger/blob/master/swag/convert_types.go\nIn the spec you shared application/json and application/json; charset=utf-8 are the same thing. In fact when a mime type starts with application it's kind of expected that the content it describes is unicode. So you should be able to safely drop the charset=utf-8 from the media type.\n. I know what the issue is, but the fix is less than trivial. The crux of the issue is that the spec uses definitions that nest allOf with additionalProperties and discriminators and the spec nests those. \nThanks for this spec!\n. I've added this spec to my canary tests, meaning on every CI build it will try to generate a client and server for this specification and compile it with go test ./...\nit would be great if you could send a PR when you update your spec, so that we can be reasonably sure that we don't break bitbucket client generation again in the future.\nhttps://github.com/go-swagger/go-swagger/blob/master/fixtures/canary/bitbucket.org/swagger.json\n. closed by PR #199 \n. :shipit:\n. thanks for this, cleaner solution I had in mind.\n. when you send a signal (SIGINT, SIGQUIT) to shut it down to your program. It functions as a finalizer when for example ctrl-c is pressed. It's where you cleanly release file handles etc. you're on windows right? There is a config key for it:\nhttps://youtrack.jetbrains.com/issue/PY-17252. :shipit:\n. Thanks a lot :100: \n. :shipit:\n. :100: Thanks a lot!\n. :shipit:\n. if you make map a slice I'm all for it. That retains ordering\n. yeah that's great. \nYou I have a package called swag where I put everything I don't have a proper home for. Perhaps it could go in there?\n. :shipit:\n. :shipit:\n. :shipit:\n. thanks :100: \n. :+1:\n. This folder uses most of the annotations\nhttps://github.com/go-swagger/go-swagger/tree/master/fixtures/goparsing/petstore\n. Q1: nope it needs to be declared in the same app and it needs to be imported so that goswagger can find it by following imports starting at the main package.\nQ2: you would add all of them in the parameter struct at this moment, in the case of parameters you would add a doc comment: // in: path. Take a look at some of the generated code examples because they contain all the known annotations as well.\nQ3: not case sensitive, didn't want to have debates over casing. Whatever looks good to you in docs is what you can use.\n. only when it's used in a discriminator IIRC. There is code in the scan package that treats nullary methods as properties if certain conditions are met.\n. you still need to add enlist a struct as parameters for the operation.\nhttps://goswagger.io/generate/spec/params.html\n. I don't think that is supported at the moment. lgtm\n. LGTM perhaps\n. so we should make sure that our file naming doesn't end with _test I suppose?\n. fwiw if this is a for a JSON API then you shouldn't send or receive primitives. Only [] and {} are valid JSON objects.\nI'll look into fixing this issue though\n. it's accepted as bug already ;)\nI will try to get to it this week. the template should not render the validate method unless it's a named type or a complex object with properties.\nThe fix will have to go here somewhere: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/server/parameter.gotmpl#L162-L183\n. I've got a fix in this PR for this issue, so I'm closing this PR\nhttps://github.com/go-swagger/go-swagger/pull/229\n. Excellent question!\nPersonally I'd err on making it not panic (although I think you'll find a comment about a panic middleware should handle this), but also not allowing bodies in DELETE.\nI can however come up with a use case for it that makes sense. Let's say your a search engine of some sort and you want to allow for a query document to govern the selection for what needs to get deleted. In that case the body would make a lot of sense. So contrary to what I want out of principle my vote goes to option 1.\n. lgtm\n. Excellent contribution :+1: \nDo you think it would be possible to defer loading the template until it is used for the first time?\nI think it would be nice if you ended up with a workflow where you just have to provide the templates or partials you wanted to override and it would use the embedded ones for the things that don't exist on disk.\nIf you think that's too much work for now that's fine too.\n. LGTM\n. Thanks, I figured I'd merge this already so that at least there is a way to do it. And then it can be improved with another PR\n. On the server this is done for serving the spec up at /swagger.json \nAre you saying you want to optionally exclude a spec and make sure you deploy one with your generated server?\n. oops wrong issue number in commit message\n. LGTM\n. thanks :+1: \n. you can start with an input file. \nI think there is no parser support for the security schemes yet in the comment parser. But you can start with a partial swagger file and then have it merge the discovered (from code) data into the final swagger document.\n. your vendoring manager should flatten this out. \ngo swagger already uses GO15VENDOREXPERIMENT\nam I misreading your question?\n. if your loader project up to date? Does your project compile?\nswagger uses the go build infrastructure, We can check out if there is something that is required to be enable.\n. I've updated the dependencies, there were changes to the golang tools around loader but i don't think it will fix it yet. \nDo you have a repo i can use to reproduce this issue?\n. Thank your for this very complete story.\nCan you also try to upgrade to go 1.5.3 as there were fixes in this area IIRC.\nHow are you adding things to your vendor folder, are you using a particular tool?\nI'll figure something out for supplying pre-built binaries on github and/or bintray as well as a docker container.\nI actually have a similar problem in go-swagger itself where I need to get 3 different dependencies into the gopath but it will happily find all other things.\nhttps://github.com/go-swagger/go-swagger/issues/246\nhttps://github.com/go-swagger/go-swagger/issues/247\n. ok so the problem goes away after a complete clean?\n@solher can you close this issue, if the same fix works for you?\n. I believe glide works with ./vendor/src doesn't it?\nWhen i tried glide I had all kinds of issues, so I started using gvt instead, but ymmv\n. I messed up the issue numbers, but this should be fixed now\n. duplication doesn't matter in generated code it's the same as inlining\nThis is for types (so only objects nothing else) with a discriminator field, it's not meant to be open ended. In fact it's closed within the domain of a spec. All sub types need to be accounted for.\nI don't understand what you mean by 2, can you show an example?. i think this can be closed \n. same comment wrt to naming, from #238\nhttps://github.com/go-swagger/go-swagger/pull/238#issuecomment-175397407\n. thanks :100:\n. I think this has a merge conflict because I can't merge it, github won't let me.\nAfter properly thinking this one through, I think the public interface for the client (contrary that what I said in the slack channel) should use consumers for what is the consumer on the client side, similarly to the producer. \nHowever when we look at the spec to get the defined consumes and produces values the produces values apply to the consumers property of the client and the consumes values apply to the producers property of the client. \nThis removes surprising behavior on the client side and still captures intent from a client perspective, but the spec is defined from the server perspective so there they are inverted in naming. Also we should put this in a comment in the file so that people don't read that code and go wth?\n. I have a hard time reproducing this. When I include the file in my test application it just passes\n. out of curiosity, when it fails did the project compile?\n. I understand this issue exists, but I have trouble reproducing it. So if you do have this issue and you can provide me steps on how to reproduce it, that would be greatly appreciated. \nI can't fix what I can't reproduce, because I won't know if it's really fixed so it becomes a bit like shrodingers cat.\n. if you can add this as a test and PR that'd be great\n. I think treating error as string, that worked for you right.\nI don't think it will fix the issue completely but it definitely fixes some cases\n. it is used for the allOf case and discriminators.\nit only considers methods with no args and a single return argument. \n. that's a great idea\n. wonderful, thanks so much for doing this\n. I wonder if this is still an issue after the merge of #633\n. This appears to be fixed now. I'll close this one, it can always be reopened when somebody runs into it again. I think this is fixed, i didn't close it because I didn't write a test for this yet\n. Cool, perhaps default values, enums and examples can be defined as functions or vars with a naming convention? \nThen the tool can generate json and yaml for them.\nIt also makes it so that people can use code to express them and take advantage of the compiler\n. yes a var works as well, I like this :+1: \n. I'll accept any progress so you can do the simpler plan if you prefer, I was just making a suggestion. I don't want to make it a hurdle to contributing, we can always make it better later\n. perhaps this could be useful for this: https://github.com/japm/goScript\nThere are a few other ones out there that allow string eval of go code.\n. @McSwitch there are people actively working on enum support so you can leave that. Default value support is still not implemented through.\n. same suggestion as in #244 \n. I figured since I'm signing tags, I'd add a pre-commit hook which generates a go file with a version string in there that I can get from git describe. \nshellsession\ngit:(master) \u2717 !? \u00bb git describe\nv0.2.0-163-g11157eb\n. This will build them and potentially publish to github releases https://github.com/laher/goxc\n. there are now binaries provided as github releases, there are deb and rpm packages on bintray and there is a docker container on quay.io\n. I'll count this as a very strong +1 :)\n. forthe file you can use: httpkit.File\nhttps://github.com/go-swagger/go-swagger/blob/master/httpkit/interfaces.go#L24-L28\n. when you say you did go get -u do you mean you did go get -u github.com/go-swagger/go-swagger/cmd/...\nAnother thing I can offer to try is to rebuild with the '-a' flag so that it rebuilds all packages in use.\n. I still have a bunch of serialization errors when I try against the latest 1.6 container.\nI did update my loader tool which was missing some method for version 1.6\n. Would it be possible for you to try with go1.5? \nswagger uses GO15VENDOREXPERIMENT and I think it might not be able to find strfmt which is why it's not \n. I'll publish new binaries tonight but you do need go-swagger in your GOPATH for this to work out. \n. @BlueDragonX go-swagger makes use of goimports to reformat and get the imports for the generated files.  Part of that is optimizing the imports and to discover them properly it wants for them to be in the $GOPATH so goimports can discover them.\nAnyway for strfmt in particular I've aliased them now which will hopefully keep them\n. LGTM\n. :+1: \n. lgtm\n. :+1: \n. :+1: \n. :+1: \n. :+1: \n. closed by linked PR with bad comment\n. lgtm\n. this was meant for #264 \n. lgtm\n. lgtm\n. the spec struct doesn't have to be embedded but it does want it to be a struct.\nis that a problem for you?\n. The reason it is the way it is, is because a response to swagger is headers + body and go-swagger wants to preserve that structure.  In terms of typing effort it's about the same as an approach that uses comments only but you get verification of your types through the compiler. \nduplicate of #140 \n. lgtm\n. lgtm\n. It breaks codegen for quay.io\nI'll look into fixing this before monday\n. superseded by #293\n. agree on all points except the alItems one \nThe since is for all ids since the one provided (so if since is 1 then we want id's 2,3,4 and so on)\nwrt to https, I think it's still useful to include it in the tutorial but perhaps it should be an extra step and some more explanation about what and why?\n\nTo sum it up, I would like to \"clean up\" the tutorial and example source code a bit.\n\nDoes that mean a PR is coming? \n. you can do that today already by just building up the http.Request object and then passing it to the the middleware. Perhaps use the httptest.Recorder to gather the response data\n. lgtm\n. Thanks a lot!\n. lgtm\n. lgtm\n. lgtm\n. :+1:\n. lgtm\n. lgtm\n. lgtm\n. lgtm\n. lgtm\n. I want to write a test for this, is this scenario correct:\nYour server sends 301's for items that come in without a trailing slash? \nNitpick: according to the spec on URI's the 2 are equivalent, so why not just catch it with routing logic? That being said, I've seen many go based APIs not handle calls with a trailing slash. (eg. https://ci.vmware.run/go-swagger/go-swagger vs https://ci.vmware.run/go-swagger/go-swagger/)  which makes me even more confused.\nI doubt that I will be able to remove the usage of path.Join but I'll try to preserve a trailing slash should it exist.\n. If you add a test for that code you have a PR I'd gladly accept :)\n. lgtm\n. lgtm\n. lgtm\n. Thanks a lot for this btw\n. lgtm\n. lgtm\n. lgtm\n. lgtm\n. Thanks for this, unfortunately it needs to be rebased or something because I can't merge it automatically\n. lgtm\n. lgtm\n. what is the method it uses where it leaves out Accept?\n. HTTP method :) GET/POST/PUT/DELETE\nAnyway it's a bug in swagger where it should use / as default I guess\n. thanks for the suggestion\nThere is this folder:\nhttps://github.com/go-swagger/go-swagger/tree/master/docs/content\nAnd that is a hugo site that gets pushed to\nhttps://github.com/go-swagger/go-swagger.github.io\nI can make it all work from the go-swagger.github.io repo in a gh-pages model though if that is preferred\n. I've moved the sources of the documentation to the website repository.\nhttps://github.com/go-swagger/go-swagger.github.io/tree/source\nYou can send pull requests there should you want to edit the website\n. swagger model allows you to override the name inferred from the struct type should you so desire. \n. If you want a model to be picked up you just use it in a struct decorated with swagger:parameters or swagger:response.  \nthe swagger:model is useful during spec generation when you want to override a name for example:\ngo\n// swagger:model\ntype User struct {\nresults in: \nyaml\ndefinitions:\n   User:\n     type: object\nbut \ngo\n// swagger:model user\ntype User struct {\nresults in: \nyaml\ndefinitions:\n   user:\n     type: object\nto use it in a response:\ngo\n// swagger:response userFound\ntype UserFound struct {\n   // in: body\n   Body User\n}\n. ok thanks. I'll try to get to this bug this week\n. I have a test for this: https://github.com/go-swagger/go-swagger/blob/master/fixtures/goparsing/classification/operations/responses.go#L150-L164\nwould it be possible to give me project with the file layout you have? I can't reproduce the error you have, without more info.\n. I use go 1.6\nAnd this toolkit is built and tested against 1.5 and 1.6\n. sorry this is a copy/paste error i hope i fixed it now\n. We could add an extension like: x-strict and that would then make the string comparison use equalfold. \nI do think both options should be supported because I think that typically enums are an exhaustive list of strict values; but at the same time I think you have a valid use case.\n. operations in the generated server are expected to return a responder.\nThis interface is defined as:\ngo\n// Responder is an interface for types to implement\n// when they want to be considered for writing HTTP responses\ntype Responder interface {\n    WriteResponse(http.ResponseWriter, httpkit.Producer)\n}\nWith 83807e5 I've added a middleware.ResponderFunc helper construct so you can just write a func(http.ResponseWriter, httpkit.Producer) where you want a streaming response.\nI hope this is sufficient; I've toyed with a channel based stream where you send struct objects to a channel which then gets streamed to the browser. I decided against this because it seemed to just add complexity for little benefit. I can be persuaded to implement such a responder though, and should somebody send a PR like that I would not say no to it.\n. I think this is the expected behavior:\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec7.html#sec7.2.1\n\nAny HTTP/1.1 message containing an entity-body SHOULD include a Content-Type header field defining the media type of that body. If and only if the media type is not given by a Content-Type field, the recipient MAY attempt to guess the media type via inspection of its content and/or the name extension(s) of the URI used to identify the resource. If the media type remains unknown, the recipient SHOULD treat it as type \"application/octet-stream\".\n\nSo I think the swagger specification should have a consumer for application octet-stream for those routes.\nI added support for using io.Reader and io.Writer interfaces to produce bytestreams.\nhttps://github.com/go-swagger/go-swagger/commit/2e4ece7ef6e618f2566bfa7c67e932097f449365\n. lgtm\n. lgtm\n. lgtm\n. lgtm\n. lgtm\n. lgtm\n. lgtm\n. lgtm\n. lgtm\n. lgtm\n. lgtm\n. I have a branch for this but I couldn't reproduce your issue. Can you check if it's ok now?\n. you use fragments on the server?. it would work if you were to use query string syntax. fragments in uri's are a client only construct and as such we don't support those in our path syntax currently. So with ? instead of # it should work. this was fixed by: https://github.com/go-swagger/go-swagger/pull/324\n. lgtm\n. lgtm\n. most of them are due to go's maps being unordered, they aren't actual changes. And you're right I should run regen-samples more often\n. lgtm\n. lgtm\n. lgtm\n. can you move the swagger:model annotation to be the last line in the doc comments for a struct?\nAlternatively, i see some definitions for responses in your specification document. But no matching swagger:response definitions structs.\n`` go\n// swagger:response errorResponse\ntype ErrorResponse struct {\n  // in: body\n  Body struct {\n    Message stringjson:\"error,omitempty\"`\n  }\n}\n// swagger:response validationError\ntype ValidationError struct {\n  // in: body \n  Body struct {\n    // required: true\n    Message string json:\"error,omitempty\"\nField string `json:\"fieldName,omitempty\"`\n\n}\n}\n// swagger:response someResponse\ntype SomeResponse struct {\n  // in: body\n  Body *User json:\"body,omitempty\"\n}\n```\nI added an option to the swagger generator today (--scan-models) which should make models be picked up, regardless of whether they're in use somewhere else or not.\nPerhaps that will work. It's late where I live but I'll try your code tomorrow to see if I there is more work needed.\n. lgtm\n. lgtm\n. lgtm\n. lgtm\n. lgtm\n. lgtm\n. - a $ref property takes over that entire object\n- a parameter is pointing to a schema you can use a parameters top level property.\nhttps://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#fixed-fields\nSo if you want to share parameters you can define it in the parameters top level property and do something like:\nparameters:\n  sid:\n    in: query\n    required: true\n    type: integer\n    format: int64\n/get_main_object:\n  get:\n    tags:\n      - maindata\n    parameters:\n      - $ref: \"#/parameters/sid\"\n. at least for json this could be helpful: https://github.com/ajeddeloh/go-json. can you add the relevant pieces of the swagger spec or a version that is similar?\n. lgtm\n. this is a confirmed issue with go imports\n. the spec here says that it's a string. the type says string\n. lgtm\n. lgtm\n. thank you for using and improving the tool, sir!\n. parent: #183 \n. parent: #183\n. I think you can use '-c slmpclient' to this effect. That would generate each client in their own package but the models would still be shared\n. related: #159, #331\n. lgtm\n. lgtm\n. this only panics when there is no body correct?\n. Would it be possible to give me steps to reproduce? When does the panic occur?\nI would like to see the stack trace of the panic. \nif possible also a minimal version of the spec. \n. fwiw and for other people reading this bug. \nAn error resulting from user error (in this case because the user has not supplied the body) should always be in the 4xx range. \n5xx range is reserved for errors where the system is to blame.\nPlease next time provide clear steps/data to reproduce, it helps a lot. Things that help are the swagger spec or a minimal swagger spec to reproduce the issue. And perhaps the request you sent it, it's hard to read minds. \n. fixed by https://github.com/go-swagger/go-swagger/pull/393\n. this broke json schema tests: https://ci.appveyor.com/project/casualjim/go-swagger/build/0.1.409-gdolumaf#L1122\n. o but I really like the PR so if you can make it pass tests I'm more than happy to merge it. Sounds like a lot of work went into it\n. lgtm\n. I wonder why there is a stack overflow in go 1.5 for this but it's fine in 1.6\n. hey I just saw which project this is for. Very cool!!!!  :fireworks: \nLooks like a very nice approach to the API mess.  We have a slack in case you want to influence direction a bit more: https://slackin.goswagger.io/\n. superseded by https://github.com/go-swagger/go-swagger/pull/393\n. I think that's the way to do it.\nAt some point I included an embedded version of the swagger-ui in this toolkit but it became annoying to keep up to date and severely bloated the size of my binary.\n. I'm reluctant to do so at this point in time because a git submodule break go-gettability.\nI've had it included at one point but it's so much of a moving target that it would always be outdated. On top of it it are a lot of javascript and html files and people haven't been over the moon when go-swagger gets vendored and they see all of that.\nNow after a refactor #420 is complete I think there might be a way to bring this functionality back because it becomes opt-in\n. lgtm\n. lgtm\n. lgtm\n. lgtm\n. lgtm\n. lgtm\n. :+1: \n. thanks for the contribution but this breaks the build. There is a panic with a stackoverflow\n. superseded by: #387 \n. :+1: \n. lgtm\n. duplicate of #384\n. :+1: \n. tl;dr The main difference at this moment is that this one will actually work.  \nThe swagger-codegen project only generates a client and even there it will only support flat models.\n- This project supports most features offered by jsonschema including polymorphism.\n- It allows for generating a swagger specification from go code. \n- It allows for generating a server from a swagger definition and to generate an equivalent spec back from that codebase.\n- It allows for generating a client from a swagger definition.\n- It has support for several common swagger vendor extensions.\nWhy is this not done in the swagger-codegen project? Because:\n- I don't really know java very well and so I'd be learning both java and the object model of the codegen which was in heavy flux as opposed to doing go and I really wanted to go experience of designing a large codebase with it.\n- Go's super limited type system makes it so that it doesn't fit well in the model of swagger-codegen\n- Go's idea of polymorphism doesn't reconcile very well with a solution designed for languages that actually have inheritance and so forth.\n- For supporting types like [][][]map[string][][]int64 I don't think it's possible with mustache\n- I gravely underestimated the amount of work that would be involved in making something useful out of it.\n- My personal mission: I want the jvm to go away, it was great way back when now it's just silly (vm in container on vm in vm in container)\n. landing page of goswagger.io ? or the readme? \n. I'll check what can be done to support this use case. \nI've seen the conversations about this on the swagger spec. I don't think swagger 2.0 actually allows query strings in the swagger spec. \nBut I agree it's a useful thing to have because you can group parameters / responses etc this way. \n. Could you add a test that proves it works?\n. :+1: \n. this needs an update\n. lgtm\n. lgtm\n. :+1: \n. this was fixed on 0.6.0\n. :+1: thanks!\n. You can use the template config file to that end: https://goswagger.io/use/template_layout.html#server-generation. @e-nikolov the custom-templates predate the config driven approach, we kept them so that we wouldn't break codebases who were already using them. duplicate of #300 ?\n. this was fixed in 42bbea36acba818fbc269e19f625316c1a0e15fc\n. which go version are you using?\nAre you using vendoring?\n. for this you require export GO15VENDOREXPERIMENT=1\n. and also does your application compile? because go-swagger makes use of the same code the go compiler/imports/... etc use to discover all the involved packages. So I think it requires your code to be mostly compilable to be able to discover everything.\nHowever the errors seem to be related to it not being able to discover the dependencies\n. are you running the swagger command in the package that contains your main function?\n. would it be possible to share your code in some way, it can be done privately if you're concerned about making it public. I just want to understand this issue better\nI have a slack team (https://slackin.goswagger.io) and I'm Ivan Porto Carrero in the gobridge slack team\n. @gsquire  do you have a gopath set up? Does that code compile?\n. I have problems getting this reproduced:\n``` shellsession\n\u00b1 ivan@paradox:~\n \u00bb md /tmp/genbug  \n\u00b1 ivan@paradox:~\n \u00bb cd /tmp/genbug \n\u00b1 ivan@paradox:/tmp/genbug\n \u00bb curl -OL'#' https://gist.githubusercontent.com/gsquire/cce277b4bd10ba283f4522e896dc91d6/raw/200e1e295574766ad8566af86bb562f15bc33cdf/test-swagger.go\n################################################################## 100.0%\n\u00b1 ivan@paradox:/tmp/genbug\n \u00bb ls\ntest-swagger.go\n\u00b1 ivan@paradox:/tmp/genbug\n \u00bb swagger generate spec -o swagger.json \n\u00b1 ivan@paradox:/tmp/genbug\n \u00bb ls\nswagger.json  test-swagger.go\n\u00b1 ivan@paradox:/tmp/genbug\n \u00bb cat swagger.json \n{\"produces\":[\"application/text\"],\"schemes\":[\"http\"],\"swagger\":\"2.0\",\"info\":{\"description\":\"The purpose is to demonstrate swagger docs for a test app.\"},\"host\":\"localhost\",\"paths\":{},\"definitions\":{}}%  \n```\n. That was linux, here's my mac. My go is also installed through homebrew\n``` shellsession\n\u00b1 ivan@aether:~\n \u00bb md /tmp/gendebug\n\u00b1 ivan@aether:~\n \u00bb cd /tmp/gendebug\n\u00b1 ivan@aether:/tmp/gendebug\n \u00bb uname -a\nDarwin aether.local 15.4.0 Darwin Kernel Version 15.4.0: Fri Feb 26 22:08:05 PST 2016; root:xnu-3248.40.184~3/RELEASE_X86_64 x86_64\n\u00b1 ivan@aether:/tmp/gendebug\n \u00bb go env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/ivan/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/1.6.1/libexec\"\nGOTOOLDIR=\"/usr/local/Cellar/go/1.6.1/libexec/pkg/tool/darwin_amd64\"\nGO15VENDOREXPERIMENT=\"1\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\n\u00b1 ivan@aether:/tmp/gendebug\n \u00bb curl -OL'#' https://gist.githubusercontent.com/gsquire/cce277b4bd10ba283f4522e896dc91d6/raw/200e1e295574766ad8566af86bb562f15bc33cdf/test-swagger.go\n################################################################## 100.0%\n\u00b1 ivan@aether:/tmp/gendebug\n \u00bb ls\ntest-swagger.go\n\u00b1 ivan@aether:/tmp/gendebug\n \u00bb swagger generate spec\n{\"produces\":[\"application/text\"],\"schemes\":[\"http\"],\"swagger\":\"2.0\",\"info\":{\"description\":\"The purpose is to demonstrate swagger docs for a test app.\"},\"host\":\"localhost\",\"paths\":{},\"definitions\":{}}\n\u00b1 ivan@aether:/tmp/gendebug\n \u00bb\n```\n. did you install your go from source perhaps? because your goroot seems different from mine\n. lgtm\n. If you update to what's on master today the layout has changed a bit of the generated code. It contains PR #392  which should address this specific issue.\nI'll make a new release this weekend.\n. lgtm\n. this branch is out of date :( it needs a rebase\n. :shipit: \n. this needs an update before it can get merged\n. lgtm\n. you can rename the model in the json with the swagger:model doc tag on the response data struct, that would get you the expected output\n`` go\n// swagger:response SuccessResponse\ntype SuccessResponse struct {\n   // In: body\n   Data ResponseDatajson:\"data\"`\n} \n// swagger:model SuccessResponse\ntype ResponseData struct {\n   Field1 string json:\"field1\"\n   Field2 string json:\"field2\"\n}\n```\n. lgtm\n. Getting this to work on on the client should be supported today.  But the server is missing the bits for the client auth to be validated.\nfor the client part:\nhttps://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/client/todo_list_client.go#L23\nthat transport that gets created has a Transport property which is a http.RoundTripper. This should not be very hard to add to go-swagger.\nhttps://github.com/go-swagger/go-swagger/blob/master/httpkit/client/runtime.go#L47\n. I think this might be fixed by 53c4f85\n. yes that went in as well. generated code now has access to *http.Request and gorilla context is already in use by go-swagger itself.\n. lgtm\n. lgtm (rebase)\n. lgtm\n. lgtm\n. hey @jredville, that's been a long time!\nI think you have to annotate with \n// swagger:strfmt uuid\nhttp://goswagger.io/generate/spec/strfmt.html\n. swagger has support for uuid out of the box.\nI think all you do is annotate your type with swagger:strfmt uuid\nI don't have an explicit test for this particular structure, but when I read the code I think that would do it\n. :shipit: \n. :shipit: \n. lgtm\n. lgtm\n. Lgtm\n. This repository should only contain the code that is directly used by the executable. Things that are being used as library constructs will move into their own stand-alone packages.\nI want to squash several issues here:\n1. move the yaml dependency out into packages so that it doesn't automatically turn your application into an LGPL application and swagger (executable) can be classified as a build tool.\n2. turn the swag package into its own repo\n3. move jsonpointer package to its own repo\n4. move jsonreference package to its own repo \n5. separate spec package into a 2 repos:\n   1. the spec object model\n   2. analysis package that takes care of analyzing swagger specifications and provides an index to be used by other packages.\n6. move validation into its own repo\n7. move examples to their own repo\n8. move httpkit into its own repo\nThese repos will get created under the go-openapi org instead of the go-swagger org due to the rename of the specification.\n. I've begun work on this, might not be exactly what I laid out in the previous comment but it will be close. I hope it won't take me longer than a weekend to complete this.\n. ontucker yes I got that requirement. this is about the go-swagger codebase itself.\nFor your requirement I think the server that gets generate will get an interface passed in with 3 hooks for lifecycle events: starting/configuring/stopping\nI like the example suggestion\n. I've moved most of the supporting code for to command to separate repos as well as applied a restructuring for yaml\nThe only thing I didn't do was remove the examples from this repo, because I think they are still kind of appropriate in this repo.\n. it's not that I don't want to support it, just haven't been able to get to it. If somebody adds it as a PR I'd be more than happy to merge it.\ngithub issues is my google group, I don't want to have the information fragmented in several locations. So discussions/questions are just issues tagged with question.\nThere is a slack channel if you want to have a more interactive back and forth. But even then I would like that information to be captured in my issues here too so that it benefits other users as well.\nrelated: #9\n. This ticket is labeled with raspberry pi 3 bounty. Solve the ticket and I'll send you a pi \n. I haven't been able to get to this, but i welcome PR's \n. :+1: \n. functionality included by #683\n. lgtm\n. I've cherry-picked this commit onto another branch, so closing this PR\n. :shipit: \n. lgtm\n. :shipit: \n. feel free to send this as  a PR\n. closed by #432 \n. When you start the process you can specify them as arguments of environment variables.\nYou can also override the scheme by specifying --scheme http\n. I just added a readme doc, but I'm running through the rest of the tutorial to see if it all still works.\nIt will be fixed today. that is correct, which is why I haven't pushed my updates yet. Stay tuned will take a little while to get his back in shape. once #1015 is merged the tutorial will work again. lgtm\n. :shipit: \n. is there something that can be worked out to get gentoo support included in the release process?\n. :+1: \n. hi don't worry about circleci and appveyor, I should remove them because they typically timeout.\n. lgtm\n. Thanks!\n. :+1: \n. thanks!\n. duplicate of #483\n. lgtm\n. Wrap it in another struct and decorate the property with in: body\ngo\n// swagger:response Response\ntype ResponseWrapper struct {\n  // in: body\n  Body Response \n}\ntype Response struct {\n  ResultCode string json:\"code\"\n  Message string json:\"message\"\n  ScanId string json:\"scan_id\"\n  Filesize string json:\"filesize\"\n  ContentType string json:\"content_type\"\n  ScanResultUrl string json:\"scanresult_url\"\n}\n. you can marshal instance.Body instead can't you? \nIn fact you don't even have to instantiate the response wrapper. You can think of it as type checked documentation perhaps?\n. interest I have, it's often requested. I just don't have enough time to do all the things. so I'm not opposed to a pull request that makes this work.\nperhaps with an annotation like swagger:responseBody\nThe main thing is the response stuff needs to exist, but we can create extra syntax to support unwrapped bodies. A swagger response is headers + body so that's why there is the requirement for wrapping at this moment.\nWhat I mostly want to avoid is duplicating type information in doc comments, seems a waste of a perfectly good compiler.\n. this is the code that governs the response parsing:\nhttps://github.com/go-swagger/go-swagger/blob/master/scan/responses.go#L122\nperhaps an easy way to do this is to check for both in: Body and swagger:response annotations to be present. If they are then the type should be wrapped in a response without headers.\n. Somebody sent a PR for this last week, so on master this feature should be available.\nhttps://github.com/go-swagger/go-swagger/commit/2f75b5703263c3565dc9aea4e15e0346471d35e2\n. @bfirsh the issue is that when you don't have those structs, you're not documenting headers in your contract. A very common case for this is something like request id. \n. you can if you use 200: body:ModelName\nwe also since have added swagger:operation which gives you the ability to just write the yaml for the operation you're describing. you will also need to add -m to generate spec swagger generate spec -m .... lgtm\n. lgtm\n. this is a bug in the scanner, it should consider other chars.\nhttps://github.com/go-swagger/go-swagger/blob/master/scan/validators.go#L488\nthat should probably use a different regex to capture those values.\n. lgtm\nsorry I fixed those in anohter branch\n. lgtm thanks!\n. it won't know that those things are primitives to begin with. it wouldn't know how to turn that into a swagger schema I think. \nIf you want nullable without changing the way swagger works today, this would work:\ngo\n// swagger:model\ntype Community struct {\n    Sid                string `json:\"sid\"`\n    Designjson      interface{}\n    Status             *string\n    Xdate              *string\n}\n. After deliberating on this for a while. i don't think it's within swaggers goals to provide structs you can persist in the database. I don't want to write an orm, my goals are to provide API boundary contracts.\nThe database is the opposite end of that. \nNow that being said this ticket led to #476 and I do think there is value for us to provide support for nullable and set/unset values however compatibility with persistence layers is outside the goals of the project. \nI know this is probably not the answer you wanted but API boundary contracts are fickle enough without having to deal with database serialization.\nI will leave this thread open, so other people can chime in and let their opinions be known.\n. is this different from #453 ?\n. superseded by merge of #431 \n. The trade-off that will be made with that is that you can't really validate requiredness on builtins without turning them into pointer values.\n. yes you're right, it's not supposed to generate code that looks like that because it's nullable. \nYou can still go back to the tagged release though right?\n. I get different code generated when I try this. For me there is no dereferencing and it considers nil.  This makes me wonder if the templates need to be regenerated for you.\nthe spec: https://github.com/go-swagger/go-swagger/blob/fa3e773f7ab6ec88bc3a6d9a3cd7bea8b0ef7b76/fixtures/codegen/todolist.models.yml#L28-L35\nthe test:\nhttps://github.com/go-swagger/go-swagger/blob/fa3e773f7ab6ec88bc3a6d9a3cd7bea8b0ef7b76/generator/model_test.go#L1616-L1637\n``` go\npackage models\n// This file was generated by the swagger tool.\n// Editing this file might prove futile when you re-run the swagger generate command\nimport (\n  strfmt \"github.com/go-swagger/go-swagger/strfmt\"\n\"github.com/go-swagger/go-swagger/errors\"\n  \"github.com/go-swagger/go-swagger/httpkit/validate\"\n)\n/*NewProfile new profile\nswagger:model newProfile\n*/\ntype NewProfile struct {\n/* id\nRequired: true\n  /\n  ID int64 json:\"id\"\n}\n// Validate validates this new profile\nfunc (m *NewProfile) Validate(formats strfmt.Registry) error {\n  var res []error\nif err := m.validateID(formats); err != nil {\n    // prop\n    res = append(res, err)\n  }\nif len(res) > 0 {\n    return errors.CompositeValidationError(res...)\n  }\n  return nil\n}\nfunc (m *NewProfile) validateID(formats strfmt.Registry) error {\nif err := validate.Required(\"id\", \"body\", m.ID); err != nil {\n    return err\n  }\nreturn nil\n}\n```\n. please consider the opposite case, where you want to validate the struct not the json.  This use case is real on generated clients.\nHow do you distinguish between value-set and value-unset? \n. @dolmen that behavior invalidates the required bit of the contract because if something isn't present but required then you don't get that error message. So why have the requirement there at all, if you want to catch it with another validation.\nI'm not very happy with the way this is currently working. And it still is an issue for patching objects because with pointers we don't know if it was actually a value that was set or if it was a value that's nil.\nSo i think this will have to change one more time to use nullable types where set/unset is a property on the type. \nThat keeps GC pressure lower, but I think that might create a need for 2 structs. \nOne is the binding/validating struct and the second one is the one the user actually uses because a nullable type would kind of look like\n``` go\ntype NullableBool struct {\n  value bool\n  IsNull bool\n  WasSet bool\n}\nfunc (n NullableBool) Value() bool  {\n  if nIsNull {\n    return nil\n  } \n  return &n.value\n}\n```\nThe biggest benefit we derive from this is the ability to do patches on objects\n. lgtm\n. lgtm\n. recursion should be supported in the way you write it here. But currently it might end up with a stack overflow when you use it in a response or param \nduplicate of #442 \n. I think you fixed this now, can this be closed?\n. I run tests locally like this:\ngo test $(go list ./... | grep -v vendor)\nAnother way to do it is:\ndocker build -t go-swagger:local -f Dockerfile.ci .\ndocker run --rm -it go-swagger:local ./hack/build-docker.sh\nAnd the last way to do it is:\ndrone exec\n. I think writing a test for this would only matter for the client generation stuff. The BasePath property is used in the client facade\nit looks a bit like these tests: https://github.com/go-swagger/go-swagger/blob/master/generator/operation_test.go#L301-L375\nthe template for that is: clientFacadeTemplate\nand you're checking if this bit renders correctly: transport := httptransport.New({{ printf \"%#v\" .Host }}, {{ printf \"%#v\" .BasePath }}, {{ printf \"%#v\" .Schemes }})\n. lgtm \nI go by the drone one, I should remove the circle one I won't be using it anymore going forward.\n. Thanks a lot!\n. lgtm\n. this was fixed differently, but the functionality exists now\n. cool! look forward to it \n. lgtm\n. lgtm\n. lgtm\n. I think perhaps a better solution is to add a companion field instead of making new types.\nThis companion field would describe the value like nullable and so forth and at the same time also contain if the value was set or unset from an unmarshal step.\nThis would enable the patch use case where you need that level of information, allow for richer knowledge about a type but at the same time not break existing code.\n. ok but how do you support the PATCH http method? for those there is a distinction required between null and (un)set \n. I'm a fan of the bitset idea, thanks @alecholmes \n. I think this is what the generated code will look like. I now have to generate a custom serializer so I'm using mail.ru's easyjson classes to make an optimized custom de/serialization.\nThere will never be pointers for builtins or strfmt types.\nThere is a setter for each type that allows for manipulating the bitsets too.\nThere are additional helper methods to manipulate the bitset values one by one.\nThe original type used in the example:\nhttps://github.com/go-swagger/go-swagger/blob/4b4f832be2b3869d0ecfd5baa9fda046696d9712/examples/todo-list/models/item.go\n``` go\npackage models\n// This file was generated by the swagger tool.\n// Editing this file might prove futile when you re-run the swagger generate command\nimport (\n    strfmt \"github.com/go-openapi/strfmt\"\n    jlexer \"github.com/mailru/easyjson/jlexer\"\n    jwriter \"github.com/mailru/easyjson/jwriter\"\n\"github.com/go-openapi/errors\"\n\"github.com/go-openapi/validate\"\n\n)\n/*Item item\nswagger:model item\n*/\ntype Item struct {\n    __setValues bitmap\n    __nulls     bitmap\n/* completed\n */\nCompleted bool `json:\"completed,omitempty\"`\n\n/* description\n\nRequired: true\nMin Length: 1\n*/\nDescription string `json:\"description\"`\n\n/* id\n\nRead Only: true\n*/\nID int64 `json:\"id,omitempty\"`\n\n}\nfunc (m *Item) FlagCompletedSet() {\n    m.__setValues.set(0)\n}\nfunc (m *Item) FlagCompletedUnset() {\n    m.__setValues.clear(0)\n}\nfunc (m *Item) FlagCompletedNil() {\n    m.__nulls.set(0)\n}\nfunc (m *Item) FlagCompletedZero() {\n    m.__nulls.clear(0)\n}\nfunc (m *Item) GetCompleted() (value bool, null bool, haskey bool) {\n    return m.Completed, m.__nulls.has(0), m.__setValues.has(0) || m.Completed\n}\nfunc (m Item) GetCompletedPtr() (value bool, haskey bool) {\n    if m.__nulls.has(0) {\n        return nil, m.__setValues.has(0)\n    }\n    return &m.Completed, m.__setValues.has(0) || m.Completed\n}\nfunc (m *Item) FlagDescriptionSet() {\n    m.__setValues.set(0)\n}\nfunc (m *Item) FlagDescriptionUnset() {\n    m.__setValues.clear(0)\n}\nfunc (m *Item) FlagDescriptionNil() {\n    m.__nulls.set(0)\n}\nfunc (m *Item) FlagDescriptionZero() {\n    m.__nulls.clear(0)\n}\nfunc (m *Item) GetDescription() (value string, null bool, haskey bool) {\n    return m.Description, m.__nulls.has(0), m.__setValues.has(0) || len(m.Description) > 0\n}\nfunc (m Item) GetDescriptionPtr() (value string, haskey bool) {\n    if m.__nulls.has(0) {\n        return nil, m.__setValues.has(0)\n    }\n    return &m.Description, m.__setValues.has(0) || len(m.Description) > 0\n}\nfunc (m *Item) FlagIDSet() {\n    m.__setValues.set(0)\n}\nfunc (m *Item) FlagIDUnset() {\n    m.__setValues.clear(0)\n}\nfunc (m *Item) FlagIDNil() {\n    m.__nulls.set(0)\n}\nfunc (m *Item) FlagIDZero() {\n    m.__nulls.clear(0)\n}\nfunc (m *Item) GetID() (value int64, null bool, haskey bool) {\n    return m.ID, m.__nulls.has(0), m.__setValues.has(0) || m.ID > 0\n}\nfunc (m Item) GetIDPtr() (value int64, haskey bool) {\n    if m.__nulls.has(0) {\n        return nil, m.__setValues.has(0)\n    }\n    return &m.ID, m.__setValues.has(0) || m.ID > 0\n}\n// Validate validates this item\nfunc (m *Item) Validate(formats strfmt.Registry) error {\n    var res []error\nif err := m.validateDescription(formats); err != nil {\n    // prop\n    res = append(res, err)\n}\n\nif len(res) > 0 {\n    return errors.CompositeValidationError(res...)\n}\nreturn nil\n\n}\nfunc (m *Item) validateDescription(formats strfmt.Registry) error {\nif !m.__setValues.has(1) {\n    return errors.Required(\"description\", \"body\")\n}\n\nif err := validate.MinLength(\"description\", \"body\", m.Description, 1); err != nil {\n    return err\n}\n\nreturn nil\n\n}\nfunc (m Item) MarshalEasyJSON(out *jwriter.Writer) {\n    out.RawByte('{')\n    first := true\n    _ = first\n    if m.Completed {\n        if !first {\n            out.RawByte(',')\n        }\n        first = false\n        out.RawString(\"\\\"completed\\\":\")\n        out.Bool(m.Completed)\n    }\n    if m.Description != \"\" {\n        if !first {\n            out.RawByte(',')\n        }\n        first = false\n        out.RawString(\"\\\"description\\\":\")\n        out.String(string(m.Description))\n    } else {\n        if !first {\n            out.RawByte(',')\n        }\n    first = false\n    out.RawString(\"\\\"description\\\":\")\n    if m.__nulls.has(1) {\n        out.RawString(\"null\")\n    } else if !m.__setValues.has(1) {\n        out.RawString(\"\\\"\\\"\")\n    }\n}\nif m.ID != 0 {\n    if !first {\n        out.RawByte(',')\n    }\n    first = false\n    out.RawString(\"\\\"id\\\":\")\n    out.Int64(m.ID)\n}\nout.RawByte('}')\n\n}\nfunc (m Item) MarshalJSON() ([]byte, error) {\n    out := jwriter.Writer{}\n    m.MarshalEasyJSON(&out)\n    return out.BuildBytes()\n}\nfunc (m Item) UnmarshalEasyJSON(in jlexer.Lexer) {\n    if in.IsNull() {\n        in.Skip()\n        return\n    }\n    in.Delim('{')\n    for !in.IsDelim('}') {\n        key := in.UnsafeString()\n        in.WantColon()\n        if in.IsNull() {\n            switch key {\n            case \"id\":\n                m.ID = 0\n                m.__setValues.set(2)\n                m.__nulls.set(2)\n                m.__nulls.clear(2)\n            case \"description\":\n                m.Description = \"\"\n                m.__setValues.set(1)\n                m.__nulls.clear(1)\n            case \"completed\":\n                m.Completed = false\n                m.__setValues.set(0)\n                m.__nulls.clear(0)\n            default:\n                in.SkipRecursive()\n            }\n            in.Skip()\n            in.WantComma()\n            continue\n        }\n        switch key {\n        case \"id\":\n            m.ID = in.Int64()\n            m.__setValues.set(2)\n            m.__nulls.clear(2)\n        case \"description\":\n            m.Description = in.String()\n            m.__setValues.set(1)\n            m.__nulls.clear(1)\n        case \"completed\":\n            m.Completed = in.Bool()\n            m.__setValues.set(0)\n            m.__nulls.clear(0)\n        default:\n            in.SkipRecursive()\n        }\n        in.WantComma()\n    }\n    in.Delim('}')\n}\nfunc (m *Item) UnmarshalJSON(data []byte) error {\n    in := jlexer.Lexer{Data: data}\n    m.UnmarshalEasyJSON(&in)\n    return in.Error()\n}\ntype bitmap uint\nfunc (b bitmap) clear(idx uint) bitmap {\n    n := uint(b)\n    n &^= (1 << idx)\n    return bitmap(n)\n}\nfunc (b bitmap) set(idx uint) bitmap {\n    n := uint(b)\n    n |= (1 << idx)\n    return bitmap(n)\n}\nfunc (b bitmap) has(idx uint) bool {\n    n := uint(b)\n    n &= (1 << idx)\n    return n > 0\n}\n```\n. I updated the example to use willf's bitset and it adds more helpers as well as a PatchWith and Clone method.\nhttps://gist.github.com/casualjim/00950719d0f81fce54bc26dd91526dcc\n. I created PR #557 to track the work that is going into implementing this. It will take a while to complete as it's a fairly big change. \n. you can also use --skip-main in the generate command so then the main file doesn't get overwritten\nAlso you can easily make your own main file. I generate one by default more as an example. Everything is exported so it's easy to make other schemes.\nThe swagger 2.0 convention is to make the spec for your domain available at the root so that it can be discovered by convention. lgtm\n. you can add a cors middleware.\nhttps://github.com/rs/cors\nhttp://goswagger.io/use/middleware/\n. 405 method not allowed for what?  are you sure you're requesting with the right basepath etc?\nThis solution has been proven to work for many people so something else must be wrong.. :+1:  :100: \n. duplicate of #442 \nI'm keeping this one open because the spec is cleaner\n. related to #557 \nWe could make factory methods like for params and responses but it would not be trivial to implement in the case of definitions.\nAs a potential workaround the fix #829 for  #769, #828 you can now define a default value at the object level and it will set them correctly.\n. lgtm\n. lgtm\n. lgtm \n. This is spec'ed by yaml, the only thing that you can do to not have it convert to boolean is use a different key value or to use json as format for the spec. see: http://yaml.org/type/bool.html\n. I added a test that shows the quoting works here: https://github.com/go-openapi/loads/blob/2c2eb3b11f02b34aa8428379e3e317d2d8f06d4d/fmts/yaml_test.go#L154\n. what we did was make a middleware that sets the X-Request-ID field when it's empty on the front router.\nThen we described a header on every params object. Each handler has access to the request id in this case.\nThat being said in the next version of swagger there is also a Request object that's available on every params struct.\n. you can define your spec like this (clients also need to pass it through if it exists so it is part of the contract)\n``` yaml\nparameters:\n  requestId:\n    name: X-Request-Id\n    in: header\n    type: string\npaths:\n  /:\n    parameters:\n      - $ref: \"#/parameters/requestId\"\n```\n. in configure_xxx.go\n``` go\nimport \"github.com/satori/go.uuid\"\nfunc setupGlobalMiddleware(handler http.Handler) http.Handler {\n    return addRequestID(handler)\n}\nfunc addRequestID(handler http.Handler) http.Handler {\n    var reqIDKey = http.CanonicalHeaderKey(\"x-request-id\")\nreturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    if r.Header.Get(reqIDKey) == \"\" {\n        r.Header.Set(reqIDKey, uuid.NewV4().String())\n    }\n    handler(w, r)\n})\n\n}\n```\n. please don't close this ticket, I think this required for more people. I like to leave questions like this open so they are easier to find.\n. I assume things worked after adding this last step?\n. you can install go-swagger with go get, if you then regenerate you should have access to the request object.\nThere is one more change I want to make inside go-swagger to use pointers for builtins.\n. this is now available as a part of the parameter struct\n. yeah that integration is not fully baked as there is no opportunity to provide your own.\nIn the handler you get a fresh context that is request scoped. Perhaps a good approach would be to allow people to override the context with a value at well-known key in the gorilla context dictionary.\nI have a branch where it's all net.context but I did run into some issues with it so I never merged that.\n. they are now in handlers because we expose the Request in Params and on 1.7 you have a context.\n. yeah I think go-swagger should ignore embedded interfaces, at the very least we could add an annotation to make it be ignored\n. we have a pattern for discriminators. For those it parses the 0-arity methods as properties.\n. lgtm\n. This is no longer an issue. @ZandorZ does it work when you use the golang yaml tool directly?\nCan you share your spec file (not just the contents but the actual file). you should make the extension .yaml it should start working then. I can't reproduce your issue :(\nshellsession\n \u00bb swagger validate https://gist.githubusercontent.com/ZandorZ/cc6e4a27bb634f91d058e017ff45b761/raw/9c801d8df1a4075e5cb6f9a21403e0fa28a65ebe/swagger.yaml\nThe swagger spec at \"https://gist.githubusercontent.com/ZandorZ/cc6e4a27bb634f91d058e017ff45b761/raw/9c801d8df1a4075e5cb6f9a21403e0fa28a65ebe/swagger.yaml\" is valid against swagger specification 2.0. can you give me a code snippet of what doesn't work, the code generates and compiles just fine. I suspect the issue is with the gob mimetype.\nCan you also capture the output of running the program with the env vars: DEBUG=1, SWAGGER_DEBUG=1. ok your content type from the server is not registered on the client.\nThe server when it does this shouldn't even return a response because the content type doesn't match any of your accepts\nYou can add that content type:  application/bj.portal.municipio+json\nto your consumes and I think it will start to work. \ud83d\udcaf lgtm\n. lgtm thanks!\n. is it possible that you are using a released version and aren't tracking master? These issues existed but I thought they were fixed. I misinterpreted how to deal with produces and consumes at an operation level, but I think that got fixed. \n. I agree\n. http://i.imgur.com/3DJIFSC.gifv\n. this fails the build. you can test this locally by running ./hack/run-canary.sh\n. :shipit: \n. lgtm\n. We fixed this yesterday in the correct repo. you may have to do a go get -u github.com/go-openapi/loads\n. lgtm\n. you can also comment on an approach discussed here #476\n. great find\ncan you run go generate ./generator and check in the bindata.go\n. \ud83d\udc4d Thanks!\n. lgtm\n. We use the regular go infrastructure to discover these items. I'm not sure what is required to support gb seamlessly. I wouldn't be opposed to a PR or more discussion here so that we know what needs to happen and an interesting party could pick it up easily.\n. I think an easy solution to this could be to look if a vendor dir exists and if it has a src folder and then just manipulate the gopath in the swagger scan process\n. and I think it can be done by manipulating this method: https://github.com/go-swagger/go-swagger/blob/master/scan/scanner.go#L165\n. lgtm\n. you could use, I know it's a bit counter intuitive:\ntype: string\nformat: binary\nbut I believe that will get you an io.Reader/io.Writer which in turn is a bit more appropriate.\nYou'd still need the responder you wrote though\n. the body of the request is a reader that you're presumably going to write somewhere.\nThere is a fix I made for this but I put it in a wip branch, I'll put it on master this weekend. \nYou will still get a writer back though because presumably you want to save the files somewhere and don't want to hold the entire thing in memory. The generated code takes care of draining the response body reader with the writer\n. I'll get you a sample after I've added the fix to master is that ok?\n. not yet, but this weekend I'll have time to do it. Some rush work thing came in on friday morning that took me until sunday to do\n. you pass in the writer for receiving the response body to the method on the client.\ngo\nclient.GetSomethingWithAStream(new(some.Params), bytes.NewBuffer(nil))\nyou have control over the writer, creating and closing is up to you, the generated client ensures bytes are written to it when they appear on the stream.\n. you can use swagger generate models for this\n. lgtm\n. hi it fails this test: TestServer_MultipartForm\nsee log here: https://ci.vmware.run/go-swagger/go-swagger/628\n. lgtm, thanks!\n. lgtm\n. if you're sending it with the json doesn't it need to be included in your contract?. you could teach go-swagger to also recognize swagger: as struct tag perhaps as alternative? Should be fairly straightforward because it's the same as this PR. I fixed this in the enum validation instead, you can just update github.com/go-openapi/validate and then you don't need to edit the template\n. fixed by #526 \n. https://github.com/go-openapi/validate\n. lgtm, that one build failure is a appveyor fart\n. lgtm\n. go-swagger doesn't know about a react pattern but it allows you to make a swagger spec that does I think\n. lgtm\n. lgtm\n. no longer an issue in validation:\nshellsession\n\u00b1 ivan@avalon:~/go/src/swagger-test  \n \u00bb swagger validate swagger.json \nThe swagger spec at \"swagger.json\" is invalid against swagger specification 2.0. see errors :\n- \"getPets\" is defined 4 times. no longer an issue\nshellsession\ngit:(master) \u2717 ? \u00bb swagger validate ~/Downloads/refs-recursive-circular-ancestor-invalid.txt \nThe swagger spec at \"/home/ivan/Downloads/refs-recursive-circular-ancestor-invalid.txt\" is invalid against swagger specification 2.0. see errors :\n- definition \"Circular2\" has circular ancestry: [#/definitions/Circular1]. is it possible that you have a stale go-swagger checkout on your system?\nDoes the following fix your issue?\nrm -rf $GOPATH/src/github.com/go-swagger/go-swagger\ngo get -u github.com./go-swagger/go-swagger/cmd/swagger\n. you may still need to get\ngvt fetch github.com/go-openapi/runtime/middleware\n. dynamic API is definitely a working use case. \nUnfortunately I haven't been able to document its usage properly.\nHere's a petstore with the dynamic usage\nhttps://github.com/go-openapi/runtime/blob/master/internal/testing/simplepetstore/api.go\nhttps://github.com/go-openapi/runtime/blob/master/internal/testing/simplepetstore/api_test.go\nHere's an example of a petstore that uses structs as types:\nhttps://github.com/go-openapi/runtime/blob/master/internal/testing/petstore/api.go#L32-L68\n. I don't quite understand the problem yet.The error message comes when you try to call the petstore api or when you try to load the swagger ui?\nYou're using the swagger ui docker container? \nDid you add a CORS middleware to your swagger server?\n. https://github.com/rs/cors\nhttp://goswagger.io/use/middleware/\n. duplicate of #481\n. It can't because it needs to describe the types. \nI think a PR was submitted in the last 2 months that allows for specifying a type. \nswagger:type typename\nadded by: ca670fa. Does the principal exist as a struct? is it described in the swagger specification?\n. oic, yes this would be an issue\n. There is still an issue with it where it generates models/hook_event.go:59: too many arguments to return \nyou can run ./hack/run-canary.sh to reproduce\n. What is the go version you're using?\nthat release never got published though so perhaps in this case it's not too bad. \nHowever I want to find out what is causing this build failure and why none of my ci envs pick it up.\n. i tagged a new release, I hope this makes it all work\nhttps://github.com/go-swagger/go-swagger/releases/tag/0.6.0\n. Great! I'm doing a 0.7.0 soonish, one doc to write and then migrating the release build to circleci.\n. Can somebody confirm this fixes it? https://github.com/go-swagger/go-swagger/tree/550-always-generate-params\n. i'll cut a release tomorrow, in the mean time can you install from master.\nOnce installed from master you need to either vendor or get in the gopath: github.com/go-openapi/runtime\n. if you make the items be not required on the tags form data property and you make their type be integer instead of string then the spec validates.\nhttps://swaggerhub.com/api/casualjim/todolistbug/0.1.0\n. Thanks for finding this, i've updated the example\n. There is the examples folder in the repo, all generated code also uses all the annotations that are applicable for it.\nhttps://github.com/go-swagger/go-swagger/tree/master/examples/todo-list\nThis is the code I used to test parsing the annotations: https://github.com/go-swagger/go-swagger/tree/master/fixtures/goparsing/classification\nPlease bear in mind that this is a project (not a product!) to which others and I have contributed significant amounts of free time to get it to where it is today. All help we can get is absolutely welcome. \nTo make things better:\nThe site source is here, uses hugo. Feel free to submit a PR with some more examples; I'll gladly merge\n. I've started answering here several times. But I keep getting stuck. would it be possible for you to join the slack team?\nI want to do the right thing for both go and swagger but typing and convenience for swagger trumps the go type system. \nFor example I see that error is an interface but I know how to represent error as a string, always.\nSo I went with the type string instead of type object. I wonder how that can be done for when error actually implements a the json marshaller/unmarshaller pair because then it would become an object.\n. slack team: https://slackin.goswagger.io/\nguregu comes up once in awhile. So it would probably be a good idea to come up some kind of extension mechanism.\nSome things that come to mind immediately are:\n- look for interface methods that returns a swagger schema/parameter/header definition\n- look for a well-known dictionary in the local package that a name like oaiSchemaMap\n- look for a new annotation in the comments that has the json representation of the swagger definition so we can just merge it in\n. fixed by linked pr\n. we extend the behavior of the spec here, in the cases of an unknown format it will fall back to either integer or number.\nBut I doubt that that will be added to the spec because that spec is for many languages not just the golang\nSo long story short, it should work regardless of the format value but languages that support the types will hopefully make use of it. The spec is the source of truth, that's guaranteed to be implemented because that's what makes it swagger compliant.\nSo this would be the canonical list: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types. Models are discovered through usage in parameter and/or response objects. If the model isn't used through a parameter or response object it's not part of the API because there is no way that it goes in or out through the API.\n. I'll reopen but label as question. If you ran into this more people will run into it.\n. would it be possible to provide a test case analogous to the other tests for these new or redefined types?\n. :shipit: \n. fixed by the PR\n. yeah just add a file that uses it and see if the correct properties are set on the swagger schema.\n. I merged the other one so this one needs updating :)\n. lgtm thanks!\n. lgtm\n. lgtm\n. lgtm thanks!\n. I went with the fie suffix for now, the packages require a bit more work\n. Reviewed 3 of 3 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. my guess is that you have them on your file system now, before you hadn't.\nWe use goimports to optimize and discover imports following a file generation step.\n. if you can do a go get -u github.com/go-openapi/runtime you should get the swag package too, afterwards it should just work \n. does this image fix your issue? quay.io/goswagger/swagger:gen-layout-configfile\n. this is a tricky one because json only does floats and the spec structs are modeled as float64 which makes it to into a lossy scientific notation. This should use a json.Number construct but that is going to break other things. \nhttps://github.com/go-openapi/spec/blob/master/schema.go#L586-L588\ngreat catch though\n. not a priority to fix to me. people can use format: uint64 where we're not bound by json's limitations on size. this todo list looks OK, you don't need to move to pre 1.6 template support.Dropping support for building on 1.5 is fine. \nI only want to do current + 1 prior. In august there is 1.7 so I don't see a pressing need to end up with messier templates :)\n. Nobody has had time to drive this to completion yet. So the unchecked boxes still need to get resolved.. this looks great :)\nI updated the build on master to only use 1.6 I think that might help with the way you've written the templates.\n. are you done with this?\n. Reviewed 28 of 28 files at r1.\nReview status: all files reviewed at latest revision, all discussions resolved.\n\nComments from Reviewable\n Sent from Reviewable.io \n. fixed by: 2b0c1cf25561300f738733bee51948f2a191712a\n. what does the spec look like? are the consumes and produces filled out?\n. i would call it scheme and i prefer the --force-scheme over the --http so that we can add transports like grpc, amqp etc\n. this would make it so that you can't upgrade the CLI anymore, or get the executable when you run go get. \n. if you vendor or do go get -u github.com/go-openapi/runtime then issues #591, #592 and this one will go away\n. We rely on the goimports command to gather and optimize the imports.\nSo if you have the vendoring done, you may have to regenerate but the imports should be found\n. if this is not the case can you post the spec that fails?\n. that's true, so do you have a suggestion how to remove that requirement? perhaps add a flag to call the vendoring command of choice? \nI use gvt, other people use gb, yet other ones use glide or govendor and so on.\nThere are other options too, looking forward to get some suggestions though?\nOr should it first scan the path and fail if the necessary dependencies aren't there? Or ...\n. You can try with:\njson\n\"200\": {\n  \"description\": \"get client\",\n  \"schema\": {\n    \"items\": {\n      \"$ref\": \"#/definitions/client\"\n  }\n}\nThe ref ensures that the same type is reused instead of generating a new one because of the anonymous definition.\n. to work around this issue you can use\nnpm install -g swagger-tools\nswagger-tools validate spec.json\n. The rendering step and validation step are separate operations. It's left up to the user to run validate when it is appropriate to them.\nSimilarly requiring a spec to be valid for rendering can be annoying during development. \nHowever perhaps a flag --no-validate could satisfy both use cases. \n. there were a number of validation issues in this spec. readOnly, and minLength are misspelled. And the $ref property of the default spec.\n``` yaml\nconsumes:\n- application/json\ndefinitions: \n  portmap:\n    type: object\n    properties:\n      id:\n        type: integer\n        format: int64\n        readOnly: true\n      source:\n        type: string\n        minLength: 1\n      destination:\n        type: string\n      starttimestamp:\n        type: string\n        format: date-time\n      lastupdated:\n        type: string\n        format: date-time\n      done:\n        type: boolean\n        default: false\n  error:\n    type: object\n    required:\n      - message\n    properties:\n      code:\n        type: integer\n        format: int64\n      message:\n        type: string\ninfo:\n  description: Nimbus proxy bridge port-foward nimbus serious log receiver\n  title: ProxyBridge Server\n  version: \"0.1\"\npaths: \n  /portmap:\n    post:\n      tags:\n        - portmap\n      responses:\n        201:\n          description: Created\n          schema:\n            $ref: \"#/definitions/portmap\"\n        default:\n          description: error\n          schema:\n            $ref: \"#/definitions/error\"\n    get:\n      tags:\n        - portmap\n      responses:\n        200:\n          description: list of portmaps\n          schema:\n            type: array\n            items:\n              $ref: \"#/definitions/portmap\"\n        default:\n          description: error\n          schema:\n            $ref: \"#/definitions/error\"\nproduces:\n- application/json\nschemes:\n- http\nswagger: \"2.0\"\n. have you tried using `swagger generate spec --scan-models`\n \u00bb swagger generate spec --help\nUsage:\n  swagger [OPTIONS] generate spec [spec-OPTIONS]\ngenerate a swagger spec document from a go application\nHelp Options:\n  -h, --help             Show this help message\n[spec command options]\n      -b, --base-path=   the base path to use (default: .)\n      -m, --scan-models  includes models that were annotated with 'swagger:model'\n          --compact      when present, doesn't prettify the the json\n      -o, --output=      the file to write to\n      -i, --input=       the file to use as input\n```. swagger doesn't deal with http, it deals with the contracts on top of them and considers http the transport but it's just an implementation detail to the contract.\nBefore I answer the question about the status code, can you please share  a spec with at least one representative operation defined.\nthe default response structure captures the status code but if you have other responses you'll get a type, which in turn implies the status code. eg. OKResponse implies 200 no need to carry that around the type already means 200 OK.\nlike this one is a response struct for a 200 status code in the spec: https://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/client/todos/find_responses.go#L51\nThen this one is the default response: https://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/client/todos/find_responses.go#L80\nBecause it's not specified with a status code you have a Code() accessor on that instance which gives you the status code\n. 1. PostClientsOK is the success case, typically there is only 1 response that means success. So we generate a method that in case of a 2xx response we return that type.\n2. TheError() string method makes it so that non 2xx responses (error responses), implement the golang error interface. So when a request isn't successful (non-2xx) then you get an error instead of a success case. Because certain responses are typed you can use a type switch to determine what happened \n. you can write a custom round tripper where you have access to the response. This will allow you to do retries\nhttps://github.com/go-openapi/runtime/blob/master/client/runtime.go#L185\nhttps://github.com/golang/go/blob/go1.9/src/net/http/client.go#L139. you can provide your own templates for go-swagger; the client and server generators allow you to specify a directory on disk to add custom templates\nThere are some docs here: http://goswagger.io/generate/templates/\nIn VIC they do this: https://github.com/vmware/vic/tree/master/lib/apiservers/templates\nhttps://github.com/vmware/vic/blob/master/Makefile#L274-L281\nYou can override these templates by using the same names\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/templates.go#L61-L73\n. yeah you're right it would generate a similar structure.\nFeel free to make the necessary changes for your case to work and submitting a PR.\nIf I understand correctly you're not happy with how the operations/parameters/responses are structured and want to replace all of it? Do you have an example of how the structure would look?\n. wouldn't it be easier to add a new  flag for a config file to customize the generation and the folder layout?\n. I divide the code in 4 types of generation based on the type passed to the templates as context.\nThen I allow for a template to be used to specify the path with a filter for joining path parts together so that an empty path part has no effect.\nThe file name also gets a template so that you can customize the name of the generated file\nThe template name has a convention that when it starts with asset:[key] it will be looked up from the embedded templates in the swagger binary, otherwise it will look for that template on disk based on the path you specified.\nThat config should be in an ordered list so that the generation order is deterministic, then instead of hardcoding the generation of each known template it will now use that config and iterate over those configurations to generate the files with context.\nAs a bonus you'd be able to generate other languages as well from the same object model.\n. I refactored the codegeneration to the model I described in the previous comment.\nhttps://github.com/go-swagger/go-swagger/tree/gen-layout-configfile\nit still needs the config file bit but the machinery for it has been refactored so it can be driven by a config file. The next thing that would need to be implemented is using viper or something to read a config.\n. I've added some docs on the config file format here: https://github.com/go-swagger/go-swagger/blob/gen-layout-configfile/docs/use/template_layout.md\nPlease let me know if this works for you, then I'll move it to master and release a 0.6.1\n. you can pass it your own set of templates and see if it meets your needs. I'm unlikely to be able to spend time on this for the next 10 days so there is no rush :).\n. I found that it wasn't actually using the config when you provided one with -C. I fixed it now and i've updated the doc page.\n. openapi 3 will support HATEOAS style links. \n. A url builder was added in the 0.7.x series, I think that addresses this request. this is fixed now. Are the sources for what you're trying to run the generate spec against available? \nI'd like to take a look at the project and be able to reproduce the issue\n. I won't be able to dig into this today, but I will for sure over the weekend. \n. I have an error about github.com/notary/tuf/store when I get the source of that I don't have the store package.\nIs there a particular branch I should be looking at?\n. is the shell command an alias that does something more intelligent and makes use of the docker mount?\nTo help pinpointing issues I've added a log statement that prints all the packages that are being considered.\nif you run swagger with DEBUG=1 as env var you should see a the list of packages that was scanned. I'm sure there are lots of gaps in the debug information but I guess it's a start.\n. I was able to generate a swagger spec in a docker shell with the code that is currently on scan-package branch. You'll see lots of output because the ./make.sh swagger bit has an export DEBUG=1 \n. I think in this case the transitive import usage is missing a case. So to answer your question: you shouldn't have to copy it, merely using a type should get it included.\n. swagger:model exists to rename your to a different name. But unless you run generate spec --include-models they are only discovered through following types and their usage in structs.\nBy missing a case I mean that I have several of these types of switch statements\nhttps://github.com/go-swagger/go-swagger/blob/master/scan/schema.go#L242\nIn this case I think I'm missing an ast.StarExpr somewhere \n. lgtm\n\n. pretty close you can get to it with something like:\ngo\ncasted, ok := err.(*operations.GetDeployDefault)\nBecause it's a struct type it will be a pointer.\n. lgtm, thanks!\n\n. no type of type: object is the same. you can annotate the other structs you want to use as payload with swagger:model and run generate spec with the --include-models flag.\nThat will add structs annotated with swagger:model to the definitions.\nwhich validator says the swagger spec is invalid if the type field is unavailable.\nI don't remember type being required in json schema, it should default to type: object\nthis is a bug though in the scan package where it doesn't add the type annotation, which needs to be fixed.. there is no polymorphism here right? There are no type relationships or even embedded structs\nYou can compose structs like this: https://goswagger.io/generate/spec/allOf.html\nor inheritance like this: https://goswagger.io/generate/spec/discriminated.html. Then polymorphism in an API doesn't really make sense. Data is never polymorphic, it is just a structure.\nYour wireformat doesn't care and your API should be agnostic to its clients. is-a relationships are a business rule (implementation detail) they are not part of a contract (like an API is).. :+1:  thanks for doing this :)\n\n. I'll look at making the tests pass tomorrow\n. It's not quite this fix, but I think the changes in the branch scan-package fix the same thing.\n@gaplyk does that branch fix your issue?\n@bfirsh I'm getting a docker build env together because you mention ignoring unkown type in a linked issue. I still want to repro\n. does this mean that the scan-package branch didn't fix your immediate issue?\n. for your repo I get output that looks correct now.\ncommand:\nbash\nswagger generate spec -o issue.json --scan-models\noutput: \njson\n{\n  \"swagger\": \"2.0\",\n  \"paths\": {},\n  \"definitions\": {\n    \"Error\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"Code\": {\n          \"type\": \"string\"\n        }\n      },\n      \"x-go-package\": \"github.com/gaplyk/go-swagger-issue/errors\"\n    },\n    \"ErrorResponse\": {\n      \"x-go-package\": \"github.com/gaplyk/go-swagger-issue/errors\",\n      \"$ref\": \"#/definitions/Error\"\n    }\n  },\n  \"responses\": {\n    \"ErrorResponse\": {}\n  }\n}\n. @cyriel this is new functionality on master that would lift that restriction for responses where only the body matters.\nThe problem is now that the newly added annotation doesn't actually add the models it discovers to the bag that needs to end up in the definitions of the spec\n. maximum is a validation for numbers. If you want to specify a max length for a string you should use maxLength as validation instead.\nSee here for more info: http://json-schema.org/latest/json-schema-validation.html#anchor26 \n. maximum is a validation for numbers. If you want to specify a max length for a string you should use maxLength as validation instead.\nSee here for more info: http://json-schema.org/latest/json-schema-validation.html#anchor26\n. are you vendoring your dependencies by any chance?\nI think this is caused by a PR that got merged this morning. So if you're vendoring, i want to ask if you can go back to go-openapi/analysis#9f487a0bf7e69478955d3a8bd1642d1a1edddcc4 \nThat is prior to the change in signature being merged.\n. I fixed it on master of that library now too, so you don't strictly need to vendor anymore\n. another failure related to this one:\nyaml\n/workspace/metadata:\n    get:\n      parameters:\n        - name: \"workspace_id\"\n          in: \"query\"\n          required: true\n          minItems: 1\n          type: \"array\"\n          items:\n            type: \"string\"\n            format: \"uuid\"\n. no further discussion yet, but the changes won't be lost. Their intent will be brought back but in a less breaking fashion.\nSome signatures changed without there being a real reason for the change and the args also changed too much for their intended use.\nSo I think the intent is we don't want the spec to decide between https, http or unix sockets. We want that to be decision that is made when we start the process of the server. Would you agree that that is the change you want preserved?\n. even when it uses a logging library, there would still need to be if guards or lazy evaluation of arguments to get any real benefit from it.\nThe one immediate benefit I see would be colors for levels\n. do you need go < 1.6?\nI'm asking because it has implications for the templates of which I have many complicated ones\n. feel free to send a PR for this\n. \n. Thanks! :+1: \n. can you change your type definitions?\njson\n  {\"description\":\n     \"The date and time that the device was registered.\",\n     \"type\":\"string\",\n     \"format\": \"date-time\"\n}},\njson schema and swagger define ISO8601 dates as a known format, that will fix your validation \n. thanks!\n. https://github.com/go-swagger/go-swagger/releases/tag/0.6.0\n. I think the solution is not to add type info on the property, but go swagger should follow aliased types when they are params and get to the one they actually represent.\n. I will make a 0.6.1 release with a new feature, and that should also fix the version then\n. this is fixed in 0.7.x \n. The reason for the change is that a zero value for a required property is a valid value.\nSo for a string \"\" is valid but nil or absence of the key isn't.\nYou can change your spec and add x-nullable: false \n. I added the entry about the breaking change to the release notes too. Thanks for that.\n. You can make use of this: https://github.com/go-openapi/swag/blob/master/convert_types.go\nTo make the referencing/dereferencing easier\n. II would like to know what the spec looks like, because when an operation has auth requirements defined it should get a second argument for those operations.\n. http://goswagger.io/use/middleware.html#byo-middleware\nhttps://github.com/go-swagger/go-swagger/issues/481#issuecomment-224503845\nhttps://github.com/rs/cors\n. did you do a go get -u github.com/go-openapi/runtime ? \n. the latest version of swagger tells you which dependencies you have to vendor.\nBut can you share your spec so I can try it in a docker container. The error message is a bit vague like this and that makes it hard to troubleshoot\n. @kyteague is this still an issue for you?\nFrom version 0.7.0 we print the dependencies you require \n. I was able to reproduce that with glide, gvt otoh does everything as I expect\nrelated: #818. at which stage?\n. or how are you using go-swagger :)\n. you could use a spec that gets merged in during the generation process, but other than that it would require changes to the scan package\nA syntax has to be created and then added to the parsers here: https://github.com/go-swagger/go-swagger/blob/master/scan/routes.go#L199\n. Not easy it would involve making the strategy for setting responses on a route configurable\nhttps://github.com/go-swagger/go-swagger/blob/master/scan/routes.go#L193\nhttps://github.com/go-swagger/go-swagger/blob/master/scan/validators.go#L568-L595\n. Thanks!\n. it's not reachable from within the handler anywhere atm. I'm curious about what use case this would enable?\n. ah ok this is possible in 2 ways.\nThe first way is by using an authenticator, the second way is making a middleware (not global)\nAuthenticator\ngo\n// Authenticator represents an authentication strategy\n// implementations of Authenticator know how to authenticate the\n// request data and translate that into a valid principal object or an error\ntype Authenticator interface {\n    Authenticate(interface{}) (bool, interface{}, error)\n}\nThe schemes currently supported you can see here: https://github.com/go-openapi/runtime/tree/master/security\nMiddleware\ngo\n// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.\n// The middleware executes after routing but before authentication, binding and validation\nfunc setupMiddlewares(handler http.Handler) http.Handler {\n    return handler\n}\nto get to the matched route in one of those you can\ngo\nimport \"github.com/gorilla/context\"\ncontext.Get(3, request)\nThat gets you a matched route. \nAlso it might be worth it to expose Context as an exported method on the api builder, that would be a simple PR to add the following code to go-swagger\ngo\nfunc (o *LifecycleManagerAPI) Context() *middleware.Context {\n    if o.context == nil {\n        o.context = middleware.NewRoutableContext(o.spec, o, nil)\n    }\n    return o.context\n}\nthen your middlware could take a context in and use RouteInfo(request) like this one: https://github.com/go-openapi/runtime/blob/master/middleware/security.go\n. Look at this one: https://github.com/go-openapi/kvstore. You mean a different context than the one available on params.HTTPRequest.Context() ?\nMore like an application level context?. yeah for examples the code is checked in so people can browse it. It's been hugely useful in helping people find their way. \nYou can add your example to the regenerate script too: https://github.com/go-swagger/go-swagger/blob/master/hack/regen-samples.sh\n. Thanks a lot! more examples are really helpful \ud83d\udcaf \n. can you share a spec and the error message?\n. there is an issue with escaping the backticks ` in the long description, which makes the file not compile. Because of that the imports aren't being cleaned up by goimports.\n. these templates are using strfmt.Sprintf, they should use net.JoinHostPort instead and then the ipv6 address will be properly escaped too.\nThis is in addition to your fix\n. this was fixed long ago. swagger:params is used to indicate which operations the properties of the operation are included in the struct.\nSo you'd use something like these:\nhttps://github.com/go-swagger/go-swagger/blob/master/fixtures/goparsing/petstore/rest/handlers/orders.go#L24-L46\nor \n``` go\n// swagger:params listOneService \ntype ListOneParams struct {\n// ServiceName description goes here\n  // \n  // in: path\n  // required: true\n  ServiceName string json:\"serviceName\"\n// Version description goes here\n  //\n  // in: path\n  // required: true\n  Version string json:\"version\"\n}\n```\n. @tonyghita  I don't think there is a param:\"paramName\" atm. I chose to piggyback on the json tag because swagger typically does json requests.\n. if you add the necessary interface methods to go-openapi/strfmt they should work together\n. we'd have to add GetBSON and SetBSON interface methods the the strfmt package objects and they will all be compatible with mgo\n. feel free to submit a PR to go-openapi/strfmt\nThis is how we did it for the sql driver package too\nFeel free to ask for help with creating a fork/pull request if you've never done that. We have a slack team https://slackin.goswagger.io where you can ask for help, or just continue to comment here\nhttps://github.com/go-openapi/strfmt/blob/master/time.go#L114\nhttps://github.com/go-openapi/strfmt/blob/master/time.go#L133\nand this is a thing I had in an older repo to deal with mongo timestamps, so hopefully you can work it out from there.\n``` go\npackage models\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"strconv\"\n    \"time\"\n\"gopkg.in/mgo.v2/bson\"\n\n)\n// Timestamp is a time but it serializes to ISO8601 format with millis\ntype Timestamp struct {\n    time.Time\n}\n// ISO8601 format to millis instead of to nanos\nconst RFC3339Millis = \"2006-01-02T15:04:05.000Z07:00\"\nfunc (t Timestamp) String() string {\n    return t.Format(RFC3339Millis)\n}\n// ParseTimestamp parses a string that represents an ISO8601 time or a unix epoch\nfunc ParseTimestamp(data string) (Timestamp, error) {\n    d := time.Now().UTC()\n    if data != \"now\" {\n        // fmt.Println(\"we should try to parse\")\n        dd, err := time.Parse(RFC3339Millis, data)\n        if err != nil {\n            dd, err = time.Parse(time.RFC3339, data)\n            if err != nil {\n                dd, err = time.Parse(time.RFC3339Nano, data)\n                if err != nil {\n                    if data == \"\" {\n                        data = \"0\"\n                    }\n                    t, err := strconv.ParseInt(data, 10, 64)\n                    if err != nil {\n                        return Timestamp{}, err\n                    }\n                    dd = time.Unix(0, t*int64(time.Millisecond))\n                }\n            }\n        }\n        d = dd\n    }\n    return Timestamp{Time: d.UTC()}, nil\n}\n// GetBSON customizes the bson serialization for this type\nfunc (t Timestamp) GetBSON() (interface{}, error) {\n    return t.Time, nil\n}\n// SetBSON customizes the bson serialization for this type\nfunc (t Timestamp) SetBSON(raw bson.Raw) error {\n    var ts interface{}\n    if err := raw.Unmarshal(&ts); err != nil {\n        return err\n    }\n    switch ts.(type) {\n    case time.Time:\n        t = Timestamp{Time: ts.(time.Time).UTC()}\n        return nil\n    case string:\n        tss := ts.(string)\n        tt, err := ParseTimestamp(tss)\n        if err != nil {\n            return err\n        }\n        t = tt\n        return nil\n    case int64:\n        t = Timestamp{time.Unix(0, ts.(int64)int64(time.Millisecond)).UTC()}\n        return nil\n    case float64:\n        t = Timestamp{time.Unix(0, int64(ts.(float64))*int64(time.Millisecond)).UTC()}\n        return nil\n    }\nreturn fmt.Errorf(\"couldn't convert bson data (%T) %s to a Timestamp\", ts, ts)\n\n}\n// MarshalText implements the text marshaller interface\nfunc (t Timestamp) MarshalText() ([]byte, error) {\n    return []byte(t.String()), nil\n}\n// UnmarshalText reads this timestamp from a string value\nfunc (t *Timestamp) UnmarshalText(data []byte) error {\n    var value interface{}\n    json.Unmarshal(data, &value)\nswitch value.(type) {\ncase string:\n    v := value.(string)\n    if v == \"\" {\n        return nil\n    }\n    d, err := ParseTimestamp(v)\n    if err != nil {\n        return err\n    }\n    *t = d\ncase float64:\n    *t = Timestamp{time.Unix(0, int64(value.(float64))*int64(time.Millisecond)).UTC()}\ndefault:\n    return fmt.Errorf(\"couldn't convert json from (%T) %s to a time.Time\", value, data)\n}\nreturn nil\n\n}\n// UnmarshalJSON implements the json unmarshaller interface\nfunc (t *Timestamp) UnmarshalJSON(data []byte) error {\n    var value interface{}\n    json.Unmarshal(data, &value)\nswitch value.(type) {\ncase string:\n    v := value.(string)\n    if v == \"\" {\n        return nil\n    }\n    d, err := ParseTimestamp(v)\n    if err != nil {\n        return err\n    }\n    *t = d\ncase float64:\n    *t = Timestamp{time.Unix(0, int64(value.(float64))*int64(time.Millisecond)).UTC()}\ndefault:\n    return fmt.Errorf(\"Couldn't convert json from (%T) %s to a time.Time\", value, data)\n}\nreturn nil\n\n}\n```\n. there is an unmarshal on raw, how come you're not using that?\n. sorry slipped my mind, was waiting for the build to finish and then got sidetracked\n. this is great, the only reason I didn't do it before is because I wanted to remain compatible with the previous version of go as well. But now the last 2 versions of go accept the formatting, so I'm all for it.\nHowever you will have to run go generate ./generator for your changes to make into the binary\n. This is by design, this might have been a mistake though.\nThe mapping happens here: https://github.com/go-swagger/go-swagger/blob/master/generator/types.go#L143\nA good way to enable just int is perhaps through providing a flag, because people get upset when we make breaking changes like this.\n. you can use swagger generate model for the definitions and swagger generate operation --skip-handler for the other inlined schemas.\nNow you'd be the first one that I know of to be using that flag, so thanks for the validation :)  We may have to make a few small changes to make this work properly though (a few more superficial if guards)\n. fixed differently\n. I think I've updated this now\n. shellsesion\n docker run --rm -it golang:1.6 bash\nUnable to find image 'golang:1.6' locally\n1.6: Pulling from library/golang\n6a5a5368e0c2: Already exists \n7b9457ec39de: Already exists \nff18e19c2db4: Already exists \n00075397a1ec: Already exists \n3f856402c0c1: Pull complete \n499e61be84fe: Pull complete \na748c7fcbcd2: Pull complete \nDigest: sha256:014080d359f01e28de6b102ba5053e698c870bf74fcbcb5d41602b72869b017c\nStatus: Downloaded newer image for golang:1.6\nroot@a05bf7962919:/go# go get -u github.com/go-swagger/go-swagger/cmd/swagger\nroot@a05bf7962919:/go# swagger version\n0.5.0-186-gc2c8deb\n. Thanks for catching this, updated the master branch with a backwards compatible context\n. thanks!\n. which go-swagger version are you using?\n. Thanks a lot :+1: \n. thanks again! Do you know of https://slackin.goswagger.io\n. thanks a lot :100: \n. related: #402\n. This is because a property name of n in yaml turns into a boolean. \nWhen I use the yaml from the issue I get:\ngo\nmap[interface {}]interface {}{\n    \"definitions\": map[interface {}]interface {}{\n        \"key\": map[interface {}]interface {}{\n            \"description\": \"key content\",\n            \"properties\":  map[interface {}]interface {}{\n                \"kty\": map[interface {}]interface {}{\n                    \"description\": \"type\",\n                    \"type\":        \"string\",\n                },\n                \"e\": map[interface {}]interface {}{\n                    \"description\": \"key\",\n                    \"type\":        \"string\",\n                },\n                \"use\": map[interface {}]interface {}{\n                    \"description\": \"sign\",\n                    \"type\":        \"string\",\n                },\n                \"alg\": map[interface {}]interface {}{\n                    \"description\": \"algorithm\",\n                    \"type\":        \"string\",\n                },\n                false: map[interface {}]interface {}{\n                    \"description\": \"key\",\n                    \"type\":        \"string\",\n                },\n            },\n        },\n    },\n}\nBut when I quote the n property like the yaml below\nyaml\ndefinitions: \n  key:\n    description: key content\n    properties:\n      kty:\n        description: type\n        type: string\n      e:\n        description: key\n        type: string\n      use:\n        description: sign\n        type: string\n      alg:\n        description: algorithm\n        type: string\n      'n':\n        description: key\n        type: string\nI get: \ngo\nmap[interface {}]interface {}{\n    \"definitions\": map[interface {}]interface {}{\n        \"key\": map[interface {}]interface {}{\n            \"properties\": map[interface {}]interface {}{\n                \"kty\": map[interface {}]interface {}{\n                    \"description\": \"type\",\n                    \"type\":        \"string\",\n                },\n                \"e\": map[interface {}]interface {}{\n                    \"description\": \"key\",\n                    \"type\":        \"string\",\n                },\n                \"use\": map[interface {}]interface {}{\n                    \"description\": \"sign\",\n                    \"type\":        \"string\",\n                },\n                \"alg\": map[interface {}]interface {}{\n                    \"type\":        \"string\",\n                    \"description\": \"algorithm\",\n                },\n                \"n\": map[interface {}]interface {}{\n                    \"description\": \"key\",\n                    \"type\":        \"string\",\n                },\n            },\n            \"description\": \"key content\",\n        },\n    },\n}\n. this is on code that's not annotated right?\n. and you want an initial spec to get you going, if so try swagger init --help\n. do you have a repo where I can reproduce this with?\nI think it is because the package where you have that info is not referenced from a path used from the tree starting at main\n. duplicate of: #331\nduplicate of: #358\n. We currently don't have reverse routing, I think it would be a great addition to the runtime package.\nYou can define the response though:\nyaml\n        '201':\n          description: Created Pet\n          Location:\n            description: uri of the new pet\n            type: string\n            format: uri\n. you're right that's the correct syntax.\nI don't know if replacing the router would give you the reverse semantics. It might be just as easy to teach our router about reverse routing. How do you think it would be exposed to the end user?\nWhat is the code you'd like to write to get a reverse route? Something like pet.PetURI(id) ?\nTo implement a router that's usable for go-swaggers runtime you'd need to expose the following interface:\nhttps://github.com/go-openapi/runtime/blob/master/middleware/router.go#L118-L121\n. looks like you may need to re-run: go generate ./generator :)\nhttps://ci.appveyor.com/project/casualjim/go-swagger/build/0.1.785-gjwxobfn#L122\n. this should be fixed on master, I got a PR this week which fixes exactly this\n. You don't actually need httptest to test the handlers. \nA handler is essentially a function of parameters to result.\nThe result knows how to write itself to a http.ResponseWriter, and you already know that that part works.\nSo to test a handler what you require is to test just your code.\nSo to test the AddOne operation from the todo list this, there are 2 functions involved in the implementation.\nThe first function uses the data from the request to actually write the todo item to a store, this can be tested separately.\n``` go\nfunc addItem(item *models.Item) error {\n    if item == nil {\n        return errors.New(500, \"item must be present\")\n    }\nitemsLock.Lock()\ndefer itemsLock.Unlock()\n\nnewID := newItemID()\nitem.ID = newID\nitems[newID] = item\n\nreturn nil\n\n}\n```\nThen there is the actual handler:\ngo\ntodos.AddOneHandlerFunc(func(params todos.AddOneParams) middleware.Responder {\n  if err := addItem(params.Body); err != nil {\n    return todos.NewAddOneDefault(500).WithPayload(&models.Error{Code: 500, Message: swag.String(err.Error())})\n  }\n  return todos.NewAddOneCreated().WithPayload(params.Body)\n})\nTo test this second function we don't need to use the httptest package, you can assume that that part of the code works. So all you have to test is whether or not you get the right return types for a given set of parameters.\nDo you think this is sufficient?\n. This was fixed in d659fb1246322b1f42456dec2810ca60d90d84a1. scopes is supported through bearer auth. duplicate of #748 . at this moment it's just broken. Personally I'm strapped for time to make this work at this very moment, I'm hoping to spend some time on this during the week of christmas to fix it.\nBut if somebody wants to fix this sooner then I'd gladly merge. That is indeed the default behavior, but you can replace the loader function in your own program.\nhttps://github.com/go-openapi/spec/blob/master/expander.go#L183\nIf you load your spec with the loads package this should be done for you:\nhttps://github.com/go-openapi/loads/blob/master/spec.go#L54\nif that isn't the case then you may need to enlist yaml as a recognized format:\nhttps://github.com/go-swagger/go-swagger/blob/master/cmd/swagger/swagger.go#L27-L29. can you try to build from master and see if that fixes your issue? . on master there is also a new command called flatten, does it still occur after flattening the spec?. I really want to see your entire spec or equivalent repro.\nI suspect there might still be an issue in the spec somewhere and if not it's something that needs to be added to the tests so that it can remain solved.\n. You're being hit by 2 different bugs.\n\nwhen you don't flatten, the generator seems to not resolve the external file in generation.\nwhen you flatten, then the properties get a new casing for some reason, making the ref indeed invalid because it points to #definitions/LatLng instead of #definitions/latLng\n\nI think the second bug is easier to solve than the first one. I think this might work. I think only x-go-name was implemented in the bug you mentioned.\n```yaml\nswagger: '2.0'\ninfo:\n  title: Test\n  version: \"1\"\nhost: test.com\nbasePath: /\nproduces:\n  - application/json\nschemes:\n  - http\npaths:\n  /a/b:\n    get:\n      operationId: get_ab\n      parameters:\n        - name: pilot_area_only\n          in: query\n          type: boolean\n          default: false\n      responses:\n        200:\n          description: Test\n          headers:\n            Access-Control-Allow-Origin:\n              type: string\n              default: '*'\n          schema:\n            type: object\n            properties:\n              results:\n                $ref: '#/definitions/LocalDefs'\n        default:\n          description: Unexpected error\n          schema:\n            $ref: '#/definitions/Error'\ndefinitions:\n  LatLng:\n    type: object\n    x-go-type:\n      import:\n        package: \"github.com/user/package\"\n        alias: \"base\"\n      type: \"LatLng\"\n  LatLngLine:\n    type: object\n    x-go-type:\n      import:\n        package: \"github.com/user/package\"\n        alias: \"base\"\n      type: \"LatLngLine\"\n  LocalDef:\n    type: object\n    properties:\n      position:\n        $ref: './base.yaml#/definitions/LatLng'\n      extent:\n        $ref: './base.yaml#/definitions/LatLngLine'\n  LocalDefs:\n    type: array\n    items:\n      $ref: '#/definitions/LocalDef'\n  Error:\n    type: object\n    properties:\n      code:\n        type: integer\n        format: int32\n      message:\n        type: string\n````\n. For this generation to compile you need to have some packages in your GOPATH:\n- github.com/go-openapi/runtime\n- github.com/tylerb/graceful\n- github.com/jessevdk/go-flags\n- golang.org/x/net/context\nSo that boils down to you have to vendor those packages and you should be good. the go-swagger repo contains all the CLI stuff for the generators, but that's more like build tool not something you'd depend on in code.\n. I use this yaml in my projects for the go-swagger stuff.\nYou're not meant to vendor go-swagger directly, there is a much smaller runtime package. In glide I have to list out its dependencies.\nyaml\npackage: github.com/casualjim/private\nimport:\n- package: github.com/go-openapi/errors\n- package: github.com/go-openapi/loads\n- package: github.com/go-openapi/runtime\n  subpackages:\n  - client\n  - flagext\n  - middleware\n- package: github.com/go-openapi/spec\n- package: github.com/go-openapi/strfmt\n- package: github.com/go-openapi/swag\n- package: github.com/go-openapi/validate\n- package: github.com/tylerb/graceful\n  version: ^1.2.15\n- package: golang.org/x/net\n  subpackages:\n  - context\n- package: github.com/mailru/easyjson\n  version: master\n  subpackages:\n  - buffer\n  - jlexer\n  - jwriter. Your comments make me think you're starting out in golang, if that's not the case and you are fully aware of the path you're walking down I apologize.\nThe best piece of advice I can give you to get going with go is:\nDo not fight the gopath, only misery lies there should you still want to do the project thing then look at the gb tool\nBy not playing along with the gopath you will lose the ability (have to solve how) to publish libraries that can be fetched with go get\nSecond piece of advice:\nDo not fight gofmt, we all use it nobody likes tabs but it's consistent for everybody that way. I'd certainly accept a PR. You can perhaps build on the config file that was introduced for defining language support.\nI think you'd have to define a map entry for the formats and a snippet for registering that format in strfmts. So all in all shouldn't be too difficult to make work.\nThe int64 there is a reason for that, because int is platform dependent. And some languages have a different default. So making a contract for your API that leaves ambiguity might not be ideal for a public API. But I do think you can use a similar approach here, although a builtin like this might be harder to implement.\n. I can reproduce the error you see in your spec, just haven't found the cause for it yet.\nGolang never orders map keys the same way twice so that makes it so that that very sometimes it succeeds but more often than that it fails.\n. make it a pointer by adding x-nullable: true\n. I think this is fixed on master now, please close when confirmed. in your operation\n// responses:\n//   200: body:someModel and the rest is description. duplicate of #541, closing this one.. Thanks for this, many people will be thankful for this!\n. hi would it be possible to join the slack channel? https://slackin.goswagger.io/\nI have another person in there who wants to work on enums, so it'd be good to coordinate efforts a little. could you rebase this on master?. content negotiation based on Accept header and content type is done through the consumes/produces bits in a swagger spec. In go-swagger you have to hook up the consumers and producers. \nI've added your spec from #747 as example\nhttps://github.com/go-swagger/go-swagger/tree/master/examples/authentication. add x-nullable: true\n. would it be possible to add a spec to this issue?\n. The default configuration uses the error code as http status code. So when you return errors.New(100, \"incorrect api key auth\") the server will respond with 100 Expect Continue\nshellsession\n\u00b1 ivan@avalon:~  \n \u00bb curl -i -H 'Content-Type: application/keyauth.api.v1+json' -H 'X-Token: abcdefu' http://127.0.0.1:35307/api/customers\n```http\nHTTP/1.1 100 Continue\nContent-Type: application/keyauth.api.v1+json\nDate: Fri, 25 Nov 2016 19:16:29 GMT\n^C\n```\nChanging the error code to 401 fixes the issue for me.\n\u00b1 ivan@avalon:~\n \u00bb curl -i -H 'Content-Type: application/keyauth.api.v1+json' -H 'X-Token: abcdefuvwxyz' http://127.0.0.1:35307/api/customers\nhttp\nHTTP/1.1 501 Not Implemented\nContent-Type: application/keyauth.api.v1+json\nDate: Fri, 25 Nov 2016 19:14:14 GMT\nContent-Length: 57\n\"operation customers.GetID has not yet been implemented\"\nshellsession\n\u00b1 ivan@avalon:~\n \u00bb curl -i -H 'Content-Type: application/keyauth.api.v1+json' -H 'X-Token: abcdefu' http://127.0.0.1:35307/api/customers\nhttp\nHTTP/1.1 401 Unauthorized\nContent-Type: application/keyauth.api.v1+json\nDate: Fri, 25 Nov 2016 19:16:49 GMT\nContent-Length: 47\n{\"code\":401,\"message\":\"incorrect api key auth\"}     \n```. you may want to make your own responder, then you have access to the response writer and you can set your cookie\n. people typically return a 204 for success responses that don't have content.. Try this\n```Dockerfile\nFROM golang\nMAINTAINER E. Theodore L. Omtzigt \nENV GOBIN $GOPATH/bin\nADD . /go/src/github.com/Ravenwater/server-complete\nRUN go install /go/src/github.com/Ravenwater/server-complete/cmd/todo-list-server\nWORKDIR /go/src/github.com/Ravenwater/server-complete\nENTRYPOINT /go/bin/todo-list-server --port 8090 --host 0.0.0.0\nserving HTTP of 8090\nEXPOSE 8090\n```. by default goswagger servers default to localhost, this is done so that on osx it doesn't trigger the firewall popup when you test. Also it's safer to not listen on all interfaces by default.\nInside a docker container we do want to listen on all interfaces because localhost there refers to the docker container itself. \nthen the other edit is the go install without the main.go. The only time you need to refer to files directly is when you use go run, for go install you can refer to the package that contains the main and then the binary will be named the same as the folder (package).\nFor a slightly more advanced (and a lot smaller container) you can also use a 2 stage compilation process, You use 1 container to build the binary and and another container to run the binary.\nYou can run the build.sh script below. Unfortunately I've never tried this on windows though, I think your best bet there is to use powershell. (or perhaps try the windows linux subsystem). The files i included below are also available here: https://github.com/casualjim/testapp\nFor a folder called testapp in the gopath with the following files in it:\nDockerfile:\n```Dockerfile\nFROM casualjim/base:latest\nMAINTAINER Ivan Porto Carrero ivan@flanders.co.nz (@casualjim)\nADD testapp /testapp\nEXPOSE 8080\nENTRYPOINT [\"/testapp\"]\n```\nbuild.sh\n```shell\n!/bin/bash\nset -e -o pipefail\nversion=${1-\"latest\"}\nbrwhte=\"$(tput setaf 15)\"\nbryllw=\"$(tput setaf 11)\"\ncreset=\"$(tput sgr0)\"\nyarrow=\"${bryllw}=>${creset}\"\nbuild_binary() {\n  set -u\n  echo -e \"${yarrow} building binary ${brwhte}testapp${creset}\"\n  docker pull casualjim/builder\n  docker run --rm -it -v pwd:/go/src/github.com/casualjim/testapp -w /go/src/github.com/casualjim/testapp  casualjim/builder \"$@\"\n}\nbuild_container() {\n  set -u\n  echo -e \"${yarrow} publishing ${brwhte}testapp${creset}\"\n  docker build --pull --no-cache -q -t casualjim/testapp:$version .\n}\nbuild_binary go get ./... && go build -o testapp -a -ldflags '-w -linkmode external -extldflags \"-static\"' .\nbuild_container\n```\nmain.go:\n```go\npackage main\nimport (\n    \"fmt\"\n    \"log\"\n    \"net\"\n    \"net/http\"\n    \"net/http/httputil\"\n    \"time\"\n\"github.com/tylerb/graceful\"\n\n)\nfunc main() {\n    mux := http.NewServeMux()\n    mux.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n        b, err := httputil.DumpRequest(req, false)\n        if err != nil {\n            log.Printf(\"handle request: %v\", err)\n        }\n        log.Printf(\"%s\", b)\n        fmt.Fprintf(w, \"Welcome to the home page!\")\n    })\nhttpServer := &graceful.Server{Server: new(http.Server)}\nhttpServer.SetKeepAlivesEnabled(true)\nhttpServer.TCPKeepAlive = 3 * time.Minute\nhttpServer.ListenLimit = 50\nhttpServer.Timeout = 10 * time.Second\nhttpServer.Handler = mux\nhttpServer.Logger = graceful.DefaultLogger()\n\ntcpv4Listener, err := net.Listen(\"tcp4\", \":8080\")\nif err != nil {\n    log.Fatalln(err)\n}\n\nlog.Println(\"serving on\", tcpv4Listener.Addr().String())\nif err := httpServer.Serve(tcpv4Listener); err != nil {\n    log.Fatalln(err)\n}\n\n}\n```. yeah the build script is specifically for building against a musl based linux in a docker container. A discriminator field can't be empty. https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schema-object\n\nAdds support for polymorphism. The discriminator is the schema property name that is used to differentiate between other schema that inherit this schema. The property name used MUST be defined at this schema and it MUST be in the required property list. When used, the value MUST be the name of this schema or any schema that inherits it.\n\nIs there any chance you can actually submit swagger specifications to reproduce your issues?. Thanks for your feedback.\nI'm sorry you have a tough time, but this project is very much a project of volunteers. A number of people have fixed issues that they ran into. Similarly I use this project for work, so the little free time I have I spend on the issues that affect the teams I work with directly.\nAre you sure you're using this in a gopath? And are your imports fully qualified imports?\nAs far as I know the examples in the examples folder all work correctly.\nThere is also the project I use for the tests of the scanner: https://github.com/go-swagger/go-swagger/tree/master/fixtures/goparsing/classification\nAt a very minimum could you provide a small repro case?. can you try this:\nmkdir -p /tmp/go/src/foo\ncat > /tmp/go/src/foo/main.go <<EOF\npackage main\n//swagger:response Foo\ntype Foo struct {\n    Bar int\n}\nEOF\nGOPATH=/tmp/go swagger generate spec\ngo is opinionated about the gopath, you can read more about it here:\nhttps://golang.org/doc/code.html\nhttps://github.com/golang/go/wiki/GOPATH. I've added this to the faq now. Can you change your alias a little?\nI think either of these should work:\nalias swagger='docker run --rm -it -v /home/sandy:/root -v /home/sandy/go/src/my_org:/go/src/my_org -w /go/src/my_org/my_project quay.io/goswagger/swagger'\nor\nalias swagger='docker run --rm -it -e GOPATH=/home/sandy/go:/go -v /home/sandy:/home/sandy -w /home/sandy/go/src/my_org/my_project quay.io/goswagger/swagger'\n. The explanation is that on your local machine the project definitely resides in the go path, but the go path in the docker container is at /go not at your home directory.\nThere are also a  few items pre-installed in the gopath of the container you're using so that also makes it so you can't fully overwrite the go path with yours.\nIt is possible though but then you have to make sure you have these packages in your local go path (and compiled for linux not another OS) https://github.com/go-swagger/go-swagger/blob/master/Dockerfile#L5-L10. It depends on which go version you are using, you may have to set: GO15VENDOREXPERIMENT=1 \nif the go version you're using isn't 1.6+\nPersonally I use the gvt tool for vendoring and it picks all the packages up you listed as actual list when you vendor the packages that are listed at the end of the command.\nIt recursively fetches all the packages properly.\n. The errors in your stacktrace suggests to me that the import paths are a bit off. How do your import paths look in your files?. I can reproduce your problem. \n```shellsession\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb tree\n.\n\u2514\u2500\u2500 swagger.yml\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb govendor init\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb tree -L 3 vendor \nvendor\n\u2514\u2500\u2500 vendor.json\n0 directories, 1 file\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb govendor fetch -v github.com/go-openapi/runtime\nGet latest revision \"github.com/go-openapi/runtime\"\nGet latest revision \"golang.org/x/net/context\"\nGet latest revision \"github.com/go-openapi/swag\"\nGet latest revision \"github.com/go-openapi/strfmt\"\nGet latest revision \"github.com/go-openapi/errors\"\nGet latest revision \"github.com/mailru/easyjson/jlexer\"\nGet latest revision \"github.com/mailru/easyjson/jwriter\"\nGet latest revision \"github.com/asaskevich/govalidator\"\nGet latest revision \"github.com/mitchellh/mapstructure\"\nGet latest revision \"github.com/mailru/easyjson/buffer\"\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb govendor fetch -v github.com/tylerb/graceful\nGet latest revision \"github.com/tylerb/graceful\"\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb govendor fetch -v github.com/jessevdk/go-flags\nGet latest revision \"github.com/jessevdk/go-flags\"\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb govendor fetch -v golang.org/x/net/context\nGet latest revision \"golang.org/x/net/context\"\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb tree -L 3 vendor\nvendor\n\u251c\u2500\u2500 github.com\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 asaskevich\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 govalidator\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 go-openapi\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 errors\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 runtime\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 strfmt\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 swag\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jessevdk\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 go-flags\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mailru\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 easyjson\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mitchellh\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mapstructure\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tylerb\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 graceful\n\u251c\u2500\u2500 golang.org\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 x\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 net\n\u2514\u2500\u2500 vendor.json\n19 directories, 1 file\n```\nIt seems govendor doesn't pick up the validate package, so I added that\n```shellsession\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb govendor fetch -v github.com/go-openapi/validate\nGet latest revision \"github.com/go-openapi/validate\"\nGet latest revision \"github.com/go-openapi/analysis\"\nGet latest revision \"github.com/go-openapi/jsonpointer\"\nGet latest revision \"github.com/go-openapi/spec\"\nGet latest revision \"github.com/go-openapi/loads\"\nGet latest revision \"github.com/go-openapi/jsonreference\"\nGet latest revision \"github.com/PuerkitoBio/purell\"\nGet latest revision \"golang.org/x/net/idna\"\nGet latest revision \"golang.org/x/text/width\"\nGet latest revision \"github.com/PuerkitoBio/urlesc\"\nGet latest revision \"golang.org/x/text/unicode/norm\"\nGet latest revision \"golang.org/x/text/internal/gen\"\nGet latest revision \"golang.org/x/text/internal/triegen\"\nGet latest revision \"golang.org/x/text/internal/ucd\"\nGet latest revision \"golang.org/x/text/transform\"\nGet latest revision \"golang.org/x/text/unicode/cldr\"\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb \n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb tree -L 3 vendor\nvendor\n\u251c\u2500\u2500 github.com\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 asaskevich\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 govalidator\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 go-openapi\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 analysis\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 errors\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 jsonpointer\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 jsonreference\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 loads\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 runtime\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 spec\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 strfmt\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 swag\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 validate\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jessevdk\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 go-flags\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mailru\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 easyjson\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mitchellh\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mapstructure\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 PuerkitoBio\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 purell\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 urlesc\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tylerb\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 graceful\n\u251c\u2500\u2500 golang.org\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 x\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 net\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 text\n\u2514\u2500\u2500 vendor.json\n29 directories, 1 file\n```\n```\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb alias swagger=\"docker run --rm -it -v /home/ivan/go/src/swagger-test:/go/src/swagger-test -w /go/src/swagger-test quay.io/goswagger/swagger\"\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb which swagger\nswagger: aliased to docker run --rm -it -v /home/ivan/go/src/swagger-test:/go/src/swagger-test -w /go/src/swagger-test quay.io/goswagger/swagger\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb swagger generate server -A TodoList -f swagger.yml\nUnable to find image 'quay.io/goswagger/swagger:latest' locally\nlatest: Pulling from goswagger/swagger\n28c417e954d8: Pull complete \n8abaad28289b: Pull complete \nc0d3fbe7c6e2: Pull complete \nbaa638d2506a: Pull complete \n4ceb95128ac9: Pull complete \n2d0a16542275: Pull complete \n00568dfa5f26: Pull complete \n31dcaa898959: Pull complete \nDigest: sha256:218cf4d488a23a6f7d0e7fcbe39628cecf758dd420221080fed01686b124dd85\nStatus: Downloaded newer image for quay.io/goswagger/swagger:latest\n2016/11/24 21:40:01 building a plan for generation\n2016/11/24 21:40:01 planning definitions\n2016/11/24 21:40:01 planning operations\n2016/11/24 21:40:01 grouping operations into packages\n....\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb sudo chown -R ivan:ivan .\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb go run ./cmd/todo-list-server/main.go\nswagger-test/restapi/operations/todos\nrestapi/operations/todos/add_one_parameters.go:50: cannot use route.routeEntry.Formats (type \"github.com/go-openapi/strfmt\".Registry) as type \"swagger-test/vendor/github.com/go-openapi/strfmt\".Registry in argument to body.Validate:\n    \"github.com/go-openapi/strfmt\".Registry does not implement \"swagger-test/vendor/github.com/go-openapi/strfmt\".Registry (wrong type for Add method)\n        have Add(string, \"github.com/go-openapi/strfmt\".Format, \"github.com/go-openapi/strfmt\".Validator) bool\n        want Add(string, \"swagger-test/vendor/github.com/go-openapi/strfmt\".Format, \"swagger-test/vendor/github.com/go-openapi/strfmt\".Validator) bool\n....\n```\n. I want to contrast this with the result I get when I use gvt as vendoring tool\n```shellsession\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb rm -rf vendor\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb gvt fetch github.com/go-openapi/runtime\n2016/11/24 13:44:04 Fetching: github.com/go-openapi/runtime\n2016/11/24 13:44:06 \u00b7 Fetching recursive dependency: github.com/docker/go-units\n2016/11/24 13:44:07 \u00b7 Fetching recursive dependency: github.com/go-openapi/strfmt\n2016/11/24 13:44:08 \u00b7\u00b7 Fetching recursive dependency: github.com/mitchellh/mapstructure\n2016/11/24 13:44:10 \u00b7\u00b7 Fetching recursive dependency: github.com/mailru/easyjson/jlexer\n2016/11/24 13:44:11 \u00b7\u00b7 Fetching recursive dependency: github.com/go-openapi/errors\n2016/11/24 13:44:13 \u00b7\u00b7 Fetching recursive dependency: github.com/mailru/easyjson/jwriter\n2016/11/24 13:44:13 \u00b7\u00b7\u00b7 Fetching recursive dependency: github.com/mailru/easyjson/buffer\n2016/11/24 13:44:13 \u00b7\u00b7 Fetching recursive dependency: github.com/asaskevich/govalidator\n2016/11/24 13:44:14 \u00b7 Fetching recursive dependency: github.com/stretchr/testify/assert\n2016/11/24 13:44:16 \u00b7\u00b7 Fetching recursive dependency: github.com/stretchr/testify/vendor/github.com/pmezard/go-difflib/difflib\n2016/11/24 13:44:16 \u00b7\u00b7 Fetching recursive dependency: github.com/stretchr/testify/vendor/github.com/davecgh/go-spew/spew\n2016/11/24 13:44:16 \u00b7 Fetching recursive dependency: github.com/gorilla/context\n2016/11/24 13:44:17 \u00b7 Fetching recursive dependency: golang.org/x/net/context/ctxhttp\n2016/11/24 13:44:19 \u00b7\u00b7 Fetching recursive dependency: golang.org/x/net/context\n2016/11/24 13:44:19 \u00b7 Fetching recursive dependency: github.com/go-openapi/loads\n2016/11/24 13:44:20 \u00b7\u00b7 Fetching recursive dependency: github.com/go-openapi/analysis\n2016/11/24 13:44:22 \u00b7\u00b7\u00b7 Fetching recursive dependency: github.com/go-openapi/swag\n2016/11/24 13:44:23 \u00b7\u00b7\u00b7 Fetching recursive dependency: github.com/go-openapi/jsonpointer\n2016/11/24 13:44:25 \u00b7\u00b7\u00b7 Fetching recursive dependency: github.com/go-openapi/spec\n2016/11/24 13:44:26 \u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: github.com/go-openapi/jsonreference\n2016/11/24 13:44:28 \u00b7\u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: github.com/PuerkitoBio/purell\n2016/11/24 13:44:29 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: github.com/PuerkitoBio/urlesc\n2016/11/24 13:44:31 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: golang.org/x/text/unicode/norm\n2016/11/24 13:44:33 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: golang.org/x/text/internal/gen\n2016/11/24 13:44:33 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: golang.org/x/text/unicode/cldr\n2016/11/24 13:44:33 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: golang.org/x/text/internal/ucd\n2016/11/24 13:44:33 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: golang.org/x/text/transform\n2016/11/24 13:44:33 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: golang.org/x/text/internal/triegen\n2016/11/24 13:44:33 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: golang.org/x/net/idna\n2016/11/24 13:44:33 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: golang.org/x/text/width\n2016/11/24 13:44:33 \u00b7\u00b7 Fetching recursive dependency: gopkg.in/yaml.v2\n2016/11/24 13:44:36 \u00b7 Fetching recursive dependency: github.com/go-openapi/validate\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb gvt fetch github.com/tylerb/graceful\n2016/11/24 13:44:44 Fetching: github.com/tylerb/graceful\n2016/11/24 13:44:45 \u00b7 Fetching recursive dependency: github.com/urfave/negroni\n2016/11/24 13:44:47 \u00b7 Fetching recursive dependency: gopkg.in/tylerb/graceful.v1\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb gvt fetch github.com/jessevdk/go-flags\n2016/11/24 13:44:56 Fetching: github.com/jessevdk/go-flags\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb gvt fetch golang.org/x/net/context\n2016/11/24 13:45:04 command \"fetch\" failed: golang.org/x/net/context or a parent of it is already vendored\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb tree -L 3 vendor\nvendor\n\u251c\u2500\u2500 github.com\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 asaskevich\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 govalidator\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 docker\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 go-units\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 go-openapi\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 analysis\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 errors\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 jsonpointer\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 jsonreference\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 loads\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 runtime\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 spec\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 strfmt\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 swag\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 validate\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 gorilla\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 context\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jessevdk\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 go-flags\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mailru\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 easyjson\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mitchellh\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mapstructure\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 PuerkitoBio\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 purell\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 urlesc\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 stretchr\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 testify\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tylerb\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 graceful\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 urfave\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 negroni\n\u251c\u2500\u2500 golang.org\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 x\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 net\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 text\n\u251c\u2500\u2500 gopkg.in\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tylerb\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 graceful.v1\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 yaml.v2\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 apic.go\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 decode.go\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 emitterc.go\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 encode.go\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 LICENSE\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 parserc.go\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 readerc.go\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 resolve.go\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 scannerc.go\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 sorter.go\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 writerc.go\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 yaml.go\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 yamlh.go\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 yamlprivateh.go\n\u2514\u2500\u2500 manifest\n41 directories, 15 files\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb which swagger\nswagger: aliased to docker run --rm -it -v /home/ivan/go/src/swagger-test:/go/src/swagger-test -w /go/src/swagger-test quay.io/goswagger/swagger\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb ls\ncmd  models  restapi  swagger.yml  vendor\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb rm -rf cmd models restapi \n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb swagger generate server -A TodoList -f swagger.yml\n2016/11/24 21:45:35 building a plan for generation\n2016/11/24 21:45:35 planning definitions\n2016/11/24 21:45:35 planning operations\n2016/11/24 21:45:35 grouping operations into packages\n2016/11/24 21:45:35 planning meta data and facades\n2016/11/24 21:45:35 rendering 2 models\n...\nGeneration completed!\nFor this generation to compile you need to have some packages in your GOPATH:\n\ngithub.com/go-openapi/runtime\ngithub.com/tylerb/graceful\ngithub.com/jessevdk/go-flags\ngolang.org/x/net/context\n\nYou can get these now with: go get -u -f ./...\n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb sudo chown -R ivan:ivan .          \n\u00b1 ivan@avalon:~/go/src/swagger-test\n \u00bb go run ./cmd/todo-list-server/main.go\n2016/11/24 13:45:49 the required flags --tls-certificate and --tls-key were not specified\nexit status 1\n```. would it be possible to include the entire spec?\nbecause this looks a lot like a bug in the unique name generation part. Your url needs to contain the base path, taking the spec you provided and generated a server. \nshellsession\n$ go run ./cmd/mosaics-server/main.go --scheme http\n2016/11/29 07:40:46 Serving mosaics at http://127.0.0.1:45531\nThen in another terminal I did\nshellsession\n$ curl 127.0.0.1:45531/mosaic/experimental/mosaics\n{\"code\":405,\"message\":\"method GET is not allowed, but [PUT,POST] are\"}\n$ curl 127.0.0.1:45531/v1/mosaic/experimental/mosaics\n\"operation .GetMosaicExperimentalMosaics has not yet been implemented\"\n$ curl -XPOST 127.0.0.1:45531/v1/mosaic/experimental/mosaics\n\"operation .PostMosaicExperimentalMosaics has not yet been implemented\"\n$ curl -XPUT 127.0.0.1:45531/v1/mosaic/experimental/mosaics\n\"operation .PutMosaicExperimentalMosaics has not yet been implemented\"\nAlso the discriminator value in MosaicSeriesFilter should be filterType I think because I don't see a type field. . That is correct 405 is the wrong error and is confusing. this should be fixed in the latest runtime by go-openapi/runtime#26. the api has a Logger property that is a function with signature: func(string, ...interface{})\nYou can configure it with any logger that exposes the signature.\neg.: https://github.com/go-swagger/go-swagger/blob/master/examples/authentication/restapi/configure_auth_sample.go#L33. You can generate a server with --flag-strategy pflag\nAfter that you can use its integration to add goflags, you would do this in the main file. subsequently it's probably a good idea to generated code with --exclude-main so the update is preserved.\nhttps://github.com/spf13/pflag#supporting-go-flags-when-using-pflag\n```go\nimport (\n    goflag \"flag\"\n    flag \"github.com/spf13/pflag\"\n)\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\nfunc main() {\n    flag.CommandLine.AddGoFlagSet(goflag.CommandLine)\n    flag.Parse()\n}\n```. related #733. it's a bug but fwiw the spec is also not entirely valid. The type of the items should be integer not number\nyaml\nswagger: '2.0'\ninfo:\n  title: Test\n  description: Test Service\n  version: '1.0.0'\nhost: localhost\nbasePath: /\nproduces:\n  - application/json\nschemes:\n  - http\npaths:\n  /myMethod:\n    get:\n      operationId: get_test\n      summary: Get a list of int32s.\n      responses:\n        200:\n          schema:\n            $ref: '#/definitions/test_list'\ndefinitions:\n  test_list:\n    type: object\n    properties:\n      the_array:\n        type: array\n        items:\n          minimum: 0\n          maximum: 10\n          type: integer\n          format: int32. This probably belongs on https://github.com/swagger-api/swagger-core or one of the repos in the https://github.com/swagger-apiswagger-api org\nThis project is only about the go bindings for swagger. by all means!. Reopened until a solution that is backwards compatible can be added. o you're not setting the default values on the properties themselves? \nI suppose it's a valid json schema. no that's a bug, it would need fixing in the code generator. yaml\n user:\n    type: object\n    required:\n      - role\n    properties:\n      role:\n        type: integer\n        enum:\n          - 0\n          - 1\n          - 10\n          - 11\n          - 20\nor\nyaml\n user:\n    type: object\n    properties:\n      role:\n        type: integer\n        x-nullable: true\n        enum:\n          - 0\n          - 1\n          - 10\n          - 11\n          - 20. thanks!. there is some overlap here with #744 which does more extensive enum support. Would it be possible to separate the 2?\nIf you're planning on contributing more (which would be awesome) we have a slack team. https://slacking.goswagger.io. Is it the same spec from your previous issues?\nCan you share the request you make that triggers this?. ah you have to add a Content-Type header to your request.\nThis is a bug because it should return a 4xx status code. unfortunately this doesn't exist today, the only thing you can do is exclude models from being generated.\nThat being said I think this would not be terribly hard to add though as an extra set of flags or a part of the config file.\nI think it would be a valuable addition to this toolkit and I'd welcome a PR that added support for this.. I think it might be worth defining 2 new vendor extensions because I think x-go-package and x-go-name have a slightly different reason for existing. Perhaps something like x-go-type and \"x-go-import\": { \"package\": \"github.com/user/package\", \"alias\":\"jwk\" }\nWe can also make the check for the Validate implementation optional and only when it can be converted to that interface we'll call the method. That can save you having to wrap the type for the sake of implementing a dummy interface.\n\nbut I cannot figure out where the import string came from\n\nWhen a go file is generated we call goimports which fixes up imports and formats the file, so that might explain why you get the automatic import in there.\nI think you're on the right track with this fix\n. I can see why you want a description, but at that point the swagger spec is nothing more than a documentation tool. So I don't know what you would gain by that over just using a markdown document.\nWhen you define headers like you've described in your proposal, we lose type information. The point of making you define structs is so that you get the type checking from the compiler, and overall it leads to a better defined code base and API.\nAs for your second point, are you saying you want to reuse a partial parameter struct to also serve as list of headers for a response.  Because I think that might be a good addition. The problem arises when there are things defined on the parameter struct that aren't headers or a body, do you have a solution for that?. I merged the #738 PR, sorry for the delay.\nI have no objection to the addition of description: \nPretty much the only thing I will object to is putting type information in the comments.. yeah data types. Like defining headers for responses and such. \nFor headers you'd have to give a type for the header and I'm not a fan of duplicating that information in comments because you lose the benefits a compiler adds.\n. yeah I think this is a bug.\nThis is the code responsible for that section: https://github.com/go-swagger/go-swagger/blob/master/scan/validators.go#L569-L648. You can already reuse parameters, that captures this case\nI think this is answered by: https://github.com/go-swagger/go-swagger/issues/782#issuecomment-266334244\n. You can do much of what you want to achieve today.\nParameter structs can be associated with more than one operation, and you can define more than one parameter struct.\n```markdown\nswagger:params [operationid1 operationid2]\nLinks a struct to one or more operations. The params in the resulting swagger spec \ncan be composed of several structs.  There are no guarantees given on how property \nname overlaps are resolved when several structs apply to the same operation.\n```\nSo the idea is that when you want to have a parameter struct that is comprised out of several parameter struct, you don't annotate the one you bind to but rather compose it out of other pieces.\nThen the second ask for the responses, there is a syntax for that use case.\n```go\n// swagger:route PUT /orders/{id} orders updateOrder\n//\n// Responses:\n//   default: body:genericError\n//   200: body:someResponse\n//   422: body:validationError\nmountItem(\"PUT\", basePath+\"/orders/:id\", nil)\n// A GenericError is the default error message that is generated.\n// For certain status codes there are more appropriate error structures.\n//\n// swagger:response genericError\ntype GenericError struct {\n    // in: body\n    Body struct {\n        Code    int32 json:\"code\"\n        Message error json:\"message\"\n    } json:\"body\"\n}\n// A ValidationError is an that is generated for validation failures.\n// It has the same fields as a generic error but adds a Field property.\n//\n// swagger:response validationError\ntype ValidationError struct {\n    // in: body\n    Body struct {\n        Code    int32  json:\"code\"\n        Message string json:\"message\"\n        Field   string json:\"field\"\n    } json:\"body\"\n}\n// A ModelAndResponse contains a params and model annotation, so it's invalid\n//\n// swagger:model theModelName\n// swagger:response someResponse\ntype ModelAndResponse struct {\n    ID int64 json:\"id,omitempty\"\n}\n```\n. What syntax would you propose for this?. what is the value of adding more comments, because you can deep merge an existing swagger file. Doesn't that solve the problem for you @GlenDC. The benefit is that you can use swagger validation to validate your partial spec. so you want to provide a swagger spec like the input spec but in the code?. So you want to provide a value you parse out of the comments\nit would probably be injected here:\nhttps://github.com/go-swagger/go-swagger/blob/master/scan/scanner.go#L192\nNow as to implementation of it, it would be something like a swagger:input annotation (which is new) and then the rest of that comment block can be considered a swagger specification\nIf the first char is { parse json otherwise try yaml. oic I was coming from the POV of having a replacement for the input swagger specification instead of what you describe.\nIn case of the swagger:router I think what you want is to just a few more keys that are recognized, in that case you can extend what exists today for the swagger:router.\nA good starting point to read up on that is: https://github.com/go-swagger/go-swagger/blob/master/scan/routes.go#L194-L199\n. superseded by: #793. you typically see this error when you have nested vendors. which version of swagger are you using? because I'm having a hard time reproducing this issue.\nhttps://github.com/go-swagger/go-swagger/pull/806. I've confirmed that the issue exists in 0.7.4 and is gone on master. I created a 0.8.0 release, so you have a stable version to depend on\nhttps://github.com/go-swagger/go-swagger/releases/tag/0.8.0. fixed by #815 . I had to revert this once I saw it introduces a breaking change in the generated code.\nI think this needs an extra method: ValidateNamed which can have the name as extra argument.\nThen an aliased type should be validated with the ValidateNamed method while other things can continue to use the Validate method.. fixed by #815 . thanks, they have been fixed now. is your spec valid? because the default behavior is everything. it's true to the spec, change it to\nyaml\nproduct_type:\n         description: The type of product this mosaic is\n         enum:\n           - basemap\n           - timelapse\n           - l3m. yes can be a good idea to add to the codegenerator. The reason it generates with swagger-codegen is because swagger-codegen doesn't generate any of the models.\nIn the spec there is a property language with type: \"null\"\nThis is allowed in json schema but not in swagger 2.0's interpretation of json schema. . Thanks!. you need to get those packages on your gopath either by vendoring or go getting them.\nAfter you've done that and regenerate everything should work. It's because we use goimports to reformat the file and optimize imports.\nrelated: #817 . with govendor you need to update the dependencies manuall\nso you also need to update:\n\ngithub.com/go-openapi/loads\ngithub.com/go-openapi/analysis\ngithub.com/go-openapi/runtime\ngithub.com/go-openapi/spec\ngithub.com/go-openapi/swag. the spec is invalid too. If you want an integer number you need to use\n\n```yaml\nint32\ntype: integer\nformat: int32\nint64\ntype: integer\nformat: int64\n```\n. What's the go version you're using?\nWhat's the OS you're using?\nWould it be possible to post a single complete spec that exhibits the issue (something that can be added to the tests)?. I meant a contrived swagger yaml or json that can be used to reproduce the issue, we don't care much for the names of the types.\nThis partial information isn't helpful for somebody who wants to look at this to debug your issue.\n. Can you reproduce this with a minimal spec that you just make up? A minimal example that has nothing to do with your actual project. Something completely unrelated to your actual project. We don't care\nWith information like you shared the most likely outcome is nobody is going to look at it because too much effort/guesswork to reproduce this issue, or you have to debug it yourself.\nThe code that does the imports is here: https://github.com/golang/tools/tree/master/cmd/goimports\nSwagger reformats and adds imports here: https://github.com/go-swagger/go-swagger/blob/master/generator/shared.go#L95-L102\n. duplicate of: #733. fwiw I'm actually working on a  fix for this atm. Thanks!. These are good suggestions, will look into adding swagger as preferred tag for name overrides.\nYou're right I don't think examples are currently supported, how would you like to see that work. did you set up a TextProducer too?. In which project is this? Master etc all point to codecov.io. I've been thinking a bit more about this and because the thing being validated would always be called from another method., that method could just rewrite the errors by adding the field name info in there.\nLess invasive . so sorry I didn't see it the first time around.\nyou still need to run go generate ./generator because you changed the template, and without it the changes won't show up in bindata.go. yes if templates are changed then bindata needs to get changed too, in the binary that's how we distribute the templates. maybe duplicate of: #100. can you run go generate ./generator so that the template changes are included in the binary?. sure if you want to add by all means :). For composed objects there might also be inheritance involved etc. At first glance I don't know why the custom marshaller was triggered because there is no discriminator involved.\nIn the future it would be nice to generate custom marshal/unmarshal methods for every generated struct using https://github.com/mailru/easyjson. when a discriminator is involved because then you have only an interface and it needs to be able to marshal a concrete type. json ast with support for parser position. https://github.com/ajeddeloh/go-json. if you want a type alias you shouldn't use an inline definition of the enum, but move the enum to a definition itself. That will hint the code generator that you want it to be a type alias. (takes care of issue 3 in your list)  I wouldn't object to expanding this to also do that for inline enum definitions.\nI think there are many different kinds of enums to be compliant with json schema and string enums are not the only ones that matter.  According to json-schema any type can be used in an enum this includes arrays and objects\nNot importing of validate is kind of futile because other validations that are present will require it anyway. Surely your application doesn't have 1 model with 1 property that is an enum so I don't quite understand the objection to it. If it is 1 model with 1 property and that is an enum I don't know what codegen buys you at all.\nThe reason it uses a singleton is because of complex objects like nested structs can also be enums in which case it's much harder to generate constants for them. init comes at a negligible one time cost so other than cleanliness I don't know what the objection is as this is unexported usage in generated code. So what is the objection besides it's not the code you would have preferred to see the most for this narrower use case.. you can run your code with DEBUG=1 env var and it will print request/response. go for it. a work around for this is to flatten the spec before generating it. I'm in favor of all. You already get the response as a type it just comes out as the error interface, but you can type switch on the and get the actual type.  There isn't much point to a contract if it doesn't describe your interface.\nSecondly a breaking change like this is not something we want to introduce without a really good reason for it.\n. I have no issue with Glens addition, we kind of already have all the code for it with the BinaryMarshaller interface implementations. This time stamp is missing zone info, it should end with Z for UTC IIRC\nIt can be fixed by adding more patterns here: https://github.com/go-openapi/strfmt/blob/master/time.go#L60. The name in there is optional and is for when you want to override the name (key) that appears in the definitions section of your swagger spec\nSo I don't know how useful dots are there, because those names should be language agnostic \n(personally I prefer json naming conventions for specs). additional items are just a specialization of what we already have.\nit's a tuple with the last element being a slice. you can implement a responder function which is: func(http.ResponseWriter, runtime.Producer)\nhttps://github.com/go-openapi/runtime/blob/master/middleware/context.go#L59\nThe params struct has access to the http.Request and with the responder function you have access to the response writer\ngo\napi.StaticSayHelloHandler = static.SayHelloHandlerFunc(func(params static.SayHelloParams) middleware.Responder {\n  return middleware.ResponderFunc(func(rw http.ResponseWriter, _ runtime.Producer){\n    conn, err := upgrader.Upgrade(rw, params.HTTPRequest, nil)\n    if err != nil {\n      log.Println(err)\n      return\n    }\n  })\n}). Thanks, can you run: go generate ./generator\nOtherwise the template changes won't be picked up in the binary. Ok there are a number of issues here :)\n\n\nyes we should allow for adding custom struct tags, this can be supported by defining a vendor extension to drive that process. With that we should be able to support some form of bson, protobuf etc.\nHowever json-schema is very elaborate and there are cases where a custom interface needs to be implemented to get to the right result, but for simple cases the tags would work. Things like additionals properties, or allOf etc they'd get problematic.  We can extract the tags for struct from struct field and put them in a unprotected template. The reason the model templates are protected is because of the complexity of json-schema\n\n\nIt's never been a goal of go-swagger to allow for direct insertion in the database because this grows the problem space significantly and I personally think that for anything but the simplest of applications you shouldn't store things you receive from the API directly into the database. In most cases you probably want to denormalize these data structures. \n\n\nIf you do decide you want to mix up external and internal concerns in your application, then somebody will need to add the right interface methods to https://github.com/go-openapi/strfmt, it's been done for sql, mapstructure and json. You can add the bson interfaces there.\n\n\nIf you really want to use bson.ObjectId directly then you can define a new format to indicate that. I think it's a common enough problem people run into for it to be worth it. This would require changes in the generator code too because it has a map of serializers.\n. Could you add a test, and verify the generated code will do the right thing for items that look like:\n\n\nyaml\nheaders:\n  status:\n    type: array\n    items:\n      type: array\n      items:\n        type: array\n        items:\n          type: string\n          enum:\n          - NEW\n          - PUBLISHED\n          - OPEN\n          - FINISHED. Because we use goimports to resolve imported libraries/packages\nYou're generating go code, so if you want to compile it, it would also need to be in a gopath\nYou can compile a single file that just uses stdlib features but for multiple files (like a swagger generated server) that is a very painful situation. ic, perhap you can add the swagger binary to your docker container and run the generation in the container itself.\nWe build for linux as well and we also publish a container with go-swagger already inside based on the official golang container with alpine. did you update your dependencies, in particular the github.com/go-openapi/spec dependency?\nDo you get the expected result if you flatten your spec first? swagger flatten  ./_api/swagger.yaml > swagger.json . flatten is still experimental and it would result in a breaking change for people who've been using swagger for longer than this feature exists.\nI know there are still issues with the flatten command like it doesn't recursively resolve certain definitions, so until I know this is a stable command I wanted to keep it out of the default usage path.\nIf you use go-swagger with generate it would just mean 1 more go generate comment prior to the generate command. the fix introduces a regression see the go-openapi/validate#8 comment . this doesn't work for you? https://goswagger.io/generate/client.html. The content type of your request needs to be set to application/json\nAt the moment it's not present and then the default is application/octet-stream . we'll support it, the policy I follow is current and current - 1. So both 1.8 and 1.7 should be supported after 1.8 is released.. Thanks for finding this, I'll look into what needs to happen to work with go 1.8 over the weekend unless somebody gets to it earlier. it's fixed in the runtime, just update your vendor or the package in your gopath. I have a fix locally for this, but still need to write a test for it. Work gets in between. you have to update github.com/go-openapi/runtime that's where the fix really was made. yes according to the URI RFC a trailing slash is not significant. perhaps it would be good to just put it in the examples folder in this repo. remove type: object and you have the way. the core of the issue will be found in this file: https://github.com/go-openapi/spec/blob/master/expander.go\nAnd there are a bunch of tests for the functionality: https://github.com/go-openapi/spec/blob/master/expander_test.go\nThe current implementation mixes local and remote refs and doesn't favor remote refs as more important. This can be alleviated to some degree by using the flatten command before generating which does prioritize remote refs over local refs. Although it still doesn't deal with recursive remote refs, the source for it is here: https://github.com/go-openapi/analysis/blob/master/flatten.go\nhttps://github.com/go-openapi/analysis/blob/master/flatten_test.go  . this is a bug I think the format validator is never generated for the field. You can use a custom transport which allows you to set the user agent.\nhttps://github.com/go-openapi/runtime/blob/master/client/runtime.go#L132\nAnd you can configure it with this constructor method\nhttps://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/client/todo_list_client.go#L52\nYou can also configure that runtime with a stdlib http.Client \nhttps://github.com/go-openapi/runtime/blob/master/client/runtime.go#L167\n. You can extend intercept a http request with the http.RoundTripper interface. https://godoc.org/net/http#RoundTripper\nwhich you can set here: https://github.com/go-openapi/runtime/blob/master/client/runtime.go#L116\nso for the client here: \ngo\nvar myRoundTripper http.RoundTripper = createRoundTripper()\ntransport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)\ntransport.Transport = myRoundTripper\ntodoListClient := New(transport, nil)\n. reopened so people can find it easily. yes it can, the roundtripper is the last thing executed before sending the request on the wire\n. you can set your own producers and consumers.\nThe ones you've got in your example will do the right thing, the code generator knows about that naming pattern for json. can you regenerate the embedded templates with go generate ./generator \nthe gen-debug makes them refer to a path you our file system /Users/401208/src. related to OAI/OpenAPI-Specification#880\neven otto.js punted on implementing the javascript regex. So the only option that is left to support this is to link with a C-based library. I don't want to do that because it kills portability.\nShould there be a pure go implementation of ECMA-262 regular expressions appear, I wouldn't mind integrating it\nMore info: \n\nhttps://github.com/robertkrimen/otto#regular-expression-incompatibility\nrobertkrimen/otto#132\nrobertkrimen/otto#215. Look into integrating: https://github.com/dlclark/regexp2. is the code for this available?. I'm not sure without being able to look at the code with the annotations :(\nIt can be as simple as a spelling mistake on the parameters or it can be a bug with the path detection.\nIs running it with DEBUG=1 SWAGGER_DEBUG=1 helpful at all?. so the point of the constructor method is this exact use case. We need a way to express forever because there are certain cases where you really don't want a request to timeout. \nFor example when you write an API that behaves like docker attach/exec.\nThe reason I let it be context deadline exceeded is exactly because it's a well-known error case that's easy to match for and that matcher is reusable outside the code of go-swagger.\n\nThat doesn't mean I would reject a PR from somebody making a more specific error type but I do think it would break a number of applications that already rely on this behavior. So that PR would have to include a flag to opt-in to this behavior at generation time. The case is for example a long stream over http like server sent events, there you want the connection to be opened forever, forever is signaled by using 0. just to be clear I can't distinguish between unset and 0. the values other than $ref don't matter, it doesn't affect validity of the spec it just means other fields than $ref are ignored.\n. I suppose we can fix issues like this by adding  a post processing of the spec to clear warnings. Perhaps here? https://github.com/go-swagger/go-swagger/blob/master/scan/scanner.go#L324. patch atm is not supported :(. most of the implementation exists in #557 but the tests suite isn't complete yet.\nAs a side effect it would also make the entire go-swagger generated codebase much more performant because it uses mailru/easyjson\nThe branch in that PR contains breaking changes which is why I didn't continue with it yet, but because openapi 3 will be released at the end of the month, I wanted to move that work into openapi 3 implementation.. This was fixed. did you see this thread? https://github.com/go-swagger/go-swagger/issues/47\nFrom go's perspective go-swagger doesn't do anything particularly nasty. We try to not import many packages and the ones that we do need to be in pure go. So I think that makes it possible to move to app engine. I have no experience with it though. Keep us posted! . you can annotate your date property with x-nullable: true that gives you a pointer value for the strfmt.DateTime property and allows you to retain the NULL. fixed by go-openapi/runtime@76cda4f. The message you see actually means everything is OK, it only prints that as a reminder and a tip for when compilation doesn't work.\nFor bearer auth you want:\n```yaml\nsecurityDefinitions:\n  auth_token:\n    type: oauth2\n    authorizationUrl: http://dummyauth.io\n    tokenUrl: http://dummytoken.io\n    flow: accessCode\n    scopes:\n      all: all\nsecurity:\n  - auth_token:\n    - all\n```\n. I think you made this issue on the wrong repo. This repo is about creating go code fro swagger specifications. Your issue seems to be with erlang compilation.. there shouldn't be a nested operations/operations folder. this is not supported in openapi 2.0 specification . In swagger 2.0 there is no support for this, however you can still achieve this by putting the query params that dictate the models in the path.\nyaml\npaths:\n  \"/something?objectType=thisThing\":\n    get: \n      ...\n  \"/something?objectType=otherThing\":\n    get:\n      ...\n````. can you run `go generate ./generator` so that the change gets picked up in the compiled binary?\nit updates the ./generator/bindata.go file. You can use a roundtripper for this purpose, see here: https://github.com/go-swagger/go-swagger/issues/911\n. you need to generate the spec at build time (the code is not likely to change at runtime is it?)\nYou can then use a tool like go-bindata to embed the generated spec in your binary too\nAnd you can then use the go-openapi/loads or go-openapi/spec packages to load or serve that file.. you should not have go-swagger/go-swagger in your vendor or use types out of go-swagger/go-swagger\nIt's not meant to be embedded. yes the problem is occurs when you start importing types out of go-swagger/go-swagger. You can have it in your vendor.\nThe only reason swagger generate spec would discover descriptions in other types is if they are detected to be used from a codepath that starts at your main file.. you need to start from your main because that's where it starts reflecting over your packages.\nit works its way back from main to discover all the packages that are in use by your program, like the go compiler does.\nAlternatively you can import all the packages you need with in your doc.go so the tool knows what to look at.go\nimport (\n  _ \"package/with/routes\"\n  _ \"package/with/more/routes\"\n)\n```. Excellent contribution :100: . I think this is fixed on master:\nhttps://github.com/go-swagger/go-swagger/pull/821\nCould you confirm?. we use goimports for finding imports and optimizing imports,\nhttps://godoc.org/golang.org/x/tools/cmd/goimports. both those orgs are owned by me, feel free to submit a pr to runtime :) This is a great addition!. resolved by @robbert229  . The good news is that you don't have to wait until I upgrade. The mailru in this repo is for the CLI but you are free to upgrade the one in your vendor.\nI'll try to upgrade this week though. i upgraded a while ago. and we also have an extension that allows you to use pre-existing types as models, you annotate your spec like this:\nhttps://github.com/go-swagger/go-swagger/blob/master/fixtures/codegen/existing-model.yml#L84-L88\n. would it be possible to add a test?. I assume this is for validations that fall outside of what swagger can do for you, and prior to databinding the body property?  \nIf you want to read the body more than once you have to put it back as an io.ReadCloser so you can read it in a []byte and then replace r.Body with a bytes.NewBuffer(theBytes)\nThese readers are single use only. the spec generates fine for me when I skip validation\nswagger generate client -A Nmdb --skip-validation -f sw.json\nAny tool I've tried has issues validating the spec in your example.\nWould it be possible to get a smaller repro of the circular dependency, the spec in your example is large and complex. I think you can use x-nullable: true for this use case. in non-body parameters maps are not supported in the swagger spec.\nIn the body json schema only allows maps with string keys. haven't been able to look at it for cause of the issue. I assume it's missing an opportunity to include the format validator. I'll gladly merge such an integration :). This is particularly interesting :)\nhttps://github.com/awslabs/aws-lambda-go-api-proxy/blob/master/handlerfunc/adapter.go\n. I see no error. The information at the bottom is more a reminder that you need those packages.. at this point there is no easy way to disable auth short of removing it from your spec. It doesn't know about the producer for that mime type, it works for me when I do it like this:\n```go\npackage main\nimport (\n    \"log\"\n    \"os\"\n\"github.com/go-openapi/strfmt\"\n\n\"github.com/go-openapi/runtime\"\nhttptransport \"github.com/go-openapi/runtime/client\"\napiclient \"github.com/go-swagger/go-swagger/examples/todo-list/client\"\n\"github.com/go-swagger/go-swagger/examples/todo-list/client/todos\"\n\n)\nfunc main() {\n// create the API client\ntr := httptransport.New(\"127.0.0.1\", \"\", nil)\ntr.Producers[\"application/io.swagger.examples.todo-list.v1+json\"] = runtime.JSONProducer()\ntr.Consumers[\"application/io.swagger.examples.todo-list.v1+json\"] = runtime.JSONConsumer()\nclient := apiclient.New(tr, strfmt.Default)\n\n// make the authenticated request to get all items\napiKeyHeaderAuth := httptransport.APIKeyAuth(\"X-API-TOKEN\", \"header\", os.Getenv(\"API_KEY\"))\n_, err := client.Todos.AddOne(todos.NewAddOneParams(), apiKeyHeaderAuth)\nlog.Fatal(err)\n\n}\n. can you also run `go generate ./generator` and commit the generator/bindata.go file\nOtherwise the changes won't be picked up by the binary. yes please .\ntype testresponse struct {\n  // in: body\n  Body test\n}\n```. This discrepancy is because of how golint wants naming to be done.  There are a set of blessed initialisms: https://github.com/golang/lint/blob/3390df4df2787994aea98de825b964ac7944b817/lint.go#L732-L769 and those are not split up by to the rules defined here: https://github.com/go-openapi/swag/blob/master/util.go#L145-L175. if it would be Slb that is correct. There isn't at this point unfortunately. it would require extending the configuration mechanism with a way to override the filters. And a way to dynamically load code.\nI'll open a ticket about introducing a plugin mechanism for go 1.8 and beyond. the 2 things are orthogonal concerns. Whatever serves the UI in go-swagger is just a middleware\nhttps://github.com/go-openapi/runtime/blob/master/middleware/redoc.go\nto integrate swagger-ui you would need to figure out how to serve the static files and call the UI with: ?url=https://example.com/swagger.json. we need to support enums and document them so they show up as validations.\nfor this we'd need to introduce a swagger:enum marker so that we know what to do with this  . It also occurs to me that if you want to use an enum as map key value you're essentially making a more expensive struct because the values you can put in the keys are finite and known in advance. This has been fixed on master IIRC. would it be possible to share the spec that leads to  this? Although this second comment would probably be better in a separate issue. the brew formula now allows for customizing the name of the binary . can you use swagger flatten before generating . I will never stand in the way of improvements, bear in mind that I want to migrate to circle ci 2.0 manifests this weekend but that should be easy enough to support. if you put it on the same line it should work\ngo\n// ListUsers swagger:route GET /user user listUsers\n//\n// List all the users\n//\n// Schemes: https\n// Produces: application/json\n// Responses:\n//    200: listResponse\n//    401: response\n//    403: description: Unauthorized\n. please reopen if that's not the case. Swagger uses the go compiler infrastructure. So as long as packages can be detected as being in use in code paths, the scanner should find out all the annotations defined in those files.\n. yep you can use _ \"blah/internal/blah\". have you seen this example? https://github.com/go-openapi/kvstore. What would you expect from a dynamic client?\nWhat would it add on top of the default http client?. I think I still don't fully understand the use case because you'd have to do everything the code generator does for you by hand. Every time the API changes you have to do this again.\nI get the use case for the server side but for the client side I don't get the value proposition.\nThat being said you might find this test useful as an example: \nhttps://github.com/go-openapi/runtime/blob/master/client/runtime_test.go#L144-L188. Can you elaborate a little bit more on this use case?. the problem isn't isolated to go-swagger, it's that many other things use the golang/x/net context and you want to be able to pass them along.\nTo make this work we have to define a default import for the context package that will solve it.\nit goes in generator/operations.go and generator/support.go. that is correct I'll remove it in the version that will work with openapi 3.0 spec. Yes excellent suggestion. Have you seen the strfmt types? isn't the DateTime or Time sufficient?\nI'd like to see few steps to reproduce, so it's easier to understand what's going on.. I think you can use strfmt.File or os.File in your struct\ngo\ntype fileResponse struct {\n  // In: body\n  File strfmt.File\n}. I'm terribly sorry the File type is in the runtime package: runtime.File\nI believe you can also return a stream like io.Reader. this looks great, seen as I work for vmware i'll have to step up and also add vmware fusion/workstation based builds in the scripts :)\nI've updated the circle config file on master so that it pulls in an image with an ssh client so that should make your build proceed\n. you can also make your own main function and use the code from the generations of both with --skip-main\nThis allows for customization like using a different middleware stack, which in turn gives you the ability to serve 2 swagger specs at different paths.\nAnd generally compose things a bit differently. in this tool that is called flatten\nit does exactly this and also moves anonymous objects from responses and request bodies to refs. I've written a go script that merges swagger docs from different locations in the past. I haven't spent any time thinking about how to make this a more general solution, so ideas and/or PR's are more than welcome :)\n```go\npackage main\nimport (\n    \"encoding/json\"\n    \"io/ioutil\"\n    \"log\"\n\"github.com/go-openapi/loads\"\n\"github.com/go-openapi/loads/fmts\"\n\n)\n// +build ignore\n//NO TESTS\nfunc main() {\n    loads.AddLoader(fmts.YAMLMatcher, fmts.YAMLDoc)\n    // CLI\n    public, err := loads.Spec(\"../swagger/external.yml\")\n    if err != nil {\n        log.Fatalln(err)\n    }\ninternal, err := loads.Spec(\"../swagger/internal.yml\")\nif err != nil {\n    log.Fatalln(err)\n}\n\ninternalAPI := public.Pristine().Spec()\nfor k, v := range internal.Spec().Definitions {\n    internalAPI.Definitions[k] = v\n}\nfor k, v := range internal.Spec().Paths.Paths {\n    internalAPI.Paths.Paths[k] = v\n}\ninternalAPI.Schemes = []string{\"http\"}\ninternalAPI.Security = nil\ninternalAPI.SecurityDefinitions = nil\n\nb, _ := json.MarshalIndent(internalAPI, \"\", \"  \")\nioutil.WriteFile(\"../swagger/internal.json\", b, 0644)\n\nserverAPI := public.Pristine().Spec()\nfor k, v := range internal.Spec().Definitions {\n    serverAPI.Definitions[k] = v\n}\nfor k, v := range internal.Spec().Paths.Paths {\n    serverAPI.Paths.Paths[k] = v\n}\n\nbs, _ := json.MarshalIndent(serverAPI, \"\", \"  \")\nioutil.WriteFile(\"../swagger/server.json\", bs, 0644)\n\n}\n```. yeah that would break other things, it needs to be fixed where the value for that value expression is set because this wouldn't be the only place where it generates bad code\nI think this would be a good place to look: https://github.com/go-swagger/go-swagger/blob/master/generator/operation.go#L718. no doubt this is a bug, but also the format is an unrecognized format: base32ID. did you generate with --with-context because that is deprecated and no longer necessary because go now has the context on the request object, so no more need to thread it through. I'll try to look into this. I think the main issue is that errors don't have a TextMarshaller interface implemented.\n. at this point these are supported in the code generator: https://github.com/go-swagger/go-swagger/blob/master/generator/support.go#L317-L335\nWe can add more through the consumer producer mechanism if you need more. Thanks!. the docs are also in this repo in the docs folder, yes please add those It helps people find out about the new functionality. it's already validated by the time you get it. you can use additionalProperties to this end and then you have a method on the body that captures those.\nyou can still specify validation rules for it too. Can you open an issue here: https://github.com/Rebilly/ReDoc\nI just integrate that work into go-swagger. Sorry I've seen you've done that and they moved you here. Am I understanding correctly that you want to add a support for x-logo for the swagger generate spec command?. OK until we can add that you can use an input document to add this feature\nmake a file called input.yml (also works with json if you prefer that)\nyaml\ninfo:\n  x-logo: \n    url: ./images/hrperformans/logo260x75x72.png\n    backgroundColor: \"#FFFFFF\"\nand generate the the spec with:\nswagger generate spec -i input.yml path/to/main. does your main package contain a code path that reaches where you described your routes?. try with go get -u github.com/go-swagger/go-swagger/cmd/swagger. that is when you use reflection like in a language like java. The way we have it here is make the generation of the spec be a build time concern instead of a runtime concern. The assumption that was made is that after you build your app the API is unlikely to change.\nThat example that you link to is when you generate the code from a swagger spec. And there we embed the spec as default behavior but that isn't a hard constraint, you can change that at generation time and pass one in or initialize the generated code with a spec that was loaded from aremote url etc.\n. Sorry I didn't answer the first question yet.\nThere are a few ways you can serve a ui.\nUse the middleware provided in the go-openapi/runtime package: https://github.com/go-openapi/runtime/blob/master/middleware/redoc.go\nMost manual\nhttps://github.com/go-swagger/go-swagger/issues/370. yeah it's used when the handlers are returning errors and the content type is application/octet-stream. there are some conflicts here that need to be resolved. changes look good though. can you try to flatten your spec first to see if that fixes it?\nswagger flatten -o swagger.flat.json swagger.json. I'll make it the default in in the next version. It solves quite a lot of problems\nCurrently it's a separate operation because it was experimental. there is still a conflict for some reason in: cmd/swagger/commands/generate/server.go. thanks!. Here's an example: https://github.com/go-openapi/kvstore/blob/master/cmd/kvstored/main.go#L50-L57\n. try generating with -m. At this moment there is no way to customize the authenticator (receivers of the APIKeyAuth function) on the builder object.\nI think it might be a good addition though to allow for that kind of customization. . In this file there are method calls to methods defined in the security package:\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/templates/server/builder.gotmpl#L185-L193\nI think if you make properties with the same name and initialize them to those functions. And then call the functions on the current receiver you have a place to replace the authenticators. This should  allow you to access the request.\nThe functions for auth can be found here:\nhttps://github.com/go-openapi/runtime/blob/master/security/authenticator.go#L58\nhttps://github.com/go-openapi/runtime/blob/master/security/authenticator.go#L71\nhttps://github.com/go-openapi/runtime/blob/master/security/authenticator.go#L104\n. it doesn't have to be done manually, you can wrap the previous authenticator function, this gives you a place to look at a request before or after authentication. it also gives you a way of supporting the function signature you were after.\nI want to avoid having to introduce a breaking change like the one described in #1043 because the argument to the function is yet another function which means you can also wrap that one. You can just do it like this:\ngo\nfunc CaptureRequestAuth(name string) runtime.Authenticator {\n    return security.ScopedAuthenticator(func(r *security.ScopedAuthRequest) (bool, interface{}, error) {\n        wrapped := security.BearerAuth(name, func(tpe string, scopes []string) (interface{}, error) {\n            log.Println(\"got a request here, from ip\", r.Request.RemoteAddr)\n            return \"success\", nil\n        })\n        return wrapped.Authenticate(r)\n    })\n}. Similarly for APIKeyAuth:\ngo\nfunc CaptureAPIAuth(name, in string) runtime.Authenticator {\n    return security.HttpAuthenticator(func(r *http.Request) (bool, interface{}, error) {\n        wrapped := security.APIKeyAuth(name, in, func(token string) (interface{}, error) {\n            log.Println(\"got a request here, from ip\", r.RemoteAddr)\n            return \"success\", nil\n        })\n        return wrapped.Authenticate(r)\n    })\n}. You can plug thme in here: https://github.com/go-swagger/go-swagger/blob/master/examples/authentication/restapi/operations/auth_sample_api.go#L37-L39\nYou you'd have to change the signature, my examples just show the nested functions required to override the default behavior but still have it all work in the same way.. you can rewrite errors in the ServeError hook\nhttps://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/restapi/configure_todo_list.go#L26\nBy default it uses this function: https://github.com/go-openapi/errors/blob/master/api.go#L115. duplicate of #1040. Thanks, would it be possible to do the same for BasicAuth and BearerAuth so that it's a consistent pattern?. The build is failing because of name collisions, those authenticators should figure out unique names, or I think a reasonable work around is to call the properties: ApiKeyAuthenticator, BasicAuthenticator and BearerAuthenticator. thanks!\n. HI thanks for this but the problem is more complicated \nTake a look at this PR: https://github.com/go-swagger/go-swagger/pull/557/files\nIt has the template changes required for easyjson support, unfortunately it has gone stale so rebasing that one is complicated. But it would be great if just the serialization changes (not the patch support and nullable/unset field stuff) could turn into a PR with just changes to serialization. It would fix about a dozen open bugs.. I've brought the changes from PR #557 up to date with current master in the easyjson branch\nhttps://github.com/go-swagger/go-swagger/tree/easyjson\nI won't be able to work on this for a while to come still. The AllOf functionality is still missing. stale. You can try to generate with --skip-validation \n. this is validation of the spec, I agree it's a bug but skipping validation (a step before generating) would allow you to continue. You could look at using type: string format: binary and use the content-disposition header to provide the filename. have you seen this? https://goswagger.io/generate/spec.html. that one is for swagger 1.2, this repo is for swagger 2.0. When you write to a response writer for the body go will flush the headers and the body. So if we want to return a status code then we have to do that before we start writing to the response writer, which happens in the producer.Produce call\nI think this could be fixed in the panic middleware by having a buffered response that gets flushed at the end or when its buffer overflows perhaps?. you can implement another response writer that wraps the default responsewriter\nwhere you wrap the Write method that writes to a buffer with a known size, and you postpone flushing until the buffer. That would then mean you have an opportunity to changing the status code.\nOf course there is a performance impact with this approach but it does allow for capturing some more status codes\n. how are you running swagger?\nwhat is your gopath env var?\nwhat is your project directory?\nwhat is your OS?. you can make your own main function, I've done that here: https://github.com/go-openapi/kvstore/blob/master/cmd/kvstored/main.go. you can override the ServeError function in the configure_xxx.go file which allows you to rewrite errors. You probably want to use allOf to compose 2 models for the GET and stick to a simple model for POST. how would you link them to routes?. I see I think this could be a good addition to the functionality. can you use swagger flatten <spec> before generating and see if the problem persists?. after flatten you can try to expand the spec swagger expand\nthen you should have a fully expanded spec for which you can generate code. expander is here:\nhttps://github.com/go-openapi/spec/blob/master/expander.go\nflatten is here:\nhttps://github.com/go-openapi/analysis/blob/master/flatten.go\nyou can run processes with DEBUG=1 and SWAGGER_DEBUG=1 that will get you a lot more output. can you use swagger flatten before generating. i think currently it doesn't take the exclusive into account\nthe code is here if you want to fix it: https://github.com/go-swagger/go-swagger/blob/master/generator/types.go#L544-L559. thanks\n. it's not accounting for wildcards.\nIt should probably use a variant of: https://github.com/go-openapi/runtime/blob/master/middleware/negotiate.go#L46. can you run go generate ./generator and push those changes otherwise the binary won't pick them up. it should work like that but you have it. You may even remove the default value for child.\nyaml\nParent:\n  required: [ \"child\" ]\n  properties:\n    child:\n      $ref: '#/definitions/Child'\nChild:\n  default: {\"key\": \"value\"}\n  required: [ \"key\" ]. so you are trying to avoid the error message and you want the properties to just use the zero values?\nIn that case you don't need the required at all. \nThey are all explained here: http://swagger.io/specification/\n. yes that's true, that's why we have a x-isnullable. I'm confused about this PR and problem statement.  The interface already expresses an is-a relationship.\nNow if I repeat the requirement you have in my own words I think it summarizes as this:\nI want a concrete implementation of the base type which can be instantiated in addition to the derived types.\nSo wouldn't an unexported struct be enough? because it would be able to capture the fields with getters and setters just like it does for the sub types but it wouldn't have any extra properties anyway so there is no need to expose the struct directly.. I'm fine with the change.\nyou can run the tests that are failing with ./hack/run-canary.sh. it implements the TextMarshaller which the json marshalling should make use of.. you can also vendor the github.com/go-openapi/runtime\nFor glide you have to vendor a few more packages explicitly through adding them to glide.yaml because otherwise it doesn't pick them up\nhere's what I have in my glide.yaml file and I build using a clean golang container every time.\nyaml\n- package: github.com/casualjim/middlewares\n- package: github.com/go-openapi/errors\n- package: github.com/go-openapi/loads\n- package: github.com/go-openapi/runtime\n  subpackages:\n  - client\n  - flagext\n  - middleware\n- package: github.com/go-openapi/spec\n- package: github.com/go-openapi/strfmt\n- package: github.com/go-openapi/swag\n- package: github.com/go-openapi/validate\n- package: github.com/justinas/alice\n  version: ^1.0.0. consumes for is used by the router: https://github.com/go-openapi/runtime/blob/master/middleware/router.go#L228\nit gets the candidates and puts it on the route info object.\nThe result of that gets used here: https://github.com/go-openapi/runtime/blob/master/middleware/context.go#L263-L273. Perhaps something like this should get a marker annotation and be an additional feature instead of replacing what is there now for schemas. I don't know who's depending on the existing behavior.\nFor query/path/form params this is different though; there it would actually be the expected behavior.. Yes I think so, that gives people a way to choose . yeah sorry I lost track of it. I try to follow a merge quickly policy. query arguments don's support complex objects, just simple types. there can be only 1 body, this is described in the swagger specification: https://swagger.io/specification/\ninformation about the annotations can be found here: https://goswagger.io/generate/spec.html\nAnd examples you can find by either generating code for a swagger spec\nor by looking here which is used in our unit tests: https://github.com/go-swagger/go-swagger/tree/master/fixtures/goparsing/classification\nEvery example also has annotation: https://github.com/go-swagger/go-swagger/tree/master/examples. Thanks for the analysis. Is this for openapi 2.0 or 3.0. In the first comment the specification linked is 3.0 which is not what we currently support.. I'm looking into this, however I don't really see how you can have 2 principals.\nOnce you authenticate you should have a single identity, because you're interacting with a single entity which is proving its identity.\nUnder which circumstances would you need to return a principal that can't be represented by a single object? Whether it's through a union like type or otherwise.\nI can fix the AND vs OR logic that's all fairly doable but I'm having trouble understanding why you'd ever have multiple identities represented in your application. . I understand that piece, it's this comment: https://github.com/go-swagger/go-swagger/issues/1089#issuecomment-337518939 from @mmmguitar that I'm unclear about. This functionality has been merged to master. But the proposals here are return a map or return an array.\nI don't see how those are different from what I propose, your security principal is a single struct with properties. Presumably you know what auths your application is doing and which fields should be filled out. \nYou can say the security principal is a map or a slice, the thing doesn't care much about that type.\nHowever what isn't here is the migration to using context based authenticators (which can be fixed fairly easily). At that point you should have everything to you need to capture these use cases.. try putting that in a package called petstore and right above the package declaration. the input file is for an input swagger file which will be used to merge the discovered info into.. that functionality doesn't exist today at least not exposed through the command. The code has include and exclude filters though so shouldn't be too hard to add. are you using a go version pre 1.7?. can you update your swagger command to what's on master, this is fixed there. ok can you update your runtime to master too? \ngo get -u github.com/go-openapi/runtime\nor whatever the vendoring tool equivalen tcommand is.. I can reproduce the issue, but haven't been able to look into why it's happening.\nI assume it has to do with how this is set up: https://github.com/go-swagger/go-swagger/blob/master/scan/scanner.go#L198-L214\n. I have trouble reproducing this.\nUsing the hello.h and hello.c files from here: https://github.com/kyleconroy/hello-cgo\nand the provide main.go file above.\nonce go build succeeds I also see the expected spec.\n```go\npackage main\n/*\ninclude \ninclude \"hello.h\"\n*/\nimport \"C\"\nimport \"net/http\"\n// An Order is used to foobar\n// swagger:response order\ntype Order struct {\n    // The order foobars\n    // in: body\n    Body struct {\n        // Name of the order\n        name string\n        // ID of the order\n        // Required: true\n        id int32\n    }\n}\n// CreateOrder swagger:route POST /orders orders createOrder\n//\n// Creates an order.\n//\n// Responses:\n//    default: validationError\n//        200: order\n//        422: validationError\nfunc CreateOrder(rw http.ResponseWriter, req *http.Request) {\n    // some actual stuff should happen in here\n}\nfunc main() {\n    C.hello()\n}\n```\njson\n\ue780 swagger generate spec                                                         \n{\n  \"swagger\": \"2.0\",\n  \"paths\": {\n    \"/orders\": {\n      \"post\": {\n        \"tags\": [\n          \"orders\"\n        ],\n        \"summary\": \"Creates an order.\",\n        \"operationId\": \"createOrder\",\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/responses/order\"\n          },\n          \"422\": {\n            \"$ref\": \"#/responses/validationError\"\n          },\n          \"default\": {\n            \"$ref\": \"#/responses/validationError\"\n          }\n        }\n      }\n    }\n  },\n  \"responses\": {\n    \"order\": {\n      \"description\": \"An Order is used to foobar\",\n      \"schema\": {\n        \"type\": \"object\"\n      }\n    }\n  }\n}. it's the other way around. in your configure_xxx.go file you have to add the argument to the configureServer callback.\nThis was changed a while ago so you can know which scheme you're configuring for. there is a file called restapi/configure_xxx.go that is only generated once. it contains callbacks for you to add your own code. https://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/restapi/configure_todo_list.go#L70\nthat signature has changed in the generated code which is why the code doesn't compile, you just have to update that signature in your configure_xxx.go file.\nPoint is it's not a bug. this would be a bug for swagger-ui afaict\nhttps://github.com/swagger-api/swagger-ui. yes, as a general rule I will accept any improvement as PR. your server needs to add a cors middleware, that's the cause of the failure.\nhttps://github.com/go-swagger/go-swagger/issues/481. this is the expected behavior. \nIf you want to skip the response struct you should use\ngo\n// UpdateOrder swagger:route PUT /orders/{id} orders updateOrder\n//\n// Updates an order.\n//\n// Responses:\n//    default: genericError\n//        200: body:order\n//        422: validationError\nfunc UpdateOrder(rw http.ResponseWriter, req *http.Request, params denco.Params) {\n    // some actual stuff should happen in here\n}\nWith this the struct will be detected as not used so so make it find the Order struct you have to run swagger generate spec -m ....\nthe -m will make it scan for swagger:model and include those structs. you can add a custom tag. see here: https://github.com/go-swagger/go-swagger/blob/master/fixtures/codegen/todolist.models.yml#L680-L685. it's because of the way go interprets comments. Most likely there is a punctuation missing or something like that.\nsee here: http://goswagger.io/generate/spec#parsing-rules. for that you can use the swagger:model annotation, it gives you an opportunity to customize the name. can you run go generate ./generator otherwise the changes to the template won't be picked up. thanks! :100: . You can use middlewares here to capture both use cases\nhttps://goswagger.io/use/middleware.html\nI use alice here: https://github.com/go-openapi/kvstore/blob/master/cmd/kvstored/main.go#L73-L81\nto run this metrics middleware: https://github.com/casualjim/middlewares/blob/master/audit.go#L42\nIn the default layout you can configure middlewares in the configure_xxx.go file\nhttps://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/restapi/configure_todo_list.go#L75-L85. I think we can add the handlers to the builder that's generated so you can override the http.Handler\nsimilar to what setupMiddlewares does but on a case by case . This is a nice comment, would you mind submitting that as a PR for our docs. I'm sure many people are interested in this particular one . for definitions 2.0 and 3.0 aren't very different because I wanted a full json schema implementation to work instead of the subset that swagger (openapi) 2.0 prescribed\nin 3.0 they expanded it to properties that are already supported in our validator\nmost of the changes in 3.0 pertain to how operations are described with their parameters and responses\nthat has a big impact on the code generator but if I'm guessing nothing in there is a combinatorial nightmare unlike json schema is\nI'll start to work on a new spec implementation in go-openapi/spec3 because I do want to correct some thngs like not using golang's map as a map but rather use sorted maps. spec will be here: https://github.com/go-openapi/spec3. there are a lot more issues with 3.0. it has expressions, a vastly different syntax and so on.\nSomebody else is more than welcome to step up but I don't have time to implement and mantain such a large specification as main contributor.  . I don't have time to work on an openapi 3.0 specification. \n. yes it's a deep merge of a spec. like this: swagger mixin --output ./swagger-final.json ./swagger.json ./swagger-prod.json\n. yes the PR looks good, waiting for CI to agree. Are you running with an env var DEBUG=1 ?. go 1.8 should be supported too, are you on an older version?. I forgot to review this over the weekend. Would it be possible to update? I'll try to do it tonight. Could you update to latest master. I verified it works but I don't want to lose attribution. Thanks, this was a non-trivial piece of work :100: . how are you trying to do the custom layout?\nis that following this guide? https://goswagger.io/use/template_layout.html\n. I have no objection to somebody adding the functionality.\nI suspect the code to fix would be around here somewhere: https://github.com/go-swagger/go-swagger/blob/master/generator/shared.go#L390. what is it you're trying to achieve? \nBecause if you just want to group operations, perhaps look into using tags in the swagger spec, it will do what you want. why not make more than 1 spec and then merge the specs together with the mixin command?. but you just generate 2 applications, is the issue that 1 is using types from the other?. yes but the question is do you need them to be because you want independent code files except that you want the server to present as 1 process with 1 spec. \nAt least if I understand your use case correclty if not I apologize for jumping to conclusions.\nThis you can do by creating your own main file and serving both API's. it's a lot easier to make a  middleware that accommodates this pattern. I believe you can use a json:\"X-Foo\" tag to allow for overriding the name. this is for a model right?\nwe have code like this: https://github.com/go-swagger/go-swagger/blob/master/scan/schema.go#L981-L996\nbut I think it never gets there so I'd like a more complete example that shows the problem.. do you have it in your gopath or in your vendor?. I added a default imports list, which will hopefully fix this issue. Can you verify and provide feedback?. should be fixed now.\nformatting happens here: https://github.com/go-swagger/go-swagger/blob/master/generator/shared.go#L510-L523. the transport is an interface. You can use a NOOP roundtripper. I fixed the example. \nshellsession\n\u00b1 ivan@avalon:~/go/src/github.com/go-swagger/go-swagger  \ngit:(master) \u2717 !? \u00bb go run ./examples/stream-server/cmd/countdown-server/main.go --port 8000\n2017/08/16 20:56:28 Serving countdown at http://127.0.0.1:8000\nIteration 5\nIteration 4\nIteration 3\nIteration 2\nIteration 1\nIteration 0\n^C2017/08/16 20:57:02 shutdown initiated\n2017/08/16 20:57:02 Stopped serving countdown at http://127.0.0.1:8000\nother terminal:\n```shellsession\n\u00b1 ivan@avalon:~/go/src/github.com/go-swagger/go-swagger\ngit:(master) \u2717 ? \u00bb curl -v http://127.0.0.1:8000/elapse/5\n   Trying 127.0.0.1...\n TCP_NODELAY set\n* Connected to 127.0.0.1 (127.0.0.1) port 8000 (#0)\n\nGET /elapse/5 HTTP/1.1\nHost: 127.0.0.1:8000\nUser-Agent: curl/7.55.1\nAccept: /\n< HTTP/1.1 200 OK\n< Content-Type: application/json\n< Date: Thu, 17 Aug 2017 03:56:30 GMT\n< Transfer-Encoding: chunked\n< \n{\"remains\":5}\n{\"remains\":4}\n{\"remains\":3}\n{\"remains\":2}\n{\"remains\":1}\n{\"remains\":0}\n* Connection #0 to host 127.0.0.1 left intact\n```\n. operationId is always globally unique per swagger 2.0 specification. The id MUST be unique among all operations described in the API.\n\nhttps://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#operationObject\n\nUnique string used to identify the operation. The id MUST be unique among all operations described in the API. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is recommended to follow common programming naming conventions.. this needs more context.\nWhich spec, what's the $GOPATH and what's the missing package?. which version of swagger are you using? did you build from master?. operationId is always globally unique per swagger 2.0 specification. The id MUST be unique among all operations described in the API.\n\nhttps://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#operationObject\n\nUnique string used to identify the operation. The id MUST be unique among all operations described in the API. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is recommended to follow common programming naming conventions.. can you try to explain your question more clearly?\nWhat is it you want to achieve?\n\nthe serve command by default serves a redoc ui.\nredoc is only to serve a documentation page for your specification, it doesn't implement any logic \n. I have no idea what you mean by understand the flow, how models has been executing.\nthere is code generated. a request arrives the routes select a handler and the request is validated, then your code executes. I'll try this tomorrow and will update this ticket. . oic because there is no standard name for it.\nYou can add it here: https://github.com/go-openapi/runtime/blob/master/statuses.go. you have to create your struct instances with the constructor methods, not a literal.. In other languages you can use a constructor to initialize an instance of a type with default values.\nIn go you have to use factory/constructor methods. There is no way to initialize a struct literal with default values.\nin a json schema the default property can appear in any schema. So the most straight forward version of that is to set defaults for each individual property. However it is entirely valid to also set those at the object level.\nSo the answer to your question is, valid but language specific when the spec is rendered as code. if you don't use -m do still see the issue?. merged the fix for this. I'm fine with the commented code being deleted. git will still know . just pull in an updated go-openapi/runtime. yep it's on master now. Ref will have been filled out though. It doesn't expand them by default.\nBut you have options:\n\nflatten the spec: swagger flatten --help\nexpand the spec: swagger expand --help\nor resolve the ref: spec.ResolveRef(spec.Spec(), &spec.Spec().Paths.Paths[\"/some-path\"].Get.Responses.StatusCodeResponses[200].Ref)\n\nhttps://github.com/go-openapi/spec/blob/master/expander.go#L84-L167. The properties in the body struct need to be exported otherwise it can't generate json for it or read it in from json. Their names need to be capitalized: \ngo\npackage main\n// A ValidationError is an error that is used when the required input fails validation.\n// swagger:response validationError\ntype ValidationError struct {\n    // The error message\n    // in: body\n    Body struct {\n             // The validation message\n             //\n             // Required: true\n             Message string\n             // An optional field name to which this validation applies\n             FieldName string\n         }\n}. you can put the struct in a package that isn't main and it should start to work. pushed 0.12.0. do you think it would be possible to add a test so that we don't break this in the future?. The easiest would be to add it to the canaries.\nhttps://github.com/go-swagger/go-swagger/tree/master/fixtures/canary\nthe runner for those (but might not require changes for this): https://github.com/go-swagger/go-swagger/blob/master/hack/run-canary.sh\nThis is another approach to a similar kind of test use case:\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/build_test.go\n. I'll cut a new release today. pushed a new release. you have to update your vendor and the swagger binary tool.\nThe 2 advance in lock-step, it's only an issue with the docker container.\n. if the runtime.Authorizer is not defined that means that the runtime project or the swagger binary (templates) are not updated to reflect that. . this was fixed by #1175 . can you include the spec that triggers this?. I can't reproduce this issue though with what's on master.. Yes sorry I've been busy with work stuff. I'll try to take a look at it\nsoon.\n\nMet vriendelijke groeten - Best regards - Salutations\nIvan Porto Carrero - Mob: +1 (415) 323-8084\nWeb: http://flanders.co.nz\nTwitter: http://twitter.com/casualjim\nOn Fri, Oct 6, 2017 at 7:54 AM, Theodore Omtzigt notifications@github.com\nwrote:\n\nI have narrowed it down to this data definition:\nregiment:\ntype: object\nitems:\n$ref: \"#/definitions/demand\"\ndemand:\ntype: object\nrequired:\n- package\n- plan\nproperties:\npackage:\ntype: string\nplan:\ntype: number\nformat: float\nAdd this, and it produces the error:\n$ swagger generate server -f mp-scoring-api-bad.yaml -P models.Principal\n2017/10/06 10:51:07 building a plan for generation\n2017/10/06 10:51:07 planning definitions\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xc0000005 code=0x0 addr=0xd pc=0x957b6a]\ngoroutine 1 [running]:\ngithub.com/go-swagger/go-swagger/generator.(schemaGenContext).\nNewSliceBranch(0xc0431be000, 0xc043e91d40, 0x1)\nC:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\nswagger/generator/model.go:387 +0x54a\ngithub.com/go-swagger/go-swagger/generator.(schemaGenContext).buildArray(\n0xc0431be000, 0x0, 0x0)\nC:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\nswagger/generator/model.go:1068 +0x14a\ngithub.com/go-swagger/go-swagger/generator.(schemaGenContext).buildItems(\n0xc0431be000, 0x0, 0x0)\nC:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\nswagger/generator/model.go:1104 +0xbfc\ngithub.com/go-swagger/go-swagger/generator.(schemaGenContext).\nmakeGenSchema(0xc0431be000, 0xc0431be000, 0xc043c17d00)\nC:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\nswagger/generator/model.go:1445 +0xab2\ngithub.com/go-swagger/go-swagger/generator.makeGenDefinitionHierarchy(\n0xc04416e290, 0x8, 0xc0435b2830, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\nC:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\nswagger/generator/model.go:166 +0x2f6\ngithub.com/go-swagger/go-swagger/generator.makeGenDefinition(0xc04416e290,\n0x8, 0xc0435b2830, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\nC:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\nswagger/generator/model.go:133 +0xc3\ngithub.com/go-swagger/go-swagger/generator.(appGenerator).makeCodegenApp(\n0xc0432e2000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\nC:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\nswagger/generator/support.go:596 +0x59d\ngithub.com/go-swagger/go-swagger/generator.(appGenerator).Generate(\n0xc0432e2000, 0x0, 0x0)\nC:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\nswagger/generator/support.go:254 +0xbd\ngithub.com/go-swagger/go-swagger/generator.GenerateServer(0x0, 0x0, 0x0,\n0x0, 0x0, 0x0, 0x0, 0x0, 0xc042062960, 0xc042675f68, ...)\nC:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\nswagger/generator/support.go:43 +0xd2\ngithub.com/go-swagger/go-swagger/cmd/swagger/commands/\ngenerate.(Server).Execute(0xc0427706e0, 0xc042631860, 0x0, 0x6,\n0xc0427706e0, 0x1)\nC:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\nswagger/cmd/swagger/commands/generate/server.go:120 +0x55e\ngithub.com/go-swagger/go-swagger/vendor/github.com/\njessevdk/go-flags.(Parser).ParseArgs(0xc042631800, 0xc042066010, 0x6,\n0x7, 0x4111ef, 0xc0422be6c0, 0xc042317400, 0xc0423d1201, 0xc042726cc0)\nC:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\nswagger/vendor/github.com/jessevdk/go-flags/parser.go:316 +0x834\ngithub.com/go-swagger/go-swagger/vendor/github.com/\njessevdk/go-flags.(*Parser).Parse(0xc042631800, 0x6, 0xb9ebfb, 0x6, 0x0,\n0xbe6d2e)\nC:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\nswagger/vendor/github.com/jessevdk/go-flags/parser.go:186 +0x78\nmain.main()\nC:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\nswagger/cmd/swagger/swagger.go:105 +0xd6a\nnext step is to drill down in the stack trace...\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/go-swagger/go-swagger/issues/1171#issuecomment-334778455,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAb1rRXJDkmVsw-gw-ftHdcsU5PP7-k6ks5spj8ZgaJpZM4PYw6Y\n.\n. The issue in the spec you sent that items is being used with type: object\nI'm debugging this by running the following command:\n\nDEBUG=1 swagger generate server -A MpScoring -f mp-scoring-api.yaml\nit will fail and then you'll see something like this:\n```\n2017/10/06 10:16:29 model.go:1051: returning after ref\n2017/10/06 10:16:29 new slice branch l2_itemized_services (model: l2_itemized_services)\n2017/10/06 10:16:29 cloning context l2_itemized_services\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0xd pc=0x1552233]\ngoroutine 1 [running]:\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).NewSliceBranch(0xc422064000, 0xc42227db00, 0xc420890001)\n```\nin this failure I see the model is l2_itemized_services\n2017/10/06 10:16:29 new slice branch l2_itemized_services (model: l2_itemized_services)\nafter changing the type from object to array generation gets past that. . if you build the swagger command from master you can generate your client with a --skip-flatten flag and that should restore the previous behavior. I think as a workaround for now  you can get it to work by running mkdir -p $GOPATH/src/xxx prior to generating. @EleanorRigby I think this comes from golangs json library using the textmarshaler interfaces itself too.\nAs such what we didn't isn't very helpful and will break more applications than the fix it's trying to provide.\nWe should revert this commit and look at why redirects aren't being respected instead. because it mostly uses a json schema for validation provided by upstream swagger. . the documentation goes here:\nhttps://github.com/go-swagger/go-swagger/tree/master/docs/generate. at first glance you might think that.\nhowever with zero value of empty string, how can you distinguish between set/unset vs zero value?\nRequired doesn't necessarily mean non-empty, if you want required, non-empty you can use minLength: 1 which should get you back to primitive type.. if you want a pointer for this use case use: x-nullable: true\nyaml\n  Host:\n    properties:\n      state:\n        type: string\n        x-nullable: true. could you regenerate bindata and push again? I have a bindata conflict. unless we get a spec we can't fix this. This should work because the yaml library does this during parsing. So you are still sane :)\nHowever swagger ignores those extra fields so perhaps do \n```yaml\nparameters:\n  RequestIdParam:\n    name: X-Request-ID\n    in: header\n    type: string\nx-DefaultParameters: &DEFAULT_HEADERS\n  parameters:\n  - $ref: '#/parameters/RequestIdParam'\npaths:\n  /objects:\n      <<: *DEFAULT_HEADERS\n      get:\n        summary: \"Lists the objects\"\n```. discussed offline. the type file is specific for formData params.\nI believe your intent is to stream some data to the client, perhaps with the content-disposition header. To do this use:\nyaml\ntype: string\nformat: binary\nThis will render the correct code for you to use.. this is fixed on master by: #1329. there is a way to use a pre-existing type that exists on the file system.\nThat would be another way to solve this problem. . I'll bump the release version next week. sorry for the long wait, I'm in the middle of moving homes.. i assume a similar fix needs to be applied to the ToCommandName function. IMO int is not a good option to support when it comes to contracts.\nConsider the following: you have an arm32 client on which int is int32, however your server is amd64. At this stage it's perfectly valid for the server to return int32 max value + 1, this will cause the client to overflow.\nSo while go allows int as type I think for API contracts int is too ambiguous as definition leading to subtle but hard to debug failures.\nSimilarly other languages may choose to default to int32 type instead of int64 type regardless of platform.. I just merged x-omitempty (#1189)\nif you add that to the spec you can skip then nulls. there is nothing that specifies the properties of an object support strict ordering. Neither in the JSON spec nor in the swagger 2.0 specification. this is a yaml thing.\nYou want to single quote your key name: 'n' . Yes the generator works with yaml and json so you can use either.\nI agree on line number and column position however default go tooling doesn't provide the right means to do so. http://yaml.org/type/bool.html. the difference is that one is a type alias to a primitive like int/string/float wheras a struct is a combination of such values. I don't see much benefit of using pointers for the primitives because you don't typically use them in the same way.\nDo you have technical reason why you would want this or is it just aesthetics?. the concurrency concerns exist with or without pointers. slices are not safe for concurrent access either. \nso you should look into message passing as a solution to that or use mutexes. Regardless using a slice like the way you describe it seems like it's asking for trouble. Go has channels which serve as a queue so that's how you can do that.\nAnd it also seems that copying a slice and dereferencing pointers is the least of your peformance concerns? have you measured and proven out the hypothesis that the copying is the bottle neck?\n. a slice is a reference type, there is no way to pass it by value. Redirection flow is for UI... The spec has them so your UI can do the redirection.\nSwagger 2.0 only defines those properties as hints for a UI to work, this doesn't have to be server side. At the same time the redirection flow is not supported in an API but you can use an OAuth 2.0 middleware from any library to get you that functionality. it's the blank lines. why would max length matter for an ISO-8601 date? . updated discriminated.md. you can use another annotation in your spec to provide extra struct tags\nfor example:\nyaml\ntype: object\nproperties:\n  productCode:\n    type: string\n    x-custom-tag: \"bson:\\\"productCode\\\" proto:\\\"product_code\\\"\". Would you expect the outcome to be:\njson\n{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"description\": \"This is the public REST API \",\n    \"version\": \"1.0.0\"\n  },\n  \"paths\": {\n    \"/thing\": {\n      \"post\": {\n        \"description\": \"Do thing\",\n        \"operationId\": \"aThing\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"SomeObject\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/SomeObject\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"definitions\": {\n    \"CustomFields\": {\n      \"type\": \"object\",\n      \"additionalProperties\": {\n        \"type\": \"object\"\n      },\n      \"x-go-package\": \"github.com/example-swagger\"\n    },\n    \"SomeObject\": {\n      \"type\": \"object\",\n      \"title\": \"SomeObject ...\",\n      \"allOf\": [\n        { \n          \"$ref\": \"#/definitions/CustomFields\" \n        }\n      ],\n      \"properties\": {\n        \"name\": {\n          \"description\": \"Name - a name\",\n          \"type\": \"string\",\n          \"x-go-name\": \"Name\"\n        }\n      },\n      \"x-go-package\": \"github.com/example-swagger\"\n    }\n  }\n}. in that case you're modeling this wrong because that's not what you're saying.\njson\n{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"description\": \"This is the public REST API \",\n    \"version\": \"1.0.0\"\n  },\n  \"paths\": {\n    \"/thing\": {\n      \"post\": {\n        \"description\": \"Do thing\",\n        \"operationId\": \"aThing\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"SomeObject\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/SomeObject\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"definitions\": {\n    \"CustomFields\": {\n      \"type\": \"object\",\n      \"additionalProperties\": {\n        \"type\": \"object\"\n      },\n      \"x-go-package\": \"github.com/example-swagger\"\n    },\n    \"SomeObject\": {\n      \"type\": \"object\",\n      \"title\": \"SomeObject ...\",\n      \"properties\": {\n        \"name\": {\n          \"description\": \"Name - a name\",\n          \"type\": \"string\",\n          \"x-go-name\": \"Name\"\n        },\n        \"customFields\": {\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"type\": \"object\"\n          }\n        }\n      },\n      \"x-go-package\": \"github.com/example-swagger\"\n    }\n  }\n}\nif that is what you want then your struct should be defined as:\n```go\n///go:generate swagger generate spec\n// Package API\n//\n// This is the public REST API\n//\n//     Version: 1.0.0\n//\n// swagger:meta\npackage exampleswagger\n// swagger:operation POST /thing aThing\n//\n// Do thing\n//\n// ---\n// Responses:\n//   '200':\n//     description: SomeObject\n//     schema:\n//       \"$ref\": \"#/definitions/SomeObject\"\n//\n// SomeObject ...\n// swagger:model\ntype SomeObject struct {\n    // Name - a name\n    Name string json:\"name\"\n    CustomFields CustomFields json:\"customFields\"\n}\ntype CustomFields map[string]interface{}\n```\n. Implement a responder, by default we generate a few we can infer from the swagger spec but you can easily implement your own.\nit's essentially  a func(http.ResponseWriter, runtime.Producer)\nhttps://github.com/go-openapi/runtime/blob/master/middleware/context.go#L56-L68\n. the responder executes  in the context of a web request. You can do it in a responder because it's essentially a call back. Afaict gorilla sessions wants you to call it before exiting ServeHTTP which it will.\n```go\napi.StaticSayHelloHandler = static.SayHelloHandlerFunc(func(params static.SayHelloParams) middleware.Responder {\noriginalResponder := getSomeResponder()\nreturn middleware.ResponderFunc(func(rw http.ResponseWriter, p runtime.Producer){\nsession.save(rw, params.HTTPRequest)\noriginalResponder.WriteResponse(rw, p)\n\n})\n})\n```. in openapi 2.0 oneOf and anyOf are not supported.\nbut we'll look at the rest of the discriminated support. the problem here is that we marshal data into a struct and only then validate it. Go's json library doesn't give us much to recover from this and to give a more meaningful error message unfortunately.\nI'm open to suggestions though. you need to export the fields in your parameter struct\nand // swagger:parameters getEmployee needs the operation name(s) it applies to. I just merged those changes into master on go-swagger/go-swagger. you can reuse the json struct tag to provide a different name for those properties. refs are not suported in headers in openapi 2.0.\nhttps://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#header-object\nOnly responses.\nSeen as you're using yaml you could use yaml anchors to get the desired outcome.. that would be a bug in the swagger editor not a feature. You don't strictly need to specify the Content-Type header.\nI think it should work if you define your spec like:\nyaml\nswagger: \"2.0\"\ninfo:\n  title: Test\n  version: 0.0.1\nschemes:\n- \"http\"\npaths:\n  /test:\n    get:\n      produces:\n        - \"application/octet-stream\"\n      responses:\n        200:\n          description: 200 response\n          schema:\n            type: string\n            format: binary\nWhen it comes to unknown mime types and not having producers or consumers, those are stored in a map on the client and you can add your own.  They are not meant to be a complete list although we could/should probably add a few more.\nhttps://github.com/go-openapi/runtime/blob/master/client/runtime.go#L140-L151\n. fwiw you can edit that in your own application code without modifying the generated code.\nYou will just need to use a different constructor, there is a reason those fields are exported :)\nhere's an example where I build a client to actually reuse tcp connections and I've added a consumer in there too so you see where to do it.\n```go\nfunc (c clusterFlags) NewAPIClient() (bhclient.BuildingHistory, error) {\n    clientTlsOpts, err := httptransport.TLSClientAuth(httptransport.TLSClientOptions{\n        CA:          c.ClientCACertificate,\n        Certificate: c.ClientCertificate,\n        Key:         c.ClientCertificateKey,\n    })\n    if err != nil {\n        return nil, fmt.Errorf(\"TLS config: %v\", err)\n    }\ntransp := httptransport.KeepAliveTransport(&http.Transport{\n    Proxy: http.ProxyFromEnvironment,\n    DialContext: (&net.Dialer{\n        Timeout:   30 * time.Second,\n        KeepAlive: 30 * time.Second,\n        DualStack: true,\n    }).DialContext,\n    MaxIdleConns:          100,\n    IdleConnTimeout:       90 * time.Second,\n    TLSHandshakeTimeout:   10 * time.Second,\n    ExpectContinueTimeout: 1 * time.Second,\n    TLSClientConfig:       clientTlsOpts,\n})\n\nschemes := bhclient.DefaultSchemes\n\nbt := httptransport.New(c.JoinURI().Host, bhclient.DefaultBasePath, schemes)\n// further configure go-swagger runtime.Transport\nbt.Consumers[\"image/jpeg\"] = runtime.ByteStreamConsumer()\nbt.Transport = transp\nreturn bhclient.New(bt, nil), nil\n\n}\n```\n. care to submit a PR for that?. that might just be timestamps. you can use: swagger serve --flavor swagger --doc-url https://api.subledger.com/\nWhat you're seeing there is an older version of the swagger ui in use on the petstore url. can you run go generate ./generator and push the changes. Otherwise your change won't be picked up. You know the ref in a is invalid in syntax.\nit has:\n$ref: ./test2-schema.json/#definitions/a\nBut I suspect it should be:\n$ref: ./test2-schema.json#/definitions/a. there are 2 different use cases here.\n\nediting specs and sharing pre-existing schemas by using references and promoting reuse\ngenerating code where on an API boundary what goes over the wire has no concept of reuse or types just shapes of data.\n\nSo whether we flatten prior to the generation process or during the generation process by resolving refs ad-hoc should be of no consequence. The shape of the data is the same. The generation process works as follows:\n\nresolve remote references and make them local\nmove all anonymous schemas into definitions and give them a name\ngenerate an intermediate DOM (AST) from the specification that can be used for code generation\nPass AST to a number of templates and render code based on the information within the AST.. The problem is with the id field which openapi 2.0 doesn't support.. see here: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schemaObject\n\nthe supported properties are the ones defined in that list. in addition openapi 2.0 doesn't allow for multiple types in a type field. . it seems that your main.go is in $GOPATH and not $GOPATH/src. no not yet sorry. \ud83d\udcaf great work. yeah don't worry about the codecov patch stuff. Code coverage is a poor measure of quality anyway.. it fails because it's printing to stderr. Windows (appveyor) thinks anything that prints to stderr is a failure. I suspect it has to do with the new log statemetns that were added \nAppVeyor has been going for more than a year on this project. yes fine with the feature. this might give you an idea how to avoid the stderr issue:\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/operation_test.go#L367-L370. master should be repaired now, sorry about that. if semantically the same how is omitempty an issue? can it be fixed with a custom marshal/unmarshal?. not from a go perspective. both are empty. in go nil and [] are the same, https://play.golang.org/p/UNZ5kT2JSC\nwe have the same issue with validations where we have a hard time distinguishing between key not present and value not present, or value set to empty.\nWould the right solution be to use a pointer? that way you can distinguish between the things more easily.. I merged this PR now. that particular issue is fixed now. can you define \"not working\" a little bit clearer. this fix came in after the 0.13 release but will be included in the next release. the commit list seems very long. I wonder if this is missing a rebase? It should only be 1 commit no?. how would that custom consumer/producer be picked up at runtime?. yes you're right, I verified after asking the question.. in this case: carry on :). it's not ideal but I just do pattern matching tests, and typically I've tried the code before.. thanks!. this is a bug it should really submit that body\n. I think make line 238 read: {{ if or .Schema.IsInterface (and .Schema.IsNullable (not .HasDiscriminator)) }}. fixed by go-openapi/runtime@55d76b2319213cf30fdb7c4ae3a01541f5404c16. you can now create a bytestream producer or consumer with runtime.ByteStreamProducer(runtime.ClosesStream). yeah I think you're right.\nWe have a concept of language options but this hasn't been added to it yet.\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/shared.go#L90\nPerhaps this check should move there?. @elakito you can make the changes in 0.x.x as long as we do it without breaking the go language support we're all good.\n. the use case for language opts is exactly what you want to do @elakito so I my vote goes to continuing to expand that functionality. . excellent work, as usual \ud83e\udd47 . yes I think this is a valuable contribution. I have to see exactly where the changes will be made and at worst I'd ask to rename a method or something.. if you can run go test ./... we should be good. you can use consumes and produces to that end and only define 1 operation.. you can repeat this build failure with:\ngo install ./cmd/swagger\n./hack/run-canary.sh. have you tried using swagger expand?. the fix is not quite an io.Reader but it is an interface and the runtime package got a NamedReader method which allows you to turn a reader in the appropriate interface type.. so file is not allowed outside of the use in formData.\n\nIf type is \"file\", the consumes MUST be either \"multipart/form-data\", \" application/x-www-form-urlencoded\" or both and the parameter MUST be in \"formData\".\nhttps://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#parameter-object\n\nIf you want to have a stream it's:\nyaml\ntype: string\nformat: binary\nhttps://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types\n. I've verifed when I use: \n```yaml\nswagger: \"2.0\"\ninfo:\n  title: test for streaming\n  version: \"0.0.1\"\nresponses:\n  streaming:\n    description: Streamed file content\n    schema:\n      type: string\n      format: binary\npaths:\n  '/streaming':\n    post:\n      produces:\n        - application/octet-stream\n      responses:\n        '200': { $ref: '#/responses/streaming' }\n```\nthen it renders valid code\ngo\ntype PostStreamingOK struct {\n    Payload io.Writer\n}. o man I've read this spec maybe 500 times by now and I still missed that. we really need flatten but the changes to $ref resolution broke flatten too\nOnce you flatten these types of enums can be lifted to top level enums and everything will just work.\nIt's hard to solve this in a way that doesn't end up with very long names. will this continue to chain names with nested anonymous schemas?\nI don't know how much this is helping vs getting people to just define their own constants. These enums are typically such small things. \nWhile the code being generated here is valid, compiles and works, it probably doesn't actually capture intent. The intent being typesafe reuse, and unless we analyze all the enums and group the ones that are the same we don't capture that intent.  . seems odd that the only change is a revision in gopkg and not any files in vendor. go get -u github.com/golang/dep/cmd/dep\ndep ensure -update. and lastly there is the opportunity to get go-swagger to reuse a predefined type to satisfy the definition in the swagger spec. https://github.com/go-swagger/go-swagger/blob/master/fixtures/codegen/existing-model.yml#L84-L88\nThat example reuses a type provided by a library with a package alias and type name. The code generator will respect this.\n. use additionalProperties: false or additionalProperties: true on your definition.\nwhen it's set to true you'll have a map[string]interface{} added. this looks good to me, let me know when you're happy with it for merge. I've pushed the website to the domain. I think we recently updated the way these names are generated. do you still see that same behavior on when you build from master?. we added changed the function that generates a file name to keep all uppercase letters grouped.\nSo the filename would still be lowercase but 1 word: ipam.go. thanks, sorry I missed this PR earlier. you need to download the dependencies it lists at the end of the generation step and regenerate.. why would vendor not be version controlled, imo generated code and vendored code is part of the project there is no benefit besides some disk space.\nthe goal is that people can do go get -u github.com/go-swagger/go-swagger/cmd/swagger\nand it should build with the version that we tested with not with what happens to be on their GOPATH\n. if you can tell me how people can do go get -u github.com/go-swagger/go-swagger/cmd/swagger \nand at the same time use a set of libraries that are at the same version as we tested with I\"m willing to entertain the discussion. Until then we should leave the subject for what it is.. I know this sounds dismissive but it's not a controversial topic. \nWe have tons of actual problems and higher value improvements that can be made instead.. I should look at the changes for the validation again. I suspect that there were things that use to be warnings that are now errors.. o i didn't mean skip-validation but skip-validator flag.\nwe want to validate but the skip-validator we don't want to support. swagger doesn't allow for type arrays so they dont' need to be supported. we should remove the makefile and the scripts that uses. they are not useful and confusing. it needs a rebase on master because there was another PR merged with changes to templates, so bindata is in conflict currently. you have to use the model in a parameters struct,  the parameter struct can be assigned to many operations by listing all the operationId's it pertains to.. yes but also parameters can't refer to definitions because they are distinct things.\nA definition is a struct to represent a payload\nA parameter is headers, query params, path params and body\nfor example:\ngo\n// An OrderBodyParams model.\n//\n// This is used for operations that want an Order as body of the request\n// swagger:parameters updateOrder createOrder\ntype OrderBodyParams struct {\n    // The order to submit.\n    //\n    // in: body\n    // required: true\n    Order *models.StoreOrder `json:\"order\"`\n}\nthis defines a parameter that uses the models.StoreOrder (your foobar) as request body. And this parameter is associated with both the operations: updateOrder and createOrder\n. I don't know why you'd need to copy paste them? it's 1 type that can be attached to many operations. You can only have 1 body. if you use swagger:route you don't need to\n```go\n// swagger:parameter getFoo1 getFoo2\ntype fooBarParam struct {\n  // in: path\n  FooBar string json:\"foobar\"\n}\n//swagger:route GET /{foobar}/foo1 getFoo1\nfunc getFoo1(res responsewriter, req request) {}\n//swagger:route GET /{foobar}/foo2 getFoo2\nfunc getFoo2(res responsewriter, req request) {}\n```\n. can you explain me the benefit of this? . just fyi it's not really timing issues but golang maps that causes the irregularity. The ordering is an issue.\nwe have a fix in the works for that.\nit's doable to make that change. I can help you find the right places to change if you're willing to make the PR.. You are in the wrong place.\nYou probably want https://github.com/uplink42/etmv2 or some other repo that's not go-swagger.\ngo-swagger is a repo that implements a specification for api documentation.. you can use golangs static content middleware to serve static files like it was described in the comment above. more info on using middlewares is found here: https://goswagger.io/use/middleware.html\nThat page also contains a link to a good explanation on how to create net/http middlewares. Every swagger generated server comes with the redoc UI baked in at /{basepath}/docs. that's an invalid type. The openapi 2.0 spec says the type should be \ntype: integer\nformat: int64\n. you can generate the server with a different compatibility mode for the older generation of ciphers\nswagger generate server --compatibility-mode=intermediate. @drewwells you can use x-isnullable: false on those properties where you don't care about the distinction between null and the zero value.\nit's not like the zero values are an unknown thing to us, it's just that that particular trade-off works in a go app where you're behind your fence. However an API boundary is your fence and there you need that to go from a type system that's language agnostic to go's type system\nWe provide these helpers to make dealing with that distinction easier https://github.com/go-openapi/swag/blob/master/convert_types.go\n. define 2 paths which include the query string\nThat allows you to pick producers. By default the content negotiation works based on the accept header not a query string.. it should just work. 1) i'm ok with factory methods, I think there should be 1 consistent way that handles all the types and not several ways because something is a primitive or an alias to a primitive.\n2) has more issues because you would need to deep clone, otherwise the defaults can be modified because of pointer usage\n3) not a fan because this is really about the openapi spec, and so the defaults should always be known at codegen time. If you want to deviate from that you need to create your own factory method in another package.\n4) factory methods work everywhere. yeah it's fine, it's not a critical optimization. can you rebase this so I can squash the commits?. It's a bug the security entries aren't being created correctly\nto work around it you can make another yaml file which has the security related stuff and provide that with the -in parameter. the spec generation command will then do a deep merge.\nYou would need to remove the security tags from your documentation though.\n. yeah it should fix that one. depends what's in prog.go, when you do go run prog.go does it serve your API?\nWe parse the same tree the compiler uses when compiling your source code. So we will only find things when there is a path from the main package.\n. I would need to see the file to see why it doesn't work. . I haven't been able to look into this yet. do you happen to have a repo that reproduces the project layout and problem outside of your larger codebase?. both are equivalent but the fact that additionalProperties: true is also the default kind of puts us in an awkward position. Because every object can be an expando object. Furthermore this spec is valid and the bug is really in bravado imo.. you make an interesting point, i may have assumed the latter. you can look into swagger:operation \nalternatively you can define the parameter structs, look at them as documentation but the types are verified by the compiler.. have you seen swagger:operation it allows you to specify routes but with the full swagger yaml syntax. \nThis PR somewhat duplicates this, but with bespoke syntax. I wonder where the type goes and some of the other validations etc that can be defined on parameters.\nIt's great that you figured out how to extend this :100: . O I hadn't seen your response on #1404 \nI see you have \"bigger\" plans, I'm good with your remarks there would you be up for making this a bit more complete so that it covers most of the possible use cases?. once you have the ability to specify types you probably also want the ability to specify the validations they have to pass. Things min length, pattern, min/max etc come to mind.\nFeel free to ping me on slack https://slackin.goswagger.io. you have access to a HTTPRequest on the params, you can put stuff on the http request in a middleware.\nI typically put stuff on an application level context and pass that to each handler struct\nYou can see the pattern here: https://github.com/go-openapi/kvstore. you can look at the contrib templates, they do some of this.\nPersonally i don't think it is the job of toolkit like this to prescribe how you should structure your apps. \nInstead it should give you all the building blocks so you can do that last mile in a way that you like.\nThis project does something similar to what you showed: https://github.com/Stratoscale/swagger\nA pattern like you showed will break down when you have 10's or 100's of endpoints that enterprise systems often have like kubernetes (imagine all of kubernetes apis in a single file) or the redfish api's. \nEvery time we choose an abstraction we hide more of the underlying bits and that's sometimes helpful but then when you need to step out of that you're stuck. I appreciate the suggestion but use cases for API's go far beyond a petstore.  \nThe runtime in the kvstore functions as an application level context to avoid globals. It implements an interface so you can use a mocked one in tests etc. Secondly it's just an example of how I structure apps. I've regretted doing the configure_xxx in the way I did but when I realized that it was too late becuase I had already a lot of people using this. \nHaving dealt with libs that fixed cosmetic mistakes like that through breakage I didn't want to force somethign like that to the various companies that were already building stuff on top of this toolkit.\n. Their templates are included in our repo: https://github.com/go-swagger/go-swagger/tree/master/generator/templates/contrib/stratoscale\n. I want to make you aware of these helpers: https://github.com/go-openapi/swag/blob/master/convert_types.go\nThey make it easier to deal with the pointers of various types.\nI'm hesitant to putting the initialization as arguments on a function because the opportunity for creating very confusing bugs is great.\nAt that moment stable ordering of parameters is important, let's say we use alphabetical ordering.\nThis works for the first time. A few weeks later somebody introduces a few properties that affect the ordering all of the same type. You remove some other ones, the code still compiles because you happen to have the same amount of arguments but their meaning has changed. \nThis is the reason for us generating parameter objects instead of functions in the first place with the _ struct{} in there so that you need to name values in the literal you use to initialize it.\nA variation on your proposal could be to generate another struct where the pointers are removed which converts into the actual struct we want to use.. I like this idea. the examples can be changed by running ./hack/regen-samples.sh \nso at least the code samples are updated. I think there isn't that much in the docs themselves that needs to be changed. \nIdeally the docs reflect our current code base.. we don't need to support the graceful.Server.LogFunc, it's only used on errors when the listener can't be closed or on shutdown when connections can't be released.\nSo we'd mostly need to cover those 2 use cases. this has a graceful implementation based with golang support: https://github.com/TV4/graceful\nit's based off this example: https://gist.github.com/peterhellberg/38117e546c217960747aacf689af3dc2#gistcomment-1982608\n. I restarted the build. This implies that the json is invalid but the golang json library doesn't give us a lot of info. . swagger.json is handled differently from /healthcheck. We have a middleware that doesn't discriminate for the method of the request for /swagger.json\nHowever for /healthcheck it does exactly what the spec says it should be doing.\nSo we don't automatically serve head for get requests because there is no rule that says that is implied usage. You would handle it in a different way because you would return a different result for both invocations.. the middleware is only present for the swagger.json no other one does it.\nYou could write a middleware that rewrites HEAD to GET but with a discard stream writer. have you tried running flatten before generating?. can you share your swagger.yaml ?. if you add -H 'Content-Type: application/json' it will probably start to work. the error likely comes from this block: https://github.com/go-openapi/runtime/blob/master/middleware/context.go#L257-L275. is the Agent type mentioned in the spec ? if it isn't, then the x-go-type annotation might solve this issue for you. https://github.com/go-swagger/go-swagger/blob/master/fixtures/codegen/existing-model.yml#L84-L88. in many go tools, packages are assumed to only exist out 1 word so they want the package to be github.com/sul-dslss-labs/permissions/service. have you tried generating with the principal flag? normally authenticate api calls get an auth writer argument that you have to pass. if you follow the params is a separate struct from body and you actually use them in code, the models that are in use will be detected. if we can't find a direct usage in code then you have to include model discovery. won't fix, as discussed offline. Optional auth should now be supported. the short answer is there is no reason. I took type: object to mean java.lang.Object meaning it can be anything and as such I went with interface{}. yeah I can reproduce the error, it's becuase there is no producer registered.\nThe following version of your code works properly:\n```go\npackage main\nimport (\n    \"fmt\"\n\"playground/client\"\n\"playground/client/todos\"\n\"playground/models\"\n\n\"github.com/go-openapi/runtime\"\nhttptransport \"github.com/go-openapi/runtime/client\"\n\"github.com/go-openapi/strfmt\"\n\n)\nfunc main() {\n    cfg := client.DefaultTransportConfig()\n    cfg.Host = \"localhost:40083\"\n    cfg.Schemes = []string{\"http\"}\nt1 := client.NewHTTPClient(strfmt.Default)\ntr := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)\ntr.Consumers[\"application/io.swagger.examples.todo-list.v1+json\"] = runtime.JSONConsumer()\ntr.Producers[\"application/io.swagger.examples.todo-list.v1+json\"] = runtime.JSONProducer()\nt1.SetTransport(tr)\n\nhand := runtime.ClientAuthInfoWriterFunc(func(r runtime.ClientRequest, _ strfmt.Registry) error {\n    return r.SetHeaderParam(\"x-todolist-token\", \"asdf\")\n})\n\nx := \"Do this and that\"\na1 := todos.NewAddOneParams()\na1 = a1.WithBody(&models.Item{Description: &x})\nadded, err := t1.Todos.AddOne(a1, hand)\nif err != nil {\n    fmt.Println(\"Error: \", err)\n}\n\nif added != nil {\n    fmt.Printf(\"%#v\\n\", added.Payload)\n    fmt.Println(added.Error())\n} else {\n    fmt.Println(\"Added nil\")\n}\n\n}\n```. sounds like a good idea, are you offering a PR?. yes it's not supported by the spec. . we can wrap those in a sync.Once. that's not entirely true. the denco based router is a reference implementation.\nyou need to implement this interface for another router: https://github.com/go-openapi/runtime/blob/master/middleware/router.go#L102-L106\nYou can then pass it into the context: https://github.com/go-openapi/runtime/blob/master/middleware/context.go#L190-L209\nFrom then on the rest of the generated code will work the same but you'll be using your own router implementation instead of denco.\nSo main takeway is you don't need to fork the runtime package to extend it, it uses interfaces you can extend from outside the source tree. just do go get -u github.com/go-swagger/go-swagger/cmd/swagger\n. the default error doesn't have a body schema so the code generator never generates the code needed to read the body. By the time you see it's cleaned up.\nSo you need to define a default response which defines the body type of your response and then everything should work as expected. the different content types are dealt with through consumers. So you can have a catch all consumer that buffers in a byte buffer/file/... for the response with content types other than json.\n. \"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/ResponseOK\"\n            }\n          },\n         \"default\": {\n            \"schema\": {\n               \"type\": \"string\"\n               \"format\": \"binary\"\n            }\n     }\nthat should give you an io.Reader (might be writer) that you should be able to drain.\nyou can then detect if if it's text/html/json by looking that the first few bytes ( starts with { or [ would be json). you can get the user when the response is being generated in your middleware, the user should be on the r.Context() IIRC\n. I've added these helpers: https://github.com/go-openapi/runtime/blob/master/middleware/context.go#L235-L259 so you can get it from a *http.Request . you would have to implement the interaction with the database yourself.\nthis tool will just generate the skeleton for you . Can you get the dependencies  and then regenerate? We use goimports to find these packages so if they exist on the FS then the imports will be present too. You should be able to get list you need from the message that is printed at the end of the generation step.. haven't tried this yet, but can you regenerate after you've done dep init. there is nothing special about the development process. I'll delete the makefiles, because we dont' actually use them.\ntest everything: go test ./...\n. they are required when you have more than 1 in them unless it's defined with a null type which is impossible in swagger. it has to validate as a schema on that same position so they are not optional when there is more than 1\nhttps://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-6.1.1\n```\n   The value of \"items\" MUST be either a valid JSON Schema or an array\n   of valid JSON Schemas.\nThis keyword determines how child instances validate for arrays, and\n   does not directly validate the immediate instance itself.\nIf \"items\" is a schema, validation succeeds if all elements in the\n   array successfully validate against that schema.\nIf \"items\" is an array of schemas, validation succeeds if each\n   element of the instance validates against the schema at the same\n   position, if any.\nOmitting this keyword has the same behavior as an empty schema.\n``. it will always need something there whether it's null or something that passes validation, but it can't skip positions. This makes it requred. How come you are depending on go-swagger/go-swagger ?\n. it looks like somebody broke our master compile by not adding the required dependencies to our vendor.\nWe'll fix it. @stevecookform3 we want the most default go toolchain (go get, go test ./..., etc) to work on go-swagger, thanks for letting us know. . I see what you meant. Why is there an interrupt handler for each listener? wouldn't there be 1 interrupt signal that needs to clean up all the active listeners?. you can usex-go-custom-tag: mytag:\"foo,bar\"`. one possible work around is to flatten the spec you want to serve, that would import all the non-local references. I think you want to report this on the https://github.com/golang/dep repo not here. . which menu are referring to? the one from redoc?\nIn any case if you just want to link to a page from a parameter description that should be possible because each description field allows for markdown so you can use Date Formats.\nOther than that it depends a bit on how the UI you're using adds things to the menu\n. fixed by #1511 . you need to make it available with that name in the definitions section then it will know. you can just edit the existing spec and regenerate, it's safe to regenerate, the pre-existing files should be identical. is test_swagger in your $GOPATH/src ?. There is a completed example here, which compiles: https://github.com/go-swagger/go-swagger/tree/master/examples/tutorials/custom-server. feel free to send a PR with a better regex. my 2c on actual email validation would be that it would need to use an actual mime address parser because if you go through the rfc for this stuff it's pretty complex what you can put in an email address.\nhttps://golang.org/pkg/net/mail/#Address\nHere's the implementation of the email type: https://github.com/go-openapi/strfmt/blob/master/default.go#L393-L473\nAnd here's where the regex is registered.\nhttps://github.com/go-openapi/strfmt/blob/master/default.go#L138-L139\nA validator is a func(string) bool. From the email addresses listed in the asaskevich/govalidator#131\nThe following don't parse with the golang mail package, but they are also very esoteric.\nholy..moly.@gmail.com\nvery.unusual.\"@\".unusual.com@example.com\nvery.\"(),:;<>[]\".VERY.\"very@\\\\ \"very\".unusual@strange.example.com\nmuch.\"more\\ unusual\"@example.com\nallen@[127.0.0.1]\nallen@[IPv6:0:0:1]. you can use a tool like these: \n\nhttps://github.com/cespare/reflex\nhttps://github.com/radovskyb/watcher\n. what I do to debug this is, I install the swagger-tools npm package and use that to validate the doc. It will tell you which line number. For us that information is lost in the go stdlib tooling.. in your case that results in:\n```\n$ swagger-tools validate https://raw.githubusercontent.com/OpenNetworkingFoundation/TAPI/develop/SWAGGER/tapi-connectivity%402018-02-16.swagger\n\nerror: end of the stream or a document separator is expected at line 16987, column 1:\n    }\n    ^\n```. anohter easy trick for seeing json parse errors is:\n$ curl -sL https://raw.githubusercontent.com/OpenNetworkingFoundation/TAPI/develop/SWAGGER/tapi-connectivity%402018-02-16.swagger | jq. The logic is optional fields always have a default of some sort. \nRequired fields is actually where you care about the difference between not provided or zero (\"\", 0, false,...). you can use --exclude-spec if you want to serve from disk.\n. because it's filling up unexported properties and needs to compose a few things together . do not vendor go-swagger.\nyou can approach this problem by making your vendoring tool flatten the dependency tree, that will solve the issue. The generated code should be source compatible.\nAlternatively if possible instead of vendoring generated code you can also just generate code for more than 1 spec. . what do the imports look like in \nusers-api/client/users_client.go. the error message say there is a nested vendor folder involved.\nwant Submit(*\"xxx/users-api/vendor/github.com/go-openapi/runtime\".ClientOperation) (interface {}, error)\nhave you tried to run it in a clean go env\ndocker run --rm -it -v $(pwd):/go/src/github.com/xxx/auth-api -w /go/src/github.com/xxx/auth-api golang:1.10 bash\ngo get -u github.com/golang/dep/cmd/dep\ngo test ./.... those references seem invalid thought. There should be only 1 fragment there. I\"ll wait for the fix of #1536 and will cut a new release after that. You can use something like this\ngo\nstruct {\n  // Name is the name of a thing\n  //\n  // in: query\n  // example: Angel Zhang\n  Name string\n}. it uses these rules: https://github.com/go-swagger/go-swagger/blob/master/scan/validators.go#L301-L316\nSo i think you might be achieve what you want by just putting a json structure there. failing that you can create a json document that has all the properties that you can't generate and use that as --input extra.json then it will be merged in with the properties from your spec. Not ideal but it would work. that would be awesome. not possible, this is something you should solve in the UI client code itself. You cna just cast to the underlying error and get the payload\nThe error is just a common interface all the non 2xx status codes implement. So you can distinguish between success and error by method result (left, right)\nAnd then you can use a type switch to get to the exact error,. it will be another type like UserLoginDefault  that you can cast err to. The generator generates a struct for each response that's mentioned in the swagger file. no specific reason, feel free to extend that to your needs. We rarely reject PR's. 0.14 was released. we're still working through issues that come from some of the flattening changes\nhttps://github.com/go-openapi/spec/pull/82. excellent! I'll wait with merging then?. specify it as string without the format specification and then parse it in the handler. the date-time format is specified by json schema . try running it with swagger generate spec --scan-models. ```go\npackage main\nimport (\n   \"encoding/json\"\n   \"net/http\"\n)\n// a volume containing info on the volume \n// swagger:model volumes_info\ntype Volumes_info_t struct {\n   // type of data\n   //\n   // required: true\n   ODATA_TYPE string \n// the schema\n   //\n   // required: true\n   Schema string \n// name of the volume\n   //\n   // required: true\n   Name string \n// description of volume\n   //\n   // required: true\n   Description string \n// count of members in volume\n   //\n   // required: true\n   MembersCount int \n}\n// A VolumeResponse is the response to an API call that returns the payload\n//\n// swagger:response volumeResponse\ntype VolumeResponse struct {\n   // in: body\n   Payload Volumes_info_t\n}\n// swagger:route GET /redfish/v1/systems/1/storage/{storage_number}/volumes listVolumes\n//\n// Show information of one individual volume\n//\n// Responses:\n//    default: genericError\n//         200: volumeResponse\n//         422: validationError\nfunc API_Systems_1_Storage_1_Volumes (w http.ResponseWriter, r *http.Request) {\n   var volumes_t Volumes_info_t\n   json.NewEncoder(w).Encode(volumes_t)\n}\n```. you're much better off just generating the code from a swagger spec imo. You can look at how it annotates all the code, that will help you figure out what's going on with yours. The problem here was that the code wasn't inside $GOPATH/src. You are absolutely correct that the behavior has changed. I waited this long with releasing 0.14.0 because I was hoping to receive a fix from somebody or to find time to fix it myself.  But neither of these things happened and a lot of other stuff got fixed. If I receive a pr that fixes I'll release a new version that same day.. to me it seems more a problem of the value validator. \nThere is a case where you might want to provide null  in an arry but that case would be a tuple hardly a map or an array. So I agree with greg here.\nif there is a validation method that barfs because it expects a pointer, we should fix the method to be able to deal with both pointer/nonpointer or something along those lines. \n. no to make less things pointers. We want to get rid of pointers as much as possible. you only have that on objects like a struct and values not containers like slice and map\n. Yes so the core of this is:\nGo looks at the world in 2 states (binary): no value/value\nWe need 3 states (trinary): not provided/no value/value\nI made the mistake of encoding this in the type system by piggybacking on the ownership model. So Go does allow us to encode 3 states in their type system if we take addresses.  This comes at a cost however because now we no longer retain ownership of a value and we put a bigger burden on the GC for the sake of validation.\nI wanted to fix the mistake which is what the lift pointers pr was about but never got enough time to complete it.\nIt also fixes the serializers for many things and should overall result in a big speed improvement.\n. Add a roundtripper and set it for the transport property of the client when you construct it.\nYou can also provide a custom http client that does something to the same effect.\nThis is the property in question: https://github.com/go-openapi/runtime/blob/master/client/runtime.go#L185\nhere's an example of a custom transport for connection reuse: https://github.com/go-openapi/runtime/blob/master/client/keepalive.go\n. essentially it's a function of func RoundTripper(r *http.Request) (*http.Response, error)\nWhen you make a wrapper it's basically func(inner RoundTripper) RoundTripper , so you have the opportunity to manipulate the request every time right before sending.\n```go\nfunc SetUserAgent(inner http.RoundTripper, userAgent string) http.RoundTripper {\n    return &addUGA{\n        inner: inner,\n        Agent: userAgent,\n    }\n}\ntype addUGA struct {\n    inner http.RoundTripper\n    Agent string\n}\nfunc (ug addUGA) RoundTrip(r http.Request) (*http.Response, error) {\n    r.Header.Set(\"User-Agent\", ug.Agent)\n    return ug.inner.RoundTrip(r)\n}\n```\nuse it:\ngo\ntransport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)\ntransport.Transport = SetUserAgent(transport.Transport, \"My User Agent\")\ncl := todolistclient.New(transport, nil). not a duplicate, just the same file with an error. I think your templates are using spaces instead of tabs or something, the indentation is off compared to the rest of the file. sure what needs to happen?. I've enabled it on our repos, i can configure it as required check once they've run once I think. can you update this branch, it's behind master. as you can see golangci is now required. no but you can access it in the main and from there on generate code with --exclude-main. was this a pre-existing code base? because configureServer is a method that exits in the configure_Xxx.go file. So you may just need to change that signature in your configure_xxx.go file. soon they'll write our code. that's true but we just lean on goimports, I suggest this issue gets reported on that repo. We don't use the denco server but we use it for routing. \nAll of the go-swagger generated code are plain net/http.Handler implementations, you should be able to integrate it with other frameworks that stick to just the stdlib interfaces.\nIf you really want to replace the router you can do this by providing an implemenation of this interface: \nhttps://github.com/go-openapi/runtime/blob/master/middleware/router.go#L104-L108. we can add this to the mangle name function. We rewrite numbers and operators already, we can make sure we don't override os names. can we stick to failing when a schema is invalid?\nJust improve the error message.. I'll try to release this weekend, but can't promise it. There are a few PR's that still need to get merged. when that's done I'll make a release. can you provide a spec to reproduce this?. can you submit a PR to this repo and add a test?\n. o sorry I saw you just did :). are the fixes generally useful? why not just contribute them back?. can you show a project with all the files?. secondly if this is a json api you should never return string.\nThere are only 2 valid types you can return in json: {} or [] nothing else is a json object.. I assume you want {\"Status\":\"OK\"} to come out \nIn that case you need to do this:\n```go\n// swagger:route GET /status GetServiceStatus\n//\n// Service status.\n//\n// responses:\n//  200: body:ServiceStatusResponse\nfunc GetServiceStatus(w http.ResponseWriter, r *http.Request) {\n    resp := ServiceStatusResponse{Status: \"OK\"}\n    resp.Write(w)\n}\n// ServiceStatusResponse is an response with service status.\ntype ServiceStatusResponse struct {\n    Status string\n}\n``. AFAICT there is no right solution here. Anything that tries to solve this needs to make the epsilon configurable.\nEven if we were to add ax-float-epsilon` to every field we'd have a solution for golang but no other language would implement it. \nWhich tolerance is the right one? 1e-6, 1e-9, 1e-3 \nthe answer is they all are within a certain context.\nTo make your example work I'd need a tolerance of 2e-6\nhttps://play.golang.org/p/oyJb2lXZHxO\nThis approach however gets  pretty close (i've decreased epsilon value to 1e-9 here) :\nhttps://play.golang.org/p/bnVRSRQUwd9\nI used the 2nd approach, it's going to be better than what we had but still has opportunities to get it wrong. I will push a 0.15.1 with this fix over the weekend. YES PLEASE! :heart_eyes: . The best I could do is what we have now, a gopher with a swagger logo on its tee-shirt. the mascotte of the programming language this tool is built for/with: https://blog.golang.org/gopher. do you have wg outside of the middleware like that?. yeah but how does that work with 2 concurrent requests?\n. yes but not when you store the response writer in a global variable. if you need to share in between functions for the same request you can put something on the context. also if you just want to redirect, add the 301 or 302 response to your swagger spec\ngenerate the server and when you want to redirect just use that response instead of what you're doing now\nor return a responder from your go-swagger handler: https://github.com/go-openapi/runtime/blob/master/middleware/context.go#L55-L67. to fix it it's here: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/additionalpropertiesserializer.gotmpl#L30-L31\nhere's an example of a test with additional properties: https://github.com/go-swagger/go-swagger/blob/master/generator/model_test.go#L1089-L1117\nWe have a lot of tests for the generated code but we just verify that the content of the file matches a number of things we expect. We don't actually test and exercise the generated apis because there are just so many possibilities and edge cases with edge cases.\nFeel free to send a PR\n. you can where you've defined the swagger:route\n```go\n// ServeAPI serves the API for this record store\nfunc ServeAPI(host, basePath string, schemes []string) error {\n// swagger:route GET /pets pets users listPets\n//\n// Lists pets filtered by some parameters.\n//\n//     Responses:\n//       200: body:PositionResponseBody\nmountItem(\"GET\", basePath+\"/pets\", nil)\n\n}\n```. like this:\n```go\n// swagger:model positionResponse\ntype PositionResponseBody struct {\n    // X Position\n    Positionx string\n    // Y Position\n    Positiony string\n}\n// swagger:route GET /v1/position position\n//\n//     Consumes:\n//     - application/json\n//\n//     Produces:\n//     - application/json\n//\n//     Schemes: https\n//\n//     Responses:\n//      default: genericError\n//      200: body:positionResponse\nfunc someHandler()\n```\nthen run swagger generate spec -m  If you want to use that model you need to specify the flag for go-swagger to scan the models because at that point there is no way for us to walk the AST and collect all the relevant models. can't it call vgo and capture the output?. You build your binary with go install and run ./hack/codegen-nonreg.sh. you can make a responder and use that instead of the default OK one that you're using now\nhttps://github.com/go-swagger/go-swagger/issues/748#issuecomment-261646983. This is fixed on master, but not yet released. . this is the pr #1627. You can just modify the default by copying it and editing it to your error type.\nhttps://github.com/go-swagger/go-swagger/blob/master/vendor/github.com/go-openapi/errors/api.go#L117:6. you can create a definition and say it's an existing type. We wanted to keep the distinction between the required validation and other rules. So instead of analyzing the ruleset as a whole and skipping the ones that are captured by others, this fails the individual rules.\nDunno about your example though because it fails this first directive of failing individual rules. I think we should only address the minLength: 0 and not the other one. While it might be a bit counter intuitive it's also behavior that's been around for several years now, and we don't want to break existing applications unless it's an actual bug and not a aesthetic nuance.\nI'm the reporter of this bug so i want to close it as a won't fix. Yes the minLength: 0 is a bug and needs addressing. these are very different topics.\nThe first one is a bug, which is likely a null check without the accompanying zero value check.\nThis doesn't necessarily needs to be a super large change. it's not about whether something becomes a pointer or not. This is a bug in interpreting the value of minlength.\nThe window for fixing the pointer situation has closed. There are too many people using this right now to justify a sweeping change like that, because it would break every single project out there for something that can be seen as a relatively minor detail. The use cases are captured, the means might not be entirely ideal but it works.\nThe flags are there to control the nullable/not nullable to your personal preference.. You can change that here: https://github.com/go-swagger/go-swagger/blob/master/scan/parameters.go#L171-L187\nfeel free to send a PR, i think it shouldn't break and then it should probably be fine. . Why do you need the request body, you're about to send, for the authentication? \nDon't you have the information that goes into it already before you're writing it?\n. On the client for oauth you just want to pass this in:\nhttps://github.com/go-openapi/runtime/blob/master/client/auth_info.go#L56\nwhy does this need payload info? I still don't understand your use case. Does it need to sign the payload with the headers or something like that?\n. There are 2 solutions to this. \nIf you have to do this for every request, you could make a RoundTripper implementation and use that in the transport. This roundtripper has access to both the request and response and is the last thing that sees the request before it's sent over the wire.\nThe other solution would be adding the necessary methods to the ClientRequest interface. At the moment the auth request is written very early on in the process, before the body is even considered.  So this is more work but it would give more granularity. You can send a PR with the changes to the runtime repository. . I already merged it.. take a look at how they are implemented, https://github.com/go-openapi/runtime/blob/master/security/authenticator.go#L32\nthe most convenient authenticators are indeed fairly limited in scope, but you can make your own that have much more context, or use the context.Context variants. https://github.com/go-swagger/go-swagger/blob/master/examples/authentication/restapi/operations/auth_sample_api.go#L39-L41. use this: https://github.com/go-swagger/go-swagger/blob/master/vendor/github.com/go-openapi/runtime/security/authenticator.go#L189. Those are exported properties on the API, so you can just set them in the configure_xxx.go file. oic, we have to add the ctx versions there, you have no way of actually configuring them at this moment. I think $GOPATH/pkg or %GOPATH%\\pkg has binaries compiled with go 1.10\nclear the folder and do a rebuild of your app\nyou can also try with just doing go test -a ./...\nthat would also rebuild and link your libs IIRC\nLet me know if that fixes it. I don't have an env to reproduce this in . This should be fixed in 1.17.x . we're building with go 1.11 for those releases\nif you upgraded go on your machine you have to delete $GOPATH/pkg or something because it has stale binaries. you need to make a middleware for that behavior. Swagger is only concerned with enforcing your contract that it knows to be common for everybody . @fredbi is right this is superseded by the other PR. go for it :). I'm all for it. We do use the GOPATH env var in a few places.\n. we can add the v prefx in the next release.\nI've looked into what would be required to move to go modules.  This is not a trivial change. \nI watched the talk,, the argumentation is reasonable except for go was supposed to be the language where I could write code and not have to update it all the time because of language changes. This is much worse than a language api change, it's a major refactoring of the entire package structure.\nThis is going to be a lot of work and the incentive is low because there are other solutions out there that are vastly easier to adopt, well-understood trade-offs and workarounds. So I imagine there are more people with similar reservations as I have.\nI'll detail all the work required in another issue.\nAre there larger projects/packages out there that have already migrated? \n. You can find more info in #1724. A lot of my concerns about the work involved were driven by assuming the migration to the v1 subdirectory was mandatory. Upon re-reading the go modules wiki page this turns out to be false. v0 and v1 get special treatment which gives a smoother migration path and doesn't create busy work.. valid concerns, the configureApi is not the only way you can use this.\nI look at it more as an example. However I will almost always just leave that file for what it is and make my own main where I wire things up.\nThis project is fairly representative on how I personally structure code when I work with go-swagger: https://github.com/go-openapi/kvstore\nthe entrypoint: https://github.com/go-openapi/kvstore/blob/master/cmd/kvstored/main.go. Go modules it's fairly new, we don't have support for those yet, it will\ncome\nOn Sun, Sep 2, 2018, 7:39 PM Alexander Staubo notifications@github.com\nwrote:\n\nHow so? Go code can exist in any location you want, especially when you\nuse Go modules.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/go-swagger/go-swagger/issues/1680#issuecomment-417985227,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAb1rZZaXXw1jE4tJuSHFihkAfvWMvWJks5uXJZYgaJpZM4WWVI3\n.\n. with --target and -m you should be able to do that provided you do it in a go path. no progress but we welcome PR's. we have to change the way we introspect code, but this is go 1.11 specific we can't do that for 1.10.\n\nAnyway haven't been able to get into how go does this internally yet.. it should be available in that context. Essentially go swagger is just a middleware like any other beit a fairly elaborate one. --with-context has no actual effect we should remove the option. http://yaml.org/type/bool.html. Yes I considered this use case. However this bug is really about ordering because the use case you describe is easily handled with the context version of the authenticators, or by making a union type as principal.\nI don't think you should have different principals representing an identity in your application so I didn't design around that use case. \nThe ordering needs to be fixed at the spec level so we would need to make a breaking change to the spec repository to make this work where we replace the usages of map[string]... to an ordered map variant like this one: https://gitlab.com/c0b/go-ordered-json\n. It's not about sorting it's about preserving the order in which the items are provided in the spec. The only way to do that is to not use a go map during marshaling or after. because it's functioning as a  pipeline. OP says:\n\nI have to authenticate with api key first and then use that to authenticate with oauth when the principal is nil but auth is valid\n\nThe principal case can be handled slightly different with a union type (struct with 2 properties) but it implies that ordering is significant.  \n. yes when the build finishes. Also see: \nhttps://github.com/go-swagger/go-swagger/pull/1694/checks?check_run_id=16907894\nhttps://probot.github.io/apps/dco/. https://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/restapi/operations/todo_list_api.go#L34\nEvery generated API allows you to provide that function, which will be called at shutdown. that is correct. Could you sign your commit? https://help.github.com/articles/about-commit-signature-verification/. It still says: The base branch requires all commits to be signed. Learn more about signing commits.\nYou want to see a verified box.\n. No but I have to wait for the build to finish. O sorry I can only now see that it wants you to sign your commit. They always have to be signed :). we use the goimports tool to format a file and resolve the imports.\nI suspect the underscores are confusing the tool. Can you sign this commit? https://help.github.com/articles/about-commit-signature-verification/. Can you sign your pull request? \nhttps://help.github.com/articles/about-commit-signature-verification/. From what I understand from your message, the problem is that optional values won't be present in the json. Where we use this the zero value is the same wether the value is present or not, because zero is the same as not provided, we mark them with omitempty by default because they don't need to be present on the wire for the application to do the right thing.\nWe have to be able to distinguish between unset and zero for required values. So we use pointers to give that distinction.\nSo if these trade-offs don't work well for you you can turn things into a pointer by editing the spec and adding x-nullable: true to the property in the spec.\nOr to remove the omitempty, you can use x-omitempty: false\n. You can use \ngo\n// swagger:route\n// responses:\n//    200: body:ListResponse\nyou will need to decorate the model struct with:\nswagger:model\nand run the spec generation with: swagger generate spec -m. You can use description: for that.\ngo\n// swagger:route\n// responses:\n//    200: body:ListResponse description:Goes here. When we detect a definition being present in the spec but it was never referred to in a reachable position from any of the endpoints or other definitions. swagger:ignore\nhttps://goswagger.io/use/spec/ignore.html\nhttps://goswagger.io/use/spec.html. can you address the golang ci comment and sign your commit?\nhttps://help.github.com/articles/about-commit-signature-verification/. go imports is used: https://github.com/go-swagger/go-swagger/blob/master/generator/shared.go#L160\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/shared.go#L779-L787\nWhat you are seeing is a regression of some sort. @Yaima would it be possible to share the spec that was generated and the code that generated that?\nI want to see if it's something go-swagger did.. That looks like the spec was generated correctly. It doesn't seem like that yaml is something we'd generate, was it edited?\nIt's best to leave an open line in your comment between the description and in\nGo has some arbitrary rules around how doc comments behave: https://goswagger.io/use/spec.html#parsing-rules. the current workaround is to build from master:\ngo get -u github.com/go-swagger/go-swagger/cmd/swagger. Not in go code but we support deep merging another swagger spec which has the examples defined.\nWe also support the swagger:operation annotation which allows you to just put the yaml you want to appear, including examples\nhttps://goswagger.io/use/spec/operation.html. This fails the build.\n. go ahead. can you share a project with the issues you encounter? \nThe behavior you see is not what others are seeing so I want to take a look at your poject. This might be the result of flattening or something . thanks!\n. Change looks good but can you sign and sign-off on the commit?\nsign off:\nhttps://github.com/go-swagger/go-swagger/pull/1717/checks?check_run_id=18650494\nsign:\nhttps://help.github.com/articles/about-commit-signature-verification/. as far as i can tell both versions allow all the args in our command.\n//go:generate go-bindata -mode 420 -modtime 1482416923 -pkg=generator -ignore=.*\\.sw? -ignore=.*\\.md ./templates/...\nhttps://github.com/jteeuwen/go-bindata/blob/master/go-bindata/main.go#L36-L57\nhttps://github.com/kevinburke/go-bindata/blob/master/go-bindata/main.go#L44-L59\nI'll install kevins fork and see if I can reproduce the error\n. @MStoykov  when I run with the fork from @kevinburke, I have no error but the file changes significantly. The changes it makes seem all for the better.. You can see the bindata changes in #1723. I just tried these changes locally.\nI installed the same go-bindata you're using and I ran the ./hack/regen-samples.sh script\nThe changes it makes seem all to be expected. if you want to capture both, just run it differently, we should just drop the output flag it's confusing.\nswagger validate <somefile.swagger.json>  &> output.txt. That is correct because of the debugLog and debugLogAsJSON methods, the format strings are of wrong type and/or missing a format param.\n. for converting our repos after v1 this tool might be  of help: https://github.com/marwan-at-work/mod. the last 2 things haven't been done yet, but I've been using it with go module projects just fine for code generation.. I don't know if this project will actually be migrating to modules, it's not meant to be used in that way.. it's used as a build tool so the expectation is that you use this as a binary tool.\nThe runtime components of go-swagger are in the go-openapi repos, and those do have go.mod files defined. if you feel that strongly about it, why not just submit a PR. yes the would need to get removed.\nMy main issue with go modules is that support for it is half-baked, and working outside the gopath has a number of issues that are not obvious, like tooling failing silently.\nOur own tool doesn't actually work with go modules outside of the gopath because go imports doesnt' work with well outside of it and our scanning for doc comments uses go/build as well so it is not aware of go modules either.\n. let's not call not supporting experimental features  a major issue.\nI use a script like this for tools that don't support running in the gopath.\n```sh\n!/usr/bin/env bash\nset -eu\ndir=$(git rev-parse --show-toplevel)\ncd \"$dir\"\necho \"Syncing vendor...\"\ngo mod vendor\ntrap \"rm -rf vendor\" EXIT\ndocker run \\\n  --rm \\\n  -i \\\n  -v \"$dir\":/go/src/github.com/casualjim/someapp \\\n  -w /go/src/github.com/casualjim/someapp \\\n  casualjim/someapp-gqlbuilder \"$@\"\n```. feel free to add it. This is not a company sponsored project, so if you feel strongly about something send a PR. In the 4 years this project has existed, I've rejected 5 PR's.\nGood luck.. There are 2 ways.\nYou can either set it when your app starts and it loads the swagger spec it will serve, if it does such a thing.\nOr you can make a swagger spec that you use as input and not put the version in your swagger:meta section.  When you generate with: swagger generate spec --input the-file-with-the-version.yaml\nit will use that file as a starting point, essentially doing a deep merge of the 2. the problem is that swagger allows for markdown but go doc formatter has its own rules around this stuff, and they don't always agree.\nI think you can achieve what you want by adding more spaces in front of the list items so that go thinks it's a pre-formatted block in the comments. For that it will need to be preceded with a blank line and followed by a blank line. \nWhen going the route of doc comments and you want precise control over how things look, it's a good idea to get very familiar with the intricacies of godoc. https://goswagger.io/use/spec.html#parsing-rules\nAnother option would be to use the swagger:operation annotation instead of the swagger:route one. \nThat one allows you to put yaml which might be a better bet to get markdown formatting to work\n. We've chosen to keep everything required to get swagger support in the build phase and not the runtime phase.  This allowed us to come up with a solution that would work with many of the hundreds of go web frameworks to get support for swagger as opposed to blessing a few.\nThat being said, go-restful supports the mode of operation you're after.\nhttps://github.com/emicklei/go-restful\nhttps://github.com/emicklei/go-restful-openapi\nIt uses the same libraries we built in https://github.com/go-openapi. option 1, I suspect you're on go 1.11 that will be fixed on the next release. option 2: you're missing $GOPATH/bin on your path which is why it can't find the executable\nsomething along these lines should fix that:\nsh\necho 'export PATH=\"${GOPATH-\"~/go\"}/bin:$PATH\"' >> ~/.bashrc && exec $SHELL\n. I would need to see the spec and so on. For structs we generate pointers, so in the concrete scenario you described here, it would just marshal. We don't validate responses afaik.. yes it should be provided because that's how discriminators work. I don't know if that changed in 3.0\nBut polymorphic types all need to have their discriminator field filled out. The reason for this is that they need to be able to be located through reflection. This will be required in java, go, C#, ... \nOne might be able to make a case that we should provide an implementation of the base interface too and use that as value when there is no discriminator present, although it's more likely to be a bug.. feel free to send a PR. This fix should be fairly trivial to make \nIt should be made somewhere here: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/schema.gotmpl#L91. But that subverts the swagger spec all together right. you're documenting properties in your contract that won't exist.. openapi 3.0 supports write-only fields which is I think what you're after. Unfortunately we don't support 3.0 atm. one is sign-off the other is sign with pgp key.\nYou're missing the sign with pgp key. Just the last commit will be fine.. https://help.github.com/articles/about-commit-signature-verification/. git hooks don't get installed automatically you have to enable them manually first and then it should start to work.. This PR is not the right place to have this discussion. You want to run with: swagger generate server -f\nThe spec will scan go packages. that means you have more than 1000 files?\n. And here's where we decide how to render models.\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/model.go#L73-L91\nyou might be able to change that a bit so that it looks at a particular extension or uses some other means to subdivide the large collection of definitions.\nHere's where we render the definition templates:\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/shared.go#L859-L871. sure but we already have a solution that predates go releaser and works. \nI looked into their toolset and the nfpm tool they have I want to look into closer because it might be able to get rid of the ruby dependency in our build, which is always welcome. run it with --socket-path /var/run/app.sock --scheme http --scheme unix\nI suspect the swagger spec doesn't have the unix  as a listed scheme. See here: https://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/swagger.yml#L16-L20\nthe --scheme flag allows to override the defaults in the swagger spec. There should be a KeyAuth method which is shorthand\nhttps://github.com/go-swagger/go-swagger/blob/master/examples/authentication/restapi/operations/auth_sample_api.go#L89-L91. you can rewrite errors in the ServeError callback it's available in the configure_xxx.go file\nBy default we use this implementation: https://github.com/go-openapi/errors/blob/master/api.go#L121\nyou can augment it by wrapping the function and adding your own rewrites. it seems you just want to return errors for non authenticated users, but weren't happy with the error message.\nin that case you shouldn't allow for optional authentication but you can let our framework handle the rejection and customize the error message. O sure the use cases for it are plentiful. I was just responding to the examples in this thread and offering some more options.. if their code is in active use in a code path reachable from the main package they should be found.\notherwise you might be able to force it with a dot import \ngo\nimport (\n  . \"new/structs/package\"\n)\n. you might be better served by swagger:operation than swagger:route\nit removes the need for creating the parameter structs because you can write the full yaml there\nhttps://goswagger.io/use/spec/operation.html. ~Can you try to single quote?~\n. This is a bug, thanks for reporting it. I've added this as a test and it fails to populate the responses. it is your description.\nif you quote the numbers in there it will start to work.\nThis works for me: \ngo\n// swagger:operation GET /v1/events Events getEvents\n//\n// Events\n//\n// Mitigation Events\n//\n// ---\n// produces:\n// - application/json\n// parameters:\n// - name: running\n//   in: query\n//   description: (boolean) Filters\n//   required: false\n//   type: boolean\n//\n// responses:\n//  '200':\n//    description: '200'\n//    schema:\n//      \"$ref\": \"#/definitions/ListResponse\"\n//  '400':\n//    description: '400'\n//    schema:\n//      \"$ref\": \"#/definitions/ErrorResponse\"\nmountItem(\"GET\", basePath+\"/events\", nil). @fredbi fyi the '---' are required in this particular annotation so we know where the yaml begins and the doc comments end.. I think: swagger is aliased to `docker run --rm -it -e GOPATH=XXX_myhome/go:/go -v XXX_myhome:XXX_myhome -w XXX_myhome/src/src/XXX_myproject quay.io/goswagger/swagger'\nyour -w is off it should be -w XXX_myhome/go/src/XXX_myproject. This makes generation go a lot slower for some reason. The swagger spec probably has https as scheme included.\nWhen you run the server you want to specify the schemes, just like what we did for the unix socket in #1740 \nIn this cases you can do\ngo\nserver := restapi.NewServer(api)\nserver.EnabledListeners = []string{\"unix\", \"http\"}\ndefer server.Shutdown(). take a look here: https://github.com/go-swagger/go-swagger/blob/master/examples/tutorials/todo-list/server-complete/restapi/configure_todo_list.go\nit does that for todo's\nYou can also use go's sync.Map instead, it will be more performant in high contention scenarios. It's the same middleware but you need to wrap the response body writer with one that caches it so that you have an opportunity to dump it and still return it from your middleware.  You want the logging middleware to be as early as possible in your pipeline but after a compression middleware if you have one of those\nSo be aware that response logging for large responses will require a lot of memory.\nAlso http.ResponseWriter is not the only interface in play, so a package like this one will help with retaining the implemented interfaces: https://github.com/felixge/httpsnoop. If you use the snoop package for the custom response writer struct I'd agree.\nWith this implementation you'd lose http/2, websocket support and streaming support (no flusher, no hijack etc). \n. it would fail yes, but since the spec is upgraded you're effectively working with a new version of the server api, in that case the client does need to regenerate.  But at least you have defined behavior instead of undefined behavior.. One solution can also be to implement a default implementation of the polymorphic base type and return an instance of that. At least you'd get basic functionality. \nthe files to change are these:\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/templates/schema.gotmpl\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/templates/schemabody.gotmpl\n. I'll update our build script so the debs end up with the expected format. I think i've done that now. i've just updated the deb file. you can use the mixin command to manipulate that field in an automated way.\nThe command allows you to merge specs together\nhttps://goswagger.io/usage/mixin.html. that is correct. You can't with our default commands but you can easily make your own program that does that.\nThere is an object model available so you can update it and create a new spec. \nThis is how the mixin command loads the spec.\nhttps://github.com/go-swagger/go-swagger/blob/master/cmd/swagger/commands/mixin.go#L82-L103. you can specify a custom roundtripper and assign it to the runtimes Transport property\nhttps://github.com/go-openapi/runtime/blob/master/client/runtime.go#L183\nThat will give you access to request after processing by go-swagger and response before anything gets handled\n. if you wrap the existing transport that's how you get the response. You can fix it immediately on your end by replacing the json producer with one that looks like this:\nhttps://github.com/go-openapi/runtime/blob/master/json.go#L31-L38\nIt will be included in the next release, but that gets you going now.. duplicate of: #1188. this is fixed now on master. we use goimports, I updated that dependency again. \nI can't reproduce the issue with the spec in this issue. If this isn't fixed I can reopen\nI've tried on a mac and in a golang:alpine container. your spec is wrong, the validations should go 1 level up. it's the same as the get except you use \nswagger:operation POST /pets postPet. yes it's the same.  There can only be 1 body parameter so you prefer a schema\nYou can learn about swagger itself here: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md. whitespace is significant in yaml. more info is required. like your spec. nothing like that exists but you could add it and send a pull request. For this use case we normally add a s spec under fixtures/bugs/[issue-number] and then we make a test that verifies it generates the expected code.. You can change the Middleware property on the api context.\nhttps://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/restapi/operations/todo_list_api.go#L75\nThis property is used here:\nhttps://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/restapi/operations/todo_list_api.go#L326\nBy default we run this middleware stack: \nhttps://github.com/go-openapi/runtime/blob/master/middleware/context.go#L555-L573\nBut all the methods are exported so you can recompose it however you need. can you do this sign off on the commit? git commit --amend --signoff. Can you add a test that demonstrates it behaves as expected?. I'd like to change it, but I don't know when I'll have the time. My life has changed significantly from when I started this project. \nThe main issue is that with go 1.11 the packages we're using have been superseded by a new set of packages to deal with the modules..\nI can point you towards where we gather all the packages we want to inspect, if you're interested in fixing it.. the syntax in the doc comments is wrong.\nhttps://goswagger.io/use/spec/route.html. You link parameters through parameter structs, not by defining them in the location where you did.\nIf you want to define things like this, there is swagger:operation which allows you to put the yaml for the operation instead. you can use swagger:operation for that\nhttps://goswagger.io/use/spec/operation.html. Can you run: go generate ./generator . that way bindata.go will get updated \nWe use this bindata: https://github.com/kevinburke/go-bindata\nCan you also sign off on your commit? https://github.com/go-swagger/go-swagger/pull/1788/checks?check_run_id=30358019. Can you please run: go generate ./generator? \nThat way generator/bindata.go will get updated, and your changes will actually get picked up.\nWe use this bindata: https://github.com/kevinburke/go-bindata. I think it means that the assertion is for propNodes, err := Unmarshal... but the code has nodes, err := Unmarshal.... I think irrespective of the naming discussion, the test isn't passing, so the test needs an updated assertion. You can run the tests with go test ./generator/.... can you sign off on this PR: https://github.com/go-swagger/go-swagger/pull/1791/checks?check_run_id=30594748. can you sign off on the commit? https://github.com/go-swagger/go-swagger/pull/1792/checks?check_run_id=30601953. I've uploaded a new deb package and verified I can install it. I don't know swaggo, it came years later.\nI can only speak for the adoption of go-swagger. This project is used by every major cloudprovider is some shape or form. It's used in docker and it's used in kubernetes.   There are a few other projects like go-restful and so on that build on the libraries from this project to provide their swagger integration.\nI see swagger adoption as a staged process, you start with just wanting the documentation, then the client generation becomes interesting. After a while teams realize that the contract is what is needed for their service, so they start with design first (generating the server). This project supports those phases.\n. you can define those security definitions with this tool, which I think you already worked out. But I don't know how to do what you require in the swagger-ui project.. there is a test already. I merged your companion PR, so you should be able to make this one pass. @rrjanbiah ok...\nWhenever you build an API service you put forward an interface for other people to program against. You want this interface to be stable because otherwise downstream apis need to constantly adapt to your implementation details. Let's call this your ServiceContract.\nThis service is more often than not pulling data from a variety of sources, this can be other API's or backend services or databases. Those we want to keep as implementation details, lets call these implementation details.\nWe are not a web framework, the generated code provides you with a stable andconsistent way of representing the service contract and gives you a  parsed, validated statically typed representation of that to work with fast.  \nWhile it may seem tempting to put these things into the database directly that creates a poor design because it blurs the lines between stable contract and implementation details.\nWe don't do the kitchen sink because many people want different kitchens as is evident by the 100 or so web frameworks that exist for go.  We just want API's to have stable contracts so that people can build on them.. Yes you're right. it's good . Can you update and regenerate with the code from master?. You can implement a logger that supports this interface:\nhttps://github.com/go-openapi/runtime/blob/master/logger/logger.go#L5:6\nthen set it on the runtime, and turn debug logging on.\nhttps://github.com/go-openapi/runtime/blob/master/client/runtime.go#L425-L437\nThat logger can write to a file or to multiple writers with io.MultiWriter. if you need it to be more low-level, you can use a custom RoundTripper. \nThe http.RoundTripper sees the requests after we're done processing them, right before sending and it sees the responses before anything else has touched them.. That's not our bug :). Go modules are experimental in go, the go toolchain doesn't fully support them yet, and we're beholden to that toolchain. It's tracked here: https://github.com/golang/go/issues/24661\nThe assumption is that goimports (which we use for formatting and optimizing imports in codegen), resolves imports, and now go get goes out and pings repos for updates and so on every single time.\n. unfortunately batching it would not reduce the amount of calls because it would still need to visit every file. . would it be possible to add a test for this behavior?. you can make your own main file and generate with --exclude main after the first generation.\nThen you can inject the logic that recognizes the --version flag around there:\nhttps://github.com/go-swagger/go-swagger/blob/master/examples/composed-auth/cmd/multi-auth-example-server/main.go#L51. body requires a schema\nyaml\n- in: body\n   name: settings\n   schema:\n      type: string\nbut if you're trying to do a form post, you should use in: formData instead. we can implement patch by providing a pre-hydrated struct but we currently haven't implemented that.\nHowever swagger 2.0 has no provisions for json-patch at all so the answer to that question is no . The schema says the return value will be of type string, but in reality it's an object.\nIf you don't define the schema you should still change the type to be object instead of string.\nyaml\nresponses:\n  200:\n    description: \"SUCCESS\"\n    schema:\n      type: \"string\"\nneeds to become\nyaml\nresponses:\n  200:\n    description: \"SUCCESS\"\n    schema:\n      type: object\npreferably that object actually has the properties that describe the object you're returning\nYou can see the output of responses by running with the env var DEBUG=1. The answer to this question is to use allOf without specifying a discriminator. allOf without a discriminator does composition not inheritance. this is a spec we copied from openapi years ago, when validation wasn't as defined as it is now. we can potentially update it. you can replace the go driver in use in https://github.com/go-openapi/strfmt\nit would be better if that is using the official mongodb driver instead of a community one. it looks like those were renamed to find. a trailing slash is not a meaningful character, we have to normalize to either with or without.\nThey are largely treated equivalent by clients and servers and we have to normalize paths for url matching\nhttps://tools.ietf.org/html/rfc3986#section-6.2.4\nhttps://play.golang.org/p/pTK8KviJHLD. this seems to be the wrong repository. We don't have revel route file integration. you can make a json schema for your swagger schema where you add this extra validation rules and you can validate your swagger schema against that json schema.\nFor example we use this schema to check validity against the swagger spec: https://github.com/go-openapi/spec/blob/master/schemas/v2/schema.json\nIf you want to extend that for your own application you can do that maybe through those means.\nHere are our default validation rules, https://github.com/go-openapi/validate/blob/master/schema.go\nYou could make that configurable somehow or build on top of this or something\n. you can't do string binary in formdata, it's not allowed\nThe correct thing is:  type: file. It is not allowed. Only simple types except for things where we use definitions.\nA browser can only upload stuff through a file field.\nhttps://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#parameterIn\n\nRequired. The type of the parameter. Since the parameter is not located at the request body, it is limited to simple types (that is, not an object). The value MUST be one of \"string\", \"number\", \"integer\", \"boolean\", \"array\" or \"file\". If type is \"file\", the consumes MUST be either \"multipart/form-data\", \" application/x-www-form-urlencoded\" or both and the parameter MUST be in \"formData\".. that's totally allowed. You can try using time.Time as type or strfmt.Time. can you show me the desired outcome and the relevant you code you have now?. Adding a struct like this is likely to work. The params capture headers, query params as well as body params, so it needs 1 extra wrapper\n\ngo\n// swagger:params OpenHybrid patchOpenHybrid\ntype endTimeParam struct {\n   // Incident end time. **Required**\n   //\n   // in: body\n   // required: true\n   EndTime *endTime `json:\"end_time\"`\n}. A fuller example is\ngo\n// swagger:params OpenHybrid patchOpenHybrid\ntype endTimeParam struct {\n   // Incident end time. **Required**\n   //\n   // in: body\n   // required: true\n   EndTime *struct {\n      EndTime             string    `json:\"end_time,omitempty\" bson:\"end_time\"`\n   } `json:\"body\"`\n}. easyjson is not easy: https://github.com/go-swagger/go-swagger/pull/557/files\nBut if you want faster json you should look at https://github.com/json-iterator/go\nit's faster than easyjson and works without changes. just make a consumer and producer with the jsoniter marshal/unmarshal\nhttps://github.com/go-openapi/runtime/blob/master/json.go. can you run go generate ./generator so your changes get picked up in the binary?. yeah so people can use us with go modules. > Some days ago, I was reflecting on a similar problem about optionally mapping binary format as []byte rather than the default io.ReadCloser. I feel this is a related theme.\nWe can never do that because you lose the ability to support a very important use case.\nYou can easily go from slice to stream but you can't do that the other way around and guarantee the code will still function\n@sidh you can use format: byte for a string, that's the closest you can get to what you want to do\nOr make a type with a custom marshaler. it's saying that size property is invalid which is right.\nWhat is it you're trying to achieve?\nThe swagger:operation is plain yaml \nSo if your intent is to make an array of objects with the property size you want to make your items look like:\n```yaml\ntype: array\nitems:\n   type: object\n   properties:\n      size:\n        type: number\n        description: the size\n````\nif you just want an array of numbers:\n```yaml\ntype: array\nitems:\n   type: number\n````\nThe entire syntax is described here\nhttps://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md. when the go toolchain is fixed, our project will be fixed.  This is a problem in the go toolchain itself.\ngo 1.11 calls module experimental because they didn't have it fully integrated into everything.\nThe goimports tool, which we depend upon and what is failing for you, doesn't work outside of the gopath. It might be that it got fixed since our last release then it will get picked up with our next release.\nOne possible way you can get modules to work oustide of the gopath (arbitrary module location), is by cheating\nmake a file called run-in-gopath\n```sh\n!/bin/bash\nset -eu\ndir=$(git rev-parse --show-toplevel)\ncd \"$dir\"\necho \"Syncing vendor...\"\ngo mod vendor\ntrap \"rm -rf vendor\" EXIT\ndocker run \\\n  --rm \\\n  -i \\\n  --user $(id -u) \\\n  -v \"$dir\":/go/src/github.com/org/project \\\n  -w /go/src/github.com/org/project \\\n  quay.io/goswagger/swagger \"$@\"\n```\nthen you can run your generation with: ./run-in-gopath swagger generate server. the docs you've linked to are for openapi 3.0\nIn 2.0 there was no support for multiple file upload\nhttps://swagger.io/docs/specification/2-0/file-upload/. ```go\ntype (\n    // FooInput for input\n    // swagger:parameters FooInput\n    FooInput struct {\n           // in: body\n           Body struct {\n    App string\n    UID string\n        }\n}\n\n// FooOutput for output\n// swagger:model FooOutput\nFooOutput struct {\n    Addr string\n}\n\n)\n. for the default to take hold you have to either make the field required, or set x-isnullable: false on the field. actually the status codes are not an exhaustive list, the numbers that are not well-known just don't have a default message. I got sidetracked with work, but this is definitely a piece of missing functionality because we should be able to deal with this.. goimports runs after every created file, and the generation happens by iterating over the models who are stored in a map. Golang randomizes map keys so it's a kind of luck of the draw. One possible fix could be to introduce generation sessions where generation and imports optimization happen in different phases. consumer: Unmarshal\nproducer: Marshal.\napi.ApplicationCborConsumer = runtime.ConsumerFunc(func(r io.Reader, target interface{}) error {\n    unmarshalled := doCborUnmarshalling(r)\n    // do some error checking\n        reflect.Indirect(reflect.ValueOf(target)).Set(unmarshalled)\n})\n```. Do you have an example of what the end result looks like? Maybe in the examples folder?. Either the todo list api or the issue tracker example would be great. so essentially the change is it returns the more precise responder types instead of the interface?\nAnd the builder changes because of that, including the not implemented error?. for tests we typically take a spec, generate code and verify that the files have the expected content through regex matchers etc.. I suppose this is not ready for merge yet is that correct?. Unfortunately we need tests to accept this contribution, so that it doesn't inadvertently breaks. The last year we spent increasing our test coverage and stability. . your go version has updated, to work around this you can build go-swagger from source.\n``\ngo get -u github.com/go-swagger/go-swagger/cmd/swagger\n````. I think it really wants to not have that space between /\\* and {{ \nit's probably golint or go vet that would be unhappy about the space\n. please undo this. lowercased param names!\n. I think if you make this be:not (or .IsInterface .IsPrimitive .IsCustomFormatter)then you don't need to edit the operation.go file\n. super tiny nitpick: I thinkdefaultConsumeshere wants to be called anything that doesn't have consumes in the name\n. should this be a call to a helper function in httpkit that parses the header into a media type format?\nI think at the very least it wants to be a prefix check.\n. where did those tests go? I can't seem to find tests that continue to test for this? Are they no longer required?\n. oic so operation.ID is completely ignored now? \nCan we add it back so that people can provide pretty names if they really want to do so?  (I want to use that for the CLI etc)\n. I think you want to check if the string is not empty before doing this. I think it panics when the url path is empty\n. can you make this a random port so that there aren't any collisions?\nAlso print out the full url to petstore.swagger.io?url=specurl \nThat allows for people to cmd+click or ctrl click the url to go there even if the browser didn't open it. Might also be good to make the auto browser opening a flag as well as a flag for the base url for swagger ui\n. what happens when there is a nil passed into this?\n. can 'nil' be added to this test?\n. this should be sw.BasePath no?\n. no worries that's what PR's are for :)\n. :100: \n. instead of panicing can you return an error? or is the stack trace really relevant?\n. this doc seems like it's a copy/paste left over\n. can we change this to TLS12 in meantime 1.1 is no good anymore either\n. swap?\n. k my vote goes to anything that's not panic\n. see: go-openapi/errors#4\nand: go-openapi/errors#5\n. yes codes different from http status codes for errors make a lot of sense.\nNot everything is string based, like translated error messages in a ui.\n. I removed the tests from vendor\n. this should use net.JoinHostPort instead of strfmt.Sprintf \n. Could you put this in the go-openapi/swag package and make sure it also works for the commoninitialisms in the golint expected fashion?\nhttps://github.com/go-openapi/swag/blob/master/util.go\n. I see, this is great though what you're doing here.\nYou know one possible improvement could be to just use the value of the enum constant. Swagger allows for enums to be of any type, they can even be complex objects. Although in reality I think they are typically strings, int, uint\n. yep I like that, you can also set the format according to the size of the integer \n. wouldn't you be able to set the prop name just to {{ pascalize .Name }} and not have a runtime component to this?. It's safer to use:[]byte({{ printf \"%q\" (json .Default) }})`\nOtherwise if you have a string property in the json that contains a backtick it won't compile. we may want to make this a safer cast.\ngo\nif ve, ok := err.(*errors.Validation); ok {\n  ve.ValidateName(...\n}\nI think it will otherwise panic if it turns out to be something other than a *errors.Validation. can you make these changes in: https://github.com/go-openapi/errors/blob/master/headers.go\nThey my get lost otherwise because this is in a vendored package, which get overwritten when I update the vendored deps. if you install this tool: https://github.com/FiloSottile/gvt\nyou can run gvt update github.com/go-openapi/errors\nand push that change\n. also needs a SetXxx without a return type so that it can be used as interface. Also needs a constructor with the context if you need a constructor like this. . o right, didn't see it. That struct should actually have a Validate method, it has 2 required fields, so there is a reason it's not rendering that validate method. yeah that's what it looks like because the same issue exists on the server side. I think there is an issue here: https://github.com/go-swagger/go-swagger/blob/master/generator/operation.go#L903. this should be: httpServer.ReadTimeout and httpServer.WriteTimeout\n. can you make this use log.Printf or fmt.Sprintf(os.Stderr, ...)\nthe other things that get printed are also using log.\n. This is still required. it's for reusing pre-existing models. https://github.com/go-swagger/go-swagger/commit/a3769346e67303c88f698713045981e709a45f42. I think that just body would be enough, it won't hurt because when IsArray returns true IsNullable will always be false\nso\n{{ if and (not .Schema.IsBaseType) .IsNullable }}&{{ end }}\nis not needed. you can do this:\n{{- if .Copyright }}{{ comment .Copyright }}{ end -}}. this is not used so it should be removed.. this is not used so it should be removed. b is already a byte slice no need to fmt.Sprintf\nThis can just be return swag.WriteJSON\n. this is not used, should use swag.ReadJSON\nAs a general rule, because I think you are trying to print to the log stream, fmt.Print  should not be used. . this needs to use swag.ReadJSON so it's symmetrical with the MarshalText. this fmt.Errorf needs to be removed. also: bsonobjectid, base64 and duration\nnone of those are actually strings so the validations don't apply to them. instead of %s, err.Error() you can use %v, err. we should probably use os.RemoveAll(filepath.Join(filepath.FromSlash(dr), \"restapi\")) here. Why are errors not fatal? . why are errors not fatal, this seems like a fairly critical piece of info. I think you mean log.Printf here. this changes makes it so there is no more stacktrace, i don't think that is what we want. you probably mean log.Fatalf here\nping me in slack so we can walk through getting an env where the editor you use tells you about these stylistic errors. I think that may need to be .Schema.Child. should this be put in a sync.Once block?. shouldn't this be an atomic int instead?. if you have the atomic int it's fine, we'll see the changed state immediately.\nmutating state and go routines just always make me a bit cautious. Now the worst case scenario here is not a big issue.. please retain the vendor folder here, it's not clear to new comers that they are the same. please retain the list of packages, depending on which vendorint tool you use you need the exhaustive list. this variable name is very misleading because this is about picking a set of templates for either client or server gen.\nI don't know why EnsureDefaultOpts should be the switch when it's already doing the default opts.\n. I'd like to either see this method renamed or the package level generate method renamed. I had to do quite a bit of digging to work out that the config file is still being read. please rename to something like IsClient or equivalent that expresses meaning. required: true is implied by in: path   it doesn't have to be provided per spec. These are specs taken from actual services. What was fixed? . what does the -fixed mean? What was fixed?. this is a misspelling of short circuit, not shortcut. doesn't a for loop imply if len > 0 ?. bytes has the same set of methods, so you don't strictly need to convert to string to do this.\nHow does this deal with property names? . why does aliasing not work?. thanks. it seems odd that this has to be done at render time. Why isn't this just set on the parameter groups etc?. same remark as the paramters. this is again not something that needs to be done in the templates but rather it's context so should go on the GenXxx models. I'm not a fan of making it explicit like this because it risks the chance of breaking a default and sprinkles this handling all over the code. Whereas handling an empty value as default in the things that deal with strfmt seems wiser. why is there a need to change this?  . not a fan of this providing a value. why does this need to change, it was working afaik. not a fan of this because it now sprinkles this across the codebase and people have to remember to do this. Better to postpone this until the last responsible moment. not a fan of this because it now sprinkles this across the codebase and people have to remember to do this. Better to postpone this until the last responsible moment. \"\" and \"csv\" should be functionally equivalent. The runtime, strfmt and swag functions that deal with this should equate \"\" and \"csv\".  . no Splt and JoinByFormat already deal with the empty string case as csv. where did these go?  . the io.Writer is the same but for the client, so it should also remain. \nformat: binary on the server is an  io.ReadCloser but on the client it's an io.Writer. requirements aren't a map, the order is stable there. The only time a map structure is used is when describing a requirement is as a set for deduping but the items should be appended in a consistent order.. why is this lazily initialized and not wihen everything else in intialized?\ninitializing it early removes the need for the mutex. these 4 would be better if they used an atomic.\nThis entire method can be run in a sync.Once actually. it's just a wrapper around the entire block of code, you have to lift the variables you want to capture out of there by declaring those outside of the closure. this should probably move to a function instead a template? Or even be generated an part of the GenXxx struct that describes this data. please remove commented out item. please remove commented line. please remove commented line. please remove commented line. please remove commented line. please remove commented line. The changes in analysis were merged, you can remove this. There is a very distinct advantage to having that in runtime instead of as generated code.  So I don't think we should ever code generate the router.\nIf embedding the spec is an issue then it's probably a better solution to use a middleware that loads the files from some other medium (like disk, cdn, ...) and serves that as a static middleware and not embed the specs with --exclude-spec. feel free to just update the vendor. it doesn't interfere with the review. how does this work with subpackages?  This is new functionality right? . where did it go?. this needs to use the log from the server not from the package. this needs to use the log from the server not from the package. can you add \ntls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,\ntls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,\nto these ciphersuites since we're no longer supporting 1.7. these are fatal errors for the server, and I'd prefer no change to the public interface. in that case either way works, returning errors instead of exiting probably helps  people using this in tests.. I think the nicer example here would be to add a response that is for code 302 to the swagger spec and returning that instead.\nThat keeps it all typed. That response needs to define a location header. Can you rename this method to: verifyJSONData. can you rename this method to verifyYAMLData ?. this can be simplified to return includeTags <= 0. This was code that was added by @moskal91 in his previous PR and now removed.\nThere is no risk afaik with this. this is no longer required, we can squash at merge time. I think it's better to make a combination here or ensure that the identifier is unique, has some randomness to it.\nOtherwise we'll end up in the same situation as before because the magical string has changed from result to _result. yes sure, I just meant not s/result/_result/ something that has a much higher likelihood of being unique. How come this alignment is off ?. how come this file is included?\nwouldn't it be overwritten every test. I was just curious. ",
    "diemonster": "Where would you place this issue on your roadmap? I'm debating waiting for this feature, or going the route of Apache Thrift... which is not nearly as desirable since my API is already using Swagger. \nThanks, and great work thus far!\n. If you need a guinea pig/tester for an experimental branch, I hereby volunteering myself :sunglasses: \n. ",
    "nmonterroso": "This is a really great idea, and I'd be willing to help out in any way I can. Any thoughts on possibly making this a part of swagger-codegen?\n. Thanks for the info! When the time comes, I might be willing to help port to swagger-codegen, since that was my first stop when trying to figure out \"is there a swagger client generator for go?\", I imagine others will check there as well.\n. ",
    "c4milo": "nice!, I'm really looking forward to having this generator. \n. ",
    "fredbi": "@casualjim need advice on this one: since scopes are keys, they are modelled as go maps.\nTherefore, we can't provide this check in the validate module.. @casualjim I believe this one has been closed long ago, isn't it? (just regular housekeeping on older issues). @casualjim just to keep trace of our discussion on slack, we discussed the possibility to build on top of this : https://github.com/meqaio/swagger_meqa\nI do not compete for the PI (\ud83e\udd47 ) if the offer still stands... but I'll have a thorough look at it in the forthcoming weeks, since API excercising is an essential piece in my own works.\nJust to start with, I would suggest the following requirements:\n- make it a standalone project, with as small footprint as possible on the go-swagger itself (including dependencies and vendoring)\n- as such, it could be just a set of custom templates on top of swagger + the meqa stuff\n- should be able to exercise end-to-end as well as unit test different layers of the API server\n- should be pluggable in our CI to exercise all provided examples\n- not be on the critical path to go-swagger V1.0 release\n[I'll edit this post when more ideas come]\nLooking forward to your insight.\nFred. I'll have a look at it.\nIt would be indeed quite useful for me, but might prove quite hard to implement, since most of the work is delegated to other dependant packages. \nTo the very least, it would be a test/integration nightmare to convey line number from bottom - up to the \"swagger validate\".\n@casualjim Here is the idea I was pondering. Please advise.\n- let's suppose we may build on top of these tools to associate a file and line number to a path\n- we let most of our tooling unaltered, but extend the validation errors reporting structure with the path of the key\n- the go-openapi/validate package would publish an error reporting function with path/file/line number context info, given the raw spec definition (remain to be seen: variations between json or yaml raw format)\n- the top most caller (e.g. swagger validate command) would:\n  - request validation to go-openapi/validate as usual\n  - call the additional go-openapi/validate function to report file/line context\nThis way, we could scaffold the feature first in the validate package, then later on in go-swagger\n. TL;DR: how about base type implementing MarshalJSON(), MarshalBinary() interfaces?\nI've been experimenting lately with polymorphic types, and tried to fix some things.\nI've nothing against the current representation with an interface, but I noticed two itching things:\n1. This interface does not extend encoding interfaces.\n2. Validation of the base type fields by sub types iterates through the private representation of the base type, thus duplicating code and breaking the principle of the interface.\n\n(1) is annoying when you want to compose things from a base type (say a tuple of base types, >or whatever...). Currently, codegen breaks when you start making things more complex than putting the base type as a property (and support for arrays is hacky).\n(2) is annoying because it works well for the specific case of base type as a regular property, but cause many breaks when composed in more complex cases.\n\nRegarding (1), I see the Unmarshal{base type} as useful helpers to slurp a http body, but generalizing its use within model classes is tedious (I've tried...).\nBTW I added on my branch the Unmarshal{Base type}Map() sort, which was missing.. Duplication has more to do with breaking the independance of stuff when you change models and regenerate only some of them. But I admit this is a minor point.\nLet us rather discuss the encoding interface point:\nI refer to the base type in a complex structure, other than the allOf construct (this one explicitly telling I am defining a subtype).\nHere are a couple examples where I am trying to reuse the base type while not defining a subtype.\nIm my opinion, these examples illustrate that extending the base type interface with encoding \nwould ease down things:\nyaml\ndefinition:\n  myBaseType:\n    type: object\n    description: |\n      This is the base type with an interface to get/set things,\n      including the added map\n    discriminator: myObjectType\n    required: myObjectType\n    properties:\n      myObjectType:\n        description: |\n          This is the discriminator.\n          Conventionnaly, it accepts no other validation than required.\n        type: string\n      myOtherProperty:\n        description: I expect this to be validated\n        type: integer\n        minimum: 0\n    # here I am expecting all subtypes to define a private map[string]interface{}\n    additionalProperties: true\n  mySubType:\n    type: object\n    description: |\n      This concrete subtype inherits from myBaseType.\n      Composing with allOf in this context means \"extends\".\n      The subtype knows how to unmarshal and to validate.\n    allOf:\n    - $ref: '#/definitions/myBaseType'\n    - properties:\n        mySubProperty:\n          type: string\n          format: date\n  myExtendedTupleType:\n    description: |\n       This is _not_ a subtype, I am expecting P2 and items to work\n       as a usual properties, even though they are interfaces. \n       This causes some problems since we attempt to generate pointers on \n       interfaces here.\n       Further, how does the tuple unmarshaller know about how to unmarshall\n       the instances of base type, since the interface hides the unmarshallers\n       of the underlying types implementing BaseType?\n    type: array\n    items:\n    - type: integer\n      minimum: 100\n    - $ref: '#/definitions/mySubType'        # this works, since mySubType is a concrete type\n    - $ref: '#/definitions/myBaseType'       # this breaks\n    additionalItems:\n      $ref: '#/definitions/myBaseType'\n  myBaseTypeMapAlias:\n    description: |\n      This construct reuses the interface to an higher level abstraction as\n      map[string]MyBaseType.\n      Problem is that currently, one need one the factories provided a the package\n      level to unmarshal this type.\n    type: object\n    additionalProperties:\n      $ref: '#/definitions/myBaseType'\n  myBaseTypeSliceAlias:\n    description: |\n      This construct reuses the interface to an higher level abstraction: []MyBaseType.\n      Problem is that currently, one need one the factories provided a the package\n      level to unmarshal this type.\n    type: array\n    items:\n      $ref: '#/definitions/myBaseType'\n  myComposedObject:\n    type: object\n    description: |\n      This one composes things up from aliases of the base type.\n      I don't see how this one could current be unmarshalled without polluting\n      its definition with custom unmarshaller using the UnamarhalMyBaseTYpeXXX() \n      factories. Actually, this would be simple if the interface were telling us the base\n      type knows how to unmarshal its instance of myBaseType.\n    properties:\n      myMap:\n        $ref: '#/definitions/myBaseTypeMapAlias'\n      mySlice:\n        $ref: '#/definitions/myBaseTypeSliceAlias'. Then I find difficult to twist the model templates toward making a distinction between \"IsBaseType\" (I am in the schema of the base type\"), \"IsSubType\" (I am a schema extending this base type) and \"I am using the base type\" (but I don't need everything is transformed as method calls in {{ valueExpression }}. Maybe that was the original intend with \"HasBaseType\"??. OK I rest my case regarding marshalling/unmarshalling. Only the unmarshalling has to be customized.\nI am currently attempting to rework a bit of this to support arrays and maps of base types (and any nested structure made of arrays and maps).\nTo do this, I am trying to understand how we compose types which refer to base types, but are not subtypes themselves.  To do so, I am investigating how changing the HasBaseType affects the code.\nThis makes me wonder why we construct properties which are base types as unexported fields with getter/setters and not an ordinary exported field (with custom marshalling).\nExample:\nyaml\ndefinitions:\n  objectWithPet:\n    type: object\n    properties:\n      prop1:\n        $ref: '\"#/definitions/pet'\n      prop2:\n        type: integer\nIs rendered like:\ngo\ntype ObjectWithPet struct {\n   prop1Field Pet\n   Prop2 int64\n}\nfunc (m *ObjectWithPet) Prop1() Pet {\n  return m.prop1Field\n}\nfunc (m *ObjectWithPet) SetProp1(val Pet) Pet {\n  m.prop1Field = val\n}\nI don't quite get the reasons why we don't simply have:\ngo\ntype ObjectWithPet struct {\n   Prop1 Pet `json:\"-\"`  // custom unmarshaller\n   Prop2 int64\n}\nand give up the getter/setters there (although we still need get/set methods to access the values of the base type when working with Prop1.\n. See also #444 . Closed as marked duplicate. Interested by this. However this only applies to string values. Enum is more general than that.\nWill do, for models:\n- x-go-enum-ci : CI validation on this specific enum (ignored if values not string)\n- --with-enum-ci : CLI option to apply x-go-enum-ci as a default for the whole model\nFuture generalization to params remains possible.. Could you please post a YAML or JSON example illustrating your point?. Just restested this.\n1. No more panic: a validation error is detected. Strangely, errors are repeated.\n2. @casualjim : your example is not validated. \"Cannot unmarshall object\".\nI think we can close the \"panic\" issue and perhaps dedicate a more accurate issue on validation messages relevances.\nPreparing a PR with fixtures and UT.. parent: #183. I had not seen this issue and just realized I've made the same on my own custom templates.\nThis could indeed be added as a featured CLI option (something like --auto-wire-implementation) but we should be wary of 2 things:\n- the configurable implementation target package should be pre-existing, or the goimport won't work at generation time (this makes yet another GenOpt / CLI opt, like --implementation=\"mypackage\")\n- the target handler is not arbitrarily set and should be named after the operationID\nIn my own configure_api.gotmpl, this gives something like:\n```golang\n...\n  // Registers server shutdown method\n  api.ServerShutdown = func() {  }\n// Registers API operations\n  {{- range .Operations}}\n  api.{{if ne .Package $package}}{{pascalize .Package}}{{end}}{{pascalize .Name}}Handler = {{.Package}}.{{pascalize .Name}}HandlerFunc(implementation.{{pascalize .Name}})\n{{ end }}\nreturn setupGlobalMiddleware(api.Serve(setupMiddlewares))\n...\n```\nThis kind of feature is actually a direct application of using custom templates. Adding it as a feature should be rather straightforward. Feel free to submit a PR on this.. That would be interesting.\nFor my part, I worked around this generation issue with a script toolchain, which takes care of moving and merging the files, performing a diff3 between previous generation, current generation and current file... I made this because I have custom templates that go farther by creating a skeleton for my operations, resolving all params and producing the typical workflow I have with my database. So I can safely regenerate my skeletons once I have started to edit them manually. This works the same for the configure_api.... @e-nikolov I am using custom templates.. Duplicates #9 . @Hectorhammett try extension x-go-custom-tag (applies to schema object properties). @casualjim  I believe that this refers to a time before I was born with this project, and codegen structure has changed much since that time.\nIt does not look relevant any longer, does it?. Closed as no longer applicable. Since swagger validate inspects these values, I think an error or warning should be provided at the spec valdiation stage. @todo: need testing to figure out if it is not already the case.. Duplicates #1217, where this topic is discussed. Closed as marked for duplicate. Duplicate of #590 . Duplicates #590, which has been closed.. How about using the following constructs:\n```go\nfunc logDebug(...) bool {\n log.Printf(....)\n}\n_ := Debug && logDebug(\"message\")\n```\nThen we could move the logDebug() func to any logger available out there. For instance rs/zerolog seems an efficient, yet simple, one.\nFor the json.MarshalIndent() stuff, another wrapper would be appropriate, e.g: \ngo\nfunc logDebugAsJson(v) bool {\n bbb, _ := json.MarshalIndent(v,\"\", \" \")\n log.Printf(string(b))\nreturn true\n}\nThis would make code more readable and test coverage analysis more accurate.\nAnother useful point is to enable debug for a given module. Currently, all go-openapi packages are guided by the same env variable SWAGGER_DEBUG.\nDebugging text would be clearer if we could support things like export SWAGGER_DEBUG=go-swagger:validate:runtime.. I am fixing this for models. I have just checked for simple params and headers: same story.. PR #1439  should solve the model case. Simple params remain an issue.. References to code source change over time...\nIs this TODO the one incriminated?\nfunc (scp *schemaParser) parseAllOfMember(gofile *ast.File, schema *spec.Schema, expr ast.Expr, seenPreviously map[string]string) error {\n    // TODO: check if struct is annotated with swagger:model or known in the definitions otherwise\n    var pkg *loader.PackageInfo\n    var file *ast.File\n    var gd *ast.GenDecl\n    var ts *ast.TypeSpec\n...\nThe (undocumented)  swagger:ignore annotation provides, in my opinion, a workable workaround.. The generator depends on vendored runtime which is part of the repo (and for what matters, other dependencies), so it is not affected by the state of other instances of the runtime package in the $GOPATH  or elsewhere. So I think this one may be closed now.. Closes as this duplicates #100, #99 , #841. Looks very much like #607 . @gregmarr:  it now works on my dev, but I am not sure it doesn't already on master. \nWorth giving it a try IMHO. Source is now provided as a link in the doc.\nThe race condition mentioned above is fixed in the example.\nExamples have been recently refreshed with PR #1478. Preparing a PR which solves quite a few issues with enum constant generation and gives more control about constant names, for any underlying enum type. It allows for const naming override with a \"x-go-const-names\" custom extension.\nAs a by-product, this development solves (1) in favourable cases (e.g. generating cleaner code when enum is made of simple types, trying hard to generate const whenever possible).\nI don't think (2) is something we want to add. The validation method is clean and reusable. One might object that it is slower because it uses type reflection. Anyway, I am not addressing this ATM.\nI consider too that (3) is addressed by putting the intent in the specification. If anyone is interested, I may add an option to export the generated enum slice (currently used internally for validation).. Yeah, but Glen has set even higher expectations: to figure out the enum stuff for all things, even from SimpleSchema objects. That sounds nice, but I am not going to implement such a big change.. My current dev is trying to make enum const customizable and performs some sanity check before generating const. I took some time too to generate more idiomatic initializers and enable const generation on any enum type, not only strings.\nI think this kind of feature could be reused later on to do something similar on default values.. This is a sample output from my dev. Is that better code? (note the generalization to ANY type).\nObviously this is a favourable case. For more complex structures, a var + init() with marshaller is unavoidable.\nFrom spec:\nyaml\n  bossId:\n    type: string\n    format: uuid\n    enum:\n      - 'a8098c1a-f86e-11da-bd1a-00112444be1e'\n      - 'a8098d1a-f86e-11da-bd1a-00112444be1e'\n      - 'a8098e1b-f86e-11db-bd1a-00112444be1e'\n    x-go-const-names:\n      - BossMasterID\n      - HeadMasterID\n      - ChiefID\n```golang\n// BossID boss Id\n// swagger:model bossId\ntype BossID strfmt.UUID\nconst (\n    // BossMasterID captures enum value a8098c1a-f86e-11da-bd1a-00112444be1e\n    BossMasterID = strfmt.UUID(\"a8098c1a-f86e-11da-bd1a-00112444be1e\")\n// ChiefID captures enum value a8098e1b-f86e-11db-bd1a-00112444be1e\nChiefID = strfmt.UUID(\"a8098e1b-f86e-11db-bd1a-00112444be1e\")\n\n// HeadMasterID captures enum value a8098d1a-f86e-11da-bd1a-00112444be1e\nHeadMasterID = strfmt.UUID(\"a8098d1a-f86e-11da-bd1a-00112444be1e\")\n\n)\n// for schema\nvar bossIdEnum = []BossID{BossMasterID, HeadMasterID, ChiefID}\nfunc (m BossID) validateBossIDEnum(path, location string, value BossID) error {\nif err := validate.Enum(path, location, value, bossIdEnum); err != nil {\n    return err\n}\nreturn nil\n\n}\n```. If we think a minute about Glen's original idea, i.e. having models a stringers, the idea not so bad.... @casualjim I am not sure not that fully supporting additionalItems couldbe qualified as a bug.\nI've seen that great efforts have been made to support this in the underlying json-schema mechanics.\nI could check this parts works well for data against schema (e.g. to validate default values or examples in spec validation, even though the given schema specified is not 2.0-compliant).\nEventually, the additionalItems keyword is not supported in Swagger 2.0 schemas.\n. Let's give some more up to date status about this one, as of v0.14.\nValidation of additionalItems in tuples works in all tested cases, BUT:\n- additionalItems: false is ignored (similar to additionalProperties: false)\n- tuple validation is not fully JSON-schema compliant (see specifically #1591, #1486)\n- it is very difficult in practice to enter the \"TODO additionalItems\" in the validation template\n- tuples do not currently mix with polymorphic types. @casualjim this one should be working now don't you think?. It's a generic problem for all format validations occuring on all simple parameters (it works for schema).\n@casualjim do you remember any specific reason to call directly strfmt rather than validate.FormatOf() like we do for schemas?. The bug is similar to the one in #1347 \nI'm testing a fix along the same lines: hasValidation should be true when a customFormat is applied.\nI am suspecting there ae similar shortcomings with headers (as param, as response) and items in SimpleSchema params/headers. Fixed operation binder would look like this. Tell me if you find anything wrong with this.\n```golang\nfunc (o *GetOptionalParams) bindNotAnOption2(rawData []string, hasKey bool, formats strfmt.Registry) error {\n    if !hasKey {\n        return errors.Required(\"notAnOption2\", \"query\")\n    }\n    var raw string\n    if len(rawData) > 0 {\n        raw = rawData[len(rawData)-1]\n    }\n    if err := validate.RequiredString(\"notAnOption2\", \"query\", raw); err != nil {\n        return err\n    }\nvalue, err := formats.Parse(\"uuid\", raw)\nif err != nil {\n    return errors.InvalidType(\"notAnOption2\", \"query\", \"strfmt.UUID\", raw)\n}\no.NotAnOption2 = *(value.(*strfmt.UUID))\n\nif err := o.validateNotAnOption2(formats); err != nil {\n    return err\n}\nreturn nil\n\n}\nfunc (o *GetOptionalParams) validateNotAnOption2(formats strfmt.Registry) error {\nif err := validate.FormatOf(\"notAnOption2\", \"query\", \"uuid\", o.NotAnOption2.String(), formats); err != nil {\n    return err\n}\n\nreturn nil\n\n}\n```\n. @sachnk we don't follow up closed issues. If the above answers do not address your expectations, I'd suggest you create a new issue in which you describe your use case in details. Thanks.. This thread has been archived in our FAQ. You may access it directly here\n(with PR #1342). With go-openapi/validate#60 the spec validate will issue a warning on this situation.\nI understand this doesn't fully address the issue, but it's at least a start...\n  . This one is difficult because it makes the validation contextual: an instance of a model (or simple schema) may be valid or not depending on who sent this data.\nTo my knowledge, this is now the ONLY swagger 2.0 feature that is not supported by go-swagger.\nFor simple params and headers, we might find a straightforward way to generate this additional validation, since they only exist in the context of an operation and (at the moment) we never validate responses or response headers. This validation would return an error if the value is not IsZero().\nFor models representing schemas, the situation is more difficult: the runtime.Validatable interface says if a model is valid or invalid, full stop. It is not contextual.\nOne idea would be to extend the validation capabilities with an additional interface (say, runtime.ValidatableParameter, or ValidatableFor...) which would carry on the extra check in this specific context (JSON-Schema draft 7 introduces the concept of \"owning authority\" to describe the newly introduced readOnly and writeOnly). Or add methods to set a validation context.\nI think this one should be discussed to figure out a sound design.\n. (good morning Greg).\nMmh yes of course... If you indulge yourself into changing the interface...\nThe write only is not swagger 2 strictly speaking, but it is in line with json-schema alignment at some (remote) point. anyhow, both specs (openapi and json-schema) do borrow from each other with every new version.\nHow about something like:\ngolang\ntype ValidatableFor interface {\n  Validatable\n  WithOperationType(OperationType) Validatable\n}\nSo from the outside, we could call validations like: \ngolang\nif err := mymodel.WithOperationType(op).Validate(formats) ; err != nil { \n...\n. I was thinking about a reference implementation with a scope (e.g. your iota-ed type) added as a state variable in the generated model.\nProblem (as always) is the cascading calling of Validate().... Those are just free-running thoughts.... Duplicates #1084 \nShould work now.. Todo: \n- [x] Reproduce\n- [x] Add gsma spec to known fixtures. gsma spec compiles well now.. The validation does not pass (essentially, duplicate properties found in allOf), but the generated code compiles:\nswagger generate server --skip-validation --spec=swagger-gsma.json --target=tmp --name=codegensrv --output=swagger-gsma.log. Related to #744 . Tested again this one with current master and also with master spec package (with circular ref fixes).\nStill hanging.\nGenerate server hangs as well.\nI am giving up on that one since the spec is too large to figure out what is wrong.. Working on a fix in spec. Duplicate of #909 . Related to #744 . This works now.\nThere is just a little catch with the gist provided: since the \"test\" name is used as a suffix for source code, there is a xxx_test.go file that is not included in regular builds... Moving to \"retest\" for instance, and this compiles fine.. Duplicates #1066. Need to test if still cause for panic.. See also #1334 . Should work now with current master (fixed expansion in responses). See also #1284 . Common problem with yaml is that errors are just a space away. This a big concern for spec validation.\nI suggest we let the original issue raiser close this if appropriate.. Retested and it works with correct spec (both cases). Going to post this in PR as yet another non-reg UT.\n@posener : the first invalid spec is correctly detected as invalid by swagger validate (I admit that the error message is not obvious to understand).. This is indeed a valid JSONSchema specification, but unsupported by codegen as for now. See recent issue which follows the same structure as yours: #1617 . My suggestion to solve this puzzle is to avoid constant generation when it makes no sense to infer a name from a value and let the user define custom names for its values if she wants to reuse them in its app.\nHere is an example based on this testcase:\nyaml\n      operator:\n        type: string\n        enum:\n          - \"==\"\n          - \"=~\"\n          - \"!=\"\n          - \">=\"\n          - \">\"\n          - \"<=\"\n          - \"<\"\n=> no constant generated\nyaml\n      operator:\n        type: string\n        enum:\n          - \"==\"\n          - \"=~\"\n          - \"!=\"\n          - \">\"\n          - \"<=\"\n          - \"<\"\n        x-go-const-names: \n          - Equal\n          - Match\n          - NotEqual\n          - Greater\n          - LessOrEqual\n          - Less\nWould generate this:\n```golang\nconst (\n    // Equal captures enum value ==\n    Equal = \"==\"\n// Greater captures enum value >=\nGreater = \">=\"\n\n// Less captures enum value <=\nLess = \"<=\"\n\n// LessOrEqual captures enum value >\nLessOrEqual = \">\"\n\n// Match captures enum value =~\nMatch = \"=~\"\n\n// NotEqual captures enum value !=\nNotEqual = \"!=\"\n\n)\n```. Please tag as question. I'll put it in the FAQ md (being written...). Retested with eve-online-esi latest spec and server generates okay now.. This one works now. With PR #1420, MarshalJSON() and UnmarshalJSON() have been added to models with date/time fields.\nDoes it address the failure you reported?. Does the swagger:ignore annotation solve the issue/answer the question?\nFrom P.R: New swagger:ignore annotation to explicitly ignore extraneous models #1152. OK. Just wanted to clarify the situation regarding issues, questions etc... Good to get some feedback.\nThis problem is relatively well explained in #796. \nUnfortunately, previous work on this has been left unfinished.. I stepped on that too when handling default or enum values.\nThe type aliasing cuts any call to the unmarshalling methods made available by the strfmt type.\nI believe we should generate the MarshallJSON method for all situations where the type is aliased to a strfmt type which is not a string alias (currently these are: Date, DateTime, Duration, ObjectID).. ok I started a small PR on this which fixes this annoyance. test is ongoing.\n@casualjim do you think we should add the [Un]MarshalBinary interface as well for these simple type redefinitions? (I could never catch what was the use case for these). Fixed with #1420 . See #1244 for an example of custom consumer/producer.. Nested arrays should be fixed now for simple params and headers.\nIssue on model objects (e.g. in: body) remains open.. All items mentioned in this issue should work now, except the in line body param issue.\nThis one is more specifically described in #1392. . There are actually several issues related here.\nFirst mentionned a parameter in body, that is with a schema. I believe this one works now.\nSecond is a parameter in path, that is with a primitive type. There are several known bug there (issues #1348, #909) and I am working on a fix (PR #1372).\n@protheusfr : I believe your specific issue is related to the fact that the UUID is parsed, but actually not validated. It would be nice if you could test that the proposed WIP PR #1372 actually solves your issue or if there still remain some unexplored cases.. The fix you are referring to was specific to format \"mac\" and only concerned code generation. This one must integrate support in the go-openapi/validate package, which has not been merged in the vendor tree of go-swagger.\nThe fix regarding UUID and other formats is related to using formats in non-required simple parameters (this one is the one I am supposed to have fixed in the live branch WIP).\nYou should be able to validate by specifying required: true or by using a schema parameter (in body). \nMy fix should be available for merge next week or so.\nStrange file names is related to our \"inflect\" library (go-openapi/swag). The generator figures out names for variables, files, etc... from your spec input. The point is to properly analyze upper cased constructs in your names, which sometimes is not easy. The rule is to keep as one word common uppercase words, such as HTTP, ID etc... and to split the rest following a Camel case rule of thumb. \nSo in your case, \"DELIMail\" gives \"d_e_l_i_mail\" in \"snakized\" form.\nThe list of common \"initialisms\" is available in go-openapi/swag.\nYou may customize this by using the CLI option, e.g.  --additional-initialism=DELI. Changes in naming have been introduced by PR#1357.\nActually, this didn't work in early december, then I added a quick patch for the release.\nPR#1357 provided a better solution, letting you configure your reserved words (\"initialisms\").\nRegarding your validation issue, the dependency on the patch on validate does not concern UUID, just MAC. Again, you may try the WIP branch from #1372 and see if it fix your issue. As I am currently testing it, I am interested in all kind of feedback (e.g. it looks like the \"in\": \"path\" causes the issue - have you tried \"in\": \"query\".\nAnyhow, the plan with #1372 is to provide a more comprehensive support for simple params, including arrays, nested arrarys and default values for which there are many issus currently.. As soon as I've tested enough this branch and passed @casualjim review, it should be merged to master. \nI did not push a PR just to hang around forever \ud83d\ude3a . Hello @protheusfr. A bunch of fixes have been merged into master today. That should improve things for simple params. We shall soon update vendor with the validation and spec package to clean up the bug scene further.\nThere are still some known validation shortcoming with model objects (e.g. parameters in body).. The remaining of this issue now corresponds to #1392 (validation of body params). I have to give up on that one.\nI incorrectly thought initially that it could be part of an improvement in go-openapi/validate, but it's not.\nThis issue is definitely a generator's business [requalified issue as \"generator\"].\nA way to achieve this objective could be to embed a new (language specific) check with templates, \njust like we do with code formatting. This would be a new method in LanguageOpts.\nHope this helps.\nF.. @JunliWang hello.\nWe were just discussing that yesterday. It's really a ton of work to lift it to v3.\nI am not sure there a many volunteers out there to produce such an effort.\nPersonnally, I would concentrate my efforts on getting the product stable with full V2 support and more than good enough. It is already good enough for most use cases, and probably at or close to top of this class of products.. @casualjim Me neither. A \"Swagger 2.1\" fixing some inconsistencies in 2.0 would be fair enough for me.\n@SandyWalsh : we are basically saying the same thing  .It would be rather easy to be more tolerant with the version announced by the spec, while continuing to check it against 2.0.. @Yaima for such a simple use case, such a breaking change is perhaps not needed: \nwhen it comes to generate a server for instance, it suffices to publish a slightly modified spec (e.g. override host with swagger mixin). For generated clients, the host in the spec is just a default which is easily overriden in your client's code.. @Yaima could you please move your questions to a dedicated issue? that would be nicer for people wanting to continue the OpenAPI3 discussion. Thank you.. Does the swagger:ignore annotation solve the issue/answer the question?\nFrom P.R: New swagger:ignore annotation to explicitly ignore extraneous models #1152 \nProbaby duplicate of #1079. This thread is leading us nowhere. Maybe a lack of documentation? Let's close it.. See also #1393 . In order to properly close this issue, swagger:ignore annotation should be documented in docs/generate/spec. Seen same behaviour with server generation: path items with '-' are modified by internal \"snakize\" function.. @isinelnikov  That is really a case study for custom templates. I don't think this particular requirement needs to be included as a feature.\nActually, this would made a perfect example to illustrate how custom templates may be used.\nIf you wish to submit a documented example with this as a PR, that would be great. Ask for guidance here or on slack if you need help with this.. Does the swagger:ignore annotation solve the issue/answer the question?\nFrom P.R: New swagger:ignore annotation to explicitly ignore extraneous models #1152\nGuess this is a duplicate of #1079. Hello. If I understand well all of the above, the main issue for some users is the default behavior with non required fields.\nHow about setting a gen option to set all non-required fields with x-nullable for users who are expecting this as a consistent behavior?. Tested with latest version of go-yaml/yaml package and still the same. Monitoring go-yaml/yaml#184 so we may anchor slices in specs.. @rabisg coudl you please confirm your issue is now solved?. Duplicates #1089. Got the same awkward generation.\nCulprit is github.com/go-openapi/swag/util.go:ToFileName(...) function.\nIt is design to transform a CamelName into snake_case_name.\nIt is not smart enough to get consecutive capitals such as ELB.Http or MsgOAI: rule is simple: insert a hyphen at each capital letter (or any other special char such as _, -, . ...). Created a pull request to go-openapi/swag to fix this.. Something like this is coming up:\n```golang\nconst (\n    // FooRolesItemsAdmin captures enum value Admin\n    FooRolesItemsAdmin = \"Admin\"\n// FooRolesItemsSuperAdmin captures enum value SuperAdmin\nFooRolesItemsSuperAdmin = \"SuperAdmin\"\n\n// FooRolesItemsUser captures enum value User\nFooRolesItemsUser = \"User\"\n\n)\n// for Items\nvar fooRolesItemsEnum = []string{FooRolesItemsAdmin, FooRolesItemsUser, FooRolesItemsSuperAdmin}\nfunc (m *Foo) validateRolesItemsEnum(path, location string, value string) error {\n    if err := validate.Enum(path, location, value, fooRolesItemsEnum); err != nil {\n        return err\n    }\n    return nil\n}\nfunc (m *Foo) validateRoles(formats strfmt.Registry) error {\nif swag.IsZero(m.Roles) { // not required\n    return nil\n}\n\nfor i := 0; i < len(m.Roles); i++ {\n\n    // value enum\n    if err := m.validateRolesItemsEnum(\"roles\"+\".\"+strconv.Itoa(i), \"body\", m.Roles[i]); err != nil {\n        return err\n    }\n\n}\n\nreturn nil\n\n}\n```. SecurityDefinitions are naturally stored as a map in structs.go\nbut it is actually used as a slice in regular ranges by templates, so it may be possible to convert all these maps into slices in the generation structures and sort them.\nAt the moment, that makes quite some extra work. Is there any genuine added value beyond stable generated output?. Hi Greg. I don't underestimate. We have had this discussion and you know I am versionning everything...\nThis is precisely why I am investigating this one.\nI already identified a quick improvement to sort AllOf schemas, that's a really easy one.\nThis one is a bit trickier but quite doable.\nProblem is regression testing with this as I only have few working examples at my place to really test it's working. Testing is making 90% of my contribution time ratio now that I got into templates. . Yes. It is just one of the few map structures left in GenXXX structs. That is what is making it random.. Hello. I tested your case.\nActually, you are not using the proper Swagger 2.0 syntax for examples in responses.\nResponses are not examplified the same way as params.\nIf you specify your response with:\nresponses:\n        200:\n          description: Customer\n          schema:\n            $ref: '#/definitions/customer'\n         examples:\n           application/json:\n             id: 123\n             email: 123\n             create_date: 123\nYou get an invalid spec as expected.\nI agree that finding \"example\" instead of \"examples\" should trigger a warning, as \"blank\" validation was probably not what was intended. Will do that in related PR go-openapi/validate#42.. Yes. I am in the validation code trying to figure it out and also this page of the specification.\nIt is not quite explicit that schema examples apply in the context of responses, but we may suppose it is so (I would, like you).\nThe validation code for responses explicitly searches for \"examples\"... \nI am digging in further and let you know. It works with params but validation messages are misleading. So something has to be changed anyhow.. I get your use case. I just got the same.... we need to update vendor before closing this. There might be a problem on the generated client, that I haven't test, but I can assert that the model marshals,  unmarshals and validates okay with current master (flatten or not flatten).\nI assume this is more a misunderstanding about how to marshal polymorphic types: you don't use json.Marshall, but instead, use the interface and use the UnmarshalPet() method. This one knows how to discriminate and there is no \"trouble\".\nThis is how the server works.  As far as I could see, the client is doing the same.\n@ahilananantha can you confirm this may be reasonably closed now?\nI let the issue open for client, since I did not confirm the behavior with client.. PR #1444 should solve the param binding problem.\nRegarding the unmarshalling, see also #1336 . Possible duplicate of #1093 . I verified that the current version correctly detects this as a spec error.\nMade a shorter fixture to reproduce the case.\nI'll push PR to add this check as a fixture in UT. This issue should be closed now. See also #1284 . Reference path resolution is altered by github.com/go-openapi/spec/refmodifier.go, in:\nfunc modifyRefs(target *Schema, basePath string) {\n        if target.Ref.String() != \"\" {\n                if target.Ref.RemoteURI() == basePath {\n                        return\n                }\n                newURL := fmt.Sprintf(\"%s%s\", basePath, target.Ref.String())\n                target.Ref, _ = NewRef(newURL)\n        }\n...\nIt seems that the basePath is not kept up to date when recursing through a tree of $ref.. You are right. Error messages are so terse... I fix and run again all my test cases. \nIf correct, this issue should revert to a (minor) lack of spec validation information. I'll tell you in a moment. Arg. I am testing with the PR ongoing for go-openapi/spec referring to #1260 ... \nWith this code, the initial error message disappears, but still the generated model does not compile...\nI fixed the definition with the '#', with no significant change in this context. I'll try with the original spec from master.. Ok rolled back to master spec pkg. I checked everywhere for similar faulty syntax (i.e; /# instead of #/). Behaviour reverts to what was originally posted.. Updated test case to remove syntax problem.\nI believe it's innocuous anyhow in this case, since paths are cleaned from trailing slash and relative slash rebased with a slash, I mean 'x/#definitions' <=> 'x#definitions' <=> 'x#/definitions'.\nBut I am not  going to debate such schema compliance issues here: I admit it's a bit far fetched and error prone. So now the testcase focuses on the proper issue, that is cascading $ref.\n. In my opinion, all these problems with $ref (#1258, #1259, #1260) are linked to a fundamental defect in the resolution of references, namely, the design choice to \"flatten\" things (probably for easier caching).\nOk I got it, if I flatten everything with no $ref, I 'll get it allright...\nBut this would defeat the purpose of SWAGGER spec '$ref' feature, that is allowing for heavy reuse of the underlying data model as message definitions for the interface.. Thank you Ivan for your reply. Agree with your definitions of the use cases.\nAgree too that flattening should, theoretically, make no difference (unless we get type naming conflicts in the definition tree, which might occur, but let's put that aside...).\nMy opinion above was supported by my investigations of the various $ref issues found yesterday, in particular the way the modifiyRef() works. I may have misinterpreted its inner workings, as I am not (yet) familiar with the code base.\nIn the reported case ('xxx has no key', #1258), the generator desperately tries to find the key at the root of definitions whereas it has been already been defined deeper by the $ref. I inferred (perhaps mistakenly) that the flattening was the problem.. @casualjim I have to disagree with your explanation:\n- I tested with and without id or $id in the JSON schema part: same behaviour\n- id or $id JSON schema keywords are not explicitly unsupported in OpenAPI 2.0, this precision comes from 3.0\n[as per https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md, I could not find an equivalent to 3.0's: https://swagger.io/docs/specification/data-models/keywords)\nHowever, it is interesting to get this view and move it to the spec validator. In this case, we should choose wether to ignore \"id\" or \"$id\" (I don't think it is used for $ref resolution anyhow) or to have the spec validate to shoot a validation error on this. \nI'll work next week on the spec validation part, as I found out I spent too much time cleaning my (long) specs figuring out errors.. Todo on that one:\n- [ ] Test the effect of #1285 on the reported test cases\n- [ ] Test the impact of id and $id in this context\n- [ ] Move id, $id dectection to spec validation layer, with error or warning (to be decided, depending on impact). Thanks Karim. this is exactly what I observed (and hopefully, reported).\nSo do we all agree that Id /$Id is something that should probably be a warning in spec validate (I can take cae of that)?\nThe problem specifically here is that the analyzer does not recognize that \"B\" is a \"complex type\" that should not be zeroed with make().\nThis has something to do with the $ref (inline schema works) but should be narrowed to the array case (object works). I may try to narrow it further, as a I only tested the Response case. I didn't check the behaviour for param in this case.\n. I remove the relationship to \"$ref\": the problem lies with the correct identification of a composed structure by the generator. I believe that forcing the Zero when composing struct should work.. Situation is much better with spec updated to master: thanks to the response expansion, OAIxxx types are now gone.\nThere is still a little glitch with the response template which omits proper pointer assignment then that should be ok. Plan to fix that soon.. Update on this one.\nOAIGen types may come and go, it really depends on the $ref situation. This problem is related to the flatten vs expand problem and is more general.\nOn the other hand, I could work around the issue in the responses.gotmpl template (detecting type aliasing and being more careful about using make for arrays and maps). At least it builds, even though I don't like the introduction of these technical types.\nThis made me wonder about this generated construct (note I replaced make(...) by &models.B1{}:\nis that double nil check below here for some purpose? This code which did not compile is after all dead code in many cases, isn't it? Please advise.\n```golang\n// WriteResponse to the client\nfunc (o *GetAllOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {\nrw.WriteHeader(200)\nif o.Payload != nil {\n    // FRED\n    // .IsArray: true\n    // .IsAliased: true\n    // .IsMap: false\n    // .IsComplexObject: true\n    // .IsNullable: false\n    // .IsInterface: false\n    // .Zero: make(models.B1, 0, 50)\n    // .IsBaseType: false\n    // From above: Payload POINTER\n    payload := o.Payload\n    if payload == nil {\n        payload = &models.B1{}\n    }\n\n    if err := producer.Produce(rw, payload); err != nil {\n        panic(err) // let the recovery middleware deal with this\n    }\n}\n\n}\n``` . Closed because of stalled status. This issue refers to an old release and should not apply any longer.\nFeel free to re-open this if you get similar installation issues with brew.. Merge tested OK.. I checked it out from master. #1263 now closed.. Hello. Could you please have a look first at this reference link : https://golang.org/doc/code.html#GOPATH\nIt really looks like your source is not under $GOPATH/src. Inserted proper test case files in issue so its documentation is standalone.. @casualjim , so let's recap your review:\n\ncomment out the defer() in main, since we expect stacks on panic().\n  I hope in the future, panic() would be better handled.\n  Possible alternative: baseImport() returns error (more changes)\nmore idiomatic go with error printing (e.g; \"%v\",err instead of %s,err.Error()\nreplace fmt.Print with log.Printf \n\noperation_test.go : more idiomatic string joining (I didn't write this code, but ok to fix it)\n\n\nYour opinion on the criticality of SpecPath() and TargetPath(): in my view, it's okay (and not much changing with master to return blank string on errors - just more explicit)\n\n\nOkay with that?\nCheers,\nFred. There are still annoying behaviors on Windows. I installed everything on Windos and trying to fix things up on this os.. Should be fine on windows now. Unit test suite (culprit: TestBaseImport) did block when not run as admin. Fixed that by skipping test if OS does not enable symlink for the current user.. Thanks Ivan for the cheer up. \nDifficult to get around codecov/patch since this PR specialized on error handling and that few unit tests did dig into all error causes.\nMostly codecov/patch complains about \"untested\" deltas resulting from mere gofmt or log message. Untested they were, untested they remain (for now).\nAnyhow, I tried hard to improve test coverage (btw codecov result is disappointing: I got a better impression on my go tool cover stats...).\nEn passant, fixed a small bug: loading custom template files (not assets, new ones) from TargetTemplate and not \".\".\nNext contribution will be I think a small tutorial about playing with templates.... I am lost with AppVeyor report.  There is no indication of what has gone wrong for this bot.\nOn my side, all tests are passing. \nAny hint?. Well, ok. I am willing to abide by these ever stricter rules (!).\nAny indication as for where this occurs? This branch has not changed much code, so I am lost.. I could see this AppVeyor CI deployed on windows.\nI am just wondering if it's connected to my changes in this particular PR or it's just because you did set up AppVeyor just recently and swagger is croaking a lot on stderr ?. No logging has been explicitely added in this branch.\nHowever I think I get your point: since I call some high level methods in the new unit test, this probably croaks on stderr. I'll work on that hypothesis to get it right.. @casualjim . Just to make sure I am not spending time in the wrong direction.\nIf I fix the CI issue you're okay with the feature?\n[if not, no problem, I'll just keep it on my fork, since I do need it: just simpler for me to avoid branching]. Thanks Ivan. This is exactly how I did it.\nI had to fix precisely this other unit test which had a side effect by switching log back to Stderr after muting it.\nBesides the Execute() method I am testing had an end message with fmt.Fprintf(Stderr,...). Had to fix that too.\nOk. So when I run the full test on generator pkg, stderr is empty. There must be a catch.\n. I fixed the issue occuring on windows. Now waiting for master to be repaired to rebase my branch. \nCheers. Currently, x-go-custom-tag is only supported for properties.\nI don't really see how valuable is this use-case of tagging whole structures.. Mmh. Thanks I see the intent clearer now.\nYou may see here that this feature has been only intended to be used with properties.\nLooking also in this template confirms this intent.\nChanging this for the general case (more than allOf) would be a big change indeed.. Tested it and it works (releasing a small PR to prove it: #1452 - this one will also get the full cloudbreak.json ready for testing later on).\nNote that the cloudbreak.json spec still does not compile properly, because of additionalProperties. This story shall alse be told.. Yes I'll open another issue with this.  I tested the full cloudstream spec you gave and removed the offending parts so this particular problem may be demonstrated as solved.. Is this a duplicate of #1309 (fixed by #1310)?\nWould need to check if the fix apply in your case as well.. @databus23 after some tests with similar cases, it looks that #1478 solved the issue.\nCan you please confirm?. Hello.\nMy undertanding is that the version command has been designed to be used with binary distributions of go-swagger (as docker images).\nThe version is prepended at build time by the makefile in charge of preparing the docker image (actually, this generates a link time symbol).\nI don't see why it should be an issue to have it set as \"dev\" when using the source distribution for different purposes [like you suggest, using it in a non-git place such as vendor].\nWhat your report suggests behind the lines [tell me if you disagree with that], is to use git attributes somewhere to encode the version in a source file, rather than resolve it at build time.\nThis used to be a common practice with svn or other scvs such as CVS. Git strongly discourages the use of it, even though it is technically possible, with great care and caution. \nFurther, go-swagger is still in its 0.x release series. It might just not be the right time to enter this debate about whether resolving $Version$ tags in source code is a good thing or not.\nCheers,\nFred. Update: so now we have removed makefiles, it is clear that the go version command is only relevant for docker images and released binary distributions.. Supported mimes are currently hardcoded here in generator/support.go.\nRefactoring this and making it configurable could be a good PR, not too difficult.. Hello Karim\nI tagged all issues related to ref resolution so ot might be a good idea to validate your fix against all of them, once and for good. \nThey are probably some duplicates, but maybe some are slighly different from mines.\nCheers\nFred. Reproduced the different cases.\n- $ref is out of cause (in this limited context at least)\n- with correct $ref setting (e.g. without siblings in a schema, as required by Swagger 2.0 Spec - WHICH IS NOT json schema), spec validates and generates a server that builds\n- issue can be pin-pointed to forbidden mix $ref + sibling, which is correctly detected by swagger validate, although the returned error message does not state clearly the issue (complains about missing \"items\")\nWill add these fixtures in cmd/swagger/commands/validate_test.go for the record, then close the issue, if @somebi has no objection.\nFred\n. This the actual error. \nSpec validation error messages are really poor and a great cause for misunderstanding and waste of time overall. An issue is now dedicated to this. \nAt some point, there was also an idea for an enhancement to produce the line number in the spec file, but it seems quite a bit complicated.\nI won't close this one, but requalify it as a request for enhancement with error messages, which seems fair enough.. Will work next week on a PR to improve this, hopefully together with some other swagger validate shortcomings.. @Somebi I improved somewhat the error signaling, but this fix does not (yet) identify the actual cause ($ref sibling). It is a bit complicated in the validation package to get it right.\nFurther, $ref siblings actually should generate a warning (they are not strictly forbidden, but the resulting behavior is most likely unwanted).\nIn your case, I could however croak some more valuable information about the problem, such as missing items in array, which should help in spec problem pin-pointing.\nBottom line: the ticket remains open, but we have somewhat improved.. Merged with 1290-fix server generation now supports operationGroups templates jus\u2026 #1298. As of v0.15, could reproduce name conflict only in the corner case when tag = \"api\".\nSee attached spec testcase.\nfixture-1291.yaml.txt\nAll other cases mentioned in the issue report above work without conflict.\nTherefore, move this one as \"enhancement\".\n. OK. Tested with commit 0138adf. Proceeds normally. Thanks.. Yes. I messed up with my fork to resync it. Tried to rebase but didn't clean.\nThe actual diff is exactly what I did: 5 lines in 1 file.\nI lost some time with git-stuff, but at some point, I gave up.. If really this is a problem on your side, I just drop the fork and make a new one with those 5 lines...\nI also started rewriting the full story-telling to recap and close the 35 \"questions\" issues, as promised.. Performed sanity check on this with 0.14 and it is okay. Merged with 1299-fix-unit-test-verbosity #1300. Grr still too chatty.... Now I may read Appveyor's output.. It is the hack script to build the coverage report that fails\nIn: .circleci/build-docker.sh. It might be that you have an outdated version of this script in your branch. The \"rm -f\" deletion of the temp file has been added a few months ago.. I know it doesn't.. But still, the CI runs your branch, before merging. Before all compare the ./.circleci/build-docker.sh in your branch with the master. Of course, merge issue.... Thanks Ivan.\nNow I believe we can close #1171 and move on further.. As a work around, I believe that setting skip_format = true in the generator's yaml config file should allow to bypass this check.. I am not sure about this specific check.\nI have recently modified things so that code not passing format check is written down no matter what, with a warning (intent was to allow template debug).\nHow about a PR with an additional skip_checks or alike to bypass the unwanted check?\n. @elakito Check out https://github.com/go-swagger/go-swagger/blob/master/generator/shared.go#L553 . OK. Should be fixed with PR #1394.\nTo be tested again.. My own feeling is that all contributions are welcome.\nYou should not worry that much about bug vs enhancement distinction in issues.\nIt is more an indication on how to priorize things.\nSince the toolkit has many use cases it is often difficult to judge priority from a single userr's perspective.\nGenerally speaking if you feel it is important, post a PR.. Thank you greg for pointing that one out. I include it in my development test cases for rework of the enum const feature.. @gregmarr : I think that I fixed this as an unexpected byproduct of my dev... I tried your test case on my WIP.\nIsn't that what you would expect?\n```golang\n// IncludedItems included items\n// swagger:model includedItems\ntype IncludedItems struct {\n// ida\nIda string `json:\"ida,omitempty\"`\n\n// idb\nIdb EnumTypeOne `json:\"idb,omitempty\"`\n\n}\n// Validate validates this included items\nfunc (m *IncludedItems) Validate(formats strfmt.Registry) error {\n    var res []error\nif err := m.validateIda(formats); err != nil {\n    // prop\n    res = append(res, err)\n}\n\nif err := m.validateIdb(formats); err != nil {\n    // prop\n    res = append(res, err)\n}\n\nif len(res) > 0 {\n    return errors.CompositeValidationError(res...)\n}\nreturn nil\n\n}\nconst (\n    // IncludedItemsIdaNr1 captures enum value 1\n    IncludedItemsIdaNr1 = \"1\"\n)\n// for property\nvar idaEnum = []string{IncludedItemsIdaNr1}\nfunc (m *IncludedItems) validateIdaEnum(path, location string, value string) error {\nif err := validate.Enum(path, location, value, idaEnum); err != nil {\n    return err\n}\nreturn nil\n\n}\nfunc (m *IncludedItems) validateIda(formats strfmt.Registry) error {\nif swag.IsZero(m.Ida) { // not required\n    return nil\n}\n\n// value enum\nif err := m.validateIdaEnum(\"ida\", \"body\", m.Ida); err != nil {\n    return err\n}\n\nreturn nil\n\n}\n```. oh. I thought it was a missing validation problem. I got it now. There is all of a mumbo-jumbo in the model generation specifically to DO THIS. There is a reason why this \"full aliasing\" never completed: it is just highly risky to change it all. I am trying to carry on incremental changes on const generation, but I am afraid I'll step into all these problems as soon as I start testing nested structures... It is quite hard to solve/improve one thing at a time in schemavalidator.gotmpl... Any idea is welcome. yeah. I figured out that we could work around this by allowing for custom names... But it's deeper.\ncustomization works on my bench, and it allowed me to do what I wanted: reusable consts with any time (date, etc..) + fixing simple bugs because of funny values with no possible practical naming inference.\nBut I am afraid of entering the testing stage with all the nested stuff and additionalProperties and all : several things don't currently work and adding a tested feature is much like you fix them all.... @gregmarr I thought about this issue and it just occured to me that we cannot easily adopt a general approach to this.\nIn your example, you explicitly defined a $ref ,which is interpreted as \"I want a specific type for that\" (e.g. somehing that I may reuse). When defining the enum inline, there is no such apparent intent.\nSo it is not obvious that \"lifting things\" is always the right choice. Indeed, if this enum type is reused elsewhere, inlining it would cause name conflicts with the generated consts.\nThis kind of fix definitely lies in the flatten() func (github.com/go-openapi/analysis).\nYou probably know that there is a specific section there for this kind of additional rule (none is implemented yet).\nI don't think we can adopt a general rule on simple types: some dev would like inlined enum to remain inline, and some, to have it as dedicated type.\nWe could instruct the flattener with some kind of x-... extension. At the moment,\nthe easiest way to express commonality is to use $ref.\nOn the other hand, you might have expected that the analyzer automatically detects that the schemas are actually identical and factorize the spec for you. But that does sound a bit far fetched, doesn't it?\nCheers,\nF.. Hello @gregmarr \n\nThe big difference here is runtime validation vs compile time validation. \n\nCould you please be more explicit about this statement? You lost me. I don't understand what you mean by \"compile time validation\" in this context.\n\nI can't imagine devs wanting less type safety\n\nAgain I don't understand what type safety has to do with inlining.\nIn both cases, we have a validation on the enum, have we not?\nWhy having a dedicated type should be considered safer?\nWhat I am getting at is that I don't really see why specifically enum should automatically trigger the construction of a dedicated type (btw, a trick that would not be available with simple schemas),\nwhen it is so straightforward to put this intent in the spec with a $ref ?\nIf this is what you want, I think it is rather straightforward (you already did tamper with that code, didn't you?) to set an option in flatten() to move all enums together with other complex stuff and create a definition for it. I guess that this would happen here.\nMaybe part of my misunderstanding comes from different use cases: I am writing specs - so I change them until the model suits me. I realize you might need to rework models on existing specs without altering them.. Precisely, I am challenging the relevance of implementing (1), (3) and (4) in codegen.\nIn my view, this is spec massaging before generation. Flatten is definitely the place for such rework, that should be optional, so as not to break things.. @gregmarr Here is a new proposal, following what we discussed.Tell me if this is more like what you would expect.\nThis feature would be optional: either you enable it globally from a CLI option, or locally, with an x-go-enum-type vendor extension. It works for all inlined primitive properties with an enum.\nHere is the example I have generated on dev from your spec (modified below, but again the vendor ext is not mandatory):\n```yaml \ndefinitions:\n  enum_type_one: { type: string, enum: [ '1' ] }\nincluded:\n    type: array\n    items:\n      type: object\n      properties:\n        ida: { type: string, enum: [ '1' ], x-go-enum-type: true }\n        idb: { $ref: '#/definitions/enum_type_one' }\nAs usual, you get the aliased type definition in its own file (note that we don't have init() and unmarshalling anymore here):go\n// EnumTypeOne enum type one\n// swagger:model enum_type_one\ntype EnumTypeOne string\n// enum for schema enum_type_one\nconst (\n    // EnumTypeOneNr1 captures enum value \"1\"\n    EnumTypeOneNr1 = EnumTypeOne(\"1\")\n)\n// enumTypeOneEnum represents the list of allowed enum values for this enum type one\nvar enumTypeOneEnum = []EnumTypeOne{EnumTypeOneNr1}\n// validateEnumTypeOneEnum validates against enum for enum type one\nfunc (m EnumTypeOne) validateEnumTypeOneEnum(path, location string, value EnumTypeOne) error {\n    if err := validate.Enum(path, location, value, enumTypeOneEnum); err != nil {\n        return err\n    }\n    return nil\n}\n// Validate validates this enum type one\nfunc (m EnumTypeOne) Validate(formats strfmt.Registry) error {\n    var res []error\n// primitive enum\nif err := m.validateEnumTypeOneEnum(\"\", \"body\", m); err != nil {\n    return err\n}\n\nif len(res) > 0 {\n    return errors.CompositeValidationError(res...)\n}\nreturn nil\n\n}\n```\nThen you get your inline type as extra-schema for your items. It is in the same file as the original type it stems from.\nThis works in both flatten and --skip-flatten modes and does not depend on analysis' flatten():\n```go\n// IncludedItems included items\n// swagger:model includedItems\ntype IncludedItems struct {\n// ida\nIda IncludedItemsIdaEnum `json:\"ida,omitempty\"`\n\n// idb\nIdb EnumTypeOne `json:\"idb,omitempty\"`\n\n}\n// Validate validates this included items\nfunc (m *IncludedItems) Validate(formats strfmt.Registry) error {\n    var res []error\nif err := m.validateIda(formats); err != nil {\n    res = append(res, err)\n}\n\nif err := m.validateIdb(formats); err != nil {\n    res = append(res, err)\n}\n\nif len(res) > 0 {\n    return errors.CompositeValidationError(res...)\n}\nreturn nil\n\n}\nfunc (m *IncludedItems) validateIda(formats strfmt.Registry) error {\nif swag.IsZero(m.Ida) { // not required\n    return nil\n}\n\nif err := m.Ida.Validate(formats); err != nil {\n    if ve, ok := err.(*errors.Validation); ok {\n        return ve.ValidateName(\"ida\")\n    }\n    return err\n}\n\nreturn nil\n\n}\nfunc (m *IncludedItems) validateIdb(formats strfmt.Registry) error {\nif swag.IsZero(m.Idb) { // not required\n    return nil\n}\n\nif err := m.Idb.Validate(formats); err != nil {\n    if ve, ok := err.(*errors.Validation); ok {\n        return ve.ValidateName(\"idb\")\n    }\n    return err\n}\n\nreturn nil\n\n}\n// MarshalBinary interface implementation\nfunc (m *IncludedItems) MarshalBinary() ([]byte, error) {\n    if m == nil {\n        return nil, nil\n    }\n    return swag.WriteJSON(m)\n}\n// UnmarshalBinary interface implementation\nfunc (m IncludedItems) UnmarshalBinary(b []byte) error {\n    var res IncludedItems\n    if err := swag.ReadJSON(b, &res); err != nil {\n        return err\n    }\n    m = res\n    return nil\n}\n// IncludedItemsIdaEnum included items ida enum\n// swagger:model IncludedItemsIdaEnum\ntype IncludedItemsIdaEnum string\n// enum for schema IncludedItemsIdaEnum\nconst (\n    // IncludedItemsIdaEnumNr1 captures enum value \"1\"\n    IncludedItemsIdaEnumNr1 = IncludedItemsIdaEnum(\"1\")\n)\n// includedItemsIdaEnumEnum represents the list of allowed enum values for this included items ida enum\nvar includedItemsIdaEnumEnum = []IncludedItemsIdaEnum{IncludedItemsIdaEnumNr1}\n// validateIncludedItemsIdaEnumEnum validates against enum for included items ida enum\nfunc (m IncludedItemsIdaEnum) validateIncludedItemsIdaEnumEnum(path, location string, value IncludedItemsIdaEnum) error {\n    if err := validate.Enum(path, location, value, includedItemsIdaEnumEnum); err != nil {\n        return err\n    }\n    return nil\n}\n// Validate validates this included items ida enum\nfunc (m IncludedItemsIdaEnum) Validate(formats strfmt.Registry) error {\n    var res []error\n// primitive enum\nif err := m.validateIncludedItemsIdaEnumEnum(\"\", \"body\", m); err != nil {\n    return err\n}\n\nif len(res) > 0 {\n    return errors.CompositeValidationError(res...)\n}\nreturn nil\n\n}\n```. This new schema node is terminal: it just applies to primitives. So there is no further chaining down.\nSure this is just a nice to have - we agreed on that with Greg. It did not take much time to develop, since the enum stuff is refactored on my dev branch.\nI think it captures the implied intent with enum to define a safe enumerated type, but does not go so far as capturing the intent that this one is actually the same as the other one.\nAnyway, I made it optional, so there is no break to be afraid of.\nYou got a point with the \"groups comparison\". We have had this discussion above (about realizing that in this example, we actually got the same enum, and there should be only one type). I think this is a tall order. Doing this at the package level would completely break the way models are currently generated.\nMy dev proposal (PR to come), takes it the other way around: it gives almost full control over the generated code with options and some vendor extension. This does not suit perfectly use-cases with 3rd party spec that you can't alter, but it is an improvement.\nOn the other hand such customization features perfectly suit the use case where you actually develop something in golang behind the API (well, my use case...).. BTW, regarding enum in nested anonymous, this is currently broken (I figured that out with my latest PR).\nI needed to refactor the enum validation code to see it clearer: so now it is working on dev (i.e. enum within inlined struct that you got with --skip-flatten). This fix shall come with the \"enum\" PR, alongside all other known bugs tagged \"enum\".. @gregmarr : beware this just for primitive types.\nIt is not much more complicated to code it for more general enum types, but it is much more complicated to test it.... @sebastien-rosset \nDo you confirm the issue may be closed now that your PR has been merged?. Hello. \nYou should know that models may be generated independantly from server, then reused when generating a new server.\nYou might build on that: generating a first model, customizing the validation code, then reusing this model (possibly with some others) in your servers.\nAnother way is to use x-go-type extension, to replace type generation with a custom type.\nYou might use both, preparing a customized model from an initially generated structure, then reusing type custom type in other declarations by hinting the generator with x-go-type.\nEventually, for repetitive customization, you might be willing to customize the generator's templates.. Hello @gregmarr  I am now with a model showing similar properties and the marshalling, albeit ugly, works.\nI found other issues with validation not bubbling up properly, but this story shall be told elsewhere .... Hi @casualjim . This PR is awaiting your vendor update with validate.\nFeatures:\n- [x] swagger validate --skip-warnings --stop-on-error options [doc updated]\n- [x] by default, enable continue on errors for full error reporting; Reports warnings\n- [x] quick hack script to run some validations on our repo of fixtures. @sidhman : should be fixed by #1508. Could you please confirm?. Hi Ivan\nWell, since all of this is essentially a rewrite/cut/recap of your contributions, you definitely have a word to say in this!\nIt tried to keep most of the value in these exchanges: code samples, original use cases, links to resources...\nI cut the chatter to make it shorter and readable.. There might be some issues with the gitbook, though. I haven't been able to check everything there.\nIn my view, best to merge / update gitbook and patch possible doc glitches afterwards...\n. A few glitches with doc links remain. I'll patch them soon. @allencloud : this story is also related in go-openapi/swag#12, go-openapi/swag#11.\nName conversion heavily relies on camel case convention.\nThe point in your case is to detect correct \"initialisms\", i.e words that do not follow the regular Camel-casing.\nIP is one of them, so the function knows it has to keep it one word. AM is not, so it is broken up in words.\nIf you had: IPAm, you should get ip_am as expected.\nTo work around your problem, you may configure the list of such initialisms in https://github.com/go-openapi/swag/blob/master/util.go#L27 and add \"AM\" as such an \"initialism\".. build the main.go. Congratulations! . Hello.\nI Believe your isssue lays here: https://github.com/go-swagger/go-swagger/blob/7077865cc6012ee95137f25cdf2020ee521f985d/generator/templates/schemavalidator.gotmpl#L289\nI just couldn't figure out why the .HasValidation property remains false in your case.\nWould you care some more digging based on this information? \n\n(you may alter the template - this one may not be overriden: is has to be in ./generator/template then rebuilt with updated binddata.go).\n\nIn order to understand the data structure passed to the templater you may run swagger generate ... --dump-data.\n. Intuitively, .HasValidation should be set to true when a format is defined.\nHowever when I look at the setting of this value in model.go, there not much left of my intuition :). That should be already prepared by the schema.\nWhat I can see here is just some trickery to lift anonymous types. I would need some time to dig it, but right now I just can't.. Yes I think you're right: || model.Format != nilshould do the job.\nI must admit I am an absolute beginner in that part of the code. How do we check that there is no messing around?. @gregmarr I tested our findings and... it's much more complicated than it seems.\nThese templates are devilish:imp:. Thanks. I've just added this in my current branch for spec validation part, that should merged in a couple days.\nThis will probably need some additional stuff in the generator part, though. Let us figure that out with @casualjim next week. When analyzing the type validation, I could see there are a quite a few other formats missing.\nTedious homework, but it should be done.\n@casualjim : I don't know about the generator, but regarding the validate.typeValidator.schemaInfoType(), I suggest this kind of reverse lookup be deferred to strfmt : on the long term, it is just not possible to keep things in sync with all fmts, not to mention the possibility of custom format registries.. The generation part should be available in go-swagger with PR#1368\nThe validation part should be available with PR go-openapi/validate#50\n@allencloud with these live branches available (not yet merged), could you please confirm your issue will be solved?. We need to update vendor before closing this. @gregmarr  this one should be fixed by now, right?. Because the repo is used to build binaries for releases (e.g. docker, other binaries). Makefile for docker. ./hack contains related scripts.\nI don't know for the linux packages etc.... Couldn't see why exactly, but can point as to see where.\nIt's in generator/build_test.go\nThis simulates a go get and build.. Perhaps upgrading the test to use go get gopkg.in/go-swagger/go-swagger.{current-branch} and retrieve the current branch from the build env?. I can see this time this is a spec validation test that failed.\nWonder if it is a regression introduced my latest PR with spec valition.\nI'll test with this fixture (docker spec).\nStrange, I specifically made a test to run the spec validate through all these fixtures in the go-openapi/validate package... . I had a look at the fixtures/canary/docker/swagger.json specs which is blocking the UT:\nit is considered invalid as for now for go-swagger.\nIt was already considered invalid when PR merged the new validate version.\nI don't understand why this is blocking the UT now since this has been a known fact for some time.\nSpec validation errors are acceptable for now (we ought to improve, though, so docker may use go-swagger :) ):\n- support for multiple types, e.g: type: [ 'object', 'array' ] : this is a bug in validate but I don't think it is new\n- duplicate operationId : this is a known limitation in go-swagger (operations must be globally unique while the spec states that (path,operationId) must be unique\n  . I think we need an explanation on how suddenly the UT on validation requires this docker spec to be valid.\nIt is, in a sense, but we can't support it yet. I must admist that this side effect of your otherwise unrelated change is hard to follow. I'll try to have a look over the we.\nFirst PR I made I had the kind of bizarre stuff from CI. It is a complex application, indeed.. @diego-fu-hs  : to pass the CI/CircleCI\n- in ./hack/run-canary.sh we must disable the docker spec:\n+ && [ $dir != 'docker' ]\nWe have actually two issues which are related to my own previous PR and not yours. So I'll take care of fixing them.. For the AppVeyor CI, I didn't find out. The fixture \"bug/825\" tested is expected to fail ok.\nWhy we have a timeout I don't know. I could see all tests where very long in this CI session. So maybe it was just unrelated. Let's run the CI again after a commit bump. OK I understand better now. I suppose you have discussed with @casualjim about removing the --skip-validation flag.\nHowever it has some impact on the CI, since some tests where specifically running in that grey zone of invalid specs for which a generation could be run...\n\ncanary/docker (in ./hack/run-canary.sh) was one of them\nI suppose that the spec in ./fixture/bug/825 (which does not validate) is like this (see run failure on AppVeyor)\n\nIn https://github.com/go-openapi/validate/blob/master/swagger_test.go there is a full list of all fixtures from the go-swagger repo that do not validate [used to test the validate package itself].. Ok, if I recap:\n- --skip-validation has an impact on the docker build (circle ci) since we attempt to generate specs that are not valid. This one should not be removed.\n- --skip-validator (grr I made the mistake too!) is not used and neither useful (?). Removing it from implem and doc should \"fix\" #1354.\nNow about the go-openapi/validate package, this P.R inspired me some todos there (:imp:):\n- [ ] Support the construct: - type: [ xxx, array ] when checking every items refers to an array\n- [ ] Simulate a go-swagger merge in Travis and run the docker-build script. This would be a non-blocking Travis CI job, just to check that a validate branch may be merged into go-swagger without harming the CI.\n. Fixes #1354 . I don't know. Still, it is valuable to know that a big spec like docker, we can't support it.... So what do you suggest we use for C.I? As for now, Circle CI actually checks it can build a docker image.\nIf you remove the canary hurdle from go-swagger, I think I'll add it on the validate side.\nFor validation, I think it's always a good idea to benchmark against big such big specs. @diego-fu-hs as far as I can see it looks okay now. What do you think @casualjim ?. This flag is indeed not supported. We desupport this option and update the doc. Thanks.. No more flag.. This thread would be a welcome addition to our FAQ: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_spec.md\n. Yes. I tested again and found the regression.\nPR #1315 introduced a function BaseImportFunc in generator structure, which cannot be rendered as JSON by dump-data.\n. We need a custom marshall that excludes unsupported types such as functions, interfaces, .... OP solved issue. I think it's out of our scope to carry on this kind of rules.\nThere are already so many things to do to adhere to one's specific use-case. \nYou may be interested in this to add in your toolchain: https://github.com/naegelejd/gocat\nAlternatively, you might be a fan of grunt. There are some go plugins to orchestrate build tasks. This is typically as place we you might insert a source concat plugin;\n. ```golang\nfunc (g GenOpts) render(t TemplateOpts, data interface{}) ([]byte, error) {\n    var templ *template.Template\n    if strings.HasPrefix(strings.ToLower(t.Source), \"asset:\") {\n        tt, err := templates.Get(strings.TrimPrefix(t.Source, \"asset:\"))\n        if err != nil {\n            return nil, err\n        }\n        templ = tt\n    }\n// FRED\nif templ == nil {\n    // try to load from repository (and enable dependencies)\n    name := swag.ToJSONName(strings.TrimSuffix(t.Source, \".gotmpl\"))\n    tt, err := templates.Get(name)\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"DEBUG: %s not found for %s in templates repository: %v\\n\", name, t.Source, err)\n        fmt.Fprintf(os.Stderr, \"DEBUG: loading from file...\\n\")\n    } else {\n        fmt.Fprintf(os.Stderr, \"DEBUG: %s found in repo\\n\", name)\n        templ = tt\n    }\n}\n\nif templ == nil {\n    // try to load template from disk, in TemplateDir if specified\n    var templateFile string\n    if g.TemplateDir != \"\" {\n        templateFile = filepath.Join(g.TemplateDir, t.Source)\n    } else {\n        templateFile = t.Source\n    }\n    content, err := ioutil.ReadFile(templateFile)\n    if err != nil {\n        return nil, fmt.Errorf(\"error while opening %s template file: %v\", templateFile, err)\n    }\n\n...\n``` . I have yet to update the doc. Coming up.... @casualjim I am well aware that this PR started with a very small change, and is gradually growing.\nThis was unexpected.\nSo your review at this intermediate stage is welcome.\nInspecting and thorough testing the generated code for BindRequest() for parameters showed out many shortcomings and generation bugs (e.g. arrays, nested arrays, default values, special cases for Date, Datetime or Duration...).\nThis is the main reason why I had to muscle up the CI.\nSo far, we simply checked generated code with pattern. Now, we should be able to check that it compiles.\nOn my side, I have a more advanced testing suite which unit-tests BindRequest() with fixtures and check that validations are well processed. I am planning to contribute this as an additional template (with a --gen-test=operations option for instance) but it needs a lot of refactoring on my side to be generic (currently it is very much targeted to my own usage, since the unit test integrates an Hyperledge Fabric mock inside and checks the API response....).\nSample fixture used to test this P.R. Obviously, I haven't been able to generate such fixtures automatically...\njson\n[\n   {\n        \"expectInvalid\": false,\n        \"params\": [\n            {\n                \"in\": \"query\",\n                \"name\": \"deepNested1\",\n                \"value\": \"a b c,a b c|d e f, g h i\"\n            },\n            {\n                \"in\": \"header\",\n                \"name\": \"deepNested2\",\n                \"value\": \"a b c,a b c|d e f, g h i\"\n            }\n        ]\n   },\n   {\n        \"expectInvalid\": true,\n        \"params\": [\n            {\n                \"in\": \"header\",\n                \"name\": \"deepNested2\",\n                \"value\": \"a b c,a b c|d e f, g h i\"\n            }\n        ]\n   },\n   {\n        \"expectInvalid\": true,\n        \"params\": [\n            {\n                \"in\": \"query\",\n                \"name\": \"deepNested1\",\n                \"value\": \"a b c,a b c|d e f, g h i|x y z, u v w\"\n            },\n            {\n                \"in\": \"header\",\n                \"name\": \"deepNested2\",\n                \"value\": \"a b c,a b c|d e f, g h i\"\n            }\n        ]\n   },\n   {\n        \"expectInvalid\": true,\n        \"params\": [\n            {\n                \"in\": \"query\",\n                \"name\": \"deepNested1\",\n                \"value\": \"a b c,a b c|d e f, g h i\"\n            },\n            {\n                \"in\": \"header\",\n                \"name\": \"deepNested2\",\n                \"value\": \"a b c,a b c|d e f, g h i|x y z, u v w\"\n            }\n        ]\n   },\n   {\n        \"expectInvalid\": true,\n        \"params\": [\n            {\n                \"in\": \"query\",\n                \"name\": \"deepNested1\",\n                \"value\": \"a b c|d e f, g h i\"\n            },\n            {\n                \"in\": \"header\",\n                \"name\": \"deepNested2\",\n                \"value\": \"a b c,a b c|d e f, g h i\"\n            }\n        ]\n   },\n   {\n        \"expectInvalid\": true,\n        \"params\": [\n            {\n                \"in\": \"query\",\n                \"name\": \"deepNested1\",\n                \"value\": \"a b c, a b c|d e f, g h i\"\n            },\n            {\n                \"in\": \"header\",\n                \"name\": \"deepNested2\",\n                \"value\": \"a b c|d e f, g h i\"\n            }\n        ]\n   },\n   {\n        \"expectInvalid\": true,\n        \"params\": [\n            {\n                \"in\": \"query\",\n                \"name\": \"deepNested1\",\n                \"value\": \"a b c, a b b|d e f, g h i\"\n            },\n            {\n                \"in\": \"header\",\n                \"name\": \"deepNested2\",\n                \"value\": \"a b c, a b c|d e f, g h i\"\n            }\n        ]\n   },\n   {\n        \"expectInvalid\": true,\n        \"params\": [\n            {\n                \"in\": \"query\",\n                \"name\": \"deepNested1\",\n                \"value\": \"a b c, a b c|d e f, g h i\"\n            },\n            {\n                \"in\": \"header\",\n                \"name\": \"deepNested2\",\n                \"value\": \"a b c, a b c|d e e, g h i\"\n            }\n        ]\n   },\n   {\n        \"expectInvalid\": true,\n        \"params\": [\n            {\n                \"in\": \"query\",\n                \"name\": \"deepNested1\",\n                \"value\": \"a b c, a b c|d e f, g h i\"\n            },\n            {\n                \"in\": \"header\",\n                \"name\": \"deepNested2\",\n                \"value\": \"a 9 c, a b c|d e f, g h i\"\n            }\n        ]\n   },\n   {\n        \"expectInvalid\": true,\n        \"params\": [\n            {\n                \"in\": \"query\",\n                \"name\": \"deepNested1\",\n                \"value\": \"a b c, a b c|d e 9, g h i\"\n            },\n            {\n                \"in\": \"header\",\n                \"name\": \"deepNested2\",\n                \"value\": \"a b c, a b c|d e f, g h i\"\n            }\n        ]\n   }\n]. Take a look at cmd/swagger/commands/serve.go. It looks like the troublemaker is located here:\nhttps://github.com/go-swagger/go-swagger/blob/dfe8aa7cd3ac65f8d754cdf9ae285dd52a42e1d3/generator/model.go#L191\n. Could you please elaborate and provide a specific example of failure, because the one I provided above does indeed compile.. Hello. With this commit you have the possibility to customize the \"initialisms\" (upper cased words who want to keep in one piece). It should work as it used to with: --additional-initialism=SMS. https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md\n. I had started some work on the go-openapi/validate package to cleanly deal with overflows and lossy conversions but it's still work in progress (I believe it's related to issue#581).\nI don't think we are going to support bignum, but at least we cleanly could detect overflows at validation time.. Does the explanation provided in #1118 help?. OK just fixed it in my WIP branch. That would be in the PR#1372 if you don't mind. Works with current master. Hello @casualjim . This make me think of an issue I found when trying to generate from a canary spec which used mime types options (eg: application/json ; xyz).\nDo we have a specific runtime strategy to deal with such options?. If you have any idea I suggest we continue this thread on issue #1377 . Looks very much like #1093. Same here: for any body param with simple type, no validation is generated.\nIt works when forcing a model to be generated (e.g. using $ref: ...). I feel like issues #1062, #1093, #1392 and #1393 are closely related and indicate shortcomings in model generation which are quite similar to those I am currently fixing for simple parameters (validation of nested structures and applying defaults).. Regarding [3], I can fix go-openapi validate for that to issue a warning instead of a validation error.\nEDIT: I just checked master go-openapi/validate  (this version is vendored in go-swagger master) and the required+default should readily give you only a warning and consider the spec valid.. Regarding [1] and [2], I am not sure of what to do.\nPerhaps we should just initialize defaults on schemas at the property level and stop there. Trying to initialize further down may lead to unexpected structures. For simple parameters and headers, the problem should not occur since nested structures are necessarily arrays (so either the default is explicitly set at the top level, or we default to an empty array, no matter what defaults for items are ).\nFurther, I am wondering how we should handle response schemas when such defaults are defined? Currently, the response is just an empty structure.... Please do not deviate from the original topic of this issue, which is a bug/request for enhancement.\nIf you feel like having questions or remarks regarding the default vs required, feel free to open a separate issue on that.. I've had a couple thoughts about managing defaults in models.\nHere are a few requirements:\n1. The default instance should be available to the API developper, either as a const, a var or a factory method\n2. Since it's drilling down nested structures (but not arrays), the default value should be resolved at init time, not at every new model creation\n3. It should work, even though some of the types are regenerated (so the existence of a default underneath is not known in advance at codegen time)\n4. It should be workable from any code using models, not necessarily an API response\n\nFor primitives, we may manage it the way we do with enums (a const/var)\nFor complex objects, we may publish a NewXXX() factory method, the way we do it for response payloads.\n\nThe problem I see with (2) is that every model with or without default would require some memory to store the default instance. The problem with (3) is that it is difficult to optimize this at codegen time for types with no default.\n. 1. OK agree that the factory is a must. I am wondering however if primitive default values could not just also generate consts, so they might be used in code the same way as enums (like in if myPrim == myPrimDefault { ... do something special ... }. \n2. Good point. This is about performances. If we indeed need a deep clone, then there is no incentive in \"caching\" the default: calling nested factories would be about as fast, unless we know in advance that we don't walk through pointers.\n3. OK. So if we skip req (3), the factory method may be optimized and store a default initialized model only when required. This should be documented so people know that they need to regen their models if some defaults change.\n4. OK. @xibz looks like you are referring to the specific use case of a response model. My initial intention was to have standalone models capable of self-initializing with nested objects.. Found a bug with duration type. Patching up.\nFor the longer term, I believe we would need a less hacky way of figuring out how to initialize custom types.. On the closed version of this PR (#1372) you also had a comment about the goInitializer funcMap function (i.e. using byte instead of string()). Did not really abide by your comment.\nOk with this now?. Without any proper spec example, we hardly can help you.. @ghoroubi I am currently active on some other aspects of the toolkit. I don't even know how this spec generation stuff works and never tried it... Sorry not to be very helpful on this one.. Possible duplicate of #1281 . Tested with PR#1478, which fixes the problem (it was indeed a duplicate issue).. Closed with #1478 . There is a known issue around there. You might try the workaround suggested by #1198.. Hi Greg. You may check out in the fixtures from fo-openapi/validate, there some test cases with additionalProps.\nYou might have the fixture/canary/kubernetes/swagger.json, but I don't see there are validations with additionalProps and anyway, this one has other problems with generation.. Even this one? https://github.com/go-openapi/validate/blob/master/fixtures/validation/valid-referenced-variants.yaml. This spec is not valid (it's for testing validation messages). But you have a section with additionalProperties and patternProperties with different required / format patterns (actually patternProperties are not supported). Well this is probably not a good example. Better to start fresh off. @jcoyne please close your issue if you are satisfied with the fix. Thanks. Hello @casualjim. Does this one fixe #533 ?. It seems that the parsing error return directly without being wrapped by go-openapi/errors. Hence the code 500.\nI would say it's there: https://github.com/go-swagger/go-swagger/blob/dfe8aa7cd3ac65f8d754cdf9ae285dd52a42e1d3/generator/templates/server/parameter.gotmpl#L138\nIf you take a look below, other errors once the form is properly parsed are well handled with 4xx.. with PR #1449 parsing errors on multiform data would result in HTTP 400. @jucardi do you think this issue could be closed now?. This construct is not legal in Swagger 2.0. $ref should be under the schema section.\nThe panic issue has been fixed by go-openapi/validate#72 and should be soon vendored with go-swagger. You're right. I have been misled by the bug I corrected yesterday with invalid $ref in response.\nI have to check your case with the newest go-openapi/validate before releasing it to go-swagger.\nThanks. Yeah I found it. Strange that none of the 00's fixtures used to test validate did no exhibit this pattern.\nHave to check how the spec package renders to $ref to validate. It is supposed to expand it as a Response object. I'll look at it tonight.. OK I tested it more seriously. Here is my takeaway: there are some good and bad news.\n- I could fix the panic issue. It was actually a test case I was missing.\n- The #/responses does not resolve to external references (same for #/parameters)\nIt looks like $ref to external files are only resolved for schema objects.\nThat should be confirmed by our $ref-resolver experts around (@kreamyx, @casualjim)\n. @kreamyx  not really closed. I opened a side issue on validate regarding the panic behavior, which is now closed.\nBut I needed your advice on the $ref resolution part (which is in spec, not validate).\nI added some fixtures in validate to exhibit this behavior:\n- $ref in schema follow external $ref and are expanded by spec (e.g. when I call spec.Ref.GetPointer() I never have to iterate)\n- $ref in response or parameter outside the schema object (like exposed in this current issue) are only resolved locally at this point and not resolved when calling GetPointer(). It only works when the parameters or responses sections are declared locally in the same document\nI don't really know if this behavior is intended or not.. @kreamyx I don't really understand the subtleties with path setting. What should be done to mimick the flatten behavior?. I did not change validate for this (only shuffled the code) and never really grasped how the ExpandOptions with path should be set. I just let it unchanged. I believe it takes the path from spec.FilePath() or similar. in validate all calls to get point have been centralized in helpers.go (because a lot of safeguards are factorized here) and the only explict Expand call is made in spec.go . You may either check yourself or explain how to set the path correctly. This case is illustrated in validate with fixtures/bugs/73 . Example or default are just spec walkers : they explore the spec in search of examples (resp. defaults). This is what caused the panic.. you are pointing to the vendored source, right?\nthere have been much change in go-openapi/validate which has not been vendored yet.\nso this code is now somewhere else. but basically, it has not changed much [https://github.com/go-openapi/validate/blob/4d761f0670d764beea9b5495020310edb2bd48f7/helpers.go#L221]\nbut yes, the intent is to expand the response. I took it in this state and it's still, plus/minus refactoring and safeguarding, doing the same thing\nSo my problem is not really dealing with the panic (I could grasp that one) but rather\nhow I could follow external $ref here. \nThe test case in current validate master may be run from here: https://github.com/go-openapi/validate/blob/4d761f0670d764beea9b5495020310edb2bd48f7/spec_test.go#L719\nI think we would be better off  reasonning with the current validate master than with the vendored one. We will, definitely. That would be a nice thing. \nThere is just a small catch here, using some pre-cooked functions from spec.\nIn validate, I tried to push some evolutions to catch ALL errors and not just stopping on first problem hit.\nI know that spec pkg is not very good at \"continuing on errors\" (I think I posted an issue on that and I might amend some things). \nEssentially, this is working the same way in vendored and master versions. But the code has been much shuffled around so it might be hard to follow.. I see a spec.ResolveParameter() exported.. This is the one used by the generator.. generator uses ResolveResponse() too. ok. let us export these, then. I'll take care of the upgrade in validate.. ok thanks Karim\nFred. @mikeb333 sounds interesting.\nYou might share your insight with a full example on the repo to illustrate this. This is a recurring question.. I made a patch to handle null in enum (this another issue involving quay.io).\nThe current issue I test too with this patch and works.\nThis patch is still under development, since fixing this particular issue is just a by-product of another feature.. Hello. That must be bug I introduced with latest PR. I tested and rested all these generations...\nI'll check it out ASAP.. I think I only tested cases where there are nested validations. That's probably the point.. Hmm. Are you sure you got latest release? This nested params thing has been subject to a he.avy PR on friday\nWhen I build your testcase on master I precisely got the following code:\n```golang\nfunc (o *GetPathParams) bindFilter(rawData []string, hasKey bool, formats strfmt.Registry) error {\n// CollectionFormat: multi\nfilterIC := rawData\n\nif len(filterIC) == 0 {\n    return nil\n}\n\nvar filterIR [][]string\nfor _, filterIV := range filterIC {\n    // items.CollectionFormat: csv\n    filterIIC := swag.SplitByFormat(filterIV, \"csv\")\n    if len(filterIIC) > 0 {\n\n        var filterIIR []string\n        for _, filterIIV := range filterIIC {\n            filterII := filterIIV\n\n            filterIIR = append(filterIIR, filterII)\n        }\n\n        filterIR = append(filterIR, filterIIR)  // <-- this is what I get\n    }\n\n}\n\no.Filter = filterIR\n\nreturn nil\n\n}\n``. The signature for latest is the comment \"items.xxx\". I'll take your example and add it to our non-reg test suite.\nEven if it worked, it is slightly different from the cases I did test, and those nested constructs are highly sensitive.. @kuai6 you might close this issue if it is okay with you. Muscling up the docs is a much needed, but tedious and an act of pure benevolence ...\nThere a 2-3 such questions linked to using helpers. I am thinking about moving these threads to our FAQ.. Enhancement merged with PR #1574 . Thanks \nThe point is about locking in the same versions as the generator.\nSo what you suggest I should just copy go-swagger's lock file and then everything gets vendored with these versions?. So do you think that generating a dep lock file as target with the same requirements as the generator would be a helpful feature? If not, I may well use your hint in my toolchain as external stuff. Thanks for the tip btw. @casualjim  : How about tagging go-openapi packages in line with go-swagger?\nThat would ease quite a bit the pinning process with dep and avoid to vendor go-swagger itself.... thank you @casualjim : you tagged _all_ repos. Now dep recognizes this and stick to these version.\nGreat!. Looks like appveyor stalled on this one... Is it possible to launch a new CI run without bumping a new commit?. There is indeed much room for improvement with error messages.\nSee also #1234 . and here #121 \nand also here #1308 \n.... This probably means that yaml needed some quotes to better detect types. YAML's _automagically_ detected types are sometimes confusing.. When using thegenerate servercommand, a repeatable--operation=xxxis available to restrict the scope of operations. That should normally work for you. This option is not available forgenerate model`.\nDoes this address your problem?. Could reproduce this and the work around as well, but could not find a fix right away.\nAgain a failure with $refs...\nOpened a dedicated issue for that in go-openapi/spec#65. @casualjim  It seems he has. I tested this directly with spec and this $ref is not resolved at all, unless you explicit the filename (in its own file!), as suggested @gregmarr . @BertrandGouny  go-openapi/spec#70 should solve your issue. . Salut Bertrand.\nYou should either update vendor, or if just for temporary testing setup, temporarily rename vendor/github.com/go-openapi to another name and rebuild swagger.\nPlease pull the latest spec master, since another patch on this has been released.\nI also had problems when testing validate with the testcase I added from your initial input, but not a panic. The spec is more important than the gopkg.toml, unless you want me to check every single commit number in your attachment?. What is the TL,DR of your gopkg? you got an updated spec and validate compared to the go-swagger vendor in go-swagger?. If you use the workaround mentioned above by @gregmarr , does it resolve fine?\n. I assume it has something to do with transitive $ref ($ref pointing to another file then another $ref in the same file). Correct in your case?. Thank you Greg. I was just suggesting this to help pinpointing the actual issue.. I could narrow the issue and prepare a more general testcase.\nHowever, the fix is not obvious.\nThe problem lies in spec expandResponse() and expandParameter() when the SkipSchema=true option is used (which is what the flatten command uses).\nWith this option, remote $ref's on the response (or parameter) object are properly expanded, but the content of their schema is left unchanged. So any $ref which is in the remote schema is not relocated to the new root after expansion (or even expanded).\nThis does not happen when SkipSchema=false, because all $ref's are properly processed.\nThese functions should in my opinion be updated to expand remote $ref (and only those) in the schema, even though the skipSchema flag is set. . Hello\nAs far as I know, the only generated file which mentions \"safe to edit\" is configure_api.go.\nThere used to be an inconsistent comment in this template and this has been solved now with current master.\nDuplicates #1384 . Yes. Principals are assumed to be part of the model package. So you may redefine your principal there.\nThere must be some assumptions anyway. How would the generator know that your struct is defined in this or that package?. Sure documentation would be helpful, but there is nobody around to help... :)\nI believe this behavior comes from the name mangling. . Duplicates #1347 and #1348 . I found out there is a remaining bug around the same lines, for arrays. I am pushing another commit for this. Technical issue on AppVeyor grid. So I removed these entries from the map to avoid this kind of wrong generation:\n```\n// Code generated by go-swagger; DO NOT EDIT.\npackage models\n// This file was generated by the swagger tool.\n// Editing this file might prove futile when you re-run the swagger generate command\nimport (\n    \"io\"\nstrfmt \"github.com/go-openapi/strfmt\"\n\n\"github.com/go-openapi/errors\"\n\"github.com/go-openapi/swag\"\n\"github.com/go-openapi/validate\"\n\n)\n// AnObjectOfInterfaces an object of interfaces\n// swagger:model anObjectOfInterfaces\ntype AnObjectOfInterfaces struct {\n// a reader\nAReader io.ReadCloser `json:\"aReader,omitempty\"`\n\n}\n// Validate validates this an object of interfaces\nfunc (m *AnObjectOfInterfaces) Validate(formats strfmt.Registry) error {\n    var res []error\nif err := m.validateAReader(formats); err != nil {\n    // prop\n    res = append(res, err)\n}\n\nif len(res) > 0 {\n    return errors.CompositeValidationError(res...)\n}\nreturn nil\n\n}\nfunc (m *AnObjectOfInterfaces) validateAReader(formats strfmt.Registry) error {\nif swag.IsZero(m.AReader) { // not required\n    return nil\n}\n\nif err := validate.FormatOf(\"aReader\", \"body\", \"binary\", m.AReader.String(), formats); err != nil {\n    return err\n}\n\nreturn nil\n\n}\n// MarshalBinary interface implementation\nfunc (m *AnObjectOfInterfaces) MarshalBinary() ([]byte, error) {\n    if m == nil {\n        return nil, nil\n    }\n    return swag.WriteJSON(m)\n}\n// UnmarshalBinary interface implementation\nfunc (m AnObjectOfInterfaces) UnmarshalBinary(b []byte) error {\n    var res AnObjectOfInterfaces\n    if err := swag.ReadJSON(b, &res); err != nil {\n        return err\n    }\n    m = res\n    return nil\n}\n```. At the moment, binary does not support any validation. I do not consider this a bug atm, even though purists might jump at this.. Hey Ivan.\nI put back the entries in the map (I am still struggling to figure out why they were there in the first place, but I am not arguing...)\nI extended test cases and fixed some more issues with formatting under various nesting conditions.. How about making it a generation option (e.g. available in ModelSection from yaml config)?. You might be interested with analysis in #1089 . Have you taken a look at the example here? Several combinations are examplified there.. How goes your spec example through the other toolkit packages, e.g. spec, analysis an validate?\nWe should make sure that putting an empty object under security is well supported in all these places.. I can see that in analysis, the case for an empty SecurityRequirement is well there.\nAfaik, validate does not check security items at the moment.\nSo it might be good.. > Unfortunately, adding additionalProperties: true to the schema doesn't do anything.\nThis could just be a matter of setting some default behavior. The current mapping strategy assumes that undefined additional properties won't be consumed and favors a tighter model against a little breach in the JSON-schema. I don't need this one now, but adding such a generation option is quite doable.\nMy point lies somewhere else: I wouldn' have expected that an object correctly identified as a Map by the analyzer is rendered as interface{}.\nI admit I tagged this additionalProperties maybe a bit too lightheartedly... In my (perhaps uninformed) view, map[] <=> additionalProps,.... Yes. That's precisely why I am asking for any special reason to prefer interface{} to map[string]interface{}.\nI might have missed something.... I think that the correct behavior should be:\n- empty schema ({}) => interface{}\n- empty object => map[string]interface{} (that works for instance when you state: \"additionalProperties\": {}\n- empty items in array (forbidden by swagger, but supported in codegen): []interface{]\nIt works as expected like this in most instances but in the case of empty object with \"additionalProperties\" let unspecified.\nObviously, this is a minor finicky point... . So the culprit template is here.\n. @mhmxs  this is what comes out of your spec now that the circular $ref issue is ok. At first glance, I would say that we are checking the the parent type IsNullable and not the type defining .Items.. > We are waiting for new version\n@mhmxs I hinted on where the problem probably lies but I am not going to implement a fix any time soon, since I am priorizing things. \nSo to let you know, I am not going to work on issues currently tagged as: \"generate spec\", \"additionalProperties\", \"discriminator\", \"additionalItems\".  Some other contributors might have different priorities and fix these issues for the benefit of the community. \nFeel free to contribute with PRs.... Found the problem. But this cloudbreak spec full of of additionalProperties is not fully passing yet.... @mhmxs hi there. I tested the full generation with cloudbreak spec, which is now part of our CI tests.\nValidation seems ok on the tricky parts with empty objects and additional properties (but the spec is very large, so I might have overlooked some details). Feedback from the field is welcome.. Oops! I've seen a glitch in my CI script. I am fixing this right away. .. and appveyor is stuck once again. Looks very much like: https://github.com/go-openapi/validate/issues/43\nDoes it work if you replace \"items\" by \"item\"?. I mark it as duplicate but keep it for NR fixture for when we have a fix in go-openapi/spec for this. You should not have a body with a GET method.. I am just guessing since you are not providing much context. Difficult to provide useful advice with such scarce information. Glad you did solve you issue anyway.. There is a specific check for this in validate, but something might have been overlooked.\nCan you reproduce this on master?. @aleksandr-vin have you tested the spec validation with a json spec?\nIn my opinion, the yaml parser silently filters the duplicate key (https://github.com/go-yaml/yaml/issues/154).\nEDIT: I did it and it worked the same... I assume the json unmarshaller does this filtering.. This particular race condition should no more occur with more recent servers. This mechanism has been largely revisited since.. You can embed anything you want in the copyright which is rendered as a / / comment. The \"type\" keyword refers to valid JSON-schema types.\nIf you want to construct a custom object type, you would define as schema for such an object then reuse it with \"$ref\" afterwards.\nNow if you want to define a complete custom object with custom serialization etc..., you may use the \"x-go-type\" extension: go-swagger does not generate anything there and reuse your type in definitions.. Have a look there https://github.com/go-swagger/go-swagger/blob/master/fixtures/codegen/existing-model.yml#L84-L88. It generates interface because you did not set any property: so it is considered a generic object\nDefine a name schema for JSONString and JSONint with x-go-type then refer to these in your properties Name and Status with $ref. That should work. denco is embedded in go-openapi/runtime\nIf you want to change that, you need to customize this package. Workaround: manually inserted the same securityDefinitions in both specs and it works.  @ccamel thanks for sharing this analysis.\nDo you think it might be worth a PR to guard the generated server against such blocking?. Yep. Great.. go-swagger is essentially a generator. There are 2 main use-cases:\n- generating code from spec (server, client, model)\n- generating spec from code (e.g. for documentation, or reuse in other swagger-compliant generators)\nThe tool comes as CLI with no support for interactive commands (an idea about this has been proposed: #139)\nAdditionally, go-swagger may be used to:\n- serve a doc UI (redoc, swagger-UI)\n- validate a spec\n- mixin multiple specs\n. This \"loopback-style\" interactive feature is actually provided by the UI component (e.g. redoc or swagger UI), not directly by go-swagger.\nIf you run your generated server and serve the UI you should be able to exercise your API from the UI document.. Looks like a bug: for some reason, the generator lost track of the needed validations for your HostConfig.\nMy guess would be that the nested allOf is the culprit, but we need more analysis on this.\nJust to narrow down the case, does it help if you declare HostConfig as a required property?. yes it is a bug. And now we know where it is: generator not bubbling up the HasValidations flag when property is itself a non-required allOf.... Validation has been much improved since v0.13, but there is still some work to be done.\nAll contributions are welcome.. @zhuangqh shoud work now with current master (not 0.12...).\nTested it with both flatten and expand mode (the --skip-flatten).\nStudying validation with your testcase did uncover a new bug with enums in nested allOf, specifically when one use --skip-flatten. I am taking care of this one for the upcoming work on enums.. Dependencies must be installed before generation. Goimports cannot resolve strfmt and removes the import line.. because dep builds a vendor directory \nif this vendor is not in your generation target, goimport cannot find it. Rebase ongoing - ignore this for the moment. Rebased - good for review. @ags799 you got a point here. However, this is quite an undertaking... What do you suggest we should start with?. The way I see this validation is that:\n- it should be allowed to be Zero provided the previous tuple property is defined (they cannot be arbitrarily zero: only trailing elements may be omitted)\nAny thought?. Did I misunderstand this reading: https://cswr.github.io/JsonSchema/spec/arrays/ ??\n\nNote that the default behaviour of JSON Schema allows us to have fewer items, as long as the \ncorresponding (sub)schemas are satisfied. \n. if any  is important\n\nIn our code, we pass through all P_n_ properties and check they are required.\nThis means that if, say, the last one is omitted the validation fails.\nI understand it is positional, so P_n_ may not be omitted if P_n+1_ is  already there.. OK so here are some facts.\nHere is a simple schema generating a tuple:\njson\n{\n  \"type\": \"array\",\n  \"items\": [\n    {\n      \"type\": \"string\",\n      \"enum\": [\n        \"CONST1\",\n        \"CONST2\"\n      ]\n    },\n    {\n      \"type\": \"string\",\n      \"enum\": [\n        \"CONST3\",\n        \"CONST4\"\n      ]\n    }\n  ]\n}\nHere is the model generated from this schema (attached).\ntuple_thing.go.txt\n\nNOTE: The generated code has been slightly modified: the unmarshalling fails on nil pointers.\nThis is another bug and this story shall also be told...\n\nHere is the sample data to be validated:\nFixture 1: [ \"CONST1\", \"CONST3\" ]\nFixture 2: [ \"CONST1\" ]\nFixture 3: [ \"CONST3\" ]\nFixture 4: [ \"CONST1\", \"CONST3\", \"anything\" ]\nI tested validation with: generated model validator, go-openapi/validate validator, node JS ajv and python jsonschema validator.\n| Fixture #  |   Model validator  | go-openapi/validate |  ajv   |  python |  comment                                  |\n|------------|--------------------|---------------------|--------|---------|-------------------------------------------|\n| 1          | Pass               |          Pass       |  Pass  |  Pass   | as expected                               | \n| 2          | Fail           |          Pass       |  Pass  |  Pass   | incomplete tuple should pass              |\n| 3          | Fail               |          Fail       |  Fail  |  Fail   | as expected because of the enum constraint|\n| 4          | Pass               |          Pass       |  Pass  |  Pass   | as expected because default additionalItems=true*\n\n\n: model validator just ignores additionalItems=[true|false]. I noticed that during my testing PR #1481 but did not pay enough attention to it.... I think it would be wiser to tag the goopenapi repos as releases. @casualjim do you plan at some point to tag the go-openapi repos in line with our go-swagger releases?\nI believe this would solve many dependency issues like this one.\nAlso to allow go gettability with go.pkgin, we might be better off with tags like \"v0.14\" rather than \"0.14\". Different type, but same cause as #1339 . @jcoyne : should be fixed by #1508. Could you please confirm?. @stevecookform3 please open a dedicated issue for your problem, which might not be the same as the one reported by @jcoyne. Also please include your swagger spec (or a minimal spec which reproduces the problem) so it is easier to reproduce the problem and assert it is solved.\n\n\nRegarding install/compile, there is not much to be said besides go getting the dependencies for your generated code to work (go-openapi packages and a few others). Look in the FAQ on the doc site (http://goswagger.io) or search similar questions in issues (label: \"install & setup\").. I assume you can get along that by defining a nullable date-time:\nyaml\ndefinitions:\n  nullableDateTime:\n    type: string\n    format: date-time\n    x-nullable: true\nUsing this aliased type in your model, you should have a omitempty added to your json tag.. Give the x-nullable a try...\nAlso, similar discussion the other way around (unmarshalling) in: https://github.com/go-openapi/strfmt/issues/20. The x-nullable flag is not honored because you used the string \"true\" and not the boolean true.\nTherefore your model does not recognize you want it rendered as a pointer. You may override the protection on structfield by changing the flag here and rebuilding go-swagger.. We are open to new features. Go ahead and submit a PR. \nSo the feature would be to duplicate tags everywhere with a new headline, right!?\nThere were some related past initiatives that might be a source of inspiration for you: https://github.com/go-swagger/go-swagger/pull/1048. Hello. For some reason the appveyor CI did hang (it happens sometimes...).\nYou should be able to force a refresh by issue a git push --force upstream of your branch.. @zuxy  your understanding is correct.\nThe spec validation should warn you about mixing up default with required.\nIf you override this validation (with swagger generate model --skip-validation), the model generator would override the required clause, and use the default.\nI am not a big fan of this swagger spec restriction, because it is a deviation from the jsonschema spec.... --skip-validation skips the call to swagger validate {spec} that is normally carried on before generation. \nFor some use cases, we have to, since go-swagger supports things that are not stricly swagger-compliant.\nThis one is an example: some overrides silently take place here.\nIt is the same if you want, say, to use additionalItems: we support it, but it is not swagger compliant.. Yes you can pass the information through the principal model.\nSee the example there which should correspond to your use case: https://github.com/go-swagger/go-swagger/tree/master/examples/composed-auth. This example has been pushed recently and the doc site has not been updated yet.\nYou should have everything in here to play with JWT with different types of auth (API keys or even OAuth2).\nFeel free to contribute to the repo and enrich this example with new findings if you are working with this.. TODO:\n- [ ] Found a template bug with enum validation for nested anonymous AllOf (fixture-1479-part.yaml with --skip-flatten). Will fix it with next PR on enums.. that was quick!. OK the issue looks like it is here.\nI have not tinkered with the client so far, but it looks to me that it is more a matter of properly nesting the {{ if ... }} guarding the null param to SetBodyParam(...) than adding more and more stuff there.\nSomething like this don't you think?\n{{- if .IsBodyParam}}\n  {{- if or .Schema.IsInterface .Schema.IsStream (and .Schema.IsArray .Child) (and .Schema.IsMap .Child) (and .Schema.IsNullable (not .HasDiscriminator)) }}\n    if {{ .ValueExpression }} != nil {\n  {{- end }}\n    if err := r.SetBodyParam({{ .ValueExpression }}); err != nil {\n      return err\n    }\n  {{- if or .Schema.IsInterface .Schema.IsStream (and .Schema.IsArray .Child) (and .Schema.IsMap .Child) (and .Schema.IsNullable (not .HasDiscriminator)) }}\n  }\n  {{- end }}\n}\n{{- end }}. Oh blast! The appveyor CI seems to be again stalled.... @stevecookform3 \nlooks like appveyor is (again! it occurs from time to time) stalled.  Could you please kick him by pushing the PR again (e.g. git push --force upstream) ?. OK. The way I am doing it is to git push --force upstream to my fork. This wakes up everything.. Related: about spec changes, we had traced as a possible enhancement: #151 . CI checks are blocking because of untested error paths.\nHowever, this is impossible to test, since the only cause for error is an unresolved $ref, which causes a panic in spec expander.. Thanks Ivan.\nWould you like that I remove the panic() in spec/expand()?\nI made a \", err != nil { return err}\" explorer testcase that improve test coverage a bit.... set the SWAGGER_DEBUG variable to get a debug output. PR #1507 was a big one dedicated to model validation. Nothing was intended regarding type aliasing, \nbut there might be some unwanted side effect.\nI tested as much as I could with model generation, but did not test specifically with schema from responses, since nothing did change in this logics.\nWhat would be interesting here is to figure out if we have an unstable generation behavior (like you carry on the codegen 10 times and make sure it does not switch behavior).. @saward : this issue with representing fields as pointers or not is a recurring one. \nYou may learn more about the whereabouts by searching our issues tagged \"nullable\".. TL;DR:\n- Required fields generate pointers\n- Non-required fields do not\n- As for current, we don't make a distinction between an absent optional property and this property set to its type's zero value\n. Dup #1188 . Could you please post a more complete example? It is difficult to figure out the failure with such reduced information.\nBesides, could you please detail what you mean by \"running the server\"? Is it panicking when starting up? When you post  a specific request? I assume you posted a request to serve the spec, right?. I did not know either about this embed...\nI am also running with custom main and I would rather that we have options to remove all these memory hungry structures.. @BertrandGouny I had the very same issue and adopted what Greg is now saying:\npattern: \"^\\\\S.*\\\\S$\" \nBefore that, I simply trimmed the parameter at the beginning of my operation, with strings.TrimSpace() and handled the error manually (e.g. sending back a 40x error etc...).. My case was to avoid leading or trailing blanks, so your regexp would be different. But you see the idea.. Perhaps something like '^.*\\\\S.*$'  ... (at least one non-blank). you close it. That's the policy in this house, man... \ud83d\udc4d . Just to make sure (because I've specically made some recent fixes on the allOf unmarshaller recently): does it work when you remove the \"discriminator\" property (so the type becomes a regular allOf)?. ouf.\nI was sure I had fixed this issue for regular allOf...\nWell, for discriminators I made sure old issues were fixed, but there certainly are more of them.. There is a special unmarshaller template when we switch to discriminated.. I fixed a similar issue for regular allOfs here: https://github.com/go-swagger/go-swagger/blob/c8a59d30b041b12eeda1e4b821d844ddc0e9ef98/generator/templates/tupleserializer.gotmpl#L220\nI don't know why we call a special version of unmarshaller in the subtype case, but you can borrow from this if you want to bring in a fix.. Have you tried to put the go-swagger package in your vendor? This way, all dependencies should normally be resolved and pinned to your release.. Interesting use case indeed. I never tried the client, but my first attempt I am planning is to do like you... So your experiment is of great interest to me.... we have had this discussion with @gregmarr. That's the way he is pinning dependencies.. Yep, I thought I had tested this... Will fix this asap. does it work when you add a slice validation in your array, like 'maxItems: 10000' ?. OK. I'll have a fix over the week end.. ok fixed it in dev without visible regression. Now the tedious process of adding more UT for codegen...\nI'll do that tomorow.. If this is related to body parameter, we have a special case and a fix needs to be delivered (see #1536).\nI don't see in your excerpts from specs the parameter definition. Are we talking about the generated model for a definition? A validation in a xxx_parameter.go for a body parameter?. I'll fix both over the week end (#1536 and #1537 if I can get to reproduce it). #1536 is already on the way.. @johnliu26 if you quote your spec with ```yaml or ```go that'll make them easier to read on github. I am working on it. Please post your full spec, not just excerpts. It helps a lot to a have a full picture. OK @johnliu26 I could reproduce your case 1, the one that does not work.. ok fixed it in dev without visible regression. Now the tedious process of adding more UT for codegen...\nI'll do that tomorow.. Ok now in FuncMap. This one was intended as a quick fix only, with lowest impact on UT's expectations.\nI think I'll close this one  now and provide a better fix, with heavier impact on UTs.... Could you please mention, in the curl examples you gave, which one is a correct base64 and which isn't?. The problem is generic with this format.\nUnlike other formats (e.g. date, uuid...), the actual validation is carried on by the unmarshaller.\nThe format validation in this case applies to raw strings and not already unmarshalled values.\nIn my opinion, we should remove the validation on this format everywhere (models, parameters).. Ok. So I think that in generator/model.go and generator/parameter.go, everywhere we put the exception on format validation with IsStream (for format: binary), we should add this exception too for format bytes.\n. duplicates #1393 . As a work around with current master, you may set:\n```yaml\ntaskUsCfg:\n    type: object\n    properties:\n        activity:\n            type: integer\n            minimum: 0\n            maximum: 100\n            default: 50\n    default:\n      activity: 50\n```. Closed as marked duplicate.. As per swagger, defaults MUST validate their schema. This differs fro json-Schema spec.. Not sure this would solve your issue, but I would check that:\n1 - GOPATH env is defined\n2 - swagger runs somewhere under $GOPATH\n3 - the dependencies for generated code are resolved (e.g; https://goswagger.io/faq/faq_server.html#what-are-the-dependencies-required-by-the-generated-server)\n. Following your report, I pushed a doc update yesterday (not merged yet).\ngolang is sometimes confusing, because it comes with a lot of conventions which are different from other languages.\nThe source location constraint is part of it.. Looks very similar to #1473 . Yes there are several bugs with the --skip-flatten (aka \"expand all\" mode).\nThis one on body param I could see recently too. I am working on fixing this.\nBeware that the option name \"skip flatten\" is a bit misleading: it does not only skip the flattening, but fully expands everything.. It is also my opinion that the choice to \"expand all\" makes this option a poor choice.\nBut it is here, and unless we do something better, the code won't change by himself overnight.\nBesides, making everything anonymous in the schema makes things even more difficult for the codegen.\nThat is also why we have some problems in this mode.\nI believe this binary choice (flatten everything or expand everything) was forced by many problems encountered in the past with $ref. A good solution in my view would be a \"flatten light\" intermediate solution that just resolves external refs and refs to something else than a definition (this is actually the only $ref preparation setup that is really required by codegen).. The expand all option was a bad choice - I don't know why we took this direction ...\nGiven a bit of time, we want to revert this. \"Flatten minimal\" would just resolve what is necessary for the codegen to work (external $ref's, indirect $ref's, $ref's to some  arbitrary place in the schema).\nNot only this is possible, but this is necessary in order to make the thing usable to an API developer.\nThere are others itching things with this go-openapi/analysis/flatten.go, and we want to improve this as well.\n. For this particular issue, I consider my assignment is to fix the inconsistent behavior in expand mode, not to fix the flattening (this is another story).\nI would like to first make sure everything works with or without anonymous structures before changing the way we produce anonymous structures vs definitions.. Here are some points that I am considering faulty with go-openapi/analysis/flatten.go.\n\nToo many anonymous OAIGen definitions generated. Indirect references should be resolved. Only $ref to anonymous places in the schema should be left as OAIGen.\nHave an option to stop flattening as soon as references are good enough for the generator (this includes the OAIGen definitions above). At this stage it is not necessary to create all $ref's for complex things (this is the minimal flattening discussed above).\n\nCreating $ref on complex things is not necessarily a bad thing, but:\n\nit should consider maps of simple things as simple things (e.g. don't create a definition for map[]{my object}, the definition for {myobject} should be enough)\nallow more options/control to avoid systematically breaking simple allOf into \"xxxAllOfn\" definitions\nleave as anonymous special allOf use-cases, such as: allOf: [ {empty schema with validation only}, {empty schema with x extensions only}, { possibly some more tbd } ]\npropagating x-go-name (as prefix) to newly created definitions: creating new definitions introduces some naming conventions. If a x-go-name has been set in the original structure, new names are no consistent with their container...\n . ok so now the preparatory work is in the PR pipe to get full support for both full flatten and full expand (aka \"--skip-flatten\"). I may start now implementing some more nuanced behavior in flatten.. There are additional rules to produce a nullable primitive (see:  https://github.com/go-swagger/go-swagger/blob/eaa48cf7f10c39782e3ec106c4911dea421bed45/generator/types.go#L281)\nex: minimum or maximum = 0, or minimum < 0 and maximum >0 \n\nThe idea is to be able to distinguish the zero value for primitive types:\nMy example specifically triggers the case when you set minimum: 0.\nThis nullable status is overriden in some contexts: in slices, the element is not nullable, because we assume that unmarshalling a slice will not produce unset values. I suppose the same logics apply to maps.\nThe problem I see is more about being consistent with this kind of choice: here, there is a failure because the GoType in the map is not consistent with the GoType in its element.. My current solution for this is specifically for aliased maps like map[string]{primitive} or map[string][]...[]{primitive} to follow the nullability status of the inner primitive element.\nSo this would give map[string]*int64 or map[string][]*int64 because otherwise, validation code would skip the validation of a zero value (i.e. calling swag.IsZero() then continue.\nThis fixes inconsistency problems, but leaves open some problems of nullable primitive with validations.\nBest in my opinion would be to render a primitive as a pointer when it has some validation, full stop, instead of trying to figure out minimum, maximum and so on, which leaves several holes. This is just an opinion and I may have missed some deep reasons why we do it like this.\n. It is not the validation method, but the schema which is inconsistent.\nI could fix the problem this morning by specifically addressing aliased and anonymous maps of primitives and arrays of primitives. This did not break the overall logics (like tested by PointerLifting), but fixed the problem of inconsistent generation (i.e. at some level you declare map[string][}int64 and at a deeper level, it becomes []*int64...)\nSo the problem is not to have a nil pointer really, but to have a meaningful element equal to the zero value.  This was the whole point of the nullableNumber(), nullableBool(), etc., right?\nSkipping the IsZero() check could be a solution. But why did you put it in there in the first place, then?. And wasn't the whole point in your past \"Lift pointers\" tentative to make more things pointers?. but we have this zero value issue\n. OK. Thanks for the explanation.\nI started this fix on maps for body parameters, and the more I am testing this, the more I feel trapped with all these: testing a fix uncovers new bugs, and so on... I already have some other unpleasant discoveries to fix on my todo list...\nMy initial objective was to properly render maps of simple things, not to recode the entire typing system we adopted. That's why I proposed a light fix which makes a pointer (or rather, omit to override a pointer to a non pointer...). \nRemoving the swag.IsZero() call is probably the thing to be done but there are 394 impacted lines in codegen test, and for every one of them, I would have to figure out if this was the right thing to do or not... So this is not practical.. And there will be pointers only in the strange places where the nullableXXX() methods in types.go decide so (e.g. minimum: -5 ; maximum: 5, and other subtle rules...).. I am currently working on a fix for that.\nThe problem is that the map element is independently elected as nullable and rendered as a pointer (because minimum < zero value of number < maximum) and the aliased map currently ignores this.\nSee also #1561 . duplicates #1473 . Is this solved with #1569 ?. OK. Thank you. I am taking care of the conflicts with the other PR and rebasing it.. Thanks for cross checking this contribution.\nRegarding the generation of non-used models, I would not say it is a desired functionality, but yes, it is expected: when running with --skip-flatten, your spec is actually fully expanded before generation (yes, the option name is misleading, it should say: --with-expand instead).\nThis means that your definitions remain here and generate models, but that all operations get their own structure from the expansion (the $ref relationship is broken by expansion). We call these \"anonymous structures\". This is why they have their own copy.\nRunning in default (flatten) mode should not be altered by this PR: the target is really anonymous constructs (--skip-flatten).\nRegarding AllOf composition, no change has been made: what you observe is the result of flattening (i.e. construct a model for FullObjectAllOf1. Yes, this is what I would like to be improved.\nOverall, fully expanding the spec is usually not what a user needs. It is here, it must be supported and so now it works. I see flattening and expanding as two extreme cases for spec $ref preprocessing: with full flattening, you get no anonymous structure (so everything becomes a definition in models), while with expansion, everything is anonymous, and any generated model (original definitions) gets unused.\nThis is why I am saying this is preparatory work: everything has to work in both cases if we want to make some progress with flatten and produce more nuanced (and more useful) options.\n. Model doc WIP in this branch. Feel free to comment, PR, etc.. on this fork.. Thanks. It is coming up this week in go-openapi/analysis, which introduces these new features.\nFor go-swagger, I would need PR #1566 and #1568  to be merged, so all testing goes well. \nThere will be of course an integration PR in go-swagger.\n(5) and (6) will need more work and time. Hopefully for this summer.. This is a warning croaked by vet in verbose mode: the vet command return code is still a success.\nTo remove this check: go vet -v -printf=false\nAlso vet is changing in go, and there are some bugs reported in go 11 vet command, specifically on this \"printf\" check.. See also #1477 . ok so now we are on. . Thank you. This section of the readme if precisely here for this.. yeah. I already changed cyclo warning to 20.. Does the golangCI checks just for changes or run against the whole existing code?\nI am running gometalinter from time to time, and we have a lot of warning to fix.. Yeah I looked at this link this morning to figure out changes re gometalinter.\nWhat would be interesting would be to run this in CI on sample generated code as well.. It is configurable: \nin go-swagger main config file, you may specify skip_exists: true for any generation target.\n``yaml\nlayout:\n  application:\n    - name: configure\n      source: asset:serverConfigureapi\n      target: ...\n      skip_exists: true\n      skip_format: false\n.... We have been discussing related improvements you might be interested in at #397 . Contributes to #1572 . I am not against the idea, but I really don't like the idea of PR pushed by bots.. It's a name mangling issue.\nPackages are assumed to only exist out 1 word so they want the package to be likegithub.com/sul-dslss-labs/permissions/service`\nSee also #1432 . ok thank you @gregmarr  for your corrections.. Merge conflict is actually major here - I am taking care of it.. Testing this with anonymous elements uncovered a new issue with liftSpecialAllOf(), unrelated with tuples.\nIt so happens that the only test case for this was in a tuple element... This deserves a dedicated fix.. Yeah. This is a quick fix only: it generates pointless code when your binary is nested in arrays or maps (validation code iterates through nested structure just to do nothing.\nTo do it clean, one should modify model.go (and operation.go) and figure out that for this kind of format, the HasValidations flag must remain false. To do it cleanly and avoid piling up exceptions like this (we already have one for the \"file\" type), a little refactoring is needed. Next time maybe;\n. How about adding the windows word as a custom initialism (with CLI option)?\nIt should render as _WINDOWS and this is likely to pass the build. Just a thought, I haven't tested this.. @dankinder if you have a sample spec to reproduce this, I may fix it quick and good. Thanks.. Trying here to reduce the cost of future changes. Yes I know. I need an approval by one of the repo admins. @jonkohler today i pushed golangci yaml and badge to almost all our repos.\nDoing so I ran gometalinter + fixed all issues reported by goreport card. No I did not know this tool.\nWill try it.. I tried the \"on-prem\" tool on go-openapi/analysis (started with a small repo). Pfew... That's a lot of work to put everything to the level in one pass! But well, it is lowering our technical debt. So thanks for the tip.. N.B: this has nothing to do with putting an external logger, like ZeroLog or some other coloured/json logger.\nIt is only about code readability (especially in model.go) and relevance of the gocov reports.\nI also removed the unit test I added some months ago which was here to make sure no issue was introduced with all these if Debug { ...} and is no more relevant.\nThe \"debugAsJson()\" func is just here so simplify the debug code and remove the repeated calls to json.MarshalIndent(). I am expecting golangCI to skip the examples... Let's see. Yep it skipped it. Pfew. This is reproduced on master. This is a known problem which takes its roots deep inside our current design.\nI don't think this is a regression: null type is not swagger, and the x-nullable is known to be an imperfect workaround.\nFeel free to take a look at all issues tagged 'nullable' and some explanations in the newly released doc on models (PR #1604).\nIf you want to revive this rather old debate, have a look at @casualjim 's inspiring work with PR #557. I am trying to figure out how we could lift this in bits and avoid introducing breaking changes / too many breaking changes in one move...\n. It is colliding with required.\nWe use pointers for different things. That is the problem.. you may wrap your null value into another object. as I said previously, equating the presence of a properties with non-null pointer is deeply entrenched with the existing system.\nWe would like to change that, but it is a highly demanding work, and we shall proceed with extreme care. Don't think that just dropping the Required call in templates would solve your issue.. how is your 'null' value unmarshalled? \nIn my opinion, we need a custom unmarshaller to do this and extract raw properties.. look at pr #557. All types get custom unmarshalling with mailru/easyjson (we could do it with std json, but using only the lexer makes it more efficient) and there is also a bitmap structure to hold set/unset properties. Then you have again a lot of getter/setters, a factory for models, etc...\nThat's huge. okay I see where the bug is located.\nI omitted in test cases the case where the expanded shared response still holds a $ref.\nThis should be the same problem for #/parameters.\nI'll fix this today, it is not a hard one. I acknowledge the bug and shall make the code more resilient, but I have to say it comes from an  invalid specification:\nline 791, your schema incorrectly points to the response descriptor. That is actually what makes the code to fail: I did not expect a schema to point to a response object.. With this fix and using --with-flatten=verbose, you should get a warning about what is likely to be a wrong $ref. However, the flatten shall recover from this by assuming you mean the underlying response schema.. I was pondering about this. I was not sure I have a valid case for this. done with error and hopefully more informative error message. @casualjim I promise I am not pushing anything more for the week end \ud83d\ude06 \nI'll be around to rebase things when you need it. TODO(fredbi) here:\n\n[x] Mention x-order tag in custom tags doc section for models. The presence of the $ref supersedes every other sibling attribute. This comes from JSONSchema.. you can lift the constraint yourself by removing the \"locked\" attribute in template_repo.go. Some templates are locked because they are deeply intertwined with the rest of the generation code.\nSo customization here equates to a major fork.\nA better strategy in the case of bugs in this case is to stick on master rather than releases and participate the contribution effort rather than waiting for a release.. CI testing on master have been largely extended and there is no real quality benefit to expect from releases besides repo tagging.. I am just like you guys.\nI have a specific branch on my fork to pin my other devs.\nThis branch is regularly sync'ed with master, or sometimes completely reworked when I need something special ahead of master (or against @casualjim's wishes... \ud83e\udd23 ).\n\nI m using dep and source in Gopkg.toml to control how dependent packages depend on all this.\nAnother strategy I put in place for some features (for instance, I needed a custom swagger serve command) is to bake my own docker image from a forked branch and distribute this independently.. I think the discussion thread interesting and it is okay to keep it open and collect the opinions from other people.\nBut I am not the one who will change this. I'd rather people to discuss and contribute with their issues on the core generator (templates and model.go/operation.go) than twisting their custom things on locked templates. I can tell you I have a lot of custom templates for my personal devs,\nbut I would not build my own, say, schemavalidator.gotmpl by forking away. That's actually how I came to contribute so much to this repo.\nWhat is really needed in my opinion to get more stable builds is to tag the go-openapi repos.. @akhobov with release 0.16 we have introduced the possibility to get onboard \"contributed templates\". A team contributed one such set of templates. Might provide some new ways to bring customization to the table and share.. ok fixed this typo (and a few others). Don't worry all this will be squashed as soon as the go-openapi branches are merged.. Sorry I made a mistake by referring to this (just a typo with the issue number). @liber-takano you know that you don't necessarily have to close your PR to fix this kind of issue:\nyou may just fix it with another commit in your branch, then rebase your branch and squash this new commit.. Could you please squash you commits ?\n(e.g. apply git rebase -i, then apply the squash  instruction to additional commits in the interactive command), then git push --force upstream  to your branch. ok please join the spec to your issue so I may have a look at it. ok. It is probably this which caused the regression https://github.com/go-openapi/spec/pull/81. I can see the specs expands well, with expected circular $refs. I could locate where it hangs: on ExpandResponse() for a response with a circular ref.\nWe have overlooked this subcase.. thanks @pytlesk4  - this PR exhausted me last week end. If you need to discuss issues with that, you can reach me on the slack. I just tested ExpandSpec with this and it works fine.\nThe ExpandSchema used in validate is okay too.\nI could find a hang on ExpandResponse for this response definition: /repo/{owner}/{repo}/labels/{id}\n. @lafriks testing the new patch in preparation\nalso not that your spec is invalid, but this a point overlooked by the validation:\npointing a schema to a response object (as in `\"204\": \"{ \"description\": \"user is a member\", \"schema\": { \"$ref\": \"#/responses/empty\"}}} is not supported. yes that is ok. problem is\n```yaml\nresponses:\n  blah:\n    description: \"blah\"\n...\n...\n    responses:\n      200:\n         description: \"peek a boo\"\n         schema:\n           $ref: '#/responses/blah'\n. because the element in responses is unmarshalled as a Response object not a Schema object. see #1602  - I made a first version which was more tolerant, and eventually we figured out it was better to consider it an error.. There is another codegen issue with this spec when generating the URL builder, with a name conflict on GetComments for String. This one cannot be a regression, the URLBuilder hasn't change in months. yes @gregmarr  this one. There are several ones like this.\nI think the previous version of flatten was more blind with this but my version is more picky and expects to get schemas to be analyzed.. I thought it was detected by validate but it looks it isn't. that's because expansion works a little differently, I tries to unmarshal again, so if this json can be put into a schema it does it.. So I added a modified version of the original gitea spec in our CI run to work around this point and the name conflicting issue in urlbuilder. We'll see those as separate issues.. OK so I admit the new go-openapi/analysis/Flatten() is pickier than it should:yaml\nresponses:\n  blah:\n    description: \"blah\"\nis a valid candidate for a schema after all, when:yaml\nresponses:\n  booh:\n    description: \"booh\"\n    schema:\n       type: string\n```\nis not\nI might change the Flatten() to attempt to unmarshall again as a schema.\nAny thought?. sir, the fixed gitea was added yesterday in our latest CI run.\nSee modifications to the original spec I made to run: https://github.com/go-swagger/go-swagger/tree/master/fixtures/bugs/1614\n. I just ran it on Linux ubutun 14, go1.9.  Latest commit.\nTakes 0.2s seconds to report the warnings about unused $ref.. Built at this commit:\n```\ncommit 8126ee94e1e178bbfd5561ac4d502d08446f47aa\nMerge: 82475a1 4d6f851\nAuthor: Ivan Porto Carrero ivan@flanders.co.nz\nDate:   Tue Jul 10 11:57:44 2018 -0700\nMerge pull request #1615 from fredbi/fix-1614-circular-in-response\n\nFixes #1614\n\ncommit 4d6f851c3aeddb0548bc8aeeb84c2aae60a8a27a\nAuthor: fredbi frederic.bidon@advisam.consulting\nDate:   Tue Jul 10 19:59:35 2018 +0200\nFixes #1614\n\n``` . @lafriks really can't get to reproduce this. Ran it in loop many times.No way.\nCould you please tell us more about your build/version etc?. Could reproduce now.\nIt is a base path issue when resolving refs.\nRunning validate in the same directory as the spec: all goes smoothly.\nRunning it from another directory with relative path (e.g. swagger validate ../gitea.json) hangs\nProblem is that go-openapi/validate uses spec.ExpandSchema(), that is, without BasePath, and the root defaults to cwd() in this case... This causes trouble when cyclic references remain in the expanded spec.. I assume the codecov difference is due to a change in codecov's interpretation of what is a line passed and what is not, because not much as changed really with this.... I think that #1559 brought back an old bug that was hidden by flatten\nUsing --with-flatten=full should revert to 0.13/0.14 behavior and get a type composition instead of the mix composition branch + properties.. @aalexanderr could you please add the Validate() code to better locate the problem?\nIf it shows a similar pattern, then the problem is in model construction (model.go). If you see your properties there, then it is just a template issue... Thanks. Does it go better with the following? Looks more like a regular allOf construct:\nyaml\n  ArtifactInfo:\n    type: object\n    allOf:\n     - $ref: '#/definitions/ArtifactDescription'\n     - properties:\n         Path:\n           $ref: '#/definitions/ArtifactPath'\n         Status:\n           $ref: '#/definitions/ArtifactStatus'\n         Timestamp:\n           type: string\n           format: date-time. I know I know. I agree that something is not working.\nThanks to your valuable feedback, I think I may now poinpoint it in the code. Since Validate() seems to work properly, it is most likely just a simple template issue, around (here](https://github.com/go-swagger/go-swagger/blob/ab9a87e18ec6b80569e0429af8bac2dc6277fe34/generator/templates/tupleserializer.gotmpl#L257).\nBut since I can't promise a fix right away, I tried to figure out some work arounds for you:\n- so you have the regular allOf structure (well that's the same story as #1042)\n- or the full flatten option\n. yep, 0.16 is essentially fixing a couple bugs that we had left behind with 0.15 + the stratoscale contributed set of templates. Do not cherry pick dependencies: add you dependency to Gopkg.toml and update vendor.. There is something that I did not understand here. Maybe you could explain.\nWhen running a MakeOperation, there is a lot of digging inside the spec.\nAnd there many maps accessed via pointers.\nHow do you protect these maps from being accessed concurrently (even just for reading)?. Yeah I added this recently so solve some edge cases. In most cases this is actually not used.. ok so if the schema in body or response points with a ref, we may safely assume it has been already captured by models (since minimal flatten canonicalize the spec with all $ref as definitions).\nIndeed, no backup needed here.. So I can see the CI runs somewhat faster. Nice catch!. This is a bug with the new default \"flatten minimal\". \nYou can work around with --with-flatten=full, which gives you the behavior of v0.14. The problem is caused here. I don't know yet why it is occurring.\n```yaml\n  /v4/user/:\n    get:\n      operationId: getCurrentUser\n...\n      responses:\n\"200\":\ndescription: Success\nschema:\n$ref: \"./definitions.yaml#/definitions/V4UserListItem\"\nexamples:\napplication/json:\n{\"email\": \"andy@example.com\", \"created\": \"2017-01-15T12:00:00Z\", \"expiry\": \"2019-01-15T00:00:00Z\"}\n```\nIf I comment out this response, everything works again... Weird.  \n```. ok I found out where the problem  is. It is a bug in go-openapi/analysis flatten.\nI'll try to fix it over next week end.\nBy this time, as a work around your spec works with default mode if you inline the $ref in the above mentioned response.. Closed with #1751 . The generated code is put in a hierarchy of packages which may be customized with the\nfollowing options:\nsh\n      -a, --api-package=                                                          the package to save the operations (default: operations)\n      -m, --model-package=                                                        the package to save the models (default: models)\n      -s, --server-package=                                                       the package to save the server specific code (default: restapi)\n      -c, --client-package=                                                       the package to save the client specific code (default: client)\n      -t, --target=                                                               the base directory for generating the files (default: ./)\nThe organization is determined as follows:\n-- {target}\n    -- {client-package:-client}\n    -- {model-package:-models}\n    -- {server-package:-restapi}\n       -- {api-package:-operations}\n          -- {tags}\nYou may customize the folder names, but can't specify sub-packages as package names.. Hello Michael and thank you for willing to contribute.\nA few remarks:\n- --template should be more explicit about the intent. I suggest --use-templates\n- this option should not be a flag but a multi valued option - the value default takes the current set of templates\n- contributed templates do not tamper with locked templates\n- this option should only be available to generate client and generate server  commands\n\nwhich will be delivered with the swagger binary.\n\nI am not sure about this one. Should be discussed with @casualjim.\nBest of course would be to provide a plugin mechanism, but we are a bit far away from this.\nPlugin could be envisioned as a future enhancement.\n\nThis solution also need to give a way for custom templates to control the generated options,\nsuch as excluding main or rewriting the configureapi file.\n\nDefaults settings for alternate template sets should be handled in the corresponding ./cmd/generate.\nIf you propose a set of new generation options (e.g. --use-templates-options) , it would be adequate to handle them in the way we handle language options in the GenOpts structure.. Hello @posener \nPlural because I think that there are more than one way to produce supplementary sets of templates, and moreover, you provide more than one template. It is actually a whole set of new templates.\nFor instance, I might contribute just like you my own templates to generate tests for operations.\nIt is not just a go default or go strato choice.\nWhat I mean is something like --use-templates=stratoscale. \nSo you may well specify and support one single value here (yours) but this is not a flag (ie true|false). So it remains extensible.\n\nThis is more or less what was implemented in #1626 , right?\n\nYep. I wrote this comment before I reviewed the PR. I made some comments about some details, but I agree with the principle.\n. Please squash your commits before merging.. There won't be any 0.15.1. Just 0.16.. See also https://github.com/ashleymcnamara/gophers. I have hit this one too.\nIt is a warning issued by the http package.\nIt is because we always send a response in the end, even though the redirect status has already been set.\nOne should check for possible already redirected response before forcing a response.. not yet. @huikang here some sample code with a responder saved in context:\nhttps://github.com/go-swagger/go-swagger/blob/f9da9f1f9bb42571cfcc6c6a4a6323a5e1d0e115/examples/oauth2/restapi/implementation.go#L54\n. ~~Stumbled on yet another bug/regression. This one will have to wait another fix to pass.~~. all fixes applied in go-openapi dependant packages. codecov/patch non-significant here. Where is appveyor check gone? Why does this new licensing check never complete?. Looks like appveyor is run but the CI report is dropped. Serving doc:\nswagger serve {spec}\nAlso generated servers come baked with a {basePath]/docs endpoint to serve the spec\nIndeed, there is not static file server. Could you please add here the BindRequest() method generated for your operation?. Yes I've seen already this when trying to fix some other stuff with polymorphism.\nProblem is that the array type does not get its \"IsExported\" flag set.. I did not release this fix, because there are many other problems here.\nI may fix this, but then how about [][]Value, or map[string]Value, no even thinking of [][]map[string][][]Value... They all fail. So that is a bit more complicated. . i am not saying this cannot be fixed. I am saying it is not fixed yet because it is not a simplistic issue.\nAbout documenting limitations, many things have been added recently. Did you read it?. Found minimal patch to make this one work.\nThere are many other edge cases with polymorphism. \nad this story shall also be told.. @co3k you can run locally this build script using ./hack/codegen-nonreg.sh. ok done. Again codecov report is out of this world... Removed 1 line => relative coverage decreases.... This is great. Could you please add a test case to assert the ordering?. Thank you so much.. Can you reproduce this with current master?. Your spec generates and builds properly in 0.15.. you have a quiet option to mute the logs. sh\nApplication Options:\n  -q, --quiet                                                   silence logs\n  -o, --output=LOG-FILE                              redirect logs to file. documentation PRs are welcome. The default timeout is set to 30s, so the behavior described above is due to something else. \nI think params should be instantiated using one of the factory methods NewXXX, which set the timeout.. Looks related to some previous changes I made... I have to investigate there: a bug did sneak in undetected. I suggest as a temporary workaround to pass your PR to comment the \"Parallel()\" statement here https://github.com/go-swagger/go-swagger/blob/dd867fd63c30269ac217004c102f47a1774d4f5a/generator/moreschemavalidation_test.go#L301\nI assume my latest attempt to improve this did introduce some smelly behavior.\nYou could try this and see if your pr passes. I'll try to fix things up later on.. Found the concurrency bug in unit test. Going to fix it and specifically test for this.... I believe this is set here: https://github.com/go-swagger/go-swagger/blob/dd867fd63c30269ac217004c102f47a1774d4f5a/generator/types.go#L569\n. I am also wondering why we have:\ngo\n// Required: false\n// Min Length: 0\nAddr *string `json:\"addr\"`\nBut:\ngo\n// Required: false\nAddr string `json:\"addr\"`. I think the rules for primitives should boil down to:\ngo\nnullable := !schema.ReadOnly && isZeroValid && (isRequired || hasNonZeroDefault)\nwith the sole exception of the binary format string, which is rendered as an interface.\nHowever there are subtle differences between this simple approach and the actual behavior (which is not a regression and is validated like that by the pointer_test.go stuff). So what am I missing here?. Hmm this is just too confusing parlance for my poor brains: \"fails the first directive of failing individual rules\"... What could this possibly mean? \ud83d\ude15 \nTL;DR: I would like to both simplify and improve correctness on these nullable rules for primitive types by using isZeroValid := validate.AgainstSchema(schema, \"\", strfmt.Defaults) == nil \nWith the formula I am proposing above, you have indeed:\ngo\n// the address to use for raft communication\n// Required: true\n// Min Length: 1\nAddr string `json:\"addr\"`\nBut this also yields:\ngo\n// the address to use for raft communication\n// Required: false\n// Min Length: 0\nAddr string `json:\"addr\"`\nwhich is not the current behavior.\nSince in my view the following schemas are equivalent, I don't understand why we should render a pointer in one case an not in the other.\nrequired: false\ntype: string\nminLength: 0\n<=>\nrequired: false\ntype: string. @gregmarr this problem as we all already know, is indeed more general, whenever we want to tell the difference between the \"zero\" value for the type and an unset value. \nBut for obvious reasons we don't want to put pointers everywhere.\nWhat I am pointing at is why does this distinction exist depending on putting \"minLength: 0\" or not.\nSo why do we decide to render a pointer when this (empty) constraint is enabled, and don't when it's not?\nThe JSON Schema spec states that:\n\nOmitting this keyword has the same behavior as a value of 0.  . Ok so I am renouncing any improvement here.\n\nPlease remove the \u00ab\u00a0regression\u00a0\u00bb qualifier in the title in this case.. It is. \nOver time (years?) I feel like it has been increasingly difficult to justify the trade-off which are ruling this\npiece of functionality (see issues tagged nullable). I also understand @casualjim's point of view, even though I don't easily accept being defeated.\nIf we don't dare implementing incremental changes on this, the only way up would be something like reviving #476; #557.\nAs for now, I just can't see how we could split this huge piece of work into \nincremental deliverable parts, not to mention the testing....\n. > The window for fixing the pointer situation has closed. \nNot if we make the new design an opt-in feature. That would also mean that #557 would require full rework to be optional.. See #1668 . See also #1472 .. The yaml parser scans SecurityDefinitions tags, as well as Info/Extensions blocks\nMaybe you defined invalid SecurityDefinitions ?\n. go install github.com/go-swagger/go-swagger/cmd/swagger. >  error is as fwllows, any one knows that?\nYes, please rewind to the start of this thread and try the different recommendations above. Yes. Currently, only strings generate enum constants.\nIn the above spec, there is no way for the generator to figure out that QUEUED refers to a numeric value: at this level it is a string and the type is inconsistent.\nSupport for enum consts of any primitive type is under dev. . Anyhow, the new feature won't work as your example shows.\nYou'll have to provide the values and the names separately.\nEx:\nyaml\ntype: int\nenum:\n  - 1\n  - 2\n  - 3\nx-go-const-names:\n  - QUEUED\n  - RUNNING\n  - SUCCEEDED\n. Not sure this is still relevant after #1627.\nhttps://github.com/go-swagger/go-swagger/commit/24d72651d55a6c4d45fd3c096102de290f485cfd#diff-64fa288ba1cb7159b0c8525472d92627\n. Could you please remind us here where we still have a dependency to x/net/context?\nSome work has been done to replace this by context quite some time ago and I fail to see any remaining import to this (I looked in runtime and generated code). Done with go-openapi/runtime#113 and #1691. Just a silly question here: could you tell why this seemingly minor change would deserve the jump to v1.0.0?. all go-openapi packages are tagged in line with go-swagger, and dep can currently make something out of this, including breaks in backward compat.\nI am not familiar with the go.mod feature, but I don't quite understand why this should come with a change in the current numbering scheme.. As a workaround, it is sufficient to declare just one dummy path operation to generate the whole model.. That's right that generating model only should support incomplete swagger specs. Indeed what it really needs is just the list of definitions, but that would not be a valid swagger spec.\nA PR to get a more tolerant generate model CLI here could be useful.. go-swagger uses goimport to resolve imports and format code just after generation. That's why.. Module support is quite recent in go-swagger (see PRs  #1636,  #1661)...\nProposals to improve the generator are welcome!\n. @etsangsplk as stated in #1684,the --with-context CLI flag is deprecated - a fix to make this explicit is pending [PR: #1806]. Looks like removing the snakize here https://github.com/go-swagger/go-swagger/blob/b10bd7b2c916c12928f64efcfc1391c864b54480/generator/templates/client/facade.gotmpl#L120\nis enough to fix things.\nOn the other hand, snakize is missing here: https://github.com/go-swagger/go-swagger/blob/b10bd7b2c916c12928f64efcfc1391c864b54480/generator/shared.go#L442\nThis problem seems limited to client generation: no issue when testing with server codegen.\nAlso please note that some name conflicts are possible, and probably unavoidable like: choosing a tag like: \"strfmt\", \"httptransport\", \"runtime\", \"models\", \"api\" ... will almost certainly generate name conflicts.. this is due to yaml: 'y' unmarshals as boolean true. @chenziliang could you be so kind as to add the above to the documentation? It is here:\nhttps://github.com/go-swagger/go-swagger/blob/master/docs/use/spec.md\n. @casualjim  couldn't we just add this ordered thing on top of the existing map without breaking anything? I mean, we shouldn't break spec unless we really add some new value to it.\nAnother way to see this is that we are talking about sorting only a few items (I don't think we'll ever see items in a security requirement map go by the 000's). So why not simply sorting the result when needed\n(like we do for generation), when the length of the map is >1? Or alternatively, runtime might cache this sorted set from the spec.. I was just trying to resist the breaking change... :-)\nThe more I am thinking about this specific use case, the more I think the merge is the expected behavior.\nSo the logical expression should not be short circuited and authentication context be more readily available than it is today (maybe it is just a matter of documenting / writing a short example).\nI fail to see why the order in the original spec should matter.. IMHO we should resist assigning semantics to spec elements which don't bear functional meaning in the Swagger specification, like declaration order. Obviously, the security part has been botched from the the beginning in Swagger 2.0, including this AND|OR stuff...\nI believe that a clear example on how to override the default authorizer and retrieve principal context for a merge would bring more benefit than breaking things in go-openapi/spec and add some obscure order-dependent behavior in runtime.. Closed as marked duplicate. Could you please add some unit test?. I recently reviewed similar bugs where package name generation fails because of \"-\", \"_\" or even \"/\" in package, like #1157.  I've started testing my fix, but could not complete it yet. Will include this in tests. Thanks. Your spec is large and the issue does not stem out of your explanation in an obvious way.\nCould you please hand out some minimal case producing the unexpected result?. ok. There is nothing as far fetched as aggressively reusing structures... It is merely a naming conflict when autogenerating names. So yes, it is some sort of bug/limitation.\nIt is very difficult to protect the generator against all such cases without pre-analyzing the whole spec.\nI agree that the lack of conflict detection and early warning is in itself a severe limitation (see also #1098).\nHowever, you should be able to work around this kind of issue by defining a model structure with explicit name using a definition, or  using the x-go-name extension.. Have you tried generating with hints like this to help the generator a bit?\nyaml\n  Base_response_200:\n    description: \"Success\"\n    schema:\n      allOf:\n      - $ref: \"#/definitions/Success_data\"\n      - type: object\n        properties:\n          data:\n            type: array\n            items: {}\n            x-go-name: first-data-item. Please dont' close this issue. Let's keep it open, as \"enhancement\".\nIt is true that the generator has some flaws regarding naming, etc... \nOn the other hand, anyone willing to fix this in the code will face a sheer amount of difficulties.. Thanks. Could you please add a unit test, e.g. with your sample spec causing the issue?. The current implemented trade-off is to not support those json shenanigans by default and to allow specifiers to add x-nullable to force a field to be modeled as a pointer. This allows for more efficient and faster unmarshalling in the general case and give developers some leeway for specific cases for which this distinction is important.\nWhen this is a pointer, null values should be interpreted as <missing>, given that we are not expecting meaningful null json values (which is part of the swagger 2.0 spec).\nThe richer semantics you describe, with null being distinguished from <missing> are not going to be supported any time soon and would require custom json lexing for every type. Although this is possible in theory, this would break many things and would deserve in itself a major release and quite a lot of work.. It looks like you are referring to a doc UI tool like swagger UI or some other available package.\nThis out of go-swagger's scope.. Fixed with #1730, #1732. The pushed bindata.go does not reflect the change in the template, but many others. Looks like the generation was not performed on a clean branch. Cannot reproduce on master, or master before recent changes (as of Sep 11th):\nThis is malformed JSON: \njson\n{\n   \"active\": true,\n}\nThis is correct:\njson\n{\n   \"active\": true\n}\nI tested this with current master, generating a server with your spec and issuing said request with  curl to reproduce your PUT and it works perfectly.\nThe above spec generates the following body type (with default settings):\n```golang\n// ActivateUserBody activate user body\n// swagger:model ActivateUserBody\ntype ActivateUserBody struct {\n// active\nActive bool `json:\"active,omitempty\"`\n\n}\nRunning the server, and putting a request like:bash\n$ curl -X PUT \\\n--header 'Content-Type: application/json' \\\nlocalhost:10001/user/1234/activation \\\n--data '{\"active\": true}'\n\"operation .ActivateUser has not yet been implemented\"\n``` \nresponds as expected.\n. I tried again with or without vendoring. No change. It works.\nThe error statement you are reporting is incorrect.\nYour error message is reported when specifying something like {\"active\": \"true\"}.\nWith {\"active\": true,} we have a different message (e.g. \"invalid character\").\nWhile the last message works too the un-marshaller extracts the \"valid\" key.. Does this means that the PR you delivered does not work? It is not clear to me.\nI think your examples are related specifically to models reused in the generation of the \"operations\" package.\nTo move on further, specifying the aliased package name here (and in the other places where you detect external) is probably  what is used by models reused in operations. In the following, when left blank, this means the \"models\" alias is used.\nhttps://github.com/go-swagger/go-swagger/blob/e13f8554b4e77901403d8b9444eb2fa92a50c04c/generator/model.go#L211\n. as I said, there is a special provision with type resolver to use models in the operations package from the models package. This occurs when body or response use a schema which is already available, e.g. in the models package (default).\nThis is to distinguish with the case when the model is generated in the operations package itself (e.g. inlining).\nSo the new alias has to be specified here when first resolving the type in models.go. Otherwise, it defaults to \"models.{gotype}\". I don't think  the problem really lies with arrays, but more likely with arrays or maps of models \ndeclared in the operation package (e.g. param body or response is array or map of an already existing model type). Requalified as bug. Could reproduce. Will look into  it.. I am using this go-bindata: https://github.com/jteeuwen/go-bindata. Now documented in contribution guidelines : https://github.com/go-swagger/go-swagger/blob/master/docs/guidelines/README.md\n(need to regenerate doc site). did you use the sample regen script? AFAIK there is a small test that at least all examples build.. I am using this go-bindata: github.com/jteeuwen/go-bindata. @MStoykov you just need to rebase and regenerate. I've pushed a PR that does just that on your own fork.. Superseded by #1819 . Oh that's probably because of this:\nhttps://github.com/go-swagger/go-swagger/blob/e13f8554b4e77901403d8b9444eb2fa92a50c04c/cmd/swagger/commands/validate.go#L79\ncmd returns errors and does not output them to \"log\".. this new --vet off option... does it mean that our generated stuff does not pass vet with go 11?. Can't merge PRs any longer.. We have the same kind of construct in generated code -see issue #1573.\nIMHO go vet just got overboard with 1.10. RE:\n\nTurn on go vet during tests\n\nalso affects generated code, see also #1573. This was actually introduced by go1.10.\nI am not sure this go vet behavior is going to remain as it basically precludes from implementing any generic logger with format string of some sort.... > Again RE: go vet \nThe go vet change with 1.10 & 1.11 breaks a lot of well known packages just like ours.\nI don't think this is going to stand for long. See golang issue https://github.com/golang/go/issues/26555.\ngo master has already changed the behavior of go vet.\nWhat we could do is to help go vet detecting this is a printf wrapper by renaming debugLog and debugLogAsJSON as debugLogf and debugLogAsJSONf. I'll give this a try and figure out #1573 as well.. Hello. How come you can update a template and commit without regenerating bindata.go ?. Yes it should. There is a script .githools/pre-commit/50xxx for that. Ah, again the commit signing involved... Best to rebase and sign in one pass (every commit is required to be signed...). this checks all your commits.... @gregorhollmig  -s only add your email to the commit text.  I think the new CI check also verifies that your commit is cryptographically signed with a PGP signature. You can check this for example, when doing git log --show-signature. This means configuring PGP keys, and configuring git to use these keys to PGP-sign your commits.. Yep, this came a bit unannounced... This could also be detailed here: https://github.com/go-swagger/go-swagger/tree/master/docs/guidelines. Hello @casualjim . I'd like to update our contributing guidelines and perhaps setup a PR github template to help new contributors.\nHowever I am now a bit confused about what DCO CI bot expects: I understand that signing with git commit -s is required, in order to have a signed off by ... commit message.\nBut there is nothing described about PGP signature here: https://probot.github.io/apps/dco/\n@casualjim  Is this an option you enabled in the bot?\n. Have you tried the full flattening option to stick to 0.14 behavior?. Regarding name conflicts on generated objects, you may:\n- deconflict with a x-go-name hint\n- generate in a separate package using distinct tags for your endpoints. You may use the go-openapi/validate package to validate JSON data against schema.\nSee example here: https://godoc.org/github.com/go-openapi/validate#example-AgainstSchema. Top level security object is the swagger specification for default security requirements for endpoints.\nThis is not mandatory and you may define or override this at the operation level.\nkeyhere refer to the definition given in the spec for a security scheme. In this spec, this is api keys.\nSee also https://swagger.io/docs/specification/2-0/authentication/api-keys/\nWe generate operations with a principal params only for those with a security requirement.\nAPIKeyAuthenticator is the generated name for the authentication function, which you have to supply.\nFor optional authentication, have you tried this?\nyaml\nsecurity:\n- key: []\n- {}. Just my 2 cents : this --- has a special meaning in yaml: start new doc. How about removing this?. ok I rest my case. Just lost 2 cents on this :). Just curious about the swagger spec you provided the generator with.\nName is taken;\n- either from the spec Title\n- or the --name CLI param\n- or defaults to swagger\nBUT\nsuffixes like 'API', 'Test' are trimmed.\nso my guess is that you put in a title like 'test' or 'api' and end up with an empty name.. Weird. Is it possible that the configure_xxx comes from a previous generation with different settings?\nHow about removing it and generating again? \nEmpty Genopts.Name can also be figured out with --dump-data option. . Yes. Reproduced.. this is indeed a bug. \nI think that forcing opts.Name somewhere around https://github.com/go-swagger/go-swagger/blob/44342aefb3ce6216edd146bcf4e6ab63d5a15eca/generator/support.go#L123\nwould solve the issue\nSomething like:\ngo\n    opts.Name = appNameOrDefault(specDoc, name, \"swagger\")\n. I could fix it. Note that the go generate commands also fails when --target != \"\" (not fixed). The value is altered as follows:\ngo\nreturn strings.TrimSuffix(strings.TrimSuffix(strings.TrimSuffix(swag.ToGoName(name), \"Test\"), \"API\"), \"Test\")\n. have you looked at the KV store example ?\nhttps://github.com/go-openapi/kvstore\nBy and large this is the same idea, just not using memory but a KV store instead.. Did you pass circle CI and appveyor? I don't see the track of this CI pass. no I don't see the track of our CI passing here. I am expecting 7 checks and I can see 5.. @zhuangqh apologies for not seeing this scroll!. Yes, this is a bug: default initialization is a bit naive on the client.\nThis is set here: https://github.com/go-swagger/go-swagger/blob/be966a22e91309b7ed8d57d20e737ab5b3861cbd/generator/templates/client/parameter.gotmpl#L35\nand other factory methods below.\nFor a comparison, this has been solved on the server side with a more complex template, but not ported to the client yet. See how: https://github.com/go-swagger/go-swagger/blob/be966a22e91309b7ed8d57d20e737ab5b3861cbd/generator/templates/server/parameter.gotmpl#L308\n. Defaults in this structure are not handled at this moment. A PR is welcome to fix this.\nFor testing, unit tests are carried out with assertions in codegen (see how parameters_test.go works).\nBeyond unit testing, a CI job which tests full build of generation on fixtures is set up in ./hack/codegen-nonreg.sh): you simply add there the directories where you want yaml or json specs to be checked.. Unfortunately no, we are not cashing anything in.\nThere is no data caching either.\n. generate, modify then reuse model with x-go-type. tryx-order: nextension. Look for the latest release: on bintray, I can see the package name is nowswagger_0.17.2_amd64.deb. Could you please recall your use-case? That is I suppose thegenerate spec` command.. Hi @gregmarr. Do you means that HTTP codes such as 502 Bad Gateway should be part of the spec?\nIs that not what default response is for?. ok. As expected then. Thank you.. Could you please add some details about how to reproduce your issue? Like a workable swagger spec and some information about the data you are passing in / out. Thanks.. Fix contributed in: https://github.com/go-openapi/runtime/commit/41e24cc66d7af6af39eb9b5a6418e901bcdd333c\nPending vendor update in go-swagger. @jonas27  fix should be brought to master with PR #1836 . interesting use case. Looks like a bug in go-openapi/analysis to flatten this spec.\nYou could try moving your ext references from responses to definitions, it might help.. Mmhhh. Tried to play a bit with this spec.\nProblem lays with circular ref formed by several files. We still have a problem in go-openapi/spec with such circulars.\nTry defining the cycle in one single file.. Works with the fix mentioned above. Please mark that this requires --with-flatten=full to generate a proper build (the minimal mode generates an invalid recursive go type). Have you looked at #1752 ?. Well done. This kind of question is recurring among go-swagger users.\nFeel free to push a PR with a working example of your findings.. The generator uses goimports. If go-openapi/strfmt cannot be resolved, the import is removed.\nPlease make sure you may resolve this package eitheir in GOPATH, vendor or go module before generating.. Sorry but I tried to reproduce (btw, your spec cannot be reused as is) and this generated correct import with URI. . suddenly a lot of relevant details appear:\n- you are using stratoscale templates\n- you are overriding this with your own templates\nGeneration works well uri or not uri with standard options. So this must come from one of the above settings. afaik @posener wanted this repo to be the main source of maintenance for their template.\nIf you find bugs in this, feel free to send a PR here. Yes weird. We just updated the master yesterday because of a bug in goimports (but for duplicate imports...).\nWould you give it a try with latest master (v17.2)?. @ok11 are you still facing this problem with latest master?. Thanks. You see, I am the broken window fixer here... So I am making sure no window remains broken for too long.. ok thanks for the feedback. It is another failure with go mods, and yes probably goimports.\nThat must be what they call \"rough edges\" in go11 release notes... \nLet's keep this one open, so we'll figure out when tackling issues with modules (not my current priority). Anyway, just FYI, there is a way to really make sure: instead of default config for go-swagger, override the swagger.yaml and tell the generator to skip the formatting. Then you'll have raw generation.\nNormally you should see all your imports here (possibly even duplicates). So if this works well, then the formatting is the culprit. This includes goimports.. Looks related to go-openapi/validate#102, although I don't know how the templates you are using are calling this (standard templates don't use dynamic schema validation).. This is a different kind of issue. Specs served with swagger serve should be self-contained. Preprocess them with the flatten command if needed.. This field is required by Swagger. In the  spec model, this attribute is not represented as a pointer, so required means non empty string.\nSince this is just a documentary field for go-swagger, it is possible to fix this field from your original spec using swagger mixin, specifying a non empty string.. I think we have had the very same kind of issue some time ago with empty response descriptions.\nSo there is a \"spec fixer\" just for go in go-openapi/analysis. Unfortunately, this does not fix security schemes attributes at the moment.. If you wish to close the associated issue, mention in the PR's comment: \"fixes #xxx\". Now if we don't specify a file for output don't we have double output (stdout & stderr)?. The cause of this issue can be found (and repaired) here: https://github.com/go-swagger/go-swagger/blob/800a3052f0305ab54980f961bd4f1e8b3e5599fe/generator/templates/server/urlbuilder.gotmpl#L142. Looks good to me. @mtfelian  could you please rebase your PR, so we may proceed with the merge? Thank you. Thanks. Almost there! But I can't merge... I assume this is because of the missing GPG-signature. Tested this. Moving the append(servers, ...) statements just before launching the go routines solves the issue.. I generated your sample spec and it behaves as expected: the parameter name attribute is used to name the query parameter, not the key used in the parameters section.\nI think this is pretty clear in this swagger spec example: \nhttps://github.com/OAI/OpenAPI-Specification/blob/50c152549263cda0f05608d514ba78546b390d0e/versions/2.0.md#parameters-definitions-object. @mcphailtom  FYI some early analysis was provided here #1724 . the prop prefix was added to avoid naming conflicts. > \n\nthe nodes is just a tmp variable, I think it's OK here to use nodes, err := Unmarshal..., what do you think?\n\nDon't. How about a field named err?. That's right.\nThis statement is defined here in templates: \nhttps://github.com/go-swagger/go-swagger/blob/be966a22e91309b7ed8d57d20e737ab5b3861cbd/generator/templates/server/configureapi.gotmpl#L28\nThe generate_xxx.go is actually put in {{ ServerPackage }} relative to {{ Target }}.\nSo the issue is the incorrect relative path computed by this function:\nhttps://github.com/go-swagger/go-swagger/blob/1f7a3338267bbb157292775119ef84a1724820a1/generator/shared.go#L559. The problem is more complicated than that. This PR addresses one very particular use case, at the cost of more inconsistent behavior.. Could reproduce in go-openapi/analyis. There are still some cyclic ref patterns that cause some bugs.... I think I solved the issue in go-openapi analysis.\nSome feedback would be much valuable: https://github.com/go-openapi/analysis/pull/40. SWAGGER_DEBUG works for code generation (i.e. generator package).\nFor spec generation, the scan package is used. Only DEBUG is supported here (see https://github.com/go-swagger/go-swagger/blob/5ef69e2ba5ecda3b7317a94ee570f6aea83d5939/scan/scanner.go#L173).\nAs you may see, it is an almost entirely independent package, and debug routines have not been factorized.\n. Could you please add some unit test to assert this behaves as expected?. @MrLuje this is supposed to supersede your #1790 with more complete coverage. Feel free to check it out.. Yes all commits must be pgp signed . Thank you for this feedback. I am looking at it. I overlooked testing on Windows.... Oops! this one slipped in sneakily... fixed now. Thank you.. Could you please mention your full command line?. You are probably referring to the swaggo/swag CLI tool. In this case, this is not the right place to report errors.. #1724 . go-swagger does not provide built-in support for that.\nFor instance, you may adapt generated model structs to implement support for GORM models.\n. I don't know of any such example. You can have a look at this sample with KV store, as a source for inspiration: https://github.com/go-openapi/kvstore\nModels are generated. But you can reuse them independently in other generations by using x-go-type extension: this way, you can reuse previously generated, customized models.. @ssivachidambaram you might be interested by this discussion in our FAQ https://goswagger.io/faq/faq_model.html#how-to-avoid-deep-copies-of-complex-data-structures-that-need-to-be-marshalled-across-the-api. This toolkit is about providing tools to manipulate a swagger specification, like for instance generating a server which enforces the API contract.\nThat's it. It is not about persistence.\nFor this, you may use other libraries of your own liking to construct a complete application.\nIn other words, we don't do a golang version of phpcake or some magic like this.. In principle, this is possible. There are however some caveats when things go complex (like nested arrays, etc...).. Weird. Will investigate this one. This the culprit: https://github.com/go-openapi/loads/commit/0d17535daa37578ec3b60494288bd3164cb9a36b\nThe new spec cloning using gob instead of json fails to properly clone spec.Ref structures.. Added a custom gob encoder/decoder for Ref. Looks like it works. Will finish the testing later.. @kenjones-cisco there are pending PR in go-openapi/spec (the fixer) and go-openapi/loads (the verifier) to solve this issue. I'll update go-swagger vendor as soon as those are merged. Thanks.. @kenjones-cisco I believe you may now regenerate. Great!. @kenjones-cisco I think the  [] which now becomes null is a new regression failure, probably with the same cause as the issue you detected. If you agree, I'll try and fix this new one over the week end.. After a quick look, I confirm this is exactly the same cause: this new gob encode/decode.\nNow I realize every spec object with special json unmarshalling needs to be checked if in need of a gob encoder and decoder or we'll have the same issue with other edge cases.. Hello @kenjones-cisco. I believe you may now rebase this one and correctly regenerate examples.. @kenjones-cisco I finished the update with PR #1837. I kept your own commit and just applied the fix..  code 422 is set in go-openapi/errors.\nYou can change the behavior of this package. That was what I had in mind, yes.. @posener, @michaelf-stratoscale  could you please review this PR?. Could you please add a test to assert the new behavior? Thanks.. The first spec is the \"primary spec\", the one other specs are merged into. So this is not commutative.\nSee: https://goswagger.io/usage/mixin.html\nalso your various specs to merge must be marshallable into a spec - even though they are not formally checked to be valid, these cannot be just arbitrary bits of json / yaml -\n. Also fails with custom extensions in spec..... @orisano this fixes some issues with your optimization. However I am not quite familiar with gob encoding shenanigans and I found out I had to write much code to work around those issues (see go-openapi/spec#88). If you have a better idea on how to implement this, you're more than welcome.. I won't try anything like that. I just want things to work correctly.. Please have a look at https://github.com/go-openapi/spec/pull/88. could you please elaborate on your use case?. @bvwells  it is in the swagger.yaml config file.. should be good to go now. Yes the PATCH method is problematic in this case.\nYou pointed it right: the usual workaround in go-land is to use pointers. So I'd advise the x-nullable.\nMore generally, you may find tips and traps in similar setups by searching issues tagged nullable.. Duplicates #1047 . Yes patch is problematic because empty and default Zero value are hard to distinguish, unless we use pointers (see my answer to #1830 and the original full story: #476).\nYou may look at previous work done in this direction with #557, but was never merged as bringing too much breaking change. At the moment and for the foreseeable future, forcing pointers using x-nullable as needed is the suggested work around.. Weird. This works well on UNIX: these sources for test program should be excluded because they have a +build integration tag. I am investigating further how it works on windows. Cannot reproduce this on latest master, with go10.6 on Windows10 and latest dep.\n[note: these fixtures have not changed lately, so master gets the same treatment as 0.17.2 for that matter]\n```\nC:\\Users\\root\\go\\src\\github.com\\go-swagger\\go-swagger>go version\ngo version go1.10.6 windows/386\nC:\\Users\\root\\go\\src\\github.com\\go-swagger\\go-swagger>dep version\ndep:\n version     : devel\n build date  :\n git hash    :\n go version  : go1.10.6\n go compiler : gc\n platform    : windows/386\n features    : ImportDuringSolve=false\nC:\\Users\\root\\go\\src\\github.com\\go-swagger\\go-swagger>dep ensure\nC:\\Users\\root\\go\\src\\github.com\\go-swagger\\go-swagger>git diff\nwarning: LF will be replaced by CRLF in Gopkg.lock.\nThe file will have its original line endings in your working directory.\n```\nHave you tried updating dep? (i.e. go get -u github.com/golang/dep/cmd/dep)\n\nNOTE: just in case, tried also with -v flag. Works the same, as expected.. This is indeed a bug I could reproduce. It occurs with polymorphic types.. Here is a fix you can fetch right away. This should be soon merged into next release.. Sure @gregmarr, don't worry! This is just to verify everything is okay before merging the spec repo (which is also still WIP). When we are okay with tests and merged dependency, this would just go back to original Gopkg.toml. I believe you should be able to do this with a combination of x-go-name or x-go-custom-tag extensions.\n\n. No there is no such things. Just felt like I had to fix one of the very first issues I raised... not related with nullable whatsoever. Cannot reproduce this on current master, generating models for client or server from this spec.\nPlease provide more info about the go-swagger version you are using, your generation options etc.. There is a bug in spec flattening with the remote reference. For some reason, the enum has been expanded and commonality lost.. The fix is on the ways and experimental fix works not so bad. This is a delicate part, i\u2019ll probably be done with this over the week end. Cannot reproduce from master.\nHere are the commands I have tried:\n swagger generate server --spec=...\n swagger generate server --spec=... --with-flatten=full\n* swagger generate client --spec=...\nI am building fine with go1.11.1 on ubuntu.\nPlease provide us with more details about the go-swagger version you are using, and your generation options.\nPlease also note that backwards compatibility for generated code is not guaranteed for versions prior to go1.10 (should work with go1.9, though.. The mongodb driver in go-openapi/strfmt has been upgraded recently and exhibits some issues with date and time times (see https://github.com/go-openapi/strfmt/issues/41).\nA PR from someone with stakes in mongodb would be welcome.. This could be the opportunity to switch driver with build tags.. @saromanov could you please PGP-sign your commit?. A workaround for this is to add x-go-type to rename the generated field.\nA possible enhancement is to detect such conflicts at codegen time. There are still many silent small issues like this where it is possible to break the generated code with reserved names (like if you maliciously name a field unmarshalBinary, this also wrecks the code.. What would be a sensible enhancement here would be to detect this situation at codegen time and avoid the generation altogether. What I don't like here is the panic at runtime.. Just a wandering thought: generate a crude server from your conf file then passing this codegen to the spec generator?. This has been a missing feature so far: string binary in formData.\nThe fix on the server side is quite straightforward.\nHowever, I could see the same kind of problem occurs on the client side.\nA quick fix is easy (consumes the io.ReadCloser and builds a string), but I've the feeling that something should be added to the client runtime to consume the io.ReadCloser at the last possible instant and avoid unnecessary buffering. \nI propose to deliver the quick fix first, then to contribute this to the client runtime in the mime/multipart handler (first time ever!). I am thinking of some func (r *request) SetStreamParam(name string, readers ...io.ReadCloser) error. Once merged, I'll be able to get a better client hopefully.. No this won't work because the binding occurs with a string. I quickly made the fix but testing will take some time.. Anyway, the best way to send a file is to tell the spec this is a file type. And this one works fine with the io.ReadCloser well implemented.. @casualjim : even though I agree that the OP should use type: file for this use case, I don't see it explicitly disallowed by the swagger 2.0 spec. I know it's yet another picky point about swagger spec, which is of low real-life usage importance.\nI understand , in our implementation, that we are using the binary string format as a hint to stream things using a ReadCloser. Well done, but in this particular case (binary in multipart forms), the current runtime imposes buffering in strings (both on client and server side).\nCurrently, the same limitation applies to query params and path params. I wonder why someone would be wanting to use binary there (e.g. byte would be more appropriate), but again, nothing in the 2.0 spec states that we can't use a string with this format here (in this case, this is clearly not for streaming). In such cases, we should  clearly warn we don't support such constructs.. I think that we may go with io.ReadCloser  for form params, and that a way to fool-proof the generator for other params with this format would be just to ignore it in type mapping and fall back to simple strings.. Adding binary is formally allowed by the spec, but of no practical use.\nIn the go-swagger implementation, we use the very definition of type: string format binary as a sequence of octets to express stream of bytes, hence the \u00eco.ReadCloser` type.\nThis allows to implement streaming responses.\nFor all other cases, you should not use binary.  So yes, there is a bug, in the sense that not all possible formally valid specs do produce workable codegen.\nOn the other hand, there is no big value added in covering this bug at the moment.\nAfter discussing this with @casualjim, a possible strategy could be to downgrade the io.ReadCloser type to a mere []byte for simple types (not schemas). For schema models, this story shall also be told.... GUID is part of the common initialisms configured here. Thanks for reporting. I was unaware of this constraint. Could you please point me out this constraint in the swagger 2.0 spec. I can't find it.. We had deprecated this option some months ago, I just can't remember exactly why.\nWhat I can say however, is that there are some traps there and this would require some more thorough testing to make sure this really works as expected.\nI can see there are a lot of missing parts in this PR. As it is, it would only introduce bugs.\nFor instance: https://github.com/go-swagger/go-swagger/blob/81789e7a15fdae4906c34b64e48d8bd8bc0cc16c/generator/operation.go#L1073\nAnd also: https://github.com/go-swagger/go-swagger/blob/81789e7a15fdae4906c34b64e48d8bd8bc0cc16c/generator/templates/server/parameter.gotmpl#L7\nWell, I'll let @casualjim figure out if the intent shall be retained or not. What I can say is that this can only be perceived as incomplete and WIP.. I see. What you have made works specifically for this use case: generating barebones models.\nBut it cannot be merged as-is: there are many other use-cases when generating servers and clients.\nAnyway, you got the toolkit, so you may freely tamper with templates as you see fit.. With the examples given above, it seemed obvious to me that this PR would make client and server generation fail in many cases (models would not implement the Validatable interface and the templates currently don't skip this). Idem for schemas directly generated in the operations package (not in models). \nSo at best, this PR would cover the generate model case.\nEven there, one of the tricky undertakings of the model generation is to determine when to map attributes as pointers. This is essentially linked to validation rules. So I assume that a model without validation should not have pointers. Unfortunately, setting this flag is not enough for this.. The spec is invalid. Please run swagger validate first.\nThe --skip-validation only allows for a bit of of tolerance, but then you may panic the generator.. Results from checking your spec: swagger validate {your spec}\nvalidate.txt\n. Yes the -o flag is conflicting. We plan to remove this flag.. Could you please post the generated model and point out what is wrong with it? Thanks.. First case looks like a bug. Second case is expected, since the allOf makes a new type.. Yes. I just checked in here: x-go-type extension is currently only accounted for definitions, not nested structures. So this is not a bug, but a (limited) feature... :)\nI don't think this feature was created in the first place for this use case of hijacking type mappings inside definitions.\nA hacky way to go could be to change the type mapping, like defined here and define or redefine some format to map as json.RawMessage.. it is not supported atm but you may still experiment locally based on this. I am not sure about how we could integrate this with a PR while making sure it is not breaking anything.\nSome days ago, I was reflecting on a similar problem about optionally mapping binary format as []byte rather than the default io.ReadCloser. I feel this is a related theme.\n. I think this is a known jsonschema subtlety like described here. It is not clear to me what we are doing specifically wrong with go-swagger.. Looks very much like a GOPATH issue with the go import tool.\nMaybe setting a generation target inside GOPATH would help?. It works with go modules, but not with arbitrary module location.\nOur issue here is dealing with the goimport tool, which does not support this yet.\n. @lukekhamilton  we are monitoring toolchain support progress here, in case you are interested:\nhttps://github.com/golang/go/issues/24661. Hello. Care to elaborate on that one?. Empty issue. Closed. The ref with only a fragment is invalid. Try: $ref: \"#/BaseRequest instead. Ok now I understand what is happening.\nSince there is no reference from the spec to the WriteRequest it is not pulled by the spec flattening (you can see the same result with just swagger flatten {your spec}.\nThat's because the flattening only pulls dependencies based on $ref, and not based on the implicit dependency created by the subtype definition.\nIf you add to your spec an entry point that pulls the WriteRequest then everything goes as expected.\nI don't think we can reasonably fix this issue in flatten, since this would force the process to explore the rabbit hole and figure out afterwards if any such implicit dependency exists.. Just query open issues with appropriate filter. Tags are rather well maintained.. I don't know if it is a \"won't fix\"... I would say: \"sure, I won't fix it\". This could be an enhancement, though, but I doubt any candidate will be ready to pay the price to bring a real fix for this in flatten. \nIf you feel strong about it, you can have a look at the flatten code here https://github.com/go-openapi/analysis. Could you please join your full specs?. I am asking because I don't quite understand what you want to achieve from the snippet you are giving. It looks like you are expecting a merger of arbitrary json objects (like x-stream-definitions)\nbut this is not what the tool provides.\nHowever, swagger mixin only supports merger of swagger specs, e.g. it understands a definitions sections.\nOn the other hand this x-stream-definitions could be an extension we would expect to be merged, but this would not be defined at the top level.. ok now I see more clearly. The swagger object is extensible. This should work.\nMaybe this is just an issue with nesting the object? Like:\n`json\n{\n  \"x-stream-definitions\": {\n  ...\n }\n}. Oh when checking in the code I can see this is not supported... This is indeed a bug. Nice catch.. Well I think this is rather straightforward in here. I am very busy at doing other things these days...\nIf you can't wait, I'll certainly welcome a PR on go-openapi/analysis. . Such value is not a valid http status code which is required by swagger. Yeah, @casualjim is right. Bug acknowledged. Empty string value is not a valid value.\nI think you may work around the peculiarity of your server by removing this header with a custom Roundtripper for your client.. Interesting... Does it work when you specify a fully qualified package path (e.g. relative to GOPATH/src), not just relative?. I need to test that further.  I am pretty sure that an import statement is at first generated, but then discarded by go import because it can't find this. The target path that is generated is probably wrong. To make sure of this one has to generate with a config file disabling the source formatting on generated code.. I made some changes recently on this and I might have overlooked a bug here.\nI'll reproduce this with formatting disabled to figure out. In swagger, you cannot put arbitrary references to any valid json pointer: schemas must be in the definitions section. If you fool the ref resolution by specifying a root, then the spec flattening process imports your ref under the  hood under definitions so that's why it works in this case.. > I did not update examples/contributed-templates/stratoscale/ as the go generate call in examples/contributed-templates/stratoscale/restapi/configure_petstore.go is missing.\nThis is intended, the stratoscale contrib template set generates itself the configure file.\nOverall I think it is good to go.. @knweiss Thank you for this contribution. Now you just need to PGP-sign your commit and you're good.... Actually I didn't find where this method could be used in the code. The only use I could find was through templates: hence forcing empty string. Yes. My change just came from go fmt... But I'll do it fine.. The point is to catch errs from methods which do not return error.\nMy concern was essentially the key \"baseImport()\" method.\nI can let the panic go if you prefer. I suggest to leave it as a comment: best to catch the stack hen the product is more stable.. Yes. Cute.. Same as TargetPath() method.. Oops. Sure I did. Yes, you're probably right I haven't looked hard enough into vim add-ons.\nDon't merge the PR yet: a number of unit test is coming up.\nI let the CI run to figure out the coverage.. typo in option here. typo in option here. This change has changed the CI's result on CircleCI docker build task:\nskipping the validation allowed to pass docker spec  - now validation is enforced so we can't generate\n  . Same here\nThis change has change the CI's result on CircleCI docker build task:\nskipping th validation alllowed to pass docker - now validation is enforced so we can't generate. This has caused the CI Appveyor to hang I believe.\nWe should not let the generation run on this spec : the Validate spec is I believe important. Theses specs are somehow invalid for go-swagger (docker, ms-cog, bitbucket).\nI kept the original version so we can continue to measure our success against this yardstick.\nHowever, for cases of legitimate spec invalidation by swagger validate, I produced a \"fixed\" version which is valid and allow us to check our full generation.\nSpec \"fixes\" are as follows:\n- docker: made OperationId unique\n- ms-cog: duplicate property in allOf construct (which is valid JSON but refused by our validator, which is debatable, I don't know the expected behavior from Swagger 2.0 in this case)\nWe have other problems for valid canary specs.\nThese ones are not fixable at the spec level: there are simply excluded from the test run:\n- bitbucket: wrong model generation\n- kubernetes: use of options in mime type is not supported (produces duplicates in switch constructs) (kubernetes spec produces a valid client, though). You have been using invalid spec for codegen unit testing for quite a while.\nIt doesn't hurt since you are using low level templating UT, but it's not workable for full code generation.\n\"-fixed\" means that this is a valid spec.\nI tried to change as little as possible because of the code pattern matching in UT.\nHence, in cases where I wished to non-regress your fixtures, I add to make a copy and make it a valid spec.\nChanges: \n- todolist.simple-fixed.yml : default value must validate the data type, path params are required\n- azure-analysis: same as ms-cog i canary (duplicate property in allOf)\nI introduced reuse codegen specs in a new CI test run (./hack/codegen-nonreg.sh) to extend our testing capabilities. However many fixtures fail for full generation. All this is explained as comments in the test script.\n. Perhaps it should, but it is not working like this currently.\nYou've just opened a new issue in the go-openapi/spec package... \ud83d\udcaf \nrequired: true is not implied and (currently) must be provided explicitly. This check is carried on by validate.\n. OK. This part is under full rework as it is not satisfactory and did not pass my internal round of testing.\nInitialization of default values for parameters is actually quite a bit more complex than expected,\nwhen considering formats (which do not expose a consistent initialization interface), arrays and nested arrays.\nThis method was originally intended to initialize slices.\nWe'll have another round of discussion on this with forthcoming commit. Sure, when it is nested.\nBut the template is self-reproduced: for the first instance, we need to guard against possible ranging into the next level. Hence the if len(x). I could check if we are within the .Child tree to remove this unessary check further down.\nHere is an example of code I am currently generating with tests.\nPlease mark that array outermost validation still go to the validate private func.\nFor nested arrays, we are compelled to produce some less elegant code.\nFor param spec:\nyaml\n/mixed/deepnested:\n    get:\n      operationId: getInDepth\n      parameters:\n      - name: deepNested1\n        in: query\n        type: array\n        collectionFormat: pipes\n        required: true\n        maxItems: 2\n        items:\n          type: array\n          collectionFormat: csv\n          minItems: 2\n          items:\n            type: array\n            collectionFormat: ssv\n            uniqueItems: true\n            items:\n              type: string\n              pattern: '^[a-z]$'\nI got:\n```golang\nfunc (o *GetInDepthParams) bindDeepNested1(rawData []string, hasKey bool, formats strfmt.Registry) error {\n    if !hasKey {\n        return errors.Required(\"deepNested1\", \"query\")\n    }\nvar qvDeepNested1 string\nif len(rawData) > 0 {\n    qvDeepNested1 = rawData[len(rawData)-1]\n}\n\ndeepNested1IC := swag.SplitByFormat(qvDeepNested1, \"pipes\")\n\nif len(deepNested1IC) == 0 {\n    return errors.Required(\"deepNested1\", \"query\")\n}\n\nvar deepNested1IR [][][]string\nfor i, deepNested1IV := range deepNested1IC {\n    deepNested1IIC := swag.SplitByFormat(deepNested1IV, \"csv\")\n    if len(deepNested1IIC) > 0 {\n\n        var deepNested1IIR [][]string\n        for ii, deepNested1IIV := range deepNested1IIC {\n            deepNested1IIIC := swag.SplitByFormat(deepNested1IIV, \"ssv\")\n            if len(deepNested1IIIC) > 0 {\n\n                var deepNested1IIIR []string\n                for iii, deepNested1IIIV := range deepNested1IIIC {\n                    deepNested1III := deepNested1IIIV\n\n                    if err := validate.Pattern(fmt.Sprintf(\"%s.%v\", fmt.Sprintf(\"%s.%v\", fmt.Sprintf(\"%s.%v\", \"deepNested1\", i), ii), iii), \"query\", deepNested1III, `^[a-z]$`); err != nil {\n                        return err\n                    }\n\n                    deepNested1IIIR = append(deepNested1IIIR, deepNested1III)\n                }\n\n                deepNested1IIR = append(deepNested1IIR, deepNested1IIIR)\n            }\n\n            // uniqueItems: true\n            if err := validate.UniqueItems(fmt.Sprintf(\"%s.%v\", fmt.Sprintf(\"%s.%v\", \"deepNested1\", i), ii), \"query\", deepNested1IIIC); err != nil {\n                return err\n            }\n\n        }\n\n        deepNested1IR = append(deepNested1IR, deepNested1IIR)\n    }\n\n    deepNested1ISize := int64(len(deepNested1IIC))\n\n    // minItems: 2\n    if err := validate.MinItems(fmt.Sprintf(\"%s.%v\", \"deepNested1\", i), \"query\", deepNested1ISize, 2); err != nil {\n        return err\n    }\n\n}\n\no.DeepNested1 = deepNested1IR\nif err := o.validateDeepNested1(formats); err != nil {\n    return err\n}\n\nreturn nil\n\n}\nfunc (o *GetInDepthParams) validateDeepNested1(formats strfmt.Registry) error {\ndeepNested1Size := int64(len(o.DeepNested1))\n\n// maxItems: 2\nif err := validate.MaxItems(\"deepNested1\", \"query\", deepNested1Size, 2); err != nil {\n    return err\n}\n\nreturn nil\n\n}\n```. I don't remember how exactly, but I had a case of panic() when testing and added the guard in a hurry. I've to look at it more closely the. Ah got it now (it has been a few days...): the if does not only guard the loop but the append() after the loop too. So it's not completely useless. . BTW hello Greg. And thank you for your comments.\nYou are looking at the wrong place (this part is to generate headers not parameters - yes, I had to change it too to support arrays, this story shall also be told...).\nLook at the sample generated code I provided above. I believe it's more understandable than the template, which is well, ahem, funky, yes.. yeah i am focused on parameters right now. that's the most complex. i have to look again for the response - this one was a quick fix - thanks. I am not sure that string(bytes.Replace(.... Replace(b,[]byte(\"}\"), [}byte(\",}\",-1), []byte(\"[\"), []byte(\"{\"....)\nwould be more readable... \nI am adding tests to demonstrate use with properties, even if the initial intent is especially to deal with slices.. got naming problems with headers when starting generating collections. I try to gather evidence for the change (please wait). Need some guidance as I am not following you on this \nThis was supposed to be done by spec (<= the first possible moment) and it is not.\nLast possible moment is render time. Don't you think we haven't already loaded the templates enough with logics like this?. Was just easier to experiment with. I am replacing it with a struct member then.. ok. It jast just easier to avoid spreading too much changes everywhere. If now you agree with the change, I can make it to the Gen struct.\nAnother similar info not mentioned in your comments (because it's stealthier) is the choice of initialization method for default values (i.e. determining if a native initializer is used, a type conversion TYPE() construct, or calling to MarshalText())\nThis one should be a member of the GenXXX structs as well.. I understand, this means handling the default in templates, everywhere we use Split/JoinByFormat\nIs it what you want? Even more logics in templates?\n. OK. Will test this, though.. OK. Will do. Will add a HasSomeDefaults bool in the GenXXX structure for Params and Headers.\nWill see later on if relevant to generalize this to models (there are some defaulting issues with models too... this story shall also be told). OK. OK. \nBTW, this is just to generate a comment in source to more easily relate generated code to spec in nested loops. \nDo you think I should follow a specific guideline to allow some day the \"generate spec\" feature to benefit from this as well?. Format aliasing is more complex than it seemed at first and interacts with strfmt format normalizer.\nSomething is wrong somewhere, I don't know exactly where, but I didn't fix it yet. Hence the TODO. \nI feel that all the fuss started with the introduction of bson support, but I am not sure really.\nI remove the TODO. Anyhow, I plan to ditch this whole structure and hand it over to strfmt someday (as a first step toward real custom formats, but before plugin support). good catch: I left an intermediate experiment here. This is actually equivalent to the simple: swag.ToVarName().\nWhy this transform? Actually the idea came from issue #863 \nExample for header: x-isAnOptionalHeader\nWith nested arrays constructs, I have an expressionValue at some point like 'x-IsAnOptionalHeader3I'\nVarNaming it gives the more correct xIsAnOptionalHeader3I.\nWhat is most important is that names are consistent with children.. ok done. good catch. The ToVarName() is sufficient and issue #863 fix with items remains valid.. OK. ok.. Ok tested on home-made unit test suite. Done everything here but a \"clean\" method to select the proper initializer for default values, which is still a shaky hack in templates. Postponed.. customFormatters is used to determine IsCustomFormatter and decide to run a validation.\nThere is no validation to be carried on these interfaces.\nThe type mapping from \"binary\" to io.ReadCloser remains above and is important.. I saw Writer was for the client. Though I did not specifically test the client, I scooped through templates to figure out other usages of IsCustomFormatter than validation. Do not forget to revert to master once the final integration is done. same remark as above. same as above. same. big contribution toward #1214 , but not solved yet: since the original spec structure is a map, the inner [] is still random and need sorting here.. I was referring to the OperationProps.Security in spec (https://github.com/go-openapi/spec/blob/bcff419492eeeb01f76e77d2ebc714dc97b607f5/operation.go#L34). This is an array of maps.. Same in https://github.com/go-openapi/spec/blob/bcff419492eeeb01f76e77d2ebc714dc97b607f5/swagger.go#L84. that means the requirements with \"AND\" (keys) come in any order right?. These lines are just to sanity check that the template executes correctly;\nUnfortunately we don't have a real integration test on the CI.\nWe just run codegen asserts (you have a lot of that in this test file). They are here to validate that the codegen looks as expected, but not that it actually works.... You have to test manually your codegen, then kind of \"freeze it\" with the codegen non-regression test.\nWe also added in the CI scripts another run of tests to check that the codegen actually builds for some selected fixtures (it is in ./hack/codegen-nonreg.sh). But we are not able (not yet at least) to really exercise automatically the resulting client/server/model.... Yeah I pondered between these 3... The dedupe is very \"local\", so eventually I put it close to where it is used... . OK. I am not this author of this comment (just tried to clarify its meaning).\nBut I agree with your remark and will add it as a source comment. Yes: that was the plan...\nI would like that we update vendor beforehand. I can take care of that. Would you like to merge the pending PR in spec before that?. OK done. Removed the workaround and rebased.. Replaced the previous TODO by your remark as a note in code.. In our previous attempts with gometalinter (no more in the CI, but still present when building a full docker image)\ngocyclo level was set to 20. There are simply too many method with cyclo between 10 and 20.. Interesting, previous maligned reports used to simply mention you can do better, with no suggestion!. I am not sure if we want this (standard setup of gometalinter too). \nWe have several places where we recall swagger constants such as \"body\" or \"in\" 2 or 3 times.\nUsing a const here does not really help understanding the code.... ok I see this is disabled with golangci (was not with gometalinter). This fixture file is actually not used in my test suite. I just added this to vizualize the flattened spec.. There is nothing really new. The \"x-go-gen-location\" hint is created by flatten but remains unused.. done. done. done. done. done. done. It is below, because it was unused (I just commented it out). Ah grmbl yes you're right. @liber-takano I merged this without paying much attention at first.\nNow that I am looking at it more at ease, I am really wondering why you want to delete this.\nHow about other template users who use Extensions?\nWhy is the redundant presence of xGoCustomTag here an issue for you?. Why adding this if here: if you are certain it is used only in the next if, why not moving it there?. ok I now realize this if not so obvious. Rest my case.. I would prefer 'TemplateSet' here, I think it is more explicit about the intent.. Do you really need this? This option is actually already available in the config of the template itself.\nYou may override it directly without adding this bool.. This may be overriden directly in the section running templates. There is a SkipExists flag on each template.. may be guarded by `!= \"\" or any default value here.. Do you really need this?\nAfaik, dependencies are managed automatically by the template repo.\nThis works when there are external files, I did not check with preloaded assets.. What I mean is why don't you just mimick what we do manually with the yaml config file?\nWhen using the config file, I change the path of my templates and everything which needs override is well resolved without a single change in the repo_template code.\nIf there is a way to do that from config rather than altering this code, all the better, don't you think?. I am adding here a sample config file of mine which overrides things.\nIn my opinion, you should alter this struct defaults (e.g. before loading the user's own config file)  rather than going with more variables in GenOpts.\nNote the SkipExists flag and the Source entry referring to the template with implied path (prefixed with asset if we assume this is preloaded).\nyaml\nlayout:\n  application:\n    - name: configure\n      # Generates configure_api.go. \n      # This is a modified bersion of the standard version, with \n      # automatic registration of API operations handlers and \n      # custom OAuth2 authorization method.\n      source: asset:serverConfigureapi\n      target: \"{{ joinFilePath .Target .ServerPackage }}\"\n      file_name: \"configure_{{ .Name }}.go\"\n      # Set to false now that our template links to implem\n      skip_exists: false\n      skip_format: false\n      # Generates main for server [disabled]\n    - name: main\n      source: asset:serverMain\n      target: \"{{ joinFilePath .Target \\\"cmd\\\" (dasherize (pascalize .Name)) }}-server\"\n      file_name: \"main.go\"\n      # Generates embedded spec\n    - name: embedded_spec\n      source: asset:swaggerJsonEmbed\n      target: \"{{ joinFilePath .Target .ServerPackage }}\"\n      file_name: \"embedded_spec.go\"\n      # Generates server\n    - name: server\n      source: asset:serverServer\n      target: \"{{ joinFilePath .Target .ServerPackage }}\"\n      file_name: \"server.go\"\n      # Generates xxx_api.go (standard template).\n    - name: builder\n      source: asset:serverBuilder\n      target: \"{{ joinFilePath .Target .ServerPackage .Package }}\"\n      file_name: \"{{ snakize (pascalize .Name) }}_api.go\"\n      # Generates doc server. This is a stripped down version of the standard  \n      # server, with an interface to allow for composition\n    - name: doc\n      source: asset:serverDoc\n      target: \"{{ joinFilePath .Target .ServerPackage }}\"\n      file_name: \"doc.go\"\n      # Generates common methods for implementation package [specific]\n    - name: implementation_common\n      source: server/implementation_common.gotmpl\n      target: \"{{ joinFilePath .Target \\\"implementation\\\" }}\"\n      file_name: \"implementation_{{ (snakize (pascalize .Name)) }}_common.go\"\n      skip_exists: false\n      skip_format: false\n      # Unit test for common methods for implementation package [specific]\n    - name: implementation_common_test\n      source: server/implementation_common_test.gotmpl\n      target: \"{{ joinFilePath .Target \\\"implementation\\\" }}\"\n      file_name: \"implementation_{{ (snakize (pascalize .Name)) }}_common_test.go\"\n      skip_exists: false\n      skip_format: false\n      # Generates responders for implementation package [specific]\n    - name: implementation_responder\n      source: server/implementation_responder.gotmpl\n      target: \"{{ joinFilePath .Target \\\"implementation\\\" }}\"\n      file_name: \"implementation_{{ (snakize (pascalize .Name)) }}_responder.go\"\n      skip_exists: false\n      skip_format: false\n    - name: implementation_responder_test\n      source: server/implementation_responder_test.gotmpl\n      target: \"{{ joinFilePath .Target \\\"implementation\\\" }}\"\n      file_name: \"implementation_{{ (snakize (pascalize .Name)) }}_responder_test.go\"\n      skip_exists: false\n      skip_format: false\n    - name: implementation_parameter_test\n      source: server/implementation_parameter_test.gotmpl\n      target: \"{{ joinFilePath .Target \\\"implementation\\\" }}\"\n      file_name: \"implementation_{{ (snakize (pascalize .Name)) }}_parameter_test.go\"\n      skip_exists: false\n      skip_format: false\n    - name: implementation_gen_fixtures\n      source: server/gen_fixtures.gotmpl\n      target: \"{{ joinFilePath .Target \\\"implementation\\\" }}\"\n      file_name: \"gen_fixtures.sh\"\n      skip_exists: false\n      skip_format: true\n  models:\n    - name: definition\n      source: asset:model\n      target: \"{{ joinFilePath .Target .ModelPackage }}\"\n      file_name: \"{{ (snakize (pascalize .Name)) }}.go\"\n  operations:\n    - name: parameters\n      source: asset:serverParameter\n      target: \"{{ if gt (len .Tags) 0 }}{{ joinFilePath .Target .ServerPackage .APIPackage .Package  }}{{ else }}{{ joinFilePath .Target .ServerPackage .Package  }}{{ end }}\"\n      file_name: \"{{ (snakize (pascalize .Name)) }}_parameters.go\"\n    - name: responses\n      source: asset:serverResponses\n      target: \"{{ if gt (len .Tags) 0 }}{{ joinFilePath .Target .ServerPackage .APIPackage .Package  }}{{ else }}{{ joinFilePath .Target .ServerPackage .Package  }}{{ end }}\"\n      file_name: \"{{ (snakize (pascalize .Name)) }}_responses.go\"\n    - name: handler\n      source: asset:serverOperation\n      target: \"{{ if gt (len .Tags) 0 }}{{ joinFilePath .Target .ServerPackage .APIPackage .Package  }}{{ else }}{{ joinFilePath .Target .ServerPackage .Package  }}{{ end }}\"\n      file_name: \"{{ (snakize (pascalize .Name)) }}.go\"\n  operation_groups:\n    # Generates API skeleton methods for implementation package [specific]\n    - name: implementation_groups\n      source: server/implementation_groups.gotmpl\n      target: \"{{ joinFilePath .Target \\\"implementation\\\" }}\"\n      file_name: \"implementation_{{ snakize (pascalize .Name) }}.go\"\n      skip_exists: false\n      skip_format: false\n    - name: implementation_groups_test\n      source: server/implementation_groups_test.gotmpl\n      target: \"{{ joinFilePath .Target \\\"implementation\\\" }}\"\n      file_name: \"implementation_{{ (snakize (pascalize .Name)) }}_test.go\"\n      skip_exists: false\n      skip_format: false. We agree this is a choice string, not a flag, as discussed in the associated issue.. Consider applying overrides here: https://github.com/go-swagger/go-swagger/blob/8914a0f9bc4c11970552f133f8c9af106c1ac511/generator/shared.go#L222\n. Shouldn't we avoid calling when not used?\n```go\nif Template != \"\" {\n  contribOptionsOverride(opts)\n}\n````. Oh yes I did not figure it out. This is not very important. You have to consider that the user might chose to override the stratoscale template with a derivation of her own making, override again this skip decision for some reason.\nI would say that we should just override the defaults in the templates section before we load the user's own config file.. call EnsureDefaults() then patch. it is a standard rule in golangci to improve readability.\nIf you find a nice way to tune this in .golangci.yml, so it does not take literal strings in its count, but otherwise works on regular statements, I am interested.\nN.B: you may figure out locally using golangci-lint run (to be installed from github), which now replaces gometalinter on our repos.... Would prefer that we relax this constraint rather than disabling it altogether.\ni.e; \n```yaml\n lll:\nmax line length, lines longer will be reported. Default is 120. '\\t' is counted as 1 character.\nline-length: 200\n```\nshould pass and still we guard against unwanted code. OK, since this option is now available for every template to override the config setting, contrib template or not.. like mentioned above, I would prefer relaxing the check than disabling it. ok let it be like this. This markdown would be better located in the ./examples directory.\nYou are welcome to add some example/contributed-templates/stratoscale directory.\nWould be nice to add in there code for a full generated example.\nThe maintenance of examples (regeneration)) is normally carried out manually from time to time using the script in hack/regen-sample.sh. Please add your sample doc and code and update this script so we can maintain the example up-to-date with every maintenane.. ok. We discussed it and I rest my case. Let's disable it then. ok. We discussed it and I rest my case. Let's disable it then. maybe even better to return an error... I followed the previous lines of code with a lot of Fatalf, but frankly I would prefer to replace all those by return err / return fmt.Errorf(xxx)\nWhat do you think?. ok. ok done. Thanks. done. This one was just to follow our previous discussion on handling redirects with http.Redirect(),\nand illustrating usage of the ResponderFunc()... and no more publish sample code with context here.\nOf course, what you suggest is to avoid this call altogether and process redirection as a regular 302 response with header, etc. Since this significantly deviates from the \"oauth2\" example, I suggest this could be a complete dedicated example.. Shouldn't the dot be quoted in regexp?. This section is rather sensitive.\nCould you please explain why you needed to remove this?. Be extremely cautious here, because types maybe primitives with pointers. There are some flaws here and it is difficult to modify this without changing many other stuff.. Same story again : https://github.com/golangci/golangci-lint/issues/234. Yes. Hence the \"generally\" and \"should\" rather than \"always\" \"must\"... It remains a fair practice since it forces contributor to select relevant commit messages.. typo: doesn't take effect. is this the new default?. I am puzzled that this does not affect validation code... isn't it strange?. ok. no I meant, for null values in arrays. this omitempy stuff is supposed to alter validation right?. problem with randomness is that generation is no more stable, which is another problem.... here is how a similar issue (for client) was handled: https://github.com/go-swagger/go-swagger/blob/800a3052f0305ab54980f961bd4f1e8b3e5599fe/generator/operation.go#L281. for my part, the _result is good enough. It's no silver bullet, but reduces the likelyhood of conflict.. Thanks for reporting this. this is a new problem I think. I  manually generated some sample models to use as \"external packages\" from the main fixture spec.\nI may remove the \"DO NOT EDIT\" line if you found this misleading.. ok good. What motivates your change here?\nThe initial intent of this demo was precisely to show how to merge claims from several scopes.\nIf you break on first match, this defeats the purpose.... It looks like you want to achieve something else than the what I wanted to demonstrate here.\nIt might be interesting, although I can't clearly see what is the expected behavior here.\nA good way to illustrate how to play with this differently could be to contribute a full example with the specifics of your use case explained.. The intent documented with this function was \"// We verify that the claimed role is one of the passed scopes\".\nI understand that you want a all of check. \nIf this is the case, please add a function with this semantics and propose an additional path in the example that demonstrates this feature.. ",
    "btfak": "when i update this package,it's ok\ngolang.org/x/tools\n. but the file is from swagger 2.0 official example, anything wrong here ?\n\n. thanks ! \n. ",
    "chakrit": "Seems the generator also ignored responses when multiple entries are defined?\nExample operation:\nyaml\nput:                                                  \n  tags: ['tweets']                                    \n  operationId: 'putTweet'                             \n  summary: 'Send a single tweet.'                     \n  parameters:                                         \n    - name: 'tweet'                                   \n      in: 'body'                                      \n      description: 'The tweet to post'                \n      required: true                                  \n      schema: { '$ref': '#/definitions/Tweet' }       \n  responses:                                          \n    '201':                                            \n      description: 'Tweet has been saved.'            \n      schema: { '$ref': '#/definitions/Result' }      \n    '400':                                            \n      description: 'There are validation error(s).'   \n      schema: { '$ref': '#/definitions/Result' }\nThis result in the following signature being generated for the operation:\ngo\ntype PutTweetHandlerFunc func(PutTweetParams) error\nSo no mention of the Result struct there.\n. Assuming this is because there is no code in go-swagger to differentiate between different response codes yet?\n. @casualjim ^ did that for you : )\n. Tagged operations still have casualjim in there tho. I am not sure where that came from.\n. Also I think the list of types might benefits from go generate in some way or another. Those MarshalText() calls could just be generated.\n. @casualjim would you accept a PR for this? Code should be pretty trivial.\n. Closing since #39 has been merged.\n. Just discovered from reading the source that you can do generate server --skip-support, so closing this now.\nStill think there should be a counterpart on the individual generation command itself by way of generating everything by default and enter whitelisting mode only if some names were given.\n. There are some test failure from path_test.go on my machine but it looks like some OSX-specific issue so not sure how to fix yet. Everything else passes.\n```\n    Error Trace:    path_test.go:79\nError:      Not equal: \"/var/folders/ln/np47z2750376j3y5nqtk2wp00000gn/T/pkgpaths-2444302576/src/fuu/bir\" (expected)\n                != \"/private/var/folders/ln/np47z2750376j3y5nqtk2wp00000gn/T/pkgpaths-2444302576/src/fuu/bir\" (actual)\n\nFAIL\nFAIL    github.com/go-swagger/go-swagger/swag   0.133s\n?       github.com/go-swagger/go-swagger/validate   [no test files]\n```\n. Oh looks like all tests passed on circle and travis : )\n. Its part of JSON Schema, which I think is what the swagger spec defers to. Not sure if the extent is specified in the schema, I'll dig up something. It does enable a lot of interesting use cases for the specs that we want to use, though.\n. \nThis is from the spec on the swagger.io site. So, yeah it is officially recommended :-)\n. I'll see if I can help you with a PR\n. @casualjim @webron the markdown you linked contained the exact same text. https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#file-structure\n\nHowever, parts of the definitions can be split into separate files, at the discretion of the user. This is applicable for $ref fields in the specification as follows from the JSON Schema definitions.\n\nI'm not confusing swagger with JSON Schema, but this is in the spec. So if this shouldn't be supported, why is it still in the spec? Should it be removed?\n. As I stated earlier though, the spec files gets large pretty quickly as we're adding features. The ability to compose them up from smaller files is a very crucial feature for us.\n. So re-posting from the chat, in case anyone else's searching for this issue: Per-model reference works. Referencing the whole definitions key does not.\nWORKS:\nyaml\ndefinitions:\n    User: { '$ref': 'another-file.json#/definitions/User' }\nALSO WORKS:\nyaml\ndefinitions:\n    User: { '$ref': 'http://example.com/swagger.json#/definitions/User' }\nDOES NOT WORK\nyaml\ndefinitions: { '$ref': 'http://example.com/swagger.json#/definitions' }\n. ",
    "midoblgsm": "Having the same issues even by modifying the templates. Could it be that the generator is referring to external templates? Because even when I removed the templates completely, the server was generated with the wrong package paths.\n. Thanks, this was helpful!\n. I agree with you @casualjim, I think it is better to keep any specific support (like sql one) out of go-swagger. Otherwise, things will be unmanageable.\n. ",
    "magnushiie": "Seems go generate was not run after the package namespace change from casualjim->go-swagger. That's an unrelated change to the Windows one but I didn't create a branch for it, let me know if you want to split.\n. Sorry, yes, of course, I didn't check after rebasing (and the generated files were dirty because of line endings in the encoded data). Removed that commit now.\n. ",
    "ceram1": "I'm working on it. But I'm not sure if struct can be exported directly.\nDo I need to do it in this way?\n```\ntype simpleSchemaProp {\n    // ...\n}\ntype SimpleSchema{\n    simpleSchemaProp\n}\n```\n. I can't remember, but I think I created this issue because I need to write several functions which does same thing.\nI wanted to create a function with this signature, but I couldn't. Instead, I just wrote several functions, and this is not an issue for me. Closing..\nfunc setType(p spec.SimpleSchema, t SourceType) {\n    if t.IsRef() {\n        p.Ref = spec.MustCreateRef(\"#/definitions/\" + t.GetName())\n    } else {\n        p.Type = toSwaggerType(t)\n        p.Format = toSwaggerFormat(t)\n    }\n}\n. Multiple functions like\nfunc setItemsType(p spec.Items, t SourceType) {\n// same code\n}\nworks\n. ",
    "chancez": "@casualjim I'm running into this and it's making updating API bindings really troublesome because diffs become incomprehensible. Is it possible to get this PR updated and merged in? Would be glad to test patches.\n. @casualjim Client parameters. \nIt looks like 8e9c7f5 fixed part of it, but the client/{appname}_frontend_client.go file is still not deterministic.\nIf you want this filed as a new issue, let me know.\nExample: \nFirst run:\n```\ndiff --git a/common/go-quay/client/quay_frontend_client.go b/common/go-quay/client/quay_frontend_client.go\nindex c35c01b..dc3a177 100644\n--- a/common/go-quay/client/quay_frontend_client.go\n+++ b/common/go-quay/client/quay_frontend_client.go\n@@ -7,6 +7,7 @@ import (\n    \"github.com/go-swagger/go-swagger/client\"\n    \"github.com/go-swagger/go-swagger/strfmt\"\n\n\"github.com/foo/test/common/go-quay/client/archivedlogs\"\n    \"github.com/foo/test/common/go-quay/client/billing\"\n    \"github.com/foo/test/common/go-quay/client/build\"\n    \"github.com/foo/test/common/go-quay/client/discovery\"\n@@ -25,91 +26,90 @@ import (\n    \"github.com/foo/test/common/go-quay/client/team\"\n    \"github.com/foo/test/common/go-quay/client/trigger\"\n    \"github.com/foo/test/common/go-quay/client/user\"\n\"github.com/foo/test/common/go-quay/client/userfiles\"\n )\n\n// New creates a new quay frontend client\n func New(transport client.Transport, formats strfmt.Registry) *QuayFrontend {\n    cli := new(QuayFrontend)\n\ncli.Logs = logs.New(transport, formats)\n\ncli.Repositorynotification = repositorynotification.New(transport, formats)\n\n\ncli.Secscan = secscan.New(transport, formats)\n\n\ncli.User = user.New(transport, formats)\n\n\ncli.Repository = repository.New(transport, formats)\n\n\ncli.Image = image.New(transport, formats)\n\n\ncli.User = user.New(transport, formats)\n\ncli.Billing = billing.New(transport, formats)\n+\n\ncli.Tag = tag.New(transport, formats)\ncli.Repotoken = repotoken.New(transport, formats)\n\n\ncli.Repositorynotification = repositorynotification.New(transport, formats)\n\ncli.Robot = robot.New(transport, formats)\n+\n\ncli.Logs = logs.New(transport, formats)\ncli.Build = build.New(transport, formats)\n\n\ncli.Permission = permission.New(transport, formats)\n\n\ncli.Organization = organization.New(transport, formats)\n\n\ncli.Robot = robot.New(transport, formats)\n\n\ncli.Permission = permission.New(transport, formats)\n\n\ncli.Prototype = prototype.New(transport, formats)\n\n\ncli.Search = search.New(transport, formats)\ncli.Team = team.New(transport, formats)\n\n\ncli.Billing = billing.New(transport, formats)\n\n\ncli.Archivedlogs = archivedlogs.New(transport, formats)\n\n\ncli.Userfiles = userfiles.New(transport, formats)\n\n\ncli.Trigger = trigger.New(transport, formats)\n\n\ncli.Tag = tag.New(transport, formats)\n\n\ncli.Repository = repository.New(transport, formats)\n\n\ncli.Search = search.New(transport, formats)\n\n\ncli.Prototype = prototype.New(transport, formats)\ncli.Discovery = discovery.New(transport, formats)\n\n\n-   cli.Image = image.New(transport, formats)\n-   cli.Trigger = trigger.New(transport, formats)\n\ncli.Organization = organization.New(transport, formats)\n\ncli.Secscan = secscan.New(transport, formats)\nreturn cli\n }\n\n\n// QuayFrontend is a client for quay frontend\n type QuayFrontend struct {\n-   Logs logs.Client\n+   Repositorynotification repositorynotification.Client\n\nSecscan *secscan.Client\n\nUser *user.Client\n\n\nRepository *repository.Client\n\n\nImage *image.Client\n\n\nUser *user.Client\n\nBilling *billing.Client\n+\n\nTag *tag.Client\nRepotoken *repotoken.Client\n\n\nRepositorynotification *repositorynotification.Client\n\nRobot *robot.Client\n+\n\nLogs *logs.Client\nBuild *build.Client\n\n\nPermission *permission.Client\n\n\nOrganization *organization.Client\n\n\nRobot *robot.Client\n\n\nPermission *permission.Client\n\n\nPrototype *prototype.Client\n\n\nSearch *search.Client\nTeam *team.Client\n\n\nBilling *billing.Client\n\n\nArchivedlogs *archivedlogs.Client\n\n\nUserfiles *userfiles.Client\n\n\nTrigger *trigger.Client\n\n\nTag *tag.Client\n\n\nRepository *repository.Client\n\n\nSearch *search.Client\n\n\nPrototype *prototype.Client\nDiscovery *discovery.Client\n\n\n-   Image *image.Client\n-   Trigger *trigger.Client\n\nOrganization *organization.Client\nSecscan *secscan.Client\n }\n```\n\nSecond run:\n```\ndiff --git a/common/go-quay/client/quay_frontend_client.go b/common/go-quay/client/quay_frontend_client.go\nindex c35c01b..779a7a8 100644\n--- a/common/go-quay/client/quay_frontend_client.go\n+++ b/common/go-quay/client/quay_frontend_client.go\n@@ -7,6 +7,7 @@ import (\n    \"github.com/go-swagger/go-swagger/client\"\n    \"github.com/go-swagger/go-swagger/strfmt\"\n\n\"github.com/foo/test/common/go-quay/client/archivedlogs\"\n    \"github.com/foo/test/common/go-quay/client/billing\"\n    \"github.com/foo/test/common/go-quay/client/build\"\n    \"github.com/foo/test/common/go-quay/client/discovery\"\n@@ -25,91 +26,90 @@ import (\n    \"github.com/foo/test/common/go-quay/client/team\"\n    \"github.com/foo/test/common/go-quay/client/trigger\"\n    \"github.com/foo/test/common/go-quay/client/user\"\n\"github.com/foo/test/common/go-quay/client/userfiles\"\n )\n\n// New creates a new quay frontend client\n func New(transport client.Transport, formats strfmt.Registry) *QuayFrontend {\n    cli := new(QuayFrontend)\n-   cli.Logs = logs.New(transport, formats)\n\ncli.Secscan = secscan.New(transport, formats)\n\ncli.Trigger = trigger.New(transport, formats)\ncli.Repository = repository.New(transport, formats)\n\n\n-   cli.User = user.New(transport, formats)\n\ncli.Repotoken = repotoken.New(transport, formats)\n\ncli.Permission = permission.New(transport, formats)\ncli.Repositorynotification = repositorynotification.New(transport, formats)\n\n\ncli.Build = build.New(transport, formats)\n\n\ncli.Team = team.New(transport, formats)\n\n\ncli.Permission = permission.New(transport, formats)\n\n\ncli.Discovery = discovery.New(transport, formats)\n\n\ncli.Robot = robot.New(transport, formats)\n\n\ncli.Image = image.New(transport, formats)\n\n\ncli.Prototype = prototype.New(transport, formats)\n\n\ncli.Archivedlogs = archivedlogs.New(transport, formats)\n\n\ncli.Team = team.New(transport, formats)\n\n\ncli.Build = build.New(transport, formats)\n\n\ncli.Billing = billing.New(transport, formats)\n\n\ncli.Organization = organization.New(transport, formats)\n\n\ncli.Userfiles = userfiles.New(transport, formats)\n\n\ncli.Search = search.New(transport, formats)\n\n\ncli.Tag = tag.New(transport, formats)\n\n\ncli.User = user.New(transport, formats)\n\n\ncli.Search = search.New(transport, formats)\n\n\ncli.Logs = logs.New(transport, formats)\n\n\ncli.Discovery = discovery.New(transport, formats)\n\n\ncli.Secscan = secscan.New(transport, formats)\n\n\ncli.Image = image.New(transport, formats)\n\n\ncli.Tag = tag.New(transport, formats)\n\n\ncli.Trigger = trigger.New(transport, formats)\n\n\ncli.Robot = robot.New(transport, formats)\n\n\ncli.Organization = organization.New(transport, formats)\n\ncli.Prototype = prototype.New(transport, formats)\n+\ncli.Repotoken = repotoken.New(transport, formats)\n+\n\ncli.Billing = billing.New(transport, formats)\nreturn cli\n }\n\n\n// QuayFrontend is a client for quay frontend\n type QuayFrontend struct {\n-   Logs logs.Client\n-\n-   Secscan secscan.Client\n+   Trigger *trigger.Client\nRepository *repository.Client\n\n-   User *user.Client\n\nRepotoken *repotoken.Client\n\nPermission *permission.Client\nRepositorynotification *repositorynotification.Client\n\n\nBuild *build.Client\n\n\nTeam *team.Client\n\n\nPermission *permission.Client\n\n\nDiscovery *discovery.Client\n\n\nRobot *robot.Client\n\n\nImage *image.Client\n\n\nPrototype *prototype.Client\n\n\nArchivedlogs *archivedlogs.Client\n\n\nTeam *team.Client\n\n\nBuild *build.Client\n\n\nBilling *billing.Client\n\n\nOrganization *organization.Client\n\n\nUserfiles *userfiles.Client\n\n\nSearch *search.Client\n\n\nTag *tag.Client\n\n\nUser *user.Client\n\n\nSearch *search.Client\n\n\nLogs *logs.Client\n\n\nDiscovery *discovery.Client\n\n\nSecscan *secscan.Client\n\n\nImage *image.Client\n\n\nTag *tag.Client\n\n\nTrigger *trigger.Client\n\n\nRobot *robot.Client\n\n\nOrganization *organization.Client\n\nPrototype *prototype.Client\n+\nRepotoken *repotoken.Client\n+\nBilling *billing.Client\n }\n```\n. Reported this upstream to the quay.io folk. I'll leave this open since it seems validation/client generation should probably be able to determine this was, in fact not completely valid. (maybe just do a rough pass at the beginning to check all operations are unique?).\n\nBy the way, I wrote a simple JQ query which is able to tell me if any operationIds were repeated if it's of use to anyone finding this themselves.\ncurl https://quay.io/api/v1/discovery | jq '.paths[][].operationId?' | uniq -d\n. @casualjim I'm still finding this issue with the following repo.\nhttps://github.com/ecnahc515/billforward/tree/generated_client\nThe example snippet above has been corrected (located in client/accounts/get_by_user_id_parameters.go of generated code). However, in client/product_rate_plans/remove_tax_parameters.go you'll see that it's organizations parameter is still generated as a pointer even thought it's a slice. Same result, the nil check happens but it never actually generates the code that uses the parameter, resulting in invalid Go code.\n. Line number of the parameter causing problems: 10306 (removeTax), Line number of the parameter that is the same, but works: 7201 (get). \nNote: I'm realizing this new schema now has duplicate operationIds, which is another new issue, but I think unrelated..\n. It never calls the generic unmarshal function which switches on the dispatch property in the case of the array of PricingComponent's. You're correct, each implementation has it's own MarshalJSON/UnmarshalJSON implementation, but the function which calls those never gets run in the case of an array. \nHere's an example of the generated code for those (with the extra properties, sorry got lazy):\nhttps://gist.github.com/ecnahc515/0c7cd5769efc58690f66\nNo array: https://gist.github.com/ecnahc515/0c7cd5769efc58690f66#file-product_rate_plan_no_array-go-L117\nCauses this to get generated: https://gist.github.com/ecnahc515/0c7cd5769efc58690f66#file-product_rate_plan_no_array-go-L649-L724\nAn array: https://gist.github.com/ecnahc515/0c7cd5769efc58690f66#file-product_rate_plan_with_array-go-L118\nCauses no custom MarshalJSON or UnmarshalJSON to get generated for the ProductRatePlan object at all.\n.  I believe when we tested ffjson we found that ugorji codec was faster: https://github.com/coreos/etcd/pull/3308\nhttps://github.com/ugorji/go/tree/master/codec\n. Rebuilding after deleting my models/client directories fixed it.\n. I've partially fixed the tests, just need to take some time to finish the rest up and push the changes. I've got a patch in the code I'm using to work around this particular issue, so it's not an immediately pressing thing. Regardless I'll try to wrap this up soon.\n. I'm not sure how I feel about that.\nThe issue is that most APIs often will try to interpret the zero value sent, often causing problems for things like dates, which will default to Jan 1, 1970, which is never the intended behavior the API designer intended, and often requires' forking the upstream swagger to add x-isnullable so the correct behavior occurs.\nThe simple solution is to always use pointers, unless on a slice, or map, which can be nil already. The required flag would simply cause a check for nil on the property to be generated as validation. No longer would it effect whether a value is a pointer or not.\nTo compare to another library I've used, aws-sdk-go it's very consistent all around in using pointers. Defaults could stay pretty simple, and you can use the swag functions to get zero values from nil properties without having to check for nil\nIt may be a bit more verbose, but I believe it is truely the correct behavior to never send values not filled in, meaning in some fashion, you should use a pointer, since a zero value cannot be assumed to be unset. There's no need to do anything crazy with extra fields/types/etc for the base object that go-swagger generates, because we can more easily build those accessor/setter patterns on top of this base, and additively to boot, after we've decided if we want multiple return values, structs, chaining, etc.\n. ",
    "webron": "People tend to confuse the structure of the Swagger spec with JSON Schema, because there are similarities between the two. That said, just because we have definitions in the Swagger spec, doesn't mean it's the same definitions as defined by JSON Schema. We use the same name, but it's not exactly the same thing. Right now, we do not allow referencing the entire definitions to an external source.\n. ",
    "defcronyke": "My workaround was to use a bash script to inject the \"swagger\":2.0 at the beginning, after generating the spec, but I guess that works too. I hope you'll fix this though, since swagger 2.0 spec says the swagger field is required.\n. Just a quick followup to mention that the -o flag isn't working, so to save the spec to a swagger.json file, it was needed to use file redirection ( swagger generate spec > swagger.json ). Because of this, the workaround you mentioned won't work.\n. Upon further investigation, the field should be \"swagger\":\"2.0\" (the 2.0 must be a string), and also the \"$schema\" field must now be removed otherwise swagger-ui shows the swagger to be invalid.\n. I tried adding the appengine build constraint, and it didn't error out, but it generated an empty spec.\n. For an app engine app, typically the main.go doesn't require any of the special appengine imports... however it uses an init() function instead of a main() function, and in there is where you instantiate the router and bind all the routes to handlers. It is the handlers (usually in their own separate files) which need the appengine imports.\nI don't know if that's what you are asking about, but I know app engine fairly well so I can answer more questions if you have any.\n. Fair enough, if you're not interested in supporting app engine that's fine. I did try forking to fix that other bug that I filed, but the code was a bit over my head so I wasn't able to fix it.\nTo answer your question, app engine apps don't get compiled with \"go build\", instead they are run on a dev server provided by the app engine SDK, and then they are deployed to app engine and run on the Google Cloud Platform infrastructure. The only reason they don't compile is because some of the packages (\"appengine\", \"appengine/datastore\", etc.) are only available in this SDK environment, they are not found in $GOPATH.\nMaybe app engine could improve this situation in the future, and then go-swagger wouldn't have to change to support it, but as it stands now this will not work with any app engine apps that use any of the appengine-specific imports.\nI will go back to using github.com/yvasiyarov/swagger for now, which doesn't require the app to build to generate the spec, but it is also not generating swagger 2.0, so I hope I can use your package sometime in the future.\n. Hmm that is an interesting thought. I will experiment more on this today. The app engine SDK definitely uses the regular system GOPATH to resolve most of the includes, but it maybe has another internal GOPATH also, I'm not sure. Will post my findings a bit later.\n. Wow! You're right man! All that was needed to make generate spec work, was to add this to GOPATH:\n[go_appengine_sdk_location]/goroot\nThe appengine includes are in there. It's working now, thanks for the insight!\n. Sure that looks good to me.\n. ",
    "alanma": "@defcronyke @casualjim this thread is an awesome reading. I'm glad that I could use go+appengine+swagger with your validation. Thanks again for the discussion!\n. ",
    "mehdy": "but I think it still would be nice to implement the feature. I really want to set some custom reason because it really makes sense in swagger-ui.\nsomething like this maybe:\n/*\n...\n        409: \n          ref: UserResponse\n          reason: username already exists\n...\n*/\nany idea?\n. ",
    "itgirlalice": "@casualjim \nHi casualjim, do we have any plan on this issue?\nThanks,\nAlice\n. ",
    "darkcrux": "Thanks @casualjim, I'll use 797d4ba for now. Will post issues as I find them. I'll put in some PRs when I got the time too.\n. ",
    "Starli0n": "I will take a look. Thanks !\n. ",
    "wfuertes": "I'm having a similar problem, for a response like:\n\"children\" : {\n          \"type\" : \"array\",\n          \"items\" : {\n            \"$ref\" : \"#/definitions/NodeTree\"\n          }\n        }\nit works fine as expected. But when we have the follow:\n\"children\" : {\n          \"type\" : \"array\",\n        }\nIt is failing, so the $ref is being 'undefined' because that. Do you have any hit about how to solve this problem? \nThanks in advance.\n. @casualjim I found another issue related https://github.com/kongchen/swagger-maven-plugin/issues/224\n. @casualjim  Like you have asked follow my context, include response class, end-point and js where the code brokers, because of a undefined property $ref.\nRelated:  kongchen/swagger-maven-plugin#224\n```\npublic class NodeTree {\n    private Long id;\n    private String name;\n    private List children;\n// GETTERS AND SETTERS\n\n}\n```\nMy documented REST end-point.\n```\n@POST\n@Path(\"/{treeId}/nodes\")\n@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n@ApiOperation(value = \"Create node tree.\")\n@ApiImplicitParams(value = {\n    @ApiImplicitParam(name = \"nodeTree\", value = \"\", required = true, dataType = \"NodeTree\",\n                      paramType = \"data\")})\n@ApiResponses(value = { @ApiResponse(code = 200, message = \"Succees\", response = NodeTree.class)})\npublic Response createNodeTree(@ApiParam(value = \"Tree id\", required = true) @PathParam(\"treeId\") Long treeId, NodeTree nodeTree) {\n// IMPLEMENTATION OMITED\n\n}\n```\nSo the swagger-maven-plugin is generating the follow swagger.json:\n\"NodeTree\" : {\n  \"type\" : \"object\",\n  \"required\" : [ \"name\" ],\n  \"properties\" : {\n    \"id\" : {\n      \"type\" : \"integer\",\n      \"format\" : \"int64\"\n    },\n    \"name\" : {\n      \"type\" : \"string\"\n    },\n    \"children\" : {\n      \"type\" : \"array\"\n      /* Here missing the follow part: \n          \"items\" : {\n            \"$ref\" : \"#/definitions/NodeTree\"\n          }\n      */\n    }\n  }\n}\nBecause this the \"swagger-client.js\" is breaking in the follow function:\n```\nResolver.prototype.resolveTo = function (property, objs) {\n// it is breaking here, because we don't have \n  // $ref in the property to the type = array.\n  var ref = property.$ref;\nif(ref) {\n    if(ref.indexOf('http') === 0) {\n      if(Array.isArray(objs[ref])) {\n        objs[ref].push({obj: property, resolveAs: '$ref'});\n      }\n      else {\n        objs[ref] = [{obj: property, resolveAs: '$ref'}];\n      }\n    }\n  }\n  else if(property.type === 'array') {\n    var items = property.items;\n    this.resolveTo(items, objs);\n  }\n}; \n```\nI hope this can be useful in order to solve the problem.\nRegards.\nWillian.\n. ",
    "berndtbrkt": "A little bit off topic, but the same can be said for any field.  Is there a way to represent a nil value for a field?  Currently non-required (or nil valued) fields  are simply omitted, but I would think that it would be better if field values were pointers and could be nullable.  I'm currently trying to use the generated models in my own API/server implementation and this is an issue\n. ",
    "dolmen": "3 different issues should be filled a 3 different tickets.\n. > this could be a validation error though\nThat's what I mean.\n. The specification says about /parameters:\n\nAn object to hold parameters that can be used across operations. This property does not define global parameters for all operations.\n. To workaround this issue, I wrote a Perl 5 script that inlines parameters defined at global scope.\n. Why is this issue closed? I don't see a commit that fixes it...\n. > because there is nothing to fix, see my comment. You have to still refer to them as $ref wherever you want to use them.\n\nYes, that's exactly how I'm using them. So why is swagger validate still complaining about path param \"userId\" is not present in path \"/\" with the example initially presented? (I updated to the latest master)\nThe issue is NOT FIXED.\n. Here is another example. Parameter userId is used in path /users/{userId}. It is not used in either path /foo and /bar.\nThe issue is that each parameter in /parameters is reported as a error for any operation where it is NOT used.\nThe output:\nThe swagger spec at \"global-parameters-2.json\" is invalid against swagger specification 2.0. see errors :\n- path param \"userId\" is not present in path \"/foo\"\n- path param \"userId\" is not present in path \"/bar\"\nThe spec:\njson\n{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"version\": \"0.0.1\",\n    \"title\": \"test of Swagger global parameters\"\n  },\n  \"parameters\": {\n    \"userId\": {\n      \"name\": \"userId\",\n      \"in\": \"path\",\n      \"type\": \"string\",\n      \"required\": true\n    }\n  },\n  \"paths\": {\n    \"/foo\": {\n      \"get\": {\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful\"\n          }\n        }\n      }\n    },\n    \"/bar\": {\n      \"get\": {\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful\"\n          }\n        }\n      }\n    },\n    \"/users/{userId}\": {\n      \"parameters\": [\n        { \"$ref\": \"#/parameters/userId\" }\n      ],\n      \"get\": {\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful\"\n          }\n        }\n      }\n    }\n  }\n}\n. Parameters in global scope seem to be fixed.\nBut there is also an issue with parameters defined at path scope. I will open a separate issue.\n. In fact false is not allowed as a value for additionalProperties. This is because Swagger 2.0 has a more restricted definition than JSON Schema.\nSee @webron's clarification of the spec.\n. What is this net package you are refering to?\nI see no Context in stdlib net...\n. https://app.shippable.com/\n. ae029a7471324faf982064dd0c991e99205cb35b is a workaround for this issue, but not the cleaner solution I proposed (but I understand, more complex to implement).\n. I think this is out of scope for the core go-swagger. But that would be a cool project using the go-swagger libs.\n. The operationId is a key property of an operation to provide short commands.\n. If all required values are now pointers, this is a regression.\nWhy would a pointer be necessary if the value is required?\n. If the pointer was added because the standard JSON unmarshaler does not allow to distinguish when a property is missing, this is the JSON parsing that must be fixed (for example by providing a custom UnmarshalJSON method that checks for missing properties), not the struct.\n. > please consider the opposite case, where you want to validate the struct not the json. This use case is real on generated clients.\nIt seems we have now a case where the model generation could be improved if it knew if the model is used for client or for server. The readOnly flag in the spec is also useful.\n\nHow do you distinguish between value-set and value-unset?\n\nAs I stated in #132 we should distinguish the case where the Go zero value is a valid value or not. A pointer is not needed if the Go zero value is not a valid value for the schema.\n. @GlenDC Refactoring of this particular pattern is possible (but the result is much less readable), but that may not be practical for all cases. And most importantly, that's not the point. A Swagger spec using this pattern is valid. So \"swagger validate\" has a bug. I understand that go-swagger may not be yet able to generate working client and server code from this regexp because of limitations of the regexp engine, but that's not the point: \"swagger validate\" should work anyway.\n@casualjim The better solution would be to use the best of both worlds: use regexp if possible (because it safer against DoS attacks and is in stdlib) and use regexp2 only for patterns that use extended syntax (when regexp.Compile fails).. Well, you're right, this is not in the spec. This is more a suggestion for a linter than a requirement for a validator.\nAnd I initally thought it was a requirement because online.swagger.io reports this as an issue. But that other validator is the one that have a bug. See swagger-api/validator-badge#137.. ",
    "hoxnox": "There are two problems with the \"empty-line\" approach:\n\ngofmt eliminates these empty lines.\nWhat about swagger:operation with full description?. \n",
    "Alessar": "Header Version is only for example.\nIt will be better if possibility exists to add any headers.\n. ",
    "philips": "Thanks for the fast fixes!\n. ",
    "drewwells": "I'm still having issues with responses and I think this ticket is related...\nswagger validate passes, but there's errors about missing definitions on editor.swagger.io which seems to manifest as missing responses on all the endpoints on swagger-ui here: https://skillful-elf-105206.appspot.com/swagger/#/admin/bookings/\nMy route looks like this:\n// Bookings swagger:route GET /admin/bookings/ booking Bookings\n//\n// Bookings lists all the appointments that have been made on the site.\n//\n//\n// Consumes:\n// application/json\n//\n// Schemes: http, https\n//\n// Produces:\n// application/json\n//\n// Responses:\n// 200: BookingResponses\nMy response looks like this:\n// BookingResponses is a slice of bookings\n//\n// swagger:response BookingResponses\ntype BookingResponses struct {\n    // Booking slice\n    //\n    // in: body\n    // required: true\n    Bookings []makeplans.Booking `json:\"bookings\"`\n}\n. The bookingresponse is in a private git bit bucket repo and wraps booking\nin a separate repo. I can make a complete example in a gist so you can see\nit end to end.\nOn Tue, Nov 24, 2015, 10:52 PM Ivan Porto Carrero notifications@github.com\nwrote:\n\nif I follow the packages then the makeplans.Booking model lives in a\ndifferent repo is that right?\nAnd one is a git repo and the other a mercurial one?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/go-swagger/go-swagger/issues/75#issuecomment-159491527\n.\n. Here's a gist and output from swagger generate spec: https://gist.github.com/drewwells/f6bad58215d15ab0d8b4\n\nswagger-ui doesn't validate b/c something is off, but I think that's unrelated to the responses models being empty.\n. ack, you are right there's a typo in the gist. I reran it as BookingResponse\nHere's the output from swagger-ui about the response model: https://gist.githubusercontent.com/drewwells/f6bad58215d15ab0d8b4/raw/01c783261ea02f7e7f52d31a8573760077826d68/gist.json#/definitions/Booking is not defined!\n. This is consistent with my experience. When the internal structs do get definitions, they get shown in the swagger-ui output. So instead of it showing my nested responses BookingResponse{ Booking: {} } in the response model, it shows just Booking{}. So there must be some unwrapping going on here.\n. That's the behavior I'm trying to understand\n\"responses\": {\n    \"BookingResponse\": {\n      \"description\": \"BookingResponse represents a scheduled appointment\",\n      \"schema\": {\n        \"$ref\": \"#/definitions/Booking\"\n      }\n    }\n  }\nBookingResponse is being unwrapped. So Booking:{} is returned instead of BookingResponse{Booking:{}}. The response is BookingResponse, not Booking. swagger-ui makes this worse, since it has a bug with looking up that remote ref in the definition.\n. Working as intended, this can be closed\n. This would be terrifically useful!\nA couple lessons learned from building some cli tools for APIs:\n1. session file, so we can store session data for ease of use\n2. Detect login endpoint so auth APIs are easy to use with the cli\n3. Cross platform: portable cli binaries are very useful for testing an API\n. Which client is this referring to, the is the client generated from a swagger spec?\n. On go1.6, the client will automatically be http2 when the server supports it. In fact, the default behavior of http/2 clients is to identify as http/1.2. That should also take care of any efficiency gains from http2. There's no need to change anything to use streaming etc. Once it's http/2, the net/http will optimize the connection opens.\n. No problem, I went down the same train of though a few weeks ago. This is a really good post on the topic: http://rmurphey.com/blog/2015/11/25/building-for-http2\n. In: body in the response isn't necessary, it works without this.\nThe request part is what is throwing an error, specifically looking for RankBy \n// NearbySearchRequest\n//\n// swagger:parameters Nearby\ntype NearbySearchRequest struct {\n    maps.NearbySearchRequest\n}\n. so I should be able to use swagger:response without any optional name, and it will be found for my route. In my experience, this did not work for swagger:model. Still a relevant question, what is the ultimate answer? The swagger channel on Golang's swagger seems to be inactive, and the go-swagger account doesn't have any history.\nI'm disappointed that all generated struct properties use pointers, since it's impossible to write a struct literal with pointer strings. One of the nice things about Go is that every type has a relevant zero value. A useful blog post talking about this subject: https://dave.cheney.net/2013/01/19/what-is-the-zero-value-and-why-is-it-useful. ",
    "dustinsmith1024": "Yea, I just an example of how to use it.  Kind of confused on what the Transport should be in the generated New method.  \nThanks @casualjim.\n. Thanks I got that working now. However getting authentication errors.\nI followed this example https://github.com/go-swagger/go-swagger/blob/2e74a8626dbd66f60ef5a47e1d0bfaebd2c2b080/fixtures/codegen/tasklist.basic.yml and have this in my config.\nyaml\nsecurityDefinitions:\n  auth_token:\n    type: apiKey\n    name: Authorization\n    in: header\nin the individual route i have:\nyaml\npaths:\n  /customers:\n    get:\n      summary: Customer List\n      operationId: allCustomers\n      description: All registered customers. \n      parameters:\n      - name: order\n        in: query\n        type: string\n        description: Any field in the database.\n      tags:\n        - Customers\n      security:\n        - auth_token: []\n      responses:\n        '200':\n          description: An array of customers\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/CustomersResponse'\n        default:\n          description: Unexpected error\n          schema:\n            $ref: '#/definitions/Error'\nThis doesn't seem to generate any Authentication methods for me?  Or just not sure where to find them. I found this issue https://github.com/go-swagger/go-swagger/issues/40 but I dont have a AuthenticatesFor method in my generated code.\nThanks for the help.\n. ",
    "dlazerka": "@casualjim Both links are broken now (404). Any new links please?. Thank you, but those examples seem to be for some other swagger.\nE.g. I downloaded client code at https://app.swaggerhub.com/apis/spire-ro/ro_api/\nAnd there's no constructs like api.Default.Operations.All(operations.AllParams{}) at all.\nManually investigating the the code I realized I need a completely different approach, something like:\ncfg := api.NewConfiguration()\nclient := *api.NewAPIClient(cfg)\nclient.IonoApi.GetTecData(ctx, &opts)\nThere's nothing like that in examples by the links. Maybe there are some other examples? Wouldn't it be better to include those examples in README.md inside generated SDK package (like Java and Kotlin generators do)?. That link seems to document some older version. Currently generated Go Client SDK (from swagger main website) doesn't have apiclient.New(), instead, it has swagger.NewAPIClient() with different parameters.. ",
    "johndunne": "Pardon my reopening an old issue! I've encountered this exact same problem. I'm getting the error message\n2017/02/02 18:38:54 json: cannot unmarshal bool into Go value of type []string\nand I've no idea what in the 5824 line yaml file is causing the error. Some debug output identifying approximately where go-swagger got to when the issue is encountered would be great. . Hi, thanks your help! I've actually found the issue by diffing the last commit. The problem was a definitions object which looked like this:\ndefinitions:\n__MenuItem:\n_properties:\nitemcurrency:\n__type: string\n_required: false\nwhere the itemcurrency's required key is false. I think go-swagger was expecting a []string here and not a boolean.. ",
    "vikstrous": "Sweet! Thanks!\n. I can reproduce this every time by just running goswagger in a container. I used the following command: let me know if I'm doing something wrong.\ndocker run --rm -e GOPATH=/go -v /home/me/project:/go/src/github.com/org/project -w /go/src/github.com/org/project -u 1000:1000 quay.io/goswagger/swagger:0.6.0 generate client -f swagger2.json -t pkg/api-client\nUpdate: looks like the import is missing only in the models directory. Running goimports on every file in that directory manually fixes it.\n. I'm just running the docker image. It doesn't have access to what's on my system.\n. It works! Thanks!\n. ",
    "janeczku": "Still not working:\n```\ngo get -u github.com/go-swagger/go-swagger/...\ncd .; git --git-dir=/go/src/github.com/go-swagger/go-swagger/.git submodule update --init --recursive\nNo submodule mapping found in .gitmodules for path 'docs/public'\npackage github.com/go-swagger/go-swagger/...: exit status 1\n```\n. ",
    "bradrydzewski": "@casualjim it has something to do with GO15VENDOREXPERIMENT:\n```\ndocker run -t -i golang:1.5 /bin/bash -c \"GO15VENDOREXPERIMENT=1 go get -u github.com/go-swagger/go-swagger/...\"\ncd .; git --git-dir=/go/src/github.com/go-swagger/go-swagger/.git submodule update --init --recursive\nNo submodule mapping found in .gitmodules for path 'docs/public'\npackage github.com/go-swagger/go-swagger/...: exit status 1\n```\nwith GO15VENDOREXPERIMENT=1 it fails and with GO15VENDOREXPERIMENT=0 it succeeds.\n. ",
    "aleksandr-vin": "I think I need to explain the point of ordering this contract. I keep the generated sources under the VCS to track the differences, and this monkey-ordering between runs knocks me out.\n. Where are you calling swagger generate? And what are your GOPATH?\n. Quoting @casualjim from slacker:\ncasualjim [11:51 PM] \naleksandrvin: this is the test for your issue\n\u200b[11:51] \nhttps://github.com/go-swagger/go-swagger/blob/master/internal/validate/spec_test.go#L51-L69\nGitHub\ngo-swagger/go-swagger\ngo-swagger - Swagger 2.0 implementation for go\n\u200b[11:52] \nand this is the implementation\n\u200b[11:52] \nhttps://github.com/go-swagger/go-swagger/blob/master/internal/validate/spec.go#L180-L212\nGitHub\ngo-swagger/go-swagger\ngo-swagger - Swagger 2.0 implementation for go\n. I've tried to study the test, but failed to run tests on my laptop...\nStudied circle.yml and then called godep go test -v -race ./... but it fails:\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions\n    imports github.com/smartystreets/assertions/internal/oglematchers: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/oglemock\n    imports github.com/smartystreets/assertions/internal/oglematchers: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/oglemock/createmock\n    imports github.com/smartystreets/assertions/internal/oglemock/generate: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/oglemock/generate/test_cases\n    imports github.com/smartystreets/assertions/internal/oglemock: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/oglemock/generate/test_cases\n    imports github.com/smartystreets/assertions/internal/oglemock/generate/test_cases/complicated_pkg: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/oglemock/generate/test_cases\n    imports github.com/smartystreets/assertions/internal/oglemock/generate/test_cases/renamed_pkg: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/oglemock/generate/test_cases/complicated_pkg\n    imports github.com/smartystreets/assertions/internal/oglemock/generate/test_cases/renamed_pkg: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/oglemock/sample/mock_io\n    imports github.com/smartystreets/assertions/internal/oglemock: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/ogletest\n    imports github.com/smartystreets/assertions/internal/oglematchers: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/ogletest\n    imports github.com/smartystreets/assertions/internal/oglemock: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/ogletest\n    imports github.com/smartystreets/assertions/internal/ogletest/srcutil: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/ogletest\n    imports github.com/smartystreets/assertions/internal/reqtrace: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/ogletest/test_cases\n    imports github.com/smartystreets/assertions/internal/oglematchers: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/ogletest/test_cases\n    imports github.com/smartystreets/assertions/internal/oglemock: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/ogletest/test_cases\n    imports github.com/smartystreets/assertions/internal/ogletest: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/ogletest/test_cases\n    imports github.com/smartystreets/assertions/internal/ogletest/test_cases/mock_image: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/ogletest/test_cases/mock_image\n    imports github.com/smartystreets/assertions/internal/oglemock: use of internal package not allowed\ngodep: go exit status 1\n. Do you mean an auto check for new release on Github? On each swagger call?\n. Nice. Please look at Cocoa Pods, it goes a bit further and checks automatically. You can make a background check on every swagger call and print at the end of the work...\n. schemes is not required in the Swagger 2.0 spec:\n\nschemes   [string]    The transfer protocol of the API. Values MUST be from the list: \"http\", \"https\", \"ws\", \"wss\". If the schemes is not included, the default scheme to be used is the one used to access the Swagger definition itself.\n. After adding missed fixes to tests, all seems to be ok\n. \n",
    "Xe": "Where would this be useful?\n. console\n$ swagger generate client swagger.json && golint ./...\n2016/01/16 22:05:58 building a plan for generation\n2016/01/16 22:05:58 planning definitions\n2016/01/16 22:05:58 planning operations\n2016/01/16 22:05:59 grouping operations into packages\n2016/01/16 22:05:59 planning meta data and facades\n2016/01/16 22:05:59 rendered model template: Pet\n2016/01/16 22:05:59 rendered model template: Order\n2016/01/16 22:05:59 rendered model template: Category\n2016/01/16 22:05:59 rendered model template: User\n2016/01/16 22:05:59 rendered model template: Tag\n2016/01/16 22:05:59 rendered model template: ApiResponse\n2016/01/16 22:05:59 rendered client parameters template: pet.AddPetParameters\n2016/01/16 22:05:59 rendered client responses template: pet.AddPetResponses\n2016/01/16 22:05:59 rendered client parameters template: pet.DeletePetParameters\n2016/01/16 22:05:59 rendered client responses template: pet.DeletePetResponses\n2016/01/16 22:05:59 rendered client parameters template: pet.FindPetsByStatusParameters\n2016/01/16 22:05:59 rendered client responses template: pet.FindPetsByStatusResponses\n2016/01/16 22:05:59 rendered client parameters template: pet.FindPetsByTagsParameters\n2016/01/16 22:05:59 rendered client responses template: pet.FindPetsByTagsResponses\n2016/01/16 22:05:59 rendered client parameters template: pet.GetPetByIDParameters\n2016/01/16 22:05:59 rendered client responses template: pet.GetPetByIDResponses\n2016/01/16 22:05:59 rendered client parameters template: pet.UpdatePetParameters\n2016/01/16 22:05:59 rendered client responses template: pet.UpdatePetResponses\n2016/01/16 22:05:59 rendered client parameters template: pet.UpdatePetWithFormParameters\n2016/01/16 22:05:59 rendered client responses template: pet.UpdatePetWithFormResponses\n2016/01/16 22:05:59 rendered client parameters template: pet.UploadFileParameters\n2016/01/16 22:05:59 rendered client responses template: pet.UploadFileResponses\n2016/01/16 22:05:59 rendered operation group client template: pet.PetClient\n2016/01/16 22:05:59 rendered client parameters template: store.DeleteOrderParameters\n2016/01/16 22:05:59 rendered client responses template: store.DeleteOrderResponses\n2016/01/16 22:05:59 rendered client parameters template: store.GetInventoryParameters\n2016/01/16 22:05:59 rendered client responses template: store.GetInventoryResponses\n2016/01/16 22:05:59 rendered client parameters template: store.GetOrderByIDParameters\n2016/01/16 22:05:59 rendered client responses template: store.GetOrderByIDResponses\n2016/01/16 22:05:59 rendered client parameters template: store.PlaceOrderParameters\n2016/01/16 22:05:59 rendered client responses template: store.PlaceOrderResponses\n2016/01/16 22:05:59 rendered operation group client template: store.StoreClient\n2016/01/16 22:05:59 rendered client parameters template: user.CreateUserParameters\n2016/01/16 22:05:59 rendered client responses template: user.CreateUserResponses\n2016/01/16 22:05:59 rendered client parameters template: user.CreateUsersWithArrayInputParameters\n2016/01/16 22:05:59 rendered client responses template: user.CreateUsersWithArrayInputResponses\n2016/01/16 22:05:59 rendered client parameters template: user.CreateUsersWithListInputParameters\n2016/01/16 22:05:59 rendered client responses template: user.CreateUsersWithListInputResponses\n2016/01/16 22:05:59 rendered client parameters template: user.DeleteUserParameters\n2016/01/16 22:05:59 rendered client responses template: user.DeleteUserResponses\n2016/01/16 22:05:59 rendered client parameters template: user.GetUserByNameParameters\n2016/01/16 22:05:59 rendered client responses template: user.GetUserByNameResponses\n2016/01/16 22:05:59 rendered client parameters template: user.LoginUserParameters\n2016/01/16 22:06:00 rendered client responses template: user.LoginUserResponses\n2016/01/16 22:06:00 rendered client parameters template: user.LogoutUserParameters\n2016/01/16 22:06:00 rendered client responses template: user.LogoutUserResponses\n2016/01/16 22:06:00 rendered client parameters template: user.UpdateUserParameters\n2016/01/16 22:06:00 rendered client responses template: user.UpdateUserResponses\n2016/01/16 22:06:00 rendered operation group client template: user.UserClient\n2016/01/16 22:06:00 rendered client facade template: client.SwaggerPetstoreClient\n. console\n$ golint ./...\nclient/pet/delete_pet_parameters.go:41:37: method parameter petId should be petID\nclient/pet/get_pet_by_id_parameters.go:33:38: method parameter petId should be petID\nclient/pet/update_pet_with_form_parameters.go:49:45: method parameter petId should be petID\nclient/pet/upload_file_parameters.go:57:38: method parameter petId should be petID\nclient/store/delete_order_parameters.go:33:41: method parameter orderId should be orderID\nclient/store/get_order_by_id_parameters.go:33:42: method parameter orderId should be orderID\n. where's a copy of the API?\n. This is a nontrivial thing to do in Go due to the lack of compile-time code execution.\n. This is /*FindPetsByStatus: Finds Pets by status vs /* FindPetsByStatus: Finds Pets by status.\n. ",
    "GlenDC": "How does this issue differ from #100?. Is this still a wish of yours @casualjim ?. Has your opinion changed on this one @casualjim or do you still want to go with it?. The explanation is now explicitly defined on both the readme and goswagger.io, since quite a while now. Closing this issue.. Possibly related to issue #861. @Ahhmyface what would be the right (default) value be for an enum with more then 1 possibility, in your opinion?. @ZandorZ can you please provide more information about your setup (swagger version, OS, golang version) and what exactly the issue is that you are encountering.. @ZandorZ can you please specify your swagger version (can be found executing swagger version). @nathany the latest documentation for the code on master can be found here: https://github.com/go-swagger/go-swagger/tree/master/docs/generate/spec\nImprovement of documentation is always a good request. You are in a unique position however as you are a newcomer and thus have the perspective that is perfectly fit to help with the improvement of documentation.\nCould you please add questions here that are not answered by the documentation. Also any suggestions on what according to you is missing, is always more then welcome :). @nathany yes that's the recommended and more sane approach. Also saves you tons of work. Also in the end writing annotations doesn't save that much work compared to writing the spec, as you end up writing most of the stuff anyhow.\nNone the less, does not mean that annotations should not be well documented. Your tutorial suggestion is definitely a good idea.\nCould you please be a bit more clear about the other stuff? Please be as clear as possible with the questions and to what they relate. This way we can take it into account when improving the documentation.. What should we do with this one @casualjim ?. Hi @flier how is your situation at the moment. Thank you very much for your work so far in this PR, would it be a lot of work to finish this of? What would you like to see happening with this PR? :) Thanks again, your time and effort is very well appreciated!. Great proposal, and should be do-able to support. I guess it could in fact mostly look like the struct approach, with the addition of a type comment parameter, as that's something we get for \"free\" with the struct approach, so it would look something like this:\ngo\n// swagger:parameters forgotPassword\nvar forgotPasswordRequiredParameters = []string{\n    // the email of the user\n    // type: string\n    // format: email\n    // in: query\n    // unique: true\n    \"email\",\n}\nI guess it would make sense for this feature to limit it to struct slices, as I would expect those slices always to contain the names of the parameters?\n@casualjim do you see any limitations with this approach, as in, are there stuff we wouldn't be able to do with this approach, that is currently possible with the already supported struct approach?. @Rio this seems to be recently fixed via https://github.com/go-swagger/go-swagger/pull/867 and possible others. Could you please confirm?\nI tested it myself using your reproduce steps, and it works for me, once I get all the dependencies via go get.\nNote: the For this generation to compile you need to have some packages in your GOPATH message is incomplete, as I also had to go get the following packages: github.com/docker/go-units github.com/go-openapi/analysis github.com/go-openapi/loads github.com/go-openapi/spec github.com/go-openapi/validate github.com/gorilla/context. @casualjim can you take a look at https://github.com/go-openapi/strfmt/issues/12 as it aims to resolve this issue as well.. Fixed by https://github.com/go-openapi/strfmt/pull/12.. @casualjim this could be provided by supporting it as an x-format-type no? Adding it to strfmt and plugging it into the other custom x-format-types we provide already? Is that what you had in mind as well?. This has been resolved by adding a conv package to go-openapi/strfmt as can be seen in following (merged) PR: https://github.com/go-openapi/strfmt/pull/10\nThus besides importing github.com/go-openapi/strfmt you'll probably also want to import github.com/go-openapi/strfmt/conv.\nThe conv package provides the functions you are looking for, provided for all types defined in the main strfmt package.. Before closed, the documentation at https://github.com/go-swagger/go-swagger/blob/master/docs/generate/spec/route.md#example should probably be updated to reflect this new feature. You can use a model directly by defining your example as follows:\ngo\n// swagger:model authenticateResponse\ntype authenticateResponse struct {\n    // ID of the authenticated user\n    // Required: true\n    ID bson.ObjectId `json:\"id\"`\n    // Authentication token\n    // Required: true\n    Token string `json:\"token\"`\n}\nYou might need to generate the spec using the include models flag: --scan-models. This way you can prevent having to use a wrapper struct.\nLet me know if this works and if you have any further questions on this topic.. @morlay are you still working on this? If not, I don't mind taking it over, to finish of this PR. As it's a feature needed by multiple people.. In my case I'm having a route/path which simple is used to Ping the server, and as its body (which is ignored), it simply returns \"ok\" along-side a 200 Status Code. In such a case, it should be possible to simply have a description defined, no?. @casualjim the only thing I don't understand is why everything has to be linked to a struct? Why can't we simply define it as a document? For example I don't want a params struct, yet i want to be able to define the (PATH) params for a certain route? Right now that's only be possible when using a struct, no?\nWould it be going against the design of go-swagger if I would work on a PR for this, so that we can define params and responses all from within the route comments? Rather than having to link them to structs?\nAlso is there a way to define body response structs without the need for that extra Body struct value? It's a bit weird to have it there from a golang user perspective.. Maybe what I'm trying to achieve is a bit anti-idiomatic. But the value would be that I wouldn't have a swagger file ever, and always have it generated automatically purely on the server codebase, such that the documentation, system tests and client code is always directly generated from the generate spec, which is generated on itself from the server code.\nFor the most part you want to have your spec generated from golang related code, such as response structs. But sometimes you're returning a json simply as a map[string]interface{}. Right now that doesn't seem to be possible.\n@clawconduce the description tag is a beginning. But if you look at how one would normally write a fully manual openapi (swagger 2.0) spec file, there is so much more you can give it. For the cases where you would want that, because you wouldn't have access to a struct, it seems like a useful thing to have.\nSo to recap. I agree that you want to keep the spec comments as closely linked to actual Golang code as possible. But, because there will always be situations where that is not possible or desired, it should be possible to do anything the specs allows via comments alone. Shouldn't be too hard to achieve, should it? And I don't want to have some bits in a spec file, as the entire goal is to keep it all directly linked from within the code files, just as you also want to generate normal documentation directly from in-line comments. (think Godocs, Rust Docs). And I guess the syntax would be as close as possible to the default YAML syntax, I don't see why you would go away from that, seems already simple enough. And makes it easier to learn to use it, as people who want to use go-swagger, probably already know swagger/openapi and its spec.. The parts where it's needed yes, the part where it isn't needed I more than happily link directly to Golang code. But having this alternative for when I need it would definitely be great. I don't mind putting some time in to make this happen with a PR. Would just need some pointers to get me started and know of any gotchas, as I would be new to this project and codebase.\nSome responses could be linked to a struct, as it exists. But because currently you seem to need to put your struct value members within a body struct within the actual struct, I can't use that method anyway.\nBut for example parameters I never have them as structs, so it would be a bit silly to define a Golang struct just to be able to generate spec information for them. Would be more work than just defining them inline as a Godoc comment, from a user-perspective.\nAnother obvious thing that seems to be missing is adding other information to routes such as examples. As that's also kind of information that would be needed in order to automatically run system (end-to-end) tests based on a spec file.. Cool, sounds like a reasonable approach. I must say I'm a bit surprised of having a new swagger:input annotation proposal, as I'm not planning to write an entire specification, as one comment, as that gets a bit crazy, perhaps?\nWas more thinking to be able to provide a complete openapi router specification, under the swagger:router for a router, so being able to provide parameters, responses, examples and whatnot under that annotation. Or are you saying that the swagger:input should also be able to handle such incomplete specifications (e.g. just 1 router definition? As I do still want the documentation of each router right above the actual router creation. Does that make sense?. After some thought, this issue might be solved with the solution potentially provided in enhancement issue #793. This issue should probably be closed, as it might not be needed anymore after all.\nTalking to @casualjim on slack helped me clarify things. It seems like I was making suggestions because I didn't fully understand the design behind go-swagger. I opened issue #791 so that documentation for this can be added, as I wasn't the first to talk to @casualjim about this. Secondly I opened issue #793 to support a new annotation, operation, that allows you to define a Path/Route as you would specify a Path Object in your Swagger YAML Specification.. The following TODO (https://github.com/go-swagger/go-swagger/blob/master/scan/schema.go#L438) is the source of this bug. Solve the TODO, and the bug is probably solved as well.. Would it be possible to perhaps include the spec file you're using, might help others in knowing why it doesn't work for you.. @casualjim you have any opinions/feedback on this issue?. It's my first (big) enhancement PR to go-swagger, so might need some extra feedback before this can be merged in @casualjim. . Once this feature is merged in, #790 can probably be closed as well.. The changes made in this PR are based on the suggestions made in the enhancement issue #810.. Could you perhaps try to make a small isolated yaml/json that reproduces the issue you're facing? This would help us debug your problem, while preventing you from having to share your actual swagger spec?. Related issues: #100, #99, #841. I think they are related.\nThis issue is about providing a command swagger test, which has than a couple of optional parameters to override the host, spec-file and perhaps some other settings.\nIt probably does make sense to piggyback on the generated client, and thus also on #100, as that is probably about generating test requests using #98's data generator. However it would be nice if this command would also exist and thus make it work a bit more automatic?\nOr what's your vision on this @casualjim ?. Can't review it @casualjim, but it does pass the tests.. @rjeczalik can you update your original issue description as well, as it still says anyOf instead of allOf.. @rjeczalik you can do so by adding a (unit) Test function named TestIssue844 in https://github.com/go-swagger/go-swagger/blob/master/generator/model_test.go. There you can load the spec file, which it should be able to load without any errors. After that you could, if applicable, also test specifics. In the model_test.go file you'll see other examples that could give you inspiration if needed.. Once you added the unit test @rjeczalik, you'll have to also fetch & rebase the latest master branch into your personal feature branch. You can resolve the conflict of generator/bindata.go, simply by generating a new one yourself, which contains both the latest templates (which you've just fetched & rebased) and your changes already committed in this PR.\nOnce that's done this PR is good to go :). @rjeczalik I think your test file triggered a bug in the current generator code already on master.\nThe template responsible for your non-compiable code can be found here: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/schemavalidator.gotmpl#L251\nThe appropriate fix would probably be to ensure that we don't try to validate in case it's an interface. So within that range you're probably missing an if/conditional check to ensure it's indeed not an interface or I suppose it's called discriminator in Swagger/OpenAPI terms.\nWould be cool if you could fix this alongside your other commits within this PR.\nAlso don't forget to rebase origin/master into your branch.. Thank you for the extra effort @rjeczalik, very much appreciated.. The URL to your swagger.json file doesn't open. Can you please fix it, or upload the json file somewhere it can be seen by the parties interested?. @claasstoertenbecker once #848 has been merged in (and this issue is closed), the order of your generated code should be consistent in sequential generations. The first time you'll generate with the latest swagger (that contains PR #848), you'll once again have a big diff, potentially bigger than ever. But all generations after that one should not suffer from this issue any longer.\nThanks for reporting this bug!. @Simon-Li, he probably means the fact that the Workspace property isn't (de)serialized.. @casualjim what's actually the reason that you added an explicit Marshal-/UnmarshalJSON function in v0.8.0 (https://github.com/go-swagger/go-swagger/commit/de870963a73dd4cc2f2d11d0099e51b26eb33020)? In what cases was the implicit version not good enough?. @casualjim but AFAIK the default marshaller works fine with inheritance, did a play ground test before asking my previous question to be sure. Can you give a situation where the implicit marshaler wouldn't work?. Things left to do in order for the code in this PR to work and thus become merge-able:\n\n[ ] make sure Validate method is defined for all models/bodies structs;\n[ ] make sure the Required validation always is checked;\n[x] rebase latest master and regenerate bindata;. One second, wait for the next commit, about to push a commit that aims at re-using the loads.Document loaded during validating, such that we don't have to load it twice.. OK @casualjim if all CI tests pass, it should be ready for a final review by you!. ok @casualjim sorry it took a bit longer, all should be fine now on my side.. @vburenin rebased my work on top of latest master. Didn't change anything to the actual commits of this PR, just had to force push it to make the rebasing work cleanly. So if the checks still all pass, I think this is good to be merged in. Should have pushed this to a feature branch.\nBindata had to be updated to reflect the newly pushed bindata on master.. @vburenin Yes, I'll just push to the branch a newly generated bindata, with the latest master merged into it, that's usually how I resolve it.\n\n@casualjim is by the way sick AFAIK, so he might not be around for a while.. @vburenin rebased master on it, and forced push the originally commit again. This branch should now have the latest changes of master in it. So hopefully there are no merge conflicts any longer. So if all tests pass, I think you are free to merge in this PR, in case you still approve.. @nathany the tutorial code should indeed match the example code directly. The example code is usually pretty up to date.\nTo be sure you can also always regenerate the examples as follows:\n\nfetch master & rebase it on your local master;\ninstall latest swagger cmd via go install ./cmd/swagger;\nrun ./hack/regen-samples.sh on a *nix system;\n\nThis will regenerate all examples using the swagger tool. Should always be up to date, but in case you notice that it is out of date with the latest master, feel free to open a PR with those changes.. +1 to expand the type alias behavior to inline enum definitions. @casualjim I'll open a new issue for this, as it seems to deviate from this context.. @casualjim: the code and the documentation do specify slightly different behavior:\nThe documentation specifies:\n\nIf you want to debug what the client is sending and receiving you can set the environment value DEBUG to a non-empty value.\n\nYet the code (https://github.com/go-openapi/runtime/blob/master/client/runtime.go#L158) specifies:\ngo\nrt.Debug = os.Getenv(\"DEBUG\") == \"1\"\nI think the documentation makes more sense, as it's the more common liberal approach. So should I open a PR in https://github.com/go-openapi/runtime to make the documentation and code match once again?. This bug has been confirmed, and can be traced back to inconsistent use of (variable) name mangling.\nWorking on an fix for this, and will push a PR later this weekend.. related to #213. My colleague @OllyGinger hacked a way around this issue, without having to modify generated code and swagger.\nIn the example above you would define your path as /foo/*. Thanks to the underlying technology it will be able to match your path now correctly. Afterwards you can get the entire path in your handler via params.HTTPRequest.URL.String()\nThe downside of this hack is that you do need to filter out the path before your Asterix (*) parameter manually and hard-coded. But the upside is that at least you have now a hacky way around this issue without being blocked by a lacking feature, that clearly should have been included in the spec.. Enums occur in following locations, and should generate type aliases in all of them:\n\nnon-body parameter:\n[ ] inline (1);\n[ ] ref (2);\nheader object (used to send headers along with responses);\n[ ] inline (3);\nitems object (used to describe array items):\n[ ] inline (4);\n[ ] ref (5) (already working pre-PR as a solution to this issue!);. The behavior as it is, while this issue is unresolved, only generates type aliases for enumerations for situations (5). This situation is what @casualjim is talking about, as a solution to issue 3 of @kojustin's list in issue #861 \n\n@casualjim are any of the 5 listed situations above, situations where you think enum aliases are probably not needed. I do start to like that you should hint the compiler when you want an explicit definition. As this gives more flexibility. In which case for sure I would require type aliases for situations (2). Or perhaps we should simply support all 5 possible situations. What you think @casualjim?. This issue becomes a bit more complicated due to the main generated (restapi) server.go file  depending on the config functions from the config file mentioned in the description of this issue.\nSo resolving this issue wouldn't be as simple as just making this file opt-out, the dependencies would also have to be resolved.\nTherefore this issue might be better suited, to be resolved for the next major release.. At it's simplest, I think we could define a String() function just for structs, using their already defined json tags, Eg.:\ngo\nfunc (m *{{name}}) String() string {\n    b, _ := json.Marshal(m)\n    return string(b)\n}\nPlayground Example: https://play.golang.org/p/OQ5eDjKAC8\nBut perhaps that is too simple. You have any thoughts on this issue @casualjim ?. It's not documented anywhere, right now it is now allowed during parsing and I'm not sure if we want to allow punctuation or not. The official OpenAPI (Swagger 2.0) specs (see: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) don't seem to say anything I can find about the legal characters possible for a name. It only seems to specify that names are case sensitive and must be unique. So that means that go-swagger is currently more strict than the specification specify (AFAIK).\nThe reason why your punctuation character currently does not work is because of the regex we use to parse that type of line as can be found here: https://github.com/go-swagger/go-swagger/blob/master/scan/scanner.go#L70\nChanging that regex to swagger:response\\\\p{Zs}*(\\\\p{L}[\\\\p{L}\\\\p{N}\\\\p{Pd}\\\\p{Pc}\\\\p{Po}]+)?$ or swagger:response\\\\p{Zs}*(\\\\p{L}[\\\\p{L}\\\\p{N}\\\\p{P}]+)?$ would make your request possible. I'm not sure if this is the only change required though, as we might also need to change a few other (validation) places to make such a change possible. Should in the end still be trivial though.\nThe more important question is what we really want a possibly legal name to be. I think keeping this as liberal as possible. But @casualjim might have a very different opinion about this. Once we all agree on what a legal name can consist of, it should be trivial to patch the code and/or update the documentation. Note that in case of documentation changes, it won't affect the website until next release, and instead you can find the documentation up to date with latest master under the ./docs directory.. @casualjim while resolving this issue I realized that this private function does not appear to be used anywhere. Should I delete it?. Bug confirmed and PR with fix on its way.. > And by the way, what effect do readOnly have since it's possible to POST that parameter against the API?\nLet me answer that question using the official specification:\n\nRelevant only for Schema \"properties\" definitions. Declares the property as \"read only\". This means that it MAY be sent as part of a response but MUST NOT be sent as part of the request. Properties marked as readOnly being true SHOULD NOT be in the required list of the defined schema. Default value is false. - https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schema-object. @CuBiC3D can you please to try to explain the problem in a different way, as I fail to understand the exact issue here. Also do you have a link to your project, or is it closed source?\n\nEverything you describe in your issue description seems to behave as normal, AFAIK. So please help me help you, by helping me understand your situation exactly.\n\nThe API response omitting the id property. Actually it's even stored as an empty string in mongoDB.\n\nAs the id property isn't marked as required, it will have the omitempty json property annotation, and thus is omitted as expected as you can see in your response.\n\nAlready tested that. _id gets translated into id and returns as _id=\"\". Even if I try to insert a model with _id as readOnly, it inserts as id into database.\n\nThe renaming of _id might be exampled because of the automated name mangling, originating down to swag.ToVarName, although I think it might be a bug in case it actually affects your public interface's name. Can you please give a more detailed disruption of this specific issue as well, with steps on how to reproduce it.\n. Currently there are no bson tags generated. However I don't think it would cause any harm if we would generate bson annotation tags alongside the json annotation tags. This would require an enhancement PR with updates for the generator->template code.\nI think that would be a neat way to resolve your issue. However perhaps @casualjim has another idea on this topic, as it would be great to get his input on this, before any work is done related to this. As he might know a way to make it all work for you, as swagger is in its current state.\nBy the way @CuBiC3D can you also please mention your swagger version?. Some templates can't be overridden as they are protected (https://github.com/go-swagger/go-swagger/blob/master/generator/template_repo.go#L135-L175), others are not (all other templates).\nIn case you require to modify such templates, you are most likely either hitting a wall because of limitations in go-openapi/go-swagger, or you are doing something weird. In case of the first option, the starting point would be to open an issue about this, describing your situation, such that a discussion can start and a solution can be found.\n@iain17 is correct, you might need to add support for bson specific objects in github.com/go-openapi/strfmt. By default these are used: https://github.com/go-openapi/strfmt/blob/master/default.go\n@CuBiC3D, Related is this open PR https://github.com/go-openapi/strfmt/pull/7/files; in that PR @roytan883 is providing Setters and Getters for the DateTime time. You might want to help him out with this, by also providing those for the other types. Would allow you to use the existing types, and still interact with BSON.\n\nbut that could be a breaking change in some special cases, where special characters has been used.\n\ncan you give an example of a breaking case?. In order to resolve the breaking case @CuBiC3D, you will probably have to work on issue (1), mentioned by @casualjim. Other then that, I'm looking forward to welcome your contribution to https://github.com/go-openapi/strfmt :). @casualjim I replaced the original fix with the actual fix.\nValueExpression is now added to the GenHeader. Also added your test, and checked the generated code also manually. Seems to be be all fine AFAIK.. Also it shouldn't make a difference if you use the brew version (installed in /usr/local/bin?) or the one from $GOPATH/bin though. Can you please give more details in your steps to reproduce this, as the problem might just be that you weren't in a valid $GOPATH, when trying to generate.. What is your exact working directory (fully specified) at the point of generation?. @OJFord you have anymore updates on this one?. Hello @OJFord first of thank you for using go-swagger, and let me tell you the good news that what you want is indeed already possible. In fact, IMHO it is the most sane approach.\nWhat you could do is keep all your generated code in a single folder, eg gen as follows:\n\ngenerate client using: swagger generate client -t gen\ngenerate server using: swagger generate server -t gen --exclude-mean\n\nAfter that you can write the cli Application yourself, as well as write the handlers. Swagger will do all the boring work for you, and you can simply concentrate on writing the thin CI (eg flag parsing code, config, ...) and the handler code. Thus you can focus on the stuff you care about, and let swagger take care of all the HTTP code.\nFor a complete example of this approach you can check out: https://github.com/go-openapi/kvstore/blob/master/doc.go\n\nit specified the same gen target and thus all the generated code can be found here: https://github.com/go-openapi/kvstore/tree/master/gen\nthe cli app has been written manually, yet is very small in size, and can be found here: https://github.com/go-openapi/kvstore/blob/master/cmd/kvstored/main.go (handlers assignment L74-77)\nNote that in this example the producers and consumers are still manually assigned. This is no longer needed as it will by default already assign correct consumers and producers. Be aware that this is still needed in case you want to assign non-supported consumers/producers or in case you using the release version of swagger, rather then having latest build from source (if so, let me know your version);\nthe handler code is also written manually and can be found here: https://github.com/go-openapi/kvstore/tree/master/api/handlers\n\nPlease let me know if this answers your question.. Glad it helps you out, your comment seems to contain 2 questions, so let me first focus on the first one...\nWhere you put the handlers isn't important, in fact location is never an issue for anything. With Golang it also doesn't matter ever how you name things (except the fact that you can't used some reserved words). With Golang you usually are contracted by an interface or type. Usually you can't choose between the two, but in this case, Go-Swagger provides you the option to implement an interface or a function that adheres to a function type. So let's take kvstore as an example again.\nIf we check its swagger yaml specification (which location or naming is also not important), we can see there are only 4 operations defined. That means you will have to implement 4 handlers yourself, if you're generating a service using the approach describe above.\nfindKeys is one of them, and is in this project implemented using the FindKeysHandler interface in https://github.com/go-openapi/kvstore/blob/master/api/handlers/find_keys.go#L24-L42. This handler is then assigned to the kvstored API here: https://github.com/go-openapi/kvstore/blob/master/cmd/kvstored/main.go#L75, and that's all there is to it.\nNow, @casualjim choose in this approach to implement each handler, using the interface generated for that handler. But nothing stops you from assigning a standalone function directly. This is possible because there is also a function type generated for every function. For example for findKeys this is the FindKeyHandlerFunc. In case you have a function adhering to that signature, you could assign that function the same way as the interface is assigned.\nSo with that being said, let's move on to your second question...\nThe reason the swagger specification is embedded and thus required, is because this is how the Middleware.Context works, which is the core of your generated server. You can see the creation of it here. It used that spec then, in order to know how your API is configured. Because of this it can figure out things like its basePath. That context is also passed along to each route, as can be seen here: https://github.com/go-openapi/kvstore/blob/master/gen/restapi/operations/kvstore_api.go#L233-L251. To know more about this, it might be best for now to simply read through the runtime's middlware package, which can be found here: https://github.com/go-openapi/runtime/tree/master/middleware\nKnowledge about how this all works, is however not required in order to use Go-Swagger. What you should remember is that most of the sever is configured dynamically, such that your generated server code can stay as small as possible.\nSo that's about that. Please let me go how you're getting along with your service, generated by Go-Swagger!. A tutorial has also be created, that fully explains the techniques and should give you all the info you need in order to create a Golang server using the --exclude-main option.\nSee #889 for more information.. Possibly related to #887. I cannot reproduce your steps. For me it works fine, even using the brew version.\nAre you working in a container? As that is what was causing the issues in #887.. I tried to reproduce your issue as follows:\nbash\ngo get -d github.com/siadat/swagger-eg\ncd $GOPATH/src/github.com/siadat/swagger-eg\nswagger generate server swagger.yaml --target=swagger\nswagger generate client swagger.yaml --target=swagger\ngo run server.go\ngo run client.go\nAnd it seems to work as you would think, as I get a 200OK result:\n```\nPOST /api/v1/keys/k?value=v HTTP/1.1\nHost: localhost:8001\nUser-Agent: Go-http-client/1.1\nContent-Length: 0\nAccept: application/json\nAccept-Encoding: gzip\nHTTP/1.1 200 OK\nConnection: close\nContent-Length: 0\nContent-Type: application/json\nDate: Mon, 23 Jan 2017 21:26:27 GMT\n```\nAre you sure these are the reproduction steps that you followed @siadat? Or am I missing a step? Also can you please specify the swagger version by running swagger version. I am assuming you running the latest (dev) version because of your Makefile. Also are you sure you're testing your server using go run client.go and not via curl/httpie/postman or w/e.. I think we all use Go as in released versions. Which for me at the moment is go version go1.7.1 darwin/amd64. I think it will be supported. But only when it is released. @casualjim might know more about this though.. Thank you for your contribution @bjyoungblood, looks good! :). The issue for this bug has been found and a [PR for go-openapi/spec][PR], containing that fix, is opened.\nOnce that [PR][] has been accepted, we'll have to update the vendored version used for go-swagger, which will fix this issue when merged in.\n[PR]: https://github.com/go-openapi/spec/pull/19. @casualjim did you have a local fix somewhere for this, or do you need people to look at this?. @thommahoney, custom Consumers/Producers for the client an be set as follows:\n```go\nimport (\n    // ...\n    httptransport \"github.com/go-openapi/runtime/client\"\n    strfmt \"github.com/go-openapi/strfmt\"\n    myclient \"github.com/username/repo/api/client\" // your generated client package\n    // ...\n)\n// ...\nrt := httptransport.New(\n    myclient.DefaultHost,\n    myclient.DefaultBasePath,\n    myclient.DefaultSchemes)\nrt.Consumers[\"application/vnd.api+json\"] = httptransport.JSONConsumer()\nrt.Producers[\"application/vnd.api+json\"] = httptransport.JSONProducer()\n// Create Client using the function below\n// instead of myclient.NewHTTPClient / myclient.NewHTTPClientWithConfig\nmyclient.New(rt, strfmt.Default)\n// ...\n```. Relevant runtime issues:\n\nhttps://github.com/go-openapi/runtime/issues/33\nhttps://github.com/go-openapi/runtime/issues/32. @thommahoney, is your service now working as expected?. Yes @ZandorZ, you are correct. My original comment was wrong :) Same goes for any of the producers/consumers you might wish to use from the runtime (root) package.. Thanks!. Sadly this is not supported in Golang's regexp (std) package, as there hasn't been found an efficient way of implementing features such as lookahead, while keeping their O(n) complexity guarantee.\n\nRelevant discussion: https://github.com/golang/go/issues/18868\nSo there is not much we can do I'm afraid, for the time being you'll have to refactor your Regexp in a way that you're not relying on the lookahead feature.. @mpalomas can you share your swagger.{json,yaml,yml} file? Basically if you specify your properties as camelCase in your specification file, than your JSON annotations should be generated as camelCase as well. Is that not happening in your case?. No problems, questions are always welcome, better then to be confused/frustrated :). Thank you.. @argentum47, you can find all of that information in the official Swagger 2.0  / OpenAPI 2.0 documentation. For example your question is answered here: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#security-definitions-object. Already fixed by @nathany in https://github.com/go-swagger/go-swagger/pull/857. Once there is a new Release for Go-Swagger, the documentation on the website will be updated accordingly.. @casualjim isn't that this one: https://github.com/go-swagger/go-swagger/pull/849/commits/e50ccb700cd77d1a0fdbc7a7ce6d5e29a946a4fc#diff-643df0026bfd7f1638796085caeb52f5R127?. @casualjim isn't that why you have the WithContext function, for situations like that? Otherwise one would have to provide N constructors, where N is the amount of combinations possible.. @casualjim this fails to compile, as that body model has not defined the Validate functions. This is however defined for the Body called here: https://github.com/go-swagger/go-swagger/pull/850/files#diff-ab37f2908b4671ebce8d3bc51539d622R123 ; I'm a bit stuck on this one, could you point me to the correct template location on how I could ensure that body model has the validation defined? Or is it because this model is automatically appended in the generator code (via the name+Body stuff)? If i'm doing crazy stuff in this commit you can also point it out though. This ID parameter is required, but for now Required isn't validated in my added Validate Client Parameter code. Any idea how I would be able to add validation for required parameters @casualjim ?. so are you saying, @casualjim, that the reason it is not rendering is an unreported bug?. Ok weird, I'll try to track that issue later today. Can you please also check if my conditionals added in the template are reasonable, as you might have a better idea whether or not those will hold up for all permutations.. The biggest question I have with this one, how to check a non-nil value. As I tried some string query parameter as required in a local test API, and it seemed to render as an ordinary string.. This logic is already defined here: https://github.com/Simon-Li/go-swagger/blob/d61294f01b4d2aac01024432a775db4bb5a22ff7/generator/templates/tupleserializer.gotmpl#L187-L203 the fix for this issue should figure out why that code isn't doing the job.. This logic is already defined here: https://github.com/Simon-Li/go-swagger/blob/d61294f01b4d2aac01024432a775db4bb5a22ff7/generator/templates/tupleserializer.gotmpl#L226-L243 the fix for this issue should figure out why that code isn't doing the job.. Could you please update this commit and reverting your change to the vendor folder, this is vendored code, and thus should not be modified manually. In this case you could fix that by opening a PR in the github.com/go-openapi/strfmt repository, after which we can update the vendored code and have your fix in.\nPlease simply amend that change to this commit and force push.. ",
    "solher": "Oh I have to wrap my models in structs to use it in responses ?\nShouldn't // swagger:model be an alias for that ?\nI mean, it is kinda weird to have to write actual Go code to make the documentation system work.\n. Ok that makes sense.\nThanks a lot for your help and your work ;)\n. Just to be sure there is no misunderstanding, there is no problem running the swagger command itself.\nThere is also no problem doing a go build. Everything works fine.\nThe problem is that go-swagger doesn't seems to look for dependencies inside the vendor directory when generating the spec. It crashes when a go build passes under the same conditions.\n. Yes it builds. That's the weird thing.\nI'm gonna double check if the env var is overrided somewhere when calling the swagger gen...\nBut I already tried to run GO15VENDOREXPERIMENT=1 swagger generate spec -o swagger.json without success.\nI have no problem generating the doc without using the vendor experiment BTW.\n. Hum... After recompiling and running go build; swagger generate spec; in a fresh 1.5.3 golang container, I still get the issue while the build succeeds. I'm using Glide btw.\nNevermind, it must be a problem from somewhere else if it fixes the issue for everybody ;)\n. It doesn't seems like it. The dependencies are directly in ./vendor (e.g. ./vendor/github.com/go-swagger/go-swagger).\nI'll give a try to gvt.\nDependency management is so annoying right now. I hope Go 1.6 will help with that.\n. ",
    "aktwang": "Ah ha.. Thanks.  With this, I got further:\n aktwang@aktwang-VirtualBox:~/.gvm/pkgsets/go1.4/global/src/github.ibm.com/user/json$ echo $GOPATH\n/home/aktwang/.gvm/pkgsets/go1.4/global\naktwang@aktwang-VirtualBox:~/.gvm/pkgsets/go1.4/global/src/github.ibm.com/user/json$ swagger generate server -f ./swagger.json\n2015/11/18 11:52:41 rendered model template: vmspec_memory\n2015/11/18 11:52:42 generated model vmspec_memory\n2015/11/18 11:52:42 rendered model template: vmid\n2015/11/18 11:52:42 generated model vmid\n2015/11/18 11:52:42 rendered model template: vmspec\n2015/11/18 11:52:42 generated model vmspec\n2015/11/18 11:52:42 rendered model template: error\n2015/11/18 11:52:42 generated model error\n2015/11/18 11:52:42 rendered model template: vmspec_cpu\n2015/11/18 11:52:42 generated model vmspec_cpu\n2015/11/18 11:52:42 rendered handler template: Default.VMPost\n2015/11/18 11:52:42 generated handler Default.VMPost\n2015/11/18 11:52:42 rendered parameters template: Default.VMPostParameters\n2015/11/18 11:52:42 generated parameters Default.VMPostParameters\n2015/11/18 11:52:42 rendered responses template: Default.VMPostResponses\n2015/11/18 11:52:42 generated responses Default.VMPostResponses\n2015/11/18 11:52:42 rendered builder template: operations.Genesis\n2015/11/18 11:52:42 genesis_api.go:51:17: expected ';', found 'default' (and 3 more errors)\n2015/11/18 11:52:42 rendered embedded Swagger JSON template: server.Genesis\n2015/11/18 11:52:42 rendered configure api template: operations.ConfigureGenesis\n2015/11/18 11:52:42 configure_genesis.go:28:23: expected operand, found 'default' (and 2 more errors)\n2015/11/18 11:52:42 rendered main template: server.Genesis\naktwang@aktwang-VirtualBox:~/.gvm/pkgsets/go1.4/global/src/github.ibm.com/user/json$\n. Hi guys, My server code generation works great!  However, I have a general question.  Let's say if I modify some of my APIs (the swagger.json) file, and having the need to regenerate the server code.  However, I've added my own code into some Handler routines already.  So, does that mean I have to re-do all the work after I regenerate again?  Thanks!\n. casualjim, Thanks for the quick reply. I took a closer look at the server code and now have a better understanding on how to use it.  Another general question, I also generated the client.  (went smoothly!) How do I use the client? :)  I assume I should write my own main(), right?  I see a default_client.go in the default directory and a XXX_client.go file generated.  Thanks again!\n. Ah ha.  This is mighty useful (the doc)! Thanks casualjim.\n. casualjim, More questions...  What's the difference between using a httptransport to create a client and not using it?  Also, I have two client files generated.  Should I add my main in the default_client.go file, or the XXX_client.go file?  (this one may be a dumb question because I ought to figure it out by reading the code..right? :) \n. ",
    "jawspeak": "Thanks - excellent, much simpler. Also - note my older had a bug after I posted it. So I'm closing this. I used the following:\n./config.go\n``` go\npackage main\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"os\"\n    \"regexp\"\n\"github.com/go-swagger/go-swagger/spec\"\nhttptransport \"github.com/go-swagger/go-swagger/httpkit/client\"\napiclient \"github.com/jawspeak/go-stash-restclient/client\"\n\n)\ntype goStashRestClientConfig struct {\n    Host     string json:host\n    Username string json:username\n    Password string json:password\n}\nfunc validateRequiredField(field string, configValue string) {\n    if configValue == nil || len(configValue) == 0 {\n        fmt.Println(\"Required field unset in config.json: \", field)\n        os.Exit(1)\n    }\n}\nfunc SetupConfig() {\n    file, err := ioutil.ReadFile(\"./config.json\")\n    commentStripper := regexp.MustCompile(\"(?s)//.?\\n|/\\.?\\/\")\n    file = commentStripper.ReplaceAll(file, nil)\n    if err != nil {\n        fmt.Printf(\"File error: %v\\n\", err)\n        panic(err)\n    }\n    var config goStashRestClientConfig\n    json.Unmarshal(file, &config)\n    validateRequiredField(\"host\", &config.Host)\n    //validateRequiredField(\"username\", config.Username)\n    //validateRequiredField(\"password\", config.Password)\ndoc, err := spec.New(apiclient.SwaggerJSON, \"\")\nif err != nil {\n    panic(err)\n}\ntransport := httptransport.New(doc)\ntransport.Host = config.Host\napiclient.Default.SetTransport(transport)\n\n}\n```\n./config.json\njson\n// Config file you use to connect to your repository.\n// Rename to config.json when you're ready for your environment.\n// Reminder - json doesn't accept comments usually, we strip these out.\n{\n  \"host\": \"api.example.com\",\n  \"username\": \"your-user\",\n  \"password\": \"your-pass\"\n}\n./main.go\n``` go\npackage main\nimport (\n    \"fmt\"\n\"log\"\n\napiclient \"github.com/jawspeak/go-stash-restclient/client\"\n\"github.com/jawspeak/go-stash-restclient/client/operations\"\n\n)\nfunc main() {\n    SetupConfig()\nresp, err := apiclient.Default.Operations.GetCommits(operations.GetCommitsParams{Project: \"GO\", Repo: \"square\"})\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Printf(\"%#v\\n\", resp.Payload)\n\n}\n``\n. awesome, thanks\n. Same bug applies forin: bodyin: formDatain: header`\n. Here's the result code I wrote to get it to compile. (now i need to generate it in the template, for this data type).\n```\nfunc (o *GetSearchParams) bindXYZWhateverThisIsMaxResults(rawData []string, hasKey bool, formats strfmt.Registry) error {\n    if len(rawData) > 0 {\n        var raw int64\n        raw, err := strconv.ParseInt(rawData[len(rawData)-1], 10, 64)\n        if err != nil {\n            return err\n        }\n        o.MaxResults = raw\n    }\nreturn nil\n\n}\n```\nwill update this if this works.\n. Do you prefer re-opening old tickets vs creating a new issue if issues remain? @casualjim \nThanks as always for your prompt attention.  I recompiled with this and it looks like it is making the field to be required now, though. \ncurl -k 'https://localhost:57495/rest/api/2/search?jql=xx'\n{\"code\":422,\"message\":\"maxResults in query must be of type int64: \\\"\\\"\"}\nIf I include it, curl -k 'https://localhost:57495/rest/api/2/search?jql=xx&maxResults=2', then the next int64 param is unset and becomes an error: {\"code\":422,\"message\":\"startAt in query must be of type int64: \\\"\\\"\"}\nexcerpt of swagger.yaml:\n- name: maxResults\n          type: integer\n          in: query\nYou can see this is not int64, but in parsing no maxResults parameter, it makes it required. I can provide more details to repro if you request.\n. Is num2words even used? I think it was considered for when you have json keys that start with a number. it is much simpler to have that code into 'N16x16' for instance vs 'sixteenxsixteen' because it is actually hard to read typed out words. \n. hahah indeed (:\nOn Sat, Dec 12, 2015 at 7:02 PM, Ivan Porto Carrero \nnotifications@github.com wrote:\n\nyeah you're right. I'll remove it again, forgot I went with Nr instead.\nI wanted to translate things like 16x16 to SixteenBySixteen and 16+16 to\nSixteenAndSixteen but decided too much clever\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/go-swagger/go-swagger/issues/166#issuecomment-164213569\n.\n\n\n-Jonathan\n. thank you! (:\n. Thanks - Here the value of allowEmptyValue is true. \n. ",
    "Dr-Terrible": "\nit could use the same syntax as httpie for specifying params in different positions.\nThe generator could also generate a bash and zsh completion document for better usability\n\nYou could use gcli, a tool for generating the boilerplate code for the command-line interface. With gcli you can use the CLI framework that you like, but since you need bash-zsh autocompletion I suggest Cobra, because it is the only one that has built-in support for generation of bash-zsh autocompletion; as a bonus, Cobra has support for generating man pages too, which is a nice addition.\n. > is there something that can be worked out to get gentoo support included in the release process?\nSure, when there are new releases ready to be rolled out just warn me and I'll test a live git snapshot on x86_64, x86_32, and arm7+ (complete with Unit Testing). Then I'll report a success or whatever is amiss before the official release.\nI do it regularly for several official packages; as a reference, take Asciinema's work-flow as an example: https://github.com/asciinema/asciinema/issues/116  They use a specific issue with which new releases are signalled and then every GNU/Linux distribution maintainers report their feedbacks.\nIt works quite well as a solution, but just in case I'm open to other suggestions too. I have no particular preference.\n. > What is the go version you're using?\ngo-1.6.1, and go-1.6.2\n\nHowever I want to find out what is causing this build failure and why none of my ci envs pick it up.\n\nI can only guess: maybe your CI environments have a copy of the missing subpackes somewhere inside your GOPATH or GOROOT, leading to a successful compilation even if those subpackages are not present within the vendor directory.  When I package go-swagger for Gentoo/Linux I use a GOROOT/GOPATH workspace where there is nothing inside except for the go standard library (usually in /usr/lib/go), making easy to detect missing vendored dependencies.\nI would check for copies of the golang.org/x/tools package with the find tool on all yours CI envs; in case, make sure that you are not reusing old precompiled go-objects by removing all the pkg subdirectories every time you run a test on the CI.\n. Thank you @casualjim. v0.6.0 successfully packaged for Gentoo/Linux without any problems. :+1: \nEverything compiles as expected, and go-swagger seems to work correctly :)\n. ",
    "JonnyBGod": "This is exactly why am using go-swagger. To make a CLI. It would be great to have a tool to fully generate CLIs.\n@drewwells summarized it well.\nFor his second point, I would probably check for /user endpoint and /user/auth, /user/login.\nAlso maybe ask a few questions regarding this during generation. Like type of authentication, login endpoint...\n. ",
    "schickling": "Hi @casualjim. Maybe I didn't make it clear enough. I was hoping for a way without the wrapper struct.\n. Thanks!\n. ",
    "jonathaningram": "@casualjim I just came across this and for me this wouldn't be about optimising, but more about having to change your Go code so that it works with the swagger generator, opposed to swagger just working with your original code, right? I mean, would you find a blog article on writing a standard Go handler func that says \"make sure that you use a wrapper struct so that swagger generate can handle it\"? Not sure if that makes sense...?\ncc @schickling \n. @casualjim thanks for the reply. I did already try httpkit.File previously and just tried it again and it returns the error:\nunknown primitive \"File\"\nWould this be a bug?\nI did check out the test at https://github.com/go-swagger/go-swagger/blob/328dc1bb22db726edd68fcd101220ca7813539cb/examples/generated/restapi/operations/pet/upload_file_parameters.go#L27 but if I'm correct it looks like that file is generated from the swagger.json, opposed to what I'm trying to do which is generate it from code annotations/comments.\n. For the record, here's the complete running program to replicate the error when using httpkit.File:\n``` go\n//go:generate swagger generate spec -o ./swagger.json\n// Package main MyCompany API.\n//\n//     Schemes: https\n//     Host: localhost\n//     BasePath: /\n//     Version: 0.0.1\n//     License: MIT http://opensource.org/licenses/MIT\n//\n//     Consumes:\n//     - application/json\n//\n//     Produces:\n//     - application/json\n//\n//\n// swagger:meta\npackage main\nimport (\n    \"net/http\"\n\"github.com/go-swagger/go-swagger/httpkit\"\n\n)\n// swagger:parameters myOperation\ntype MyStruct struct {\n    // MyFormFile desc.\n    //\n    // name: file\n    // in: formData\n    // type: file\n    MyFormFile httpkit.File json:\"myFormFile\"\n}\nfunc main() {\n    // swagger:route POST /api/my-op/ myOperation\n    //\n    //     Consumes:\n    //     - multipart/form-data\n    //\n    //     Produces:\n    //     - application/json\n    //\n    //     Security:\n    //       api_key:\n    http.HandleFunc(\"/api/my-op/\", func(w http.ResponseWriter, r *http.Request) {\n})\n\n}\n``\n. Hi @casualjim thanks for the fix. However, I have rungo get -uand added the annotationswagger:fileand when generating I get the errorclassifier: unknown swagger annotation \"file\". Here's the full file (I copied theMyFileParams` struct directly from your recent commit so figured it should work). Any thoughts?\n``` go\n//go:generate swagger generate spec -o ./swagger.json\n// Package main MyCompany API.\n//\n//     Schemes: https\n//     Host: localhost\n//     BasePath: /\n//     Version: 0.0.1\n//     License: MIT http://opensource.org/licenses/MIT\n//\n//     Consumes:\n//     - application/json\n//\n//     Produces:\n//     - application/json\n//\n//\n// swagger:meta\npackage main\nimport (\n    \"bytes\"\n    \"net/http\"\n)\n// MyFileParams contains the uploaded file data\n// swagger:parameters myOperation\ntype MyFileParams struct {\n    // MyFormFile desc.\n    //\n    // in: formData\n    //\n    // swagger:file\n    MyFormFile *bytes.Buffer json:\"myFormFile\"\n}\nfunc main() {\n    // swagger:route POST /api/my-op/ myOperation\n    //\n    //     Consumes:\n    //     - multipart/form-data\n    //\n    //     Produces:\n    //     - application/json\n    //\n    //     Security:\n    //       api_key:\n    http.HandleFunc(\"/api/my-op/\", func(w http.ResponseWriter, r *http.Request) {\n})\n\n}\n``\n. @casualjim ah thanks, my bad, rookie mistake. I forgot that this was using aswaggercommand opposed to justimporting it in my own code so I needed to make sure the swagger command was rebuilt. Sorry for the noise and thanks again for the fix.\n. For me, I think not having the server handle both was because of the std libs behaviour ofhttp.Handle` and whether the path arg is a prefix - I can't recall exactly, but without the slash I think the server would not treat the given path as a prefix so the handler would not get matched for nested routes.\nRe why not just catch it:\nI guess the server is catching it, and (possibly?) doing the \"right\" thing by doing a 301 to the canonical resource.\nRe your test:\nCorrect, so here's an example call:\n```\n$ curl -D - https://example.com/api/my-op\nHTTP/1.1 301 Moved Permanently\nLocation: /api/my-op/\nContent-Type: text/html; charset=utf-8\nVary: Accept-Encoding\nDate: Mon, 15 Feb 2016 01:56:54 GMT\nServer: Google Frontend\nCache-Control: private\nAlt-Svc: quic=\":443\"; ma=604800; v=\"30,29,28,27,26,25\"\nAccept-Ranges: none\nTransfer-Encoding: chunked\nMoved Permanently.\n```\nI'm sure you'll figure out the ideal solution (if you choose to implement this), but I just did this locally and it achieved what I needed:\n``` diff\ndiff --git a/httpkit/client/runtime.go b/httpkit/client/runtime.go\nindex f3a957a..da6d6bc 100644\n--- a/httpkit/client/runtime.go\n+++ b/httpkit/client/runtime.go\n@@ -135,7 +135,14 @@ func (r Runtime) Submit(operation client.Operation) (interface{}, error) {\n        }\n        req.URL.Scheme = r.pickScheme(operation.Schemes)\n        req.URL.Host = r.Host\n+       var reinstateSlash bool\n+       if req.URL.Path[len(req.URL.Path)-1] == '/' {\n+               reinstateSlash = true\n+       }\n        req.URL.Path = path.Join(r.BasePath, req.URL.Path)\n+       if reinstateSlash {\n+               req.URL.Path = req.URL.Path + \"/\"\n+       }\n    r.clientOnce.Do(func() {\n            r.client = &http.Client{\n\n```\n. No probs, happy to help :)\n. You're welcome @casualjim it's the least I can do! You're the one that created the great lib :) Still hitting some curve balls to get it working for our API, but hoping we will get there.\n. Yep just seeing that too.\n. ",
    "ghost": "@casualjim  My pr did not address what they were talking about as he Is talking about paramaters not response. I do plan on doing a pr to add swagger:bodyparamaters though\n. I have added as json file:\n    \"consumes\": [\n        \"application/x-www-form-urlencoded\",\n        \"multipart/form-data\"\n    ]\nand this as yaml file:\n    consumes:\n        - application/x-www-form-urlencoded\n        - multipart/form-data\nand fixed my problem.. Ah yes of course! I have split my spec in to separate files and I am reconstituting them using json-refs.  However, I had neglected to filter out relative refs from being resolved (--filter relative) hence the definition being repeated local to the response.  Thank you.  Great work BTW.\n. @I'm getting quite a number of issues using the autogen client code, beginning to suspect it's early days for this piece and I should hand a roll a client for now.  Is this a fair comment?\n. Operation spec:\npost:\n  parameters:\n    -\n      in: body\n      required: true\n      name: client\n      schema:\n        $ref: \"#/definitions/client\"\n  responses:\n    200:\n      description: \"Create new client\"\n      schema:\n        $ref: \"#/definitions/client\"\n    401:\n      description: \"unauthorised\"\n    default:\n      description: \"generic error response\"\n      schema:\n        $ref: \"#/definitions/errorMessage\"\n  tags:\n    - clients\nClient def:\nproperties:\n  id:\n    format: int64\n    type: integer\n  name:\n    type: string\nrequired:\n  - id\n  - name\ntype: object\nIntegration test code:\n```\nfunc TestCreateOneOk(t *testing.T) {\nid := int64(0)\n\nclient := &models.Client{ID: &id, Name: SPtr(\"New Client\")}\n\nresponse, err := Apiclient.Clients.PostClients(clients.NewPostClientsParams().WithClient(client)) //Returns (*PostClientsOk, error)\n\nif err != nil {\n    t.Fatal(fmt.Sprintf(\"Error: %s\", err.Error()))\n}\n\npayloadJson, _ := json.Marshal(response.Payload)\nerrorJson, _ := json.Marshal(response.Error())\n\nlog.Print(string(payloadJson))\nlog.Print(string(errorJson))\n\n}\n```\nRequest / Response\n```\nPOST /clients HTTP/1.1\nUser-Agent: Go-http-client/1.1\nContent-Length: 29\nAccept: application/json\nContent-Type: application/json\nAccept-Encoding: gzip\nHost: localhost:4004\n{\"id\":0,\"name\":\"New Client\"}\nHTTP/1.1 200 OK\nContent-Type: application/json\nVary: Origin\nDate: Wed, 27 Jul 2016 14:30:58 GMT\nContent-Length: 32\n{\"id\":1040,\"name\":\"New Client\"}\n```\nOutput from test:\n2016/07/27 15:26:41 {\"id\":1039,\"name\":\"New Client\"}\n2016/07/27 15:26:41 \"[POST /clients][200] postClientsOK  \\u0026{ID:0xc82021e9a8 Name:0xc82021e9c0}\"\nSo I have 2 questions; 1) as the Apiclient.Clients.PostClients(..) method returns *PostClientsOk how could it return the other types that are bound to/represent different HTTP status codes. 2) what is the purpose of the error string? \n. That all makes sense now.  Thank you for your patience.\n. Apologies, noob mistake..I need to save dependencies for all packages in my repo: https://github.com/tools/godep#multiple-packages\n. My bad..this can be deleted.  thx\n. ",
    "ethernetdan": "What would be involved in implementing this? It looks like the primary Go protobuf library I see used won't support DynamicMessage (golang/protobuf#106)\n. ",
    "elgris": "Also, I noticed that validator treats references as validation errors. For instance, let's put a reference to parameter list:\n/foo:\n    get:\n      summary: Some endpoint\n      parameters:\n        - name: some_id\n          in: query\n          description: some ID\n          required: true\n          type: integer\n        - $ref: '#/parameters/some_shared_param'\nValidator output for such case is:\n- paths./foo.get.parameters.$ref in body is a forbidden property\n- paths./foo.get.parameters.name in body is required\n- paths./foo.get.parameters.in in body is required\n- paths./foo.get.parameters.type in body is required\nAs specification says, using references in parameter list is valid: http://swagger.io/specification/#operationObject (parameters is expected to hold an array [Parameter Object | Reference Object])\nIs there any plans to fix? Perhaps I overlooked something :)\n. I thought that it looks similar because of the same reason: incorrect processing of $ref :) Let me open a new one...\nUpd: #321\n. False alarm.\nThis happens when one tries to override reference's parameter with some other value. Like this:\n- $ref: '#/parameters/some_shared_param'\n          required: false\nSwagger specs does not allow this, hence the ticket can be closed.\n. @casualjim thanks! I'm sorry, didn't notice the problem on my local, because it didn't reproduce at the first time. Following test runs revealed the problem.\n. Hi @vburenin!\nThanks, looks like I know what's the problem. Here's whole Swagger doc, just for reference:\n```\nswagger: \"2.0\"\nbasePath: /api\nconsumes:\n- application/json\nproduces:\n- application/json\nschemes:\n- http\nhost: 0.0.0.0:8000\ninfo:\n  description: Rest API for example\n  title: example API\n  version: \"2.0\"\ndefinitions:\n  ApiResponse:\n    properties:\n      data:\n        type: object\n    type: object\npaths:\n  /users:\n    get:\n      responses:\n        \"200\":\n          description: Successfully retrieve list of users\n          examples:\n            application/json:\n              data:\n              - name: User1\n                email: user1@mail.me\n              - name: User2\n                email: user2@mail.me\n          schema:\n            $ref: '#/definitions/ApiResponse'\n```\nThe problem is that by design ApiResponse may contain both arrays and objects. That is, JSON response may look like\n{\n  data: {\n    ...some object definition...\n  }\n}\nOR\n{\n  data: [ ...some array definition... ]\n}\nIn order to make Swagger doc valid I need to define 2 different Response schemas, like following\n...\ndefinitions:\n  ApiResponseObj:\n    properties:\n      data:\n        type: object\n    type: object  \n  ApiResponseArray:\n    properties:\n      data:\n        type: array\n    type: object  \n...\npaths:\n  /users:\n    get:\n      responses:\n        \"200\":\n          description: Successfully retrieve list of users\n          examples:\n            application/json:\n              data:\n              - name: User1\n                email: user1@mail.me\n              - name: User2\n                email: user2@mail.me\n          schema:\n            $ref: '#/definitions/ApiResponseArray'\nIn such a case validator throws no error.\n. ",
    "mephux": "@casualjim was wondering if that would be your reply.. hehe so, that would cause random property selection? Can you point me to the code for that? if proper model generation is dependent on validation.. why not just exit out completely on failure? I am using this spec now (https://gist.github.com/mephux/9181100f0cc2711cd628). I susspect the validation logic may be incorrect as well as this one returns different validation messages than what is returned from the swagger site.\n. Closing - issue was a validation 2.0 inconsistency.\n\"$ref\": \"#/definitions/integer\" VS. `\"type\": \"integer\"\n. ",
    "ewilde": "@casualjim I'm not that familiar with golang, so I struggled to see how to add the the bearer token for use with client credentials grant. \nI got it working by exporting the runtime.do function i.e. Do and then creating a custom Runtime and setting runtime.Do to my implementation below:\n```golang\nfunc NewAuthenticatedClient(config client.TransportConfig) AuthenticatedClient {\n    a := &AuthenticatedClientCheckRedirect{}\n    h := &http.Client{\n        Transport: http.DefaultTransport,\n        CheckRedirect: a.CheckRedirect,\n    }\nrt := rc.NewWithClient(config.Host, config.BasePath, config.Schemes, h)\nauthClient := &AuthenticatedClient{\n    ApiClients: client.New(rt, strfmt.Default),\n    HttpClient: h,\n    Config: config,\n}\n\nrt.Consumers[\"application/vnd.api+json;charset=UTF-8\"] = runtime.JSONConsumer()\nrt.Consumers[\"application/vnd.api+json\"] = runtime.JSONConsumer()\nrt.Do = authClient.Do\n\nreturn authClient\n\n}\nfunc (r AuthenticatedClient) Do(ctx context.Context, client http.Client, req http.Request) (http.Response, error) {\n    if client == nil {\n        client = r.HttpClient\n    }\nif len(r.AccessToken) > 0 {\n    req.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", r.AccessToken))\n}\n\nresp, err := client.Do(req.WithContext(ctx))\n// If we got an error, and the context has been canceled,\n// the context's error is probably more useful.\nif err != nil {\n    select {\n    case <-ctx.Done():\n        err = ctx.Err()\n    default:\n    }\n}\nreturn resp, err\n\n}\nfunc (r *AuthenticatedClient) Login(clientId string, clientSecret string) error {\nmpbody := bytes.NewBuffer(nil)\nwriter := multipart.NewWriter(mpbody)\n_ = writer.WriteField(\"grant_type\", \"client_credentials\")\nwriter.Close()\nreq, _ := http.NewRequest(\"POST\", \"/oauth2/token\", mpbody)\nreq.URL.Host = r.Config.Host\nreq.URL.Path = path.Join(r.Config.BasePath, req.URL.Path)\nreq.URL.Scheme = r.Config.Schemes[0]\n\nreq.Header.Set(\"Content-Type\", writer.FormDataContentType())\nencoded := base64.StdEncoding.EncodeToString([]byte(clientId + \":\" + clientSecret))\nreq.Header.Set(\"Authorization\", \"Basic \"+encoded)\n\nclient := &http.Client{}\nresp, err := client.Do(req)\nif err != nil {\n    panic(err)\n}\ndefer resp.Body.Close()\n\nbody, err := ioutil.ReadAll(resp.Body)\nif err != nil {\n    panic(err.Error())\n}\n\nloginResponse, err := getLoginResponse([]byte(body))\n\nif err != nil {\n    return err\n}\n\nr.AccessToken = loginResponse.AccessToken\nreturn nil\n\n}\n```\nThat fact that I had to make the do method public makes me think there is probably a better way to do this?. ",
    "MStoykov": "@casualjim the 3rd example was my try at working around the problem. It looked valid from the specification, but I am only reading trough it for the second time :)\nOn the question of the bug: \nI agree that the fix fixes the showed problem above, but I it doesn't work for all possible formats, for example it doesn't work with hostname. \n. Thank you. \n. after reporting it and trying rereport #216 I found out that the file is name configure_test.go  because my api was called 'test' which makes this issue no problem and explains why I only found out about it while reporting ... \nI suppose it will be better if it was names test_configure.go but it isn't a problem at all.\n. @Xe I have since deleted it but the title has to start with the word 'test': \njson\n{\n  \"consumes\": [\n    \"application/json\",\n    \"application/x-www-form-urlencoded\"\n  ],\n  \"info\": {\n    \"title\": \"Test api\",\n    \"version\": \"0.1\"\n  },\n  \"paths\": {\n    \"/a\": {\n      \"get\": {\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success message\"\n          },\n          \"500\": {\n            \"description\": \"Fail message\"\n          }\n        }\n      }\n    }\n  },\n  \"produces\": [\n    \"application/json\"\n  ],\n  \"swagger\": \"2.0\"\n}\n@casualjim It will be a good idea, but given the case in which it happens, it's mostly so people who report bugs and name their test api's 'test api' to not be unpleasantly surprised. If you decide to fix this I propose to not append user generate strings but to prepend them.\nIn this case this means that the file will be called test_configuration.go which will work fine.\n. I certainly won't need that feature in my current project. \nIt's a good idea and I like it. But it could be optional I suppose. \nMaybe change the behavior in such a way that I could give nil instead of the spec and still have a way to provide whatever else it gets from it.\n. I was wondering whether to not change swag.ToGoName to do what pascalize does but decided against on the account that there was probably a reason for it to not do it in the first place. \n. Thanks a lot for this(those) fix(es) :D \n. While investigating it turn out that go swagger already has a copy of the code and the problem is just in case of method arguments in the helper 'With*' case.\n. I might've jumped the gun a little bit - have being going trough internal projects and moving them to go modules and looking in to what depedencies there are. \nApparently only runtime's client code still has net/context like in here . But I also goimports all the generated files so it creeps into the 'client' generated code. The jump to v1.0.0 would probably be more useful in the openapi's libraries than go-swagger. \nAnd will at this point mean that you can break backward's comparability and just tag them with v2.0.0 and at least code that uses go modules will still work.\nHopefully in the future go-swagger can generate go.mod for all the generated code pointing to versions of the libraries that it(go-swagger) was build with. At which point I for example won't need to figure out myself what versions of the libraries should I put in go.mod when I upgrade the go-swagger I use. \nAlso version numbers are meaningless, unless your tools can make something out of them :). I would argue listening/watching this talk by Russ Cox  on what is now called go modules(before that vgo) is good idea for any go developer and hopefully will explain why I would like to get swagger and all go-opeanpi both it and move them out of the 0.x versions.\n. ",
    "belak": "Thanks! Right now our swagger support is undergoing quite a few changes, so I'll hold off on submitting updates to our swaggerfile for a bit. When it starts to stabilize, we'll get an updated swaggerfile submitted.\n. ",
    "Tobi042": "Forgot signed-off-by message\n. The problem I see with that is that a []interface{} slice only takes the object, but go-parser also wants a description (short appears to suffice). I think adding an extra type for that might help:\ntype CommandLineOptionsGroup struct {\n  ShortDescription string\n  LongDescription string\n  Options interface{}\n}\nHow does that sound? Where would you recommend putting such a type?\n. ",
    "Ravenwater": "I see the api.ServerShutdown method hook in the generated struct, but how is it invoked/what invokes this method?. Pending investigation how to configure the \"Stop Process\" button in the IntelliJ IDE. According to customer support it is only supported for the JVM, and would need to be added by the Golang plugin for Golang processes.. ```yaml\nswagger: '2.0'\ninfo:\n  title: keyauth debug\n  version: 0.3.0\nschemes:\n  - http\nbasePath: /api\nconsumes:\n  - application/keyauth.api.v1+json\nproduces:\n  - application/keyauth.api.v1+json\nsecurityDefinitions:\n  key:\n    type: apiKey\n    in: header\n    name: x-token\nsecurity:\n  - key: []\npaths:\n  /customers:\n    post:\n      tags: [\"customers\"]\n      operationId: create\n      summary: Create a new customer to track\n      parameters:\n        - name: info\n          in: body\n          schema:\n            $ref: \"#/definitions/customer\"\n      responses:\n        '201':\n          description: created\n          schema:\n            $ref: \"#/definitions/customer\"\n        default:\n          description: error\n          schema:\n            $ref: \"#/definitions/error\"\n    get:\n      tags: [\"customers\"]\n      operationId: getId\n      summary: Get a customerId given an SSN\n      parameters:\n        - name: info\n          in: body\n          schema:\n            $ref: \"#/definitions/social_id\"\n      responses:\n        '200':\n          description: OK\n          schema:\n            $ref: \"#/definitions/customer\"\n        '401':\n          description: unauthorized\n          schema:\n            $ref: \"#/definitions/error\"\n        '404':\n          description: resource not found\n          schema:\n            $ref: \"#/definitions/error\"\n        default:\n          description: error\n          schema:\n            $ref: \"#/definitions/error\"\ndefinitions:\n  customer:\n    type: object\n    required:\n      - customerId\n      - name\n      - surname\n      - ssn\n      - fipsCode\n    properties:\n      customerId:\n        type: integer\n        format: int64\n        readOnly: true\n        description: internal identifier of a customer\n      name:\n        type: string\n        format: string\n        minLength: 1\n      surname:\n        type: string\n        format: string\n        minLength: 1\n      agentId:\n        type: integer\n        format: int32\n        description: agent associated with this customer\n      ssn:\n        type: string\n        format: string\n        minLength: 11\n        description: Lookup identifier to find a customer in the system\n      fipsCode:\n        type: string\n        format: string\n        minLength: 1\n  social_id:\n    type: object\n    required:\n      - ssn\n    properties:\n      ssn:\n        type: string\n        format: string\n        minLength: 11\n  error:\n    type: object\n    required:\n       - message\n    properties:\n      code:\n        type: integer\n        format: int64\n      message:\n        type: string\n      fields:\n        type: string\n...\n```\n. With the above spec and the following KeyAuth handler the issue is reproducable:\n```\nvar bAuthenticated bool\n// This file is safe to edit. Once it exists it will not be overwritten\ntype MyAuthInfo struct {\n    token string\n}\nin func configureAPI(...)\n...\n    // Applies when the \"x-token\" header is set\n    api.KeyAuth = func(token string) (interface{}, error) {\n        api.Logger(\"KeyAuth handler called\")\n        if token == \"abcdefuvwxyz\" {\n            authInfo := new(MyAuthInfo)\n            authInfo.token = token\n            bAuthenticated = true\n            return authInfo, nil\n        }\n        api.Logger(\"Access attempt with incorrect api key auth: %s\", token)\n        bAuthenticated = false\n        return nil, errors.New(100, \"incorrect api key auth\")\n        // return nil, errors.NotImplemented(\"api key auth (key) x-token from header param [x-token] has not yet been implemented\")\n    }\n```\n```\nTheodore@Theo-laptop-4 MINGW64 ~/dev/Golang/src/github.com/Ravenwater/keyauth_debug\n$ curl -i -H 'Content-Type: application/keyauth.api.v1+json' -H 'X-Token: abcdefuvwxyz' http://localhost:41102/api/customers\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    57  100    57    0     0    260      0 --:--:-- --:--:-- --:--:--   280HTTP/1.1 501 Not Implemented\nContent-Type: application/keyauth.api.v1+json\nDate: Fri, 18 Nov 2016 17:46:42 GMT\nContent-Length: 57\n\"operation customers.GetID has not yet been implemented\"\nTheodore@Theo-laptop-4 MINGW64 ~/dev/Golang/src/github.com/Ravenwater/keyauth_debug\n$ curl -i -H 'Content-Type: application/keyauth.api.v1+json' -H 'X-Token: badauthtoken' http://localhost:41102/api/customers\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:--  0:01:06 --:--:--     0\nCTRL-C\n```\n. Thank you for the explanation: I would not have been able to get to that understanding.. Perfect, that works.\nWhat is the explanation?. Still having a problem with how and where to initialize glog so that both sets of flags are honored: the runtime flags, such as --tls-certificate and the glog flags like -log_dir and -stderrthreshold.\nIf I initialize glog in the config_xxx.go I don't get the go-swagger runtime flags, and if I initialize glog in the engine, I get the error, logging before flag.Parse.\nI realize that this question is not so much about logging per se, but more about how to merge the flag sets defined by different packages.. Any insights how to locate where the nesting comes from?\n. That indeed was the way. This issue can be closed.. receiving the same error. @bobvanluijt  Can you elaborate on what incorrect formatting triggers the segfault?. @casualjim did you receive the spec file through email to try to reproduce it?. I have narrowed it down to this data definition:\nregiment:\n    type: object\n    items:\n      $ref: \"#/definitions/demand\"\ndemand:\n    type: object\n    required:\n      - package\n      - plan\n    properties:\n      package:\n        type: string\n      plan:\n        type: number\n        format: float\nAdd this, and it produces the error:\n$ swagger generate server -f mp-scoring-api-bad.yaml -P models.Principal\n2017/10/06 10:51:07 building a plan for generation\n2017/10/06 10:51:07 planning definitions\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xc0000005 code=0x0 addr=0xd pc=0x957b6a]\ngoroutine 1 [running]:\ngithub.com/go-swagger/go-swagger/generator.(schemaGenContext).NewSliceBranch(0xc0431be000, 0xc043e91d40, 0x1)\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/generator/model.go:387 +0x54a\ngithub.com/go-swagger/go-swagger/generator.(schemaGenContext).buildArray(0xc0431be000, 0x0, 0x0)\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/generator/model.go:1068 +0x14a\ngithub.com/go-swagger/go-swagger/generator.(schemaGenContext).buildItems(0xc0431be000, 0x0, 0x0)\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/generator/model.go:1104 +0xbfc\ngithub.com/go-swagger/go-swagger/generator.(schemaGenContext).makeGenSchema(0xc0431be000, 0xc0431be000, 0xc043c17d00)\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/generator/model.go:1445 +0xab2\ngithub.com/go-swagger/go-swagger/generator.makeGenDefinitionHierarchy(0xc04416e290, 0x8, 0xc0435b2830, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/generator/model.go:166 +0x2f6\ngithub.com/go-swagger/go-swagger/generator.makeGenDefinition(0xc04416e290, 0x8, 0xc0435b2830, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/generator/model.go:133 +0xc3\ngithub.com/go-swagger/go-swagger/generator.(appGenerator).makeCodegenApp(0xc0432e2000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/generator/support.go:596 +0x59d\ngithub.com/go-swagger/go-swagger/generator.(appGenerator).Generate(0xc0432e2000, 0x0, 0x0)\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/generator/support.go:254 +0xbd\ngithub.com/go-swagger/go-swagger/generator.GenerateServer(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc042062960, 0xc042675f68, ...)\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/generator/support.go:43 +0xd2\ngithub.com/go-swagger/go-swagger/cmd/swagger/commands/generate.(Server).Execute(0xc0427706e0, 0xc042631860, 0x0, 0x6, 0xc0427706e0, 0x1)\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/cmd/swagger/commands/generate/server.go:120 +0x55e\ngithub.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags.(Parser).ParseArgs(0xc042631800, 0xc042066010, 0x6, 0x7, 0x4111ef, 0xc0422be6c0, 0xc042317400, 0xc0423d1201, 0xc042726cc0)\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags/parser.go:316 +0x834\ngithub.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags.(*Parser).Parse(0xc042631800, 0x6, 0xb9ebfb, 0x6, 0x0, 0xbe6d2e)\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags/parser.go:186 +0x78\nmain.main()\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/cmd/swagger/swagger.go:105 +0xd6a\nnext step is to drill down in the stack trace.... Was just typing the same observation regarding the incorrect use of type: object where there needs to be a type: array. when your update came in. \nThank you for the DEBUG=1 trick, that will help me in the future.\nVery much appreciated.. ",
    "bklau": "@casualjim 3 questions : \nQ1: Does a struct for Parameter model have to be declared in the SAME .go file where the swagger:route is declared for a router function?\nQ2: Assume that I have a route \"/services/{serviceName}\", how would I named the field associated with the path \"{serviceName}\" above in a struct wrapper for path params?\ni.e. type  ServiceNameParam struct {\n  ServiceName string <== is this named as \"serviceName\" or \"ServiceName\" or \"SERVICENAME\"?\n}\nQ3: Is the annotations casesenstive like \"Required\" vs \"required\"?. I see mixed examples about this.\n. @casualjim Thx for the answers. One more question: Can methods in an interface be annotated?\n. @casualjim : My generated spec is now working but seems to be missing a parameter \"description\"  to indicate to end user of the API URL endpoint of what's its doing. Example below, I wanted the line \"Disable/enable a compute node EC2 machine with a given IP address\" to show up as some sorta of description for the parameter... Am I missing something?\n// v2PutXXX disable/enable a compute node EC2 machine with a given IP address\n//\n// swagger:route PUT /compute/nodes/{nodeIPAddress} v2PutXXX\n//\n//  Disable/enable a compute node machine with a given IP address\n//\n//     Produces:\n//     - application/json\n//\n//     Consumes:\n//     - application/json\n//\n//     Schemes: http\n//\n//     Responses:\n//       default: errorResp\n//       200: okResp\n//\nfunc v2PutXXX(....)\n. ",
    "tstrg": "Is there an example how to generate example values from the code?. Thank you for the answer.. ",
    "cozmo": "@casualjim That's a good point about non array/object values being invalid JSON. I think it's reasonable to disallow those as long as you think that's inline with the swagger spec (but should probably fail validate or something then).\nThat said, I was playing around some more and this also fails\nyaml\nswagger: '2.0'\ninfo:\n  version: 1.0.0\n  title: 'string-body-api'\npaths:\n  /echo:\n    post:\n      summary: Post an object\n      parameters:\n        - name: body\n          in: body\n          description: this argument is a string\n          schema:\n            type: object\n      responses:\n        '200':\n          description: All is good\n(notice the object type in the body param)\n```\ngo run cmd/string-body-server/*.go\n./restapi/operations\nrestapi/operations/post_echo_parameters.go:40: body.Validate undefined (type interface {} is interface with no methods)\n```\nUnless I'm missing something I think this is almost certainly a valid spec. \n. As far as I can tell isInterface is true (causing the Validate method to not be called even though it exists) with\nyaml\ntype: object\nproperties:\n  name:\n    type: string\nwhich is what lead me to using these properties instead. \n. ",
    "azylman": "I really messed up this PR, sorry while I try to fix it\n. Okay, looking better now\n. ",
    "pieter-lazzaro": "I had a look at making it a bit more customizable in terms of adding templates that don't exist etc. It would be nice to be able to not just overwrite the builtin templates but also extend without having to use the exact directory structure. If I get some time on the weekend I will have a look again and see if I can get something a bit more robust working.\n. whoops, forgot that I was using protected templates in the tests\n. Yep, you are right. I will change to use ContentType from httpkit. and also a prefix check. That reminds me is there a current way to test these kinds of issues?\n. Actually, I just checked the ParseMultipart function. It looks like it will return ErrNotMultipart. Maybe just check if the returned err matches that?\n. ",
    "spiffyjr": "Okay, thanks.\n. ",
    "serussell": "I also have this problem:\ngo-swagger version (there being no \"version\" command in the executable)\n```\n1258)go-swagger/go-swagger % git log -1\ncommit b4422d1e33b980d9653ee089a12593168efcb7b4\nAuthor: Ivan Porto Carrero ivan@flanders.co.nz\nDate:   Sat Jan 30 22:49:08 2016 -0800\nupdate code of conduct to 1.4 version\n\n1259)go-swagger/go-swagger % cd -\n~/workspace/src/bitbucket.org/internationalsos/riskratings\n```\nThe project builds, so Go vendoring is  working:\n1260)internationalsos/riskratings % GO15VENDOREXPERIMENT=1 go build -o build/web ./cmd/web\n1261)internationalsos/riskratings % echo $?\n0\nTo prove that a package is, indeed, in the vendor directory:\n1262)internationalsos/riskratings % ls vendor/github.com/namsral/flag\nexamples         export_test.go  flag_test.go  README.md\nexample_test.go  flag.go         LICENSE       testdata\nand that we're using Go 1.5\n1263)internationalsos/riskratings % go version\ngo version go1.5.2 linux/amd64\nHowever, go-swagger does not find the vendored packages, and does not appear\nto be looking in the ./vendor directory:\n1264)internationalsos/riskratings % GO15VENDOREXPERIMENT=1 swagger generate spec -b ./cmd/web -o swagger.json 2>&1 | head -n 10\n/home/ser/workspace/src/bitbucket.org/internationalsos/riskratings/cmd/web/main.go:30:2: could not import github.com/namsral/flag (cannot find package \"github.com/namsral/flag\" in any of:\n        /home/ser/Software/go/src/github.com/namsral/flag (from $GOROOT)\n        /home/ser/workspace/src/github.com/namsral/flag (from $GOPATH))\n/home/ser/workspace/src/bitbucket.org/internationalsos/riskratings/cmd/web/main.go:33:2: could not import github.com/fvbock/endless (cannot find package \"github.com/fvbock/endless\" in any of:\n... and so on, for all dependencies.  Note, mainly, that vendor isn't in the search path.  \nI can't make this project public, but I'll try to put together a minimum test case for you.\n. Hi,\nI cleaned and rebuilt swagger using go1.5.3, and it is working now.  Thanks for the pointer!\n. @casualjim After I upgraded to 1.5.3 and recompiled go-swagger with that version, it started working.\n. @solher, it may not be you.  Try to clear out all your $GO* environment variables and set them to sane values.  I had to mess around a lot to get go-swagger to do vendoring correctly, and I'm not sure exactly what it was I did to make it work.  I reset a lot of my env vars, I installed Go 1.5.3, and I recompiled both gvt and go-swagger with the newer Go before go-swagger worked.  Try a few more things before you give up.\nI've been using gvt and have been happy with it, BTW.\n. Sorry... this may be a duplicate of #213 .  @casualjim  I'm fine if you close this as a duplicate.\n. ",
    "snop-snov": "I had the same issue. It was fixed after upgrading Go from 1.5.3 to 1.6.3.\n. ",
    "alecholmes": "Thanks for the quick fix, @casualjim!\n. Thanks @casualjim! \n. Yes, although they are similar.\nThis bug covers the case of an unset required field (that is an object, not a primitive) passing validation.\n{\n  \"something_required\": null  // where something_required should be set to an object but validation passes\n}\n453 covers an optional field that is an object being set but never validated.\n{\n  \"something_optional\": { \"an_int\": \"but i'm a string!\"} // optional nested object is not validated\n}\n. I think the default behavior should allow distinguishing between null and default values. Since JSON distinguishes null vs zero value, and swagger is JSON-oriented, coercing nulls into other values seems like an optimization that isn't needed for most users. For this reason, I disagree on x-nullable being necessary.\nIf reducing pointers is a goal, something along the lines of the following could work. I would use a bit set instead of a companion bool per field.\n```\nMyValueSet bool // ideally a shared bit set\nMyValue int64\n// getters\nfunc (o *Object) GetOrDefaultMyValue() (int64, bool) {\n  return o.MyValue, o.MyValueSet\n}\nfunc (o Object) GetMyValue() int64 {\n  if o.MyValueSet {\n    return &o.MyValue\n  } else {\n    return nil\n  }\n}\n``\n. Thanks @casualjim and @vburenin. I added a comment on #476 - I don't think requiringx-nullable: true` is ideal.\n. ",
    "danfang": "Yes, it seems like a flaky issue - I might try running the tool on another machine or platform, but it seems doubtful that that would fix the issue. Some more information about the project: \n- there are many different packages in the project that depend on each other (the issues appeared in sub-sub packages from the root, but this is probably more correlation than causation)\n- the problem will often go away when moving the struct declarations to another file in the same package but sometimes not\n- in a previous version of go-swagger, the error would read unknown primitive \"error\"\nI've since moved all of the swagger comments from the project and will define everything in a .yml instead.\n. yep!\n. ",
    "alioygur": "+1\n. @casualjim I am new on Golang.\nthere is my file called as response.go\n``` go\npackage app\nimport (\n    \"github.com/alioygur/piklook-corporate/app/domain\"\n    \"github.com/alioygur/piklook-corporate/app/lib\"\n)\ntype times struct {\n    CreatedAt int64 json:\"createdAt\"\n    UpdatedAt int64 json:\"updatedAt\"\n}\ntype response struct {\n    Data interface{} json:\"data\"\n}\ntype userRes struct {\n    ID       int64  json:\"id\"\n    Username string json:\"username\"\n    Email    string json:\"email\"\n    times\n}\nfunc newUserRes(user domain.User) userRes {\n    res := new(userRes)\n    lib.CopyTo(user, res)\nreturn res\n\n}\n// swagger:response jobRes\ntype jobRes struct {\n    ID          int64       json:\"id\"\n    UserID      int64       json:\"userId\"\n    Title       string      json:\"title\"\n    Description string      json:\"description\"\n    Skills      []*skillRes json:\"skills,omitempty\"\n}\ntype skillRes struct {\n    ID   int64  json:\"id\"\n    Name string json:\"name\"\n}\nfunc newJobRes(job *domain.Job) interface{} {\n    res := new(jobRes)\nlib.CopyTo(job, res)\n\nskillRess := make([]*skillRes, len(job.Skills))\n\nfor i, skill := range job.Skills {\n    lib.CopyTo(skill, &skillRess[i])\n}\n\nres.Skills = skillRess\n\nreturn response{res}\n\n}\nfunc newJobsRes(jobs []*domain.Job) interface{} {\n    res := make([]jobRes, len(jobs))\n    for index, p := range jobs {\n        lib.CopyTo(p, &res[index])\n    }\nreturn response{res}\n\n}\n```\nThe error\nsh\n\u279c  piklook-corporate  swagger generate spec -o swagger.json\nunknown field type ele for \"skills\"\n. can you give me an example please?\nis it useful during generate spec ?\n. thank you dude!\n. @casualjim but it does not work correctly, when I use embeded struct.\n``` go\n// User the user model\n// swagger:model\ntype User struct {\n    ID    int64\n    Email string\n    Name  string\n}\n// UserResponse the user response\n// swagger:response userResponse\ntype UserResponse struct {\n    // in:body\n    Body struct {\n        ID    int64\n        Email string\n        Name  string\n    }\n}\n// UserResponse the user response\n// swagger:response userResponse\ntype UserResponse struct {\n    // in:body\n    Body User\n}\n```\njson\n{\n    \"consumes\": [\"application/json\"],\n    \"produces\": [\"application/json\"],\n    \"schemes\": [\"http\", \"https\"],\n    \"swagger\": \"2.0\",\n    \"info\": {\n        \"description\": \"the purpose of this application is to provide an application\\nthat is using plain go code to define an API\\n\\nThis should demonstrate all the possible comment annotations\\nthat are available to turn go code into a fully compliant swagger 2.0 spec\",\n        \"title\": \"Petstore API.\",\n        \"termsOfService\": \"there are no TOS at this moment, use at your own risk we take no responsibility\",\n        \"contact\": {\n            \"name\": \"John Doe\",\n            \"url\": \"http://john.doe.com\",\n            \"email\": \"john.doe@example.com\"\n        },\n        \"license\": {\n            \"name\": \"MIT\",\n            \"url\": \"http://opensource.org/licenses/MIT\"\n        },\n        \"version\": \"0.0.1\"\n    },\n    \"host\": \"localhost\",\n    \"basePath\": \"/v2\",\n    \"paths\": {\n        \"/user\": {\n            \"get\": {\n                \"description\": \"This will show all available pets by default.\\nYou can get the pets that are out of stock\",\n                \"consumes\": [\"application/json\"],\n                \"produces\": [\"application/json\"],\n                \"schemes\": [\"http\", \"https\", \"ws\", \"wss\"],\n                \"summary\": \"Lists pets filtered by some parameters.\",\n                \"operationId\": \"getUser\",\n                \"responses\": {\n                    \"200\": {\n                        \"$ref\": \"#/responses/userResponse\"\n                    }\n                }\n            }\n        }\n    },\n    \"definitions\": {},\n    \"responses\": {\n        \"userResponse\": {\n            \"description\": \"UserResponse the user response\",\n            \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"Email\": {\n                        \"type\": \"string\"\n                    },\n                    \"ID\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                    },\n                    \"Name\": {\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        }\n    }\n}\nthis is embeded\njson\n{\n    \"consumes\": [\"application/json\"],\n    \"produces\": [\"application/json\"],\n    \"schemes\": [\"http\", \"https\"],\n    \"swagger\": \"2.0\",\n    \"info\": {\n        \"description\": \"the purpose of this application is to provide an application\\nthat is using plain go code to define an API\\n\\nThis should demonstrate all the possible comment annotations\\nthat are available to turn go code into a fully compliant swagger 2.0 spec\",\n        \"title\": \"Petstore API.\",\n        \"termsOfService\": \"there are no TOS at this moment, use at your own risk we take no responsibility\",\n        \"contact\": {\n            \"name\": \"John Doe\",\n            \"url\": \"http://john.doe.com\",\n            \"email\": \"john.doe@example.com\"\n        },\n        \"license\": {\n            \"name\": \"MIT\",\n            \"url\": \"http://opensource.org/licenses/MIT\"\n        },\n        \"version\": \"0.0.1\"\n    },\n    \"host\": \"localhost\",\n    \"basePath\": \"/v2\",\n    \"paths\": {\n        \"/user\": {\n            \"get\": {\n                \"description\": \"This will show all available pets by default.\\nYou can get the pets that are out of stock\",\n                \"consumes\": [\"application/json\"],\n                \"produces\": [\"application/json\"],\n                \"schemes\": [\"http\", \"https\", \"ws\", \"wss\"],\n                \"summary\": \"Lists pets filtered by some parameters.\",\n                \"operationId\": \"getUser\",\n                \"responses\": {\n                    \"200\": {\n                        \"$ref\": \"#/responses/userResponse\"\n                    }\n                }\n            }\n        }\n    },\n    \"definitions\": {\n        \"User\": {\n            \"description\": \"User the user model\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"Email\": {\n                    \"type\": \"string\"\n                },\n                \"ID\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                },\n                \"Name\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"x-go-package\": \"github.com/alioygur/piklook-corporate/app\"\n        },\n        \"UserResponse\": {\n            \"description\": \"UserResponse the user response\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"Body\": {\n                    \"description\": \"in:body\",\n                    \"$ref\": \"#/definitions/User\"\n                }\n            },\n            \"x-go-package\": \"github.com/alioygur/piklook-corporate/app\"\n        }\n    },\n    \"responses\": {\n        \"userResponse\": {\n            \"description\": \"UserResponse the user response\",\n            \"schema\": {\n                \"$ref\": \"#/definitions/User\"\n            }\n        }\n    }\n}\n. @casualjim I just found a hint for this problem.\nthis works well\ngo\n// Post Response\n// swagger:response\ntype postRes struct {\n    // in: body\n    Body struct {\n        postResBody\n    }\n}\nthis works bad\ngo\n// Post Response\n// swagger:response\ntype postRes struct {\n    // in: body\n    Body postResBody\n}\nI hope this will be useful during fix this bug.\n. Good luck\n. Hello, I will give to you more info.\nAlso I test this codes in my project.\nThank you.\nOn Feb 28, 2016 4:46 AM, \"Ivan Porto Carrero\" notifications@github.com\nwrote:\n\nI have a test for this:\nhttps://github.com/go-swagger/go-swagger/blob/master/fixtures/goparsing/classification/operations/responses.go#L150-L164\nwould it be possible to give me project with the file layout you have? I\ncan't reproduce the error you have, without more info.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/go-swagger/go-swagger/issues/301#issuecomment-189767627\n.\n. @casualjim which golang version do you use?\n. \n",
    "fsouza": "Hey there, I'm fighting this issue and managed to track it down to an interface. I have the following interface:\n``` go\n// TranscodingProvider represents a provider of transcoding.\n//\n// It defines a basic API for transcoding a media and query the status of a\n// Job. The underlying provider should handle the profileSpec as deisired (it\n// might be a JSON, or an XML, or anything else.\ntype TranscodingProvider interface {\n    JobStatus(id string) (*JobStatus, error)\n// Healthcheck should return nil if the provider is currently available\n// for transcoding videos, otherwise it should return an error\n// explaining what's going on.\nHealthcheck() error\n\n}\n```\nThere's no special mark-up in this interface. It considers the Healthcheck method to be an attribute. If I remove the method, it works. If I change swaggerSchemaForType (in go-swagger code) to treat an error as a string (see the diff), it includes TranscodingProvider as one of the definitions in the manifest, declaring it as follow:\njson\n  \"TranscodingProvider\": {\n      \"description\": \"It defines a basic API for transcoding a media and query the status of a\\nJob. The underlying provider should handle the profileSpec as deisired (it\\nmight be a JSON, or an XML, or anything else.\",\n      \"type\": \"object\",\n      \"title\": \"TranscodingProvider represents a provider of transcoding.\",\n      \"properties\": {\n        \"Healthcheck\": {\n          \"description\": \"Healthcheck should return nil if the provider is currently available\\nfor transcoding videos, otherwise it should return an error\\nexplaining what's going on.\",\n          \"type\": \"string\"\n        }\n      },\n      \"x-go-package\": \"github.com/nytm/video-transcoding-api/provider\"\n    }\n\n. @casualjim I can, but what's the right fix? Ignore interfaces?\n. But don't you think that treating an interface method as a property is buggy? Interfaces have no properties, they should be skipped.\n. I see. Can I have a swagger:skip or something like that then? It's really a method that takes no arguments and returns a single parameter, it is not an accessor.\n. @casualjim I think it's more complicated than that. Should it be explicit in a sense that it only adds stuff that are explicitly tagged with some swagger: mark-up, or should it be implicit, forcing users to explicitly mark types, attributes and methods when they want to exclude something? It seems to be something in the middle now :-(\nAnyway, I sent PR #349 treating error as strings, I'm not sure if it's fine to change the fixture, please let me know what you think.\n. I'm facing this issue one more time, this time intermittently. I didn't investigate it much further, but could swaggerSchemaForType ignore unknown primitives? I mean, apply this patch:\ndiff\ndiff --git a/scan/scanner.go b/scan/scanner.go\nindex d8053c4..9a78197 100644\n--- a/scan/scanner.go\n+++ b/scan/scanner.go\n@@ -408,8 +408,6 @@ func swaggerSchemaForType(typeName string, prop swaggerTypable) error {\n                prop.Typed(\"number\", \"float\")\n        case \"float64\":\n                prop.Typed(\"number\", \"double\")\n-       default:\n-               return fmt.Errorf(\"unknown primitive %q\", typeName)\n        }\n        return nil\n }\n. I've just sent #280.\nAny feedback is appreciated! :-)\n. @casualjim thanks for merging!\n. Hi @supereagle, that's because you haven't recompiled swagger.exe. Please try running go get -u github.com/go-swagger/go-swagger/cmd/swagger.\n. ",
    "abclogin": "\nGenerating a spec for this file will yield: unknown primitive \"actionParam\"\n\nI confirm. I found a similar error: unknown primitive \"MyTypeName\".\nAnd this error is random.\nI traced the error.\nschemaParser.parseIdentProperty() call findSourceFile(), scan/schema.go, line about 690\nfindSourceFile (pkg * loader.PackageInfo, typeName string), scan/schema.go, line about 760\nThis function not found information sometimes.\nI traced next.\nfindSourceFile() called with incorrect pkg parameter sometimes. My package have name \"myPackagePath/errors\". It is similar golang system package name \"errors\". \nSometime findSourceFile called with correct package name \"myPackagePath/errors\" and my correct typeName\nSometime findSourceFile() called with incorrect package name \"errors\" and my correct typeName\nUnder Linux (Ubuntu 14.04, 64-bit) and MacOS X (Yosemite) same. With Go 1.5.2, 1.6 - 64-bit\nUnder Windows 10, 64-bit - no errors. Or it is random? )))\n. I was fool this bug.\nI was rename my package \"myPackagePath/errors\" to \"myPackagePath/apierrors\".\ngo-swagger works fine after.\nProblem is random package names. See my message above.\n. I fool swagger. I moved the code:\n```\ntype BodyParamType struct {\n    A string\n    B int\n}\n// swagger:parameters myOperation\ntype ParamType struct {\n    // in:body\n    InBody BodyParamType\n}\n```\nin separate file.\nSecond file contains:\ntype SomeType struct {\n    Session    *mgo.Session\n    Parameters ParamType\n}\nSwagger works good after that.\n. ",
    "gaplyk": "Faced same issue: \nafter 2 days investigation got  the place where it's failing:\nhttps://github.com/go-swagger/go-swagger/blob/master/scan/schema.go#L745\nbecause \n*ast.InterfaceType not found it this switch. I could not reproduce this error without the code, but in my code it's failing always.\n391\n. In this case I'm getting correct responses with ref to SuccessResponse, but wrong model without Data field:\njson\n{\n   \"SuccessResponse\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"field\": {\n          \"type\": \"string\",\n          \"x-go-name\": \"Field\"\n        }\n      },\n      \"x-go-name\": \"ResponseData\",\n      \"x-go-package\": \"test_scan/responses\"\n    }\n}\nlooks like there are 2 options:\n1. Add body struct\n2. Something new in go-swagger. :)\n. in this case is better to do:\ngo\n// swagger:response NearbySearchResponse\ntype NearbySearchResponse struct {\n   // In: body \n   Body maps.PlacesSearchResponse\n}\nand this structure is not necessary to use in your handler. it should exists just for swagger. \n. When this gonna be merged? I faced same issue today and would like to have this asap :(\n. Yes this fixed my issues. I can do example how to reproduce it on Monday. It is very simple :)\n. And yes looks like this change in scan-package branch will fix same issue but in different way. :)\n. https://github.com/gaplyk/go-swagger-issue\nhere is how to reproduce it\n. I meant scan-package will fix this as well as this PR.\n. @casualjim when you could merge it? :)\n. :+1: \n. @flimzy this is only the part of json file. Could you provide this source code and generated schema somewhere on github? I had similar problem before, afair. . current schema is valid so it is not spec generator issue.. will do tomorrow. Can you provide examples. Will check and do fix tomorrow.. @arekkas working on that. #1057 should fix your issue. There are 2 ways. You can do fake structure and set in:body for the struct you need in the response body, or when you define list of your responses for an endpoint you can do\n200: body:YourStruct. go\n// swagger:model FrontPageData\ntype FrontPageData struct {\n    Matchs []matches.Match `json:\"match,omitempty\"`\n            [...other items...]\n    Seasons []seasons.Season `json:\"seasons,omitempty\"`\n}\nit should work fine. I have half of responses defined this way. Other half with fake structures (they was build before body: implementation). Try to build swagger from source. Looks like you have an old version. I didn't fix this. How urgently do you need this?. this change cause an error in spec generator:\nit generates spec with \"security\": null,. @databus23  please reconsider your approach to fix server generator instead of fixing spec.\nI can't fix spec generator to generate json files without \"security\": null. so do we need to rewrite json.Marshal then? . the problem is when you generate spec from the code and you don't have security on the endpoint level you are getting \"security\": null.\nthis is a problem of json.Marshal then or we have to create custom Marshaller for this type. \nAnd when you try to validate spec you getting \n- paths.<....>.post.security in body must be of type array: \"null\" . it's better to move value from declaration to comments.. ",
    "jerbob92": "Functions with naming conventions sound overly complicated to me, but that might be because I have only used the spec generator from go-swagger. What if we implement a new swagger type?\nMight be something like:\n```\n// swagger:defaultvalue\nvar defaultSortOrder = \"DESC\"\n// swagger:enum\nvar allowedSorts = []string{\n    \"DESC\",\n    \"ASC\",\n}\n```\nWhich results in the following paramater definition:\n// The direction of the sort. Can be \"DESC\" or \"ASC\".\n    //\n    // in: query\n    // default: defaultSortOrder\n    // enum: allowedSorts\n    SortOrder string `json:\"sortorder\"`\nThen it kind of works the same as with route Responses codes/struct mapping.\n. Great, I'll see what I can do tomorrow. Makes it more complicated than my initial plan so I might not get that far.\n. Nah, it's no problem. I rather do it correctly right away.\nI'll report my progress here and maybe someone else can pick up the work when I'm out of time. \n. See my work in progress here:\nhttps://github.com/go-swagger/go-swagger/compare/master...jerbob92:feature/244-245-enums-defaults-for-parameters?expand=1\n. @McSwitch sure! I'm not working on it anymore. ",
    "McSwitch": "@jerbob92 Do you mind if I pickup this issue? May I use the progress you have made thus far?. @casualjim Instead of going the whole nine yards here, could I simply add enum and default options into the swagger:parameters annotation, this will at least give us a starting point to work from?\nUsage\ngo\n// swagger:parameters operation\ntype Example struct {\n    // enum: foo,bar,none\n    // default: bar\n    // in: query\n    Category string `json:\"category\"`\n}\nThis should output the following into the category parameter section:\njson\n            \"type\": \"string\",\n            \"enum\": [\n              \"foo\",\n              \"bar\",\n              \"none\"\n            ],\n            \"default\": \"bar\",\n            \"x-go-name\": \"Category\",\n            \"name\": \"category\",\n            \"in\": \"query\". ",
    "jchenry": "This manifests itself on go1.6rc2\n. ",
    "BlueDragonX": "I'm having the same issue with the static 0.3.0 binary. The generated files which have this error simply doesn't have an import statement for strfmt.\n. Meaning you should go get go-swagger prior to calling swagger generate?\nHow is it that this affects swagger's ability to generate the correct import statement? Other models are generated with the correct imports.\n. Thanks, I appreciate the explanation!\n. ",
    "andregmoeller": "\nagree on all points except the alItems one \nThe since is for all ids since the one provided (so if since is 1 then we want id's 2,3,4 and so on)\n\nRight now, the program code looks like this:\nif since == 0 || since > id {\n    result = append(result, item)\n}\nSo, if since is 3 you would get the ids 1 and 2. You wouldn't get 4, 5, 6 and so on.\nProbably the program code should look like this:\nif since == 0 || id > since {\n    result = append(result, item)\n}\n\nDoes that mean a PR is coming?\n\nYes!\n. ",
    "fdawg4l": "Lets move that discussion here.  If we're going to go with a micro-services architecture, then we'll need a lighter transport than http over tcp.  The first thing that comes to mind is some sort of RPC over unix://.  Maybe http over unix:// a.la. docker.\n. ",
    "sflxn": "The question is whether Swagger wants to be this type of technology or just public APIs for systems, similar to the roles that webservices and EDI played in the past.\n. NegotiateContentType() in negotiate.go.\n. So... you're saying, you're going to add it, right?\n. @casualjim You should reopen this based on our recent conversation.  go-swagger currently ignores octet-stream as a consumes so there is no way for me to generate code that can handle this case.  Adding \"application/octet-stream\" to either global or operation-local has no effect during regeneration.\n. I believe that is the case.  The request I'm making has no body.\n. I tracked down the problem to docker_api.go in the following area:\ndefaultConsumes: \"application/json\",\n    defaultProduces: \"application/json\",\nif those defaults to application/octet-streaming during a generation, it panics.\n. 1) Get VIC sources\n2) $> make dockerapi\n3) run the server\n4) curl -X GET http://.../v1.22/_ping\nAs in the comments above, it depends on what is generated in docker_api.go file.  If the defaults are not application/json, you will get a panic.  From one generation to another, the defaults are changed.  Our swagger specs have numerous mime types for consumers/producers.  How do you chose which mime are defaults?  Is it just random?\n\ncurl -i -X GET -H 'Accept: */*' http://127.0.0.1:49000/_ping\n2016/03/08 09:05:42 http: panic serving 127.0.0.1:32934: runtime error: invalid memory address or nil pointer dereference\ngoroutine 12 [running]:\nnet/http.(*conn).serve.func1(0xc820249580)\n    /usr/local/go/src/net/http/server.go:1389 +0xc1\npanic(0x8e20e0, 0xc82000e140)\n    /usr/local/go/src/runtime/panic.go:426 +0x4e9\ngithub.com/vmware/vic/apiservers/docker/restapi/operations/misc.(*PingOK).WriteResponse(0xc82042aa60, 0x7f790ffd0220, 0xc8203580d0, 0x0, 0x0)\n    /home/loc/work/go/src/github.com/vmware/vic/apiservers/docker/restapi/operations/misc/ping_responses.go:37 +0xd8\ngithub.com/vmware/vic/vendor/github.com/go-swagger/go-swagger/httpkit/middleware.(*Context).Respond(0xc8201d9c40, 0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180, 0xc820329600, 0x1, 0x1, 0xc8202c3260, 0x8e3c00, 0xc82042aa60)\n    /home/loc/work/go/src/github.com/vmware/vic/vendor/github.com/go-swagger/go-swagger/httpkit/middleware/context.go:384 +0x674\ngithub.com/vmware/vic/apiservers/docker/restapi/operations/misc.(*Ping).ServeHTTP(0xc82034a700, 0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180)\n    /home/loc/work/go/src/github.com/vmware/vic/apiservers/docker/restapi/operations/misc/ping.go:52 +0x20b\ngithub.com/vmware/vic/vendor/github.com/go-swagger/go-swagger/httpkit/middleware.newOperationExecutor.func1(0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180)\n    /home/loc/work/go/src/github.com/vmware/vic/vendor/github.com/go-swagger/go-swagger/httpkit/middleware/operation.go:23 +0x6f\nnet/http.HandlerFunc.ServeHTTP(0xc8203295e0, 0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180)\n    /usr/local/go/src/net/http/server.go:1618 +0x3a\ngithub.com/vmware/vic/vendor/github.com/casualjim/curler.New.func1(0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180)\n    /home/loc/work/go/src/github.com/vmware/vic/vendor/github.com/casualjim/curler/curler.go:43 +0xaaa\nnet/http.HandlerFunc.ServeHTTP(0xc820167a70, 0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180)\n    /usr/local/go/src/net/http/server.go:1618 +0x3a\ngithub.com/vmware/vic/vendor/github.com/go-swagger/go-swagger/httpkit/middleware.newRouter.func1(0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180)\n    /home/loc/work/go/src/github.com/vmware/vic/vendor/github.com/go-swagger/go-swagger/httpkit/middleware/router.go:85 +0x663\nnet/http.HandlerFunc.ServeHTTP(0xc82040ddc0, 0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180)\n    /usr/local/go/src/net/http/server.go:1618 +0x3a\ngithub.com/vmware/vic/vendor/github.com/go-swagger/go-swagger/httpkit/middleware.specMiddleware.func1(0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180)\n    /home/loc/work/go/src/github.com/vmware/vic/vendor/github.com/go-swagger/go-swagger/httpkit/middleware/spec.go:36 +0x1d1\nnet/http.HandlerFunc.ServeHTTP(0xc8202a6580, 0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180)\n    /usr/local/go/src/net/http/server.go:1618 +0x3a\nnet/http.serverHandler.ServeHTTP(0xc820248e80, 0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180)\n    /usr/local/go/src/net/http/server.go:2081 +0x19e\nnet/http.(*conn).serve(0xc820249580)\n    /usr/local/go/src/net/http/server.go:1472 +0xf2e\ncreated by net/http.(*Server).Serve\n    /usr/local/go/src/net/http/server.go:2137 +0x44e\n. I think I may know what this is.  I'm trying something.\n. Ok, this isn't a bug.  This is noob Swagger user error.  I forgot to add producer/consumers for the new members in api in configure_api.go.  I tried it, and I'm no longer getting any panics.  You can close this issue.\n. swagger.json.zip\nAttached is a file you can use to test against.  It has one simple POST operation.\nExample Run:\n$> curl -X POST http://127.0.0.1:49000/create\n\"operation .Create has not yet been implemented\"\n\nComments:\nOur handler was reached, which is fine.  However, the params.Config is not nil.  It's the same result we had prior to the change.  What I see when I debug this is that in BindRequest,\nif err := route.Consumer.Consume(r.Body, &body); err != nil {\nThe result is err == nil so the check for required is never performed.\n. Nevermind.  My mistake.  Passing in reserved URL tokens gets passed through.  In query 2 above, it's correct after all.\n. I actually like the idea of adding accessor functions to hide the details.  You can only do so much with basic data types.  It's a pointer or it isn't.  Attributes like optional, required, default, etc are semantics that are very difficult to represent in computer languages.  The only way to do it is to make complex data structures to add those semantics.\nThe only issue I have is that go-swagger has allowed us to access these data types directly up till now, so when the implementation changes, we all have to go through and change our code to use the updated semantics.  Other \"IDL\" technology uses the approach of accessor functions.  I bring up Thrift as an example.  I cannot remember the exact code, but to find out if a data is optional, that information is only available through a function call.\nIf a model was something like,\nImage {\n   ID string\n   name string\n}\nAn example generation could be\nfunc (i _Image) GetIDValue() (_string, optional, required) {}\nI am not advocating that specific signature.  It's just an example.  When Swagger adds more richness to their definition, go-swagger can enrich the data types in the back without affecting users' code.\nYes, it's more tedious to use accessors, but it's the only way to add richness to datatypes in a language (go) that has limited semantics in the datatypes.\n. Another option for the implementation is to use go's fields and reflection.  Again, if users were using accessor functions, the implementation detail would be hidden.\n. Our version predates the go-swagger refactoring.  We're going to upgrade and see if this bug is still an issue.  If it is, I'll reopen a new one.\n. lgtm. TestUniqueOperationNames still runs, but since the name no longer relies on Post.ID, I removed them.  The exist assertions checks for uniqueness in the names for the path /tasks with different methods.\nTestEmptyOperationNames didn't seem valid anymore since the new naming convention doesn't rely on Post.ID (which can be empty) anymore.  Paths are required, and method is also (...hopefully).\n. I do like the idea of pretty names, and there is a solution to keeping them.  However, that solution is too big to implement now.  We can certainly provide a CLI flag to exercise the former naming convention, but that will bring back the code regeneration breakage.  In effect, we would tell users that you can use this flag to use your IDs for pretty names, but then you cannot have code regeneration.\nIf the handler names were protected with a namespace (e.g. an interface), then the regeneration breakage gets solved and people can keep their pretty handler names.  It would really clean up configureAPI() and the generated server code.  I really want this, but it's too big for me to tackle now.\n. To document what this code regeneration breakage looks like in the former naming convention, here is an example.  This is some handwaving, but you will get the idea.\n1. generate a server with the docker spec in the fixture folder\n2. look in configureAPI().  notice handlers with names like create1Container and create5Image.  (that's the handwaving.  recalling from memory.)\n3. delete the models/ and restapi/ folders\n4. regenerate.  This shouldn't touch the server code from gen 1 but will generate new models and operations\n5. Try to rebuild.  It will fail because the new handler names have different unique indices.  For example create10Container and create20Image.  This is a mismatch from the names used in configureAPI() from gen 1.\n. ",
    "RobertJGabriel": "Ah That's perfect :) Up to you man , great work :) I might throw up a pull request :)\n. Also did some work on the https://github.com/yvasiyarov/swagger before, great to see some doing a better job :D \n. ",
    "mex": "Why were the checks in the code below (fx hasInsecure, hasSecure) during this refactor? And anywhere else in the template.\n``\nvar opts struct { {{ if (contains .ExtraSchemes \"unix\") }}\n  SocketPath flags.Filenamelong:\"socket-path\" description:\"the unix socket to listen on\" default:\"/var/run/{{ dasherize .Name }}.sock\"{{ end }}{{ if (hasInsecure .Schemes) }}\n    Host stringlong:\"host\" description:\"the IP to listen on\" default:\"localhost\" env:\"HOST\"Port intlong:\"port\" description:\"the port to listen on for insecure connections, defaults to a random value\" env:\"PORT\"`{{ end }}{{ if (hasSecure .Schemes) }}\nTLSHost           string         `long:\"tls-host\" description:\"the IP to listen on for tls, when not specified it's the same as --host\" env:\"TLS_HOST\"`\nTLSPort           int            `long:\"tls-port\" description:\"the port to listen on for secure connections, defaults to a random value\" env:\"TLS_PORT\"`\nTLSCertificate    flags.Filename `long:\"tls-certificate\" description:\"the certificate to use for secure connections\" required:\"true\" env:\"TLS_CERTIFICATE\"`\nTLSCertificateKey flags.Filename `long:\"tls-key\" description:\"the private key to use for secure conections\" required:\"true\" env:\"TLS_PRIVATE_KEY\"` {{ end }}\n\n}\n```\nFrom https://github.com/go-swagger/go-swagger/blob/9562a0d590791d7d1db4c05798541273bc467271/generator/templates/server/main.gotmpl#L23-L32 to https://github.com/go-swagger/go-swagger/blob/b05016969860b299a3fbe8cc770ae4fed7819171/generator/templates/server/server.gotmpl#L31-L44\n. As far as I can see, it's fixed. Thank you.\n. ",
    "hixichen": "I have same question. \nIs there any feedback now?. you need api.TxtProducer = runtime.TextProducer()\ntry: \nyaml\nproduces:\n        - text/plain\nwithout charset=utf-8\n. same issue:\n runtime.Authorizer is not defined.\nmodified the runtime version, but doesnot work. \nswagger version: 0.13. fixed:\nupdate pckage:\ngo-openapi/runtime\ngo-openapi/analysis\ngo-openapi/spec\n. @gangtao\nI would suggest you check the version of \"go-openapi/runtime\". ",
    "frosenberg": "I think I'm still seeing this issue too. I have the following swagger.json:\n``\n/items/{id}:   \n    get:\n      summary: Get the iteam as application/zip\n      description: |\n        Downloads a item as zip file.\n      produces:\n        - application/octet-stream\n      parameters:\n        - name: id\n          description: Theid` of the item.\n          in: path\n          required: true\n          type: string\n          format: string\n  responses:\n    200:\n      description: Successfully retrieved the zip file\n      schema:\n        type: string\n        format: binary\n\n```\nOn the client I'm always seeing the following error:\nno consumer: \"application/octet-stream\"\nIf I change the content type to application/zip, I'm seeing the same error with the respective content type. I'm on the latest git master@head.\n. Is there a working example somewhere?\n. I hacked the following statement into my client and it seems to work now:\ngo\n// [...]\ntransport := client.New(host, path, schemes)\n// FIXME this should not be there and a bug in go-swagger - without this the zip download fails\ntransport.Consumers[\"application/octet-stream\"] = runtime.ByteStreamConsumer()\nreturn restClient.New(transport, strfmt.Default), nil\nIt looks to me the following part in swagger.yml\nproduces:\n        - application/octet-stream\nis ignored in the client generation?\n. I have the same problem right now. I would like the middleware to inject some value in the context that I can later re-use in my actual http handlers. Any way to do this?\n. Thanks for your fast response. I see that the context object you are using is from github.com/gorilla/context. I was actually looking at the golang.org/x/net/context one b/c that is what I have available in my handler (I called swagger generate with --with-context). I'm not sure these two contexts are compatible... \n. @ontucker thanks anyway, so I learned about the gorilla context :).\n@casualjim yeah that might work too. What were the problem you ran into? I would really like to see net.context available in handlers any time soon :)\n. Forgot version info:\nswagger version\n0.5.0-90-g5fa6e58\n. I tried using string and format binary. Why do I get an io.Writer as a result on the client?\n. I'm not sure I follow. Maybe you have a sample of can point me to the code.\n. @casualjim has the fix gone into master yet? \n. Works for me! Thanks\n. I don't think the client code seems to be correctly generated. I see a io.Writer on the client side.\n. I see the same thing after updating to the latest go-swagger. My principle is a custom struct too. \n. @aocole what I did was to declare the headers I needed as optional parameters at the top level like this:\n```\nOptional header parameters\nparameters:\n  DlaasGroup:\n      name: X-DLaaS-Roles\n      description: Roles of a user\n      type: string\n      in: header\n      required: false\n```\nThen in my resources I just reference them:\npaths:\n  /tickets:\n    parameters:\n      - $ref: '#/parameters/DlaasGroup'\n    post:\n      summary: ...\n      description: ...\nThis way the client and server have explicit methods to set/get them. Not ideal but it works. Since the header are coming from our proxy the client wont need to set them and I would have preferred to handle transparently for the user but that is an OK solution for now. @casualjim's fix looks like it should do exactly what I need but I have not had time to look at it.\n. Thanks for the quite reply. Not yet, but I guess the time has come.\n. Thanks that fixes it. \n. Awesome, i'll look into this. Always appreciate your fast response :).. This resolved my problem and this issue can be closed. . Sorry I cannot follow. swagger generate generates code for me that does not compile. I don't see how the callback helps me.. Thanks!. ",
    "stoyanr": "The issue is no longer reproducible with the newest generator, built from source. Thanks a lot for fixing it!\n. Thanks, this works perfectly! Sorry, I didn't know about this argument, as I didn't find it in the documentation. Only now I thought about running swagger generate client --help and saw the various options available there.\n. ",
    "normana400": "This validation causes false positives and the issue should be reopened.\nIn our case, we use urls with hashtags as a way to make our level 0 system apis have unique endpoints and thus become swagger compatible. \nexample paths:\n\nour.rest/endpoint#Action1\nour.rest/endpoint#Action2\n\nthe go swagger validation treats these as validation errors: \n- paths.#Action1 in body is a forbidden property\n- paths.#Action2 in body is a forbidden property\nthese aren't references to schema. The actual value of the path has a valid html symbol \"#\" in it. The go-swagger validation needs to be updated to flag schema reference matches by just matching \"#\" values in a property value.\nswagger codegen does not have an issue with this\n. here's a sample. Again, this wouldn't be how you'd define the API from scratch, but this is a tool to describe an RPC level 0 endpoint in swagger. The fragments aren't actually used as we have an internal preexisting way to route the action. They fragments just make every path unique (which is a requirement for swagger). Swagger allows the use of a defined operationId parameter, but every path must be a unique path.\njson\n{\n  \"swagger\" : \"2.0\",\n  \"info\" : {\n...\n  },\n  \"host\" : \"myhost.net\",\n  \"basePath\" : \"/api/myrpcendpoint\",\n  \"schemes\" : [ \"https\" ],\n  \"consumes\" : [ \"application/json\" ],\n  \"produces\" : [ \"application/json\" ],\n  \"paths\" : {\n    \"#GetAcct\" : {\n      \"post\" : {\n        \"summary\" : \"get_acc\",\n        \"operationId\" : \"GetAcct\",\n        \"parameters\" : [ {\n          \"name\" : \"body\",\n          \"in\" : \"body\",\n          \"required\" : \"true\",\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/GetAcct\"\n          }\n        } ],\n        \"tags\" : [ \"GetAcct\" ],\n        \"responses\" : {\n          \"default\" : {\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/GetAcctResponse\"\n            }\n          }\n        }\n      }\n    },\n    \"#CalcCredit\" : {\n      \"post\" : {\n...\n    },\n    \"#GetPaypal\" : {\n      \"post\" : {\n...\n}\n... we've instructed our client to use swagger-codegen and it works in that environment as is. We have clients that use swagger for many different languages so thats really our recommended platform.\nThat said, your option would probably work as a workaround for a small system. In our case its a 500+ api system and that change would have a pretty significant impact. (and again this works as is in swagger codegen) . ",
    "jakedsouza": "I'm a little concerned with the amount of changes that occurred after running ./hack/regen-samples.sh \n. Facing the same issue for DELETE requests with no Payload\nyml\n delete:\n      description: \"kill foo \"\n      operationId: kill\n      tags:\n        - foos\n      responses:\n        '204':\n          $ref: \"#/responses/noContentResponse\"\n        '404':\n          description: foo not found\n          schema:\n            $ref: \"#/definitions/error\"\n        '412':\n          description: foo is in a state not for deletion\n          schema:\n            $ref: \"#/definitions/error\"\n        default:\n          $ref: \"#/responses/errorResponse\"```\n. ",
    "jzt": "Forgot the schema!\n. ",
    "vburenin": "It was just a copy/paste error I made that caused crash during the generation process. So, I wanted to point out that there is a place go-swagger panics.\n. The problem is in parameter.gotmpl template, line 89 and 93.\ngotmpl\n// New{{ pascalize .Name }}Params creates a new {{ pascalize .Name }}Params object\n// with the default values initialized.\nfunc New{{ pascalize .Name }}Params() {{ pascalize .Name }}Params {\n  var (\n  {{ range .Params }}{{ if .Default }}{{ if not .IsFileParam }}{{ camelize .Name}}Default {{ .GoType }} = {{ if .IsPrimitive}}{{.GoType}}({{ end}}{{ printf \"%#v\" .Default }}{{ if .IsPrimitive }}){{ end }}\n  {{ end }}{{ end }}{{end}}\n  )\n  return {{ pascalize .Name }}Params{ {{ range .Params }}{{ if .Default }}\n    {{ pascalize .Name}}: {{ if and (not .IsArray) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) .IsNullable }}&{{ end }}{{ camelize .Name }}Default,\n  {{ end }}{{ end }} }\n}\nBecause of the .Default value is the interface{}, \"false\" is resolved to \"false\", so condition is not satisfied.\n. This explanation should definitely go to the first/landing page.\n. Both?\n. yes, it fixes it. However, one thing I don't like it is a configuration options for HTTPS. I am forced to add them into different group of CLI parameters, which means --ca-cert option is teared apart from private key and cert config.\n. I think, it is true if a value can get in to the range of a zero value. Otherwise, a zero value can be used as \"nil/null\".  For a \"required validation error message\" it can say \"value is required and can not be nil or zero/empty\".\n. Here is a solution pull request that satisfies default behavior as well as user defined behavior: https://github.com/go-swagger/go-swagger/pull/459\n. I think there many opinions around this, I also tend to agree with Ivan. So, the same day I added an ability to enforce pointer/non-pointer value for required properties using x-nullable:true/false.\n. @dolmen You now can instruct swagger using x-nullable: false/true to generate a value or a pointer, it is totally up to. I am with you since I understand the problem, but I am also with Ivan since there some cases when such behavior is not desired. So, the best approach to me will be the usage of x-nullable where you wish to have a specific behavior.\n. Closing as it is no longer the case.\n. Hm, it is done using: operationId .\n. Fixed in https://github.com/go-swagger/go-swagger/pull/473\n. lgtm\n. This sounds spooky to me. If I need something like that, I would handle it by my self adding additional properties to the patch object.\n. I like companion field proposition, but it shouldn't be generated by default. It might be better just to add a flag x-go-nil-flag: true that could instruct generator to generato companion like this:\nMyValue *int64\nMyValueIsNil bool\n. I definitely need methods:\nIsDescriptionNil\nIsDescriptionNotNil\nIsDescriptionSet\nIsDescriptionNotSet\nHasDescriptionValue -> IsDescriptionSet && IsDescriptionNotNil\n. It works on my side just fine:\n```\n\u279c  dq git:(master) \u2717 tail -n 15 swagger.yml\n        default:\n          $ref: \"#/responses/error_response\"\n/users:\n    get:\n      responses:\n        200:\n          description: Successfully retrieve list of users\n          examples:\n            application/json:\n              data:\n              - name: User1\n                email: user1@mail.me\n              - name: User2\n                email: user2@mail.me\n\u279c  dq git:(master) \u2717 swagger validate swagger.yml\nThe swagger spec at \"swagger.yml\" is valid against swagger specification 2.0\n```\nDid you build swagger from source code?\n. Just use quotes as 'y', it should solve the problem.\n. Could you please check my changes? I am not really confident I've done it as it should be.\n. Did you update all dependencies? This thing is defined in github.com/go-openapi/loads, I guess that is why.\n. does it work now?\nOn Tue, May 3, 2016 at 7:53 AM, Ben Firshman notifications@github.com\nwrote:\n\nYep - go-openapi/loads doesn't seem to have a OrigSpec field on Document.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/go-swagger/go-swagger/pull/503#issuecomment-216553948\n. just set x-nullable: true and you are good to go.\n. It is already in! Yay!\n. https://github.com/go-swagger/go-swagger/pull/529\n. You are running very old version of go-swagger, please consider updating it. Most of those packages that you see are moved to go-openapi relatively long time ago.\n. Just install swagger from sources: go get -u github.com/go-swagger/go-swagger/cmd/swagger\n\nanyway, you will still need to pull all dependencies.\n. your binary is installed into GOBIN. So, just add appropriate path into your PATH.\n. It works just fine for me. I guess you have some locale specific troubles.\n~/tttttt \u00bb swagger init spec \\\n  --title \"A To Do list application\" \\\n  --description \"The product of a tutorial on goswagger.io\" \\\n  --version 1.0.0 \\\n  --scheme http \\\n  --consumes application/io.goswagger.examples.todo-list.v1+json \\\n  --produces application/io.goswagger.examples.todo-list.v1+json\n2016/06/21 14:30:19 creating specification document in Users/vlad/tttttt/swagger.yml\n~/tttttt \u00bb swagger validate swagger.yml\nThe swagger spec at \"swagger.yml\" is valid against swagger specification 2.0\n~/tttttt \u00bb cat swagger.yml\nconsumes:\n- application/io.goswagger.examples.todo-list.v1+json\ndefinitions: {}\ninfo:\n  description: The product of a tutorial on goswagger.io\n  title: A To Do list application\n  version: 1.0.0\npaths: {}\nproduces:\n- application/io.goswagger.examples.todo-list.v1+json\nschemes:\n- http\nswagger: \"2.0\"\nIt also would be good if you post a plain text code instead of screenshots.\n. I haven't invest any time into this yet. Maybe soon.\n. Using --force-schema should override whatever default is.\n--force-schema=http -> [\"http\"]\n--force-schema=https -> [\"https\"]\n--force-schema=http --force-schema=https -> [\"http\", \"https\"]\nI am also thinking that server should not really have a different code to run HTTP and HTTPS server, both modes should be optional for any schema definitions.\nLet say:\n--http - enables HTTP\n--https - enables HTTPS requiring TLS key/cert/ca.\n@casualjim Do you have any opinion around it?\n.  Implemented in https://github.com/go-swagger/go-swagger/pull/612\nPanic! It should break all scripts that are running a swagger application.\n. I want to be in the control where and how I listen to client connections as\nwell as what is in the spec shemes list independently.\n. This is a problematic part here. If value is a required property, the only\nthing you can do is to have a pointer.\nI really understand your problem, I went through this suffering too. It\nbroke many things on my side as well, but it is not as critical as it could\nbe. It just took 2 hours for me to update all projects to handle this\nchange gracefully.\nYes, access values like *v - looks very ugly, but this is necessary evil to\nmake things right.\nAlso, this change will be very helpful when swagger switch over to the\nbitset for indication if the value is nil and set. You practically will\njust need to change v == nil to v.IsNil()\nOn Fri, Sep 2, 2016 at 3:29 AM, Alexander Krasnukhin \nnotifications@github.com wrote:\n\n@casualjim https://github.com/casualjim no, x-nullable doesn't help as\nif, say, int64 field is set to 0 then server code still treats it as a\nmissing one. Sure, this happens before 0 value is the zero value for int64\ntype.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/go-swagger/go-swagger/issues/651#issuecomment-244340734,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEJjqw4xXHPj_XbERNtM5k77li9d8aEXks5ql_qTgaJpZM4Jy_Cl\n.\n. LGTM\n\n\n. Sure, it is possible.  There is a function in your generated code that is named as configureFlags.\nIt is being called each time server starts. You can update it appropriately.\nHere is an example for you:\nGo\nfunc configureFlags(api *operations.MyAPI) {\n    param1 := swag.CommandLineOptionsGroup{\n        ShortDescription: \"Additional configuration parameters\",\n        Options:          ConfigParams,\n    }\n    api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{param1}\n}\n. Reopening since it is a useful question/answer for others.\n. @GlenDC generator/bindata.go is always a pain to merge if template is changed.. @GlenDC yah, @casualjim is sick, hopefully he get well soon.. @casualjim Are you around?. anyway, this should be handled by spec validation or generated code should be correct.. Is there any particular reason to initialize it like this?\n. This might make sense to specify a capacity since it is already known.\n. Do we need this commented code?\n. it is not possible to return an error here which causes compilation error.\n. I would just stop process everything, even fatal log message would be enough, since the overall situation is just not normal. I had a hard time trying to figure why my server template has disappeared ;)\n. done\n. ValidationErrorCode?\n. Does it even make sense to have these codes? It feels like an overkill.\n. Does it make sense to include unit tests for the vendored code?\n. In my opinion it is more interesting to know which parameters caused an error, validation constraints, and the expected type. Specific validation criteria that failed validation doesn't make a lot of sense, since I would just display a specific set of conditions for the user that needs to be taken into account rather than pointing what is exactly wrong. I am not saying it is all wrong, I just pointing it is an overkill for me.\n. What's the purpose of this line?. ",
    "easeway": "here's the piece:\nyaml\ndefinitions:\n Resource:\n    description: A resource\n    discriminator: resourceType\n    properties:\n      resourceType:\n        type: string\n        description: discriminating type of the resource\n      name:\n        type: string\n        description: name of the resource\n    required:\n      - resourceType\n      - name\n. It's unreasonable to put omitempty for all required properties. In the json generated from the model, all these properties get lost with zero values which are valid values.\n. Related, but I would not say \"duplicated\". Because #300 is the opposite (required fields are pointers). In my situation, the fields generated are not pointers. I feel #300 should be fixed, this bug is related to validation logic, not duplicate of #300\n. Similarly, the generated UnmarshalJSON is also wrong.\n. Unmarshal is not fixed\n. ",
    "supereagle": "The commit ea284b6 causes the example \"fixtures/goparsing/petstore\" can not generate the swagger spec.\nUnder the folder \"fixtures/goparsing/petstore/petstore-fixture\", run the command: swagger.exe  generate spec -o ./swagger.json. It reports the error: unknown primitive \"error\".\nAfter I revert the commit ea284b6, the generate spec command can correctly work.\n@fsouza  I'm a fresher on go-swagger. Could you help to have a look at this problem? Thanks.\n. @fsouza  Thanks for your help. \n. ",
    "hannson": "We're using both JSON and XML. \nI like this approach rather than creating type StuffThings []StuffThingor something like that when wrapped=true. \ntype Stuff struct {\n    XMLName xml.Name `json:\"-\" xml:\"http://www.sap.com/lmsl/slp tuple\"`\n    Name string `json:\"name\" \n    StuffThings []StuffThing `json:\"stuffThings,omitempty\"    xml:\"StuffThings>StuffThing,omitempty\"` \n}\n. The errors.NotImplemented(\"api key auth (api_key) token from query has not yet been implemented\") is also a bit misleading. I was using ?api_key=asdfasdf instead of ?token=asdfasdf.\n. ",
    "pytlesk4": "thanks!  that hurt my head!\n. Testing 1.5 now, strange error though.\n. \n. Would love to see this happen, and help out where I can.  We use go-swagger currently at http://stoplight.io/, and when I was evaluating it, I almost passed it up because we were looking for a way to just parse and load a swagger file.\nIf everything were to be broken up into libraries, I feel like it would be a lot more approachable.  Go-Swagger can do a lot of cool things, and navigating the source code was daunting.  One day Stoplight might do code generation, for apis, but because we don't need that now I almost passed on this awesome project.  I have submitted a few pull requests to fix some issues in the spec package, and even though all the tests were passing in the spec package, my changes broke some tests in another packaged that I knew nothing about, and had to fix.\nThat is all for now.\n. \n. I was going to push a fix for expand response, I don't know if it will cover this issue though, I can try resolving this spec.. The issue with the provided spec is that the schema ref is pointing at a response object.\n...\nschema:\n           $ref: '#/responses/blah'\n...\nShould be\n...\nschema:\n           $ref: '#/definitions/error'\n...\nSpecifically this part as one example: https://github.com/go-gitea/gitea/blob/master/public/swagger.v1.json#L654-L659. ",
    "phedoreanu": "What do you say if we add swagger-ui as git submodule, include this middleware in your binary and update the docs?\n. It would be nice to serve swagger-ui in a more user-friendly way. \nAlso, for better compatibility with the Docker go-wrapper command, can main.go be moved in the root $projectFolder i.e. test/test-api/main.go from test/test-api/cmd/test-server/main.go?\nDocker build errors: \n- can't load package: package test/test-api: no buildable Go source files in /go/src/test/test-api\n- can't load package: package test/test-api/cmd/test-server: no buildable Go source files in /go/src/test/test-api/cmd/test-server\nAnother cool thing to have would be database schema/migrations auto-gen. Something like slick-codegen.\n. \ud83d\udc4d \n. ",
    "joeblew99": "awesome stuff. \n@casualjim Could you let me know the status.\nI noticed the architecture is staying very close to the golang way. For example using .gotmpl, etc.\nHere my tasks list:\nDevelopers UI\n- Would be great to use golang templates to run it. Prefer not to pollute with other stuff, just lean and easy to refactor as needs change.\nProxy JS\n- Golang based generators for the Javascript\n- Try out use fetch API, as its the react approach and has full polyfil now for all browser too.\n. Thanks. I will test it to be sure.\n. ok that fixed it.\nall the build errors are gone\nI use gvt for vendoring and had to just bring in 2 or 3 libs from the openAPI account:\nhttps://github.com/go-openapi/\nBut i have one line that will not compile and not sure if its your code or a lib:\nFrom /cmd/todo-list-server:\n```\nx-MacBook-Pro:todo-list-server apple$ go build\ngithub.com/test/go-gedw99/go-service/restapi/operations/todos\n../../restapi/operations/todos/get_parameters.go:49: undefined: middleware in middleware.MatchedRoute\n```\n. no its not that. gvt already brought it in via the \ngvt fetch  github.com/go-openapi/runtime\nStill hunting for what it might be.\n. I got the todo-list  & task-tracker working off yml and json files.\nBTW i used a generic YAML --> JSON tool to make JSON and it works perfectly.\nIt also can convert the other way. Might be useful for you , because you can automate it in the core CI / testing if you want.\nI know why it did not work.\ni was calling the gen and build scripts i had written from too deep down.\nOnce i just copied the swagger.json, and ran the scripts it all worked perfectly.\nNice work !!\n. http://127.0.0.1:3000/swagger.json works, returning the json file.\nhttp://127.0.0.1:3000 returns the same error message of:\n{\"code\":404,\"message\":\"path / was not found\"}\n. How to enable cors ? That's the likely culprit.\nI could not fing it anywhere\nOn Fri, 27 May 2016, 16:40 Ivan Porto Carrero, notifications@github.com\nwrote:\n\nI don't quite understand the problem yet.The error message comes when you\ntry to call the petstore api or when you try to load the swagger ui?\nYou're using the swagger ui docker container?\nDid you add a CORS middleware to your swagger server?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/go-swagger/go-swagger/issues/542#issuecomment-222164145,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/ALcac5Gq6oW_Il50CkUp4csJHG8Yxcemks5qFwJwgaJpZM4IojE7\n.\n. \n",
    "ontucker": "I'm interested in this as well, since I'm currently trying to figure out a good way to access the TLS client info from inside a handler func.  I figure I can do some middleware trickery to get at the http.Request but I'm curious if I'm overlooking some more straightforward way to plumb it down into the handler.\n. I'm still getting used to how things in go-swagger are organized, but my desire is to have the API implementation live in an entirely different module so that I don't have to edit any of the files that live amongst the generated code.  I am currently modifying configure_xxx.go to just do a one-line call out to a server which exports a .ConfigureAPI method and then implements all the XYZHandlerFuncs itself and hooks them to 'api'.  However, it might be cleaner if the generated API defined an interface that contains all the handlers I need to provide and I could just pass something which implements that into operations.NewXXXAPI from main.\n. This turned out to be me flubbing the path to the root cert file, so it's working now.  Regarding the server, I've worked around it temporarily by modifying my XyzHandler to pass the http.Request in along with the XyzParams:\ntype GetTestHandlerFunc func(GetTestParams, *http.Request) middleware.Responder\nThis lets the handler grab the TLS context and examine the certs to do client validation.\nI'm not too enthused about this solution but it is working at the moment.  Perhaps I'll think of something better.  I could also do the client validation in some middleware but I need a way for middleware to set some app-specific context that the method handlers can see, because ultimately I want my method handlers to make some decisions based on the client's certificate.  If you have any suggestions I'm all ears.\n. This has veered off from having anything to do with custom root certs, of course.  It looks like some of the recent changes address the ability to see the TLS context in the request handlers, but I'm not sure 53c4f85 is the one I'd cite.  I have yet to try it out, but I saw a change go by that allowed access to the http.Request in the handlers, which would be perfect, as not only does it enable looking at the connection directly in the handlers, but it also allows one to use something like gorilla/context to pass arbitrary info between middleware and handlers.\n. I'm going to go ahead and close this even though I haven't tried it out.  If it doesn't work when I finally do, a new bug will make more sense anyway.\n. I commented about this on another issue but I'm not sure if you saw it, so I'll repeat it here.  What I'd really like to see is a structure of generated code that allows it to stay as a completely standalone module that requires no editing of the files within.  I have taken to simply ignoring most of the generated main(), configure_xyz.go, and server.go code and duplicating their functionality in external modules in order to avoid the mess that occurs when I regenerate from the spec and the structure of files I've edited has changed (regarding edits due to go-swagger changes, not necessarily due to changes to my spec).  It's much easier to regenerate from the spec and then diff that entire tree with the knowledge that I'm only looking at differences in generated code, not adding in the complications of my hand-edits.\nSo my recommendation is that the entire cmd directory, as well as configure_xyz.go and server.go be factored out into a separate \"example\" directory to indicate how you could use the generated code, but with the expectation that people are actually going to integrate the generated code into a codebase that doesn't necessarily follow that structure.\n. Oh, yeah, I meant to throw in a comment to the effect that \"this may not be specifically relevant to this issue, but so long as you're reorganizing things I want to mention it so you have it in mind while moving things around.\"  :)  Thanks.\n. Here's an example of middleware setting a \"clientCert\" value in the context to pass the client TLS certificate along to the handlers.\n```\n// SetupMiddlewares - configure the higher-level middleware\nfunc (s MyServer) SetupMiddlewares(handler http.Handler) http.Handler {\n    ourFunc := func(w http.ResponseWriter, r http.Request) {\n    if r.TLS != nil && len(r.TLS.PeerCertificates) > 0 {\n        context.Set(r, \"clientCert\", r.TLS.PeerCertificates[0])\n    }\n\n    handler.ServeHTTP(w, r)\n}\nreturn http.HandlerFunc(ourFunc)\n\n}\n```\nAnd in the handler, you can get the cert like this (since you have the HTTP.Request object):\nclientCertIntf, ok := context.GetOk(req, \"clientCert\")\n    if !ok {\n        fmt.Printf(\"This request has no client cert.\\n\")\n        return nil\n    }\n    clientCert, ok := clientCertIntf.(*x509.Certificate)\n    if !ok {\n        return nil\n    }\n. Ah, sorry, I missed that.  Never mind. :)\n. Just moving c.api.DefaultProduces() to the end of the offers array in Respond() (making it a fallback in case of non-matching) produces the result that seems correct to me, although it still doesn't address the issue of making a method which doesn't produce the default content-type.\n. ",
    "AnsonT": "I started putting operation implementations under restapi/implementations. It would be great if configure_***.go file automatically binds to implementations.xxx methods when models are updated. The generator can add stub implementation if the implementation files do not exist, but leave existing ones in place.. ",
    "gregmarr": "Yeah, that would work perfectly for my server, which uses the pattern:\napi.<name>Handler = operations.<name>HandlerFunc(routes.<name>)\n\nI also customize setupGlobalMiddleware and I think api.AccessCodeAuth.\nWhat might also be useful if rewriting is too complicated, is if configure_<service>.go already exists, we write out configure_<service>.example instead, so we can manually compare the two files.\n. How very topical.  I'm just starting to look at this myself.\n. This looks promising:\n// Spec creates a middleware to serve a swagger spec.\n// This allows for altering the spec before starting the http listener.\n// This can be useful if you want to serve the swagger spec from another path than /swagger.json\n//\nfunc Spec(basePath string, b []byte, next http.Handler) http.Handler {. So this function is called by \n// APIHandler returns a handler to serve the API, this includes a swagger spec, router and the contract defined in the swagger spec\nfunc (c *Context) APIHandler(builder Builder) http.Handler {\n...\n    return Spec(\"\", c.spec.Raw(), Redoc(redocOpts, c.RoutesHandler(builder)))\n}\nand that is called by\n```\nfunc (o *API) Serve(builder middleware.Builder) http.Handler {\n    o.Init()\nif o.Middleware != nil {\n    return o.Middleware(builder)\n}\nreturn o.context.APIHandler(builder)\n\n}\n```\nSo maybe the path could be added to the Context object.\n. Yes, I wasn't thinking for post-generate editing, just strategy for implementation.. I did like @njsrikar did and added the Spec call through setupGlobalMiddleware after saving the base path in main.\nThe convention doesn't work for me because my API is behind an API gateway, where there is a path assigned to my service, and the root of my service is not accessible.  For ease of using a single Swagger file to both provision the gateway and drive go-swagger, that base path is used in the swagger file and thus in my generated routes.. I think if you start with github.com/go-openapi/validate it gets the rest of the ones that you need.\n. I remember talking to @casualjim about this, and if I remember correctly, he was surprised that go-openapi/runtime didn't pull in go-openapi/validate.. In my case, I could also work around it like this:\nBar:\n  allOf:\n    - $ref: \"#/definitions/Foo\"\n    - type: object\n@casualjim This is the thing that we talked about on Slack last week that I hadn't had time to log yet.\n. value.go\n```go\npackage models\n// This file was generated by the swagger tool.\n// Editing this file might prove futile when you re-run the swagger generate command\nimport (\n    \"bytes\"\n    \"io\"\n    \"io/ioutil\"\n\"github.com/go-openapi/errors\"\n\"github.com/go-openapi/runtime\"\n\"github.com/go-openapi/validate\"\n\n)\n// Value value\n// swagger:discriminator Value ValueType\ntype Value interface {\n    runtime.Validatable\n// value type\n// Required: true\nValueType() string\nSetValueType(string)\n\n}\n// UnmarshalValueSlice unmarshals polymorphic slices of Value\nfunc UnmarshalValueSlice(reader io.Reader, consumer runtime.Consumer) ([]Value, error) {\n    var elements [][]byte\n    if err := consumer.Consume(reader, &elements); err != nil {\n        return nil, err\n    }\nvar result []Value\nfor _, element := range elements {\n    obj, err := unmarshalValue(element, consumer)\n    if err != nil {\n        return nil, err\n    }\n    result = append(result, obj)\n}\nreturn result, nil\n\n}\n// UnmarshalValue unmarshals polymorphic Value\nfunc UnmarshalValue(reader io.Reader, consumer runtime.Consumer) (Value, error) {\n    // we need to read this twice, so first into a buffer\n    data, err := ioutil.ReadAll(reader)\n    if err != nil {\n        return nil, err\n    }\n    return unmarshalValue(data, consumer)\n}\nfunc unmarshalValue(data []byte, consumer runtime.Consumer) (Value, error) {\n    buf := bytes.NewBuffer(data)\n    buf2 := bytes.NewBuffer(data)\n// the first time this is read is to fetch the value of the ValueType property.\nvar getType struct {\n    ValueType string `json:\"ValueType\"`\n}\nif err := consumer.Consume(buf, &getType); err != nil {\n    return nil, err\n}\n\nif err := validate.RequiredString(\"ValueType\", \"body\", getType.ValueType); err != nil {\n    return nil, err\n}\n\n// The value of ValueType is used to determine which type to create and unmarshal the data into\nswitch getType.ValueType {\ncase \"ValueArray\":\n    var result ValueArray\n    if err := consumer.Consume(buf2, &result); err != nil {\n        return nil, err\n    }\n    return &result, nil\n\n}\nreturn nil, errors.New(422, \"invalid ValueType value: %q\", getType.ValueType)\n\n}\n. value_array.go (all these blank lines are really there)go\npackage models\n// This file was generated by the swagger tool.\n// Editing this file might prove futile when you re-run the swagger generate command\nimport (\n  strfmt \"github.com/go-openapi/strfmt\"\n\"github.com/go-openapi/errors\"\n  \"github.com/go-openapi/runtime\"\n  \"github.com/go-openapi/validate\"\n)\n// ValueArray value array\n// swagger:model ValueArray\ntype ValueArray struct {\nvaluesField []Value\n}\nfunc (m ValueArray) ValueType() string{\n  return \"ValueArray\"\n}\nfunc (m ValueArray) SetValueType(val string) {\n}\nfunc (m ValueArray) Values() []Value{\n  return m.valuesField\n}\nfunc (m ValueArray) SetValues(val []Value) {\n  m.valuesField = val\n}\n// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure\nfunc (m *ValueArray) UnmarshalJSON(raw []byte) error {\n  var data struct {\nValueType string json:\"ValueType\"\nValues []Value json:\"Values\"\n}\nbuf := bytes.NewBuffer(raw)\n  dec := json.NewDecoder(buf)\n  dec.UseNumber()\nif err := dec.Decode(&data); err != nil {\n    return err\n  }\nallOf0Values, err := Unmarshal[]Value(bytes.NewBuffer(raw), runtime.JSONConsumer())\n  if err != nil {\n    return err\n  }\nvar result ValueArray\n  result.valuesField = allOf0Values\n  *m = result\n  return nil\n}\n// MarshalJSON marshals this object with a polymorphic type to a JSON structure\nfunc (m ValueArray) MarshalJSON() ([]byte, error) { \n    var b1, b2 []byte\n    var err error\n    b1, err = json.Marshal(struct {\nValueType string json:\"ValueType\"\nValues []Value json:\"Values\"\n}{\n})\n    if err != nil {\n        return nil, err\n    }\n    b2, err = json.Marshal(struct{ \n    Values []Value json:\"Values\"\n  }{ \n    Values: m.valuesField,\n  })\n    if err != nil {\n        return nil, err\n    }\n    return swag.ConcatJSON(b1, b2), nil\n}\n// Validate validates this value array\nfunc (m *ValueArray) Validate(formats strfmt.Registry) error {\n  var res []error\nif err := m.validateValues(formats); err != nil {\n  res = append(res, err)\n}\n\nif len(res) > 0 {\n    return errors.CompositeValidationError(res...)\n  }\n  return nil\n}\nfunc (m *ValueArray) validateValues(formats strfmt.Registry) error {\nif err := validate.Required(\"Values\", \"body\", m.Values); err != nil {\n  return err\n}\nfor i := 0; i < len(m.Values); i++ {\nif err := m.Values[i].Validate(formats); err != nil {\n  return err\n}\n}\nreturn nil\n}\n. This is line 93, where the first error is located:\n  allOf0Values, err := Unmarshal[]Value(bytes.NewBuffer(raw), runtime.JSONConsumer())\n. Here's how I fixed the generation:\ntemplate_repo.go\n    \"arrayToSlice\": func(str string) string {\n        strlen := len(str)\n        if strlen > 2 && str[0:2] == \"[]\" {\n            return str[2:] + \"Slice\"\n        }\n        return str\n    },\ntupleserializer.gotmpl 117\n  {{ range .AllOf }}{{ if .IsAnonymous }}{{ range $idx, $val := .Properties }}{{ if .IsBaseType }}allOf{{ $idx }}{{ pascalize $val.Name }}, err := Unmarshal{{ arrayToSlice $val.GoType }}(bytes.NewBuffer(raw), runtime.JSONConsumer())\n```\nWas: Unmarshal{{ $val.GoType }}(bytes.\nNow: Unmarshal{{ arrayToSlice $val.GoType }}(bytes.\nI haven't tested this with the full schema yet.\n. Next issue, when I try to use it:\n```\nfunc (m *PortValueArray) validateValues(formats strfmt.Registry) error {\n    if err := validate.Required(\"Values\", \"body\", m.Values); err != nil {\n        return err\n    }\nfor i := 0; i < len(m.Values); i++ {\n    if err := m.Values[i].Validate(formats); err != nil {\n        if ve, ok := err.(*errors.Validation); ok {\n            return ve.ValidateName(\"Values\" + \".\" + strconv.Itoa(i))\n        }\n        return err\n    }\n}\nreturn nil\n\n}\n```\nThe error is that m.Values is a function.  This needs to be either m.valuesField or m.Values().\n. Actually, it looks like the problem is that the type is generated as:\ntype ValueArray struct {\n    valuesField []Value\n}\nfunc (m *ValueArray) Values() []Value {\n    return m.valuesField\n}\nfunc (m *ValueArray) SetValues(val []Value) {\n    m.valuesField = val\n}\nwhen it should be:\ntype ValueArray struct {\n    Values []Value\n}\nIf I change the type of the array from \"#/definitions/Value\" to \"#/definitions/ValueArray\" then it is generated as I would expect.  It's related to the base type having a discriminator, but it happens with an array of any interface, not just the base type.. That's also not enough to make it work, the unmarshal and marshal don't work right either.  I ended up reworking the structures to avoid this situation, and since I don't need arbitrary nesting right now, just one level.. I changed our structure so that instead of this:\n```\n  Value:\n    type: \"object\"\n    discriminator: \"ValueType\"\n    required:\n    - \"ValueType\"\n    properties:\n      ValueType:\n        type: \"string\"\nValueArray:\n    allOf:\n    - $ref: \"#/definitions/Value\"\n    - required:\n      - \"Values\"\n      properties:\n        Values:\n          type: \"array\"\n          items:\n            $ref: \"#/definitions/Value\"\n```\nwe have this:\n```\n  Values:\n    type: \"object\"\n    properties:\n      Value:\n        $ref: \"#/definitions/Value\"\n      Array:\n        type: \"array\"\n        items:\n          $ref: \"#/definitions/Values\"\nValue:\n    type: \"object\"\n    discriminator: \"ValueType\"\n    required:\n    - \"ValueType\"\n    properties:\n      ValueType:\n        type: \"string\"\n        description: \"The type of the Value object.\"\n```\nI'm planning to change Values to use oneof once v3 support is available.\n. @rjeczalik You say anyOf in the text, but allOf in the swagger file.. @GlenDC Yes, that's what I meant.  Thanks for clarifying.  I totally missed that I didn't say how it was broken.\n. [Update: I just realized this may be a related but different issue, since it's in 0.7.4]\n[Update2: and this issue has been fixed in 0.8.0: if err != nil && err != io.EOF]\nLooks like this \"use the polymorphic marshal\" is triggered by the type having a property that is a parametric type or an array of a polymorphic type:\n```yaml\n  Values:\n    type: \"object\"\n    properties:\n      Value:\n        $ref: \"#/definitions/Value\"\n      Array:\n        type: \"array\"\n        items:\n          $ref: \"#/definitions/Value\"\nValue:\n    type: \"object\"\n    discriminator: \"ValueType\"\n    required:\n    - \"ValueType\"\n    properties:\n      ValueType:\n        type: \"string\"\nValueNumber:\n    allOf:\n    - $ref: \"#/definitions/Value\"\n    - required:\n      - \"Value\"\n      properties:\n        Value:\n          type: \"number\"\n```\nThis function is failing because I only set one or the other of Array or Value (since Swagger doesn't have anyOf yet), and this returns an error at the read of Value when it isn't provided.  It checks to see if Array is there before it tries to read it, but not Value.\n``go\n// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure\nfunc (m *Values) UnmarshalJSON(raw []byte) error {\n    var data struct {\n        Array json.RawMessagejson:\"Array,omitempty\"`\n    Value json.RawMessage `json:\"Value,omitempty\"`\n}\n\nbuf := bytes.NewBuffer(raw)\ndec := json.NewDecoder(buf)\ndec.UseNumber()\n\nif err := dec.Decode(&data); err != nil {\n    return err\n}\n\nvar array []Value\n\nbuf = bytes.NewBuffer(raw)\ndec = json.NewDecoder(buf)\ndec.UseNumber()\n\nuntypedObj := make(map[string]interface{})\nif err := dec.Decode(&untypedObj); err != nil {\n    return err\n}\nif untypedArray, ok := untypedObj[\"Array\"]; ok {\n    if slcArray, ok := untypedArray.([]interface{}); ok {\n        for _, slcEl := range slcArray {\n            slcJSON, _ := json.Marshal(slcEl)\n            slcObj, err := UnmarshalValue(bytes.NewBuffer(slcJSON), runtime.JSONConsumer())\n            if err != nil {\n                return err\n            }\n            array = append(array, slcObj)\n        }\n    }\n}\n\nvalue, err := UnmarshalValue(bytes.NewBuffer(data.Value), runtime.JSONConsumer())\nif err != nil {\n    return err\n}\n\nvar result Values\nresult.Array = array\nresult.Value = value\n*m = result\nreturn nil\n\n}\n```\nHere is the json that it's trying to unmarshal, to an array of Values objects:\njson\n[ { \"Value\": { \"ValueType\": \"ValueNumber\", \"Value\": 2 } } ,\n  { \"Array\": [ { \"ValueType\": \"ValueNumber\", \"Value\": 0 } ] } ]. This is just for the Go framework.  It has no relation to the main project editors.\nI agree that the editor error messages are generally awful.\n. Is (3) what's requested in #868 and #1328 ?. Has work already been done on it?  I don't need it quite yet, but will probably be implementing one before too much longer.\n. I would assume that with OpenAPI 3.0 you'll be able to do anyOf: with the different response types.\n. I think the easiest would be for the validation functionality to have an option to select \"read-only data can be included\" vs \"read-only data must not be included\".\ntype Validatable interface {\n        Validate(strfmt.Registry, bool disallowReadOnly) error\n    }\nalthough if we want to support writeOnly as well, then maybe:\ntype OperationType int\nconst (\n    ReadOperation = iota\n    WriteOperation\n)\ntype Validatable interface {\n    Validate(strfmt.Registry, OperationType) error\n}\n\n. I wasn't sure if anyone implemented Validatable themselves or if it's always generated.  Since it's in the runtime package, I guess we should assume that someone might have implemented it themselves and thus it's an API change that would need to be properly versioned.\nHow would your wrapper interface work?\n. FYI, we have go-swagger in our vendor directory so that we can ensure a given version, even if that version isn't yet released, but we don't use any of its types from there.  We just run it from the vendor directory.  We haven't had any problems with that, so it would be good if it would continue to work that way.. When I use allOf when generating a server, I have to put \"type\": \"object\" in any local definition (not using $ref).   I'd try adding that before \"properties\": {.\nFYI, if you put a line with just before and after your code, you'll get better formatting.\n.\n    post:\n      description: post func\n      operationId: postfunc\n      schema:\n        parameters:\n        - name: myparam\n          in: body\n          type: string\n``\nCan you try adding theschema:?\nhttp://swagger.io/specification/#fixed-fields-45. I agree, better the error handling is always beneficial.\n. Could you create a top-level swagger file that just includes the two lower-level ones?\n. I think you're in the wrong place. This library only generates in the Go language, not Java.. As sethcleveland noted, theallOfformat in the Swagger document is incorrect.\n. @posener That's good to know.  I tried usingallOfthat way in the past, but ran into issues, and changed it to match the examples in the spec, which always showed the two complete objects nested underallOf.  I thought that there had been Swagger validation errors, but maybe it was onlygo-swaggererrors, meaning this one.. There is a command line argument to prevent that,--exclude-main`.\n. This was fixed in the upstream component after 0.12.0 was released.. It was pulled in last week, I believe.\n. Does it work if you change this:\n    additionalProperties:\n      items:\n        type: string\n\nto this:\n    additionalProperties:\n      type: string\n\n. I'm not sure if it's something that the online validator doesn't or isn't able to catch, or if it's something that is technically allowed but not expected, and so the Go validator doesn't handle it properly.  It's in a similar class to someone having items in a type: object instead of type: array.  It may or may not be valid, but it shouldn't cause a panic.\n. This panic should be fixed in master.\n. This is entirely for validation.  It is not an error if an optional field is not provided.  It is an error if a required field is not provided.\n. @levrik If you want a string to not be empty, set minLength: 1.. Looks good now.\n// Validate validates this pet\nfunc (m *Pet) Validate(formats strfmt.Registry) error {\n    var res []error\n\n    if err := m.validateDate(formats); err != nil {\n        // prop\n        res = append(res, err)\n    }\n\n    if len(res) > 0 {\n        return errors.CompositeValidationError(res...)\n    }\n    return nil\n}\n\n. Discussed briefly in #675 . It has not yet been updated to OpenAPI 3.0.\n. @huikang I've heard that @casualjim is working on it.. As for the reason, YAML treats these strings as boolean:\n{ Y, true, Yes, ON  }    : Boolean true\n{ n, FALSE, No, off }    : Boolean false. Have you looked at the automatically generated `/docs` interface?  It does do execution, but has full documentation.\n\n. No, I mean run the server and go to http[s]://<server>/docs in a browser.\n. If you use a base path, then the docs comes after the base path.. @aalexanderr To build on what @casualjim said, a slice is a reference type because it contains a pointer to a backing array, a starting index and an ending index (or count, don't remember which).  You can copy that slice as many times as you want, but they will all refer to the same array.  You can even do things like remove the first or last element from the slice, and it will still refer to the same underlying array, it just has different indices now.  The only way to get an independent copy is to create a brand new underlying array and copy the elements to it, either one by one in a loop or using copy().  So, if you're going to have to copy it to pass it anyway, there's no additional cost for changing them to pointers as you go.\n. Don't underestimate the value of stable generated output. It makes debugging generation errors much easier. We currently sort model and operation arrays after extracting then from the maps and before iterating over them.. Okay. Just wanted to say that I think stable generated output is enough genuine added value and that you don't have to look for more.. Now that I read the description again, I'm even more convinced as this is about observable order in the output and not just the order in which files are generated.. This is likely your problem:\n  rrsets:\n    type: object\n    items:\n      $ref: '#/definitions/RRSets'\n    description: 'RRSets in this zone'\n\nitems is for array, not object.  If you want to embed that directly, just do this:\n  rrsets:\n    $ref: '#/definitions/RRSets'\n\nNote that you can't then have a description there with the $ref.\n. Interesting.  The spec doesn't actually say that items is not valid for object, only that it's required for array.  That might be why the validator doesn't catch it.. I honestly have no idea, @casualjim will need to chime in here.\n. All properties are optional unless you list them in the required section.  As such, you don't have to do anything with \"null\" there to make it so.. This is what I have in my setup function:\napi.DesignDeleteHandler = operations.DesignDeleteHandlerFunc(routes.DesignDelete)\napi.DesignGetHandler = operations.DesignGetHandlerFunc(routes.DesignGet)\napi.DesignPatchHandler = operations.DesignPatchHandlerFunc(routes.DesignPatch)\n\nand then I have a separate routes package that has functions like this:\nfunc DesignDelete(params operations.DesignDeleteParams, principal interface{}) middleware.Responder {\nfunc DesignGet(params operations.DesignGetParams, principal interface{}) middleware.Responder {\n\nI don't remember why I needed the casts there.. @databus23 Is there a possibility that this will cause the security: [] to appear on specs that don't currently have anything there, changing their semantics?\n. @gaplyk That's expected according to @databus23 's post that it's semantically the same as before.  Can you provide information on why that's an error for you?. He's saying that security: null is semantically the same as omitempty, but different than security: [].. They can indeed be distinguished without the omitempty \nhttps://play.golang.org/p/kuk2mk-dgV. Fixed here yesterday: https://github.com/go-openapi/spec/pull/40\n. I'm not sure if this is the cause of your problem, but you can't have anything else with the \"$ref\".\n    \"someIds\": {\n        \"$ref\": \"#/definitions/someIds\",\n        \"type\": \"array\"\n    }\n\n. https://github.com/swagger-api/swagger-editor/issues/902\n\nWhen you are using a $ref, it should'n have a sibling, otherwise you'll get a warning (it's weird that I didn't!). That's because when there is a $ref, everything (including $ref itself) will be replaced with the result of what that $ref is pointing to. So if you put siblings next to a $ref, they will not appear because resolver replaces it.. I expect that this isn't actually related to your problem, but it would be good to eliminate it to be sure.. I had to change this:\n\nreturn &models.NamedValue{Name: &name}\n\nto this:\nnv := &models.NamedValue{}\nnv.Name = &name\nreturn nv. Thanks.. @casualjim\n\nAn additional primitive data type \"file\" is used by the Parameter Object and the Response Object to set the parameter type or the response as being a file.\nhttps://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#responseObject\nschema | Schema Object | A definition of the response structure. It can be a primitive, an array or an object. If this field does not exist, it means no content is returned as part of the response. As an extension to the\u00a0Schema Object, its root\u00a0type\u00a0value may also be\u00a0\"file\". This SHOULD be accompanied by a relevant\u00a0produces\u00a0mime-type.\n. I did Dump Data and looked at the containing structure.  Here are the significant differences:\n{\n                            \"Enum\": [ \"1\" ],\n                            \"GoType\": \"string\",\n                        },\n                        {\n                            \"AliasedType\": \"string\",\n                            \"GoType\": \"EnumTypeOne\",\n                            \"IsAliased\": true\n                        }\nand EnumTypeOne gets its own file.\nSo it looks like we'd need to generate an aliased type here, or else do the transformation inside the template when creating the containing type.\n. Looks like a duplicate of #868 . Nope, that's the same as what we get now.  The Ida is just a string with runtime validation, not a separate type as Idb is.\n. I had some thoughts above, on Jan 8.  These are fairly uninformed thoughts.  I haven't looked at them to see how difficult they would be.\n. The big difference here is runtime validation vs compile time validation.  I'm not as concerned about commonality as the compile time validation.  \n\nSo it is not obvious that \"lifting things\" is always the right choice. Indeed, if this enum type is reused elsewhere, inlining it would cause name conflicts with the generated consts.\n\nI don't agree.  We already generate the consts for runtime validation, we just don't require that you use them when creating objects in code.\n\nI don't think we can adopt a general rule on simple types: some dev would like inlined enum to remain inline, and some, to have it as dedicated type.\n\nI can't imagine devs wanting less type safety.  (Okay, I can imagine it, I just can't understand it.)\n\nOn the other hand, you might have expected that the analyzer automatically detects that the schemas are actually identical and factorize the spec for you.\n\nNope, not looking for that.. ``// ida\n// Required: true\nIDA *stringjson:\"ida\"`\n// idb\n// Required: true\nIDB EnumTypeOne `json:\"idb\"\n```\nI am using the client and constructing an object that contains these two members.  I can put any string I want in IDA, and the compiler doesn't complain, but it fails runtime validation.  I can only put EnumTypeOne values in IDB or the compiler complains.\n. Here I'm copying from #868 \n\nEnums occur in following locations, and should generate type aliases in all of them:\nnon-body parameter:\n  inline (1);\n  ref (2);\nheader object (used to send headers along with responses);\n  inline (3);\nitems object (used to describe array items):\n  inline (4);\n  ref (5) (already working pre-PR as a solution to this issue!);\n\nAt the time of that report, we only generate the type alias in number 5, but should in all of them.  I haven't verified that this hasn't changed.\n\nIf this is what you want, I think it is rather straightforward (you already did tamper with that code, didn't you?) to set an option in flatten() to move all enums together with other complex stuff and create a definition for it. I guess that this would happen here.\n\nI haven't had time to look at this myself, unfortunately.\n. I don't think I should need to put anything in the spec to get consistent behavior between the two definitions.  The spec author has specified that only the given values are valid for that property, so we should do everything that we can to make it easy for the user of the generated code to make that happen.  Having to add $ref and an external declaration for something that isn't reusable just because otherwise the tool doesn't give me the full compile time validation just feels wrong to me.  If we didn't have the ability to do it at all, that would be one thing, but we do, and we're just choosing not to do it in this case.\nSomething to remember here is that the use case where I hit this is in client generation.  I'm using a spec provided to me by a third party, and that third party doesn't use a separate type when the enum isn't shared.  This results in an inconsistent interface for the user of the client.  It's not always possible to make these changes to the spec to get the consistent interface.\nSince it is a breaking change, a change like this would probably need to be part of the next major release, and I'm fine with that.\n. @fredbi Looks good to me.\n\nI don't know how much this is helping vs getting people to just define their own constants.\nWhile the code being generated here is valid, compiles and works, it probably doesn't actually capture intent. The intent being typesafe reuse, and unless we analyze all the enums and group the ones that are the same we don't capture that intent.\n\n@casualjim My intent here is not typesafe reuse, just plain typesafe use of a third-party spec for which I am generating a client.\n. @fredbi I have not yet seen enum used for anything other than string so that's fine with me right now.\n. I can confirm that specDoc.spec.Definitions[\"Graph\"].Properties[\"Nodes\"].Items.Schema is valid before the call to analysis.Flatten() in generator.validateAndFlattenSpec(), and that call is what replaces it.. I assume you already know this, but it's analysis.nameInlinedSchemas() that's doing it.. I commented out that call and that model generated similarly to what it was before.  \ntype Graph struct {\n    nodesField []Node\n}\n\nfunc (m *Graph) Nodes() []Node {\n    return m.nodesField\n}\nfunc (m *Graph) SetNodes(val []Node) {\n    m.nodesField = val\n}\n\n. However, trying to generate a client for this spec without nameInlinedSchemas() results in duplicated models.\nswagger: '2.0'\ninfo:\n  title: title\n  version: version\nresponses:\n  contents:\n    description: description\n    schema:\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            type: object\n            properties:\n              attributes:\n                type: object\n  folder_refs:\n    description: description\n    schema:\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            type: object\n            properties:\n              attributes:\n                type: object\npaths:\n  /contents:\n    get:\n      description: description\n      responses:\n        200:\n          $ref: '#/responses/contents'\n  /refs:\n    get:\n      description: description\n      responses:\n        200:\n          $ref: '#/responses/folder_refs'. Here's my current attempt at fixing this, don't move arrays:\nfunc nameInlinedSchemas(opts *FlattenOpts) error {\n    for _, key := range depthFirst {\n        if sch.Schema != nil && sch.Schema.Ref.String() == \"\" && !sch.TopLevel { // inline schema\n            if !asch.IsSimpleSchema && !asch.IsArray { // complex schemas get moved\n\n. @casualjim The tests pass, and my service works properly with the latest code plus the addition of && !asch.IsArray as above.  Would you mind taking a look to see if this is a workable solution?\n. I think this one can be closed.  Anyone have anything outstanding here?. May be related to #1336 . Looks like the change was made here:  https://github.com/go-swagger/go-swagger/commit/eff4c7f8c7ec96ae88a7494a12356041db27fd05. This issue is essentially the same issue that was fixed in #423 .  The code in #1128 appears to exactly revert the changes done for #423.\n@nickrmc83 To get #1128 to pass the tests, you had to change the test added in #423.  I need to have this restored to what was in #423, but I'm not sure what effect that will have on your test cases.  Any thoughts?. @nickrmc83 Here's the test that failed with your changes: TestGenModel_Issue423\n. Do you know if there was a particular reason that you reversed the changes from #423?  Should we not just revert the changes to that particular template, and then try again to fix whatever issue it was that you were having with it?\n. What are the other errors with that schema on HEAD?\n. I dug deeper into the change that was made in #423, and it was actually much smaller than I thought.  I think what you have now should cover it.  I'm not sure whether or not the larger removal of the array handling is proper.\nAs far as the unit test for this issue, all you should have to do is revert the change to TestGenModel_Issue423.\n. It's actually slightly lower down, but same basic idea, with one additional condition that should be satisfied here without a problem.\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/templates/schemavalidator.gotmpl#L330\n. Oooh, nice tip.\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/model.go#L538\nI think here we should add a check for model.Format being a value that we know how to validate.\n. I'm just as much of a beginner here.  The reason I said \"being a value that we know how to validate\" is that I have no idea how it will handle a format that it doesn't know how to validate.  Having said that, I realize now that it should be moot, because it will already return true if isRequired is true.. Yes, it was fixed by the commit referenced just above.\n. That's a godoc requirement:\nhttps://goswagger.io/generate/spec.html\n\nParsing rules\nThis command relies heavily on the way godoc works.\nThis means you should be very aware of all the things godoc supports.\n\nhttps://blog.golang.org/godoc-documenting-go-code\n\nThe convention is simple: to document a type, variable, constant, function, or even a package, write a regular comment directly preceding its declaration, with no intervening blank line.. >when I remove the:\n\nreturn middleware.NotImplemented(\"operation .GetAccounts has not yet been implemented\")\n\n\nwith\n\nreturn operations.Search(params operations.GetAccountsParams)\n\n\nI get a compilation error that don't understand: 'syntax error: unexpected operations, expecting comma or )'\n\nThat's because you left the type from the function declaration in the function call, you just want this:\nreturn operations.Search(params)\n\n. Simple fix:\nBaseImportFunc   func(string) string `json:\"-\"`\n\n. @nickrmc83 fixtures/bugs/1341/swagger.yaml is missing. :shipit: \n. I saw a few places where \"literal\" had an extra \"t\": \"litteral\".\n. @Meio-rayliegh I think you have the wrong project.\n. Yeah, line 1 should not have been added to this template when it was added to the others.  It probably makes sense to move line 28 to line 1.\n. Anything required is almost always a pointer, so that the validator can tell whether it was provided or not.  Generally structs are also by pointer instead of by value.  You can sometimes use x-nullable: false to change that.. To clarify, the requirement that something be a pointer to tell if it was provided or not is because  the validation is done on the resulting objects themselves after the data is extracted from the JSON rather than as the data is being extracted from the JSON.  As such, it doesn't have a way to tell if the data was provided in the JSON.  This also allows the same validation code to be used both for extracting objects from JSON and for creating JSON from objects.  It could theoretically be written such that the validation was done during the marshal/unmarshal, but that seems like it would be a significant rewrite of the entire process.\n. There is a slack workspace: https://goswagger.slack.com\n. I don't remember. @casualjim ?. Wow, this is ugly.  I'm investigating.\n. Anyone have a spec with additionalProperties that has validation?  I'm not seeing any in the repo and I want to test my fix.\n. Yeah, I don't see any validations in any of those schemas. I guess I'll have to make one.\n. I don't see anything there.  Am I missing something?\n. @jcoyne Can you try out the latest version and see if it fixes your issue?. Thanks @jcoyne!. I think that should be \"additionalProperties\": true.\n. That's the default in Swagger/JSON Schema, but not currently in go-swagger.  There is another issue logged for that.. This is explicit in the spec too, it lists Response Object or Reference Object as the content for a status code.\nAny HTTP status code can be used as the property name (one property per HTTP status code). Describes the expected response for that HTTP status code. Reference Object can be used to link to a response that is defined at the Swagger Object's responses section.. PR is in progress.\n. Fixed with #1410 . Have you tried dep yet? I just finished converting my project to it, and it did a great job of vendoring just what I needed to run the generated code. I had to actually mark certain packages as required in my manifest to keep them from being removed so I could still run the generate command from the vendor directory.  If you install go swagger instead of vendoring it, then you won't have to deal with that part.. If you have the generator vendored then it should automatically have the same versions. If you're using installed, I'm not sure. You may have to specify the versions in your manifest. I have it vendored and checked in so that I don't have a variable version in my CI system.\n. I don't think that's necessary, dep is working fine on its own for me.\nI just needed to add this:\nrequired = [\"github.com/go-swagger/go-swagger/cmd/swagger\"]\n\n[[constraint]]\n  name = \"github.com/go-swagger/go-swagger\"\n  revision = \"98dcea64a45932ddfdc8911a2488d364e52d27ed\"\n\nThat's because I'm working with a particular version right now.  I'm tracking down a hang on server generate when I update everything.\n. Do you have anything with any of these names?  If so, then they must be quoted or yaml considers them booleans: y, yes, n, no, true, false, on, off. This has been fixed in master.\n. Just guessing that the $ref isn't being resolved in the right file.  Does it work if you reference ./responses.yaml#/definitions/Error?  (Not that I think you should do this in the end, just guessing about the cause.)\n. So the root yaml file has references to itself that include the filename?  That's a bit odd.  The case where I suggested adding that before was for when the reference was in a different file referenced from the root, and I was only suggesting that as a test, not a permanent fix.  I would not expect a reference to a definition in the same file to be qualified with the filename.\n. Have you tried this on the latest master?  There has been a lot of work on validation since 0.13.0 was released.. I just ran into this myself.  I think this would actually be fixed by properly handling the default of additionalProperties being true everywhere, because this should really be a struct containing the additionalProperties map, because anything in here would fall under additionalProperties.. Which is probably what you were thinking when you added that label.  :)\n. Unfortunately, adding additionalProperties: true to the schema doesn't do anything.. I was hoping that correct handling of additionalProperties would have turned it into a struct with an additionalProperties member, and nothing special would be needed for this case, but I guess there's an override somewhere for a type with no explicit properties.. Well, only that the proper way to do this, to match all the other types, is to have an empty struct, and to have the additionalProperties member if it is enabled.. That's too bad, as this follows the Go convention for generated files.\nhttps://github.com/golang/go/issues/13560\n^// Code generated .* DO NOT EDIT.$\n\n. Swagger 2.0 doesn't support map[string]* except through \"additionalProperties\".  I'm not sure how you would annotate this, or if it's even possible.\n. What does your generated spec look like?\n. Okay, so it did generate additionalProperties under Labels.  That's good.. Looks like line 16986 is a duplicate of 16985.       responses:\n        \"200\":\n          description: The programs were parsed.\n          schema:\n            type: array\n            items:\n              $ref: \"#/definitions/ExecuteGetInOutData\"\nStrange.  I just pulled the latest and it's working just as before for me.\n/*ExecuteGetInOutOK The programs were parsed.\n\nswagger:response executeGetInOutOK\n*/\ntype ExecuteGetInOutOK struct {\n\n    /*\n      In: Body\n    */\n    Payload []*models.ExecuteGetInOutData `json:\"body,omitempty\"`\n}\n\n. That's correct. The validation uses this to differentiate between \"not provided\" and \"empty/zero\".\nYou can use x-nullable to change the default for most fields. If you do this for things like required strings, you won't be able to tell that the string wasn't provided unless you also put in a minimum length constraint.. You would need to add x-nullable: true to that field of the schema if you need to know that.. Yeah, having to edit a third party spec is a pain. A command line option for this could probably be added. I have no idea how involved that would be. Maybe a way to set the system-wide default.. Seems like you would need to add a pattern on each string, since even an empty string is enough to satisfy the required attribute.. These issues were resolved after 0.13.0. Please try the latest master version. Lots of work in generation since the version you are using.. Those defaults need to be put on the individual members. The default where you put it is a default for the entire object if it is not provided at all.  Thus it must pass validation of the object schema.. I would not expect the map elements to be pointers in this case.  As I see it, the reasons for something to be a pointer are that it is required, so we can validate that it is provided, x-nullable, or that it is big.  An integer as the value of a map element is none of these things.  You can't not provide the value of a map element, as far as I know.. The only reason I see to render a primitive as a pointer is when it could have been omitted from the JSON and we otherwise wouldn't be able to tell.  That happens when it is a standalone property, but not when it is an element of a map or slice.  It makes sense to me to have validation for non-pointers skip the IsZero test.. Sounds awesome.\n. @fredbi  Looks valid to me:\nhttps://swagger.io/specification/v2/#responsesObject\nresponses:\n  '200':\n    description: a pet to be returned\n    schema:\n      $ref: '#/definitions/Pet'\n  default:\n    description: Unexpected error\n    schema:\n      $ref: '#/definitions/ErrorModel'\n\n. This part?\nresponses:\n  401ErrorResponse:\n    description: An unexpected 401 error occurred.\n    schema:\n      $ref: \"#/definitions/Error\"\n  404ErrorResponse:\n    description: An unexpected 404 error occurred.\n    schema:\n      $ref: \"#/definitions/Error\"\n  500ErrorResponse:\n    description: An unexpected server error occurred.\n    schema:\n      $ref: \"#/definitions/Error\"\n\n. We fixed this issue for models in December: https://github.com/go-swagger/go-swagger/issues/1326\n. Commit is here https://github.com/go-swagger/go-swagger/pull/1329/commits/ae57fbc6faae9e97310ca7d96f7d8a45d861e48b\n. You're using a really old version.  Please try with the latest release, this should be fixed.. I guess it's different because of this: When payload is to be an object that contains the array instead of just the array, it works.\n. Missed @fredbi 's comment, agree that there should be a test case.. There is a function for this, which should be used instead of that line: tn := t.firstType(schema).  Can you try that out?\n. Because during validation we can tell the difference between \"user provided a string of length 1\" and \"user did not provide a string\" without using a pointer.  We can not tell the difference between \"user provided a string of length 0\" and \"user did not provide a string\" without using a pointer, when validation is done on just the current structure.. >So why do we decide to render a pointer when this (empty) constraint is enabled, and don't when it's not?\nIf that is what is happening, that sounds like a bug to me.. This is #1328 \nIn order for the current code to generate an enum for it, you have to create a named type for it, something like this:\nstatus:\n  description: Status\n  type:\n    $ref: #/definitions/status_enum\n\nstatus_enum:\n  type: int\n  enum:\n    - QUEUED\n    - RUNNING\n    - SUCCEEDED\n\n. @vaishalig2693 Ah, that does sound familiar.  @fredbi anything to add here?\n. Full list here, case does not matter: https://github.com/go-swagger/go-swagger/issues/1209#issuecomment-336571529. See #1122 . @stmuk You must sign off on this commit before it can be merged.  See \"Sign your work\" here: https://github.com/go-swagger/go-swagger/blob/master/.github/CONTRIBUTING.md. Thanks @chenziliang .  The PR can't be merged until the CI builds are done.. >re: \"because zero is the same as not provided\" i think this is an assumption that is not true in general.\nIt is, according to Swagger/OpenAPI 2.0.\nhttps://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md\n\nrequired: Determines whether this parameter is mandatory. If the parameter is in \"path\", this property is required and its value MUST be true. Otherwise, the property MAY be included and its default value is false.\n\nIf you want something other than zero for the default, you need to use:\n\ndefault: Declares the value of the parameter that the server will use if none is provided, for example a \"count\" to control the number of results per page might default to 100 if not supplied by the client in the request. (Note: \"default\" has no meaning for required parameters.) See\u00a0https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-6.2. Unlike JSON Schema this value MUST conform to the defined\u00a0type\u00a0for this parameter.\n\nIf you absolutely must know if it's provided or not, then use x-nullable as described above.\n. @casualjim there is no mention in CONTRIBUTING.md that PGP signature is required.  Is this an intentional change?  If so, it should be added there.. @fredbi The checks window is scrollable.\n. @fredbi To be fair, it's not obvious.  I really dislike the trend towards hidden scrollbars.\n. The v was added for compatibility with the new Go modules.. >When the service is not running in the cluster, the proxy returns an error but it seems that the GO client is attempting to parse the message from the proxy as if it originated from the service. As a result, we are getting an unmarshal error and the original error is hidden:\nThat's exactly what's happening, and exactly what should happen.  The client has no way to tell whether the error is coming from the proxy or the service.  Your swagger says that anything that's not a 200 response needs to match the schema \"$ref\": \"#/definitions/apiStatus\"\nIf the proxy returns status codes with content that doesn't match that schema, you need to list those separately in your swagger definition.\n. @fredbi Yes.  The default response only works when the response format in the spec and the format returned by the proxy are compatible.  In this case, they are not.. I've been using go-swagger since Oct 2016.. @leon-barrett Are there things in the documentation here that could be updated to help with using the annotations?. Is this PR just to get the CI stuff?  Doesn't seem like we'd want to commit using a fork of spec instead of the main repo.. You're missing the v in the tag names in your pull.\n. That is not allowed by the Swagger 2.0 specification.\nhttps://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md\noperationId | string | Unique string used to identify the operation. The id MUST be unique among all operations described in the API. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is recommended to follow common programming naming conventions.\n. The default: false here should have no effect, as that is already the default for booleans.  Also, this shouldn't be a pointer because it's not required.. The HTTP specification just says that it's a 3 digit number that starts with 1, 2, 3, 4, or 5.  Thus, the valid range is 100 to 599.\nhttps://tools.ietf.org/html/rfc7231 section 6\n. The fixes themselves look good.  Just need to do the updates of all the generated stuff that goes along with it.. These two \"TodoList\" strings look like they should be templates.. Just re-read the messages on slack and see that you already took care of this.\n. typo: descirption @casualjim . same typo here\n. typo: Fromat\n. Since \"date\" and \"datetime\" have the same conflicts, you can combine the cases:\ncase \"date\", \"datetime\":\n\n. Probably \"uuid\" as well.\n. No, it is not implied by path.  It is required and must be true.\nhttps://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md\n\nDetermines whether this parameter is mandatory. If the parameter is in \"path\", this property is required and its value MUST be true. Otherwise, the property MAY be included and its default value is false.\n. The outer if is unnecessary, as the only thing inside the if is a for loop over the thing that len is testing.  These two blocks have exactly the same meaning.\n\nfor _, {{ varname .Child.ValueExpression }} := range {{ .ValueExpression }} {\n}\n\nand \nif len({{ .ValueExpression }}) > 0 {\n    for _, {{ varname .Child.ValueExpression }} := range {{ .ValueExpression }} {\n    }\n}. I don't see it.  Do the nested templates do something funky like closing the loop and opening a new one?  I don't see it there either.\n\nif len({{ .ValueExpression }}) > 0 {\n    for _, {{ varname .Child.ValueExpression }} := range {{ .ValueExpression }} {\n        {{- if not .Child.IsArray }}\n            {{ template \"sliceitemserverheaderbuilder\" .Child }}\n        {{ else }}\n            {{ template \"sliceserverheaderbuilder\" .Child }}\n        {{ end -}}\n    }\n}. I think you're looking at a different place than we are.  We're looking at a simple `for` loop that was wrapped in an `if` in this PR.  There is no such structure in your generated code above.\n\nhttps://github.com/fredbi/go-swagger/blob/e77845a4df1c90949bd7a9091ae2344f953d8f2f/generator/templates/server/responses.gotmpl#L31-L35\n. I think you're looking at this, which does contain the append:  \nhttps://github.com/fredbi/go-swagger/blob/e77845a4df1c90949bd7a9091ae2344f953d8f2f/generator/templates/server/parameter.gotmpl#L45-L48\n. Curious, if maligned is disabled, why is it configured above?\n. Okay, that makes sense.\n. no = not or now?\n. I would say \"some transformations to be carried out on a specification\".\n. I'm thinking \"to be a discriminated type\" or \"as a descriminated type\" would be better here (and a space before the open paren).\n. \"This transform makes\" or \"These transforms make\". \"attempts to minimally distort the\"\n. \"a more suitable name for the generated type\"?\n. Looks like most of this function does return err if it's in the main function, and s.Fatalf if it's in a goroutine.  The only difference is this section:\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/templates/server/server.gotmpl#L408-L418. and this line which uses log.Fatal instead of s.Fatalf \nhttps://github.com/go-swagger/go-swagger/blob/master/generator/templates/server/server.gotmpl#L393\n. This checks all three maps even when the first one matches.  It would be better to short circuit as soon as one matches.  For that matter, there is no reason that you need 3 maps here.  A single map with all reserved suffixes should be fine.  Then you only need to access the last part once and can do this:\nif goReservedSuffixes[len(parts)-1] {\n...\n\n. It works, but accepts any character, not just dot.. The _result also matches _path and _basePath in the function.  If a combination (nothing random please) were used, such as {{ .ReceiverName }}_{{ . Name }}_result then it should be added to those other variables as well.. ",
    "e-nikolov": "@fredbi Do you generate stubs in the implementation package via the custom templates feature of go-swagger, or do you manually create it? I'm trying to do something similar, but I'm not sure how to tell go-swagger to put the generated files in a separate custom directory.. @casualjim I see. https://goswagger.io/generate/templates.html#use-custom-templates This part of the documentation confused me because it says that the directory part will become a part of the file name like so: server/test.gotmpl -> serverTest. The issue was on my end. I had forgotten to replace the --principal models.User with --principal <my-model>.User and somehow this was making the generation much slower. Perhaps because of the goimports that are being run on the generated file?\nAnyway I am closing this issue, sorry for the false alarm.. ",
    "morenoh149": "go version go1.5.3 darwin/amd64\nI believe I have vendoring enabled yes. (Not sure I'm new).\n. I have GO15VENDOREXPERIMENT=1 set in my environment and my application compiles and runs without complaints. It must be having issues finding the dependencies\nmy dir structure is\n/api <- go app\n/vendor <- go deps\nthis is probably why it's having issues\n. I execute the command from the api dir. I'll join.\n. ",
    "gsquire": "I am running into this issue when trying to generate a swagger spec as well. I believe it is because I installed go with home brew on a mac so my library paths are different.\nCommand I am running: swagger generate spec\nFile I am trying to generate with: https://gist.github.com/gsquire/cce277b4bd10ba283f4522e896dc91d6\nError trace:\nsh\n/Users/gsquire/scratch/test-swagger.go:14:2: could not import fmt (cannot find package \"fmt\" in any of:\n    /usr/local/go/src/fmt (from $GOROOT)\n    /Users/gsquire/gopath/src/fmt (from $GOPATH))\n/Users/gsquire/scratch/test-swagger.go:15:2: could not import net/http (cannot find package \"net/http\" in any of:\n    /usr/local/go/src/net/http (from $GOROOT)\n    /Users/gsquire/gopath/src/net/http (from $GOPATH))\n/Users/gsquire/scratch/test-swagger.go:18:14: undeclared name: http\n/Users/gsquire/scratch/test-swagger.go:18:38: undeclared name: http\n/Users/gsquire/scratch/test-swagger.go:19:2: undeclared name: fmt\n/Users/gsquire/scratch/test-swagger.go:23:2: undeclared name: http\n/Users/gsquire/scratch/test-swagger.go:24:2: undeclared name: http\n. Yes, it compiles and my $GOPATH is set up as well. Does my gist not work?\n. Are you on a Linux box? Like I said, I think it's a path issue since home brew installs it in a different location based on my output. I'll have to try on something that isn't mac.\n. Ok then...I'm stumped. Thanks for proving me wrong, I guess I need to try some other things.\n. I uninstalled go-swagger from brew, installed it from source and it worked. So strange. And no, I installed it through brew:\nsh\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/gsquire/gopath\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/1.6.1/libexec\"\nGOTOOLDIR=\"/usr/local/Cellar/go/1.6.1/libexec/pkg/tool/darwin_amd64\"\nGO15VENDOREXPERIMENT=\"1\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\n. I can dig into the code today and see. It makes sense to not want to support every third party tool for dependency management since they are a dime a dozen, but if it's trivial to add then that would be awesome.\n. So I think the line that generates the error I am seeing is here. Since this uses the Go standard library parser, I can see not wanting to patch this. You can go ahead and close this if you agree.\n. Yeah I think adding a slice of \"extra\" paths to the options struct and then calling Import could be an option.\n. I ended up moving to another build tool so I will close this issue. Thanks again.\n. ",
    "danieljy": "@easeway I'm running into exactly your problem, but from a commit sha from only a few days ago.\nDid you ever get this working?\nWhere are you inserting x-go-name and x-go-package so that your generated code properly imports and namespaces the types that are referenced?. @casualjim I'm finding that local references work (swagger 0.7.4, and swagger 0.8.0), but only if the references are JSON formatted files:\nswagger.yaml:\n'conditions':\n        type: array\n        items:\n          $ref: './swagger-test.yaml#definitions/Condition'\nswagger-test.yaml\nWorks:\n{\n  \"definitions\": {\n    \"Condition\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\nFails:\ndefinitions:\n  Condition:\n    type: object\n    properties:\n      name:\n        type: string\nIt would seem that a JSON parser is actually trying to resolve the references, as opposed to the YAML parser.\nAny ideas?. @casualjim Before I go deeper here, it seems as though your examples suggest that go-swagger already is doing the right thing (the last link) - so why am I see the behavior when I run:\nswagger generate server -f swagger.yaml. I've got some updates:\nUsing code from master, I'm able to achieve the following:\n../go-swagger validate swagger-local.yaml\nThe swagger spec at \"swagger-local.yaml\" is valid against swagger specification 2.0\nBut when I try to generate the server directly from this yaml file, I get a message like the following:\n../go-swagger generate server -f swagger-local.yaml\n2017/04/13 09:51:36 building a plan for generation\n2017/04/13 09:51:36 planning definitions\nobject has no key \"LatLng\"\nHere's an excerpt from swagger-local.yaml, demonstrating a reference\n```\n    properties:\n      ...\n      position:\n        $ref: ./base.yaml#/definitions/LatLng\n```\nAnd here's an excerpt from base.yaml, which is in the same directory:\ndefinitions:\n  LatLng:\n    type: object\n    properties:\n      lat:\n        type: number\n        format: double\n      lng:\n        type: number\n        format: double\n    required: ['lat', 'lng']\nIf i try flattening first, I get a different error, which comes from a reference from within the base.yaml file:\n../go-swagger flatten swagger-local.yaml > swagger-local.json\n2017/04/13 09:51:19 schema analysis [#/definitions/testLocation/properties/conditions]: object has no key \"TestCondition\"\nmake: *** [swagger-local.json] Error 1\n```\nTestCondition:\n...\nTestLocation:\n    type: object\n    properties:\n      position:\n        $ref: '#/definitions/LatLng'\n      extent:\n        $ref: '#/definitions/LatLngLine'\n      info:\n        $ref: '#/definitions/LocationMetadata'\n      length:\n        type: number\n        format: double\n      conditions:\n        type: array\n        items:\n          $ref: '#/definitions/TestCondition'\n    required: ['info']\n...\n```\nSo basically, each method has a problem.\nIn general, what's the right way to set these references up? Furthermore, my end goal is really to share types between different apis, so is there a best practice for that?\nThanks!. Okay here's a version that suffers from the same issues:\nswagger-template.yaml:\nswagger: '2.0'\ninfo:\n  title: Test\n  version: \"1\"\nhost: test.com\nbasePath: /\nproduces:\n  - application/json\nschemes:\n  - http\npaths:\n  /a/b:\n    get:\n      operationId: get_ab\n      parameters:\n        - name: pilot_area_only\n          in: query\n          type: boolean\n          default: false\n      responses:\n        200:\n          description: Test\n          headers:\n            Access-Control-Allow-Origin:\n              type: string\n              default: '*'\n          schema:\n            type: object\n            properties:\n              results:\n                $ref: '#/definitions/LocalDefs'\n        default:\n          description: Unexpected error\n          schema:\n            $ref: '#/definitions/Error'\ndefinitions:\n  LocalDef:\n    type: object\n    properties:\n      position:\n        $ref: './base.yaml#/definitions/LatLng'\n      extent:\n        $ref: './base.yaml#/definitions/LatLngLine'\n  LocalDefs:\n    type: array\n    items:\n      $ref: '#/definitions/LocalDef'\n  Error:\n    type: object\n    properties:\n      code:\n        type: integer\n        format: int32\n      message:\n        type: string\nbase.yaml:\ndefinitions:\n  LatLng:\n    type: object\n    properties:\n      lat:\n        type: number\n        format: double\n      lng:\n        type: number\n        format: double\n    required: ['lat', 'lng']\n  LatLngLine:\n    type: array\n    items:\n      $ref: '#/definitions/LatLng'\nAs is, if I try to generate directly from swagger-template.yaml, I get the following error:\n../go-swagger generate server -f swagger-local.yaml\n2017/04/13 11:48:45 building a plan for generation\n2017/04/13 11:48:45 planning definitions\nobject has no key \"LatLng\"\nIf instead I flatten first:\n../go-swagger flatten swagger-local.yaml > swagg-flattened.json\ndanieljy:parking-availability danielyehuda$ ../go-swagger generate server -f swagg-flattened.json\nThe swagger spec at \"swagg-flattened.json\" is invalid against swagger specification 2.0. see errors :\n- object has no key \"LatLng\"\nIf i change base.yaml to look like this:\ndefinitions:\n  LatLng:\n    type: object\n    properties:\n      lat:\n        type: number\n        format: double\n      lng:\n        type: number\n        format: double\n    required: ['lat', 'lng']\n  LatLngLine:\n    type: array\n    items:\n      $ref: '#./base.yaml/definitions/LatLng'\nI am able to fully generate a server, though it requires that I manually generate the models from base.yaml (they don't get generated as part of the generate server command on the main file) and then I have the problem that the generated operations files don't include the models.\nIf I try flattening first, it just hangs.\nHope this helps!\n. I came upon: https://github.com/go-swagger/go-swagger/issues/402, which seems to be the same issue I'm seeing when I change my base.yaml to the form directly above.\nIt seems the issue is closed, but it's unclear to me where i should inserting the x-go-package and x-go-name to make the generated code properly import and reference the models.\nAny ideas?. @casualjim What about my most recent comment - seems I can actually get everything working without flattening, except for getting the generated code to reference separately generated models.\nI'd actually prefer to have a single package with the generated shared models rather than flattening (which I believe would cause me to generate differently namespaced models depending on where I reference them).\nIn other words, is there a proper way of setting x-go params somewhere so that my generated code properly imports external models?. ",
    "landofz": "Awesome. Thanks for the quick reply.\nI have taken a look at the PR. Looks like exactly what I need.\n. ",
    "krasi-georgiev": "I need the same to initialise a db connection once and not on every request , but when I put some code inside the configureFlags that relies on the some custom flags it fails to use the default values.\nhere is the gist\nhttps://gist.github.com/krasi-georgiev/af1709549e58768c3b57150a26c8df67\nby the way the file says \n// Code generated by go-swagger; DO NOT EDIT. \nand than in the middle \n// This file is safe to edit. Once it exists it will not be overwritten\nwhich exclude each other :). is it in the usual place and if I add it in the imports manually it compiles ok\n$ ls /Users/krasimir/src/github.com/go-openapi/runtime/security\ntotal 48\n-rwxrwxrwx   1 krasimir  staff   4.2K 16 Aug 00:43 bearer_auth_test.go\n-rwxrwxrwx   1 krasimir  staff   1.9K 16 Aug 00:43 basic_auth_test.go\n-rwxrwxrwx   1 krasimir  staff   4.1K 16 Aug 00:43 authenticator.go\n-rwxrwxrwx   1 krasimir  staff   2.6K 16 Aug 00:43 apikey_auth_test.go\ndrwxrwxrwx  44 krasimir  staff   1.5K 16 Aug 00:43 ..\ndrwxrwxrwx   6 krasimir  staff   204B 16 Aug 00:43 .. now it ads some packages twice\nrestapi/operations/users/post_login.go:17: validate redeclared as imported package name\nprevious declaration at restapi/operations/users/post_login.go:15\nhardcoding doesn't look like a good idea :)\nmaybe if you give me some pointers where is the goimport called so I can find out if maybe this permission denied error is the culprit.. all good now \ndidn't spend anytime about the goimport error , but now the last generation didn't even show that error.. I think the culprit is in \n440:\n          $ref: \"#/responses/ExpiredTokenError\". I think it happens because 440 is not a standard code defined in the white papers.. thanks I will use the existing ones for now.. can anyone else try and see if it can replicate. . go it thanks. Just troubleshoot that the panic is because of missing type array in the swagger spec so if you want you can close this one or implement some extra checks to prevent the panic.\nrole:\n    items:\n    type: integer. ",
    "jredville": "I'm seeing the same thing with the following file:\n``` go\npackage main\nimport uuid \"github.com/satori/go.uuid\"\ntype Foo struct {\n    uuid.UUID\n}\n// swagger:model\ntype Bar struct {\n    Id Foo\n}\nfunc main() {\n    print(1)\n}\n```\nWhen I run swagger I get the following error:\n~/tmp$ swagger generate spec -m ./... -o swagger.json                                                                                                                                                                          \nunable to resolve embedded struct for: &{uuid UUID}\nUUID is defined in the library as type UUID [16]byte\n@casualjim any ideas?\n. Hey there, long time indeed. Funny that we both ended up in Go-land now :). Hope everything is going well for you.\nWhere would that annotation go? Do I need to open a PR on https://github.com/satori/go.uuid/, or can I just do it in my code?\n. @casualjim that worked, thanks!\n. ",
    "emicklei": "I am the author of the swagger2 package which is intended to be a rewrite/upgrade of go-restful/swagger.\nThe goal of this swagger2 project is to separate the Swagger part from the REST part, allowing others to use the package independently by provinding only the specification objects. I was planning to create another (sub?) package for building model objects from Go types (as I already created 1.2).\nAs discussed offline with one of the authors of go-swagger, I would like to see go-swagger to be split into multiple repos for the most part because of handling the dependencies. Applications that import go-swagger (using vendoring) should not be forced to include the whole package deal (e.g. generators).\nIf the go-swagger project would separate the spec part into a new repo then I will probably drop my swagger2 project and collaborate on that instead.\n. ",
    "boonep": "I have the same question as #1 above.  Any word?  Thanks!\n. ",
    "tingxin": "Hi, I used swagger to build a simple go server, got this issue:\nthe required flags --tls-certificate and --tls-key were not specified\nso how can i set the -tls-certificate and tls-key\n. ",
    "dominictracey": "I also ended up here coming from the todo list tutorial . Would you take a PR to add in the --scheme http to that doc?. FWIW, I'm getting a 404 rather than the expected 501 when I run the generated server.. ",
    "whitlockjc": "Here is the Image struct generated from the first Swagger definition:\ngo\ntype Image struct {\n}\nAnd here is the Image struct generated from the second Swagger definition:\n``` go\ntype Image struct {\n    Links\n/* The timestamp the image was created\nRequired: true\n*/\nCreated strfmt.DateTime `json:\"created\"`\n\n/* The docker image id SHA\nRequired: true\n*/\nImageID string `json:\"imageId\"`\n\n/* The size of the image, in bytes\nRequired: true\n*/\nSize int64 `json:\"size\"`\n\n}\n```\n. ",
    "tnine": "After investigating this further, it appears to be a specific case with file upload.   Take this revision of the spec.\nhttps://github.com/30x/shipyard/blob/ef91de4301375a961217705f119b485031280fea/swagger.yaml#L30\nThere appears to be an  issues with the generated server code.  No handler for the content type \"multipart/form-data\" is generated.  It seems only content type \"application/json\" (the default) is handled and mapped.\nNote there is also a client test in the pkg/client directory.  This uses a generated client to send the POST request to the server, but the server does not seem to handle the upload request correctly.\nI could be incorrect, but I don't see any handler mapping for \"multipart/form-data\" generated in the content type handlers here.\nhttps://github.com/30x/shipyard/blob/8149806770aa088bd0d40617b67bef9431652623/pkg/server/restapi/operations/apis_for_building_docker_images_api.go#L145\n. ",
    "mchaffie": "Sure, could do that, but it means a nested layer in the JSON serialized to the client. Is that the only way?\n. yup I can pass back the nested Body struct thanks. Not sure I love the idea of nesting my structs to support generation tho, for example, initializing with nesting seems a little awkward. Any interest in supporting spec generation with non-nested types?\n. ",
    "kojustin": "@casualjim, I would like this as well. If you could please point out where in the \"swagger generate spec\" code would be a good place to start exploring I could take a stab at this.\n. The fix to is remove an extra pointer deref on the line here.\nif err := m.validateEntreeChoiceValueEnum(\"entree_choice\"+\".\"+k, \"body\", *m.EntreeChoice[k]); err != nil {\n. ",
    "bfirsh": "This is a blocker for us adopting go-swagger for Docker. I quite like the idea of swagger:responseBody.\nIs anybody working on this? If I find some time I might dig into this.\n. Oh \u2013\u00a0nice! I'll give it a try.\nThanks!\n. @casualjim I think none of our response have any special headers. Adding Swagger annotations to the codebase is much more palatable when there aren't hundreds of useless wrapper structs. ;)\n. This broke my build:\n```\n$ go get github.com/go-swagger/go-swagger/cmd/swagger\ngithub.com/go-swagger/go-swagger/generator\ngenerator/types.go:244: doc.OrigSpec undefined (type *loads.Document has no field or method OrigSpec)\n```\n. Yep - go-openapi/loads doesn't seem to have a OrigSpec field on Document.\n. Ah, thanks!\n. https://github.com/bfirsh/docker/tree/generate-swagger-specification\nhttps://github.com/bfirsh/engine-api/tree/add-swagger-annotations\nNote that it currently doesn't generate at all for reasons I can't figure out (Port is defined as a model, but it's still throwing an error for some reason). I've been running a version of go-swagger which ignores unknown types to try and debug: https://github.com/bfirsh/go-swagger/commit/5acf8482e5cd05a7f0fe4bec9155c7b063f41031\n. This is quite hard to debug because the errors seem somewhat non-deterministic, but it seems the object (Port) might incorrect in this error too. With that patch applied to ignore unknown types, Port sometimes shows up in the output, and sometimes doesn't. If I disable some of the more complex routes (e.g. creating containers), then Port consistently shows up in the output.\nPerhaps there is an object that is causing the error that isn't actually mentioned in the error? Perhaps files are getting processed in a different order, so Port sometimes gets processed before the object that is actually broken but sometimes doesn't? Not sure... but might be a clue!\n. Fantastic, thanks!\nThe root problem causing the error is #241, I believe. It also hints at the non-deterministic nature of it.\nIt's quite possible I'm just doing something wrong, but the error message isn't pointing me in the right place so it's very hard to figure out what is actually wrong.\n. Docker's pretty hairy to build, so perhaps this isn't the demonstration of the problem. I might try and build a smaller reproducible test case.\nIf you want to dive further into this, check out the branches above of both docker and engine-api, then this is the command I'm running to get a build environment set up:\nDOCKER_MOUNT=\"-v $(pwd):/go/src/github.com/docker/docker -v $(pwd)/../engine-api:/go/src/github.com/docker/engine-api\" shell\nThat builds a container with all of the dependencies in there. To then build the swagger definition:\nhack/make.sh swagger\n. I'm running into a similar issue now with a different object:\nunable to find NetworkCreate in github.com/coreos/etcd/pkg/types\nHere's the relevant code: https://github.com/bfirsh/engine-api/blob/8b2ebf69c454c8b2122d6e16a1a0e75bf59d12f9/types/types.go#L507\nNetworkCreate is used in NetworkCreateRequest and NetworkCreateResponse which are the actual objects used for Swagger. The obvious weird thing is that is that github.com/coreos/etcd/pkg/types is the wrong package. I've no idea why it's picking that package, because it doesn't have a NetworkCreate object or anything. With debugging enabled, we can see if definitely is loading the correct package:\n2016/08/09 13:36:59 analyzing: github.com/docker/engine-api/types\nThe other weird thing is why it doesn't work in the first place. I'm guessing there is a real error that is being swallowed somewhere, but I'm not sure where to look.\n. Ahah - I've got it! The clue is that the package names are all called types. I have several packages called types, and packageForFile looks for packages by package name only, so it is picking the wrong one.\nI shall investigate further...\n. A half fix! #623\n. Interesting \u2013\u00a0so in theory this should work? What do you mean by missing a case?\nI thought I had to add swagger:model to all of the types I want to be included, but the documentation is ambiguous about this.\n. Ah, my mistake. This was actually parameters, not a model, and query parameters can only be lists of simple types, not objects.\n. A thought: if this had been a better error message, I could have fixed this much quicker. Would it make sense to replace the error here with something like:\n\nYou have used the type \"Ulimits\" in the response \"Resources\", but it is not supported in responses. The supported types are primitives (e.g. string, int), X, Y, and Z.\n\nOr is there a better place to put this?\n. (Opening again because I consider a bad error message to be a bug. ;)\n. ",
    "rcorre": "Does that PR actually allow you to avoid using wrapper structs? From the docs:\n\nDefinitions only appear in the generated spec when they are actually used somewhere in the application (eg. on a params or response struct)\n\nso ... do I need a wrapper struct anyways? Can a swagger:route directly refer to a swagger:model in the Responses section? It doesn't look like it .... Yes, that seems to work. Thanks!. Any progress on this? It seems like there is no way to notate a 204 (no-content) response as described in the swagger 2.0 spec. We tried to work around this by sending a body with the 204, but the go std http lib will not let you do that (Failed to write response: http: request method or response status code does not allow body). So there really needs to be a way to specify in the swagger doc that a 204 response has no body.\nThe following produce an invalid spec:\n| Spec                    | Error\n| ------------------------| --------------------------------- | \n| 204:                 | description in body is required |\n| 204: description: foo | object has no key \"\"            |\n. My bad, I misunderstood how to set it up. In the meta section, in addition to SecurityDefinitions, you need:\n//     Security:\n//         - bearer:. Not urgent, but a fix at some point would be nice.. Not seeing an issue specifically about that, the closest I could find was https://github.com/go-swagger/go-swagger/issues/1397, but that's about generating a client from a spec, rather than a spec from a server.. > Furthermore this spec is valid and the bug is really in bravado imo\nI guess that depends on what object means. If it means object in the JSON sense, I'd say go-swagger is incorrect, and the correct thing to do is not enforce any validation. If it means object in the broad programming sense of \"any type\", then yes, bravado is incorrect. I scanned the swagger 2.0 spec but didn't see where they explicitly define the meaning of types.. https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types says\n\nPrimitive data types in the Swagger Specification are based on the types supported by the JSON-Schema Draft 4\n\nAnd the referenced JSON-Schema Draft 4 has this to say:\n\nJSON Schema defines seven primitive types for JSON values:\narray  A JSON array.\nboolean  A JSON boolean.\ninteger  A JSON number without a fraction or exponent part.\nnumber  Any JSON number.  Number includes integer.\nnull  The JSON null value.\nobject  A JSON object.\nstring  A JSON string.\n\nSo following that, I'd say object in the context of swagger means \"a JSON object\", i.e. a map[string]interface{}, which is narrower than interface{}.. ",
    "galaxie": "I am not that sure but aren't these CI (\"to long\") errors kinda common for the current branch? Am I supposed care about them in this pull request to make it accepted?\n. Now I am confused. I tested this commit from master 7f2565c\nAssume that I have a definition:\n\"newProfile\": {\n        \"type\": \"object\",\n        \"required\": [\n            \"id\"\n        ],\n        \"properties\": {\n            \"id\":{\n                \"type\": \"integer\",\n                \"x-nullable\": true\n            }\n        }\n    }\nThat was generated in models:\n```\ntype NewProfile struct {\n/* id\n\nRequired: true\n*/\nID *int64 `json:\"id\"`\n\n}\nfunc (m *NewProfile) validateID(formats strfmt.Registry) error {\nif err := validate.Required(\"id\", \"body\", int64(*m.ID)); err != nil {\n    return err\n}\nreturn nil\n\n}\n```\nSo  {\"id\": 0}  is invalid by current version of validate.Required. And {} leads to a runtime panic invalid memory address or nil pointer dereference, because of this int64(*m.ID)\nDesired behaviour is {\"id\": 0} - valid, {} - invalid, but no panic.\nAm I correct?\nCan you give some clarifications please?\n. @casualjim Yes, you are correct. I somehow messed the environment and stuck in previous version of the templates. Starting the server in a clean docker environment shows no issues with required fields. Shame on me. \n. ok\n. ",
    "bthibault": "Hmm ... I think I need to preserve sql types since this struct is tied to the db \nex. https://golang.org/pkg/database/sql/#NullFloat64 \nNull / nullable are just wrappers around that. I'm sure someone else must be dealing with database/sql and mapping their model definitions ...\n. ",
    "fiskie": "I'm having an import problem but only with these exact conditions:\n\nthe module's directory name is different to the namespace, and:\nthe module is located within the project vendor directory\n\nA module in $GOPATH will not have this problem. I think there's a bug with directory scan behaviour somewhere.. ",
    "nikhilm": "Apologies for not adding tests in the original PR. Will update this soon.\n. Fixed in #466\n. existing test suite passed locally, where should I put the new test and\nwhat can I use as an example for this kind of test? Thanks!\nOn Tue, Apr 5, 2016 at 4:46 PM, Ivan Porto Carrero <notifications@github.com\n\nwrote:\nI run tests locally like this:\ngo test $(go list ./... | grep -v vendor)\nAnother way to do it is:\ndocker build -t go-swagger:local -f Dockerfile.ci .\ndocker run --rm -it go-swagger:local ./hack/build-docker.sh\nAnd the last way to do it is:\ndrone exec\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/go-swagger/go-swagger/pull/466#issuecomment-206038391\n. The CircleCI failures don't seem to be my fault.\n. Sorry, between github's outage and something I was working on, I'm clearly not thinking straight.\n. \n",
    "njsrikar": "hi,\nAny chance you know the priority on this?\nI am trying to get swagger.json be available on the same path as the api's basePath. Is it possible on current go-swagger implementation?\nThanks\nSrikar. thanks.\nthats correct, but these files will get overwritten if/when you run the generator again.. thanks for the pointer though, I was able to get it working by using Spec in setupGlobalMiddleware()\nif r.URL.Path == swaggerJSONPath {\n            swaggerSpec, err := loads.Analyzed(SwaggerJSON, \"\")\n            if err != nil {\n                logger.Log.Error(\"Failed to get swagger spec json.\", nil)\n            }\n            rawSpec := swaggerSpec.Raw()\n            rootHandler := middleware.Spec(path+\"/ui/\", rawSpec, http.HandlerFunc(func(rw http.ResponseWriter, r *http.Request) {\n                rw.WriteHeader(http.StatusFound)\n                return\n            }))\n            rootHandler.ServeHTTP(w, r)\n            return\n        }. ditto with my case as well.\n@casualjim thanks for the tip on --skip-main ..will come in handy.. am facing the exact same problem. @gregmarr  can you throw some light on your work around?. gotcha, thanks for the example. . ",
    "ccamel": "Same than @gregmarr, our REST API is behind an API gateway (Kong actually). As a workaround, \nI just needed to fix the location of the swagger.json in the html doc (the gateway strips the uri by default).\nWhile waiting for a fix, it does the job.\n```go\nfunc setupGlobalMiddleware(handler http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        if r.URL.Path == \"/docs\" {\n            redocOpts := middleware.RedocOpts{\n                SpecURL: urlPrefix + \"/swagger.json\",\n            }\n        middleware.Redoc(redocOpts, handler).ServeHTTP(w, r)\n        return\n    }\n    handler.ServeHTTP(w, r)\n})\n\n}\n``. @JoakimSoderberg I faced the same issue. Theoption` you passed is not a pointer as expected by the go-flags lib, so it panics here.\nAnd this leads to a dead lock in the generated Shutdown() function in server.go called by the defer in main.go because the shutdown message is sent to a nil channel (channel axioms:  A send to a nil channel blocks forever)\nIn main.go:\ngo\nfunc main() {\n   ...\n   defer server.Shutdown()\n   ...\nin server.go:\ngo\n// Shutdown server and clean up resources\nfunc (s *Server) Shutdown() error {\n    if atomic.LoadInt32(&s.shuttingDown) != 0 {\n        s.Logf(\"already shutting down\")\n        return nil\n    }\n    s.shutdown <- struct{}{}\n    return nil\n}\nIf you add & in front of the struct it works fine.. @fredbi Sure. It would be nice to have this one fixed, although few people may be concerned by this issue. \nAt your convenience, I can have a look on this one and propose a PR.. ",
    "aroslov": "Working example (in configure_name.go):\n``` go\nimport \"github.com/rs/cors\"\nfunc setupGlobalMiddleware(handler http.Handler) http.Handler {\n    handleCORS := cors.Default().Handler\nreturn handleCORS(handler)\n\n}\n```\n. More than happy to do it - but how? Brew seems to install an old one. The github version doesn't create the alias for the 'swagger' command to run the generator.\n. Yes, I've done that, how do I get swagger in command line? Symlink?\n. Thank a lot, it's all working now!\nPerhaps you should kill the brew version - it only confuses things.\n. ",
    "Sef1995": "This is not working for me, I still get 405 Method Not Allowed. Is there a new fix for this?. @Ravenwater have you managed to fix this by now? If so, how did you do it?. Is it possible to do this without a http.RoundTripper? I'm using gock for mocking the request in a test. But the test won't work because the roundtripper var is already set. See; https://github.com/h2non/gock/issues/27. ",
    "Brian-McM": "ok sweet thanks. When's the next swagger version coming out?\n. Actually, I'm not seeing a way to get the header from the params object. What version is this in? Besides the request values, I only have BindRequest available to me.\n. So the X-Request-Id isn't isn't being set after I add this. Here's my swagger:\n/score:\n    post:\n      parameters:\n        - name: X-Request-Id\n          in: header\n          type: string\n        - name: recipients\n          in: body\n          description: A list of recipient emails to score\n          required: true\n          schema: \n            $ref: '#/definitions/PostScoreRequest'\n      responses:\n        '200':\n          description: Ok\n          schema:\n            $ref: '#/definitions/RecipientListScore'\n        '400':\n          description: Bad Request\n          schema:\n            $ref: '#/definitions/ErrorResponse'\n. I won't, I'll try this out. Thanks for the quick responses!\n. Yes and no. I still couldn't get a map to the request object, because that id is a randomly generated one (remember, I need the http.Request object to get a request context using gorilla libraries). However, I made my own request context map that uses that id as the key and I pass that id through to the parameters in the request.\nAs great as I think go swagger is, I think it's not great that you get ride of the original request object and feed in your own. That potentially makes a lot of great http golang libraries, like the one mentioned, useless as the require items from that requests object, or the request object itself as it's used to map values. It would be great to have this in the future so that I don't have to make my swagger spec include a request ID just so I can pass through a context ID to my handlers.\n. ",
    "zasran": "Seems like embedded interface does not cause error anymore, maybe this fixed it https://github.com/go-swagger/go-swagger/commit/6a060045f0c71475b6932bfd327387af081adcec\nIt seems the embedded interface is ignored (don't see it in generated json) but there is a function in scan/schema.go parseInterfaceType that parses interface. Given that the interface in Go can only have functions which will never be part of Rest API, why is interface parsed?\n. After further investigation we figured out that based on Go builtin doc https://golang.org/pkg/builtin/ the following changes in swaggerSchemaForType might make sense:\n- ADD byte: prop.Typed(\"integer\", \"uint8\")\n- ADD complex128, complex64 should cause error, no default JSON marshaller\n- CHANGE error\n  - OLD: prop.Typed(\"string\", \"\")\n  - NEW: error, it's an interface with no default JSON marshaller\n- CHANGE rune\n  - OLD: prop.Typed(\"string\", \"\")\n  - NEW: prop.Typed(\"integer\", \"int32\"), doc says rune is alias for int32, it's encoded as a number\n- ADD uintptr: prop.Typed(\"integer\", \"uint64\")\nNote about the error: some implementations of error interface might be JSON encoded as a string however it seems to be dangerous to assume that it's always the case, e.g. errors.New creates error that is encoded as JSON empty object {}.\nIf anybody wants to play with this https://play.golang.org/p/4l2AKRz4LO demostrates how Go builtin types are encoded to JSON.\nPlease let me know what you think about these suggestions.\n. Can join slack team, which one?\nError - yes, that's tricky, string makes sense lot of times. In general it's the same problem as other objects with JSON marshaller. They all show up as object in swagger model but might be actually something else in JSON representation (which is the opne that is relevant to Rest API). E.g. using guregu null makes swagger docs misleading (that was another issue I planned to file, how to deal with these types of objects)\n. Makes sense, adding for the valid types that we missed.\nNot sure how to add test for the complex* types since it's a negative test, meaning parsing should fail. Would it make sense to add a test to classifier_test.go, something similar to other negative tests like TestDuplicateAnnotations?\n. Updated pull request, added missing positive unit tests (byte, uintptr).\n. ",
    "ZandorZ": "I'm still having the same problem. I'm using Linux Ubuntu 16.4, Go version 1.7.3. I'm also using Goa to generate  swagger file\nhttps://gist.github.com/ZandorZ/cc6e4a27bb634f91d058e017ff45b761. sorry, rename the gist file wrong\ni'm already using the .yaml extension, but tried with both. Sorry, actually my problem is not when generating the code from yaml file, but using the generated client. I get the same message \"invalid character '\u00ef' looking for beginning of value\" when executing the client code. @GlenDC Dev . I generated the client code again using yaml file this time and the error changed \nMy main.go https://gist.github.com/ZandorZ/c62c8c5dbad10acf3fc7789e9308a4df\nAnd the output: \n\nGET /api/municipio HTTP/1.1\nHost: localhost:8080\nUser-Agent: Go-http-client/1.1\nAccept: application/gob\nAccept: application/json\nAccept: application/x-gob\nAccept: application/xml\nAccept-Encoding: gzip\n\nHTTP/1.1 200 OK\nContent-Length: 264\nContent-Type: application/bj.portal.municipio+json; type=collection\nDate: Tue, 31 Jan 2017 16:23:23 GMT\n\"\ufffd\ufffdMunicipioCollection\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdIDNome\nANTONIO OLINTO                      \ufffd\ufffd\ufffd\ufffd\nBALSA NOVCONTENDIRATI\nLAPA\nPAULO FRONTINEPALMEIRA\n             QUITANDINHA        REBOU\u00c7AS\u2592SAO JOAO DO TRIUNFO\u2592SAO MATEUS DO SUL\n2017/01/31 14:23:23 no consumer: \"application/bj.portal.municipio+json; type=collection\n. I'm sorry. Actually this is the code that i'm having that issue\nhttps://gist.github.com/ZandorZ/0c97ddf6f9ea4369da7ae80a17b72d4e\n\nGET /api/municipio/1 HTTP/1.1\nHost: localhost:8080\nUser-Agent: Go-http-client/1.1\nAccept: application/gob\nAccept: application/json\nAccept: application/x-gob\nAccept: application/xml\nAccept-Encoding: gzip\n\nHTTP/1.1 200 OK\nContent-Length: 51\nContent-Type: application/json\nDate: Tue, 31 Jan 2017 17:58:36 GMT\n\ufffd\ufffd\ufffd\ufffdIDNome\n          \ufffd\ufffdANTONIO OLINTO\n2017/01/31 15:58:36 invalid character '\\x1c' looking for beginning of value\n. Nevermind, I followed your advice and changed the \n\nProducesMediaTypes: []string{\"application/json\"},\n        ConsumesMediaTypes: []string{\"application/json\"},\n\njust to accept \"application/json\" and it worked, removed the other options: \"application/x-gob\", \"application/xml\"\nthank u for the answers. @GlenDC  I had the same problem and Instead of httptransport.JSONConsumer()\ni had to change to:\nruntime.JSONConsumer()\nfrom import \"github.com/go-openapi/runtime\". ",
    "Vadskye": "I think this was fixed in https://github.com/go-openapi/runtime/pull/4.\n. ",
    "IvanGoncharov": "@casualjim Maybe I can help you to chew this cucumber :smile: \nIf you have some question or feature requests, please open an issue.\nWe can also chat in Gitter: https://gitter.im/APIs-guru/api-models\n. ",
    "darkship": "Also with numbers. Trying to set {total: 0} results into { }. x-nullable: false doesn't help.\n```\n \"definitions\": {\n    \"stats\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"total\": {\n          \"type\": \"integer\",\n        },\n      }\n    }\n```. ",
    "fiorix": "What does the API look like with this change? I'm curious.\n. Yeah because it's comparing the good name to the old typo api.Mulitpart.... Didn't look back in the code but I'd guess it is missing more changes. Notice I had also fixed the same typo in go-openapi/errors so it's possible there's more in other packages. \n. Should be good now.\n. ",
    "jlburkhead": "closing since the pr for this was merged\n. ",
    "Hectorhammett": "Is it possible to add to Swagger a json:\"-\" field? Basically the other way around of this post.. @fredbi  Thanks for the response! I will try it on the next days and will response the results. Thanks!. ",
    "rookie7799": "Howdy, \nIs it possible to skip a field with some special syntax under swagger:parameters and not just with json:\"-\" ? Eg:\n// swagger:parameters listBars\ntype BarParam struct {\n// skip: true\nField string `json:\"field\"`\n.... Right, but I'm using the same struct elsewhere that is not part of swagger\nand it needs that 'json' tag.\nOn Mar 2, 2018 5:28 PM, \"Ivan Porto Carrero\" notifications@github.com\nwrote:\n\nif you're sending it with the json doesn't it need to be included in your\ncontract?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/go-swagger/go-swagger/pull/521#issuecomment-370071153,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABL13hhIGFc4JspnuNm2BIYKSZXDYAW-ks5tacejgaJpZM4Igimx\n.\n. Sorry for my lack of knowledge here, I have this snippet of code:\nulp := puser.NewUserLoginParams()\npl := models.PostLogin{Email: c.PostForm(\"email\"), Pwd: c.PostForm(\"pwd\")}\nulp.SetBody(&pl)\nula, err := client.User.UserLogin(ulp)\n\nHow would I get the payload info from err? I mean wouldn't I need to know which response to \"type assert\" to ?\nThank you for your help!\n. This is the func that was generated by \"swagger generate client\"\n```\n/\nUserLogin User logging in\n/\nfunc (a Client) UserLogin(params UserLoginParams) (*UserLoginAccepted, error) {\n    // TODO: Validate the params before sending\n    if params == nil {\n        params = NewUserLoginParams()\n    }\nresult, err := a.transport.Submit(&runtime.ClientOperation{\n    ID:                 \"user_login\",\n    Method:             \"POST\",\n    PathPattern:        \"/user/login\",\n    ProducesMediaTypes: []string{\"application/json\"},\n    ConsumesMediaTypes: []string{\"application/json\"},\n    Schemes:            []string{\"http\", \"https\"},\n    Params:             params,\n    Reader:             &UserLoginReader{formats: a.formats},\n    Context:            params.Context,\n    Client:             params.HTTPClient,\n})\nif err != nil {\n    return nil, err\n}\nreturn result.(*UserLoginAccepted), nil\n\n}\n```\nNot sure if its even possible to get an actual Payload data from err.. ",
    "shirou": "I confirmed. Thank you very much!\n. ",
    "haroldcarr": "thanks\n. ",
    "baronfel": "Ditto here!  If you have a response type of file, the response.Payload.Data is of type multipart.File which doesn't implement io.Writer and so the ByteStreamConsumer blows up there when I try to use it in an io.Copy similar to the above.. ",
    "keithballdotnet": "I am also encountering this issue.. how about just replacing the string / binary with []byte ?. ",
    "kayla90": "I'm also trying to access the dynamic API definition page and it is not finished. Is that dynamic API definition still a feature?\n. I was facing the same issue, but I find out this can be mitigated by setting --scan-models option to be true, which force add the swagger annotated model into the swagger spec. And then the response will fail swagger check due to no description, then have to add description part here https://github.com/go-swagger/go-swagger/blob/master/scan/validators.go#L602. \nHope this response model bug can be fixed soon!\n. ",
    "manisenkov": "Since new documentation website is released, I think this issue could be closed.\n. ",
    "themalkolm": "@joeblew99 you probably already figured it out. To help other googlers: don't forget to add /v1 prefix or or whatever you have specified in basePath.\n. It breaks everything but I couldn't find any BREAKING change for 0.6.0.\n. Probably you should regenerate all examples, revisit all docs and tutorials as they are simply broken now. I mean this project is all about generating code. This release breaks this very thing for any existing code.\n. @casualjim no, x-nullable doesn't help as if, say, int64 field is set to 0 then server code still treats it as a missing value. Sure, this happens before 0 value is the zero value for int64 type.\n. @vburenin meh, I'm ok to have zero values  everywhere by default. I we have golang client talking to golang server. Having pointers makes it awkward on both sides.\n. I close this issue as we decided to simple not upgrade. Doesn't worth the effort for us.\n. ",
    "nathanwilk7": "I have precisely the same issue. @lukeautry, could I ask if you ever found a workaround?. Also, I'm not familiar with how go-swagger works, but could the spec generator use MarshalJSON to generate the response schema?. ",
    "aocole": "I have seen this as well\n. I am having the same problem. @frosenberg, were you able to work around this?\n. That's a good workaround @frosenberg. I am going to backport @casualjim's fix from #558 in to a fork until I can upgrade after #467\n. ",
    "williambailey": "I must admit that I only ever tried a struct and not an interface. However the outcome is the same if its a struct created from a definition in the swagger specification file or if its a standalone struct defined in another library.\n. ",
    "klaasn": "For what I see the bug was introduced in the oauth2 merge here:\nhttps://github.com/go-swagger/go-swagger/commit/8ed1d59afc9a52f05f035c7ff299cd1757a1b799\nLine 150 in generator/templates/server/builder.gotmpl has been \"simplified\" and the bug was introduced. The footprint of the API key function is not func(string) ({}interface, error) when a custom principal is used, so a type error appears.\n. Works for me now.\n. ",
    "bfreis": "An alternative fix would be to initialize the variable in an init() block, as those execute when the packages are imported, therefore necessarily before goroutines are created so they are guaranteed to see it correctly initialized. \n. Looking at the gotmpl file, I found the same issue a few other times. Fix should be the same. I just implemented the fix (based on func init(){...} as in the comment above) and submitted a PR.\n. True! I probably didn't run my tests after regenerating the bindata.go file :(\nMaybe panic(err) would be appropriate there? If we can't initialize the validator, it's because the validator code must be wrong, and not something that client code should be able to capture and deal with?\n. ",
    "mariusmagureanu": "I'm digging dead bodies here - I ran into the same problem as @aroslov irw \nundefined: spec.Document\nI've installed swagger from sources, pulled dependencies and did the proper path replacements. \nswagger version returns 0.5.0\nI've looked a bit into the spec package, there's no Document type - hence the error, somewhere I guess I'm way off with code versions!\nAnything I may still be overlooking here? Thanks.\n. Thanks, just got my swagger server up and running. \n. ",
    "compasses": "OK thanks.\n. ",
    "nathany": "While I agree with the project vs. product sentiment, it's difficult to help document something I don't understand. \ud83d\ude15 \nI have swagger generate working with routes, but I'm having trouble defining models and responses and link it all together for an existing code base.. @GlenDC Thanks for the link. I see swagger:operation is documented there but not yet on https://goswagger.io.\nRight now I'm having some trouble getting the Responses: section working for swagger:router, including some routes that have just a status code with no other response. While searching around the code, I also saw description: for the route responses. There seems to be some inconsistency between what's documented and the examples lying around, which makes me less certain why validation is failing (also #859).\nWhat I think would help the most is a tutorial that walks through generating swagger.json from code annotations, assuming someone is coming from an existing code base (even if it were a to do app).. I've decided to write swagger.yml instead of using the code annotations for now. It's going well.. Regarding the other questions, in the swagger.yml I just write something like this for a route:\nresponses:\n  201:\n    description: Created\n  400:\n    description: Bad request\n    schema:\n      $ref: \"#/definitions/error\"\n  401:\n    description: Unauthorized\n  500:\n    description: Unexpected error\n    schema:\n      $ref: \"#/definitions/error\"\nBut I was having trouble getting the equivalent to work as code annotations. Perhaps I just wasn't formatting it correctly.. Ok. Thank you.. @aleksclark By all means, if the issue is in a dependency, it makes sense to open an issue there. (I had no way of knowing that).. ",
    "craSH": "While this was fixed in code, the specification document was not updated to reflect that. Could someone do so?\nhttp://swagger.io/specification/ - does not list unsigned types (uint32, uint64, complex128, etc.). I see - sorry, I'm coming in to this as an outsider :) I'm working on a project that uses Swagger (it is not Golang based) and uses both the int64 and uint64 types. I came to the spec to try and verify that uint64 was a valid type, which per the spec I found, is not. It's just confusing, I am trying to find a definitive list of types that are valid within the Swagger IDL, or documentation of mapping those to their individual languages/implementations.\nThanks, and sorry if this isn't exactly the right venue for this conversation!. ",
    "dshil": "@casualjim Thanks for quick response, now it's ok. I'll close the issue.\n. ",
    "runcom": "@casualjim ty\n. or put it another way - there could be a way to name the validation only files with a _validation.go suffix, does it work? but this way I can't have a validation only pkg\n. Thanks a lot! \n. Can we leave this  open for the pkg work which could be done in the future? \n. I can't reproduce it anymore - not sure what's happened\n. I see thx I think I can close this\n. ",
    "wangweihong": "@vburenin\nThanks for your help . It works fine now. I don' know why. I just restart my machine, and re-setup swagger command.\n. ",
    "sheepbao": "I have the same problem!\n$ cat swagger.yml\nconsumes:\n- application/io.goswagger.examples.todo-list.v1+json\ndefinitions: {}\ninfo:\ndescription: The product of a tutorial on goswagger.io\ntitle: A To Do list application\nversion: 1.0.0\npaths: {}\nproduces:\n- application/io.goswagger.examples.todo-list.v1+json\nschemes:\n- http\nswagger: \"2.0\"\n$ swagger validate swagger.yml \n2016/07/15 14:37:54 invalid character 'c' looking for beginning of value\nWhy?Please help.\n$ go env:\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"linux\"\nGOOS=\"linux\"\nGOPATH=\"/home/lstbao/work/listomego:/home/lstbao/gowork\"\nGORACE=\"\"\nGOROOT=\"/home/lstbao/software/go\"\nGOTOOLDIR=\"/home/lstbao/software/go/pkg/tool/linux_amd64\"\nGO15VENDOREXPERIMENT=\"1\"\nCC=\"gcc\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0\"\nCXX=\"g++\"\nCGO_ENABLED=\"1\"\n$ go version\ngo version go1.6.2 linux/amd64\n. ",
    "flier": "can we have a TODO list about gRPC backend?\n- [x] generate protobuf file base on schema\n- [x] generate gRPC service server stub\n- [x] generate gRPC service client stub\n- [x] validate parameters base on schema\n- [x] use TLS based secure connection in gRPC\n- [ ] support stream based parameter\n- [ ] support middleware\n- [ ] export generated .proto file\n- [ ] ~~migrate templates to use go 1.5 or earlier syntax~~\n- [ ] add/update gRPC examples\n- [ ] performance test tool/reports\n. not yet, just moved focus to other emergency on work :S\nIvan Porto Carrero notifications@github.com\u4e8e2016\u5e747\u670822\u65e5\u5468\u4e94 \u4e0a\u53481:11\u5199\u9053\uff1a\n\nare you done with this?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/go-swagger/go-swagger/pull/583#issuecomment-234320147,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AADwsgsGNkL5jS6PD-sb5u0jjQ1sDhJJks5qX6hdgaJpZM4JCApZ\n.\n. \n",
    "coccyx": "Did this ever go anywhere?  A few of the services we're building will suffer from a large penalty from the serialization costs of JSON versus something like Protobuf so we've been considering gRPC.  We'd like to continue to define the APIs via Swagger and translate.  There are some other initiatives to take Protobufs and generate Swagger which is also an option, but remaining with go-swagger would be the most preferable.. ",
    "bobvanluijt": "Also curious to know what the status is, would like to support Protobuf too.. Thanks all, completely misunderstood this... Got it now.. Wonderful, thanks @casualjim.\n\nDid a minor pull request: https://github.com/go-swagger/go-swagger.github.io/pull/8\nProtobuf would be very much appreciated \ud83d\udc4d \n\nCheers. Hi @casualjim, thx but I actually mean the expected body.\nIf I POST a body which is not the body from the definition it is still accepted.\nExample\nIf I have this definition\ndefinitions:\n    Example:\n        description: Example definition.\n        properties:\n            foo:\n                default: 'case'\n                description: This is a test string\n                type: string\n            bar:\n                default: 'case'\n                description: This is another test string\n                type: string\nand I POST:\n{\n  \"test\":\"case\"\n}\nIt still is 'valid'. That is why I would like to validate params.Body against what is in the Swagger document.. Check, thanks!. Thanks @casualjim, can I help there? If you can hint me towards a place where you would like to see such an addition I can see if I can help.. Update, the swagger file was incorrectly formatted.\nFunny thing, it did pass the swagger validate command though, to recreate the issue you can use the swagger file as mentioned above.. @johnciocoiu can you help @Ravenwater?. Sorry if I was unclear @casualjim, what I meant was:\ngolang\napi.ApplicationCborConsumer = runtime.ConsumerFunc(func(r io.Reader, target interface{}) error {\n    unmarshalled := doCborUnmarshalling(r)\n    // What to do with `unmarshalled` variable?\n}). Wonderful, that's exactly what I was looking for. Thanks @casualjim . ",
    "doswell": "I have a working fix at the moment for my needs, however it creates a new Response struct for returning from the calls. Under that struct are then the OK or *Created structs.  ie;\ntype AddGroupResponse struct {\n        AddGroupOK *AddGroupOK //200 response\n        AddGroupCreated *AddGroupCreated //201 response\n        AddGroupNotFound *AddGroupNotFound //404 response\n    }\nThe problem with this (in terms of making it a PR as is) is that even for single (success) responses it creates the Response struct, so that would break any existing generated client. \ntype GetGroupResponse struct {\n    GetGroupOK *GetGroupOK //200 response\n    GetGroupNotFound *GetGroupNotFound //404 response\n}\nDoes the Response struct make sense? is there an alternative? \n- Should always returning the Response struct instead of a OK/Created be an option? (I personally like this, as any changes to the API/swagger doc may be less impactful) \n- Should the fields under the struct be prefixed with the method name similar to the models? Or just use the friendly names of the http status codes ie;\ntype AddGroupResponse struct {\n        OK *AddGroupOK //200 response\n        Created *AddGroupCreated //201 response\n        NotFound *AddGroupNotFound //404 response\n    }\nSince AddGroupOK and AddGroupCreated reall yjust have Payload under them (are there other scnearios where there are more fields?) ie;\ntype AddGroupCreated struct {\n    Payload *models.GroupDetails\n}\ntype AddGroupOK struct {\n    Payload *models.GroupDetails\n}\nI'm inclined to target a struct of;\ntype AddGroupResponse struct {\n        OK *models.GroupDetails //200 response\n        Created *models.GroupDetails //201 response\n        NotFound *models.EmptyPayload //404 response\n        resultCode int\n    }\n    func (r *AddGroupResponse) Code() int {\n          return r.resultCode\n    }\n?\n. ",
    "aep": "@casualjim nope. thanks and sorry for the noise.\n. this exact example doesnt work for me. Person is simply not generated and definitions is empty.. @casualjim erf, thanks alot!. ah yes, it could be me not understanding gopath.\n````\nmkdir foo\ncd foo \ncat > main.go <<EOF\npackage main\n//swagger:response Foo\ntype Foo struct {\n    Bar int\n}\nEOF\nGOPATH=$PWD swagger generate spec\nunable to determine package for /tmp/foo/main.go\n````\nnote that this only happens with response. everything else generates fine. strange, but thanks alot for the explanation!\nI'm using gom to ease the pain that is gopath, and gom exec didn't do the right thing in this specific case apparently. It would be nice if go-swagger just failed completely rather than just for response, so gom users can see the issue.. actually this fixed my issue with gom:\nmkdir src\nln -s .. src/main\ngom exec sh -c \"cd  src/main; swagger generate spec\"\n. ",
    "dhoelle": "@vburenin Anything I can do to help?\n. @Ravenwater we have the same issue. Our organization decided to keep the API and subsystem layers separate, and to perform deep copies between them. The runtime performance costs are acceptable to us, and worth it to keep API-layer dependencies out of our core library. If someone can think of a better solution we would love to know!\nW.R.T. your second question, I'm not sure I fully understand it.\nIf your question is \"How do I write arbitrary response bodies from go-swagger generated server code?\" (e.g. from subsystem structs that you have marshaled) then you may want to write your own middleware.Responder, which gives you direct access to the underlying http.ResponseWriter. (At this point, though, I wonder: why use go-swagger instead of a lighter-weight framework?)\nIf your question is \"how can I generate a swagger spec from my subsystem structs?\", then you should check out the swagger generate spec CLI command.\nIf I've missed the meaning of your question, my apologies, and if you can provide a more concrete example of your use case I'll try to help more!\n. ",
    "linearregression": "@casualjim \nDid that but the \"github.com/go-openapi/swag\"  is still missing from import\n. @daved   Does not seem to work for me. Still getting swag.IsZero undefined.\n. @Simon-Li  why is this closed. I am seeing something similar. Did you find a solution?. The error goes away if juse use concrete type like just array \ninstead of a compound one like in the first comment. If you do something like the first comment shows to use type object to return a primitive type and then a list of a struct the the erro comes back . ",
    "jdamick": "i encountered the same issue and after regenerating it did add the correct imports..  but it is a little bit confusing if you generate for a fresh project and then vendor and then you have regenerate for it to add those imports.\n. maybe a parameter to do that introspection or else just always add the imports so that then when you run glide (or whatever) it will just do the right thing.  Seems like that would be majority case for people just starting off?\n. ",
    "JrCs": "I have the same problem: \"github.com/go-openapi/swag\" is still missing SOMETIME !\nI have start a number of swagger generate server commands and SOMETIME the import is here, SOMETIME is not.\nThe import github.com/go-openapi/runtime is in my vendor directory\nThe code i'm using to test (using swagger version 0.8.0 (d1a0b6c1)): \nbash\nfor i in $(seq 1 20); do\n    echo -n \"Test $i:\"\n    swagger generate server &>/dev/null\n    grep -q 'github.com/go-openapi/swag' models/application_set_report.go && echo \"Found\" || echo \"NOT found\"\ndone\nResult:\nTest 1:Found\nTest 2:Found\nTest 3:Found\nTest 4:Found\nTest 5:NOT found\nTest 6:Found\nTest 7:Found\nTest 8:Found\nTest 9:NOT found\nTest 10:Found\nTest 11:Found\nTest 12:NOT found\nTest 13:NOT found\nTest 14:Found\nTest 15:Found\nTest 16:Found\nTest 17:Found\nTest 18:Found\nTest 19:Found\nTest 20:Found\nPerhaps it's a bug with go-imports that didn't see that the imports are in the vendor directory and so doesn't add the import line ?. Ok i found the bug ! \nIt's in go-imports. When go-imports scan the directories if it found an error (like a directory that it can't read) it will stop the scan and so no import is found and the lines not added in the import section.\nIt easy to reproduce: create a directory that can't be read by the current user in the vendor directory:\nbash\nsudo mkdir vendor/a\nsudo chmod 0 vendor/a\nand try to generate the code with swagger and no import will be found.\n. The best to resolve such error, is perhaps to add:\ngithub.com/go-openapi/runtime/middleware\ngithub.com/go-openapi/swag\nby default in the templates files where they can be used.\nSo go-imports, will remove this imports if not used in the code, instead of adding missing import. The solution \"fix\" also the problem when vendor directory have missing pkg: the compilation will fail reporting that the pkg is missing.. Comment removed, and PR rebase from master.. Sorry for that. I used some comments to find what's templates are used.. ",
    "taojwmware": "I am writing transport wrapper to auto-retry Submit for some error code. Without error code, there is not generic solution to write a wrapper. It will end up with enumerating all the higher level errors representing exactly the same http status code, for example: 404. . The example for default response is special: https://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/client/todos/find_responses.go#L80\ntype FindDefault struct {\n    _statusCode int\nPayload *models.Error\n\n}\nbecause it has _statusCode. However, if any status code also defined/mapped in swagger, the _statusCode field is gone. There is no way to get the status code in such case. \n. It works now. Thanks for your help!. The following test code from https://golang.org/src/net/http/client_test.go shows the req.GetBody is set to nil not by default. Is there any way to prevent go-swagger from setting it to nil? \ngo\n// Don't follow a 307/308 if we can't resent the request body.\n  func TestClientRedirect308NoGetBody(t *testing.T) {\n    const fakeURL = \"https://localhost:1234/\" // won't be hit\n    ts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {\n        w.Header().Set(\"Location\", fakeURL)\n        w.WriteHeader(308)\n    }))\n    defer ts.Close()\n    req, err := NewRequest(\"POST\", ts.URL, strings.NewReader(\"some body\"))\n    if err != nil {\n        t.Fatal(err)\n    }\n    c := ts.Client()\n    req.GetBody = nil // so it can't rewind.\n    res, err := c.Do(req)\n    if err != nil {\n        t.Fatal(err)\n    }\n    res.Body.Close()\n    if res.StatusCode != 308 {\n        t.Errorf(\"status = %d; want %d\", res.StatusCode, 308)\n    }. ",
    "Miroku87": "@taojwmware \n\nIt works now. Thanks for your help!\n\nCan you please provide an example code?\nThank you!. ",
    "ericpromislow": "Not a bug. Turns out I ran a program that installed a forked version of go-swagger and then set remote back to here to cover its tracks. Interesting....\n. ",
    "Raffo": "Wouldn't this generate roughly the same structure of the server? I don't want to change minor details, I want to have code that looks totally different (but only for the server part, models and clients are more than okay) while using code the parsing and validation from go-swagger. This means different number of files and different functionalities. This is why I thought that having something that could return the AppGenerator could be enough, but I am interested in understanding your opinion. \n. Yeah, I would love to have something much simpler. I do not have the current project opensource, but I can create a gist to give you an idea as all this part can actually be opensourced. I will then work on the PR so that we can discuss further. \n. @casualjim The server will look somehow similar to https://github.com/zalando/chimp/blob/master/api/server.go where the routes part will be generate from the swagger def. The handlers, similar to  https://github.com/zalando/chimp/blob/master/api/handler.go will be able to use something like this https://gist.github.com/Raffo/0bcc37995a15bd383944f099d94d1b82 for response generation. I hope that at least the idea is clear: I want to build a very opinionated server, with only few parts auto generated in order to satisfy an use case that pretty much matches the need of our project but to do so I want to re-use the parts of go-swagger. \n. @casualjim Sorry for the delay, but I didn't have time at all to work on this. I quickly hacked something to give you an understanding of what I meant with this issue here: https://github.com/Raffo/go-swagger/commit/a196c5954def2bb9f1b335f7bb8011c49c5c1f08\nEssentially the only thing that was done is: \n- Making appGenerator public and accessible from the outside\n- Created a \"main\" that can be used to generate any template using Go's templates. This main should be evolved in just executing the templates based on the content of appGenerator (now it is only an hack) -> https://github.com/Raffo/go-swagger/blob/a196c5954def2bb9f1b335f7bb8011c49c5c1f08/cmd/swagger/commands/generate/cmd/main.go \nPlease note that all of this is an hack and that is not definitive or well done. I just wanted to bump the discussion and give a better understanding of what I meant before. \n. Up, any update? \n. Yes, but do you think it would be actually possible? It looks like the code that is generated has an enforced structure... could you give me an hint on how you would change the code? \n. Nice, let me know if you would love help to get it finished and if so, what kind of help! \n. I didn't get how to test it. I tried the following in github.com/go-swagger/cmd/swagger\n```\n go build .\nmir:swagger raffo$ swagger generate server --help\nUsage:\n  swagger [OPTIONS] generate server [server-OPTIONS]\ngenerate all the files for a server application\nHelp Options:\n  -h, --help                 Show this help message\n[server command options]\n      -f, --spec=            the spec file to use (default: ./swagger.json)\n      -a, --api-package=     the package to save the operations (default: operations)\n      -m, --model-package=   the package to save the models (default: models)\n      -s, --server-package=  the package to save the server specific code (default: restapi)\n      -c, --client-package=  the package to save the client specific code (default: client)\n      -t, --target=          the base directory for generating the files (default: ./)\n      -T, --template-dir=    alternative template override directory\n      -A, --name=            the name of the application, defaults to a mangled value of info.title\n      -O, --operation=       specify an operation to include, repeat for multiple\n          --tags=            the tags to include, if not specified defaults to all\n      -P, --principal=       the model to use for the security principal\n          --default-scheme=  the default scheme for this API (default: http)\n      -M, --model=           specify a model to include, repeat for multiple\n          --skip-models      no models will be generated when this flag is specified\n          --skip-operations  no operations will be generated when this flag is specified\n          --skip-support     no supporting files will be generated when this flag is specified\n          --exclude-main     exclude main function, so just generate the library\n          --exclude-spec     don't embed the swagger specification\n          --with-context     handlers get a context as first arg\n          --dump-data        when present dumps the json for the template generator instead of generating files\nmir:swagger raffo$ grep -R \"config-file\" .\n./commands/generate/server.go:  ConfigFile    flags.Filename long:\"config-file\" short:\"C\" description:\"configuration file to use for overriding template options\"\n```\nAm I doing something wrong? \nThanks for your work! \nEDIT: I was using a wrongly compiled binary, this comment is outdated. \n. @casualjim with this example config: \nlayout:\n  application:\n    - name: configure\n      source: asset:serverConfigureapi\n      target: \"{{ joinFilePath .Target .ServerPackage }}\"\n      file_name: \"{{ .Name }}_client.go\"\n      skip_exists: true\n    - name: main\n      source: asset:serverMain\n      target: \"{{ joinFilePath .Target \\\"cmd\\\" (dasherize (pascalize .Name)) }}-server\"\n      file_name: \"main.go\"\n    - name: embedded_spec\n      source: asset:swaggerJsonEmbed\n      target: \"{{ joinFilePath .Target .ServerPackage }}\"\n      file_name: \"embedded_spec.go\"\n    - name: server\n      source: asset:serverServer\n      target: \"{{ joinFilePath .Target .ServerPackage }}\"\n      file_name: \"server.go\"\n    - name: builder\n      source: asset:serverBuilder\n      target: \"{{ joinFilePath .Target .ServerPackage .Package }}\"\n      file_name: \"{{ snakize (pascalize .Name) }}_api.go\"\n    - name: doc\n      source: asset:serverDoc\n      target: \"{{ joinFilePath .Target .ServerPackage }}\"\n      file_name: \"doc.go\"\n  models:\n    - name: definition\n      source: asset:model\n      target: \"{{ joinFilePath .Target .ModelPackage }}\"\n      file_name: \"{{ (snakize (pascalize .Name)) }}.go\"\n  operations:\n    - name: parameters\n      source: asset:serverParameter\n      target: \"{{ joinFilePath .Target .ServerPackage .APIPackage .Package  }}\"\n      file_name: \"{{ (snakize (pascalize .Name)) }}_parameters.go\"\n    - name: responses\n      source: asset:serverResponses\n      target: \"{{ joinFilePath .Target .ServerPackage .APIPackage .Package  }}\"\n      file_name: \"{{ (snakize (pascalize .Name)) }}_responses.go\"\n    - name: handler\n      source: asset:serverOperation\n      target: \"{{ joinFilePath .Target .ServerPackage .APIPackage .Package  }}\"\n      file_name: \"{{ (snakize (pascalize .Name)) }}.go\"\nit doesn't seeem to work and I don't get any meaningful log. Any idea of what could be wrong? Thanks again :-) \n. ",
    "atremblay-seniorlink": "From what I've found there's no way in go-swagger to link the value of a primitive inside Object 1 into a formatted string primitive in Object 2. It might not even be possible inside the OpenAPI spec. \nA swagger:response does have a pattern property, which would get you most of the way there,  that and a well-worded description is your best bet, I think.   \n. ",
    "rgarcia": "I should also note that there are a couple of things incorrect about this config:\n1. #definitions/Bar and #definitions/Baz should be #/definitions/Bar and #/definitions/Baz, respectively.\n2. There should be a description on the 200 response.\nThe online validator at http://editor.swagger.io passes once both of these are changed. go-swagger passes once (1) is changed. So there are perhaps two bugs here:\n- Whatever is causing go-swagger to hang on the config\n- (assuming editor.swagger.io is correct) go-swagger doesn't fail validation if a response lacks a description\n. @casualjim thanks, just ran that and pushed\n. looks like I need to update some tests...\n. ",
    "NickCiao": "Were you able to get around this?. Pardon my ignorance since I'm new to both swagger AND go.\nI'm not sure if I'm understanding your last reply.  \nI basically have the same issue as stated in the original post.\nI have a generic return struct defined as follows:\nGo\n// Generic API response\n// swagger:response defaultResponse\ntype Response struct {\n    Status string `json:\"status\"`\n    Code int `json:\"code\"`\n    // Can be a Foo or a Bar\n    Data interface{} `json:\"data\"`\n}\nI also have several other types that get shoehorned into the Data slot.  Here are two examples:\n`` Go\n// Some arbitrary data type\n// swagger:response\ntype Foo struct {\n    Id stringjson:\"Id\"Configs []Bazjson:\"configs\"`\n}\ntype Bar struct {\n    Id string json:\"id\"\n}\ntype Baz struct {\n    Name string json:\"name\"\n}\n```\nIs there a way to annotate this so as to generate valid swagger?  . the swagger web editor is what I'm using to validate the generated output.. So I updated my annotations like so and compiled with the --scan-models tag.  Yay, I have definitions now!\n`` Go\n// Generic API response\n// swagger:response defaultResponse\ntype Response struct {\n    Status stringjson:\"status\"Code intjson:\"code\"// Can be a Foo or a Bar\n    Data interface{}json:\"data\"`\n}\n// My Foo Struct\n// swagger:model\ntype Foo struct {\n    Id string json:\"Id\"\n    Configs []Baz json:\"configs\"\n}\n// My Bar Struct\n// swagger:model\ntype Bar struct {\n    Id string json:\"id\"\n}\n// My Baz Struct\n// swagger:model\ntype Baz struct {\n    Name string json:\"name\"\n}\n```\nBut I still don't know how to handle the inherent polymorphism of Data.  This is likely a syntax fail on my part but, let's say I have two routes:\n\nThe first route returns my generic response with a Bar in the Data field\nThe second route returns the same generic response, but with a Foo in the Data field\n\nIt seems like I would want to define two Response sub-types.  One with Bar in the Data field, and one with Baz.  Is there a way to do this via annotation?. ",
    "mxinden": "@NickCiao I am facing the same issue having a Data field of type interface{} with different possible structs (Foo, Bar) on different routes. How did you solve your Response sub-types problem?\n@casualjim Would you mind rephrasing your answer with the aid of @NickCiao example?. ",
    "Yaima": "I am having a similar issue when I create my response object:\n// 200\n// swagger:response eventsResponse\ntype ListResponse struct {\n// in: body\n    Meta *ListResponseMeta `json:\"meta\"`\n    Data *ListResponseData `json:\"data\"`\n}\n// Error\n// swagger:response errorResponse\ntype ErrorResponse struct {\n    // in: body\n    Status  int        `json:\"status\"`\n    Message string     `json:\"message\"`\n    Meta    *ErrorMeta `json:\"meta\"`\n}\nI keep getting the missing property type error and only seeing the data field (with missing type) in the generated JSON. \nIf I do something like:\n``\n// 200 OK\n// swagger:response eventsResponse\ntype EventList struct {\n    // in: body\n    Payload *ListResponsejson:\"events\"`\n}\n// swagger:model\ntype ListResponse struct {\n    Meta ListResponseMeta json:\"meta\"\n    Data ListResponseData json:\"data\"\n}\n```\nI am able to bypass the error, but I can't introduce this type of changes on the API.\nWhat's the best approach in this case? How can I bypass this?. It looks like OpenAPI 3.0 supports multiple hosts. What's the timeline for this release? We need to be able to specify multiple hosts: development, QA, and production.\n. How does  [mixin-OPTIONS] look like? Could this only have the host information that I need?. @casualjim, will something like this work? swagger swagger.json mixin swagger-prod.json What does [OPTIONS] refer to? Is it a json, yml? swagger [OPTIONS] mixin [mixin-OPTIONS]. @casualjim what does this mean?\n2018/11/29 10:32:39 args[0] = ./swagger.json\n2018/11/29 10:32:39 args[1:] = [./swagger-prod.json]\n2018/11/29 10:32:39 SecurityDefinitions entry 'oauth2' already exists in primary or higher priority mixin, skipping\nThis is the information I am changing, but the final json it's not being affected by them.\n{\n  \"host\": \"abc.def\",\n  \"securityDefinitions\": {\n    \"oauth2\": {\n      \"type\": \"oauth2\",\n      \"flow\": \"application\",\n      \"tokenUrl\": \"https://abc.def/v1/oauth/token\"\n    }\n  }\n}. Thanks, @casualjim. That works. Is there a way to change the Description to show something else instead of the struct name?. Thanks again @casualjim! My final question is regarding the definition was declared but never used in document warning. It appears in the models auto-generated by the code. Why is this showing?. Is there any annotation I could use to ignore some of the structs that belong to model.go? go-swagger seems to be outputting everything, not just the ones annotated with swagger:model. \n. This is the go code for the parameter and the generated doc: \n``\n// Prefix 200\n// swagger:parameters GetEvents\ntype Prefix struct {\n    // (string) Prefix(es) that you would like to filter all traffic stats by. **Optional**\n    // in: query\n    // required: false\n    Prefix stringjson:\"prefix\"`\n}\n\ntype: string\n          x-go-name: Prefix\n          description: >-\n            (string) Prefix(es) that you would like to filter all traffic stats\n            by. It is possible to filter by /24 and /32 . If more than one\n            prefix, separate each prefix with a comma. Optional\n          name: prefix\n          in: query\n\n```\nThis is the html code:\n<input type=\"text\" class=\"\" title=\"\" placeholder=\"prefix - (string) Prefix(es) that you would like to filter all traffic stats by. **Optional**\" value=\"\">\n. It wasn't edited. I will add the line between in and description.  Thank you. . I will give it a try. Thank you!. Thanks @casualjim . The parameters were created only for go-swagger, they are not used in the code. Will this work as well?. I started adding the specs for operations, but now I get this error when I generate the swagger doc:\n\noperation (getEvents): yaml: line 15: found character that cannot start any token\n\n// swagger:operation GET /v1/events Events getEvents\n    //\n    // Events\n    //\n    // Mitigation Events\n    //\n    // ---\n    // produces:\n    // - application/json\n    // parameters:\n    // - name: running\n    //   in: query\n    //   description: (boolean) Filters \n    //   required: false\n    //   type: boolean\n    //\n    // responses:\n    //  '200':\n    //    description: 200\n    //    schema:\n    //  \"$ref\": \"#/definitions/ListResponse\"\n    //  '400':\n    //    description: 400\n    //    schema:\n    //      \"$ref\": \"#/definitions/ErrorResponse\". Removing the --- generates a new error:\n\noperation (getEvents): no spec available to unmarshal. :) It looks like it might be related to the $, but how do I reference the definitions without using $ref \n\n\nI tried removing the $ and I get the same error. . @casualjim do you know why am I getting this error? operation (getEvents): yaml: line 30: found character that cannot start any token. I tried this but it doesn't work. Is it expecting a data type?\n// responses:\n    //  '200':\n    //    description: 200\n    //    schema:\n    //      '$ref': '#/definitions/ListResponse'. Thanks, @casualjim. . I need to have a different host information depending on the environment. I was wondering if there was a flag for this. For example: if I am generating the swagger in prod after deploying my API, I want to use host A, if I am doing the same in QA, I want to use host B. . So I could have a swagger_Prod with the host details merge the _Prod in a CI with the newly generated swagger, right? . Thanks!. @casualjim Could we use environment variables instead of mixin?. @ok11 I don't need the swagger definition, but the way to create the spec inside the go code. I want something like this for a POST. With the definition I created, the code is failing and I am not sure what's the best way to specify the body params.. Maybe an operation will work as well. Is the POST documented somewhere? https://goswagger.io/use/spec/operation.html#example. @casualjim, that part is clear, how about the body? Are the parameters type: body? Do we need to specify a body object and pass the 2 params in my case? . This is what I did and  I am getting this error:\noperation (clientCredentials): yaml: line 5: did not find expected key\n// swagger:operation POST /token Authentication clientCredentials\n//\n// Authentication\n//\n// client_id and client_secret\n//\n// ---\n// produces:\n// - application/json\n// parameters:\n// - name: Body\n//  in: body\n//  description: **client_id** and **client_secret**\n//  schema:\n//    \"$ref\": \"#/definitions/Body\"\n//  required: true\n//\n//  responses:\n//       '200':\n//          description: 'OK'\n//          schema: \"$ref\": \"#/definitions/AuthorizationToken\"\n//       '401':\n//          description: 'Unauthorized'\n//          schema: \"$ref\": \"#/definitions/ErrorResponse\"\nrouter.Post(\"/token\", api.clientCredentials). @casualjim so you are telling me that operation fails because of the spacing? But it doesn't pass the first line. If I name clientCredentials, api. clientCredentials, then the code fails silently skipping this operation. . @casualjim, the actual file doesn't have white spaces. . Thanks @casualjim . I got it to work using this code in my html. Maybe I will try to implement it in Go.\n```\n                tagsSorter: \"alpha\",\n                operationsSorter: (a, b) => {\n                    let methodsOrder = [\"post\", \"get\"];\n                    let result = methodsOrder.indexOf(a.get(\"method\")) - methodsOrder.indexOf(b.get(\"method\"));\n                if (result === 0) {\n                    result = a.get(\"path\").localeCompare(b.get(\"path\"));\n                }\n\n                return result;\n            }\n\n```. Thanks, @casualjim.. @casualjim If I switch the order of the arguments, it seems to work. Is this correct?\nswagger mixin -o ./swagger-final.json ./swagger-prod.json ./swagger.json\n2018/11/29 10:40:44 args[0] = ./swagger-prod.json\n2018/11/29 10:40:44 args[1:] = [./swagger.json]\n2018/11/29 10:40:44 SecurityDefinitions entry 'oauth2' already exists in primary or higher priority mixin, skipping. @casualjim  the problem is the formation of the json, not the string I am passing. . I am trying to get something similar to the way that operations work. Because PATCH isn't working for the swagger: operation, my choice is to go with swagger: route. \nIs there a way to have parameters similar to this one using swagger:route?\n// parameters:\n        // - name: endTime\n        //   in: body\n        //   description: body\n        //   required: true\n        //   schema:\n        //       \"$ref\": \"#/definitions/endTime\"\n``\n// endTime\ntype endTime struct {\n    EndTime             stringjson:\"end_time,omitempty\" bson:\"end_time\"`\n}\n```\nI am trying to get something like this:\n\nBut if I create a parameter with in: body, this is how it looks:\n\n. @casualjim is there a bug with swagger:operation and PATCH?. Using the parameter like that generates this code:\ncurl -X PATCH \"https://url/v1/alerts/openhybrid/1234\" -H \"accept: application/json\" -H \"Content-Type: application/json\" -d \"123456789\"\nBut I need this instead:\n-d \"{ \\\"end_time\\\": \\\"123456789\\\",}\". Got it. Thank you!\n\n. @casualjim do you know why PATCH didn't work with swagger:operation? . ",
    "agdelen": "+1. ",
    "cyriel": "Refer to http://goswagger.io/generate/spec/route/\nResponse should be 200: SomeResponse\nBody is a tag that goes into a struct.\n. ",
    "nelz9999": "This was related to #587 and #612, right?\nI was actually looking forward to those changes. Was there any further discussion about this?\n. > So I think the intent is we don't want the spec to decide between https, http or unix sockets. We want that to be decision that is made when we start the process of the server. Would you agree that that is the change you want preserved?\nYup, that is exactly what I was looking for!\n. Hrm... I see the build failed because it didn't find the generated code... Should I also check in generated resources as well?\n. There's also an example: https://github.com/go-swagger/go-swagger/blob/master/examples/tutorials/todo-list/server-complete/restapi/configure_todo_list.go\n. https://github.com/awslabs/aws-lambda-go-api-proxy/blob/master/README.md\nOn Thu, May 31, 2018, 18:14 Ivan Porto Carrero notifications@github.com\nwrote:\n\nI'll gladly merge such an integration :)\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/go-swagger/go-swagger/issues/962#issuecomment-393729318,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAqxtX38zj1MevFUwTMA_VLQWgRhxasks5t4JWEgaJpZM4MhVsK\n.\n. \n",
    "emosbaugh": "I believe that commit broke compatibility with go < 1.6\nhttps://github.com/golang/go/issues/14381\n. Change is ok by me.\nFor those who run into this issue in circleci:\nThe default build environment ships with go 1.5. It's possible to update the project build environment to use Ubuntu 14.04 image which ships with go 1.6.\n. ",
    "lucas-natraj": "@emosbaugh: Yeah, that looks like it. Thanks for finding that.\n. @casualjim Nope. I'm perfectly fine with the change. I'm upgrading our CI builds accordingly. \nI just didn't find anything to explain why this was failing, so I figured it'd be easier to just submit this issue in case anyone else hit the same problem.\nMight be good to put a note somewhere (perhaps it's already there, and I just missed it) that there's a line in the sand with this commit.\n. ",
    "kyteague": "Also getting this, even from master.  This is really confusing.\n$ go get -u github.com/go-swagger/go-swagger/cmd/swagger\n$ swagger version\n0.5.0-171-g34f62b5\n. ",
    "bamarni": "How about generating something like this? https://godoc.org/github.com/google/go-github/github#App\nThen it is possible to make the difference between a missing and zero value but it gives nice getters on top of it for consumers. Having to use https://github.com/go-openapi/swag/blob/master/convert_types.go is not that user-friendly.. ",
    "SandyWalsh": "I ran into the deadline exceeded error bug for the same reason. . Perhaps related to this ... I have some domain objects I need access to in the handlers (db connection, telemetry client, etc). What's the recommended way/place to define these and access them in the handlers? Would I define them in configure_xxx() and make wrapper functions for the handlers to make them accessible? Or is there a nice way to add them to the context? Perhaps some middleware to stuff it in? \nI was looking for some examples of this but couldn't find anything. . Thanks again @casualjim \nI guess the important takeaway is that main and the handlers have to be pulled outside of the generated code since only configure_xxx() is protected. And main() doesn't call configureAPI() ... that was a little confusing looking through the other examples and not seeing any changes to the vanilla config code. \n\"It has to be there somewhere ...\". Hey @casualjim ... related to above discussion, wouldn't it be better to have all the handlers automatically be part of a default struct that simply has a Context member variable or empty interface? That would save everyone a lot of copy/pasta when we need to inject some info. . yes, exactly. Something I can stuff a database reference or other business state into. . Awesome ... works like a charm. \nThanks @casualjim!. Sorry, I should have mentioned. \nI'm using 1.7.1 and govendor\nCould this perhaps be related to running swagger in docker?. In the complaining file\nmy_org/my_project/output/restapi/operations/foo_api.go\n```\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"strings\"\n    loads \"github.com/go-openapi/loads\"\n    runtime \"github.com/go-openapi/runtime\"\n    middleware \"github.com/go-openapi/runtime/middleware\"\n    spec \"github.com/go-openapi/spec\"\n    strfmt \"github.com/go-openapi/strfmt\"\n    \"github.com/go-openapi/swag\"\n)\n```. Can confirm. Got the same results. \nThanks again @casualjim I'll see where gvt gets me. . Sure thing ... thanks @casualjim \n```\nswagger: '2.0'\nbasePath: /v1\ninfo:\n  version: \"experimental\"\n  title: \"Mosaics API\"\n  description: \"An API to interact with Mosaics.\"\nconsumes:\n- application/json\nproduces:\n- application/json\nschemes:\n- https\ndefinitions:\n  MosaicSeriesFilter:\n    descriminator: type\n    properties:\n      filterType:\n        type: string\n      filterable:\n        type: string\n        enum: [\"mosaic_name\"]\n        default: mosaic_name\n      value:\n        type: string\n    required:\n    - filterType\n    - filterable\n  MosaicNameFilter:\n    allOf:\n    - $ref: '#/definitions/MosaicSeriesFilter'\n    properties:\n      value:\n        type: string\n    required:\n    - value\nError:\n    properties:\n      message:\n        description: A descriptive error message.\n        type: string\n    type: object\nErrors:\n    description: \"A list of Errors\"\n    type: array\n    items:\n      $ref: '#/definitions/Error'\nAPIError:\n    description: An APIError \n    properties:\n      field:\n        additionalProperties:\n          $ref: '#/definitions/Errors'\n        type: object\n      general:\n        $ref: '#/definitions/Errors'\n    required:\n    - general\n    - field\n    type: object\nWriteResponse:\n    type: object\n    required:\n      - ok\n    description: \"Response of requests to create a mosaic\"\n    properties:\n      ok:\n        description: If it was successfully created.\n        type: boolean\n      errors:\n        description: \"A list of validation errors which prevented the request from succeeding\"\n        items:\n          $ref: '#/definitions/APIError'\n        type: array\n      id:\n        description: The id of the newly created mosaic\n        type: string\nMosaic:\n    description: A Mosaic is ...\n    properties:\n      _links:\n        $ref: '#/definitions/MosaicLinks'\n      id:\n        description: A UUID to uniquely identify this Mosaic.\n        format: uuid\n        type: string\n      renditions:\n        description: A list of renditions to consume the Mosaic data.\n        items:\n          $ref: '#/definitions/MosaicRendition'\n        type: array\n      bbox:\n        description: The bounding box representing the extent of the mosaic.\n        format: geojson\n        type: string\n      coordinate_system:\n        description: The coordinate system of this mosaic\n        type: string\n      first_acquired:\n        description: The acquisition date of the oldest scene that contributed to this mosaic.\n        type: string\n        format: date-time\n      last_acquired:\n        description: The acquisition date of the newest scene that contributed to this mosaic.\n        type: string\n        format: date-time\n      interval:\n        description: The interval of the mosaic\n        type: string\n      product_type:\n        description: The product type of this mosaics, currently supported is \"timelapse\", \"basemap\"\n        type: string\n      name:\n        description: A name for this mosaic. This does not need to be unique.\n        type: string\n    type: object\n    required:\n      - id\n      - renditions\n      - bbox\n      - coordinate_system\n      - first_acquired\n      - last_acquired\n      - product_type\n      - name\nMosaicSeries:\n    description: A Mosaic Series is a ...\n    properties:\n      _links:\n        $ref: '#/definitions/MosaicSeriesLinks'\n      id:\n        description: A UUID to uniquely identify this Mosaic Series.\n        format: uuid\n        type: string\n      name:\n        description: A human readable name for this series\n        type: string\n      interval:\n        description: The interval for the mosaics in the series.\n        type: string\n      product_type:\n        description: \"The type of product this mosaic is\"\n        enum: [\"basemap\", \"timelapse\", \"l3m\"]\n        type: string\n      selection_filters:\n        type: array\n        description: An array of MosaicSeriesFilters to filter mosaics\n        items:\n          $ref: '#/definitions/MosaicSeriesFilter'\nrequired:\n- id\n- _links\n- mosaic_count\n- product_type\n- name\ntype: object\n\nMosaicRendition:\n    properties:\n      name:\n        description: The name of this rendition, e.g. RGB\n        type: string\n      type:\n        description: The type of this rendition\n        type: string\n      location:\n        description: A URL (possibly a template) pointing to a resource that provides access to the rendition.\n        type: string\n    type: object\nMosaicListLinks:\n    properties:\n      _self:\n        description: \"The link back to this list page\"\n        type: string\n    type: object\nMosaicSeriesListLinks:\n    properties:\n      _self:\n        description: \"The link to this listing page\"\n        type: string\n    type: object\nMosaicLinks:\n    properties:\n      _self:\n        description: \"The canonical link to this specific Mosaic\"\n        type: string\n    type: object\nMosaicSeriesLinks:\n    properties:\n      _self:\n        description: \"The canonincal link to this specific Mosaic Series\"\n        type: string\n      mosaics:\n        description: \"The canonincal link to the mosaics inside this Mosaic Series\"\n        type: string\n    type: object\nMosaicSeriesMosaicsLinks:\n    properties:\n      _self:\n        description: \"The canonical link back to this list\"\n        type: string\n    type: object\nMosaicListPage:\n    properties:\n      _links:\n        $ref: '#/definitions/MosaicListLinks'\n      mosaics:\n        items:\n          $ref: '#/definitions/Mosaic'\n        type: array\n    type: object\nMosaicSeriesListPage:\n    properties:\n      _links:\n        $ref: '#/definitions/MosaicSeriesListLinks'\n      series:\n        items:\n          $ref: '#/definitions/MosaicSeries'\n        type: array\n    type: object\nMosaicSeriesMosaicsListPage:\n    properties:\n      _links:\n        $ref: '#/definitions/MosaicSeriesMosaicsLinks'\n      mosaics:\n        items:\n          $ref: '#/definitions/Mosaic'\n        type: array\n    type: object\nparameters:\n  pSeriesId:\n    description: The Mosaic Series ID\n    in: path\n    name: SeriesId\n    format: uuid\n    required: true\n    type: string\npaths:\n  \"/mosaic/experimental/mosaics\":\n    post:\n      description: \"Creates a new mosaic\"\n      responses:\n        200:\n          description: \"Mosaic was successfully created\"\n          schema:\n            $ref: '#/definitions/WriteResponse'\n        400:\n          description: There was a validation error\n          schema:\n            $ref: '#/definitions/APIError'\n    put:\n      description: \"updates a mosaic\"\n      responses:\n        200:\n          description: \"Mosaic was successfully updated\"\n          schema:\n            $ref: '#/definitions/WriteResponse'\n        400:\n          description: There was a validation error\n          schema:\n            $ref: '#/definitions/APIError'\n    get:\n      description: \"Returns all accessible mosaics. For non authenticated users, this returns public mosaics.\"\n      responses:\n        200:\n          description: A list of mosaics.\n          schema:\n            $ref: '#/definitions/MosaicListPage'\n        400:\n          description: There was an error with the request.\n          schema:\n            $ref: '#/definitions/APIError'\n\"/mosaic/experimental/series\":\n    post:\n      description: \"Creates a Series\"\n      responses:\n        200:\n          description: The series was created.\n          schema:\n            $ref: '#/definitions/WriteResponse'\n        400:\n          description: There was an error with the request\n          schema:\n            $ref: '#/definitions/APIError'\n    get:\n      description: \"Returns a list of accessible mosaic series\"\n      responses:\n        200:\n          description: A list of Mosaic Series\n          schema:\n            $ref: '#/definitions/MosaicSeriesListPage'\n        400:\n          description: There was an error with the request.\n          schema:\n            $ref: '#/definitions/APIError'\n\"/mosaic/experimental/series/{SeriesId}\":\n    get:\n      description: \"Returns back a single Mosaic Series Record\"\n      parameters:\n      - $ref: '#/parameters/pSeriesId'\n      responses:\n        200:\n          description: Gets a single Mosaic Series record.\n          schema:\n            $ref: '#/definitions/MosaicSeries'\n        400:\n          description: There was an error with the request.\n          schema:\n            $ref: '#/definitions/APIError'\n\"/mosaic/experimental/series/{SeriesId}/mosaics\":\n    get:\n      description: \"Returns the list of mosaics in this series.\"\n      parameters:\n      - $ref: '#/parameters/pSeriesId'\n      responses:\n        200:\n          description: Returns the list of mosaics in this series.\n          schema:\n            $ref: '#/definitions/MosaicSeriesMosaicsListPage'\n        400:\n          description: There was an error with the request.\n          schema:\n            $ref: '#/definitions/APIError'\n```. I tried a few little changes like\n/mosaic/experimental/mosaics -> /aaa/bbb/ccc\nand\ninfo:\n  version: \"experimental\"\nto \ninfo:\n  version: \"2\"\nno difference. \nBut I noticed the naming in configure looks a little wonky\napi.GetAaaBbbCccHandler = operations.GetAaaBbbCccHandlerFunc(func(params operations.GetAaaBbbCccParams) middleware.Responder {\n    return middleware.NotImplemented(\"operation .GetAaaBbbCcc has not yet been implemented\")\n})\nThe .GetAaaBbbCcc (note the period) might be a clue. I'm digging into the router setup code now. \n. Ah, whoopsy! Thanks! Lots of moving parts at play here. \n. That said ... shouldn't the framework return a 404 for those requests?. Slightly different https://gist.github.com/SandyWalsh/5987303142bea7bf5d41c07476dccf76\ncurl -i     -H \"Accept: application/json\"     -X POST     -d '{\"id\": \"123e4567-e89b-12d3-a456-426655440000\", \"renditions\": [], \"bbox\": {}, \"coordinate_system\": \"coordinates\", \"first_acquired\": \"2006-01-02 15:04:05\", \"last_acquired\": \"2006-01-02 15:04:05\", \"product_type\": \"basemap\", \"name\":\"My mosaic\"}'      http://127.0.0.1:8000/v1/mosaic/experimental/mosaics\nI was hesitant to post the whole thing since it doesn't help me learn the flow of data through the system (give a man a fish, etc). Was really looking for tips that you use for debugging these sorts of problems. \nBut I do appreciate you looking into it. \n. The error from ServeErrorFor seems to be \nvalidation failure list:\nunsupported media type \"application/x-www-form-urlencoded\", only [application/json] are allowed\nI suspect curl is altering my format. Checking ...\n. Thanks ... was very close to that myself (almost caught a fish ;) . It would be nice to get some debug level logging around that ServeErrorFor() line or BindValidRequest(). For example, now I'm getting \nparsing body body from \"\" failed, because json: cannot unmarshal object into Go value of type string\nwhen I issue\ncurl -i     -H \"Accept: application/json\" -H \"Content-type: application/json\"     -X POST     -d '{\"id\": \"123e4567-e89b-12d3-a456-426655440000\", \"renditions\": [], \"bbox\": {}, \"coordinate_system\": \"coordinates\", \"first_acquired\": \"2006-01-02T15:04:05Z\", \"last_acquired\": \"2006-01-02T15:04:05Z\", \"product_type\": \"basemap\", \"name\":\"My mosaic\"}'      http://127.0.0.1:8000/v1/mosaic/experimental/mosaics\nNote: I'm just going to keep updating this comment with notes as I make progress ...\nI've traced this through BindValidRequest in xxx_parameters.go and it's led me into route.Consumer.Consume() ... could be something related to the comment about \n\nit assumes that complex things implement a Validatable(strfmt.Registry) error interface for simple values it will use straight method calls\n. Found it: \"bbox\": \"\" ... not \"bbox\": {} ... trial and error. Hey @xtoddx ... a great voice to hear from the wilderness! \n\nIf the manual edits get to be too much I'll look at copying the templates. Thanks for that. \nI can see that if we're going to keep using this library I'm going to need to get my hands dirty in the implementation. Thanks for steering me in the general direction.  :) \n. $ swagger version\nversion: 0.7.4\ncommit: 8f0d4bb6fc08d6b4bf2826cd4e13d7dce32c104c\nOne of my colleagues noticed that the 0.7.4 sha from the docker image differs from the 0.7.4 image in the repo. \n. Nice ... thanks @casualjim !. @fredbi the problem is, as long as the spec reads swagger: '2.0' we will have issues using the spec for other tools, doc generators, etc. . Thanks @casualjim @fredbi ... totally understand. Perhaps if I can get some cycles I'll try to contribute. I think I have some tricks I can do to keep on 2.0. Keep up the great work!. Gotcha. Too bad we can't get access to richer parse error conditions ... like the attributes that are causing problems. \nI added this to ServeError and it's slightly less intimidating \ncase *errors.ParseError:\n    rw.WriteHeader(asHTTPCode(int(e.Code())))\n    if r == nil || r.Method != \"HEAD\" {\n        rw.Write(errorAsJSON(errors.New(e.Code(), \"Unable to parse JSON payload. Confirm syntax and schema.\")))\n    }. Hmm, ok, I guess I can get around this with a simple cast\nfooProducts = models.FooProducts(Blah.Products)\nI'm going to close this out. . ",
    "Naatan": "Running into the same issue, the documentation says you have to use client.Operations but this symbol does not exist at all.\nHas this bug really been open for 2 years? Is the client generator code even still valid? I'm finding it  difficult to use due to lack of documentation on how the generated code works.. ",
    "mjtrangoni": "@Naatan @vikstrous Could you make a PR? I ran in the same again :(.. ",
    "daved": "Don't forget to also re-generate the relevant output (swagger generate {args...}) after running go get -u github.com/go-openapi/runtime.\n. ",
    "Rio": "For me this is still a problem.\nI'm starting out with an empty $GOPATH and a the swagger 0.7.4 binary.\nFollowing the simple server tutorial I generate the swagger.yml with:\nswagger init spec \\\n  --title \"A To Do list application\" \\\n  --description \"The product of a tutorial on goswagger.io\" \\\n  --version 1.0.0 \\\n  --scheme http \\\n  --consumes application/io.goswagger.examples.todo-list.v1+json \\\n  --produces application/io.goswagger.examples.todo-list.v1+json\nWhich finishes with the message:\n```\nFor this generation to compile you need to have some packages in your GOPATH:\n\ngithub.com/go-openapi/runtime\ngithub.com/tylerb/graceful\ngithub.com/jessevdk/go-flags\ngolang.org/x/net/context\n``\nIgo get -uthose and add a simple hello world get handler that returns a string and 200 to the swagger spec. Then I try to build the server withgo build -v cmd/a-to-do-list-application-server/main.go`.\nIt failes on missing packages:\ngithub.com/go-openapi/analysis\ngithub.com/go-openapi/loads\ngithub.com/go-openapi/spec\ngithub.com/go-openapi/validate\ngithub.com/gorilla/context\n\nAfter installing those I try to compile again and finally get the message this issue is built on:\n```bash\n[rio@ravage testserver]$ go build -v cmd/a-to-do-list-application-server/main.go \ngithub.com/go-openapi/runtime/middleware/denco\ngithub.com/go-openapi/runtime/middleware/header\ngithub.com/go-openapi/runtime/middleware/untyped\ngithub.com/go-openapi/runtime/security\ngithub.com/go-openapi/runtime/middleware\ntestserver/restapi/operations\ntestserver/restapi/operations\nrestapi/operations/a_to_do_list_application_api.go:57: undefined: swag in swag.CommandLineOptionsGroup\n```\nRunning swagger generate server --spec swagger.yml again will fix this with this diff:\n```diff\ndiff --git a/restapi/operations/a_to_do_list_application_api.go b/restapi/operations/a_to_do_list_application_api.go\nindex 19060b2..e7942cc 100644\n--- a/restapi/operations/a_to_do_list_application_api.go\n+++ b/restapi/operations/a_to_do_list_application_api.go\n@@ -13,6 +13,7 @@ import (\n        middleware \"github.com/go-openapi/runtime/middleware\"\n        spec \"github.com/go-openapi/spec\"\n        strfmt \"github.com/go-openapi/strfmt\"\n+       \"github.com/go-openapi/swag\"\n )\n// NewAToDoListApplicationAPI creates a new AToDoListApplication instance\ndiff --git a/restapi/operations/get_parameters.go b/restapi/operations/get_parameters.go\nindex 8524a0c..941e437 100644\n--- a/restapi/operations/get_parameters.go\n+++ b/restapi/operations/get_parameters.go\n@@ -7,6 +7,7 @@ import (\n        \"net/http\"\n    \"github.com/go-openapi/errors\"\n\n\n\"github.com/go-openapi/runtime/middleware\"\n )\n\n// NewGetParams creates a new GetParams object\ndiff --git a/restapi/server.go b/restapi/server.go\nindex 1a23589..a92af06 100644\n--- a/restapi/server.go\n+++ b/restapi/server.go\n@@ -10,6 +10,7 @@ import (\n        \"sync\"\n        \"time\"\n\n\"github.com/go-openapi/swag\"\n        flags \"github.com/jessevdk/go-flags\"\n        graceful \"github.com/tylerb/graceful\"\n```\n\nSo it does seem the swag  and middleware import is not coming through on first generation.\nAlso the first generation message is missing some packages.. it's not solved for me. I still need to do another swagger generate to get the proper imports set. I've even got one extra that's missing:\nrestapi/operations/get_parameters.go:31: undefined: middleware in middleware.MatchedRoute\nrestapi/operations/todo_list_api.go:57: undefined: swag in swag.CommandLineOptionsGroup. ",
    "FryDay": "I have my paths being generated, but I need to be able to add the amazon extensions to them. Hopefully this example helps. If there is an easy way for me to add my own extensions that can be generated from comments, it would be awesome.\n\"paths\": {\n  \"/\": {\n    \"options\": {\n      stuff\n    }\n    \"x-amazon-apigateway-integration\": {\n      \"requestTemplates\": {\n        \"application/json\": \"{\\\"statusCode\\\": 200}\"\n      },\n      \"passthroughBehavior\": \"when_no_match\",\n      \"responses\": {\n        \"default\": {\n          \"statusCode\": \"200\",\n          \"responseParameters\": {\n            \"method.response.header.Access-Control-Allow-Methods\": \"'OPTIONS'\",\n            \"method.response.header.Access-Control-Allow-Headers\": \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\",\n            \"method.response.header.Access-Control-Allow-Origin\": \"'*'\"\n          }\n        }\n      },\n      \"type\": \"mock\"\n    }\n}\n. The extensions I need to add are these: http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html\n. Is there anyway for me to easily integrate these extensions?\n. Okay, I have a solution in the works, but I have another issue. AWS does not support response refs. Is there an easy way to make go-swagger put responses inline instead of as $refs?\n. Yeah, it appears spec generation is impossible outside of GOPATH. This is a major issue.. ",
    "Menta2L": "Thanks for the answer will try to find another workaround.\nAnd about the use case its probably not relevant and its really custom.\nI created an module like apache access module ACL based on IP address for different url. Instand of URL for lookup key i was decided to use Operation.ID. (lookup will be faster in that way  because each operation have unique id according to swagged specification )\nThe problem comes when i wont to check against that ACL \nThere is 2 options to place a \"hook\" in golbalMiddleware or in each Operation Handler.\nIf i go for an golbalMiddleware a need to get an middleware.MatchedRoute.\nBecause i did not found a way to do that I add my ACL struct to the API struct and was thinking that i can access ACL property somehow from the context but did not found a way to do that.\n. Most probably is that i cant find the workflow but \nhttps://github.com/go-openapi/kvstore/blob/master/cmd/kvstored/main.go#L50\nis calling \nhttps://github.com/go-openapi/kvstore/blob/master/gen/restapi/server.go#L47\nwitch is calling \nhttps://github.com/go-openapi/kvstore/blob/master/gen/restapi/configure_kvstore.go#L20\nand that is the exact part witch is not working for me \n. I found the \"issue\" and was very lame. I did not expose the flag property  to public.\nEverything works like a charm \n. ",
    "xuanzhaopeng": "@casualjim  Fixed and debuged by following source code:\n``` go\nimport \"github.com/rs/cors\"\nfunc setupGlobalMiddleware(handler http.Handler) http.Handler {\n    corsHandler := cors.New(cors.Options{\n        Debug: false,\n        AllowedHeaders:[]string{\"\"},\n        AllowedOrigins:[]string{\"\"},\n        AllowedMethods:[]string{},\n        MaxAge:1000,\n    })\n    return corsHandler.Handler(handler)\n}\n```\n. Cooool! Excellent !\n. I read the source code of mgo, I found the reason:\nin mgo.v2, it detect the type of time by\ngo\ntypeTime           = reflect.TypeOf(time.Time{})\n// typeTime value is : time.Time\nAnd I try to get the type of strfmt.DateTime:\ngo\nfmt.Print(reflect.TypeOf(item.Inserttime))\n// print out \"strfmt.DateTime\"\nThus mgo.v2 cannot compatible with openapi,  and then it cannot compatible with swagger\n. @casualjim  Coool! I try to do that , if it works, I will put source code and share with others :)\n. Here is my SetBSON, cause currently I don't have any test case for GetJSON, so I just put first part of code here, after I finish it, I will create a PR for go-openapi, please review @casualjim ,\n``` go\npackage strfmt\nimport (\n        ....\n    \"gopkg.in/mgo.v2/bson\"\n)\nfunc (t DateTime) SetBSON(raw bson.Raw) error {\n    if len(raw.Data) < 8 {\n        return fmt.Errorf(\"couldn't convert bson data to a Timestamp\")\n    }\n    b := raw.Data[0 : 8]\n    i := int64((uint64(b[0]) << 0) |\n        (uint64(b[1]) << 8) |\n        (uint64(b[2]) << 16) |\n        (uint64(b[3]) << 24) |\n        (uint64(b[4]) << 32) |\n        (uint64(b[5]) << 40) |\n        (uint64(b[6]) << 48) |\n        (uint64(b[7]) << 56))\n    if i == -62135596800000 {\n        t = DateTime(time.Time{})\n    } else {\n        t = DateTime(time.Unix(i/1e3, i%1e31e6))\n    }\n    return nil\n}\n```\n. Cool thanks!\n. Just share my solution:\n``` go\nimport (\n    \"net/http\"\n    \"github.com/go-openapi/runtime\"\n    \"github.com/go-openapi/runtime/middleware\"\n)\ntype CustomResponder struct {\n    responder middleware.Responder\n}\nfunc NewCustomResponder(responder middleware.Responder) *CustomResponder {\n    return &CustomResponder{\n        responder: responder,\n    }\n}\nfunc (this *CustomResponder) WriteResponse(rw http.ResponseWriter, p runtime.Producer) {\n    cookie := http.Cookie{Name: \"robin\", Value:\"abcd\"}\n    http.SetCookie(rw, &cookie)\n    this.responder.WriteResponse(rw, p)\n}\n```\n. ",
    "jbub": "Probably related to this https://github.com/go-openapi/errors/blob/master/api.go#L119.\n. I have no issues with vendoring using http://glide.sh/. Probably duplicate of #729. Similar issue, in builder.gotmpl, there is no \"context\" import, when formatting generated code, goimports resolves context import as \"context\" not \"golang.org/x/net/context\", so there is mixed usage of context again, i worked around it by using gofmt right after generating:\ngofmt -w -r '\"context\" -> \"golang.org/x/net/context\"' server/operations/my_api.go\nWe should probably fix this by using stdlib context in all places, since Go 1.7 and 1.8 are out for some time.. ",
    "tonyghita": "@casualjim I noticed you used json:\"paramName\" for the path param. When would you want to use param:\"paramName\"?\n. ",
    "xiawenji": "@casualjim thank you\uff01\n. ",
    "Magicking": "Example linked by @nelz9999 is here: https://github.com/go-swagger/go-swagger/blob/4b51e30da51575d6b0fd28b4fd330bd8ad3147dc/examples/tutorials/todo-list/server-complete/restapi/configure_todo_list.go\n. ",
    "dnephin": "I've submitted an example of this in #674. If the PR is accepted I can make similar changes to a few other templates.\n. Ah, that's what I was missing, thanks!\n. I think I might opt for using more explicit types for now. I'll close this issue until I run into a case where it's not working well.\n. Ah perfect, I'll try it out, thanks!\n. generate operation is looking promising. I think I need to add a --skip-validator to match generate model. \nThe model name is a bit unfortunate (ex: VolumesListOKBodyBody), Something like VolumeListOkResponseBody would be a lot nicer.  I haven't had a chance to look into why the name is that way.\n. ",
    "allencloud": "To be honest, this is not so user-friendly. I think it might be some kind of against other thing's design.\nCould you give me some guidance that how to A good way to enable just int is perhaps through providing a flag? @casualjim \nThanks a lot.. Yeah, it is brief in #675 . While I think we have not get the solution. So I suggest that it is better for us to keep this issue open, since maybe other users would have the same issue. @gregmarr . So I think we need to first set the customized file name in swagger.yml, right?\nCurrently I have not get the way to set that file name. Could you share how to add a name in swagger.yml? Thanks a lot. Then I will try master branch. . We are big fans of swagger, and we met the same issue above.  And to  be honest, we still missing the validation part in our API server. It is indeed a weak place in our software. \nLook forward to a way to fix it out. Thank you, my friends. \ud83c\udf7b . ",
    "kofi-clever": "I think I'm still seeing this issue after updating go-swagger.\nError when I try to build the client:\ngen-go/client/user_search/find_users_parameters.go:7:2: cannot find package \"context\" in any of:...\nHere's what the imports in the generated find_users_parameters.go look like:\n``` go\nimport (\n    \"context\"  // <-- Invalid import\n    \"time\"\n\"github.com/go-openapi/errors\"\n\"github.com/go-openapi/runtime\"\ncr \"github.com/go-openapi/runtime/client\"\n\nstrfmt \"github.com/go-openapi/strfmt\"\n\n)\n```\n. ",
    "codecov-io": "Current coverage is 75.42% (diff: 100%)\n\nMerging #680 into master will not change coverage\n\ndiff\n@@             master       #680   diff @@\n==========================================\n  Files             8          8          \n  Lines          1994       1994          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           1504       1504          \n  Misses          336        336          \n  Partials        154        154\n\nPowered by Codecov. Last update e4435d7...dfae7e6\n. ## Current coverage is 68.82% (diff: 100%)\nMerging #686 into master will not change coverage\n\ndiff\n@@             master       #686   diff @@\n==========================================\n  Files            19         19          \n  Lines          5216       5216          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           3590       3590          \n  Misses         1277       1277          \n  Partials        349        349\n\nPowered by Codecov. Last update 7252939...da06f7a\n. ## Current coverage is 68.83% (diff: 100%)\nMerging #689 into master will decrease coverage by 0.01%\n\ndiff\n@@             master       #689   diff @@\n==========================================\n  Files            19         19          \n  Lines          5215       5215          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           3591       3590     -1   \n- Misses         1275       1276     +1   \n  Partials        349        349\n\nPowered by Codecov. Last update f56b02a...eb04567\n. ## Current coverage is 68.90% (diff: 77.50%)\nMerging #696 into master will decrease coverage by 0.02%\n\ndiff\n@@             master       #696   diff @@\n==========================================\n  Files            19         19          \n  Lines          5215       5223     +8   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           3595       3599     +4   \n- Misses         1271       1275     +4   \n  Partials        349        349\n\nPowered by Codecov. Last update a0ea04f...2a72b26\n. ## Current coverage is 68.70% (diff: 71.42%)\nMerging #713 into master will increase coverage by 0.03%\n\ndiff\n@@             master       #713   diff @@\n==========================================\n  Files            19         19          \n  Lines          5260       5260          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           3612       3614     +2   \n+ Misses         1297       1296     -1   \n+ Partials        351        350     -1\n\nPowered by Codecov. Last update d53a6d5...dfd4281\n. # Codecov Report\nMerging #744 into master will decrease coverage by 0.78%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #744      +/-\n==========================================\n- Coverage   72.42%   71.63%   -0.79%   \n==========================================\n  Files          21       22       +1   \n  Lines        5897     5962      +65   \n==========================================\n  Hits         4271     4271            \n- Misses       1177     1241      +64   \n- Partials      449      450       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/scanner.go | 75% <\u00f8> (\u00f8) | :arrow_up: |\n| scan/responses.go | 79.74% <0%> (-0.7%) | :arrow_down: |\n| scan/enum.go | 0% <0%> (\u00f8) | |\n| scan/parameters.go | 76.31% <0%> (-1.17%) | :arrow_down: |\n| scan/schema.go | 71.31% <0%> (-1.61%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 47b3e57...214dc01. Read the comment docs.\n. ## Current coverage is 68.56% (diff: 67.74%)\nMerging #765 into master will decrease coverage by 0.04%\n\ndiff\n@@             master       #765   diff @@\n==========================================\n  Files            19         19          \n  Lines          5390       5405    +15   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           3698       3706     +8   \n- Misses         1330       1333     +3   \n- Partials        362        366     +4\n\nPowered by Codecov. Last update de87096...d724fc0. ## Current coverage is 68.78% (diff: 84.21%)\nMerging #777 into master will increase coverage by 0.01%\n\ndiff\n@@             master       #777   diff @@\n==========================================\n  Files            19         19          \n  Lines          5520       5529     +9   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           3796       3803     +7   \n- Misses         1346       1348     +2   \n  Partials        378        378\n\nPowered by Codecov. Last update c7a2a0a...ed67006. ## Current coverage is 69.06% (diff: 96.29%)\nMerging #788 into master will increase coverage by 0.19%\n\ndiff\n@@             master       #788   diff @@\n==========================================\n  Files            19         19          \n  Lines          5524       5556    +32   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           3804       3837    +33   \n+ Misses         1342       1341     -1   \n  Partials        378        378\n\nPowered by Codecov. Last update 52c95c3...e631cc0. ## Current coverage is 68.86% (diff: 100%)\nMerging #792 into master will not change coverage\n\ndiff\n@@             master       #792   diff @@\n==========================================\n  Files            19         19          \n  Lines          5524       5524          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           3804       3804          \n  Misses         1342       1342          \n  Partials        378        378\n\nPowered by Codecov. Last update 52c95c3...13a2b23. ## Current coverage is 68.93% (diff: 100%)\nMerging #803 into master will increase coverage by 0.01%\n\ndiff\n@@             master       #803   diff @@\n==========================================\n  Files            19         19          \n  Lines          5566       5566          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           3836       3837     +1   \n+ Misses         1352       1351     -1   \n  Partials        378        378\n\nPowered by Codecov. Last update 7e9d988...3c264b6. ## Current coverage is 68.91% (diff: 100%)\nMerging #806 into master will decrease coverage by 0.01%\n\ndiff\n@@             master       #806   diff @@\n==========================================\n  Files            19         19          \n  Lines          5566       5566          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           3837       3836     -1   \n- Misses         1351       1352     +1   \n  Partials        378        378\n\nPowered by Codecov. Last update 1df2914...54adfdd. ## Current coverage is 68.91% (diff: 100%)\nMerging #808 into master will decrease coverage by 0.01%\n\ndiff\n@@             master       #808   diff @@\n==========================================\n  Files            19         19          \n  Lines          5566       5566          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           3837       3836     -1   \n- Misses         1351       1352     +1   \n  Partials        378        378\n\nPowered by Codecov. Last update 9c21adb...c90cd4f. ## Current coverage is 69.04% (diff: 80.00%)\nMerging #812 into master will increase coverage by 0.10%\n\ndiff\n@@             master       #812   diff @@\n==========================================\n  Files            19         19          \n  Lines          5566       5624    +58   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           3837       3883    +46   \n- Misses         1351       1358     +7   \n- Partials        378        383     +5\n\nPowered by Codecov. Last update d1a0b6c...4bd1666. ## Current coverage is 69.04% (diff: 96.55%)\nMerging #814 into master will increase coverage by 0.01%\n\ndiff\n@@             master       #814   diff @@\n==========================================\n  Files            19         19          \n  Lines          5624       5624          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           3882       3883     +1   \n+ Misses         1359       1358     -1   \n  Partials        383        383\n\nPowered by Codecov. Last update 759dbbc...05c540d. ## Current coverage is 69.26% (diff: 66.36%)\nMerging #815 into master will increase coverage by 0.22%\n\ndiff\n@@             master       #815   diff @@\n==========================================\n  Files            19         21     +2   \n  Lines          5624       5737   +113   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           3883       3974    +91   \n- Misses         1358       1366     +8   \n- Partials        383        397    +14\n\nPowered by Codecov. Last update e63b284...0b75010. ## Current coverage is 69.26% (diff: 96.55%)\nMerging #816 into master will not change coverage\n\ndiff\n@@             master       #816   diff @@\n==========================================\n  Files            21         21          \n  Lines          5737       5737          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           3974       3974          \n  Misses         1366       1366          \n  Partials        397        397\n\nPowered by Codecov. Last update 654b7e8...ebfba9d. ## Current coverage is 69.18% (diff: 94.73%)\nMerging #826 into master will decrease coverage by 0.01%\n\ndiff\n@@             master       #826   diff @@\n==========================================\n  Files            21         21          \n  Lines          5809       5809          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           4020       4019     -1   \n- Misses         1382       1383     +1   \n  Partials        407        407\n\nPowered by Codecov. Last update 3e475ca...e0b131b. ## Current coverage is 68.94% (diff: 100%)\nMerging #829 into master will decrease coverage by 0.26%\n\ndiff\n@@             master       #829   diff @@\n==========================================\n  Files            21         19     -2   \n  Lines          5809       5567   -242   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           4020       3838   -182   \n+ Misses         1382       1351    -31   \n+ Partials        407        378    -29\n\nPowered by Codecov. Last update 2e5a78e...3d71271. ## Current coverage is 69.28% (diff: 100%)\nMerging #840 into master will not change coverage\n\ndiff\n@@             master       #840   diff @@\n==========================================\n  Files            21         21          \n  Lines          5863       5863          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           4062       4062          \n  Misses         1388       1388          \n  Partials        413        413\n\nPowered by Codecov. Last update e4738db...b7e9fed. ## Current coverage is 69.28% (diff: 96.55%)\nMerging #843 into master will not change coverage\n\ndiff\n@@             master       #843   diff @@\n==========================================\n  Files            21         21          \n  Lines          5863       5863          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           4062       4062          \n  Misses         1388       1388          \n  Partials        413        413\n\nPowered by Codecov. Last update cfe9a99...7b5830c. ## Current coverage is 69.28% (diff: 100%)\nMerging #845 into master will not change coverage\n\ndiff\n@@             master       #845   diff @@\n==========================================\n  Files            21         21          \n  Lines          5863       5863          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           4062       4062          \n  Misses         1388       1388          \n  Partials        413        413\n\nPowered by Codecov. Last update cfe9a99...0e9bb68. ## Current coverage is 69.28% (diff: 100%)\nMerging #848 into master will increase coverage by 0.02%\n\ndiff\n@@             master       #848   diff @@\n==========================================\n  Files            21         21          \n  Lines          5863       5864     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           4061       4063     +2   \n+ Misses         1389       1388     -1   \n  Partials        413        413\n\nPowered by Codecov. Last update a04692f...ce5525d. ## Current coverage is 69.28% (diff: 100%)\nMerging #849 into master will not change coverage\n\ndiff\n@@             master       #849   diff @@\n==========================================\n  Files            21         21          \n  Lines          5864       5864          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           4063       4063          \n  Misses         1388       1388          \n  Partials        413        413\n\nPowered by Codecov. Last update 7b1ab59...e50ccb7. ## Current coverage is 69.28% (diff: 100%)\nMerging #851 into master will decrease coverage by <.01%\n\ndiff\n@@             master       #851   diff @@\n==========================================\n  Files            21         21          \n  Lines          5864       5863     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           4063       4062     -1   \n  Misses         1388       1388          \n  Partials        413        413\n\nPowered by Codecov. Last update cf6f90a...ebebd4a. ## Current coverage is 69.45% (diff: 78.26%)\nMerging #852 into master will increase coverage by 0.14%\n\ndiff\n@@             master       #852   diff @@\n==========================================\n  Files            21         21          \n  Lines          5872       5893    +21   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           4070       4093    +23   \n+ Misses         1389       1381     -8   \n- Partials        413        419     +6\n\nPowered by Codecov. Last update 4c6b3bf...e97a6c5. ## Current coverage is 69.28% (diff: 100%)\nMerging #854 into master will not change coverage\n\ndiff\n@@             master       #854   diff @@\n==========================================\n  Files            21         21          \n  Lines          5864       5864          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           4063       4063          \n  Misses         1388       1388          \n  Partials        413        413\n\nPowered by Codecov. Last update cf6f90a...220d0ca. ## Current coverage is 69.32% (diff: 96.55%)\nMerging #855 into master will not change coverage\n\ndiff\n@@             master       #855   diff @@\n==========================================\n  Files            21         21          \n  Lines          5872       5872          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           4071       4071          \n  Misses         1388       1388          \n  Partials        413        413\n\nPowered by Codecov. Last update 3ea9c54...261e036. ## Current coverage is 69.32% (diff: 97.36%)\nMerging #856 into master will increase coverage by 0.04%\n\ndiff\n@@             master       #856   diff @@\n==========================================\n  Files            21         21          \n  Lines          5864       5872     +8   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           4063       4071     +8   \n  Misses         1388       1388          \n  Partials        413        413\n\nPowered by Codecov. Last update e78fe7a...4e18c64. ## Current coverage is 69.46% (diff: 100%)\nMerging #867 into master will increase coverage by <.01%\n\ndiff\n@@             master       #867   diff @@\n==========================================\n  Files            21         21          \n  Lines          5893       5894     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           4093       4094     +1   \n  Misses         1381       1381          \n  Partials        419        419\n\nPowered by Codecov. Last update 7e44226...2df91b5. ## Current coverage is 69.46% (diff: 96.55%)\nMerging #871 into master will increase coverage by 0.03%\n\ndiff\n@@             master       #871   diff @@\n==========================================\n  Files            21         21          \n  Lines          5894       5894          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           4092       4094     +2   \n+ Misses         1383       1381     -2   \n  Partials        419        419\n\nPowered by Codecov. Last update cb3448b...46e2e54. ## Current coverage is 72.32% (diff: 100%)\nMerging #878 into master will not change coverage\n\ndiff\n@@             master       #878   diff @@\n==========================================\n  Files            21         21          \n  Lines          5894       5894          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           4263       4263          \n  Misses         1182       1182          \n  Partials        449        449\n\nPowered by Codecov. Last update 13e1775...4d4c12b. ## Current coverage is 72.32% (diff: 100%)\nMerging #882 into master will not change coverage\n\ndiff\n@@             master       #882   diff @@\n==========================================\n  Files            21         21          \n  Lines          5894       5894          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           4263       4263          \n  Misses         1182       1182          \n  Partials        449        449\n\nPowered by Codecov. Last update d63b9a0...925f198. ## Current coverage is 72.40% (diff: 100%)\nMerging #885 into master will increase coverage by 0.07%\n\ndiff\n@@             master       #885   diff @@\n==========================================\n  Files            21         21          \n  Lines          5894       5896     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           4263       4269     +6   \n+ Misses         1182       1178     -4   \n  Partials        449        449\n\nPowered by Codecov. Last update 6d744eb...3e6300d. ## Current coverage is 72.42% (diff: 60.00%)\nMerging #895 into master will increase coverage by 0.02%\n\ndiff\n@@             master       #895   diff @@\n==========================================\n  Files            21         21          \n  Lines          5896       5897     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           4269       4271     +2   \n+ Misses         1178       1177     -1   \n  Partials        449        449\n\nPowered by Codecov. Last update b48220d...61cea5a. ## Current coverage is 72.44% (diff: 100%)\nMerging #897 into master will increase coverage by 0.01%\n\ndiff\n@@             master       #897   diff @@\n==========================================\n  Files            21         21          \n  Lines          5897       5901     +4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           4271       4275     +4   \n  Misses         1177       1177          \n  Partials        449        449\n\nPowered by Codecov. Last update 47b3e57...f16e25f. ## Current coverage is 72.58% (diff: 94.44%)\nMerging #906 into master will increase coverage by <.01%\n\ndiff\n@@             master       #906   diff @@\n==========================================\n  Files            21         21          \n  Lines          5890       5892     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           4275       4277     +2   \n  Misses         1166       1166          \n  Partials        449        449\n\nPowered by Codecov. Last update 95fa3ff...70e8d85. # Codecov Report\nMerging #926 into master will decrease coverage by -0.03%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #926      +/-\n==========================================\n- Coverage   72.62%   72.59%   -0.03%   \n==========================================\n  Files          21       21            \n  Lines        5895     5896       +1   \n==========================================\n- Hits         4281     4280       -1   \n- Misses       1166     1167       +1   \n- Partials      448      449       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <\u00f8> (-0.16%) | :x: |\n| generator/structs.go | 40% <\u00f8> (-1.34%) | :x: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 645ee99...2b67077. Read the comment docs.. # Codecov Report\nMerging #933 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff            @@\nmaster    #933      +/-\n=========================================\n+ Coverage   72.59%   72.6%   +0.01%   \n=========================================\n  Files          21      21            \n  Lines        5896    5896            \n=========================================\n+ Hits         4280    4281       +1   \n+ Misses       1167    1166       -1   \n  Partials      449     449\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :white_check_mark: |\n| generator/structs.go | 41.33% <\u00f8> (+1.33%) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 36032a7...7055afb. Read the comment docs.. \n",
    "kstedman9": "It was the docker from quay.io/goswagger/swagger:dev from 2 weeks ago.  It looks like it has been updated recently, but I have not updated it yet.\n. ",
    "yangjunsss": "fixed it with latest version\n. ",
    "hallettj": "~~Interpreting the map keys y and n as boolean values is not intended behavior for YAML. This is a bug in the YAML parser that go-swagger uses.~~\n~~For comparison, try using this online YAML parser with map keys like n and y: http://yaml-online-parser.appspot.com/~~\nEdit: I want to apologize - I think I misinterpreted YAML's behavior in this respect.\nI also want to point out: I think it is misleading to include this bug in the list of \"fixed bugs\" in the release notes for go-swagger version 0.7.4. I came to look for a new release because I encountered the same issue. I saw that note saying that the issue was fixed. Then I was confused when my problem persisted even after updating.. ",
    "briansorahan": "@casualjim This is in a directory where there isn't any code.\n. My problem is that I get the same behavior when I do the swagger generate command in a go project that does have annotated code. I get this:\n{\n  \"swagger\": \"2.0\",\n  \"paths\": {\n    \"/admin/healthchecks\": {\n      \"get\": {\n        \"consumes\": [\n          \"plain/text\"\n        ],\n        \"produces\": [\n          \"application/json\"\n        ],\n        \"schemes\": [\n          \"http\"\n        ],\n        \"operationId\": \"getHealthchecks\",\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/responses/OkResponse\"\n          }\n        }\n      }\n    },\n    \"/admin/versions\": {\n      \"get\": {\n        \"consumes\": [\n          \"plain/text\"\n        ],\n        \"produces\": [\n          \"application/json\"\n        ],\n        \"schemes\": [\n          \"http\"\n        ],\n        \"operationId\": \"getVersions\",\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/responses/OkResponse\"\n          }\n        }\n      }\n    },\n    \"/api-docs\": {\n      \"get\": {\n        \"consumes\": [\n          \"plain/text\"\n        ],\n        \"produces\": [\n          \"application/json\"\n        ],\n        \"schemes\": [\n          \"http\"\n        ],\n        \"operationId\": \"getApiDocsHandler\",\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/responses/OkResponse\"\n          }\n        }\n      }\n    }\n  },\n  \"definitions\": {},\n  \"responses\": {\n    \"BadGatewayResponse\": {\n      \"description\": \"BadGatewayResponse occurs when a downstream service is unavailable.\"\n    },\n    \"BadRequestResponse\": {\n      \"description\": \"BadRequestResponse occurs when request params and/or body are invalid.\"\n    },\n    \"ConflictResponse\": {\n      \"description\": \"ConflictResponse occurs when a resource can't be created or updated.\"\n    },\n    \"CreatedResponse\": {\n      \"description\": \"CreatedResponse occurs when a requested resource is created.\"\n    },\n    \"EmptyResponse\": {\n      \"description\": \"EmptyResponse is an empty response body.\"\n    },\n    \"ForbiddenResponse\": {\n      \"description\": \"ForbiddenResponse occurs when a resource can not be accessed due to inadequate permissions.\"\n    },\n    \"GatewayTimeoutResponse\": {\n      \"description\": \"GatewayTimeoutResponse occurs when a downstream service does not respond in time.\"\n    },\n    \"InternalServerErrorResponse\": {\n      \"description\": \"InternalServerErrorResponse occurs when a server has an unrecoverable error.\"\n    },\n    \"NoContentResponse\": {\n      \"description\": \"NoContentResponse occurs when a resource is deleted.\"\n    },\n    \"NotFoundResponse\": {\n      \"description\": \"NotFoundResponse occurs when a service can not locate a requested resource.\"\n    },\n    \"ServiceUnavailableResponse\": {\n      \"description\": \"ServiceUnavailableResponse occurs when a service is unavailable to take requests.\"\n    },\n    \"UnauthorizedResponse\": {\n      \"description\": \"UnauthorizedResponse occurs when a request can not be authenticated.\"\n    },\n    \"UnprocessableEntityResponse\": {\n      \"description\": \"UnprocessableEntityResponse occurs when a request body has 1+ invalid values.\"\n    },\n    \"UnsupportedMediaTypeResponse\": {\n      \"description\": \"UnsupportedMediaTypeResponse occurs when the Content-Type is not supported.\"\n    }\n  }\n}\n. Unfortunately the code isn't open source.\nI can come up with some example code that reproduces though.\n. ",
    "68696c6c": "I also have this problem using go swagger 0.13.0\nMy code is annotated and I'm using this command to generate my spec:\nswagger generate spec -mo docs/swagger.json\nThe JSON structure that gets generated looks like this (just including the top level here for brevity):\n{\n  \"swagger\": \"2.0\",\n  \"paths\": { ... },\n  \"definitions\": { ... },\n  \"responses\": { ... }\n}\nLooking at some of the examples in the go swagger docs, it seems my spec is missing more than just the info property as well, like schemes, host, basePath, etc.  Do I need to add annotations somewhere to have these missing properties generated?\nI'm wondering if I need to either:\na) add annotations somewhere to generate these missing properties \nOR\nb) if there might be some undocumented option to the generate command that needs to be included to generate the missing properties\nIf not, and this is actually a bug of some kind, I can create an example project to try and reproduce it, but unfortunately the project I'm having the issue in is not open source.. I think I may have answered my own question.  To generate the info property, you can create a // swagger:meta comment as described here:\nhttps://goswagger.io/generate/spec/meta.html\nI created a doc.go file in my main package and added the example comment from the documentation.  Now when I run swagger generate spec all the missing properties show up.. ",
    "anisimovsergey": "Thank you for the suggestion but I feel it should be like this:\nyaml\n201:\n  description: Pet created\n  headers:\n    Location:\n      description: uri of the new pet\n      type: string\n      format: uri\nI think I've seen in the docs somewhere a notice that it's possible to replace the default router. Maybe I can use Gorila's mux or something instead of denco and get the reverse routing even though it's gonna be slower. Do you have any example of how to do that? \n. I think you right, replacing router won't help much and denco as good as any other in this sense.\nWhat I really want to do is to have a some sort of a method, which can return me a URL to a resource providing the request parameters. If a new Pet instance could return an URI, that would be great but I don't think it's feasible because the Pet resource can be returned from a number of paths. So, I think the more or less implementable approach would be related to something in the API struct itself, having similar name as a get handler and accepting all the parameters as the handler (except http.Request) but instead of returning a resource this method should return a URI and err.\nSomething like:\nurl, err := api.GetUriToPetByPetID(id)\nI think this automatically generated implementation will be way more reliable than the traditional ones based on some string names of the path and a parameters matching (like here or in .NET's CreatedAtRoute) because: \na) it has the name of the resource in the name of the function\nb) it has exact number and types of the parameters as the reverse routed path needs \nc) the code breaks if you make an API change touching ether of aforementioned elements\n. Thank you for implementing it! \n. Thank you for the help!\n. I can see the same issue. \nFrom my perspective if it's not a bug then it's a serious breaking change. \n. ",
    "ychen-symphony": "Looks like this feature is missing. api_key is used in the example but goswagger will not generate the securityDefinition. ",
    "shevchenkodenis": "Confirm this. And there is no way to write securityDefinitions in swagger:meta section.. ",
    "Crevil": "This could be a great addition. We currently have a need for adding scopes to an apiKey authentication mechanism.. This issue seems to be reintroduced in the latest image.. I've got this working by making sure the package was in vendored and in the GOPATH and the type had a unique name. In my case renaming authentication.Auth to authentication.Principle.\n. Closing in favour of #1089 . @casualjim Would you be interested in this PR?\nI belive this is more of a bug fix than an enhancement as the generated documentation describes that the server should shutdown after a call to Server.Shutdown() but it does not? . The reason I'm asking is to prioritise my time as well. We are using this in production now and would like to know if a PR is likely to be released any time soon.\nAny how, I'll prepare a PR. Any checklists or alike I should use? I had some difficulty running the different make targets locally. Is it fine to just make the changes in the templates and sources and let example generation etc. be handled when things are to be merged? . Great. I'll prepare the PR. Thank you for the quick answers.. I missed the field type when switching to the atomic int. I pushed a fix. :). Maybe. What are your concerns with the current solution?. Your right. That would be better. I'll change it.. All right. I'll leave it as is. The other changes are pushed.. ",
    "wittrock": "Has anyone figured out yet if there's a specific workaround for this in go-swagger, or is all external file reference functionality broken?. ",
    "willis7": "I use glide and a simple glide init followed by glide install after generating the code worked perfectly. The dependencies were correctly identified and downloaded no problem.. ",
    "l3x": "I used glide but got the following error:\n[ERROR] Error scanning github.com/go-swagger/go-swagger/examples/authentication/client/customers: open /Users/lex/.glide/cache/src/https-github.com-go-swagger-go-swagger/examples/authentication/client/customers: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\nWhat would be the exact configuration line to use in the glide.yaml file (or other ideas) to fix this?\nThanks, in advance.\n. @casualjim Thank you for your response.  \nAs it turns out, the way go references the vendor directory is not compatible with adding a project path to the GOPATH.\nI'd get the draconian \"unexpected directory layout\" error when runnning go install\nunexpected directory layout:\n    import path: github.com/pkg/errors\n    root: /Users/lex/go/src\n    dir: /Users/lex/go/src/hi-project/vendor/github.com/pkg/errors\n    expand root: /Users/lex/go/src\n    expand dir: /Users/lex/go/src/hi-project/vendor/github.com/pkg/errors\n    separator: /\nFWIW - I created an alias that is working well for me:\nalias mvglide='mkdir -p vendors && mv vendor/ vendors/src/ && export GOPATH=$(pwd):$(pwd)/vendors;echo \"vendor packages have been moved to $(pwd)/vendors and your GOPATH: $GOPATH\"'\nI simply run the following alias (glide-install), rather than glide install \nalias glide-install='rm -rf {vendor,vendors};glide install && mvglide'\n. I can see where you might get that impression.\nI did recently start using Glide.\nIf the good folks that implemented Go's current vendoring implementation understood that the GOPATH should support more than one directory in the path, where each path is colon separated, much like the system PATH, there would be no need for my alias hacks. \nI used to use full github/bitbucket references when referring to imports in my project like this:\nimport \"github.com/myrepo/myproject/mysymbol\"\nBut once I started applying the techniques used in this article... http://manuel.kiessling.net/2012/09/28/applying-the-clean-architecture-to-go-applications/\n...I came to appreciate that less is exponentially more:\nimport \"mysymbol\"\nIf a directory has a src subdirectory, it should be a candidate for a GOPATH entry.  (Or at least that was the case before the new vendoring implementation.)\nAfter playing with glide and vendoring I found that is not the case.\nThank you for your follow up and for sharing your insights.. ",
    "tzachshabtay": "Current \"workaround\" we're using for this:\namount: \n  type: string\n  pattern:  \"^[-]?[0-9]*\\\\.?[0-9]+$\"\nAnd then we parse it to decimal manually.. ",
    "clstb": "seems like its some sort of formatting error\nSteps to reproduce\nloaded https://esi.tech.ccp.is/latest/swagger.json?datasource=tranquility into http://editor.swagger.io/#/\ngenerated a client swagger.json\nswagger generate client -f ./swagger.json -A esi\nexecuted sucessfully\n. the swagger.json that is generated with the client sdk of http://editor.swagger.io/#/ is actually a different one than the original.\ni think it only puts client stuff in there.\nmaybe it helps if you compare the original from https://esi.tech.ccp.is/latest/swagger.json?datasource=tranquility and the one that is generated with the client sdk under http://editor.swagger.io/#/\n. Im sorry, the provider of the swagger.json just updated their k8s. \nhttps://gist.github.com/claasstoertenbecker/88e2d4d0b52e4be8b128bcd199305745\nHere you go.. ",
    "clawconduce": "I was looking at adding this (which would fit right here: https://github.com/go-swagger/go-swagger/blob/master/scan/validators.go#L603) but I changed something that made my responses outputs looks like:\n\"200\": {\n            \"$ref\": \"#/responses/pet\"\n          },\n          \"500\": {\n            \"$ref\": \"#/responses/pet\"\n          }\nand I believe they were previously outputting the schema as a reference - which I mocked up below: \n\"200\": {\n            \"schema\": {\n              \"$ref\": \"#/responses/pet\"\n            }\n          },\nWhatever the change was, description is no longer required by the parser at http://editor.swagger.io/#/ .  In fact, when including a description, I get a warning that the field is ignored.. I also wanted to point out that the reference is url encoded, so spaces turn into %20.  I was thinking about splitting the value portion of the line based on the first space, so any text after the first space would become the description.\nI am not sure what I changed in my comment or build command that stopped outputting schema, but I don't think I understand the problem well enough to code a solution.. I see what the change was - I had a definition instead of a response and just missed that that changed.\nI took a stab at a fix in the PR linked above.. I set the default description to the model name so that the field is not empty.\nAlternatively, https://github.com/go-openapi/spec/blob/master/response.go#L25 could change description so it's not an omitempty field and the output is technically valid since the field is there, just the value is empty.. This seems related to #738 which I addressed in PR #777 .  Not exactly the same though - and maybe #777 should change to address this issue as well.\nIn #777 I assumed that the first item after the status code is always the response (or model if using body:), and, if there was any whitespace, everything after that was the description.  I didn't realize that there was a use case where there might be no response/model, so my PR doesn't solve this.\nI'm not sure what the best way to support descriptions and models.  I have some thoughts, but leave it to @casualjim to make the real decision.  I think descriptions should probably support spaces, so if the description could be at the end of a line, that's easy to parse.  Also, it would be nice to support tags - like body: and description:.  And to keep backwards compatibility, if the first item is not tagged, it's assumed to be the response.  So for #738,\n// 200: statusStruct description:Return Status\nand for this issue:\n// 404: description:Not Found\nIf these (or any) changes sound good & not too complicated, I'd be happy to add them to #777.. What do you mean by type information?  like listing fields, etc?. excellent, I'll probably only add description.  I also agree because of complexity - it seems like if you're getting that detailed or want to have that much information, using a 1 line comment is not the way to go.. I just noticed that parameters can be references: http://swagger.io/specification/#parametersDefinitionsObject\nWhich fits nicely with this issue.  Here is an example of it being used: https://portal.victorops.com/public/api-docs/victorops-api-v1.yaml. Thanks!  I didn't realize the parameters structs joined together.  (Also, I hadn't found this doc yet https://godoc.org/github.com/go-swagger/go-swagger/scan until I grepped for the comment in the #782 comment, I've been using examples up until now).\nAnyways, this works really well!  I still have a request though, which I think falls more under #782.  It believe in many cases, it would be more intuitive if the route could point to several swagger:parameters, than if several swagger:parameters pointed to the same route.  I will follow up there.. This almost solves my problem - my issue is that I am generating the models in a previous run of swagger and passing that json file as an input, and so I do not have model objects.  This strange setup is a side effect of using protobuf & the probably also because I'm still learning how to use go-swagger.  I'm going to give it a 2nd attempt and see if I can clean it up.\nHowever, I still have the original request.  I would like to create parameters under a route without having to create a struct with a swagger:parameters comment.  As mentioned in #781, it would be nice to point to existing parameters here too, but that's a very soft request.. @GlenDC What about 200: body:modelname?  This is under the swagger:route comment though, so it may not solve your problem.\nI am adding a little parsing for the responses to support a description: tag.  Feel free to use that, or come up with a different way.  In general I like the idea of having tag1:value1 tag2:value2, etc, but this doesn't fit with descriptions, which I think is safe to assume have spaces in the value.  My workaround is to make everything after desription: part of the description.  See #779 for more detail.. I agree with most of what @GlenDC says - in my situation, I would like the comments as close as possible to the code so it's right in your face when you're updating code.  I do like the yaml format, but I shied away from that because it is a lot of parsing work.\nI do have a valid use case for the input swagger, but it's a little strange.  We migrated most of a python codebase to golang, but there is still some python code left behind it is complex & not easy to port.  Thanks to the magic of nginx, we can hide this fact from anyone using the API.  So I am using a swagger file for the Python endpoints as an input swagger.\nI also use the input swagger a few places I could probably move to the code.  Our models are defined in protobuf templates, and the code for structs is genearted from that.  I put example values in the input swagger file.  I also have some responses that are used in many places, but I didn't want to add a struct - these are all 4xx responses.  I could use the #779 solution, but I wanted to point to a response (#/responses/) so the descriptions all came from the same place.  I think both could be solved by using structs, but I'd prefer just to write yaml/json in comments (I say json because for big json model examples, I wouldn't want to translate the example to yaml).\nEDIT: Grammer & some word choice. Yes, it would! @casualjim @GlenDC Should this be closed in favor of #793?\nEDIT: I just realized 793 is after 782 haha.. I feel much less certain about this PR than my original.  Feel free to tear it apart, comments welcome!. ",
    "hlubek": "Hi, thx. for the replies and your work!\nI still can't get it working though. Do you have an example how and where the description should go?. Thx, I got it working so the description is added to the responses of the operation when using body:myNamedResponse.\nI wonder though, why I still need to add a wrapper struct for the response and cannot just use a swagger:model annotated struct. It's nothing serious but I could save a struct per response and the responses in the generated Swagger JSON would get smaller.\nExample:\ntype authenticateResponse struct {\n    // ID of the authenticated user\n    // Required: true\n    ID bson.ObjectId `json:\"id\"`\n    // Authentication token\n    // Required: true\n    Token string `json:\"token\"`\n}\n\n// swagger:response authenticateResponse\ntype authenticateResponseWrapper struct {\n    // in: body\n    Body authenticateResponse\n}\n\n// swagger:route POST /login authentication login\n//\n// Login user\n//\n// Logs a user in by creating an authentication token `token` ...\n//\n//     Consumes:\n//     - application/x-www-form-urlencoded\n//\n//     Responses:\n//       200: body:authenticateResponse On login success\n//       401: body:errorMessage Invalid credentials\nfunc authenticateHandler(w http.ResponseWriter, r *http.Request) {\n  // ...\n}. So the question is: is the `body:` prefix needed to split for a description or could you generally do that and thus allow responses with a ref to a response and a description in an operation?. Thanks @GlenDC, I missed the `--scan-models` option when generating the spec. Now it works as I'd expect..\n",
    "HAlakeshwar": "Ivan\nThank you for fixing the issue.\n. ",
    "morlay": "@GlenDC Cool. \nI just use this quick version for my project as MVP.\nI think @casualjim already complete some work, could you join Slack to catch up with them?\nThanks for taking over this. I am really busy with other work recently and bad network in China (I cannot login Slack agent \ud83d\ude1e ). Sorry, I am new starter of Golang.\nIt may be hard for me to manage codes cross deps.\nThis why I have not write testing codes too. \ud83d\ude3f \n. Yes. We can ignore the complex objects, it is not widely used.\nAnd for stings and integer, we could follow the type which is annotated.\n``` go\n// swagger:enum\ntype Level int\nconst (\n    LEVEL_1 Level = 1\n    LEVEL_2 Level = 2\n    LEVEL_3 Level = 3\n)\n```\nwill be\nyaml\ntype: \"integer\"\nenum:\n - 1\n - 2\n - 3\n. ",
    "timbunce": "Any news on this?. ",
    "crezam": "hi @casualjim, have you tried something similar in macOS? I'm getting the below issue and I suspect your workflow is intended for Linux. Thanks\n/usr/local/go/pkg/tool/darwin_amd64/link: running clang failed: exit status 1\nld: library not found for -lcrt0.o\nclang: error: linker command failed with exit code 1 (use -v to see invocation). ",
    "hunterBhough": "For anyone coming across this in the future, host takes a string, so use --host=\"0.0.0.0\" instead of --host=0.0.0.0     ... port takes an int\nexample:\n```\nFROM golang\nMAINTAINER E. Theodore L. Omtzigt \nENV GOBIN $GOPATH/bin\nADD . /go/src/github.com/Ravenwater/server-complete\nRUN go install /go/src/github.com/Ravenwater/server-complete/cmd/todo-list-server\nWORKDIR /go/src/github.com/Ravenwater/server-complete\nENTRYPOINT /go/bin/todo-list-server --port 8090 --host=\"0.0.0.0\"\nserving HTTP of 8090\nEXPOSE 8090\n```\n@crezam I am using Docker for mac on OSX Sierra 10.12.6. ",
    "anweiss": "Hmm, good point. Thanks @casualjim. So my explanation of the issue may be incorrect. I'm using the Swagger spec here -> https://westus.dev.cognitive.microsoft.com/docs/services/TextAnalytics.V2.0/export?DocumentFormat=Swagger&ApiName=Azure%20Machine%20Learning%20-%20Text%20Analytics\nMore specifically, when I call the /operations/{operationId} endpoint, the operationProcessingResult property of the OperationResult is empty on the first few HTTP 200 responses; until the OperationResult status property returns \"Succeeded\".\nThe  placeholder in my code snippet is actually the OperationProcessingResult type.. ",
    "golisandeep3": "I am having the same problem, is there any fix for this ?. ",
    "Simon-Li": "repaste the yaml spec (for better print).\nyaml\nswagger: \"2.0\"\ninfo:\n  description: The product of a tutorial on goswagger.io\n  title: A To Do list application\n  version: 1.0.0\nconsumes:\n- application/io.goswagger.examples.todo-list.v1+json\nproduces:\n- application/io.goswagger.examples.todo-list.v1+json\nschemes:\n- http\npaths:\n  /:\n    get:\n      tags:\n        - todos\n      operationId: findTodos\n      parameters:\n        - name: since\n          in: query\n          type: integer\n          format: int64\n        - name: limit\n          in: query\n          type: integer\n          format: int32\n          default: 20\n      responses:\n        200:\n          description: list the todo operations\n          schema:\n            type: array\n            items:\n              $ref: \"#/definitions/item\"\n        default:\n          description: generic error response\n          schema:\n            $ref: \"#/definitions/error\"\n    post:\n      tags:\n        - todos\n      operationId: addOne\n      parameters:\n        - name: body\n          in: body\n          schema:\n            $ref: \"#/definitions/item\"\n      responses:\n        201:\n          description: Created\n          schema:\n            $ref: \"#/definitions/item\"\n        default:\n          description: error\n          schema:\n            $ref: \"#/definitions/error\"\n  /{id}:\n    parameters:\n      - type: integer\n        format: int64\n        name: id\n        in: path\n        required: true\n    put:\n      tags:\n        - todos\n      operationId: updateOne\n      parameters:\n        - name: body\n          in: body\n          schema:\n            $ref: \"#/definitions/item\"\n      responses:\n        200:\n          description: OK\n          schema:\n            $ref: \"#/definitions/item\"\n        default:\n          description: error\n          schema:\n            $ref: \"#/definitions/error\"\n    delete:\n      tags:\n        - todos\n      operationId: destroyOne\n      responses:\n        204:\n          description: Deleted\n        default:\n          description: error\n          schema:\n            $ref: \"#/definitions/error\"\ndefinitions:\n  IdentifierType:\n    type: string\n    format: identifier\n    pattern: ^[A-Za-z][-A-Za-z0-9_]*$\n  item:\n    type: object\n    required:\n      - description\n    properties:\n      id:\n        type: integer\n        format: int64\n        readOnly: true\n      description:\n        $ref: '#/definitions/IdentifierType'  #use its definition above, this causes the issue, if replacing the $ref reference to its direct definition, the issue is gone.\n        minLength: 1\n      completed:\n        type: boolean\n  error:\n    type: object\n    required:\n      - message\n    properties:\n      code:\n        type: integer\n        format: int64\n      message:\n        type: string. Here is the error in rest response:\n```\ncurl -l localhost:58408 -d \"{\\\"description\\\":\\\"____message\\\"}\" -H 'Content-Type: application/io.goswagger.examples.todo-list.v1+json'\n{\"code\":605,\"message\":\" in body should match '^[A-Za-z][-A-Za-z0-9_]*$'\"}\nmissing \"description\" field name in the above log, actually showing empty before \"in body should...\"\n```. @casualjim solved this issue on an internal codebase, would you mind that I initiate an PR for it? thanks!. @casualjim as you mentioned, tested again with moving down the defaults under the properties, the defaults still not effective from server side. Any hints?\ndefinitions:\n  IdentifierType:\n    type: string\n    format: identifier\n    pattern: ^[A-Za-z][-A-Za-z0-9_]*$\n  item:\n    type: object\n    properties:\n      id:\n        type: integer\n        format: int64\n        readOnly: true\n      description:\n        #$ref: '#/definitions/IdentifierType'\n        type: string\n        format: identifier\n        pattern: ^[A-Za-z][-A-Za-z0-9_]*$\n        default: abcdef\n        minLength: 1\n      completed:\n        type: boolean\n        default: true. @casualjim closed here. A PR will create for #828 . @casualjim This makes most sense. I'll create another story to implement.. @casualjim Woo... great hints! will verify it.. Should I run go generate ./generator and push the result if a template is changed? Previously I changed templates but did not do this step though. . Got it, thank-you! @casualjim . Curious what do you mean broken functions in 0.8.0? Just tested with the above spec, not seeing errors though.. The use case of this particular issue is I'm using a common modal component (e.g. type IdentifierType string), while this common modal (IdentifierType) are referenced by many different places of path/modal/property definition through $ref. When the schemavalidator template is rendered, the IdentifierType modal validator (methods) are not able to know what components it's validating for, actually the IdentifierType modal is just a common modal for other components. While, in runtime, who's calling the IdentifierType is determined and so being able to parsed out. This's mostly based on testing and may also be constrained by the implementation, please update if any concerns.. Thanks!. Right!. Sure!. Not sure whether the above change in vendor/github.com/go-openapi/errors/headers.go still need to be kept or not?. ",
    "whatvn": "is this commit available in 0.13.0? I cannot use // swagger:enum . ",
    "seifer": "Probably, we can add something like 'x-omitempty'?. @casualjim Up, please!!. Very interesting!!. ",
    "nikolay-turpitko": "@casualjim: Well, I tried to sort it out myself, but have a couple of questions and a sense that may be I am heading in a wrong direction. Could you please take a look at the gist?\nWhat I want to achieve. I have this definitions in the swagger yaml spec - an array of JWKs, and I want JWK be modeled with this existing go class, which come from the lib. I wrapped lib's class with my own one to add a stub Validate method (so that generated code be able to compile). Now I want from the go-swagger that it generate me a go code with an array of my custom jwk elements.\nWhat I tried so far. Not sure, whether it is a misuse for  x-go-name and x-go-package tags, but I like names and decided to use them, I added these tags to the JsonWebKey type definition in the spec. Next, I hacked go-swagger's generator/model.go to skip the definition with x-go-package tag. And hacked typeResolver to return jwk.Key as go type for it (name constructed as base name of the package from the x-go-package plus name from the x-go-name). I created a patch to illustrate changes (it's not a PR, just for the sake of the question). OK, with these changes it kinda did what I wanted. This code compiled and go tests in go-swagger/genearator passed (have not tried all other tests yet, though).\nIt's almost OK, but I cannot figure out where the import string came from. It magically appeared and happened to be correct. But if I change package name to, for example gojwk, it finds and imports the package with the same name from the lib, not the package from my project. I want to put my full package name from the x-go-package somewhere, so that it always be used.\nAnd overall, this hack feels a bit clumsy, I'd anticipate to fix the method t.goTypeName() instead, so that approach would work not only in resolveSchemaRef, but whenever t.goTypeName() invoked. But if I try to move fix there, some existing go tests fails. Also, some hack already existed for x-go-name exactly at the same spots.. @casualjim: Ivan, I like idea with additional extensions. But should it be two separate extensions or just one? Like \"x-go-type\": {\"name\": \"Key\", \"package\": \"github.com/user/package\", \"alias\":\"jwk\"}. Right now I can't come up with example of separate usage of x-go-type and x-go-import.\nOr, something like this:\nyaml\nx-go-import:\n  package:\n    path: \"github.com/user/package\"\n    alias: \"jwk\"\n  type: \"Key\". ",
    "Sakibs": "I want the description so I wouldnt have to make a bunch of empty structs for status codes that just return the status code text in the body.\nSo for example if I want the swagger spec to display the reason I needed to make a struct. In the image below I dont have an empty struct for the 200 status code. But for the 400 status codes I do which is why it displays it. So what I mean is if the interpreter could detect a response code, it would fill in a default reason.\n\nThe swagger route annotation \nResponses:\n  200:\n  401:Unauthorized\n  403:Forbidden\n  404:NotFound\n*/\nEmpty Structs. There is no struct for 200 status code\n```\n// Forbidden\n//\n// swagger:response Forbidden\ntype forbidden struct {\n}\n// Not Found\n//\n// swagger:response NotFound\ntype notFound struct {\n}\n```\n. What is the proper way to add in the description in the route tag?\nBased on the conversation above, I added in the description tag in the response code\n```\n    //     Responses:\n    //       200: profileResponse\n    //       401: Unauthorized\n    //       500: InternalServiceError\n    //       404: description:Not Found\n```\nAnd the swagger output for the above block is \n\"responses\": {\n          \"200\": {\n            \"$ref\": \"#/responses/profileResponse\"\n          },\n          \"401\": {\n            \"$ref\": \"#/responses/Unauthorized\"\n          },\n          \"404\": {\n            \"$ref\": \"#/responses/\"\n          },\n          \"500\": {\n            \"$ref\": \"#/responses/InternalServiceError\"\n          }\n        }\nIs the description not getting parsed properly? I am using the latest release (0.8.0) which should have the feature support \n. I like this idea. I also submitted a similar request\nhttps://github.com/go-swagger/go-swagger/issues/779\nIt would also be great if we could add headers as well and descriptions for return values\n. ",
    "xtoddx": "Hey @SandyWalsh!\nYou can work around this locally by copying in the client/parameters.gotmpl to your local project and specifying the --template-dir flag. You can change the SetPathParam line to:\nif err := r.SetPathParam({{ printf \"%q\" .Name }}, {{ if .Formatter }}{{ .Formatter }}({{ if .IsNullable }}*{{end}}{{ .ValueExpression }}){{ else }}{{if eq .GoType \"strfmt.UUID\" }}string({{end}}{{ if .IsNullable }}*{{end}}{{ .ValueExpression }}{{ if eq .GoType \"strfmt.UUID\" }}){{end}}{{end}}); err != nil {\nAs far as upstream fixes go, I have some suggestions but I'm not sure the right/best way so I'll just leave my ideas here as notes to the maintainers:\nI hacked around in generator/types.go and added \"strfmt.UUID\": \"string\" to the stringFormatters map which worked perfectly w/o changing the template (where perfectly means it built for this one particular case).  It would be nice if the atomic string type implemented fmt.Stringer (as strfmt.UUID does) so that go-openapi/runtime could take a fmt.Stringer as the second param of SetPathParam -- or SetPathParam could take an empty interface and try to cast to string/fmt.Stringer/etc in turn.. ",
    "lstoll": "Fix in #814. ",
    "etsangsplk": "I checked vendor.json and it shows:\n{\n        \"checksumSHA1\": \"6UO+LC1EPixDQliIfk7XC/ikcJg=\",\n        \"path\": \"github.com/go-openapi/validate\",\n        \"revision\": \"027696d4b54399770f1cdcc6c6daa56975f9e14e\",\n        \"revisionTime\": \"2016-10-15T05:30:59Z\"\n    },. I tried to update to the latest validate but it seems worse off\n\n..... \nvendor/github.com/go-openapi/validate\nvendor/github.com/go-openapi/validate/spec.go:198: s.spec.SpecFilePath undefined (type loads.Document has no field or method SpecFilePath)\nvendor/github.com/go-openapi/validate/spec.go:199: undefined: spec.ResolveRefWithBase\nvendor/github.com/go-openapi/validate/spec.go:199: undefined: spec.ExpandOptions\nvendor/github.com/go-openapi/validate/spec.go:623: s.spec.SpecFilePath undefined (type loads.Document has no field or method SpecFilePath)\nI cannot attach the whole vendor.json but only the lines about go-openapi\nPart of the vendor.json that contains infor on go-openapi:\n    {\n        \"checksumSHA1\": \"Ws2ljgpeN1KOb3np3u/18pPjZvo=\",\n        \"path\": \"github.com/go-openapi/analysis\",\n        \"revision\": \"7222828b8ce19afee3c595aef6643b9e42150120\",\n        \"revisionTime\": \"2016-10-09T06:10:32Z\"\n    },\n    {\n        \"checksumSHA1\": \"qdDVSYjJg4Z0RCOMN+H8THb7VgM=\",\n        \"path\": \"github.com/go-openapi/errors\",\n        \"revision\": \"4178436c9f2430cdd945c50301cfb61563b56573\",\n        \"revisionTime\": \"2016-08-30T19:04:10Z\"\n    },\n    {\n        \"checksumSHA1\": \"Au2qpfa4VkYqoEUjkd+pAzyL2cc=\",\n        \"path\": \"github.com/go-openapi/jsonpointer\",\n        \"revision\": \"46af16f9f7b149af66e5d1bd010e3574dc06de98\",\n        \"revisionTime\": \"2016-07-04T18:59:06Z\"\n    },\n    {\n        \"checksumSHA1\": \"jzzeiYHpHiEhmBNVQlBFw5Knvh0=\",\n        \"path\": \"github.com/go-openapi/jsonreference\",\n        \"revision\": \"13c6e3589ad90f49bd3e3bbe2c2cb3d7a4142272\",\n        \"revisionTime\": \"2016-07-04T19:01:45Z\"\n    },\n    {\n        \"checksumSHA1\": \"1vfk/gaZY8+35N9yNFOTIUg1H4A=\",\n        \"path\": \"github.com/go-openapi/loads\",\n        \"revision\": \"9168874c33ac10e241ee7767ed9f5d209c2a5ab0\",\n        \"revisionTime\": \"2016-10-15T05:15:24Z\"\n    },\n    {\n        \"checksumSHA1\": \"oKtPUiZeACj17cKUpLPs9H3pDjg=\",\n        \"path\": \"github.com/go-openapi/loads/fmts\",\n        \"revision\": \"9168874c33ac10e241ee7767ed9f5d209c2a5ab0\",\n        \"revisionTime\": \"2016-10-15T05:15:24Z\"\n    },\n    {\n        \"checksumSHA1\": \"K/UP0+bs3W9f+krIVlyNJJlRveg=\",\n        \"path\": \"github.com/go-openapi/runtime\",\n        \"revision\": \"12c07accf0687ab20b1e7b6293d8012ce282499c\",\n        \"revisionTime\": \"2016-11-12T08:02:51Z\"\n    },\n    {\n        \"checksumSHA1\": \"EBbEdiRHuI/u0whMY15oJNbaZB0=\",\n        \"path\": \"github.com/go-openapi/runtime/client\",\n        \"revision\": \"2faaf90bf67e0616db00094f2141f99b00a9ebc2\",\n        \"revisionTime\": \"2016-10-19T07:03:01Z\"\n    },\n    {\n        \"checksumSHA1\": \"k/v0woh+D5uViAfNI59pG8cKj1k=\",\n        \"path\": \"github.com/go-openapi/runtime/flagext\",\n        \"revision\": \"14b161b40ece9dac8e244ab2fde2d209e108c6f5\",\n        \"revisionTime\": \"2016-11-24T20:43:25Z\"\n    },\n    {\n        \"checksumSHA1\": \"hEfnshtHJsDTD+WNrVcbymBbupo=\",\n        \"path\": \"github.com/go-openapi/runtime/internal/testing\",\n        \"revision\": \"2faaf90bf67e0616db00094f2141f99b00a9ebc2\",\n        \"revisionTime\": \"2016-10-19T07:03:01Z\"\n    },\n    {\n        \"checksumSHA1\": \"0eungaSRPI/TsdGMs9oe8KJjn3w=\",\n        \"path\": \"github.com/go-openapi/runtime/internal/testing/petstore\",\n        \"revision\": \"2faaf90bf67e0616db00094f2141f99b00a9ebc2\",\n        \"revisionTime\": \"2016-10-19T07:03:01Z\"\n    },\n    {\n        \"checksumSHA1\": \"+cbiC4kf2T07TynJFKo4w8YFWb8=\",\n        \"path\": \"github.com/go-openapi/runtime/middleware\",\n        \"revision\": \"2faaf90bf67e0616db00094f2141f99b00a9ebc2\",\n        \"revisionTime\": \"2016-10-19T07:03:01Z\"\n    },\n    {\n        \"checksumSHA1\": \"NcTUgn9dgtv404Xz3UNAlqZfg4M=\",\n        \"path\": \"github.com/go-openapi/runtime/middleware/denco\",\n        \"revision\": \"2faaf90bf67e0616db00094f2141f99b00a9ebc2\",\n        \"revisionTime\": \"2016-10-19T07:03:01Z\"\n    },\n    {\n        \"checksumSHA1\": \"LAXDYZDlho3/kTzzHvJahQd44ns=\",\n        \"path\": \"github.com/go-openapi/runtime/middleware/header\",\n        \"revision\": \"2faaf90bf67e0616db00094f2141f99b00a9ebc2\",\n        \"revisionTime\": \"2016-10-19T07:03:01Z\"\n    },\n    {\n        \"checksumSHA1\": \"F7CZ0biPX37d51UhPyuT/DHD0d0=\",\n        \"path\": \"github.com/go-openapi/runtime/middleware/untyped\",\n        \"revision\": \"2faaf90bf67e0616db00094f2141f99b00a9ebc2\",\n        \"revisionTime\": \"2016-10-19T07:03:01Z\"\n    },\n    {\n        \"checksumSHA1\": \"mPl1xXsO+Ugmdlj7ZNfbbNcG6mk=\",\n        \"path\": \"github.com/go-openapi/runtime/security\",\n        \"revision\": \"2faaf90bf67e0616db00094f2141f99b00a9ebc2\",\n        \"revisionTime\": \"2016-10-19T07:03:01Z\"\n    },\n    {\n        \"checksumSHA1\": \"Mj44wpoxrYOMpZUK5ACmMh0Po7U=\",\n        \"path\": \"github.com/go-openapi/runtime/yamlpc\",\n        \"revision\": \"2faaf90bf67e0616db00094f2141f99b00a9ebc2\",\n        \"revisionTime\": \"2016-10-19T07:03:01Z\"\n    },\n    {\n        \"checksumSHA1\": \"6QkdP1VGwazrtwSbzHeKAjdZJSE=\",\n        \"path\": \"github.com/go-openapi/spec\",\n        \"revision\": \"8f2b3d0e3aa15100eea0ab61dc6fa02f00f5e713\",\n        \"revisionTime\": \"2016-10-13T15:53:17Z\"\n    },\n    {\n        \"checksumSHA1\": \"CfKtwdQamXbI88cSI5JTLWwZtcc=\",\n        \"path\": \"github.com/go-openapi/strfmt\",\n        \"revision\": \"d65c7fdb29eca313476e529628176fe17e58c488\",\n        \"revisionTime\": \"2016-08-12T05:05:34Z\"\n    },\n    {\n        \"checksumSHA1\": \"oncFAnX5ic6dHOHUz3HmmIxu6m8=\",\n        \"path\": \"github.com/go-openapi/swag\",\n        \"revision\": \"3b6d86cd965820f968760d5d419cb4add096bdd7\",\n        \"revisionTime\": \"2016-10-24T02:49:19Z\"\n    },\n    {\n        \"checksumSHA1\": \"6UO+LC1EPixDQliIfk7XC/ikcJg=\",\n        \"path\": \"github.com/go-openapi/validate\",\n        \"revision\": \"027696d4b54399770f1cdcc6c6daa56975f9e14e\",\n        \"revisionTime\": \"2016-10-15T05:30:59Z\"\n    },\n    {\n        \"checksumSHA1\": \"JSHl8b3nI8EWvzm+uyrIqj2Hiu4=\",\n        \"path\": \"github.com/golang/mock/gomock\",\n        \"revision\": \"bd3c8e81be01eef76d4b503f5e687d2d1354d2d9\",\n        \"revisionTime\": \"2016-01-21T18:51:14Z\"\n    },\n\nvendor/github.com/go-openapi/validate/spec.go:623: too many arguments in call to r.IsValidURI. I made the change but the error still pops up.  So the spec is like\nyaml\n  MaxResults:\n    name: maxResults\n    required: false\n    description: The maximum number of results to return.\n    type: integer\n    format: int64\n    default: 100 \n    minimum: 0\n    maximum: 10000\n    in: query\nAdding or removing   exclusiveMinimum or exclusiveMaximum, does not make a dent to the issue.\nI can see the code generate but jsut not the required import at the top:\n```go\nimport (\n    \"net/http\"\n\"github.com/go-openapi/errors\"\nmiddleware \"github.com/go-openapi/runtime/middleware\"\n\"github.com/go-openapi/strfmt\"\n   ....\n\n)\ngo\n// swagger:model WhyIsThisHappening\ntype WhyIsThisHappening struct {\n// assets\n// Required: true\nAssets models.Clusters `json:\"assets\"`\n\n// next token\n// Required: true\nNextToken *string `json:\"nextToken\"`\n\n}\n// Validate validates this list clusters pages o k body\nfunc (o *WhyIsThisHappening) Validate(formats strfmt.Registry) error {\n    var res []error\nif err := o.validateAssets(formats); err != nil {\n    // prop\n    res = append(res, err)\n}\n\nif err := o.validateNextToken(formats); err != nil {\n    // prop\n    res = append(res, err)\n}\n\nif len(res) > 0 {\n    return errors.CompositeValidationError(res...)\n}\nreturn nil\n\n}\nfunc (o *WhyIsThisHappening) validateAssets(formats strfmt.Registry) error {\nif err := validate.Required(\"listClustersPagesOK\"+\".\"+\"assets\", \"body\", o.Assets); err != nil {\n    return err\n}\n\nreturn nil\n\n}\nfunc (o *WhyIsThisHappening) validateNextToken(formats strfmt.Registry) error {\nif err := validate.Required(\"listClustersPagesOK\"+\".\"+\"nextToken\", \"body\", o.NextToken); err != nil {\n    return err\n}\n\nreturn nil\n\n}\n```. I replaced some string with \"whyIsThisHappening\" because it is too specific.\ngo version go1.7.4 darwin/amd64\nI can only post the log. \n2016/12/28 11:39:28 making gen schema (anon: true, req: true, tuple: false) whyIsThisHappening\n2016/12/28 11:39:28 {\n  \"type\": \"object\",\n  \"properties\": {\n    \"assets\": {\n      \"$ref\": \"#/definitions/Clusters\"\n    },\n    \"nextToken\": {\n      \"type\": \"string\"\n    }\n  }\n}\n2016/12/28 11:39:28 after shortcuit named ref\n2016/12/28 11:39:28 {\n  \"type\": \"object\",\n  \"properties\": {\n    \"assets\": {\n      \"$ref\": \"#/definitions/Clusters\"\n    },\n    \"nextToken\": {\n      \"type\": \"string\"\n    }\n  }\n}\n2016/12/28 11:39:28 after lifting special all of\n2016/12/28 11:39:28 {\n  \"type\": \"object\",\n  \"properties\": {\n    \"assets\": {\n      \"$ref\": \"#/definitions/Clusters\"\n    },\n    \"nextToken\": {\n      \"type\": \"string\"\n    }\n  }\n}\n2016/12/28 11:39:28 building all of for 0 entries\n2016/12/28 11:39:28 {\n  \"type\": \"object\",\n  \"properties\": {\n    \"assets\": {\n      \"$ref\": \"#/definitions/Clusters\"\n    },\n    \"nextToken\": {\n      \"type\": \"string\"\n    }\n  }\n}\n2016/12/28 11:39:28 model.go:1317: resolving schema (anon: true, req: true) \n2016/12/28 11:39:28 types.go:696: resolving object (anon: true, req: false)\n2016/12/28 11:39:28 gschema rrequired true nullable false\n2016/12/28 11:39:28 gschema nullable true\n2016/12/28 11:39:28 model.go:1339: resolving schema (anon: true, req: true) \n2016/12/28 11:39:28 types.go:696: resolving object (anon: true, req: false)\n2016/12/28 11:39:28 gschema nnullable true\n2016/12/28 11:39:28 building properties whyIsThisHappening (parent: whyIsThisHappening)\n2016/12/28 11:39:28 building property whyIsThisHappening[\"assets\"] (tup: false) {\n  \"type\": \"object\",\n  \"properties\": {\n    \"assets\": {\n      \"$ref\": \"#/definitions/Clusters\"\n    },\n    \"nextToken\": {\n      \"type\": \"string\"\n    }\n  }\n}\n2016/12/28 11:39:28 model.go:614: resolving schema (anon: true, req: false) \n2016/12/28 11:39:28 types.go:648: resolving ref (anon: false, req: false) #/definitions/Clusters\n2016/12/28 11:39:28 loading with base: ./specs/omg.yaml\n2016/12/28 11:39:28 types.go:341: resolving schema (anon: false, req: false) \n2016/12/28 11:39:28 types.go:666: resolving array (anon: false, req: false)\n2016/12/28 11:39:28 types.go:464: resolving schema (anon: true, req: false) \n2016/12/28 11:39:28 types.go:648: resolving ref (anon: false, req: false) #/definitions/Cluster\n2016/12/28 11:39:28 loading with base: ./specs/omg.yaml\n2016/12/28 11:39:28 types.go:341: resolving schema (anon: false, req: false) \n2016/12/28 11:39:28 types.go:696: resolving object (anon: false, req: false)\n2016/12/28 11:39:28 types.go:505: known def type: \"\"\n2016/12/28 11:39:28 types.go:505: known def type clear: \"\" -> \"\"\n2016/12/28 11:39:28 types.go:349: known def type: \"Cluster\"\n2016/12/28 11:39:28 types.go:349: known def type clear: \"Cluster\" -> \"models.Cluster\"\n2016/12/28 11:39:28 type name models.Cluster, package , alias \n2016/12/28 11:39:28 types.go:349: known def type: \"Clusters\"\n2016/12/28 11:39:28 types.go:349: known def type clear: \"Clusters\" -> \"models.Clusters\"\n2016/12/28 11:39:28 type name models.Clusters, package , alias \n2016/12/28 11:39:28 new struct branch whyIsThisHappening (parent whyIsThisHappening)\n2016/12/28 11:39:28 cloning context whyIsThisHappening\n2016/12/28 11:39:28 made new struct branch assets (parent whyIsThisHappening)\n2016/12/28 11:39:28 making gen schema (anon: true, req: true, tuple: false) assets\n2016/12/28 11:39:28 {\n  \"$ref\": \"#/definitions/Clusters\"\n}\n2016/12/28 11:39:28 after shortcuit named ref\n2016/12/28 11:39:28 {\n  \"$ref\": \"#/definitions/Clusters\"\n}\n2016/12/28 11:39:28 after lifting special all of\n2016/12/28 11:39:28 {\n  \"$ref\": \"#/definitions/Clusters\"\n}\n2016/12/28 11:39:28 building all of for 0 entries\n2016/12/28 11:39:28 {\n  \"$ref\": \"#/definitions/Clusters\"\n}\n2016/12/28 11:39:28 model.go:1317: resolving schema (anon: true, req: true) \n2016/12/28 11:39:28 types.go:648: resolving ref (anon: false, req: true) #/definitions/Clusters\n2016/12/28 11:39:28 loading with base: ./specs/omg.yaml\n2016/12/28 11:39:28 types.go:341: resolving schema (anon: false, req: true) \n2016/12/28 11:39:28 types.go:666: resolving array (anon: false, req: false)\n2016/12/28 11:39:28 types.go:464: resolving schema (anon: true, req: false) \n2016/12/28 11:39:28 types.go:648: resolving ref (anon: false, req: false) #/definitions/Cluster\n2016/12/28 11:39:28 loading with base: ./specs/omg.yaml\n2016/12/28 11:39:28 types.go:341: resolving schema (anon: false, req: false) \n2016/12/28 11:39:28 types.go:696: resolving object (anon: false, req: false)\n2016/12/28 11:39:28 types.go:505: known def type: \"\"\n2016/12/28 11:39:28 types.go:505: known def type clear: \"\" -> \"\"\n2016/12/28 11:39:28 types.go:349: known def type: \"Cluster\"\n2016/12/28 11:39:28 types.go:349: known def type clear: \"Cluster\" -> \"models.Cluster\"\n2016/12/28 11:39:28 type name models.Cluster, package , alias \n2016/12/28 11:39:28 types.go:349: known def type: \"Clusters\"\n2016/12/28 11:39:28 types.go:349: known def type clear: \"Clusters\" -> \"models.Clusters\"\n2016/12/28 11:39:28 type name models.Clusters, package , alias \n2016/12/28 11:39:28 gschema rrequired true nullable false\n2016/12/28 11:39:28 gschema nullable false\n2016/12/28 11:39:28 model.go:1339: resolving schema (anon: true, req: true) \n2016/12/28 11:39:28 types.go:648: resolving ref (anon: false, req: true) #/definitions/Clusters\n2016/12/28 11:39:28 loading with base: ./specs/omg.yaml\n2016/12/28 11:39:28 types.go:341: resolving schema (anon: false, req: true) \n2016/12/28 11:39:28 types.go:666: resolving array (anon: false, req: false)\n2016/12/28 11:39:28 types.go:464: resolving schema (anon: true, req: false) \n2016/12/28 11:39:28 types.go:648: resolving ref (anon: false, req: false) #/definitions/Cluster\n2016/12/28 11:39:28 loading with base: ./specs/omg.yaml\n2016/12/28 11:39:28 types.go:341: resolving schema (anon: false, req: false) \n2016/12/28 11:39:28 types.go:696: resolving object (anon: false, req: false)\n2016/12/28 11:39:28 types.go:505: known def type: \"\"\n2016/12/28 11:39:28 types.go:505: known def type clear: \"\" -> \"\"\n2016/12/28 11:39:28 types.go:349: known def type: \"Cluster\"\n2016/12/28 11:39:28 types.go:349: known def type clear: \"Cluster\" -> \"models.Cluster\"\n2016/12/28 11:39:28 type name models.Cluster, package , alias \n2016/12/28 11:39:28 types.go:349: known def type: \"Clusters\"\n2016/12/28 11:39:28 types.go:349: known def type clear: \"Clusters\" -> \"models.Clusters\"\n2016/12/28 11:39:28 type name models.Clusters, package , alias \n2016/12/28 11:39:28 gschema nnullable false\n2016/12/28 11:39:28 building properties assets (parent: whyIsThisHappening)\n2016/12/28 11:39:28 finished gen schema for \"assets\"\n. Sorry I can't because it is not an opensource project.. It turns out it is related to this:\nhttps://github.com/go-swagger/go-swagger/issues/756\nThe validate package is for some reason missing but other packages like github.com/go-openapi/strfmt is ok. So when goimport try to do its job, the package is not there and the import is missing as a result but just for those files (which are server response). There is a validate package but it is under go-openapi/vendor. For now I just add a goimport after the post processing to get around it.\nNow have to add go get -u golang.org/x/tools/cmd/goimports, then $GOPATH/bin/goimports -w -v just fo fix those problematic files for a workaround. A quick grab, it either tells user they have to have the old context package or directly referening it.\nThough lots are due to go-openapi\n./vendor/github.com/go-swagger/go-swagger/cmd/swagger/commands/generate/client.go:93:   * golang.org/x/net/context\n./vendor/github.com/go-openapi/runtime/client_operation.go:20:  \"golang.org/x/net/context\"\n./vendor/github.com/go-openapi/runtime/.travis.yml:12:- go get -u golang.org/x/net/context\n./vendor/github.com/go-openapi/runtime/client/runtime.go:33:    \"golang.org/x/net/context\"\n. @casualjim cool.\nCan you point me to code in the repo? I am kinda curious. I went to client transport in swagger then lost track. \nA related question, how can user inject their own http header  without using swagger spec file.\nAs you see they add to the http header, just wonder how these headers will be visible for swagger client to be send out?\nhttps://github.com/opentracing/opentracing-go/blob/bd9c3193394760d98b2fa6ebb2291f0cd1d06a7d/propagation.go#L158\n```\n// HTTPHeadersCarrier satisfies both TextMapWriter and TextMapReader.\n//\n// Example usage for server side:\n//\n//     carrier := opentracing.HTTPHeadersCarrier(httpReq.Header)\n//     clientContext, err := tracer.Extract(opentracing.HTTPHeaders, carrier)\n//\n// Example usage for client side:\n//\n//     carrier := opentracing.HTTPHeadersCarrier(httpReq.Header)\n//     err := tracer.Inject(\n//         span.Context(),\n//         opentracing.HTTPHeaders,\n//         carrier)\n//\ntype HTTPHeadersCarrier http.Header\n// Set conforms to the TextMapWriter interface.\nfunc (c HTTPHeadersCarrier) Set(key, val string) {\n    h := http.Header(c)\n    h.Add(key, val)\n}\n. @fredbi  @casualjim \nok. I think to sovle the opentracing integration with swagger generated proj. I think I kinda solve that (for customer-server example) by u:\nIf I use the generated client:\nPretty much have to stuff the context and pass into the Param via WithContext liek:\n  resp, err := g.Operations.GetGreeting(client.NewGetGreetingParams().WithContext(ctx).WithName(&name))\nTo automatically inject the http meta data on outgoing request, I have to put the part when opentracing add their own header inside a custom roundtripper, and register that with the client:\n    transport := httptransport.New(\"localhost\", \"/\", []string{\"http\"})\n    transport.Transport = myRoundTripper\n     client := greeter.New(transport, nil)\n  client. Operations.GetGreeting(client.NewGetGreetingParams().WithContext(ctx).WithName(&name))\n```\nOn the server side, I still hope the --with-context generates code that can compile \nhttps://github.com/go-swagger/go-swagger/issues/1684\n. @ huikang dep ensure was run and vendor dir was deleted . there is bug in my code so closing. ",
    "emsa23": "I have a few deep structure under definitions that works just fine, I've only seen this when declared directly in the operation.. ",
    "jmojon": "Thanks, great.\nI'm not entirely sure with regards to the Example tag. In my case I have a map[string]int representing tags and tag count in my swagger:response and rather than showing up as \"tags: {}\" in swagger I'd like to be able to put in an example json string. So for me:\n//swagger:response\ntype resultEnvelop struct {\n  // Example: { \"foo\": 10, \"bar\": 20 }\n  Tags map[string] `json:\"tags\"`\n}\nWould be perfect in my case. That is, being able to override analysis of the type and replace it with the string after the Example tag. I'm not sure this is something that's generally useful to everyone though.\n. ",
    "dcorey28": "Is there any chance examples will be supported for swagger:response?\nFor Example:\n// swagger:response\ntype Response struct {\n    // example: somebrand\n    BrandID string `json:\"brandId\"`\n    // example: 1500000000000\n    FirstRecordedDate int64 `json:\"firstRecordedDate\"`\n    // example: 1500023000000\n    LastRecordedDate int64 `json:\"lastRecordedDate\"`\n}\nOr to be able to put in an example json string would be nice too, like @jmojon showed above, because in most places in the server I am working on we use map[string]interface{} to create json response bodies.. ",
    "steve-gray": "Couldn't this be achieved easily via a map[string]interface{} on the shared context objects for each of the operation types? Stuffing the values for keys that are prefixed that way in there and doing basically nothing about them?\nThe only worry I suppose would be if the particular handlebars-esqe templating being used for this proejct has limits around requiring fixed/non-dynamic input structures at template parse time?. Closed with #895 . Is there any circumstance where the fallback to the default timeout for the client when the request specific one is not set would be undesirable? Happy to leave the errors as is.\nSent from my iPhone\n\nOn 6 Feb. 2017, at 03:28, Ivan Porto Carrero notifications@github.com wrote:\nso the point of the constructor method is this exact use case. We need a way to express forever because there are certain cases where you really don't want a request to timeout.\nFor example when you write an API that behaves like docker attach/exec.\nThe reason I let it be context deadline exceeded is exactly because it's a well-known error case that's easy to match for and that matcher is reusable outside the code of go-swagger.\nThat doesn't mean I would reject a PR from somebody making a more specific error type but I do think it would break a number of applications that already rely on this behavior. So that PR would have to include a flag to opt-in to this behavior at generation time\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "rjeczalik": "@gregmarr Fixed title - was thinking about something else, thanks for pointing out.. @casualjim Done.\nWhat about adding actual stale file check to your ci? It'd be something like:\n```diff\n$ git diff HEAD~1\ndiff --git a/appveyor.yml b/appveyor.yml\nindex c072bad..6a03635 100644\n--- a/appveyor.yml\n+++ b/appveyor.yml\n@@ -44,6 +44,10 @@ install:\n   - go get -u gopkg.in/matm/v1/gocov-html\n   - go get -u github.com/cee-dub/go-junit-report\n\n\ncheck for stale files\n\n\n\ngo generate -v ./generator\n\n\n\n\ngit diff --exit-code ./generator\n+\n build_script:\n\n\ncd %APPVEYOR_BUILD_FOLDER%\necho %PATH%\ndiff --git a/generator/shared.go b/generator/shared.go\nindex 81df7c3..38564ef 100644\n--- a/generator/shared.go\n+++ b/generator/shared.go\n@@ -34,7 +34,7 @@ import (\n        \"golang.org/x/tools/imports\"\n )\n\n-//go:generate go-bindata -pkg=generator -ignore=..sw? ./templates/...\n+//go:generate go-bindata -mode 420 -modtime 1482416923 -pkg=generator -ignore=..sw? ./templates/...\n// LanguageOpts to describe a language to the code generator\n type LanguageOpts struct {\n```. @casualjim Please don't merge yet, testing if the check works.. @casualjim Ok, looks like .git directory is removed from go-swagger before install stage:\ngit diff --exit-code ./generator\nNot a git repository\nTo compare two paths outside a working tree:\nusage: git diff [--no-index] <path> <path>\nCommand exited with code 129\nIt'd require more work, for a separate PR - let's merge the fix first.. Previous fix was wrong, I've stripped package from wrong variable - it should be GoType instead.\nHow to best add a test for building fixtures/codegen/issue844.json?. I've added a test that generates a client and then tries to build it. The test currently fails due to a different problem:\n--- FAIL: TestGenerateAndBuild (0.28s)\n    --- FAIL: TestGenerateAndBuild/issue_844 (0.28s)\n        build_test.go:40: go get ../fixtures/bugs/844/generated398758314/...: exit status 2\n                # github.com/go-swagger/go-swagger/fixtures/bugs/844/generated398758314/client/operations\n                ../fixtures/bugs/844/generated398758314/client/operations/get_responses.go:117: o.Foo.Validate undefined (type models.Foo is interface with no methods)\n                ../fixtures/bugs/844/generated398758314/client/operations/get_responses.go:121: o.Bar.Validate undefined (type models.Bar is interface with no methods)\nIndeed the generated models lack a Validate method. Not quite sure it's a regression, as every other test passes:\n$ go test -run -TestGenerateAndBuild\nPASS\nok      github.com/go-swagger/go-swagger/generator      0.197s\nProbably we'd want to have this problem also fixed before merging, so we do not have a broken master.. > Also don't forget to rebase origin/master into your branch.\nAlready rebased.\n\nWould be cool if you could fix this alongside your other commits within this PR.\n\nSure, will take a look.. @GlenDC Fixed, please take a look.. @GlenDC You're welcome :-). If you named your field _id instead of id I think you'd be able to read it. Like:\nyaml\nMessage:\n  type: object\n  required:\n    - _id\n    - text\n  properties:\n    _id:\n      type: string\n    text:\n      type: string. Weird, not sure why it gets translated. I'm using go-swagger with mongo models and it works ok. For example this model spec generates this struct. The swagger client is generated with this command.\n\ud83e\udd14 \n(btw I just found out - you can type _id in markdown by escaping the underscore like this \\_id). > @rjeczalik escaping with _id leads to a more weird behavior. It generates\nOh, I meant Markdown in github comments - I've noticed you escape _id with italics __id_ so just wanted to share with my finding. Sorry for confusion.. ",
    "yan-zhuang": "I used the latest swagger today, and it's still broken, i.e: the properties other than allOf are not marshaled/un-marshaled.. It's broken since 71225c4a7882ae49cd57e22292a58dff382908e8.\nWould some one bring this fix in?\nThanks. I created a new issue about this. https://github.com/go-swagger/go-swagger/issues/1042. See the diff that compare the fix 847 with 7125c.\n. I'll re-test with the suggested solution.\nThanks. The version 0.15.0 works with correct syntax. But it didn't report any errors with incorrect syntax.\nincorrect $ swagger validate swagger.yaml\n2018/07/18 15:49:44\nThe swagger spec at \"swagger.yaml\" is valid against swagger specification 2.0. ",
    "aleksclark": "I'd like to suggest this issue be closed, or at least raised to the go-openapi/jsonpointer repository.\nThis error:\n1) is perfectly valid - parsing \"#/responses/\" has resulted in an empty key\n2) is being generated by go-openapi/jsonpointer\n3) doesn't possess the document context sufficient to provide a line number for where it has been generated (but that's again, a matter for the jsonpointer package). ",
    "spragchris": "Is this only for open api? Is there any hope to fix error messages for swagger editor for 2.0? The messages are so horrific that I spend hours in trial and error fixing my documentation.\nNot just lack of detail, the error messages in many cases are just completely wrong.. Ah... ok. Well then I'm glad we at least shared that pain! Nevermind!. ",
    "Tomarron": "every beginner will be stack in the nonsense error message and wonder wether is there any better options but there is not.. ",
    "omadawn": "An intermediary step to a full end-to-end tutorial might simply be a working example. I've seen the reference to https://github.com/go-swagger/go-swagger/tree/master/fixtures/goparsing/petstore in issue #213 but if I clone your repo, go to that directory and run\nswagger generate spec -o ./swagger.json\nI get a swagger spec with no paths, models or anything of use. It appears to only be reading the doc.go in that directory and ignoring the code under it.\nRunning it in any of the sub folders generates loads of errors like:\n/Users/x4e5/go/src/github.com/go-swagger/go-swagger/fixtures/goparsing/petstore/models/pet.go:17:8: could not import time (cannot find package \"time\" in any of:\n    /Users/x4e5/go/src/github.com/go-swagger/go-swagger/vendor/time (vendor tree)\n    /usr/local/go/src/time (from $GOROOT)\n    /Users/x4e5/go/src/time (from $GOPATH))\nThe result being that I still have zero idea how to use this thing.. ",
    "a-h": "This issue contains a good example: https://github.com/go-swagger/go-swagger/issues/1038. ",
    "pbarker": "Good solve @GlenDC, very surprised to see this isn't in Open API. This has become a bit of a blocker for my team. If I can help out in any way here, let me know. Thanks. couldn't the timeout be a pointer? nil becomes the default timeout and you could still set 0 for streams. ",
    "franekrichardson": "I wonder if the issue here is not the attempted coercion of the complex response into an Error string (although this could probably be handled better) but that the generated API discards the response in this situation.\nGiven that we know the format of the response and actually deserialise it, should we not just return it to the caller alongside the error and allow the caller to use that response as they see fit.\nI think small changes in client.gotmpl and response.gotmpl might achieve this. Of course this would also lead to an increase in the number of return values from (a *Client) SomeAPI to include the failure types along with the success types from any given API.\nI would be happy to draft up a PR if this approach seems reasonable?. ",
    "kylebevans": "If anyone else gets here from Google, here are the changes I made based on casualjim's comment:\nEdit $GOPATH/github.com/go-openapi/strfmt/time.go lines 54-68, add a \"NoTimeZone\" constant, and add NoTimeZone to the \"dateTimeFormats\" slice.\n``\nconst (\n        // RFC3339Millis represents a ISO8601 format to millis instead of to nanos\n        RFC3339Millis = \"2006-01-02T15:04:05.000Z07:00\"\n        // RFC3339Micro represents a ISO8601 format to micro instead of to nano\n        RFC3339Micro = \"2006-01-02T15:04:05.000000Z07:00\"\n        // NoTimeZone time format that excludes the time zone\n        NoTimeZone = \"2006-01-02T15:04:05\"\n        // DateTimePattern pattern to match for the date-time format from http://tools.ietf.org/html/rfc3339#section-5.6\n        DateTimePattern =^([0-9]{2}):([0-9]{2}):([0-9]{2})(.[0-9]+)?(z|([+-][0-9]{2}:[0-9]{2}))$`\n)\nvar (\n        dateTimeFormats = []string{RFC3339Micro, RFC3339Millis, NoTimeZone, time.RFC3339, time.RFC3339Nano}\n        rxDateTime      = regexp.MustCompile(DateTimePattern)\n        // MarshalFormat sets the time resolution format used for marshaling time (set to milliseconds)\n        MarshalFormat = RFC3339Millis\n)\n```. ",
    "CuBiC3D": "Works like a charm, thank you! ;). Already tested that. _id gets translated into id and returns as _id=\"\".\nEven if I try to insert a model with _id as readOnly, it inserts as id into database.. @rjeczalik escaping with \\_id leads to a more weird behavior. It generates\ngo\n// id\n// Required: true\nID *string `json:\"\\_id\"`\nBut the actual output by return message.NewGetMessageOK().WithPayload(messages) gives me a capitalized ID.\n```\nHTTP/1.1 200 OK\nContent-Length: 794\nContent-Type: application/json\nDate: Sun, 22 Jan 2017 10:44:40 GMT\n[\n  {\n    \"ID\": null,\n...\n``\n@GlenDC Can't publish the source at this time, but can make a complete example if needed. But let me explain to make it clear: I can't use the generated models to interact with a mongoDB. Tried a bit around and found out where the actual problem is. Object transmission in mongoDB is using bson, not json. Go translates the Go models to bson just by converting them to lowercase, just like json. But here is the exception:_idwhich is represented in Go asID *string 'json:\"_id\"'. mongoDB ignores the json tagged fields, and always translatesIDintoid`. So storing requests or responding with any results from mongoDB is impossible.\nIf I edit the tags manually into ID *string 'bson:\"_id\" json:\"_id\"' it works:\n```\nHTTP/1.1 200 OK\nContent-Length: 891\nContent-Type: application/json\nDate: Sun, 22 Jan 2017 10:50:39 GMT\n[\n  {\n    \"_id\": \"X\ufffd\ufffdw\ufffdg\ufffd\ufffd3&\ufffd\",\n...\nOk, actually it's garbage, but just because it's actually not a string but a bson.ObjectId. Changing it into `ID bson.ObjectId 'bson:\"_id\" json:\"_id\"'` gives me:\nHTTP/1.1 200 OK\nContent-Length: 840\nContent-Type: application/json\nDate: Sun, 22 Jan 2017 11:06:54 GMT\n[\n  {\n    \"_id\": \"5883ed779e67b09e3326b67f\",\n...\n``\nThis is exactly what I expected to see as a response.\nSo the main question will be: Is it possible to set custom tags on fields for generation or any chance to set the bson.ObjectId type?\nIn my eyes the only way to handle this, is to make the project the 'other way' by writing the server in Go, make comments for swagger and generate the swagger file instead of the server right?\nBy the way, thank you for the help ;). That would definitely allow to store and read swagger generated models in/from mongoDB withreadOnly: trueand'bson: \"variable,omitempty\"'`, but that could be a breaking change in some special cases, where special characters has been used.\nAnother thing is the special type bson.ObjectId used by bson.\n@GlenDC \n$ swagger version\nversion: 0.8.0\ncommit: d1a0b6c1007402b2ccde73702eb0e8e43a5e7498. @GlenDC as soon the time makes it possible, I will support that PR with the new type.\nA breaking case would be every request that used a special character, got converted and resent to another external resource by bson. I don't think, that anybody did that outside the mongoDB context, but in combination with mongoDB for sure! Data fields from the database would map completely different on models.\n_example -> example\nexample_var -> exampleVar\n$var -> dollarVar\n@casualjim 2. It also regards reading from the database and responding. I understand that from the relational database point of view, it's fine to normalize data coming from a request, but on object orientated databases it's common to store/read subdocuments as-they-are or as the API spec describes them.. ",
    "posener": "@casualjim wow that was fast, Thanks!. Any news about this issue?. Yes! thanks!\nWorks for me.\nJust to make it clear to next person who meets this:\ndiff\ndefinitions:\n  ErrorModel:\n    type: object\n    required:\n    - message\n    - code\n    properties:\n      message:\n        type: string\n      code:\n        type: integer\n        minimum: 100\n        maximum: 600\n  ExtendedErrorModel:\n    allOf:\n    - $ref: '#/definitions/ErrorModel'\n+   - type: object\n+     required:\n+     - rootCause\n+     properties:\n+       rootCause:\n+         type: string\n-   type: object\n-   required:\n-   - rootCause\n-   properties:\n-     rootCause:\n-       type: string\nI think this issue can be closed, right?. The yamls in both cases is valid, and the swagger UI shows both of them the same.. > * --template should be more explicit about the intent. I suggest --use-templates\nWhy plural?\n\n\nthis option should not be a flag but a multi valued option - the value default takes the current set of templates\n\n\nWe don't really understand what you mean here.\nAs was implemented in #1626 - If no flag is specified, the default templates are loaded. If one wants to use a template from \"contrib\", it can specify it with the --template or --use-template flag. If one will use --use-template stratoscale it will use all stratoscale templates override.\n\nI am not sure about this one. Should be discussed with @casualjim.\n\nThis is what we discussed in the Slack as the current solution, if there is an alternative in mind, we are willing to implement it.\n\nDefaults settings for alternate template sets should be handled in the corresponding ./cmd/generate.\nIf you propose a set of new generation options (e.g. --use-templates-options) , it would be adequate to handle them in the way we handle language options in the GenOpts structure.\n\nThis is more or less what was implemented in #1626 , right?. @fredbi this function replaces the \"default\" template by the one defined in the \"contrib/\" directory.\nThe \"contrib/\" was added to the bindata.go file, but they only replace the default files when the --template flag is set.\nYou may suggest another way to switch the default file and we will implement it.. @fredbi why are you enforcing line lengths? It might make the code less readable.\nAccording to effective go:\n\nLine length\nGo has no line length limit. Don't worry about overflowing a punched card. If a line feels too long, wrap it and indent with an extra tab.\n\nI'm not even sure it is possible to split lines here, for example.. looks like the flag is --disable lll. Please note that the default linter does not run this check. ",
    "iain17": "Yeah custom templates should fix this right? I tried forking structfield.gotmpl because it seemed to define the tags. But I get back an error message saying: \"Cannot overwrite protected template structfield\"\nWould it otherwise not be an idea to allow additional tags apart from just json? I'd say that this use case happens in more cases than just bson.\nThe type \"bson.ObjectId' would just be another type like github.com/go-openapi/strfmt I suppose. Wrapping it around the original bson objectId.. @GlenDC seems to me that this issue here: https://github.com/go-swagger/go-swagger/issues/353 is also connected with this problem with tags. I understand that the OpenApi spec isn't allowing go tags, so maybe this is more an issue with openapi.\nHowever for the time being it seems to me that the only way around this problem, is to have an external application go through the generated structs (models) from goswagger. The program would add the tags after the fact. (Bit hackish tho, I'd love to hear an alternative solution)\nhttps://github.com/favadi/protoc-go-inject-tag?files=1\n. ",
    "OJFord": "Oh, actually, not true - what I changed was using the version from brew install rather than go get.\nSo it seems it doesn't care where the target is if the binary's in $GOPATH/bin?\nWhy does it need any relationship with $GOPATH anyway, at generate-time?. > Because we use goimports to resolve imported libraries/packages\nOh, okay.\n\nYou're generating go code, so if you want to compile it, it would also need to be in a gopath\n\nYep, but I'm compiling it in a Docker container.\n\nshouldn't make a difference if you use the brew version (installed in /usr/local/bin?)\n\nYep.\n\nCan you please give more details in your steps to reproduce this\n\n```sh\n\n$GOPATH/bin/swagger generate server [...]\n[...]\n2017/01/22 06:43:08 building a plan for generation\n2017/01/22 06:43:08 target must reside inside a location in the $GOPATH/src\n$GOPATH/bin/swagger version\ndev\nwhich swagger\n/usr/local/bin/swagger\nswagger version\nversion: 0.8.0\ncommit: d1a0b6c1007402b2ccde73702eb0e8e43a5e7498\nswagger generate server [...]\n[...]\nGeneration completed!For this generation to compile you need to have some packages in your GOPATH:\n\n\ngithub.com/go-openapi/runtime\ngithub.com/tylerb/graceful\ngithub.com/jessevdk/go-flags\ngolang.org/x/net/context\n\nYou can get these now with: go get -u -f ./...\n``.~/projectname- which isn't on my$GOPATHnow I look at it. But it works despite that with thego get`ted version.. I ended up agreeing with @casualjim about running generation in the container, as long as I was able to write my handlers on the host machine without the generated stuff (cf. #888) to avoid needing to synchronise or use a volume.\nI haven't actually got that working yet because I ran into #656,  and had to leave it as I don't have time really.\nI'll close this though, as it seems I was basically expecting a behaviour to always occur that wasn't intentionally occurring at all.. Okay, I think I get it, thanks - I was confused by the path (in this case) gen/restapi/handlers - but I can just write handlers with the right signature (or set operationId in Swagger presumably?) and put them anywhere, as long as they're in package handlers - it won't try to look for them on a relative path for example?\nThe other thing I was confused by was main.go seeming to load a Swagger specification dynamically, as in the 'Dynamic Server' example in the docs - but the other sections don't give a code listing to compare it against, so I wasn't sure if they're all like that, or how it would look if I wrote that myself. The hand-written one here seems to do the same, so is that a requirement? I'd have thought if it's not going to change it would be more efficient to have handlers fixed at compile-time.. ",
    "marcusljx": "Thanks! swagger flatten did the trick. However, I am left wondering why swagger generate does not flatten the spec first. Isn't it safe to assume that $ref lines in a spec should be flattened?\nPS. I also got another bug from flattening but that isn't related to this. I will open a new issue for that.. ",
    "EleanorRigby": "1180 . Is this still there?\nOn my machine with same yaml file as above , it produces perfect output.\nHere\n```\ntaggarwal@taggarwal-m01 \ue0b0 ~/test-swagger \ue0b0 ./swagger generate server -f bug931.yaml                                                                                                                                                                      \ue0b2 \u2714 \ue0b2 737 \ue0b2 17:20:27\n2017/08/23 17:44:26 building a plan for generation\n2017/08/23 17:44:26 planning definitions\n2017/08/23 17:44:26 planning operations\n2017/08/23 17:44:26 grouping operations into packages\n2017/08/23 17:44:26 planning meta data and facades\n2017/08/23 17:44:26 rendering 0 models\n2017/08/23 17:44:26 rendering 1 operation groups (tags)\n2017/08/23 17:44:26 rendering 1 operations for operations\n2017/08/23 17:44:26 rendering 4 templates for operation\n2017/08/23 17:44:26 name field GetMulti\n2017/08/23 17:44:26 package field operations\n2017/08/23 17:44:26 creating \"get_multi_parameters.go\" in \"restapi/operations/operations\" as parameters\n2017/08/23 17:44:26 name field GetMulti\n2017/08/23 17:44:26 package field operations\n2017/08/23 17:44:26 creating \"get_multi_urlbuilder.go\" in \"restapi/operations/operations\" as urlbuilder\n2017/08/23 17:44:26 name field GetMulti\n2017/08/23 17:44:26 package field operations\n2017/08/23 17:44:26 creating \"get_multi_responses.go\" in \"restapi/operations/operations\" as responses\n2017/08/23 17:44:26 name field GetMulti\n2017/08/23 17:44:26 package field operations\n2017/08/23 17:44:26 creating \"get_multi.go\" in \"restapi/operations/operations\" as handler\n2017/08/23 17:44:27 rendering support\n2017/08/23 17:44:27 rendering 6 templates for application MultiTag\n2017/08/23 17:44:27 name field MultiTag\n2017/08/23 17:44:27 package field operations\n2017/08/23 17:44:27 creating \"configure_multi_tag.go\" in \"restapi\" as configure\n2017/08/23 17:44:27 name field MultiTag\n2017/08/23 17:44:27 package field operations\n2017/08/23 17:44:27 creating \"main.go\" in \"cmd/multi-tag-server\" as main\n2017/08/23 17:44:27 name field MultiTag\n2017/08/23 17:44:27 package field operations\n2017/08/23 17:44:27 creating \"embedded_spec.go\" in \"restapi\" as embedded_spec\n2017/08/23 17:44:27 name field MultiTag\n2017/08/23 17:44:27 package field operations\n2017/08/23 17:44:27 creating \"server.go\" in \"restapi\" as server\n2017/08/23 17:44:27 name field MultiTag\n2017/08/23 17:44:27 package field operations\n2017/08/23 17:44:27 creating \"multi_tag_api.go\" in \"restapi/operations\" as builder\n2017/08/23 17:44:27 name field MultiTag\n2017/08/23 17:44:27 package field operations\n2017/08/23 17:44:27 creating \"doc.go\" in \"restapi\" as doc\nGeneration completed!\nFor this generation to compile you need to have some packages in your GOPATH:\n\ngithub.com/go-openapi/runtime\ngithub.com/tylerb/graceful\ngithub.com/jessevdk/go-flags\n\nYou can get these now with: go get -u -f ./...\ntaggarwal@taggarwal-m01 \ue0b0 ~/test-swagger \ue0b0 ls -R                                                                                                                                                                                                         \ue0b2 \u2714 \ue0b2 741 \ue0b2 17:45:19\nbug931.yaml    cmd            copyright.txt  copyright.txt~ pet.yaml       restapi        swagger\n./cmd:\napp-server       multi-tag-server\n./cmd/app-server:\nmain.go\n./cmd/multi-tag-server:\nmain.go\n./restapi:\nconfigure_app.go       configure_multi_tag.go doc.go                 embedded_spec.go       operations             server.go\n./restapi/operations:\napp_api.go       multi_tag_api.go operations\n./restapi/operations/operations:\nget_multi.go            get_multi_parameters.go get_multi_responses.go  get_multi_urlbuilder.go\n taggarwal@taggarwal-m01 \ue0b0 ~/test-swagger \ue0b0\n```. @casualjim : It has been verified. Can be closed.. @jgsprasad : Can you try with latest pull from https://github.com/EleanorRigby/go-swagger. @ryanwalls : can you provide location where panic is coming in runtime.go if you remove that  recovery piece of code? When I look at line 34 of runtime/text.go , it points to nothing. looks similar to issue # 890. \nThe fix for 890 is on the way. I will test and see if it resolves this one too.. @reidrac : can you share your swagger spec (The two files you mentioned)? or a snippet which helps me to reproduce the case?\nFlatten basically makes all your references local.\nExpand replaces the references with the intended content. IIRC, the expander works on local references. like #/definitions\n@casualjim :do you have more info on expansion vs flattening?\nAlso when you generate you client the flattening happens by default\n// Flatten if needed\n    if opts.FlattenSpec {\n        flattenOpts := analysis.FlattenOpts{\n            BasePath: specDoc.SpecFilePath(),\n            Spec:     analysis.New(specDoc.Spec()),\n        }\n        err = analysis.Flatten(flattenOpts)\n    }\nyou can skip it in generation using --skip-flatten\nI think multiple models are generated when you use mix of Allof, Multipleof and simiolar schema properties.. @reidrac : I will look into it. Will try to fix or share findings by eow.\nThanks for sharing.. @reidrac : looking into it now.. @reidrac : Initial analysis points to same conclusion that flatten needs to be run first which makes all schema refs local. Also, the choice has to be inline (as the way current code works) Does that unblock you to work?\nThe thing that confuses me is that flatten is run while generating server and client within the code unless one specifies --skip-flatten flag. The flattening should have happened. I am continuing my analysis further.. @reidrac : After some more digging, I now see what is happening inside the code. The current binary does not resolve any local reference inside the external reference (external ref --> Poll has a local ref --> Choice under Choices array)\nThe solution to this problem seems non-trivial and might take some thinking and time to fix. The best work around I can suggest currently is to inline the Choice (which you did) and flatten the spec.\nThe expansion of spec before generation also works perfect. The number of models generated are huge because references are used in multiple operations(That is how swagger tool behaves currently). Ideally , the AddPollParamsBodyChoicesItems and UpdatePollParamsBodyChoicesItems are the same structures but as far as I know the swagger binary does this so as to accomodate changes caused by complex definitions involving allof , anyof etc..\nIt would be helpful if you can think/share  a solution or design to handle these recursive references distributed within and in external files.. Adding on to the discussion for future work (proposed idea)\n\nIn flatten function we need a DAG of all possible references\n      a. Starting the DAG creation from root doc specified.\n      b. All the local refs must carry a file string to indicate the local file name where these local refs have expanded definitions\nThe references will be resolved in a topological sort manner\nAll the references which get free of other ref dependencies will have a map of refname --> absolute resolved definition values.\nThe final values will be substituted in root document.\n\n. #307 . @treeder : We have backed out the change as it started to break builds ( #1177 )\nWe will be working on redirect (307 response code)\n@casualjim  : can you re-open this one ?. @treeder : I think golang's net/http client should be able to handle 307 retries.  Are you specifying location header in your swagger spec for the particular path?. @casualjim : Do you have an idea what might be preventing redirection to be handled inside of http client ?\nIn client.go in net/http package I see redirect request is turned down in the following two cases \nLook at shouldRedirect flag\n// Treat 307 and 308 specially, since they're new in\n// Go 1.8, and they also require re-sending the request body.\nif resp.Header.Get(\"Location\") == \"\" {\n    // 308s have been observed in the wild being served\n    // without Location headers. Since Go 1.7 and earlier\n    // didn't follow these codes, just stop here instead\n    // of returning an error.\n    // See Issue 17773.\n    shouldRedirect = false\n    break\n}\nif ireq.GetBody == nil && ireq.outgoingLength() != 0 {\n    // We had a request body, and 307/308 require\n    // re-sending it, but GetBody is not defined. So just\n    // return this response to the user instead of an\n    // error, like we did in Go 1.7 and earlier.\n    shouldRedirect = false\n}\nAs @treeder mentioned Location header is present, I think GetBody method is nil. . @casualjim : Please check if I referenced correct issue here before merging.. @notasecret : Is your target path inside GOPATH? Are there any symlinks that you are using in your path? \nThere was a bug due to which all the paths for code generation worked. Now the behavior is corrected.. @notasecret  target without  the src folder fails in very first step of the same function because it cannot see any such directory. That's the lstat error. I was able to reproduce that.\nI am not able to reproduce your second error.  When running swagger through docker do you pass environment variable GOPATH , otherwise it defaults to $HOME/go. @notasecret : So, I finally found the problem. I noted that inside docker environment for the dev image I created similar to one on quay.io has GOPATH=/go\n2017/09/19 02:37:45 target path is   src/test\n2017/09/19 02:37:45 tgtAbsPath is /Users/taggarwal/go/src/test\n2017/09/19 02:37:45 Gopath is /go\n2017/09/19 02:37:45 In for loop gopath is /go\n2017/09/19 02:37:45 In for loop gopath(symlink) is /go\n2017/09/19 02:37:45 In for loop gopath(symlink) with src is /go/src\n2017/09/19 02:37:45 Childpath and Parentpath are /Users/taggarwal/go/src/test and /go/src respectively\n2017/09/19 02:37:45 Childpath and Parentpath are /Users/taggarwal/go/src/test and /go/src respectively\n2017/09/19 02:37:45 Childpath and Parentpath are /Users/taggarwal/go/src/test and /go/src respectively\n2017/09/19 02:37:45 target must reside inside a location in the $GOPATH/src\nSo, the GOPATH and target path do not match. You need to pass the intended GOPATH as environment variable inside docker run command like the one below. DO NOT APPEND src to it\nThis worked for me and hopefully will unblock you too. \nalias swagger=\"docker run -e GOPATH=/Users/taggarwal/go --rm -it -v $HOME:$HOME -w $(pwd) swagger:dev\"\nAlso, create the intended directory before you run this command. \nEvaluation of symlink (confusing stuff but people still use it) in target path raises the lstat error if target path does not exist. I am starting the work to fix this. Possible solution being, creating the target path if it doesn't exist before evaluation of any kind.\nWhy it doesn't work now and used to work earlier?\nThe earlier code had a bug , it never checked whether the target path is inside GOPATH. While most users had target path inside GOPATH/src but those who did not were facing generation of wrong import paths. Post my commit the correction happened and it stopped working for you.\n. The pull request to back out the change has been  created  #1178 . @ilinamitra : is it possible for you to share your parameters.gotmpl file here?\nAlso, could you elaborate more on copyright line. Are you removing that line from your own parameters.gotmpl or the one provided in source code?\n. @ilinamitra : Just to be clear, \n\nyou are creating a new directory \nplacing your template file inside it as parameter.gotmpl\nThis does not work unless you include multiple other gotmpl files under client server, validation dir (When you say multiple other do you mean all the templates or some of them)\nWhen it does work on including everything the modified template gives you copyright error on omitting that line.\n\nIs this the correct flow of what's happening?\n. @rafecolton : Is it possible for you to share  _spec/spec.yml ?. @ilinamitra  : Seems like this issue is there in yaml v2 go package (https://github.com/go-yaml/yaml/issues/184)\nLooks like it is still open.\n. @mhmxs  : Has JSON swagger spec that you shared in above issue has changed from the time you shared it?\nEverything seems to be passing now \ntaggarwal@taggarwal-m01 \ue0b0 ~/go/src/github.com/test-swagger \ue0b0 ls\ntotal 0\ndrwxr-xr-x   23 taggarwal  vmware   782 Oct 10 14:04 ..\ndrwxr-xr-x    6 taggarwal  vmware   204 Oct 10 14:08 .idea\ndrwx------  200 taggarwal  vmware  6800 Oct 10 14:10 models\ndrwxr-xr-x    5 taggarwal  vmware   170 Oct 10 14:10 .\ndrwx------   26 taggarwal  vmware   884 Oct 10 14:10 client\n taggarwal@taggarwal-m01 \ue0b0 ~/go/src/github.com/test-swagger \ue0b0 go test ./...\n?       github.com/test-swagger/client  [no test files]\n?       github.com/test-swagger/client/accountpreferences   [no test files]\n?       github.com/test-swagger/client/blueprints   [no test files]\n?       github.com/test-swagger/client/cluster  [no test files]\n?       github.com/test-swagger/client/clustertemplates [no test files]\n?       github.com/test-swagger/client/connectors   [no test files]\n?       github.com/test-swagger/client/constraints  [no test files]\n?       github.com/test-swagger/client/credentials  [no test files]\n?       github.com/test-swagger/client/events   [no test files]\n?       github.com/test-swagger/client/flexsubscriptions    [no test files]\n?       github.com/test-swagger/client/ldap [no test files]\n?       github.com/test-swagger/client/networks [no test files]\n?       github.com/test-swagger/client/rdsconfigs   [no test files]\n?       github.com/test-swagger/client/recipes  [no test files]\n?       github.com/test-swagger/client/securitygroups   [no test files]\n?       github.com/test-swagger/client/settings [no test files]\n?       github.com/test-swagger/client/smartsensesubscriptions  [no test files]\n?       github.com/test-swagger/client/stacks   [no test files]\n?       github.com/test-swagger/client/subscriptions    [no test files]\n?       github.com/test-swagger/client/templates    [no test files]\n?       github.com/test-swagger/client/topologies   [no test files]\n?       github.com/test-swagger/client/usages   [no test files]\n?       github.com/test-swagger/client/users    [no test files]\n?       github.com/test-swagger/client/util [no test files]\n?       github.com/test-swagger/models  [no test files]\n taggarwal@taggarwal-m01 \ue0b0 ~/go/src/github.com/test-swagger \ue0b0. @rabisg : The OpenApi spec 2.0 to which go-swagger currently confirms says that AdditionalProperties is a schema object. So, if you change additionalProperties: true to additionalProperties: {} it will produce a compilable code.. One of the comment on OAI/OpenAPI-Specification#668 states that \n```\nNote that in the forthcoming-very-soon-now draft-wright-01 (a.k.a. Draft 06), any schema or subschema, not just \"additionalProperties\" and \"additionalItems\", can be a boolean:\ntrue is {}\nfalse is {\"not\": {}}\n```\nSince go-swagger supports openapi 2.0 , I will suggest you to put {} instead of true for now and proceed till go-swagger starts supporting openapi 3.0.. I am not sure if comment action works. it is giving me this error when I add comment action\n2017/08/23 11:19:22 Failed to load template serverMain: template: serverMain:127: unexpected EOF. As far as I recall , you asked me to implement string() function.\nSo, I remove both UnmarshalText and string(). fixed. fixed. ",
    "kreamyx": "This issue is resolved. Close?. If this issue is resolved, can we close it?. @krasi-georgiev The issue is that the body parameter itself is not required.\nThis would work\nyaml\ndelete:\n      summary: deletes a user from the db\n      parameters:\n        - in: body\n          name: body\n          required: true\n          schema:\n            type: object\n            required:\n            - \"id_profile\"\n            properties:\n              id_profile:\n                type: string\nAfter this modification, these are the results:\nshell\ncurl -X DELETE localhost:12345/v1/user/management\nresults in\njson\n{\"code\":602,\"message\":\"body in body is required\"}\nFurther, doing this:\nshell\ncurl -H \"Content-Type: application/json\" -X DELETE localhost:12345/v1/user/management -d '{\"key\":\"value\"}'\nresults in \njson\n{\"code\":602,\"message\":\"id_profile in body is required\"}. Now go-openapi/validate guarantees that this issue won't happen again. @sklemmer yes validate detects the error if you are on master. It would fail on generate-server as well. The reason is because in the swagger spec, the schema of clientsList response is defined as type: object. It should be type: array\n``\n    \"clientsList\": {\n      \"description\": \"A list of clients.\",\n      \"schema\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/definitions/oauthClient\"\n        }\n      }\n    },. This commit https://github.com/go-openapi/validate/commit/e8b25c4c6cccee94c578fa3bd0d3f5d459290d08 \nshould fix this problem. We should close this issue if there are no further requirements. @tfeng Does it work as expected if maxLength is not specified?. OK thanks for the info. I will look into it. This issue has been addressed in https://github.com/go-openapi/validate/pull/32 but the changes are not pulled to go-swagger/vendor yet. Oh the issue is not with the $id\nThe problem is, the code generated has this linepayload = make(models.B, 0, 50)` in get_all_responses.go\nB is defined as\ngo\n// B b\n// swagger:model b\ntype B struct {\n    BOAIGen\n}\nand BOAIGen is defined as\ngo\n// BOAIGen b OAI gen\n// swagger:model bOAIGen\ntype BOAIGen []string\nSo I am guessing the code generator is embedding the BOAIGen when it shouldn't. \nIn other words, manually changing the generated code in get_all_responses.go to\ngo\npayload = &models.B{\n    BOAIGen: make(models.BOAIGen, 0, 50),\n}\nresolves the issue and the server starts properly. For $id, I will let @casualjim answer that but in general, $id is almost already supported https://github.com/go-openapi/spec/blob/master/expander.go#L629\nThe only case where $id is not supported is when a $ref is pointing to a subschema that doesn't have an $id but inherits its $id from a parent schema/subschema.\nTo support this case, any $ref should not only get resolved but the whole file pointed to by the $ref should get analyzed to identify the $id of the particular subschema the $ref is pointing to.. Hello Fredbi,\nThanks very much for the aggregation of all the relevant issues!\nThis PR is ready but I'd be happy if you can confirm that it resolves your issues before we merge it.\n1260 is not related to reference resolution (swagger flatten and expand work as expected) so I guess it's related to a minor issue in the code generation path. @casualjim can confirm.. @dmacthedestroyer You are probably on 0.13.0 and not on the recent master because the server generation always succeeds in the recent master. However, your issue hinted at another problem that we have when a local definition has the same name as a remote one which was just fixed in go-openapi/analysis. Once go-swagger is updated with the newest vendor, your spec should work without problems. @dmacthedestroyer the vendor has been updated. You should be good to go! I retested your spec and it works as expected.. @gregmarr yes those changes were introduced since the swagger flatten command so they are intentional. Or just rewrite your spec to capture this commonality\n```yml\ndefinitions:\n  Foo:\n    properties:\n      products:\n        $ref: '#/definitions/Products'\n    type: object\nBlah:\n    properties:\n      products:\n        $ref: '#/definitions/Products'\n    type: object\nProducts:\n    type: array\n    items:\n      $ref: '#/definitions/Product'\nProduct:\n    properties:\n      item:\n        type: string\n    type: object\n. @fredbi it seems like `swagger flatten` is working correctly\n`go run cm/swagger/swagger.go flatten responses.yaml`json\n{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"title\": \"Object\",\n    \"version\": \"0.1.0\"\n  },\n  \"paths\": {\n    \"/\": {\n      \"get\": {\n        \"summary\": \"GET\",\n        \"operationId\": \"getAll\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Ok\"\n          },\n          \"404\": {\n            \"description\": \"Not found\"\n          }\n        }\n      }\n    }\n  }\n}\nso could it be the case that the problem is in the validation path?. oh I see the issue has been closed. Sorry for the late reply :). @fredbi\n$ref in response or parameter outside the schema object (like exposed in this current issue) are only resolved locally at this point and not resolved when calling GetPointer(). It only works when the parameters or responses sections are declared locally in the same documentI can't seem to reproduce the second statement\n``\nI cant reproduce this part. basically all my changes can be seen if you runswagger flattenand look at the result\nI ranswagger flattenandswagger expandon the files of this issue and I got the correct flattened/expanded version of the spec which means that external files were resolved correctly. So my guess is thatvalidateis probably doing something different?\n. @fredbi I am not very familiar with the validation code, but my understanding is that validate is merely calling the spec methods to do the expansion? But I would double check that ExpandOptions is populated correctly in theswagger validate` path.\nIt might be worth mentioning that I dont recall modifying the Ref.GetPointer() function so if this is what is causing the issue then may be the problem is there? (but I might be wrong) \nI can take a look at this later and try to narrow down where the issue exists\n. One thing I quickly noticed was that the panic happens in validateResponseExample which is strange because the provided spec has no response examples. I see.\n```go\nfunc (s SpecValidator) validateResponseExample(path string, r spec.Response) *Result {\n    // values provided as example in responses must validate the schema they examplify\n    res := new(Result)\n// Recursively follow possible $ref's\nif r.Ref.String() != \"\" {\n    nr, _, err := r.Ref.GetPointer().Get(s.spec.Spec())\n    if err != nil {\n        s.addPointerError(res, err, r.Ref.String(), strings.Join([]string{\"\\\"\" + path + \"\\\"\", r.ResponseProps.Schema.ID}, \".\"))\n        return res\n    }\n    // Here we may expect type assertion to be guaranteed (not like in the Parameter case)\n    rr := nr.(spec.Response)\n    return s.validateResponseExample(path, &rr)\n}\n\nIn the validateResponseExample(), is the purpose of the above function (in the if condition) to expand the response?. If yes, then GetPointer() isn't actually the right way to expand the response.\nin `spec/expander.go`, there is an unexported method called `expandResponse` that correctly expands responses.\nWe could have an exported version of this function, something like:go\n// ExpandResponseWithBasePath expands a response based on a basepath\nfunc ExpandResponseWithBasePath(response *Response, basePath string) error {\n    opts := &ExpandOptions {\n        RelativeBase: basePath,\n    }\n    resolver, err := defaultSchemaLoader(nil, opts, nil)\n    if err != nil {\n        return err\n    }\nreturn expandResponse(response, resolver, basePath)\n\n}\nAnd then in `validate/spec.go`, we could replace GetPointer() withgo\nfunc (s SpecValidator) validateResponseExample(path string, r spec.Response) *Result {\n    // values provided as example in responses must validate the schema they examplify\n    res := new(Result)\nspec.ExpandResponseWithBasePath(r, s.spec.SpecFilePath())\n\n// NOTE: \"examples\" in responses vs \"example\" is a misleading construct in swagger\nif r.Examples != nil {\n    if r.Schema != nil {\n        if example, ok := r.Examples[\"application/json\"]; ok {\n            res.Merge(NewSchemaValidator(r.Schema, s.spec.Spec(), path, s.KnownFormats).Validate(example))\n        }\n\n        // TODO: validate other media types too\n    }\n}\nreturn res\n\n}\nI tested this and the validation passes but I am not sure if there are corner cases I didn't see. If this works, we will need to do the same thing for parameters as well. @fredbi , yes I am looking at the vendored version because the issue is reproducible there as well. yes these functions do not expand (follow the $refs). They only perform one-level resolution. It is safe they are called from the generator because they are called after the spec is flattened or expandedgo\n// Resolve resolves a reference against basePath and stores the result in target\n// Resolve is not in charge of following references, it only resolves ref by following its URL\n// if the schema that ref is referring to has more refs in it. Resolve doesn't resolve them\n// if basePath is an empty string, ref is resolved against the root schema stored in the schemaLoader struct\nfunc (r schemaLoader) Resolve(ref Ref, target interface{}, basePath string) error {\n    return r.resolveRef(ref, target, basePath)\n}\n```. Following $refs are performed by expandResponse() and expandParameter(). Let me know if you have further questions. ",
    "siadat": "Thank you, that's useful. I was looking for it in examples dir, I didn't check the docs dir.. @casualjim How do I set the content-type? I am using the generated API and I cannot find the API to change the content-type or other request headers.\n@GlenDC I reproduced the issue using another computer. I got the same result (415).\n```\n$ go version\ngo version devel +5b708a6 Mon Jan 16 05:40:45 2017 +0000 linux/amd64\n$ swagger version\ndev\n```\nIn case it could be useful, here is the list of the last commit I have for go-swagger repo and each go-openapi repo:\nb48220d 2017-01-23 github.com/go-swagger/go-swagger\nd5a75b7 2016-12-30 github.com/go-openapi/analysis\nfc3f73a 2017-01-04 github.com/go-openapi/errors\n779f453 2017-01-02 github.com/go-openapi/jsonpointer\n36d33bf 2016-11-05 github.com/go-openapi/jsonreference\n6bb6486 2017-01-17 github.com/go-openapi/loads\n3b13ebb 2017-01-19 github.com/go-openapi/runtime\n593aa4c 2017-01-16 github.com/go-openapi/spec\n0cb3db4 2017-01-12 github.com/go-openapi/strfmt\n96d7b9e 2016-12-25 github.com/go-openapi/swag\n035dcd7 2017-01-17 github.com/go-openapi/validate\n. It might be a good idea to check the generated files, perhaps compare them with the files that were generated in your case. For this purpose, I added them to the same https://github.com/siadat/swagger-eg repo.. Another observation; instead of\ngo run server.go\ngo run client.go\n\nI ran\ngo run swagger/cmd/testman-server/main.go --port 8001\ngo run client.go\n\nGot the same 415 response.. Found it.\nThe client API does not work with the latest development version of Go. This is the commit on which the client API stopped working: golang/go@4859f6a. Does that mean you are not planning to support Go 1.8? It will be out in about a week.. Thank you.. ",
    "NaNuNaNu": "No I was just using it raw. I'll try to generate a more detailed report for you.. Can't reproduce it anymore myself so might as well close this i guess.. ",
    "aanm": "What's the current status of this? I'm getting this bug with go 1.8 stable. . ",
    "mikeb333": "We are encountering this error as well. Any update on this?. Thanks for the info. We were able to get this working.. I solved this problem by creating one struct.  Call it Context, Handlers, or whatever.  Then every one of the handler functions is a receiver of the context.  I setup the Context in the configure file for the service before we bind the handlers. \nAt that point the configure file for the service becomes our \"main\" which is not tested. But all of the handlers are testable as long as the Context contains abstractions (interfaces) instead of concretes.\nExample\n```\ntype Context struct{\n    thingOps IThing\n}\nfunc NewContext(thingOps IThing) *Context {\n    return &Context{\n        thingOps:thingOps,\n    }\n}\n```\nThen in the configureAPI function in the configure file for the service...\nthingOps := ops.NewThing()\ncontext := NewContext(thingOps)\napi.SomeHandler = operations.SomeHandlerFunc(context.HandleStuff)\nThen the handler looks like this...\n```\nfunc (c *Context) HandleStuff(params operations.SomeParams) middleware.Responder {\n}\n```. ",
    "CameronAckermanSEL": "I'm on tip of master and I'm still having this problem even though a fix has been merged in. . ",
    "alexmontecucco": "Fixed it thx.\nJust to be sure: the expected result is that path with and without trailing slash are handled the same way ?. Hi, \nI just noticed there is a mistake in my proposal: I forgot that the base type is implemented as an interface.\nThus unmarshalling cannot work as such on the base type. Below is the result of my current proposal:\n```go\ntype BaseType interface {\n    runtime.Validatable\n// the base type name\n// Required: true\nType() string\nSetType(string)\n\n}\nfunc unmarshalBaseType(data []byte, consumer runtime.Consumer) (BaseType, error) {\n    buf := bytes.NewBuffer(data)\n    buf2 := bytes.NewBuffer(data)\n// the first time this is read is to fetch the value of the type property.\nvar getType struct {\n    Type string `json:\"type\"`\n}\nif err := consumer.Consume(buf, &getType); err != nil {\n    return nil, err\n}\n\nif err := validate.RequiredString(\"type\", \"body\", getType.Type); err != nil {\n    return nil, err\n}\n\n// The value of type is used to determine which type to create and unmarshal the data into\nswitch getType.Type {\ncase \"BaseType\":\n    var result Geometry\n    if err := consumer.Consume(buf2, &result); err != nil {\n        return nil, err\n    }\n    return &result, nil\n\ncase \"SomeSubType\":\n    var result MultiPolygon\n    if err := consumer.Consume(buf2, &result); err != nil {\n        return nil, err\n    }\n    return &result, nil\n\n}\nreturn nil, errors.New(422, \"invalid type value: %q\", getType.Type)\n\n}\n```\nThese two lines won't work:\ngo\nvar result Geometry\nif err := consumer.Consume(buf2, &result); err != nil {\nI see two possibilities:\n\nDefine a base interface, containing a Get and Set Discriminator. The unmarshalBaseType function would return an instance of this interface.\nDefine a private struct and a public constructor used to unmarshall and create only. Thus, for the base type we would have to use the interface, to access the fields.\n\nThe problem is that we cannot really create both a public interface and a public struct because the current implementation (if I am correct) is already limiting when have struct with different cases.\nHaving for instance a struct named 'BaseStruct' and an interface named 'IBaseStruct' is not possible because the 'IBaseStruct' name could already be defined in the swagger file.\nThe first solution looks cleaner imo.\nWhat do you think ?\n. Yes, I agree. I was just concerned about usage consistency between the different types. Base type an interface, others through an interface.\nI can update the diff in this direction if you are ok ? . Sorry for this, made a mistake when I pushed the diff.\nWill push again soon. The unittest TestGenerateModel_Discriminators will be updated as well to reflect this case.. ",
    "bschofield": "Looking at this some more, it seems that formats.Parse() is actually working as designed, and is not intended to validate the string.\nValidation could be achieved by calling formats.Validates(\"uuid\", raw) and checking the return value -- however this does not appear to happen in the generated code.\nIs this something which should be happening, or have I misunderstood?. It might also be worth mentioning that this is a parameter which is passed directly in the query string of a GET request, with no model generated. Relevant extract from spec:-\n/endpoint:\n  get:\n    parameters:\n      - name: queryId\n        in: query\n        type: string\n        format: uuid\n        required: true\n\n. ",
    "thommahoney": "If I understand correctly, you're saying that we ought to write our own Submit() function (defined here) that implements the runtime.ClientTransport interface and configure our client to use that instead using the New() function?. All set here. Thanks. Feel free to close this issue.. @casualjim I'm getting panic: no consumer: \"application/vnd.api+json\" using the spec above.. Thank you both for your help on this. \ud83d\udc4d . Yes, you can close this issue.. ",
    "polds": "Can the same pattern of using an http.RoundTripper be used to implement the AWS Signature v4 which requires reading and modifying the *http.Request before its sent?. Indeed it can, thank you.. ",
    "sachnk": "@Sef1995 Did you ever get gock working with go-swagger? I'm running into the same issue -- I can't figure out how to get gock to intercept my traffic that originates from my client generated code.. This was pretty confusing for me. In order for my required strings in my response bodies to not be pointers, I have to:\n\nAdd it to the required array\nSet MinLength: 1\nSet x-nullable: false\n\nOnly after that, was my primitive not a pointer. I'm actually coming from goa, and they have tractable docs on this (https://github.com/goadesign/goa/blob/v2/docs/FAQ.md). Might be useful for inspiration...\n. Hi @casualjim \nI think this is problematic if you're using something like Gorilla Sessions, where you need to invoke a session.save(rw, r), where rw is an http.ResponseWriter and r is an http.Request, before you return your responder.\nIn my case, I call session.save(rw, r) to get the session ID and then I need to save that value to the database. I don't see how I can do that with responder implementation, since the responder is invoked only after the route returns...\n. Hmm, I see, thanks. That seems to work.\nI also tried modifying the template to include the http.ResponseWriter within the input parameter object of every request, just like how http.Request is stored.\nThis strikes me as having more symmetrical semantics and usage. Unless there's some obvious downside I'm unaware of...\n. I'm struggling with this too. How do I change the generated auth function signatures so that it forwards the request context?\n\nhttps://github.com/go-swagger/go-swagger/blob/master/examples/authentication/restapi/operations/auth_sample_api.go#L39-L41\n\nThe above snippet is modifying a generated file, which is probably not what we want to be doing. Any further guidance / clarification would be immensely helpful! \n. Thanks @casualjim for the prompt reply.\nI see the \"context\" aware authenticators in that file. \nMy issue is: how do I actually use them? i.e. how do I configure swagger to generate code that uses BearerAuthCtx instead of BearerAuth?\nI obviously don't want to modify the generated code itself... so is there some other configuration option I can set?\n. I was able to get things working. For those who might struggle with this, here's what I did. Note, if there's an easier way to achieve this -- I'm all ears :)\n\nAdded this function to globally do all my APIKey authentication. I use name to multiplex which key I need to do authentication on. Thus, I no longer use the Auth* func(string) callbacks generated for me per key; I instead put everything into this one callback.\n\ngolang\nfunc Authenticator(name, in string, t security.TokenAuthentication) runtime.Authenticator {\n    return security.HttpAuthenticator(func(r *http.Request) (bool, interface{}, error) {\n        wrapped := security.APIKeyAuth(name, in, func(token string) (interface{}, error) {\n            // do magic auth stuff here\n            return \"success\", nil\n        })\n        return wrapped.Authenticate(r)\n    })\n}\n\nFor those of you who might be using the stratoscale template (like I am), your life is more difficult because the generated code does not actually expose the restapi/operations/*api.go, so you can't assign the APIKeyAuthenticator to another value. \n\nTo get around this, I modified the template to accept an APIKeyAuthenticator as an input parameter:\nIn server/configureapi.gotmpl:\ngolang\n// Config is configuration for Handler\ntype Config struct {\n...\n  // Authenticator to use for all APIKey authentication\n  APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator\n}\nAnd now assign it after the api instance is created:\n```golang\nfunc Handler(c Config) (http.Handler, error) {\n...\n  api := {{.Package}}.New{{ pascalize .Name }}API(spec)\n  api.ServeError = errors.ServeError\n  api.Logger = c.Logger\nif c.APIKeyAuthenticator != nil {\n    api.APIKeyAuthenticator = c.APIKeyAuthenticator\n  }\n...\n```\n. ",
    "mitch000001": "Ah, yeah, sorry, will do.. ",
    "candysmurf": "@casualjim, yes. What I found is that it works in other cases. Only one particular case does not work which has the route as /plugins/{ptype}/{pname}/{pversion}/config for GET, PUT and DELETE. They're totally missing. This set of response has custom Marshal/Unmarshal. Could this be the issue?\n. Thanks, @casualjim. \nHere is the link to the annotation:  https://gist.github.com/candysmurf/43cd4a179a8af12b95696e352091a19e\nHere is the gist for swagger.json\nhttps://gist.github.com/candysmurf/8294d9dd7afa348f6f568b3e9582c8c5\nThank you!. @casualjim, apparently fields in the config type was not exported. After I had exported those fields, it worked as expected. Thanks for your help. I'm going to close this issue.\n. ",
    "davcamer": "I'm seeing a 0 timeout behave as \"timeout instantly\" rather than \"wait forever.\" . I am seeing this error locally when the types in an enum field don't match the declared type. \nThe log in the report above shows add_label just before the error. This is the stanza from the quay.io source:\njson\n    \"AddLabel\": {\n      \"required\": [\n        \"key\",\n        \"value\",\n        \"media_type\"\n      ],\n      \"type\": \"object\",\n      \"description\": \"Adds a label to a manifest\",\n      \"properties\": {\n        \"media_type\": {\n          \"enum\": [\n            \"text/plain\",\n            \"application/json\",\n            null\n          ],\n          \"type\": [\n            \"string\",\n            \"null\"\n          ],\n          \"description\": \"The media type for this label\"\n        },\n        \"value\": {\n          \"type\": \"string\",\n          \"description\": \"The value for the label\"\n        },\n        \"key\": {\n          \"type\": \"string\",\n          \"description\": \"The key for the label\"\n        }\n      }\n    }\nI think in this case, the error could be caused by the combined string and null types?\nMy swagger has ints trying to go in to a string field, so it's more clearly a problem with the input.. ",
    "mpalomas": "I've just realised I should add one thing:\nI am aware we need PascalCase because obviously the properties need to be public/exported.\nBut, is there a way to tell the json serializer to be smart enough to accept and output camelCase?. Well, that seems to work indeed. I was pretty much sure I tried this already as it's so obvious... I guess I either did not regenerate or made a mistake.\nSorry for the noise!. Thanks for your reply. \nYes, I have seen, and I believe it's slightly different because they use a different approach: the op says he is just using swagger generate spec. Meaning he probably already has an app, using standard http handlers.\nIn our case, we use swagger generate server and therefore our app relies entirely on your http middleware and the generated code.\nFrom my limited understanding, GAE asks you to register your handlers, and that's all. They have some magic to actually listen and serve, hence my question.\nMy current attempt resulted in a panic :-) I've sent an support ticket to Google, trying to explain the situation, and I am waiting for their feedback.\nI will update this thread if I find anything.. I have some updates:\nWith some help from Google support and many attempts, I've managed to get the simple TODO example working.\nBasically, the key point is to initialize the handlers from the middleware like this:\nserver.ConfigureFlags()\nserver.ConfigureAPI()\nhttp.Handle(\"/\", server.GetHandler())\nand then remove any further generated code since we must not start listening.\nIn addition, for some reason I had to tweak the route/handler mapping (initCacheHandler) to explicitly use \"/\" instead of empty string. It's still unclear why I had to do this.\nFinally, a 3rd party \"easyjson\" needs to be tweaked as well, as it's using restricted API (unsafe package).\nAfter all of this, yes: you can get a go-swagger app working on App Engine.. I believe we can close the issue.. ",
    "flimzy": "@gaplyk https://github.com/flimzy/swagger-test. So it's a problem with the serve command I guess?. > the values other than $ref don't matter, it doesn't affect validity of the spec it just means other fields than $ref are ignored.\nBut they aren't ignored. That's the whole problem. They cause ugly warnings when running swagger serve.. > Have you seen the strfmt types?\nI had not. Setting my custom type to a strfmt does seem to solve my problem. Thank you!. Brilliant! That does indeed do the trick. Thanks!. ",
    "kinukawa": "@flimzy \nI also encountered the same problem.\nJSON reference said \n\nAny members other than \"$ref\" in a JSON Reference object SHALL be ignored.\nhttps://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03#section-3\n\njson:\"assignedTo\" tag attache \"x-go-name\" property.\nBut I want to use the json tag, so this problem is not solved.\nIgnoring warnings.. ",
    "christianklotz": "Thank you for the quick response! Great to hear it will be part of the OpenAPI 3 implementation.. ",
    "jbowes": "\nLooks good, can you please also regenerate the ./generator/bindata.go file?\n\nDone :). :( fixed. ",
    "rhardey": "Thank you casualjim, that is what I was looking for.. ",
    "kPshi": "One additional special case which I'm not even very sure about whether it's an error in go-swagger or not:\nFor the case above a client sends a plus sign which is really meant to be a plus sign. It's not escaped as %2b and the customer claimed this would be correct. We discussed that for a while and indeed: RFC2616 says\n\"Characters other than those in the \"reserved\" and \"unsafe\" sets (see\n   RFC 2396 [42]) are equivalent to their \"\"%\" HEX HEX\" encoding.\"\nand does not say anything about an encoding a space as +, but for body content of application/x-www-urlencoded the + is an alternative for %20 (draft):\n\"For compatibility with the RFC 1866 format the ampersand character is tolerated as alternative separator character, and the plus sign may be used to represent space characters.\"\nSo from my point of view a + in a path variable would have to stay +, only %20 should be unescaped while for form data a + would have to be encoded as %2b on client side while the server may decode + to space.\nSorry for nitpicking and discussing here. The potential problem I see is that it seems like several libraries do not encode correctly so implementing it to the letter of the spec could mean to cause problems with those in reality. On the other hand when the encoding bug has just recently been reported and fixed there seem not to be too many implementations even using it.\nPS: just tried that: a + in a path is a + for common browsers and servers (they handle the file named \"foo+bar\", not \"foo bar\". A + in a GET parameter on the other hand is a space character, even though visible in the URI.\nExample: foo+bar contains +, foo%20bar contains \"space\". Should work like so:\n```diff\ndiff --git a/middleware/router.go b/middleware/router.go\nindex 84b26f8..9cd4e04 100644\n--- a/middleware/router.go\n+++ b/middleware/router.go\n@@ -184,7 +184,8 @@ func (d defaultRouter) Lookup(method, path string) (MatchedRoute, bool) {\n                                debugLog(\"found a route for %s %s with %d parameters\", method, path, len(entry.Parameters))\n                                var params RouteParams\n                                for _, p := range rp {\n-                                       v, err := url.QueryUnescape(p.Value)\n+                                       // according to RFC2616 a + (plus) in a path is just a +\n+                                       v, err := url.QueryUnescape(strings.Replace(p.Value, \"+\", \"%2B\", -1))\n                                        if err != nil {\n                                                debugLog(\"failed to escape %q: %v\", p.Value, err)\n                                                v = p.Value\ndiff --git a/middleware/router_test.go b/middleware/router_test.go\nindex e64fe35..ab61b67 100644\n--- a/middleware/router_test.go\n+++ b/middleware/router_test.go\n@@ -163,14 +163,14 @@ func TestRouter_EscapedPath(t *testing.T) {\n        assert.Equal(t, 200, recorder.Code)\n    recorder = httptest.NewRecorder()\n\n\nrequest, _ = http.NewRequest(\"GET\", \"/api/pets/abc%2Fdef\", nil)\nrequest, _ = http.NewRequest(\"GET\", \"/api/pets/abc%2Fde+f\", nil)mw.ServeHTTP(recorder, request)\nassert.Equal(t, 200, recorder.Code)\nri, _ := context.RouteInfo(request)\nif assert.NotNil(t, ri) {\n        if assert.NotNil(t, ri.Params) {\n\n\nassert.Equal(t, \"abc/def\", ri.Params.Get(\"id\"))\nassert.Equal(t, \"abc/de+f\", ri.Params.Get(\"id\"))\n            }\n    }\n }\n```. \n\n\n",
    "ikouchiha47": "oh ok .. :D cool. @casualjim um, where did you get those securityDefinitions values. as in in the documentation or in the examples/authentication its not there, please guide me a bit into figuring out where can I refer to for future problems that are already solved :). ",
    "k-sathireddy": "@casualjim Thank you so much. By mistake i posted here.. ",
    "aksentyev": "same issue. ",
    "jgsprasad": "Im seeing the operations/operations folder created. Tried to compile my generated server but getting compile errors. \n2017/09/05 14:22:18 building a plan for generation\n2017/09/05 14:22:18 planning definitions\n2017/09/05 14:22:18 planning operations\n2017/09/05 14:22:18 grouping operations into packages\n2017/09/05 14:22:18 planning meta data and facades\n2017/09/05 14:22:18 rendering 3 models\n2017/09/05 14:22:18 rendering 1 templates for model uuid\n2017/09/05 14:22:18 name field uuid\n2017/09/05 14:22:18 package field models\n2017/09/05 14:22:18 creating \"uuid.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/models\" as definition\n2017/09/05 14:22:18 rendering 1 templates for model error\n2017/09/05 14:22:18 name field error\n2017/09/05 14:22:18 package field models\n2017/09/05 14:22:18 creating \"error.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/models\" as definition\n2017/09/05 14:22:18 rendering 1 templates for model success\n2017/09/05 14:22:18 name field success\n2017/09/05 14:22:18 package field models\n2017/09/05 14:22:18 creating \"success.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/models\" as definition\n2017/09/05 14:22:18 rendering 1 operation groups (tags)\n2017/09/05 14:22:18 rendering 1 operations for operations\n2017/09/05 14:22:18 rendering 4 templates for operation nusights-rest-api\n2017/09/05 14:22:18 name field fileupload\n2017/09/05 14:22:18 package field operations\n2017/09/05 14:22:18 creating \"fileupload_parameters.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/restapi/operations/operations\" as parameters\n2017/09/05 14:22:18 name field fileupload\n2017/09/05 14:22:18 package field operations\n2017/09/05 14:22:18 creating \"fileupload_urlbuilder.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/restapi/operations/operations\" as urlbuilder\n2017/09/05 14:22:18 name field fileupload\n2017/09/05 14:22:18 package field operations\n2017/09/05 14:22:18 creating \"fileupload_responses.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/restapi/operations/operations\" as responses\n2017/09/05 14:22:18 name field fileupload\n2017/09/05 14:22:18 package field operations\n2017/09/05 14:22:18 creating \"fileupload.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/restapi/operations/operations\" as handler\n2017/09/05 14:22:18 rendering support\n2017/09/05 14:22:18 rendering 6 templates for application NusightsRest\n2017/09/05 14:22:18 name field NusightsRest\n2017/09/05 14:22:18 package field operations\n2017/09/05 14:22:18 skipping /home/prasadj/workspace/main6/.go/src/nusights/server/apis/restapi/configure_nusights_rest.go because it already exists\n2017/09/05 14:22:18 name field NusightsRest\n2017/09/05 14:22:18 package field operations\n2017/09/05 14:22:18 creating \"main.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/cmd/nusights-rest-server\" as main\n2017/09/05 14:22:18 name field NusightsRest\n2017/09/05 14:22:18 package field operations\n2017/09/05 14:22:18 creating \"embedded_spec.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/restapi\" as embedded_spec\n2017/09/05 14:22:18 name field NusightsRest\n2017/09/05 14:22:18 package field operations\n2017/09/05 14:22:18 creating \"server.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/restapi\" as server\n2017/09/05 14:22:18 name field NusightsRest\n2017/09/05 14:22:18 package field operations\n2017/09/05 14:22:18 creating \"nusights_rest_api.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/restapi/operations\" as builder\n2017/09/05 14:22:18 name field NusightsRest\n2017/09/05 14:22:18 package field operations\n2017/09/05 14:22:18 creating \"doc.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/restapi\" as doc\nGeneration completed!\nInvoking go build for nusights_server_apis_cmd_nusights-rest-server\nnusights/server/apis/restapi/operations\n.go/src/nusights/server/apis/restapi/operations/nusights_rest_api.go:71: undefined: FileuploadHandler\nmake[3]: *** [nusights/go/nusights/server/apis/cmd/nusights-rest-server/CMakeFiles/nusights_server_apis_cmd_nusights-rest-server] Error 2. This error was resolved by adding format:binary for the type file. ",
    "karux": "sakibs,   if you specify a wrapper class or base class, you can return multiple responses. for example (in pseudo-swagger),\nResponseWrapper\ntype: object\nproperties:\n   response1: $ref: '#/definitions/response1'\n   response2: $ref: '#/definitions/response2'\nor more elegantly\nBaseObject:\ntype: object\nproperties:\n    id: type: string   format: uuid\nResponse1:\n  allOf:\n     - $ref: '#/definitions/BaseObject'\n     - type: object\n        properties:\n             extendedAttributeForResponse1\nResponse2:\n  allOf:\n     - $ref: '#/definitions/BaseObject'\n     - type: object\n        properties:\n             extendedAttribForResponse2\n. ",
    "kars7e": "Done!. Hey @fredbi, when preparing a reproducible example of my issue, I saw that the newest version of swagger generates main.go which uses restapi.FlatSwaggerJSON. I checked, and indeed it's there in my embedded_spec.go as well! I didn't know it's being generated (I use my own main.go in the project).\nI might wonder who would need a not flatten embedded spec, but that's a different discussion :-). Anyway, this is a non-issue anymore (and for anybody who finds this Issue: use restapi.FlatSwaggerJSON instead of restapi.SwaggerJSON).\nThanks and sorry for generating noise :-). ",
    "grogsaxle": "@GlenDC, Thanks!. ",
    "dbaumgarten": "+1\nI also would really like to have this feature. An api I am building has some properties in its models like createdAt or modifiedAt, that are declared as readOnly. Currently I have to \"manually\" remove these fields from requests, what is quite annoying, and kind of negates the whole purpose of auto-generating code from swagger.\nI tried to find the relevant places, where this had to be implemented, but I failed. Although I think I am relatively proficient in go, I have absolutely no idea, what exactly is going on in the go-swagger code.. ",
    "lucval": "@casualjim thanks for your reply.\nif with \"at build time\" you mean prior to building the golang binary (sorry newbie here) using the 'swagger generate spec' cmd then the result is unfortunately not different (4 out of 10 times the description and title in the swagger doc are incorrect).. Thanks @casualjim for the clarifications. I think we can considered this issue a non-issue then but simply a misuse from my side.. ",
    "Krashcan": "Thank you, it works that way.. ",
    "codecov[bot]": "Codecov Report\n\nMerging #939 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #939      +/-\n==========================================\n+ Coverage    72.6%   72.61%   +<.01%   \n==========================================\n  Files          21       21            \n  Lines        5896     5898       +2   \n==========================================\n+ Hits         4281     4283       +2   \n  Misses       1166     1166            \n  Partials      449      449\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 41.33% <\u00f8> (\u00f8) | :white_check_mark: |\n| generator/bindata.go | 66.51% <\u00f8> (\u00f8) | :white_check_mark: |\n| generator/model.go | 72.12% <100%> (+0.06%) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 54d23b6...78fbe8d. Read the comment docs.. # Codecov Report\nMerging #942 into master will decrease coverage by -0.02%.\nThe diff coverage is 0%.\n\n```diff\n@@            Coverage Diff            @@\nmaster    #942      +/-\n=========================================\n- Coverage   72.61%   72.6%   -0.02%   \n=========================================\n  Files          21      21            \n  Lines        5898    5899       +1   \n=========================================\n  Hits         4283    4283            \n- Misses       1166    1167       +1   \n  Partials      449     449\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/schema.go | 72.81% <\u00f8> (-0.11%) | :x: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 00f4a1f...11f2420. Read the comment docs.. # Codecov Report\nMerging #945 into master will decrease coverage by -0.04%.\nThe diff coverage is 58.33%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #945      +/-\n==========================================\n- Coverage    72.6%   72.56%   -0.04%   \n==========================================\n  Files          21       21            \n  Lines        5899     5909      +10   \n==========================================\n+ Hits         4283     4288       +5   \n- Misses       1167     1172       +5   \n  Partials      449      449\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/parameters.go | 76.38% <\u00f8> (-1.44%) | :x: |\n| scan/schema.go | 73% <100%> (+0.19%) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fea98ab...effe2c9. Read the comment docs.. # Codecov Report\nMerging #950 into master will increase coverage by 0.09%.\nThe diff coverage is 85.71%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #950      +/-\n==========================================\n+ Coverage   72.56%   72.66%   +0.09%   \n==========================================\n  Files          21       21            \n  Lines        5909     5988      +79   \n==========================================\n+ Hits         4288     4351      +63   \n- Misses       1172     1180       +8   \n- Partials      449      457       +8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/responses.go | 80.6% <100%> (\u00f8) | :white_check_mark: |\n| scan/routes.go | 95.45% <100%> (\u00f8) | :white_check_mark: |\n| scan/meta.go | 82.88% <100%> (+1.4%) | :white_check_mark: |\n| scan/path.go | 46.98% <100%> (\u00f8) | :white_check_mark: |\n| scan/validators.go | 78.84% <79.22%> (+0.02%) | :white_check_mark: |\n| generator/structs.go | 40% <0%> (-1.34%) | :x: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d9228b3...b1ace63. Read the comment docs.. # Codecov Report\nMerging #953 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #953   +/-\n=======================================\n  Coverage   72.67%   72.67%         \n=======================================\n  Files          21       21         \n  Lines        5988     5988         \n=======================================\n  Hits         4352     4352         \n  Misses       1179     1179         \n  Partials      457      457\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <\u00f8> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 43b6569...2fb0fc0. Read the comment docs.. # Codecov Report\nMerging #956 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #956   +/-\n=======================================\n  Coverage   72.67%   72.67%         \n=======================================\n  Files          21       21         \n  Lines        5988     5988         \n=======================================\n  Hits         4352     4352         \n  Misses       1179     1179         \n  Partials      457      457\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c716205...bbd1efd. Read the comment docs.. # Codecov Report\nMerging #964 into master will decrease coverage by 0.01%.\nThe diff coverage is 96.55%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #964      +/-\n==========================================\n- Coverage   72.67%   72.66%   -0.02%   \n==========================================\n  Files          21       21            \n  Lines        5988     5988            \n==========================================\n- Hits         4352     4351       -1   \n- Misses       1179     1180       +1   \n  Partials      457      457\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <96.55%> (\u00f8) | :arrow_up: |\n| generator/structs.go | 40% <0%> (-1.34%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f5b30e2...d9761b2. Read the comment docs.. # Codecov Report\nMerging #966 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #966      +/-\n==========================================\n+ Coverage   72.61%   72.61%   +<.01%   \n==========================================\n  Files          21       21            \n  Lines        5988     5986       -2   \n==========================================\n- Hits         4348     4347       -1   \n+ Misses       1184     1183       -1   \n  Partials      456      456\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/model.go | 71.73% <100%> (-0.07%) | :arrow_down: |\n| generator/structs.go | 41.33% <0%> (+1.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e04ad59...68ddc3a. Read the comment docs.. # Codecov Report\nMerging #969 into master will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff            @@\nmaster    #969      +/-\n=========================================\n- Coverage   72.61%   72.6%   -0.02%   \n=========================================\n  Files          21      21            \n  Lines        5986    5986            \n=========================================\n- Hits         4347    4346       -1   \n- Misses       1183    1184       +1   \n  Partials      456     456\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/structs.go | 40% <0%> (-1.34%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bb1340f...9978540. Read the comment docs.. # Codecov Report\nMerging #974 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #974   +/-\n=======================================\n  Coverage   72.61%   72.61%         \n=======================================\n  Files          21       21         \n  Lines        5986     5986         \n=======================================\n  Hits         4347     4347         \n  Misses       1183     1183         \n  Partials      456      456\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c06c7dd...fa4aa2f. Read the comment docs.. # Codecov Report\nMerging #975 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #975   +/-\n=======================================\n  Coverage   72.61%   72.61%         \n=======================================\n  Files          21       21         \n  Lines        5986     5986         \n=======================================\n  Hits         4347     4347         \n  Misses       1183     1183         \n  Partials      456      456\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c0252da...93dc591. Read the comment docs.. # Codecov Report\nMerging #978 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #978   +/-\n=======================================\n  Coverage   72.61%   72.61%         \n=======================================\n  Files          21       21         \n  Lines        5986     5986         \n=======================================\n  Hits         4347     4347         \n  Misses       1183     1183         \n  Partials      456      456\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b8d4a71...be5ddf1. Read the comment docs.. # Codecov Report\nMerging #980 into master will decrease coverage by 0.05%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #980      +/-\n==========================================\n- Coverage   72.61%   72.56%   -0.06%   \n==========================================\n  Files          21       21            \n  Lines        5986     5989       +3   \n==========================================\n- Hits         4347     4346       -1   \n- Misses       1183     1186       +3   \n- Partials      456      457       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/scanner.go | 74.41% <0%> (-0.59%) | :arrow_down: |\n| generator/structs.go | 40% <0%> (-1.34%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2eeb55c...8e62a0b. Read the comment docs.. # Codecov Report\nMerging #988 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #988   +/-\n=======================================\n  Coverage   72.58%   72.58%         \n=======================================\n  Files          21       21         \n  Lines        5989     5989         \n=======================================\n  Hits         4347     4347         \n  Misses       1185     1185         \n  Partials      457      457\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c493dc7...30c647b. Read the comment docs.. # Codecov Report\nMerging #994 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #994      +/-\n==========================================\n+ Coverage   72.58%   72.61%   +0.03%   \n==========================================\n  Files          21       21            \n  Lines        5989     5989            \n==========================================\n+ Hits         4347     4349       +2   \n+ Misses       1185     1184       -1   \n+ Partials      457      456       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/schema.go | 73.04% <100%> (+0.03%) | :arrow_up: |\n| generator/structs.go | 40% <0%> (-1.34%) | :arrow_down: |\n| generator/model.go | 71.8% <0%> (+0.06%) | :arrow_up: |\n| scan/scanner.go | 75% <0%> (+0.58%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 79283a6...c1beecc. Read the comment docs.. # Codecov Report\nMerging #999 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #999   +/-\n=======================================\n  Coverage   72.53%   72.53%         \n=======================================\n  Files          21       21         \n  Lines        5979     5979         \n=======================================\n  Hits         4337     4337         \n  Misses       1185     1185         \n  Partials      457      457\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 35a6d12...a315794. Read the comment docs.. # Codecov Report\nMerging #1001 into master will decrease coverage by <.01%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1001      +/-\n==========================================\n- Coverage    72.5%   72.49%   -0.01%   \n==========================================\n  Files          21       21            \n  Lines        5979     5985       +6   \n==========================================\n+ Hits         4335     4339       +4   \n  Misses       1187     1187            \n- Partials      457      459       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/support.go | 68.68% <50%> (-0.26%) | :arrow_down: |\n| scan/schema.go | 72.87% <50%> (-0.17%) | :arrow_down: |\n| generator/structs.go | 41.33% <0%> (+2.66%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6c8b467...f54d7a7. Read the comment docs.. # Codecov Report\nMerging #1004 into master will decrease coverage by 0.02%.\nThe diff coverage is 34.78%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1004      +/-\n==========================================\n- Coverage   72.49%   72.47%   -0.03%   \n==========================================\n  Files          21       21            \n  Lines        5985     5976       -9   \n==========================================\n- Hits         4339     4331       -8   \n+ Misses       1187     1184       -3   \n- Partials      459      461       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <\u00f8> (\u00f8) | :arrow_up: |\n| scan/meta.go | 82.88% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/client.go | 62.5% <\u00f8> (\u00f8) | :arrow_up: |\n| scan/responses.go | 80.6% <0%> (\u00f8) | :arrow_up: |\n| scan/schema.go | 72.22% <0%> (-0.66%) | :arrow_down: |\n| generator/support.go | 68.85% <0%> (+0.16%) | :arrow_up: |\n| scan/parameters.go | 76.38% <0%> (\u00f8) | :arrow_up: |\n| generator/types.go | 83.68% <0%> (\u00f8) | :arrow_up: |\n| generator/model.go | 71.78% <100%> (+0.04%) | :arrow_up: |\n| scan/scanner.go | 75.19% <100%> (+0.77%) | :arrow_up: |\n| ... and 2 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 67a64c4...940b7dc. Read the comment docs.. # Codecov Report\nMerging #1008 into master will increase coverage by 0.01%.\nThe diff coverage is 75.34%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1008      +/-\n==========================================\n+ Coverage   72.47%   72.49%   +0.01%   \n==========================================\n  Files          21       21            \n  Lines        5976     6038      +62   \n==========================================\n+ Hits         4331     4377      +46   \n- Misses       1184     1192       +8   \n- Partials      461      469       +8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/meta.go | 81.14% <63.63%> (-1.74%) | :arrow_down: |\n| scan/validators.go | 77.84% <64.28%> (-0.86%) | :arrow_down: |\n| scan/scanner.go | 76.1% <88.23%> (+0.91%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5d14d17...2bf34e3. Read the comment docs.. # Codecov Report\nMerging #1014 into master will decrease coverage by 0.02%.\nThe diff coverage is 16.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1014      +/-\n==========================================\n- Coverage   72.45%   72.43%   -0.03%   \n==========================================\n  Files          21       21            \n  Lines        6038     6044       +6   \n==========================================\n+ Hits         4375     4378       +3   \n- Misses       1194     1196       +2   \n- Partials      469      470       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/support.go | 68.35% <0%> (-0.5%) | :arrow_down: |\n| generator/client.go | 61.53% <33.33%> (-0.97%) | :arrow_down: |\n| generator/structs.go | 41.33% <0%> (+2.66%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fbc64c2...1714fb1. Read the comment docs.\n. # Codecov Report\nMerging #1015 into master will decrease coverage by 0.14%.\nThe diff coverage is 7.69%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1015      +/-\n==========================================\n- Coverage   72.43%   72.29%   -0.15%   \n==========================================\n  Files          21       21            \n  Lines        6044     6056      +12   \n==========================================\n  Hits         4378     4378            \n- Misses       1196     1208      +12   \n  Partials      470      470\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 64.75% <7.69%> (-1.76%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f875d6b...9019221. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@378b492). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1016   +/-\n=========================================\n  Coverage          ?   72.26%         \n=========================================\n  Files             ?       21         \n  Lines             ?     6069         \n  Branches          ?        0         \n=========================================\n  Hits              ?     4386         \n  Misses            ?     1214         \n  Partials          ?      469\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/scanner.go | 76.1% <\u00f8> (\u00f8) | |\n| generator/bindata.go | 64.75% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 378b492...7d68836. Read the comment docs.\n. # Codecov Report\nMerging #1017 into master will increase coverage by 0.09%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1017      +/-\n==========================================\n+ Coverage   72.28%   72.38%   +0.09%   \n==========================================\n  Files          21       21            \n  Lines        6069     6072       +3   \n==========================================\n+ Hits         4387     4395       +8   \n+ Misses       1213     1208       -5   \n  Partials      469      469\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 40% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/model.go | 72.42% <100%> (+0.63%) | :arrow_up: |\n| generator/bindata.go | 64.75% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bea9b86...e2c33ad. Read the comment docs.\n. # Codecov Report\nMerging #1018 into master will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1018      +/-\n==========================================\n- Coverage   72.39%   72.38%   -0.02%   \n==========================================\n  Files          21       21            \n  Lines        6072     6072            \n==========================================\n- Hits         4396     4395       -1   \n- Misses       1207     1208       +1   \n  Partials      469      469\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 40% <0%> (-1.34%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 500d032...48cc3d6. Read the comment docs.\n. # Codecov Report\nMerging #1019 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1019      +/-\n=========================================\n+ Coverage   72.39%   72.4%   +<.01%   \n=========================================\n  Files          21      21            \n  Lines        6072    6073       +1   \n=========================================\n+ Hits         4396    4397       +1   \n  Misses       1207    1207            \n  Partials      469     469\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/operation.go | 69.52% <100%> (+0.04%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update daba95b...921b55c. Read the comment docs.\n. # Codecov Report\nMerging #1023 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1023   +/-\n======================================\n  Coverage    72.4%   72.4%         \n======================================\n  Files          21      21         \n  Lines        6073    6073         \n======================================\n  Hits         4397    4397         \n  Misses       1207    1207         \n  Partials      469     469\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e62bb82...179c932. Read the comment docs.\n. # Codecov Report\nMerging #1024 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1024   +/-\n======================================\n  Coverage    72.4%   72.4%         \n======================================\n  Files          21      21         \n  Lines        6073    6073         \n======================================\n  Hits         4397    4397         \n  Misses       1207    1207         \n  Partials      469     469\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 98671ec...fd05b20. Read the comment docs.\n. # Codecov Report\nMerging #1030 into master will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1030      +/-\n==========================================\n- Coverage    72.4%   72.38%   -0.02%   \n==========================================\n  Files          21       21            \n  Lines        6073     6073            \n==========================================\n- Hits         4397     4396       -1   \n- Misses       1207     1208       +1   \n  Partials      469      469\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 64.75% <100%> (\u00f8) | :arrow_up: |\n| generator/structs.go | 40% <0%> (-1.34%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 98671ec...608f77b. Read the comment docs.\n. # Codecov Report\nMerging #1032 into master will increase coverage by 0.12%.\nThe diff coverage is 82.45%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1032      +/-\n==========================================\n+ Coverage    72.4%   72.52%   +0.12%   \n==========================================\n  Files          21       21            \n  Lines        6073     6115      +42   \n==========================================\n+ Hits         4397     4435      +38   \n- Misses       1207     1212       +5   \n+ Partials      469      468       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/validators.go | 79.33% <82.45%> (+1.2%) | :arrow_up: |\n| generator/structs.go | 40% <0%> (-1.34%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 09dfac7...01f8647. Read the comment docs.\n. # Codecov Report\nMerging #1033 into master will increase coverage by 0.13%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1033      +/-\n==========================================\n+ Coverage   72.54%   72.67%   +0.13%   \n==========================================\n  Files          21       21            \n  Lines        6115     5988     -127   \n==========================================\n- Hits         4436     4352      -84   \n+ Misses       1211     1179      -32   \n+ Partials      468      457      -11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/scanner.go | 75% <0%> (-1.11%) | :arrow_down: |\n| scan/parameters.go | 76.38% <0%> (-1.11%) | :arrow_down: |\n| scan/validators.go | 78.84% <0%> (-0.5%) | :arrow_down: |\n| generator/model.go | 72.12% <0%> (-0.3%) | :arrow_down: |\n| generator/operation.go | 69.47% <0%> (-0.05%) | :arrow_down: |\n| generator/structs.go | 41.33% <0%> (\u00f8) | :arrow_up: |\n| generator/support.go | 68.94% <0%> (+0.59%) | :arrow_up: |\n| generator/shared.go | 74.36% <0%> (+0.66%) | :arrow_up: |\n| generator/client.go | 62.5% <0%> (+0.96%) | :arrow_up: |\n| scan/schema.go | 73% <0%> (+1.26%) | :arrow_up: |\n| ... and 2 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update adced0f...c716205. Read the comment docs.\n. # Codecov Report\nMerging #1035 into master will increase coverage by <.01%.\nThe diff coverage is 76.92%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1035      +/-\n==========================================\n+ Coverage   72.54%   72.55%   +<.01%   \n==========================================\n  Files          21       21            \n  Lines        6115     6124       +9   \n==========================================\n+ Hits         4436     4443       +7   \n- Misses       1211     1213       +2   \n  Partials      468      468\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/shared.go | 73.69% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/operation.go | 69.3% <0%> (-0.23%) | :arrow_down: |\n| generator/client.go | 62.36% <100%> (+0.82%) | :arrow_up: |\n| generator/support.go | 68.73% <100%> (+0.37%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update adced0f...a376934. Read the comment docs.\n. # Codecov Report\nMerging #1037 into master will decrease coverage by 0.01%.\nThe diff coverage is 57.14%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1037      +/-\n==========================================\n- Coverage   72.55%   72.53%   -0.02%   \n==========================================\n  Files          21       21            \n  Lines        6124     6131       +7   \n==========================================\n+ Hits         4443     4447       +4   \n- Misses       1213     1216       +3   \n  Partials      468      468\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 41.33% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/support.go | 68.88% <100%> (+0.14%) | :arrow_up: |\n| generator/operation.go | 69.07% <40%> (-0.24%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 58b111d...a83e77a. Read the comment docs.\n. # Codecov Report\nMerging #1044 into master will decrease coverage by 0.12%.\nThe diff coverage is 63.63%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1044      +/-\n=========================================\n- Coverage   72.53%   72.4%   -0.13%   \n=========================================\n  Files          21      21            \n  Lines        6131    6157      +26   \n=========================================\n+ Hits         4447    4458      +11   \n- Misses       1216    1227      +11   \n- Partials      468     472       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/parameters.go | 77.49% <100%> (\u00f8) | :arrow_up: |\n| scan/responses.go | 80.6% <100%> (\u00f8) | :arrow_up: |\n| scan/validators.go | 78.04% <47.61%> (-1.29%) | :arrow_down: |\n| scan/schema.go | 71.42% <68.75%> (-0.32%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a699dd8...d8bfe6f. Read the comment docs.\n. # Codecov Report\nMerging #1045 into master will increase coverage by 0.15%.\nThe diff coverage is 96.55%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1045      +/-\n==========================================\n+ Coverage   72.38%   72.54%   +0.15%   \n==========================================\n  Files          21       21            \n  Lines        6157     6145      -12   \n==========================================\n+ Hits         4457     4458       +1   \n+ Misses       1228     1215      -13   \n  Partials      472      472\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <96.55%> (+1.75%) | :arrow_up: |\n| generator/structs.go | 41.33% <0%> (+1.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c9176d8...e6f180c. Read the comment docs.\n. # Codecov Report\nMerging #1046 into master will decrease coverage by <.01%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1046      +/-\n==========================================\n- Coverage   72.38%   72.38%   -0.01%   \n==========================================\n  Files          21       21            \n  Lines        6157     6159       +2   \n==========================================\n+ Hits         4457     4458       +1   \n- Misses       1228     1229       +1   \n  Partials      472      472\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/template_repo.go | 58.28% <0%> (-0.68%) | :arrow_down: |\n| generator/structs.go | 41.33% <0%> (+1.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c9176d8...530340f. Read the comment docs.\n. # Codecov Report\nMerging #1048 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1048      +/-\n==========================================\n+ Coverage   72.52%   72.54%   +0.01%   \n==========================================\n  Files          21       21            \n  Lines        6147     6115      -32   \n==========================================\n- Hits         4458     4436      -22   \n+ Misses       1217     1211       -6   \n+ Partials      472      468       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 64.75% <0%> (-1.76%) | :arrow_down: |\n| generator/client.go | 61.53% <0%> (-0.83%) | :arrow_down: |\n| generator/support.go | 68.35% <0%> (-0.53%) | :arrow_down: |\n| generator/shared.go | 73.69% <0%> (\u00f8) | :arrow_up: |\n| generator/structs.go | 41.33% <0%> (\u00f8) | :arrow_up: |\n| scan/schema.go | 71.73% <0%> (+0.31%) | :arrow_up: |\n| generator/operation.go | 69.52% <0%> (+0.45%) | :arrow_up: |\n| generator/template_repo.go | 58.95% <0%> (+0.67%) | :arrow_up: |\n| scan/validators.go | 79.33% <0%> (+1.28%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 30888c7...e5e80f7. Read the comment docs.\n. # Codecov Report\nMerging #1054 into master will not change coverage.\nThe diff coverage is 0%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1054   +/-\n=======================================\n  Coverage   72.53%   72.53%         \n=======================================\n  Files          21       21         \n  Lines        6150     6150         \n=======================================\n  Hits         4461     4461         \n  Misses       1217     1217         \n  Partials      472      472\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/template_repo.go | 58.28% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a836502...91bf248. Read the comment docs.\n. # Codecov Report\nMerging #1055 into master will not change coverage.\nThe diff coverage is 96.55%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1055   +/-\n=======================================\n  Coverage   72.53%   72.53%         \n=======================================\n  Files          21       21         \n  Lines        6150     6150         \n=======================================\n  Hits         4461     4461         \n  Misses       1217     1217         \n  Partials      472      472\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <96.55%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d903e78...c23da7a. Read the comment docs.\n. # Codecov Report\nMerging #1057 into master will decrease coverage by 0.4%.\nThe diff coverage is 81.15%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1057      +/-\n==========================================\n- Coverage   72.53%   72.12%   -0.41%   \n==========================================\n  Files          21       21            \n  Lines        6150     6049     -101   \n==========================================\n- Hits         4461     4363      -98   \n- Misses       1217     1221       +4   \n+ Partials      472      465       -7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/validators.go | 76.92% <\u00f8> (-1.13%) | :arrow_down: |\n| scan/parameters.go | 77.2% <0%> (-0.29%) | :arrow_down: |\n| scan/responses.go | 80.25% <0%> (-0.35%) | :arrow_down: |\n| scan/routes.go | 95.45% <100%> (\u00f8) | :arrow_up: |\n| scan/meta.go | 80.62% <81.81%> (-0.53%) | :arrow_down: |\n| scan/scanner.go | 73.34% <82.92%> (-2.76%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 56b1438...f912233. Read the comment docs.\n. # Codecov Report\nMerging #1058 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1058   +/-\n=======================================\n  Coverage   72.11%   72.11%         \n=======================================\n  Files          21       21         \n  Lines        6049     6049         \n=======================================\n  Hits         4362     4362         \n  Misses       1222     1222         \n  Partials      465      465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 40% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8201a8d...38adb13. Read the comment docs.\n. # Codecov Report\nMerging #1069 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1069      +/-\n==========================================\n+ Coverage   72.11%   72.12%   +0.01%   \n==========================================\n  Files          21       21            \n  Lines        6049     6049            \n==========================================\n+ Hits         4362     4363       +1   \n+ Misses       1222     1221       -1   \n  Partials      465      465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/types.go | 83.68% <100%> (\u00f8) | :arrow_up: |\n| generator/structs.go | 41.33% <0%> (+1.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 220a68f...6322228. Read the comment docs.\n. # Codecov Report\nMerging #1070 into master will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1070      +/-\n==========================================\n+ Coverage   72.11%   72.17%   +0.06%   \n==========================================\n  Files          21       21            \n  Lines        6049     6048       -1   \n==========================================\n+ Hits         4362     4365       +3   \n+ Misses       1222     1218       -4   \n  Partials      465      465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/support.go | 68.8% <100%> (-0.08%) | :arrow_down: |\n| generator/operation.go | 69.84% <0%> (+0.62%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8f18ad5...f0d0138. Read the comment docs.\n. # Codecov Report\nMerging #1071 into master will increase coverage by 0.03%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1071      +/-\n==========================================\n+ Coverage   72.15%   72.18%   +0.03%   \n==========================================\n  Files          21       21            \n  Lines        6048     6048            \n==========================================\n+ Hits         4364     4366       +2   \n+ Misses       1219     1217       -2   \n  Partials      465      465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 41.33% <0%> (+2.66%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b370a6d...5ad8369. Read the comment docs.\n. # Codecov Report\nMerging #1072 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1072   +/-\n=======================================\n  Coverage   72.18%   72.18%         \n=======================================\n  Files          21       21         \n  Lines        6048     6048         \n=======================================\n  Hits         4366     4366         \n  Misses       1217     1217         \n  Partials      465      465\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0edb640...77db4ca. Read the comment docs.\n. # Codecov Report\nMerging #1076 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1076   +/-\n=======================================\n  Coverage   72.18%   72.18%         \n=======================================\n  Files          21       21         \n  Lines        6048     6048         \n=======================================\n  Hits         4366     4366         \n  Misses       1217     1217         \n  Partials      465      465\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d507f49...9b4f044. Read the comment docs.\n. # Codecov Report\nMerging #1081 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1081      +/-\n=========================================\n+ Coverage   72.18%   72.2%   +0.01%   \n=========================================\n  Files          21      21            \n  Lines        6048    6051       +3   \n=========================================\n+ Hits         4366    4369       +3   \n  Misses       1217    1217            \n  Partials      465     465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n| generator/model.go | 72.51% <100%> (+0.08%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2ea68fd...f3e021e. Read the comment docs.\n. # Codecov Report\nMerging #1082 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1082   +/-\n=======================================\n  Coverage   72.18%   72.18%         \n=======================================\n  Files          21       21         \n  Lines        6048     6048         \n=======================================\n  Hits         4366     4366         \n  Misses       1217     1217         \n  Partials      465      465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d507f49...9b4f044. Read the comment docs.\n. # Codecov Report\nMerging #1087 into master will increase coverage by 0.09%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1087      +/-\n==========================================\n+ Coverage   72.18%   72.28%   +0.09%   \n==========================================\n  Files          21       21            \n  Lines        6048     6068      +20   \n==========================================\n+ Hits         4366     4386      +20   \n  Misses       1217     1217            \n  Partials      465      465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/scanner.go | 73.34% <\u00f8> (\u00f8) | :arrow_up: |\n| scan/schema.go | 71.92% <100%> (+0.49%) | :arrow_up: |\n| scan/parameters.go | 77.77% <100%> (+0.57%) | :arrow_up: |\n| scan/classifier.go | 94.28% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2ea68fd...b70c0b4. Read the comment docs.\n. # Codecov Report\nMerging #1090 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1090   +/-\n======================================\n  Coverage    72.2%   72.2%         \n======================================\n  Files          21      21         \n  Lines        6051    6051         \n======================================\n  Hits         4369    4369         \n  Misses       1217    1217         \n  Partials      465     465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bfd36e3...1f5edaa. Read the comment docs.\n. # Codecov Report\nMerging #1101 into master will decrease coverage by 3.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1101      +/-\n==========================================\n- Coverage    72.2%   69.13%   -3.07%   \n==========================================\n  Files          21       21            \n  Lines        6051     7303    +1252   \n==========================================\n+ Hits         4369     5049     +680   \n- Misses       1217     1789     +572   \n  Partials      465      465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <100%> (-6.19%) | :arrow_down: |\n| scan/validators.go | 71.94% <0%> (-4.98%) | :arrow_down: |\n| scan/meta.go | 75.83% <0%> (-4.79%) | :arrow_down: |\n| scan/scanner.go | 69.25% <0%> (-4.09%) | :arrow_down: |\n| generator/model.go | 69.11% <0%> (-3.4%) | :arrow_down: |\n| generator/structs.go | 38.27% <0%> (-3.07%) | :arrow_down: |\n| generator/operation.go | 66.93% <0%> (-2.91%) | :arrow_down: |\n| generator/support.go | 65.93% <0%> (-2.88%) | :arrow_down: |\n| generator/shared.go | 70.93% <0%> (-2.77%) | :arrow_down: |\n| ... and 12 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c2a7c88...4655a37. Read the comment docs.\n. # Codecov Report\nMerging #1103 into master will increase coverage by 0.01%.\nThe diff coverage is 85.71%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1103      +/-\n==========================================\n+ Coverage   69.23%   69.24%   +0.01%   \n==========================================\n  Files          21       21            \n  Lines        7326     7330       +4   \n==========================================\n+ Hits         5072     5076       +4   \n  Misses       1789     1789            \n  Partials      465      465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/schema.go | 69.38% <85.71%> (+0.13%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 85921aa...5e978d4. Read the comment docs.\n. # Codecov Report\nMerging #1104 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1104      +/-\n==========================================\n+ Coverage   69.24%   69.26%   +0.01%   \n==========================================\n  Files          21       21            \n  Lines        7330     7333       +3   \n==========================================\n+ Hits         5076     5079       +3   \n  Misses       1789     1789            \n  Partials      465      465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <100%> (\u00f8) | :arrow_up: |\n| generator/template_repo.go | 59.49% <100%> (+0.51%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7d7013c...ea635e5. Read the comment docs.\n. # Codecov Report\nMerging #1105 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1105   +/-\n=======================================\n  Coverage   69.26%   69.26%         \n=======================================\n  Files          21       21         \n  Lines        7333     7333         \n=======================================\n  Hits         5079     5079         \n  Misses       1789     1789         \n  Partials      465      465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e09b074...89eabce. Read the comment docs.\n. # Codecov Report\nMerging #1106 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1106   +/-\n=======================================\n  Coverage   69.24%   69.24%         \n=======================================\n  Files          21       21         \n  Lines        7333     7333         \n=======================================\n  Hits         5078     5078         \n  Misses       1790     1790         \n  Partials      465      465\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f8fdd34...c984da1. Read the comment docs.\n. # Codecov Report\nMerging #1108 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1108   +/-\n=======================================\n  Coverage   69.26%   69.26%         \n=======================================\n  Files          21       21         \n  Lines        7333     7333         \n=======================================\n  Hits         5079     5079         \n  Misses       1789     1789         \n  Partials      465      465\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8135eb6...c40e489. Read the comment docs.\n. # Codecov Report\nMerging #1110 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1110   +/-\n=======================================\n  Coverage   69.26%   69.26%         \n=======================================\n  Files          21       21         \n  Lines        7333     7333         \n=======================================\n  Hits         5079     5079         \n  Misses       1789     1789         \n  Partials      465      465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bf16621...a44354f. Read the comment docs.\n. # Codecov Report\nMerging #1112 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1112   +/-\n=======================================\n  Coverage   69.26%   69.26%         \n=======================================\n  Files          21       21         \n  Lines        7333     7333         \n=======================================\n  Hits         5079     5079         \n  Misses       1789     1789         \n  Partials      465      465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update db2d72e...0d90e23. Read the comment docs.\n. # Codecov Report\nMerging #1119 into master will increase coverage by 0.01%.\nThe diff coverage is 96.55%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1119      +/-\n==========================================\n+ Coverage   69.24%   69.26%   +0.01%   \n==========================================\n  Files          21       21            \n  Lines        7333     7333            \n==========================================\n+ Hits         5078     5079       +1   \n+ Misses       1790     1789       -1   \n  Partials      465      465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <96.55%> (\u00f8) | :arrow_up: |\n| generator/structs.go | 38.27% <0%> (+1.23%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 58df944...aea3899. Read the comment docs.\n. # Codecov Report\nMerging #1123 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1123   +/-\n=======================================\n  Coverage   69.27%   69.27%         \n=======================================\n  Files          21       21         \n  Lines        7332     7332         \n=======================================\n  Hits         5079     5079         \n  Misses       1788     1788         \n  Partials      465      465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/types.go | 81.95% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2b10750...bc65be9. Read the comment docs.\n. # Codecov Report\nMerging #1124 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1124   +/-\n=======================================\n  Coverage   69.27%   69.27%         \n=======================================\n  Files          21       21         \n  Lines        7332     7332         \n=======================================\n  Hits         5079     5079         \n  Misses       1788     1788         \n  Partials      465      465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d17bf74...afe5e6d. Read the comment docs.\n. # Codecov Report\nMerging #1125 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1125      +/-\n==========================================\n+ Coverage   69.25%   69.27%   +0.01%   \n==========================================\n  Files          21       21            \n  Lines        7332     7332            \n==========================================\n+ Hits         5078     5079       +1   \n+ Misses       1789     1788       -1   \n  Partials      465      465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 38.75% <0%> (+1.25%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 38d9b1f...35f5cb1. Read the comment docs.\n. # Codecov Report\nMerging #1128 into master will increase coverage by 0.06%.\nThe diff coverage is 86.36%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1128      +/-\n==========================================\n+ Coverage   69.25%   69.32%   +0.06%   \n==========================================\n  Files          21       21            \n  Lines        7332     7344      +12   \n==========================================\n+ Hits         5078     5091      +13   \n+ Misses       1789     1788       -1   \n  Partials      465      465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <100%> (\u00f8) | :arrow_up: |\n| generator/types.go | 82% <66.66%> (+0.04%) | :arrow_up: |\n| generator/model.go | 69.4% <85.71%> (+0.29%) | :arrow_up: |\n| generator/structs.go | 38.75% <0%> (+1.25%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a5175e9...09ba6d6. Read the comment docs.\n. # Codecov Report\nMerging #1130 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1130      +/-\n==========================================\n+ Coverage   69.25%   69.27%   +0.01%   \n==========================================\n  Files          21       21            \n  Lines        7332     7332            \n==========================================\n+ Hits         5078     5079       +1   \n+ Misses       1789     1788       -1   \n  Partials      465      465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 38.75% <0%> (+1.25%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b35ae89...a96c0f4. Read the comment docs.\n. # Codecov Report\nMerging #1132 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1132   +/-\n=======================================\n  Coverage   69.27%   69.27%         \n=======================================\n  Files          21       21         \n  Lines        7332     7332         \n=======================================\n  Hits         5079     5079         \n  Misses       1788     1788         \n  Partials      465      465\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e1a9603...773b082. Read the comment docs.\n. # Codecov Report\nMerging #1148 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1148      +/-\n==========================================\n+ Coverage   69.32%   69.37%   +0.05%   \n==========================================\n  Files          21       21            \n  Lines        7344     7357      +13   \n==========================================\n+ Hits         5091     5104      +13   \n  Misses       1788     1788            \n  Partials      465      465\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/shared.go | 70.93% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/bindata.go | 60.32% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/structs.go | 38.75% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/template_repo.go | 59.49% <100%> (\u00f8) | :arrow_up: |\n| generator/operation.go | 67.06% <100%> (+0.13%) | :arrow_up: |\n| generator/support.go | 66.4% <100%> (+0.46%) | :arrow_up: |\n| generator/model.go | 69.48% <100%> (+0.07%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8d23098...2008dd1. Read the comment docs.\n. # Codecov Report\nMerging #1150 into master will decrease coverage by 0.03%.\nThe diff coverage is 57.89%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1150      +/-\n==========================================\n- Coverage   69.37%   69.33%   -0.04%   \n==========================================\n  Files          21       21            \n  Lines        7357     7384      +27   \n==========================================\n+ Hits         5104     5120      +16   \n- Misses       1788     1796       +8   \n- Partials      465      468       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/support.go | 66.04% <57.89%> (-0.36%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4afb1af...ee3f458. Read the comment docs.\n. # Codecov Report\nMerging #1152 into master will decrease coverage by 0.06%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1152      +/-\n==========================================\n- Coverage   69.33%   69.27%   -0.07%   \n==========================================\n  Files          21       21            \n  Lines        7384     7391       +7   \n==========================================\n  Hits         5120     5120            \n- Misses       1796     1801       +5   \n- Partials      468      470       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/classifier.go | 92.68% <0%> (-1.15%) | :arrow_down: |\n| scan/schema.go | 69.16% <0%> (-0.23%) | :arrow_down: |\n| scan/scanner.go | 68.86% <0%> (-0.4%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ac7dded...f36562c. Read the comment docs.\n. # Codecov Report\nMerging #1154 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1154   +/-\n=======================================\n  Coverage   69.27%   69.27%         \n=======================================\n  Files          21       21         \n  Lines        7391     7391         \n=======================================\n  Hits         5120     5120         \n  Misses       1801     1801         \n  Partials      470      470\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 098db8b...d776a12. Read the comment docs.\n. # Codecov Report\nMerging #1155 into master will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1155      +/-\n==========================================\n- Coverage   69.27%   69.25%   -0.02%   \n==========================================\n  Files          21       21            \n  Lines        7391     7391            \n==========================================\n- Hits         5120     5119       -1   \n- Misses       1801     1802       +1   \n  Partials      470      470\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <100%> (\u00f8) | :arrow_up: |\n| generator/structs.go | 37.5% <0%> (-1.25%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 098db8b...36d41a0. Read the comment docs.\n. # Codecov Report\nMerging #1156 into master will increase coverage by 0.14%.\nThe diff coverage is 75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1156      +/-\n==========================================\n+ Coverage   69.27%   69.42%   +0.14%   \n==========================================\n  Files          21       21            \n  Lines        7391     7358      -33   \n==========================================\n- Hits         5120     5108      -12   \n+ Misses       1801     1781      -20   \n+ Partials      470      469       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/scanner.go | 68.86% <\u00f8> (\u00f8) | :arrow_up: |\n| scan/classifier.go | 92.68% <\u00f8> (\u00f8) | :arrow_up: |\n| scan/schema.go | 70.36% <0%> (+1.2%) | :arrow_up: |\n| generator/support.go | 66.04% <85.71%> (\u00f8) | :arrow_up: |\n| generator/bindata.go | 60.32% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3962c92...6d91516. Read the comment docs.\n. # Codecov Report\nMerging #1160 into master will decrease coverage by 0.01%.\nThe diff coverage is 75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1160      +/-\n==========================================\n- Coverage   69.27%   69.25%   -0.02%   \n==========================================\n  Files          21       21            \n  Lines        7391     7391            \n==========================================\n- Hits         5120     5119       -1   \n- Misses       1801     1802       +1   \n  Partials      470      470\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/shared.go | 70.93% <75%> (\u00f8) | :arrow_up: |\n| generator/structs.go | 37.5% <0%> (-1.25%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 67d1fd9...f9dfedd. Read the comment docs.\n. # Codecov Report\nMerging #1163 into master will increase coverage by 0.9%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1163     +/-\n=========================================\n+ Coverage   66.22%   67.12%   +0.9%   \n=========================================\n  Files          28       28           \n  Lines        7787     7733     -54   \n=========================================\n+ Hits         5157     5191     +34   \n+ Misses       2150     2059     -91   \n- Partials      480      483      +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/generate/model.go | 70% <100%> (+15.94%) | :arrow_up: |\n| cmd/swagger/commands/generate/server.go | 61.85% <0%> (+61.85%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 15128f7...097d74b. Read the comment docs.\n. # Codecov Report\nMerging #1164 into master will decrease coverage by 3.19%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1164     +/-\n=========================================\n- Coverage   69.42%   66.22%   -3.2%   \n=========================================\n  Files          21       28      +7   \n  Lines        7358     7787    +429   \n=========================================\n+ Hits         5108     5157     +49   \n- Misses       1781     2150    +369   \n- Partials      469      480     +11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/generate/client.go | 0% <0%> (\u00f8) | |\n| cmd/swagger/commands/generate/server.go | 0% <0%> (\u00f8) | |\n| cmd/swagger/commands/generate/support.go | 0% <0%> (\u00f8) | |\n| cmd/swagger/commands/generate/shared.go | 34.61% <0%> (\u00f8) | |\n| cmd/swagger/commands/generate/operation.go | 0% <0%> (\u00f8) | |\n| cmd/swagger/commands/generate/model.go | 54.05% <0%> (\u00f8) | |\n| cmd/swagger/commands/generate/spec.go | 0% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7dba9a5...14836b6. Read the comment docs.\n. # Codecov Report\nMerging #1166 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1166   +/-\n=======================================\n  Coverage   67.12%   67.12%         \n=======================================\n  Files          28       28         \n  Lines        7733     7733         \n=======================================\n  Hits         5191     5191         \n  Misses       2059     2059         \n  Partials      483      483\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 68ea41d...a314e58. Read the comment docs.\n. # Codecov Report\nMerging #1167 into master will increase coverage by 0.28%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1167      +/-\n==========================================\n+ Coverage   67.12%   67.41%   +0.28%   \n==========================================\n  Files          28       28            \n  Lines        7733     7755      +22   \n==========================================\n+ Hits         5191     5228      +37   \n+ Misses       2059     2041      -18   \n- Partials      483      486       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/types.go | 82% <100%> (\u00f8) | :arrow_up: |\n| generator/support.go | 66.54% <100%> (+0.49%) | :arrow_up: |\n| generator/operation.go | 66.13% <12.5%> (-0.94%) | :arrow_down: |\n| generator/client.go | 61.71% <50%> (+2.02%) | :arrow_up: |\n| generator/shared.go | 73.18% <85.71%> (+2.25%) | :arrow_up: |\n| generator/model.go | 69.23% <0%> (-0.26%) | :arrow_down: |\n| generator/template_repo.go | 62.86% <0%> (+3.37%) | :arrow_up: |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 86ecac7...1917862. Read the comment docs.\n. # Codecov Report\nMerging #1173 into master will increase coverage by 0.06%.\nThe diff coverage is 63.63%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1173      +/-\n==========================================\n+ Coverage    67.4%   67.47%   +0.06%   \n==========================================\n  Files          28       28            \n  Lines        7755     7759       +4   \n==========================================\n+ Hits         5227     5235       +8   \n+ Misses       2042     2040       -2   \n+ Partials      486      484       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/generate/client.go | 0% <0%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/operation.go | 0% <0%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/server.go | 62.24% <100%> (+0.38%) | :arrow_up: |\n| generator/shared.go | 73.18% <85.71%> (\u00f8) | :arrow_up: |\n| generator/support.go | 67.1% <0%> (+0.56%) | :arrow_up: |\n| generator/structs.go | 46.25% <0%> (+1.25%) | :arrow_up: |\n| generator/client.go | 64.06% <0%> (+2.34%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ecaf237...55491a1. Read the comment docs.\n. # Codecov Report\nMerging #1175 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1175   +/-\n=======================================\n  Coverage   67.47%   67.47%         \n=======================================\n  Files          28       28         \n  Lines        7759     7759         \n=======================================\n  Hits         5235     5235         \n  Misses       2040     2040         \n  Partials      484      484\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8110e1b...1eb7c1b. Read the comment docs.\n. # Codecov Report\nMerging #1178 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1178   +/-\n=======================================\n  Coverage   67.45%   67.45%         \n=======================================\n  Files          28       28         \n  Lines        7759     7759         \n=======================================\n  Hits         5234     5234         \n  Misses       2041     2041         \n  Partials      484      484\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dbc9b97...aa42102. Read the comment docs.\n. # Codecov Report\nMerging #1179 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1179   +/-\n=======================================\n  Coverage   67.47%   67.47%         \n=======================================\n  Files          28       28         \n  Lines        7759     7759         \n=======================================\n  Hits         5235     5235         \n  Misses       2040     2040         \n  Partials      484      484\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 99177fd...df3040e. Read the comment docs.\n. # Codecov Report\nMerging #1180 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1180      +/-\n==========================================\n+ Coverage   67.45%   67.47%   +0.01%   \n==========================================\n  Files          28       28            \n  Lines        7759     7759            \n==========================================\n+ Hits         5234     5235       +1   \n+ Misses       2041     2040       -1   \n  Partials      484      484\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 46.25% <0%> (+1.25%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6b6812c...ecc9437. Read the comment docs.\n. # Codecov Report\nMerging #1182 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1182   +/-\n=======================================\n  Coverage   67.47%   67.47%         \n=======================================\n  Files          28       28         \n  Lines        7759     7759         \n=======================================\n  Hits         5235     5235         \n  Misses       2040     2040         \n  Partials      484      484\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1f7c5e5...f68c220. Read the comment docs.\n. # Codecov Report\nMerging #1184 into master will decrease coverage by 0.02%.\nThe diff coverage is 57.14%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1184      +/-\n==========================================\n- Coverage   67.47%   67.44%   -0.03%   \n==========================================\n  Files          28       28            \n  Lines        7759     7778      +19   \n==========================================\n+ Hits         5235     5246      +11   \n- Misses       2040     2046       +6   \n- Partials      484      486       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/scanner.go | 68.86% <\u00f8> (\u00f8) | :arrow_up: |\n| scan/classifier.go | 92.68% <100%> (\u00f8) | :arrow_up: |\n| scan/schema.go | 70.1% <55%> (-0.26%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c38ccae...ca670fa. Read the comment docs.\n. # Codecov Report\nMerging #1185 into master will increase coverage by 1.86%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1185      +/-\n=========================================\n+ Coverage   67.44%   69.3%   +1.86%   \n=========================================\n  Files          28      21       -7   \n  Lines        7778    7344     -434   \n=========================================\n- Hits         5246    5090     -156   \n+ Misses       2046    1789     -257   \n+ Partials      486     465      -21\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 37.5% <0%> (-8.75%) | :arrow_down: |\n| generator/client.go | 59.68% <0%> (-4.38%) | :arrow_down: |\n| generator/template_repo.go | 59.49% <0%> (-3.38%) | :arrow_down: |\n| generator/shared.go | 70.93% <0%> (-2.26%) | :arrow_down: |\n| generator/support.go | 65.93% <0%> (-1.17%) | :arrow_down: |\n| scan/schema.go | 69.38% <0%> (-0.73%) | :arrow_down: |\n| cmd/swagger/commands/generate/server.go | | |\n| cmd/swagger/commands/generate/support.go | | |\n| cmd/swagger/commands/generate/model.go | | |\n| cmd/swagger/commands/generate/shared.go | | |\n| ... and 6 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6f9caaa...42b21e4. Read the comment docs.\n. # Codecov Report\nMerging #1189 into master will increase coverage by 0.02%.\nThe diff coverage is 97.05%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1189      +/-\n==========================================\n+ Coverage   67.44%   67.46%   +0.02%   \n==========================================\n  Files          28       28            \n  Lines        7778     7783       +5   \n==========================================\n+ Hits         5246     5251       +5   \n  Misses       2046     2046            \n  Partials      486      486\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/types.go | 82.19% <100%> (+0.19%) | :arrow_up: |\n| generator/bindata.go | 60.32% <96.55%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0b68408...8f19b5f. Read the comment docs.\n. # Codecov Report\nMerging #1215 into master will decrease coverage by <.01%.\nThe diff coverage is 60%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1215      +/-\n==========================================\n- Coverage   67.45%   67.44%   -0.01%   \n==========================================\n  Files          28       28            \n  Lines        7783     7797      +14   \n==========================================\n+ Hits         5250     5259       +9   \n- Misses       2047     2050       +3   \n- Partials      486      488       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/scanner.go | 68.86% <\u00f8> (\u00f8) | :arrow_up: |\n| scan/meta.go | 74.23% <60%> (-1.61%) | :arrow_down: |\n| generator/structs.go | 46.25% <0%> (+1.25%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b6e18fa...ea0c548. Read the comment docs.\n. # Codecov Report\nMerging #1218 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1218      +/-\n==========================================\n+ Coverage   67.44%   67.48%   +0.03%   \n==========================================\n  Files          28       28            \n  Lines        7797     7797            \n==========================================\n+ Hits         5259     5262       +3   \n+ Misses       2050     2048       -2   \n+ Partials      488      487       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <100%> (\u00f8) | :arrow_up: |\n| generator/client.go | 66.4% <0%> (+2.34%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 766898d...f391d06. Read the comment docs.\n. # Codecov Report\nMerging #1219 into master will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1219      +/-\n==========================================\n- Coverage   67.48%   67.46%   -0.02%   \n==========================================\n  Files          28       28            \n  Lines        7797     7783      -14   \n==========================================\n- Hits         5262     5251      -11   \n+ Misses       2048     2046       -2   \n+ Partials      487      486       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/client.go | 64.06% <0%> (-2.35%) | :arrow_down: |\n| scan/scanner.go | 68.86% <0%> (\u00f8) | :arrow_up: |\n| generator/bindata.go | 60.32% <0%> (\u00f8) | :arrow_up: |\n| scan/meta.go | 75.83% <0%> (+1.6%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e3a24f2...0e7845d. Read the comment docs.\n. # Codecov Report\nMerging #1222 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1222      +/-\n==========================================\n- Coverage   67.48%   67.48%   -0.01%   \n==========================================\n  Files          28       28            \n  Lines        7797     7800       +3   \n==========================================\n+ Hits         5262     5264       +2   \n- Misses       2048     2049       +1   \n  Partials      487      487\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/types.go | 82.31% <100%> (+0.11%) | :arrow_up: |\n| generator/structs.go | 45% <0%> (-1.25%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1ce1958...954251c. Read the comment docs.\n. # Codecov Report\nMerging #1223 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1223      +/-\n==========================================\n+ Coverage   67.48%   67.52%   +0.03%   \n==========================================\n  Files          28       28            \n  Lines        7800     7808       +8   \n==========================================\n+ Hits         5264     5272       +8   \n  Misses       2049     2049            \n  Partials      487      487\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/model.go | 69.43% <100%> (+0.2%) | :arrow_up: |\n| generator/structs.go | 45% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d91f1c4...573271f. Read the comment docs.\n. # Codecov Report\nMerging #1224 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1224      +/-\n=========================================\n+ Coverage   67.48%   67.5%   +0.01%   \n=========================================\n  Files          28      28            \n  Lines        7800    7800            \n=========================================\n+ Hits         5264    5265       +1   \n+ Misses       2049    2048       -1   \n  Partials      487     487\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 46.25% <0%> (+1.25%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d91f1c4...ba51803. Read the comment docs.\n. # Codecov Report\nMerging #1225 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1225   +/-\n=======================================\n  Coverage   67.48%   67.48%         \n=======================================\n  Files          28       28         \n  Lines        7800     7800         \n=======================================\n  Hits         5264     5264         \n  Misses       2049     2049         \n  Partials      487      487\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d91f1c4...5e3dd62. Read the comment docs.\n. # Codecov Report\nMerging #1230 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1230   +/-\n=======================================\n  Coverage   67.52%   67.52%         \n=======================================\n  Files          28       28         \n  Lines        7808     7808         \n=======================================\n  Hits         5272     5272         \n  Misses       2049     2049         \n  Partials      487      487\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 188e0cd...ecfb53c. Read the comment docs.\n. # Codecov Report\nMerging #1235 into master will decrease coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1235      +/-\n==========================================\n- Coverage   67.53%   67.49%   -0.04%   \n==========================================\n  Files          28       28            \n  Lines        7808     7812       +4   \n==========================================\n  Hits         5273     5273            \n- Misses       2048     2051       +3   \n- Partials      487      488       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/schema.go | 69.91% <100%> (-0.2%) | :arrow_down: |\n| generator/structs.go | 45% <0%> (-1.25%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a7f6941...bcc9bc0. Read the comment docs.\n. # Codecov Report\nMerging #1235 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1235      +/-\n==========================================\n+ Coverage   67.53%   67.54%   +0.01%   \n==========================================\n  Files          28       28            \n  Lines        7808     7812       +4   \n==========================================\n+ Hits         5273     5277       +4   \n  Misses       2048     2048            \n  Partials      487      487\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/schema.go | 70.23% <100%> (+0.12%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a7f6941...73275c1. Read the comment docs.\n. # Codecov Report\nMerging #1239 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1239   +/-\n=======================================\n  Coverage   67.53%   67.53%         \n=======================================\n  Files          28       28         \n  Lines        7808     7808         \n=======================================\n  Hits         5273     5273         \n  Misses       2048     2048         \n  Partials      487      487\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a7f6941...be7b568. Read the comment docs.\n. # Codecov Report\nMerging #1241 into master will decrease coverage by 0.08%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1241      +/-\n==========================================\n- Coverage   67.63%   67.54%   -0.09%   \n==========================================\n  Files          28       28            \n  Lines        7829     7812      -17   \n==========================================\n- Hits         5295     5277      -18   \n- Misses       2046     2048       +2   \n+ Partials      488      487       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <100%> (\u00f8) | :arrow_up: |\n| scan/validators.go | 71.94% <0%> (-0.69%) | :arrow_down: |\n| scan/parameters.go | 75.59% <0%> (-0.29%) | :arrow_down: |\n| scan/responses.go | 77.97% <0%> (-0.23%) | :arrow_down: |\n| scan/schema.go | 70.23% <0%> (-0.07%) | :arrow_down: |\n| scan/scanner.go | 68.86% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f7eb0e6...b0e3aca. Read the comment docs.\n. # Codecov Report\nMerging #1247 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1247   +/-\n=======================================\n  Coverage   67.54%   67.54%         \n=======================================\n  Files          28       28         \n  Lines        7812     7812         \n=======================================\n  Hits         5277     5277         \n  Misses       2048     2048         \n  Partials      487      487\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f8a2c64...17c6b68. Read the comment docs.\n. # Codecov Report\nMerging #1248 into master will increase coverage by 0.09%.\nThe diff coverage is 70.45%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1248      +/-\n==========================================\n+ Coverage   67.54%   67.64%   +0.09%   \n==========================================\n  Files          28       28            \n  Lines        7812     7831      +19   \n==========================================\n+ Hits         5277     5297      +20   \n+ Misses       2048     2046       -2   \n- Partials      487      488       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/scanner.go | 68.86% <\u00f8> (\u00f8) | :arrow_up: |\n| scan/schema.go | 70.3% <100%> (+0.06%) | :arrow_up: |\n| scan/parameters.go | 75.88% <100%> (+0.28%) | :arrow_up: |\n| scan/responses.go | 78.2% <100%> (+0.22%) | :arrow_up: |\n| scan/validators.go | 72.74% <61.76%> (+0.79%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fc446ee...ada4f88. Read the comment docs.\n. # Codecov Report\nMerging #1249 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1249   +/-\n=======================================\n  Coverage   67.54%   67.54%         \n=======================================\n  Files          28       28         \n  Lines        7812     7812         \n=======================================\n  Hits         5277     5277         \n  Misses       2048     2048         \n  Partials      487      487\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fc446ee...512184a. Read the comment docs.\n. # Codecov Report\nMerging #1251 into master will decrease coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1251      +/-\n==========================================\n- Coverage   67.64%   67.63%   -0.01%   \n==========================================\n  Files          28       28            \n  Lines        7831     7829       -2   \n==========================================\n- Hits         5297     5295       -2   \n  Misses       2046     2046            \n  Partials      488      488\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/validators.go | 72.63% <\u00f8> (-0.12%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7d84463...f05018c. Read the comment docs.\n. # Codecov Report\nMerging #1252 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1252   +/-\n=======================================\n  Coverage   67.63%   67.63%         \n=======================================\n  Files          28       28         \n  Lines        7829     7829         \n=======================================\n  Hits         5295     5295         \n  Misses       2046     2046         \n  Partials      488      488\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a2f427d...e476832. Read the comment docs.\n. # Codecov Report\nMerging #1253 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1253      +/-\n==========================================\n+ Coverage   67.62%   67.63%   +0.01%   \n==========================================\n  Files          28       28            \n  Lines        7829     7829            \n==========================================\n+ Hits         5294     5295       +1   \n+ Misses       2047     2046       -1   \n  Partials      488      488\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 46.25% <0%> (+1.25%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 38f9c8d...6e6eea5. Read the comment docs.\n. # Codecov Report\nMerging #1255 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1255      +/-\n==========================================\n+ Coverage   67.63%   67.64%   +0.01%   \n==========================================\n  Files          28       28            \n  Lines        7829     7832       +3   \n==========================================\n+ Hits         5295     5298       +3   \n  Misses       2046     2046            \n  Partials      488      488\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <100%> (\u00f8) | :arrow_up: |\n| generator/template_repo.go | 63.33% <100%> (+0.46%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c1f626d...d9b8714. Read the comment docs.\n. # Codecov Report\nMerging #1257 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1257   +/-\n=======================================\n  Coverage   67.64%   67.64%         \n=======================================\n  Files          28       28         \n  Lines        7832     7832         \n=======================================\n  Hits         5298     5298         \n  Misses       2046     2046         \n  Partials      488      488\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 783e5bb...d02951e. Read the comment docs.\n. # Codecov Report\nMerging #1262 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1262   +/-\n=======================================\n  Coverage   67.64%   67.64%         \n=======================================\n  Files          28       28         \n  Lines        7832     7832         \n=======================================\n  Hits         5298     5298         \n  Misses       2046     2046         \n  Partials      488      488\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 60.32% <100%> (\u00f8) | :arrow_up: |\n| generator/support.go | 67.1% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 53c7ee5...5a935e4. Read the comment docs.\n. # Codecov Report\nMerging #1264 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1264   +/-\n=======================================\n  Coverage   67.64%   67.64%         \n=======================================\n  Files          28       28         \n  Lines        7832     7832         \n=======================================\n  Hits         5298     5298         \n  Misses       2046     2046         \n  Partials      488      488\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/generate/shared.go | 34.61% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8eb950d...da19278. Read the comment docs.\n. # Codecov Report\nMerging #1273 into master will increase coverage by 1.92%.\nThe diff coverage is 45.67%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1273      +/-\n==========================================\n+ Coverage   67.64%   69.57%   +1.92%   \n==========================================\n  Files          28       28            \n  Lines        7832     7868      +36   \n==========================================\n+ Hits         5298     5474     +176   \n+ Misses       2046     1948      -98   \n+ Partials      488      446      -42\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/generate/support.go | 0% <0%> (\u00f8) | :arrow_up: |\n| generator/support.go | 67.1% <0%> (\u00f8) | :arrow_up: |\n| generator/model.go | 77.32% <0%> (+7.88%) | :arrow_up: |\n| cmd/swagger/commands/generate/operation.go | 0% <0%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/client.go | 0% <0%> (\u00f8) | :arrow_up: |\n| generator/client.go | 66.4% <100%> (\u00f8) | :arrow_up: |\n| generator/operation.go | 66.13% <50%> (\u00f8) | :arrow_up: |\n| generator/shared.go | 76.44% <55.93%> (+3.26%) | :arrow_up: |\n| cmd/swagger/commands/generate/server.go | 62.24% <66.66%> (\u00f8) | :arrow_up: |\n| ... and 3 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b015bda...7653406. Read the comment docs.\n. # Codecov Report\nMerging #1275 into master will increase coverage by 0.02%.\nThe diff coverage is 68.75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1275      +/-\n==========================================\n+ Coverage   72.46%   72.48%   +0.02%   \n==========================================\n  Files          28       28            \n  Lines        6504     6510       +6   \n==========================================\n+ Hits         4713     4719       +6   \n  Misses       1345     1345            \n  Partials      446      446\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 48.64% <\u00f8> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/operation.go | 0% <0%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/client.go | 0% <0%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/support.go | 0% <0%> (\u00f8) | :arrow_up: |\n| generator/model.go | 80.04% <100%> (+0.02%) | :arrow_up: |\n| generator/operation.go | 69.18% <100%> (+0.04%) | :arrow_up: |\n| cmd/swagger/commands/generate/server.go | 67.53% <50%> (\u00f8) | :arrow_up: |\n| generator/support.go | 69.86% <85.71%> (+0.27%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0138adf...dfe44a1. Read the comment docs.\n. # Codecov Report\nMerging #1285 into master will decrease coverage by 0.34%.\nThe diff coverage is 70%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1285      +/-\n==========================================\n- Coverage   72.02%   71.67%   -0.35%   \n==========================================\n  Files          35       35            \n  Lines        6670     6677       +7   \n==========================================\n- Hits         4804     4786      -18   \n- Misses       1417     1439      +22   \n- Partials      449      452       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 50% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/operation.go | 67.02% <0%> (-2.16%) | :arrow_down: |\n| generator/model.go | 80.34% <100%> (+0.29%) | :arrow_up: |\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n| generator/types.go | 88.62% <100%> (-1.2%) | :arrow_down: |\n| generator/client.go | 66.32% <66.66%> (-2.16%) | :arrow_down: |\n| generator/shared.go | 79.01% <66.66%> (-0.47%) | :arrow_down: |\n| generator/support.go | 74.34% <75%> (-0.44%) | :arrow_down: |\n| ... and 2 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5ade92a...de164a3. Read the comment docs.\n. # Codecov Report\nMerging #1294 into master will decrease coverage by 0.04%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1294      +/-\n==========================================\n- Coverage    72.5%   72.45%   -0.05%   \n==========================================\n  Files          28       28            \n  Lines        6510     6514       +4   \n==========================================\n  Hits         4720     4720            \n- Misses       1344     1348       +4   \n  Partials      446      446\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/support.go | 69.24% <0%> (-0.62%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ab0000b...a854b9d. Read the comment docs.\n. # Codecov Report\nMerging #1295 into master will decrease coverage by 0.04%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1295      +/-\n==========================================\n- Coverage    72.5%   72.45%   -0.05%   \n==========================================\n  Files          28       28            \n  Lines        6510     6514       +4   \n==========================================\n  Hits         4720     4720            \n- Misses       1344     1348       +4   \n  Partials      446      446\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/support.go | 69.24% <0%> (-0.62%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ab0000b...b16304d. Read the comment docs.\n. # Codecov Report\nMerging #1298 into master will increase coverage by 0.4%.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #1298     +/-\n========================================\n+ Coverage    72.5%   72.9%   +0.4%   \n========================================\n  Files          28      28           \n  Lines        6510    6514      +4   \n========================================\n+ Hits         4720    4749     +29   \n+ Misses       1344    1315     -29   \n- Partials      446     450      +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/support.go | 74.77% <100%> (+4.91%) | :arrow_up: |\n| generator/shared.go | 79.48% <0%> (+0.86%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ab0000b...c79f56e. Read the comment docs.\n. # Codecov Report\nMerging #1300 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1300   +/-\n======================================\n  Coverage    72.5%   72.5%         \n======================================\n  Files          28      28         \n  Lines        6510    6510         \n======================================\n  Hits         4720    4720         \n  Misses       1344    1344         \n  Partials      446     446\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ab0000b...d17aa91. Read the comment docs.\n. # Codecov Report\nMerging #1302 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1302   +/-\n=======================================\n  Coverage   72.32%   72.32%         \n=======================================\n  Files          36       36         \n  Lines        6707     6707         \n=======================================\n  Hits         4851     4851         \n  Misses       1403     1403         \n  Partials      453      453\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b598abd...d529316. Read the comment docs.\n. # Codecov Report\nMerging #1303 into master will increase coverage by 0.61%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1303      +/-\n==========================================\n+ Coverage    72.5%   73.11%   +0.61%   \n==========================================\n  Files          28       28            \n  Lines        6510     6514       +4   \n==========================================\n+ Hits         4720     4763      +43   \n+ Misses       1344     1308      -36   \n+ Partials      446      443       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/template_repo.go | 89.18% <100%> (+21.78%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ab0000b...c406158. Read the comment docs.\n. # Codecov Report\nMerging #1304 into master will decrease coverage by 2.54%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1304      +/-\n==========================================\n- Coverage   73.51%   70.96%   -2.55%   \n==========================================\n  Files          28       35       +7   \n  Lines        6518     6662     +144   \n==========================================\n- Hits         4792     4728      -64   \n- Misses       1279     1484     +205   \n- Partials      447      450       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/template_repo.go | 67.4% <0%> (-21.79%) | :arrow_down: |\n| generator/support.go | 69.86% <0%> (-4.92%) | :arrow_down: |\n| generator/shared.go | 78.61% <0%> (-0.87%) | :arrow_down: |\n| cmd/swagger/commands/initcmd.go | 0% <0%> (\u00f8) | |\n| cmd/swagger/commands/flatten.go | 0% <0%> (\u00f8) | |\n| cmd/swagger/commands/version.go | 0% <0%> (\u00f8) | |\n| cmd/swagger/commands/mixin.go | 0% <0%> (\u00f8) | |\n| cmd/swagger/commands/serve.go | 0% <0%> (\u00f8) | |\n| cmd/swagger/commands/validate.go | 50% <0%> (\u00f8) | |\n| cmd/swagger/commands/expand.go | 0% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ad8d8a6...92ab4eb. Read the comment docs.\n. # Codecov Report\nMerging #1305 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1305   +/-\n=======================================\n  Coverage   71.96%   71.96%         \n=======================================\n  Files          35       35         \n  Lines        6670     6670         \n=======================================\n  Hits         4800     4800         \n  Misses       1419     1419         \n  Partials      451      451\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 00f9ed4...f29c0b3. Read the comment docs.\n. # Codecov Report\nMerging #1306 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1306      +/-\n==========================================\n+ Coverage   71.96%   72.02%   +0.05%   \n==========================================\n  Files          35       35            \n  Lines        6670     6670            \n==========================================\n+ Hits         4800     4804       +4   \n+ Misses       1419     1417       -2   \n+ Partials      451      449       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/validate.go | 75% <100%> (+25%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d8a4621...8da0c33. Read the comment docs.\n. # Codecov Report\nMerging #1310 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1310   +/-\n=======================================\n  Coverage   71.96%   71.96%         \n=======================================\n  Files          35       35         \n  Lines        6670     6670         \n=======================================\n  Hits         4800     4800         \n  Misses       1419     1419         \n  Partials      451      451\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f81e027...eb6546f. Read the comment docs.\n. # Codecov Report\nMerging #1313 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1313   +/-\n=======================================\n  Coverage   71.96%   71.96%         \n=======================================\n  Files          35       35         \n  Lines        6670     6670         \n=======================================\n  Hits         4800     4800         \n  Misses       1419     1419         \n  Partials      451      451\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d8a4621...be22a6d. Read the comment docs.\n. # Codecov Report\nMerging #1315 into master will increase coverage by 0.01%.\nThe diff coverage is 65%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1315      +/-\n==========================================\n+ Coverage   71.67%   71.69%   +0.01%   \n==========================================\n  Files          35       35            \n  Lines        6677     6685       +8   \n==========================================\n+ Hits         4786     4793       +7   \n- Misses       1439     1440       +1   \n  Partials      452      452\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/config.go | 0% <0%> (\u00f8) | :arrow_up: |\n| generator/model.go | 80.34% <100%> (\u00f8) | :arrow_up: |\n| generator/support.go | 76.47% <100%> (+2.12%) | :arrow_up: |\n| generator/client.go | 66.66% <100%> (+0.34%) | :arrow_up: |\n| generator/operation.go | 67.02% <50%> (\u00f8) | :arrow_up: |\n| generator/shared.go | 77.16% <56.09%> (-1.85%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c6cc9db...b29a62a. Read the comment docs.\n. # Codecov Report\nMerging #1317 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1317   +/-\n=======================================\n  Coverage   71.69%   71.69%         \n=======================================\n  Files          35       35         \n  Lines        6685     6685         \n=======================================\n  Hits         4793     4793         \n  Misses       1440     1440         \n  Partials      452      452\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8dfd9cd...9f07d73. Read the comment docs.\n. # Codecov Report\nMerging #1318 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1318   +/-\n=======================================\n  Coverage   71.69%   71.69%         \n=======================================\n  Files          35       35         \n  Lines        6685     6685         \n=======================================\n  Hits         4793     4793         \n  Misses       1440     1440         \n  Partials      452      452\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8bf903d...f15a5e5. Read the comment docs.\n. # Codecov Report\nMerging #1320 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1320      +/-\n==========================================\n+ Coverage   71.68%   71.69%   +0.01%   \n==========================================\n  Files          35       35            \n  Lines        6685     6685            \n==========================================\n+ Hits         4792     4793       +1   \n+ Misses       1441     1440       -1   \n  Partials      452      452\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n| generator/structs.go | 50% <0%> (+1.35%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6adc14b...a805608. Read the comment docs.\n. # Codecov Report\nMerging #1324 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1324   +/-\n=======================================\n  Coverage   71.69%   71.69%         \n=======================================\n  Files          35       35         \n  Lines        6685     6685         \n=======================================\n  Hits         4793     4793         \n  Misses       1440     1440         \n  Partials      452      452\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6dd8b5a...8980b2c. Read the comment docs.\n. # Codecov Report\nMerging #1329 into master will increase coverage by 0.02%.\nThe diff coverage is 87.95%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1329      +/-\n==========================================\n+ Coverage   71.69%   71.72%   +0.02%   \n==========================================\n  Files          35       35            \n  Lines        6685     6719      +34   \n==========================================\n+ Hits         4793     4819      +26   \n- Misses       1440     1446       +6   \n- Partials      452      454       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n| generator/types.go | 88.71% <100%> (+0.09%) | :arrow_up: |\n| generator/client.go | 65.42% <79.31%> (-1.25%) | :arrow_down: |\n| generator/operation.go | 67.12% <81.81%> (+0.09%) | :arrow_up: |\n| generator/support.go | 76.49% <93.1%> (+0.02%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2d63a7e...ae57fbc. Read the comment docs.\n. # Codecov Report\nMerging #1333 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1333   +/-\n=======================================\n  Coverage   71.72%   71.72%         \n=======================================\n  Files          35       35         \n  Lines        6719     6719         \n=======================================\n  Hits         4819     4819         \n  Misses       1446     1446         \n  Partials      454      454\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6fa818d...c425d9e. Read the comment docs.\n. # Codecov Report\nMerging #1340 into master will increase coverage by 0.03%.\nThe diff coverage is 94.11%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1340      +/-\n==========================================\n+ Coverage   71.72%   71.75%   +0.03%   \n==========================================\n  Files          35       35            \n  Lines        6719     6727       +8   \n==========================================\n+ Hits         4819     4827       +8   \n  Misses       1446     1446            \n  Partials      454      454\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/validate.go | 83.33% <93.75%> (+8.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d65b3a6...c009bde. Read the comment docs.\n. # Codecov Report\nMerging #1343 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1343   +/-\n=======================================\n  Coverage   71.75%   71.75%         \n=======================================\n  Files          35       35         \n  Lines        6727     6727         \n=======================================\n  Hits         4827     4827         \n  Misses       1446     1446         \n  Partials      454      454\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4ec9382...d60a96e. Read the comment docs.\n. # Codecov Report\nMerging #1345 into master will increase coverage by 0.02%.\nThe diff coverage is 40%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1345      +/-\n==========================================\n+ Coverage   71.78%   71.81%   +0.02%   \n==========================================\n  Files          35       35            \n  Lines        6735     6734       -1   \n==========================================\n+ Hits         4835     4836       +1   \n+ Misses       1446     1444       -2   \n  Partials      454      454\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/shared.go | 77.88% <\u00f8> (+0.75%) | :arrow_up: |\n| generator/support.go | 76.02% <40%> (-0.48%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7077865...e1fed4a. Read the comment docs.\n. # Codecov Report\nMerging #1353 into master will increase coverage by 0.48%.\nThe diff coverage is 37.5%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1353      +/-\n=========================================\n+ Coverage   71.81%   72.3%   +0.48%   \n=========================================\n  Files          35      35            \n  Lines        6734    6701      -33   \n=========================================\n+ Hits         4836    4845       +9   \n+ Misses       1444    1404      -40   \n+ Partials      454     452       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <\u00f8> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/model.go | 73.33% <\u00f8> (-1.67%) | :arrow_down: |\n| scan/validators.go | 77.63% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/template_repo.go | 89.13% <\u00f8> (-0.06%) | :arrow_down: |\n| generator/operation.go | 67.32% <0%> (-0.11%) | :arrow_down: |\n| cmd/swagger/commands/generate/support.go | 0% <0%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/operation.go | 0% <0%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/client.go | 0% <0%> (\u00f8) | :arrow_up: |\n| generator/client.go | 66.98% <100%> (+1.56%) | :arrow_up: |\n| generator/shared.go | 76.74% <100%> (-1.15%) | :arrow_down: |\n| ... and 5 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c3e4c47...edfaee6. Read the comment docs.\n. # Codecov Report\nMerging #1363 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1363   +/-\n=======================================\n  Coverage   71.78%   71.78%         \n=======================================\n  Files          35       35         \n  Lines        6735     6735         \n=======================================\n  Hits         4835     4835         \n  Misses       1446     1446         \n  Partials      454      454\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7077865...99c4c0d. Read the comment docs.\n. # Codecov Report\nMerging #1364 into master will decrease coverage by 0.11%.\nThe diff coverage is 14.28%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1364      +/-\n==========================================\n- Coverage   71.79%   71.68%   -0.12%   \n==========================================\n  Files          35       35            \n  Lines        6734     6746      +12   \n==========================================\n+ Hits         4835     4836       +1   \n- Misses       1445     1456      +11   \n  Partials      454      454\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 64.75% <14.28%> (-1.76%) | :arrow_down: |\n| generator/structs.go | 50% <0%> (+1.35%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2db0ce6...6931a7e. Read the comment docs.\n. # Codecov Report\nMerging #1365 into master will decrease coverage by 0.53%.\nThe diff coverage is 60%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1365      +/-\n=========================================\n- Coverage   72.33%   71.8%   -0.54%   \n=========================================\n  Files          35      35            \n  Lines        6702    6739      +37   \n=========================================\n- Hits         4848    4839       -9   \n- Misses       1402    1445      +43   \n- Partials      452     455       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/shared.go | 77.71% <60%> (+0.21%) | :arrow_up: |\n| cmd/swagger/commands/generate/server.go | 67.53% <0%> (-20.19%) | :arrow_down: |\n| cmd/swagger/commands/generate/shared.go | 33.33% <0%> (-7.85%) | :arrow_down: |\n| generator/client.go | 65.42% <0%> (-1.57%) | :arrow_down: |\n| generator/support.go | 76.02% <0%> (-0.41%) | :arrow_down: |\n| generator/model.go | 80.34% <0%> (-0.05%) | :arrow_down: |\n| cmd/swagger/commands/generate/operation.go | 0% <0%> (\u00f8) | :arrow_up: |\n| generator/bindata.go | 66.51% <0%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/client.go | 0% <0%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/support.go | 0% <0%> (\u00f8) | :arrow_up: |\n| ... and 4 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update acf3c15...2e21eeb. Read the comment docs.\n. # Codecov Report\nMerging #1366 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1366   +/-\n=======================================\n  Coverage   71.79%   71.79%         \n=======================================\n  Files          35       35         \n  Lines        6734     6734         \n=======================================\n  Hits         4835     4835         \n  Misses       1445     1445         \n  Partials      454      454\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/shared.go | 77.88% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2db0ce6...2278db5. Read the comment docs.\n. # Codecov Report\nMerging #1367 into master will decrease coverage by 0.5%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1367      +/-\n==========================================\n- Coverage   72.32%   71.82%   -0.51%   \n==========================================\n  Files          35       35            \n  Lines        6700     6736      +36   \n==========================================\n- Hits         4846     4838       -8   \n- Misses       1402     1444      +42   \n- Partials      452      454       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/model.go | 80.38% <100%> (+0.04%) | :arrow_up: |\n| cmd/swagger/commands/generate/server.go | 67.53% <0%> (-20.19%) | :arrow_down: |\n| cmd/swagger/commands/generate/shared.go | 33.33% <0%> (-7.85%) | :arrow_down: |\n| generator/client.go | 65.42% <0%> (-1.57%) | :arrow_down: |\n| generator/support.go | 76.02% <0%> (-0.41%) | :arrow_down: |\n| cmd/swagger/commands/generate/client.go | 0% <0%> (\u00f8) | :arrow_up: |\n| generator/bindata.go | 66.51% <0%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/operation.go | 0% <0%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/support.go | 0% <0%> (\u00f8) | :arrow_up: |\n| generator/template_repo.go | 89.18% <0%> (+0.05%) | :arrow_up: |\n| ... and 3 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d2aae81...173ca89. Read the comment docs.\n. # Codecov Report\nMerging #1368 into master will decrease coverage by 0.53%.\nThe diff coverage is 77.77%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1368      +/-\n=========================================\n- Coverage   72.33%   71.8%   -0.54%   \n=========================================\n  Files          35      36       +1   \n  Lines        6702    6739      +37   \n=========================================\n- Hits         4848    4839       -9   \n- Misses       1402    1445      +43   \n- Partials      452     455       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/types.go | 88.6% <\u00f8> (-0.12%) | :arrow_down: |\n| generator/debug.go | 100% <100%> (\u00f8) | |\n| generator/shared.go | 77.71% <60%> (+0.21%) | :arrow_up: |\n| cmd/swagger/commands/generate/server.go | 67.53% <0%> (-20.19%) | :arrow_down: |\n| cmd/swagger/commands/generate/shared.go | 33.33% <0%> (-7.85%) | :arrow_down: |\n| generator/client.go | 65.42% <0%> (-1.57%) | :arrow_down: |\n| generator/support.go | 76.02% <0%> (-0.41%) | :arrow_down: |\n| generator/model.go | 80.34% <0%> (-0.05%) | :arrow_down: |\n| cmd/swagger/commands/generate/client.go | 0% <0%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/support.go | 0% <0%> (\u00f8) | :arrow_up: |\n| ... and 7 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update acf3c15...492a6bf. Read the comment docs.\n. # Codecov Report\nMerging #1369 into master will not change coverage.\nThe diff coverage is 77.77%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1369   +/-\n=======================================\n  Coverage   72.32%   72.32%         \n=======================================\n  Files          35       36    +1   \n  Lines        6707     6707         \n=======================================\n  Hits         4851     4851         \n  Misses       1403     1403         \n  Partials      453      453\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/types.go | 88.6% <\u00f8> (-0.12%) | :arrow_down: |\n| generator/debug.go | 100% <100%> (\u00f8) | |\n| generator/shared.go | 77.32% <60%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3b72d1f...d60be3b. Read the comment docs.\n. # Codecov Report\nMerging #1371 into master will increase coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1371      +/-\n==========================================\n+ Coverage   72.32%   72.33%   +<.01%   \n==========================================\n  Files          36       35       -1   \n  Lines        6707     6702       -5   \n==========================================\n- Hits         4851     4848       -3   \n+ Misses       1403     1402       -1   \n+ Partials      453      452       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/debug.go | | |\n| generator/types.go | 88.71% <0%> (+0.11%) | :arrow_up: |\n| generator/shared.go | 77.49% <0%> (+0.16%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2282aa1...081a3fe. Read the comment docs.\n. # Codecov Report\nMerging #1372 into master will increase coverage by 0.03%.\nThe diff coverage is 93.1%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1372      +/-\n==========================================\n+ Coverage   72.35%   72.39%   +0.03%   \n==========================================\n  Files          36       36            \n  Lines        6718     6724       +6   \n==========================================\n+ Hits         4861     4868       +7   \n+ Misses       1404     1403       -1   \n  Partials      453      453\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/model.go | 80.38% <100%> (\u00f8) | :arrow_up: |\n| generator/operation.go | 68.21% <100%> (+0.69%) | :arrow_up: |\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n| generator/template_repo.go | 88.35% <60%> (-0.78%) | :arrow_down: |\n| generator/structs.go | 50% <0%> (-1.95%) | :arrow_down: |\n| generator/support.go | 76.43% <0%> (-0.06%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dfe8aa7...caa3dae. Read the comment docs.\n. # Codecov Report\nMerging #1387 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1387      +/-\n==========================================\n+ Coverage   72.32%   72.34%   +0.01%   \n==========================================\n  Files          36       36            \n  Lines        6707     6711       +4   \n==========================================\n+ Hits         4851     4855       +4   \n  Misses       1403     1403            \n  Partials      453      453\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 51.94% <100%> (+1.94%) | :arrow_up: |\n| generator/support.go | 76.48% <100%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e51fba5...02a790a. Read the comment docs.\n. # Codecov Report\nMerging #1390 into master will increase coverage by 0.01%.\nThe diff coverage is 87.5%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1390      +/-\n==========================================\n+ Coverage   72.34%   72.35%   +0.01%   \n==========================================\n  Files          36       36            \n  Lines        6711     6718       +7   \n==========================================\n+ Hits         4855     4861       +6   \n- Misses       1403     1404       +1   \n  Partials      453      453\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 51.94% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/operation.go | 67.52% <87.5%> (+0.19%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 98dcea6...86a6b52. Read the comment docs.\n. # Codecov Report\nMerging #1394 into master will increase coverage by 0.1%.\nThe diff coverage is 90.9%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1394     +/-\n=========================================\n+ Coverage   72.83%   72.94%   +0.1%   \n=========================================\n  Files          37       37           \n  Lines        6844     6875     +31   \n=========================================\n+ Hits         4985     5015     +30   \n- Misses       1406     1407      +1   \n  Partials      453      453\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/model.go | 80.38% <100%> (\u00f8) | :arrow_up: |\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n| generator/operation.go | 68.21% <100%> (+0.69%) | :arrow_up: |\n| generator/template_repo.go | 88.35% <60%> (-0.78%) | :arrow_down: |\n| generator/structs.go | 60.2% <90.47%> (+8.25%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d86b7c4...b6417da. Read the comment docs.\n. # Codecov Report\nMerging #1399 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1399   +/-\n=======================================\n  Coverage   72.35%   72.35%         \n=======================================\n  Files          36       36         \n  Lines        6718     6718         \n=======================================\n  Hits         4861     4861         \n  Misses       1404     1404         \n  Partials      453      453\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dfe8aa7...77feb4d. Read the comment docs.\n. # Codecov Report\nMerging #1403 into master will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1403      +/-\n==========================================\n- Coverage   72.35%   72.34%   -0.02%   \n==========================================\n  Files          36       36            \n  Lines        6718     6711       -7   \n==========================================\n- Hits         4861     4855       -6   \n+ Misses       1404     1403       -1   \n  Partials      453      453\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n| generator/operation.go | 67.32% <0%> (-0.2%) | :arrow_down: |\n| generator/structs.go | 51.94% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8d50f45...cf386b7. Read the comment docs.\n. # Codecov Report\nMerging #1405 into master will increase coverage by 0.47%.\nThe diff coverage is 96.82%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1405      +/-\n==========================================\n+ Coverage   72.35%   72.83%   +0.47%   \n==========================================\n  Files          36       37       +1   \n  Lines        6718     6844     +126   \n==========================================\n+ Hits         4861     4985     +124   \n- Misses       1404     1406       +2   \n  Partials      453      453\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <\u00f8> (\u00f8) | :arrow_up: |\n| scan/scanner.go | 73.3% <\u00f8> (+0.45%) | :arrow_up: |\n| scan/routes.go | 96% <100%> (+0.54%) | :arrow_up: |\n| scan/route_params.go | 96.66% <96.66%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1643221...50345c2. Read the comment docs.\n. # Codecov Report\nMerging #1407 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1407   +/-\n=======================================\n  Coverage   72.35%   72.35%         \n=======================================\n  Files          36       36         \n  Lines        6718     6718         \n=======================================\n  Hits         4861     4861         \n  Misses       1404     1404         \n  Partials      453      453\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4aa95be...8f9698b. Read the comment docs.\n. # Codecov Report\nMerging #1410 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1410   +/-\n=======================================\n  Coverage   72.35%   72.35%         \n=======================================\n  Files          36       36         \n  Lines        6718     6718         \n=======================================\n  Hits         4861     4861         \n  Misses       1404     1404         \n  Partials      453      453\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1643221...6cf984d. Read the comment docs.\n. # Codecov Report\nMerging #1411 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1411   +/-\n=======================================\n  Coverage   72.35%   72.35%         \n=======================================\n  Files          36       36         \n  Lines        6718     6718         \n=======================================\n  Hits         4861     4861         \n  Misses       1404     1404         \n  Partials      453      453\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1643221...04997ed. Read the comment docs.\n. # Codecov Report\nMerging #1420 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1420      +/-\n==========================================\n+ Coverage   72.94%   72.99%   +0.04%   \n==========================================\n  Files          37       37            \n  Lines        6876     6879       +3   \n==========================================\n+ Hits         5016     5021       +5   \n+ Misses       1407     1406       -1   \n+ Partials      453      452       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n| generator/types.go | 89.2% <100%> (+0.6%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 502550b...3b6c146. Read the comment docs.\n. # Codecov Report\nMerging #1421 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1421      +/-\n==========================================\n+ Coverage   72.93%   72.94%   +0.01%   \n==========================================\n  Files          37       37            \n  Lines        6875     6875            \n==========================================\n+ Hits         5014     5015       +1   \n+ Misses       1408     1407       -1   \n  Partials      453      453\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 60.2% <0%> (+1.02%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 95766d3...e47dde2. Read the comment docs.\n. # Codecov Report\nMerging #1422 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1422      +/-\n==========================================\n+ Coverage   72.93%   72.94%   +0.01%   \n==========================================\n  Files          37       37            \n  Lines        6875     6876       +1   \n==========================================\n+ Hits         5014     5016       +2   \n+ Misses       1408     1407       -1   \n  Partials      453      453\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 60.2% <\u00f8> (+1.02%) | :arrow_up: |\n| generator/model.go | 80.4% <100%> (+0.02%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 95766d3...32bafce. Read the comment docs.\n. # Codecov Report\nMerging #1424 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1424   +/-\n=======================================\n  Coverage   72.99%   72.99%         \n=======================================\n  Files          37       37         \n  Lines        6879     6879         \n=======================================\n  Hits         5021     5021         \n  Misses       1406     1406         \n  Partials      452      452\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 25e502e...4d54057. Read the comment docs.\n. # Codecov Report\nMerging #1435 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1435   +/-\n=======================================\n  Coverage   72.99%   72.99%         \n=======================================\n  Files          37       37         \n  Lines        6879     6879         \n=======================================\n  Hits         5021     5021         \n  Misses       1406     1406         \n  Partials      452      452\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0ad99fc...f6e2a38. Read the comment docs.\n. # Codecov Report\nMerging #1438 into master will increase coverage by 0.01%.\nThe diff coverage is 87.5%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1438      +/-\n=========================================\n+ Coverage   72.99%     73%   +0.01%   \n=========================================\n  Files          37      37            \n  Lines        6880    6883       +3   \n=========================================\n+ Hits         5022    5025       +3   \n  Misses       1406    1406            \n  Partials      452     452\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n| generator/model.go | 80.46% <80%> (+0.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6bb0956...63209c2. Read the comment docs.\n. # Codecov Report\nMerging #1439 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1439   +/-\n=======================================\n  Coverage   72.99%   72.99%         \n=======================================\n  Files          37       37         \n  Lines        6879     6879         \n=======================================\n  Hits         5021     5021         \n  Misses       1406     1406         \n  Partials      452      452\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2fed97b...672ff63. Read the comment docs.\n. # Codecov Report\nMerging #1440 into master will increase coverage by <.01%.\nThe diff coverage is 75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1440      +/-\n==========================================\n+ Coverage   72.99%   72.99%   +<.01%   \n==========================================\n  Files          37       37            \n  Lines        6879     6880       +1   \n==========================================\n+ Hits         5021     5022       +1   \n  Misses       1406     1406            \n  Partials      452      452\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/discriminators.go | 100% <100%> (\u00f8) | :arrow_up: |\n| generator/operation.go | 68.21% <33.33%> (\u00f8) | :arrow_up: |\n| generator/model.go | 80.4% <75%> (\u00f8) | :arrow_up: |\n| generator/types.go | 89.23% <83.33%> (+0.02%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2fed97b...a3a6b8d. Read the comment docs.\n. # Codecov Report\nMerging #1441 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1441   +/-\n=======================================\n  Coverage   72.99%   72.99%         \n=======================================\n  Files          37       37         \n  Lines        6880     6880         \n=======================================\n  Hits         5022     5022         \n  Misses       1406     1406         \n  Partials      452      452\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6bb0956...d712184. Read the comment docs.\n. # Codecov Report\nMerging #1442 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1442      +/-\n==========================================\n+ Coverage   72.99%   72.99%   +<.01%   \n==========================================\n  Files          37       37            \n  Lines        6880     6881       +1   \n==========================================\n+ Hits         5022     5023       +1   \n  Misses       1406     1406            \n  Partials      452      452\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/generate/model.go | 75% <100%> (+1.66%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6bb0956...98139f9. Read the comment docs.\n. # Codecov Report\nMerging #1443 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1443      +/-\n==========================================\n+ Coverage      73%   73.01%   +<.01%   \n==========================================\n  Files          37       37            \n  Lines        6884     6885       +1   \n==========================================\n+ Hits         5026     5027       +1   \n  Misses       1406     1406            \n  Partials      452      452\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/model.go | 80.48% <100%> (+0.02%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c79e79d...39286a6. Read the comment docs.\n. # Codecov Report\nMerging #1444 into master will increase coverage by 0.22%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1444      +/-\n==========================================\n+ Coverage   73.01%   73.24%   +0.22%   \n==========================================\n  Files          37       37            \n  Lines        6885     6936      +51   \n==========================================\n+ Hits         5027     5080      +53   \n+ Misses       1406     1405       -1   \n+ Partials      452      451       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 60.2% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n| generator/operation.go | 70.75% <100%> (+2.53%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4db2744...a01b332. Read the comment docs.\n. # Codecov Report\nMerging #1445 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1445   +/-\n=======================================\n  Coverage   73.24%   73.24%         \n=======================================\n  Files          37       37         \n  Lines        6936     6936         \n=======================================\n  Hits         5080     5080         \n  Misses       1405     1405         \n  Partials      451      451\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 46d07fc...434bb27. Read the comment docs.\n. # Codecov Report\nMerging #1447 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1447   +/-\n=======================================\n  Coverage   73.01%   73.01%         \n=======================================\n  Files          37       37         \n  Lines        6885     6885         \n=======================================\n  Hits         5027     5027         \n  Misses       1406     1406         \n  Partials      452      452\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 30cee73...bf865a1. Read the comment docs.\n. # Codecov Report\nMerging #1448 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1448   +/-\n=======================================\n  Coverage   73.24%   73.24%         \n=======================================\n  Files          37       37         \n  Lines        6936     6936         \n=======================================\n  Hits         5080     5080         \n  Misses       1405     1405         \n  Partials      451      451\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e571dca...6b3f17e. Read the comment docs.\n. # Codecov Report\nMerging #1449 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1449   +/-\n=======================================\n  Coverage   73.24%   73.24%         \n=======================================\n  Files          37       37         \n  Lines        6936     6936         \n=======================================\n  Hits         5080     5080         \n  Misses       1405     1405         \n  Partials      451      451\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e571dca...7c70523. Read the comment docs.\n. # Codecov Report\nMerging #1451 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1451   +/-\n=======================================\n  Coverage   73.24%   73.24%         \n=======================================\n  Files          37       37         \n  Lines        6936     6936         \n=======================================\n  Hits         5080     5080         \n  Misses       1405     1405         \n  Partials      451      451\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e571dca...35dbe3d. Read the comment docs.\n. # Codecov Report\nMerging #1452 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1452   +/-\n=======================================\n  Coverage   73.24%   73.24%         \n=======================================\n  Files          37       37         \n  Lines        6936     6936         \n=======================================\n  Hits         5080     5080         \n  Misses       1405     1405         \n  Partials      451      451\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e571dca...ed5bf2d. Read the comment docs.\n. # Codecov Report\nMerging #1455 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1455      +/-\n==========================================\n+ Coverage   73.24%   73.24%   +<.01%   \n==========================================\n  Files          37       37            \n  Lines        6936     6938       +2   \n==========================================\n+ Hits         5080     5082       +2   \n  Misses       1405     1405            \n  Partials      451      451\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/model.go | 80.52% <100%> (+0.04%) | :arrow_up: |\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8403e93...5e219fe. Read the comment docs.\n. # Codecov Report\nMerging #1460 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1460   +/-\n=======================================\n  Coverage   73.24%   73.24%         \n=======================================\n  Files          37       37         \n  Lines        6938     6938         \n=======================================\n  Hits         5082     5082         \n  Misses       1405     1405         \n  Partials      451      451\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f552963...a2584c8. Read the comment docs.\n. # Codecov Report\nMerging #1463 into master will not change coverage.\nThe diff coverage is 96.55%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1463   +/-\n=======================================\n  Coverage   73.24%   73.24%         \n=======================================\n  Files          37       37         \n  Lines        6938     6938         \n=======================================\n  Hits         5082     5082         \n  Misses       1405     1405         \n  Partials      451      451\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <96.55%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update da8152d...2032f76. Read the comment docs.\n. # Codecov Report\nMerging #1474 into master will not change coverage.\nThe diff coverage is 96.55%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1474   +/-\n=======================================\n  Coverage   73.24%   73.24%         \n=======================================\n  Files          37       37         \n  Lines        6938     6938         \n=======================================\n  Hits         5082     5082         \n  Misses       1405     1405         \n  Partials      451      451\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <96.55%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2d443fa...96b95d7. Read the comment docs.\n. # Codecov Report\nMerging #1478 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1478   +/-\n=======================================\n  Coverage   73.24%   73.24%         \n=======================================\n  Files          37       37         \n  Lines        6938     6938         \n=======================================\n  Hits         5082     5082         \n  Misses       1405     1405         \n  Partials      451      451\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/operation.go | 70.75% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/structs.go | 60.2% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update acd311c...495aa24. Read the comment docs.\n. # Codecov Report\nMerging #1481 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1481   +/-\n=======================================\n  Coverage   73.25%   73.25%         \n=======================================\n  Files          37       37         \n  Lines        6940     6940         \n=======================================\n  Hits         5084     5084         \n  Misses       1405     1405         \n  Partials      451      451\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 956d4dd...45dd530. Read the comment docs.\n. # Codecov Report\nMerging #1482 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1482      +/-\n==========================================\n+ Coverage   73.24%   73.25%   +<.01%   \n==========================================\n  Files          37       37            \n  Lines        6938     6940       +2   \n==========================================\n+ Hits         5082     5084       +2   \n  Misses       1405     1405            \n  Partials      451      451\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 60.2% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/client.go | 67.28% <100%> (+0.3%) | :arrow_up: |\n| generator/support.go | 76.53% <100%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update afb9717...a3e3161. Read the comment docs.\n. # Codecov Report\nMerging #1489 into master will decrease coverage by 2.46%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1489      +/-\n==========================================\n- Coverage   73.25%   70.79%   -2.47%   \n==========================================\n  Files          37       28       -9   \n  Lines        6940     6474     -466   \n==========================================\n- Hits         5084     4583     -501   \n+ Misses       1405     1403       -2   \n- Partials      451      488      +37\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/template_repo.go | 64.08% <0%> (-24.28%) | :arrow_down: |\n| cmd/swagger/commands/generate/server.go | 67.53% <0%> (-20.19%) | :arrow_down: |\n| generator/structs.go | 48.64% <0%> (-11.56%) | :arrow_down: |\n| cmd/swagger/commands/generate/shared.go | 33.33% <0%> (-7.85%) | :arrow_down: |\n| generator/model.go | 72.85% <0%> (-7.68%) | :arrow_down: |\n| generator/support.go | 69.59% <0%> (-6.95%) | :arrow_down: |\n| generator/types.go | 84.07% <0%> (-5.16%) | :arrow_down: |\n| generator/operation.go | 69.13% <0%> (-1.62%) | :arrow_down: |\n| generator/shared.go | 76.14% <0%> (-1.18%) | :arrow_down: |\n| scan/routes.go | 95.45% <0%> (-0.55%) | :arrow_down: |\n| ... and 15 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 956d4dd...5479831. Read the comment docs.\n. # Codecov Report\nMerging #1492 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1492   +/-\n=======================================\n  Coverage   73.25%   73.25%         \n=======================================\n  Files          37       37         \n  Lines        6940     6940         \n=======================================\n  Hits         5084     5084         \n  Misses       1405     1405         \n  Partials      451      451\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 956d4dd...748292e. Read the comment docs.\n. # Codecov Report\nMerging #1494 into master will increase coverage by 0.01%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1494      +/-\n==========================================\n+ Coverage   73.25%   73.27%   +0.01%   \n==========================================\n  Files          37       37            \n  Lines        6940     6937       -3   \n==========================================\n- Hits         5084     5083       -1   \n+ Misses       1405     1403       -2   \n  Partials      451      451\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/generate/server.go | 87.5% <\u00f8> (-0.22%) | :arrow_down: |\n| cmd/swagger/commands/generate/support.go | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/serve.go | 0% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d5d7ff1...97afae4. Read the comment docs.\n. # Codecov Report\nMerging #1498 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1498      +/-\n==========================================\n+ Coverage   73.25%   73.26%   +<.01%   \n==========================================\n  Files          37       37            \n  Lines        6940     6941       +1   \n==========================================\n+ Hits         5084     5085       +1   \n  Misses       1405     1405            \n  Partials      451      451\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/generate/model.go | 76.47% <100%> (+1.47%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d5d7ff1...3fde097. Read the comment docs.\n. # Codecov Report\nMerging #1500 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1500   +/-\n=======================================\n  Coverage   73.26%   73.26%         \n=======================================\n  Files          37       37         \n  Lines        6941     6941         \n=======================================\n  Hits         5085     5085         \n  Misses       1405     1405         \n  Partials      451      451\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/validate.go | 83.33% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 21f7c2d...f350967. Read the comment docs.\n. # Codecov Report\nMerging #1507 into master will increase coverage by 0.78%.\nThe diff coverage is 86.36%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1507      +/-\n==========================================\n+ Coverage   73.29%   74.07%   +0.78%   \n==========================================\n  Files          37       37            \n  Lines        6951     7006      +55   \n==========================================\n+ Hits         5095     5190      +95   \n+ Misses       1405     1363      -42   \n- Partials      451      453       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 60.2% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n| generator/types.go | 90.57% <82.35%> (+1.33%) | :arrow_up: |\n| generator/model.go | 84.23% <86.48%> (+3.7%) | :arrow_up: |\n| scan/schema.go | 73.04% <0%> (-0.36%) | :arrow_down: |\n| generator/shared.go | 79.06% <0%> (+1.74%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 174f825...6125249. Read the comment docs.\n. # Codecov Report\nMerging #1508 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1508   +/-\n=======================================\n  Coverage   73.26%   73.26%         \n=======================================\n  Files          37       37         \n  Lines        6941     6941         \n=======================================\n  Hits         5085     5085         \n  Misses       1405     1405         \n  Partials      451      451\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2660424...eb09a36. Read the comment docs.\n. # Codecov Report\nMerging #1511 into master will increase coverage by 0.03%.\nThe diff coverage is 95%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1511      +/-\n==========================================\n+ Coverage   73.26%   73.29%   +0.03%   \n==========================================\n  Files          37       37            \n  Lines        6941     6951      +10   \n==========================================\n+ Hits         5085     5095      +10   \n  Misses       1405     1405            \n  Partials      451      451\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/responses.go | 80.5% <100%> (\u00f8) | :arrow_up: |\n| scan/parameters.go | 78.09% <100%> (\u00f8) | :arrow_up: |\n| scan/schema.go | 73.39% <94.44%> (+0.35%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5f5edd0...4659232. Read the comment docs.\n. # Codecov Report\nMerging #1514 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1514   +/-\n=======================================\n  Coverage   73.29%   73.29%         \n=======================================\n  Files          37       37         \n  Lines        6951     6951         \n=======================================\n  Hits         5095     5095         \n  Misses       1405     1405         \n  Partials      451      451\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dba9799...b867224. Read the comment docs.\n. # Codecov Report\nMerging #1515 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1515   +/-\n=======================================\n  Coverage   73.29%   73.29%         \n=======================================\n  Files          37       37         \n  Lines        6951     6951         \n=======================================\n  Hits         5095     5095         \n  Misses       1405     1405         \n  Partials      451      451\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 53e4db9...e5c4f7d. Read the comment docs.\n. # Codecov Report\nMerging #1521 into master will decrease coverage by <.01%.\nThe diff coverage is 72.72%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1521      +/-\n==========================================\n- Coverage   74.22%   74.21%   -0.01%   \n==========================================\n  Files          37       37            \n  Lines        7080     7102      +22   \n==========================================\n+ Hits         5255     5271      +16   \n- Misses       1367     1370       +3   \n- Partials      458      461       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/model.go | 84.02% <72.72%> (-0.24%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 58db231...26bd930. Read the comment docs.\n. # Codecov Report\nMerging #1527 into master will increase coverage by 0.02%.\nThe diff coverage is 83.33%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1527      +/-\n==========================================\n+ Coverage   74.21%   74.24%   +0.02%   \n==========================================\n  Files          37       37            \n  Lines        7102     7114      +12   \n==========================================\n+ Hits         5271     5282      +11   \n  Misses       1370     1370            \n- Partials      461      462       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/schema.go | 73.54% <83.33%> (+0.15%) | :arrow_up: |\n| scan/classifier.go | 94.36% <0%> (+1.4%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bf19a93...a817a71. Read the comment docs.\n. # Codecov Report\nMerging #1529 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1529   +/-\n=======================================\n  Coverage   74.24%   74.24%         \n=======================================\n  Files          37       37         \n  Lines        7114     7114         \n=======================================\n  Hits         5282     5282         \n  Misses       1370     1370         \n  Partials      462      462\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6bc0267...18f8b0f. Read the comment docs.\n. # Codecov Report\nMerging #1533 into master will increase coverage by 0.38%.\nThe diff coverage is 98.52%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1533      +/-\n==========================================\n+ Coverage   74.25%   74.64%   +0.38%   \n==========================================\n  Files          37       37            \n  Lines        7117     7146      +29   \n==========================================\n+ Hits         5285     5334      +49   \n+ Misses       1370     1351      -19   \n+ Partials      462      461       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/support.go | 79.95% <100%> (+3.41%) | :arrow_up: |\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n| generator/operation.go | 71.46% <100%> (+0.67%) | :arrow_up: |\n| generator/shared.go | 80.18% <100%> (+1.11%) | :arrow_up: |\n| generator/structs.go | 62.37% <83.33%> (+2.17%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 473b261...b73b1ef. Read the comment docs.\n. # Codecov Report\nMerging #1538 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1538      +/-\n==========================================\n+ Coverage   74.24%   74.26%   +0.01%   \n==========================================\n  Files          37       37            \n  Lines        7114     7119       +5   \n==========================================\n+ Hits         5282     5287       +5   \n  Misses       1370     1370            \n  Partials      462      462\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/template_repo.go | 88.65% <100%> (+0.29%) | :arrow_up: |\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c8a59d3...c72bb6b. Read the comment docs.\n. # Codecov Report\nMerging #1539 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1539      +/-\n==========================================\n+ Coverage   74.24%   74.25%   +0.01%   \n==========================================\n  Files          37       37            \n  Lines        7114     7117       +3   \n==========================================\n+ Hits         5282     5285       +3   \n  Misses       1370     1370            \n  Partials      462      462\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n| generator/operation.go | 70.79% <100%> (+0.04%) | :arrow_up: |\n| generator/model.go | 84.05% <100%> (+0.02%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c8a59d3...997f47d. Read the comment docs.\n. # Codecov Report\nMerging #1540 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1540   +/-\n=======================================\n  Coverage   74.24%   74.24%         \n=======================================\n  Files          37       37         \n  Lines        7114     7114         \n=======================================\n  Hits         5282     5282         \n  Misses       1370     1370         \n  Partials      462      462\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c8a59d3...cbbe2ce. Read the comment docs.\n. # Codecov Report\nMerging #1541 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1541   +/-\n=======================================\n  Coverage   74.24%   74.24%         \n=======================================\n  Files          37       37         \n  Lines        7114     7114         \n=======================================\n  Hits         5282     5282         \n  Misses       1370     1370         \n  Partials      462      462\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/scanner.go | 73.3% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c8a59d3...5fa55b4. Read the comment docs.\n. # Codecov Report\nMerging #1547 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1547   +/-\n=======================================\n  Coverage   74.25%   74.25%         \n=======================================\n  Files          37       37         \n  Lines        7117     7117         \n=======================================\n  Hits         5285     5285         \n  Misses       1370     1370         \n  Partials      462      462\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4125f30...2b6ab93. Read the comment docs.\n. # Codecov Report\nMerging #1550 into master will decrease coverage by 0.19%.\nThe diff coverage is 81.81%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1550     +/-\n=========================================\n- Coverage   74.87%   74.67%   -0.2%   \n=========================================\n  Files          37       37           \n  Lines        7176     7171      -5   \n=========================================\n- Hits         5373     5355     -18   \n- Misses       1345     1353      +8   \n- Partials      458      463      +5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/schema.go | 73.51% <\u00f8> (-0.04%) | :arrow_down: |\n| scan/responses.go | 80.72% <81.81%> (+0.21%) | :arrow_up: |\n| scan/parameters.go | 78.37% <81.81%> (+0.28%) | :arrow_up: |\n| generator/support.go | 79.95% <0%> (-2.46%) | :arrow_down: |\n| generator/structs.go | 62.37% <0%> (-1%) | :arrow_down: |\n| generator/operation.go | 71.46% <0%> (-0.41%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 54d0797...744f8aa. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@41b5a5f). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1555   +/-\n=========================================\n  Coverage          ?   74.65%         \n=========================================\n  Files             ?       37         \n  Lines             ?     7146         \n  Branches          ?        0         \n=========================================\n  Hits              ?     5335         \n  Misses            ?     1350         \n  Partials          ?      461\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 41b5a5f...da26074. Read the comment docs.\n. # Codecov Report\nMerging #1557 into master will increase coverage by 0.21%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1557      +/-\n==========================================\n+ Coverage   74.65%   74.87%   +0.21%   \n==========================================\n  Files          37       37            \n  Lines        7146     7176      +30   \n==========================================\n+ Hits         5335     5373      +38   \n+ Misses       1350     1345       -5   \n+ Partials      461      458       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/support.go | 82.4% <100%> (+2.45%) | :arrow_up: |\n| generator/operation.go | 71.87% <0%> (+0.4%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 25e637c...e059438. Read the comment docs.\n. # Codecov Report\nMerging #1564 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1564   +/-\n======================================\n  Coverage    74.9%   74.9%         \n======================================\n  Files          37      37         \n  Lines        7201    7201         \n======================================\n  Hits         5394    5394         \n  Misses       1347    1347         \n  Partials      460     460\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update eaa48cf...a15ef5c. Read the comment docs.\n. # Codecov Report\nMerging #1566 into master will increase coverage by 0.3%.\nThe diff coverage is 88.05%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #1566     +/-\n========================================\n+ Coverage   74.79%   75.1%   +0.3%   \n========================================\n  Files          37      37           \n  Lines        7210    7275     +65   \n========================================\n+ Hits         5393    5464     +71   \n+ Misses       1357    1348      -9   \n- Partials      460     463      +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <\u00f8> (+1.75%) | :arrow_up: |\n| generator/structs.go | 63.36% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/debug.go | 100% <100%> (\u00f8) | :arrow_up: |\n| generator/types.go | 90.59% <100%> (-0.1%) | :arrow_down: |\n| generator/operation.go | 72.84% <87.5%> (+0.96%) | :arrow_up: |\n| generator/model.go | 84.38% <88.46%> (+0.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 442132c...da9d39f. Read the comment docs.\n. # Codecov Report\nMerging #1567 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1567   +/-\n======================================\n  Coverage    74.9%   74.9%         \n======================================\n  Files          37      37         \n  Lines        7201    7201         \n======================================\n  Hits         5394    5394         \n  Misses       1347    1347         \n  Partials      460     460\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b387927...3d022fd. Read the comment docs.\n. # Codecov Report\nMerging #1568 into master will increase coverage by 1.6%.\nThe diff coverage is 96.82%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #1568     +/-\n========================================\n+ Coverage    75.1%   76.7%   +1.6%   \n========================================\n  Files          37      37           \n  Lines        7275    7303     +28   \n========================================\n+ Hits         5464    5602    +138   \n+ Misses       1348    1228    -120   \n- Partials      463     473     +10\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 72.27% <\u00f8> (+8.91%) | :arrow_up: |\n| generator/model.go | 84.03% <100%> (-0.36%) | :arrow_down: |\n| generator/types.go | 92.25% <100%> (+1.65%) | :arrow_up: |\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n| generator/shared.go | 81.6% <100%> (+1.41%) | :arrow_up: |\n| generator/support.go | 82.82% <100%> (+0.42%) | :arrow_up: |\n| generator/operation.go | 84.89% <94.17%> (+12.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update abafcce...eb15cb8. Read the comment docs.\n. # Codecov Report\nMerging #1569 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1569   +/-\n======================================\n  Coverage    74.9%   74.9%         \n======================================\n  Files          37      37         \n  Lines        7201    7201         \n======================================\n  Hits         5394    5394         \n  Misses       1347    1347         \n  Partials      460     460\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 711a408...3601594. Read the comment docs.\n. # Codecov Report\nMerging #1574 into master will decrease coverage by 0.1%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1574      +/-\n==========================================\n- Coverage    74.9%   74.79%   -0.11%   \n==========================================\n  Files          37       37            \n  Lines        7201     7210       +9   \n==========================================\n- Hits         5394     5393       -1   \n- Misses       1347     1357      +10   \n  Partials      460      460\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/generate/support.go | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/server.go | 87.5% <\u00f8> (-0.22%) | :arrow_down: |\n| generator/bindata.go | 64.75% <\u00f8> (-1.76%) | :arrow_down: |\n| cmd/swagger/commands/serve.go | 0% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cef0581...4c65652. Read the comment docs.\n. # Codecov Report\nMerging #1577 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1577   +/-\n=======================================\n  Coverage   74.79%   74.79%         \n=======================================\n  Files          37       37         \n  Lines        7210     7210         \n=======================================\n  Hits         5393     5393         \n  Misses       1357     1357         \n  Partials      460      460\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 462d7ce...a87254d. Read the comment docs.\n. # Codecov Report\nMerging #1578 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1578   +/-\n=======================================\n  Coverage   74.79%   74.79%         \n=======================================\n  Files          37       37         \n  Lines        7210     7210         \n=======================================\n  Hits         5393     5393         \n  Misses       1357     1357         \n  Partials      460      460\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 22a4f31...3880a19. Read the comment docs.\n. # Codecov Report\nMerging #1585 into master will decrease coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1585      +/-\n==========================================\n- Coverage    76.7%   76.66%   -0.05%   \n==========================================\n  Files          37       37            \n  Lines        7303     7301       -2   \n==========================================\n- Hits         5602     5597       -5   \n- Misses       1228     1230       +2   \n- Partials      473      474       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/operation.go | 84.85% <\u00f8> (-0.04%) | :arrow_down: |\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n| generator/model.go | 83.75% <0%> (-0.28%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1194fcd...ce46893. Read the comment docs.\n. # Codecov Report\nMerging #1586 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1586   +/-\n======================================\n  Coverage    75.1%   75.1%         \n======================================\n  Files          37      37         \n  Lines        7275    7275         \n======================================\n  Hits         5464    5464         \n  Misses       1348    1348         \n  Partials      463     463\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f3b2323...6db3fb7. Read the comment docs.\n. # Codecov Report\nMerging #1588 into master will increase coverage by 2.61%.\nThe diff coverage is 88.61%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1588      +/-\n==========================================\n+ Coverage   76.66%   79.27%   +2.61%   \n==========================================\n  Files          37       37            \n  Lines        7301     7267      -34   \n==========================================\n+ Hits         5597     5761     +164   \n+ Misses       1230     1032     -198   \n  Partials      474      474\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/config.go | 0% <0%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/mixin.go | 86.2% <100%> (+86.2%) | :arrow_up: |\n| generator/model.go | 82.66% <100%> (-1.1%) | :arrow_down: |\n| cmd/swagger/commands/generate/operation.go | 100% <100%> (+100%) | :arrow_up: |\n| cmd/swagger/commands/flatten.go | 100% <100%> (+100%) | :arrow_up: |\n| generator/support.go | 82.82% <100%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/support.go | 100% <100%> (+100%) | :arrow_up: |\n| cmd/swagger/commands/generate/server.go | 100% <100%> (+12.5%) | :arrow_up: |\n| cmd/swagger/commands/validate.go | 100% <100%> (+16.66%) | :arrow_up: |\n| cmd/swagger/commands/generate/model.go | 100% <100%> (+23.52%) | :arrow_up: |\n| ... and 15 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1920db4...e151edf. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@deefce1). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #1589   +/-\n========================================\n  Coverage          ?   76.7%         \n========================================\n  Files             ?      37         \n  Lines             ?    7303         \n  Branches          ?       0         \n========================================\n  Hits              ?    5602         \n  Misses            ?    1228         \n  Partials          ?     473\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update deefce1...3a38e80. Read the comment docs.\n. # Codecov Report\nMerging #1590 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1590   +/-\n======================================\n  Coverage    75.1%   75.1%         \n======================================\n  Files          37      37         \n  Lines        7275    7275         \n======================================\n  Hits         5464    5464         \n  Misses       1348    1348         \n  Partials      463     463\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7349899...73b0116. Read the comment docs.\n. # Codecov Report\nMerging #1592 into master will decrease coverage by 0.01%.\nThe diff coverage is 75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1592      +/-\n==========================================\n- Coverage    79.3%   79.28%   -0.02%   \n==========================================\n  Files          37       37            \n  Lines        7267     7280      +13   \n==========================================\n+ Hits         5763     5772       +9   \n- Misses       1031     1033       +2   \n- Partials      473      475       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n| generator/model.go | 82.68% <71.42%> (-0.17%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4b4df3a...6e47ce3. Read the comment docs.\n. # Codecov Report\nMerging #1593 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1593   +/-\n======================================\n  Coverage    76.7%   76.7%         \n======================================\n  Files          37      37         \n  Lines        7303    7303         \n======================================\n  Hits         5602    5602         \n  Misses       1228    1228         \n  Partials      473     473\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9838345...5763786. Read the comment docs.\n. # Codecov Report\nMerging #1597 into master will increase coverage by 0.02%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1597      +/-\n=========================================\n+ Coverage   79.28%   79.3%   +0.02%   \n=========================================\n  Files          37      37            \n  Lines        7280    7278       -2   \n=========================================\n  Hits         5772    5772            \n+ Misses       1033    1032       -1   \n+ Partials      475     474       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/route_params.go | 96.66% <\u00f8> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/mixin.go | 86.2% <\u00f8> (\u00f8) | :arrow_up: |\n| scan/scanner.go | 73.3% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/operation.go | 88.43% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/template_repo.go | 88.35% <\u00f8> (\u00f8) | :arrow_up: |\n| scan/schema.go | 73.51% <0%> (\u00f8) | :arrow_up: |\n| generator/model.go | 82.83% <100%> (+0.15%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6b63b49...d250eca. Read the comment docs.\n. # Codecov Report\nMerging #1598 into master will decrease coverage by <.01%.\nThe diff coverage is 95.77%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1598      +/-\n=========================================\n- Coverage    79.3%   79.3%   -0.01%   \n=========================================\n  Files          37      37            \n  Lines        7278    7234      -44   \n=========================================\n- Hits         5772    5737      -35   \n+ Misses       1032    1027       -5   \n+ Partials      474     470       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/debug.go | 100% <100%> (\u00f8) | :arrow_up: |\n| generator/model.go | 82.35% <100%> (-0.48%) | :arrow_down: |\n| generator/operation.go | 89.25% <100%> (+0.82%) | :arrow_up: |\n| generator/shared.go | 81.72% <50%> (-0.04%) | :arrow_down: |\n| generator/types.go | 90.32% <90%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update df3d7a3...27fdff9. Read the comment docs.\n. # Codecov Report\nMerging #1599 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1599   +/-\n======================================\n  Coverage    79.3%   79.3%         \n======================================\n  Files          37      37         \n  Lines        7278    7278         \n======================================\n  Hits         5772    5772         \n  Misses       1032    1032         \n  Partials      474     474\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update df3d7a3...d1d1dd5. Read the comment docs.\n. # Codecov Report\nMerging #1600 into master will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1600      +/-\n==========================================\n- Coverage    79.3%   79.29%   -0.02%   \n==========================================\n  Files          37       37            \n  Lines        7234     7278      +44   \n==========================================\n+ Hits         5737     5771      +34   \n- Misses       1027     1033       +6   \n- Partials      470      474       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 71.28% <0%> (-1%) | :arrow_down: |\n| generator/operation.go | 88.43% <0%> (-0.83%) | :arrow_down: |\n| generator/types.go | 90.31% <0%> (-0.01%) | :arrow_down: |\n| generator/debug.go | 100% <0%> (\u00f8) | :arrow_up: |\n| generator/shared.go | 81.75% <0%> (+0.03%) | :arrow_up: |\n| generator/model.go | 82.83% <0%> (+0.47%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9b00ffb...a1d8705. Read the comment docs.\n. # Codecov Report\nMerging #1604 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1604   +/-\n=======================================\n  Coverage   79.35%   79.35%         \n=======================================\n  Files          37       37         \n  Lines        7242     7242         \n=======================================\n  Hits         5747     5747         \n  Misses       1026     1026         \n  Partials      469      469\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/types.go | 90.32% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 957991f...1abd085. Read the comment docs.\n. # Codecov Report\nMerging #1607 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1607   +/-\n======================================\n  Coverage    79.3%   79.3%         \n======================================\n  Files          37      37         \n  Lines        7234    7234         \n======================================\n  Hits         5737    5737         \n  Misses       1027    1027         \n  Partials      470     470\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a6de9fc...192f8d0. Read the comment docs.\n. # Codecov Report\nMerging #1608 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1608   +/-\n=======================================\n  Coverage   79.35%   79.35%         \n=======================================\n  Files          37       37         \n  Lines        7242     7242         \n=======================================\n  Hits         5747     5747         \n  Misses       1026     1026         \n  Partials      469      469\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 036304b...86b2b5c. Read the comment docs.\n. # Codecov Report\nMerging #1611 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1611      +/-\n==========================================\n+ Coverage    79.3%   79.32%   +0.02%   \n==========================================\n  Files          37       37            \n  Lines        7234     7242       +8   \n==========================================\n+ Hits         5737     5745       +8   \n  Misses       1027     1027            \n  Partials      470      470\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/types.go | 90.32% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/model.go | 82.39% <100%> (+0.03%) | :arrow_up: |\n| generator/structs.go | 73.83% <100%> (+1.55%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a6de9fc...4b3d401. Read the comment docs.\n. # Codecov Report\nMerging #1612 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1612      +/-\n==========================================\n+ Coverage    79.3%   79.35%   +0.05%   \n==========================================\n  Files          37       37            \n  Lines        7234     7242       +8   \n==========================================\n+ Hits         5737     5747      +10   \n+ Misses       1027     1026       -1   \n+ Partials      470      469       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/types.go | 90.32% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/structs.go | 73.83% <100%> (+1.55%) | :arrow_up: |\n| generator/model.go | 82.58% <100%> (+0.22%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a6de9fc...0e76d40. Read the comment docs.\n. # Codecov Report\nMerging #1615 into master will decrease coverage by 0.02%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1615      +/-\n==========================================\n- Coverage   79.35%   79.33%   -0.03%   \n==========================================\n  Files          37       37            \n  Lines        7243     7243            \n==========================================\n- Hits         5748     5746       -2   \n- Misses       1026     1027       +1   \n- Partials      469      470       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/model.go | 82.39% <0%> (-0.19%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 82475a1...4d6f851. Read the comment docs.\n. # Codecov Report\nMerging #1616 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1616      +/-\n==========================================\n+ Coverage   79.34%   79.35%   +0.01%   \n==========================================\n  Files          37       37            \n  Lines        7243     7243            \n==========================================\n+ Hits         5747     5748       +1   \n+ Misses       1027     1026       -1   \n  Partials      469      469\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 73.83% <0%> (+0.93%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8c101dc...15bbc20. Read the comment docs.\n. # Codecov Report\nMerging #1620 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1620      +/-\n==========================================\n+ Coverage   79.34%   79.34%   +<.01%   \n==========================================\n  Files          37       37            \n  Lines        7243     7248       +5   \n==========================================\n+ Hits         5747     5751       +4   \n  Misses       1027     1027            \n- Partials      469      470       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/operation.go | 89.33% <100%> (+0.07%) | :arrow_up: |\n| generator/model.go | 82.39% <0%> (-0.19%) | :arrow_down: |\n| generator/structs.go | 73.83% <0%> (+0.93%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ab9a87e...ce7dbe4. Read the comment docs.\n. # Codecov Report\nMerging #1626 into master will increase coverage by 0.19%.\nThe diff coverage is 89.28%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1626      +/-\n==========================================\n+ Coverage   79.37%   79.56%   +0.19%   \n==========================================\n  Files          37       38       +1   \n  Lines        7247     7330      +83   \n==========================================\n+ Hits         5752     5832      +80   \n+ Misses       1026     1024       -2   \n- Partials      469      474       +5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/generate/contrib.go | 100% <100%> (\u00f8) | |\n| cmd/swagger/commands/generate/client.go | 100% <100%> (\u00f8) | :arrow_up: |\n| generator/shared.go | 82.4% <100%> (+0.67%) | :arrow_up: |\n| cmd/swagger/commands/generate/support.go | 100% <100%> (\u00f8) | :arrow_up: |\n| generator/client.go | 68.18% <100%> (+0.89%) | :arrow_up: |\n| cmd/swagger/commands/generate/shared.go | 72.27% <100%> (+2.58%) | :arrow_up: |\n| generator/support.go | 82.93% <100%> (+0.11%) | :arrow_up: |\n| cmd/swagger/commands/generate/server.go | 100% <100%> (\u00f8) | :arrow_up: |\n| generator/template_repo.go | 87.43% <77.77%> (-0.93%) | :arrow_down: |\n| generator/bindata.go | 69.18% <83.33%> (+2.66%) | :arrow_up: |\n| ... and 5 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 520df0b...95b5262. Read the comment docs.\n. # Codecov Report\nMerging #1627 into master will decrease coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1627      +/-\n==========================================\n- Coverage   79.37%   79.34%   -0.03%   \n==========================================\n  Files          37       37            \n  Lines        7248     7248            \n==========================================\n- Hits         5753     5751       -2   \n- Misses       1026     1027       +1   \n- Partials      469      470       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.51% <100%> (\u00f8) | :arrow_up: |\n| generator/model.go | 82.39% <0%> (-0.19%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8914a0f...e1ea02e. Read the comment docs.\n. # Codecov Report\nMerging #1630 into master will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1630      +/-\n==========================================\n- Coverage   79.37%   79.34%   -0.04%   \n==========================================\n  Files          37       37            \n  Lines        7248     7247       -1   \n==========================================\n- Hits         5753     5750       -3   \n- Misses       1026     1027       +1   \n- Partials      469      470       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/model.go | 82.37% <\u00f8> (-0.21%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f9da9f1...8acf0ec. Read the comment docs.\n. # Codecov Report\nMerging #1631 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1631      +/-\n==========================================\n+ Coverage   79.79%   79.82%   +0.02%   \n==========================================\n  Files          38       38            \n  Lines        7399     7399            \n==========================================\n+ Hits         5904     5906       +2   \n+ Misses       1023     1022       -1   \n+ Partials      472      471       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/validate.go | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/shared.go | 82.05% <100%> (\u00f8) | :arrow_up: |\n| generator/model.go | 82.54% <0%> (+0.18%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d2bb622...3b933d7. Read the comment docs.\n. # Codecov Report\nMerging #1633 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1633   +/-\n=======================================\n  Coverage   79.37%   79.37%         \n=======================================\n  Files          37       37         \n  Lines        7247     7247         \n=======================================\n  Hits         5752     5752         \n  Misses       1026     1026         \n  Partials      469      469\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 520df0b...0a5616a. Read the comment docs.\n. # Codecov Report\nMerging #1636 into master will decrease coverage by 0.34%.\nThe diff coverage is 33.33%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1636      +/-\n==========================================\n- Coverage   79.59%   79.24%   -0.35%   \n==========================================\n  Files          38       37       -1   \n  Lines        7330     7267      -63   \n==========================================\n- Hits         5834     5759      -75   \n- Misses       1023     1039      +16   \n+ Partials      473      469       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/shared.go | 80.19% <33.33%> (-2.21%) | :arrow_down: |\n| generator/bindata.go | 66.51% <0%> (-2.67%) | :arrow_down: |\n| cmd/swagger/commands/generate/shared.go | 69.69% <0%> (-2.59%) | :arrow_down: |\n| generator/client.go | 67.28% <0%> (-0.9%) | :arrow_down: |\n| generator/support.go | 82.82% <0%> (-0.12%) | :arrow_down: |\n| cmd/swagger/commands/generate/support.go | 100% <0%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/client.go | 100% <0%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/server.go | 100% <0%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/contrib.go | | |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 94886a0...9dbc68b. Read the comment docs.\n. # Codecov Report\nMerging #1638 into master will decrease coverage by 0.05%.\nThe diff coverage is 87.5%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1638      +/-\n==========================================\n- Coverage   79.44%   79.39%   -0.06%   \n==========================================\n  Files          38       38            \n  Lines        7350     7356       +6   \n==========================================\n+ Hits         5839     5840       +1   \n- Misses       1037     1042       +5   \n  Partials      474      474\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/types.go | 88.75% <87.5%> (-1.57%) | :arrow_down: |\n| generator/model.go | 82.56% <0%> (+0.18%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c4b0231...0152d6d. Read the comment docs.\n. # Codecov Report\nMerging #1639 into master will increase coverage by 0.1%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1639     +/-\n=========================================\n+ Coverage   79.82%   79.92%   +0.1%   \n=========================================\n  Files          38       38           \n  Lines        7399     7387     -12   \n=========================================\n- Hits         5906     5904      -2   \n+ Misses       1022     1011     -11   \n- Partials      471      472      +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 70.92% <100%> (+1.73%) | :arrow_up: |\n| generator/model.go | 82.35% <0%> (-0.19%) | :arrow_down: |\n| cmd/swagger/commands/validate.go | 100% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e99ea35...a0693a7. Read the comment docs.\n. # Codecov Report\nMerging #1640 into master will increase coverage by 0.11%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1640      +/-\n=========================================\n+ Coverage   79.68%   79.8%   +0.11%   \n=========================================\n  Files          38      38            \n  Lines        7360    7401      +41   \n=========================================\n+ Hits         5865    5906      +41   \n  Misses       1023    1023            \n  Partials      472     472\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/template_repo.go | 87.43% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/shared.go | 82.05% <100%> (+1.2%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 81f2821...d825d5c. Read the comment docs.\n. # Codecov Report\nMerging #1641 into master will decrease coverage by 0.46%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1641      +/-\n==========================================\n- Coverage   79.82%   79.36%   -0.47%   \n==========================================\n  Files          38       38            \n  Lines        7401     7355      -46   \n==========================================\n- Hits         5908     5837      -71   \n- Misses       1022     1043      +21   \n- Partials      471      475       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/model.go | 82.35% <\u00f8> (-0.21%) | :arrow_down: |\n| generator/support.go | 82.93% <0%> (-4.86%) | :arrow_down: |\n| generator/shared.go | 80.85% <0%> (-1.21%) | :arrow_down: |\n| generator/structs.go | 73.83% <0%> (-0.94%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9f6d541...87b7abe. Read the comment docs.\n. # Codecov Report\nMerging #1642 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1642      +/-\n==========================================\n+ Coverage   79.79%   79.82%   +0.02%   \n==========================================\n  Files          38       38            \n  Lines        7399     7399            \n==========================================\n+ Hits         5904     5906       +2   \n+ Misses       1023     1022       -1   \n+ Partials      472      471       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 69.18% <100%> (\u00f8) | :arrow_up: |\n| generator/model.go | 82.54% <0%> (+0.18%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 959f4e4...b2961c9. Read the comment docs.\n. # Codecov Report\nMerging #1643 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1643   +/-\n=======================================\n  Coverage   79.39%   79.39%         \n=======================================\n  Files          38       38         \n  Lines        7356     7356         \n=======================================\n  Hits         5840     5840         \n  Misses       1042     1042         \n  Partials      474      474\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ae7a7d3...9f0a8f8. Read the comment docs.\n. # Codecov Report\nMerging #1647 into master will increase coverage by 0.32%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1647      +/-\n==========================================\n+ Coverage   79.39%   79.71%   +0.32%   \n==========================================\n  Files          38       38            \n  Lines        7356     7360       +4   \n==========================================\n+ Hits         5840     5867      +27   \n+ Misses       1042     1022      -20   \n+ Partials      474      471       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/support.go | 87.79% <100%> (+4.85%) | :arrow_up: |\n| generator/structs.go | 74.76% <0%> (+0.93%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ae7a7d3...f1cd246. Read the comment docs.\n. # Codecov Report\nMerging #1652 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1652      +/-\n==========================================\n- Coverage   79.82%   79.82%   -0.01%   \n==========================================\n  Files          38       38            \n  Lines        7400     7399       -1   \n==========================================\n- Hits         5907     5906       -1   \n  Misses       1022     1022            \n  Partials      471      471\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/types.go | 88.72% <100%> (-0.03%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7417a49...b916a7e. Read the comment docs.\n. # Codecov Report\nMerging #1654 into master will increase coverage by 0.39%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1654      +/-\n==========================================\n+ Coverage   79.79%   80.18%   +0.39%   \n==========================================\n  Files          38       38            \n  Lines        7399     7399            \n==========================================\n+ Hits         5904     5933      +29   \n+ Misses       1023     1004      -19   \n+ Partials      472      462      -10\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 69.18% <0%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/validate.go | 100% <0%> (\u00f8) | :arrow_up: |\n| generator/types.go | 90.68% <0%> (+1.96%) | :arrow_up: |\n| generator/model.go | 84.33% <0%> (+1.98%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d3e42fb...f6c0f1b. Read the comment docs.\n. # Codecov Report\nMerging #1656 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1656   +/-\n=======================================\n  Coverage   79.79%   79.79%         \n=======================================\n  Files          38       38         \n  Lines        7399     7399         \n=======================================\n  Hits         5904     5904         \n  Misses       1023     1023         \n  Partials      472      472\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c4f90f2...bacf3c6. Read the comment docs.\n. # Codecov Report\nMerging #1657 into master will increase coverage by 0.02%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1657      +/-\n==========================================\n+ Coverage   79.79%   79.82%   +0.02%   \n==========================================\n  Files          38       38            \n  Lines        7399     7399            \n==========================================\n+ Hits         5904     5906       +2   \n+ Misses       1023     1022       -1   \n+ Partials      472      471       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/model.go | 82.54% <0%> (+0.18%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d2bb622...4b34fba. Read the comment docs.\n. # Codecov Report\nMerging #1661 into master will decrease coverage by 0.1%.\nThe diff coverage is 55%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1661      +/-\n==========================================\n- Coverage   80.31%   80.21%   -0.11%   \n==========================================\n  Files          38       38            \n  Lines        7387     7404      +17   \n==========================================\n+ Hits         5933     5939       +6   \n- Misses        992     1002      +10   \n- Partials      462      463       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/shared.go | 80.86% <55%> (-1.19%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dd867fd...499fa92. Read the comment docs.\n. # Codecov Report\nMerging #1664 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1664   +/-\n=======================================\n  Coverage   80.21%   80.21%         \n=======================================\n  Files          38       38         \n  Lines        7404     7404         \n=======================================\n  Hits         5939     5939         \n  Misses       1002     1002         \n  Partials      463      463\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4c3aa23...5ff7485. Read the comment docs.\n. # Codecov Report\nMerging #1669 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1669   +/-\n=======================================\n  Coverage   80.21%   80.21%         \n=======================================\n  Files          38       38         \n  Lines        7404     7404         \n=======================================\n  Hits         5939     5939         \n  Misses       1002     1002         \n  Partials      463      463\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d765df5...1262e07. Read the comment docs.\n. # Codecov Report\nMerging #1690 into master will decrease coverage by 0.12%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1690      +/-\n==========================================\n- Coverage   80.21%   80.08%   -0.13%   \n==========================================\n  Files          38       38            \n  Lines        7403     7416      +13   \n==========================================\n+ Hits         5938     5939       +1   \n- Misses       1002     1014      +12   \n  Partials      463      463\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/generate/spec.go | 0% <0%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/client.go | 100% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a6fabc7...020e938. Read the comment docs.\n. # Codecov Report\nMerging #1691 into master will decrease coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1691      +/-\n==========================================\n- Coverage   80.21%   80.21%   -0.01%   \n==========================================\n  Files          38       38            \n  Lines        7404     7403       -1   \n==========================================\n- Hits         5939     5938       -1   \n  Misses       1002     1002            \n  Partials      463      463\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/generate/client.go | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b10bd7b...4b811b8. Read the comment docs.\n. # Codecov Report\nMerging #1693 into master will increase coverage by 0.26%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1693      +/-\n==========================================\n+ Coverage   80.21%   80.47%   +0.26%   \n==========================================\n  Files          38       38            \n  Lines        7403     7416      +13   \n==========================================\n+ Hits         5938     5968      +30   \n+ Misses       1002      979      -23   \n- Partials      463      469       +6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/generate/spec.go | 61.7% <66.66%> (+61.7%) | :arrow_up: |\n| cmd/swagger/commands/generate/client.go | 100% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a6fabc7...e5920c9. Read the comment docs.\n. # Codecov Report\nMerging #1694 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1694   +/-\n=======================================\n  Coverage   80.21%   80.21%         \n=======================================\n  Files          38       38         \n  Lines        7403     7403         \n=======================================\n  Hits         5938     5938         \n  Misses       1002     1002         \n  Partials      463      463\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a6fabc7...b9db1f8. Read the comment docs.\n. # Codecov Report\nMerging #1697 into master will increase coverage by 0.01%.\nThe diff coverage is 90.9%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1697      +/-\n==========================================\n+ Coverage   80.47%   80.48%   +0.01%   \n==========================================\n  Files          38       38            \n  Lines        7415     7419       +4   \n==========================================\n+ Hits         5967     5971       +4   \n  Misses        979      979            \n  Partials      469      469\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/parameters.go | 78.37% <100%> (\u00f8) | :arrow_up: |\n| scan/schema.go | 73.65% <90%> (+0.13%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 617d767...87254d2. Read the comment docs.\n. # Codecov Report\nMerging #1705 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1705      +/-\n==========================================\n+ Coverage    80.4%   80.41%   +<.01%   \n==========================================\n  Files          38       38            \n  Lines        7431     7433       +2   \n==========================================\n+ Hits         5975     5977       +2   \n  Misses        984      984            \n  Partials      472      472\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/model.go | 84.29% <\u00f8> (-0.05%) | :arrow_down: |\n| generator/types.go | 90.79% <100%> (+0.11%) | :arrow_up: |\n| generator/support.go | 87.79% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aa6c447...9cccd19. Read the comment docs.\n. # Codecov Report\nMerging #1706 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1706   +/-\n======================================\n  Coverage    80.4%   80.4%         \n======================================\n  Files          38      38         \n  Lines        7431    7431         \n======================================\n  Hits         5975    5975         \n  Misses        984     984         \n  Partials      472     472\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/scanner.go | 72.44% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aa6c447...e8966c7. Read the comment docs.\n. # Codecov Report\nMerging #1709 into master will decrease coverage by 0.16%.\nThe diff coverage is 41.93%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1709      +/-\n==========================================\n- Coverage   80.21%   80.04%   -0.17%   \n==========================================\n  Files          38       38            \n  Lines        7449     7476      +27   \n==========================================\n+ Hits         5975     5984       +9   \n- Misses       1002     1014      +12   \n- Partials      472      478       +6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/generate/spec.go | 64.7% <100%> (+1.44%) | :arrow_up: |\n| scan/operations.go | 72.41% <20%> (-11.59%) | :arrow_down: |\n| scan/routes.go | 80.95% <28.57%> (-15.05%) | :arrow_down: |\n| scan/scanner.go | 72.05% <60%> (-0.4%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f95b8b6...e227341. Read the comment docs.\n. # Codecov Report\nMerging #1715 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1715   +/-\n=======================================\n  Coverage   80.41%   80.41%         \n=======================================\n  Files          38       38         \n  Lines        7433     7433         \n=======================================\n  Hits         5977     5977         \n  Misses        984      984         \n  Partials      472      472\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 70.92% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 32f94c7...753738d. Read the comment docs.\n. # Codecov Report\nMerging #1717 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1717      +/-\n=========================================\n- Coverage   80.41%   80.4%   -0.01%   \n=========================================\n  Files          38      38            \n  Lines        7433    7431       -2   \n=========================================\n- Hits         5977    5975       -2   \n  Misses        984     984            \n  Partials      472     472\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 74.76% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/types.go | 90.68% <\u00f8> (-0.12%) | :arrow_down: |\n| generator/support.go | 87.82% <100%> (+0.02%) | :arrow_up: |\n| generator/model.go | 84.32% <100%> (+0.02%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cdf28e1...84d37fb. Read the comment docs.\n. # Codecov Report\nMerging #1721 into master will decrease coverage by 0.19%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1721     +/-\n=========================================\n- Coverage    80.4%   80.21%   -0.2%   \n=========================================\n  Files          38       38           \n  Lines        7431     7449     +18   \n=========================================\n  Hits         5975     5975           \n- Misses        984     1002     +18   \n  Partials      472      472\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 68.34% <\u00f8> (-2.58%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e13f855...7f7f2c4. Read the comment docs.\n. # Codecov Report\nMerging #1723 into master will decrease coverage by 0.19%.\nThe diff coverage is 54.83%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1723     +/-\n=========================================\n- Coverage    80.4%   80.21%   -0.2%   \n=========================================\n  Files          38       38           \n  Lines        7431     7449     +18   \n=========================================\n  Hits         5975     5975           \n- Misses        984     1002     +18   \n  Partials      472      472\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 68.34% <54.83%> (-2.58%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e13f855...c6ce75e. Read the comment docs.\n. # Codecov Report\nMerging #1730 into master will increase coverage by 0.19%.\nThe diff coverage is 77.77%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1730      +/-\n=========================================\n+ Coverage   80.21%   80.4%   +0.19%   \n=========================================\n  Files          38      38            \n  Lines        7449    7431      -18   \n=========================================\n  Hits         5975    5975            \n+ Misses       1002     984      -18   \n  Partials      472     472\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 70.92% <77.77%> (+2.57%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f95b8b6...c41d9e8. Read the comment docs.\n. # Codecov Report\nMerging #1732 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1732   +/-\n=======================================\n  Coverage   80.23%   80.23%         \n=======================================\n  Files          38       38         \n  Lines        7458     7458         \n=======================================\n  Hits         5984     5984         \n  Misses        996      996         \n  Partials      478      478\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 70.92% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 438e664...9064532. Read the comment docs.\n. # Codecov Report\nMerging #1744 into master will decrease coverage by 0.01%.\nThe diff coverage is 37.5%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1744      +/-\n==========================================\n- Coverage   80.23%   80.22%   -0.02%   \n==========================================\n  Files          38       38            \n  Lines        7458     7459       +1   \n==========================================\n  Hits         5984     5984            \n- Misses        996      997       +1   \n  Partials      478      478\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/shared.go | 80.74% <37.5%> (-0.13%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a957ecf...fd5edab. Read the comment docs.\n. # Codecov Report\nMerging #1748 into master will increase coverage by 0.09%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1748      +/-\n==========================================\n+ Coverage   80.22%   80.32%   +0.09%   \n==========================================\n  Files          38       38            \n  Lines        7459     7460       +1   \n==========================================\n+ Hits         5984     5992       +8   \n+ Misses        997      990       -7   \n  Partials      478      478\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/support.go | 89.33% <100%> (+1.51%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 44342ae...6dbfc38. Read the comment docs.\n. # Codecov Report\nMerging #1749 into master will decrease coverage by 0.09%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1749     +/-\n=========================================\n- Coverage   80.32%   80.22%   -0.1%   \n=========================================\n  Files          38       38           \n  Lines        7460     7459      -1   \n=========================================\n- Hits         5992     5984      -8   \n- Misses        990      997      +7   \n  Partials      478      478\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/support.go | 87.82% <0%> (-1.52%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ddeedd1...3ed1302. Read the comment docs.\n. # Codecov Report\nMerging #1750 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1750   +/-\n=======================================\n  Coverage   80.32%   80.32%         \n=======================================\n  Files          38       38         \n  Lines        7460     7460         \n=======================================\n  Hits         5992     5992         \n  Misses        990      990         \n  Partials      478      478\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e06c79d...283a068. Read the comment docs.\n. # Codecov Report\nMerging #1751 into master will decrease coverage by 0.27%.\nThe diff coverage is 66.93%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1751      +/-\n==========================================\n- Coverage   80.32%   80.04%   -0.28%   \n==========================================\n  Files          38       38            \n  Lines        7460     7497      +37   \n==========================================\n+ Hits         5992     6001       +9   \n- Misses        990     1019      +29   \n+ Partials      478      477       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 66.73% <63.2%> (-4.19%) | :arrow_down: |\n| generator/types.go | 90.84% <88.88%> (+0.15%) | :arrow_up: |\n| generator/template_repo.go | 88.4% <0%> (+0.96%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e06c79d...e4daba9. Read the comment docs.\n. # Codecov Report\nMerging #1756 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1756   +/-\n=======================================\n  Coverage   80.04%   80.04%         \n=======================================\n  Files          38       38         \n  Lines        7497     7497         \n=======================================\n  Hits         6001     6001         \n  Misses       1019     1019         \n  Partials      477      477\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fe19c48...1c4c960. Read the comment docs.\n. # Codecov Report\nMerging #1776 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1776      +/-\n==========================================\n+ Coverage   80.04%   80.05%   +<.01%   \n==========================================\n  Files          38       38            \n  Lines        7497     7499       +2   \n==========================================\n+ Hits         6001     6003       +2   \n  Misses       1019     1019            \n  Partials      477      477\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/validate.go | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 800a305...fe85d7b. Read the comment docs.\n. # Codecov Report\nMerging #1780 into master will increase coverage by 0.19%.\nThe diff coverage is 77.77%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1780      +/-\n==========================================\n+ Coverage   80.07%   80.27%   +0.19%   \n==========================================\n  Files          38       38            \n  Lines        7494     7476      -18   \n==========================================\n  Hits         6001     6001            \n+ Misses       1014      996      -18   \n  Partials      479      479\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 70.92% <77.77%> (+2.57%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1200dd8...03a02f6. Read the comment docs.\n. # Codecov Report\nMerging #1783 into master will decrease coverage by 0.1%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1783      +/-\n==========================================\n- Coverage   80.14%   80.04%   -0.11%   \n==========================================\n  Files          38       38            \n  Lines        7485     7495      +10   \n==========================================\n  Hits         5999     5999            \n- Misses       1008     1019      +11   \n+ Partials      478      477       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/parameters.go | 78.23% <100%> (-0.15%) | :arrow_down: |\n| generator/bindata.go | 66.73% <0%> (-1.62%) | :arrow_down: |\n| generator/template_repo.go | 88.4% <0%> (+0.96%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cd1d9ec...f5e2b5c. Read the comment docs.\n. # Codecov Report\nMerging #1788 into master will increase coverage by 0.1%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1788     +/-\n=========================================\n+ Coverage   80.04%   80.14%   +0.1%   \n=========================================\n  Files          38       38           \n  Lines        7497     7485     -12   \n=========================================\n- Hits         6001     5999      -2   \n+ Misses       1019     1008     -11   \n- Partials      477      478      +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 68.34% <100%> (+1.61%) | :arrow_up: |\n| generator/template_repo.go | 87.43% <0%> (-0.97%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 800a305...18394a2. Read the comment docs.\n. # Codecov Report\nMerging #1790 into master will decrease coverage by 0.01%.\nThe diff coverage is 72.72%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1790      +/-\n==========================================\n- Coverage   80.04%   80.02%   -0.02%   \n==========================================\n  Files          38       38            \n  Lines        7497     7505       +8   \n==========================================\n+ Hits         6001     6006       +5   \n- Misses       1019     1020       +1   \n- Partials      477      479       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/client.go | 68.46% <100%> (+0.28%) | :arrow_up: |\n| generator/support.go | 88.86% <70%> (-0.48%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 800a305...9cd608c. Read the comment docs.\n. # Codecov Report\nMerging #1791 into master will decrease coverage by 0.02%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1791      +/-\n==========================================\n- Coverage   80.04%   80.02%   -0.03%   \n==========================================\n  Files          38       38            \n  Lines        7497     7499       +2   \n==========================================\n  Hits         6001     6001            \n- Misses       1019     1020       +1   \n- Partials      477      478       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/route_params.go | 95.08% <0%> (-1.59%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 800a305...5e5e181. Read the comment docs.\n. # Codecov Report\nMerging #1792 into master will decrease coverage by 0.44%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1792      +/-\n==========================================\n- Coverage   80.48%   80.04%   -0.45%   \n==========================================\n  Files          38       38            \n  Lines        7544     7497      -47   \n==========================================\n- Hits         6072     6001      -71   \n- Misses        996     1019      +23   \n- Partials      476      477       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/scanner.go | 72.05% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/client.go | 68.18% <0%> (-11.45%) | :arrow_down: |\n| generator/shared.go | 80.74% <0%> (-2.91%) | :arrow_down: |\n| generator/bindata.go | 66.73% <0%> (-1.62%) | :arrow_down: |\n| generator/types.go | 90.84% <0%> (\u00f8) | :arrow_up: |\n| generator/debug.go | 100% <0%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/client.go | 100% <0%> (\u00f8) | :arrow_up: |\n| generator/model.go | 84.32% <0%> (+0.12%) | :arrow_up: |\n| scan/parameters.go | 78.37% <0%> (+0.14%) | :arrow_up: |\n| generator/operation.go | 89.33% <0%> (+0.2%) | :arrow_up: |\n| ... and 4 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 953c904...61d94ee. Read the comment docs.\n. # Codecov Report\nMerging #1799 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1799   +/-\n=======================================\n  Coverage   80.48%   80.48%         \n=======================================\n  Files          38       38         \n  Lines        7543     7543         \n=======================================\n  Hits         6071     6071         \n  Misses        996      996         \n  Partials      476      476\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3a51a98...1866c7f. Read the comment docs.\n. # Codecov Report\nMerging #1800 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1800      +/-\n==========================================\n+ Coverage   80.12%   80.13%   +0.01%   \n==========================================\n  Files          38       38            \n  Lines        7485     7489       +4   \n==========================================\n+ Hits         5997     6001       +4   \n  Misses       1009     1009            \n  Partials      479      479\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/debug.go | 100% <100%> (\u00f8) | :arrow_up: |\n| generator/model.go | 84.32% <100%> (\u00f8) | :arrow_up: |\n| generator/types.go | 90.84% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5ef69e2...837c26c. Read the comment docs.\n. # Codecov Report\nMerging #1801 into master will decrease coverage by 0.05%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1801      +/-\n==========================================\n- Coverage   80.13%   80.07%   -0.06%   \n==========================================\n  Files          38       38            \n  Lines        7489     7494       +5   \n==========================================\n  Hits         6001     6001            \n- Misses       1009     1014       +5   \n  Partials      479      479\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/validators.go | 76.67% <0%> (-0.97%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2b7d9e3...6fb3fbc. Read the comment docs.\n. # Codecov Report\nMerging #1802 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1802   +/-\n=======================================\n  Coverage   80.07%   80.07%         \n=======================================\n  Files          38       38         \n  Lines        7494     7494         \n=======================================\n  Hits         6001     6001         \n  Misses       1014     1014         \n  Partials      479      479\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update be966a2...99c3510. Read the comment docs.\n. # Codecov Report\nMerging #1803 into master will decrease coverage by 0.19%.\nThe diff coverage is 55.55%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1803     +/-\n=========================================\n- Coverage   80.27%   80.07%   -0.2%   \n=========================================\n  Files          38       38           \n  Lines        7476     7494     +18   \n=========================================\n  Hits         6001     6001           \n- Misses        996     1014     +18   \n  Partials      479      479\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 68.34% <55.55%> (-2.58%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0e85bf1...1826052. Read the comment docs.\n. # Codecov Report\nMerging #1804 into master will increase coverage by 0.33%.\nThe diff coverage is 96.42%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1804      +/-\n==========================================\n+ Coverage   80.07%   80.41%   +0.33%   \n==========================================\n  Files          38       38            \n  Lines        7494     7521      +27   \n==========================================\n+ Hits         6001     6048      +47   \n+ Misses       1014     1000      -14   \n+ Partials      479      473       -6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/operation.go | 89.36% <100%> (+0.03%) | :arrow_up: |\n| generator/bindata.go | 68.34% <100%> (\u00f8) | :arrow_up: |\n| generator/template_repo.go | 87.79% <100%> (+0.35%) | :arrow_up: |\n| generator/model.go | 84.32% <100%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/client.go | 100% <100%> (\u00f8) | :arrow_up: |\n| generator/client.go | 80.19% <91.66%> (+12.01%) | :arrow_up: |\n| generator/support.go | 89.05% <93.54%> (-0.29%) | :arrow_down: |\n| generator/shared.go | 82.29% <97.05%> (+1.54%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1f7a333...2b5c275. Read the comment docs.\n. # Codecov Report\nMerging #1805 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1805   +/-\n=======================================\n  Coverage   80.47%   80.47%         \n=======================================\n  Files          38       38         \n  Lines        7539     7539         \n=======================================\n  Hits         6067     6067         \n  Misses        996      996         \n  Partials      476      476\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 68.34% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ce26df6...60ab854. Read the comment docs.\n. # Codecov Report\nMerging #1806 into master will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1806      +/-\n==========================================\n- Coverage   80.48%   80.47%   -0.02%   \n==========================================\n  Files          38       38            \n  Lines        7543     7539       -4   \n==========================================\n- Hits         6071     6067       -4   \n  Misses        996      996            \n  Partials      476      476\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/operation.go | 89.09% <\u00f8> (-0.04%) | :arrow_down: |\n| generator/shared.go | 83.64% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/structs.go | 74.76% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/support.go | 88.65% <\u00f8> (-0.08%) | :arrow_down: |\n| generator/bindata.go | 68.34% <100%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/server.go | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e8db9d9...3562576. Read the comment docs.\n. # Codecov Report\nMerging #1809 into master will increase coverage by 0.03%.\nThe diff coverage is 95.55%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1809      +/-\n==========================================\n+ Coverage   80.41%   80.44%   +0.03%   \n==========================================\n  Files          38       38            \n  Lines        7521     7534      +13   \n==========================================\n+ Hits         6048     6061      +13   \n  Misses       1000     1000            \n  Partials      473      473\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/types.go | 90.84% <0%> (\u00f8) | :arrow_up: |\n| generator/operation.go | 89.38% <100%> (+0.01%) | :arrow_up: |\n| generator/client.go | 81.13% <100%> (+0.93%) | :arrow_up: |\n| generator/template_repo.go | 87.96% <100%> (+0.16%) | :arrow_up: |\n| generator/support.go | 89.09% <100%> (+0.04%) | :arrow_up: |\n| generator/model.go | 84.35% <100%> (+0.02%) | :arrow_up: |\n| generator/shared.go | 82.29% <92.85%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update df5b513...42df2aa. Read the comment docs.\n. # Codecov Report\nMerging #1810 into master will increase coverage by 0.03%.\nThe diff coverage is 60%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1810      +/-\n==========================================\n+ Coverage   80.44%   80.48%   +0.03%   \n==========================================\n  Files          38       38            \n  Lines        7534     7544      +10   \n==========================================\n+ Hits         6061     6072      +11   \n+ Misses       1000      996       -4   \n- Partials      473      476       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/operation.go | 89.12% <0%> (-0.26%) | :arrow_down: |\n| generator/support.go | 88.72% <0%> (-0.38%) | :arrow_down: |\n| generator/model.go | 84.19% <0%> (-0.16%) | :arrow_down: |\n| generator/client.go | 79.62% <0%> (-1.51%) | :arrow_down: |\n| generator/shared.go | 83.64% <75%> (+1.35%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b614019...41361ec. Read the comment docs.\n. # Codecov Report\nMerging #1817 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1817   +/-\n=======================================\n  Coverage   80.47%   80.47%         \n=======================================\n  Files          38       38         \n  Lines        7539     7539         \n=======================================\n  Hits         6067     6067         \n  Misses        996      996         \n  Partials      476      476\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 33c899c...f9c3640. Read the comment docs.\n. # Codecov Report\nMerging #1818 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1818   +/-\n=======================================\n  Coverage   80.47%   80.47%         \n=======================================\n  Files          38       38         \n  Lines        7539     7539         \n=======================================\n  Hits         6067     6067         \n  Misses        996      996         \n  Partials      476      476\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9acfd4b...556e634. Read the comment docs.\n. # Codecov Report\nMerging #1821 into master will increase coverage by 0.19%.\nThe diff coverage is 77.77%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1821      +/-\n==========================================\n+ Coverage   80.47%   80.66%   +0.19%   \n==========================================\n  Files          38       38            \n  Lines        7544     7521      -23   \n==========================================\n- Hits         6071     6067       -4   \n+ Misses        997      978      -19   \n  Partials      476      476\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 70.92% <77.77%> (+2.57%) | :arrow_up: |\n| scan/validators.go | 76.67% <0%> (-0.05%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8b824dd...9a6fa6f. Read the comment docs.\n. # Codecov Report\nMerging #1822 into master will decrease coverage by 0.01%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1822      +/-\n==========================================\n- Coverage   80.47%   80.46%   -0.02%   \n==========================================\n  Files          38       38            \n  Lines        7539     7539            \n==========================================\n- Hits         6067     6066       -1   \n- Misses        996      997       +1   \n  Partials      476      476\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/schema.go | 73.65% <0%> (\u00f8) | :arrow_up: |\n| generator/structs.go | 73.83% <0%> (-0.94%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 33c899c...b301b33. Read the comment docs.\n. # Codecov Report\nMerging #1827 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1827   +/-\n=======================================\n  Coverage   80.66%   80.66%         \n=======================================\n  Files          38       38         \n  Lines        7526     7526         \n=======================================\n  Hits         6071     6071         \n  Misses        979      979         \n  Partials      476      476\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d0f5bbf...52cee59. Read the comment docs.\n. # Codecov Report\nMerging #1829 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1829   +/-\n=======================================\n  Coverage   80.66%   80.66%         \n=======================================\n  Files          38       38         \n  Lines        7526     7526         \n=======================================\n  Hits         6071     6071         \n  Misses        979      979         \n  Partials      476      476\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/validators.go | 76.71% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c30a20b...15b652a. Read the comment docs.\n. # Codecov Report\nMerging #1836 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1836   +/-\n=======================================\n  Coverage   80.66%   80.66%         \n=======================================\n  Files          38       38         \n  Lines        7526     7526         \n=======================================\n  Hits         6071     6071         \n  Misses        979      979         \n  Partials      476      476\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3099f61...c9c845a. Read the comment docs.\n. # Codecov Report\nMerging #1836 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1836   +/-\n=======================================\n  Coverage   80.66%   80.66%         \n=======================================\n  Files          38       38         \n  Lines        7526     7526         \n=======================================\n  Hits         6071     6071         \n  Misses        979      979         \n  Partials      476      476\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3099f61...c9c845a. Read the comment docs.\n. # Codecov Report\nMerging #1837 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1837   +/-\n=======================================\n  Coverage   80.66%   80.66%         \n=======================================\n  Files          38       38         \n  Lines        7526     7526         \n=======================================\n  Hits         6071     6071         \n  Misses        979      979         \n  Partials      476      476\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3099f61...01eeaa4. Read the comment docs.\n. # Codecov Report\nMerging #1840 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1840      +/-\n==========================================\n+ Coverage   80.66%   80.66%   +<.01%   \n==========================================\n  Files          38       38            \n  Lines        7526     7527       +1   \n==========================================\n+ Hits         6071     6072       +1   \n  Misses        979      979            \n  Partials      476      476\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/model.go | 84.21% <100%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3099f61...6b00b5f. Read the comment docs.\n. # Codecov Report\nMerging #1840 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1840      +/-\n==========================================\n+ Coverage   80.66%   80.66%   +<.01%   \n==========================================\n  Files          38       38            \n  Lines        7526     7527       +1   \n==========================================\n+ Hits         6071     6072       +1   \n  Misses        979      979            \n  Partials      476      476\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/model.go | 84.21% <100%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3099f61...010ccdd. Read the comment docs.\n. # Codecov Report\nMerging #1841 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1841   +/-\n=======================================\n  Coverage   80.66%   80.66%         \n=======================================\n  Files          38       38         \n  Lines        7526     7526         \n=======================================\n  Hits         6071     6071         \n  Misses        979      979         \n  Partials      476      476\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3099f61...f077816. Read the comment docs.\n. # Codecov Report\nMerging #1841 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1841   +/-\n=======================================\n  Coverage   80.66%   80.66%         \n=======================================\n  Files          38       38         \n  Lines        7527     7527         \n=======================================\n  Hits         6072     6072         \n  Misses        979      979         \n  Partials      476      476\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8d52520...3fbfe38. Read the comment docs.\n. # Codecov Report\nMerging #1842 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1842   +/-\n=======================================\n  Coverage   80.66%   80.66%         \n=======================================\n  Files          38       38         \n  Lines        7526     7526         \n=======================================\n  Hits         6071     6071         \n  Misses        979      979         \n  Partials      476      476\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3099f61...01cc2f4. Read the comment docs.\n. # Codecov Report\nMerging #1842 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1842   +/-\n=======================================\n  Coverage   80.66%   80.66%         \n=======================================\n  Files          38       38         \n  Lines        7526     7526         \n=======================================\n  Hits         6071     6071         \n  Misses        979      979         \n  Partials      476      476\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3099f61...01cc2f4. Read the comment docs.\n. # Codecov Report\nMerging #1843 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1843   +/-\n=======================================\n  Coverage   80.66%   80.66%         \n=======================================\n  Files          38       38         \n  Lines        7527     7527         \n=======================================\n  Hits         6072     6072         \n  Misses        979      979         \n  Partials      476      476\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fea592c...a0bad34. Read the comment docs.\n. # Codecov Report\nMerging #1844 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1844   +/-\n=======================================\n  Coverage   80.66%   80.66%         \n=======================================\n  Files          38       38         \n  Lines        7527     7527         \n=======================================\n  Hits         6072     6072         \n  Misses        979      979         \n  Partials      476      476\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6b23bb6...e7f52f6. Read the comment docs.\n. # Codecov Report\nMerging #1844 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1844   +/-\n=======================================\n  Coverage   80.66%   80.66%         \n=======================================\n  Files          38       38         \n  Lines        7527     7527         \n=======================================\n  Hits         6072     6072         \n  Misses        979      979         \n  Partials      476      476\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6b23bb6...e7f52f6. Read the comment docs.\n. # Codecov Report\nMerging #1846 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1846   +/-\n=======================================\n  Coverage   80.66%   80.66%         \n=======================================\n  Files          38       38         \n  Lines        7527     7527         \n=======================================\n  Hits         6072     6072         \n  Misses        979      979         \n  Partials      476      476\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/flatten.go | 100% <100%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/expand.go | 78.12% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8d52520...562a586. Read the comment docs.\n. # Codecov Report\nMerging #1846 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1846   +/-\n=======================================\n  Coverage   80.66%   80.66%         \n=======================================\n  Files          38       38         \n  Lines        7527     7527         \n=======================================\n  Hits         6072     6072         \n  Misses        979      979         \n  Partials      476      476\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/flatten.go | 100% <100%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/expand.go | 78.12% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8d52520...562a586. Read the comment docs.\n. # Codecov Report\nMerging #1848 into master will decrease coverage by 0.18%.\nThe diff coverage is 69.38%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1848      +/-\n==========================================\n- Coverage   80.66%   80.48%   -0.19%   \n==========================================\n  Files          38       38            \n  Lines        7527     7547      +20   \n==========================================\n+ Hits         6072     6074       +2   \n- Misses        979      997      +18   \n  Partials      476      476\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/operation.go | 89.12% <100%> (+0.03%) | :arrow_up: |\n| generator/bindata.go | 68.34% <68.75%> (-2.58%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 486d438...c09165a. Read the comment docs.\n. # Codecov Report\nMerging #1848 into master will decrease coverage by 0.18%.\nThe diff coverage is 69.38%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1848      +/-\n==========================================\n- Coverage   80.66%   80.48%   -0.19%   \n==========================================\n  Files          38       38            \n  Lines        7527     7547      +20   \n==========================================\n+ Hits         6072     6074       +2   \n- Misses        979      997      +18   \n  Partials      476      476\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/operation.go | 89.12% <100%> (+0.03%) | :arrow_up: |\n| generator/bindata.go | 68.34% <68.75%> (-2.58%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 486d438...c09165a. Read the comment docs.\n. # Codecov Report\nMerging #1849 into master will increase coverage by 0.02%.\nThe diff coverage is 86.95%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1849      +/-\n=========================================\n+ Coverage   80.48%   80.5%   +0.02%   \n=========================================\n  Files          38      38            \n  Lines        7547    7586      +39   \n=========================================\n+ Hits         6074    6107      +33   \n- Misses        997    1000       +3   \n- Partials      476     479       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/types.go | 90.88% <100%> (+0.04%) | :arrow_up: |\n| generator/bindata.go | 68.34% <100%> (\u00f8) | :arrow_up: |\n| generator/model.go | 84.19% <83.78%> (-0.02%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a53a6f0...78c12da. Read the comment docs.\n. # Codecov Report\nMerging #1849 into master will increase coverage by 0.02%.\nThe diff coverage is 86.95%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1849      +/-\n=========================================\n+ Coverage   80.48%   80.5%   +0.02%   \n=========================================\n  Files          38      38            \n  Lines        7547    7586      +39   \n=========================================\n+ Hits         6074    6107      +33   \n- Misses        997    1000       +3   \n- Partials      476     479       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/types.go | 90.88% <100%> (+0.04%) | :arrow_up: |\n| generator/bindata.go | 68.34% <100%> (\u00f8) | :arrow_up: |\n| generator/model.go | 84.19% <83.78%> (-0.02%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a53a6f0...bc9d20d. Read the comment docs.\n. # Codecov Report\nMerging #1855 into master will increase coverage by 0.03%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1855      +/-\n==========================================\n+ Coverage    80.5%   80.54%   +0.03%   \n==========================================\n  Files          38       38            \n  Lines        7586     7586            \n==========================================\n+ Hits         6107     6110       +3   \n+ Misses       1000      998       -2   \n+ Partials      479      478       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/expand.go | 87.5% <0%> (+9.37%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3854bbb...ea88293. Read the comment docs.\n. # Codecov Report\nMerging #1855 into master will increase coverage by 0.03%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1855      +/-\n==========================================\n+ Coverage    80.5%   80.54%   +0.03%   \n==========================================\n  Files          38       38            \n  Lines        7586     7586            \n==========================================\n+ Hits         6107     6110       +3   \n+ Misses       1000      998       -2   \n+ Partials      479      478       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/expand.go | 87.5% <0%> (+9.37%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3854bbb...564499a. Read the comment docs.\n. # Codecov Report\nMerging #1869 into master will increase coverage by 0.19%.\nThe diff coverage is 84.61%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1869      +/-\n==========================================\n+ Coverage   80.54%   80.73%   +0.19%   \n==========================================\n  Files          38       38            \n  Lines        7586     7568      -18   \n==========================================\n  Hits         6110     6110            \n+ Misses        998      980      -18   \n  Partials      478      478\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 70.92% <84.61%> (+2.57%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 23af561...bf4f4c4. Read the comment docs.\n. # Codecov Report\nMerging #1870 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1870   +/-\n=======================================\n  Coverage   80.73%   80.73%         \n=======================================\n  Files          38       38         \n  Lines        7568     7568         \n=======================================\n  Hits         6110     6110         \n  Misses        980      980         \n  Partials      478      478\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 84485ed...67ab264. Read the comment docs.\n. # Codecov Report\nMerging #1870 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1870   +/-\n=======================================\n  Coverage   80.73%   80.73%         \n=======================================\n  Files          38       38         \n  Lines        7568     7568         \n=======================================\n  Hits         6110     6110         \n  Misses        980      980         \n  Partials      478      478\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 84485ed...67ab264. Read the comment docs.\n. # Codecov Report\nMerging #1872 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1872   +/-\n=======================================\n  Coverage   80.73%   80.73%         \n=======================================\n  Files          38       38         \n  Lines        7568     7568         \n=======================================\n  Hits         6110     6110         \n  Misses        980      980         \n  Partials      478      478\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/support.go | 88.63% <\u00f8> (-0.03%) | :arrow_down: |\n| generator/client.go | 79.43% <\u00f8> (-0.2%) | :arrow_down: |\n| cmd/swagger/commands/generate/model.go | 100% <100%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/server.go | 100% <100%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/client.go | 100% <100%> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/operation.go | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 81789e7...8f36a18. Read the comment docs.\n. # Codecov Report\nMerging #1876 into master will decrease coverage by 0.02%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1876      +/-\n==========================================\n- Coverage   80.73%   80.71%   -0.03%   \n==========================================\n  Files          38       38            \n  Lines        7568     7580      +12   \n==========================================\n+ Hits         6110     6118       +8   \n- Misses        980      982       +2   \n- Partials      478      480       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/schema.go | 73.54% <66.66%> (-0.11%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 81789e7...0599b2b. Read the comment docs.\n. # Codecov Report\nMerging #1888 into master will decrease coverage by 0.03%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1888      +/-\n==========================================\n- Coverage   80.71%   80.68%   -0.04%   \n==========================================\n  Files          38       38            \n  Lines        7580     7583       +3   \n==========================================\n  Hits         6118     6118            \n- Misses        982      984       +2   \n- Partials      480      481       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/responses.go | 79.76% <0%> (-0.97%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f68196c...29343a9. Read the comment docs.\n. # Codecov Report\nMerging #1888 into master will decrease coverage by 0.03%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1888      +/-\n==========================================\n- Coverage   80.71%   80.68%   -0.04%   \n==========================================\n  Files          38       38            \n  Lines        7580     7583       +3   \n==========================================\n  Hits         6118     6118            \n- Misses        982      984       +2   \n- Partials      480      481       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/responses.go | 79.76% <0%> (-0.97%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f68196c...29343a9. Read the comment docs.\n. # Codecov Report\nMerging #1889 into master will increase coverage by 0.06%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1889      +/-\n==========================================\n+ Coverage   80.68%   80.74%   +0.06%   \n==========================================\n  Files          38       38            \n  Lines        7583     7583            \n==========================================\n+ Hits         6118     6123       +5   \n+ Misses        984      981       -3   \n+ Partials      481      479       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| scan/responses.go | 81.74% <0%> (+1.98%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b6a5dd9...422e170. Read the comment docs.\n. # Codecov Report\nMerging #1895 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1895   +/-\n=======================================\n  Coverage   80.74%   80.74%         \n=======================================\n  Files          38       38         \n  Lines        7583     7583         \n=======================================\n  Hits         6123     6123         \n  Misses        981      981         \n  Partials      479      479\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 083ebeb...5820f65. Read the comment docs.\n. # Codecov Report\nMerging #1895 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1895   +/-\n=======================================\n  Coverage   80.74%   80.74%         \n=======================================\n  Files          38       38         \n  Lines        7583     7583         \n=======================================\n  Hits         6123     6123         \n  Misses        981      981         \n  Partials      479      479\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 083ebeb...5820f65. Read the comment docs.\n. # Codecov Report\nMerging #1900 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1900   +/-\n=======================================\n  Coverage   80.74%   80.74%         \n=======================================\n  Files          38       38         \n  Lines        7583     7583         \n=======================================\n  Hits         6123     6123         \n  Misses        981      981         \n  Partials      479      479\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| cmd/swagger/commands/flatten.go | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/expand.go | 87.5% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/operation.go | 89.12% <\u00f8> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/mixin.go | 86.2% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/template_repo.go | 87.96% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/model.go | 84.19% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/shared.go | 83.64% <\u00f8> (\u00f8) | :arrow_up: |\n| scan/scanner.go | 72.05% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/bindata.go | 70.92% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 083ebeb...fc6dbdd. Read the comment docs.\n. # Codecov Report\nMerging #1902 into master will increase coverage by 0.15%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1902      +/-\n=========================================\n+ Coverage   80.74%   80.9%   +0.15%   \n=========================================\n  Files          38      38            \n  Lines        7583    7583            \n=========================================\n+ Hits         6123    6135      +12   \n+ Misses        981     966      -15   \n- Partials      479     482       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/shared.go | 85.38% <0%> (+1.73%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 873540c...082d200. Read the comment docs.\n. # Codecov Report\nMerging #1903 into master will decrease coverage by 0.05%.\nThe diff coverage is 76.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1903      +/-\n==========================================\n- Coverage   80.74%   80.68%   -0.06%   \n==========================================\n  Files          38       38            \n  Lines        7583     7669      +86   \n==========================================\n+ Hits         6123     6188      +65   \n- Misses        981      994      +13   \n- Partials      479      487       +8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 74.76% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/template_repo.go | 87.96% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/operation.go | 89.14% <100%> (+0.01%) | :arrow_up: |\n| cmd/swagger/commands/generate/server.go | 100% <100%> (\u00f8) | :arrow_up: |\n| generator/shared.go | 82.62% <40%> (-1.03%) | :arrow_down: |\n| generator/bindata.go | 72.54% <83.33%> (+1.62%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 873540c...b50d2a2. Read the comment docs.\n. # Codecov Report\nMerging #1903 into master will decrease coverage by 0.05%.\nThe diff coverage is 76.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1903      +/-\n==========================================\n- Coverage   80.74%   80.68%   -0.06%   \n==========================================\n  Files          38       38            \n  Lines        7583     7669      +86   \n==========================================\n+ Hits         6123     6188      +65   \n- Misses        981      994      +13   \n- Partials      479      487       +8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/template_repo.go | 87.96% <\u00f8> (\u00f8) | :arrow_up: |\n| generator/structs.go | 74.76% <\u00f8> (\u00f8) | :arrow_up: |\n| cmd/swagger/commands/generate/server.go | 100% <100%> (\u00f8) | :arrow_up: |\n| generator/operation.go | 89.14% <100%> (+0.01%) | :arrow_up: |\n| generator/shared.go | 82.62% <40%> (-1.03%) | :arrow_down: |\n| generator/bindata.go | 72.54% <83.33%> (+1.62%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3aa2612...bc07263. Read the comment docs.\n. # Codecov Report\nMerging #1905 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1905   +/-\n=======================================\n  Coverage   80.74%   80.74%         \n=======================================\n  Files          38       38         \n  Lines        7583     7583         \n=======================================\n  Hits         6123     6123         \n  Misses        981      981         \n  Partials      479      479\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 70.92% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 873540c...652f232. Read the comment docs.\n. # Codecov Report\nMerging #1905 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1905   +/-\n=======================================\n  Coverage   80.74%   80.74%         \n=======================================\n  Files          38       38         \n  Lines        7583     7583         \n=======================================\n  Hits         6123     6123         \n  Misses        981      981         \n  Partials      479      479\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/bindata.go | 70.92% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 873540c...652f232. Read the comment docs.\n. # Codecov Report\nMerging #1907 into master will increase coverage by 0.03%.\nThe diff coverage is 75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1907      +/-\n==========================================\n+ Coverage   80.74%   80.78%   +0.03%   \n==========================================\n  Files          38       38            \n  Lines        7583     7586       +3   \n==========================================\n+ Hits         6123     6128       +5   \n+ Misses        981      979       -2   \n  Partials      479      479\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| generator/structs.go | 73.63% <75%> (-1.14%) | :arrow_down: |\n| generator/types.go | 91.84% <0%> (+0.95%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3aa2612...9be7446. Read the comment docs.\n. \n",
    "johnnadratowski": "\ud83d\udc4d NICE!!! I was not expecting this to be merged so quickly. Wonderful, I can continue with my project!. ",
    "RobertPepkaSEL": "Great to hear! Hopefully this issue can be a target for folks searching for the problem.\nedit: checking now.\nEdit2: Can confirm, fix on master seems to work. Thanks! :). ",
    "ntoljic": "Ok, I might raise it with them if I get around to it. In the meantime I simply renamed our organization name (well, the URL) and the directory in the $GOPATH.. DEBUG=true, but yes. Thanks for pointing out the obvious. Wish this would be documented somewhere.. Just upgraded to 0.15.0.\nSame result :/. Sure thing. Here you go:\n``` go\n// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface\n// for simple values it will use straight method calls.\n//\n// To ensure default values, the struct must have been initialized with NewTestParams() beforehand.\nfunc (o TestParams) BindRequest(r http.Request, route *middleware.MatchedRoute) error {\n    var res []error\no.HTTPRequest = r\n\nif runtime.HasBody(r) {\n    defer r.Body.Close()\n    var body []models.Value\n    if err := route.Consumer.Consume(r.Body, &body); err != nil {\n        if err == io.EOF {\n            res = append(res, errors.Required(\"payload\", \"body\"))\n        } else {\n            res = append(res, errors.NewParseError(\"payload\", \"body\", \"\", err))\n        }\n    } else {\n        // validate array of body objects\n        for i := range body {\n            if err := body[i].Validate(route.Formats); err != nil {\n                res = append(res, err)\n                break\n            }\n        }\n\n        if len(res) == 0 {\n            o.Payload = body\n        }\n    }\n} else {\n    res = append(res, errors.Required(\"payload\", \"body\"))\n}\nif len(res) > 0 {\n    return errors.CompositeValidationError(res...)\n}\nreturn nil\n\n}\n```. Well, if this cannot be fixed for all possible cases it should at least be documented as a limitation of go-swagger, don't you think? Not sure, how heavily used this feature is anyway.\nWould be nice to have it working for the 'simple' case though ;). You got me there. I definitely have to catch up on the docs.\nIn the meantime, I can work around this issue by wrapping the array in an object.\nHappy to test any fixes, although you seem to have a much better understanding of the wider implications and possible edge cases.. ",
    "robertacosta": "Thank you for reviewing this so promptly.  I would love to improve the code coverage and was trying to add a test but was running into unsupported type.  Let me know if you are concerned.. ",
    "robbert229": "Making runtime.File implement io.Reader with the following implementation solves my issue.\n```\n// in github.com/go-openapi/runtime/interfaces.go\n// File represents an uploaded file.\ntype File struct {\n    Data   multipart.File\n    Header *multipart.FileHeader\n}\n// my addition\nfunc (f File) Read(p []byte) (n int, err error) {\n    return f.Data.Read(p)\n}\n```\nI think this issue might be outside the scope of go-swagger and in the scope of go-openapi/runtime. Planning on it!. This is go-swagger, I think you are looking for -> https://github.com/domaindrivendev/Swashbuckle\ngo-swagger is tooling for using swagger with golang.. ",
    "DirkTheDaring": "Please close this one. I opened a new one, because actually this was one mistake + one issue. ",
    "JohnRowleySEL": "That is what I am currently doing, but for those new to go-swagger it is not apparant that there are edge cases where your model won't properly serialize if you don't use x-nullable to annotate parameters.\n( this issue is partially filed so that people running into the issue where your model isn't showing up correctly on the client can find somthing useful ). ",
    "benpye": "Did you ever work out what was going wrong here?. This seems to occur when your target isn't within the first in your GOPATH. Apologies, should be fixed now.. Rebased on master and fixed a typo in the commit message.. Should be resolved now.. ",
    "theherk": "This is probably not such a heavy lift now. AWS does support Go in Lambda. And using proxy integration, you basically get the full request to your Lambda.\nThe event is inbound as events.APIGatewayProxyRequest and simply requires that events.APIGatewayProxyResponse is returned.\nI just need to figure out how to call the generated API's programatically. From there all that has to happen in munging the request above into a normal request, calling the handler, then converting the output of the response above.. Holy cow! Good find @nelz9999. I think a plan is coming together.. I'm curious the status of this. validate still fails, but serve seems to work just fine.\nFor anybody else curious, I still maintain the v3 definition, I just use api-spec-converter to autogen the swagger v2 definition.. ",
    "Ragnar-BY": "I have same problem. I tried to write client to todo-list from example, but I get same error. \n```package main\nimport (\n    \"log\"\n    \"os\"\n\"github.com/go-openapi/strfmt\"\n\nhttptransport \"github.com/go-openapi/runtime/client\"\napiclient \"github.com/go-swagger/go-swagger/examples/todo-list/client\"\n\"github.com/go-swagger/go-swagger/examples/todo-list/client/todos\"\n\n)\nfunc main() {\n// create the API client\nclient := apiclient.New(httptransport.New(\"\", \"\", nil), strfmt.Default)\n\n// make the authenticated request to get all items\napiKeyHeaderAuth := httptransport.APIKeyAuth(\"X-API-TOKEN\", \"header\", os.Getenv(\"API_KEY\"))\n_, err := client.Todos.AddOne(&todos.AddOneParams{}, apiKeyHeaderAuth)\nlog.Fatal(err)\n\n}\n```\nCan someone explain, how to fix this problem?. Thanks, I fixed problem with schema\npost:\n      description: post func\n      operationId: postfunc\n      parameters:\n      - name: myparam\n        in: body\n        required: true\n        schema:\n          type: string\nBut, I think Goswagger should not fail with panic, while generating. It must be some error message about wrong parameters, not runtime error.. For example. \nThere is bookstore, with info about books: author, title, price. And we want, that books from some author will not cost more the some price. So I want write function ValidateBookCustom() like\nif book.author == \"Some author\" {\n    if book.price > 1000 {\n       return false\n   }\n    else return true\n}\nAnd I want to use this function.. But would not be main.go rewritten if I generate server again?. It seems like that client and server never use functions MarshalJSON and UnmarshalJSON from go-openapi/strfmt/time.go.. I think, I found the reason of bug.\nWhen we call ProducerFunc from /go-openapi/runtime/json.go ,then  data interface{} has type Model.Datetime ( type, that is generated by goswagger). But this type has not methods like MarshalJSON. So it can not make right JSON.\nBut Model.Datetime is just redefinition of type strfmt.DateTime, that has such methods. \nSo we have two possible ways of solution of problem:\n1)Add automatic generation of methods like MarshalJSON for generated types \nfunc (t Datetime) MarshalJSON() ([]byte, error) {\n    return strfmt.DateTime(t).MarshalJSON()\n}\n2) Convert type Model.Datetime to strfmt.DateTime before it falls into ProducerFunc. ",
    "kenjones-cisco": "Looks like the tag 1.7.3 is no longer available at DockerHub, should I change it to 1.7.5 so that the circleci test will pass?. Is there any way from a go-swagger perspective to be able to override, influence, or customize it?\nif the value was all lower case then it would just stay slb and not be separated by _ correct?. Thanks! I will tweak the tag to force the desired name in the near term.. I actually had the same thoughts regarding a Makefile. I had started on one based on one I use across projects that supports running locally as well as performing all the tasks within a Docker container. \n@casualjim Would you be interested in having such a Makefile?\n. I'm not 100% happy with the Makefile and scripts as some parts do not work as I would have expected.\nBut with the number of linting items that I noticed and resolved after trying to determine how gotmetalinter was being used on the project, I figured it was best to submit the PR for feedback.\nWorst case, I can revert any items.\n. I intentionally made the commenting of unused elements a separate commit, such that reverting that part only would be easy enough, especially if removing the elements was preferred.\n. Rebased branch with master. I just tried again and it is now working just like before. Not sure why. Thanks for the verification!\n. @fredbi Thanks for the update!!!\n. I will happily regenerate again once the bug has been fixed. This seemed like the best approach to clearly demonstrate the issue being seen.\n. Regenerated and the the issue has been corrected.\n . Agreed, I'm good with waiting until after the new update.\nthanks @fredbi !\n. @fredbi @casualjim Anything else required for this to be merged?\n. Example of issue reported in #1816 \nJust by regenerating the examples from master\n. ",
    "susyo": "workaround: @kenjones-cisco required: true in swagger seems to workaround that issue. ",
    "captjt": "@casualjim that's exactly how we are going to have to do it. Thank you for your help.. @casualjim so if I have a blank main.go file that imports those internal packages it will generate that spec file?. Cheers! @casualjim thank you so much . ",
    "MaxNosov": "And also I found that some structures such as\n```\n/DataItems0 data items0\nswagger:model DataItems0\n/\ntype DataItems0 struct {\n    models.Media\n// distance\nDistance float64 `json:\"distance,omitempty\"`\n\n}\n```\nin code generated with wrong call\n```\n// UnmarshalJSON unmarshals this object from a JSON structure\nfunc (o *DataItems0) UnmarshalJSON(raw []byte) error {\nvar aO0 models.Media\nif err := swag.ReadJSON(raw, &aO0); err != nil {\n    return err\n}\no.models.Media = aO0 // <- must be  o.Media = aO0, not o.models.Media = aO0\n\nreturn nil\n\n}\n```\nMust be o.Media = aO0, not o.models.Media = aO0. Described in new issue https://github.com/go-swagger/go-swagger/issues/982. I've tried version from master.\nTags were generated correctly.\nBut now field names of model generated ignoring x-go-name.\ne.g. For \"x-go-name: Type\" tool generates UserType instead of Type.\nIs it correct?. Found that this issue has been fixed on master IIRC. ",
    "birkelund": "I ran into this bug as well. Any idea where in the code to look? If I could get an indication on where in the code base to start looking, I'd be happy to help debug it.\nedit: it seems to only affect generation of post/put. E.g. this with nested properties but using GET works: https://gist.github.com/kbj/d6077e4a4cfdf46bc7b810eba94276e9. @casualjim worked perfectly, thanks!. I tried to create as simple a swagger.json as possible replicating the issue, but it still seems to behave a bit differently from what I originally encountered while generating from a real swagger spec. The spec in question is the EVE-Online ESI (which validates correctly). Generating a server from that spec causes the index variable i to be generated, but it is missing the connectionsI variable. Remember to call swagger flatten beforehand to try this (see #984). The issue is in the /routes/ endpoint.\nFor the client, the type clash remains between [][]int32 and []string. I looked into the code and it looks like the template can't generate a \"recursive formatter\" to convert the int32's to strings.. ",
    "wadelee1986": "could you please tell me  how to run this  example  ??. README instructions don't work for me. @casualjim \nthanks a lot.. ",
    "Zeychiel": "Hi,\nI can't reopen, but that is not the case =)\n// GetUsername swagger:route GET /profile/username user getUsername\n//\n// Get the home page data.\n//\n// Responses:\n//        200:\n//        417: description: StatusExpectationFailed\nGenerates\n\"/profile/username\": {\n      \"get\": {\n        \"tags\": [\n          \"user\"\n        ],\n        \"summary\": \"Get the home page data.\",\n        \"operationId\": \"getUsername\",\n        \"responses\": {\n          \"200\": {},\n          \"417\": {\n            \"$ref\": \"#/responses/\"\n          }\n        }\n      }\n    }\ngo version: 1.8\nOS: Windows 10. Hi gaplyk,\nLet's not create a fake structure and try the second option.\nIf I understand you well : \n- I removed the swagger:response annotation from the FrontPageData struct (orelse i'll get the error) and all the //in:body within\n- I have the swagger:route : \n//\n    // Responses:\n    //        200: body:FrontPageData\n- this produces the spec : \n\"operationId\": \"GetHomePageData\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"FrontPageData\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/FrontPageData\"\n            }\n          },\n          \"403\": {\n            \"$ref\": \"#/responses/\"\n          },\n          \"500\": {\n            \"$ref\": \"#/responses/\"\n          }\n        }\nbut definitions/FronPageData does not exist (all the models related to this struc have disappeard from the definitions when i removed the swagger:response tag). ...and with the -m option at generation, this works, thanks.\nI though that I read somewhere that the swagger:model tag was only used to rename models and that the detection was using the package manager, is that a bug or the standard way ?\nThanks,. ",
    "ybbus": "Can confirm this.\nIt is not possible to set a response description without body.. ",
    "JoshKCarroll": "@casualjim hitting this issue over here as well, making it tough to integrate. Thanks!. ",
    "Keith-Ball": "Bumping -- Still an issue. I also kind of wish there was a way to have JUST a body, but to answer the OPs question; You shouldn't imbed your struct.\n```golang\n// swagger:response positionResponse\ntype PositionResponse struct {\n    // The error message\n    // in: body\n    Payload PositionResponseBody // Note the \"Payload\" here, rather than an embedded struct\n}\ntype PositionResponseBody struct {\n    // X Position\n    Positionx string\n    // Y Position\n    Positiony string\n}\n```\nI tried what @casualjim suggested and attempted using 200: body:PositionResponseBody but it would just return the text \"PositionResponseBody\" as the response, rather than the structs properties. . ",
    "ianaz": "Works for me with \"description\" on the same line. The text can go in a new line; otherwise it gets only read until the dot (.)\n// swagger:route POST /login Authentication login\n    //\n    // Perform an authentication.\n    //     Responses:\n    //       200: description:\n    // Login successfull. A session cookie is returned within the header.\n    //                       This should be sent along with every (secured) request. How did you solve this? My swagger:model struct  is already in a package that's not main. ",
    "dfong": "@casualjim, thanks for your response.  i tried the instructions there, too.  was it your intention that this project be an illustrative model of how to use go-swagger?  if so, my feedback is that the instructions in the \"building\" section do not produce the ./kvstored binary referred to in the \"running\" section.  i'd also suggest adding some examples of proper usage of both the client and server, beyond the \"--help\" output.  to a newbie it is still far from obvious how to interface with go-swagger.. ",
    "sanjeevdatla": "Thanks for taking the time to ask. If I have the swagger spec file for an existing 3rd party REST service for their application, a dynamic client would allow me to load the swagger spec file and provide the ability to formulate requests and parse responses based on the loaded spec file. For e.g. there are REST client packages for go like go-resty that provide a nice interface to interact with a REST server, but go-resty doesn't comprehend swagger specs.. Adding a bit more context, can I get the rest client functionality without first generating a client using go-swagger and then compiling it back into the code. Can this be done dynamically like the dynamic server example.. ",
    "msample": "In retrospect, given that one can get the http.Request from params, and one can get the context from that by calling req.Context(),  perhaps the 'go-swagger generate server' no longer needs the '--with-context' flag?. Thanks @casualjim.  It appears this is a non-issue and can be closed.  \nBTW the docs on goswagger.io are a big help, thank you. Appreciate the design rationale.  Emphasizing this one point would have given me a much smoother start: you MUST generate into a package under $GOPATH/src or bad things happen (I was getting weird import pkg paths).   By the looks of it, the spots that use $GOPATH in go-swagger may need the 1.8 $HOME/go defaulting when GOPATH is empty.. Thanks.  Using a top level swagger file to merge two other files seems to require explicitly $ref'ing each path and data type entry?  ie I can't just generically union the paths: $ref:file1.json/paths $ref:file2.json/paths  and definitions: $ref:file1/definitions $ref:file2.json/definitions ?\nThere appears to be tooling to merge swagger files into a single file with only internal $refs. For example https://github.com/BigstickCarpet/swagger-parser has a 'bundle' function.. Good point. I guess I'm looking for a flatten that takes 2 or more swagger files and merges them by ref or value. I'm trying to avoid writing the root one that ref's everything together.. Awesome, just what I was thinking.  Hope to get to that shortly.  Cmd tentatively called 'mixin'.. banged out a poc here https://github.com/msample/swagger-mixin.  It needs to be massaged into a PR, probably one for go-swagger (main.go as a cmd) and another for go-openapi/analysis (mixer).   Will try to get to PRs later this week.. Thanks, Ivan. Do you need a PR for go-swagger.github.io to document the mixin command or should we let it 'settle' for a while?. ",
    "sidh": "There is an Addr variable in http.Server that is part of graceful.Server that is passed to configureServer, but Addr is not set yet when configureServer is invoked.\nAnother option (possibly a better one) would be to create another \"configure\" callback that is called after server is run. That would allow to register an already working service and not have a race condition when you register service before service is actually running.. Panic is very annoying. It should throw an error on validation.. I need to specify correct content-type so web browser is able to pick it up as correct content and display/act accordingly.\nWhat I guess I really need is a default consumer for generated client that if set, acts as a fallback option (most likely it will just act as a default ByteStreamConsumer). I need that since I cannot specify beforehand which content-types will be used.\nSomewhere here:\nhttps://github.com/go-openapi/runtime/blob/master/client/runtime.go#L324-L327. It definitely does not work with current master if body schema is type 'string' and format 'byte'. Generated client code is missing r.SetBodyParam(...).\nDidn't check op's case with array.. Right now go get github.com/go-swagger/go-swagger doesn't work with modules since it tries to bring incorrect versions of dependencies. It needs go.mod to resolve those correctly.. It has support for dep which basically has the same purpose as modules (in terms of managing dependencies). Its dependencies have support for modules.\nWhat is the correct way to add go-swagger as dependency to your project?. That workflow forces you to separately manage versions of go-swagger (as a tool) and its dependencies (as build dependecies for generated code). And for dependencies you actually have to match their versions with go-swagger by hand. It would be much better if you could do it all in one go and modules allow you to do it.\nBesides since there is a dep support in go-swagger and modules support in its dependencies why not just move to modules altogether?. If that is fine I'll do just that. :) But what to do with dep (Gopkg files)? I'd prefer removing it since supporting 2 dependency managers won't work in the long run.. Yes, I've came to the same conclusion about modules replacing GOPATH. But for dependency management they are quite adequate.\nI have high hopes for 1.12.. The desired type is map[string]json.RawMessage.\nFor the first case it generates map[string]interface{}.\nFor the second case it generates map[string]MyTypeAnon with\ntype MyTypeAnon struct {\n  json.RawMessage\n}. Agree on the second case. First case is probably a bug, yes.\nAlso it seems x-go-type does not work with properties of an object:\nMyType:\n  type: object\n  properties:\n    prop:\n      type: object\n      x-go-type:\n        import:\n          alias: \"json\"\n          package: \"encoding/json\"\n        type: \"RawMessage\"\nresults in\ntype MyType struct {\n  Prop interface{}\n}\ninstead of\ntype MyType struct {\n  Prop json.RawMessage\n}. > A hacky way to go could be to change the type mapping, like defined here and define or redefine some format to map as json.RawMessage.\nThis solution will work too. May be thats the correct way to go?. I initially wanted to dynamically handle part of JSON and for that I need json.RawMessage as simple format:byte will expect just bytes, not real JSON.. ",
    "dylangleason": "The only reference I've found to strfmt is in this package: https://github.com/go-openapi/strfmt\nHowever: File not declared by package strfmt. ",
    "FerrariAlberto": "` \npublic static void main(String args[]){\n        BigDecimal num = new BigDecimal(4);\n        String str = \"it_IT\";\n    CatalogApi test = new CatalogApi();\n    try {\n        System.out.println(test.restfulShoppingTagsGet(num,str));\n    } catch (ApiException e) {\n        e.printStackTrace();\n    }\n } `\n\ni've inserted this in io.swagger.client.api but i'm getting this error in the console\nio.swagger.client.ApiException: Content type \"application/xml\" is not supported for type: class io.swagger.client.model.Collection\n    at io.swagger.client.ApiClient.deserialize(ApiClient.java:844)\n    at io.swagger.client.ApiClient.handleResponse(ApiClient.java:1035)\n    at io.swagger.client.ApiClient.execute(ApiClient.java:969)\n    at io.swagger.client.api.CatalogApi.restfulShoppingTagsGetWithHttpInfo(CatalogApi.java:281)\n    at io.swagger.client.api.CatalogApi.restfulShoppingTagsGet(CatalogApi.java:266)\n    at io.swagger.client.api.CatalogApi.main(CatalogApi.java:327)\n. ",
    "jeffandersen": "Should the {{ ValueExpression }} located in this file be {{ varname ValueExpression }} or will that break other things?. ",
    "rupor-github": "Problem is caused by commit dbcac5349d0752aac851755aeb668f8e52018452:\n```\n    var err error\n    var specDoc *loads.Document\n    opts.Spec, specDoc, err = loadSpec(opts.Spec)\n    if err != nil {\n        return nil, err\n    }\n// Validate if needed\nif opts.ValidateSpec {\n    if err = validateSpec(opts.Spec, specDoc); err != nil {\n        return nil, err\n    }\n}\n\n```\nIt introduces side effect - after validation specDoc is expanded. That causes generation to fail in some cases or produce different code (with and without validation). Easy enough to fix:\n```\n    var err error\n    var specDoc *loads.Document\n    opts.Spec, specDoc, err = loadSpec(opts.Spec)\n    if err != nil {\n        return nil, err\n    }\n// Validate if needed\nif opts.ValidateSpec {\n    if err = validateSpec(opts.Spec, specDoc); err != nil {\n        return nil, err\n    }\n    // Reload original spec\n    opts.Spec, specDoc, err = loadSpec(opts.Spec)\n    if err != nil {\n        return nil, err\n    }\n}\n\n```\n. ",
    "ryanwalls": "@casualjim have a minute to look at this one?  It's pretty painful for us.  Surprised it hasn't come up previously.. Currently to work around this we have to recover from a panic before we call any generated client code.  \ne.g.\nfunc (c *client) Material(materialID int32) (material *models.Material, err error) {\n    defer func() {\n        // Until this issue is resolved: https://github.com/go-swagger/go-swagger/issues/1021, we need to recover from\n        // panics.\n        if r := recover(); r != nil {\n            err = fmt.Errorf(\"Recovered from panic: %v\", r)\n        }\n    }()\n    token, err := c.tokenFetcher.Token(c.audience)\n    if err != nil {\n        return nil, err\n    }\n    response, err := c.client.Operations.GetMaterial(operations.NewGetMaterialParams().WithID(materialID), openapiclient.BearerToken(token))\n    if err != nil {\n        return nil, err\n    }\n    return response.Payload, nil\n}. @casualjim Going to bump this again.  Should we be modeling our errors differently to avoid panics?  There must be something we are missing.  Should we not be specifying a schema at all for errors?. @casualjim @EleanorRigby Good news.  Since I created this issue the bug has been fixed.  I updated one of our clients that was experiencing this issue to the more recent packages, and the panic went away.  Sorry about the recent pings.  Should have tried updating the packages before I bumped this issue.. I also need to be able to instrument each individual method handler... but don't see a convenient way to wrap individual handlers.  e.g.  If I have GetFoo and PostFoo handlers, I want to be able to wrap them individually.  InstrumentGetFoo(GetFoo) and InstrumentPostFoo(PostFoo).  . @casualjim Thanks.  \nI'm still not clear how I can do the 2nd case where I instrument individual method handlers with different middlewares.  \nIt seems both setupGlobalMiddleware and setupMiddlewares would apply the same middleware to all method handlers.\n. @casualjim \nThis is the code I'm trying to replicate: https://github.com/prometheus/client_golang/blob/master/prometheus/promhttp/instrument_server_test.go#L148-L232\nHere's what I ended up doing in setupMiddlewares... not extremely pretty, but it works. :)\n```\nfunc setupMiddlewares(handler http.Handler) http.Handler {\n    inFlightGauge := prometheus.NewGauge(prometheus.GaugeOpts{\n        Name: \"in_flight_requests\",\n        Help: \"A gauge of requests currently being served by the wrapped handler.\",\n    })\ncounter := prometheus.NewCounterVec(\n    prometheus.CounterOpts{\n        Name: \"api_requests_total\",\n        Help: \"A counter for requests to the wrapped handler.\",\n    },\n    []string{\"code\", \"method\"},\n)\n\n// Durations are partitioned by the HTTP method and use custom\n// buckets based on the expected request duration. ConstLabels are used\n// to set a handler label to mark which endpoint is being tracked.\nhistogramOpts := prometheus.HistogramOpts{\n    Name:        \"request_duration_seconds\",\n    Help:        \"A histogram of latencies for requests.\",\n    Buckets:     []float64{.25, .5, 1, 2.5, 5, 10},\n    ConstLabels: prometheus.Labels{\"route\": \"/workflows/<id>\"},\n}\ngetWorkflowsVec := prometheus.NewHistogramVec(\n    histogramOpts,\n    []string{\"method\"},\n)\nhistogramOpts.ConstLabels = prometheus.Labels{\"route\": \"/workflows/<id>/signals\"}\npostSignalsVec := prometheus.NewHistogramVec(\n    histogramOpts,\n    []string{\"method\"},\n)\n\n// responseSize has no labels, making it a zero-dimensional\n// ObserverVec.\nresponseSize := prometheus.NewHistogramVec(\n    prometheus.HistogramOpts{\n        Name:    \"response_size_bytes\",\n        Help:    \"A histogram of response sizes for requests.\",\n        Buckets: []float64{200, 500, 900, 1500},\n    },\n    []string{},\n)\n\n// Register all of the metrics in the standard registry.\nprometheus.MustRegister(inFlightGauge, counter, getWorkflowsVec, postSignalsVec, responseSize)\n\ninFlightMiddleware := func(handler http.Handler) http.Handler {\n    return promhttp.InstrumentHandlerInFlight(inFlightGauge, handler)\n}\ncounterMiddleware := func(handler http.Handler) http.Handler {\n    return promhttp.InstrumentHandlerCounter(counter, handler)\n}\nresponseSizeMiddleware := func(handler http.Handler) http.Handler {\n    return promhttp.InstrumentHandlerResponseSize(responseSize, handler)\n}\nendpointSpecificMiddleware := func(handler http.Handler) http.Handler {\n    r := mux.NewRouter()\n\n    getWorkflowPath := getPath(&operations.GetWorkflowsIDURL{ID: \"{id}\"})\n    r.Methods(http.MethodGet).Path(getWorkflowPath).Handler(promhttp.InstrumentHandlerDuration(getWorkflowsVec, handler))\n\n    postWorkflowSignalPath := getPath(&operations.PostWorkflowsIDSignalsURL{ID: \"{id}\"})\n    r.Methods(http.MethodPost).Path(postWorkflowSignalPath).Handler(promhttp.InstrumentHandlerDuration(postSignalsVec, handler))\n\n    r.PathPrefix(\"/\").Handler(handler)\n    return r\n}\nreturn alice.New(inFlightMiddleware, counterMiddleware, endpointSpecificMiddleware, responseSizeMiddleware).Then(handler)\n\n}\n```\nMy getPath convenience method looks like this:\n```\ntype URLBuilder interface {\n    Build() (*url.URL, error)\n}\nfunc getPath(urlBuilder URLBuilder) string {\n    url, err := urlBuilder.Build()\n    if err != nil {\n        panic(fmt.Sprintf(\"Problem parsing url for type: %T\", urlBuilder))\n    }\n    return url.Path\n}\n```\nIt would be great if we could somehow hook into or get the individual method handlers when configuring the middleware.  Would definitely clean up this example.  . @casualjim That would be awesome.  Thanks.. @ilinamitra As far as I know, this is still the only way.  @casualjim Let me know if there have been updates to how to add a prometheus endpoint.  . ",
    "bugwelle": "The info appears to have been removed? Because I can't find any information about supported producer mime types. \ud83d\ude03 \nImagine having following swagger.yml\nyml\n...\n  /users/{userId}/image:\n    get:\n      tags:\n      - user\n      description: Get the user's profile image\n      operationId: getUserImage\n      parameters:\n        - name: userId\n          in: path\n          description: The ID of the user\n          required: true\n          type: string\n      produces:\n        - application/octet-stream\n      responses:\n        200:\n          description: Success\n          schema:\n            type: string\n            format: binary\n...\nThe API produces the binary/image with application/octet-stream just as intended. But writing e.g. image/jpeg in produces does not work because no producer is registered for it. It took me quite a while to figure this out because no error message was printed out and I thought that my io.ReadCloser simply didn't work.\nI am using go-swagger to generate go code from my swagger spec. Is there a way to register another producer? Because the xxx_api.go is generated, I can't add it manually or can I?\n(btw. I'm a go novice and just recently started using go-swagger)\nMaybe an error should be printed if not supported (binary) mime types are used?\nEnvironment\nswagger version: \n-> version: 0.12.0\n-> commit: 8135eb6728e43b73489e80f94426e6d387809502\ngo version: go version go1.9.2 windows/amd64\nOS:   Windows 10. ",
    "icobani": "Yes I want to add another command (like bellow) for x-logo. \n```go\n// HRPERFORMANS uygulamas\u0131 API d\u00f6k\u00fcman\u0131.\n//\n// HR Performans\n// \u00fcreten \u00f6rnek bir go uygulamas\u0131 ortaya koymakt\u0131r.\n//\n// Uygulama go kodu ve yorum sat\u0131rlar\u0131nda kullan\u0131lan \u00f6zel direktifleri\n// kullanarak swagger 2.0 uyumlu bir API spesikasyon d\u00f6k\u00fcman\u0131 \u00fcretmektedir.\n//\n// Schemes: http, https\n// Host: localhost\n// BasePath: /v2\n// Version: 0.0.1\n// License: MIT http://opensource.org/licenses/MIT\n// Contact: iciibrahim@cobani.com\n// X-logo: ./images/hrperformans/logo260x75x72.png\n//\n// Consumes:\n//   - application/json\n//   - application/xml\n//\n// Produces:\n//   - application/json\n//   - application/xml\n//\n// swagger:meta\npackage main\n```. Wonderfull \ud83d\udc4d  thanks. ",
    "mcandre": "Yes. Maybe I got the syntax wrong?\ngo\n// swagger:route GET /health\n//\n// Returns status information for connected elements.\n//\n// Produces:\n// - application/json\n//\n// Schemes: http, https\n//\n// Responses:\n//   default: genericError\n//   200: someResponse\nfunc GetHealth(w http.ResponseWriter, r *http.Request) {\n...\n}. Ah, I was missing the required operation ID field in the swagger syntax.. Specifically, the petstore example hardcodes the Swagger spec, whereas a production application would be more likely to use some kind of resource loading system. Could the petstore example be updated to load the JSON spec from a file nearby in version control? Or even better, skip files altogether and generate the spec on launch via Swagger Go lib?\nhttps://github.com/go-swagger/go-swagger/blob/master/examples/2.0/petstore/server/api/petstore.go. ",
    "aeneasr": "Thank you for fixing this so swiftly!\n\nAm 05.05.2017 um 19:50 schrieb Ivan Porto Carrero notifications@github.com:\nClosed #1028 via 01f8647.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I'm still observing the same behaviour. After doing go get -u github.com/go-swagger/go-swagger and gen-swagger.sh the result of\n\n//     Schemes: http, https\n//     Host:\n//     BasePath: /\n//     Version: Latest\n//     License: Apache 2.0 https://github.com/ory/hydra/blob/master/LICENSE\n//     Contact: ORY <hi@ory.am> https://www.ory.am\n//\n//     Consumes:\n//     - application/json\n//     - application/x-www-form-urlencoded\n//\n//     Produces:\n//     - application/json\n//\n//     SecurityDefinitions:\n//     - oauth2:\n//         type: oauth2\n//         authorizationUrl: /oauth2/auth\n//         tokenUrl: /oauth2/token\n//         in: header\n//         flow: accessCode\n//         scopes:\n//           bla: foo\n//\n//     Extensions:\n//     ---\n//     x-request-id: string\n//     x-forwarded-proto: string\n//     ---\n//\n// swagger:meta\nis\n\"securityDefinitions\": {\n    \"oauth2\": {\n      \"type\": \"\"\n    },\n    \"scopes\": {\n      \"type\": \"\"\n    }\n  },\n  \"x-request-id\": \"string\". Ah yes, that helped, thanks! However it's only copying the first scope:\n//\n//     SecurityDefinitions:\n//     - oauth2:\n//         type: oauth2\n//         authorizationUrl: /oauth2/auth\n//         tokenUrl: /oauth2/token\n//         flow: accessCode\n//         scopes:\n//           hydra.clients: \"A scope required to manage OAuth 2.0 Clients\"\n//           hydra.policies: \"A scope required to manage access control policies\"\n//           hydra.groups: \"A scope required to manage warden groups\"\n//           hydra.warden: \"A scope required to make access control inquiries\"\n//           hydra.keys.get: \"A scope required to fetch JSON Web Keys\"\n//           hydra.keys.create: \"A scope required to create JSON Web Keys\"\n//           hydra.keys.delete: \"A scope required to delete JSON Web Keys\"\n//           hydra.keys.update: \"A scope required to get JSON Web Keys\"\n//           offline: \"A scope required when requesting refresh tokens\"\n//           openid: \"Request an OpenID Connect ID Token\"\n\"securityDefinitions\": {\n    \"oauth2\": {\n      \"type\": \"oauth2\",\n      \"flow\": \"accessCode\",\n      \"authorizationUrl\": \"/oauth2/auth\",\n      \"tokenUrl\": \"/oauth2/token\",\n      \"scopes\": {\n        \"hydra.clients\": \"\\\"A scope required to manage OAuth 2.0 Clients\\\"\"\n      }\n    }\n  },. Tried it with 0.12.0 and 0.11.0 with the same result.. The package name is one word (jose), the import path however is go-jose. This is not the only popular package in the Go ecosystem that does that, and go-swagger should be able to properly identify those packages as this type of naming is supported by Go.. ",
    "satyababu": "Hi @casualjim \nIt is followup question to this thread,\nIs there any way can we serve swagger UI  using swagger-ui instead of ReDoc?\nDo you have any example on it.\nPlease let me know\n. I tried to install swagger command.\nIt worked. closing the issue. I see its working today ( after I pulled the latest code ).\nClosing the issue.\nThank you. ",
    "jcoyne": "I'm curious why you implemented this interface.  Is it used somewhere?. @fredbi I attempted the workaround, but then it didn't generate ResourceAdditionalProperties into the model struct.\nIn fact when I do \"additionalProperties\": {},, then in the embedded_spec.go it generates \"additionalProperties\": false,. @gregmarr Yes! That looks great. Excellent work.. No, it still does not work:\n```\ncurl -v -H\"Transfer-Encoding: chunked\" -H'Content-Type: application/json' -X POST http://localhost:3000/v1/identifiers/druids\n   Trying ::1...\n TCP_NODELAY set\n* Connected to localhost (::1) port 3000 (#0)\n\nPOST /v1/identifiers/druids HTTP/1.1\nHost: localhost:3000\nUser-Agent: curl/7.54.0\nAccept: /\nTransfer-Encoding: chunked\nContent-Type: application/json\n< HTTP/1.1 500 Internal Server Error\n< Content-Type: application/json\n< Date: Wed, 21 Feb 2018 20:38:26 GMT\n< Content-Length: 68\n< Connection: close\n<\n* Closing connection 0\n{\"code\":500,\"message\":\"no consumer registered for application/json\"}\n```. FWIW, this is a problem because I'm testing with baloo and that seems to always set the chunked header:\n\n```go\nimport(\n  baloo \"gopkg.in/h2non/baloo.v3\"\n)\nbaloo.New(\"http://localhost:3000\").\n  Post(\"/v1/identifiers/druids\").\n        Expect(t).\n        Status(200).\n        Type(\"json\").\n        JSON(map[string]string{\"status\": \"OK\"}).\n        Done()\n``. Curiously, if I change it to--principal models.Agent` it does generate the import:\n\"github.com/sul-dlss-labs/arepa/generated/models\". @fredbi  when change the package to permissions and I do swagger generate server -t generated --exclude-main --principal permissions.Agent it generates:\npermissions \"github.com/sul-dlss-labs/permissions-service\"\n(which actually solves my immediate problem)\nI'm pretty new to go.  This behavior doesn't make sense to me. There seem to be some package names that are acceptable to it and some that are not.  It would be helpful to me if these assumptions are clearly expressed in documentation or in warnings when running the generator.. Thanks for the advice, but I'm not understanding at what key it would be in the context. Do you have an example?. Perfect! Thanks @casualjim. I've updated my logger middleware to do:\ngo\n    log.Printf(\"Security Principal: %s \", middleware.SecurityPrincipalFrom(r))\nbut it's nil. \nI'm setting up my middleware like this:\ngo\n// BuildHandler sets up the middleware that wraps the API\nfunc BuildHandler(api *operations.TacoAPI) http.Handler {\n        return alice.New(\n                        ...,\n            middleware.NewRequestLoggerMW(),\n        ).Then(api.Serve(nil))\n}\nam I missing something?. ",
    "ouijan": "I was looking for a x-go-hidden or writeOnly tag that could be used to hide sensitive fields (eg passwords) but this would also solve my issue.\nIf this was implemented, x-go-no-marshal: true used in combination with x-go-custom-tag: 'json\"-\"' would accomplish this.. ",
    "nickrmc83": "Thanks Ivan. I'll get the conflicts resolved early next week.\nOn 6 May 2017 8:10 a.m., \"Ivan Porto Carrero\" notifications@github.com\nwrote:\n\nthere are some conflicts here that need to be resolved. changes look good\nthough\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/go-swagger/go-swagger/pull/1033#issuecomment-299621215,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABhXUHKHoDflLbtpZmPNT9w-zc7Ky2Hmks5r3B0BgaJpZM4NSpc4\n.\n. I've got some more changes as I found a few errors in my submission so\ndon't worry about review ingress quite yet.\n\nOn 14 Aug 2017 6:19 pm, \"Ivan Porto Carrero\" notifications@github.com\nwrote:\n\nI forgot to review this over the weekend. Would it be possible to update?\nI'll try to do it tonight\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/go-swagger/go-swagger/pull/1128#issuecomment-322251754,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABhXUOG5-CMf3_3ATKzuFqQi129UnL44ks5sYIGUgaJpZM4O0fNA\n.\n. @casualjim this is now ready to be reviewed. All unit tests pass and I've done some validation with my more complex internal models.\n\nThanks. Done! Let me know if there's anything else for me to do or that I can help with.. I'll take a look as soon as I can over the weekend. It's probably a scenario I'd not tested adequately. Mea culpa. I've got a fix (without a unit test at present) here. Once I've had a chance to write some tests I'll raise a PR. I've had to base the fix on the 0.13.0 release point as the current HEAD has other errors when using the below OpenAPI manifest:\n```\nswagger: '2.0'\ninfo:\n  title: Title\n  description: some description\n  contact:\n    name: John Doe\n    url: https://www.acme.com/support\n    email: support@acme.com\n  version: \"1.0.0\"\npaths:\n  /:\n    get:\n      responses:\n        200:\n          description: Example path\n          schema:\n            type: string\n        default:\n          description: generic error\n          schema:\n            type: string\ndefinitions:\n  ExecuteValues:\n    type: object\n    properties:\n      Value:\n        $ref: \"#/definitions/ExecuteValue\"\n  ExecuteValue:\n    type: object\n    discriminator: ValueType\n    required:\n    - ValueType\n    properties:\n      ValueType:\n        type: string\n  ExecutableValueString:\n    allOf:\n    - $ref: '#/definitions/ExecuteValue'\n    - type: object\n      properties:\n        something:\n          type: string\n````\n@gregmarr : Is there any chance you can see if the linked fork solves your issues correctly and whether I missed anything?. @gregmarr the changes from my original PR were extensive and designed to address the support for polymorphic types that have polymorphic properties especially arrays. Reverting and re-implementing would probably result in a similar issue appearing in future.\nThe breakages I though were at HEAD was down to my Dep lock file being behind. With an update it's building with my latest changes.. ",
    "piotrkowalczuk": "Yes flattened spec has all operations included. Is such intermediate file recommended way of generation?. ",
    "brandoncole": "Thanks for posting that solution @casualjim - that will work for me in the interim as well. ",
    "stephanwesten": "I did:   swagger generate spec -o ./swagger.yml -m\nNow I get the error message:\nunable to determine package for /Users/swesten/GoglandProjects/testRestAPI/main.go\nwhich does not make sense to me because there is a single main file with a package declared.\nI've to say that the learning curve is pretty steep.. I was using a temporary folder. After moving the folder below ~/go/src it worked fine.. ",
    "dreamlover": "@casualjim Modification as you said does give us an opportunity to replace the authenticators, but the routine work of fetching the token string must be done manually also. What do you think of adding http.Request to the parameter list of authenticator of API key as I wrote in #1043?. OK, BasicAuth and BearerAuth added.. I have no symlink in my GOPATH, go swagger 0.10.0 also generates relative paths.\n```go\npackage opr\n// This file was generated by the swagger tool.\n// Editing this file might prove futile when you re-run the swagger generate command\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"strings\"\nerrors \"github.com/go-openapi/errors\"\nloads \"github.com/go-openapi/loads\"\nruntime \"github.com/go-openapi/runtime\"\nmiddleware \"github.com/go-openapi/runtime/middleware\"\nsecurity \"github.com/go-openapi/runtime/security\"\nspec \"github.com/go-openapi/spec\"\nstrfmt \"github.com/go-openapi/strfmt\"\n\"github.com/go-openapi/swag\"\n\n\"../../../Works/AYJiaYou/MPos-WebAPI/src/mpos/mod\"\n\"../../../Works/AYJiaYou/MPos-WebAPI/src/mpos/rest/opr/term\"\n\n)\nThe version 0.8.0 is OK, 0.9.0 & 0.10.0 don't work.. @casualjim \nI'm using `openSUSE Leap 42.2`, my GOPATH env is:bash\nee@ay-lfree:~/Works/AYJiaYou/MPos-WebAPI> echo $GOPATH\n/home/lfree/opt/Go:/home/lfree/Works/AYJiaYou/AY-Go:/home/lfree/Works/AYJiaYou/BackHarmony:/home/lfree/Works/AYJiaYou/AY-Ad/Server:/home/lfree/Works/AYJiaYou/HealthyID/Server:/home/lfree/Works/AYJiaYou/AY-DDUP:/home/lfree/Works/AYJiaYou/MPos-WebAPI:/home/lfree/Works/github.com\nI stored gen_server.sh file in `Works/AYJiaYou/MPos-WebAPI/API/` folder and run it within that folder:bash\n!/bin/bash\n./swagger_linux_amd64_0.8.0 generate server \\\n./swagger_linux_amd64_0.9.0 generate server \\\n./swagger_linux_amd64_0.10.0 generate server \\\n    --spec=swagger.yml \\\n    --api-package=opr \\\n    --model-package=mod \\\n    --server-package=rest \\\n    --target=../src/mpos \\\n    --name=mpos \\\n    --principal=mod.RequestInfo \\\n    --default-scheme=https\nfor file in find ../src/mpos/ -type f -name *.go\ndo\n    sed -i 's/..\\/..\\/..\\/Works\\/AYJiaYou\\/MPos-WebAPI\\/src\\///' $file\ndone\n. @casualjim \nI add a comment to the diff. Should thewriterbe closed or thedata?\nI open  a file as the payload to produce, so thedata``` parameter is of type 'io.ReadCloser'.. ",
    "someone1": "In case anyone was interested in how to do this, here is how I got it working for Google Cloud Endpoints where the authentication is passed via a header (it adds it as a scope item which REALLY isn't ideal):\nhttps://gist.github.com/someone1/ec3625f05cd7082897423d42a39cdfc9. I appreciate the tip! However, maybe I'm a little dense because I don't see how I could have used your examples. How would I plugin the CaptureRequestAuth example into the api? It doesn't seem to match the function signature for anything the api is expecting.\nAdditionally, my use-case has 2 oauth mechanisms so I still wanted to leverage the generated AuthenticatorFor method to pull the correct authorize function based on the oauth2 method needed for the matched route, and each method validates a different way but needs varios bits from the request headers in order to do so (not shown in my gist).\nWould I change the function signature to something like CaptureRequestAuth(name string, _ security.ScopedTokenAuthentication) runtime.Authenticator and do my own selection of the proper authentication method to use based on the provided name, effectively duplicating what the AuthenticatorsFor generated stub does? This does seem like a cleaner way to access the request.\nEdit: It seems the name parameter passed in is only applicable to api keys and can't be used to differentiate the oauth2 security method needed. The only way I see it can be done was with the method I had proposed or some reflection magic on the authorize method passed in.. Pinging for an update: Is an example available or will there be a code adjustment to accommodate ordering from the spec? In the use-case where multiple auth methods help build the principal, what needs to happen? I'm building in hacks around to prevent panics when I end up with a nil principal.\nI believe consideration needs to be made when you have multiple authenticators for an endpoint and only the last principal generated is utilized and the previous ones are dropped. If we want to claim that ordering doesn't \"bear functional meaning\" then we should come up with a way to share the principal between authenticators, at least when 2 or more are required for an endpoint. Instead of expecting a principal as a return value, why not generate one and pass it as parameter to the authenticators? I assume this is easier said than done but maybe could happen without introducing a breaking change?\nAt the very least, a quick (hacky) fix would be to only set lastResult to princ where princ != nil here: https://github.com/go-openapi/runtime/blob/1c997f7e69df84d5c13222f6491841512b5f45ea/middleware/router.go#L196. ",
    "hiyosi": "Thanks for your quick response. \nI'll try it.. ",
    "sethcleveland": "I'm seeing this problem as well.  The generated JSON Unmarshallers don't handle property extensions correctly.. FWIW's my problem was with generating the client. I realized my swagger api yaml was subtly wrong. In order to get the data composition to work correctly with codeGen, I had to add the extra properties to the 'allOf' array, instead of being outside of that array. I noticed my problem when I looked at this example in the swagger spec documentation.\nyaml\ndefinitions:\n  ErrorModel:\n    type: object\n    required:\n    - message\n    - code\n    properties:\n      message:\n        type: string\n      code:\n        type: integer\n        minimum: 100\n        maximum: 600\n  ExtendedErrorModel:\n    allOf:\n    - $ref: '#/definitions/ErrorModel'\n    - type: object\n      required:\n      - rootCause\n      properties:\n        rootCause:\n          type: string. ",
    "onokonem": "I would not say it is good idea to give up on validation for the real world scenarios . yes right thank you\nfortunately this time I need just a client code which I've generated with swagger-codegen successfully.\nby the way, this is a spec this bug appeared with: https://github.com/komikoni/redmine-swagger\n. by the way, I was wrong about github diff: properly formed attributes make it ignore generated files.\nsomething like\ngen/*    linguist-generated\nhas to be added to the .gitattributes file\n. of course I do :)\nconfigure_issue_tracker.go\nthis is a file generated from examples/task-tracker. there are  some more changes but they all are related to the changes in this file.\nThe main idea is to force the handler to return one of the replays predefined for this particular method.\n. and yes, I can create a strict (and build api) examples based on the existing ones. just tell me which one suits best. done. BTW, I need help adding tests for these options.. exactly. from my point of view it is ready to be merged\nit is in use in prod in some place at the moment\nthe parts are missing:\n\ntests to satisfy the coverage checker\ntests to actual test the functionality\n\nunfortunately it looks like I'll not complete the tests. ",
    "buyology": "thanks a lot!. ",
    "ribice": "Yes, and it's pretty fine. The one provided here seems 'simpler'. Anyway didn't have to time to implement swagger yet, feel free to close this issue. Cheers!. I get this:\n\nThose are not my apis. I hope I was clear enough, I want to have the same UI as on api.subledger.com (and not like on petstore).\nThis is the command I used:\n\n. The one I wanted is Swagger-UI v2, and the one included with go-swagger is Swagger-UI v3.. Can you adding another parameter, e.g. id from my example?. Now that I'm looking at it, I think I was using swagger:parameters instead of  swagger:model for this one.\nWorks as expected when using swagger:model. Thanks! . ",
    "ifraixedes": "\nWhen you write to a response writer for the body go will flush the headers and the body. So if we want to return a status code then we have to do that before we start writing to the response writer, which happens in the producer.Produce call\n\nI missed that point, my simple test to confirm my initial thoughts have been to call to panic just after the rw.WriteHeader(200) and have basic panic recover middleware which sends status 500.\nThen I confirmed my thoughts of the response status code that the client gets is 200 rather than 500 and a message in the console saying something like that the header has been written more than once.\nWhen I basically changed the panic call before of the w.WriteHeader(200), the client got a response with status 500. \nHowever, I think that you're right, because it may panic after starting to write the response body but before finishing.\n\nI think this could be fixed in the panic middleware by having a buffered response that gets flushed at the end or when its buffer overflows perhaps?\n\nI don't understand what you exactly suggested it. Could you elaborate how a panic middleware could avoid such thing without making any change in the default template used by the generator?\nMany thanks!. Great thanks!. Thanks.\nI will give it a try at some point, but meanwhile a new version isn't released, I may delay until then, because mostly we use (my team) the same version of go-swagger binary and not everybody has Go installed for compiling it, besides that we guarantee everybody using the same version.. ",
    "PurpleBooth": "Just to clarify, my issue was definitely the symlink thing. Removed the symlink, worked fine, put it back, it broke, removed it it was totally fine.. ",
    "arddor": "Thank you for your response, however I'm not sure that this solves my problem. My struct has the following structure:\n``go\n// User represents a user of the system\n//\n// swagger:model user\ntype User struct {\n  // the id for this user\n  //\n  // readOnly: true\n  // required: true\n  // min: 1\n  ID intjson:\"id\"`\n// the time when this user was created\n  //\n  // readOnly: true\n  // swagger:strfmt date-time\n  CreatedAt *time.Time json:\"createdAt\"\n// the time when this user was last updated\n  //\n  // readOnly: true\n  // swagger:strfmt date-time\n  UpdatedAt *time.Time json:\"updatedAt\"\n// the firstname of this user\n  //\n  // required: true\n  Firstname string json:\"firstname\"\n// the lastname of this user\n  //\n  // required: true\n  Lastname string json:\"lastname\"\n// the role of this user\n  //\n  // required: true\n  Role int json:\"role\"\n// the unique mail address of this user\n  //\n  // unique: true\n  // required: true\n  Mail string json:\"mail\"\n// the plain text password of the user. Only sent during authentication (this is not stored in the db)\n  //\n  // required: true\n  Password string json:\"password,omitempty\"\n// the foreignkey to the associated company\n  //\n  // required: true\n  CompanyID int json:\"companyID\"\n// the associated company\n  //\n  // readOnly: true\n  Company *Company json:\"company,omitempty\"\n}\n```\nI don't have a different struct which handles the payload of GET or POST. Note that there is a pointer to Company and therefore it will always show.\nUPDATE: I played around with it and what I would need is to define on the Company model \"readOnly\" and it would give the result I want to achieve. Are there any options that I can do that?. ",
    "scf2k": "\ud83d\udc4d\nSame issue here. Generator makes a ref and ignores the read only annotation\n\"Links\": {\n     \"$ref\": \"#/definitions/MessageLinks\"\n}\nIn my case MessageLinks is an alias type for array of MessageLink. And if I change property type to just an array it works as expected. Though I use the alias on purpose and can't just change to array.. > Can you sign your pull request?\ndone. done. It does work that way too. oops sorry, just fixed it. ",
    "geoffcorey": "Well if I document two routes\n// swagger:route GET /foo GetFooBar\n// swagger:route GET /bar GetFooBar\n// swagger:operation GetFooBar\nThen the generated swagger.json would do the work of duplicating operation GetFooBar for both route /foo and route /bar.  \nRight now I would have to duplicate the full definition of operation GetFooBar twice because I need to specify the full spec for both /foo and /bar.  . So in the above example I have routes /foo and /bar that use operation GetFooBar.   When I create swagger.json I would write out the spec for /foo using GetFooBar and /bar using GetFooBar.\nThe current method seems to need both swagger:route and swagger:operation to require both the actual route and operation name.   If that is the case, couldn't you just eliminate swagger:route and just document using swagger:operation comments?\nRoute doesn't add any thing that isn't already defined in swagger:operation\n swagger:route [method] [path pattern] [?tag1 tag2 tag3] [operation id]\n swagger:operation [method] [path pattern] [?tag1 tag2 tag3] [operation id]\n. Well tested out \n// swagger:route /foo GetFooBar\n// swagger:route /bar GetFooBar\n// swagger:operation /foo GetFooBar\n// .... details\n// swagger:operation /bar GetFooBar\n// .... Duplicate details /foo operation\nValidation reports duplicate operation GetFooBar.   Seems the only option is create another method this facades GetFooBar to document go-swagger.. ",
    "andrewkavalionak": "yes, i tried this as well and for this case i was able to generate client from flattened spec, but if you add a reference to the properties it fails again with similar error\n```\nswagger: '2.0'\ninfo:\n  version: '2.0'\n  title: test\n  description: test\n  license:\n    name: N/A\nbasePath: /v2\nschemes:\n  - http\n  - https\nconsumes:\n  - application/json\nproduces:\n  - application/json\ndefinitions:\n  UserBase:\n    type: object\n    properties:\n      id:\n        type: integer\n        format: uint64\nContactEmail:\n    type: object\n    properties:\n      email:\n        type: string\nUser:\n    allOf:\n    - $ref: '#/definitions/UserBase'\n    - properties:\n    - properties:\n        contactEmails:\n          type: array\n          items:\n            $ref: '#/definitions/ContactEmail'\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\nsmall change to the second file. Just added\ncontactEmails:\n          type: array\n          items:\n            $ref: '#/definitions/ContactEmail'\n```\nand the error is\nschema analysis [#/definitions/user/allOf/2/properties/contactEmails]: object has no key \"ContactEmail\"\nDo you have any ideas?. for the second case i'm unable to flatten \nswagger flatten /Users/andrew/Workspace/go/src/github.com/go-swagger/example/first.yml -o /Users/andrew/Workspace/go/src/github.com/go-swagger/example/flatten-spec.json\nit fails with the error schema analysis [#/definitions/user/allOf/1/properties/contactEmails]: object has no key \"ContactEmail\"\nI tried to expand and it worked.\n. however if i modify specs a bit more expand stops working\nfirst.yml\n```\nswagger: '2.0'\ninfo:\n  version: '2.0'\n  title: test\n  description: test\n  license:\n    name: N/A\nbasePath: /v2\nschemes:\n  - http\n  - https\nconsumes:\n  - application/json\nproduces:\n  - application/json\npaths:\n  /user:\n    get:\n      operationId: getUser\n      description: test\n      responses:\n        200:\n          $ref: 'second.yml#/responses/userResponse'\n**second.yml**\nswagger: '2.0'\ninfo:\n  version: '2.0'\n  title: test\n  description: test\n  license:\n    name: N/A\nbasePath: /v2\nschemes:\n  - http\n  - https\nconsumes:\n  - application/json\nproduces:\n  - application/json\nresponses:\n  userResponse:\n    description: succes\n    schema:\n      $ref:  '#/definitions/User'\ndefinitions:\n  UserBase:\n    type: object\n    properties:\n      id:\n        type: integer\n        format: uint64\nContactEmail:\n    type: object\n    properties:\n      email:\n        type: string\nUser:\n    allOf:\n    - $ref: '#/definitions/UserBase'\n    - properties:\n        contactEmails:\n          type: array\n          items:\n            $ref: '#/definitions/ContactEmail'\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n``\nswagger expand fails withobject has no key \"User\"` error\ncan you give me an idea where should i look at so I can maybe try to help fix that?. ",
    "reidrac": "I'm also affected by this; my case is the same @andrewkavalionak exposed: one YAML file with no definitions importing all the definitions from a second YAML file.\nI'm implementing a dynamic API server and it loads the spec just fine (it opens and loads the definitions from the second file).\nIs the client using a different mechanisms to load the spec?\nAlso: is flatten a super-set of expand?\nI run expand + flatten and generated the client code, but I'm not sure the generated models are correct (28 models when I believe I only defined 3).. @EleanorRigby these are my current spec. Is a test app to evaluate go-swagger.\nThis is swagger.yaml:\nswagger: '2.0'\ninfo:\n  version: 0.1.0\n  title: Poll API\nschemes:\n  - http\nconsumes:\n  - \"application/json\"\nproduces:\n  - \"application/json\"\npaths:\n  /:\n    get:\n      tags: [\"polls\"]\n      operationId: getAllPolls\n      parameters:\n        - name: limit\n          in: query\n          description: Limit the response to the last n polls.\n          type: integer\n          format: int32\n          required: false\n      responses:\n        '200':\n          description: OK\n          schema:\n            type: array\n            items:\n              $ref: \"models.yaml#/definitions/poll\"\n        default:\n          description: error\n          schema:\n            $ref: \"models.yaml#/definitions/error\"\n    post:\n      tags: [\"polls\"]\n      operationId: addPoll\n      parameters:\n        - name: poll\n          in: body\n          schema:\n            $ref: \"models.yaml#/definitions/poll\"\n      responses:\n        '201':\n          description: Created\n          schema:\n            $ref: \"models.yaml#/definitions/poll\"\n        default:\n          description: error\n          schema:\n            $ref: \"models.yaml#/definitions/error\"\n  /{id}:\n    parameters:\n      - type: integer\n        format: int32\n        name: id\n        in: path\n        required: true\n    get:\n      tags: [\"polls\"]\n      operationId: getPoll\n      responses:\n        '200':\n          description: OK\n          schema:\n            $ref: \"models.yaml#/definitions/poll\"\n        default:\n          description: error\n          schema:\n            $ref: \"models.yaml#/definitions/error\"\n    put:\n      tags: [\"polls\"]\n      operationId: updatePoll\n      parameters:\n        - name: poll\n          in: body\n          schema:\n            $ref: \"models.yaml#/definitions/poll\"\n      responses:\n        '200':\n          description: OK\n          schema:\n            $ref: \"models.yaml#/definitions/poll\"\n        default:\n          description: error\n          schema:\n            $ref: \"models.yaml#/definitions/error\"\n    delete:\n      tags: [\"polls\"]\n      operationId: deletePoll\n      responses:\n        '204':\n          description: Deleted\n        default:\n          description: error\n          schema:\n            $ref: \"models.yaml#/definitions/error\"\n  /{id}/{choice_id}:\n    parameters:\n      - type: integer\n        format: int32\n        name: id\n        in: path\n        required: true\n      - type: integer\n        format: int32\n        name: choice_id\n        in: path\n        required: true\n    put:\n      tags: [\"polls\"]\n      operationId: voteChoice\n      responses:\n        '200':\n          description: OK\n          schema:\n            $ref: \"models.yaml#/definitions/poll\"\n        default:\n          description: error\n          schema:\n            $ref: \"models.yaml#/definitions/error\"\nThis is models.yaml:\nswagger: '2.0'\ndefinitions:\n  poll:\n    type: object\n    required:\n      - question\n      - choices\n    properties:\n      id:\n        type: integer\n        format: int32\n        readOnly: true\n      question:\n        type: string\n        minLength: 1\n        maxLength: 200\n      pubDate:\n        type: string\n        format: date-time\n        readOnly: true\n      choices:\n        type: array\n        items:\n          $ref: '#/definitions/choice'\n  choice:\n    type: object\n    required:\n      - choiceText\n    properties:\n      id:\n        type: integer\n        format: int32\n        readOnly: true\n      choiceText:\n        type: string\n        minLength: 1\n        maxLength: 200\n      votes:\n        type: integer\n        format: int32\n        readOnly: true\n  error:\n    type: object\n    required:\n      - message\n    properties:\n      code:\n        type: integer\n        format: int64\n      message:\n        type: string\nI run:\n$ swagger generate client -f swagger.yaml -t ./restclient\n2017/10/04 09:20:17 building a plan for generation\n2017/10/04 09:20:17 planning definitions\n2017/10/04 09:20:17 planning operations\nobject has no key \"choice\"\nWhat gets me confused is that I'm using these same files in the server (dynamic API, not using code genration), and it reads the definitions just fine.\nAnd that's all I know at this point.\nThanks for your help.. Looks like is the same problem you have when run flatten:\n$ swagger flatten swagger.yaml\n2017/10/04 14:44:17 schema analysis [#/definitions/poll/properties/choices]: object has no key \"choice\"\n(I've been reading the client generation and it does expand/flatten; doesn't it?). Looking at the schema I posted, if I inline the Choice schema instead of using a reference in the choices array of Poll; flatten works OK (the resulting JSON looks fine, although \"x-go-gen-location\": \"models\" doesn't seem to be consistent.\nWhen I try to generate the client with these YAML files, Swagger doesn't report any error, but the models aren't generated either.\nWhen I use --dump-data flag, I can see \"Models\" is null, although \"IncludeModel\" is true. Perhaps that should trigger an error.\nEDIT: actually, I used the result of flatten with generate and the client seems fine (the models look OK). I can't reproduce that success when I use the client generation straight with the YAML file that has the inlined Choice schema.. Generate client doesn't resolve external references as it is; my previous comment re: expand was red herring (expand is called when the Spec is validated prior to generation).\nSo there's no way it'll work without running flatten first (and then there's an error that I avoided by inlining Choice definition), and that requires using an intermediate JSON file. Summing up: you can't generate a client with a YAML file that has external refs in the definitions.\n@EleanorRigby Can you confirm I'm in the right path? Thanks!. @EleanorRigby thanks for you help!\n\n--skip-flatten flag is not available in swagger 0.12.0 (?), which version should I be using? \nthis is a PoC for a larger project and we were hopping to work with the YAML file, using shared definitions in different API endpoints (that's why we are exploring refs to external files); currently our working solution uses the mixin approach, that means we work with YAML but in practice we consume the \"mixed\" JSON file. The YAML files are OK to share with 3rd party to generate clients in other languages.\nwe're using the dynamic API approach at the server; so no code generation there. I'm confused because the YAML file I posted here seems to work on the server just fine (?). I may be missing something here or the definitions are processed differently.\n\nUnfortunately I can't suggest a solution. The time I've spent reading go-swagger code I found it a bit complicated; I miss more consistent logging, currently is quite hard to follow what's going on if you're not familiar with the codebase.\nAt a very high level, flatten + expand sounds like a reasonable strategy, but flatten should detect when a definition includes a reference to another definition; perhaps running expand on any spec referenced by the main Spec could do it (so Choice would be inlined automatically, right?).. Thanks for your explanation, really appreciated.\nI have a requirement of being able to build from source in a reliable and predictable way, so using \"dep\" helps because I can pin commits on go-swagger dependencies (that are currently floating; so if you build go-swagger 0.12.0 now, you won't get the same binary/features than when it was released).\nI downloaded the binary version of 0.12.0 and the git commit reported doesn't match the commit tagged as 0.12.0; plus the floating dependencies, I can't use it because when we hit an issue we don't really know what's going on.\nFor example, building 0.12.0 recently, out spec didn't work anymore because of this:\nhttps://github.com/go-openapi/spec/commit/5a4a1e94454f878ce1e1fefff23ea10bd5dd5110\nSo we really need to use \"dep\" to pin the version of the dependencies.\nI think is reasonable to expect the version command to behave correctly when building from source, even if there's no git information available. I understand it's not a priority for the project right now, but I'd love if you considered including it in your roadmap.. ",
    "Davejkane": "if I run swagger generate spec -o ./swagger.json in the fixtures/goparsing/petstore folder, I don't get any paths or types in the generated spec file. What am I missing?. So the issue appears to be, that if the first comment line, which starts with the name of the type, ends in a period, then the entire line will be used as the model title, but if there is no period then the line will be used as the description. This must be a bug, no? I would like to be able to end my sentences with a period without having the entire comment line used as the name of the model in the models section of the swagger-ui. . ",
    "maxatome": "Done #1069. @michaelf-stratoscale in my main() func I have:\ngo\nhandler, err := restapi.Handler(restapi.Config{...})\nif err != nil {\n  logrus.Fatal(err)\n}\nthen I chain this handler to a more generic one that handles authentication, request signature, logs and so on:\ngo\nhandler = GenericMiddleware(handler, GenericMiddlewareConfig{...})\nIn this generic middleware, I log incoming requests, their method, path, status, duration.\nLater I can analyse these logs to know how much time is spent in this method or this other one...\nBut the Request.Path is not a good input for comparing routes amongst themselves. On the other hand, the route.PathPattern is a good input, as it does not depend on user parameters.\nTo access this route.PathPattern, I need the api.Context() and so the api instance.\nIn my case, with this PR, I could do:\ngo\nhandler, api, err := restapi.HandlerAPI(restapi.Config{...})\nif err != nil {\n  logrus.Fatal(err)\n}\nhandler = GenericMiddleware(handler, GenericMiddlewareConfig{\n  CanonicalizePath: func(req *http.Request) string {\n    route, ok := api.Context().LookupRoute(req)\n    if ok {\n      return route.PathPattern // /pet/{id} here\n    }\n    return \"\"\n  },\n  ...\n})\nSo my log feature in my generic middleware just have to call the CanonicalizePath closure with the request to get the path pattern from the request it currently handles...\nPerhaps you know another way to achieve this?. @michaelf-stratoscale I tested it on my side and I didn't see any problem.. I just signed the commit. ",
    "arielt": "Fixed with\n9b4f0447639d5d12b8e9f7049d658fbdb0847e77\n1d34bb5f487c713fd55962b51346cb0e336d42c2. looks like circleci resources problem. let me recreate the request. From what I saw it depends if you have openapi runtime in GOPATH during the code generation.\nPut github.com/go-openapi/runtime in GOPATH, run codegen again and it should work.. ",
    "evillemez": "Agreed... it took me a little bit to realize what was happening, I just assumed that was how it worked, but apparently not.  At the moment, I have internal types that are bleeding out into the documentation as a result.. ",
    "pault84": "@fredbi i don't think so. i'm getting documentation for a timestamp from another package that's not mine. because i use -m. i can't really go and change that package with :ignore. solved this by using schema and referencing generated model directly.. based on this:\nhttps://github.com/go-swagger/go-swagger/issues/960\ni figured map[string]string would be supported.\n. hmm looks like changing parameter to model worked?. after changing it to Model.\n\"GroupSnapCreateRequest\": {\n      \"type\": \"object\",\n      \"title\": \"GroupSnapCreateRequest specifies a request to create a snapshot of given group.\",\n      \"properties\": {\n        \"Labels\": {\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"type\": \"string\"\n          }\n        },\n        \"id\": {\n          \"description\": \"group id\",\n          \"type\": \"string\",\n          \"x-go-name\": \"Id\"\n        }\n      },. ",
    "nlsun": "I'm not sure if there's a better way, but I got it to work by setting the in the Parent\nrequired: [ \"child\" ]\nThis then in turn satisfies the requirement that \"child\" is a default that requires \"key\". Actually, that didn't work, it turns out I accidentally had the required commented out. Any thoughts?. hmm it only seem like it works if i set it all the way in the default:\nParent:\n  default: {\"child\": { \"key\": \"value\" }}\n  properties:\n    child:\n      $ref: '#/definitions/Child'\nChild:\n  default: {\"key\": \"value\"}\n  required: [ \"key\" ]\nThis is the only way i could get it to work. Also, setting required in Parent didn't seem necessary with the above. However, setting the default in Child was necessary.\nHowever, I was actually just aiming to set the zero values and it seems \"x-nullable\" fits the bill there. And x-nullable doesn't have this baggage that \"required\" does.\nAre all the various flags documented somewhere? or is there a part of the code that is a good reference for this?. But if I don't set \"x-nullable\" then won't the \"omitempty\" in the struct remove the field when marshalling the json if it's the zero value?\nFor example if the default for an int is 1, if it is input as 0, then won't the default will kick in and set it to 1 (the default)?. Ok, I think I've got it sorted out now, thanks.. ",
    "YGuyomar": "Arielt,\nThanks for your comment. You are right. That solves the issue, although I usually avoid installing packages globally. \nOther option: generating code again after having vendored dependencies (including go-openapi/runtime) works too. \nI did not expect such dependency for code-gen (only for build), maybe it could be documented somewhere, or the template could be updated.\nWhat is strange is that other go-openapi packages are properly imported, except this particular one.\n. Sure,\nMine looks like this:\nimport:\n- package: github.com/go-openapi/errors\n- package: github.com/go-openapi/loads\n- package: github.com/go-openapi/runtime\n  subpackages:\n  - flagext\n  - middleware\n- package: github.com/go-openapi/spec\n- package: github.com/go-openapi/strfmt\n- package: github.com/go-openapi/swag\n- package: github.com/go-openapi/validate\n- package: github.com/jessevdk/go-flags\n  version: ^1.2.0\n- package: github.com/tylerb/graceful\n  version: ^1.2.15\nIt works fine as soon as vendoring has been done. \nProblem is:\n- you need to code-gen once --> compile error\n- vendor\n- code-gen again --> ok now it works\n. ",
    "smacker": "oops. master merged. Do I understand right that it should be like:\n```go\ntype Int64 int64\ntype MyModel struct {\n    // swagger:alias\n    // min: 10\n    IntField Int64 json:\"intField\"\n}\n``\nfor any struct and behavior by default for structs annotated withswagger:params`?. good. thanks for the clarification. I'll try to implement it later.. Thank you sir!. ",
    "gaurav-narra": "@casualjim thanks for the reply. \nAdded in: body\n// swagger:parameters Request\ntype Request struct {\n  //in:body\n  Arr []Ele `json:\"arr,omitempty\"`\n}\nIt's generating correctly, but when I have two array parameters\n``\n// swagger:parameters Request\ntype Request struct {\n  //in:body\n  Arr []Ele1json:\"arr,omitempty\"`\n//in:body\n  Arr []Ele2 json:\"arr,omitempty\"\n}\n``\nNow i'm getting an error:Operations must have no more than one body parameter`\nCan you refer me to the documentation that would be of help?. ",
    "mmmguitar": "New to go-swagger but I've also run into this issue and had a quick look into the code.  Long story short, the problem ultimately is with the go-openapi router + middleware collapsing the path security []map into just an [] of unique requirements, go-swagger then implements this / has to. \nShort story long... The go-openapi which go-swagger depends on defines a struct model for a swagger spec, take a look at spec.Operation which has a spec.OperationProps which seems to define the properties on the route path.\nspec.OperationProps defines security prop as an \"[]map[string][]string\"\nThis matches with the swagger spec / documentation, i.e there are a list of acceptable maps of security definitions + scopes, the list is the OR part and the map is the AND part.\nWhere this seems to go wrong / get lost is in the go-swagger analyzer, take a look at analysis.SecurityRequirementsFor:\n////\nschemes = operation.Security\n////\nunique := make(map[string]SecurityRequirement)\nfor _, scheme := range schemes {\n    for k, v := range scheme {\n        if _, ok := unique[k]; !ok {\n            unique[k] = SecurityRequirement{Name: k, Scopes: v}\n        }\n    }\n}\nvar result []SecurityRequirement\nfor _, v := range unique {\n    result = append(result, v)\n}\nreturn result\n////\n\nIt takes the []map and squashes it down into a flat array of \"unique\" security requirements, destroying the grouping.  Really here it should return a [][]SecurityRequirement.  However, worse still go-swagger depends on the go-openapi runtime / middleware / router and that to my eye seems broken / explains why it is doing it.\nIn go-openapi middleware package router.go, the middleware.AddRoute function, it takes the go-swagger analazyer implementation similar to above  [edit: its not the same function, but similar] and gets the security definitions as an array, and then goes on to match Authenticators for them which I suspect are created by the securityDefinitions:.\nfunc (d *defaultRouteBuilder) AddRoute(method, path string, operation *spec.Operation) {\n////\n////\n    requirements := d.analyzer.SecurityRequirementsFor(operation)\n////\n    record := denco.NewRecord(pathConverter.ReplaceAllString(path, \":$1\"), &routeEnt\n////\n        Authenticators: d.api.AuthenticatorsFor(definitions)\n////\n}\n\nThat seems just wrong / it should be supporting the list of map here. Having a look at the middleware context.go, middleware.Authorize:\nfor scheme, authenticator := range route.Authenticators {\n    applies, usr, err := authenticator.Authenticate(&security.ScopedAuthRequest{\n        Request:        request,\n        RequiredScopes: route.Scopes[scheme],\n    })\n    if !applies || err != nil || usr == nil {\n        if err != nil {\n            lastError = err\n        }\n        continue\n    }\n    if route.Authorizer != nil {\n        if err := route.Authorizer.Authorize(request, usr); err != nil {\n            return nil, nil, errors.New(http.StatusForbidden, err.Error())\n        }\n    }\n    rCtx = stdContext.WithValue(rCtx, ctxSecurityPrincipal, usr)\n    rCtx = stdContext.WithValue(rCtx, ctxSecurityScopes, route.Scopes[scheme])\n    return usr, request.WithContext(rCtx), nil\n}\n\nYou can see it loops through the Authenticators and if one applies and is valid, the authorizer is then questioned with the principal and the route continues or errors.  So its doing the OR part on a flattened security definition.  \nThis isnt just broken, its actually dangerous as if any sub part of the auth passes, the route will pass / be hit.\nSo looks like a fix to go-openapi is needed to handle the []map and then a fix to go-swagger is needed to implement it.  First one seems a bit tricky as the router / routes are fairly involved, the second one is simple enough apart from you need to change the codegen which looks fairly involved / steep looks learning curve.. https://swagger.io/docs/specification/2-0/authentication/  (see Using Multiple Authentication Types)\nYeah 2.0, you can see in current vendored go-openapi code for go-swagger the spec.OperationProps struct has a [] of map[], so its in the model, it just the router fails to implement it and that has a knock on effect on the API that go-swagger implements.\nThe change looks fairly reasonable except for the fact one principal to rule them doesnt really cut it.  A    typed map[string]interface[] to map security definition id -> principals for whichever security group passes map be a reasonable strategy, could simplify if there was only 1 requirement / return just the principal .  \nWhatever changes though this doesn't interact well with the -P option where you can define a specified principal, something clever with codgen may work.. @casualjim, just noticed this sorry,  may well be my lack of understanding but the principle returned relates to what auth'd it doesnt it?  So for example, if you specify an API key auth it returns the key as the principle, or if you do a JWT token it returns the JWT token as the principal from which you can extract things.\nSo where you have the AND logic, API key and JWT token -> what gets returned as the principal there? Wouldn't the principle be a combination of the two?\nedit:\nLooking at the route authentication in the go-openapi/runtime repo middleware/router.go\nAs far as I read how this works, the RouteAuthenticator as the comment says \"Contains a group of 1 or more authenticators that have a logical AND relationship\"\nChecking the RouteAuthenticator Authenticate func it loops through the matching authenticators for the scheme, if any match fails the Authenticate func returns false ->  implements the AND logic -> that makes sense.\nHowever, for each matched/sub authenticator that passes it saves the returned principal in a \"lastResult\" var which overwrites the previous authenticators principal.  Its the last result var that is return if authenticator passes all.\nThis means if a route has multiple AND authenticators, each one produces a principal but only the last is returned for the group. The problem here is its not a unique principal or identity for the route / group of authenticators, i.e. returning partial information.\nFor example, two routes that have \"OAuth AND api key\" security. One route has OAuth[\"AAAA\"] + Apikey[\"MyApp\"] -> returns \"MyApp\" as the principal but a second route may have OAuth[\"BBBB\"] + Apikey[\"MyApp\"] -> returns \"MyApp\" as the principal, i.e. they both return the same principal but they both use very different OAuth, AAAA vs BBBB, the identity here is not unique / representative of the security definition.\nThe second knock on effect / bug here as well would be the principal returned would depend on the order you specify the security condition, i.e. API key + OAuth -> you get the OAuth token as the principal, but specify the same things the other way round as OAuth + API Key -> this time you'd get the API key as the principal.  The authentication is the same, but depending on the order, you'd get a different principal.\nTo get a unique principal, it makes sense to me it should return a map of authenticatorID::principal where the map is the \"principal\" for the group of authenticators.  It will identify the principal for the group as a whole / the AND relationship.\nIn go-swagger I imagine the handlers could then access the parts of the principal / authentication they need, for example, if a route did have OAuth + API key if they care about an API key / some header info and/or Oath claims they can access both from the principal return.  Returning just the principal for a route with 1 authenticator / no map I imagine would be important to maintain most backwards compatibility.\n((without trying to confuse the issue there seems to be a potential unrelated bug too, for the authenticator return it checks the !applies before the err check.  If it it doesnt apply it returns false for the overall Authenticate return, if there was an err it sets the authenticator into the struct and returns true for the overall return with the err.\nThe problem being if an authenticator did have an error / returned an err I strongly suspect a default value of false could be returned from the authenticator -> hits the !applies and return false overall rather hitting the err handling which would sets the authenticator and returns the opposite, true.  Makes sense to me they should be swapped / err checked first but there may be a reason here)). Hey, just wondering if that 0.15.1 release mentioned above is still planned for?  We're on 0.15.0 but are a little reticent upgrading to the 0.16.0, seems to be a few issues and certainty one is breaking us immediately (https://github.com/go-swagger/go-swagger/issues/1683 but its a simple workaround).  Whenever we roll containers over / upgrade etc they panic on shutdown / I can see the fix in here.  \nThanks.. ok, thanks.. We had this related issue which was fixed, https://github.com/go-swagger/go-swagger/issues/1089 but it left over an issue which I delved into a little in the comments.\nMy end reply gets a little long (sorry), assuming the code hasn't changed the issue is more on this line : https://github.com/go-openapi/runtime/blob/1c997f7e69df84d5c13222f6491841512b5f45ea/middleware/router.go#L196\nIt loops through the AND conditions in the map, for each one it authenticates and if ok it will save the principal in the lastResult var.  Problem being each loop / part of the AND condition will overwrite that var and so only the last one checked is returned, which with a map is blind luck.\nGiven these authenticators are generic and being stitched together with some higher level logic, it seems sensible to me the returned principal for the AND group is effectively the aggregation of all the principals.  \nSo lastResult should really be a map[string]interface{} which every authenticator in the AND group can map scheme  -> principal and its the whole thing returned for the route.\n. ",
    "gavbaa": "This isn't about having two principals, it's about the single principal system requiring two auth tokens to validate access.  In this case, \"ApiKeyAuth\" as the Swagger Authentication documentation describes it.. ",
    "rodriguise": "I think the simplest solution here would be to have a final catch all method that would take the array of principals returned from the various methods that could combine then and return the final principal.. @gregmarr awesome suggestion, much cleaner. Though I think my suggestion maybe as simple as using a custom template:\nhttps://goswagger.io/generate/templates.html\nI have to investigate and will close this if I come to a conclusion.\n. Closing as custom templates worked for this.. You can\u2019t override tags on $refs, so if you need to set tags on a property that is also a struct this would be the only way to do it. . ",
    "qingbozhang": "Thanks. The problem has resolved. ",
    "johnptoohey": "Actually copied the go code from https://github.com/go-swagger/go-swagger/blob/master/docs/generate/spec/meta.md and placed it in a doc.go file. Still get the same error as from my own code. . I created an empty repo and added a single doc.go file to it. Added to same package comment and then ran \nbash \n$ swagger generate spec -o ./swagger.json\nThis worked but if I use \nbash \n$ swagger generate spec -o ./swagger.json -i doc.go\nI get the same error as before. Am I using the input file parameter properly?\n. Is it possible to restrict it to just look at certain files? If I run it in my actual project repo, its generates 100s of errors from my imported packages. My Swagger annotations will only be in two files, doc.go and rest .go. . So I can exclude third-party libraries with annotations in my code? or do you mean that the swagger generator would need to be updated?. This is typical of the errors I see when I run Swagger on my project:\nhypatia-go/src/github.com/gorilla/mux/context_native.go:6:2: could not import context (cannot find package \"context\" in any of:\n    /usr/local/go/src/context (from $GOROOT)\n    hypatia-go/src/context (from $GOPATH))\nhypatia-go/src/github.com/gorilla/mux/context_native.go:7:2: could not import net/http (cannot find package \"net/http\" in any of:\n    /usr/local/go/src/net/http (from $GOROOT)\nIs this a configuration issue with my environment?. go version go1.8.3 darwin/amd64. Go and go-swagger both installed on OSX via Homebrew. Everything is standard, and my code functions correctly.. ",
    "josephspurrier": "I had the same issue on the same version of Go (1.8.3 on macOS). To resolve it, I manually set my GOROOT even though it was already set when I ran go env. There is probably a tool that does not read GOROOT properly.. It looks like this is because of parser.ParseFile() in util.go - it looks like the standard Go parser only uses objects in the package scope. Is there a reason why the generation only works when they are on objects in the package scope?. I was wrong, it didn't have anything to do with the standard Go parser, I just had to make changes to the Parse function in parameters.go. There are still other cases that could be handled from this function, but for the time being, this should suffice. Thanks! Wonderful tool by the way - really awesome!. I'll add some tests so the code coverage doesn't go down. I'm going to add in similar code for the responses as well.. Yeah, give me a couple days and I'll update the pull request. Thanks!. It should be good to go. Let me know if I need to make any changes.. I just tested after the last merge and still the same issue. It doesn't look like pull request 1611 was attempting to fix this issue, but it did have a comment that said it was going to fix this - but it may have just been for reference purposes.. My workaround is currently to do a find and replace until this is fixed:\nhttps://github.com/josephspurrier/gowebapi/blob/master/README.md#generate-swagger-spec. ",
    "asciiu": "Same problem here. Installed go via homebrew. Setting GOROOT=/usr/local/opt/go/libexec has solve the issue. \n. ",
    "drbh": "homebrew caused the issue on my computer. \nI uninstalled and used go get to get swagger binary from master\nbrew uninstall go-swagger\ngo get -u github.com/go-swagger/go-swagger/cmd/swagger. ",
    "johncoleman83": "I had the same issue.\nbash\n$ swagger generate --output=../../logs/swagger.log spec --output=./swagger.json --scan-models\nthrew 100's of errors like:\nbash\ncould not import XXXXXXX (cannot find package XXXXXXX in any of:\n... (vendor tree)\n... (from $GOPATH)\n... (from $GOROOT)\nI followed @drbh suggestion to uninstall version from homebrew and then use the binary from go get, then I executed the same command from the same path:\nbash\n$ ~/go/bin/swagger generate --output=../../logs/swagger.log spec --output=./swagger.json --scan-models\nThis was then successful for me.  I believe it was already mentioned but, the option --input= is for something like a yaml input not a go file.  go swagger found the api main.go file when I executed from the directory of the main.go file.. ",
    "hemstreet": "Same issue here, I've tried uninstalling via brew and installing the binary. No luck. Perhaps i'm missing something? It compiles and runs just fine. It only errors out when trying to generate a swagger doc that was just working ( up until installing the mailgun module )\nSwagger does seem to have an exclude flag but no real description of how it works, just that it's a []string\nTrying to run the following command ( my attempt at tinkering with the exclude path / hoping it was regex ):\nswagger generate spec -o ./assets/swagger/swagger.json --exclude=\"(github)\"\nGetting the following errors:\nJons-MacBook-Pro:up-api-app jonhemstreet$ ./generate-swagger.sh \n/Users/jonhemstreet/go/src/github.com/mailgun/mailgun-go/events.go:8:2: could not import github.com/mailgun/mailgun-go/v3/events (cannot find package \"github.com/mailgun/mailgun-go/v3/events\" in any of:\n        /usr/local/go/src/github.com/mailgun/mailgun-go/v3/events (from $GOROOT)\n        /Users/jonhemstreet/go/src/github.com/mailgun/mailgun-go/v3/events (from $GOPATH))\n/Users/jonhemstreet/go/src/github.com/mailgun/mailgun-go/events.go:232:23: invalid operation: ep.it (variable of type *EventIterator) has no field or method Paging\n/Users/jonhemstreet/go/src/github.com/mailgun/mailgun-go/events.go:262:9: invalid operation: ep.it (variable of type *EventIterator) has no field or method Paging\n/Users/jonhemstreet/go/src/github.com/mailgun/mailgun-go/events.go:134:8: invalid operation: ei (variable of type *EventIterator) has no field or method Paging\n/Users/jonhemstreet/go/src/github.com/mailgun/mailgun-go/events.go:137:28: invalid operation: ei (variable of type *EventIterator) has no field or method Paging\n/Users/jonhemstreet/go/src/github.com/mailgun/mailgun-go/events.go:141:35: invalid operation: ei (variable of type *EventIterator) has no field or method Items\n/Users/jonhemstreet/go/src/github.com/mailgun/mailgun-go/events.go:142:12: invalid operation: ei (variable of type *EventIterator) has no field or method Items\n/Users/jonhemstreet/go/src/github.com/mailgun/mailgun-go/events.go:119:28: invalid operation: ei (variable of type *EventIterator) has no field or method Paging\n/Users/jonhemstreet/go/src/github.com/mailgun/mailgun-go/events.go:123:35: invalid operation: ei (variable of type *EventIterator) has no field or method Items\n/Users/jonhemstreet/go/src/github.com/mailgun/mailgun-go/events.go:103:28: invalid operation: ei (variable of type *EventIterator) has no field or method Paging\n/Users/jonhemstreet/go/src/github.com/mailgun/mailgun-go/events.go:107:35: invalid operation: ei (variable of type *EventIterator) has no field or method Items\n/Users/jonhemstreet/go/src/github.com/mailgun/mailgun-go/events.go:85:28: invalid operation: ei (variable of type *EventIterator) has no field or method Paging\n/Users/jonhemstreet/go/src/github.com/mailgun/mailgun-go/events.go:89:35: invalid operation: ei (variable of type *EventIterator) has no field or method Items\n/Users/jonhemstreet/go/src/github.com/mailgun/mailgun-go/events.go:90:12: invalid operation: ei (variable of type *EventIterator) has no field or method Items\ncouldn't load packages due to errors: github.com/mailgun/mailgun-go\nEdit:\nWas referencing this to find it was a []string \nEnvironment:\ngo version go1.11.4 darwin/amd64\nOS: Mac\nSwagger Version: v0.18.0\nEdit of the Edit:\nFound the problem after starting at it for a second, regardless of which way i installed it ( go or brew ) it was giving me the same issues. The big thing for me was to make sure i had my environment variable of GO111MODULE=on set.\nMy bash script ended up looking like this:\nGO111MODULE=on swagger generate spec -o ./assets/swagger/swagger.json. All is happy!. ",
    "ianzapolsky": "Update: Upon further inspection, it seems that this issue is only present when I call swagger generate on a swagger spec file that is the result of the swagger flatten command.\nFor those coming by with a similar issue, I solved the problem by using another open-source swagger file flattener utility: https://github.com/mohsen1/multi-file-swagger-example. \nOnce I replaced swagger flatten with a call to this tool in my Makefile, my project built with the generated code I was expecting, with all child object validations present.. ",
    "antonovvk": "Hi! Got a similar issue with missing Validate() call for body elements when body is an array of structs.\nGenerated code looks like:\n```\nif runtime.HasBody(r) {\n    defer r.Body.Close()\n    var body phraser_models.AddIntentsParamsBody\n    if err := route.Consumer.Consume(r.Body, &body); err != nil {\n        if err == io.EOF {\n            res = append(res, errors.Required(\"body\", \"body\"))\n        } else {\n            res = append(res, errors.NewParseError(\"body\", \"body\", \"\", err))\n        }\n} else {\n    // Validation is missing here!\n\n    if len(res) == 0 {\n        o.Body = body\n    }\n}\n\n} else {\n    res = append(res, errors.Required(\"body\", \"body\"))\n}\n```\nValidation of body elements is missing, and if method gets parameters with required field missing it just panics on nil pointer.\nIf validation is placed here:\n```\nif runtime.HasBody(r) {\n    defer r.Body.Close()\n    var body phraser_models.AddIntentsParamsBody\n    if err := route.Consumer.Consume(r.Body, &body); err != nil {\n        if err == io.EOF {\n            res = append(res, errors.Required(\"body\", \"body\"))\n        } else {\n            res = append(res, errors.NewParseError(\"body\", \"body\", \"\", err))\n        }\n} else {\n    // Here's what was missing:\n    for _, io := range body {\n        if err := io.Validate(route.Formats); err != nil {\n            res = append(res, err)\n            break\n        }\n    }\n\n    if len(res) == 0 {\n        o.Body = body\n    }\n}\n\n} else {\n    res = append(res, errors.Required(\"body\", \"body\"))\n}\n```\nAll checks run smooth.\nI assume that there's a bug here in templates.\nIf we use different line, like this:\n{{ if .IsArray }}{{ if .ElemType }}{{ if (and (not .ElemType.IsInterface) (or .ElemType.IsAliased .ElemType.IsComplexObject)) }}for _, {{ .IndexVar }}{{ .ReceiverName }} := range body {\n(which seems legit because we have an array, which can't have children but has elements)\nall is generated fine and works.\nThis workaround can be applied if the fixed template file is placed in some folder (for example fixed_templates/server/parameter.gotmpl)\nand swagger binary is called with --template-dir option:\nswagger generate server --template-dir ./fixed_templates -f swagger.yaml ...\n. ",
    "tonyxiao": "Confirmed latest master fixes it, thanks and closing!. ",
    "petemyron": "I cloned the repo, checked out the latest commit explicitly in master (just to be sure, since just cloning the repo and building also didn't work), ran go build and swagger version still shows the same commit id: \n\u279c  git checkout c2a7c881ef89c08a33a18783b4a5c6f6329a0473\nHEAD is now at c2a7c88... replace gorilla/context with net.Context (#1090)\n\u279c  go build\n\u279c  swagger version\nversion: 0.10.0\ncommit: 4d1e79b5a98c6f67bbf06923643d5317ed37a058\nI'm sure I'm doing something wrong since I still get the errors mismatch mentioned above. Any hints?. I wound up solving the issue by copying one of the included examples near the line for the respective error, but not sure why my code still isn't generating correctly.\nFYI, the code in question is in the ServeHTTP func, needed to add rCtx:\nroute, rCtx, _ := o.Context.RouteInfo(r)\n    if rCtx != nil {\n        r = rCtx\n    }. ",
    "RajdeepSardar": "Dear All,\nI am having similar trouble. Please suggest.\nswagger version: 0.12.0\ncommit: 8135eb6728e43b73489e80f94426e6d387809502\ngo version go1.8.3 linux/amd64\nubuntu 14.04 LTS\nI am using following command\n/usr/local/bin/swagger generate server -t gen -f ./spec/swagger.yml --exclude-main -A [AppName] -P [principal]\nthanks and regards,\nRajdeep. ",
    "cswarth": "I think this is fixed in the latest release,\n```\n$ swagger version\nversion: 0.12.0\ncommit: 8135eb6728e43b73489e80f94426e6d387809502\n$ swagger validate spec.json\nThe swagger spec at \"spec.json\" is invalid against swagger specification . see errors :\n- .swagger in body is required\n- .info in body is required\n$ swagger generate server -t servers/go\nThe swagger spec at \"swagger.json\" is invalid against swagger specification . see errors :\n- .swagger in body is required\n- .info in body is required\n```\n. ",
    "vbence": "@cswarth you are talking about validating the spec, the issue is about the generated server doing validation on http request bodies.. @fredbi This seems fixed now in the current \"dev\" version. I am not getting the extra validation code anymore:\n```\n// Validate validates this get pets o k body\nfunc (m *GetPetsOKBody) Validate(formats strfmt.Registry) error {\n    var res []error\nif err := m.validateTag(formats); err != nil {\n    // prop\n    res = append(res, err)\n}\n\nif len(res) > 0 {\n    return errors.CompositeValidationError(res...)\n}\nreturn nil\n\n}\nfunc (m *GetPetsOKBody) validateTag(formats strfmt.Registry) error {\nif err := validate.Required(\"tag\", \"body\", m.Tag); err != nil {\n    return err\n}\n\nreturn nil\n\n}\n```. ",
    "protheusfr": "Same issue here, I've generated a go server with a spec containing for ex this kind of parameters :\nparameters:\n      - name: UUID\n        in: path\n        description: \"People UUID\"\n        required: true\n        type: string\n        format: uuid\nMy restapi/operations/object_name contain some generated type like :\n```\ntype GetUserPreferencesParams struct {\n// HTTP Request Object\nHTTPRequest *http.Request `json:\"-\"`\n\n/*People UUID\n  Required: true\n  In: path\n*/\nUUID strfmt.UUID\n\n}\n```\nAnd strfmt.UUID is well defined in GitHub.com/go-openapi/strfmt/default.go with : \n// UUID represents a uuid string format\n//\n// swagger:strfmt uuid\ntype UUID string\n...\n// IsUUID returns true is the string matches a UUID, upper case is allowed\nfunc IsUUID(str string) bool {\n    return rxUUID.MatchString(str)\n}\n...\nUUIDPattern = `(?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$`\n...\nBut the following code return alway nil with a good UUID or a bad one : \n```\nfunc (o *GetUserPreferencesParams) bindUUID(rawData []string, hasKey bool, formats strfmt.Registry) error {\n    var raw string\n    if len(rawData) > 0 {\n        raw = rawData[len(rawData)-1]\n    }\nvalue, err := formats.Parse(\"uuid\", raw)\nif err != nil {\n    return errors.InvalidType(\"UUID\", \"path\", \"strfmt.UUID\", raw)\n}\no.UUID = *(value.(*strfmt.UUID))\n\nreturn nil\n\n}\n```\nThen trying to call API with a god or bad UUID format produce the same result :/\nAnything to do to force formats checking ?. @fredbi I will do and keep you in touch, thank you for your response.. Hello @fredbi from what I understand you've merged your fix in the master branch on 16th Jan.\nThen I assume I can test simply by updating my go-swagger via go get -u github.com/go-swagger/go-swagger/cmd/swagger.\nThen I've regenerated my server via bin/swagger  generate server -A postier -f ./swagger.yml.\nThis has updated some files, adding some with a strange name like notify_new_a_d_e_l_i_mail_parameters.go in place of notify_new_adelimail_parameters.go then I've deleted the old ones (in this example notify_new_adelimail_parameters.go).\nDespite all these changes, during my tests, when I try to get a parameter with bad UUID format (in URL), no error is raised :(\n. I confirm my parameter is required : \nparameters:\n      - name: UUID\n        in: path\n        description: \"People UUID\"\n        required: true\n        type: string\n        format: uuid\nbut despite that, the format aren't validated.\nAnyway I can wait next week for merging of the new go-openapi/validate in the vendor tree.\nFor \"strange\" naming (with is not an issue) what is strange is just that the names has changed after go-swagger upgrade and without any change in the spec.\nMany thanks for your time.. Anyhow, the plan with #1372 is to provide a more comprehensive support for simple params, including arrays, nested arrarys and default values for which there are many issus currently.\nFrom master or fredbi:909-fix-validate-format-for-simple-param ?. ",
    "lexnicolaes": "Bump... no one?. ",
    "nsalwan": "I am having the same problem.\n@lexnicolaes were u able to figure out?\n@casualjim please help.. ",
    "valerykalashnikov": "Thanks a lot for your response!\nFor me it wasn't obvious behavior and I didn't find any info in documentation about it. Maybe it would be better to describe such case, for example in this chapter ?. ",
    "rzajac": "Where is the documentation for the thick body:order?. ",
    "taylageben": "Thanks so much! Managed to get it working!. If you add the --skip-validation flag only one of the getByID operations will be generated. ",
    "nlimpid": "I am sorry that I am wrong. The problem remains and can be reproduction with which I mention, but the real problem is \"operationId\" can't be Chinese characters.\nIt's a problem but I think it is not important, so I choose to close this issue.. ",
    "taaraora": "responses:\n        '200':\n          description: OK\n          schema:\n            type: array\n            items:\n              $ref: \"#/definitions/item\"\nIs this what you did ask for?. ",
    "ilinamitra": "Hi there, \nIs this still the best way to add a Prometheus endpoint to a generated server? I'd really love to simply associate a \"/metrics\" endpoint with the promhttp.Handler that's already available (https://godoc.org/github.com/prometheus/client_golang/prometheus/promhttp#Handler). Is the only way to do so via middleware? \nThanks,\nIlina. P.S. Unless I remove the Copyright line, I receive the following error:\ncan't evaluate field Copyright in type *generator.GenOperation. Update: It seems if I include all the .gotmpl files in templates/server, templates/client, and templates/validation, and then modify the templates/client/parameter.gotmpl file directly, the changes are included in the generated client code. \nHowever, I'd really like to just have to pass the one parameter.gotmpl file to --template-dir than pull in all the other .gotmpl files (especially since I'm not modifying the other ones).. \nparameter_gotmpl.txt\nYes no problem, All I did was remove the Copyright line, and added an extra comment on line 61 to indicate that the generated code is coming from my template instead of the default.\nAs I mentioned above, my template does get picked up if I include multiple other .gotmpl files under the client, server, and validation directories.\n. Hi @EleanorRigby \nI think I figured out the issue, I had placed the original parameter.gotmpl file under the wrong path. Now I have it under the right path, and no longer need the other .gotmpl files. Apologies for the noise!. I gave that a try, but alas it does not work :( Any other suggestions?. Interestingly enough, I was able to get the following to work:\n```\nparameters:\n  RequestIdParam:\n    name: X-Request-ID\n    in: header\n    type: string\nx-DefaultParameters: \n  parameters: &DEFAULT_HEADERS\n  - $ref: '#/parameters/RequestIdParam'\npaths:\n  /objects:\n      parameters: *DEFAULT_HEADERS\n      get:\n        summary: \"Lists the objects\"\n```\nSo using the alias seems to work fine, it's just using merge that has issues.. ",
    "ChrisCGH": "@casualjim I have defined a /metrics endpoint in my swagger yaml API definition. If I define middleware as in the example above, how can I make my /metrics endpoint serve the metrics generated by the middleware?. @gianarb The way I did this in the end was to use the prometheus/common/extfmt and prometheus/client_golang/prometheus packages directly, to gather the metrics (using prometheus.DefaultGatherer.Gather()) and format a payload string (using expfmt.MetricFamilyToText() in a loop). A bit hacky, but it worked.. How does that help if I want to serve the metrics endpoint on the same port as the rest of the api?. ",
    "gianarb": "i am looking to attach this http.Handle(\"/metrics\", promhttp.Handler()) in some way that the server will expose it. Somebody has an idea? Thanks. I think it is not what I am looking for. I can write a middleware to log all the requests printing the traceId, but what I would like to have is a configured logger inside my handle function.\nSo probably the easy fix is to write a middleware that takes the trace_id and it writes it inside the context request, in this way I can get it back in the handle.. I fixed the issue using the context and a middleware, I passed the trace_id in the context and I got it back in the handle func. ",
    "javierviera": "I think there is a cleaner alternative, as @casualjim mention it is perfectly possible to use middlewares for manage prometheus metrics:\nHere we define a handler:\n```go\npackage server\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"time\"\n\"github.com/cactus/go-statsd-client/statsd\"\n\"github.com/prometheus/client_golang/prometheus\"\n\"github.com/rs/cors\"\nlog \"github.com/sirupsen/logrus\"\n\n)\nvar (\n    namespace = \"collage\"\ncounter = prometheus.NewCounterVec(prometheus.CounterOpts{\n    Namespace: namespace,\n    Name:      \"endpoint_request_count\",\n    Help:      \"collage request count.\",\n}, []string{\"app\", \"name\", \"method\", \"state\"})\n\nhistogram = prometheus.NewHistogramVec(prometheus.HistogramOpts{\n    Namespace: namespace,\n    Name:      \"endpoint_duration_seconds\",\n    Help:      \"Time taken to execute endpoint.\",\n}, []string{\"app\", \"name\", \"method\", \"status\"})\n\n)\ntype metricResponseWriter struct {\n    http.ResponseWriter\n    statusCode int\n}\nfunc newMetricResponseWriter(w http.ResponseWriter) *metricResponseWriter {\n    return &metricResponseWriter{w, http.StatusOK}\n}\nfunc (lrw *metricResponseWriter) WriteHeader(code int) {\n    lrw.statusCode = code\n    lrw.ResponseWriter.WriteHeader(code)\n}\n// SetupHandler enable CORS, handler metrics\nfunc SetupHandler(handler http.Handler, app string) http.Handler {\n    handleCORS := cors.AllowAll().Handler\n    h := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        start := time.Now()\n        lrw := newMetricResponseWriter(w)\n        handler.ServeHTTP(lrw, r)\n        statusCode := lrw.statusCode\n        duration := time.Since(start)\n        histogram.WithLabelValues(app, r.URL.String(), r.Method, fmt.Sprintf(\"%d\", statusCode)).Observe(duration.Seconds())\n        counter.WithLabelValues(app, r.URL.String(), r.Method, fmt.Sprintf(\"%d\", statusCode)).Inc()\n    })\n    prometheus.Register(histogram)\n    prometheus.Register(counter)\n    return handleCORS(h)\n}\n```\nThen we make use of the custom handler:\ngo\nfunc setupMiddlewares(handler http.Handler) http.Handler {\n    return server.SetupHandler(handler, serverConf.App)\n}\nAnd we create a metrics endpoint:\ngo\ngo func() {\n        http.Handle(\"/metrics\", prometheus.Handler())\n        log.Fatal(http.ListenAndServe(\":9292\", nil))\n}(). @ChrisCGH I guess you can as far as you document it in the your api definition (Which I don't think is a good idea). Although I don't see any issue on having it on separate port. I would say it is even better. Imagine you API has some issue and it is not serving requests. Having health and metrics endpoints we can still have metics and health so every ops tool can get better information of our application status and react properly.. ",
    "nseyvet": "@javierviera , @casualjim There is a typo in the example (I think).\nThe method:\nfunc (lrw *metricResponseWriter) writeHeader(code int) {\n    lrw.statusCode = code\n    lrw.ResponseWriter.WriteHeader(code)\n}\nShould be:\nfunc (lrw *metricResponseWriter) WriteHeader(code int) {\n    lrw.statusCode = code\n    lrw.ResponseWriter.WriteHeader(code)\n}\nOtherwise the ResponseWriter.WriteHeader(code) is not fulfilled.\n. ",
    "tamalsaha": "@casualjim, is there any update on openapi 3 support?. ",
    "JunliWang": "@casualjim, check-in again, is there a timeline for openapi 3 support? Or early adoption on another branch?. ",
    "msolimans": "Same here, it fails when I tried to validate, serve works but not perfectly when using oneOf in the response it gave me no response examples.\nAny updates! . ",
    "fenollp": "For validation, Google\u2019s gnostic generates/maintains a schema and some tooling. Hopefully this helps :). ",
    "kappj": "I wanna bump this as all the other tooling I use with my OAS supports V3 now, and this project is the only thing that's keeping me from migrating to OAS 3.. I hadn't, as I didn't know --with-flatten did anything other than resolve $refs. It does work in generating to a models directory.\nIn any case, we were hoping to leverage the models being included in the restapi/operations/* files as we have enough endpoints and schemas that the collective length of filenames and number of files is too large for bash to process. \nWhile this is being fixed, do you know of any way to have the files in models concatenated together?. Correct. Our API is fairly large. . Thanks guys, I'm finding the --with-flatten=full option to be a workable alternative for now. I'll also look into the x-go-name and see what we can do with it.\nIf/when I or someone else working on this API has time, we'll see if we can contribute sometime to help solve this issue properly. . ",
    "Ark-kun": "Does go-swagger support JsonSchema-based OpenAPI specs that use oneOf?. ",
    "philsturgeon": "oneOf is part of OpenAPI v3.0, it does not require JSON Schema-proper in order to do that, just full OpenAPI v3.0. . ",
    "beoran": "How about making use of the work done by this project? https://github.com/getkin/kin-openapi. ",
    "ultimateboy": "This seems like the appropriate way to add support for mongodb ObjectId's. I've tested with a swagger spec that includes:\nyaml\nproperties:\n  _id:\n    type: string\n    format: ObjectId\nThis generates a struct with:\ntype Test struct {\n    ID strfmt.ObjectId `json:\"_id,omitempty\"`\n}. ",
    "ashmckenzie": "Thanks for responding so quickly! :)  When running go get -u github.com/go-swagger/go-swagger/cmd/swagger (as indicated in the README.md), I get the following for 1.8.3:\ngo get -u github.com/go-swagger/go-swagger/cmd/swagger\npackage context: unrecognized import path \"context\" (import path does not begin with hostname)\nInterestingly, after switching to use go 1.7.5 (using goenv) and successfully running go get -u github.com/go-swagger/go-swagger/cmd/swagger, running go get -u github.com/go-swagger/go-swagger/cmd/swagger under go 1.8.3 no longer produces any error output.\nOdd!. Can't reproduce.. . ",
    "mantasmarcinkus": "Yes. I pretty much copied the default config and changed operations to what I described.\nIt works for operations (it finds and does not overwrite). It does not work with customizing models, because it lacks .Package property. Is that by design? Can it be added?. I've got into code and found out that model movement is limited by the information that can be provided in swagger.json configuration file. Schema does not allow to add information (unless it's a hacky way) about model whereabouts (I assume, that models should be shared).  \nBut the #2 issue that i have, is that when I change the directory (with the template) to move operations to a specific folder, imports are not correct in service/restapi/operations/service_api.go file. They are imported in the default way project_name/service/restapi/operations/x.\n@casualjim do you have any ideas where can I find code for this part?. I am trying to achieve this kind of structure:\nservicex\n   - operations\n   - models\n   ...\n   swagger.json\nservicey\n   - operations\n   - models\n   ...\n   swagger.json\nglobal_swagger.json\nBut it seems I won't be able to do it because the models swagger spec part does not contain Tags and cannot be added. Because of this, after generating server from global_swagger.json you cannot use models from different services, but you can reference operations (operations in swagger spec has Tags prop).\n. As I stated above, I already do that successfully, however it causes 2 issues:\n1) Models cannot be generated to different folders (.Package is not defined while generating with custom template (I assume that it is because definitions does not contain Tags)) (shown above)\n2) The imports in service/restapi/operations/service_api.go will point to default location instead of the one in custom template, where I have to change auto generated file (which can be ignored by using skip_exists: true - but then missing the whole auto generated idea?). No. The goal is to merge 2 (or more) already established applications into 1 application.\nP.S. Thank you for answering so quickly. You are correct. It seems that having a middleware and main file might work. I will try doing this. Thank you.. ",
    "manute": "I think the problem is in go-openapi and they have already fixed it https://github.com/go-openapi/runtime/commit/d6605b7c17ac3b1033ca794886e6142a4141f5b0, so updating it will solve the problem. Thanks @casualjim \ud83d\udc4f . ",
    "kairotavares": "Thanks! \ud83d\udc4d . ",
    "scisci": "Alternatively is there a way to restrict the scan models to a specific group of packages?. Ahh yes, adding strfmt base64 fixed it. I didn't know that could be used to tag non-string field.\nThanks. ",
    "knollfear": "For anyone that got here via a google search the answer is \ntype FooResponse struct {\n// X-Foo header\nXFoo string json:\"X-Foo\"\n// ... \n}\nor at least that is what worked for me.. ",
    "thomasjungblut": "It would still be great to have the ability to use a mocking library to assert whether something was called, injecting failure and other nice stuff. . ",
    "sun7927": "For example, go-swagger will generate the code like\nstorage_client.go\npackage storage\nimport (\n    \"github.com/go-openapi/runtime\"\n    httptransport \"github.com/go-openapi/runtime/client\"\n    strfmt \"github.com/go-openapi/strfmt\"\n\"../../projects/myself/ui/tools/client/storage/filesystem/authentication\" \"../../projects/myself/ui/tools/client/storage/block/authentication\"\n)\n\"storage/filesystem/authentication\" and \"storage/block/authentication\" are also generated by go-swagger. However, they are imported into storage_client.go in a bad way which can't work without patching.. The workaround is:\n   1. set GOPATH\n   2. set the target to $(GOPATH)/src/github.com/your_project. Yes, it makes sense to me. As my project is going to be published to github.com, I added github.com ahead of company/project. After it, I can generate the code with correct import like \"github.com/my_company/my_project\". Not sure if it works correctly without github.com prefix.. I am currently in the same problem. It makes more sense for the operationId to be unique per each endpoint. Per 2.0 spec, can we understand it to be unique as per endpoint but not globally?. ",
    "jtegile": "@sun7927 , may I know how do you solve/workaround this issue?. Should this issue be kept pen? \nWould it make more sense to generate relative import statement, instead of\n\"[number of .. from GOPATH-to-root]/[location-where-the-client-is-generated]\" \njust using\n\"../client/[tag]\" \n\"../models\" \nFor example,  GOPATH is set to \"/gowork\" , and run '''swagger generate client\" at directory \"/gowork/src/company/project\" , \nThe current import section of /gowork/src/company/project/client/xxx_client.go will looks like\nimport {\n  ..\n  \"../gowork/src/company/project/client/tag\"\n}\n\nSo, from \"/gowork/src/company/project/xxx_client.go\", \"../gowork/src/company/project/client/tag\" will not resolve correctly. . What's interesting is, once I set the GOPATH to \"/gowork/src/company/project\", the generated import section of \"/gowork/src/company/project/client/xxx_client.go\" becomes \nimport {\n  ..\n  \"../client/tag\"\n}. 0.11.0, from brew .\n\nSeems like Golang does not support relative import (sorry, still pretty new to Go), so relative import is not an option.\nFinally figure out the cause of the issue. The problem is caused by mismatching of GOPATH and PWD when symbolic-link is used. For example there is a symbolic link  of \"\\~/gowork\" links to \"/Volume/hd2/home/dev/gowork\". \"\\~\" is \"/Users/[user-name]\" .\nWhen generating the client code under \"~/gowork/src/company/project/\", since the GOPATH matches the prefix of $PWD, it can generate the correct import statement like\nimport {\n  \"company/project/client/tag\"\n}\n\nBut when generating the client code under \"/Volume/hd2/home/dev/gowork/src/company/project/\", the it generates relative import statement like \nimport {\n  \"../../../..//Volume/hd2/home/dev/gowork/src/company/project/client/tag\"\n}.\n",
    "Avinash489": "I Need to understand the flow , How the Models has been executing?. ",
    "zuxy": "Why do we close this issue? I don't see it fixed.. Is that a requirement from the swagger spec itself or rather a limitation of go-swagger? I see that in https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md defaults are specified for individual properties:\nCat:\n    description: A representation of a cat\n    allOf:\n    - $ref: '#/definitions/Pet'\n    - type: object\n      properties:\n        huntingSkill:\n          type: string\n          description: The measured skill for hunting\n          default: lazy\n          enum:\n          - clueless\n          - lazy\n          - adventurous\n          - aggressive\n      required:\n      - huntingSkill\nThough I'm puzzled by the \"required\" line in the above example.. Shouldn't \"default\" and \"required\" be mutually exclusive? If some property is required it'll be provided whatsoever.  See https://swagger.io/blog/unlocking-the-spec-the-default-keyword:\n\nDefining a default value for a container and marking that container as required is somewhat of a contradiction. If the container is required, it will always be sent and the default value will never take effect.. My comment was about tschaub's and your discussion around the interaction between \"required\" and \"default\" [3] and [4]. I'm afraid if I start a new thread I'd lose the context.. Thanks for the answer. Would --skip-validation skip any other validations?. \n",
    "iamtheddrman": "I make use of swagger:model to mark the types generated by protoc as definitions for use by the routes. So if I take out -m, I don't get the enumerations, but I also don't get any of the definitions that I do need.\nI feel like I'm using your tool in a way it was not originally intended (comment markup on existing Go code to generate a swagger spec solely for API documentation purposes), so I expect some issues. I was just hoping that maybe there was something that I was just missing.. ",
    "khyew": "I'm seeing the same thing.. ",
    "mmonroe86": "Current work around:\npatched the code in the BindRequest func that is generated from the formdata parameters provided in spec. The code now checks for http.ErrNotMultipart error in a switch statement and just logs that the file is missing instead of appending an error to func result. The BindRequest func validates the payload, i believe in the middleware, bc my handler is never hit if the payload is malformed. Also had to add some logic in my handler to deal with pointer derefs if not all three files were included in the payload, and updated swagger generate build script to keep patch in place during spec generations. I attached a file containing the patch. \nbindRequest.txt\n. ",
    "ssimono": ":+1:  I noticed this as well. ",
    "andreas-kupries": "Hello.\nI have a swagger spec which works for version 0.5.0 and crashes swagger when processed by version 0.12.0, with the same panic and stacktrace as described above.\nDeveloper, please reopen this bug and fix the input validation to show a proper error instead the panic.\nI should note that I am new to swagger and do not understand the terse fix to the spec, as provided in the first comment. Having swagger print a proper error message describing what is wrong with the spec I (and it) was given would be truly helpful in that regard.\n. Thank you. Guess I should get a checkout and update to head of master.. Oh. upstream component ... Ok, so that package is fixed, however the go-swagger repo does not have that fix vendored in yet, right ?. Hm. Yes. Looks to be commit 3b22d263716d71e5a327a6cc8ff49b066ef4ad3c.\n. Sigh. I still see the error. Time to describe more of my setup, with the latest changes:\nUsing go-swagger commit 7d8446310e3b93087f03c227a0b394ee9b498b2d\nUsing go 1.8.4 linux/amd64\nThe input schema is https://github.com/SUSE/cf-usb-sidecar/blob/develop/docs/swagger-spec/api.yml\nThe swagger tool is invoked with the script/commands below.\nNote how the GOPATH is restricted to swagger and its vendored dependencies.\n```\nTOPDIR=$(cd \"$(dirname \"$0\")/..\" && pwd)\nmkdir -p \"${TOPDIR}\"/src/generated/CatalogServiceManager\nRun the sub-moduled swagger (which comes with a vendored (matching) go-openapi).\nGOPATH=\"${TOPDIR}\" go run \\\n    \"${TOPDIR}\"/src/github.com/go-swagger/go-swagger/cmd/swagger/swagger.go \\\n    generate server \\\n    -A CatlogServiceManager \\\n    -t \"${TOPDIR}\"/src/generated/CatalogServiceManager \\\n    -f docs/swagger-spec/api.yml\n```\nThe tool crashes and prints:\n```\n2017/11/06 11:53:04 building a plan for generation\n2017/11/06 11:53:04 planning definitions\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0xe pc=0x964899]\ngoroutine 1 [running]:\ngithub.com/go-swagger/go-swagger/generator.(schemaGenContext).NewSliceBranch(0xc420176c00, 0xc422b79440, 0xc421d10001)\n    /home/andreask/fast/go/src/github.com/SUSE/cf-usb-sidecar/src/github.com/go-swagger/go-swagger/generator/model.go:387 +0x529\ngithub.com/go-swagger/go-swagger/generator.(schemaGenContext).buildArray(0xc420176c00, 0x0, 0x0)\n    /home/andreask/fast/go/src/github.com/SUSE/cf-usb-sidecar/src/github.com/go-swagger/go-swagger/generator/model.go:1081 +0xd5\ngithub.com/go-swagger/go-swagger/generator.(schemaGenContext).buildItems(0xc420176c00, 0x0, 0x0)\n    /home/andreask/fast/go/src/github.com/SUSE/cf-usb-sidecar/src/github.com/go-swagger/go-swagger/generator/model.go:1117 +0xc8e\ngithub.com/go-swagger/go-swagger/generator.(schemaGenContext).makeGenSchema(0xc420176c00, 0x0, 0x0)\n    /home/andreask/fast/go/src/github.com/SUSE/cf-usb-sidecar/src/github.com/go-swagger/go-swagger/generator/model.go:1458 +0xa6f\ngithub.com/go-swagger/go-swagger/generator.(mapStack).Build(0xc421ce85d0, 0xc421ce85a0, 0xc421ce85d0)\n    /home/andreask/fast/go/src/github.com/SUSE/cf-usb-sidecar/src/github.com/go-swagger/go-swagger/generator/model.go:887 +0x1cd\ngithub.com/go-swagger/go-swagger/generator.(schemaGenContext).buildAdditionalProperties(0xc4202a7800, 0xc4202a78a8, 0x1)\n```\nAre there online or other tools I can use to validate my spec against swagger's current schema for specs?\n. Found an online validator. It claims that the spec is ok.\nhttp://online.swagger.io/validator?url=https://raw.githubusercontent.com/SUSE/cf-usb-sidecar/develop/docs/swagger-spec/api.yml\n. Yes. With that change the generation now succeeds.\nIs that a schema change the online validator does not yet know about ?. \ud83d\udc4d on no panic (on any input, not even, or even especially, bad input). Good luck in fixing the panic then. I will now go and work on getting the generated things integrated and build.. ",
    "kisPocok": "Casualjim, you have saved my life. spec.ResolveRef() is the solution. Thanks.. ",
    "mugdhachauhan": "Sorry but i am not clear what do you mean by properties in the body struct need to be exported. can you give a example?. But with exporting properties(capitalizing) and running swagger generate spec -o ./swagger.json command i see error unable to determine package. So here is my test.go\n```\npackage main\nimport (\n    \"testing/validation\"\n    \"fmt\"\n)\n// swagger:route GET /v1/list validationError\n//\n// Get list of something\n//\n//     Responses:\n//       500: validationError\nfunc main(){\n    fmt.Println(validation.ValidationError{})\n}\nAnd validation.go\n// swagger:response validationError\ntype ValidationError struct {\n    // The error message\n    // in: body\n    Body struct {\n             // The validation message\n             //\n             // Required: true\n             Message string\n             // An optional field name to which this validation applies\n             FieldName string\n         }\n}\nand still json generated is\n{\n  \"swagger\": \"2.0\",\n  \"paths\": {\n    \"/v1/list\": {\n      \"get\": {\n        \"description\": \"Get list of something\",\n        \"operationId\": \"validationError\",\n        \"responses\": {\n          \"500\": {\n            \"$ref\": \"#/responses/validationError\"\n          }\n        }\n      }\n    }\n  }\n}\n``\nSorry but i just want one basic example to get working so that i work with other files. Can i get some help with this?propertiesare still missing inswagger.json` file. @casualjim I was able to generate correct json file. Thanks for your help :). ",
    "joshq00": "Left in a commented line -- pushed new commit to remove it. @casualjim I attempted, but the tests in the generator package don't test the file-system portion so I wasn't sure where to start. If you can direct me, I'll happily add a test. Running generate server --skip-operations --skip-support --exclude-main --exclude-spec\nworks, but generate model does not\nThe generate model command now just flows through generate server, simplifying and removing most of the model code. Created these (passing) tests as a preface to solving an issue -- will submit that in a separate PR. ",
    "matthewhartstonge": "I believe #1162 has become victim of this as well.\nFor now, we are pinning the run time to the hash before the specific commit. We use Glide internally for dependency management. For those affected, add this into your glide.yaml file:\nyaml\n- package: github.com/go-openapi/runtime\n  version: f1447ecfd160e50218589d4db3fb28bd24b8dec8. @jorgesece Having a quick look at the govendor readme, I think: govendor fetch github.com/go-openapi/runtime@f1447ecfd160e50218589d4db3fb28bd24b8dec8 should do the trick.. ",
    "jorgesece": "Hi all! how can I solve it with govendor?\nMany thanks. Hi @MatthewHartstonge,\nSetting the revision to f1447ecfd160e50218589d4db3fb28bd24b8dec8 I get another error: undefined: runtime.Authorizer.\nDo you have any idea how to solve it?. ",
    "vaughanb": "Same issue here. Generated server code won't run because runtime.Authorizer is not defined.. ",
    "ksswr": "Is this project still active?  I am having this same problem and it does not seem to be being addressed, rolling back version fixes it, but breaks stuff elsewhere.. ",
    "gangtao": "Having same issue, with swagger version\nversion: 0.7.3\ncommit: 01d9ee15ff01cdbfdc735d21949a7cc66ab6ab56\ngo build ./server/cmd/a-sample-service-server/main.go \nserver/restapi/operations/a_sample_service_api.go:188:46: cannot use o (type ASampleServiceAPI) as type middleware.RoutableAPI in argument to middleware.NewRoutableContext:\n    ASampleServiceAPI does not implement middleware.RoutableAPI (missing Authorizer method)\nserver/restapi/operations/get_time.go:41:11: assignment mismatch: 2 variables but 3 values\nserver/restapi/operations/post_time.go:41:11: assignment mismatch: 2 variables but 3 values\n. ",
    "treeder": "No, the server is sending the redirect location. Here's the response:\n```\nHTTP/1.1 307 Temporary Redirect\nContent-Length: 0\nContent-Type: text/plain; charset=utf-8\nDate: Thu, 14 Sep 2017 19:20:21 GMT\nLocation: /v1/apps/helloapp/routes/\nERROR: &{} (*models.Error) is not supported by the TextConsumer, can be resolved by supporting TextUnmarshaler interface\n```\n. ",
    "johnciocoiu": "@bobvanluijt @Ravenwater \nSomewhere in the swagger we used type: array for a property, without setting the 'items'. I think that was the thing causing the error in our case.. ",
    "sklemmer": "i faced the same issue by using \nyaml\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: object\n            items:\n              $ref: '#/definitions/Server'\nwhich results in \n```\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x9 pc=0x1561f56]\ngoroutine 1 [running]:\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).NewSliceBranch(0xc420149200, 0xc4215ec480, 0xc420b50001)\n        /go/src/github.com/go-swagger/go-swagger/generator/model.go:391 +0x116\n```\n@kreamyx so your saying that swagger validate should detect this error? when i run swagger validate it returns with valid spec\n```\n$ ~/ swagger validate api-description.yaml\nThe swagger spec at \"api-description.yaml\" is valid against swagger specification 2.0\n```\n. ",
    "notasecret": "this is the commit:\ncommit fb51ecafe32dd2e9ea3cd697d30044fd2ee514a9\nAuthor: Tushar taggarwal@vmware.com\nDate:   Mon Aug 28 11:36:46 2017 -0700\nCorrected Path generation for Base Imports\n\n. Is your target path inside GOPATH? \nYes, as you can verify above.\nAre there any symlinks that you are using in your path?\nNo sym link funny business.\nYea, I am trying to gen inside src. I think the target without the \"src\" addition passes your code checks, because you added \"src\" folder to all the possible gopath's swagger finds, and, in other places in swagger server code gen, the target path does not get that \"src\" folder appended to it, and breaks?. @casualjim , many thx, I tried,\nJons-MacBook-Pro-2:xxx-backend jonmclachlan$ ls src/\nmorningTulips   xxx     xxx-server\nxxx was the folder.  Has 777 permissions, too.. @EleanorRigby , that was it exactly, my bad, many thx :). closing.. The generated go function looks like this:\n`// Serve the api\nfunc (s *Server) Serve() (err error) {\n    if !s.hasListeners {\n        if err = s.Listen(); err != nil {\n            return err\n        }\n    }\n// set default handler, if none is set\nif s.handler == nil {\n    if s.api == nil {\n        return errors.New(\"can't create the default handler, as no api is set\")\n    }\n\n    s.SetHandler(s.api.Serve(nil))\n}\n\nvar wg sync.WaitGroup\nquitting := make(chan struct{})\nonce := new(sync.Once)\nsignalNotify(s.interrupt)\ngo handleInterrupt(once, s, quitting)\n\nif s.hasScheme(schemeUnix) {\n    domainSocket := new(http.Server)\n    domainSocket.MaxHeaderBytes = int(s.MaxHeaderSize)\n    domainSocket.Handler = s.handler\n    if int64(s.CleanupTimeout) > 0 {\n        domainSocket.IdleTimeout = s.CleanupTimeout\n    }\n\n    configureServer(domainSocket, \"unix\", string(s.SocketPath)) <--------------- Fails here\n\n    wg.Add(2)\n    s.Logf(\"Serving whyweride at unix://%s\", s.SocketPath)\n    go func(l net.Listener) {\n        defer wg.Done()\n        if err := domainSocket.Serve(l); err != nil {\n            s.Fatalf(\"%v\", err)\n        }\n        s.Logf(\"Stopped serving whyweride at unix://%s\", s.SocketPath)\n    }(s.domainSocketL)\n    go s.handleShutdown(&wg, domainSocket)\n}\n\nif s.hasScheme(schemeHTTP) {\n    httpServer := new(http.Server)\n    httpServer.MaxHeaderBytes = int(s.MaxHeaderSize)\n    httpServer.ReadTimeout = s.ReadTimeout\n    httpServer.WriteTimeout = s.WriteTimeout\n    httpServer.SetKeepAlivesEnabled(int64(s.KeepAlive) > 0)\n    if s.ListenLimit > 0 {\n        s.httpServerL = netutil.LimitListener(s.httpServerL, s.ListenLimit)\n    }\n\n    if int64(s.CleanupTimeout) > 0 {\n        httpServer.IdleTimeout = s.CleanupTimeout\n    }\n\n    httpServer.Handler = s.handler\n\n    configureServer(httpServer, \"http\", s.httpServerL.Addr().String()) <--------- and here\n\n    wg.Add(2)\n    s.Logf(\"Serving whyweride at http://%s\", s.httpServerL.Addr())\n    go func(l net.Listener) {\n        defer wg.Done()\n        if err := httpServer.Serve(l); err != nil {\n            s.Fatalf(\"%v\", err)\n        }\n        s.Logf(\"Stopped serving whyweride at http://%s\", l.Addr())\n    }(s.httpServerL)\n    go s.handleShutdown(&wg, httpServer)\n}\n\nif s.hasScheme(schemeHTTPS) {\n    httpsServer := new(http.Server)\n    httpsServer.MaxHeaderBytes = int(s.MaxHeaderSize)\n    httpsServer.ReadTimeout = s.TLSReadTimeout\n    httpsServer.WriteTimeout = s.TLSWriteTimeout\n    httpsServer.SetKeepAlivesEnabled(int64(s.TLSKeepAlive) > 0)\n    if s.TLSListenLimit > 0 {\n        s.httpsServerL = netutil.LimitListener(s.httpsServerL, s.TLSListenLimit)\n    }\n    if int64(s.CleanupTimeout) > 0 {\n        httpsServer.IdleTimeout = s.CleanupTimeout\n    }\n    httpsServer.Handler = s.handler\n\n    // Inspired by https://blog.bracebin.com/achieving-perfect-ssl-labs-score-with-go\n    httpsServer.TLSConfig = &tls.Config{\n        // Causes servers to use Go's default ciphersuite preferences,\n        // which are tuned to avoid attacks. Does nothing on clients.\n        PreferServerCipherSuites: true,\n        // Only use curves which have assembly implementations\n        // https://github.com/golang/go/tree/master/src/crypto/elliptic\n        CurvePreferences: []tls.CurveID{tls.CurveP256},\n        // Use modern tls mode https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility\n        NextProtos: []string{\"http/1.1\", \"h2\"},\n        // https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet#Rule_-_Only_Support_Strong_Protocols\n        MinVersion: tls.VersionTLS12,\n        // These ciphersuites support Forward Secrecy: https://en.wikipedia.org/wiki/Forward_secrecy\n        CipherSuites: []uint16{\n            tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,\n            tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,\n            tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,\n            tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,\n        },\n    }\n\n    if s.TLSCertificate != \"\" && s.TLSCertificateKey != \"\" {\n        httpsServer.TLSConfig.Certificates = make([]tls.Certificate, 1)\n        httpsServer.TLSConfig.Certificates[0], err = tls.LoadX509KeyPair(string(s.TLSCertificate), string(s.TLSCertificateKey))\n    }\n\n    if s.TLSCACertificate != \"\" {\n        caCert, caCertErr := ioutil.ReadFile(string(s.TLSCACertificate))\n        if caCertErr != nil {\n            log.Fatal(caCertErr)\n        }\n        caCertPool := x509.NewCertPool()\n        caCertPool.AppendCertsFromPEM(caCert)\n        httpsServer.TLSConfig.ClientCAs = caCertPool\n        httpsServer.TLSConfig.ClientAuth = tls.RequireAndVerifyClientCert\n    }\n\n    configureTLS(httpsServer.TLSConfig)\n    httpsServer.TLSConfig.BuildNameToCertificate()\n\n    if err != nil {\n        return err\n    }\n\n    if len(httpsServer.TLSConfig.Certificates) == 0 {\n        if s.TLSCertificate == \"\" {\n            if s.TLSCertificateKey == \"\" {\n                s.Fatalf(\"the required flags `--tls-certificate` and `--tls-key` were not specified\")\n            }\n            s.Fatalf(\"the required flag `--tls-certificate` was not specified\")\n        }\n        if s.TLSCertificateKey == \"\" {\n            s.Fatalf(\"the required flag `--tls-key` was not specified\")\n        }\n    }\n\n    configureServer(httpsServer, \"https\", s.httpsServerL.Addr().String()) <-------------- and here\n\n    wg.Add(2)\n    s.Logf(\"Serving whyweride at https://%s\", s.httpsServerL.Addr())\n    go func(l net.Listener) {\n        defer wg.Done()\n        if err := httpsServer.Serve(l); err != nil {\n            s.Fatalf(\"%v\", err)\n        }\n        s.Logf(\"Stopped serving whyweride at https://%s\", l.Addr())\n    }(tls.NewListener(s.httpsServerL, httpsServer.TLSConfig))\n    go s.handleShutdown(&wg, httpsServer)\n}\n\nwg.Wait()\nreturn nil\n\n}`. yes, my bad, i have been updating everything except for configure_xxxx file, as it has connecting tissue to implementation... let me verify i'm not just being stupid :). That was it.  Many thx @casualjim . ",
    "nugget": "Thanks, I'm back to normal now!. ",
    "immesys": "Same problem here. Why does swagger validate work?. ",
    "imiskolee": "who can add it to document?. @mrostecki no any flag on command line. just use comment //swagger:type string on your type. example:\ngo\n//swagger:type int\ntype MyCustomInt int. ",
    "mrostecki": "Is there any documentation about this feature? I would love to use it, but I have no idea how. What argument of swagger generate server should I use to point swagger to my Go package with a custom type?. ",
    "rfyiamcool": "ok, i know. ",
    "zhouzhuojie": "I can reproduce this as well. And interestingly, the required field is a pointer type, and the non-required field is a pointer type.\n``\ntype Host struct {\n    // not required\n    State stringjson:\"state,omitempty\"`\n// required\nDescription *string `json:\"description\"`\n\n}\n```\nI think the following is expected, right?\nrequired => primitive type\nnon-required => pointer type. ",
    "ahilananantha": "\nhowever with zero value of empty string, how can you distinguish between set/unset vs zero value?\n\nBut why doesn't the same logic hold for optional? You won't be able to distinguish between an optional field not specified in a response and it set to its zero value when you generate it as a primitive. There you are already treating unset as zero.. I just looked at the behavior of the structure parser and it looks consistent with the client generator. It puts the x-class extension on the same schema object that contains an allOf:\ngo\nbschema.AddExtension(\"x-class\", mv)\n// ...\nbschema.AllOf = append(bschema.AllOf, newSch)\nand the tests are consistent with that. Maybe the documentation just needs to be corrected to match the code?. Thanks, also I want to clarify that the marshaling issue (#1232) isn't there if --skip-flatten is passed. So it's only this new issue I think that prevents sending out a schema with discriminator in it.. ",
    "levrik": "I just stumbled over that too.\nWhen an field is optional I don't want some default value. Especially for types like date-time and numbers. If it's not provided I want no date or number at all. Not a 1970 date or a zero.\nI don't really get why this isn't the default behavior.\nAbout the required-thing: If someone provides me an empty string on a required field I wouldn't expect it to pass the validation. An empty string is an not provided value in my opinion. If there are any cases where an empty string is fine you could add something like x-emptyallowed or whatever.. @gregmarr thanks!\n@fredbi that would be an idea \ud83d\ude42 . ",
    "piepmatz": "\nthere is a way to use a pre-existing type that exists on the file system.\n\n@casualjim: How?\n. ",
    "mhmxs": "Hi @EleanorRigby ,\nThank you for the super fast reply, and glad to read it is already solved. We are waiting for the next official release like messiah :).. Thanks a lot.. Thanks @fredbi, Could you please share with me the mentioned issue about the additionalProperties?. @fredbi thanks a lot. We are waiting for new version, because currently we have an in-house tool which does AST transform on the generated source.. Hi @fredbi ,\nThanks you so much, we are waiting for the next release.. ",
    "rabisg": "I'll try to use that workaround for now but I guess it's still a bug worth fixing. I'll try to give this a shot when I have time.. Thanks for the fix. It works now :). ",
    "e-zhang": "I know this issue is already closed and merged in but I had a question about the behavior I'm seeing after picking up this change. \nIf I run swagger generate --name ABC, I used to get \n./restapi/configure_a_b_c.go\n./cmd/a-b-c-server/main.go\nI now get\n./restapi/configure_abc.go\n./cmd/a-b-c-server/main.go\nIt seems a little inconsistent for the filename and the command name to differ in hyphen/underscore. Was this an intended consequence? \nSorry if this isn't the right place for this comment. . Will do. Checked in the generated bindata.go. Ok thanks for the quick response. \nDo you know what the proper fix would be? I can submit a pull request, but I wasn't quite sure where the fix would be. Would I be breaking anything if I removed the IsNullable check from the parameter.gotmpl?. There are other references in the file to .Child. I get an error with .Schema.Child\nat <.Schema.Child>: can't evaluate field Child in type *generator.GenSchema. ",
    "johnnyli4a4c": "This is also causing an issue for me. Although I do agree that int and uint are not good for enforcing contracts, it shouldn't be dictated by the framework if the language inherently supports it. If strict typing needs to be enforced, that can be done in the swagger spec file.. ",
    "huikang": "@gregmarr thanks for your answer. Is there any plan to support openAPI 3.0 soon? The reason I am asking is that openAPI 3.0 has the OIDC option in securitySchemes, which does not exist in go-swagger.\n. @casualjim Thanks for your response. Now I understand the structure of the go-swagger generated code. And I realized that I should implement checking the oauth access token in this function\ngo\n    api.OauthSecurityAuth = func(token string, scopes []string) (*models.Principal, error) {\n        return nil, errors.NotImplemented(\"oauth2 bearer auth (OauthSecurity) has not yet been implemented\")\n    }\nI have another follow up question, which is also applicable to apikey or basic authentication schemes. How can the server remember the authenticated request context? For example, if I uses a browser to access the api server, the request does not need to be checked each time after being authenticated once.\nDo you know which go libraries can handle this? Thanks.\n. Not sure why @houndci-bot does not like the format? I see other example has similar format.. Thanks @casualjim . @fredbi , thanks for your explanation. Do you have any code snippet that fixes the redirect issue? Thanks in advance.. The problem is that the http.Redirect method in Go does not provide any return value.\nAlso is it confirmed that the \"http: multiple response.WriteHeader calls\" causes the redirect failure?. In the above code snippet, wG is a global variable and the only one. Because I need to use wG in the http.Redirect method.. I thought the go-swagger generated code handles concurrent requests. For example, user 1 hits the redirect path of the server, which calls the redirect method to redirect to an external page.\nMeanwhile, user 2 can access the same path.\nDo you mean I need to handle concurrent access to the redirect write response?. @casualjim , could you provide some sample code ? Thanks.. I think I found some solution using the context library.\nIn the middleware part, I set the response writer value in the context. And then in the handler function, I can get that value and use it in the redirect call.\n. @casualjim @fredbi , thanks for your responses. The problem is solved by setting the correct response writer.. Looks like some mismatch from vendor packages . Hi, @casualjim , thanks for your response. This looks nice!\nWith this function, I think I can define the following to close the channel on shutdowning the server. Is my understanding correct?\n```\n// create new service API\napi := operations.NewToDoAPI(swaggerSpec)\napi.ServerShutdown = func() {\n    close(MonitorDone)\n}\n```. ",
    "rzhang2403": "Can you tell me why the n is a reserved keyword in the Swagger spec?  When I use the JSON file, it has to have the 'n' as well.   Thanks.. thanks.. You mean the file,  restapi/doc.go?\nI found restapi/embedded_spec.go, which has the API spec.  But, this is not what I meant here.   Please check the link,\nhttps://loopback.io/doc/en/lb3/Use-API-Explorer.html\n. I just tried, and got:\n{\"code\":404,\"message\":\"path /docs was not found\"}. I saw that if I used the example, to-do-list, the /docs works to bring the nice UI.   My swagger 2.0 was created and validated in the go-swagger.   I don't know why it's broken here.. I found that the problem is in the go-swagger doesn't support the spec, \n        basePath:  \"/api\"\nAfter removed it, it works.. Yes, it works.  Thanks.. ",
    "aalexanderr": "It would be nice if this would be configurable. Especially due to current incosistency:\nyaml\n  JobID:\n    description: JobID is a unique identifier for Weles Job.\n    type: integer\n    format: uint64\n  JobIDs:\n    description: JobIDs is an array of JobID\n    type: array\n    items:\n      $ref: '#/definitions/JobID'\ngenerates array:\ngo\n// JobIds JobIDs is an array of JobID\n// swagger:model JobIDs\ntype JobIds []JobID\nwhile \nyaml\n  JobInfo:\n    description: JobInfo contains information about a Job available for public API.\n    type: object\n    properties:\n      jobID:\n        $ref: '#/definitions/JobID'\n      name:\n        type: string\n      created:\n        type: string\n        format: date-time\n      updated:\n        type: string\n        format: date-time\n      status:\n        $ref: '#/definitions/JobStatus'\n      info:\n        type: string\n  JobInfos:\n    description: JobInfos contains information about Jobs available for public API\n    type: array\n    items:\n      $ref: '#/definitions/JobInfo'\ngenerates an array of pointers\ngo\n// JobInfos JobInfos contains information about Jobs available for public API\n// swagger:model JobInfos\ntype JobInfos []*JobInfo\nI understand that it might have being a design decision that for slices of a type to be slice of values but for the structs which are larger it defaults to array of pointers.. Thanks for quick response!\nThe rationale for such feature is just modularization of an application.\nSay I have a module that manages jobs (i am referrring to the spec snippet above) and this module gives an interface that produces a slice of structs. The module cannot serve a slice of pointers due to possible concurrency issues, etc (I would try to read a slice and at the same time the job manager module would e.g. append to the slice). Thus the module needs to pass a copy of the slice not a reference.\nCurrently, I am creating a slice of pointers and fill it with references to each element of the slice I have received. This is performance overhead that wouldn't be necessary if slice values vs slice of references   would be configurable on generation time.. Let there be:\nserver- swagger generated server\nX - a separate module\nX needs to pass the slice of structs by value (and lock it for the time of copying it/passing it).\nserver copies the slice of structs (and there are no concurrency problems due to passing by value)\nnow when I need to generate response, I need to create an array of pointers due to go-swagger imposed generation. I did not measure how much time it takes to do this operation, but it would be superfluous if a possibility to choose whether the generated type is slice of values or slice of references.\nAFAIK swagger allows custom specifiers, if it would be possible it would be nice to add such for array types\n'x-go-slice': reference/value\nWhile I am beginner in golang, If you would point me in right direction I'd love to try contributing this feature some time soon.. Thanks a lot for help, I think I understand it now!. The benefit isn't big, and I will fully understand if it won't be added. \nIt is just a matter of preference/ readability- when having many small defined types, we end up with many, many files that are ~20 lines long. Some projects have coding style guidelines to have fewer files, each with a group of types pertaining to some specific module on the back-end side. It would be nice if there was possibility to configure go-swagger to adhere to the coding style of a specific projects.. Thank you very much! gocat solves the issue!. Thanks for the reply @casualjim,  didn't know this. I know this may be standard in http(s) API, but I was not able to find this info when googling (but then again maybe I wasn't persistent enough)\nI was not able to find this info in the documentation, could it be added? LMK if you have a place in mind, I'd love contribute :)\nBTW is there a way to manipulate prettyfying of jsons?. While Accept header works just fine, there is issue with \"DefaultProduces\".\nI think I have set this variable correctly (even though it was application/json by default) but if Accept header is not set I am getting XML replies.\nin the configure_xxx.go, after registering Consumers and Producers I set the defaultConsumes and defaultProduces in the xxxAPI object\ngo\napi.SetDefaultConsumes(\"application/json\")\napi.SetDefaultProduces(\"application/json\")\nAm I doing something wrong?\nShould it be configured per path? If so how can I do it?. Validate code:\n```go\n// Validate validates this artifact info\nfunc (m *ArtifactInfo) Validate(formats strfmt.Registry) error {\n    var res []error\n// validation for a type composition with ArtifactDescription\nif err := m.ArtifactDescription.Validate(formats); err != nil {\n    res = append(res, err)\n}\n\nif err := m.validatePath(formats); err != nil {\n    res = append(res, err)\n}\n\nif err := m.validateStatus(formats); err != nil {\n    res = append(res, err)\n}\n\nif err := m.validateTimestamp(formats); err != nil {\n    res = append(res, err)\n}\n\nif len(res) > 0 {\n    return errors.CompositeValidationError(res...)\n}\nreturn nil\n\n}\nfunc (m *ArtifactInfo) validatePath(formats strfmt.Registry) error {\nif swag.IsZero(m.Path) { // not required\n    return nil\n}\n\nif err := m.Path.Validate(formats); err != nil {\n    if ve, ok := err.(*errors.Validation); ok {\n        return ve.ValidateName(\"Path\")\n    }\n    return err\n}\n\nreturn nil\n\n}\nfunc (m *ArtifactInfo) validateStatus(formats strfmt.Registry) error {\nif swag.IsZero(m.Status) { // not required\n    return nil\n}\n\nif err := m.Status.Validate(formats); err != nil {\n    if ve, ok := err.(*errors.Validation); ok {\n        return ve.ValidateName(\"Status\")\n    }\n    return err\n}\n\nreturn nil\n\n}\nfunc (m *ArtifactInfo) validateTimestamp(formats strfmt.Registry) error {\nif swag.IsZero(m.Timestamp) { // not required\n    return nil\n}\n\nif err := validate.FormatOf(\"Timestamp\", \"body\", \"date-time\", m.Timestamp.String(), formats); err != nil {\n    return err\n}\n\nreturn nil\n\n}\n// MarshalBinary interface implementation\nfunc (m *ArtifactInfo) MarshalBinary() ([]byte, error) {\n    if m == nil {\n        return nil, nil\n    }\n    return swag.WriteJSON(m)\n}\n// UnmarshalBinary interface implementation\nfunc (m ArtifactInfo) UnmarshalBinary(b []byte) error {\n    var res ArtifactInfo\n    if err := swag.ReadJSON(b, &res); err != nil {\n        return err\n    }\n    m = res\n    return nil\n}\n. Below is result of generating with --with-flatten=full flaggo\n// This file was generated by the swagger tool.\n// Editing this file might prove futile when you re-run the swagger generate command\nimport (\n    strfmt \"github.com/go-openapi/strfmt\"\n\"github.com/go-openapi/errors\"\n\"github.com/go-openapi/swag\"\n\"github.com/go-openapi/validate\"\n\n)\n// ArtifactInfo describes single artifact stored in ArtifactDB.\n// swagger:model ArtifactInfo\ntype ArtifactInfo struct {\n    ArtifactDescription\n// ID in the artifacts database\nID int64 `json:\"ID,omitempty\" db:\",primarykey, autoincrement\"`\n\n// path\nPath ArtifactPath `json:\"Path,omitempty\"`\n\n// status\nStatus ArtifactStatus `json:\"Status,omitempty\"`\n\n// is date of creating the artifact.\n// Format: date-time\nTimestamp strfmt.DateTime `json:\"Timestamp,omitempty\"`\n\n}\n// UnmarshalJSON unmarshals this object from a JSON structure\nfunc (m *ArtifactInfo) UnmarshalJSON(raw []byte) error {\n    // AO0\n    var aO0 ArtifactDescription\n    if err := swag.ReadJSON(raw, &aO0); err != nil {\n        return err\n    }\n    m.ArtifactDescription = aO0\nreturn nil\n\n}\n// MarshalJSON marshals this object to a JSON structure\nfunc (m ArtifactInfo) MarshalJSON() ([]byte, error) {\n    _parts := make([][]byte, 0, 1)\naO0, err := swag.WriteJSON(m.ArtifactDescription)\nif err != nil {\n    return nil, err\n}\n_parts = append(_parts, aO0)\n\nreturn swag.ConcatJSON(_parts...), nil\n\n}\n// Validate validates this artifact info\nfunc (m *ArtifactInfo) Validate(formats strfmt.Registry) error {\n    var res []error\n// validation for a type composition with ArtifactDescription\nif err := m.ArtifactDescription.Validate(formats); err != nil {\n    res = append(res, err)\n}\n\nif err := m.validatePath(formats); err != nil {\n    res = append(res, err)\n}\n\nif err := m.validateStatus(formats); err != nil {\n    res = append(res, err)\n}\n\nif err := m.validateTimestamp(formats); err != nil {\n    res = append(res, err)\n}\n\nif len(res) > 0 {\n    return errors.CompositeValidationError(res...)\n}\nreturn nil\n\n}\nfunc (m *ArtifactInfo) validatePath(formats strfmt.Registry) error {\nif swag.IsZero(m.Path) { // not required\n    return nil\n}\n\nif err := m.Path.Validate(formats); err != nil {\n    if ve, ok := err.(*errors.Validation); ok {\n        return ve.ValidateName(\"Path\")\n    }\n    return err\n}\n\nreturn nil\n\n}\nfunc (m *ArtifactInfo) validateStatus(formats strfmt.Registry) error {\nif swag.IsZero(m.Status) { // not required\n    return nil\n}\n\nif err := m.Status.Validate(formats); err != nil {\n    if ve, ok := err.(*errors.Validation); ok {\n        return ve.ValidateName(\"Status\")\n    }\n    return err\n}\n\nreturn nil\n\n}\nfunc (m *ArtifactInfo) validateTimestamp(formats strfmt.Registry) error {\nif swag.IsZero(m.Timestamp) { // not required\n    return nil\n}\n\nif err := validate.FormatOf(\"Timestamp\", \"body\", \"date-time\", m.Timestamp.String(), formats); err != nil {\n    return err\n}\n\nreturn nil\n\n}\n// MarshalBinary interface implementation\nfunc (m *ArtifactInfo) MarshalBinary() ([]byte, error) {\n    if m == nil {\n        return nil, nil\n    }\n    return swag.WriteJSON(m)\n}\n// UnmarshalBinary interface implementation\nfunc (m ArtifactInfo) UnmarshalBinary(b []byte) error {\n    var res ArtifactInfo\n    if err := swag.ReadJSON(b, &res); err != nil {\n        return err\n    }\n    m = res\n    return nil\n}\n``` \nswagger on commit: 8c101dc8c12c8e25b5803a6376b7b2b7f09a622f. as for this comment:\nhttps://github.com/go-swagger/go-swagger/issues/1617#issuecomment-404565432 + flatten=full option results in:\n```go\ntype ArtifactInfo struct {\n    ArtifactDescription\nArtifactInfoAllOf1\n\n}\n// UnmarshalJSON unmarshals this object from a JSON structure\nfunc (m *ArtifactInfo) UnmarshalJSON(raw []byte) error {\n    // AO0\n    var aO0 ArtifactDescription\n    if err := swag.ReadJSON(raw, &aO0); err != nil {\n        return err\n    }\n    m.ArtifactDescription = aO0\n// AO1\nvar aO1 ArtifactInfoAllOf1\nif err := swag.ReadJSON(raw, &aO1); err != nil {\n    return err\n}\nm.ArtifactInfoAllOf1 = aO1\n\nreturn nil\n\n}\n// MarshalJSON marshals this object to a JSON structure\nfunc (m ArtifactInfo) MarshalJSON() ([]byte, error) {\n    _parts := make([][]byte, 0, 2)\naO0, err := swag.WriteJSON(m.ArtifactDescription)\nif err != nil {\n    return nil, err\n}\n_parts = append(_parts, aO0)\n\naO1, err := swag.WriteJSON(m.ArtifactInfoAllOf1)\nif err != nil {\n    return nil, err\n}\n_parts = append(_parts, aO1)\n\nreturn swag.ConcatJSON(_parts...), nil\n\n}\n// Validate validates this artifact info\nfunc (m *ArtifactInfo) Validate(formats strfmt.Registry) error {\n    var res []error\n// validation for a type composition with ArtifactDescription\nif err := m.ArtifactDescription.Validate(formats); err != nil {\n    res = append(res, err)\n}\n// validation for a type composition with ArtifactInfoAllOf1\nif err := m.ArtifactInfoAllOf1.Validate(formats); err != nil {\n    res = append(res, err)\n}\n\nif len(res) > 0 {\n    return errors.CompositeValidationError(res...)\n}\nreturn nil\n\n}\n// MarshalBinary interface implementation\nfunc (m *ArtifactInfo) MarshalBinary() ([]byte, error) {\n    if m == nil {\n        return nil, nil\n    }\n    return swag.WriteJSON(m)\n}\n// UnmarshalBinary interface implementation\nfunc (m ArtifactInfo) UnmarshalBinary(b []byte) error {\n    var res ArtifactInfo\n    if err := swag.ReadJSON(b, &res); err != nil {\n        return err\n    }\n    m = res\n    return nil\n}\nartifactInfoAllOf1go\n// ArtifactInfoAllOf1 artifact info all of1\n// swagger:model artifactInfoAllOf1\ntype ArtifactInfoAllOf1 struct {\n// ID in the artifacts database\nID int64 `json:\"ID,omitempty\" db:\",primarykey, autoincrement\"`\n\n// path\nPath ArtifactPath `json:\"Path,omitempty\"`\n\n// status\nStatus ArtifactStatus `json:\"Status,omitempty\"`\n\n// is date of creating the artifact.\n// Format: date-time\nTimestamp strfmt.DateTime `json:\"Timestamp,omitempty\"`\n\n}\n// Validate validates this artifact info all of1\nfunc (m *ArtifactInfoAllOf1) Validate(formats strfmt.Registry) error {\n    var res []error\nif err := m.validatePath(formats); err != nil {\n    res = append(res, err)\n}\n\nif err := m.validateStatus(formats); err != nil {\n    res = append(res, err)\n}\n\nif err := m.validateTimestamp(formats); err != nil {\n    res = append(res, err)\n}\n\nif len(res) > 0 {\n    return errors.CompositeValidationError(res...)\n}\nreturn nil\n\n}\nfunc (m *ArtifactInfoAllOf1) validatePath(formats strfmt.Registry) error {\nif swag.IsZero(m.Path) { // not required\n    return nil\n}\n\nif err := m.Path.Validate(formats); err != nil {\n    if ve, ok := err.(*errors.Validation); ok {\n        return ve.ValidateName(\"Path\")\n    }\n    return err\n}\n\nreturn nil\n\n}\nfunc (m *ArtifactInfoAllOf1) validateStatus(formats strfmt.Registry) error {\nif swag.IsZero(m.Status) { // not required\n    return nil\n}\n\nif err := m.Status.Validate(formats); err != nil {\n    if ve, ok := err.(*errors.Validation); ok {\n        return ve.ValidateName(\"Status\")\n    }\n    return err\n}\n\nreturn nil\n\n}\nfunc (m *ArtifactInfoAllOf1) validateTimestamp(formats strfmt.Registry) error {\nif swag.IsZero(m.Timestamp) { // not required\n    return nil\n}\n\nif err := validate.FormatOf(\"Timestamp\", \"body\", \"date-time\", m.Timestamp.String(), formats); err != nil {\n    return err\n}\n\nreturn nil\n\n}\n// MarshalBinary interface implementation\nfunc (m *ArtifactInfoAllOf1) MarshalBinary() ([]byte, error) {\n    if m == nil {\n        return nil, nil\n    }\n    return swag.WriteJSON(m)\n}\n// UnmarshalBinary interface implementation\nfunc (m ArtifactInfoAllOf1) UnmarshalBinary(b []byte) error {\n    var res ArtifactInfoAllOf1\n    if err := swag.ReadJSON(b, &res); err != nil {\n        return err\n    }\n    m = res\n    return nil\n}\n```\n. I'm not sure which approach is correct? Using allOf you had provided makes marshalling work but  I'd prefer to have one ArtifactInfo struct which embeds ArtifactDescription and has rest of the allOf as struct fields directly rather than through additional AllOf1 struct. Will this behaviour be supported? . Thanks for the response!\nfull flatten alone does not resolve the issue. \nCurrently I have removed explicit marshaller (as the implicit one works just fine) after code generation. When the issue will be resolved I will just update swagger and regenerate the server code.. Verified with 0.16.0 -thanks a lot for help!. ",
    "diegofu": "https://github.com/golang/protobuf/issues/15\nNot using primitive pointers is also consistent with protobuf 3. ",
    "grim-luminal": "I have a fix for this working locally, but still need to get some tests written before I submit a PR.. ",
    "tfeng": "@kreamyx Yes, it works as expected without maxLength. The offending line is to test maxLength, so without it, that line doesn't exist in the generated file.. Perhaps it wouldn't, but this occurs in a large swagger file that we got from an external partner. Instead of modifying their swagger file in many places, I'd rather have a codegen tool that works out of the box.\nIn general, I think we should either raise an error and don't except the swagger file if date+maxLength is not valid, or generate code that compiles.. ",
    "orius123": "Thanks!. the fields of the CustomFields map should not be part of the parent object. they should be properties under customFields property in the parent object.. Ok, you are right. how do I achieve the swagger you described?\nIf I add the swagger:allOf annotation:\n```golang\n//go:generate swagger generate spec\n// Package API\n//\n// This is the public REST API \n//\n//     Version: 1.0.0\n//\n// swagger:meta\npackage exampleswagger\n// swagger:operation POST /thing aThing\n//\n// Do thing\n//\n// ---\n// Responses:\n//   '200':\n//     description: SomeObject\n//     schema:\n//       \"$ref\": \"#/definitions/SomeObject\"\n//\n// SomeObject ...\n// swagger:model\ntype SomeObject struct {\n    // Name - a name\n    Name string json:\"name\"\n    // swagger:allOf\n    CustomFields json:\"\"\n}\ntype CustomFields map[string]interface{}\n```\nI get: \njson\n{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"description\": \"This is the public REST API \",\n    \"version\": \"1.0.0\"\n  },\n  \"paths\": {\n    \"/thing\": {\n      \"post\": {\n        \"description\": \"Do thing\",\n        \"operationId\": \"aThing\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"SomeObject\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/SomeObject\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"definitions\": {\n    \"CustomFields\": {\n      \"type\": \"object\",\n      \"additionalProperties\": {\n        \"type\": \"object\"\n      },\n      \"x-go-package\": \"github.com/example-swagger\"\n    },\n    \"SomeObject\": {\n      \"title\": \"SomeObject ...\",\n      \"allOf\": [\n        {},\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"name\": {\n              \"description\": \"Name - a name\",\n              \"type\": \"string\",\n              \"x-go-name\": \"Name\"\n            }\n          }\n        }\n      ],\n      \"x-go-package\": \"github.com/example-swagger\"\n    }\n  }\n}. ",
    "greenpau": "@casualjim , I am running into the same issue.\nIn MongoDB the field is \"sys_name\". When un-marshaling data from the database, my app looses all the fields with underscores in them.\nI tried adding x-custom-tag:\nSnmpProperties:\n    properties:\n      SysName:\n        type: string\n        x-custom-tag: \"bson:\\\"sys_name\\\"\"\n      SysObjectId:\n        type: string\n    type: object\nHowever, the resulting Go struct does not have bson:\n```golang\n// SnmpProperties snmp properties\n// swagger:model SnmpProperties\ntype SnmpProperties struct {\n// sys name\nSysName string `json:\"SysName,omitempty\"`\n\n// sys object Id\nSysObjectID string `json:\"SysObjectId,omitempty\"`\n\n}\n```\nThe desired struct is:\n```golang\n// SnmpProperties snmp properties\n// swagger:model SnmpProperties\ntype SnmpProperties struct {\n// sys name\nSysName string `json:\"SysName,omitempty\" bson:\"sys_name,omitempty\"`\n\n// sys object Id\nSysObjectID string `json:\"SysObjectId,omitempty\" bson:\"sys_name,omitempty\"`\n\n}\n```\n. @casualjim , resolved my issue!\nIt is x-go-custom-tag, not x-custom-tag.. This is FYI. I had a similar issue. As part of \"testing\", my client code is as follows.\nHere, I purposefully make a request that would fail, i.e. \"/api/v1x/\" (not \"/api/v1/\".\nThe key is in err.Response.(runtime.ClientResponse). After that, .Message() and .Body() become available.\ngolang\n    go func() {\n        transport := runtime_client.New(\"127.0.0.1:\"+strconv.Itoa(serverPort), \"/api/v1x/\", []string{serverScheme})\n        client := api_client.New(transport, strfmt.Default)\n        apiResp, apiErr := client.General.Get(nil, nil)\n        if apiErr != nil {\n            err := apiErr.(*runtime.APIError).Response.(runtime.ClientResponse)\n            t.Logf(\"%s\", err.Message())\n            respBody := err.Body()\n            body, bodyErr := ioutil.ReadAll(respBody)\n            if bodyErr != nil {\n                t.Fatalf(\"Failed reading server response body: %s\", bodyErr)\n            }\n            t.Fatalf(\"Client request failed with status code %d, response: %s\", err.Code(), err.Message())\n        }\n        t.Logf(\"Client retrieved server info: %#v\", apiResp.Payload.Version)\n        server.Shutdown()\n    }()\nThe message .Message() prints correctly. However, the .Body() appears to be closed.\n--- FAIL: TestAppServer (2.03s)\n    app_server_test.go:46: 404 Not Found\n    app_server_test.go:50: Failed reading server response body: http: read on closed response body\n    app_server_test.go:37: Test failed to complete within 2 seconds\nFAIL\nFAIL    command-line-arguments  2.058s. > run it with --socket-path /var/run/app.sock --scheme http --scheme unix\n@casualjim , it works! Thank you!\nServer:\n./bin/app-server --socket-path ./app.sock --scheme http --scheme unix\nServing app at unix://./app.sock\nServing app at http://127.0.0.1:37831\nClient over HTTP:\ncurl http://127.0.0.1:37831/\n{\"code\":404,\"message\":\"path / was not found\"}\nClient over UDS:\ncurl --unix-socket `pwd`/app.sock -X GET http:/\n{\"code\":404,\"message\":\"path / was not found\"}\nThis is awesome! Thank you!. By default, when employing apiKey, the request without a token would fail, i.e.:\njson\n{\n    \"code\": 401,\n    \"message\": \"unauthenticated for invalid credentials\"\n}\nHowever, it would be nice if a request without the token would be treated as anonymous, i.e. some default token would be attached to it.. For the reference, I did some research here. \nThe \"invalid credentials\" comes from https://github.com/go-openapi/runtime/blob/master/middleware/context.go#L425.\nHere, there is something that deals with anonymous https://github.com/go-openapi/runtime/blob/master/middleware/context.go#L421.\n. @fredbi , I did what you said.\nsecurity:\n- key: []\n- {}\nHowever, when a token is not being passed, the server does not have Principal. It bypassed it. I was thinking more along the lines of having a principal, but let that principal be anonymous.\n```\npackage general\nimport (\n    errors \"github.com/go-openapi/errors\"\n    models \"github.com/greenpau/ipdistro/internal/pkg/ipdistro/models\"\n)\n// APIKeyAuthHandler handles token-based authentication.\nfunc APIKeyAuthHandler(token string) (*models.Principal, error) {\n    if token == \"xyz\" {\n        prin := models.Principal(token)\n        return &prin, nil\n    }\n    return nil, errors.New(401, \"invalid api token '\"+token+\"'\")\n    //prin := models.Principal(\"anonymous\")\n    //return &prin, nil\n}\n```\nHere, the above code will not be triggered if token does not exist.. Here, we perform authentication.\nWhen, no token is being passed, usr is:\n(interface {}) <nil>\nWhen it is being passed, then usr is a pointer to models.Principal.\n(*models.Principal)(0xc4201e6330)((len=3) \"xyz\")\nPerhaps, route.Authenticators.Authenticate can return anonymous principal when authenticating without a key. Specifically, \nPerhaps, having it here as:\nprin := models.Principal(\"anonymous\")\nreturn true, &prin, lastError\ninstead of:\nreturn true, nil, lastError\nbe better?\n. but then models are unavailable there.... Perhaps, having something like this for anonymous access would work \ud83e\udd14 \ud83e\udd14 \ud83d\udcad :\ngolang\n    api.AnonymousAuth = func() (*models.Principal, error) {\n        prin := models.Principal(\"anonymous\")\n        return &prin, nil\n    }. the issue is https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#securityDefinitionsObject does not have Security Scheme Object type of anonymous.. At the end, I decided to simply check whether usr is nil. If a function can be invoked anonymously, I omit usr == nil, else I throw an error.\ngolang\n// GetAPIInfoHandler handles request for API information.\nfunc GetAPIInfoHandler(usr *models.Principal, appVersion, appContact, appDocumentation string) middleware.Responder {\n    if usr == nil {\n        return &GetUnauthorized{\n            Payload: &models.Error{\n                Code:    \"401\",\n                Message: \"Unauthorized. Authentication Required.\",\n            },\n        }\n    }\n    response := NewGetOK()\n    response.Payload = &models.APIInformation{\n        Contact:       appContact,\n        Version:       appVersion,\n        Documentation: appDocumentation,\n    }\n    return response\n}. > you can rewrite errors in the ServeError callback it's available in the configure_xxx.go file\n@casualjim , how does it help in my use case? My apologies for not able to connect the dots. I tried, but don't see it yet.\nBy, configure_xxx.go, do you mean this?\ngolang\n    // configure the api here\n    api.ServeError = errors.ServeError. > it seems you just want to return errors for non authenticated users, but weren't happy with the error message.\n@casualjim , I see \ud83d\udc4d . @casualjim , I was thinking about what you said above. The use case I was thinking about is that I want some of GET request (informational stuff) be anonymous, i.e. no authentication, and the rest be authenticated via token based mechanism. Also, let's say I want service static content, i.e. through middleware, like https://github.com/go-swagger/go-swagger/issues/1375. I want it also without authentication.. > The swagger spec probably has https as scheme included.\n@casualjim , correct! Thank you!. At the end, I specified a single HTTP listener and port:\ngolang\n    server := restapi.NewServer(api)\n    server.EnabledListeners = []string{\"http\"}\n    server.Port = 80. For example, one type of objects are user-token mappings. Let's say prior to starting a server, I load token-to-principal mapping in in-memory data store and then, using the tokens I authenticate/authorize requests. The user-token mappings would not be in the database, but only in-memory.. @fredbi , I did consider that. I can do it externally with Consul and libkv, but I want in-memory \ud83d\ude03 It is almost the same as storing credentials in mongodb.. @casualjim , @fredbi , thank you for the pointers! \ud83d\udc4d . > Unfortunately no, we are not cashing anything in. \n@fredbi, based on the server code, it is impossible for a client to generate a subnet with the same UUID all the time. Hence, it looked like caching to me.\n. @fredbi , apparently the test caching is a feature of Golang ;-) Have to run the test with GOCACHE=off.\nGOCACHE=off go test -v .... ",
    "Zehelein": "Hi,\nthank you for your response. But what you wrote is only one type of how to provide examples.\nThere are more ways to provide examples - please check \nhttps://swagger.io/docs/specification/2-0/adding-examples/\nI was using the \"Property Examples\" while you show the \"Response Examples\".\nBut at least it is good to know that the response one would be validated.. Thank you for your efforts!\nFor me it would be really good to not (only) have it on response level because the input models are just as important (for me) to have them in a consistent state. . Rather late response but I tested it again and now they are validated nicely - thanks for the fix!. Thanks for the link! Yes - this is indeed the problem. Upper case \"Items\" works fine. So you can close this one as duplicate.\nswagger: '2.0'\ninfo:\n  title: Test\n  version: \"1.0.0\"\npaths:\n  /v1/collection:\n    post:\n      summary: Collection\n      tags: \n        - Collection\n      parameters:\n        - name: collection\n          in: body\n          required: true\n          schema:\n            $ref: '#/definitions/collection'\n      responses:\n        200:\n          description: success\n          schema:\n            type: string\ndefinitions:\n  collection:\n    type: object\n    required:\n      - id\n      - title\n      - Items\n    properties:    \n      id:\n        type: string\n        description: The unique ID\n      title:\n        type: string\n        description: Title\n        minLength: 1\n        maxLength: 50\n      Items:\n        type: array\n        description: Items\n        items: \n          type: string\n    example:\n      id: item1\n      title: Home\n      Items:\n      - item2\n      - item3 . ",
    "saiKokkonda": "It worked. Thanks :). Great ! Thanks for the reply :) . ",
    "ffledgling": "@gregmaar You're right, except the validator does not seem to error out, which I was hoping it would.. @gregmarr Is that a problem in the spec definition or in the codegen/parser?. ",
    "jastanko": "If I view this same yaml file in Swagger Editor it seems to follow the #ref and displays the description and type of the header:\n\n. I see.  The language of the openapi 3.0 spec is more general and seems to allow the use of $ref anywhere.  Are there any plans to support 3.0?. I tried your suggestion to use yaml anchors, this version loads in Swagger Editor and displays the headers as desired:\n```\nswagger: \"2.0\"\ninfo:\n  title: \"Load Balancing Service API\"\n  description: API for the Load Balancing Service\n  version: \"20170115\"\nbasePath: /20170115\nx-descriptions:\n opc-response-id: &opc-response-id\n    description: |\n      Unique identifier for the response.\n    type: string\npaths:\n  /loadBalancers/{loadBalancerId}/backendSets:\n    get:\n      summary: \"ListBackendSets\"\n      tags: ['loadBalancer']\n      description: Lists all backend sets associated with a given load balancer.\n      operationId: \"ListBackendSets\"\n      produces:\n      - \"application/json\"\n      responses:\n        200:\n          description: The list is being retrieved.\n          headers:\n            opc-response-id:\n              <<: *opc-response-id\n```\nHowever it still doesn't validate:\n$ /usr/local/bin/swagger validate test.yaml \nThe swagger spec at \"test.yaml\" is invalid against swagger specification 2.0. see errors :\n- must validate one and only one schema (oneOf)\n- paths./loadBalancers/{loadBalancerId}/backendSets.get.responses.200.headers.opc-response-id.type in body is required\n- must validate one and only one schema (oneOf)\n- paths./loadBalancers/{loadBalancerId}/backendSets.get.responses.200.headers.opc-response-id.type in body is required\n- must validate one and only one schema (oneOf)\n- paths./loadBalancers/{loadBalancerId}/backendSets.get.responses.200.headers.opc-response-id.type in body is required\n- must validate one and only one schema (oneOf)\n- paths./loadBalancers/{loadBalancerId}/backendSets.get.responses.200.headers.opc-response-id.type in body is required. ",
    "MrSaints": "This is still an on-going problem. Indeed, using application/octet-stream is a solution, but there are cases much like the one OP described with images where we do want the client to behave like application/octet-stream despite the specified content type.\nAs a temporary workaround, I modified the generated NewHTTPClientWithConfig in the _client.go file to include:\ntransport.Consumers[\"image/jpeg\"] = runtime.ByteStreamConsumer()\n    transport.Consumers[\"image/png\"] = runtime.ByteStreamConsumer()\n    transport.Consumers[\"image/webp\"] = runtime.ByteStreamConsumer()\n    transport.Consumers[\"image/gif\"] = runtime.ByteStreamConsumer()\nWorks without any problems :). ",
    "databus23": "Seems like HTTPRequest *http.Request that gets added to param structs is missing a json:\"-\" so that the spec generator ignores it.. sure, np. Done. not sure why so much changed in the generated bindata though.. Just adding that https://github.com/golang/go/issues/20784 was closed so the spurious text/plain content-type should be gone with go 1.10. no, what will appear there is security: null which is semantically the same as before.. @gaplyk Can you elaborate a bit on what the problem is? what is the problem with security: null in the spec generator?\nI'm not sure what other ways are they to fix this. Leaving the omitempty tag annotation in go-openapi/spec does not seem right to me as it causes loss of information when serializing a spec.SwaggerSpec struct to JSON.. The problem with omitempty is that it not only removes nil values from the resulting JSON but empty slices [] as well. When you load the serialised JSON again you have no way of knowing if the original spec contained [] for security or the field was not set/nil.\nSo with omitempty for the operations Security field you loose the information that authentication was explicitly disabled (by setting it to the empty array, overridding the global security settings).. @casualjim I can't agree .nil and [] are not the same in go. The first one is an uninitialised slice and the the other a slice of length 0. If you remove the omitempty annotation in your example you see the difference:\nnil value {\"arr\":null}\nempty value {\"arr\":[]}\n So the problem here really isomitempty which treats them equally, but they are not and they happen to mean different things for this specific field in a Swagger spec.. I played a bit with a custom marshalling function to achieve the following two properties:\n\nkeep empty slices in the resulting JSON\nomit the key when the slice is unset/nil\n\nThis is what I came up with:\nfunc (op OperationProps) MarshalJSON() ([]byte, error) {\n    type Alias OperationProps\n    if op.Security == nil {\n        return json.Marshal(&struct {\n            Security []map[string][]string `json:\"security,omitempty\"`\n            *Alias\n        }{\n            Security: op.Security,\n            Alias:    (*Alias)(&op),\n        })\n    }\n    return json.Marshal(&struct {\n        Security []map[string][]string `json:\"security\"`\n        *Alias\n    }{\n        Security: op.Security,\n        Alias:    (*Alias)(&op),\n    })\n}\nIts a little convoluted and I'm up for suggestions how to achieve the desired outcome more elegantly.\nNote: The solution is based on this blog post: http://choly.ca/post/go-json-marshalling/. I submitted https://github.com/go-openapi/spec/pull/40 to address the discussed regression. ",
    "elakito": "thanks for the merge.. @fredbi I don't think skip_format=true would let you bypass this GOPATH check as the check is done before the result is written. \n. @casualjim Yes. If we could change LanguageOpts, we could add the language specific check method there. Is this change allowed in the next 0.x.x? If not, it would be nice if we could at least modify the current check code so that it is only enabled only if GoLangOpts is used or something like that.\nthanks.. @fredbi I know where this skip_format has effect. But I don't know why it relates to this GOPATH check. It's not about the format of the generated code but about in which folder the code is generated. \nThis GOPATH check happens at the generator client start up (https://github.com/go-swagger/go-swagger/blob/master/generator/client.go#L123) which is much before any writing happens where skip_format can have some effect.\nWe could add another property like skip_format and call it skip_gopath_check. But I find it ugly and there is some overlap with what we can do with LanguageOpts. So, I think using one of the two approaches that I suggested would be reasonable, no?\n. changed to unexported.. ",
    "erutherford": "looks like this is resolved in master, I'm going to go ahead and close this out.. ",
    "dlespiau": "Thanks for the quick answers. Based on that I think we can close this issue.. ",
    "volodymyrkoval": "If main.go is in $GOPATH/src error is the same. ",
    "akhobov": "Looks like 0.13.0 was actually released in the end. Closing.... Just stumble on this too. Have to use the --skip-flatten option while generating code as a workaround. Thanks for looking into this!\nThe --skip-flatten is useful if the generated models reflect the definition of models as described in swagger spec. Thus if model composition is used in swagger it would be quite easily mapped to the go structures as the same model can be used in multiple endpoints with different synopsis.\nIf that option starts to \"expand all\" that convenience would be lost and developers would have to work with unique structures that cannot be easily converted into each other. Effectively that means that if the --skip-flatten option is used then no models should be generated and all parameter/response structures are defined in restapi/operations/... directory. Does that describe the new logic behind the --skip-flatten option?. I'm sorry if my response sounded to you as a demand to change the code overnight. What I was hopping for is to discuss and hopefully to find a better solution to fix this issue. At this moment, the way I see this is 0.14.0 introduced breaking changes to the code that was developed for 0.13.0. Let me explain what I mean:\n0.13.0 was generating models matching definitions from provided swagger specification file(providing there is no external $ref in it). That match also covered model names(So it was relatively easy to find generated model by its name from the swagger). In that version the --skip-flatten was quite handy for exactly that purpose. Those models were used by developers to receive and return data in all endpoints' implementation.\n0.14.0 changed the behaviour of that option to \"expand all\". Thus now both structures content and their names don't match the code that was developed for the previous version. Thus the code that has been developed for 0.13.0 needs to be fixed and there is no guarantee that the next go-swagger version would continue to produce reliable structure content and names.\nI can see a point in doing that for external $ref but would also think that \"flatten light\" solution is a much better option. The way I see it is external definitions' $ref can be imported into models in a similar way the old --skip-flatten option generated internal models(the names of imported models can be mangled to avoid clashes with internal ones). External $ref used in other parts of swagger, like paths, could be handled in a different manner(possibly using \"expand all\" but again if there is no $ref to definitions).\nI don't know the internals of this project good enough to say if that's possible or not. I can look into it and make a PR if you can point me out into the right direction and if we agreed on the principle how that should be addressed.. Thanks guys. This sounds like a good start. Is there anything I can help you with to resolve this issue sooner? The 0.14.0 has lots of other very useful fixes in. Mainly around validation. So I wanted to migrate to it asap but this issue blocks us from doing that. I gave this PR a quick test and found out it vastly improved the generated code!\nHowever I saw that the --skip-flatten option still produces models that are not used anywhere in operations. Is that intended behaviour?\nI added a simple spec in https://github.com/akhobov/go-swagger/commit/1cd9e2f2d7974a511d40dfc72216eb85c0ac940c that I used for my testing. If you generate a server using that spec you would see that each model in completely independent. For example:\n The SimpleObject model will have its own copy of the Data struct in the same file that is called SimpleObjectData even thought there is Data model defined in the file next to it.\n The FullObject model will again have a copy of Data struct defined as FullObjectAO0Data while the rest of the properties is a combined set of both SimpleObject and FullObject. Is that what the \"expand all\" functionality means?\n The _responses.go files in restapi/operations directory have their own copies of both SimpleObject and FullObject defined as GetSimpleOKBodyItems0 and GetFullOKBody respectively with the Data property being GetSimpleOKBodyItems0Data and GetFullOKBodyAO0Data.\nOverall I would say that the \"flatten\" mode now generates more predictable models that are actually used in operations. The only thing that I noticed when generated server using the same spec is the FullObject is represented as a composition of SimpleObject and FullObjectAllOf1. Is that what the result of the functionality that @fredbi referred in point 4 of #1559?. Thank you for the explanation. That was really helpful! I'm with you now.\nWould be great if that explanation is added to the documentation. At the moment docs are missing --skip-flatten option completely, not mentioning the difference in model/operation generation process when this option is used. . I shall definitely look at the other 'nullable' tagged issues. Thanks for point me out to them.\nMeanwhile, are you aware about any workaround that allows us to post/put null values? If there is one that would be really helpful.. Thanks! I will think about that option.\nAs for the Required. I think that is not the pointers that cause this issue but the attempt to validate values of required fields by default. According to the JSON Schema Validation extract above the only validation that should be done on required fields is the presence of that field in the object. On the other hand field value validation is controlled via other properties: \n maximum\n exclusiveMaximum\n minimum\n exclusiveMinimum\n maxLength\n minLength\n pattern\n maxItems\n minItems\n uniqueItems\n enum\n multipleOf\nSo it seems reasonable to validate values only if any of those properties are defined\n. I was actually considering to wrap the Required call within an if block that ensures that the value is not null in cases where x-nullable: true is set.. The same way as of now. You are right, ideally the fix would require a a custom unmarshaller that can identify presence of the field in an object.\nI was talking about a workaround for the 0.13.0/current master that would allow receiving null values on fields marked as nullable.. Yes, I can. However that would require a custom build that is not a very handy option for a group of developers. That's the reason we are sticking to released versions rather than master - to ensure a homogeneous development environment.\nI'm not insisting on that change. Just asking if that seems a good idea from your point of view.. That's not the quality I'm talking about. Imaging there is a new dev joins your team that needs to install the tool or one of the developers decided to update the tooling while the rest continue to use their old versions. The generated code would be different depending on who run the generator. With tags there is some level of certainty that all devs are using the same version and as such they all can get the same result out of the go-swagger generator.. Got you. Thanks a lot!\nAnyway, if you think that idea is not good enough you can close this issue and we would workaround it in a way similar to what you described even though it is not our favourite solution :). Due to the period of time it took 0.14.0 to be released I backported a couple of fixes to 0.13.0. One of them was in the support for the CSV format in query params. Sorry, can't remember details of the other one from the top of my head. Also considering a workaround for #1601 while a proper fix is being worked on.. The proposed fix changes the value of the name if it is provided.\nExample:\nswagger generate server --target server --name example-name --spec server/swagger.yaml\nWill lead to Name being set to \"ExampleName\":\n//go:generate swagger generate server --target ../server --name ExampleName --spec ../server/swagger.yaml\nNot sure that is intended behaviour to change a value explicitly provided via the tool parameters.\nShould it be changed to something like the following?\nif opts.Name == \"\" {\n    opts.Name = appNameOrDefault(specDoc, name, \"swagger\")\n}\n. ",
    "johanbrandhorst": "Workaround: manually edit the struct like so (adding a pointer):\ngo\n// RDSConfig r d s config\n// swagger:model RDSConfig\ntype RDSConfig struct {\n...\n    // properties\n    Properties *RDSConfig `json:\"properties\"`\n...\n}. This is fixed in master. Present in 0.13 still though.. Do you have a source for me to reference? This swagger definition is generated by protoc-gen-swagger of the grpc-gateway project. Protobuf automatically encodes uint64 and int64 as strings because the numeric type would introduce inaccuracies (numeric being a float64).. I suppose it's an open question then how OpenAPI deals with integer overflows in JSON numbers? I took a look at the 3.0 spec as well and it says:\nNote that integer as a type is also supported and is defined as a JSON number without a fraction or exponent part.\nI don't really understand what that means for integer overflows. I do agree that this appears to be nonstandard behaviour, but all the same this is a problem with the specification that I think the grpc-gateway (and protobuf in general) fixes. Feel free to close this issue as I understand you wouldn't be keen to implement something that's not strictly part of the OpenAPI spec.. ",
    "rvzanten": "Okay i fixed my own issue, it was the WriteTimeout setting in the Server config being set to 60 seconds.\nSo the stream only lasted for 60 seconds. \nI fixed this by putting: \ns.WriteTimeout = 99999 * time.Hour\nin the configureServer function.\nSo we get:\nfunc configureServer(s *graceful.Server, scheme, addr string) {\n    //Keep conection alive for long long time\n    s.WriteTimeout = 99999 * time.Hour\n}. ",
    "geret13": "I am able to reproduce this issue with the current master, in my test I used an array of objects. \nEdit:\nLooking further into this, #1313 was supposed to be a fix for arrays of objects. To make my case more specific, I use an array of definitions:\n```yaml\n\nparameters:\n  - name: flex\n    in: body\n    required: true\n    schema:\n      type: array\n      items:\n        $ref: '#/definitions/SetFlex'\n\nSetFlex:\n  type: object\n  properties:\n    set:\n      type: boolean\n      description: 'To...\n\n```. ",
    "genexp": "Heh, yep. Bit me too :)  I hacked this in for each of my paths/methods.\ngo\nSecurity = []map[string][]string{\n  map[string][]string{\n   \"myAPIKey\": emptyslice,\n  },\n}. ",
    "AlekSi": "Please make a new release (tag) with that fix.. ",
    "Somebi": "Same with $GOPATH\nSo final command should be this way:\nalias swagger=\"docker run --rm -it -v $(pwd):/go/src/myapp -w /go/src/myapp quay.io/goswagger/swagger\". What do you mean?. It seems it's allowed by spec, probably json spec parser doesn't follow spec rules as intended.. It's not generating server code with it.. You can try to fold refs like i have posted and try yourself.. issue can be pin-pointed to forbidden mix $ref + sibling, which is correctly detected by swagger validate, although the returned error message does not state clearly the issue (complains about missing \"items\")\nYes it was complaining about missing items if i'm not wrong and my memory is still good. :D. The problem is in endpoints path names. If any api have paths that starts with /api/ it will fail, because there is contexts/scope conflict in generated go file restapi/configure_ at configureAPI method.\nWhen endpoints are /v1 instead of /api/v1 for example, then everything is working fine.\nBecause there is no conflict between operations package and api argument in configureAPI method.\napi vs v1.someEnpointHandlerFunc not conflicting\napi vs api.someEnpointHandlerFunc conflicting and throws undefined/not-existing api/spec functions etc.\nHope i have described well.\nIt should somehow be isolated, to avoid naming conflicts.\nIncluding packages at the top, to some unique name would solve issue i guess.. related to https://github.com/go-swagger/go-swagger/issues/1292. ",
    "ZachEddy": "Hi there! I also stumbled across this issue using Homebrew.\n```bash\nafter following homebrew instructions and freshly installing go-swagger\nswagger version\nversion: 0.13.0\ncommit: 8135eb6728e43b73489e80f94426e6d387809502\n```\nI had problems with operationGroups and using custom templates. However, using go get to install go-swagger instead of Homebrew fixed the issue.\nNot sure if Homebrew is supposed to use the latest and most up-to-date version of go-swagger (i.e. I don't know if it has your recent fix), but I thought I'd bring it up just in case.. ",
    "dmjones": "@casualjim In the restapi/configure_foo.go, you would register the consumer/producer against an application type. For example:\ngo\napi.RegisterConsumer(\"application/pkcs10\", customConsumer)\nIn my testing, that was all I needed to do to support reading PKCS#10 input. Because  my schema defined the type as string, my custom consumer expects to unmarshall into a string pointer.. @casualjim How would you normally test this sort of change? I can add some pattern matching tests to /go-swagger/generator/server_test.go to confirm the methods have been added. Is there an alternative approach in which you execute the generated code and verify the methods work as expected? (I'm still groking the code base, so some pointers would be great).\n. @casualjim  This is potentially ready to go, although I'm not sure how to resolve the CircleCI issues. It's failing for odd reasons:\nhttps://circleci.com/gh/thales-e-security/go-swagger/5\n```\n!/bin/bash -eo pipefail\n.circleci/build-docker.sh\n?       github.com/go-swagger/go-swagger    [no test files]\n?       github.com/go-swagger/go-swagger/cmd/swagger    [no test files]\nPASS\ntesting: open /go/src/github.com/go-swagger/go-swagger/github.com/go-swagger/go-swagger/cmd/swagger/commands/profile.tmp: no such file or directory\nFAIL    github.com/go-swagger/go-swagger/cmd/swagger/commands   9.401s\nExited with code 1\n```\nPerhaps it had something to do with the fact that I was already testing my branches with Circle CI, but with a broken config? I've now removed my branch from Circle CI.\n  . @fredbi Do I need to worry about that? I could rebase this PR to contain one commit, which I assume would trigger a new build.. > It might be that you have an outdated version of this script in your branch\nI don't think so. My branch only alters 5 files vs master, none of them is related to circle CI. . It must have been my own CI configuration messing things up. I rebased my commits to trigger another build and this seems more hopeful.. AFAICT, the code coverage drop is simply because some of the generated data is longer with this change.. @casualjim When are you next planning a release? I will shortly be publishing software that relies on this feature, so it would be great to point people at a tagged release rather than master.. The helpers make all the difference, thanks. It probably isn't worth the effort to build structs without pointers, given the helpers exist already. Thanks.. ",
    "shyr": "@casualjim Thank you for the response.\nWhen I defined 1 operation with consumes, specifying both parameters for multiple content-type was invalid.\nyaml\n/workspaces/create:\n    post:\n      summary: \"Create a workspace\"\n      tags: [\"workspace\"]\n      operationId: \"WorkspaceCreate\"\n      consumes:\n        - \"application/json\"\n        - \"application/x-www-form-urlencoded\"\n      parameters:\n        - name: \"body\"\n          in: \"body\"\n          schema:\n            $ref: \"#/definitions/workspace\"\n        - name: \"name\"\n          format: \"string\"\n          in: \"formData\"\n          type: \"string\"\n      responses:\n        201:\n          description: \"Workspace created successfully\"\n          schema:\n            $ref: \"#/definitions/workspace\"\nbash\nThe swagger spec at \"./swagger.yaml\" is invalid against swagger specification 2.0. see errors :\n- operation \"WorkspaceCreate\" has both body and formData parameters\nWhen I defined parameters only for json (in: 'body'), I couldn't get proper value from param object(WorkspaceCreateParams) for 'formData' request.\n. It seems that it is the limitation of swagger 2.0. According to this issue, swagger 3.0 supports to define multiple responses based on content-type. It's not an issue of go-swagger, so I close this.. Anyway, I solved the problem using middleware.\ngo\nfunc FileServerMiddleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        if strings.HasPrefix(r.URL.Path, \"/api\") {\n            next.ServeHTTP(w, r)\n        } else {\n            http.FileServer(http.Dir(\"./static\")).ServeHTTP(w, r)\n        }\n    })\n}\nBut I'm not sure it a right and best solution.. IMHO, without pointer we cannot tell some value is provided value or not(zero value).. ",
    "dmacthedestroyer": "Thanks, I'll verify on the most recent master. Any ideas on when go-swagger will be updated with the newest vendor?. @casualjim thanks for the alarmingly quick response -- you've become a legend in my office :)\nI would love to contribute to the project! Unfortunately I'm going to be away from the country for 2.5 weeks starting this weekend... if it can wait that long then I'll take you up on it upon my return!. ",
    "koron": "thank you so much!. thank you \ud83d\ude47 . Should I include golang.org/x/sync/semaphore and its dependencies into vendor/?\nOr just copy minimum files with some modifications?. I created better PR https://github.com/go-swagger/go-swagger/pull/1620 for this problem.\nSo I close this.. @fredbi thank you for reviewing this PR.\nbut I create better change (#1620) for my problem, so I withdrawn this.. thanks!. ",
    "sebastien-rosset": "Yes, I confirm the issue can be closed. thanks.. Do you use a specific procedure to update the files under the vendor directory?. ",
    "stevef1uk": "Sorry, I thought I had but I saw the instruction to do a go get -u so I tried that and now when I try to compile I get:\ngo build restapi/server.go \ncommand-line-arguments\nrestapi/server.go:53:15: undefined: configureAPI\nrestapi/server.go:60:3: undefined: configureFlags\nrestapi/server.go:129:14: undefined: configureAPI\nrestapi/server.go:174:3: undefined: configureServer\nrestapi/server.go:206:3: undefined: configureServer\nrestapi/server.go:273:3: undefined: configureTLS\nrestapi/server.go:292:3: undefined: configureServer\nso closer but no cigar :-)\nAny help in how to get this to compile would be appreciated. . Thanks, as you can tell I am fairly new to go and it has been a year or so since I last tried writing any.\nI have built it! I needed to do a few more go gets for:\nhttps://github.com/go-openapi/strfmt\ngithub.com/go-openapi/analysis\ngithub.com/go-openapi/validate\nThen I needed to edit: restapi/operations/user/login_user_responses.go to add an import for \"github.com/go-openapi/strfmt\"\n. Ah, the joy of cut & paste and learning something new. A real doh! moment.\nNow I am into runtime errors in my code so progress!. Thanks for such a fast response. I was going to stop for the night but now I have fixed that pesky run-time error and I'm on a roll.. I just realised that I specified localhost in the swagger file so that could be why :-). Actually, I just realised that what I could do within the server side handler is use an http client. I know go-swagger can generate the client stuff, but I can't find an example on Google of how to use a generated client. I found a very old blog from Sokohaka, but this is several years old and no longer builds:  http://tdoc.info/en/blog/index.htm \nAny pointers?. ok, having read the client documentation here: \nhttps://goswagger.io/generate/client.html\nI think for others I should point out that the line:\nresp, err := apiclient.Default.Operations.All(operations.AllParams{})\ndoes not compile.\nI used my own swagger file for the service accounts and thus I changed this line to be as follows:\nparams := &operations.GetAccountsParams{ID: 1, Name: \"steve\"}\nparams.WithTimeout(time.Second * 2)\nresp, err := apiclient.Default.Operations.GetAccounts(params)\nI needed to set a timeout or I got the error: 'context deadline exceeded'\nHopefully, this comment will help others trying to pick this up.\n. Please could I request that the generated code also works with go modules? I have created a service proxy project by generating in the same folder both the client and server sides using two almost identical swagger.yaml files (basically just changed ports) and writing a very simple a server handler to use the client API. I had to ditch one of the models directories but basically it worked ok and faily easily. However, when trying to build using go modules I get some strange errors such as 'cannot find module for path goproxy/client/client'. ",
    "abergmeier": "The problem was:\n```\n// swagger:meta\npackage main\n```\nIMO all whitespace characters directly before package should be ignored.. > you have to use the model in a parameters struct, the parameter struct can be assigned to many operations by listing all the operationId's it pertains to.\nThanks for trying to help but I literally did not understand a single thing you said. Can you perhaps try to show with a code sample?. > parameters can't refer to definitions because they are distinct things.\nOk, this then means I am forced to copy and paste parameter entries?. > I don't know why you'd need to copy paste them?\nIf I have 4 operations and all of them want a path parameter of name foobar, this means I have to have 4 definitions of foobar, right?\n```\n// swagger:operation GET /{foobar}/foo1 getFoo1\n//\n// ---\n// produces:\n// - application/json\n// parameters:\n// - name: foobar\n//   in: path\n// swagger:operation GET /{foobar}/foo2 getFoo2\n//\n// ---\n// produces:\n// - application/json\n// parameters:\n// - name: foobar\n//   in: path\n```. > if you use swagger:route you don't need to\nRoute is harder to retrofit into already working source code, IMO.\nI assumed, that one could refer to a \"global\" parameter since it is e.g. possible to refer to a \"global\" security definition. Now I realize, that security has special handling.\nAlso I am not clear what model, route, operation, etc. have as a semantic meaning. It seems the docs assume one is already very versed in these topics (which I am not).\nAnyway, thanks a lot for your time.\n. Seems to be the same as https://github.com/go-swagger/go-swagger/issues/400, only on linux for me.. printenv gives me:\nGOOS=linux\nGOROOT=/mygo\nGOHOSTOS=linux\nGOARCH=amd64\nTMPDIR=/mytmp\nGOHOSTARCH=amd64\nGOPATH=/mysrcs\nPWD=/home/andreas\n. This works now (was not actually related to environment). Had to add binary-only annotation as src tree. Details here.\nWith that, support for go-swagger in Bazel should be mostly ready.. ",
    "diego-fu-hs": "Can you point me to the part for building the binaries?\nIs it possible to add dep ensure as part of the building process?. There's both vendor and godep to version control the external dependencies, which is a bit redundant imo. Both php and node.js recommend not version control the external dependencies.\nI know the topic is controversial, but I just want to put an idea out there since I had to update both Gopkg.lock and the vendor folders to update a dependency. Fair enough. Thanks @casualjim . I am not sure why it is failing to build?. @fredbi found what the problem was.\nDo you mind taking another look? Thanks!. @fredbi anything I can do to fix those? I am pretty lost right now. oh wow thanks guys.\nI totally mixed up skip-validation and skip-validator flags....... @casualjim do you mind taking another look since i took out the wrong flag? Thanks!. Done!. This was a copy-paste error :D. ",
    "Meio-rayliegh": "in fact i search a method to scan all the business world of the new eden\nvia esi it is really difficult i thought of a python programm but it have\ntoo many problem first it have to search the biggest buy order and the\nsmallest sell order but all are repertoried by id and in consideration of\nthe number of ID it is a really big work try to know what objet has which\nvalue after that compared the sell and buy order if it have it it is a\nreally big problem in fact\n2018-01-12 2:42 GMT+01:00 gregmarr notifications@github.com:\n\n@Meio-rayliegh https://github.com/meio-rayliegh I think you have the\nwrong project.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/go-swagger/go-swagger/issues/1374#issuecomment-357118482,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Ahm1hik_hPYDdLge5DfrH7uiV0Kg4W94ks5tJriLgaJpZM4RbslU\n.\n. \n",
    "macrael": "I am also curious about best practices for hosting endpoints other than the API with this framework. For instance, we'd like to host the swagger UI and also our site's front end javascript, somewhere. . Thanks all! Is there a mailing list for this project or are GitHub issues the best forum for questions?. How do I request access to it?. I found it! https://slackin.goswagger.io. I think that building an API that is incapable of differentiating between someone omitting an int field and someone setting it to zero is a pretty serious limitation for API design. Now, it's possible that you could redesign this so that all the API validation happened in another layer and then for required fields the structs that go-swagger fills out could use non-pointer types but that would be a pretty significant change. \nI've written little functions like stringPointer() and intPointer() so that I can construct struct literals with pointers.. I was also seeing the same error on a previous iteration of my swagger file, I think where my body params were not referencing a definition but instead were specified inline. \nThis is a regression, I wasn't seeing this error on a month old version of go-swagger. . This is fixed on master, feel free to close. When are you planning on cutting a new release?. ",
    "keith6014": "i too am curious. what is the best way to achieve this?. ",
    "kmudrick": "I'm on commit f552963ac0dfdec0450f6749aeeeeb2d31cd5544 of go-swagger and I still see this broken discriminator behavior. ",
    "pierrre": "Thank you !. ",
    "abondar24": "A little bit. ",
    "tschaub": "This should likely be ticketed as a separate issue, but it looks like a spec no longer validates if required and default are both present.\nAs you mention, it looks like default has no effect if it is at the property level [1].  If I move default to the top of a schema object, the expected values are set when unmarshalling [2].  But if I add required, the spec no longer validates [3].  Removing default and leaving required makes the spec validate again [4].\nHere is code for each of the cases above:\n 1. https://github.com/tschaub/test-go-swagger/tree/default-per-property\n 2. https://github.com/tschaub/test-go-swagger/tree/default-at-top\n 3. https://github.com/tschaub/test-go-swagger/tree/required-and-default\n 4. https://github.com/tschaub/test-go-swagger/tree/required-without-default. I'm struggling to come up with a security spec that takes advantage of the new optional auth functionality in https://github.com/go-openapi/runtime/pull/98.  Should the configuration below be supported now?\nyml\nsecurity:\n  - {}\n  - SomeOtherAuthenticationType: []. I've created go-openapi/runtime#103 in hopes of getting optional authentication support with a spec like the one above.. Thanks @fredbi - I did look through the docs on composed security requirements - they cover some nice use cases.  Unless I'm misreading, I don't think they consider the \"optional authentication\" use case.\nIt looks like the changes in go-openapi/runtime#98 were intended to support optional authentication.  And there is a test case that covers this (see https://github.com/go-openapi/runtime/pull/98/files#diff-766ab5a2cb406b60ad239ca4c3e484c9R194).  However, the tests passes with a route authenticator that looks like this:\ngo\nra := RouteAuthenticator {\n    allowAnonymous: true,\n}\nAnd this is different than the shape of a route authenticator that is built from the spec above (with security: [{}, ...]).  This spec generates a route authenticator that looks something like this:\ngo\nra := RouteAuthenticator {\n    allowAnonymous: true,\n    Schemes: []string{\"\"},\n    # ...\n}\n. The spec validates using swagger validate and https://editor.swagger.io/.  The OpenAPI spec requires that security items are object and has constraints about additional properties - so an empty object validates.\n. I just noticed that if I quote the letter y, things work again.  Curious why this is required with y and not other letters.. Thanks for the responses.  I'll file away this bit of new yaml knowledge.. ",
    "xibz": "@fredbi - Out of curiosity, rather than factory methods, could values be checked before sending it off across the wire. Meaning if a value is nil, then simply set it to the default value. I much prefer this solution as this allows for struct initialization.. ",
    "ghoroubi": "doc.txt\nI sent my doc.go file (as doc.txt for upload sake) , after using swagger generate spec -o swagger.json and uploading in swaggerhub editor, I see this errors.\nhere is my generated JSON File from doc.go :\nfile:/home/nima/workspace/src/gitlab.com/ghoroubi/tipsy/generated_json.txt\nAnd this is the link of swaggerhub editor with all of errors.\nhttps://app.swaggerhub.com/apis/ghoroubi/Tipswagger/1.0.0\n. @fredbi \nI didn't get any response to my issue yet, please check my provided details and help me to solve it.. @fredbi thank you to answer me, can you help me to find the true person to solve my problem?\nI stuck in the middle of our project documentation with swagger.\nPlease help me to find the true developer of your team.\nThanks. @casualjim \nThank you so much my friend \nI appreciate you \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f. ",
    "bestplay": "Same issue.\n@casualjim . ",
    "sherwoodzern": "Jim,\nThe application is a REST based application.  Once I compile then I execute ./. Then I send curl commands to it.  The main routine is just an http server listening for requests on the port 8080.\n. there are multiple Go programs but the service.go are the publicly exposed REST APIs and the main.go is at the bottom of this post.\n```go\n//This is the service.go file\npackage payment\nimport (\n    \"errors\"\n    \"fmt\"\n    \"time\"\n)\n// Middleware decorates a service.\ntype Middleware func(Service) Service\ntype Service interface {\n    Authorise(total float32) (Authorisation, error) // GET /paymentAuth\n    Health() []Health                               // GET /health\n}\n//swagger:parameters Authorise\ntype Authorisation struct {\n    Authorised bool   json:\"authorised\"\n    Message    string json:\"message\"\n}\n//swagger:parameters Health\ntype Health struct {\n    Service string json:\"service\"\n    Status  string json:\"status\"\n    Time    string json:\"time\"\n}\n// NewFixedService returns a simple implementation of the Service interface,\n// fixed over a predefined set of socks and tags. In a real service you'd\n// probably construct this with a database handle to your socks DB, etc.\nfunc NewAuthorisationService(declineOverAmount float32) Service {\n    return &service{\n        declineOverAmount: declineOverAmount,\n    }\n}\ntype service struct {\n    declineOverAmount float32\n}\n//swagger:route POST /paymentAuth payment authorization Authorise\n//\n// This will validate as to whether or not the amount of the purchase is\n// an authorized amount.  The default value is $105.00\n//\n// Consumes:\n//      - application/json\n// Produces:\n//      - application/json\n// Responses:\n//    default: ErrInvalidPaymentAmount\n//        200: Authorisation\n//\nfunc (s *service) Authorise(amount float32) (Authorisation, error) {\n    if amount == 0 {\n        return Authorisation{}, ErrInvalidPaymentAmount\n    }\n    if amount < 0 {\n        return Authorisation{}, ErrInvalidPaymentAmount\n    }\n    authorised := false\n    message := \"Payment declined\"\n    if amount <= s.declineOverAmount {\n        authorised = true\n        message = \"Payment authorised\"\n    } else {\n        message = fmt.Sprintf(\"Payment declined: amount exceeds %.2f\", s.declineOverAmount)\n    }\n    return Authorisation{\n        Authorised: authorised,\n        Message:    message,\n    }, nil\n}\n// swagger:route POST /health health Health\n//\n// This will validate as to whether or not the amount of the purchase is\n// an authorized amount.  The default value is $105.00\n//\n// Consumes:\n//      - application/json\n// Produces:\n//      - application/json\n// Responses:\n//        200: []Health\n//\nfunc (s *service) Health() []Health {\n    var health []Health\n    app := Health{\"payment\", \"OK\", time.Now().String()}\n    health = append(health, app)\n    return health\n}\nvar ErrInvalidPaymentAmount = errors.New(\"Invalid payment amount\")\n```\n\nThis is the main.go\n```go\npackage main\nimport (\n    \"flag\"\n    \"fmt\"\n    //\"net\"\n    \"net/http\"\n    \"os\"\n    \"os/signal\"\n    //\"strings\"\n    \"syscall\"\n//\"github.com/go-kit/kit/log\"\n\"github.com/microservices-demo/payment\"\n//stdopentracing \"github.com/opentracing/opentracing-go\"\n//zipkin \"github.com/openzipkin/zipkin-go-opentracing\"\n\"golang.org/x/net/context\"\n\n)\nconst (\n    ServiceName = \"payment\"\n)\nfunc main() {\n    var (\n        port          = flag.String(\"port\", \"8080\", \"Port to bind HTTP listener\")\n        //zip           = flag.String(\"zipkin\", os.Getenv(\"ZIPKIN\"), \"Zipkin address\")\n        declineAmount = flag.Float64(\"decline\", 105, \"Decline payments over certain amount\")\n    )\n    flag.Parse()\n// The istio service mesh provides openTracing at the time the service is deployed\n/* var tracer stdopentracing.Tracer\n{\n    // Log domain.\n    var logger log.Logger\n    {\n        logger = log.NewLogfmtLogger(os.Stderr)\n        logger = log.With(logger, \"ts\", log.DefaultTimestampUTC)\n        logger = log.With(logger, \"caller\", log.DefaultCaller)\n    }\n    // Find service local IP.\n    conn, err := net.Dial(\"udp\", \"8.8.8.8:80\")\n    if err != nil {\n        logger.Log(\"err\", err)\n        os.Exit(1)\n    }\n    localAddr := conn.LocalAddr().(*net.UDPAddr)\n    host := strings.Split(localAddr.String(), \":\")[0]\n    defer conn.Close()\n    if *zip == \"\" {\n        tracer = stdopentracing.NoopTracer{}\n    } else {\n        logger := log.With( logger,\"tracer\", \"Zipkin\")\n\n        logger.Log(\"addr\", zip)\n        collector, err := zipkin.NewHTTPCollector(\n            *zip,\n            zipkin.HTTPLogger(logger),\n        )\n        if err != nil {\n            logger.Log(\"err\", err)\n            os.Exit(1)\n        }\n        tracer, err = zipkin.NewTracer(\n            zipkin.NewRecorder(collector, false, fmt.Sprintf(\"%v:%v\", host, port), ServiceName),\n        )\n        if err != nil {\n            logger.Log(\"err\", err)\n            os.Exit(1)\n        }\n    }\n    stdopentracing.InitGlobalTracer(tracer)\n\n} */\n// Mechanical stuff.\nerrc := make(chan error)\nctx := context.Background()  //return a non-nil, empty Context\n\n// ? Do we need the tracer ?\n//handler, logger := payment.WireUp(ctx, float32(*declineAmount), tracer, ServiceName)\n\n//The tracer was removed\nhandler, logger := payment.WireUp(ctx,float32(*declineAmount),ServiceName)\n\n// Create and launch the HTTP server.\ngo func() {\n    logger.Log(\"transport\", \"HTTP\", \"port\", *port)\n    errc <- http.ListenAndServe(\":\"+*port, handler)\n}()\n\n// Capture interrupts.\ngo func() {\n    c := make(chan os.Signal)\n    signal.Notify(c, syscall.SIGINT, syscall.SIGTERM)\n    errc <- fmt.Errorf(\"%s\", <-c)\n}()\n\nlogger.Log(\"exit\", <-errc)\n\n}\n```\n. Hi Jim,\nWere you able to uncover anything?. ",
    "jucardi": "Thank you @casualjim, I was not aware of swagger:operation. Reading the spec though, it seems that the Schemas have to be added manually with the ref, type and description? This was the example I found in the documentation\n// responses:\n    //   '200':\n    //     description: pet response\n    //     schema:\n    //       type: array\n    //       items:\n    //         \"$ref\": \"#/definitions/pet\"\n    //   default:\n    //     description: unexpected error\n    //     schema:\n    //       \"$ref\": \"#/definitions/errorModel\"\nI was hoping to just provide a swagger:model name and obtain all this information directly from there, similar to how Responses are tied in swagger:route by just specifying the response code and model name and an optional description\nI submitted a PR that would allow adding the parameters through swagger:route\nhttps://github.com/go-swagger/go-swagger/pull/1405\nI think it would be a nice addition to swagger:route. I'd love to hear your thoughts, hopefully you'll find it useful, if not I'll start using swagger:operation instead. I'll increase the coverage in a bit\n. Hi @casualjim will do, I'll cover more validations, such as only allow the use of schemas when in:body or allow allowEmptyValue to be set only if in:query or in:formData.\nWere there any other use cases you had in mind?. the constraints, you're absolutely right, I completely forgot about them, I'll work on those as well. @casualjim I added a section to parse the schema in parameters, covers max, min, maxLength, minLength, default, enum, format, it also does type assertion when using these constraints to ensure they are assigned to the right types.\nLet me know if you have any observations. Thanks!. The changes in this file are just the result of a gofmt -s -w -l ., no changes in logic. If needed they could be rolled back before merging. ",
    "BertrandGouny": "Thanks for the quick reply :) \nnot sure if this is not legal, here an example from the swagger 2 documentation (maybe outdated ?) : \nhttps://swagger.io/docs/specification/2-0/describing-responses/ \nsection reusing responses : \n```\npaths:\n  /users:\n    get:\n      summary: Gets a list of users.\n      response:\n        200:\n          description: OK\n          schema:\n            $ref: \"#/definitions/ArrayOfUsers\"\n        401:\n          $ref: \"#/responses/Unauthorized\"   # <-----\n  /users/{id}:\n    get:\n      summary: Gets a user by ID.\n      response:\n        200:\n          description: OK\n          schema:\n            $ref: \"#/definitions/User\"\n        401:\n          $ref: \"#/responses/Unauthorized\"   # <-----\n        404:\n          $ref: \"#/responses/NotFound\"       # <-----\nDescriptions of common responses\nresponses:\n  NotFound:\n    description: The specified resource was not found\n    schema:\n      $ref: \"#/definitions/Error\"\n  Unauthorized:\n    description: Unauthorized\n    schema:\n      $ref: \"#/definitions/Error\"\ndefinitions:\n  # Schema for error response body\n  Error:\n    type: object\n    properties:\n      code:\n        type: string\n      message:\n        type: string\n    required:\n      - code\n      - message\n``\n. thanks :). Yes it work by setting./responses.yaml#/definitions/Error` in the responses.yaml file.\nWill use this workaround thanks :). @casualjim yes, with swagger flatten the model definition is missing, but no error is thrown. \n@fredbi thanks for the review, i tried to find a fix too but this is too complicated to me :s . @fredbi thanks, sorry for the late reply,\ni have the following error with the example : \n```\npanic: object has no key \"Error\"\ngoroutine 1 [running]:\ngithub.com/go-swagger/go-swagger/vendor/github.com/go-openapi/spec.ResolveRef(0xad9e20, 0xc420f1ca00, 0xc4216600c0, 0x0, 0x0, 0x0)\n    /home/hello/workspace/project/go/src/github.com/go-swagger/go-swagger/vendor/github.com/go-openapi/spec/expander.go:109 +0x34a\ngithub.com/go-swagger/go-swagger/generator.(typeResolver).resolveSchemaRef(0xc4209dfdd0, 0xc4216600a8, 0xc422057901, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\n    /home/hello/workspace/project/go/src/github.com/go-swagger/go-swagger/generator/types.go:202 +0xc1\ngithub.com/go-swagger/go-swagger/generator.(typeResolver).ResolveSchema(0xc4209dfdd0, 0xc4216600a8, 0x101, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\n    /home/hello/workspace/project/go/src/github.com/go-swagger/go-swagger/generator/types.go:526 +0x178\ngithub.com/go-swagger/go-swagger/generator.(schemaGenContext).makeGenSchema(0xc421660000, 0xc420fb8760, 0x10)\n    /home/hello/workspace/project/go/src/github.com/go-swagger/go-swagger/generator/model.go:1405 +0x150d\ngithub.com/go-swagger/go-swagger/generator.(codeGenOpBuilder).MakeResponse(0xc421101b00, 0xb74a3a, 0x1, 0xc420fb8760, 0x10, 0xb7dc00, 0xc4209dfdd0, 0x190, 0x0, 0x0, ...)\n    /home/hello/workspace/project/go/src/github.com/go-swagger/go-swagger/generator/operation.go:625 +0x807\ngithub.com/go-swagger/go-swagger/generator.(codeGenOpBuilder).MakeOperation(0xc421101b00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\n    /home/hello/workspace/project/go/src/github.com/go-swagger/go-swagger/generator/operation.go:392 +0x1d88\ngithub.com/go-swagger/go-swagger/generator.(appGenerator).makeCodegenApp(0xc420cef500, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\n    /home/hello/workspace/project/go/src/github.com/go-swagger/go-swagger/generator/support.go:607 +0x1157\ngithub.com/go-swagger/go-swagger/generator.(appGenerator).Generate(0xc420cef500, 0x0, 0x0)\n    /home/hello/workspace/project/go/src/github.com/go-swagger/go-swagger/generator/support.go:193 +0xb6\ngithub.com/go-swagger/go-swagger/generator.GenerateServer(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc4204ca3c0, 0xc420369bc0, ...)\n    /home/hello/workspace/project/go/src/github.com/go-swagger/go-swagger/generator/support.go:43 +0xcb\ngithub.com/go-swagger/go-swagger/cmd/swagger/commands/generate.(Server).generate(0xc420496d80, 0xc4204ca3c0, 0x0, 0x0)\n    /home/hello/workspace/project/go/src/github.com/go-swagger/go-swagger/cmd/swagger/commands/generate/server.go:96 +0x94\ngithub.com/go-swagger/go-swagger/cmd/swagger/commands/generate.createSwagger(0xc4b760, 0xc420496d80, 0x7b6e01, 0x7fb3857477a0)\n    /home/hello/workspace/project/go/src/github.com/go-swagger/go-swagger/cmd/swagger/commands/generate/shared.go:67 +0x13f\ngithub.com/go-swagger/go-swagger/cmd/swagger/commands/generate.(Server).Execute(0xc420496d80, 0xc420369b80, 0x0, 0x4, 0xc420496d80, 0x1)\n    /home/hello/workspace/project/go/src/github.com/go-swagger/go-swagger/cmd/swagger/commands/generate/server.go:119 +0x37\ngithub.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags.(Parser).ParseArgs(0xc420089c20, 0xc42001e150, 0x4, 0x4, 0x4122f8, 0x30, 0xc4200b4bd0, 0x33, 0x6)\n    /home/hello/workspace/project/go/src/github.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags/parser.go:316 +0x80b\ngithub.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags.(*Parser).Parse(0xc420089c20, 0x6, 0xb77d81, 0x6, 0x0, 0xbc18e2)\n    /home/hello/workspace/project/go/src/github.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags/parser.go:186 +0x71\nmain.main()\n    /home/hello/workspace/project/go/src/github.com/go-swagger/go-swagger/cmd/swagger/swagger.go:140 +0xbc5\n```\nNot sure i tested it the right way: i get swagger from master and used commit 9acd88844bc186c3ec7f318cd3d56f1114b4ab99 for go-openapi/spec lib and rebuild swagger. Do i need to do anything else to test this ?\n. Any update on this ? the fix seems to not solve the issue example . Perfect ! Thanks :)\n. Thanks you @gregmarr and @fredbi \nusing a pattern will do the trick indeed  :+1: \ni ended up with something like ^(\\S.*\\S|\\S)*$ to accept only trimmed strings and single non-whitespace char. \nFeel free to close this :) . Thanks,\n@casualjim i get this error using dep that seems to flatten vendors dependencies \nerror when i try to compile auth-api server : \nvendor/xxx.com/xxx/users-api/client/users_client.go:60:23: \ncannot use transport (type \"xxx/auth-api/vendor/github.com/go-openapi/runtime\".ClientTransport) \nas type \"xxx/users-api/vendor/github.com/go-openapi/runtime\".ClientTransport in argument to users.New\nxxx/auth-api\n\u251c\u2500\u2500 cmd\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 auth-server\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 main.go\n\u251c\u2500\u2500 Gopkg.lock\n\u251c\u2500\u2500 Gopkg.toml\n\u251c\u2500\u2500 models\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 [...]\n\u251c\u2500\u2500 restapi\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 clients\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 clients.go\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 configure_auth.go\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 doc.go\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 embedded_spec.go\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 handlers\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 auth.go\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 operations\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 auth\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0  \u00a0\u00a0 \u2514\u2500\u2500 [...]\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 server.go\n\u251c\u2500\u2500 specs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 swagger.yaml\n\u2514\u2500\u2500 vendor\n    \u251c\u2500\u2500 github.com\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 [...]\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 go-openapi\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 analysis\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [...]\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 errors\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [...]\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 jsonpointer\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [...]\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 jsonreference\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [...]\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 loads\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [...]\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 runtime\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [...]\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 spec\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [...]\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 strfmt\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [...]\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 swag\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [...]\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 validate\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 [...]\n    \u251c\u2500\u2500 xxx.com\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 xxx\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 users-api\n    \u2502\u00a0\u00a0         \u251c\u2500\u2500 client\n    \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 users\n    \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [...]\n    \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 users_client.go\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 models\n    \u2502\u00a0\u00a0             \u2514\u2500\u2500 [...]\n    \u2514\u2500\u2500 [...]\n. i removed users-api and go-openapi packages from vendor dir and use go get and i still have a similar issue : \n../../xxx.com/xxx/users-api/client/users_client.go:60:23: cannot use transport (type \"github.com/go-openapi/runtime\".ClientTransport) as type \"xxx/users-api/vendor/github.com/go-openapi/runtime\".ClientTransport in argument to users.New:\n    \"github.com/go-openapi/runtime\".ClientTransport does not implement \"xxx/users-api/vendor/github.com/go-openapi/runtime\".ClientTransport (wrong type for Submit method)\n        have Submit(*\"github.com/go-openapi/runtime\".ClientOperation) (interface {}, error)\n        want Submit(*\"xxx/users-api/vendor/github.com/go-openapi/runtime\".ClientOperation) (interface {}, error)\ni don't understand why it try to get xxx/users-api/vendor/github.com/go-openapi/runtime :/ . ```\nimport (\n    \"github.com/go-openapi/runtime\"\n    httptransport \"github.com/go-openapi/runtime/client\"\nstrfmt \"github.com/go-openapi/strfmt\"\n\n\"xxx/users-api/client/users\"\n\n)\n```. thanks a lot, i have no error on a clean go env :) \nwill test that first from now for dependencies issues.\nthe issue came from the following import in users-api/client/users_client.go that resolved to the users-api dev project directory that contains a vendor dir\n\"xxx/users-api/client/users\" \nalso adding the package domain name before this import seems to allow vendoring users-api client :) \n\"xxx.com/xxx/users-api/client/users\" \nso this was just due to a messy go development environment and import path. \nThanks again for your help :+1: . ",
    "knweiss": "As this pattern is so common it would be a nice improvement if the go-swapper server code generator would create a restapi configure file with such a state pattern in mind.\nI've also read the interesting kvstore example. What I find a little bit confusing about it is that there is the kvstore.Runtime type (on which handlers are defined) which capsules the db connection and the app.Application type which itself also capsules various data types (logger, config, etc). Wouldn't it be nicer if there was only one of those types but not both?\nThe fact that kvstore uses many third party packages and middlewares that you (as a reader) have to understand as well doesn't help. I.e. there really is a need for a simpler example of this basic pattern.\nkvstored also doesn't call restapi.configureAPI at all if I am not missing something.\nSide note: On the first look the api.ServerInterface approach of https://github.com/deepmap/oapi-codegen looks nice as it uses the state pattern without forcing the developer to modify any of the generated code at all. See the provided example:\n\nhttps://github.com/deepmap/oapi-codegen/blob/master/examples/petestore-expanded/internal/petstore.go#L25  (the API implementation that implements the api.ServerInterface interface)\nhttps://github.com/deepmap/oapi-codegen/blob/master/examples/petestore-expanded/api/petstore.gen.go#L37 (the generated code). @casualjim In the meantime I've tested https://github.com/Stratoscale/swagger and I like it. Thanks for the hint!\n\nIn my tests (without Docker) the templates of their current version only work with go-swagger v0.17.0 and not with v0.18.0. (The docker image has several vulns according to quay.io).. @gregmarr Okay, I gave it a shot. Please verify.\nHowever, I've noticed two issues:\n1. I did not update examples/contributed-templates/stratoscale/ as the go generate call in examples/contributed-templates/stratoscale/restapi/configure_petstore.go is missing.\n2. The go generate call in examples/todo-list/restapi/configure_todo_list.go uses the default flag-strategy but the existing generated code uses the optional --flag-strategy=pflag. To keep the diff as small as possible I've kept using this flag strategy but did not edit/change the (generated) go generate call.. ",
    "kuai6": "Yes, i just pull actual revision and bug is fixed! Thanks a lot !. yeah thanks. Oh, i open my eyes and found  \n// HTTP Request Object \ninto param struct. Thanks for that )). ",
    "tortuoise": "I'll work on a pull request. Changing just the commands and templates shouldn't take that much time, but changing all the examples and tutorials will. Do you prefer be done simultaneously ?. I've used golang.org/x/net/netutil for its LimitListener to replace graceful.Server.ListenLimit. \nAny ideas how to replace graceful.Server.LogFunc ? . Ok. \nOne other observation: graceful.Server handles  SIGINT/SIGTERM - not sure http.Server does that. . I had a look at TV4/graceful. Server shutdown is reliant on a syscall which I'm not sure is good - but I get the general idea.  . I've made the changes in a fork though still facing some issues so no pr yet. Comments about general approach, obvious errors etc. welcome.. Will be good to have somebody replicate this problem or point out any errors in my example setup. . Thanks very much! I was close to giving up on client gen.  . Will it be useful to add a map access check to go-openapi/runtime/client/runtime.go before the call to buildHTTP?\nif _, ok := r.Producers[cmt]; !ok {   \n        return nil, fmt.Errorf(\"%v\", \"Producer not registered\") \n}. Done.. It's the same handler for all the schemes. I've only implemented it for http. Is that what you mean ?. Ok agreed.. Only niladic functions can run in sync.Once - and I don't think they can have receivers, i.e. be methods.. Not sure I understand. Something like this?\nfunc (s *Server) Serve() (err error) {\n    ...\n    if s.hasScheme(schemeHTTP) {\n        ...\n        signalNotify(s.interrupt)\n        quitting := make(chan struct{})\n        once := new(sync.Once)\n        go handleInterrupt(once, s, quitting)\n        ...\n    }\n    ...\n}\nfunc handleInterrupt(once *sync.Once, s *Server, quitting chan struct{}) {\n    once.Do(func(){\n         for _ = range s.interrupt {\n             ...\n         }\n    })\n}\n\n. Sorry for the stray commented lines - will remove them and re-run generator.  . ",
    "adsodemelk": "I hit this problem while running a swagger.yml api definition. my workaround was to convert it to swagger.json and re run go-swagger.\n. ",
    "juacker": "Maybe not your scenario, but I had the same problem with a swagger definition similar to this one:\nInputMessageParams:\n  type: object\n  properties:\n    key1:\n      type: string\n      required: true\n    key2:\n      type: string\n      required: true\n    key3:\n      type: string\n      required: true\nI replaced with this and worked:\nInputMessageParams:\n  type: object\n  required:\n    - key1\n    - key2\n    - key3\n  properties:\n    key1:\n      type: string\n    key2:\n      type: string\n    key3:\n      type: string. ",
    "nikhil1011": "Sometimes you might miss a space between the hyphen (\"-\") and the word next to it. Introducing a space set everything right for me again.. ",
    "pschuegr": "I see, thanks.  What determines whether the middleware is applied to the request?. Ok, thanks for the information.. ",
    "chrisabruce": "Great thanks!  Just tested and can confirm.. ",
    "Freyert": "@fredbi I pulled master and did the following:\n```\ngo get -u github.com/go-swagger/go-swagger/cmd/swagger\ngo build -o $GOPATH/bin/swagger ./cmd/swagger\n./bin/swagger validate file.yaml\n2018/04/11 13:53:51\nThe swagger spec at \"/Users/fultonbyrne/Desktop/photic-docs/_data/networkmanager_swagger.yaml\" showed up some valid but possiby unwanted constructs.\n2018/04/11 13:53:51 See warnings below:\n2018/04/11 13:53:51 - WARNING: parameter \"#/parameters/includeChildren\" is not used anywhere\nThe swagger spec at \"/Users/fultonbyrne/Desktop/photic-docs/_data/networkmanager_swagger.yaml\" is invalid against swagger specification 2.0.\nSee errors below:\n- some references could not be resolved in spec. First found: object has no key \"Release\"\n```\nGopkg.toml\n```\nThis file is autogenerated, do not edit; changes may be undone by the next 'dep ensure'.\n[[projects]]\n  name = \"github.com/PuerkitoBio/purell\"\n  packages = [\".\"]\n  revision = \"0bcb03f4b4d0a9428594752bd2a3b9aa0a9d4bd4\"\n  version = \"v1.1.0\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/PuerkitoBio/urlesc\"\n  packages = [\".\"]\n  revision = \"de5bf2ad457846296e2031421a34e2568e304e35\"\n[[projects]]\n  name = \"github.com/asaskevich/govalidator\"\n  packages = [\".\"]\n  revision = \"ccb8e960c48f04d6935e72476ae4a51028f9e22f\"\n  version = \"v9\"\n[[projects]]\n  branch = \"v2\"\n  name = \"github.com/coreos/go-oidc\"\n  packages = [\".\"]\n  revision = \"065b426bd41667456c1a924468f507673629c46b\"\n[[projects]]\n  name = \"github.com/davecgh/go-spew\"\n  packages = [\"spew\"]\n  revision = \"346938d642f2ec3594ed81d874461961cd0faa76\"\n  version = \"v1.1.0\"\n[[projects]]\n  name = \"github.com/docker/go-units\"\n  packages = [\".\"]\n  revision = \"47565b4f722fb6ceae66b95f853feed578a4a51c\"\n  version = \"v0.3.3\"\n[[projects]]\n  name = \"github.com/fsnotify/fsnotify\"\n  packages = [\".\"]\n  revision = \"c2828203cd70a50dcccfb2761f8b1f8ceef9a8e9\"\n  version = \"v1.4.7\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/go-openapi/analysis\"\n  packages = [\".\"]\n  revision = \"f59a71f0ece6f9dfb438be7f45148f006cbad88e\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/go-openapi/errors\"\n  packages = [\".\"]\n  revision = \"7bcb96a367bac6b76e6e42fa84155bb5581dcff8\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/go-openapi/inflect\"\n  packages = [\".\"]\n  revision = \"b1f6470ffb9c552dc105dd869f16e36ba86ba7d0\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/go-openapi/jsonpointer\"\n  packages = [\".\"]\n  revision = \"3a0015ad55fa9873f41605d3e8f28cd279c32ab2\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/go-openapi/jsonreference\"\n  packages = [\".\"]\n  revision = \"3fb327e6747da3043567ee86abd02bb6376b6be2\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/go-openapi/loads\"\n  packages = [\n    \".\",\n    \"fmts\"\n  ]\n  revision = \"2a2b323bab96e6b1fdee110e57d959322446e9c9\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/go-openapi/runtime\"\n  packages = [\n    \".\",\n    \"client\",\n    \"flagext\",\n    \"logger\",\n    \"middleware\",\n    \"middleware/denco\",\n    \"middleware/header\",\n    \"middleware/untyped\",\n    \"security\"\n  ]\n  revision = \"62281b694b396a17fe3e4313ee8b0ca2c3cca719\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/go-openapi/spec\"\n  packages = [\".\"]\n  revision = \"370d9e047557906322be8396e77cb0376be6cb96\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/go-openapi/strfmt\"\n  packages = [\".\"]\n  revision = \"481808443b00a14745fada967cb5eeff0f9b1df2\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/go-openapi/swag\"\n  packages = [\".\"]\n  revision = \"811b1089cde9dad18d4d0c2d09fbdbf28dbd27a5\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/go-openapi/validate\"\n  packages = [\".\"]\n  revision = \"180bba53b98899f743a112e568bed9e2ef31aa20\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/go-swagger/scan-repo-boundary\"\n  packages = [\"makeplans\"]\n  revision = \"196ec52cfa1c96b45dd793dfa0fa3f8877b299da\"\n[[projects]]\n  name = \"github.com/golang/protobuf\"\n  packages = [\"proto\"]\n  revision = \"925541529c1fa6821df4e44ce2723319eb2be768\"\n  version = \"v1.0.0\"\n[[projects]]\n  name = \"github.com/gorilla/handlers\"\n  packages = [\".\"]\n  revision = \"90663712d74cb411cbef281bc1e08c19d1a76145\"\n  version = \"v1.3.0\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/hashicorp/hcl\"\n  packages = [\n    \".\",\n    \"hcl/ast\",\n    \"hcl/parser\",\n    \"hcl/printer\",\n    \"hcl/scanner\",\n    \"hcl/strconv\",\n    \"hcl/token\",\n    \"json/parser\",\n    \"json/scanner\",\n    \"json/token\"\n  ]\n  revision = \"ef8a98b0bbce4a65b5aa4c368430a80ddc533168\"\n[[projects]]\n  name = \"github.com/jessevdk/go-flags\"\n  packages = [\".\"]\n  revision = \"c6ca198ec95c841fdb89fc0de7496fed11ab854e\"\n  version = \"v1.4.0\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/kr/pretty\"\n  packages = [\".\"]\n  revision = \"cfb55aafdaf3ec08f0db22699ab822c50091b1c4\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/kr/text\"\n  packages = [\".\"]\n  revision = \"7cafcd837844e784b526369c9bce262804aebc60\"\n[[projects]]\n  name = \"github.com/magiconair/properties\"\n  packages = [\".\"]\n  revision = \"c3beff4c2358b44d0493c7dda585e7db7ff28ae6\"\n  version = \"v1.7.6\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/mailru/easyjson\"\n  packages = [\n    \"buffer\",\n    \"jlexer\",\n    \"jwriter\"\n  ]\n  revision = \"8b799c424f57fa123fc63a99d6383bc6e4c02578\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/mitchellh/mapstructure\"\n  packages = [\".\"]\n  revision = \"00c29f56e2386353d58c599509e8dc3801b0d716\"\n[[projects]]\n  name = \"github.com/pelletier/go-toml\"\n  packages = [\".\"]\n  revision = \"acdc4509485b587f5e675510c4f2c63e90ff68a8\"\n  version = \"v1.1.0\"\n[[projects]]\n  name = \"github.com/pmezard/go-difflib\"\n  packages = [\"difflib\"]\n  revision = \"792786c7400a136282c1664665ae0a8db921c6c2\"\n  version = \"v1.0.0\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/pquerna/cachecontrol\"\n  packages = [\n    \".\",\n    \"cacheobject\"\n  ]\n  revision = \"525d0eb5f91d30e3b1548de401b7ef9ea6898520\"\n[[projects]]\n  name = \"github.com/spf13/afero\"\n  packages = [\n    \".\",\n    \"mem\"\n  ]\n  revision = \"63644898a8da0bc22138abf860edaf5277b6102e\"\n  version = \"v1.1.0\"\n[[projects]]\n  name = \"github.com/spf13/cast\"\n  packages = [\".\"]\n  revision = \"8965335b8c7107321228e3e3702cab9832751bac\"\n  version = \"v1.2.0\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/spf13/jwalterweatherman\"\n  packages = [\".\"]\n  revision = \"7c0cea34c8ece3fbeb2b27ab9b59511d360fb394\"\n[[projects]]\n  name = \"github.com/spf13/pflag\"\n  packages = [\".\"]\n  revision = \"e57e3eeb33f795204c1ca35f56c44f83227c6e66\"\n  version = \"v1.0.0\"\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/spf13/viper\"\n  packages = [\".\"]\n  revision = \"8dc2790b029dc41e2b8ff772c63c26adbb1db70d\"\n[[projects]]\n  name = \"github.com/stretchr/testify\"\n  packages = [\"assert\"]\n  revision = \"12b6f73e6084dad08a7c6e575284b177ecafbc71\"\n  version = \"v1.2.1\"\n[[projects]]\n  name = \"github.com/toqueteos/webbrowser\"\n  packages = [\".\"]\n  revision = \"3232c91b8ede8ca86e8962981d881af78875542f\"\n  version = \"v1.1.0\"\n[[projects]]\n  name = \"github.com/tylerb/graceful\"\n  packages = [\".\"]\n  revision = \"4654dfbb6ad53cb5e27f37d99b02e16c1872fbbb\"\n  version = \"v1.2.15\"\n[[projects]]\n  branch = \"master\"\n  name = \"golang.org/x/crypto\"\n  packages = [\n    \"ed25519\",\n    \"ed25519/internal/edwards25519\"\n  ]\n  revision = \"d6449816ce06963d9d136eee5a56fca5b0616e7e\"\n[[projects]]\n  branch = \"master\"\n  name = \"golang.org/x/net\"\n  packages = [\n    \"context\",\n    \"context/ctxhttp\",\n    \"idna\"\n  ]\n  revision = \"61147c48b25b599e5b561d2e9c4f3e1ef489ca41\"\n[[projects]]\n  branch = \"master\"\n  name = \"golang.org/x/oauth2\"\n  packages = [\n    \".\",\n    \"internal\"\n  ]\n  revision = \"921ae394b9430ed4fb549668d7b087601bd60a81\"\n[[projects]]\n  branch = \"master\"\n  name = \"golang.org/x/sys\"\n  packages = [\"unix\"]\n  revision = \"3b87a42e500a6dc65dae1a55d0b641295971163e\"\n[[projects]]\n  name = \"golang.org/x/text\"\n  packages = [\n    \"collate\",\n    \"collate/build\",\n    \"internal/colltab\",\n    \"internal/gen\",\n    \"internal/tag\",\n    \"internal/triegen\",\n    \"internal/ucd\",\n    \"language\",\n    \"secure/bidirule\",\n    \"transform\",\n    \"unicode/bidi\",\n    \"unicode/cldr\",\n    \"unicode/norm\",\n    \"unicode/rangetable\",\n    \"width\"\n  ]\n  revision = \"f21a4dfb5e38f5895301dc265a8def02365cc3d0\"\n  version = \"v0.3.0\"\n[[projects]]\n  branch = \"master\"\n  name = \"golang.org/x/tools\"\n  packages = [\n    \"go/ast/astutil\",\n    \"go/buildutil\",\n    \"go/loader\",\n    \"imports\"\n  ]\n  revision = \"faed997d2c50aac9885d111f84817ba5a3a71455\"\n[[projects]]\n  name = \"google.golang.org/appengine\"\n  packages = [\n    \"internal\",\n    \"internal/base\",\n    \"internal/datastore\",\n    \"internal/log\",\n    \"internal/remote_api\",\n    \"internal/urlfetch\",\n    \"urlfetch\"\n  ]\n  revision = \"150dc57a1b433e64154302bdc40b6bb8aefa313a\"\n  version = \"v1.0.0\"\n[[projects]]\n  branch = \"v2\"\n  name = \"gopkg.in/mgo.v2\"\n  packages = [\n    \"bson\",\n    \"internal/json\"\n  ]\n  revision = \"3f83fa5005286a7fe593b055f0d7771a7dce4655\"\n[[projects]]\n  name = \"gopkg.in/square/go-jose.v2\"\n  packages = [\n    \".\",\n    \"cipher\",\n    \"json\"\n  ]\n  revision = \"76dd09796242edb5b897103a75df2645c028c960\"\n  version = \"v2.1.6\"\n[[projects]]\n  name = \"gopkg.in/yaml.v2\"\n  packages = [\".\"]\n  revision = \"5420a8b6744d3b0345ab293f6fcba19c978f1183\"\n  version = \"v2.2.1\"\n[solve-meta]\n  analyzer-name = \"dep\"\n  analyzer-version = 1\n  inputs-digest = \"843d507471a279f79b325cbdbbf77f88e322560dea323059d2f4a141ab6b24a3\"\n  solver-name = \"gps-cdcl\"\n  solver-version = 1\n``. Let me get to minimal viable. There's nothing really special that we're doing. It's just that the refs point to items within the same document.schema -> definitions.. Yup, I've updated to use all the latest versions so I _believe_ and yet it still can't resolve$refsthat point within the file via#/definitions/Model`.\nFrom reading through the above comments and PRs it sounds like this has been fixed, but it doesn't seem to flow for me. If someone else wanted to they could take my lockfile and see if they can recreate.. So, no his workaround does not work in this case. The $ref points to \n\"./networkmanager_swagger.yaml/#/definitions/Membership\" which is in the same file to begin with.. After trying to achieve a minimal reproducible I've identified that there's something amiss with our definition. I'll keep working with it to see if I can isolate the issue. Thank you all for your help!\nI've really loved this tool so far. It's gotten me farther than any other swagger tool I've used yet. The validator is incredibly helpful most of the time. Thank you all for your work!. ",
    "thefinn93": "Great, thanks!. I'm running into this too, I think because I'm using a new(ish) TLD. I would like to fix this to fix this, but I have no idea where the email validation is taking place. Could someone tell me where this validation is taking place?. ",
    "sunsus": "I have the same Issue with swagger space it was working.. ",
    "lurainsin": "Same here.\nCan someone help?. ",
    "spencer-rig": "I have the same problem. go-swagger version 0.13.0 (commit 8135eb6728e43b73489e80f94426e6d387809502). Go version go1.9.2 darwin/amd64\nI also notice other open issues about the same thing: #1079 and #796 . ",
    "brunt": "I was able to generate models with the -m flag.\nswagger generate spec -m -o ./swagger.json. ",
    "moskal91": "Same for me, without -m does not work - go-swagger 0.16.0. @casualjim I just tested it with all underscores removed (alias mypkg and package github.com/user/externalrepo/mypkg), unfortunately the same result.. Ok, commits squashed and signed with GPG key now.. @casualjim After some deeper digging in the code, I made another approach which is more consistent with existing solutions. Result is the same. I tested it with pretty large project (which uses cross references, etc.) and everything works as expected.. Probably this change introduces also unused imports in some scenarios, as imports are global, not by operation. I thought that goimports are used somewhere for cleanup, but it seems that not. Very long way to fix x-go-types completely.... Maybe something was messed up during work, because it happened once with specific swagger.yml and I can't reproduce that now.. Unfortunately it is private project, but I just generated clean server from above example with swagger generate server -f swagger.yml and result is exactly the same:\n```shell\n$ ./app-server --port 2002\n2018/09/20 17:49:12 Serving app at http://127.0.0.1:2002\n$ http PUT localhost:2002/user/1234/activation active=true\nHTTP/1.1 400 Bad Request\nContent-Length: 162\nContent-Type: application/json\nDate: Thu, 20 Sep 2018 15:49:30 GMT\n{\n    \"code\": 400,\n    \"message\": \"parsing activation body from \\\"\\\" failed, because json: cannot unmarshal string into Go struct field ActivateUserBody.active of type bool\"\n}\n$ http PUT localhost:2002/user/1234/activation activation.active=true\nHTTP/1.1 501 Not Implemented\nContent-Length: 55\nContent-Type: application/json\nDate: Thu, 20 Sep 2018 15:49:38 GMT\n\"operation .ActivateUser has not yet been implemented\"\n```\nMy Gopkg.toml:\n```toml\n[[constraint]]\n  name = \"github.com/go-openapi/errors\"\n  version = \"0.16.0\"\n[[constraint]]\n  name = \"github.com/go-openapi/loads\"\n  version = \"0.16.0\"\n[[constraint]]\n  name = \"github.com/go-openapi/runtime\"\n  version = \"0.16.0\"\n[[constraint]]\n  name = \"github.com/go-openapi/spec\"\n  version = \"0.16.0\"\n[[constraint]]\n  name = \"github.com/go-openapi/strfmt\"\n  version = \"0.16.0\"\n[[constraint]]\n  name = \"github.com/go-openapi/swag\"\n  version = \"0.16.0\"\n[[constraint]]\n  name = \"github.com/jessevdk/go-flags\"\n  version = \"1.4.0\"\n[[constraint]]\n  branch = \"master\"\n  name = \"golang.org/x/net\"\n[prune]\n  go-tests = true\n  unused-packages = true\n``. Here you can download complete test project:\n[body_parameters_issue.zip](https://github.com/go-swagger/go-swagger/files/2402081/body_parameters_issue.zip)\n. Any ideas? It is total blocker for me and if there is no quick solution I must stop using go-swagger at all in my company project, which is not good as it took me about 2 weeks already (writing definitions, implementing custom authentication, fixing go-swagger bugs etc).. Ok, you are right, I used HTTPie instead of curl, and it seems that it parses all values as strings when making request, my bad.. HTTPie uses:=instead of=` for sending raw fields, now I see.. Nevermind, I somehow replaced \"alias\" with \"type\" in my swagger spec. Sorry, too much digging for today.. Ok, I found out what issue I had, I'll update it.. It seems that my PRs fixed imports only for flat objects, don't know why. My knowledge about go-swagger generator code is probably too basic to fix it now. I hope somebody can help.\nHere is original commit which introduced x-go-type feature:\nhttps://github.com/go-swagger/go-swagger/commit/759dbbcca47194bacdcae74bd9e3a81a0dcd5004\nI thought that ma PR https://github.com/go-swagger/go-swagger/pull/1705 allowing whole model definition hierarchy to build (removed return nil, nil from beginning makeGenDefinitionHierarchy when x-go-type detected) and then adding Pkg and PkgAlias to builder imports will resolve the problem, but it seems that something else is wrong.\n. I discovered that adding\ntpe, pkg, alias := knownDefGoType(t.ModelName, *schema, t.goTypeName)\nif tpe != \"\" {\n    result.GoType = tpe\n    result.Pkg = pkg\n    result.PkgAlias = alias\n}\nbefore return statement here:\nhttps://github.com/go-swagger/go-swagger/blob/e13f8554b4e77901403d8b9444eb2fa92a50c04c/generator/types.go#L630-L633\nsolves import problem also for get_user_obj_ref_responses.go (see issue description), but still wrong imports in arrays. Maybe it would be helpful.. This was added in my previous PR and I'm not sure what it exactly does, so reverted it to original state for now, as it does not affect result of my case.. From what I know it is used to set GoType for whole array instead of just item types (ext_pkg.ExtPackage instead of []ext_pkg.ExtItem), but it does not work because GoType is overwritten later in buildArray(), I managed to make it work, but maybe in another PR.. ",
    "carantunes": "I still have this issue, unrelated interfaces are being added to the models when i use -m flag. Any news @casualjim ?. ",
    "alihalabyah": "@fredbi Where did you see a body?\nIf you are talking about response.Body() param to the Consume then that's clear from it's name.\nAnyhow, I have resolved the issue by adding x-nullable to all fields.\nI'm not sure if this is already available, but there should be an option to disable the automatic response body decoding/unmarshalling to allow for handling cases in which they are not mentioned in the specs, such as API errors, etc.. ",
    "zheng1": "I had got the same error. And I found the breakpoint is json null value should match pointer type. It might help you.. ",
    "wuqiany2": "Awesome, I just found out this trick too, giving it copyright file.. Thanks a lot. ",
    "romanyx": "@fredbi Thanks! I couldn't found examples of using x-go-type in properties, and only few mentions of it in docs at all, can you please provide an example of it?. @fredbi Does following swagger spec:\nyaml\ntitle: Stock request\ntype: object\nproperties:\n  name:\n    description: Stock name\n    x-go-type:\n      type: JSONString\n  status:\n    description: Status of an stock\n    x-go-type:\n      type: JSONInt\nShould be generated into this?\n```go\n// StockRequest Stock request\n//\n// swagger:model StockRequest\ntype StockRequest struct {\n// Stock name\nName JSONString `json:\"name,omitempty\"`\n\n// Status of an stock\nStatus JSONInt `json:\"status,omitempty\"`\n\n}\n```\nBut I'm having interface{} as types.. @fredbi It's working, thanks!. ",
    "sonasingh46": "Thanks.. Any help ??. I think i got a solution to this.\nFollowing does my work:\n/ Server Error\n// swagger:response serverError\ntype ServerError struct {\n    // example: The error message1\n    // in: body\n    Body struct {\n        // example: Something Went Wrong\n        Message string `json:\"message\"`\n    }\n}. Yes, I have used that and it works if the variable is string.\nAs you can see in the above metdata struct . Volume name is coming prefect.\nBut how we do in case of map ( for example in metadata struct in above pic the Annotations map).. Sure I will give a try on these...\nYes --input works... I had to use it for x-logo tag in spec that couldn't be generated using go swagger..\nBy the way thanks, and will also try to look on source code of go swagger wether some of these issues which I have raised can be solved by Raising a PR or not, just to extend go swagger support\n. Thanks. ",
    "chengwang86": "@casualjim thanks for your help. \nThe problem for defining the body schema for the default response is that we are not sure of the content-type of the http response. It could be application/json, text/plain or text/html (I have seen all of these in my testing). \nThis is because that the application layer of the server is generated using the same swagger spec, whereas the generic http layer of the server is not; besides, there may exist another load balancer between my client and the server which could return http response that I'm not aware of.\nI'm not able to enumerate all the possible http response code and add the corresponding body schema to the swagger spec. My goal is just reading the undefined http response as byte stream and print it out, regardless of the content-type. Do you have any suggestions?. @casualjim could you please elaborate a bit about the catch-all consumer that buffers in a byte buffer. What I can think of is something like\n\"responses\": {\n          \"200\": {\n            \"description\": \"successful operation\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/ResponseOK\"\n            }\n          },\n         \"default\": {\n            \"schema\": {\n              // if content-type is application/json, \"$ref\": \"#/definitions/ResponseJSON\"\n              // if content-type is text/plain, \"$ref\": \"#/definitions/ResponseText\"\n            }\n     }\nDo you have any example in mind? Thanks.. ",
    "lavishAgrawal": "What I meant by interactive swagger API is like 'when you click on any of the methods from generated swagger documentation, it should be able to do the corresponding operation in the DB.' Something similar to what loopback does in NodeJs. I hope you answered for the same?\nIf this can't be achieved by Go-Swagger, is it possible to address this use case by any other Golang package?. ",
    "zhuangqh": "Thanks a lot for your reply @fredbi . I got the expected code after declare HostConfig as a required property. But this still a bug for those optional properties.. awesome\ud83d\udc4d\ud83c\udffc. I\u2019m truly grateful for your help. @fredbi . yep. I successfully generate model after changing what you point out.. @casualjim I agree with you. It would be better if go-swagger could tell me what's wrong and how to fix it.. Hey, I think go-swagger is really awesome currently. Is there any plan to release a new version. \ud83d\ude04 @fredbi . LGTM. @fredbi PTAL thx. > Did you pass circle CI and appveyor? I don't see the track of this CI pass\n@fredbi just scroll down, and you will see it\ud83d\ude04. > no I don't see the track of our CI passing here. I am expecting 7 checks and I can see 5.\nThis PR fails to pass 2 checks due to the decrease  of codecov. Generated code: generator/bindata.go reduce the codecov, but I don't have a good solution on it.\ud83d\ude05 @fredbi . @casualjim Hey, is it possible to cherry-pick this PR to the newest 0.17.0 release. We are benefit from go-swagger and admire your guy's awesome job, but we needs this feature to upgrade from 0.12.0 to 0.17.0. However, we miss the release date which was 5 days ago.\ud83d\ude05Thank you so much!. s/VIP/WIP ? @fredbi . yep. By default, x-omitempty is false for array type, true for other.. fix test. There is no omitempty of array field. https://github.com/go-swagger/go-swagger/blob/master/fixtures/bugs/1336/fixture-1336.yaml#L36. The zero value of bool is false. However, our default value is true. \ud83d\ude05. required takes effect on validation code and field tag. x-omitempty only takes effect on field tag.\nx-omityempty provides the ability to control the json tag, which would play an important role in PouchContainer API. ",
    "adamflott": "Note: there's nothing in my ~/go\nI ran:\n$ go get github.com/go-openapi/errors github.com/go-openapi/loads\n$ go get github.com/go-openapi/runtime github.com/go-openapi/runtime/flagext github.com/go-openapi/runtime/middleware github.com/go-openapi/runtime/security github.com/go-openapi/validate github.com/jessevdk/go-flags github.com/tylerb/graceful\n\nIf I re-generate it appears to fix the problem:\n$ ./bin/swagger generate server -A gopurge --default-scheme=https -t src/gen swagger.yml\n...\n$ go run src/gen/cmd/gopurge-server/main.go\n2018/04/16 12:06:49 Serving gopurge at http://127.0.0.1:45421\n\n. I guess it's working as intended but caught me by surprise. Maybe a note in the installation instructions would be helpful. ",
    "ssosik": "Hi @casualjim, @fredbi - here's a simple way to reproduce the problem that Adam reported:\n``bash\nmkdir test && cd test\nmkdir -p src/gen\nexport GOPATH=pwd`\nWrite swagger.yml based on contents below:\ncat swagger.yml\nyaml\nswagger: \"2.0\"\nconsumes:\n- application/json\nproduces:\n- application/json\ninfo:\n  title: testthing\n  description: testthing\n  version: 0.0.1\nschemes:\n- http\npaths:\n  /foo:\n    post:\n      tags:\n        - Bar\n      operationId: fooBar\n      responses:\n        429:\n          $ref: '#/responses/RateLimitedResp'\nresponses:\n  RateLimitedResp:\n    description: Rate Limited\n    headers:\n      X-Rate-Limit-Reset:\n        type: string\n        format: date-time\n    schema:\n      $ref: \"#/definitions/responseBody\"\ndefinitions:\n  responseBody:\n    type: object\n    required:\n      - httpStatus\n    properties:\n      httpStatus:\n        type: integer\n        format: int32\n        readOnly: true\nbash\nlatestv=$(curl -s https://api.github.com/repos/go-swagger/go-swagger/releases/latest | jq -r .tag_name)\ncurl -o swagger -L'#' https://github.com/go-swagger/go-swagger/releases/download/$latestv/swagger_$(echo uname|tr '[:upper:]' '[:lower:]')_amd64\nchmod +x swagger\n./swagger generate server -A testhing -t src/gen swagger.yml\npushd . && cd src/gen/ && dep init && popd  # Pull down dependencies\ngo run src/gen/cmd/testhing-server/main.go\n# gen/restapi/operations/bar\nsrc/gen/restapi/operations/bar/foo_bar_responses.go:27:18: undefined: strfmt\nhead -n 30 src/gen/restapi/operations/bar/foo_bar_responses.go\n```\n```golang\n// Code generated by go-swagger; DO NOT EDIT.\npackage bar\n// This file was generated by the swagger tool.\n// Editing this file might prove futile when you re-run the swagger generate command\nimport (\n    \"net/http\"\n\"github.com/go-openapi/runtime\"\n\nmodels \"gen/models\"\n\n)\n// FooBarTooManyRequestsCode is the HTTP code returned for type FooBarTooManyRequests\nconst FooBarTooManyRequestsCode int = 429\n/*FooBarTooManyRequests Rate Limited\nswagger:response fooBarTooManyRequests\n/\ntype FooBarTooManyRequests struct {\n    /\n */\nXRateLimitReset strfmt.DateTime `json:\"X-Rate-Limit-Reset\"` // <-- strftime used but not imported\n\n/*\n  In: Body\n\n```\nMy conclusion: the date-time format under the X-Rate-Limit-Reset Response header isn't correctly triggering the import of github.com/go-openapi/strfmt. This dependency is correctly being pulled down by the dep invocation.\nPlease let me know if I'm missing something, or if there's a known work around.\nThanks!. Thanks for the prompt reply. I get the same behavior:\n```bash\n...\npushd . && cd src/gen/ && dep init && popd  # Pull down dependencies\n./swagger generate server -A testhing -t src/gen swagger.yml\ngo run src/gen/cmd/testhing-server/main.go\n# gen/restapi/operations/bar\nsrc/gen/restapi/operations/bar/foo_bar_responses.go:27:18: undefined: strfmt\n``. Ah, now I see. Thanks. Kind of curious that goimports cannot find the stuff thatdeppulled in, but usinggo get github.com/go-openapi/strfmt` resolved it.. ",
    "ags799": "removing the makefiles is a great idea. you could also just point to the CI config to show what tests must pass. that would be concise & comprehensive. a developer could find their own shortcuts from there.. i made progress once i stopped using the makefiles and referred to the CI config instead. Just want to be clear, I understand there are conflicts here. I'd like to create a 0.13.1 branch from the 0.13.0 tag, merge this PR into that new branch, and then release a new 0.13.1.\nBut perhaps you all have other ideas.. @casualjim I'm working with APIs defined in JSON Hyper Schema. Wish I was using Swagger \ud83d\ude22.\nI'd still like to use go-swagger's code generation. So I've wrapped go-swagger with another program that converts JSON Hyper Schema into Swagger, then uses go-swagger to generate code from that.\nAlso, it looks like I need to specify revisions for the other go-openapi projects used by Swagger. More commits on the way.. I think it needs an approving review? I don't use go-swagger anymore so idc.. ",
    "JonKohler": "Where are we with this PR? This seems like a good idea overall.. hey @casualjim - Thanks! back at my computer, sorry for the delay.\nYou've found it, all you do is sign in and enable the repos. You can configure the checks with a .golangci.yml\nYou can see what we ended up doing for the particular go project I've recently worked on, here: \nhttps://github.com/nutanix/terraform-provider-nutanix/blob/develop/.golangci.yml\nI ended up disabling a few of the checks as they didn't really suit my needs, but you can download the CLI for golangci and run it locally to see what sort of things are going to flag in the repository and tune up from there\n. I've opened up a very small pull request just now, here: https://github.com/go-swagger/go-swagger/pull/1577\nYou can see it of course ran, but since i didn't modify go code, it didn't flag anything.\nI'll open up a bogus PR to show the difference. That just happens to be the reference configuration from upstream golangci - meaning - its actually what they use on their code @fredbi . done @casualjim . checks are all passed now. thanks for the review and merge everyone. I do suspect this is going to be a slightly iterative process to tun up the configuration, but its progress none the less!. welp, thats embarassing. let's try that again. I need to reopen another junky PR to get it run again. It JUST checks the changes, as that would make PR's a nightmare for projects that have been around for a while\nI did use gometalinter for a while, until I found golangci's CLI, and I really, really like it instead.. Give this a try and see how you like it: https://github.com/golangci/golangci-lint. I do this right now in travis, @fredbi - check it out here: https://travis-ci.com/nutanix/terraform-provider-nutanix/jobs/129505985\nI have a sanity testing build stage (I'm using the new build stages feature) that i have setup to allow_failures.\nFrom there, it runs the entire linter. That way, I get PR coverage from golangci for the change checking, and I get continuous integration testing to make sure nothing sneaks into the code base, or perhaps new lint/check updates catch something that previously went through.\nYou can see how I configured travis, here: \nhttps://github.com/nutanix/terraform-provider-nutanix/blob/develop/.travis.yml\nI'm calling out to my GNU makefile, here: https://github.com/nutanix/terraform-provider-nutanix/blob/develop/GNUmakefile\nWhich is simply doing: \n```sanity:\n    echo \"==>sanity: golangci-lint\"\n    golangci-lint run. well, this is highly embarrassing. My apologies. This works for me when I do it on my project :( For example, see here: https://github.com/nutanix/terraform-provider-nutanix/pull/145\nI'll open up an issue with the golangci team real quick.\n. I've filed an issue on the central tracker for golangCI here to see if we can figure out why this isn't flagging (anything) in this pile of garbage PR - https://github.com/golangci/golangci/issues/9. fantastic, thanks! Let's use this to drive to conclusion with upstream to figure out why its not doing what it should be doing. They've got an issue with their service for this repo, they are fixing it per: https://github.com/golangci/golangci/issues/9#issuecomment-397671873. As you guys can see, they fixed up the issue that I wrote about in the ticket on their system, and this is how they work for other PRs\nhappy hunting!. Can we override this PR to push it in (just the codegov issue looks outstanding)?. fantastic! Thats greally great. Did you also run the golangci-lint tool they provide? Thats the \"on-prem\" tool from their hosted service, so you can see exactly what they are going to find. \nTends to be a heck of a lot faster IMHO than gometalinter for whatever reason. ah ok, thank you. ill go look at that. ah, I commented below, but this is actually what upstream golangCI runs on their code, so this is actually just the reference configuration. This certainly could be pruned, but I figured I'd start with upstream reference and go from there. ",
    "stevecookform3": "I also seem to be hitting this issue when the model is an enum. e.g.\n```\ntype MyEnum string\n...\nconst (\n    // MyEnumCONNECTED captures enum value \"CONNECTED\"\n    MyEnumCONNECTED MyEnum = \"CONNECTED\"\n    // MyEnumDISCONNECTED captures enum value \"DISCONNECTED\"\n    MyEnumDISCONNECTED MyEnum = \"DISCONNECTED\"\n)\n...\ntype PutStateParams struct {\n    BodyParam models.MyEnum\ntimeout    time.Duration\nContext    context.Context\nHTTPClient *http.Client\n\n}\n...\n```\nis also missing the SetBodyParam from the WriteToRequest.\nLooks like there are some body parameters which are not being identified by this line in the template?\n{{ if or .Schema.IsInterface .Schema.IsStream (and .Schema.IsArray .Child) (and .Schema.IsNullable (not .HasDiscriminator)) }}if {{ .ValueExpression }} != nil {\n. @fredbi doesnt fix the issue above with enums. Is there a readme somewhere which walks through compiling go-swagger locally? having some dependency/tooling issues when trying to compile master... Looks related to #1490. @fredbi great - that seems to fix it for me. PR here: https://github.com/go-swagger/go-swagger/pull/1514. @fredbi dont seem to be able to git push upstream directly, but i've pushed an empty commit to my fork which should kick it off again. I copied this block from an earlier test case, but not that clear what its doing. Is this valid for checking the generation code?. ",
    "Gobonoid": "@fredbi Thank for your answer. omitempty already exists in my model without adding nullable to swagger definition. The problem I have is that even if strfmt.Time is empty it still gets marshaled into json as empty time string 0001-01-01T00:00:00.000Z and I want it to be completely  ommited. As I see it model should contain pointer to strfmt.Time not a structure itself to marshal it properly.\n```\n// SiteAppointmentVisit site appointment visit\n// swagger:model SiteAppointmentVisit\ntype SiteAppointmentVisit struct {\n// access availability\nAccessAvailability string `json:\"accessAvailability,omitempty\"`\n\n// access hazards\nAccessHazards string `json:\"accessHazards,omitempty\"`\n\n// additional site visit reason\nAdditionalSiteVisitReason string `json:\"additionalSiteVisitReason,omitempty\"`\n\n// alternative contact email\nAlternativeContactEmail string `json:\"alternativeContactEmail,omitempty\"`\n\n// alternative contact name\nAlternativeContactName string `json:\"alternativeContactName,omitempty\"`\n\n// alternative contact telephone\nAlternativeContactTelephone string `json:\"alternativeContactTelephone,omitempty\"`\n\n// alternative secondary telephone\nAlternativeSecondaryTelephone string `json:\"alternativeSecondaryTelephone,omitempty\"`\n\n// appointment date\nAppointmentDate strfmt.DateTime `json:\"appointmentDate,omitempty\"`\n\n// appointment timeslot\nAppointmentTimeslot string `json:\"appointmentTimeslot,omitempty\"`\n\n// company name\nCompanyName string `json:\"companyName,omitempty\"`\n\n// contact email\nContactEmail string `json:\"contactEmail,omitempty\"`\n\n// contact name\nContactName string `json:\"contactName,omitempty\"`\n\n// contact secondary telephone\nContactSecondaryTelephone string `json:\"contactSecondaryTelephone,omitempty\"`\n\n// contact telephone\nContactTelephone string `json:\"contactTelephone,omitempty\"`\n\n// earliest next access date time\nEarliestNextAccessDateTime strfmt.DateTime `json:\"earliestNextAccessDateTime,omitempty\"`\n\n// engineering notes\nEngineeringNotes string `json:\"engineeringNotes,omitempty\"`\n\n// latest access date time\nLatestAccessDateTime strfmt.DateTime `json:\"latestAccessDateTime,omitempty\"`\n\n// location\nLocation *SiteLocation `json:\"location,omitempty\"`\n\n// warning notes\nWarningNotes string `json:\"warningNotes,omitempty\"`\n\n}\n```\n. @fredbi my swagger definition contains x-nullable\n\"earliestNextAccessDateTime\" : {\n          \"type\" : \"string\",\n          \"format\" : \"date-time\",\n          \"x-nullable\": \"true\"\n        },. My problem is that I don't want { ...., \"earliestNextAccessDateTime\": \"0001-01-01T00:00:00.000Z\", ...} to appear in json but to be ommited.. @fredbi Thank you very much sir! That was a silly mistake. Bool true fixed it!. ",
    "dnaeon": "That would work, but I\u2019d rather not rebuild swagger every time or keep my own fork just for that.\nCan we have this supported as a feature instead?. @casualjim I've mentioned this in the initial description, and would generally prefer if I don't have to manage my own version of the spec, or have to manually update things and add the x-go-custom-tag.\nHaving an option to go-swagger to automatically add such tag would be the way to go IMO.. ",
    "levimm": "It will be even more awesome if it can be differentiated with \"// swagger:ignoreParam\" and \"// swagger:ignoreResponse\".. ",
    "neilgarb": "As a workaround for now I'm using swagger:strfmt bar on type Bar.. ",
    "TheImpressionist": "Right now my only solution is to validate the token in the Header again in my handlers, and get the information out of it that way.. Cheers!. ",
    "cajund": "This would be a suitable workaround, but it defeats the purpose, as these docs are in active development.\nI guess I could do this at runtime...\nI'm also trying to wrap your serve command in a utility function which could handle this type of work. Not having tremendous success.\nThanks for this utility.. Apologies, it looks like I don't have your latest code...\ndep picked up your latest tag, not the latest commit to master.\n. ",
    "davidmi": "apologies, I got a bit confused switching between repos -- found this while trying to install swagger with dep :)\n. ",
    "larrycinnabar": "I solved the problem with just adding 2-level headers via ##, that's automatically creates sections in the redoc left menu, ty. ",
    "fwhezfwhez": "3q,to change the filename and model name through  xxx.yml:\n```yaml\nswagger: \"2.0\"\ninfo:\n  description: From the todo list tutorial on goswagger.io\n  title: A Todo list application\n  version: 1.0.0\npaths: \n  /:\n    get:\n      tags:\n        - todos\n      parameters:\n        - name: since\n          in: query\n          type: integer\n          format: int64\n        - name: limit\n          in: query\n          type: integer\n          format: int32\n          default: 20\n      responses:\n        200:\n          description: list the todo operations\ndefinitions:\n  person:\n    type: object\n    properties:\n      id:\n        type: integer\n        format: int\n        readOnly: true\n      first_name:\n        type: string\n        minLength: 1\n      IfMarried:\n        type: boolean\nyaml\nswagger generate server -A todo-list -f ./xxx.yml\n. When adds  new model to existed project above ,I do so:\nnewModel.ymlyml\nswagger: \"2.0\"\ninfo:\n  description: an example to add new model\n  title: new a model class\n  version: 1.0.0\npaths: \n /:\n    get:\n      tags:\n        - todos\n      responses:\n        200:\n          description: list the todo operations\ndefinitions:\n  class:\n    type: object\n    properties:\n      id:\n        type: integer\n        format: int\n        readOnly: true\n      class_name:\n        type: string\n        minLength: 1\n      owner:\n        type: string\n```\nswagger generate model -f newModel.yml -m ./models/vo\n. 3q so much!\nhere when I generate the client for this project,I can't find package 'myproject/client/operation' this ,and thus make 'resp, err := client.Operations.All(operations.AllParams{})'  'Operations'  unresolved,\nthe auto generating result is like:\nmyproject\n-client\n  -myproject\n     ->myproject_client.go\nTo use this,I add a main package  then project becomes\nmyproject\n-client\n  -main\n     ->main.go\n  -myproject\n     ->myproject_client.go\nand in main.go\n```\npackage main\nimport (\n    \"os\"\n    \"log\"\n\"test_swagger/client/operations\"\n\"github.com/go-openapi/strfmt\"\n//\"github.com/go-openapi/spec\"\n\napiclient \"test_swagger/client\"\nhttptransport \"github.com/go-openapi/runtime/client\"\n\"fmt\"\n\n)\nfunc main() {\n// create the transport\ntransport := httptransport.New(os.Getenv(\"TODOLIST_HOST\"), \"\", nil)\n\n// create the API client, with the transport\nclient := apiclient.New(transport, strfmt.Default)\n\n// to override the host for the default client\n// apiclient.Default.SetTransport(transport)\n\n// make the request to get all items\nresp, err := client.Operations.All(operations.AllParams{})     //**Operations unresolved,how to deal**\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Printf(\"%#v\\n\", resp.Payload)\n\n```. yes,it is in my gopath\nI regenerate it and successfully get its Operations,however method All() and All(operations.AllParams{}) unresolved,is this part designed by ourselves. If it is ,how to design,is there any simple examples?\nAnother issue is that,Swagger doc [https://goswagger.io/tutorial/custom-server.html] example doesn't include 'import part', some variagble I can't refer its resource .IDE is goland\n```go\n    // TODO: Set Handle\n    api.GetGreetingHandler = operations.GetGreetingHandlerFunc(\n        func(params operations.GetGreetingParams) middleware.Responder {\n            name := swag.StringValue(params.Name)      //what this 'swag'' stands for*\n            if name == \"\" {\n                name = \"World\"\n            }\n        greeting := fmt.Sprintf(\"Hello, %s!\", name)\n        return operations.NewGetGreetingOK().WithPayload(greeting)\n    })\n\n```\n. yes,it is in my gopath\nI regenerate it and successfully get its Operations,however method All() and All(operations.AllParams{}) unresolved,is this part designed by ourselves. If it is ,how to design,is there any simple examples?\nAnother issue is that, Swagger doc example doesn't include 'import part', some variagble I can't refer its resource .IDE is goland\n```go\n    // TODO: Set Handle\n    api.GetGreetingHandler = operations.GetGreetingHandlerFunc(\n        func(params operations.GetGreetingParams) middleware.Responder {\n            name := swag.StringValue(params.Name)      //what this 'swag'' stands for*\n            if name == \"\" {\n                name = \"World\"\n            }\n        greeting := fmt.Sprintf(\"Hello, %s!\", name)\n        return operations.NewGetGreetingOK().WithPayload(greeting)\n    })\n\n```\n. ",
    "ptman": "Maybe use the same regex as html5 input-tag type=email: https://www.w3.org/TR/html5/forms.html#valid-e-mail-address ?. ",
    "damianoneill": "thanks @fredbi but the variable doesnt seem to add anything. \n```\n$ env | grep SW\nSWAGGER_DEBUG=1\n$ swagger validate ./tapi-connectivity@2018-02-16.swagger\n2018/05/10 21:41:31 invalid character '}' after top-level value\n```. @casualjim thanks, got me a little further \n```\n$ swagger-tools validate ./tapi-connectivity@2018-02-16.swagger\nerror: end of the stream or a document separator is expected at line 16987, column 1:\n    }\n```. Thanks @casualjim the last suggestion is great.   Guys thanks for the quick responses.   Will followup with the Standard repo.  . @gregmarr thanks.  Removing the line resolves the validation.  . ",
    "ElMaxo": "How is your model defined?\nThis works perfectly:\n// Create area request\n// swagger:model createAreaRequest\ntype createAreaRequest struct {\n    Name string\n    ControllerID uint\n}\nAnd annotation to operation:\n// swagger:operation POST /areas Areas areas\n// ---\n// summary: Create new area\n// description: Creates new area with specified parameters\n// parameters:\n// - name: area\n//   in: body\n//   description: area parameters\n//   schema:\n//     \"$ref\": \"#/definitions/createAreaRequest\"\n//   required: true\n// responses:\n//   \"200\":\n//     \"$ref\": \"#/responses/areaResponse\"\n//   \"400\":\n//     \"$ref\": \"#/responses/badRequestError\"\n\n. It works too. Just added id from your example\n// - name: id\n//   in: path\n//   description: id of user\n//   type: int\n//   required: true\nBefore pressing Try it out button\n\n\nAfter Try it out button pressed (fields are displayed), example model value is in body field, but changing to model structure view is not available until you press Cancel, it is normal, as far as i know\n\n. ",
    "saward": "I don't really understand, so perhaps I'll ask a question, the answer to which may help enlighten me.  I'm using this as a client to fetch data from the API.\nCapacity is, according to the API spec, an optional field.  When I fetch this object from the API, how do I distinguish between capacity being 0 vs null?  It is a float value here, not a pointer, so cannot be null.\nThis is the payload I am given when I call the API to fetch an object.. Is there a simple way to specify isnullable for every field across the spec?  Or to provide a customer additional file to supplement or override the spec in parts?\nThe spec is provided by a third party, and it would be very cumbersome to modify their spec every time it changes (which is, from what I can gather from the docs, what I'd need to do).  I'm hoping therefore there's a way to specify isnullable in a way I can keep static as they continually modify their spec.\nEdit: I should add, I've been reading the docs, but couldn't find out yet if there is a way.\nThanks!. Nor do I have any idea how involved it would be :)\nJust to summarise the situation again.  I'm using this to generate a client.  The spec claims that some fields are required, and other optional.  To handle this, normally you might have optional fields as pointers and others not.  However, the generated code produces the reverse of this, for validation reasons from what I can gather.\nNullable variables for optional fields strikes me as something that's required: to tell, for example, whether an integer is actually 0 or not provided at all.\nAnd, as just stated above, modifying the client spec each time it updates is not going to be an easy task.. ",
    "callahanca": "Correct, the issue does not appear if I remove the discriminator property.. ",
    "tyler-luminal": "Thanks, changing to $ref: 'external.yml#/definitions/Foo' did the trick.. ",
    "alaqelsplk": "Nope. The size validation gets added to the method, but it still tries to loop through the array and call validate on the interface.. Here's what the generated code looks like when maxItems is added:\nfunc (o *InsertRecordsParams) validateRecordsBody(formats strfmt.Registry) error {\nrecordsSize := int64(len(o.Records))\n\n// maxItems: 10000\nif err := validate.MaxItems(\"records\", \"body\", recordsSize, 10000); err != nil {\n    return err\n}\n\nrecordsIC := o.Records\n\nvar recordsIR []interface{}\nfor i, recordsIV := range recordsIC {\n    recordsI := recordsIV\n    if err := recordsI.Validate(formats); err != nil {\n        if ve, ok := err.(*errors.Validation); ok {\n            return ve.ValidateName(fmt.Sprintf(\"%s.%v\", \"records\", i))\n        }\n        return err\n    }\n\n    recordsIR = append(recordsIR, recordsI)\n}\n\no.Records = recordsIR\nreturn nil\n\n}. ",
    "johnliu26": "Hello Fredbi, thanks for your response. It is a issue related to the generated model for a definition.. Another question is that could you please tell me if you know when the new go-swagger release?. Thanks! @casualjim . Thanks for your recommendation! It will be great if we could have #1537 fixed in the new release. Thanks! @fredbi . Sorry for the late response. Thanks for your help! @fredbi . Thanks! @fredbi @gregmarr . Could you please tell me when we may have release 0.15.0? Thanks!. Thanks @fredbi . I think the change in the generator/templates/server/server.gotmpl in #1569 could fix the issue if it applies to the server.go under restapi but after I run the swagger generate server -f sg.yaml, the change did in the generator/templates/server/server.gotmpl was not applied to the server.go under restapi. The generated code is still the same. So the change in the PR didn't apply to the generated code. So I recommend a further fix. @fredbi @casualjim . Did we have a fix for this issue? Thanks!. The source code has been tested and the issue fixed. We could close the issue.. ",
    "mtfelian": "Both curls should success, both uses a valid base64 string. \nBut due to this issue, the one with bWVzc2FnZWhlcmU= produces a validation error.\nThe other one works well pure coincidently.. Yes, think \"to validate, try to decode\". It's not good idea to validate base64 or even json by regexp. . @fredbi what is the right way in this repo to cover things like this with tests? Fast view on it have not bring understanding. . Fixes #1778. @fredbi rebased the branch sorry for the delay. . Thank you. But how to make go-swagger to generate models using json-iterator imports instead of standard lib?. Oh yes thanks i just forgot about this can be easily interchanged. . @fredbi released new bindata.go, so what we will do about _result? I agree that if we change this in some manner, other variables should be changed also in same manner. I thought that variables named starting with _ deliberately to avoid conflicts. May be should forbid any property name starting with _ ? Anyway it is a bad practice to use such names.. ",
    "FrozenKiwi": "Weirdly, after a reboot, the message becomes:\nC:\\src\\GoProj\\APIs>swagger_windows_amd64.exe generate server -A todo-list -f test.yml \n2018/05/28 07:14:40 building a plan for generation \n2018/05/28 07:14:40 target must reside inside a location in the $GOPATH/src\nWhich clearly says #2.  (NOTE - whole concept that your source is limited to a location super-weird to me.  Imagine if your python scripts only executed in one spot.  I know it's in the docs, but might bare to be repeated here). ",
    "krehl": "Same issue when the file is password protected.. ",
    "amitsaurav": "@nathanwilk7 Am getting the same error. Were you able to find a resolution? Thanks!. ",
    "joemcmahon": "From the go 1.10 release notes: \n\nCgo now translates some C types that would normally map to a pointer type in Go, to a uintptr instead. These types include the CFTypeRef hierarchy in Darwin's CoreFoundation framework and the jobject hierarchy in Java's JNI interface.\nThese types must be uintptr on the Go side because they would otherwise confuse the Go garbage collector; they are sometimes not really pointers but data structures encoded in a pointer-sized integer. Pointers to Go memory must not be stored in these uintptr values.\nBecause of this change, values of the affected types need to be zero-initialized with the constant 0 instead of the constant nil. Go 1.10 provides gofix modules to help with that rewrite:\ngo tool fix -r cftype <pkg>\ngo tool fix -r jni <pkg>\n\ngithub.com/google/certificate-transparency-go has fixed this themselves by forking x509 and adding support for both versions of the nil ref. This is a possible option but this really should be fixed in the core library instead.\nhttps://github.com/google/certificate-transparency-go/pull/155/files. I was able to get the HEAD of go-swagger to run successfully as follows:\nbash\nbrew uninstall --force go-swagger\nmkdir ~/go-tools\ncd ~/go-tools\nexport GOPATH=~/go-tools\ngo get github.com/go-swagger/go-swagger\ncd src/github.com/go-swagger/go-swagger\ngo build cmd/swagger/swagger.go\nThe swagger binary created this way was successful in parsing and validating our Swagger specs with \nswagger generate spec -o swagger.json; swagger validate swagger.json. If this works for you, then I suppose we can close this issue.. ",
    "bigodines": "It worked for me. I was having issues with math.Round and compiling from HEAD fixed it. . ",
    "shrimpliu": "just run\nCGO_ENABLED=0 swagger generate spec\nit worked for me. ",
    "sajal": "OK from reading comment on another issue, adding x-nullable: false is a workaround for now.. ",
    "marians": "Thanks for your reply @casualjim ! I am already using a custom transport to pass TLS and proxy settings. But I don't know how I could use that to set a user-agent header.. That worked nicely. Thank you very much @casualjim !. Thanks! It works for us with --with-flatten=full.. ",
    "maxkarelov": "@marians you've wrote that you use TransportClient to pass proxy settings. Could you please share a snippet how to do it? . ",
    "bvwells": "I suspect that I am also hitting the same issue. Servers no longer shutdown gracefully when for example panic is called in ConfigureAPI. This issue seems to have been introduced between versions 0.13.0 and 0.14.0. I suspect that this issue was introduced in the PRs to address issue #1316.... When I say servers no longer shutdown gracefully I really mean that the server no longer crashes out! :-)\n\n. Re-generated sever with docker image at commit cef0581365efc6cabe9a01e3cef2fe62e282f789 and still has the same issue.. Thanks @fredbi. Just confirmed with the latest docker image build. Should have checked this first. :-). After a bit of digging I guess it might have been fixed in PR #1521.... Looks like this is the issue tracking the performance of goimports:\nhttps://github.com/golang/go/issues/27287\n@casualjim - I saw in the code that there is an option to skip formatting of the code with goimports. How is this activated?. ",
    "orangle": "good ideas. ",
    "syllabix": "@doggodude - pardon the shamless plug - but there is a simple middleware project that does \"out of the box\" - https://github.com/syllabix/swagserver\n. ",
    "ParallelMazen": "brilliant, thanks. ",
    "kamynina": "It's great! thanks. ",
    "dkoston": "It's like the code doesn't exist:\nI'm able to set a breakpoint on macOS without issues in lldb\n$ lldb my-app\n(lldb) target create \"my-app\"\nCurrent executable set to 'my-app' (x86_64).\n(lldb) b restapi.configureFlags\nBreakpoint 1: where = my-app`github.com/xxx/my-app/restapi.configureFlags + 33 at configure_my_apis.go:59, address = 0x00000000015d1991\n(lldb) b server.ConfigureFlags\nBreakpoint 2: no locations (pending).\nWARNING:  Unable to resolve breakpoint to any actual locations.\n(lldb) run\nProcess 2278 launched: '/Users/xxx/go/src/github.com/xxx/my-app/my-app' (x86_64)\nright before server.ConfigureFlags()\nInside server.ConfigureFlags()\nProcess 2278 stopped\n* thread #2, stop reason = breakpoint 1.1\n    frame #0: 0x00000000015d1991 my-app`github.com/xxx/my-app/restapi.configureFlags(api=0x000000c4200ba820) at configure_my_apis.go:59\n   56   }\n   57\n   58   func configureFlags(api *operations.MyApisAPI) {\n-> 59       var opts commandLineOptions\n   60\n   61       fmt.Print(\"inside api.ConfigureFlags()\\n\")\n   62\nTarget 0: (my-app) stopped.\nWhen building on linux, the code doesn't exist:\n```\nlldb my-app\nCurrent executable set to 'my-app' (x86_64).\n(lldb) b restapi.configureFlags\nBreakpoint 1: no locations (pending).\nWARNING:  Unable to resolve breakpoint to any actual locations.\n```\nThe code clearly exists on both:\nmacOS:\n$ cat restapi/configure_my_apis.go  | grep configure\nfunc configureFlags(api *operations.MyApisAPI) {\nfunc configureAPI(api *operations.MyApisAPI) http.Handler {\n    // configure the api here\nfunc configureTLS(tlsConfig *tls.Config) {\nfunc configureServer(s *graceful.Server, scheme, addr string) {\n$ grep -R 'fmt.Print' *\ncmd/my-apis-server/main.go: fmt.Print(\"right before server.ConfigureFlags()\\n\")\ncmd/my-apis-server/main.go: fmt.Print(\"right after server.ConfigureFlags()\\n\")\nBinary file my-app matches\nBinary file gin-bin matches\nmain.go:    fmt.Print(\"right before server.ConfigureFlags()\\n\")\nmain.go:    fmt.Print(\"right after server.ConfigureFlags()\\n\")\nrestapi/server.go:  fmt.Print(\"Inside server.ConfigureFlags()\\n\")\nrestapi/configure_my_apis.go:    fmt.Print(\"inside api.ConfigureFlags()\\n\")\nlinux:\n```\ncat restapi/configure_my_apis.go | grep configure\nfunc configureFlags(api operations.MyApisAPI) {\nfunc configureAPI(api operations.MyApisAPI) http.Handler {\n    // configure the api here\nfunc configureTLS(tlsConfig tls.Config) {\nfunc configureServer(s graceful.Server, scheme, addr string) {\ngrep -R 'fmt.Print' *\ncmd/my-apis-server/main.go: fmt.Print(\"right before server.ConfigureFlags()\\n\")\ncmd/my-apis-server/main.go: fmt.Print(\"right after server.ConfigureFlags()\\n\")\nBinary file my-app matches\nBinary file gin-bin matches\nmain.go:    fmt.Print(\"right before server.ConfigureFlags()\\n\")\nmain.go:    fmt.Print(\"right after server.ConfigureFlags()\\n\")\nrestapi/server.go:  fmt.Print(\"Inside server.ConfigureFlags()\\n\")\nrestapi/configure_my_apis.go:    fmt.Print(\"inside api.ConfigureFlags()\\n\")\n```\n. ugh, this ended up being a bad import in the built binary. ",
    "fossabot": "Your license scan is passing -- congrats!\nYour badge status is now updated and ready to merge:\n. ",
    "Radon22": "I faced with this issue too, I use import \"github.com/paulmach/go.geojson\" but package name is \"geojson\"\nI found workaround import geojson \"github.com/paulmach/go.geojson\" but it is not applicable for third-party libraries. It is just minimalist sample project where I have issue\n```\n// Package main AwesomeProject\n//\n// AwesomeProject service provide some functionality\n//\n// Schemes: http\n// BasePath: /\n// Version: 0.0.1\n// Contact: John Doejohn.doe@example.com http://john.doe.com\n//\n// swagger:meta\npackage main\nimport (\n    \"log\"\n    \"net/http\"\n)\nfunc main() {\n    http.HandleFunc(\"/status\", GetServiceStatus)\n    log.Fatal(http.ListenAndServe(\":3000\", nil))\n}\n// swagger:route GET /status GetServiceStatus\n//\n// Service status.\n//\n// responses:\n//  200: ServiceStatusResponse\nfunc GetServiceStatus(w http.ResponseWriter, r *http.Request) {\n    resp := ServiceStatusResponse{Status: \"OK\"}\n    resp.Write(w)\n}\n// ServiceStatusResponse is an response with service status.\n//\n// swagger:response ServiceStatusResponse\ntype ServiceStatusResponse struct {\n    // Status\n    //\n    // in: body\n    Status string\n}\nfunc (r *ServiceStatusResponse) Write(w http.ResponseWriter) {\n    w.WriteHeader(200)\n    w.Write([]byte(r.Status))\n}\n```. I already have API and need just make specification for it, therefore I can't just change response type.\n@casualjim is your sample works ?\nfor me it doesn't generate 'ServiceStatusResponse ' response\nif add  swagger:response it still generate bad result:\n{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"description\": \"Package main AwesomeProject\",\n    \"version\": \"0.0.1\"\n  },\n  \"paths\": {\n    \"/status\": {\n      \"get\": {\n        \"summary\": \"Service status.\",\n        \"operationId\": \"GetServiceStatus\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"ServiceStatusResponse\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/ServiceStatusResponse\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"responses\": {\n    \"ServiceStatusResponse\": {\n      \"description\": \"ServiceStatusResponse is an response with service status.\",\n      \"headers\": {\n        \"Status\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\nin any case I don't have issues to generate json response, but I need 'string' and OpenAPI specification allows define it.. ",
    "hashshura": "+1, also happened to me. :(\nAnyway. somehow I discovered that the */ is also detected on the YAML spec (so it brings non-alphanumeric found error). Managed to put # before the */ so that YAML would detect the line as a comment, but a new error occured -- indentation spaces before the key-value became undetected (multi-indentation/space counts as one indentation/space)...\nSwagger Spec\nOn code:\n```\n/*\n swagger:operation GET /pet/health pet healthStatus\nDisplays the current pet health.\n\nproduces:\n - application/json\n responses:\n   '200':\n     description: Success\n     schema:\n       type: object\n       properties:\n         health:\n           \"$ref\": \"#/definitions/PetHealth\"\n*/\nOn produced swagger.json by calling `swagger generate spec -m -o ./swagger.json`:\n\"/pet/health\": {\n  \"get\": {\n    \"description\": \"Success\",\n    \"produces\": [\n      \"application/json\"\n    ],\n    \"tags\": [\n      \"pet\"\n    ],\n    \"summary\": \"Displays the current pet health.\",\n    \"operationId\": \"healthStatus\"\n  }\n},\n```\nManaged to bring it out to work by using brackets {} on objects though, but typing the brackets and comma after each key-value pair is a nightmare for a beginner technical writer like me. :/. ",
    "dankinder": "Create apispec.yaml with this:\n```\nswagger: '2.0'\ninfo:\n  version: 1.0.0\n  title: MyApp\n  description: (Description pending)\npaths:\n  /hello:\n    get:\n      summary: Simple Hello World endpoint\n      tags: ['Hello']\n      responses:\n        '200':\n          description: service is saying hello\n          schema:\n            $ref: '#/definitions/somethingEndingInWindows'\ndefinitions:\n  somethingEndingInWindows:\n    type: object\n```\nThen:\n```\n$ swagger generate client -f apispec.yaml\n2018/07/06 17:49:03 validating spec /home/dkinder/go/src/ghe.iparadigms.com/iParadigms/goswagtest/apispec.yaml\n2018/07/06 17:49:05 preprocessing spec with option:  minimal flattening\n2018/07/06 17:49:05 building a plan for generation\n2018/07/06 17:49:05 planning definitions\n2018/07/06 17:49:05 planning operations\n2018/07/06 17:49:05 grouping operations into packages\n2018/07/06 17:49:05 planning meta data and facades\n2018/07/06 17:49:05 rendering 1 templates for model somethingEndingInWindows\n2018/07/06 17:49:05 name field somethingEndingInWindows\n2018/07/06 17:49:05 package field models\n2018/07/06 17:49:05 creating generated file \"something_ending_in_windows.go\" in \"models\" as definition\n2018/07/06 17:49:05 executed template asset:model\n2018/07/06 17:49:05 rendering 2 templates for operation \n2018/07/06 17:49:05 name field GetHello\n2018/07/06 17:49:05 package field hello\n2018/07/06 17:49:05 creating generated file \"get_hello_parameters.go\" in \"client/hello\" as parameters\n2018/07/06 17:49:05 executed template asset:clientParameter\n2018/07/06 17:49:05 name field GetHello\n2018/07/06 17:49:05 package field hello\n2018/07/06 17:49:05 creating generated file \"get_hello_responses.go\" in \"client/hello\" as responses\n2018/07/06 17:49:05 executed template asset:clientResponse\n2018/07/06 17:49:05 rendering 1 templates for operation group \n2018/07/06 17:49:05 name field hello\n2018/07/06 17:49:05 creating generated file \"hello_client.go\" in \"client/hello\" as client\n2018/07/06 17:49:05 executed template asset:clientClient\n2018/07/06 17:49:05 rendering 1 templates for application MyApp\n2018/07/06 17:49:05 name field MyApp\n2018/07/06 17:49:05 package field client\n2018/07/06 17:49:05 creating generated file \"my_app_client.go\" in \"client\" as facade\n2018/07/06 17:49:05 executed template asset:clientFacade\n2018/07/06 17:49:05 Generation completed!\nFor this generation to compile you need to have some packages in your GOPATH:\n* github.com/go-openapi/runtime\n* golang.org/x/net/context\n* golang.org/x/net/context/ctxhttp\n\nYou can get these now with: go get -u -f ./...\n$ go install ./models\ncan't load package: package ghe.iparadigms.com/iParadigms/goswagtest/models: no buildable Go source files in /home/dkinder/go/src/ghe.iparadigms.com/iParadigms/goswagtest/models\n$ ls models/\nsomething_ending_in_windows.go\n```\n. ",
    "Gimi": "Sure, will update it with a spec.. ",
    "liber-takano": "Thank you!\nI will try some.\nIf it good then I will feedback.. https://github.com/liber-takano/go-swagger/commit/ba1d8a84020f47292f1480ae3f3122b3b4708ce9\ngood work for me.\n. sorry,,,\nI relaunched this.\nhttps://github.com/go-swagger/go-swagger/pull/1612\n. Thank you!\nI will fix. For xGoCustomTag, it is okay to make your judgment top priority.\n. ",
    "andymok221": "Is there any update on this? As I still get same problem of missing x- in the doc.\nAlso I get another problem on the value it generated. For the following annotation\ntype request struct {\n    // id of an item\n    //\n    // in: path\n    // x-example: 1\n    // required: true\n    ID uint `json:\"id\"`\n}\nIt generates following\n{\n    \"type\": \"integer\",\n    \"format\": \"uint64\",\n    \"example\": \"1\", <--- a string here\n    \"x-go-name\": \"ID\",\n    \"description\": \"id of an item\",\n    \"name\": \"id\",\n    \"in\": \"path\",\n    \"required\": true\n}\nHowever, I would expect following,\n{\n    \"type\": \"integer\",\n    \"format\": \"uint64\",\n    \"example\": 1, <-- should be a number\n    \"x-go-name\": \"ID\",\n    \"description\": \"id of an item\",\n    \"name\": \"id\",\n    \"in\": \"path\",\n    \"required\": true\n}. ",
    "lafriks": "Spec can be found here: https://github.com/go-gitea/gitea/blob/master/public/swagger.v1.json\nAlso just verified that when go-swagger is built from commit 036304b99147bbf483e6bb48e36697ea56d9fed1 it does work and give result:\n2018/07/10 16:52:01\nThe swagger spec at \"./public/swagger.v1.json\" is valid against swagger specification 2.0\n2018/07/10 16:52:01\nThe swagger spec at \"./public/swagger.v1.json\" showed up some valid but possibly unwanted constructs.\n2018/07/10 16:52:01 See warnings below:\n2018/07/10 16:52:01 - WARNING: response \"#/responses/parameterBodies\" is not used anywhere\n2018/07/10 16:52:01 - WARNING: response \"#/responses/redirect\" is not used anywhere\n2018/07/10 16:52:01 - WARNING: definition \"#/definitions/CreateOrgOption\" is not used anywhere. name: string was actually typo in our spec (should have been name: since)\nEven with fixed gitea swagger json we are still getting same stack overflow.\nAny pointers on what we should change in response descriptions to get validation working? :). @fredbi yes, I already tried running with modified taken from go-swagger CI fixtures:\ngo-swagger built from commit 8126ee94e1e178bbfd5561ac4d502d08446f47aa\nswagger validate gitea-fixed.json\nTakes much more time to get to overflow and at the end it is using about 7GB of RAM. ",
    "mqiu": "with the number being float64 type, it is really hard (impossible maybe) to differentiate if the user actually typed a number of 1.000000001 or it is caused by float issue. \nMy hunch is that if a user really typed that much number after the decimal point, he/she should mentally expect that some kind of rounding may happen and we can safely treat it as float rounding issue.. ",
    "mhr3": "+1, this would be really useful for our use case as well. The docs don't even mention a way to do this, I went by the tests, still, that's a separate issue, no?. I'm aware of swagger:parameters, but I found it difficult to deal with the disconnect between routes and their params, this way to define them in swagger:route was more natural. Any plans to keep this direction of defining it as well? IMO being able to link a route to the param structs would make things nicer to use, ie:\n```\n// swagger:param\ntype PetIDParam struct {\n  // in: path\n  ID string\n}\n...\nswagger:route GET /pets/{id} getPet\nParameters: PetIDParam\n```\nBasically similar to how responses are defined (though params should accept n definitions, not just one). Right, but that uses raw yaml, I'd rather have stronger consistency guarantees. . ",
    "marcusyip": "+1. ",
    "maqdev": "@fredbi actually you can specify sub-package for the models as mentioned by @gregmarr.\nA workaround is to create a sub-directory, then run swagger inside it and it generates correct package names.. ",
    "Phlamethrower": "Thanks!. ",
    "Batarian711": "Do you have an idea? Something you want me to design?. What is this? gopher?. I understand. Bi will be ready for a few days.. ",
    "drewsonne": "I'll do a PR, and mark it as WIP, as I'm not sure about the implications of my intended change. Thanks!. ",
    "adhesivee": "When I add this:\n// swagger:route GET /v1/position position\n//\n//     Consumes:\n//     - application/json\n//\n//     Produces:\n//     - application/json\n//\n//     Schemes: https\n//\n//     Responses:\n//      default: genericError\n//      200: body:PositionResponseBody\nAnd update PositionBodyResponse:\n// swagger:response positionResponseBody\ntype PositionResponseBody struct {\n    // X position\n    Positionx string\n    // Y position\n    Positiony string\n}\nWhen I don't add swagger:response it won't do anything.\nBut with swagger:response I still get this:\n\"responses\": {\n    \"genericError\": {},\n    \"positionResponseBody\": {\n      \"headers\": {\n        \"Positionx\": {\n          \"type\": \"string\",\n          \"description\": \"X position\"\n        },\n        \"Positiony\": {\n          \"type\": \"string\",\n          \"description\": \"Y position\"\n        }\n      }\n    }\n  }. ",
    "inge4pres": "Hi @casualjim I seem to hit the same issue: does the struct need to be exported to be visible to the generation? Or does it need to be in the same package?. ",
    "shaxbee": "Vgo has been merged into go command in 1.11 but the module resolver is in\ninternal package.\nCalling out external program feels a bit heavy handed.\nOn Tue, Jul 24, 2018, 5:44 PM Ivan Porto Carrero notifications@github.com\nwrote:\n\ncan't it call vgo and capture the output?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/go-swagger/go-swagger/pull/1636#issuecomment-407453954,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AE_mfe8r5uJrvLzE_KkrrMyTRcv09YxEks5uJ0DQgaJpZM4Vc9kB\n.\n. \n",
    "co3k": "Oops, the unit test has been passed but \"Test codegen builds\" is failed in CircleCI. How should I test it in my local environment?. @casualjim @fredbi Thanks for your advice! I've fixed the CircleCI fails.. ",
    "cp16net": "added the unit test and passed ci. :smile: . ",
    "mbresson": "Thanks a lot! Problem solved :).. ",
    "greensombrero": "Thanks for the response!. ",
    "Rafik": "any elaborated hint about the solution? thanks.. ",
    "bilus": "This should me mentioned in the docs imo. The timeout thing cost me ~1 hour of debugging. :>. What about a PR for a more reasonable timeout instead?. The example in docs creates the struct directly unless I'm reading it wrong:\ngo\n...\n // make the request to get all items\n  resp, err := apiclient.Default.Operations.All(operations.AllParams{})\n...\nhttps://goswagger.io/generate/client.html. ",
    "mikkeloscar": "I don't understand why the build is failing, I can run the tests fine locally. Any ideas if it's related to my changes?. @fredbi commenting out the parallel config did make the build run successfully.. I have noticed this as well. I don't think it's related to this particular change but I suspect it has to do with using Go modules in general. I assume when using Go modules you hit the network a lot when invoking go during the generation.\nI have not yet verified this though.. ",
    "marang": "Minlength shouldnt imply that it is required field, if not filled out it\nshould be fine and if filled out it should be at least the required\nminlength.\nOn Sun, 25 Nov 2018, 05:08 gregmarr <notifications@github.com wrote:\n\nBecause during validation we can tell the difference between \"user\nprovided a string of length 1\" and \"user did not provide a string\" without\nusing a pointer. We can not tell the difference between \"user provided a\nstring of length 0\" and \"user did not provide a string\" without using a\npointer, when validation is done on just the current structure.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/go-swagger/go-swagger/issues/1662#issuecomment-441413825,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABem1ru_WSnbJCOvMuonaoibIStcBupfks5uyhfVgaJpZM4WDJ-O\n.\n. \n",
    "alexz0000": "Hi @fredbi @casualjim \nI looked at #1668, but not sure it could give any helps to my requirement, since the APIs requires 'ClientAuthInfoWriter'. \nI'm new to golang, so could you give me more examples how could I define a customised ClientAuthInfoWriter which could get payload info. Thank you very much. Yes, for the authentication. \nI saw the every generated operation accept an argument authInfo runtime.ClientAuthInfoWriter. e.g.\nfunc (a *Client) GetReportList(params *GetReportListParams, authInfo runtime.ClientAuthInfoWriter) (*GetReportListOK, error)\nSo I define an auth function\nfunc MyAuth(accessId, accessKey string) ClientAuthInfoWriter {\n    return ClientAuthInfoWriterFunc(func(r ClientRequest, _ strfmt.Registry) error {\n                  //The auth need payload info, but I cannot get the payload info from ClientRequest.\n        }\n}\nSorry, I don't know how to format the code,  it looks ugly. Since we have an algorithm to generate a signature,  payload info is an argument for the algorithm. Then we will put the signature into the header. e.g.\nr.SetHeaderParam(\"Authorization\", fmt.Sprintf(\"MyAuth %s:%s:%s\", accessId, signature, epoch))\nwe don't use BasicAuth, APIKeyAuth, BearerToken. we use a customised Auth\n. @casualjim  Thanks for your solutions. \nI will take a look into RoundTripper, but if you could give me an example that would be perfect.\nI also considered the second solution, but I think it needs you guys to help to commit the code.  . Hi @casualjim I think the second solution is better. Is it possible adding the necessary methods to the ClientRequest interface? Or, Could I contribute it?. Hi @casualjim I create a PR https://github.com/go-openapi/runtime/pull/116. But it requires me add some test cases for the methods. I notice there aren't test cases for other Get methods. And also the Get methods are quiet simple, so, do you think it's necessary to add the test cases?\nAlso, please help to review the code, thanks.\n. @casualjim Thank you very much.. @casualjim More details for the generated client \n```go\nfunc unmarshalPet(data []byte, consumer runtime.Consumer) (Pet, error) {\n    buf := bytes.NewBuffer(data)\n    buf2 := bytes.NewBuffer(data)\n// the first time this is read is to fetch the value of the type property.\nvar getType struct {\n    Type string `json:\"type\"`\n}\nif err := consumer.Consume(buf, &getType); err != nil {\n    return nil, err\n}\n\nif err := validate.RequiredString(\"type\", \"body\", getType.Type); err != nil {\n    return nil, err\n}\n    //Something else\n\n}\nWill get error from validate.RequiredString if data is 'null'\nBTW, the Pet is a polymorphic class in java. @casualjim Could we change it as @woz5999 said?. I create a PR https://github.com/go-swagger/go-swagger/pull/1788. @casualjim  But users/customers may not be want to upgrade their SDK, If we force they do this, they may not be happy. And also, since we have lots of polymorphic APIs, some of them are upgraded very frequently, If they get failed frequently, I don't think they are happy. Actually, I prefer to ignore the new added sub-models. If the users/customers want to use the new added models, they can decide if upgrade to latest version of SDK. Thanks, I will try it.. When I tried to update the schema template, I got below error message. Looks I cannot override the templates except I update the code of go-swagger. If there any ways to let it effect?\nCould not complete template processing in directory \"../go-swagger-local/templates\": Could not add template: Cannot overwrite protected template schema\n``. I think the solution cannot get the purpose. And we're gonna to force our customers to upgrade their SDK version if there are new sub-models.. Done, thanks. Hi @casualjim, Does the failed test cases means I don't have the permission to update the template?. the nodes is just a tmp variable,  I think it's OK here to use nodes, err := Unmarshal...`, what do you think?. I updated the cases, could you help to review and merge the code ?. ",
    "bweston92": "Sorry how do I \"make my own\", the API struct generated defines it? . ",
    "Pe4enable": "@fredbi  Could you provide how i can find SecurityDefinitions tags. I use just swagger:meta and swagger:operation and nothing also.. ",
    "junfengye": "I met the same problem when i upgrade golang to 1.11.\noutputs: \nC:\\go\\src\\internal\\cpu\\cpu_x86.go:9:7: CacheLineSize redeclared in this block\nC:\\go\\src\\internal\\cpu\\cpu_wasm.go:7:7:         other declaration of CacheLineSize\nC:\\go\\src\\runtime\\internal\\sys\\arch_wasm.go:8:2: ArchFamily redeclared in this block\nC:\\go\\src\\runtime\\internal\\sys\\arch_amd64.go:8:2:       other declaration of ArchFamily\nC:\\go\\src\\runtime\\internal\\sys\\arch_wasm.go:9:2: BigEndian redeclared in this block\nC:\\go\\src\\runtime\\internal\\sys\\arch_amd64.go:9:2:       other declaration of BigEndian\nC:\\go\\src\\runtime\\internal\\sys\\arch_wasm.go:10:2: CacheLineSize redeclared in this block\nC:\\go\\src\\runtime\\internal\\sys\\arch_amd64.go:10:2:      other declaration of CacheLineSize\nC:\\go\\src\\runtime\\internal\\sys\\arch_wasm.go:11:2: DefaultPhysPageSize redeclared in this block\nC:\\go\\src\\runtime\\internal\\sys\\arch_amd64.go:11:2:      other declaration of DefaultPhysPageSize\nC:\\go\\src\\runtime\\internal\\sys\\arch_wasm.go:12:2: PCQuantum redeclared in this block\nC:\\go\\src\\runtime\\internal\\sys\\arch_amd64.go:12:2:      other declaration of PCQuantum\nC:\\go\\src\\runtime\\internal\\sys\\arch_wasm.go:13:2: Int64Align redeclared in this block\nC:\\go\\src\\runtime\\internal\\sys\\arch_amd64.go:13:2:      other declaration of Int64Align\nC:\\go\\src\\runtime\\internal\\sys\\arch_wasm.go:14:2: HugePageSize redeclared in this block\nC:\\go\\src\\runtime\\internal\\sys\\arch_amd64.go:14:2:      other declaration of HugePageSize\nC:\\go\\src\\runtime\\internal\\sys\\arch_wasm.go:15:2: MinFrameSize redeclared in this block\nC:\\go\\src\\runtime\\internal\\sys\\arch_amd64.go:15:2:      other declaration of MinFrameSize\nC:\\go\\src\\runtime\\internal\\sys\\arch_wasm.go:18:6: Uintreg redeclared in this block\nC:\\go\\src\\runtime\\internal\\sys\\arch_amd64.go:18:6:      other declaration of Uintreg\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:14:6: Load redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_amd64x.go:13:6:        other declaration of Load\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:20:6: Loadp redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_amd64x.go:19:6:        other declaration of Loadp\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:26:6: Load64 redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_amd64x.go:25:6:        other declaration of Load64\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:32:6: Xadd redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_amd64x.go:30:6:        other declaration of Xadd\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:40:6: Xadd64 redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_amd64x.go:33:6:        other declaration of Xadd64\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:48:6: Xadduintptr redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_amd64x.go:36:6:        other declaration of Xadduintptr\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:56:6: Xchg redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_amd64x.go:39:6:        other declaration of Xchg\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:64:6: Xchg64 redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_amd64x.go:42:6:        other declaration of Xchg64\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:72:6: Xchguintptr redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_amd64x.go:45:6:        other declaration of Xchguintptr\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:80:6: And8 redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_amd64x.go:48:6:        other declaration of And8\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:86:6: Or8 redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_amd64x.go:51:6:        other declaration of Or8\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:94:6: Cas64 redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_amd64x.go:56:6:        other declaration of Cas64\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:104:6: Store redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_amd64x.go:59:6:        other declaration of Store\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:110:6: Store64 redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_amd64x.go:62:6:        other declaration of Store64\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:116:6: StorepNoWB redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_amd64x.go:68:6:        other declaration of StorepNoWB\nC:\\go\\src\\runtime\\internal\\atomic\\stubs.go:12:6: Cas redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:122:6:         other declaration of Cas\nC:\\go\\src\\runtime\\internal\\atomic\\stubs.go:15:6: Casp1 redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:132:6:         other declaration of Casp1\nC:\\go\\src\\runtime\\internal\\atomic\\stubs.go:18:6: Casuintptr redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:142:6:         other declaration of Casuintptr\nC:\\go\\src\\runtime\\internal\\atomic\\stubs.go:21:6: Storeuintptr redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:152:6:         other declaration of Storeuintptr\nC:\\go\\src\\runtime\\internal\\atomic\\stubs.go:24:6: Loaduintptr redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:158:6:         other declaration of Loaduintptr\nC:\\go\\src\\runtime\\internal\\atomic\\stubs.go:27:6: Loaduint redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:164:6:         other declaration of Loaduint\nC:\\go\\src\\runtime\\internal\\atomic\\stubs.go:32:6: Loadint64 redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:170:6:         other declaration of Loadint64\nC:\\go\\src\\runtime\\internal\\atomic\\stubs.go:35:6: Xaddint64 redeclared in this block\nC:\\go\\src\\runtime\\internal\\atomic\\atomic_wasm.go:176:6:         other declaration of Xaddint64\nC:\\go\\src\\runtime\\sys_x86.go:16:6: gostartcall redeclared in this block\nC:\\go\\src\\runtime\\sys_wasm.go:31:6:     other declaration of gostartcall\ncouldn't load packages due to errors: runtime/internal/atomic, runtime, runtime/internal/sys and 1 more. Clear the $GOPATH/pkg folder doesn't work.\nI rebuilt go-swagger with golang 1.11 and problem fixed. @casualjim \n. ",
    "nebiros": "@junfengye's comment was the solution. @casualjim would be nice if the brew formula supports --HEAD or --build-from-source options. ",
    "dorsha": "We are also facing this issue which don't let us upgrade to golang 1.11.\nAny estimation for a new release?. ",
    "ananichev": "@junfengye's comment also helped me, go-swagger works after rebuilding with Go 1.11  . ",
    "AgrimPrasad": "We are hitting this issue also after upgrading to Go 1.11.1 Any ETA on this bug as this basically blocks us from upgrading our go release. Thanks!. You'll have to install other packages which you'd installed before using go install or go get (note that go get basically downloads and the installs the package, similar to go install)\nFor future reference, you can do this instead of deleting the entire $GOPATH/pkg directory and sub-directories. This command ensures that only those sub-directories of $GOPATH/pkg are deleted which are used by go-swagger\ngo clean -i github.com/go-swagger.... Saw this issue too on our build. Should change the new version name to 0.17.0. @casualjim Thanks, please let us know when it's fixed. We just re-tried the build and saw the same error again.\ndpkg: error processing archive /tmp/apt-dpkg-install-7BKFfX/7-swagger_v0.17.0_amd64.deb (--unpack):\n parsing file '/var/lib/dpkg/tmp.ci/control' near line 2 package 'swagger':\n error in 'Version' field string 'v0.17.0': version number does not start with digit. Thanks, can we also update the package name here? https://dl.bintray.com/go-swagger/goswagger-debian/\nBecause our build script runs the following:\n```\necho \"deb [trusted=yes] https://dl.bintray.com/go-swagger/goswagger-debian ubuntu main\" | tee -a /etc/apt/sources.list &&\napt-get install -y swagger\n```. To clarify the comment above, I mean can we remove swagger_v0.17.0_amd64.deb from bintray? . Thanks! Works great. I believe we can close this issue now.. Yes sorry, I didn't check the new package earlier. It indeed doesn't contain the binary. Could it be checked again please? . Any updates on the missing binary issue? Or should I create a separate issue for that?. Created https://github.com/go-swagger/go-swagger/issues/1793 for the missing binary issue, as that's different from the issue title here, and the original issue mentioned here has indeed been fixed.. ",
    "ycdg": "\nClear the $GOPATH/pkg folder doesn't work.\nI rebuilt go-swagger with golang 1.11 and problem fixed. @casualjim\n\nu mean go get -u github.com/go-swagger/go-swagger/cmd/swagger ?. > @junfengye's comment also helped me, go-swagger works after rebuilding with Go 1.11\nhow to rebuild go-swagger, excuse me... @fredbi thanks a lot, i have create swagger in GOPATH/bin, but i still cannot use //go:generate swagger generate spec -o swagger.json, error is as fwllows, any one knows that?\n/usr/local/go/src/internal/cpu/cpu_x86.go:9:7: CacheLineSize redeclared in this block\n/usr/local/go/src/internal/cpu/cpu_wasm.go:7:7:     other declaration of CacheLineSize\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:14:6: Load redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:13:6:    other declaration of Load\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:20:6: Loadp redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:19:6:    other declaration of Loadp\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:26:6: Load64 redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:25:6:    other declaration of Load64\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:32:6: Xadd redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:30:6:    other declaration of Xadd\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:40:6: Xadd64 redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:33:6:    other declaration of Xadd64\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:48:6: Xadduintptr redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:36:6:    other declaration of Xadduintptr\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:56:6: Xchg redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:39:6:    other declaration of Xchg\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:64:6: Xchg64 redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:42:6:    other declaration of Xchg64\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:72:6: Xchguintptr redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:45:6:    other declaration of Xchguintptr\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:80:6: And8 redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:48:6:    other declaration of And8\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:86:6: Or8 redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:51:6:    other declaration of Or8\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:94:6: Cas64 redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:56:6:    other declaration of Cas64\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:104:6: Store redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:59:6:    other declaration of Store\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:110:6: Store64 redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:62:6:    other declaration of Store64\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:116:6: StorepNoWB redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:68:6:    other declaration of StorepNoWB\n/usr/local/go/src/runtime/internal/atomic/stubs.go:12:6: Cas redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:122:6:     other declaration of Cas\n/usr/local/go/src/runtime/internal/atomic/stubs.go:15:6: Casp1 redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:132:6:     other declaration of Casp1\n/usr/local/go/src/runtime/internal/atomic/stubs.go:18:6: Casuintptr redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:142:6:     other declaration of Casuintptr\n/usr/local/go/src/runtime/internal/atomic/stubs.go:21:6: Storeuintptr redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:152:6:     other declaration of Storeuintptr\n/usr/local/go/src/runtime/internal/atomic/stubs.go:24:6: Loaduintptr redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:158:6:     other declaration of Loaduintptr\n/usr/local/go/src/runtime/internal/atomic/stubs.go:27:6: Loaduint redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:164:6:     other declaration of Loaduint\n/usr/local/go/src/runtime/internal/atomic/stubs.go:32:6: Loadint64 redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:170:6:     other declaration of Loadint64\n/usr/local/go/src/runtime/internal/atomic/stubs.go:35:6: Xaddint64 redeclared in this block\n/usr/local/go/src/runtime/internal/atomic/atomic_wasm.go:176:6:     other declaration of Xaddint64\n/usr/local/go/src/runtime/internal/sys/arch_wasm.go:8:2: ArchFamily redeclared in this block\n/usr/local/go/src/runtime/internal/sys/arch_amd64.go:8:2:   other declaration of ArchFamily\n/usr/local/go/src/runtime/internal/sys/arch_wasm.go:9:2: BigEndian redeclared in this block\n/usr/local/go/src/runtime/internal/sys/arch_amd64.go:9:2:   other declaration of BigEndian\n/usr/local/go/src/runtime/internal/sys/arch_wasm.go:10:2: CacheLineSize redeclared in this block\n/usr/local/go/src/runtime/internal/sys/arch_amd64.go:10:2:  other declaration of CacheLineSize\n/usr/local/go/src/runtime/internal/sys/arch_wasm.go:11:2: DefaultPhysPageSize redeclared in this block\n/usr/local/go/src/runtime/internal/sys/arch_amd64.go:11:2:  other declaration of DefaultPhysPageSize\n/usr/local/go/src/runtime/internal/sys/arch_wasm.go:12:2: PCQuantum redeclared in this block\n/usr/local/go/src/runtime/internal/sys/arch_amd64.go:12:2:  other declaration of PCQuantum\n/usr/local/go/src/runtime/internal/sys/arch_wasm.go:13:2: Int64Align redeclared in this block\n/usr/local/go/src/runtime/internal/sys/arch_amd64.go:13:2:  other declaration of Int64Align\n/usr/local/go/src/runtime/internal/sys/arch_wasm.go:14:2: HugePageSize redeclared in this block\n/usr/local/go/src/runtime/internal/sys/arch_amd64.go:14:2:  other declaration of HugePageSize\n/usr/local/go/src/runtime/internal/sys/arch_wasm.go:15:2: MinFrameSize redeclared in this block\n/usr/local/go/src/runtime/internal/sys/arch_amd64.go:15:2:  other declaration of MinFrameSize\n/usr/local/go/src/runtime/internal/sys/arch_wasm.go:18:6: Uintreg redeclared in this block\n/usr/local/go/src/runtime/internal/sys/arch_amd64.go:18:6:  other declaration of Uintreg\n/usr/local/go/src/runtime/sys_x86.go:16:6: gostartcall redeclared in this block\n/usr/local/go/src/runtime/sys_wasm.go:31:6:     other declaration of gostartcall\ncouldn't load packages due to errors: internal/cpu, runtime/internal/sys, runtime/internal/atomic and 1 more\naa.go:60: running \"swagger\": exit status 1. @casualjim  thanks a lot, aftergo install github.com/go-swagger/go-swagger/cmd/swagger, $gopath/pkg/github.com/go-swaggerhas recreated, but after i delete the whole path$GOPATH/pkg, how to recreate all the folders in $GOPATH/pkg?. the same situation, have not solved yet. ",
    "vaishalig2693": "@gregmarr  This behaved in a similar way. It doesn't create named variables for these enums like it does when the type is string. \nEg. \nconst (\n// TaskStatusQUEUED captures enum value \"QUEUED\"\nTaskStatusQUEUED string = \"QUEUED\"\n\n// TaskStatusRUNNING captures enum value \"RUNNING\"\nTaskStatusRUNNING string = \"RUNNING\"\n\n// TaskStatusSUCCEEDED captures enum value \"SUCCEEDED\"\nTaskStatusSUCCEEDED string = \"SUCCEEDED\"\n\n)\n. Thanks @fredbi . Looking forward to get that support.. Thanks @fredbi . ",
    "surajbarkale": "Can we at least get v added to the front of the tag? So tag 0.16.0 should be changed to v0.16.0. It is OK if only the newer tags follow this format.. ",
    "atombender": "How so? Go code can exist in any location you want, especially when you use Go modules.. Right, but Go without modules also lets you put Go files anywhere within a project, as long as it's in your GOPATH.. ",
    "JeremyLoy": "NOTE this is slightly related to #1671.  I ran go install github.com/go-swagger/go-swagger/cmd/swagger to get a version built with 1.11 to test with modules. . No worries! This is a big change for the whole community, almost every repository I use has had one issue or another.. ",
    "kostiamol": "Guys, is there any progress with modules? If no, how could I get around this issue?. ",
    "rayjlinden": "I just converted my project from Godep to go mod.  I now get this error with swagger gen spec:\nunable to determine package for /Users/rayj/dev/go/pkg/mod/github.com/lindenlab/extraction-utils-go@v0.0.0-20180806163638-9e283eb62bd2/response/response.go\nIs this related to this thread?  Any idea how I work around this?. The very odd thing is I rerun the swagger command and changed nothing and\nit works.  It doesn\u2019t happen all the time and so far rerunning has fixed it\neach time...\nRay\nOn Tue, Nov 6, 2018 at 1:43 PM Ivan Porto Carrero notifications@github.com\nwrote:\n\nwe have to change the way we introspect code, but this is go 1.11 specific\nwe can't do that for 1.10.\nAnyway haven't been able to get into how go does this internally yet.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/go-swagger/go-swagger/issues/1681#issuecomment-436419309,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AonV2pPQq8PXNuhH1DHHfJ5tAVVkCMMrks5usgKLgaJpZM4WWv7t\n.\n. I don't think so.  It will work if the project you are running on is in the\nGOPATH and you have GO111MODULE=off.  However, if you have GO111MODULE=on\nor your project is not in the GOPATH it will fail.  It will continue to\nfail until they use a different library for parsing go code.\n\nOn Wed, Jan 23, 2019 at 8:41 AM Amireza Fatemi notifications@github.com\nwrote:\n\njust got the latest version yesterday and seems it works fine generating\nmodule base Go project. maybe the issue can be closed ?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/go-swagger/go-swagger/issues/1681#issuecomment-456874297,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AonV2l6iIaVHJxejkV9lo7h9fkLMmCN4ks5vGJDGgaJpZM4WWv7t\n.\n. \n",
    "arfo90": "Just got the latest version yesterday and seems it works fine generating module base Go project. maybe the issue can be closed ?. ",
    "bserdar": "Ugly workaround: I have my source tree outside GOPATH, and a symlink to it under GOPATH. I use the version under GOPATH to build swagger specs, and the original for real work.. ",
    "chenziliang": "There are 2 PRs merged for these requirements. Use the latest swagger command\n1. To generate yml format spec, simply specify a output file name with .yml or yaml extension. For example, swagger generate spec -o openapi.yml\n2. To avoid generate go extension, do SWAGGER_GENERATE_EXTENSION=false && swagger generate spec -o openapi.yml. @fredbi  done in https://github.com/go-swagger/go-swagger/pull/1700. Working on it. Thanks !. Hi @casualjim,  could you please help merge the commits as seems i have no permission to do that ?. Hi @casualjim, signed. Could you please help merge the PR ?. @casualjim done. @casualjim did i need sign my commit again ?. @casualjim done . This is for testing. . for spec generation test only. done. done. ",
    "jackwilsdon": "Done that now, cheers :+1:. ",
    "Foxcool": "@fredbi , hi!\nLet's see more small case.\n```\nswagger: '2.0'\ninfo:\n  version: \"1.0.0\"\n  title: Integration API\n  description: |\n    #### RESTFUL Integration API\nschemes:\n- http\nhost: \"integration.maximus.lan\"\nbasePath: /\nparameters:\n  integrationID:\n    name: integrationID\n    in: path\n    description: \"Integration ID\"\n    type: string\n    required: true\neventID:\n    name: eventID\n    in: path\n    description: \"Event ID\"\n    type: string\n    required: true\nsecurityDefinitions:\n  Bearer:\n    type: apiKey\n    name: Authorization\n    in: header\npaths:\n  /integrations:\n    get:\n      tags:\n      - Integrations\n      summary: Integrations collection\n      produces:\n      - application/json\n      consumes:\n      - application/json\n      responses:\n        200:\n          $ref: \"#/responses/Base_response_200\"\n        405:\n          $ref: \"#/responses/Base_response_405\"\n        500:\n          $ref: \"#/responses/Base_response_500\"\n/integrations/one:\n    post:\n      parameters:\n      - name: body\n        in: body\n        required: true\n        schema:\n          allOf:\n          - $ref: \"#/definitions/Integration_params_maximus\"\n          - $ref: \"#/definitions/Integration_events_params\"\n          - type: object\n  tags:\n  - Integrations\n  summary: Test One\n  produces:\n  - application/json\n  consumes:\n  - application/json\n  responses:\n    200:\n      $ref: \"#/responses/Integration_one_response_200\"\n    400:\n      $ref: \"#/responses/Base_response_400\"\n    405:\n      $ref: \"#/responses/Base_response_405\"\n    500:\n      $ref: \"#/responses/Base_response_500\"\n\n/integrations/two:\n    post:\n      parameters:\n      - name: body\n        in: body\n        required: true\n        schema:\n          allOf:\n          - $ref: \"#/definitions/Integration_params_maximus\"\n          - $ref: \"#/definitions/Integration_events_params\"\n          - type: object\n  tags:\n  - Integrations\n  summary: Test Two\n  produces:\n  - application/json\n  consumes:\n  - application/json\n  responses:\n    200:\n      $ref: \"#/responses/Integration_two_response_200\"\n    400:\n      $ref: \"#/responses/Base_response_400\"\n    405:\n      $ref: \"#/responses/Base_response_405\"\n    500:\n      $ref: \"#/responses/Base_response_500\"\n\nresponses:\n  Base_response_400:\n    description: \"Validation error\"\n    schema:\n      allOf:\n      - $ref: \"#/definitions/Error_400_data\"\nBase_response_401:\n    description: \"Access denied\"\n    schema:\n      allOf:\n      - $ref: \"#/definitions/Error_401_data\"\nBase_response_404:\n    description: \"Not found\"\n    schema:\n      allOf:\n      - $ref: \"#/definitions/Error_404_data\"\nBase_response_405:\n    description: \"Invalid Method\"\n    schema:\n      allOf:\n      - $ref: \"#/definitions/Error_405_data\"\nBase_response_200:\n    description: \"Success\"\n    schema:\n      allOf:\n      - $ref: \"#/definitions/Success_data\"\n      - type: object\n        properties:\n          data:\n            type: array\n            items: {}\n  Base_response_500:\n    description: \"Internal server error\"\n    schema:\n      allOf:\n      - $ref: \"#/definitions/Error_data\"\n      - type: object\n        properties:\n          message:\n            type: string\n            description: \"\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430\"\n            example: \"Internal server error\"\n          errors:\n            example: null\n        required:\n        - message\n        - errors\nIntegration_one_response_200:\n    description: \"Test result ONE\"\n    schema:\n      allOf:\n      - $ref: \"#/definitions/Success_data\"\n      - type: object\n        properties:\n          data:\n            type: array\n            items:\n              allOf:\n              - type: object\n                properties:\n                  Items:\n                    type: array\n                    items: {}\nIntegration_two_response_200:\n    description: \"Test result TWO\"\n    schema:\n      allOf:\n      - $ref: \"#/definitions/Success_data\"\n      - type: object\n        properties:\n          data:\n            type: array\n            items:\n              allOf:\n              - type: object\n                properties:\n                  ID:\n                    type: string\n                    description: \"Integration ID\"\n                    example: \"d00962f4-d052-4fb4-99d6-91b56208e72f\"\n              - $ref: \"#/definitions/Integration_params_maximus\"\n              - $ref: \"#/definitions/Integration_events_params\"\ndefinitions:\n  Base_data:\n    description: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u043e\u0442\u0432\u0435\u0442\u0430\n    type: object\n    properties:\n      version:\n        type: string\n        description: \"\u0412\u0435\u0440\u0441\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\"\n        example: \"1.0.1\"\n    required:\n    - version\nSuccess_data:\n    description: \u0412\u0441\u0435 \u0445\u043e\u0440\u043e\u0448\u043e\n    allOf:\n    - $ref: \"#/definitions/Base_data\"\n    - type: object\n      title: Success_data\n      properties:\n        message:\n          type: string\n          description: \"\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430\"\n          example: \"SUCCESS\"\n        errors:\n          example: null\n      required:\n      - message\n      - errors\nError_data:\n    description: \u0412\u0441\u0435 \u043f\u043b\u043e\u0445\u043e\n    allOf:\n    - $ref: \"#/definitions/Base_data\"\n    - type: object\n      title: Error_data\n      properties:\n        data:\n          example: null\n      required:\n      - data\nError_400_data:\n    allOf:\n    - $ref: \"#/definitions/Error_data\"\n    - type: object\n      title: Error_Error_400_data\n      properties:\n        message:\n          type: string\n          example: \"Validation error\"\n        errors:\n          type: array\n          items: {}\n      required:\n      - message\n      - errors\nError_401_data:\n    allOf:\n    - $ref: \"#/definitions/Error_data\"\n    - type: object\n      title: Error_401_data\n      properties:\n        message:\n          type: string\n          description: \"\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430\"\n          example: \"AcccesstOken required\"\n        errors:\n          type: array\n          items: {}\n      required:\n      - message\n      - errors\nError_404_data:\n    allOf:\n    - $ref: \"#/definitions/Error_data\"\n    - type: object\n      title: Error_Error_404_data\n      properties:\n        message:\n          type: string\n          description: \"\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430\"\n          example: \"Entity not found\"\n        errors:\n          type: array\n          items: {}\n      required:\n      - message\n      - errors\nError_405_data:\n    allOf:\n    - $ref: \"#/definitions/Error_data\"\n    - type: object\n      title: Error_Error_405_data\n      properties:\n        message:\n          type: string\n          description: \"\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430\"\n          example: \"Method ${METHOD} not allowed\"\n        errors:\n          example: null\n      required:\n      - message\n      - errors\n  Integration_params_maximus:\n    title: Integration_params_maximus\n    properties:\n      description:\n        type: string\n        description: \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\"\n        example: \"MX-071 Integration\"\n      path:\n        type: string\n        description: \"\u0410\u0434\u0440\u0435\u0441 \u041c\u0418\u0421 Maximus\"\n        example: \"http://web.maximus.lan/integration\"\n      version:\n        type: string\n        description: \"\u0412\u0435\u0440\u0441\u0438\u044f \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\"\n        example: \"1.61\"\n    required:\n    - description\n    - path\n    - version\nIntegration_events_params:\n    title: Integration_events_params\n    properties:\n      events:\n        type: array\n        description: \"\u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043f\u0440\u0430\u0432\u0438\u043b\"\n        example: [\"ALL\"]\n        items:\n          type: string\n          example: \"TASKS\"\n          enum:\n          - \"ALL\"\n          - \"TASKS\"\n          - \"PATIENTS\"\n    required:\n    - events\n```\nHere we have only 3 routes:\nGET /integrations\nPOST /integrations/one\nPOST /integrations/two\nBoth POST methods have data objects in response, but the internal fields are different. \n```\nPOST /integrations/one\n{\n  \"version\": \"1.0.1\",\n  \"message\": \"SUCCESS\",\n  \"errors\": null,\n  \"data\": [\n    {\n      \"Items\": [\n        null\n      ]\n    }\n  ]\n}\nPOST /integrations/two\n{\n  \"version\": \"1.0.1\",\n  \"message\": \"SUCCESS\",\n  \"errors\": null,\n  \"data\": [\n    {\n      \"ID\": \"d00962f4-d052-4fb4-99d6-91b56208e72f\",\n      \"description\": \"MX-071 Integration\",\n      \"path\": \"http://web.maximus.lan/integration\",\n      \"version\": \"1.61\",\n      \"events\": [\n        \"ALL\"\n      ]\n    }\n  ]\n}\n```\nOk. We generate code...\nswagger generate server -f ./docs/swagger.yaml -t api\nAnd see problem. Generated data struct for ONE route is\n```\n// PostIntegrationsOneOKBody post integrations one o k body\n// swagger:model PostIntegrationsOneOKBody\ntype PostIntegrationsOneOKBody struct {\n    models.SuccessData\n// data\nData []*DataItems0 `json:\"data\"`\n\n}\n// DataItems0 data items0\n// swagger:model DataItems0\ntype DataItems0 struct {\n// items\nItems []interface{} `json:\"Items\"`\n\n}\n```\nThis is OK.\nBut route TWO also uses DataItems0 struct, covers ONE data struct!\n```\n// PostIntegrationsTwoOKBody post integrations two o k body\n// swagger:model PostIntegrationsTwoOKBody\ntype PostIntegrationsTwoOKBody struct {\n    models.SuccessData\n// data\nData []*DataItems0 `json:\"data\"`\n\n}\n``` \nIn openAPI 2 we can't use AnyOf rules. We need to use different routes for different object types with custom data fields. Aggressive reusing substructures is bug or feature? (:. Good! This fixes our problem without changing to flatten=full. Thank you.. ",
    "anz-rfc": "\nWhere we use this the zero value is the same wether the value is present or not, because zero is the same as not provided, we mark them with omitempty by default because they don't need to be present on the wire for the application to do the right thing\n\nre: \"because zero is the same as not provided\" i think this is an assumption that is not true in general.\nfor example, consider following api spec:\nswagger: '2.0'\ninfo:\n  version: 0.0.0\n  title: Foo API\nschemes:\n  - http\npaths:\n  /foo:\n    get:\n      operationId: GetFoo\n      produces:\n        - application/json\n      responses:\n        '200':\n          description: Get Foo\n          schema:\n            $ref: '#/definitions/Foo'\ndefinitions:\n  Foo:\n    type: object\n    properties:\n      someFlag:\n        type: boolean\nWhen a Foo value is sent over the wire as JSON data, either someFlag field can be missing, or if it is present, it can take the value JSON true or false.  Note that a default value is not explicity specified (i don't think the OAS 2.0 spec gives this someFlag field gives an implicit default value)\nWhen Foo is deserialised into Go type system, there needs to be a way for that type to represent these three cases of <missing>, true and false that can be sent over the wire for someFlag. Treating <missing> as equal to <the zero value for our go type> aka false is making an additional assumption that isn't part of the API spec.\nNote that if we change the example to allow someFlag to be nullable, now there are 4 values for someFlag that can be sent over the wire: <missing>, true, false and null . In some cases application code might interpret the meaning of <missing> differently to true, false and null, so in general there would need to be a way for the encoding into go type system to represent these four cases.. older issue related to trailing slashes: https://github.com/go-swagger/go-swagger/issues/899. From my attempt to debug the issue:\n\ngithub.com/go-openapi/analysis stores paths including the trailing slash\ngithub.com/go-openapi/runtime/middleware has various bits of code calling path.Clean or path.Join -- these both remove trailing slashes from paths (if any)\ncode in github.com/go-openapi/runtime/middleware that calls github.com/go-openapi/analysis seems to assume it removes trailing slashes, but it seems like this assumption is wrong, hence the crash at runtime.\ncode generated by swagger generate server normalises away the trailing slash. For example, the generated code in restapi/operations/banana_api.go will contain something like o.handlers[\"POST\"][\"/fruit/banana\"] = <...>.  Note that the trailing slash that was featured in the api.yaml spec has been lost.. \n",
    "Ntr0": "\nrequired: Determines whether this parameter is mandatory. If the parameter is in \"path\", this property is  required and its value MUST be true. Otherwise, the property MAY be included and its default value is false.\n\nFrom my understanding this paragraph does not say, that a default value is false if a parameter is not provided. Instead it says that the default value of the field \"required\" is false per default, if a parameter is not in \"path\".\n. ",
    "AsifArko": "Does anyone have any resolve for this issue ? \n\n. ",
    "MrLuje": "All failing tests are related to line endings (I'm on windows)\nDo you mind if I also add a .gitattributes file with the following code to avoid this issue next time ?\n*.gotmpl       text eol=lf. @fredbi No problem, I should have asked about it before starting anything. ",
    "worldofprasanna": "@kishaningithub We can close this issue because the version specified in go.mod is v0.2.0 and hence it is referring to this tag.\nSome more context:\nIf you disable GO111MODULE then it means you will always use the latest version of go-swagger and it is not respecting the version / tags\nOnce you start enabling GO111MODULE then whatever package version specified in the go.mod would be downloaded and used. Yay !!! Go modules \ud83d\udcaa \ud83d\udcaa \n. @fredbi Nice catch. Will check it.. ",
    "kishaningithub": "Both @kevinburke and @jteeuwen versions of go-bindata does not seem to maintained anymore . ",
    "kevinburke": "I'm not sure where you get the idea that I'm not maintaining my fork, I've added several patches and new features in the past few months.\nMy fork is also the binary you get if you run brew install go-bindata.. @mstoykov can you paste the exact output you get when you get the error, and the exact command you are running? It will help us figure out what\u2019s going wrong.. ",
    "jputrino": "Thanks @fredbi!. ",
    "alisondy": "Whats the status on this? Thanks in advance. ",
    "soupdiver": "I try go generate a spec for an existing project.\nMy project lives outside GOPATH and uses go modules.\nI added some swagger comments in my code and tried to run \nswagger generate spec -o swagger.json -b ./cmd/ur-server\n/Users/felix/gocode/pkg/mod/github.com/stripe/stripe-go@v46.0.0+incompatible/client/api.go:5:9: could not import github.com/stripe/stripe-go (cannot find package \"github.com/stripe/stripe-go\" in any of:\n    /usr/local/Cellar/go/1.11.2/libexec/src/github.com/stripe/stripe-go (from $GOROOT)\n    /Users/felix/gocode/src/github.com/stripe/stripe-go (from $GOPATH))\nthis is followed by hundreds of similar lines. Is this related to this issue of supporting modules or am I hitting a different wall?. ok, thanks for clarification \ud83d\udc4d . ",
    "mdiesen": "\nlet's not call not supporting experimental features a major issue.\n\nWith all respect I think it should be considered a major issue since it is a feature that is in the roadmap of Go and more and more projects are using it. Not supporting it will be a good reason to not use go-swagger and choose another tool instead.. ",
    "bcomnes": "I found a really cool pattern for go-swagger and go modules: versioning the go-swagger CLI with your mod file!\n- https://github.com/netlify/open-api/blob/master/go.mod#L23 The pinned version of go-swagger\n- https://github.com/netlify/open-api/blob/master/tools.go The stub tools.go that causes the bin to be tracked in go.mod\n- https://github.com/netlify/open-api/blob/master/generate.go A generate directive so go generate generates the swagger types and plumbing files\n- https://github.com/netlify/open-api/blob/master/Makefile A make file for a common entry-point to the project\n- https://github.com/go-modules-by-example/index/tree/master/010_tools the tools.go pattern explained\n- https://github.com/go-modules-by-example/index/tree/master/017_using_gobin the gobin helper tool which lets you easily run a specific version of tools locally (sort of like npm devDependecies)\nAs a result, everyone on the team now can generate the swagger code consistently, no longer do we have to nag people to use the right version, its all automated in a very go-like way.. ",
    "woz5999": "I think it would be reasonable in the case of structs that have optional properties whose type is polymorphic, to do a nil check, and if nil, skip unmarshalling of that property. This respects the optional nature of the struct property without changing the discriminator behavior in the unmarshal template. \nWe'd be happy to put in a PR to make this change if you agree that this is reasonable and desired.. ",
    "cozzbp": "Yeah that's a fair point.. ",
    "gregorhollmig": "I don't know how that could happen. I believed it would be executed automatically.. Is further action required by my side for the PR to be merged? \nThe signing is sth. I haven't done before, I need to get used to that.... Okay @casualjim  so ... I signed with commit -s isn't that fine? I believe I did the same for #1730 . DCO check is also fine, what is the issue? . ",
    "mbana": "@fredbi Thanks for the reply.\nWould you mind adding more examples. Imagine my request and response look like this, I want to validate based on the path - the libraries I linked to above, have a concept of operation which you retrieve using the path. E.g.,\njson\n    {\n        \"request\": {\n            \"method\": \"POST\",\n            \"url\": \"https://modelobank2018.o3bank.co.uk:4501/open-banking/v1.1/payments\",\n            \"path\": \"/open-banking/v1.1/payments\",\n            \"headers\": {\n                \"user-agent\": \"node-superagent/3.8.3\",\n                \"authorization\": \"Bearer 597759d2-790d-4ac2-b0a7-603ff26e5158\",\n                \"content-type\": \"application/json; charset=utf-8\",\n                \"accept\": \"application/json; charset=utf-8\",\n                \"x-fapi-interaction-id\": \"48d657df-12ac-4035-b359-f653a551280c\",\n                \"x-fapi-financial-id\": \"0015800001041RHAAY\",\n                \"x-idempotency-key\": \"a8b43b3d-b797-43fe-aea8-3651da3ebb46\",\n                \"x-validation-run-id\": \"df4ab220-b5cc-11e8-98fd-8c8590302423\"\n            },\n            \"body\": {\n                \"Data\": {\n                    \"Initiation\": {\n                        \"InstructionIdentification\": \"253fcfb5-ae0f-458c-a65b-ef0d3a7a82\",\n                        \"EndToEndIdentification\": \"aa71fc90-ec55-4ba0-958f-dd274133d2\",\n                        \"InstructedAmount\": {\n                            \"Currency\": \"GBP\",\n                            \"Amount\": \"10.00\"\n                        },\n                        \"CreditorAccount\": {\n                            \"SchemeName\": \"SortCodeAccountNumber\",\n                            \"Name\": \"Sam Morse\",\n                            \"Identification\": \"11111112345678\"\n                        }\n                    }\n                },\n                \"Risk\": {}\n            }\n        },\n        \"response\": {\n            \"statusCode\": 201,\n            \"headers\": {\n                \"server\": \"nginx/1.12.1\",\n                \"date\": \"Tue, 11 Sep 2018 14:13:36 GMT\",\n                \"content-type\": \"application/json; charset=utf-8\",\n                \"content-length\": \"565\",\n                \"connection\": \"close\",\n                \"x-powered-by\": \"Express\",\n                \"x-fapi-interaction-id\": \"48d657df-12ac-4035-b359-f653a551280c\",\n                \"etag\": \"W/\\\"235-ayM1zpSIpNY+K2E9KMKVbMl6fcc\\\"\"\n            },\n            \"body\": {\n                \"Data\": {\n                    \"Initiation\": {\n                        \"InstructionIdentification\": \"253fcfb5-ae0f-458c-a65b-ef0d3a7a82\",\n                        \"EndToEndIdentification\": \"aa71fc90-ec55-4ba0-958f-dd274133d2\",\n                        \"InstructedAmount\": {\n                            \"Currency\": \"GBP\",\n                            \"Amount\": \"10.00\"\n                        },\n                        \"CreditorAccount\": {\n                            \"SchemeName\": \"SortCodeAccountNumber\",\n                            \"Name\": \"Sam Morse\",\n                            \"Identification\": \"11111112345678\"\n                        }\n                    },\n                    \"Status\": \"AcceptedTechnicalValidation\",\n                    \"CreationDateTime\": \"2018-09-11T14:13:36.292Z\",\n                    \"PaymentId\": \"pmt-346a5828-cf92-40ac-a51a-8df51f1ff7a2\"\n                },\n                \"Risk\": {},\n                \"Links\": {\n                    \"Self\": \"/open-banking/v1.1/payments/pmt-346a5828-cf92-40ac-a51a-8df51f1ff7a2\"\n                },\n                \"Meta\": {}\n            }\n        }\n    }\nWhen asked to validate the request, the validate method in the library finds the part of the swagger to validate against the request. The only thing I need to specify is the path, which in this case is /payments. then the library detects the right portion of the swagger file to validation, which is https://github.com/OpenBankingUK/payment-initiation-api-spec/blob/master/dist/v1.1/payment-initiation-swagger.json#L25.\nHope that made sense. If not, I can expand further.. ",
    "annamel": "My working dir (-w) was setup up correctly. It seems the main problem was in \"dummy\" copying from the manual \nhttps://github.com/go-swagger/go-swagger/blob/master/docs/install.md\nalias swagger=\"docker run --rm -it -e GOPATH=$HOME/go:/go -v $HOME:$HOME -w $(pwd) quay.io/goswagger/swagger\"\nwhile my GOPATH was $HOME/src\nBut a funny thing - trying even dirty magic, I've moved go sources from $HOME/src/src to $HOME/Code/go/src and updated env variables respectively. And swagger in Docker started to work even without correct GOPATH\nThank you for solving. \n. ",
    "remster": "here's the start of the spec:\nswagger: \"2.0\"\ninfo:\n    description: \"Documentation for Example Swagger Server.\"\n    version: \"1.0.0\"\n    title: \"Example Swagger Server\"\nschemes:\n- \"http\"\npaths:\n  /{snippetID}/{left}/{right}:\n    get:\n      summary: Get Snippet with snippetID between left and right\n      operationId: getSnippet\n      produces:\n      - \"application/octet-stream\"\n      parameters:\n      - name: snippetID\n        in: path\n        description: \"Snippet ID\". I routinely delete and recreate - i am very sure this aint a leftover. Maybe i should share the whole swagger spec so you can repro:\n```\nswagger: \"2.0\"\ninfo:\n    description: \"Documentation for Example Swagger Server.\"\n    version: \"1.0.0\"\n    title: \"Example Swagger Server\"\nschemes:\n- \"http\"\npaths:\n  /{snippetID}/{left}/{right}:\n    get:\n      summary: Get Snippet with snippetID between left and right\n      operationId: getSnippet\n      produces:\n      - \"application/octet-stream\"\n      parameters:\n      - name: snippetID\n        in: path\n        description: \"Snippet ID\"\n        type: string\n        required: true\n      - name: left\n        in: path\n        description: \"time (in sec since epoch) start\"\n        type: string\n        required: true\n      - name: right\n        in: path\n        description: \"time (in sec since epoch) end\"\n        type: string\n        required: true\n      - name: format\n        in: query\n        description: \"Requested format of the output\"\n        type: string\n        enum: [foo]\n        required: true\n      responses:\n        200:\n          description: \"successful operation\"\n          schema:\n            type: string\n            format: binary\n        404:\n          description: \"No such snippet\"\n        default:\n          description: generic error response\n          schema:\n            $ref: \"#/definitions/Error\"\n    put:\n      summary: The caller declares that it is in posession of a (brand new) snippet and ready to upload\n      operationId: putSnippet\n      produces:\n      - \"application/json\"\n      consumes:\n      - \"application/json\"\n      parameters:\n      - name: snippetID\n        in: path\n        description: \"Snippet ID\"\n        type: string\n        required: true\n      - name: left\n        in: path\n        description: \"time (in sec since epoch) start\"\n        type: string\n        required: true\n      - name: right\n        in: path\n        description: \"time (in sec since epoch) end\"\n        type: string\n        required: true\n      - in: body\n        name: body\n        required: true\n        schema:\n          $ref: \"#/definitions/NewSnippetRequest\"\n      responses:\n        200:\n          description: successful operation\n          schema:\n            $ref: \"#/definitions/NewSnippetResponse\"\n        409:\n          description: \"Snippet already exists\"\n        default:\n          description: generic error response\n          schema:\n            $ref: \"#/definitions/Error\"\ndefinitions:\n  NewSnippetRequest:\n    type: object\n  NewSnippetResponse:\n    type: object\n    required:\n      - welcome\n      - upload_url\n    properties:\n      welcome:\n        type: string\n      upload_url:\n        type: string\n  Error:\n    type: object\n    required:\n      - message\n      - errorID\n    properties:\n      errorID:\n        type: string\n      message:\n        type: string\n```. It is fixed for @remster too. Thank you for the quick action. ",
    "benjamingorman": "Thanks for the response - I'll definitely check out that package.\nIn the meantime I was able to implement what I wanted like this: (see below)\nIf you think this is a reasonable way to do it then I'll submit a PR adding an example to the docs.\n```go\n// LoggingResponseWriter is a wrapper around an http.ResponseWriter which captures the\n// status code written to the response, so that it can be logged.\ntype LoggingResponseWriter struct {\n    wrapped    http.ResponseWriter\n    StatusCode int\n        // Response content could also be captured here, but I was only interested in logging the response status code\n}\nfunc NewLoggingResponseWriter(wrapped http.ResponseWriter) *LoggingResponseWriter {\n    return &LoggingResponseWriter{wrapped: wrapped}\n}\nfunc (lrw *LoggingResponseWriter) Header() http.Header {\n    return lrw.wrapped.Header()\n}\nfunc (lrw *LoggingResponseWriter) Write(content []byte) (int, error) {\n    return lrw.wrapped.Write(content)\n}\nfunc (lrw *LoggingResponseWriter) WriteHeader(statusCode int) {\n    lrw.StatusCode = statusCode\n    lrw.wrapped.WriteHeader(statusCode)\n}\n// responseLoggingMiddleware logs the responses from API endpoints\nfunc responseLoggingMiddleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        w2 := NewLoggingResponseWriter(w)\n        next.ServeHTTP(w2, r)\n        log.Infof(\"%s %s, response %d %s\", r.Method, r.URL.String(), w2.StatusCode, http.StatusText(w2.StatusCode))\n    })\n}\n```. ",
    "vania-pooh": "@fredbi any workarounds for this issue? Could send a PR but don't know whether I need to add more fixtures and how to add them.. ",
    "Equanox": "@fredbi thx . ",
    "Tron2016": "Thanks, it works.. ",
    "vkuptcov": "I've just checked the new package 0.17.2 and it doesn't contain binary. And the package size a bit smaller  than it should be:\n/var/cache/apt/archives# ls -lah swagger_*\n-rw-r--r-- 1 root root  996 \u043e\u043a\u0442 25 05:04 swagger_0.17.2_amd64.deb\n-rw-r--r-- 1 root root 5,2M \u043e\u043a\u0442  7 06:34 swagger_v0.17.0_amd64.deb. I've just checked the package\nhttps://dl.bintray.com/go-swagger/goswagger-debian/swagger_0.17.2_amd64.deb\nThe binary is still missed. And it's the latest package there.. ",
    "vicaire": "Got it, thank you. Is there a way to access the underlying payload/access codes from the client to help with debugging?. Thanks. I tried it out but I don't understand how to get access to the response. \nhttps://golang.org/pkg/net/http/#RoundTripper\nLooking at the RoundTripper interface, my custom implementation would only let me access the request, and would have to produce the response. \nIs there a sample on how to use the RoundTripper to get access to the payload of the response?  \ngo\ntype RoundTripper interface {\n        // RoundTrip executes a single HTTP transaction, returning\n        // a Response for the provided Request.\n        //\n        // RoundTrip should not attempt to interpret the response. In\n        // particular, RoundTrip must return err == nil if it obtained\n        // a response, regardless of the response's HTTP status code.\n        // A non-nil err should be reserved for failure to obtain a\n        // response. Similarly, RoundTrip should not attempt to\n        // handle higher-level protocol details such as redirects,\n        // authentication, or cookies.\n        //\n        // RoundTrip should not modify the request, except for\n        // consuming and closing the Request's Body. RoundTrip may\n        // read fields of the request in a separate goroutine. Callers\n        // should not mutate or reuse the request until the Response's\n        // Body has been closed.\n        //\n        // RoundTrip must always close the body, including on errors,\n        // but depending on the implementation may do so in a separate\n        // goroutine even after RoundTrip returns. This means that\n        // callers wanting to reuse the body for subsequent requests\n        // must arrange to wait for the Close call before doing so.\n        //\n        // The Request's URL and Header fields must be initialized.\n        RoundTrip(*Request) (*Response, error)\n}. Ha, got it. Thank you. . ",
    "jonas27": "Hey sorry for late response. Yes, the projet is under https://github.com/iafoosball/livematches-service including swagger  API and all other things. There is a a endpoint for GET /matches/ which is supposed to return a paged resource. \nThis endpoint returns a json object, but it encodes the & and then the url encodes the escape & again.\nQuerying our server with http://iafoosball.me:9000/matches/?filter=&size=1 should return links with \n\"href\":\"http://[::]:8000/matches/?filter=&sort=endTime&order=DESC&start=36&size=1\",\"rel\":\"last\"\nBut instead returns\n\"href\":\"http://[::]:8000/matches/?filter=\\u0026sort=endTime\\u0026order=DESC\\u0026start=36\\u0026size=1\",\"rel\":\"last\"\n. Thanks for the help!. ",
    "ok11": "Thanks, got it!. Hi, thanks for the quick reply!\nIt works fine in all other cases, e.g. see below:\n```\nimport (\n    \"net/http\"\n\"github.com/go-openapi/errors\"\n\"github.com/go-openapi/runtime/middleware\"\n\nstrfmt \"github.com/go-openapi/strfmt\"\n\n)\n// NewDeleteUserParams creates a new DeleteUserParams object\n// no default values defined in spec.\nfunc NewDeleteUserParams() DeleteUserParams {\nreturn DeleteUserParams{}\n\n}\n``\nThe file has been generated in the same generation approach.strfmtis added ingo.modand works fine otherwise. So far only URI makes problems, as far as I can conclude.. ... and commenting outformat: uriworks around the problem (sincestrfmtis not involved anymore) . Ok, sorry about exposing only a fragment. Let me attach the entire spec and the commad line options. The only thing is that I heavily modularize the API definition and hence use$ref` intensively, so it is not a one file, but a tree. I created a gist, which flattened a bit the structure, but still contains all the important parts: gist\nThe command line is:\nswagger generate server --spec=pkg/api/rest/def/api.yaml --model-package=dto --template=stratoscale --template-dir=pkg/api/rest/templates --name=UserService --target=pkg/api/rest/gen --exclude-main. Yes, and format:uri is currently commented out in the gist as I just wanted to get it compiled. Yes, stratoscale is the only solution to provide a right separation of concerns by introducing interfaces. The one off generated *config.go is a pain in many senses, and stratoscale does it just right. Unfortunately their templates contain a bug (#1765), so I was forced to modify it to come over (only the configureapi.gotmpl, so it does not influence the operations part).\nAnyway, a good point, let me try with standard options, maybe it will give me a hint. Thanks!. BTW, is reporting a bug on stratoscale in your repo a correct approach or I should rather go via theirs? Not sure what is your collaboration process for templates contribution... Ok, I tried to reduce the scope and created a test repo here.\nNow it is very simple and primitive, no external references in the API definition, no custom templates, nothing. You can also inspect go.mod to make sure that strfmt is in there.\nThe swagger command to generate is in the swaggergen.sh at the root. To mention it here, it is \nswagger generate server --spec=pkg/api/api.yaml --name=FooService --target=pkg/gen\nThe generated files are also checked in.\nAnd as you can see in pkg/gen/restapi/operations/baz/register_foo_responses.go the package strfmt is not imported, but used in strfmt.URI. \nI think I cannot be more concrete...\nThanks in advance!. Hey @fredbi,  sorry, didn't give it a try -- have been completely buried at work since a couple of weeks. But thanks for reminding, will do it tonight. . Tried 0.17.2 -- no luck. But I also did what I should have done when you said you use goimports. So I just rangoimportson the generated code and it failed to add strfmt as well. In other words, not an issue of go-swagger. May be a sort of maturity issue of goimports in conjunction with go mod. In any case, if you prefer to close the issue, please do so. If you keep it open for tracking purposes, also fine with me, will try to investigate further and document the results here.. ... and thanks for keeping broken windows fixed! ;). To your point 1: You mean in a swagger definition? If yes, you may want to look here, it's basically only post. Or you mean rather the runtime stuff with JSON marshalling/encoding?. Sounds like the project must be under GOPATH for go-swagger to work, even with go modules. Is it correct? If yes, just wondering if you guys plan to change it. At the end the entire story of go mod is gonna eliminate the need of the GOPATHnonsense.. I quickly went through swaggo. One difference is obvious -- swaggo seems to support only the \"implementation first\" path (generation of Open API documentation out of annotated source code). go-swagger supports as well (and I must say supports pretty well as much as I have tried it out.. up to just a few small deficiencies) the \"API first\" path (generation of implementation out of Open API definition).\n. Thanks! Apparently I overlooked that in scanner.. @ssivachidambaram is your question how to include gorm.Model into the generated models? If yes, the short answer is: don't do it. Representations for REST exposure and for persistence may be very different, in general case it is always better to decouple them and implement mapping. . Cool, thanks! The way I found is setting a new value to errors.DefaultHTTPCode. Is it a correct way or there are better options? . ",
    "SArtemJ": "\nMmhhh. Tried to play a bit with this spec.\nProblem lays with circular ref formed by several files. We still have a problem in go-openapi/spec with such circulars.\nTry defining the cycle in one single file.\n\nIf i describe \"Patient\" object in \"definitions\" zone then i get error \nis invalid against swagger specification 2.0. see errors :\n- definitions.Patient.schema in body is a forbidden property\nBecause one schema using in body and in responses\nSo in Identifier.yaml i set the value for reference type like full description object\ntype: object\ntitle: \"Identifier\"\ndescription: \"v3.1.0-12545\"\nproperties:\n  use:\n    type: string\n    example: \"usual\"\n    enum:\n    - \"usual\"\n    - \"official\"\n    - \"temp\"\n    - \"secondary\"\n    - \"old\"\n  type:\n    description: \"Identifier type\"\n    allOf:\n      - $ref: 'CodeableConcept.yaml'\n  system:\n    type: string\n    example: \"urn:oid:1.2.36.146.595.217.0.1\"\n  value:\n    description: \"Some unique value\"\n    type: string\n  period:\n    description: \"Time\"\n    allOf:\n      - $ref : 'Period.yaml'\n  assigner:\n    description: \"Organization\"\n    type: object\n    title: \"reference\"\n    description: \"v3.1.0-12545\"\n    properties:\n          reference:\n            description: \"Literal reference, Relative, internal or absolute URL\"\n            type: string\n            example: \"literal reference\"\n          identifier:\n            description: \"Logical reference, when literal reference is not known\"\n            type: array\n            items:\n              allOf:\n              - $ref: 'Identifier.yaml'\n          display:\n            type: string\n            description: \"Text alternative for the resource\"\nrequired:\n  - use\nBut when i'm trying to generate - return's me same runtime error. ",
    "blancharda": "I am experiencing the same issue with my own specs.\nThe problem seems tied to the version update from v0.17.0 -> v0.17.1.. I can't speak for @remster - but it looks like my particular error cases have been resolved :+1:. \nThanks!. ",
    "seblegall": "Hi,\nI get a similar issue. Here is my folders : \nswagger.json\n|\n- Authent\n       |\n       - authent.json\n- Common\n      |\n      - errors.json\nIn swagger.json i have a ref to Authent/authent.json.\nIn Authent/authent.json i have a ref to Common/errors.json\nWhen I run swagger validate everything is ok.\nBut when I run swagger serve here is what I have : \n\nAm I doing something wrong? Or is it related to this issue?\n. Oh ! thx for the tips !. ",
    "riaan53": "@casualjim Thank you! :). ",
    "liyuankui": "@casualjim tests added, thanks a lot for the check. ",
    "masonchu": "my workaround\nGO111MODULE=on go mod vendor\nGO111MODULE=off swagger generate spec -o swagger.json. ",
    "mcphailtom": "Please do, I'd certainly be interested in having a look. ",
    "KantarBruceAdams": "Cross posted to swago as https://github.com/swaggo/swag/issues/247. Where is it used in kubernetes and docker?\nI can only see go-restful and go-restful-swagger12 in https://github.com/kubernetes/kubernetes/blob/master/Godeps/Godeps.json ?\ngo-restful seems to be standalone. no modules or vendoring required.\nAnd there is nothing swagger related in docker.ce\nor docker.app\nWhat am I missing here?. I noted that in my original post. In this instance I am looking to select one or the other as a documentation tool. The syntax of comments is completely different but I don't know what the feature overlap is.\nIf I go via issues here I get 28 Jan 2015 for go-swagger and 18 Jun 2017 for Swaggo for the first issue so go-swagger appears to have come first.\n(If I go via the git history swaggo seems to be from 2017 and go-swagger from April 2018 - either I made a mistake or there has been some rebasing).\nAnother kind of thing that might help me is to know if swaggo was created independently, or because go-swagger didn't do documentation yet or out of some dissatisfaction with it.\n. ",
    "leon-barrett": "When I looked at swaggo, I was disappointed by their multiline description support. (It's listed as unsupported in the docs, but it actually glues together lines with a <br>, which is generally not what you want for writing markdown documentation.)\nOtherwise I agree that swaggo's @ annotations look easier to read, instead of learning by trial and error which parts of my godoc comments will be titles. But it's convenient to me that I can include an input yaml file with go-swagger--that makes it easier to write long markdown documentation.\nAnyway, that's why I chose go-swagger: multiline description support and input yaml.\nP.S. I see an initial go-swagger commit in 2014. https://github.com/go-swagger/go-swagger/commit/ede74f951ca20fe3af0a2e8078d86cdb8eaef2e3. The things I was most surprised by were:\n The first line of a struct comment becomes not the docstring but the object's title, which is its label in the Models section of the swagger docs. That is somewhat incompatible with the recommended GoDoc format--you mustn't type X is a ... because now \"X is a ...\" will be its title, not its name and description.\n Comments on fields that are objects are ignored--only the comment on the struct is used. This might be an openapi limitation, since it's weird to have docs in 2 places I guess, but it felt weird to have some of my documentation ignored based on field type.\nI don't know exactly what documentation changes are necessary; this is a place where I explored rather than poring through the documentation, and I mostly wish it behaved more intuitively. But I understand that it may be impossible to make backwards-compatible changes to these behaviors. Sorry I don't have more concrete recommendations.. @casualjim Thanks. Is there anything else I need to do? (I can't merge. Do I need to figure out commit signing first?). sorry, accidentally made spaces instead of a tab. (Elsewhere in the file spaces are used, so it confused my editor.) Fixed.. ",
    "orisano": "all tests passed. sorry... my optimization was too wrong.\nTry use https://github.com/mohae/deepcopy.\nsorry. ",
    "j0hnwhyte": "Sure, I use a script to try to decouple stuff from the source.\n```bash\n!/usr/bin/env bash\nSCRIPTPATH=\"$( cd \"$(dirname \"$0\")\" ; pwd -P )\"\nAPIPATH=\"../../src/admin-api\"\nINITFILE=\"admin-api.go\"\ncd \"$SCRIPTPATH\"\ncd admin-api\nswag init -g \"$APIPATH/$INITFILE\"  -d \"$APIPATH\" -s swagger/ || exit 1\nmv \"$APIPATH/docs/docs.go\" docs/docs.go\nrmdir \"$APIPATH/docs/\"\ngo build -o bin/admin-api-docs || exit 1\n```. I'm sorry, I'll delete this. (guess what, I can't delete this issue. Feel free to do it, thanks). ",
    "ssivachidambaram": "If i place the swagger.yml in /home/ubuntu/go/src path and while run the below command, files are created.\n~/go/src$ swagger generate server -f swagger.yml -A Todo\nBut i cannot able to move the created folders to root folder like /usr/share/nginx/html?\nAlso at last, we got the below message too,\n```\nFor this generation to compile you need to have some packages in your GOPATH:\n* github.com/go-openapi/runtime\n* github.com/jessevdk/go-flags\n\nYou can get these now with: go get -u -f ./...\n```\nBut i have added those packages using go get command.. @fredbi Do you have any sample examples integrated GORM with go-swagger? \nAlso in all model files it was mentioned as // Code generated by go-swagger; DO NOT EDIT.\nSo if we edit the model file then we cannot able to run/generate server code again. Right?. @fredbi Sorry for the delayed response. I will check and comment if i have any questions.. @fredbi Ok. I have tried but its not working. I have attached the created json file in original description.. ",
    "rrjanbiah": "@ok11 Perhaps in the Go ecosystem, model is synonymous with schema...\nDo you have any sample on how to plug GORM to the generated code? \nIf database persistence is not the objective of the library, how others may be using it in their projects? (To create mock ?) In other words, what is the use case of this library (without database persistence)?\n(Apologies for jumping here. If there's any appropriate forum for it, kindly guide). @fredbi @casualjim \nThank you so much for your quick reply. \nI believe, a kit like apig around this library especially for Gin and GORM can become a huge hit, for people coming from Rails background. Will see what I can do here. \nThanks again. ",
    "michaelf-stratoscale": "@maxatome i don't understand where are you going to use this api, this file is auto generated and shouldn't be changed, so when you return it to Handler you are not using it.. @maxatome please make sure it don't break existing functionality. @fredbi what do you mean here? where is it configured, or how can i override it in the template itself?. @fredbi what do you mean here?. The function switch on opts.Template but i don't mind to change it. @fredbi but if we override a default template then in stratoscale case we must set this flag, i don't have a way to tell the user that he must set this flag if he is using stratoscale template, and i don't want to set it by default because i override one of the default templates, this is why we set it here and use this flag to set SkipExists\nDo you have other way to solve it?. It looks like a good solution, the only problem is that in the way it works right now, when i load a configuration file it does not append or override only the things that i set, it completely erase the defaults and uses only what is written in the configuration file.\nDo you know of  way to set only the things that i write and the rest will be as the default? . @fredbi as we spoke on slack, contribOptionsOverride is used to override the default flags. this function is called only from one place and allow the user to override with his configuration file. is this still relevant?. ",
    "KnutAtteslander": "Hi sure;\nI'd like to log the response body and idealy the request body also in a seperate log file.\nIn #1470 it is described how to do this in case of an error, but i'd like to log the response(/request) for every post.\n. Nice thx! I'll try this.. OK, i'll see into this if needed.\nBut if i can just log the debug messages for every post (idealy in a separate file per post -> new logger per post) that should suffice.\nI just don't want one huge logfile -> a post can be up to 1mb and there are 3k-6k post per day. ",
    "nickform": "Thanks for the response @casualjim.\nIt seems like the call to goimports is being made per generated file (or something approximating that cardinality). Could this not be done in a single step at the end?. Thanks for the responses.\nSince we're building in docker, we  have been able to avoid this problem by mounting the source directory into $GOPATH/src/<module-name> inside the container and then forcing modules off with GO111MODULE=off. This gives the correct local imports and the better performance. This workaround won't be available to everyone but I'm happy for this issue to be closed.\nWhile I'm writing, thanks to all those who have contributed to the development and maintenance of this tool - it has saved countless hours of typing and has proved flexible enough for us to always do what we need to.. ",
    "d7561985": "i also think about it. i'll do it on this week.. @casualjim done.. already exist @fredbi  but not documented in https://goswagger.io/use/spec/model.html?q=swagger%3Afile\nHere is way to set file type:\n// swagger:parameters myRoute\ntype ParameterRequest struct {\n    // in: formData\n    // swagger:file\n    File interface{}\n}\nNo matter what kind of var use put: required in:formData and actually swagger:file MyFileName . ",
    "cswank": "Indeed that fixed it.  Thanks!. ",
    "alydnh": "Dear friend,\nwell noted with thanks.\nI will have another try and keep in touch with you if any further questions.\nthank you very much again.. ",
    "danikarik": "@casualjim thank you, it helped!. ",
    "erikh": "is pointer access/nullable support in this patch? I am beating my head against the fixed models atm not doing this.. ",
    "leslie-qiwa": "Share the screen shot of the error.\n\n. ",
    "saromanov": "\n@saromanov could you please PGP-sign your commit?\n\n@fredbi Signed it. ",
    "cnrudd": "Thanks for explaining.  I'm new to Go and to this project.  Once I am more familiar with both, I may volunteer to update the docs there.  But at the moment updates from me would likely contain new errors.. ",
    "Fyb3roptik": "Currently it is not picking up any of my Route or Operation annotations. Just the main one I have in the init.go file. I am using Revel. my routes file is a .conf file and uses # for comments instead of // not sure if that affects anything. I am attempting to integrate it, thats why I am here. I added the swagger:route stuff and it is not picking up paths. Ok looks like I had to put this inside of my controllers folder inside of app.go. It is now working with Revel. ",
    "chuantianc": "thank you so much!. ",
    "0xfede7c8": "Great to have an answer to this! Thanks for the effort.\nAs a workaround I changed from\n```golang\ntype PostFileParams struct {\n// HTTP Request Object\nHTTPRequest *http.Request `json:\"-\"`\n\n/*Binary data of the file sent.\n  In: formData\n*/\nFileName io.ReadCloser\n\n}\n```\nTo:\n```golang\ntype PostFileParams struct {\n// HTTP Request Object\nHTTPRequest *http.Request `json:\"-\"`\n\n/*Binary data of the file sent.\n  In: formData\n*/\nFileName *io.ReadCloser //<----------------------------change\n\n}\n```\nIs this fix ok? It builds but I'm not sure if it will break sometime.\nAlso, the bad thing is that I have to do this every time I generate the server.\nLet me know if you need some help.\n. It's good to know, as I'm new to OpenAPI and Swagger.\nThe confusing thing to me is that that file passes the static check stage. \nEven the ones from the swagger.io. Maybe a bug there? Or it's a \"shouldn't but can\" do thing?. Ok I understand now. \nIn my case the confusion came trying to translate some openAPI 3 spec into swagger 2 format. It seems that openAPI 3 doesn't have the file type anymore. It has string binary.\nFeel free to close if needed.. ",
    "Liooo": "@casualjim \nseems like got bit more to do, hold on a sec plz. @casualjim plz check. ",
    "jankeromnes": "Note: It's also possible to configure Gitpod to automatically open a particular file (e.g. doc.go?) or to run a given command on startup (e.g. to build & run go-swagger, or simply to auto-run swagger -h) with a config file like this:\nyaml\ntasks:\n- command: swagger validate https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json. ",
    "drorg-stratoscale": "I see... all tags before 17 are without 'v', and all tags from 17 with 'v' :-)\nThanks.. ",
    "tandr": "Thank you for the quick run down. I did not know about preexisting option that was removed, but since I need that functionality (otherwise I wouldn't bother :) ), I will just keep it for myself.\nIdeally I would love an option to generate just \"plain old Go struct\" + maybe serialization code without  too many dependencies to pull. With this change as it is I can manually remove remaining validation code (couple lines, but I think I can modify tmpl to do it automatically if skip-validators supplied) and reduce dependencies (for example, drop strfmt) even more. \n. \"Barebone models\" is a very good definition of what I actually needed, thank you.\nIf I may ask - what are these \"other use-cases\" you have mentioned?. ",
    "0xmohit": "swagger-validator doesn't complain of any errors in the spec.. The spec is invalid; closing this.. ",
    "Julien2313": "Marvellous, it's working fine ! Thanks for the link too.. ",
    "lukekhamilton": "Also this is a binary distribution of swagger via homebrew. \nlrwxr-xr-x 1 metta 39 Feb 13 09:55 /usr/local/bin/swagger -> ../Cellar/go-swagger/0.18.0/bin/swagger*\nbrew info go-swagger\ngo-swagger/go-swagger/go-swagger: stable 0.18.0\nToolkit to work with swagger for golang\nhttps://github.com/go-swagger/go-swagger\n/usr/local/Cellar/go-swagger/0.18.0 (3 files, 16MB) *\n  Built from source on 2019-02-13 at 09:55:21\nFrom: https://github.com/go-swagger/homebrew-go-swagger/blob/master/go-swagger.rb\n==> Options\n--with-goswagger\n    Names the binary goswagger instead of swagger\n. just tested the generate process within the $GOPATH and it works. However according to the doco it should work with go modules too. So I still think this is a bug. At least with a workaround. . Not 100% sure what you mean by arbitrary module location? Maybe you can tell me how I could get this to working with with go modules? This would be really appreciated. . Hey guys, \nAs of: go version go1.12 darwin/amd64\nThis is now working for me with go modules. Woohoo . ",
    "pkosiec": "You're right, my bad. Thanks for response!. ",
    "llorllale": "@fredbi doesn't work either.\nHere are test specs (only WriteRequest ends up missing):\nswagger.yaml\nyaml\nswagger: '2.0'\ninfo:\n  version: 0.1.0\n  title: test\n  description: test\npaths:\n  /collections:\n    post:\n      produces:\n        - application/json\n      description: 'test'\n      parameters:\n        - name: serverRequest\n          in: body\n          required: true\n          schema:\n            $ref: 'collections.yaml#/BaseRequest'\n      responses:\n        '200':\n          description: 'test'\n          schema:\n            $ref: 'collections.yaml#/Response'\ncollections.yaml\nyaml\nBaseRequest:\n  type: object\n  discriminator: '@type'\n  properties:\n    '@type':\n       type: string\nWriteRequest:\n  type: object\n  allOf:\n    - $ref: '#/BaseRequest'\n    - properties:\n        test:\n          type: string\nResponse:\n  type: object\n  properties:\n    test:\n      type: string. @fredbi yup, I was afraid that'd be the assessment.\nWhat should we do with this issue then? Is it a \"won't fix\"? Do we have a list of known issues somewhere?. ",
    "vtolstov": "i'm join full specs, for issue i provide only it parts. hm, x-stream-definitions added by grpc-gateway protoc-gen-swagger tool\n// http://swagger.io/specification/#swaggerObject                                                                          \ntype swaggerObject struct {                                                                                                \n  Swagger             string                              `json:\"swagger\"`                                                 \n  Info                swaggerInfoObject                   `json:\"info\"`                                                    \n  Host                string                              `json:\"host,omitempty\"`                                          \n  BasePath            string                              `json:\"basePath,omitempty\"`                                      \n  Schemes             []string                            `json:\"schemes\"`                                                 \n  Consumes            []string                            `json:\"consumes\"`                                                \n  Produces            []string                            `json:\"produces\"`                                                \n  Paths               swaggerPathsObject                  `json:\"paths\"`                                                   \n  Definitions         swaggerDefinitionsObject            `json:\"definitions\"`                                             \n  StreamDefinitions   swaggerDefinitionsObject            `json:\"x-stream-definitions,omitempty\"`                          \n  SecurityDefinitions swaggerSecurityDefinitionsObject    `json:\"securityDefinitions,omitempty\"`                           \n  Security            []swaggerSecurityRequirementObject  `json:\"security,omitempty\"`                                      \n  ExternalDocs        *swaggerExternalDocumentationObject `json:\"externalDocs,omitempty\"`                                  \n}. do you have plan how to fix this issue ?=). ",
    "zhiqiangxu": "@casualjim ,what if the two parameters are in: query ?\nActually I found that this will not work(when swagger:parameters and swagger:model are in the same file):\n```golang\ntype (\n    // FooInput for input\n    // swagger:parameters FooInput\n    FooInput struct {\n        // in: query\n        App string\n        // in: query\n        UID string\n    }\n// FooOutput for output\n// swagger:model FooOutput\nFooOutput struct {\n    Addr string\n}\n\n)\n```\nBut if I move \ngolang\n// FooInput for input\n// swagger:parameters FooInput\ntype FooInput struct {\n    // in: query\n    App string\n    // in: query\n    UID string\n}\nto another file, the spec generated is correct.\nSeems go-swagger doesn't work for grouped type type ( ... )?\nI've opened a new issue 1891. ",
    "apuigsech": "There are some Unofficial Status code that are up to 512; https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#5xx_Server_errors\nFor instance the ones used by Cloudflare; https://support.cloudflare.com/hc/en-us/sections/200820298-Error-Pages\nI would recommend to do not limit that value to strict specifications.. ",
    "coopercc": "Currently I have it referencing github.secureserver.net/... which from my understanding is a full package path.  To clarify what is happening a bit, one of the models that gets built in this api references a definition that imports it's model. That model, when built, uses the correct alias but does not add the import statement properly. Both repos are private Org github repos. Not sure if that changes anything. Huh. Do the import statements get added or discarded differently for the models and the operations? The import statement and alias are added correctly to all the operations just not this model that uses it.. ",
    "akashdobaria": "As mentioned by @casualjim on the slack channel. Issue might be at: https://github.com/go-openapi/runtime/blob/25a2b415dd47dbf71343b9da8e2be9c4a7d6f300/client/runtime.go#L343-L345. ",
    "houndci-bot": "exported method Server.SetAPI should have comment or be unexported\n. exported method Server.SetAPI should have comment or be unexported\n. exported method Server.SetAPI should have comment or be unexported\n. exported method Server.SetAPI should have comment or be unexported\n. exported method Server.SetAPI should have comment or be unexported\n. exported method Server.SetAPI should have comment or be unexported\n. comment on exported function MaximumUin should be of the form \"MaximumUin ...\"\n. comment on exported function MaximumInt should be of the form \"MaximumInt ...\"\n. method parameter xLastTaskId should be xLastTaskID\n. exported method Spec.RequiredSecuritySchemes should have comment or be unexported\n. exported method Spec.RequiredProduces should have comment or be unexported\n. exported method Spec.RequiredConsumes should have comment or be unexported\n. exported method Spec.OperationIDs should have comment or be unexported\n. exported method Spec.Operations should have comment or be unexported\n. exported method Spec.OperationFor should have comment or be unexported\n. exported method Spec.OperationForName should have comment or be unexported\n. exported method Spec.ParamsFor should have comment or be unexported\n. comment on exported type Spec should be of the form \"Spec ...\" (with optional leading article)\n. exported function New should have comment or be unexported\n. exported method Item.Clone should have comment or be unexported\n. exported method Item.Clone should have comment or be unexported\n. exported method Item.PatchWith should have comment or be unexported\n. exported method Item.PatchWith should have comment or be unexported\n. exported method Item.UnmarshalJSON should have comment or be unexported\n. exported method Item.UnmarshalJSON should have comment or be unexported\n. exported method Item.UnmarshalEasyJSON should have comment or be unexported\n. exported method Item.UnmarshalEasyJSON should have comment or be unexported\n. exported method Item.MarshalJSON should have comment or be unexported\n. exported method Item.MarshalJSON should have comment or be unexported\n. exported method Item.MarshalEasyJSON should have comment or be unexported\n. exported method Item.MarshalEasyJSON should have comment or be unexported\n. exported method Item.SetID should have comment or be unexported\n. exported method Item.SetID should have comment or be unexported\n. exported method Item.IsIDSet should have comment or be unexported\n. exported method Item.IsIDSet should have comment or be unexported\n. exported method Item.FlagIDSet should have comment or be unexported\n. exported method Item.FlagIDSet should have comment or be unexported\n. exported method Item.GetDescriptionPtr should have comment or be unexported\n. exported method Item.GetDescriptionPtr should have comment or be unexported\n. exported method Item.GetDescription should have comment or be unexported\n. exported method Item.GetDescription should have comment or be unexported\n. exported method Item.ClearDescription should have comment or be unexported\n. exported method Item.ClearDescription should have comment or be unexported\n. exported method Item.SetDescription should have comment or be unexported\n. exported method Item.SetDescription should have comment or be unexported\n. exported method Item.HasDescriptionValue should have comment or be unexported\n. exported method Item.HasDescriptionValue should have comment or be unexported\n. exported method Item.IsDescriptionSet should have comment or be unexported\n. exported method Item.IsDescriptionSet should have comment or be unexported\n. exported method Item.IsDescriptionNil should have comment or be unexported\n. exported method Item.IsDescriptionNil should have comment or be unexported\n. don't use underscores in Go names; struct field __nulls should be _Nulls\n. don't use underscores in Go names; struct field __setValues should be _SetValues\n. exported function NewItem should have comment or be unexported\n. var gRpcClientImplTemplate should be gRPCClientImplTemplate\n. var gRpcServerImplTemplate should be gRPCServerImplTemplate\n. var gRpcDefTemplate should be gRPCDefTemplate\n. exported function NewClient should have comment or be unexported\n. exported function NewClient should have comment or be unexported\n. should omit type int32 from declaration of var pageSizeDefault; it will be inferred from the right-hand side\n. comment on exported method Server.Fatalf should be of the form \"Fatalf ...\"\n. comment on exported method Server.Fatalf should be of the form \"Fatalf ...\"\n. comment on exported method Server.Fatalf should be of the form \"Fatalf ...\"\n. exported method GenOpts.SpecPath should have comment or be unexported\n. exported method GenOpts.TargetPath should have comment or be unexported\n. comment on exported method Server.Fatalf should be of the form \"Fatalf ...\"\n. comment on exported method Server.Fatalf should be of the form \"Fatalf ...\"\n. should omit type int32 from declaration of var pageSizeDefault; it will be inferred from the right-hand side\n. comment on exported method Server.Fatalf should be of the form \"Fatalf ...\"\n. method parameter sinceId should be sinceID\n. comment on exported type SomeArrayStringMap should be of the form \"SomeArrayStringMap ...\" (with optional leading article)\n. don't use underscores in Go names; var _templatesSwagger_json_embedGotmpl should be _templatesSwaggerJSONEmbedGotmpl\n. don't use underscores in Go names; var _templatesSwagger_json_embedGotmpl should be _templatesSwaggerJSONEmbedGotmpl\n. exported method UpdateOneParams.SetContext should have comment or be unexported\n. exported method UpdateOneParams.WithContext should have comment or be unexported\n. exported method UpdateOneParams.SetTimeout should have comment or be unexported\n. exported method UpdateOneParams.WithTimeout should have comment or be unexported\n. exported method TodoListAPI.Context should have comment or be unexported\n. exported method TodoListAPI.Context should have comment or be unexported\n. exported method TodoListAPI.Context should have comment or be unexported\n. exported method TodoListAPI.Context should have comment or be unexported\n. exported method PetstoreAPI.Context should have comment or be unexported\n. exported method CreateTaskParams.SetContext should have comment or be unexported\n. exported method CreateTaskParams.WithContext should have comment or be unexported\n. exported method CreateTaskParams.SetTimeout should have comment or be unexported\n. exported method CreateTaskParams.WithTimeout should have comment or be unexported\n. exported method FindParams.SetContext should have comment or be unexported\n. exported method FindParams.WithContext should have comment or be unexported\n. exported method FindParams.SetTimeout should have comment or be unexported\n. should omit type int32 from declaration of var pageSizeDefault; it will be inferred from the right-hand side\n. should omit type int32 from declaration of var pageSizeDefault; it will be inferred from the right-hand side\n. exported function UpperSnakeCase should have comment or be unexported\n. exported const TaskCardStatusOpen should have comment (or a comment on this block) or be unexported\n. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block. comment on exported type SimpleOnes should be of the form \"SimpleOnes ...\" (with optional leading article). comment on exported type Cars should be of the form \"Cars ...\" (with optional leading article). exported const DescriptionTag should have comment or be unexported. exported const BodyTag should have comment or be unexported. exported const ResponseTag should have comment or be unexported. don't use underscores in Go names; var _templatesSwagger_json_embedGotmpl should be _templatesSwaggerJSONEmbedGotmpl. comment on exported method MixinSpec.Execute should be of the form \"Execute ...\". exported type MixinSpec should have comment or be unexported. exported method Item.UnmarshalBinary should have comment or be unexported. exported method Item.MarshalBinary should have comment or be unexported. exported method Error.UnmarshalBinary should have comment or be unexported. exported method Error.MarshalBinary should have comment or be unexported. exported method Item.UnmarshalBinary should have comment or be unexported. exported method Item.MarshalBinary should have comment or be unexported. exported method Error.UnmarshalBinary should have comment or be unexported. exported method Error.MarshalBinary should have comment or be unexported. exported method Item.UnmarshalBinary should have comment or be unexported. exported method Item.MarshalBinary should have comment or be unexported. exported method Error.UnmarshalBinary should have comment or be unexported. exported method Error.MarshalBinary should have comment or be unexported. exported method Item.UnmarshalBinary should have comment or be unexported. exported method Item.MarshalBinary should have comment or be unexported. exported method Error.UnmarshalBinary should have comment or be unexported. exported method Error.MarshalBinary should have comment or be unexported. exported function AddFile should have comment or be unexported. if block ends with a return statement, so drop this else and outdent its block. if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary). exported type GetLoginOKBody should have comment or be unexported. exported type GetAuthCallbackOKBody should have comment or be unexported. a blank import should be only in a main or test package, or have a comment justifying it. exported type SocialID should have comment or be unexported. exported type Principal should have comment or be unexported. exported type Error should have comment or be unexported. exported type Customer should have comment or be unexported. exported type FindTodosOKBody should have comment or be unexported. exported type FindTodosOKBody should have comment or be unexported. exported type FindTodosOKBody should have comment or be unexported. exported type FindOKBody should have comment or be unexported. exported type MilestoneStats should have comment or be unexported. exported type TaskAllOf1 should have comment or be unexported. exported type TaskAllOf1Attachments should have comment or be unexported. exported type TaskAllOf1AttachmentsAdditionalProperties should have comment or be unexported. exported type TaskAllOf1Comments should have comment or be unexported. exported type ValidationErrorAllOf1 should have comment or be unexported. exported type ListTasksOKBody should have comment or be unexported. exported type GetTaskCommentsOKBody should have comment or be unexported. exported type AddCommentToTaskParamsBody should have comment or be unexported. exported type GetLoginOKBody should have comment or be unexported. exported type GetAuthCallbackOKBody should have comment or be unexported. exported type FindPetsByTagsOKBody should have comment or be unexported. error strings should not end with punctuation. error strings should not end with punctuation. should omit type string from declaration of var expected; it will be inferred from the right-hand side. don't use underscores in Go names; var _templatesSwagger_json_embedGotmpl should be _templatesSwaggerJSONEmbedGotmpl. exported method LanguageOpts.BaseImport should have comment or be unexported. exported var FlatSwaggerJSON should have its own declaration. exported var FlatSwaggerJSON should have its own declaration. exported var FlatSwaggerJSON should have its own declaration. exported var FlatSwaggerJSON should have its own declaration. exported var FlatSwaggerJSON should have its own declaration. exported var FlatSwaggerJSON should have its own declaration. exported var FlatSwaggerJSON should have its own declaration. exported var FlatSwaggerJSON should have its own declaration. exported var FlatSwaggerJSON should have its own declaration. exported var FlatSwaggerJSON should have its own declaration. don't use underscores in Go names; var _templatesSwagger_json_embedGotmpl should be _templatesSwaggerJSONEmbedGotmpl. exported const ParamDescriptionKey should have comment (or a comment on this block) or be unexported. should omit type map[string]string from declaration of var extraData; it will be inferred from the right-hand side. comment on exported const TypeBool should be of the form \"TypeBool ...\". comment on exported type JSONString should be of the form \"JSONString ...\" (with optional leading article). ",
    "PaulCapestany": "Oops, didn't notice this one, my bad!. ",
    "hmahmood": "modelsPackage is actually not used anywhere, so I took it out.. ",
    "golangci": "declaration of \"assert\" shadows declaration at generator/parameter_test.go:29. declaration of \"assert\" shadows declaration at generator/parameter_test.go:29. declaration of \"assert\" shadows declaration at generator/parameter_test.go:29. 2313-2340 lines are duplicate of generator/parameter_test.go:2962-2989. 2962-2989 lines are duplicate of generator/parameter_test.go:3801-3828. 3801-3828 lines are duplicate of generator/parameter_test.go:2055-2082. cyclomatic complexity 22 of func (*schemaGenContext).buildMapOfNullable is high (> 10). cyclomatic complexity 17 of func (*codeGenOpBuilder).MakeBodyParameterItemsAndMaps is high (> 10). cyclomatic complexity 15 of func (*codeGenOpBuilder).MakeBodyParameter is high (> 10). redundant return statement. expected declaration, found 'package' (and 4 more errors). undeclared name: s. undeclared name: log. File is not gofmt-ed with -s. File is not gofmt-ed with -s. 562-585 lines are duplicate of generator/parameter_test.go:1201-1224. 418-465 lines are duplicate of generator/operation_test.go:368-415. 1-54 lines are duplicate of cmd/swagger/commands/flatten_test.go:1-55. 1-55 lines are duplicate of cmd/swagger/commands/expand_test.go:1-54. File is not gofmt-ed with -s. File is not gofmt-ed with -s. string nowhere has 2 occurrences, make it a constant. File is not gofmt-ed with -s. too few arguments in call to assertParams. line is 147 characters. line is 151 characters. line is 129 characters. line is 131 characters. line is 153 characters. line is 135 characters. line is 147 characters. line is 161 characters. line is 165 characters. line is 155 characters. line is 156 characters. line is 127 characters. line is 150 characters. line is 157 characters. line is 166 characters. line is 126 characters. line is 168 characters. github.com/go-swagger/go-swagger/scan.packageFilter composite literal uses unkeyed fields. github.com/go-swagger/go-swagger/scan.packageFilter composite literal uses unkeyed fields. github.com/go-swagger/go-swagger/scan.packageFilter composite literal uses unkeyed fields. line is 124 characters. line is 132 characters. line is 128 characters. line is 139 characters. Error return value of flushed.Read is not checked. Error return value of flushed.Read is not checked. agressive is a misspelling of aggressive. this value of err is never used. const xOrder is unused. argument err is overwritten before first use. line is 141 characters. line is 128 characters. line is 123 characters. line is 131 characters. line is 134 characters. line is 148 characters. line is 166 characters. line is 171 characters. Error return value of templates.LoadContrib is not checked. Error return value of templates.LoadContrib is not checked. expected '}', found 'IDENT' generator (and 1 more errors). 2440-2463 lines are duplicate of generator/model_test.go:2192-2215. error strings should not be capitalized or end with punctuation or a newline. string ../fixtures/petstores/petstore.json has 2 occurrences, make it a constant. string ../fixtures/bugs/825/swagger.yml has 2 occurrences, make it a constant. const any is unused. ",
    "jirfag": "Yes, it is. Golangci lint uses forked maligned to print suggestions. ",
    "golangcibot": "if block ends with a return statement, so drop this else and outdent its block. File is not gofmt-ed with -s. bookings is unused. bookings is unused. bookings is unused. bookings is unused. G104: Errors unhandled.. should use 'return ' instead of 'if  { return  }; return '. Error return value of os.Chdir is not checked. Error return value of os.Chdir is not checked. G104: Errors unhandled.. G204: Subprocess launching should be audited. G104: Errors unhandled.. G104: Errors unhandled.. G104: Errors unhandled.. 2484-2505 lines are duplicate of generator/model_test.go:2414-2435. naked return in func ResolveSchema with 100 lines of code. printf-style function with dynamic first argument and no further arguments should use print-style function instead. 461-478 lines are duplicate of generator/shared_test.go:480-497. 480-497 lines are duplicate of generator/shared_test.go:461-478. string operations has 2 occurrences, make it a constant. string client has 2 occurrences, make it a constant. string ../fixtures/petstores/petstore.json has 2 occurrences, make it a constant. string restapi has 2 occurrences, make it a constant. string models has 4 occurrences, make it a constant. Error return value of s.getOpts is not checked. 451-470 lines are duplicate of generator/server_test.go:168-187 (from dupl). string () has 3 occurrences, make it a constant (from goconst). missing constant value (from typecheck). error strings should not be capitalized or end with punctuation or a newline (from golint). error strings should not be capitalized or end with punctuation or a newline (from golint). File is not gofmt-ed with -s (from gofmt). a blank import should be only in a main or test package, or have a comment justifying it (from golint). stringTernary - ifTrue always receives \"Strict\" (from unparam). ",
    "najeal": "I wanted to use the HasRole function but the function succeeds when the scope are [foo, bar] and the user just has [foo] role. Then I propose changes for the next people which copy/paste the function.\nFor each scope iteration it starts for failing if we don't find the same role claimed in the role loop. If the role is found, we take the next scope and start by failing it until we find the same role claimed, etc\nHope my explanation is clear. As I said above, I break the scope loop if the scope has not been found in the roles claimed.\nThe inScope will be false and the HasRole function will fail.\nMy purpose in the modification is to force all scopes to be present in the jet roles claimed to succeed the function.. Ok, I understand. Thanks you. "
}