{
    "zefhemel": "I think nobody cares about this. Closing.\n. Added now: persistence.remove(obj)\n. Thank you, pushed it to master :)\n. Once again, thanks! It's good that somebody's keeping the migrations plug-in working :-)\n. Hi Bruno,\nThanks a lot! I merged in your changes, with some minor stylistic (indentation etc.) code changes.\nI'm thinking about persistence.commit and rolling back. How about the idea to add a commit and rollback function to the transaction object instead of the persistence/session object? That seems a little more useful to me. And indeed, persistence.js is still a bit lacking when it comes to error handling. It would, however, be probably a good thing to be able to rollback a transaction manually (tx.rollback(callback)?).\nI'm also interested in your typeMapper implementation, using BINARY(16) for storing IDs. It will be more difficult to read, but it may save quite some storage (and memory) space. It would be interesting to offer it as an option, I suppose.\nThanks for the great work!\n. Hi Bruno,\nDon't worry about the code lay-out, that's easy enough to fix. If you'd like to make the changes to the commit/rollback code, that's be great, I'm currently more focussed on the browser use -- so it's great that people like you are also using it on the server and improving that part. Let me know of any progress.\nThanks for the help!\nZef\n. Thanks! I integrated it into the master.\n. Looks good! I merged it in.\n. Thanks a lot! Applied it to my master branch.\n. Thanks a lot Bruno!\nI really like the idea of adding Mixins to this. Some type of inheritance support was on my wish list for a long time now, maybe mixins is the way to go. I would like to make one change to the API, however. Generally I don't like \"magic boolean arguments\", a subtle \"true\" passed somewhere that quite radically change the meaning of the method, as was the case in your define implementation. I separated out the mixin stuff into defineMixin. I have the code living on my integration branch, which you can have a look at if you want. If this change is OK with you I'll merge it into master as well.\nThanks for the great work!\nZef\n. Great, pushed to master. By the way, why is not allowed to prefetch a entity reference if it comes from a mixin?\n. Thanks :)\n. Hi Roberto, because some of your commits contained the entire jquery mobile framework I decided it would be cleaner to just copy your changed files into the current master. Advantage is that we don't have jQuery mobile in the repo forever, drawback is that it looks like I'm taking the credit for your work because I committed it. I tried to be clear about who authored the jquery plug-in in the commit message however.\nThanks!\n. Hi, sorry for the late reply. Had a paper deadline. I integrated your patch, thanks! If you want to go ahead and fix the destroyAll method that would be great, otherwise I can also look into it.\n. Integrated it, thanks!\n. Fixed.\n. Excellent stuff! Keep 'em coming :)\n. Currently this is not possible. For simplicity of implementation the identifier is always an automatically generated 'id' field. persistence.js also wasn't really designed to be used with existing database schemas. If have the chance to improve this support, go right ahead :)\n. Thanks a lot!\n. Oh you people want to configure everything... ;-)\nThanks!\n. Excellent. This has been on my todo list for a long time. Thanks a lot!\n. Good! I was considering moving the titanium stuff out of websql. What's the Appstore app that uses persistence.js?\n. Hi, I have not yet integrated this pull request because of this reason: http://groups.google.com/group/persistencejs/browse_thread/thread/8fdc07230b544c52 maybe you can provide some input?\n. Hi! Thanks, I integrated the mysql patch. However, the id one I don't think is necessary. You can already set an id when instantiating a new object, like so:\nvar t = new Task(session, {id: 'blabla', ...});\nThat's what you're trying to do here right?\n. That's possible. I made this change not too long ok. Alright then, thanks. I'll close this :-)\n. What version of npm?\n. Excellent! Thanks so much.\n. Thanks! Integrated into master.\n. Why do you think that? They are also in QueryCollection instances.\n. Currently: it doesn't. This has to be added at some point. I started work on this, but haven't finished it yet.\n. Thanks. And welcome back!\n. Thanks!\n. Thanks!\n. Fixed. Thanks!\n. Excellent.\n. Duplicate.\n. This should answer your question: http://groups.google.com/group/persistencejs/msg/2b2479af56e51214\n. Either you add a column to your entity for that purpose, or you overwrite the default ID with your own though it must be a string, and must be set when constructing the object:\nnew User({id: \"....\", ...});\n. Where's the hasMany declaration, a hasOne call does not define a 1:N relationship. Have a look at http://persistencejs.org/schema for an example of how to define a one to many relationship.\nHTH,\nZef \n\nhttp://twitter.com/zef\nhttp://zef.me/+\nOn Wednesday, December 14, 2011 at 2:05 , gorgo wrote:\n\nHi, I've got a problem using Many-to-One relationship: \ncode:\npersistence.store.websql.config(persistence, \"testDb\", \"test\", 5 * 1024 * 1024);\nCategory = persistence.define(\"Category\", {\nname: \"TEXT\"\n});\nParamType = persistence.define(\"ParamType\", {\nname: \"TEXT\"\n});\nParamType.hasOne(\"category\", Category, \"param_types\");\npersistence.schemaSync(function() {\nconsole.log(\"created\");\nvar category1 = new Category ({name: \"category1\"});\npersistence.add(category1);\nconsole.log(category1.id);\nvar param1 = new ParamType({name: \"param1\", category: category1});\n//persistence.add(param1);\n});\nconsole:\npersistence.store.websql.js:78CREATE TABLE IF NOT EXISTS ParamType (name TEXT, category VARCHAR(32), id VARCHAR(32) PRIMARY KEY) null\npersistence.store.websql.js:78CREATE INDEX IF NOT EXISTS ParamType__category ON ParamType (category) null\npersistence.store.websql.js:78CREATE TABLE IF NOT EXISTS Category (name TEXT, id VARCHAR(32) PRIMARY KEY) null\nempty.html:25created\nempty.html:292C19B80A37F548F88E745805FCB5CADA\npersistence.js:440Uncaught TypeError: Cannot read property 'list' of undefined\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/zefhemel/persistencejs/issues/73\n. Excellent. Thanks!\n. And how is data actually persisted? Using the localStorage system?\n\n-- Zef\nOn Thursday, February 23, 2012 at 10:40 , Vickor wrote:\n\nI tweaked persistence.js slightly and it seems to work in IE9 now (using the in-memory store). Just replace your usages of __defineG/Setter__ like so:\nReplace:\nmyobject.__defineGetter__(field, mycallback);\nwith:\nObject.defineProperty(myobject, field, { get : myGetCallback, set : mySetCallback, enumerable : true, configurable : true });\nIt appears to work in IE9 and the latest versions of webkit.\nThe only other change I had to make was in LocalQueryCollection.prototype.add/addAll, I moved this._items.push(obj); to be above this._session.add(obj); instead of below it, because otherwise I was encountering infinite recursion. I don't know why that happened in IE and not Chrome.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/zefhemel/persistencejs/issues/80\n. Cool, thanks!\n. Thanks!\n. Thanks!\n. Thanks! But can you perhaps fix your code indentation and coding style slightly to fit the rest of persistence.js? i.e. move curly braces to the end of the line, and indent code properly?\n. Nice!\n. Thanks!\n. Nice! Hope to see more improvements on this.\n. Thanks!\n. Thanks!\n. This is how persistence.js was designed from day one. Any object in memory that it tracks, it will track for as long as the app is running, indeed unless you clear trackedObjects, I think there's a call for that to (persistence.clear() I think). It borrows this behavior from hibernate. If you want to do the thing you're doing, you have to clear trackedObjects by hand, but then be aware that any changes made to the objects afterwards will no longe be persisted with a flush().\n. That would work, but the trackedObjects hash is also used for ensuring uniqueness in memory, i.e. when I load object with id \"1\" twice in different ways (e.g. using a load and once using a query), there will only be one instance in memory. This is a useful property to have in your programs, otherwise things can get confusing.\n. This may fix this particular problem, but completely break the way persistence.js works. The idea is that once you persistence.add an object, its changes will be tracked forever and persisted on every flush. However, calling persistence.clean() all tracked objects are cleared, meaning no reference are held to them, and therefore changes made to those objects from that point onwards will no longer be persisted.\n. The ids of entities are assumed to be globally unique (cross entities even), by default UUIDs are used, do you fiddle with IDs somewhere maybe?\n. Pre-seeded IDs are \"officially\" not supported at all, generated ids are holy, touch them at your own risk. You took that risk and bang ;) What you can do is make the ids unique yourself, by prepending them with the entity name yourself.\n. No plans atm.\n. Indeed, prefetching only works to references to a single entity, not to a collection (such as tags, it's plural).\n. Just published version 0.3.0.\n. I wouldn't know why not.\n. Whenever entity objects are set to point to each other they are both persistnce.add'ed. The reason for this is to ensure that there are no broken links in the database, i.e. that a property of entity X points Y, and Y was never saved to the database.\n. If you issue this as a pull request, I'd be happy to merge it. \n. Great, thanks!\n. Done\n. Great, thanks!\n. Just published it.\n. The project has recently been transferred to coresmart (see GitHub URL). He should respond to enquiries.\u00a0\u2014 Zef\n\nSent from my iPhone\nOn Fri, Jun 20, 2014 at 1:11 PM, The Code Destroyer\nnotifications@github.com wrote:\n\nWell that sucks...\nReply to this email directly or view it on GitHub:\nhttps://github.com/coresmart/persistencejs/issues/148#issuecomment-46667791\n. It probably helps to be more specific when you say \"it doesn't work\" Do you get an error? Does something not happen that you expect to happen?\n. You'll need to use an asynchronous for-loop. There are other libraries that offer utilities for this, such as async.js. I also wrote up a blog post a while back showing how to asynchronously do for loops in JavaScript.\n. Overriding the generates id with your own should work fine. As long as you make sure it's unique across the entire database, not just one table.\u00a0\u2014 Zef\n\nSent from my iPhone\nOn Sun, Jul 6, 2014 at 3:31 PM, romanov notifications@github.com wrote:\n\nHello! Great ORM!\nLooks like that persistentjs is always generating own unique identifier (example:176E2AA5E9364CDDB546CE2F4E33E14D).\nI don't like to use auto-increment and uniq string as index.\nI prefer to use manually generated INTs for a database consistency in the future.\nSo, is it possible to generate (replace) ID with own ID field and generate it before \"add\" and \"flush\"?\nReply to this email directly or view it on GitHub:\nhttps://github.com/coresmart/persistencejs/issues/153\n. persistence.js generates its own IDs so there's no need for lastinsertid. Trying to use lastinsertids anyway will only result in a lot of pain working with persistence.js.\n. Every query you execute (e.g. list) will automatically flush, so that the query results will reflect changes made \"locally\" (i.e. not in the database). Indeed, clean() should reset \"local\" changes.\n. Yes\u2014 Zef\n\nSent from my iPhone\nOn Mon, Sep 22, 2014 at 3:57 AM, jimmyting93 notifications@github.com\nwrote:\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/coresmart/persistencejs/issues/160\n. Nice, thank you!\n. no. Probably you want to make this choice depend on the value of persistence.db.implementation, if that's set to sqlite, you use sqliteplugin, otherwise websql.\n. \n",
    "bjouhier": "Hi Zef,\nYes, I have different editor settings (Aptana with default settings). I'll try to do a better job next time.\nI agree that commit and rollback would make more sense in the transaction object. And manual rollback gets my vote too. Also, the rollback should clear the session cache. I did not do it because in my case the session always gets released after the rollback but this might not always be the case, especially with a manual rollback. Do you want to do the change, or do you want me to do it? \nRegarding exception handling, I find it painful to have to check for errors in every callback. This is why I associated the error handler with the transaction. But I'm not sure that I have set things up the right way and that my error handler will catch all errors. Also, the API that I am proposing (transaction.errorHandler) is probably very naive (I'm new to node). Emitting an error event would probably be much better.\nI'll add the alternate typeMapper for binary ids. Also, I'd like to move the dbValToEntityVal and entityValToDbVal functions inside the typeMapper object (I kept them where they were because I wanted to disturb the code as little as possible).\nI also need to do another pass on the typeMapper API (some calls are a bit redundant) and document it. \nBruno\n. This change is perfectly fine. I was not too happy with the true parameter anyway.\nThe first implementation that I posted yesterday does not handle many to many relationships. I'm working on it. I hope to get it cracked later today.\nBruno\n. ",
    "rsaccon": "My latest commit (7a5fab3) reverted the jquery-mobile patch (so the demo uses jquery-mobile from CDN). We overwrite &.ajax and decide based on URL analysis, whether to route the request to persistencejs.\n. why so many commits here ? Strange. Checkpoint ae87218 is consistent with upstrream/master, from then on there are my new changes to be pulled in. Or maybe I just need to study git in detail ...\n. ",
    "tg-x": "hm, just tested it again, seems like that's not needed anymore\nI made that patch a while back for an earlier version, and if I recall correctly in the INSERT query the id appeared twice thus producing an error, but it works now.\n. ",
    "levidehaan": "Btw I can write up the tutorials if you'd like, I'm going to be writing a tutorial for a howto on building blackberry tablet apps, and using persistencejs for the database management, so i could just take that and cut out + elaborate more from there.\n. ",
    "ptica": "hi\nnpm --version\n0.3.15\nnpm update npm\nnpm info it worked if it ends with ok\nnpm info using npm@0.3.15\nnpm info using node@v0.5.0-pre\nnpm info outdated Everything up-to-date.\nnpm info update Nothing to update\nnpm ok\nif I require the minified file and presistencejs/lib(!)/persistence.store.sqlite\n(!) lib needed to add to find it - seems the package.json is not understood :(\n. ",
    "defunctzombie": "check out shtylman/persistencejs@dd6471add12763623d360650fd15d7ea433c177e on one way I fixed the problem. You will probly need to add a few more requires to index.js\n. ",
    "morkeleb": "Oh, I just ran the code and it didnt find it. I'll have to double check then.\n. Given the pull request this issue can be closed?\n. ",
    "umbrae": "I worked around this issue by adding an \"is_active\" flag to my content and syncing that, and only displaying records that are active. I find that's a pretty good DB best practice anyway, so it works well for me.\n. ",
    "NickCharsley": "I have to agree with umbrae, adding an \"is_active\" flag really works for me, although I would go with a \"_isDeleted\" like the \"_lastChange\" field.\nYes I know that's now two 'extra' fields that every synced table has to have, but it makes it obvious very quickly that every interface has to honour this as a way of deleting records.\nIt may be a bit of bloat, but in theory the 'local' deleted record could be removed once it had been synced up to the central repository. Although if it was kept locally then you would reduce even further the risk of re-allocating keys and ending up with unwanted relationships.\n. ",
    "MarkMYoung": "Not sure when it was added, but there is already a flag for deleting entities, it's called '_removed'.  The following JSON would result in a delete.\njson\n{\n    \"now\":1329222505551,\n    \"updates\":[\n        {\n            \"id\":\"c8340484-c1b7-4bf1-9a8f-a42af6f20f2d\",\n            \"_removed\":true\n        }\n    ]\n}\nI currently use an 'IsActive' field too because the server would have to have a \"tombstone\" table to know what IDs to flag as deleted for a period of time.\njavascript\nvar Tombstone = persistence.define( 'Tombstone',\n{\n    entity:\"TEXT\",\n    objectId:\"TEXT\",\n    deleteDate:\"DATE\"\n});\n. Are you sure you didn't have just 10 Models with ParentKey of 5?  Skipping is definitely performed before limiting.\njavascript\n      if(this._skip) {\n        results.splice(0, this._skip);\n      }\n      if(this._limit > -1) {\n        results = results.slice(0, this._limit);\n      }\n. Let us know how this works for you: http://jsfiddle.net/MarkMYoung/AJuMe/\n. My data usage allows me to use 'id' because I have mobile views.  However, I would like to see a configuration option like:\njavascript\npersistence.id = 'ID';\n. Good work, Bojan.  I had to do something similar a few months ago (except mine was asynchronously recursive), but I couldn't get permission to give it back to Zef until now.\nI added synchronization tiers to prevent children from being sent to the server before the parent was committed.  I also added a function to make complex read-only queries without Entities to make use of Zef's abstraction of browser result sets.\n. Maybe it's a weakness of English, like many other non-programming languages, but that is what Zef meant.  He meant \"fetches\" as in the singular present tense verb, not multiple occurrences of the noun.\n. The main problem is that .schemaSync was never called.  Also, keep in mind that everything is asynchronous (jQuery Deferred might help you with this).  Below is code that works (in Chrome 17.0.963.46):\njavascript\n    persistence.debug = false;\n    persistence.store.websql.config(persistence, 'mydcdb', 'MyDC local database', 5 * 1024 * 1024);\n    var Task = persistence.define('Task', {\n        name: \"TEXT\",\n        description: \"TEXT\",\n        done: \"BOOL\"\n    });\n    persistence.schemaSync( function()\n    {\n        for (var i = 0; i < 5; i++) {\n            var t = new Task();\n            t.name = 'Task ' + i;\n            t.done = i % 2 == 0;\n            persistence.add(t);\n        }\n        persistence.flush(function () {\n            console.log('done flushing');\n            Task.all().list(function (results) {\n                console.log(results);\n                results.forEach(function (r) {\n                    console.log(r.name);\n                });\n            });\n        });\n    });\n. Okay, I took some time today and think I've tracked down the problem.  When I got really close to the issue, I added a unique constraint to persistence.sync.RemovedObject.\njavascript\npersistence.sync.RemovedObject.index(['entity', 'objectId'], {unique:true});\nI don't think that's the real solution though.  I think in persistence.sync.js, almost at the very bottom, where it says\njavascript\nif(meta.enableSync) {\n  session.add(new persistence.sync.RemovedObject({entity: rec.entity, objectId: rec.id}));\n}\nIt should say something like\njavascript\nif(meta.enableSync\n  && !(rec.id in persistence.trackedObjects\n    && persistence.trackedObjects[rec.id]._type === rec.entity\n  )\n) {\n  session.add(new persistence.sync.RemovedObject({entity: rec.entity, objectId: rec.id}));\n}\nThe issue is that persistence.add doesn't know to inspect RemovedObjects' meta data to determine whether it's already been added (and I don't think persistence.add should be specialized to inspect that).  I don't have a good place to test this.  Please test this (the modified if-statement, not the unique index) and let me/us know whether it worked.\n. ",
    "lorensr": "Does the #40 err argument satisfy this?\n. ",
    "artemave": "Looks like it\n. ",
    "mjadobson": "My bad. This gives no errors:\njavascript\nvar persistence = require(\"persistencejs/lib/persistence\").persistence,\n    persistenceStore = require(\"persistencejs/lib/persistence.store.mysql\");\nI was just linking incorrectly.\n. ",
    "Szasza": "Yes, I am sure, I have hundreds of items :)\nMarkMYoung reply@reply.github.com\n\u00edrta (2012. febru\u00e1r 14. 21:11):\n\nAre you sure you didn't have just 10 Models with ParentKey of 5? \u00a0Skipping is definitely performed before limiting.\njavascript\n\u00a0 \u00a0 \u00a0if(this._skip) {\n\u00a0 \u00a0 \u00a0 \u00a0results.splice(0, this._skip);\n\u00a0 \u00a0 \u00a0}\n\u00a0 \u00a0 \u00a0if(this._limit > -1) {\n\u00a0 \u00a0 \u00a0 \u00a0results = results.slice(0, this._limit);\n\u00a0 \u00a0 \u00a0}\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/zefhemel/persistencejs/issues/51#issuecomment-3968702\n. Thanks, I'll test it tomorrow and give a feedback.\n. Sry, false alert.\n. \n",
    "ovaillancourt": "The issue is due to a bad dependency definition on the npm package definition of persistencejs. The package defines the mysql dependeny's version (node-mysql) as larger or equal than 0.7.0, so basically npm currently installs mysql 0.9.4 as the latest version.\nnode-mysql however added changes in 0.9.2 that break backward compatibility after version 0.9.1, so basically persistencejs is downloading a dependency that breaks the package.\nMy current workaround is to separately download mysql 0.9.1 and copy/paste it in the persistencejs dependency folder, untill persistencejs is patched for that. (The patch should be relatively easy to produce given the changes made in the mysql module, I don't really have time to do it right now though :/).\n. ",
    "joshsmith": "Hopefully my pull request will squash this issue once and for all.\nhttps://github.com/zefhemel/persistencejs/pull/68\n. ",
    "kentr": "From #70 I gather that the id column is really a UUID.  I agree with @DurhamG that naming the column id makes using preexisting data sets difficult.\n@zefhemel, would you consider a pull request that renames id to uuid?\n. @ndesorden:\nInstall with the GitHub URL and branch / commit, like this:\nbower install https://github.com/coresmart/persistencejs.git#f692c4e --save --save-exact\nor \nbower install https://github.com/coresmart/persistencejs.git#master --save --save-exact\n. ",
    "nihaopaul": "i've got the same failure on OSX\n. ",
    "mithragk": "Im also getting the same error and tried to find the solution for the above in various site but no hope..\nAny other way to install persistencejs???\n. ",
    "pixelshaded": "npm install git://github.com/zefhemel/persistencejs.git. Gives you the git repo instead of the one on npm. Better than nothing.\n. ",
    "ifox": "I have got the same error on OSX with node v0.10.10 and npm v1.2.25.\nI am also not able to install it via the git url...\n. ",
    "xentek": "sorry about the dupe. thanks for closing it\n. How do you make associations work with the original DB IDs then?\n~ Eric Marden\nOn Dec 9, 2011, at 1:04 AM, Zef Hemel\nreply@reply.github.com\nwrote:\n\nThis should answer your question: http://groups.google.com/group/persistencejs/msg/2b2479af56e51214\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/zefhemel/persistencejs/issues/70#issuecomment-3076121\n. \n",
    "JordanReiter": "With a bit of testing I note that changing the cutoff to 100000000000 rather than 1000000000000 makes the range a somewhat more reasonable: March 3rd, 1973 - Nov 16, 5138. So that might be a consideration if anyone is looking at pre-2000 dates (storing birthdates comes to mind).\n. ",
    "sergeibelov": "Used the node example to get this working.\n. ",
    "FrostbittenKing": "Ok, sorry. The problem why the query didn't work wasn't persistence.js per se. Seems to be a strange behaviour of the js engine or sth. But I think it still could be of interest to you. We have a global jquery error handler. Parallel to the query beeing invoked,  the error handler kicks in. After that an error message is displayed with alert(..), and it seems alert aborts the async threads that are involved with persistence.js. WTF.\n. ",
    "rhuitl": "I have the same problem, did you find a solution?\nI start with a new database, insert a couple of items, and then delete the first item:\nINSERT INTO `_SyncRemovedObject` (`entity`, `objectId`, id) VALUES (?, ?, ?) [\"Device\", \"5CD42CA1AE7C4868BABDBE48750CB6AA\", \"3F269763244B4B889AFFA05AB0CF54D8\"]\nDELETE FROM `Device` WHERE id = '5CD42CA1AE7C4868BABDBE48750CB6AA' null\nThen delete the second item:\nINSERT INTO `_SyncRemovedObject` (`entity`, `objectId`, id) VALUES (?, ?, ?) [\"Device\", \"5CD42CA1AE7C4868BABDBE48750CB6AA\", \"EA0D44D922384C5486C8B6D1340C5B4D\"]\nINSERT INTO `_SyncRemovedObject` (`entity`, `objectId`, id) VALUES (?, ?, ?) [\"Device\", \"59DC76C346FE46E7806963F2A14B7CEF\", \"7C2443ED24494E8A81AC56ECB34C7E87\"]\nDELETE FROM `Device` WHERE id = '59DC76C346FE46E7806963F2A14B7CEF' null`\nAnd so on, every time I delete an item, the previously deleted items are added with a different id than the ones before.\n. Nope, doesn't work. With this change, the object is not added to the _SyncRemovedObject list when flush() is called, as the object is still in the trackedObjects list. When I call flush() a second time, the object is gone and the _SyncRemovedObject item is added. However, subsequent deletes of other items still insert more and more RemovedObjects:\n``\nremove Device1\nflush 1\nDELETE FROMDeviceWHERE id = 'FDE4C0BB2D62425E97A521871F4A8F20' null\nflush 2\nINSERT INTO_SyncRemovedObject(entity,objectId`, id) VALUES (?, ?, ?) [\"Device\", \"FDE4C0BB2D62425E97A521871F4A8F20\", \"7E41D8832D694C258F9C0D5A0148CDBE\"]\nremove Device2\nflush 1\nINSERT INTO _SyncRemovedObject (entity, objectId, id) VALUES (?, ?, ?) [\"Device\", \"FDE4C0BB2D62425E97A521871F4A8F20\", \"93B1E54354CB4CF2813989C73AE2F0A8\"]\nDELETE FROM Device WHERE id = 'CEDB48BE98874AC7869B5309315E1453' null\nflush 2\nINSERT INTO _SyncRemovedObject (entity, objectId, id) VALUES (?, ?, ?) [\"Device\", \"FDE4C0BB2D62425E97A521871F4A8F20\", \"2D71F65A8F6844D995E50D9F945C981B\"]\nINSERT INTO _SyncRemovedObject (entity, objectId, id) VALUES (?, ?, ?) [\"Device\", \"CEDB48BE98874AC7869B5309315E1453\", \"C5AE9521E0024CF693B04A9DDC043CA2\"]\n```\nI noticed that persistence.trackedObjects[?]._data.objectId equals rec.id for the _SyncRemovedObject types. Could we check on that to avoid duplicating the items?\npersistence.trackedObjects\nObject\n  (...)\n  C5AE9521E0024CF693B04A9DDC043CA2: Entity\n    _data: Object\n      entity: \"Device\"\n      objectId: \"CEDB48BE98874AC7869B5309315E1453\"\n  _data_obj: Object\n  _dirtyProperties: Object\n  _new: false\n  _session: Object\n  _type: \"_SyncRemovedObject\"\n  id: \"C5AE9521E0024CF693B04A9DDC043CA2\"\n. ",
    "pixelcort": "I think I fixed this by clearing out objectsRemoved after using it in this function.\n. I just hit this as well in Safari 6 while working with an html file loaded via file:///. Quitting and reopening the browser seemed to fix it for me.\n. Added an additional commit so that the new version that's set when migrating downwards is correct.\n. Whoops, looks like there's a typo in this fix. Hold off on integrating it; I'll update this once I commit the fix into this PR.\n. Okay this looks good now and is probably ready for pulling in.\nThere's a second O(n^2) performance problem with syncing locally deleted records, but I think that's a separate issue as it  appears to also be there before these fixes.\n. Ah I see now it's being used to track changed properties.\nI wonder if instead of using trackedObjects, the entity instances could instead tell persistence if and when they are modified. This way trackedObjects could be cleared out, being repopulated by the entity instances when they are changed later. @zefhemel does this sound like it would work?\nCurrently, profiling in Chrome indicates the save method itself is the actual CPU-bound performance bottleneck. For example, adding 1375 entries, calling flush after each add, results in save being called 946000 times. This takes 11 seconds of CPU time alone. Safari is similar at around 20 seconds.\nMemory is another issue; I'm trying to get mass insertion, deletion, and sync working on iPhone, but MobileSafari keeps getting killed due to consuming too much memory. It's possible it's not trackedObjects, but that's what I'm thinking at the moment.\n. Ah okay that makes sense.\nIf and when more browsers support WeakMap, it could be used to prevent duplicate instances while allowing the garbage collector to free up unused ones. Until then, I'll avoid dealing with large numbers of instances at the same time.\nThanks for the help! Closing.\n. Actually, it looks like WeakMap wouldn't help in this case. In any case, for large inserts and deletes one can just use raw SQL to manipulate the data.\n. ",
    "DurhamG": "Correct.  I just call persistence.loadFromLocalStorage and persistence.saveToLocalStorage.  To be fair, I haven't tested it extensively, but my data shows up and is persisted, so that's better than before.\n. ",
    "ograycode": "Closing this pull request because the diff shows the whole file as changing. Will resubmit. \n. @zefhemel thanks for the feedback, I'll see if I can find a different fix tonight or tomorrow.\nThe problem appears to be from line 696 of persistence.store.sql.js\njavascript\nvar e = rowToEntity(session, entityName, r, mainPrefix);\nrowToEntity (defined on ln. 336) is returning the wrong entity, whereas the entityName, r, and mainPrefix it is passing in look to be correct.\nEDIT:\nUpon even further investigation, line 704 (session.add(e)) is also broken. The heart of the problem looks to be that the rows have the same primary key (id), even though they are on different tables. A good solution might be a hash based upon table name then id, instead of just id. \nLooks to be a little more work than I expected, but worth it as it may prevent other issues down the road, and better supports pre-seeded data. \n. Yes, the data is pre-seeded in the tables using manual insert statements and the ids are the same on a per-row basis across different tables, so row 1 of table 1 has the same id as row 1 of table 2. While I don't think pre-seeded data is something unreasonable, it is certainly not something that this library appears to fully support.\nInstead of session.trackedObjects[id] it may be a better idea to have it be something along the lines of session.trackedObjects[entity_name][id].\nIn turn this would add better support for pre-seeded data, and help pave the way for user-defined primary keys. \n. Well I think this pull request had come to its end. So closing, I may try to branch and add better support as outlined above.\n. ",
    "airtonix": "I know this was created along time ago, but you really should consider supporting postgres (I would even go so far as to say \"instead of mysql\" ).\nperhaps this presentation about the deficiencies of mysql will give you motivation: http://www.youtube.com/watch?v=emgJtr9tIME\n. Oh. I thought persistence was nodejs and therefore sever side.\nThat's OK you've demonstrated a bias against postgres which means (I guess) that it'll be a long time before persistence supports postgres (if at all).\nWhich is a shame, because I like what you're doing in principle, except I won't ever use mysql.\nThanks for considering it though :)\n. ",
    "pazifikwelle": "Sorry to say, but that video is simply stupid and should not be used as an\nargument for the implementation of PGSQL:\n\"However all this guy is demonstrating is that you can't treat MySQL like\nPGSQL.\n1) mysql cli client would show warnings for all the examples demoe'd. Never\nbeen a fan of workbench\n2) Mysql's default behaviour is to intentionally capture whatever you\nINSERT/UPDATE despite YOU sending it bad data. YOU don't want nulls? It\nhonours that and certainly does fail if you attempt explicit NULL insertion\"\nThat dude is using the MyISAM engine which is not really ACID.....nor a\nDBMS.\nI've read a lot about MySQL vs. PGSQL vc. ORACLE at a certain point in time\nbehind and are still comfortable with MySQL (on InnoDB).\nI've persistence.js understood as \"orm\"- Framework mainly intended for\nclient-side use, so I would rather add functionality at that point and not\non the server side.\n:-)\n2013/10/6 Zenobius Jiricek notifications@github.com\n\nI know this was created along time ago, but you really should consider\nsupporting postgres (I would even go so far as to say \"instead of mysql\" ).\nperhaps this presentation about the deficiencies of mysql will give you\nmotivation: http://www.youtube.com/watch?v=emgJtr9tIME\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zefhemel/persistencejs/issues/106#issuecomment-25762968\n.\n\n\n\nStefan Hanke\npazifikwelle@googlemail.com\nskype: shanke24143\nmobile: +491724264228\n\n. Oh, good morning - I've not yet used persistence.js server-side...\nI know that there are some reasons for pqsql, but comparing pgsql to mysql\non myisam is like apple and strawberries - maybe it's not so hard to\nimplement a plugin for persistence.js. There will be SQL-dialect\ndifferences, but as far as I've understood Zef's Plugin-Architecture it\nshould be possible to swap the DB-Adapter.\nGood luck!\n(I use persistence.js with persistence.sync on Android,iOS from within\nphonegap for offline-mode support )\n2013/10/7 Zenobius Jiricek notifications@github.com\n\nOh. I thought persistence was nodejs and therefore sever side.\nThat's OK you've demonstrated a bias against postgres which means (I\nguess) that it'll be a long time before persistence supports postgres (if\nat all).\nWhich is a shame, because I like what you're doing in principle, except I\nwon't ever use mysql.\nThanks for considering it though :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zefhemel/persistencejs/issues/106#issuecomment-25787436\n.\n\n\n\nStefan Hanke\npazifikwelle@googlemail.com\nskype: shanke24143\nmobile: +491724264228\n\n. Hey Pablo,\nI can only add how I sucessfully use it on Android + iOS + Desktop.Chrome:\npersistence.remove(oEntity);\nmostly soon followed by persistence.flush(...snip...);\nMy setup:\npersistence.js with websql and syncer to mysql-php backend\n\nif you are using websql I would try to talk to BlackBerry's WebSql directly\nand see whether their sqllite can delete records from a table (that should\nwork).\nin addition, I would turn on persistence.js SQL-debugging, so that you can\nmanually execute and maybe get better debugging results.\nGreets\nStefan\n(I have no BB devices here....)\n2013/8/16 pablofm notifications@github.com\n\nHi there,\nI decided to use persistencejs in my project in blackberry. Its weird\nbecause developing in the ripple emulator everything works fine. However,\nwhen I deploy the app to the device everything is working well with\nexception of the remove methods.\nAny Idea?\nPablo\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zefhemel/persistencejs/issues/127\n.\n\n\n\nStefan Hanke\npazifikwelle@googlemail.com\nskype: shanke24143\nmobile: +491724264228\n\n. Oh yes, async js is 'interesting' and can be powerfull as well as lexical\nscoping.\nI had some tough weeks...\n:-)\nAm 16.08.2013 21:35 schrieb \"pablofm\" notifications@github.com:\n\nI Want to apologize. The delete functions are working perfectly. The\nproblem is with the asyncronism of the dialogs of blackberry. The world is\nasynchronous :P\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/zefhemel/persistencejs/issues/127#issuecomment-22788714\n.\n. \n",
    "davidleureka": "Ok, thanks for the quick feedback.\n. ",
    "kendalen": "I know it's an issue 3 months old, but I stumbled upon it just a few days ago.\nI badly needed the same feature for a couple of PhoneGap projects, so I made it by myself, since it's not supported.\nI forked the project and commit the changes I made. Since I'm far from being a javascript guru, this code could have bugs and could break retrocompatibility (or maybe could be just bad written). Of course I tried not to, but I'm still testing it. It looks like ok, until now.\nI tried to implement support for filtering and ordering on joined table (both hasOne and hasMany), with a Hibernate-like dot notation (in the example you made, your filter call would have been:\nInventory.all().prefetch('ingredient')\n    .filter('ingredient.ingredientName','=',ingredientName)\n    .list(null,callback);\nand the filter would have worked even without the prefetch)\nI also added a new function:\nQueryCollection.prototype.queryOptions\nReturns a new query collection with the provided options.\nValid options are:\n1. 'prefetch' - string or array of strings\n2. 'filter' - object with properties 'property', 'operator' and 'value' or array of these objects\n3. 'order' -  object with properties 'property', 'ascending' and 'caseSensitive' or array of these objects\n@param options hash with set of option keys - option values\n@return the query collection configured with the provided options\nThis was made to avoid multiple call to QueryCollection.prototype.clone function.\nAs I said, I am not an expert. The fork ( https://github.com/kendalen/persistencejs ) is public, if it can be of any help and if, after some tests, it proves stable as it looks like now, I could make a pull request to Zef (by the way, Zef: great work!). I am new to GitHub, too. :(\n. As far as I know, no, it wasn't.\nI still have to make a pull request: I hope to find some times in the next few days to review the code and read how to make the request (my first time :) ).\nThank you both.\n. ",
    "dennisahlin": "@kendalen Please, make a pull request on your fork, it looks awesome :)\n. ",
    "bamirzada": "Does not look like this patch was ever taken into the main project...can you confirm yes/no ?\n. ",
    "julien51": "Up!\n. ",
    "designbyadrian": "PersistenceJS seems to give more query power than the latest localForage from Mozilla. Looking forward to IndexedDB support!\n. ",
    "romanov": ":heavy_plus_sign:\nI'm going to replace WebSQL in my app with IndexedDB after IOS 8 release.\n. @zefhemel thank you for your comment\nI've updated my question about sorting, i am not sure - but what sorting alg. persistencejs is using by default for IDs (alphabeat)? After number 1 goes 10 instead 2.\n. ",
    "roymj88": ":+1:  to this. \nIt will be great if this can be done in such a way that while creating a database, \n\n\nChecks if IndexDB(since this is the future) is available.\nFallback to WebSQL if indexDB is not supported.\n\n\nThe worrying stats:\nwebSQL : http://caniuse.com/#search=webSQL\nAnd indexDB is almost there : \nindexDB : http://caniuse.com/#search=IndexedDB \nThis would be a great addition to an already awesome library!\n. ",
    "experion-afsal": ":+1: \n. ",
    "manum176": ":+1: \nLooks like a Must-Needed addition since most of the modern browsers are not going to support WebSQL.\n. ",
    "ghost": ":+1:\n. ",
    "miklschmidt": "This commit broke the sync adapter. group is undefined. Furthermore, existingItems.concat returns the concat'ed array it doesn't modify the one given. So it should be existingItems = existingItems.concat.... The current code doesn't work. Let me know if you want a PR to fix it.\n. ",
    "romlel": "Hello. i encountered this error too and I am wondering what is the best way to move on.\nFor now, I commented out the 4 lines after /* ensure IDs var chars */, but I would like to get something more robust for heavy use later.\nI'm new to this lib and don't want to make a mess in the code.\nIs the 115 fix important, and if so, how would it be possible to integrate it properly ?\nBrest regards.\n. ",
    "AgDude": "Could someone please clarify what we are trying to accomplish with this block:\n/* ensure IDs var chars */\nvar idVals = new Array();\nfor(var id=0;id<group.length;id++){\n  idVals.push( persistence.typeMapper.entityIdToDbId(group[id]));\n}\nI understand the entityIdToDbId function, but this it does not appear to present in all backends.  It also does not appear that idVals is ever referenced after being created here.\nI am going to take the suggestion from @romlel and remove those four lines. \nI suggest the \"fix\" earlier be removed entirely.  I am not convinced that the initial bug presented here is a bug.  PersistenceJS is designed around an id property which is a uuid, making an \"int\" id an non-typical use case.\n. ",
    "robshep": "It may not be a bug if Persistence.js is only designed to support self-generated UUID identifers \nIf the server-provided dataset has any other data type as an \"id\" fields then the system should hard fail.\nAs it happened - at the time of first reporting - everything worked apart from deleting, which was silently uneffective.\nbetter docs will make this not a bug :) \nCheers.\n. ",
    "BredStik": "+1\nHad to do the same fix in order to make it work\n. +1\n. +1\nHad to fix this as well to make it work.\n. ",
    "jrvidal": "Will you be willing to accept a pull request? I didn't suggest it right away because I don't feel I could evaluate the stability of the library. 0.3.0 perhaps?\n. ",
    "eagsalazar": "Also with global track/flush it isn't clear how to reliably implement validations in a wrapper class since the underlying model can be saved at any time without the opportunity to check for valid values.\n. ",
    "tiagoengel": "+1. \nIs there a workaround to avoid this? In my case this behavior is really a problem, a lot of objects are saved automatically without validation.\n. ",
    "pablofm": "I Want to apologize. The delete functions are working perfectly. The problem is with the asyncronism of the dialogs of blackberry.  The world is asynchronous :P\n. ",
    "AndreaSpinelli": "I support the issue, because .list(/) and .count() do fail! (see below for an example)\nHowever, IMHO, a better solution would be just to use the same callback on line 711 of persistence.store.sql.js:\n}, callback );\nby the way, se same applies to .count() and again a simple fix is changing line 844 to\n}, callback );\nThis is consistent with the general convention of persistence.js that callbacks should test their second argument; if it is not-null, it is a SQL error.\nA simple index.html for testing:\n\nTest\n\n\n\n\n\n\npersistence.store.websql.config(persistence, 'test_test', 'test', 10000);\nvar schema_of_foo = {\n      bar: \"TEXT NOT NULL\",\n    baz: 'INTEGER'\n};\nvar foo = persistence.define(\n    'foo',\n    schema_of_foo );\npersistence.schemaSync(function(tx) {\n    foo.all().filter(\"foobaz\",\"=\",\"x\").list(function(result, error) {\n        if( error ){\n            alert(\"OK! Error detected in list: \" + error.message );\n        } else {\n            alert(\"KO! error not detected...\");\n        }\n    });\n    foo.all().filter(\"foobaz\",\"=\",\"x\").count(function(result, error) {\n        if( error ){\n            alert(\"OK! Error detected in count: \" + error.message );\n        } else {\n            alert(\"KO! error not detected...\");\n        }\n    });\n});\n\n\n. +1\n. Conflicting, for instance, with the convention of persistence.flush (callback should check second arg for error)\n. ",
    "p1nox": "BTW @zefhemel , there is an existing bower package with the name \"persistencejs\", so that's why I wrote \"persistence\" without \"js\" suffix. I left to you the registration of this bower package, so you will have the complete ownership of it.\n. ",
    "nova706": "+1\n. ",
    "janezkranjc": "+1\n. ",
    "hisapy": "+1\n. ",
    "rovqapint": "+1\n. ",
    "RomanBrodetski": "+1\n. ",
    "dtelaroli": ":+1: \n. ",
    "bluesliverx": "+1\n. ",
    "epartipilo": "Hi, persistence.store.cordovasql does not come with the bower version. \nbower install persistence\n. ",
    "romgar": "Hi epartipilo,\nIssue #148 has been opened on that purpose.\n. It seems that v0.3.0 (released on Jan 6) is installed by bower, and cordova sqlite plugin integration has been committed on Mar 21...\n. This project is no more actively maintained... You can contact main committer, but I think he was looking for successors :)\n. ",
    "danielfbm": "Hi, I just created an app to test this Cordova SQL plugin and the persistence.js \"bridge\". It works great for me on the mobile.\nJust a question, did you add plugin using the \"cordova plugin add\" command? Also, I didn't add this file: \njs/libs/SQLitePlugin.js to the index.html file\nI am using Cordova 3.4,\nI just created a basic HelloWorld app using \n$ cordova create test-app\nThen I added the plugin with:\n$ cordova plugin add https://github.com/brodysoft/Cordova-SQLitePlugin\nHere is my index.html file:\n<div class=\"app\">\n        <h1>Apache Cordova</h1>\n        <div id=\"deviceready\" class=\"blink\">\n            <p class=\"event listening\">Connecting to Device</p>\n            <p class=\"event received\">Device is Ready</p>\n        </div>\n        <div id=\"console\">\n        </div>\n    </div>\n    <script type=\"text/javascript\" src=\"cordova.js\"></script>\n    <script type=\"text/javascript\" src=\"js/index.js\"></script>\n    <script type=\"text/javascript\" src=\"js/persistence.js\"></script>\n    <script type=\"text/javascript\" src=\"js/persistence.store.sql.js\"></script>\n    <script type=\"text/javascript\" src=\"js/persistence.store.websql.js\"></script>\n    <script type=\"text/javascript\" src=\"js/persistence.store.cordovasql.js\"></script>\n    <script type=\"text/javascript\">\n        app.initialize();\n    </script>\nand here is my index.js file:\nvar app = {\n    // Application Constructor\n    initialize: function() {\n        this.bindEvents();\n    },\n    // Bind Event Listeners\n    //\n    // Bind any events that are required on startup. Common events are:\n    // 'load', 'deviceready', 'offline', and 'online'.\n    bindEvents: function() {\n        document.addEventListener('deviceready', this.onDeviceReady, false);\n    },\n    // deviceready Event Handler\n    //\n    // The scope of 'this' is the event. In order to call the 'receivedEvent'\n    // function, we must explicity call 'app.receivedEvent(...);'\n    onDeviceReady: function() {\n        app.receivedEvent('deviceready');\n```\n    app.setupDatabase();\napp.log(\"database fully setup\");\n\napp.insertDummyData();\n\napp.log(\"dummy data sucessfully inserted\");\n\napp.selectDummyData();\n\napp.log(\"dummy data check complete\");\n\n},\nsetupDatabase: function(){\napp.Article = persistence.define('Article', {\n    article_id: 'INT',\n    author: 'TEXT',\n    category: 'TEXT',\n    total_count: 'INT'\n});\n\n// Paragraph DB Model\napp.Paragraph = persistence.define('Paragraph', {\n    paragraph_id: 'INT',\n    article_id: 'INT',\n    number: 'INT',\n    text: 'TEXT'\n});\n\n//Defining Database for articles (limit of 50 mb for app, 5 for web app);\npersistence.store.cordovasql.config(persistence, 'testdatabase', '0.0.3', 'Main database to store local information', 50 * 1024 * 1024, 1);\n\n//Removing verbose operations\npersistence.debug = false;\n\n//Defining relationships\napp.Article.hasMany('paragraphs', app.Paragraph, 'article');\n\n//Defining index and constraints\napp.Article.index(['article_id'], {unique: true});\napp.Paragraph.index(['article_id', 'number'], {unique: true});\n\n//Apply definitions to the DB\npersistence.schemaSync();\n\n},\nArticle: null,\nParagraph: null,\nnumberOfArticles: 1000,\nnumberOfParagraphs: 10,\ninsertDummyData: function(){\n    try{\n    persistence.transaction(function (transaction) {\n        app.log(\"insertDummyData: Checking the number of Articles inserted...\");\n        app.Article.all().list(transaction, function(data){\n            app.log(\"insertDummyData: Total number of Articles: \"+data.length);\n            if (!data.length){\n                app.log(\"insertDummyData: No Articles in the database. Inserting \"+app.numberOfArticles+\" records and Paragraphs\");\n                for (var i = 1, article, p = 1; i <= app.numberOfArticles; i++) {\n                    article = new app.Article({article_id: i, author: \"Author \"+i, category: \"category\"+i, total_count: i});\n                    //app.log(\"article var: \"+article);\n                    persistence.add(article);\n                    for (var k = 1; k <= app.numberOfParagraphs; k++) {\n                        persistence.add(new app.Paragraph({paragraph_id: p, article_id: i, number: k, text: \"text \"+i+\" \"+k, article: article}));\n                        p++;\n                    }\n                    persistence.flush(transaction);\n                }\n            }\n        });\n});\n}\ncatch (exc) {\n    app.log(\"insertDummyData: Error: \"+exc);\n}\n\n},\nselectDummyData: function () {\n     persistence.transaction(function (transaction) {\n        app.log(\"selectDummyData: Checking the number of Articles inserted...\");\n        app.Article.all().list(transaction, function(data){\n            app.log(\"selectDummyData: Total number of Articles: \"+data.length);\n            if (data.length === app.numberOfArticles) {\n                app.log(\"selectDummyData: Total number of Articles is as expected: \"+app.numberOfArticles);\n            }\n        });\n        app.log(\"selectDummyData: Checking the number of Paragraphs inserted...\");\n        app.Paragraph.all().list(transaction, function(data) {\n            app.log(\"selectDummyData: Total number of Paragraphs: \"+data.length);\n            if (data.length === app.numberOfArticles * app.numberOfParagraphs ) {\n                app.log(\"selectDummyData: Total number of Paragraphs is as expected: \"+app.numberOfArticles * app.numberOfParagraphs);\n            }\n        });\n    });\n},\nlog: function (string) {\n    var pElement = document.createElement(\"p\");\n    pElement.appendChild(document.createTextNode(string));\n    document.getElementById(\"console\").appendChild(pElement);\n    console.log(string);\n},\n// Update DOM on a Received Event\nreceivedEvent: function(id) {\n    var parentElement = document.getElementById(id);\n    var listeningElement = parentElement.querySelector('.listening');\n    var receivedElement = parentElement.querySelector('.received');\nlisteningElement.setAttribute('style', 'display:none;');\nreceivedElement.setAttribute('style', 'display:block;');\n\nconsole.log('Received Event: ' + id);\n\n}\n```\n};\nHope it helps.\n. I see... Just one question... are you creating the database and populating data after the ondeviceready event? \nThe databases issues you have could be a fallback in the persistence.js library (Sorry not really aware of the details on this). \nfor me it was like this:\n04-10 18:23:22.360: V/info(19579): Open sqlite db: /data/data/io.cordova.hellocordova/databases/corporate_network_db.db\nI just created a new Cordova app using the cordova create command and added your script to the onDeviceReady function...\nI noticed that you use context.debug(), which doesn't work for me... it could be some library that you are using, so I replaced it with console.log(\"\");\nAfter filtering the output of logcat (tag:Cordova) I got this:\n04-10 18:13:01.680: D/CordovaActivity(19019): Resuming the App\n04-10 18:13:01.680: D/CordovaActivity(19019): CB-3064: The errorUrl is null\n04-10 18:13:01.860: D/CordovaActivity(19019): onMessage(onPageStarted,file:///android_asset/www/index.html)\n04-10 18:13:01.935: D/CordovaLog(19019): file:///android_asset/www/index.html: Line 25 : Viewport target-densitydpi is not supported.\n04-10 18:13:02.065: D/CordovaWebViewClient(19019): onPageFinished(file:///android_asset/www/index.html)\n04-10 18:13:02.065: D/CordovaActivity(19019): onMessage(onPageFinished,file:///android_asset/www/index.html)\n04-10 18:13:02.085: D/CordovaActivity(19019): onMessage(spinner,stop)\n04-10 18:13:02.165: D/CordovaLog(19019): file:///android_asset/www/js/index.js: Line 72 : Received Event: deviceready\n04-10 18:13:02.180: D/CordovaLog(19019): file:///android_asset/www/plugins/com.phonegap.plugins.sqlite/www/SQLitePlugin.js: Line 8 : SQLitePlugin openargs: {\"name\":\"corporate_network_db\",\"bgType\":0}\n04-10 18:13:02.255: D/CordovaLog(19019): file:///android_asset/www/js/persistence.store.cordovasql.js: Line 145 : CREATE TABLE IF NOT EXISTS profiles (firstName TEXT, lastName TEXT, mobile TEXT, email TEXT, deviceId TEXT, profileCreateDate INT, VAR1 TEXT, VAR2 TEXT, VAR3 TEXT, id VARCHAR(32) PRIMARY KEY)\n04-10 18:13:02.265: D/CordovaLog(19019): file:///android_asset/www/js/index.js: Line 60 : DATABASE CREATED\n04-10 18:13:04.085: D/CordovaActivity(19019): onMessage(spinner,stop)\nAfter that I tried to add some records and read the added records from the database. After executing the app a few times it is always increasing the number of records... here is the code for the onDeviceReady function:\n// deviceready Event Handler\n    //\n    // The scope of 'this' is the event. In order to call the 'receivedEvent'\n    // function, we must explicity call 'app.receivedEvent(...);'\nonDeviceReady: function() {\n        app.receivedEvent('deviceready');\n```\n    var ProfilesDTO = persistence.define('profiles', {\n        firstName: \"TEXT\",\n        lastName: \"TEXT\",\n        mobile: \"TEXT\",\n        email: \"TEXT\",\n        deviceId: \"TEXT\",\n        profileCreateDate: \"DATE\",\n        VAR1 : \"TEXT\",\n        VAR2 : \"TEXT\",\n        VAR3 : \"TEXT\"\n    });\n// configure the data store\npersistence.store.cordovasql.config(persistence, 'corporate_network_db', '0.0.1',\n        'Corporate Network database', 5 * 1024 * 1024, 0);\n\n// turn ON/OFF debug mode\npersistence.debug = true;\n\n// create database\npersistence.schemaSync(function(tx) {\n    //context.debug('Database created');\n    console.log(\"DATABASE CREATED\");\n});\n\npersistence.transaction(function (tx){\n    console.log(\"adding 10 records...\");\n    for (var i = 0; i < 10; i++) {\n        persistence.add(new ProfilesDTO({firstName: i, lastName: i, mobile: i, email: i}));\n    }\n    persistence.flush(tx);\n\n    ProfilesDTO.all().list(function (results){\n        console.log(\"listing all records in the database... total number of records: \"+results.length);\n        for (var i = 0; i < results.length; i++) {\n            console.log(results[i].firstName);\n        }\n    });\n});\n\n}\n```\nBTW: I am using Android 4.4, and Cordova 3.4\nTry it out and let me know what you get\n. Nice you got it working. If you still need I can share the code with you.\nI also had some problems with old versions and upgrades of cordova in my\nproject. At some point I just created the project again and copied the\nfiles over. Saved a lot of headache.\nCheers.\nOn Apr 10, 2014 11:05 PM, \"indrajit3010\" notifications@github.com wrote:\n\nLord Daniel [image: :+1:] ,\nIssue is resolved, it was due to old version of cordova jar. I was using\n2.9.1 version and for .js 3.4.0.\nWhen I added Cordova-SQLite plugin, initially .java file gave me errors\nabout CordovaPlugin class which was not there in the old .jar file.\nReplaced old jar with new and Bingo!!! everything is working like charm.\nThousand Thanks to you.\nIndrajit\n\nReply to this email directly or view it on GitHubhttps://github.com/zefhemel/persistencejs/issues/144#issuecomment-40096623\n.\n. \n",
    "indrajit3010": "Thanks Daniel,\nI followed the steps you mentioned and removed \"js/libs/SQLitePlugin.js\" entry from index.html. But found that persistencejs creates \"corporate_network_db.db\" file under \"com.demo.app\\database\" folder. But does not creates table or populates data into \"corporate_network_db.db\" darabase, instead  it creates a new file (db) \"file_00000005\" under \"com.demo.app\\app_database\\localstorage\\file_0\" folder and creates tables and populate records into it.\nAnd the above mention file db is not accessible from Android.\n. Hi,\nYes, I am calling the above code from within \"deviceready\" handler. Still no DB is created under 'database'. Attached screen shot.\n\n. Hi Daniel,\nIs it possible for you to share the code? I think there is some missing thing in my project which is causing this issue.\nAnd as I am using Windows machine, its very hard to make nodejs work on it. So I have created the project manually.\n. Lord Daniel :+1: ,\nIssue is resolved, it was due to old version of cordova jar. I was using 2.9.1 version and for .js 3.4.0.\nWhen I added Cordova-SQLite plugin, initially .java file gave me errors about CordovaPlugin class which was not there in the old .jar file.\nReplaced old jar with new and Bingo!!! everything is working like charm.\nThousand Thanks to you.\n Indrajit\n. ",
    "crico": "The variable \"group\" is actually \"groupedIds\", is it right?\n. Persistencejs manages primary keys for you; it generates an ID - varchar(32) (like a MD5) - internally.\nIf you are using executeSql, I think that you should add an ID field to the query with a MD5 value.\n. ",
    "juppwerner": "I think the new lines 182 - 186 in lib/persistence.sync.js which were introduced by the commit 2499ad5 can be removed again, as there is no evidence that the created idVals array is ever used.\n. ",
    "githugger": "Correct me if I'm wrong but doesn't persistencejs generally expect unique ids across all tables?\nWe specifically set the ids to composite values like 'tablename:tableuniqueid' to ensure a one-to-one mapping to a DB with regular constraints (unique ids within tables only).\n. ",
    "darthtrevino": "It's been a couple of years since I looked at it, but IIRC, the constraint was stronger that 'unique in the table', it was 'unique in the entire dataset'.. ",
    "TheCodeDestroyer": "So when is the update?\n. Well that sucks...\n. So will the guy become active after 2 years?\n. Well actually this one isn't alive... Zef gave this repo to someone who has never been active on github, so this repo is basically dead. I kinda created a mirror from this where I make changes I need and tag it for bower. If youre interested in contributing or whatever just jump to this place.\n. ",
    "ndesorden": "@kentr \nThanks!\n. ",
    "AleksMeshkov": "Maybe I have problems with indexes? Tried to comment them. Think it's fine for now.\n. Doesn't work on Android 4.4.2 Is it somehow related to Cordova-SQLitePlugin?\n. @zefhemel, hey, thankss for reply. I didn't get any errors. Console.log showed me that anything went well. I gave up using Cordova-SQLitePlugin and everything became ok.\n. @zefhemel thank you! I'll dive into this.\n. Well here is my solution. I applied example of a managed control flow written here http://book.mixu.net/node/ch7.html\n``` javascript\n// fetch all\nvar get = function (callback) {\n        Specialist.all().list(function (items) {\n            var specialists = [];\n            // that's an async function\n            function populateWithTags(item, callback) {\n                item._tags = [];\n                item.tags.list(null, function (tags) {\n                    tags.forEach(function (tag) {\n                        item._tags.push({\n                            tag : tag.tag\n                        });\n                    });\n                    callback(item);\n                });\n            }\n        function series(item) {\n            if (item) {\n                populateWithTags(item, function(itemWithTags){\n                   specialists.push(itemWithTags);\n                    return series(items.shift());\n                });\n            } else {\n                return callback(specialists);\n            }\n        }\n\n        series(items.shift());\n    });\n}\n\n};\n```\n. By the way, can I somehow rollback entity's changed (dirty) attributes to the last saved (flushed) state? \nupd:\nI think I'v found it. It's persistence.clean(), right?\n. Thank you, @zefhemel!\n. @zefhemel, @coresmart is this project still maintained?\n. @coresmart I'm sorry but I can't do it for now just like you. May be in a month.\n. ",
    "paul321": "and if a do a manual insert how do i get the last id?\n. ",
    "chriscz": "\ncan I make PersistenceJs accept my remote DB ids and work with it?\n\nDepending on the type of database you use, you could expose the _id or some other UUID based field over persistence.sync.js. \n\nHow do you use PersistenceJs with remote Data ?\n\nI'll assume you are using a relational database. You could declare an extra column that contains a UUID and populate this column with unique id's for all of your data. This will allow persistence.js to use it as an id field instead of the integer PK.\nWhat database are you using?\n. When you say remote IDs are you referring to the id field that persistence is looking for when you set up the sync server? I haven't used the included sync server before since I wrote my own using Django and TastyPie. \nSince ManyToMany syncing isn't supported by persistence, you'll have to manually manage it anyway. If you're using an ORM on the server, upgrading your database schema shouldn't\nbe too difficult, presuming that your schema isn't too complex.\n. ",
    "Bretto": "Thanks for the feedback, its a MySQL DB, I would like to declare my schema and the relations, load the data and have PersistenceJS work with the data as it is in my DB, from my early testing it seams that it doesn't work this way (if the remote IDs where UUID would this work?).\nI would have to load the data, use the 'add' function to assign an Id to all the objects and then do the relations \"hasMany\" manually to work with the generated UUID, and then all my objects would have the 'ID' and the original 'Remote_ID'... All this does sound complicated, am I missing something ?\n. ",
    "goldo": "Thanks for the work-around of your 1st code. I needed it since i'm using webpack.\nI think I noticed a small mistake tho, on first line ?\nvar persistence = require('persistencejs/lib/persistence').persistence;\ninstead of \nvar persistence = require('persistencejs');\n. ",
    "coresmart": "I apologize I have not been able to.  Some events have prevented this.  Would you like to take it over?\nSent from my iPhone\n\nOn Nov 7, 2014, at 5:10 AM, Aleksey Meshkov notifications@github.com wrote:\n@zefhemel, @coresmart is this project still maintained?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "ketanshah79": "Actually, I can connect to different databases using persistences persistence.store.websql.config call. However the schema \"defined\" in the meta database gets ported over to account databases as well\nI am assuming that we might be using singletons for storing the database definitions?\n. ",
    "leocaseiro": "Who's hell is coresmart? Cannot just give access to someone who is interested in accept pull requests?\nIs there any chances to recovery a repo? I'll research about it...\n. I think to avoid it. It shouldn't migrate owner, but to add someone who had at least send a few pull requests\n. ",
    "larochef": "Looks like this repo is dead, closing PR to avoid keeping things to watch. ",
    "lukasreichart": "That's exactly the thought, that I had and I'am currently using the persistence in memory adapter to implement a simple app ( working fine so far ) \nand planning to create an adapter that works with react-native as soon as I get the time ( or some one else does it before I have to :D )  ....\nMy Idea was to create a persistencejs adapter, that uses the react-native AsyncStorage ...\nHow would you use the SQLite database?\n. And is it possible to use this adapter with persistencejs?\n. @zefhemel @rsaccon ?\n. ",
    "jsierles": "Good to know it works already! asyncstorage is also a good idea, I'm just sqlite as there's already an adapter and I need SQL behavior at times. Here's the adapter I'm using now:\nhttps://github.com/almost/react-native-sqlite\n. Not out of the box, but it's not much work to adapt. I'll take a look!\n. ",
    "andpor": "have a look at react-native-sqlite-storage..had both android and ios implementation...\n. ",
    "nixoschu": "I was searching for the same thing, waiting patiently for an answer :)\n. ",
    "hammady": "Thanks @zefhemel \n. ",
    "BLNorris": "There doesn't seem to be a built in option for this, but you can add it manually in persistence.sync.js\nAfter the xmlHttp.open on lines 36 and 52 add a like like this\nxmlHttp.setRequestHeader(\"Authorization\",  YourAuthTokenHere);\nYou'll have to do something similar in the persistence.jquery.js if you are using it, as it overwrites these functions\n. ",
    "ceeji": "Why don't you use English?\n. ",
    "0scar14": "you can check \nhttps://github.com/coresmart/persistencejs/blob/master/docs/migrations.md\n. "
}