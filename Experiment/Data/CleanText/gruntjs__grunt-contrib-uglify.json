{
    "jzaefferer": "There's API docs now, see also https://github.com/mishoo/UglifyJS2/issues/7\nUglify.minify is hopefully the way to go. If it doesn't expose enough options, make requests for those.\n. jQuery Core uses grunt-compare-size anyway: https://github.com/rwldrn/grunt-compare-size\n. ",
    "paulirish": "AFAIK there are no blockers on this anymore. I generated a beautiful source map with UglifyJS2 the other day. \\o/\n. ",
    "tkellen": "Anyone on the team have time to tackle this one?\n/cc @shama, @sindresorhus, @ctalkington, @jsoverson, @tbranyen, @isaacdurazo, @vladikoff?\n. I suppose hooking into minify would be easy/fast enough and we could wait until someone actually asked for the extended options (basically what @jzaefferer said earlier).\n. A devel branch with the basics would be fantastic.  When it's ready to go, bumping major would be fine by me, but we'd have to keep the old documentation somewhere for previous versions.  Perhaps we need grunt-contrib-uglify2? I'll defer to @cowboy on that.\n. Actually, scratch that.  I want to minimize confusion as much as possible.  I just created grunt-contrib-uglify2.  Jarrod, if you have time to get a proof of concept in there, that would be amazing.  Please be sure to put your name first in AUTHORS so that you show up as the task contributor when the readme is generated.\n. Well, that seems sensible too.  In any case, the repo is there if we need it.  Hopefully @mishoo will weigh in here and we can go from there.\n. Thanks Sindre, you're absolutely right.  I'll remove that repo now.\n. Thanks Jarrod!  I will try this out on some of my projects next week.\n. This is working great for several projects on my end.  I'm not using sourcemaps, though.\n. > If it helps making a decision, I could merge the packages immediately. ;-)\nThat'd be awesome.\n. Thanks for the work on this @jsoverson.  I've rebased devel on master, since we don't have a devel branch on any of the core tasks.\n. People complain in both directions.  Perhaps we should have a global configuration option for the runner itself that controls this.  It wouldn't be implemented at the task level though--it'd probably have to be something that happens during auto-expansion.\nref gruntjs/grunt#434\nref gruntjs/grunt-contrib-copy#6\nref a bunch of other issues i can't recall /cc @sindresorhus \n. This is already on the docket for serious discussion in 0.5.  The justifications for both methods of handling are myriad.  Consequently, I think we should support both styles, and I don't think it should be up to task writers to implement the code that makes it happen.\nAt the moment, contrib is a potpourri mess of inconsistent error handling.  I'd just pick one and move on.  We can solve this at a higher level when 0.4 is out the door.\n. This is a holy war that has been raging ever since computer programming became a thing.  Some people prefer to fail early and fail often, others don't. \nPersonally, I'm in the fail-early camp with you, but there are plenty of people who disagree.  Honestly though, we can support both without it being a nightmare, I promise.\n. In 0.5 I think we should have a key in the config that can augment how the task runner operates.  By the time the config is sent to the task to be run, it should be out of the runner's hands.  This will require some additional abstractions, but I am confident it can be done.\n. Just to put this idea out here (it totally doesn't belong here), the runner-level configuration could also include stuff like assigning an event handler, that way tasks can emit stuff and people can choose to do whatever they want with it (the default being some variation of what grunt.log currently is).\n. I think you should handle this at the task level however you like and move on.  Whatever you do isn't going to be supported by the other 20 odd tasks and people are getting along just fine now.  Let's resolve this properly in 0.5.\n. I think we need to support both options.  I don't think there is a viable way to do that in 0.4 that doesn't take a ton of development time.  \n\nAt the moment, contrib is a potpourri mess of inconsistent error handling. I'd just pick one and move on. We can solve this at a higher level when 0.4 is out the door.\n. Hey Jake!  Two things:\n1. Our README files are generated automatically by the build-contrib task, so these edits need to take place in the docs/ dir.\n2. Why the change?\n. Hey Dominic!  Thanks for putting the time into this PR.  We run into this issue all the time with tasks.  Rather than implementing a solution for each one, see the \"Building the files object dynamically\" section here:\nhttps://github.com/gruntjs/grunt/wiki/Configuring-tasks\n\nGrunt 0.4rc5 (coming soon) will offer a declarative way to handle this, so keep your eyes on that doc (or upcoming commits to grunt itself).\n. Grunt 0.4 will be released on Monday, but for the next few hours, you can reference this ;)\nhttp://github.com/gruntjs/grunt/wiki/Plugin-Release-Candidate-Versions\n. At the moment, the API of this task is the grunt config interface. If we make this change, we also have to supporrt our internal implementation, which is not something we want to do.  For our sanity @thanpolas, can you please deal with this issue by using the uglify library directly?\nWe'll be addressing this exact issue in node-task. Hopefully, in the nearish future, this sort of thing won't be needed.\n. You're an author on this repo now, have at it!\n. Thanks for this Clay!\n. +1 on a reporting task.\n. Thanks for this Dylan, merged and published as v0.2.0 (along with a v0.6.0 of grunt-lib-contrib).\n. I agree that using a specific wrapping task is a better solution, but until we can pipeline things a-la node-task, it's a bit cumbersome to do so.  I don't see anything wrong with this--we've already set the precedent that we'll support this sort of feature and the change is super minor.  Once we can properly pipeline things we can deprecate this sort of thing all over the place.  It does need a test and the documentation updated in the correct place, though (/docs dir)\n. Closing because this was resolved.  Would someone who has experienced this issue be willing to submit a PR updating the docs for this?  Thanks!\n. Can you please try on StackOverflow if you are still having trouble?  Thanks!\n. I develop with RequireJS--no need for sourcemaps :(.  I appreciate all the work you've done on this project @jsoverson.  If you need to officially bow out of the Grunt team, please let me know.\n. @jpommerening / @mattkime If you two can work together to get something functioning (with tests) I would be happy to merge it.  Backwards compatibility is not necessary.  I'd love to see this land, but I have yet to need these features in an application I've worked on, and therefore can't speak with any authority about what needs to be done.\n. I'm really sorry @jmeas but I just don't know enough about sourcemaps to make a meaningful contribution here--I don't use them.  Are you successfully using your branch in a project?\n. Closing in favor of #122.  Thanks for the discussion guys--hopefully we can wrap this up next week.\n. Hey James!  Thanks for your persistence on this.  Let's go ahead and merge this--can you please rebase?\n. Hey @jmeas, sorry for not getting back to you.  I tried to rebase this into master and there are a boaload of conflicts.  Could you have one more look and ping me back here when things are ready?  If we can get this cleared up I will make sure to publish today.  Thanks again for your efforts on this!\n. Done and published!\n. No way, thank you!\n. thanks!  this will get published after #122 is merged.\n. Thanks @arty-name!\n. Thanks @hex!\n. @cowboy any thoughts on some kind of standardization for summarizing log stuff?\n. @dsiepman I agree.  I think the real solution (long term) is to have tasks emit events rather than explicitly log messages.  Then you can hook up whatever kind of logger you prefer.  Unfortunately we're a long way away from being able to support that.\n. Merged and published as 0.3.1!\n. Thanks!\n. Please see:\nhttp://gruntjs.com/configuring-tasks#building-the-files-object-dynamically\n. <3\n. I'm fine with leaving the test as failing until @mishoo releases.\n. Thanks @mishoo!\n. Our changelogs aren't just useless copy/pastes of commits, they are human-readable distillations of what happened for a release that you can see from a glance on the main project page.  For people not intimately familiar with a project, this has huge utility.\nCould you please humor me and do this in the future?  It only takes a few seconds.  If you need some justification beyond making it easier for users to see what changed, weigh how much time it'll take for you to enter the info vs how much time we'll collectively spend closing issues when they ask.\n. upgrade npm and you'll be good:\nhttp://fredkschott.com/post/2014/02/npm-no-longer-defaults-to-tildes/\n. I suspect we'll be removing peerDependencies entirely, given that they are going away (npm/npm#5080).  @cowboy, any thoughts here?\n. ",
    "jsoverson": "I was playing with it earlier and it wouldn't be that hard to wire in with some basic settings to replicate common usage, but the api has changed enough to keep me unsure of more advanced option handling. If that's cool then I'll look into basic usage.\n. Anyone know what @mishoo's take on the naming is? Is the '2' in UglifyJS2 permanent, or will the project replace UglifyJS?\nOn npm and github, it's UglifyJS2, on http://lisperator.net/ it's replaced UglifyJS.\nI'd vote for whatever stays consistent with the parent.\n. Updated and pushed a devel branch for UglifyJS2 usage. Still needs docs and probably better tailoring towards sourcemap use cases. Maybe @paulirish can chime on that topic with common command line args wrt sourcemaps.\nTest cases test against lodash uglification and compare command line uglification to grunt task uglification.\nhttps://github.com/gruntjs/grunt-contrib-uglify/tree/devel\n. It runs against everything I've tested it against but still needs people like you to bang against it.\nI just explicitly used it against jquery's dev source to generate a minified version with sourcemap and it worked beautifully when thrown into a project and inspected via chrome, so it's far enough along to need some more eyes on it.\n. Seems to be covering most my bases too. I've created sourcemaps several times but they have been trivial usage, I'm sure there will be other cases that will need to be covered down the line.\nI'll update documentation when I get a spare minute.\n. Added documentation for review on devel.\n. > If it helps making a decision, I could merge the packages immediately. ;-)\nHuge +1 to that.\n. I added descriptions, links, and clarification to most of the examples and hopefully reduced some of the potential for confusion.\nNot sure what you mean by consistency, but if you can clarify I will take care of it.\n. Failing early probably covers the most useful cases while causing minimal frustration.\nI definitely see the value and would sometimes prefer a warning, but those cases are fewer than the times I would benefit from having a task fail hard. I'm thinking primary of tasks like concat, uglify, copy, etc.\nAs part of a build process in continuous integration, having a step only warn and allowing the build to pass is potentially more damaging than the opposite.\n. @sindresorhus, those are the primary cases where I see that being beneficial but it's just convenience there.\nThe solution to step past a hard failure there would be to just omit that task until there are files. The troubleshooting would be simple and the solution would be obvious. Troubleshooting successful builds where tasks weren't performed could be much more costly.\n. Thanks for the notice @dylang, I'll get this in and simplify some of the source map config\n. Updated master for this usage. Updated the docs and added a test to account for input source maps and source roots\nNote: the source map options have been made to be more consistent with grunt naming : https://github.com/gruntjs/grunt-contrib-uglify#advanced-source-maps\n. Thanks @dylang, added a sourceMappingURL option to override sourceMap when necessary.\n. Open question to anyone following\nThe uglify executable's api for 'prefix' is to specify an integer value for a number of directories to remove from the beginning of files referenced in the sourcemap.\nIs there a benefit I'm not seeing to specify an integer instead of a string, eg 'lib/foo/bar/' instead of the integer '3'?\nA string seems like a more intuitive option for the name and I'd prefer to implement that unless there's a reason.\n/cc @mishoo\n. Thanks again @dylang, I agree and this will be incorporated once https://github.com/gruntjs/grunt-contrib-uglify/issues/6 is addressed and pushed.\n. Added via 3b5cc721bede01c6dabeef36494e600a1f07b2e8\n. Thanks for this and thanks for adding the unit tests, can you rename the option to sourceMapPrefix to be more in line with the other sourcemap options?\nThe documentation also goes into docs/uglify-options.md and the readme gets automatically generated by grunt.\nThanks again!\n. Thanks for the pull request, I fixed the documentation, you had \"sourceMappingPrefix\" instead of \"sourceMapPrefix\"\n. Thanks for the pr @dylang. You're passing an export_all option (https://github.com/dylang/grunt-contrib-uglify/commit/3d91af666bb77fcdb7348356a5a9ee40fac89526#L2R44) but that's not documented and should be camelcase to align with the other option's style.\nThis looks like a case of bringing it over from the uglifyjs executable, right?\n. Thanks for commenting @dylang, I didn't notice the new commits you made. I've merged this in.\nThanks a lot for taking the time to submit a PR and file the source map enhancement issues, I really appreciate it.\n. Thanks for the heads up @MarcelloDiSimone, I couldn't automatically merge your PR because your editor strips trailing whitespace and breaks some of the option formatting. I've fixed this in f8da4ff90c7e8f74c81d8e5d3834e6011a90611c\n. closed via 762cb059ba06e910e43c308efc0c9188f6ae03d0\n. Awesome idea and clever implementation, thanks for the PR. I'll add some tests around it and get it in.\n. Merging this now and want to change the option to 'sourceMap' which will support either a function or a string.\nIn your investigation into the issue, did you foresee an issue with doing this that caused you to use a different option and assign to sourceMap?\n. Closed via 762cb059ba06e910e43c308efc0c9188f6ae03d0\n. Wrapping arbitrary text might be best left to grunt-wrap (which appears to have been updated for 0.4.0rc6) so that every task that handles text doesn't need to also support a wrap option.\n. Uglification (and this task) supports the retention of certain style comments which are often used for licenses, but the banner option is appended after uglification which bypasses that.\nIf you're prepending a license as a comment starting with a bang (/*! foo */), you can include it as the first option in your source and turn on partial preservation of comments.\njs\nyourTask : {\n  files : {\n    'dest.js' : ['src/license','src/**/*.js']\n    options : {\n      preserveComments : 'some'\n    }\n  }\n}\n(with all your sourcemap options, obviously)\nNot sure what the best route is, whether this should be something handle by Uglify, whether this task should be smarter, or if this option should be the recommended route.\n. Added a warning. This task shouldn't have any extra logic to support this, though uglifyjs itself may find it useful to add.\nUglify supports keeping license comments in the source while maintaining sourcemap integrity, that just means adding the banner to a separate file and using that file as input to grunt-contrib-uglify. This seems like common practice, right? Having unminned files with the same banner and then uglifying that file?\n. Ok, makes sense. Opened up https://github.com/mishoo/UglifyJS2/issues/335 to see if that could be brought in there. Without that, I may need to dive into Uglify and submit a PR (others very welcome)\n. @mishoo added the preamble option for this case and we're mapping the 'banner' to it, so all forward usage should be OK with banners and sourcemaps.\nThanks to everyone involved.\n. If you are looking to uglify all files into one file, then you can use the standard src->dest syntax in your Gruntfile\nuglify : {\n  yourTask : {\n    src : 'src/**/*.js',\n    dest : 'build.js'\n  }\n}\nIf you are looking to individually uglify every file in a directory, that is not supported directly but is something I'd like to get in sometime. Right now, you would need to specify each source and destination file individually, eg\nuglify : {\n  yourTask : {\n    files : {\n      'dest/a.js' : 'src/a.js',\n      'dest/b.js' : 'src/b.js',\n    }\n  }\n}\nYou can programmatically generate the configuration in order to make this more automatic.\n. Thanks for the link to the proposal @wjbryant. @webgefrickel, @wjbryant, what could the documentation read to make this more clear?\n. For sass it makes sense because the original source is not usable at all until a build process.\nSince you can (and should?) develop with unminified JavaScript this seems unnecessary.\nWhat does your development flow look like?\n. It might not necessarily be stupid, but it's not a common use case and think the support might cause more headache than its worth (due to confusion around the behavior).\nFlows like this are better handled with some sort of application module manager, like requirejs/AMD, browserify, or others. It might seem heavy for your task, but those are better tools for the job.\n. Removed redundant code 762cb059ba06e910e43c308efc0c9188f6ae03d0\n. > You mentioned something about separating task logic from library payload in your grunt 0.4 mass issue creation... where is that?\nThat would be uglifyjs and this task should just be a wrapper around it.\nThe only difference here is any logic that exists in the task is to workaround API deficiencies in UglifyJS2 when it was being developed and to standardize usage with other tasks and grunt best practices.\nWhat is this needed for that can't be accomplished by using uglifyjs directly? If this task is doing things that you need, they should be pushed up to uglifyjs and the task should be made simpler.\n. We created an issue to address those and @mishoo has gone a way to support that (UglifyJS2#7)\nThis task hasn't been updated to best use that new API because it was past the point of active development and readdressing it wasn't a priority.\nThis task isn't meant to be a compatibility layer between other tools and UglifyJS. If you need something that this task provides then please open a PR for UglifyJS(2) and consider a PR for this task to remove redundant logic or at least notifying us when there is redundancy.\n. @thanpolas thank you for understanding. If you do end up contributing to UglifyJS, please let us know what we can trim here.\n. Will do this as soon as I get my dev machine up again. Dealing with a failing system today.\n. The options presented in the beautify hash all get passed in as arguments to the OutputStream, just like the UglifyJS command line. You should be able to specify\njs\noptions : {\n  beautify : {\n    ascii_only : true\n  }    \n}\nLet me know if that doesn't work for you.\n. This is due to Uglify dropping the statement in that file as a form of optimization.\nIf you call uglify with compress turned on (which is the default for this task because it is the most common use case), then you can see uglify dropping the code itself\n``` shell\n$ uglifyjs js/rollover.js -c -o test.js\nWARN: Dropping side-effect-free statement [js/rollover.js:1,0]\n$ wc test.js\n       0       0       0 test.js\n``\n. Thanks for the pull request. Grunt-contrib-\\* docs are autogenerated by grunt from the markdown files in thedocs/directory. Could you make your changes touglify-examples.md`?\n. Thanks, that is pretty awesome and, if it is that significant, then i wonder if it needs to be an option at all.\nI agree that it should probably be off by default since it doesn't provide enough value compared to its apparent cost, but then it's just a fluff option that forces another dependency.\n@tkellen/@cowboy, any opinion? I'd opt for just getting rid of it.\n. Looks to be a massive performance increase, on 221 javascript files totaling >16MB, compared times are\nwith gzip info\n``` shell\n$ time grunt uglify\n[snipped grunt output...]\nDone, without errors.\nreal    9m4.437s\nuser    9m4.020s\nsys 0m3.701s \n```\nwithout gzip info\n``` shell\n$ time grunt uglify\n[snipped grunt output...]\nDone, without errors.\nreal    1m10.928s\nuser    1m10.530s\nsys 0m0.839s\n```\nThis is on an aging laptop since my normal dev machine is dead so the results are exaggerated but still significant.\n. I don't know for sure, the majority of minification work is done on my CI machines. I was definitely surprised at how long that run took.\nIn the spirit of deconstructing grunt tasks, would a reporting task be valuable? That way reports for, say, size, comparisons, totals, linecount, etc can be configured and run at the end of a build chain as opposed to being an option on this task, cssmin, whatever else.\n. I don't know of a way and this is the same experience as using uglify directly. If it's a problem that needs to be resolved then please open an issue with uglifyjs.\n. This should be fixed with an update, likely fixed with reporting changes via https://github.com/gruntjs/grunt-contrib-uglify/pull/35.\nLet us know if the process is still slow and include as many comparison/timing/environment details as you can.\n. This task was implemented before @mishoo implemented the uglifyjs method (.minify) which more appropriately exposes the command line options. I've never had the time or opportunity to port the code over but it may solve this problem and others.\nPull requests very welcome and backwards compatibility isn't a priority. The options and documentation will need to change and be simplified so that this task more directly delegates to uglify, as opposed to duplication so much CLI functionality manually.\n. You can enable it via setting the option in both compress and mangle\noptions : {\n  compress : {\n    screw_ie8 : true\n  }\n  mangle : {\n    screw_ie8 : true\n  }\n}\n. I can run this same version combination fine. What version of node?\nCan you past the output after running grunt uglify --verbose --debug --stack?\n. @b-long, the error message has been changed to accommodate empty source files and will be pushed shortly, but is not related to the original problem.\n@maksimr was this ever resolved? Try running grunt --verbose --stack --debug. Putting --stack after --debug seems to throw both the options away.\n. @ryanseddon I'll see if I can get some more error output in the next push, but that looks to be related to a token error in the parsed JS.\nDo you have any non-standard JS that you may have left in there? Macros, processing directives, etc? Does it pass uglification via the command line uglify or the web implementation?\n. Try reinstalling your dependencies (remove node_modules and reinstall), OutputStream comes from UglifyJS and if that's not accessible then there may be a problem there.\nFailing that, clone this repo and run the tests (grunt test). They run fine on my OSX machine.\nClosing this issue because it's a bunch of everyone's issues with similar symptoms. If your issue persists, open a new issue so we can track it better.\n. Is this just for the newline? That can be added without much effort.\nA footer isn't that big of a deal, I just get hesitant when headers/footers/wraps/banners get requested for every text-based task.\n. Because there are other tasks that do just that, like grunt-wrap, and I don't think it's the best solution to have every text-based processor support header, footer, wrap, whatever options.\nBut this is still open because I could be wrong, @tkellen, any thoughts?\n. @mpnkhan, I'll try to get a few PRs in a release coming up, but might not have time until wednesday next week. It's the next priority on my list.\n. Merged in at c550758bdb6a0fa76c828325866c9a03a0af804c\n. Thanks for notifying us of upstream fixes. Ideally this task would delegate more to uglifyjs directly. More might be able to now but that hasn't been investigated. PRs welcome!\n. Thanks for getting the PR in in advance, we'll take a look at this when the next uglify drops. Please poke this issue if you notice it before we do.\n. Merged this and released in 0.2.6. Thanks for the PR!\n. Thanks, this has been merged and will be published in 0.2.1\n. Closing this because @guuz fixed his case, @codeBelt, if you are still having an issue, please open a new one with more details on your case.\n. Added a way to test for negative cases and released this in 0.2.6. \n. Thanks for the PR and the patience!\n. Thanks for the PR and the update, I appreciate it. This has been merged and will be published as 0.2.1\n. Thanks for notifying, I'll bump uglify and get this in as well for a release.\n. This has been merged and will be in 0.2.1. Thanks again.\n. Thanks for the note, removed the reference to multi tasks because it was redundant and unnecessary in that example.\n. This has been changed in UglifyJS2 here although may be a bit premature given the state of the tracked issues in firefox and chrome\n@mishoo, what was your timeline to publish the next version after UglifyJS2/213 was merged?\n. @mishoo, didn't mean to rush you, was just wondering if you knew more about the status of the support in browsers. \n@mattrobenolt, @acdha, any input as the creators of the respective PRs?\n. Reverted these changes and published 0.2.2 until ff/chrome gain support. Will open an issue but please feel free to ping on it if anyone is actively monitoring those browser issues.\n. The [no src] warning in the output means that the task found no files matching the source pattern. I would guess this is because of the type in namespace.js : ['public/js/namepsace.js']\n. Thanks Remy, this is tracked in #58. I just got back from fluent and will get this updated today.\n. @remy published 0.2.2 with the changes reverted.\n. It still hasn't actually landed so we'll need to wait for the support to be usable and in place before switching.\n. Looks good, I'm just waiting for time to organize a few of the issues and PRs into a release to publish. Thanks for the PR and support, it's really appreciated.\n. I just came across the place to make the fix when reviewing #43, and I also thought this was just an open issue and not a PR so just closed it via the commit message.\nThanks for the effort taken to fork, understand the code, make a fix, and, on top of all that, submit a PR. That is definitely not undervalued and I apologize for not grabbing your commit for the credit.\n. Try setting mangle : false as well. They are two separate settings for different steps of minification.\nIf that doesn't work, please post a sample of the output so I can see what's actually happening. \n. If you already have a dev task chain, you can maintain this style of development by just using the concat task.\nYou can re-use the task configuration easily as well:\nuglify: {\n      dist: {\n        options : { /* build options */ }\n        src : [\n          '<%= dir.src %>/js/somefile.js',\n          '<%= dir.src %>/js/anotherfile.js'\n        ],\n        dest : '<%= dir.build %>/js/bundle.js' \n      }\n    },\n    concat: {\n      dev: {\n        src : '<%= uglify.dist.src %>',\n        dest : '<%= uglify.dist.dest %>'\n      }\n    }\n. Thanks for the PR @cfddream, can you explain what this is for and maybe reformat the examples so it is more clear what the expected result is and/or should be?\nAssuming the reasoning makes sense, can you also add the appropriate documentation for the option in docs/uglify-options.md and add a test in the style of the existing tests?\n. Are you asking for the map files (json) to be unminified? That output is generated by uglify so there is not much control over it, and I'm not sure it's necessary. Are you generating the sourcemaps externally? If so, then you don't need to but can also exclude them from being parsed via the grunt config.\nOr are you referring to either the source or output?\n. The banner needs to be specified in an option block, eg\njs\nuglify: {\n    vendor: {\n        src: 'js/build/vendor.js',\n        dest: 'js/build/vendor.min.js',\n        options: {\n           banner: '/*! Third Party Scripts: <%= grunt.template.today(\"yyyy-mm-dd\") %> */\\n',\n       },\n    },\n}\n. @incompl, I agree, but it is a direct mapping to the uglify option of the same name.\nThis task attempted to be a transparent wrapper to uglify and it was early in the days of sourcemap usage. For anyone familiar with sourcemaps now and how they are used with uglify and this task, please consider donating some time to improving the documentation.\nEven adding the terms you might search for to relevant sentences in the documentation would help people find solutions more quickly.\n. The destination doesn't work like that so you're getting an error because asterisk is not a valid character for files on windows.\nIf you are looking to uglify numerous files individually, you can look into building your files object dynamically, otherwise the destination should be a single file.\n. This is already supported via standard uglify options, see #40 \noptions : {\n  compress : {\n    screw_ie8 : true\n  }\n  mangle : {\n    screw_ie8 : true\n  }\n}\n. Sorry about that. Have been missing all grunt-contrib-* email since I changed gmail inboxes and was wondering why these repos were a little quiet. This has just been pushed.\n. This is not specific to minification, it is a feature of the globbing syntax and is documented as part of the grunt documentation\n. Thanks for staying on top of this. Pushed in 0.2.4\n. This was due to a mismatch in published version and documented version. This should work fine now.\n. @leonardosouza the documentation is automatically generated from files in the /docs folder, can you add your update to /docs/uglify-examples.md?\n. Added to /docs. Thanks!\n. This task just delegates to uglify, if there is an problem with the minification then an issue should be opened there.\n. Can you test if this happens with uglifyjs itself?\n. If this is an issue with uglify, can you open up an issue there? The grunt task is just a wrapper around that library.\nClosing task issue.\n. I've tested this locally and don't see the behavior you're seeing. There is also a test (definition, output) for non-mangling of source that works locally, what do you consider mangling? Name changes or whitespace changes?\n. Thanks for updating, glad you figured it out.\n. +1 for tests and documentation @DrewMartin.\n. Just specify mangle: false in the options like in this task config grunt-contrib-uglify/Gruntfile.js#L33-L40\n. This looks to still be a problem with dependency installation, now that the problem is with another of the npm modules.\nCould you paste the output of npm list in that dir noting any colored lines that get output?\n. Thanks for the tip @rndevfx \n. Does the uglifyjs cli run fine on your source outside of grunt?\n. Thanks for updating with the solution, I'll keep an eye on other issues to see if this needs better handling.\n. Thanks for the time to submit this PR. I merged an earlier PR with the similar feature, can you let me know if 0.2.6 solves your needs now?\n. That's just a parse error from uglify. Are you using valid javascript in that file?\n. Do you have a public repo where I can see this in action? \n. Yep, it looks like the preamble doesn't work when sourcemaps aren't used... I've added a test for it and will just prepend the banner in this case. Fix incoming.\nI'll open up an issue on uglifyjs so that we don't need to special case it.\n. Published fix in 0.2.7\n. What's the error? Have you updated dependencies recently?\n. What OS? Tests run on OSX 10.9 and travis-ci\n. That's how the browsers have implemented sourcemaps during debugging. You only visualize the original source code, it doesn't map every line and variable (which makes it largely useless, imo).\n. In the spirit of what uglifying is for, I would say no. It's designed to produce minimal code.\nI understand where you're coming from, but it seems like just a minor visual nuisance.\nIdeally, and maybe i'm wrong there, I would expect all license comments to be preserved and moved to the top of the resulting file so all the licenses could be viewed in one place, but i'm not even sure it is that important.\n. @tkellen @shama anyone on the grunt-contrib team a sourcemap expert? I don't use them at all and there are clearly loads of edge cases with their generation and that's what this task has largely become about.\n@mishoo do you have any interest in taking over the maintenance of this task?\n. I just need to spend appropriate time getting grunt-contrib-jasmine up to date for 2.0.0 and to add some features, so it would be good to have someone who's much more familiar with sourcemaps take this task over.\n. There are pass throughs for every option that you would need, it's a matter of people understanding how the options are translated from the command line to the uglifyjs api, as they are not intuitively mapped one-to-one.\nYou should be able to pass ascii_only : true to the beautify config in the task options to turn this on. All those parameters are passed directly to the UglifyJS output stream, which is where the command line options in passed to -b are sent.\n. @acharnley your code is eliminated because it is dead code. That's a function expression that isn't assigned or executed.\n@beaucharman mostly the same in your case, your function is executed but has no external side effects so is removed. Your conditional is essentially if (true) { /* blah */ } so it gets simplified for space.\nClosing because, in either case, if they were actually issues they'd still be issues for uglifyjs's repo, not any wrapping task.\n. @mattkime is right on both accounts. This task doesn't deal with any uglify mangle logic, and uglify is doing the right thing by optimizing away code that will never be run.\n. As the commit indicates this is already supported by setting drop_console to true as part of the compress options.\nCan you, instead, just update the documentation showing how to do it with the existing method so that there aren't just a load of mapped options?\n. ",
    "sindresorhus": "\nPerhaps we need grunt-contrib-uglify2?\n\nUhm, why? We have git tags. Please don't... We have enough repos as is.\n\nAnyone know what @mishoo's take on the naming is? Is the '2' in UglifyJS2 permanent, or will the project replace UglifyJS?\n\nI just asked about that earlier today. It looks like it's not permanent: https://github.com/mishoo/UglifyJS2/issues/39\n. > Comments?\nWhy would anyone need that?\n\nIf it helps making a decision, I could merge the packages immediately. ;-)\n\nYes, please :)\n. Sounds good to me :)\n. This should not be handled on a task level, since it's common to most tasks.\nWhy would you want the task to fail if it doesn't find any files? I would expect it to log and continue.\n. > If your intent is for the task to build a file from a set of files and it can't perform that task, it has failed. Right?\nHmm, ok, example. Lets say I have an image folder. Currently I don't have any images, but I know I will. I want to be able to set up my gruntfile anyway. images/**/*.png.\nI'm fine either way, as long as it's a way to toggle it.\n. > The solution to step past a hard failure there would be to just omit that task until there are files.\nWe're talking grunt.warn right? And not grunt.fail. Because it should at least be possible to --force it through.\n\nIt would be easy to create a method (or implicit getter property like .src is) that does exactly that, matches all files and then tests their existence, failing the task if any file doesn't exist. Thoughts?\n\nBut then it would be on a task level, which we don't want.\nI would rather see it as an option you can disable if you need to. Maybe grunt could have some global task options that every task inherits?\n. I like the sound of that :)\n. :rabbit: \n. It supports a function, just use a regex in there.\n. Closing for lack of activity.\n. @piuccio sure\n. ping\nalso need to fix merge conflict.\n. use grunt-contrib-coffee before this task.\n. And squash your commits.\n. You still don't need typeof, just equal undefined.\n. Alright, thanks :)\n. I would rather see a workaround than yet another option.\n. Most likely an issue with Uglify.\n. Have you tried grunt --force?\n. You also need to update the doc in the /docs folder\n. I don't see the point. There were no user visible changes. Changelogs should not be a copy paste of commits.\n. > Our changelogs aren't just useless copy/pastes of commits\nNeither did I say so. Don't misunderstand me. I use changelogs a lot, and I know the benefits very well, but for them to be useful they should actually contain relevant end-users info. In this case it would be: Removed grunt-contrib-lib and more colors. I don't see how that's useful at all. But ok, if that's how you want it.\n. Yes, this is all subjective. I just prefer keeping my changelogs clean and focused. I don't see a problem at all with version holes. It just means nothing interesting changed.\nExample of what IMHO makes a messy changelog: https://github.com/gruntjs/grunt-contrib-stylus/commit/c3c60cf43d02ad08543d805dd583369318c39fea#diff-d3bb3391c79904494c60ee2ac2f33070R5\nBut anyways. Let's leave it :)\n. thanks @jmeas :)\n. No, this is how markdown works.\nFix your editor to show whitespace and not strip it on markdown ;)\n. StackOverflow was the right choice. The issue tracker is for actual issues ;)\n. @gh-amistry if all you want is comments in your JSON files you might want to check out grunt-strip-json-comments ;)\n. This task is not using the latest maxmin version. That might be it. Both are using the browserify-zlib, so there's probably some version difference.\n. Issues with the output should be posted on the uglify repo: https://github.com/mishoo/UglifyJS2/issues/new\n. npm issue. https://github.com/npm/npm/issues/new\n. Use the rename option. Keep in mind that file config isn't specific to this plugin, but is a feature of grunt.\nSupport questions are better asked on StackOverflow.\n. Not clear what you're asking. But the banner option supports a string. What you do with that is up to you. For support questions, use StackOverflow.\n. If that's the case, a ticket can be opened here: https://github.com/gruntjs/grunt-contrib-internal/issues/new\n. You need to elaborate on what you're talking about.\n. Support questions are better asked on StackOverflow:\nhttp://stackoverflow.com/questions/tagged/gruntjs\n. I'm done discussing this on a myriad a plugins time and time again. Please bring this up on the main grunt issue tracker so there can be something coherent among the contrib plugins ;)\nFwiw, the opinion on verbose or minimal by default is like 50-50.\n. I also feel like we have a lot of duplicated code in plugins. We use grunt.file.write. Why can't the file count be shown automatically or with a simple method. More guidelines and DRYing would be nice.\n. > *.* text eol=lf\nThis is a bad idea. It will make everything text, even binary files like images. It should only be applied to specific extensions.\n. @vladikoff * text=auto does nothing for this as it still checks out in CRLF, but converts on LF on commit.\n. I don't agree. It's easier for everything to just stick to LF. All not completely awful Windows editors supports LF, so that's not a blocker either. But care.\n. > I'm not sure who should be blamed, grunt-contrib-uglify? uglifyjs? auth0-widget.js?\nuglifyjs\n. Upgrade npm. This is an npm install issue.\n. Support questions are better asked on StackOverflow:\nhttp://stackoverflow.com/questions/tagged/gruntjs\nPaste in the link to the question here so others can follow ;)\n. Uglify failed to parse your JS. You might have some invalid JS or there might be a bug with uglify.\nEither way, should be posted here: https://github.com/mishoo/UglifyJS2 along with the code from Line 2686 in .tmp/concat/scripts/app.js.\n. :-1:\n. @meschbach Exactly what it says, I don't think this is the right solution, but seeing as I don't have time to come up with a proper one, I'm willing to merge this if you fix the codestyle ;)\nI also don't see the point in having both false and 'none'.\n. PR welcome :)\n. It's already using latest.\nhttps://nodesource.com/blog/semver-tilde-and-caret\n. The readme is generated, so this needs to be added to docs/options.md too.\n. http://stackoverflow.com/questions/ask\n. No idea how jit-grunt works, but any compatibility issue should be opened there and not here.\n. https://github.com/olov/ng-annotate\n. This is not the right place for support questions. Use StackOverflow.\n. Any issue with the output should be posted on the Uglify issue tracker.\nhttps://github.com/mishoo/UglifyJS2/issues/new\n. No thanks. Outside the scope of this plugin.\n. This is the place to open issues about the uglify processing/output: https://github.com/mishoo/UglifyJS2/issues/new\n. This is just a plugin for Uglify. Open an issue here instead: https://github.com/mishoo/UglifyJS2/issues/new\n. Use grunt-contrib-concat to concatenate the files first.\n. That's an Uglify issue and nothing to do specifically with this plugin.\n. Reinstall this task and you'll have them.\nhttps://nodesource.com/blog/semver-tilde-and-caret\n. Learn semver ;)\n. The readme is generated. You need to update the source too.\n. Closing because of lack of response from OP.\n. This is already supported by grunt for all grunt tasks.\nhttp://gruntjs.com/configuring-tasks#building-the-files-object-dynamically\n. Should be posted on the Uglify issue tracker, not here.\n. Should be posted in the Uglify issue tracker, not here.\n. You can already set this in any grunt task => cwd. http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically\n. if (options.indentLevel) {\n. The spaces are there for a reason. Markdown linebreaks ;)\n. > Source Map\n. @RReverser Lgtm, but not my project and I'm not aware why this option was originally removed.\n// @vladikoff \n. lowercase s\n. lowercase s\n. ",
    "mikesherov": "Is this ready to go? I'd like to try uglifying jQuery using this and generate a source map.\n. ",
    "cowboy": "@jsoverson so I talked to @tkellen about this and had an idea.\nI'd love this plugin to support both the old uglify and the new uglify (defaulting to the new version) for as long as they are two separate packages. When they become the same package is when we officially drop support for the old version.\nSince they are separate packages, both versions of uglify can be specified as dependencies. In the grunt config, if an option like oldUglify: true is specified, the old uglify will be required instead of the new one, and the options will be handled differently. In the lib folder we could even have uglify.js and uglify-old.js to keep the code totally separate.\nBasically, just a big conditional thing around the current code and the old code, so that people can still opt-in to the old uglify if they really need to.\n(this can all be documented)\nComments?\n. @mishoo, is the new uglify backwards-compatible with the old one? Actually, what I'm getting at is, is there any compelling reason to leave support for the old uglify in here?\n. Ok, then.\n\nIf it helps making a decision, I could merge the packages immediately. ;-)\n\n+1\n. Thanks @mishoo. Let us know when that's done and we'll move forward with this!\n. @jsoverson it was more of a note to myself. Thanks!\n. If your intent is for the task to build a file from a set of files and it can't perform that task, it has failed. Right?\n. If not inside tasks themselves, how should grunt handle missing files? Keep in mind that grunt doesn't necessarily know how you'll be expanding the raw source files. It can provide a reasonable default, but sometimes you might need to override that default.\n. I think a task should fail when a specified src file doesn't exist.\n. Right. I'm just talking about us being consistent in contrib for 0.4 release.\n. So there are two use-cases that I see.\n1. \"do something with .foo, but only if they exist, because there might not be any\"\n2. \"do something with .foo, and warn me if they don't exist, because they had damn well better be there\"\nWith the former, it's as simply as taking this.file.src and iterating over it. If a pattern didn't match files, they won't be in the array, and nothing will happen.\nWith the latter, we need to do grunt.file.expand({nonull: true}, this.file.srcRaw) to retain patterns that failed to match, then we need to test grunt.file.exists(filepath) for each file, then warn or fail for each nonexistent file (ie. pattern that failed to match a file).\nIt would be easy to create a method (or implicit getter property like .src is) that does exactly that, matches all files and then tests their existence, failing the task if any file doesn't exist. Thoughts?\n. Also, would this be hard-coded into a task or specified in a config? Like, would a user want to be able to turn on this \"required-ness\" on or off? If you have an opinion on this, please show an example.\n. Still, for now what should we do?\n. I'm talking about behavior across all contrib plugin tasks. Should the behavior be consistent?\n. > I think a task should fail when a specified src file doesn't exist.\nCan we do that consistently across all contrib tasks? Should I file an issue on contrib? Should I just piss off?\n. Ok, pissing off. FOR NOW\n. In the grunt.file.expand* methods, we use the cwd option to specify the directory from which all files get matched. The cwd option, effectively, strips the specified string from the beginning of matched filepaths.\n. If you're using grunt 0.4.x, see the \"Building the files object dynamically\" section of the grunt Configuring tasks guide for some helpful info.\n. FWIW, I consider exposing libs on Grunt like grunt.util._ and grunt.util.async to be a huge mistake. It further ties plugin authors who may be consuming those libs to the specific versions that Grunt contains.\nThis seems innocuous, but consider the following scenario: Let's say Grunt uses v1.0 of Underscore for its .foo method, but not for its .bar method. If .foo behavior stays the same in v1.1, Grunt can safely upgrade internally to the new version, even though the .bar method may have changed.\nGrunt doesn't care, and probably doesn't even know that .bar has changed, but third parties who consume exposed grunt.util._ methods might be in trouble.\n. FWIW @bistory the first example you show isn't even valid JavaScript, so that kind of approach isn't possible.\n. It's possible that some people use it and care about seeing those size numbers. I'm going to /cc @rwaldron here because he might be using it in the jQuery build process. But I personally don't care too much, I'd be happy with it being an option.\nCan you verify the OP's claim before making any change?\n. Ok, so at the very least there should be an option.\nHow about this? Add a new option called report that can be:\n- false (default) - no before/after reporting\n- 'min' - show before and after (min) sizes\n- 'gzip' - show before, after (min) and after (min + gzip) sizes\nI'm sure that in certain situations, people will still want to see this output.\n. @jsoverson, do you know if the task became slower due to the move from gzip-js to zlib-browserify in this commit for gruntjs/grunt-lib-contrib#5, or if it was always super slow? /cc @shama \n. When you use the expand option, you tell Grunt to create a one-to-one mapping of src and dest files. What you want to do is simply specify one set of src files and one dest file.\nThis configuration will tell the uglify task to minify all files in fileList into a single output file.\n``` js\nvar fileList = [ \"js/file1.js\", \"js/file2.js\", \"js/file2.js\" ];//will be generated\nvar buildDir = \"build\";\nvar distDir = \"dist\";\n// Project configuration.\ngrunt.initConfig({\n    uglify: {\n        min: {\n            files: [\n                {\n                    src: fileList,\n                    dest: distDir + \"/js/my.min.js\"\n                }\n            ]\n        }\n    }\n});\n```\n. @tkellen I'd love some kind of standardization that people will follow. The problem is that we let them write JavaScript, which lets them do pretty much anything they want. No matter what we end up doing, someone's going to want to hack it in some way.\nYou know I'm all for the logger idea, I'm just waiting to see what direction node-task goes in before committing to a direction there.\n. Same comment as on lib-contrib, do you mean: false, 'min', 'gzip' ?\n. Same comment here: 'gzip'\n. ",
    "mishoo": "\nI'd love this plugin to support both the old uglify and the new uglify (defaulting to the new version) for as long as they are two separate packages. When they become the same package is when we officially drop support for the old version.\n\nIf it helps making a decision, I could merge the packages immediately. ;-)\n. > is the new uglify backwards-compatible with the old one?\nNope, the API is completely different.  That's why I made it a new package in the first place, because it can break packages that depend on v1 but don't explicitly list the version number in their package.json.\n\nActually, what I'm getting at is, is there any compelling reason to leave support for the old uglify in here?\n\nProbably not, except that v2 isn't as widely tested.\n. Settled, I'll merge the NPM packages, hopefully tomorrow. (that is, UglifyJS2 will be released as uglify-js, and I'll rename the CLI tool in v2 to just uglifyjs).  The Github repos will remain as they are for the time being, please let me know if there are any objections to this...\n. I just did it, like an hour ago.  You can now depend on package \"uglify-js\" and require(\"uglify-js\").\nEDIT: specify version 2.2.0 in package.json\n. @jsoverson Published v2.3.6 containing the change.\n. I'll release shortly, sorry for the delay.\n. ... as soon as NPM unbreaks, that is.  I keep getting \"npm ERR! registry error parsing json\" or authentication failure.\n. Done.  I had to npm login.  Didn't do this for ages.\n. @alonisser I can only advise you to file an issue at UglifyJS, if you feel the breaking change comes from there.  Please include a small test case which does not involve Grunt.\nThe idea is that @jrhite sent a PR for grunt-contrib-uglify which actually depends on a feature introduced in UglifyJS 2.4.18, so sooner or later it will have to upgrade.\n. @alonisser I do agree pinning down packages to a known working version is generally a good idea. However, if you see me sticking around and willing to help, it would be an even better idea to point out what is the actual problem with UglifyJS, rather than pushing for a quick fix that will break anyway in the long run.\n. I published v2.6.1 with a fix.\n. ",
    "shama": "Super late superfluous +1 :)\n. That error usually means you're trying to use a Grunt v0.4 plugin with Grunt v0.3 :)\nThis plugin is only compatible with Grunt v0.4.\n. That error occurs usually when you're trying to use a Grunt v0.4 plugin with Grunt v0.3. This plugin is only compatible with the latest in-development version of Grunt, v0.4.0rc4. Please read the FAQ about When will I be able to use in-development feature 'X'?. Thanks!\n. Same here as gruntjs/grunt-contrib-jshint#7\n. Have another look at gruntjs/grunt#606. It actually details switching back to this.files. The current implementation is correct. Thanks!\n. @MMRandy Check out this page: http://gruntjs.com/help-resources In short IRC or stackoverflow are your best options.\nClosing as it appears the original issue has been solved.\n. It's in the FAQ: https://github.com/gruntjs/grunt/wiki/Frequently-Asked-Questions which would then tell you to goto this page: https://github.com/gruntjs/grunt/wiki/Installing-grunt :)\n. Oh good call. Those are automatically generated by grunt-contrib-internal and appears that link was just updated in this commit. The link in the README should be updated in the next release :)\n. Which version of uglifyjs did you try directly?\n. Cool. Glad you pinpointed the issue because I couldn't find it. Closing here, thanks!\n. I think it has always been slow. But zlib-browserify appears to be slightly slower with this crude benchmark:\ngzip-js\nreal  0m3.261s\nuser  0m1.020s\nsys   0m0.161s\nzlib-browserify\nreal  0m18.117s\nuser  0m1.094s\nsys   0m0.195s\n. @danielst-vccp @jboesch Could post your gruntfiles?\n. Hmm glad it's working for you. I couldn't duplicate. My only guess is the src files didn't exist.\n. @tlindig Could you post the part of your gruntfile that you tried? The cwd is intended to work with expand. If you want the files concatenated you would need to prepend your buildDir to your fileList src paths.\n. grunt-contrib-uglify is for javascript. Try grunt-contrib-htmlmin.\n. Which version of grunt and grunt-contrib-watch? Could you also post your watch config portion too? Thanks!\n. Could you post your gruntfile? It looks like your target name is throwing it off because it's a url.\n. Wow that is quite the gruntfile. I don't see the uglify task being configured in it. Has it been modified since the error you reported?\nRunning \"uglify:dist/https:/maps.googleapis.com/maps/api/js?key={}&sensor=false\" (uglify) task\nVerifying property uglify.dist/https exists in config...ERROR\n. Glad you found a way that works for you.\nYou can ignore files in grunt by prepending ! to a pattern ie: src: ['uglifythese/*.js', '!ignorethese/*.js']\n. http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically\njs\nuglify: {\n  things: {\n    src: '*.js',\n    cwd: 'build/public/js/',\n    dest: 'build/public/js/',\n    expand: true,\n    ext: '.min.js',\n  },\n},\n. Thanks for the PR! I think most people at this time will want to see those log messages without verbose turned on. FWIW, controlling the verbosity of grunt.log will be much more flexible in the next version of Grunt. Thanks!\n. It's true. It is a very common request to control the level of output in all grunt tasks. Each person has their own opinion on that level. So rather than continually chasing opinions or implementing options we're going to address this in grunt-log which will let users more easily control the output.\n. Thanks again Chris!\n. Thanks for the PR! Sorry if it is a bit too verbose right now. But rather than implementing a new option here (as we would likely then have to implement a similar option throughout the other plugins) we're going to better solve this issue in the next version of Grunt. You can monitor progress on the next version of grunt.log in this repo: https://github.com/gruntjs/grunt-log Thanks!\n. It seems you're compiling into the same folder dest as you're reading from src. So it's including hello.min.js on the second run and producing the result it has been instructed. You can ignore patterns by prepending ! to the pattern.\nI recommend not writing to the same folder you're reading from otherwise make sure to explicitly exclude the  compiled files.\n. The next version of grunt will allow more finer grain control over the log output. So it will be better to wait for that instead of implementing more options for log control per task at this time.\nAs a workaround, you can monkey patch with grunt.log.writeln = function(msg) {}; in your Gruntfile to silence logging.\n. files is either an array or object format, see: http://gruntjs.com/configuring-tasks#files-object-format\nI think your first example is intended to be this instead:\njs\n uglify: {\n    my_target: {\n      files: [{\n        expand: true,\n        cwd: 'public/cdn/js',\n        src: '**/*.js',\n        dest: 'public/cdn/js'\n      }]\n    }\n  },\n. Closing for same reason given here: https://github.com/gruntjs/grunt-contrib-cssmin/pull/36#issuecomment-23628724 Thanks!\n. Odd version numbers of node are development only versions. You're not supposed to be using development versions of node with any node module, unless you're developing node.js.\nSo in an effort to avoid us having to add this note about common node.js knowledge to every node module we maintain as well as update said note with each release of node... I'm not going to accept this patch. Thanks anyways though!\n. Ah ok, well welcome to node.js! I just added a note about unstable node.js versions to our grunt getting started guide. Hopefully that will help others avoid the mistake. (It is here https://github.com/gruntjs/grunt/wiki/Getting-started and will appear on the website after the next push). Thanks!\n. It sounds like your package.json file had invalid JSON. It must be a valid JSON file for npm to work.\n. Preserving comments is primarily because certain licensing requires the comments to stay in tact. Readability should not be a concern when uglifying (that is what unminified and sourcemaps are for). The above output is correct as it is trying to minimize the file size while keeping the license in tact.\n. The tilde in ~2.4.0 means it will install the latest patch version which would be 2.4.4. If it's not installing the latest version it's likely because you have a cached local copy. Do npm cache clean and then npm install grunt-contrib-uglify.\n>= 2.4.4 means it would install any version greater than that effectively creating a wildcard version.\n. This task uses UglifyJS2 under the hood and it does all the transformations. Would you mind taking a look in their issue tracker for this issue and if not there, open it up over there? Thanks!\n. Thanks!\n. Thanks!\n. > Major version zero (0.y.z) is for initial development. Anything may change at any time. The public API should not be considered stable.\n. @sindresorhus Why force line endings? We only care that the line endings when committed are unix. Users should get whatever they prefer, right?\n. Now the tests are platform independent with e75540c5260f2175cc34290ce700b4f01abdc390 which IMO is a better strategy than using git to force line endings.\n. ",
    "davidtheclark": "I have a followup question for this discussion, related specifically to my use of grunt-contrib-uglify:\n@sindresorhus suggested above \"Why would you want the task to fail if it doesn't find any files? I would expect it to log and continue.\" ---- so is there any way right now to log those missing files? I've tried verbose and debug modes but don't get any indication that a file has not been found. (Debug gives no indication; verbose just gives a blank OK, e.g. Reading js/nav.js...OK    Reading js/faq.js...   OK    OK -- that last OK is in place of a file that doesn't exist.) \nHave I missed something, or is there no way right now to be notified (whether or not the task fails) when a file is not found?\n. ",
    "andrewwakeling": "@cowboy Apologies for pulling you back to this issue, but I would love to get your feedback.\n. ",
    "MaximRouiller": "Just had that issue. \nHad something named Scripts/my.datepicker.js included in the uglify list.\nFile is named Scripts/my-datepicker.js. No warning. No failure. Nothing in verbose.\nWhat about... If there's a non-wildcard path, we ensure that file at least generate a warning of a \"FAIL\" in the verbose log? Just my 2 cents.\n. Hey, it's javascript. It should fail without any warning and no logs and be leaving you wondering what the hell happened for 3 hours.\nHow else are we going to justify our salaries? \nJokes aside... re-opening this issue would be a first step.. ",
    "nicolasxu": "I need the task to FAIL if the file (without wild character) I specify doesn't exist!!!\n. ",
    "cantuket": "This is kind of insane....\nA 4yr old issue, closed and re-opend 3 times and still no straight forward answer for something I'd expect to be the first option listed in the documentation. Please, how do you log missing files?\nI just spent over an hour sifting through my Grunt configuration!!!\ngrunt.log.warn = grunt.warn;\n...not working \noptions: {\n                sourceMap: true,\n                debug:true,\n                nonull: true\n              },\n...not working\n. ",
    "chill117": "In my opinion nonull: true should cause the task to fail (not just log and continue).. ",
    "bgmat": "Hey, this is kind of old, but it might be useful to someone ...\nThe nonull: true works (outputs an warning) if the files are written like this:\nfiles: [\n    {\n        src: ['a.js', 'b.js', ...],\n        dest: 'c.js',\n        nonull: true\n    }\n]\nThen, you can find here how to stop on this warning.. ",
    "craveytrain": "Sorry for the dupe pull request, I accidentally stripped out the trailing whitespace in the markdown.\n. Sorry about that. Thanks for catching it.\n. Not distract from the commit, but how did you get travis ci to see your pull request? Mine isn't showing up there and admittedly I'm new to travis ci.\n. ",
    "jakearchibald": "Ah. Didn't know about the readme thing.\nThe currently documented method didn't work for me, so I assumed the docs hadn't been updated. Also, from a quick glance at the src (https://github.com/gruntjs/grunt-contrib-uglify/blob/master/tasks/uglify.js#L44) it seemed to be expecting 'dest' to be set.\n. Now that I read https://github.com/gruntjs/grunt/issues/229 it looks like the version of grunt I'm using isn't up to date with the docs. Will file a ticket if there's a good reason why some of the examples are failing for me.\n. Here's the definition for DefaultsError: https://github.com/mishoo/UglifyJS2/blob/master/lib/utils.js#L84\n. ",
    "dylang": "Figured out that define is already supported, just not well documented.\ncompress: {\n                    drop_debugger: false,   // don't remove debugger;\n                    warnings: false,        // don't show any warnings\n                    global_defs: {\n                        DEBUG: true\n                    }\n                }\nClosing this because I have a pull request in for wrap support.\n. @craveytrain I didn't do anything special, it just happened. This was my first pull request in years, guess I got lucky? \nI think I might have created an account or wired my github profile to Travis CI, maybe that's what did it?\n. Great point @jsoverson, I'll add that doc now and rename the variable which I indeed got from the uglify cli code.\n. @jsoverson - I've updated this pull request with the lastest from master to make the merge painless.\n. @jsoverson - if you include the license that way can you still use Grunt tags in it?\nFor example:\nCopyright (c) <%= grunt.template.today(\"yyyy\") %> Doodle or Die, LLC.\nBuilt on: <%= grunt.template.today(\"dddd, mmmm dS, yyyy, h:MM:ss TT\") %>\n. Oh, I could easily create that license file in another task. \n. I've updated this PR to use the API suggested by @cowboy above. I also submitted gruntjs/grunt-lib-contrib/pull/6 to incorporate that API.  \nA separate report task would be a nice alternative but this is a clean solution to the problem until we have time to create the reporting task.\n. Updated readme to quote 'min' and 'gzip', thanks @cowboy for reviewing and feedback.\n. ",
    "nilsel": "Have you tried using grunt-contrib-uglify 0.1.1rc6?\nusing 0.1.0:\n ~/Sites/work/.../trunk \u2b80 grunt\nRunning \"uglify:dist\" (uglify) task\nWarning: Cannot read property 'srcRaw' of undefined Use --force to continue.\n~/Sites/work/.../trunk \u2b80npm install grunt-contrib-uglify@0.1.1rc6\n\n ~/Sites/work/.../trunk \u2b80 grunt\nRunning \"uglify:dist\" (uglify) task\nFile \"src/.../.../js/all-min.js\" created.\nUncompressed size: 636101 bytes.\nCompressed size: 148494 bytes gzipped (517688 bytes minified).\nDone, without errors.\n. ",
    "praveenvijayan": "Thanks @nilsel,  grunt-contrib-uglify@0.1.1rc6 worked.\n. ",
    "netpoetica": "Thanks this is a good solve. Someone should put this on the README right away on the home page as this issue will be around for a little while I'm sure\n. ",
    "tori3": "I removed the option of 'sourceMapName'. Instead, 'sourceMappingURL' and 'sourceMap'  are support  either a function or a string.\n. ",
    "SBoudrias": "Hey thanks, I guess that's the best yeah.\n. Same problem here.\n. ",
    "codfish": "\"Right now I think the wrap option only allow to wrap all inside an IIFE.\"\nCan someone please share an example of how this is done possibly? I can't find one anywhere. Thanks in advance!\n. ",
    "milaniliev": "Hit this issue too, confusing as all get out until I disabled banners.\nMaybe emit a warning when banner and sourceMaps are on, and \npreserveComments : 'some'\nor higher is not set?\n. ",
    "gibson042": "jQuery ran afoul of this as reported at http://bugs.jquery.com/ticket/13776.\nMy thoughts: a fully general fix may not be possible, but (as a workaround while waiting for an upstream fix) you could avoid requiring preserveComments: \"some\" by putting a non-side-effect-free expression of equal size in place of the banner (e.g., /*!\\nbanner\\n*/ \u2192 ++[\\n000000\\n];) and replacing it in the output.\n. ",
    "karol-f": "Thank you for writing about this issue. It helped me a lot after hours of fiddling with code!\n. ",
    "chriszarate": "Another thank you for writing up this mystifying issue. This should really be in the docs!\n. ",
    "mgol": "For what it's worth, we're workarounding this issue in jQuery currently: https://github.com/jquery/jquery/blob/master/build/tasks/uglify.js\n. @jsoverson Not necessarily. Many projects, like jQuery, use simpler banners for minified source; compare http://code.jquery.com/jquery-2.1.0-beta1.js and http://code.jquery.com/jquery-2.1.0-beta1.min.js.\n. Worth noting is that if I use uglifyjs directly, I get this:\njavascript\nvar j;(function(){\"use strict\";j=function j(){}})();\nwhich is completely fine.\n. $ uglifyjs -V\nuglify-js 2.2.5\nJust the latest one from npm.\n. OK, UglifyJS returns the same output if you pass the --mangle parameter to it.\n. Reported here: https://github.com/mishoo/UglifyJS/issues/485\n. The just released (and published to npm) uglify-js version 2.3.0 has built-in support for the --screw-ie8 option, one more reason to add support for that.\n. Current version is 2.3.5, could you update the pull request?\n. Great, thx to @existentialism forthat one! :)\n. The pragma has been updated in WebKit, Chrome and is just about to be pushed to Firefox:\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=870361\nI think it's time to switch.\n. Ah, and I forgot about the stable Chrome 27 supporting only the obsolete pragma. I'll keep monitoring the issue.\n. This is a Chrome-only issue (well, also the newest Opera but it's because it's Chromium-based). All other browsers in all versions either don't support source maps or support both //@ and //# pragmas. Chrome does so from version 29 but current stable is only 27 (28 is supposed to arrive soon). Waiting until Chrome 29 hits stable seems reasonable.\n. Developers who want the new format may always fork grunt-contrib-uglify and introduce the change by themselves. It goes both ways!\nI don't see how switching to the new pragma and cutting out support for stable Chrome is better than using a format that was official not so long ago and that is still widely supported, just for a little longer.\n. Chrome 29 with support for the //# sourceMappingURL syntax has just been released. Considering the extremely rapid release of this browser, grunt-contrib-uglify can now safely switch to //#.\n. This can be closed now. :)\n. This fixes issue #63\n. This will need a new release as well. ;)\n. Thanks!\n. Test failures seem unrelated to this PR.. ",
    "guybedford": "An alternative here would be to modify the source map to add in padding for the length of the banner lines. Luckily this is actually a straightforward operation:\nEg:\njavascript\n{\n  mappings: \"AABC,CCDD\"\n}\n->\njavascript\n{\n  mappings: \";;;;AABC,CCDD\"\n}\nWhere the banner is 4 lines long.\nCould be an option if this isn't supported by uglify.\n. ",
    "tomasdev": ":+1: to this bug. It reaaaaaally needs a fix. For the time being, I've moved banner to footer: \"\\n\" + banner\n. ",
    "mmatzanke": "Thx!!! So i've to prepare the configuration first.\n. ",
    "MMRandy": "Wow, the lack of wildcard support for uglifying multiple, separate files seems a little surprising given that it appears to be so prevalent in most plugins that do these types of things.\nSure hope this gets added soon :)\n. Thx @cowboy...that's exactly what I am doing now...upgrading everything from 0.3x to 0.4.  I'll give that a look.  I have already done 14 other tasks successfully...2 to go, this one and some type of regex string-replace that works with 0.4.  That one is eluding me at the moment. \n. Wow, that was easy.  Upgrading to 0.4.x is worth the effort...pretty bad a$$.  Thx again!  \np.s.  Sorry to hijack the thread @cowboy, but where would be the best place to ask general questions about where to find certain plugins, like the 0.4.x compatible regex search & replace I mentioned above?  Thx again.\n. ",
    "cyberience": "This may help you. using bash script to handle the multi file issue.\nfind . -type f -exec ls \"{}\" \\; |  grep .js | xargs -n 1 java -jar yuicompressor-2.4.8.jar\njust change the yuicompressor part to your fav compressor, find will hunt the files and pass them 1 by 1 to xarg filtering only js files through grep. and xarg makes the file an imput paramet for the compressor.\n. ",
    "omidraha": "I use this:\nuglify: {\n    dev: {\n        options: {\n            mangle: true\n        },\n        files: [{\n            expand: true,\n            src: 'dist/assets/js/*.js',\n            dest: 'dist/assets',\n            cwd: '.',\n            rename: function (dst, src) {\n                // To keep src js files and make new files as *.min.js :\n                // return dst + '/' + src.replace('.js', '.min.js');\n                // Or to override to src :\n                return src;\n            }\n        }]\n    }\n},. ",
    "robots4life": "Original files in resources/vendor/js folder.\nMinified files in resources/vendor/js/min folder and .min.js file ending.\nuglify: {\n  options: {\n    mangle: false\n  },\n  all_vendor_js: {\n    files: [\n      {\n        expand: true,\n        cwd: \"resources/vendor/js/\",\n        src: [\"*.js\", \"!*.min.js\"],\n        dest: \"resources/vendor/js/min/\",\n        ext: \".min.js\"\n      }\n    ]\n  }\n},\nIf you want them to be minified to the same directory as they are in and give them a different file ending, .min.js, use this.\nuglify: {\n  options: {\n    mangle: false\n  },\n  all_vendor_js: {\n    files: [\n      {\n        expand: true,\n        cwd: \"resources/vendor/js/\",\n        src: [\"*.js\", \"!*.min.js\"],\n        dest: \"resources/vendor/js\",\n        ext: \".min.js\"\n      }\n    ]\n  }\n},\n..and if you need to uglify es6 code you can't but you can transpile it to es5 and then uglify it. To transpile you could use grunt-babel. This is what would take es6 js files and make es5 js files from them in a separate folder adding the es5.js file name.\nbabel: {\n      options: {\n        sourceMap: true,\n        presets: [\"env\"]\n      },\n      dist: {\n        files: [\n          {\n            expand: true,\n            cwd: \"resources/js/es6/\",\n            src: [\"*.js\", \"!*.es5.js\"],\n            dest: \"resources/js/es5/\",\n            ext: \".es5.js\"\n          }\n        ]\n      }\n    },\nFor babel you need\nnpm install --save-dev grunt-babel babel-core babel-preset-env --verbose\nand grunt-tasks\nnpm install --save-dev load-grunt-tasks --verbose.\n. ",
    "mootcycle": "Ah, thanks. :)\nProbably worth fixing the link in README.md as well.\n. Awesome.\n. ",
    "webgefrickel": "Note: it works when I set the sourceMappingURL explicitly in the Gruntfile.js:\noptions: {\n  sourceMap: 'js-min/script.min.map',\n  sourceMappingURL: '/path/to/assets/sth.min.js'\n}\nsourceMapRoot doesn't seem to be evaluated at all.\n. Ah, OK. That really is kind of confusing - at least for me. Adding that line 'sets the sourceRoot field' would be enough, I think. \nSo i got my example above to work (and properly linking sourceFiles in Chrome e.g.) with \nuglify: {\n      all: {\n        options: {\n          sourceMap: 'js-min/sth.min.map',\n          sourceMappingURL: '/path/to/assets/js-min/sth.min.map',\n          sourceMapRoot: '/path/to/assets'\n        },\n        files: {\n          'js-min/sth.min.js': [\n            // lots of files from js/*.js and libs/*.js....\n          ]\n        }\n      }\nInterestingly I have to specify the sourceMapRoot without a trailing slash - maybe we should note that, too.\n. ",
    "wjbryant": "I was confused by the purpose of this option as well. After a little research, I found that sourceMapRoot isn't supposed to affect the sourceMappingURL at all. Instead, it sets the sourceRoot field in the source map file as described in the Source Map Revision 3 Proposal.\n. This was also discussed in https://github.com/mishoo/UglifyJS2/issues/47.\n. @jsoverson I think adding a line to the description that says that it sets the sourceRoot field in the mapping file would make it a lot clearer. Maybe something like this:\nsourceMapRoot: The location where your source files can be found. This sets the sourceRoot field in the source map.\n. ",
    "MoOx": "The thing is, I don't find (I probably miss something) a nice way to load unminified js. I don't want to add every js in my html templates for dev, & I don't want to use something like a \"concat\" task for dev which make me maintain 2 list of js. I don't use a requirejs solution since I've fews vanilla js scripts with no dependencies.\nAnd since I use sourcemap during dev with sass (really convenient to have real line number & filename), I was thinking to use the same workflow for js, to get real file available in my browser.\nAm I thinking or doing something stupid ? Please tell me if you think so, or if you have a better idea.\n. ",
    "thanpolas": "I think you answered your question:\n\nThe only difference here is any logic that exists in the task is to workaround API deficiencies in UglifyJS2 when it was being developed and to standardize usage with other tasks and grunt best practices.\n. @tkellen that's all i wanted to hear about (node-task). \n\n@jsoverson it makes sense for me to leverage this task in my project, as it already has a grunt layer on top of it. As i said, my main intension was to hear your thoughts on this. Thank you.\n. ",
    "bitliner": "The problem is grunt.io page contains example about uglify not updated.\nNow my Gruntfile.js is\n```\nmodule.exports = function(grunt) {\n// Project configuration.\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    uglify: {\n      options: {\n        banner: '/! <%= pkg.name %> <%= grunt.template.today(\"yyyy-mm-dd\") %> /\\n'\n      },\n    target1:{\n       files:{\n        'build/foo.min.js':['src/foo.js']\n        }\n         }\n    }\n  });\n// Load the plugin that provides the \"uglify\" task.\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n// Default task(s).\n  grunt.registerTask('default', ['uglify']);\n};\n```\nand it works fine\n. ",
    "bistory": "Unfortunately, this new syntax disallow using variables for the dest file...\nFor instance,\njavascript\n        uglify: {\n            dist: {\n                // Use banner and concatenated JS file\n                '_static/js/' + jsName + '.min.js': [\n                    '<banner:meta.banner>',\n                    '<config:concat.js.dest>'\n                ],\n            }\n        }\nWon't work but :\njavascript\n        uglify: {\n            dist: {\n                // Use banner and concatenated JS file\n                src: [\n                    '<banner:meta.banner>',\n                    '<config:concat.js.dest>'\n                ],\n                dist: '_static/js/' + jsName + '.min.js'\n            }\n        }\nWorked when using grunt 0.3...\n. I know @cowboy , it was to illustrate the small issue I'm facing because of the \"compact\" syntax...\n. ",
    "keelii": "sorry~ just google npm grunt-native2ascii\n. ",
    "plong0": "Seems like the ASCIIOnly option works as well...\noptions : {\n    ASCIIOnly: true\n}\n. ",
    "Takazudo": "Oh, thanks!\nI didn't know compress option very well.\nNow I found what was wrong about my code.\n. ",
    "smithclay": "Sure, just added it to uglify-examples.md.\n. ",
    "evanworley": "+1 This is an annoying delay\n. ",
    "ngryman": "@cowboy I confirm the size report can very useful, particularly for library devs who cares about releases size.\nIn my case I've use extensively this feature to reduce the size of my lib by tweaking it and comparing the results in your report.\n. ",
    "ibc": "Forget it please, I've got it working right now.\n. ",
    "danielst-vccp": "What was the solution to this, I'm having the same issue?\n. I had a typo in my src path. hangs head in shame\n. Bingo on the typo! Thanks for that!\n. ",
    "jboesch": "I'm also having the same issue.\n. Here: https://gist.github.com/jboesch/5726186\n. Wow. Simply deleting and re-creating Gruntfile.js made everything work for me. Strange.\n. It was strange. My IDE didn't pick up that it was a .js file and it didn't do any syntax highlighting. It was only when I deleted then recreated the JS file that I got the syntax highlighting and was able to run everything.\n. ",
    "Arkkimaagi": "I had similar problems, misspelled src path. Would have been easier to solve if the error message would have been a bit less vague. Maybe when in verbose mode: \"unable to find 'src/mypath/jguery.js'\" or something like that could be helpful to see that \"oh, there's a typo\".\n. ",
    "akzhan": "Same trouble. @evanworley are you opened issue at uglifyjs already?\n. @clyfish This issue has been resolved by #46.\n. you can add PR for it.\n. I have fixed this manually, but with no success in overall:\nConfig. task:\ncoffee\n    fix_source_maps:\n      development:\n        expand: true\n        cwd: 'root/js'\n        src: [ '*.map' ]\n        dest: 'root/js/'\n        ext: '.map'\nTask code:\ncoffee\n  do (JSON) ->\n    grunt.registerMultiTask 'fix_source_maps', 'Fixes uglified source maps', ->\n      grunt.verbose.write \"Source maps in fixation process\"\n      this.files.forEach (f) ->\n        src = f.src.filter (filepath) ->\n          # Warn on and remove invalid source files (if nonull was set).\n          unless grunt.file.exists filepath\n            grunt.log.warn 'Source file \"' + filepath + '\" not found.'\n            false\n          else\n            true\n        json = grunt.file.readJSON src\n        new_file_value = json.file.replace /root\\/js\\//, ''\n        return  if new_file_value == json.file\n        json.file = new_file_value\n        grunt.file.write f.dest, JSON.stringify(json)\n        grunt.log.writeln('Source map in ' + src + ' fixed');\n. This is kind of https://github.com/mishoo/UglifyJS2/issues/101 issue.\n. See also #71.\n. ",
    "clyfish": "compute_char_frequency reduces gzipped file size.\nI tested uglifyjs directly (with jquery), the output is stable.\n. @akzhan , But the output of uglifyjs is the same for me(test with jquery multiple times), and it generates smaller output with compute_char_frequency. Why comment it out?\n. ",
    "doberkofler": "You @jsoverson already closed the issue before I was able to report the requested number but maybe it still helps.\nI now compared grunt-contrib-uglify@0.1.1 with the latest grunt-contrib-uglify@0.2.0 with the following results:\ngrunt-contrib-uglify 0.1.1 (showing gzipped size) -> 5.24 secs\ngrunt-contrib-uglify 0.2.0 (report: 'gzip') -> 32.65 secs\ngrunt-contrib-uglify 0.2.0 (report: 'min')-> 5.25 secs\nIn my environment (Windows 7 x64) version 0.2.0 without showing the gzipped size is about as fast as 0.1.1 was when showing the gzipped size. When showing the gizipped size 0.2.0 is still about 6 times slower then 0.1.1.\n. ",
    "colinmeinke": "I'm also finding this a problem.\n'uglify': {\n    'js': {\n        'files': {\n            'js/scripts.min.js': grunt.file.readYAML('js/scripts.yml')\n        },\n        'options': {\n            'sourceMap': 'js/sourceMap.js'\n        }\n    }\n}\nThis prefixes file in sourceMap.js with the js directory even though they have both been output here:\n\"file\":\"js/scripts.min.js\"\n. ",
    "sorccu": "This is actually a grunt-contrib-uglify problem, not an UglifyJS2 problem. The problem is that minify() in tasks/lib/uglify.js is always given the destination file as an argument, but is then only used for setting the file property and nothing else. This can be confirmed by following the flow:\n1. https://github.com/gruntjs/grunt-contrib-uglify/blob/master/tasks/uglify.js#L92\n2. https://github.com/gruntjs/grunt-contrib-uglify/blob/master/tasks/lib/uglify.js#L21\n3. https://github.com/gruntjs/grunt-contrib-uglify/blob/master/tasks/lib/uglify.js#L29\n4. https://github.com/gruntjs/grunt-contrib-uglify/blob/master/tasks/lib/uglify.js#L97\n5. https://github.com/gruntjs/grunt-contrib-uglify/blob/master/tasks/lib/uglify.js#L135\nUglifyJS.SourceMap does not care what file it is given, it will happily accept anything. This means that if we had a suitable option for setting the wanted filename, it would be extremely easy to implement. However, personally I think that rather than implementing a new option, it would be better to somehow redesign the source map options so that Grunt's expand, cwd and other options could be used. Currently, it seems that everyone is using functions to set the filenames, which may be a sign that the defaults are unreasonable. I'm not sure what exactly the better implementation would be, though.\nMeanwhile, here's a horrible, horrible monkey patch to implement a new sourceFile option, which sets the file property. Make sure that it runs before the grunt-contrib-uglify plugin is loaded and it will work nicely.\n``` coffeescript\n    # Monkey patch grunt-contrib-uglify to produce proper 'file' properties\n    # in source maps. Remove when implemented/improved in grunt-contrib-uglify.\n    do ->\n      uglify = require 'grunt-contrib-uglify/tasks/lib/uglify'\n      originalInit = uglify.init\n      uglify.init = ->\n        exported = originalInit.apply uglify, arguments\n        originalMinify = exported.minify\n        exported.minify = (files, dest, options) ->\n          dest = switch typeof options.sourceFile\n            when 'function' then options.sourceFile dest\n            when 'string' then options.sourceFile\n            else dest\n          originalMinify.apply exported, arguments\n        return exported\ngrunt.loadNpmTasks 'grunt-contrib-uglify'\n\n```\n. ",
    "mattkime": "I'm facing this problem as well. \nI'm tempted to create a 'sourceMapsUseRelativePaths' option which automagically calculates the relative path between the js and the map. from the map it'll once again calculate relative paths for the file field and the sources.\n. I'm looking at pitching in on the effort in the next couple of days. I'm working on a very large project that needs this issue to be resolved to add sourcemap generation to our build process. Would be nice to know where things stand so I can be most effective. \nSeems like sourceMapRelative is the way to go...but i want to make sure that means the path relative between files (js, map, min)\n. I really like the move toward simplicity but i think this goes just a bit too far. I like the idea of a single argument but i'd prefer that it take a function so i can modify the filename. (I'm working on a project that has complex rewrite rules and map files that end in 'map.js' makes my life much easier.)\nI was considering moving the path mangling bits over to the lib file and exposing them independently. this would allow them to be tested independently which should make for simpler and easier testing of this subcomponent of functionality. \nit would also be nice to get a set of use cases that need to be supported. i want my js, minified js, and map files all in the same directory structure but i suspect that other people out there have much different needs. \n. Well done. I hope decisions regarding this can be made quickly. I suspect that I have a window over the next week and a half where i can dedicate some time to this if needed.\nI might consider putting your branch into production if it does what i need. \n. verified that it works for me. \nwill look at adding a bit of flexibility.\n. nice!\n. grunt-contrib-uglify is a front end for UglifyJS2 so it should support the options that UglifyJS2 allows. that said, it seems kind of silly to support UglifyJS2 options on a one-by-one basis. shouldn't we add support for all of them? given the number of options, it might make sense to split config options between those passed directly to UglifyJS2 and those which are used directly by grunt-contrib-uglify.\n. @acharnley - i'm a bit confused by your expected output.\nalso, your issue is likely with https://github.com/mishoo/UglifyJS2 and not grunt-contrib-uglify.\n. might be an uglify problem instead of grunt/uglify problem. can you try running uglify directly?\nhttps://github.com/mishoo/UglifyJS2\n. likely an issue with https://github.com/mishoo/UglifyJS2 rather than grunt-contrib-uglify\n\n\nif (! /@cc_on!@/ 0) return;\n\n\nthe comment confuses me. otherwise this is a statement that will always resolve as true therefore the rest of the fn will never execute there fore uglify is doing the right thing. \n. what configuration are you using?\n. have you tried it without the sourcemap root?\nOn Mon, Jan 20, 2014 at 12:32 PM, Reza Akhavan notifications@github.comwrote:\n\n...options: {\n  sourceMapRoot: '/',\n  sourceMap: function(filePath) {\n    return filePath + '.js.map';\n  }},...\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/gruntjs/grunt-contrib-uglify/issues/142#issuecomment-32780078\n.\n. take a look at the files being produced and see where the data is being created incorrectly. also try running with --verbose - perhaps we can see what is being fed into uglify\n. i'd see if you can remove that leading \"../\" by changing how you're referencing the js files in your grunt task. do you have a cwd set?\n. this project is only a wrapper for uglify2. so the problem is unlikely to be with this project. \n\nhow do the files created with 0.3.1 and 0.2.3 differ?\n. have you tried running uglify2 directly on the file? do you still see the error?\n. sound like a bug with https://github.com/mishoo/UglifyJS2 rather than grunt-contrib-uglify\n. have you tried testing this against https://github.com/mishoo/UglifyJS2 directly? grunt-contrib-uglify is only a wrapper for it. \n. update your copy of grunt-contrib-uglify\n. ",
    "jamesplease": "Fixed in v0.3.0\n. This task still delegates to uglifyJS2.\n. What warning is UglifyJS2 giving?\n. The default value is actually:\njs\ncompress: {\n  warnings: false\n}\nwhich is how you can silence the warnings.\n. It might seem a bit strange at first, @XhmikosR, but when you read the docs you might agree that it makes sense as a pretty powerful way to support all of Uglify's options without making too many options for this task.\n. I just installed the dependencies before running these tests, actually. And I updated the issue to clearly show what the error is.\n. Upon pulling the original source down (as opposed to working with my fork), the test passed. So I deleted my fork, made a new one, and, alas, it all seems to be working again. It's rather odd, though, seeing as I hadn't made any changes to the forked repo I was testing on. In any event, the case seems to be closed. Thanks for looking into this, Jarrod.\n. Are you still having this issue? Can you show any examples?\n. I've got a working fork of this, as well, but I got caught up with fixing the unit tests. My first go-through made it far too customizable, I think, allowing you to specify the name of the source map, and where to put it, and so on. I was thinking of moving away from this and going the grunt-contrib-sass route and simply having a single option: sourcemap, that's either true or false. If you set it to true, it does the rest for you.\nWhat do y'all think?\n. A solution to consider would be to completely break away from the currently method that grunt-contrib-uglify uses to generate source maps. It works, but it's a bit convoluted. As @tkellen has given us the go-ahead to break backwards compatibility, we should take advantage of this opportunity, I think, to make the best source map method that we can.\nSomething as simple as grunt-contrib-sass's implementation might be a good starting point. It works in the same way I described above, with just a single option, sourcemap, that can be either true of false. It calculates the relative directories from the input files/output file, and does the rest for you. That seems to be the easiest way to handle source maps.\nFuture updates could make it as feature-rich as grunt-contrib-less's implementation.\nWhile we lose backwards compatible with both of these approaches, the gains of consistency with the other grunt contrib projects and also ease of use outweigh that.\n. An alternative way to fix this issue is #122, which breaks backwards compatibility but should make things much easier to configure.\n. Have there been any updates on this issue?\n// @tkellen\n. I considered this option, but I figured it surely sets the banner as a comment, and therefore wouldn't be executed as code.\nEven if that did happen to work, though, it'd be nice to see a solution to the problem that doesn't feel so hacky. Know what I mean?\n. Oh, nifty. I didn't know that. I've already moved over to jsmin, but I'll keep this in mind for the future.\n. If uglify.minify throws an error, don't we want that error to propagate up to the user? I'd be more worried about this implementation which seems to hide the error by simply copying over the src files to the destination.\nWhat's a situation when you're fine with uglify.minify throwing the error and want it to silently be ignored?\n. I agree that more customization is useful and good, and definitely something that should be added at some point. I only chose to keep it simple here to avoid the issues that can arise out of complexity. I don't think it'd be too much more work to support custom names, so that could be added before the merge if we wanted to wait a bit for that feature to be added. It might take a bit for me to get around to it, though.\nYou make a very good point about moving the path mangling to a separate location for independent testing. I can look into doing that in a few days, too.\nAs to your last point, I think this implementation puts us on a path that could one day support all possible configurations. Namely, putting the different files wherever you want so long as the client has access to them. It doesn't yet, but it's something that could be added down the line, I think. It would really just be extending the logic that calculates the relative paths.\nWith that said, my thought was that this initial push would be suitable for many use cases, where the source map name and destination don't really matter \u2013 just that they exist.\n. All of the discussed functionality has been added. The sourceMap option can now be one of three types of values:\nboolean - Creates a map and places it in the same directory as the dest file, and gives it the same name with a .map extension.\nstring - The file to write the source map to. For instance, build/source.map\nfunction - Generate the name of the map dynamically. The function is passed the name of the dest file as the argument.\nThere are lots of new unit tests for this update, as well.\nThis PR, assuming all is well is good, now has the exact same functionality of the current implementation and more. It's also one option instead of however many there were before, so setting up a source map should be much simpler and more intuitive.\n. Not too big an issue, but I just realized that the docs generate the readme. Woops. I updated the readme directly (like a dummy), so any time you run grunt it will be overwritten. I'll have that fixed tonight.\n. If there's any interest in this branch I can continue work on it. I can add options to embed the source map directly into your file, instead of having it external. And I could add #99 with tests.\nIf I go down that route it'd probably make more sense to add a new option, sourceMapName, to separate it from the Boolean that determines whether or not to make a source map in the first place.\n. // Continuing this chat\n@tkellen, I am using it successfully in production, and it sounds like @mattkime might be as well?\nI understand your reluctance to merge this without a confidence in your source mapping knowledge. Might there anything I can do to further this along? Perhaps finding some mutually-agreed-upon source maps expert to review the code and give their feedback?\np.s.; I'll also squash my commits.\n. It's been rebased. Before you merge, though, allow me give it one last once-over to make sure everything's tidy. I'll post another comment when I'm done.\n. Okay, things look good for the most part. There are a few outstanding questions/points I'd like to comment on, though.\n1. It may not be backwards compatible. The source map is smart enough to handle itself as long as the user doesn't do anything funny with it after uglify handles it. However, I know that there are a number of source map fix scripts that people run after uglify is done which further process the source map. I'm not sure how those will behave when the source map that uglify generates is actually correct. With that said, the script only looks for truthy values, and not a strict Boolean, so anyone wanting to generate a source map will still get one. However, the old system let you give it a name with the sourceMap option, so if developers have other dependencies based on that custom name then, well, things might not work out right.\n2. Semi-related to the first point: do you want me to update the packages.json file with a new version? I incremented it to 0.2.8 from 0.2.7, but it might make more sense for this to be 0.3.0 or something, given point #1 above.\n3. On a more minor note, the .gitignore was changed to include .DS_Store. If you'd like I could remove this and make it a separate PR.\n4. The structure of the unit tests has pretty significantly changed. The newer source mapping is smarter than the old so the separation of the relative testing doesn't need to happen anymore.\n5. If we care about consistency I could make the options the same as grunt-contrib-less regarding source maps.\nThat's all I can think of right now. Let me know your thoughts and I can make any necessary changes.\n. If the complexity of the above post is a blocker the only pressing issue is that the version # in the package be updated properly. It's currently identical to the master branch, but that might not be ideal since it is a breaking change.\n. Haha, yeah, there were quite a few merge conflicts. I went ahead and merged and fixed all of the conflicts, then went through each commit one-by-one since my original fork to make sure nothing was lost. It's all there and should merge without conflict, so long as you do it before any other commits are pushed.\nNote that if another commit is pushed before this there will be another bajillion merge conflicts since so much changes with this PR.\n. :smile:\nThanks, @tkellen!\n. This will be fixed by #122.\n. Fixed in v0.3.0\n. @mnbayazit, how'd it work out? If things are good you might want to consider closing this issue.\n. :+1: \n. It looks like the README for this needs to be updated. I can update it and make a new PR (and I'll more thoroughly look at the code than I have so far, too)\n. You should run grunt so that it builds README.md\n. Thanks for doing that, @arty-name! One last thing you should do before they merge this is squash the commits.\n. :+1: \n. I disagree; I think the success message should be opt-out and not opt-in. Most grunt plugins work this way, I think. With that said, opting out isn't possible now but it will be soon.\n. I imagine there's some reason you're keeping those ~40 files separate instead of concatenating them to generate a single outputted file?\nI get where you're coming from, though; you just want to make the uglify message itself more digestible. I think I'm more partial to dynamically changing the success message then I am adding a new option. For instance, the message could be made smaller by becoming Generated x files / Generated x source maps once you pass a certain threshold of generated files.\nBut I'm still not sure that I'd want that functionality. I've come to terms with the fact that, sometimes, there are just going to be a lot of messages displayed, like when installing a node package.\nI'd like to hear others' opinions though, if anyone else has thoughts on this.\n. I'm closing this issue because this is more a question of consistent logging across all grunt-contrib libraries than it is just silencing uglify. @dsiepman there's a discussion about this already that you could chime in on.\n. Er, I'll need to patch up the commits here. Give me a sec. :)\n. // @tkellen \n. I don't think the issue is caused by your configuration, @jedireza, but rather the way the code is currently building the relationship between the uglified file, the source map, and the source files themselves.\nThere are two relationships involved in the way uglify builds source maps right now. The first is the script file itself to the source map. The second is the source map to the destination files. There are a number of ways to wire these files up so that everything points to the correct location, and I just went with the one that seemed to make the most sense at the time. With that said it's possible I may not have picked the best way.\nI'll take a look through the code over the next week and see if a restructuring would make sense. I've been meaning to look into it to see if it would make sense to reintroduce sourceRoot (though in an automated fashion), as well, and also embedding the source files directly into the map as an option, so I'll be sure to look into this at the same time.\n. @jedireza, by any chance do you have the complete grunt configuration for uglify that you were using for < 0.3.0?\n. @mattkime is right in that this seems to be an issue with Uglify. This discussion should continue over there, I think.\n. By any chance is this available in a repository somewhere? Or can you link a gist of the original sourcemap (bin/app.js.map)?\n. Thanks, I'll take a look at this issue tonight.\n. Edit: What version of uglify is this? I should have asked this first. If it's > 0.3.0, refer to the below.\nEdit2: Looking at your source, it seems to be 0.3.1, so the below should apply.\n\nOne issue I'm seeing is that the value you've set for sourceMap in your uglify configuration isn't (technically) a valid value for that option. You're trying to name it there, but there's a separate option for that \u2013 sourceMapName. The sourceMap is a boolean-ish value in the latest version of uglify. It's still generating the map because it only checks for truthy values, but it should really be: sourceMap: true, and then you should have sourceMapName: 'bin/app.js.map'. Ref: the Readme.\nI don't think this will fix this entire issue, but I think the naming you're seeing is intended behavior. Change that and let me know if things look better, at least as far as the name goes.\n. Hey, no problem; you're not sounding impatient. I cloned your repo and began prodding around, but I didn't have a chance to look at as in-depth as I'd like. I'll keep you in the loop.\nJust to clarify: are you currently able to use source maps, or is this an issue preventing you from generating a working one? I only ask because in #146 you had mentioned that switching to sourceMapIncludeSources was working for you in some regard. I'm going to work on a fix for this issue either way, but I'd just like to know if it's completely making it impossible for someone to use source maps with a set up like yours :)\n. Alright, thanks. I'll try to get this done soon.\n. I can't seem to generate those source maps myself. When I execute compile.command I get nothin'. This is actually the behavior I was expecting based off the requirejs docs, which suggest that it only works when you specify using a compiler as the option for optimize. I know the uglify doesn't support sourcesContent yet, so I know it's not that that's generating the map. But perhaps it's the case that the docs are just lagging behind the development of require.\nMight you have any idea why I'm unable to generate those source maps? I'm on OSX, by the way, so I'm just running the command from the terminal.\np.s. I must say this is maybe the most interesting implementation of grunt I've seen :)\n. Oh, of course! I completely overlooked that important detail when you mentioned it above. You even italicized it. Gosh. Well, anyway, I've got it working now. Back to figuring this out :)\n. @stevenvachon, this is an issue with UglifyJS2 that I'm working on a patch for. You can track the progress here.\n. What's the use case for when you don't want to generate a source map but still want to tell it to include the sources? I agree that this shouldn't throw an error, though; it should just ignore the include sources option.\n. Ah, okay, I see. Well, I'll try to make a PR for this tonight.\n. This is resolved by #147\n. Thanks for pointing this out! You can probably see that there's actually very little consistency between the two libraries right now regarding source maps, beyond just the name for this option. I would like to see them have the same, or similar, options for source maps, but first I want to sit down and brainstorm a possible \"best\" set of options for source maps. I think I have it mostly worked out, I just need to get down and generate some PRs to get community feedback.\n. I think I agree with you, @stevenvachon, that splitting out the path from the filename is probably best. For now, what specific issue are you having? Are you able to get the source maps working with the current options?\n. Consistency in the source maps options across all of the grunt-contrib tasks is on the to-do list, so I'm closing this issue.\n. The example workflow link you posted will work with releases earlier than 3.0.0 if you'd like to use a workflow like that.\nWith 3.0.0, the process of generating a source map is intended to be simpler. Just passing sourceMap: true should generate a working map for you. You can overwrite the path/name of the generated map with sourceMapName, so, for instance, /path/to/main.js.min.map should work.\nThe intention with 3.0.0 is that you shouldn't need to worry about things like the links of the sources; it automatically points to the files that were used to generate the compiled script. They'll only be wrong if you move the source map or files after generating the map.\nThe \\\\ bit is interesting, though, it uses require('path').sep to generate the path separators; what OS are you running the script on?\n. Ah, okay, I haven't used the Play Framework before, but it seems like it might be incompatible with 3.x right now. As it stands the paths that are generated will always be relative (from the source map to the file). With that said I'm planning to reintroduce the sourceMapRoot variable, which will enable you to have greater control over this, such as configuring absolute paths.\nIf you use 2.x you should be able to get those absolute paths you're looking for.\n. Docs updated\n. Can you post / link to some code that causes the error to be thrown?\n. Can you post the contents of build/output.js?\n. This is an issue with UglifyJS2 that I'm working on a fix for. mishoo/UglifyJS2/#419 is coming first though :)\n. Fixed via fe947a5707.\nI'd have merged your PR, but the readme is compiled, so I updated the CHANGELOG. Thanks for the PR, though! :+1:\n. The update to reduce the number of options did two things: it made things easier to configure, and supports a lot more use cases (including yours) out of the box.\nHere's how to make it work for you:\n- use grunt-contrib-copy to move the source files to wherever you want them to be referenced in the source map (I assume you're already doing this, otherwise you wouldn't have been able to use source maps in the first place)\n- Make the src of the all target reference those copied files, and not the original files in src. To use your example above: src: './build/src/main.js\n- Profit\nIf you ever had working source maps I don't even think this adds any more steps to your build. If, for some reason, you're opposed to this you can also embed the sources directly with sourceMapIncludeSources.\n. @zgmnkv, there are a few known issues with sourceMapIncludeSources. I admit I haven't fully figured it out myself, either, but feel free to make an issue if you find anything specific. I'm definitely going to be working on that feature this upcoming week.\nAlso, copying the files is necessary in this situation independent of the options of grunt-contrib-uglify. Assuming your webserver root is the ./build directory, the source map can only reference the files accessible via the web server. So if your files are originally in ./src, then the only way to make them accessible is to copy them.\nUpdating the README is a very good idea, I think. I'll add that to my to-do list.\n. The dependency is already ~2.4.0, which will automatically grab bug fixes for you. Just run npm update\nReference\n. This is the behavior of grunt itself, and not grunt-contrib-uglify specifically. I'll close this issue and raise a PR over there later today regarding swapping this regex out for some node path manipulation.\n\u8c37\u6b4c\u7ffb\u8bd1\uff1a\n\u8fd9\u672c\u8eab\u5c31\u662fgrunt\u7684\u884c\u4e3a\uff0c\u800c\u4e0d\u662fgrunt-contrib-uglify\u7279\u522b\u3002\u6211\u4f1a\u5173\u95ed\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e76\u5728\u4eca\u5929\u665a\u4e9b\u65f6\u5019\u63d0\u51fa\u4e00\u4e2aPR\u90a3\u8fb9\u5c31\u6362\u8fd9\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u4e86\u4e00\u4e9b\u8282\u70b9\u7684\u8def\u5f84\u5904\u7406\u3002\n. @cloudcome: Here's the pull request.\n\u8c37\u6b4c\u7ffb\u8bd1\uff1a\n\u8fd9\u91cc\u662f\u8981\u6c42\u62c9\n. Not yet. But it's in the works. You can see a plan for the future sourcemap options here.\n. To get this same set up working, you'll need to:\n1. Make sure the source files, or copies of them, are accessible via your web server\n2. Use those source files as the src of uglify.\nThis is typically done by copying the source files over to the web server before uglifying them, then setting the copies as src.\nIf this set up originally produced a working source map, I imagine it probably copied the source files over in another step, so it shouldn't be any more steps for you \u2013 just a slightly different configuration.\nLet me know if that helps.\n. @johanneswuerbach, what's your usemin configuration?\n\nAlso I think not providing a way to overwrite an automatically generated default decreases the usability a bit.\n\n//cc @mzgoddard. I tend to agree with this; it is a bit weird to first copy the source files, then use them as the src. What do you think?\n. Most generators, generator-ember included, don't come with source maps set up out-of-the-box. If you really want to use 0.3.0+ with source maps, and without changing the configuration too much, then it would probably be best to write a new generator for it. If you don't feel like doing that, I'd suggest sticking with < 0.3.0 for a bit longer.\nMy reluctance to reintroduce the option is because of the fact that pretty soon (> 0.3.0) the default behavior of source maps across the grunt-contrib suite will be embedding the content of your source files directly into the map, so their original locations won't matter at all. I can't think of a reason why someone would choose to link to the maps instead of embedding, so at that point this will be a non-issue. @mzgoddard and I are hard at work to get this implemented, so hopefully in a few weeks there will be something to show.\nThe new options for source maps can be read about here. If you have any suggestions for improving them I'd appreciate the feedback.\n. I think what you're looking for is nonull.\n. > maybe it should be specified in the README.md as a note or a warning.\nThis configuration isn't specific to uglify, so I think it makes the most sense for it to stay in the configuring tasks guide. Otherwise every grunt task would need to include the note, right? :)\n. Interesting. @mzgoddard mentioned a change in fitzgen's sourcemap library yesterday that was breaking a test. This might be related. I haven't had a chance to delve into it more just yet but I'll take a look!\n. I've pinpointed the cause. ~~It ultimately boils down to people not using semver.~~ A pretty big bug was fixed in source-map 0.1.33.\nUglify has a ~ dependency on it, so when that new version is pulled in it will break.\nIt seems like uglify-js2 should have a hardcoded dependency on source-map of 1.3.31, or fix the issue.\n// cc @mishoo\nThe reason grunt-contrib-uglify fails on travis and not your local version is that source-map is pulled in as a dependency of uglify. If you've already got uglify installed, then it (and source-map) won't get updated, and the tests will continue to work. To pull in the update and see the breaking change on your own machine, simply get rid of uglify and reinstall.\njs\nrm -r node_modules\nnpm install\n. Also ref\n. This has been fixed in uglify; just waiting on a release.\n. :frowning: Until Uglify releases the fix to npm our tests will fail. We have a few options to make the build pass; one is temporarily setting a hard dependency on source-map to override Uglify's. @tkellen what do you think?\n. Thanks for doing that, @mishoo :)\nI reran the build and it still fails. I'm looking into it to see if the results of the map have changed or if there's something else going on.\n. I think you may need to update npm.\nnpm update npm -g\nI can't find the exact changelog for it, but I think that the caret operator is newer, perhaps >=1.3.0. It's at least newer than 1.2.18, which is a year old or so, as the caret operator was added 7 months ago to node-semver (released in 2.1.0)\n. I was curious and dug through the commits to find the exact release. For the record it was merged here and released as 1.3.7.\nGlad the problem was resolved :)\n. > I don't see how that's useful at all.\n@sindresorhus, I agree with you this changelog contains less content, but I don't think that I would conclude that it's not 'useful at all.' Telling people that there are no API changes is just as useful as telling them when there are. I can imagine there are a number of users who wouldn't upgrade without the changelog telling them that it's fine. Further, it'd be weird for the changelog to go 3.1...3.2...5.0. Two years from now you yourself might ask, 'what the heck happened in 4.0?'\nAnyway, thanks for doing it even if you fervently disagree.\n. Ah, okay, I can see your point, too.\n. You'll need to update npm to get support for the caret operator.\nnpm update npm -g\n. This should be discussed on the Sass issue tracker.\n. Haha, no problem. I figured as much. It can't be deleted, I'm afraid :(\n. This is an issue for the uglify issue tracker; grunt-contrib-uglify is just a wrapper for it. However, I don't think that there's any way to change this behavior, but you shouldn't run into any issues with it in any browsers. In short: don't be stressin'\n. nonull is supported in all tasks.\n. Good catch, @UltCombo! This is an issue for Uglify, though. We just pass along the option and leave the source map generation to that library.\n. Ah, sorry for closing this @UltCombo! Good points; I think I agree with your original post. Using forward slashes is probably the best way to go, since all browsers uses forward slashes and source maps are only used (as far as I know) in browser environments.\nI can do a PR for this in the next day or so, or you could if you're in a rush. \nWould you agree that this should be changed in both the sources array and the sourceMappingURL in the generated file?\n. @UltCombo, I think it should be changed in both libraries. Using a regex to do the replacement isn't the way I'd go about it, though. We're lucky because we know which path separator to use \u2013 / \u2013 so we should just use that instead of calling path.sep. The two lines I linked above only generate paths for maps, if I'm remembering correctly, so it should just be a matter of changing it there for things to be good on our end.\n. Ah, you're right, I suppose we will need to use some regex for this. Shucks. :)\n. Haha, I'm not opposed to regex in principle or anything. I just thought for a moment we could get away by explicitly choosing the separator from the start. No big deal :)\n\n(changing a path with string manipulation)\n\nThat's my real concern ;)\n. Looks great! Thanks for doing this, @shinnn. Once you make those two changes this will be merged.\n. Thanks, @shinnn!\n. //cc @mzgoddard. I'd like your thoughts on this issue, too. Do you agree that it makes sense to use forward slashes exclusively in the sources field of source maps and the sourceMappingURL comment?\n. > Before testing your changes I had 10 tests failing:\nYikes! We should work on getting that to zero :)\n. :dancer:\nGreat. I'll wait to do a release until the other issue is figured out, too, and Z gives his feedback :)\n. Thanks for the input, Z! And that comment is a good reference; makes a lot of sense to me. I'll make the change above then merge.\n. This is what I get:\nRunning \"uglify:sourcemapin\" (uglify) task\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:2,5 \u2192 3,4 []\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:3,2 \u2192 3,16 []\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:3,6 \u2192 3,19 []\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:3,13 \u2192 3,26 []\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:3,19 \u2192 3,31 []\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:3,25 \u2192 3,36 []\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:3,33 \u2192 3,43 []\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:3,43 \u2192 3,52 []\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:3,49 \u2192 3,57 []\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:9,4 \u2192 3,128 []\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:22,6 \u2192 3,209 []\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:27,4 \u2192 3,260 []\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:32,8 \u2192 3,438 []\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:35,6 \u2192 3,497 []\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:35,13 \u2192 3,504 []\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:37,4 \u2192 3,524 []\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:37,11 \u2192 3,531 []\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:38,4 \u2192 3,540 []\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:38,9 \u2192 3,545 []\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:39,2 \u2192 3,555 []\nWARN: Couldn't figure out mapping for ../test/fixtures/src/simple2.js:39,7 \u2192 3,560 []\nFile tmp/sourcemapin.map created (source map).\nFile tmp/sourcemapin.js created: 851 B \u2192 619 B\nBut it still generates the same map that uglify does.\n. Ah, a fresh install of the node_modules got rid of them for me. Going to close this; you should raise another issue or comment here if you find that your problem is still hangin' around.\n. Do you get the same result when you run uglify from the command line passing the --preamble option?\n. If you're using bash, try passing $'foo\\n'\n. Actually, it's not as weird as one might think. The banner text itself gives a hint; they're treated differently whether you've specified to generate a source map or not.\nHeh, you saw it right as I did :)\n. > The test which fails is the one without sourcemaps whose preamble is concatenated by Uglify, but Uglify is working correctly from the command line.\nWait, is that the case? It looks to me like the failing test is the one handled by this block of code.\nMy thought is we should automatically append a path.sep after the banner, when it isn't processed by uglify. This makes it consistent with uglify's preamble CLI option while also solving the issue at hand. I'll first want to verify that uglify adds the newline when you pass the preamble option to the node module as well, though.\n. Just noting that this is tangentially related to some comments made over in concat.\nI've never used TeamViewer before..is it free? I've got time. If you're on gchat you can message me at jellyes2@gmail.com.\n. @UltCombo and I did a bit of debugging and determined the cause is ultimately that all options are processed through grunt.template, which normalizes line feeds as the last step.\n. So our library always normalizes the line feeds to the OS-specific linefeed which breaks the test, as the test inputs \\n and gets \\r\\n returned on windows.\nSome facts:\n- Uglify always normalizes the preamble option to use a single \\n\n- Uglify doesn't have an analogous footer option\n- Grunt doesn't seem to have settled on whether or not it cares about linefeeds in built files\nI'm undecided on what's best to do in this situation\n. Grunt doesn't support streams yet. Gotta write them to do the disk, I'm afraid. You may prefer using grunt-preprocess (my favorite solution to this problem) or any of the templating options available.\n. @julien-c, that's pretty regular Grunt practice, I think; the ol' tmp directory :)\n. PRs are welcome :)\n. Ah, yeah, I didn't think uglify used what was passed into parse for the source maps. I should have checked with you, first. I'll change this tonight.\n. Agreed :) It will be this way in the next big update to source maps.\n. :+1: good catch!\n. We don't even need the function anymore tbh.\n. Updated in e602625b1a3a05bf546738a100d28c01cf347893\n:p\n. @Yokocapolo, sorry, is it working for you now? Or is it not working still?\n. Thanks, I'm looking into it :)\n. What version of grunt-contrib-uglify are you using?\n. Ah, okay. That might be your problem. The latest version is 0.4.0. If you update do you still have this problem?\n. This is super bizarre. I can't reproduce this.\n. By chance do you have this in a repository anywhere that I can pull down? I'd like to take a closer look.\n. Hey, no problem. An introduction to git might be a bit much for me to comment here, but I encourage you to google to find some good tutorials. It should be particularly painless if you get started with Github.\nIf it'd be easier for you you could just email me the source at jellyes2@gmail.com.\n. Everything needed to reproduce the problem. package.json, the gruntfile, and the source files. Just throw everything in there.\n. Thanks, @Francisc! I was able to reproduce it; looking into a solution.\n. I haven't worked this out entirely, but it seems like Uglify is throwing out lines past the last 'line of code.' In the example above, the second and third var definitions are joined with the first, leaving two comments at the end of the file. Uglify then strips that out.\nWhen I add, say,\njs\nfunction y() {\n  return false;\n}\nat the bottom of the script then the comments are preserved. Hmmm!\n. This is a known issue with uglify. Ref.\nI'd join the discussion over there if you'd like to see this fixed. In the meantime you could try passing the sequences as false in the compress option of this plugin to disable uglify from joining those simple statements together. Check out the compressor options for more.\n. Are you opposed to turning off the sequences option? It seems like that would fix it, too.\n. Ah, well, looking through the options it seems like there's a separate join_vars option. :)\n. I like this idea. Care to make a PR for it?\n. I looked into the history of this option...it looks like banner was added to this task 2 years ago, while preamble was just added to uglify 6 months ago. We just never switched over to using uglify's preamble option until now.\nThanks for the PR @UltCombo!\n. Closed as duplicate; will release tomorrow\n. Ref: fixes #191 \nAlso, I did some research as to the history of our feature vs. Uglify's. Turns out uglify's is newer, which is why we have a proprietary implementation.\n. @UltCombo I'm fine with this revision passing our current unit tests for banners. We test the two most interesting cases...a banner+compression and a banner+sourcemap. If this passes those tests with the slight revision then you made then that gives me confidence it's implemented correctly.\nIn fact, we should have more confidence about this method because we're no longer circumventing uglify's implementation. There are no issues on Uglify about the preamble option from what I can see, so all-in-all this is +1.\nThe one thing I would change is maybe the name of the option. Let's go ahead and call it preamble so it matches Uglify's option?\n. We can drop banner altogether :)\n. Yo @UltCombo, sorry for my absence. I've just been a bit tied up lately. Grunt is aiming to be a part of the Dojo Foundation, which requires all contributors to sign their CLA. Think you could do that for me? It should take literally 30 seconds.\nThanks!\n. Awesome @UltCombo! Thanks.\n. This is most likely an issue with the uglify compiler. Try compiling with the uglify cli; if the issue persists you'll want to raise an issue there. If it only happens when you run the grunt task just post here and I'll open the issue back up.\n. @saubaer could you rebase off master?\n. @ntwb, you'll need to use the extDot option. By default Grunt treats the first dot in the name as the start of the path, so your .js extension there isn't matching what Grunt is treating as the file extension: .form.js Set extDot to last to fix it.\n. @laurentgoudet this isn't something that we were planning to support. The thinking was that source maps should only be used in development, and in development you shouldn't be worrying about CDNs.\nAre you trying to host your source maps in production but prevent visitors to your site from accessing the sources? If so I would suggest not going through this hassle \u2013\u00a0just don't upload scripts with source maps to production.\n. This is an interesting case that I hadn't thought of. @mzgoddard, I'd like to hear your thoughts on this. The source map options we talked about didn't support this feature at all. I guess we'd need to add in another option to support this sort of thing?\n. There's no need to make an ad hominem, @monolithed.\nI'm not suggesting that anyone host their assets 'in the root domain.' Rather, I made the (arguably poor) assumption that source maps would only be used in development. Generally, projects I've worked out \u2013\u00a0whether they've used a CDN or not \u2013\u00a0would work with local assets only when using source maps. I admit I didn't think about a situation where you would have reporting tools operating on your deployed resources.\nI'm willing to review a PR that adds this functionality back in, if either of you are interested in making the pull request.\n. Yeah @cainmi, this seems like a task for grunt-contrib-clean.\n. @latmagicman, have you tried using the sourceMapName property?\nIf yes, and it isn't working, can you tell me a bit more about your situation? What's a .war file? Why are you generating n source maps? It seems like a pretty unique situation so I'd like to learn more!\nOne thing to note is that we are planning to move away from separate source map files in the future. We'd love for there to be the ability to embed the source map directly into each JS file as a data-uri. Once we're there there won't be any issues around this sort of thing. \n. @UltCombo not drop support, but dissuade folks from using them. You can see a planned set of options over here.\n. Thanks @grevory! We will need to wait for an Uglify release to get this in.\n. Just checking in after a week...still no updates from Uglify.\n. @ampgcat you should comment on the old issue instead of making new ones :)\nUnfortunately the next version of grunt is still in the works with no set release date yet.\n. Oh dang, sorry about that! I do see that you posted a response there. Sorry, I've been a bit busy these past few weeks and haven't been around as much as I'd like. But yeah, grunt v1 is not out yet :( Sorry!\n. @bobzoller, thanks for the PR! Before I merge, do you think you could [sign a quick CLA]((http://dojofoundation.org/about/claForm)? It should only take a few seconds.  Grunt is aiming to be a part of the Dojo Foundation, which requires all contributors to sign their CLA.\nThanks!\n. @bobzoller if you sign the CLA and get back t'me we can reopen for merging. Just comment on this issue.\n. Thanks @bobzoller! Could you rebase?\n. :)\n. @jonas-db what version of grunt-contrib-uglify are you running?\n. No problem @jonas-db :)\n. @whisher if it is in fact an issue, it's more likely to be a problem with Uglify itself than this library, which is just a wrapper. The issue tracker here are problems with just this wrapper library.\n. This is likely an issue with the maxmin library; you should open a PR over there.\n. I said PR...but...that makes no sense. I meant you should open an issue over there.\n@jtangelder, also, if you could maybe make a gist of a file that we could use to reproduce this, and let us know your uglify version that might be useful for debugging.\n@sindresorhus any thoughts on what this might be?\n. Thanks @robwierzbowski! Would you be up for trying your hand at making a PR for this?\n. > I believe the GitHub-flavored markdown does not need trailing spaces to insert line breaks,\nIt does, actually.\n@watilde, @UltCombo is right. If you view your file you'll see that the spaces are all out of line!\nWe do appreciate the effort to make the README better, though! :)\n. @nareshbhatia, in general I wouldn't uglify an already-uglified file. What's the reason to do so?\nWith that said, this could be a bug with this library, but maybe not. Does the same behavior happen when you run uglify from the command line?\n. Thanks for the heads up, @voxpelli!\nI'm thinking 0.4.x would give us the same functionality as the old caret operator, as it won't pull in minor updates nor prereleases.\n. Questions should be asked on StackOverflow. If it's a problem with the uglify, you should report the issue on that library's issue tracker.\nIf it ends up being a problem with this lib, which is just a wrapper for uglify, comment again here and we'll look into it. Best of luck!\n. Try extDot.\n. The possibility has been discussed before\n. Thanks for the suggestion, @cfarm \u2013 we're always interested in improving the documentation. Would you have time to open up a PR that clarifies the wording?\n. Did you test if the command line uglify compiler produces the same error? If it does, then this is an issue for UglifyJS2.\n. ``` sh\ninstall uglify globally\nnpm install -g uglify-js\nuglify your file. you may need to pass additional options to make it\ncompress in the same way that your grunt task is compressing\nuglifyjs path/to/my-file.js -o path/to/my-output.js\n```\nThe documentation is in the README on that repo.\n. Thanks @andrewjli! This has been fixed in 1a9e0c086403d6168be96105d7ce8105279d1b28\n. This is likely an issue with Uglify, and not this task, which is just a wrapper. Have you tried running the source through the uglify command line? Does it also resort your code?\n. Which version are you comparing against? The development version? If so, try turning on the beautify flag to the CLI. More generally make sure that the options are the same when you're comparing.\n. See my comment over here.\n. This is likely an issue with uglifyJs2, and not this library, which is just a wrapper. Have you tried compiling the source using uglify's command line tool?\nIf the problem still exists, then you should file this on their issue tracker.\n. This description seems to be copy+pasted from the sourceMapPrefix option. It should be updated to say something about what sourceMapIncludeSources does.\n. It may be too late now since it's published, but If consistency between grunt plugins is of any concern it'd be nice for this be outputSourceFiles.\n. This should be in a separate commit, I think.\n. Actually, putting path up there was my mistake (oops!) Would you move them both below the // External libs comment?\n. The replace should be made here\n. We can probably just do outputOptions.preamble = options.banner here. If it's undefined, whatevs.\n. Maybe add a comment about why we don't process the banner here. \"// Process footer. Banner processing is done by Uglify.\" should be sufficient.\n. :dancer:\n. @robwierzbowski care to make an issue?\n. Awesome \u2013 thanks!\n. Update the header for this section? This will likely be an update guide for 0.6.x to 0.7.x.\n. Change this line?\n. ",
    "klimashkin": "Hello! How can I add this screw-ie8 option in grunt-contrib-uglify task?\n. ",
    "tswaters": "This doesn't work... consider the following:\necho var foo = {\"class\":true}; | uglifyjs\nvar foo={\"class\":true};\necho var foo = {\"class\":true}; | uglifyjs --screw-ie8\nvar foo={class:true};\nThe quotes around reserved keywords should be removed when screw-ie8 is passed.  I tried the options mentioned above above and it produced the following:\nvar foo={\"class\":!0};\nI took a look at the uglifyjs bin code and they pass an outputoption for 'screw_ie8' in addition to the compress and mangle options -- there doesn't seem to be a way to pass output options with this package.\nI've gone ahead and created a PR that adds this as a top-level option, in addition to tests... having this functionality would be greatly appreciated.\n. ",
    "wslx520": "for others who come here, the screw_ie8 has been abandoned, the new option is : ie8: true , uglify({ie8:true}). ",
    "maksimr": "node --version\nv0.8.6\ngrunt uglify --verbose --debug --stack\n```\nInitializing\nCommand-line options: --verbose\nReading \"Gruntfile.js\" Gruntfile...OK\nRegistering Gruntfile tasks.\nInitializing config...OK\nRegistering \"grunt-contrib-jshint\" local Npm module tasks.\nReading {HOME}/.vim/bundle/vim-jsbeautify/node_modules/grunt-contrib-jshint/package.json...OK\nParsing {HOME}/.vim/bundle/vim-jsbeautify/node_modules/grunt-contrib-jshint/package.json...OK\nLoading \"jshint.js\" tasks...OK\n+ jshint\nRegistering \"grunt-contrib-nodeunit\" local Npm module tasks.\nReading {HOME}/.vim/bundle/vim-jsbeautify/node_modules/grunt-contrib-nodeunit/package.json...OK\nParsing {HOME}/.vim/bundle/vim-jsbeautify/node_modules/grunt-contrib-nodeunit/package.json...OK\nLoading \"nodeunit.js\" tasks...OK\n+ nodeunit\nRegistering \"grunt-contrib-watch\" local Npm module tasks.\nReading {HOME}/.vim/bundle/vim-jsbeautify/node_modules/grunt-contrib-watch/package.json...OK\nParsing {HOME}/.vim/bundle/vim-jsbeautify/node_modules/grunt-contrib-watch/package.json...OK\nLoading \"watch.js\" tasks...OK\n+ watch\nRegistering \"grunt-contrib-uglify\" local Npm module tasks.\nReading {HOME}/.vim/bundle/vim-jsbeautify/node_modules/grunt-contrib-uglify/package.json...OK\nParsing {HOME}/.vim/bundle/vim-jsbeautify/node_modules/grunt-contrib-uglify/package.json...OK\nLoading \"uglify.js\" tasks...OK\n+ uglify\nLoading \"Gruntfile.js\" tasks...OK\n+ build, default, test, urchin\nRunning tasks: uglify\nRunning \"uglify\" task\nRunning \"uglify:dist\" (uglify) task\nVerifying property uglify.dist exists in config...OK\nFiles: plugin/beautify.js -> plugin/beautify.min.js\nMinifying with UglifyJS...Reading plugin/beautify.js...OK\nWarning: Uglification failed. Use --force to continue.\nAborted due to warnings.\n```\nThanks!\n. Problem in this function\njavascript\n    // Need to call this before we mangle or compress,\n    // and call after any compression or ast altering\n    topLevel.figure_out_scope();\nwhich leads to a problem in function TreeWalker\n. I commented some strings in source of grunt-contrib-uglify.js\n. ",
    "kylebradshaw": "did you ever find a resolution? I'm getting the same error, --debug and --verbose didn't help\n. ",
    "b-long": "I had the same issue, it turned out my Gruntfile.js was incorrect, e.g.: \njavascript\n//...\n        uglify: {\n            options: {\n                compress: true\n            },\n            build: {\n                src: [\n                    \"dir1/Mod1\",\n                    \"dir1/Mod2.js\",\n                    \"dir2/Mod3.js\"\n                ],\n                dest: 'build/<%= pkg.name %>.min.js'\n            }\n        }\n//...\nShould have been:\njavascript\n//...\n        uglify: {\n            options: {\n                compress: true\n            },\n            build: {\n                src: [\n                    \"js/dir1/Mod1.js\",\n                    \"js/dir1/Mod2.js\",\n                    \"js/dir2/Mod3.js\"\n                ],\n                dest: 'build/<%= pkg.name %>.min.js'\n            }\n        }\n//...\nIn my case, I actually had 2 problems, the first being that the start of my relative path was wrong, and the first script in my list was also missing it's file extension.  Has anyone else seen this?  Any chance we can get an update pushed to grunt-contrib-uglify so that this cryptic error message doesn't trip someone up in the future?\n. @jsoverson Ah, sorry.  Thanks for the info!\n. My mistake, thanks for linking to the related documentation @jsoverson ! :) \n. ",
    "ryanseddon": "I'm getting this error too. Here's my output.\n``` bash\nRunning tasks: uglify\nRunning \"uglify\" task\n[D] Task source: D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\grunt-\ncontrib-uglify\\tasks\\uglify.js\nRunning \"uglify:dist\" (uglify) task\n[D] Task source: D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\grunt-\ncontrib-uglify\\tasks\\uglify.js\nVerifying property uglify.dist exists in config...OK\nFiles: dist/modernizr-build.js -> dist/modernizr-build.min.js\nMinifying with UglifyJS...Reading dist/modernizr-build.js...OK\nWarning: Uglification failed. Use --force to continue.\nError\n    at new JS_Parse_Error (D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modu\nles\\grunt-contrib-uglify\\node_modules\\uglify-js\\lib\\parse.js:196:18)\n    at js_error (D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\grunt-\ncontrib-uglify\\node_modules\\uglify-js\\lib\\parse.js:204:11)\n    at croak (D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\grunt-con\ntrib-uglify\\node_modules\\uglify-js\\lib\\parse.js:636:9)\n    at token_error (D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\gru\nnt-contrib-uglify\\node_modules\\uglify-js\\lib\\parse.js:644:9)\n    at unexpected (D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\grun\nt-contrib-uglify\\node_modules\\uglify-js\\lib\\parse.js:650:9)\n    at D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\grunt-contrib-ug\nlify\\node_modules\\uglify-js\\lib\\parse.js:730:17\n    at D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\grunt-contrib-ug\nlify\\node_modules\\uglify-js\\lib\\parse.js:683:24\n    at block_ (D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\grunt-co\nntrib-uglify\\node_modules\\uglify-js\\lib\\parse.js:944:20)\n    at ctor.body (D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\grunt\n-contrib-uglify\\node_modules\\uglify-js\\lib\\parse.js:917:25)\n    at function_ (D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\grunt\n-contrib-uglify\\node_modules\\uglify-js\\lib\\parse.js:922:15)\n```\n. I'm getting this error too. Here's my output.\n``` bash\nRunning tasks: uglify\nRunning \"uglify\" task\n[D] Task source: D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\grunt-\ncontrib-uglify\\tasks\\uglify.js\nRunning \"uglify:dist\" (uglify) task\n[D] Task source: D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\grunt-\ncontrib-uglify\\tasks\\uglify.js\nVerifying property uglify.dist exists in config...OK\nFiles: dist/modernizr-build.js -> dist/modernizr-build.min.js\nMinifying with UglifyJS...Reading dist/modernizr-build.js...OK\nWarning: Uglification failed. Use --force to continue.\nError\n    at new JS_Parse_Error (D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modu\nles\\grunt-contrib-uglify\\node_modules\\uglify-js\\lib\\parse.js:196:18)\n    at js_error (D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\grunt-\ncontrib-uglify\\node_modules\\uglify-js\\lib\\parse.js:204:11)\n    at croak (D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\grunt-con\ntrib-uglify\\node_modules\\uglify-js\\lib\\parse.js:636:9)\n    at token_error (D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\gru\nnt-contrib-uglify\\node_modules\\uglify-js\\lib\\parse.js:644:9)\n    at unexpected (D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\grun\nt-contrib-uglify\\node_modules\\uglify-js\\lib\\parse.js:650:9)\n    at D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\grunt-contrib-ug\nlify\\node_modules\\uglify-js\\lib\\parse.js:730:17\n    at D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\grunt-contrib-ug\nlify\\node_modules\\uglify-js\\lib\\parse.js:683:24\n    at block_ (D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\grunt-co\nntrib-uglify\\node_modules\\uglify-js\\lib\\parse.js:944:20)\n    at ctor.body (D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\grunt\n-contrib-uglify\\node_modules\\uglify-js\\lib\\parse.js:917:25)\n    at function_ (D:\\Ryan\\Dev\\Git\\Modernizr.js\\master\\node_modules\\grunt\n-contrib-uglify\\node_modules\\uglify-js\\lib\\parse.js:922:15)\n```\n. @jsoverson so it was a user error! Another test was being mangled by r.js that was causing invalid code to be generated in the unminifed version that uglify reads in.\n. ",
    "davidepedone": "I'm having trouble with uglify on Mac OS X (the same grunt script runs perfectly on Linux).\nHere's the output of grunt --verbose --stack --debug\n```\nRunning \"uglify\" task\n[D] Task source: path/to/project/node_modules/grunt-contrib-uglify/tasks/uglify.js\nRunning \"uglify:all\" (uglify) task\n[D] Task source: path/to/project/node_modules/grunt-contrib-uglify/tasks/uglify.js\nVerifying property uglify.all exists in config...OK\nFiles: js/file1.js, js/file2.js, js/file3.js -> /js/out.min.js\nMinifying with UglifyJS...>> Uglifying source \" js/file1.js, js/file2.js, js/file3.js\" failed.\nWarning: Uglification failed. Use --force to continue.\nTypeError: Object # has no method 'OutputStream'\n    at Object.exports.minify (path/to/project/node_modules/grunt-contrib-uglify/tasks/lib/uglify.js:30:27)\n    at path/to/project/node_modules/grunt-contrib-uglify/tasks/uglify.js:85:25\n    at Array.forEach (native)\n    at Object. (path/to/project/node_modules/grunt-contrib-uglify/tasks/uglify.js:36:16)\n    at Object. (path/to/project/node_modules/grunt/lib/grunt/task.js:258:15)\n    at Object.thisTask.fn (path/to/project/node_modules/grunt/lib/grunt/task.js:78:16)\n    at Object. (path/to/project/node_modules/grunt/lib/util/task.js:282:30)\n    at Task.runTaskFn (path/to/project/node_modules/grunt/lib/util/task.js:235:24)\n    at Task. (path/to/project/node_modules/grunt/lib/util/task.js:281:12)\n    at Task. (path/to/project/node_modules/grunt/lib/util/task.js:215:7)\ngrunt-cli v0.1.9\ngrunt v0.4.1\ngrunt-contrib-uglify v0.2.4\n```\n. sure, here's the output (no colored lines returned)\ngrunt-contrib-uglify@0.2.4 /Users/davide/devel/grunt-contrib-uglify\n\u251c\u2500\u252c grunt@0.4.1\n\u2502 \u251c\u2500\u2500 async@0.1.22\n\u2502 \u251c\u2500\u2500 coffee-script@1.3.3\n\u2502 \u251c\u2500\u2500 colors@0.6.2\n\u2502 \u251c\u2500\u2500 dateformat@1.0.2-1.2.3\n\u2502 \u251c\u2500\u2500 eventemitter2@0.4.13\n\u2502 \u251c\u2500\u252c findup-sync@0.1.2\n\u2502 \u2502 \u2514\u2500\u2500 lodash@1.0.1\n\u2502 \u251c\u2500\u252c glob@3.1.21\n\u2502 \u2502 \u251c\u2500\u2500 graceful-fs@1.2.3\n\u2502 \u2502 \u2514\u2500\u2500 inherits@1.0.0\n\u2502 \u251c\u2500\u2500 hooker@0.2.3\n\u2502 \u251c\u2500\u2500 iconv-lite@0.2.11\n\u2502 \u251c\u2500\u252c js-yaml@2.0.5\n\u2502 \u2502 \u251c\u2500\u252c argparse@0.1.15\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 underscore@1.4.4\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 underscore.string@2.3.3\n\u2502 \u2502 \u2514\u2500\u2500 esprima@1.0.4\n\u2502 \u251c\u2500\u2500 lodash@0.9.2\n\u2502 \u251c\u2500\u252c minimatch@0.2.12\n\u2502 \u2502 \u251c\u2500\u2500 lru-cache@2.3.1\n\u2502 \u2502 \u2514\u2500\u2500 sigmund@1.0.0\n\u2502 \u251c\u2500\u252c nopt@1.0.10\n\u2502 \u2502 \u2514\u2500\u2500 abbrev@1.0.4\n\u2502 \u251c\u2500\u252c rimraf@2.0.3\n\u2502 \u2502 \u2514\u2500\u2500 graceful-fs@1.1.14\n\u2502 \u251c\u2500\u2500 underscore.string@2.2.1\n\u2502 \u2514\u2500\u2500 which@1.0.5\n\u251c\u2500\u252c grunt-contrib-clean@0.5.0\n\u2502 \u2514\u2500\u252c rimraf@2.2.2\n\u2502   \u2514\u2500\u2500 graceful-fs@2.0.1\n\u251c\u2500\u2500 grunt-contrib-internal@0.4.6\n\u251c\u2500\u252c grunt-contrib-jshint@0.6.4\n\u2502 \u2514\u2500\u252c jshint@2.1.11\n\u2502   \u251c\u2500\u252c cli@0.4.5\n\u2502   \u2502 \u2514\u2500\u252c glob@3.2.6\n\u2502   \u2502   \u2514\u2500\u2500 inherits@2.0.1\n\u2502   \u251c\u2500\u2500 console-browserify@0.1.6\n\u2502   \u251c\u2500\u252c minimatch@0.2.12\n\u2502   \u2502 \u251c\u2500\u2500 lru-cache@2.3.1\n\u2502   \u2502 \u2514\u2500\u2500 sigmund@1.0.0\n\u2502   \u251c\u2500\u2500 shelljs@0.1.4\n\u2502   \u2514\u2500\u2500 underscore@1.4.4\n\u251c\u2500\u252c grunt-contrib-nodeunit@0.2.1\n\u2502 \u2514\u2500\u252c nodeunit@0.8.1\n\u2502   \u2514\u2500\u252c tap@0.4.4\n\u2502     \u251c\u2500\u2500 buffer-equal@0.0.0\n\u2502     \u251c\u2500\u2500 deep-equal@0.0.0\n\u2502     \u251c\u2500\u252c difflet@0.2.6\n\u2502     \u2502 \u251c\u2500\u2500 charm@0.1.2\n\u2502     \u2502 \u251c\u2500\u2500 deep-is@0.1.2\n\u2502     \u2502 \u2514\u2500\u2500 traverse@0.6.6\n\u2502     \u251c\u2500\u252c glob@3.2.6\n\u2502     \u2502 \u251c\u2500\u2500 inherits@2.0.1\n\u2502     \u2502 \u2514\u2500\u252c minimatch@0.2.12\n\u2502     \u2502   \u251c\u2500\u2500 lru-cache@2.3.1\n\u2502     \u2502   \u2514\u2500\u2500 sigmund@1.0.0\n\u2502     \u251c\u2500\u2500 inherits@2.0.0\n\u2502     \u251c\u2500\u2500 mkdirp@0.3.5\n\u2502     \u251c\u2500\u252c nopt@2.1.2\n\u2502     \u2502 \u2514\u2500\u2500 abbrev@1.0.4\n\u2502     \u251c\u2500\u252c runforcover@0.0.2\n\u2502     \u2502 \u2514\u2500\u252c bunker@0.1.2\n\u2502     \u2502   \u2514\u2500\u252c burrito@0.2.12\n\u2502     \u2502     \u251c\u2500\u2500 traverse@0.5.2\n\u2502     \u2502     \u2514\u2500\u2500 uglify-js@1.1.1\n\u2502     \u251c\u2500\u2500 slide@1.1.5\n\u2502     \u2514\u2500\u2500 yamlish@0.0.5\n\u251c\u2500\u252c grunt-lib-contrib@0.6.1\n\u2502 \u2514\u2500\u2500 zlib-browserify@0.0.1\n\u2514\u2500\u252c uglify-js@2.4.0\n  \u251c\u2500\u2500 async@0.2.9\n  \u251c\u2500\u252c optimist@0.3.7\n  \u2502 \u2514\u2500\u2500 wordwrap@0.0.2\n  \u251c\u2500\u252c source-map@0.1.30\n  \u2502 \u2514\u2500\u2500 amdefine@0.0.8\n  \u2514\u2500\u2500 uglify-to-browserify@1.0.1\n. as you suspect I was running the current development branch. Installing node 0.10.20 solved the problem, thank you so much!\n. ",
    "lf94": "To anyone getting here from google: if you go to node_modules\\grunt-contrib-uglify\\node_modules\\uglify-js\\lib\\parse.js line 196, and add a \"console.log(line);\", you'll be able to see what line of your javascript is incorrect. The offending file is the last one that grunt reports before the error message.\n. ",
    "ThePaavero": "lf94, thank you!\n. ",
    "uditalias": "@lf94 you saved my day!\n. ",
    "bentaly": "@lf94 You're still saving lives\n. ",
    "lepture": "@jsoverson Maybe not. A newline is what I need now. But a footer option should be more useful.\nActually, I wrote a newline task to add newline at the end of every file.\n. ",
    "darlanalves": "Why is not merged yet? A footer option is really useful if combined with banner to generate Node.js/browser compatible files with a simple closure function that does the job.\n. I agree with the wrapping thing, though it was not intuitive at first to me (I am new to Node.js yet). My first thought was that 'footer' config is available the same way it is in grunt-contrib-concat.\nI'll check the grunt-wrap task and replace the footer as well. Thanks for the tip.\n. ",
    "mpnkhan": "Hi,\nWe need footer support in order to introduce Conditional Compilation Statements  for IE.. Currently we are able to introduce start of the loop through banner but coudn't close the loop etc. through footer. While grunt-concat works perfectly for unminified version, uglify doesn't and there is an inconsistency in out grunt tasks...\nCould you kindly help with this footer template support?\n. Thanks  @jsoverson . Kind of you. Will wait for your updates..\n. ",
    "acdha": "@jsoverson When I was looking, it seems like the only way to delegate completely to uglifyjs would be to execute their shell command because the comment is hard-coded there:\nhttps://github.com/mishoo/UglifyJS2/blob/master/bin/uglifyjs#L301\nThat seems like a :-1: move to me so I'll open an issue there and see what they think.\n. @stof, @jsoverson Actually, we need to change this first as the spec was recently changed to use a syntax which completely avoids IE compatibility: https://github.com/mishoo/UglifyJS2/pull/213#issuecomment-18215308\n. Thanks for the rapid response!\n. @jsoverson No clean fixes: it probably makes sense to hold off on shipping the patch until browser support ships and remove it after it's been in for a release or two.\n. ",
    "stof": "@jsoverson could you please push this change on NPM ? Libraries are still releasing builds incompatible with IE because NPM gives a version without this patch. See https://github.com/marionettejs/backbone.marionette/issues/569#issuecomment-18293708 for instance\n. ",
    "jharding": "Stating the obvious here, but the travis fails because the test I added tests an option that doesn't exist yet.\n. Looks like this option finally found its way into an Uglify release. I've rebased changes from master onto my branch and all tests are passing.\n. ",
    "wyaeld": "@jsoverson bumping this, @jharding doesn't seem to be active anymore, but this functionality is required for the compilation of twitter/typeahead.js, which is currently using his fork of this repo\n. ",
    "mnpenner": "How do we use this from the command-line?\n$ uglifyjs --enclose x\n1+2;\n(function(x){1+2})();\nThis isn't useful unless I can set the calling args as well?\n. @jmeas Awesome. I'll check this out. Thank you!\n. @jmeas Oh... I didn't realize I was capable of closing issues. Yes, the new source mapping options look good. Much simpler to config. Thanks :-)\n. ",
    "miwillhite": "@mnpenner \njavascript\n// a.js\nconsole.log(foo, bar);\n``` bash\nuglifyjs a.js -e a:foo -e b:bar\n(function(foo,bar){console.log(foo,bar)})(a,b);\n```\n. ",
    "Guuz": ":+1: \n. This looks to be the problem (not sure if Uglify itself or this grunt plugin is to blame):\nThe new .js file has this at the bottom:\n//@ sourceMappingURL=script/scripts.js.2.map\nThis should be:\n//@ sourceMappingURL=scripts.js.2.map\nSomehow the root dir doesnt get removed from the file.\n. This looks related...?\nhttps://github.com/mishoo/UglifyJS2/issues/47\n. Found it! :D\nsourceMappingURL: 'scripts.js.map'\nAdd that. That will fix the source map comment in the end of the file.\nFound it here:\nhttps://github.com/gruntjs/grunt-contrib-uglify/issues/25\n. ",
    "codeBelt": "I can't get this to work. Can someone fork my repository and fix my code so that it works?\nhttps://github.com/codeBelt/Grunt-TypeScript-Source-Map-to-JavaScript-with-Uglify\n. ",
    "tlindig": "Thanks for answering.\nBut this do not work. I tried it first without the option expand: true, but than I got error messages, that files could not be found. It dose not add the cwd as prefix to the source files.\nWith the option  expand: true, it work without error messages and find all source files.\nLittle confusing is, that the cwd has no influence to the dest path. it works relative to the gruntfile. It influence only the src path. \nI working on windows 7. But I think that is not the reason for problems. I tried both, system directory separator and unix directory separator. did not have an effect. \n. Found a bug in my source. Sorry.\n. ",
    "front-end-developer": "I know this is late but for others out there to minifiy multiple files into one file do like:\nuglify: {\n        min: {\n            files: [{\n                    expand: true,\n                    \"path/to/output/filetominifyto.js\": [\n                     'filelist/directory/file1.js',\n                     'filelist/directory/file2.js',\n                     'filelist/directory/file3.js'\n                  ]}\n            ]\n        }\n    }\n. ",
    "wolfen351": "for those of you coming here looking for many to 1 file mapping, here is what worked for me:\n```module.exports = function(grunt) {\n    grunt.initConfig({\n        uglify: {\n            target1: {\n            files: [\n                {\n                    src: 'libs/**/*.js',\n                    dest: 'obj/min.js'\n                }\n            ]\n        }\n    }\n});\ngrunt.registerTask('default', ['uglify:target1']);\ngrunt.loadNpmTasks('grunt-contrib-uglify-es');\n\n};```\n. ",
    "davidagraf": "Sorry! I picked the wrong grunt plugin. Sorry!\n. ",
    "ampgcat": "I have an issue that is somewhat related to this.\nIf I'm processing multiple files, I don't have much clue which file failed since grunt-contrib-uglify doesn't seem to say what file it failed on. I get something like\n..\nFile \"build/node_modules/grunt/node_modules/findup-sync/Gruntfile.js\" created.\nFile \"build/node_modules/grunt/node_modules/findup-sync/lib/findup-sync.js\" created.\nWarning: Uglification failed. Use --force to continue.\nSo have to guess what the next file it failed on might be..\nA simple modification in uglify.js\nvar err = new Error('Uglification failed.'+src); // just add +src\nwould be nice\n. Hi. Has the next version come out? Unfortunately, Monkey patch isn't an option for me.. \n. Well.. I did. :) but it is closed and I wasn't getting any response in a week.\n. yeap, I'd figured out :) Thanks.\n2014-07-09 7:20 GMT-07:00 sjurba notifications@github.com:\n\n@ampgcat https://github.com/ampgcat: Sure. Add \"source-map\": \"0.1.34\"\nto your package.json file. Then delete node_modules/grunt-contrib-uglify,\nand run npm install.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/issues/230#issuecomment-48477094\n.\n. \n",
    "EspadaV8": "This would be very handy to pass in coffeescript map files when using a glob\n. ",
    "ckknight": "I'm running into this issue as well.\n. ",
    "rjkip": "Does anyone have any tips on how to make the Grunt warning pass the test? This is the only thing that causes the build to fail.\n. ",
    "davidcl64": "+1\nIs there a known workaround for this?\n. Thank you for the workaround and, while I understand the discussion held in gruntjs/grunt#625 it does seem to be redefining convention.  \nhttp://en.wikipedia.org/wiki/Filename_extension \nOther than behaving in an unexpected fashion (by convention anyway), what is the most common use case for uglify?  If it is to minify js code, the current behavior flies in the face of DRY as anyone using grunt to minify JS could using expansion now has to implement the code to use the last dot convention.  It's not that it isn't trivial, just that it shouldn't be necessary.\nIf it would be considered too much of a breaking change to use the more standard convention by default, perhaps an additional configuration parameter: useLastDot: true to change the behavior could be considered?\nOr if someone was feeling really energetic useDot: n  where n is a negative or positive number (1 == first dot, -1 == last dot, -2 == second to last dot [.min.js])\nThe explaination given in gruntjs/grunt#625 also seems a bit flawed in that a quick glance around at jquery plugins should a number with multiple dots in the names (i.e.: myplugin.jquery.js ==> myplugin.jquery.min.js)  First dot convention is broken here as well.   Or perhaps I am missing something more fundamental?\n. sounds like a plan! :)\n. ",
    "existentialism": "The ext option doesn't necessarily work as you'd expect, it replaces everything from the first '.' it finds.\nCheck out: https://github.com/gruntjs/grunt/pull/625\nTo get it working how you're wanting, pass a rename function to implement whatever renaming logic you need.\n. @davidcl64 I don't disagree with you one bit :)\nBoth @tkellen and @cowboy mention revisiting this in https://github.com/gruntjs/grunt/pull/750, so I would definitely continue the conversation over there as this affects more than just the uglify plugin.\n. How's your gruntconfig look? Does downgrading the task fix things?\n. ",
    "renatoargh": "this thread has helped me! :+1: \n. ",
    "aar0nr": "Ah I see.  Thanks for the heads up.\n. ",
    "mattrobenolt": "@jsoverson I was following along the discussions about the spec, and it changed a few weeks ago. All of the browser vendors are on the same page with updating, but I suppose only time will tell as to when they adopt.\njQuery is going this direction, just not yet either. See: http://bugs.jquery.com/ticket/13793#comment:12\n. ",
    "jamie-pate": "Why not include both? they are /comments/ right?\nin chrome Version 27.0.1453.93 (linux) //# is not working for me \n(i'm pretty confused about this whole thing... \nreverting to grunt-cli@0.1.8 uglify-js@2.3.5 and grunt-contrib-uglify@0.2.0 seems to fix it for me)\n. ",
    "mrmartineau": "Package.json:\njson\n  \"devDependencies\": {\n    \"grunt\": \"0.4.x\",\n    \"grunt-devtools\": \"~0.1.0-7\",\n    \"grunt-contrib-sass\": \"~0.3.0\",\n    \"grunt-contrib-jshint\": \"~0.5.4\",\n    \"grunt-contrib-watch\": \"~0.3.1\",\n    \"grunt-contrib-uglify\": \"~0.2.1\",\n    \"grunt-contrib-copy\": \"~0.4.1\",\n    \"grunt-jekyll\": \"~0.3.0\"\n  },\nGrunt copy and watch tasks:\n``` json\ncopy: {\n    main: {\n        files: [\n            {\n                src: ['js/_compiled/_script.min.js'],\n                dest: '_site/js/_compiled/_script.min.js'\n            },\n            {\n                src: ['_script.min.js.map'],\n                dest: '_site/_script.min.js.map'\n            }\n        ]\n    }\n},\nwatch: {\n    scss: {\n        files: ['scss/*/.scss'],\n        tasks: ['sass:dev', 'copy:main']\n    },\njs: {\n    files: 'js/**/*.js',\n    tasks: ['uglify', 'copy:main']\n}\n\n}\n```\nThanks for you help.\n. I figured out why I'm getting the infinite loop. It is because I am copying the uglified code into a subdirectory of the js folder, which I'm watching for changes. So, every time the uglified file is copied to the new folder, grunt watch sees a change and starts all over again. I fixed it by being more specific about which directories I watch for.\njson\njs: {\n    files: ['Gruntfile.js','js/*.js','js/libs/**/*.js'],\n    tasks: ['uglify', 'copy:main']\n},\n. ",
    "fotomut": "When will this be available?  Is there a way to specify this change directly using npm?\n. Great job team :-)\nAs a side note to others, in answer to my question:\nI was able to specify the pull request using npm by specifying the following in package.json\njson\n\"dev-dependencies\": {\n    \"grunt-contrib-uglify\": \"git+https://github.com/dsuket/grunt-contrib-uglify.git#9950ca94bab46fe5e8fa5447903a09ca6489d483\"\n}\nBut note this can be dangerous because it won't fast-forward any changes that are made on the master branch.  So only use this when you absolutely need a pull request, and keep a watch for when the pull request is merged.\n. ",
    "Sense545": "Has landed in Firefox. Time to update to latest version of uglify?\n. I see no reason not to update to the latest version. If developers don't want to use chrome dev-channel or canary they can always just avoid using the latest version of grunt-contrib-uglfiy, just as you are avoiding using the latest version of uglify.\n. ",
    "markdalgleish": "Any feedback on this, @jsoverson?\n. Thanks for fixing this. Any particular reason my change wasn't merged in? Even though this is a tiny fix, it would be nice to get the credit :)\n. No worries, thanks for the reply :)\n. ",
    "necolas": "I have both mangle and compress set to false:\njs\n      dev: {\n        options: {\n          mangle: false,\n          compress: false\n        },\n        files: {\n          '<%= dir.build %>/js/bundle.js': [\n            '<%= dir.src %>/js/somefile.js',\n            '<%= dir.src %>/js/anotherfile.js'\n          ]\n        }\n      }\nThe output is minified, but I can't show you the exact output as this work isn't public.\n. The configuration is above. Downgrading to 0.1.x didn't make a difference.\nUsing uglifyjs directly has the same result; so I'm assuming that it always produces minified output, even when doing no compression. That's a shame.\n. Yeah that's what I ended up doing. Would have been nice not to need the concat task, but no big deal.\n. ",
    "FrankFan": "javascript\n// \u662f\u5426\u538b\u7f29\u4ee3\u7801\noutput: {\n    beautify: false\n}\n. javascript\n// \u662f\u5426\u538b\u7f29\u4ee3\u7801\noutput: {\n    beautify: false\n}\n. ",
    "AntonioRedondo": "Why this issue has been closed without being solved? As of February 2016 (v0.11.1) compress: false still doesn't work. I had to resort to the concat task to solve the problem. beautify: true still modifies the original source.\n. ",
    "UltCombo": "According to a comment above, the same problem occurs when using uglify directly. This repository is a small wrapper around the UglifyJS2 package, so this issue should be reported there if it hasn't been already.\n. @jmeas Thanks for the quick reply.\nI've just tested with the uglify-js and it seems to work fine if I pass a path with forward slashes, e.g.:\njs\nvar result = UglifyJS.minify(['js/main.js'], {\n    outSourceMap: \"main.min.js.map\"\n});\nconsole.log(result.map); // contains \"sources\":[\"js/main.js\"]\nHowever, if I pass a path with backslashes in the source paths, the output will contain backslashes. I guess that is the expected behavior, since then I'd be explicitly passing backslashes in the source paths.\nI believe the problem is with grunt-contrib-uglify's usage of path.relative and path.sep which returns paths with backslashes on Windows. It could be normalized with a simple replace operation after building the source paths: .replace(/\\\\/g, '/').\nI believe it makes more sense patching it here before passing the paths to uglify than uglify itself returning paths different than the ones passed in.\nThis is also important because users running on different platforms would generate different source map files, making it inconsistent.\nThoughts?\n. @jmeas Thanks. Right now, my Grunt workflow is not complete yet so this isn't a 1st priority at the moment. I've also got some papers to turn in soon, but I should be able to work on this in a day or so as well.\n\nWould you agree that this should be changed in both the sources array and the sourceMappingURL in the generated file?\n\nThat seems correct at the first glance. =] I can do some more throughout testing and write an unit test once I'm done with some priorities.\nI guess a forwardSlashPath function should be created, or add slash as a dependency to be extra safe.\n. I've thought a bit about what you've said @jmeas as well, since soucemaps are mainly a browser thing, the Uglify library could do the path normalization right before outputting to the map's sources property.\nGuess I'll ping the Uglify guys to know their instance on this.\n. @jmeas sounds fair enough. =] One thing though, path.relative at uglify.js#L45 would return a path with backslashes on Windows. I don't really see a much more robust solution than a replace on that case. Grunt itself uses a replace on Windows platforms to normalize paths: https://github.com/gruntjs/grunt/blob/master/lib/grunt/file.js#L29-L39\n. @jmeas Well, if you'd rather avoid regex at all costs, str.split('\\\\').join('/') has the same output, though it has the same level of hackiness (changing a path with string manipulation). :P\n. @jmeas no problem, will do!\nI was just checking the tests at the moment. Before your changes I had 10 tests failing:\n- 8 due to source maps' sources property\n- 1 due to the sourcemapping comment\n- 1 due to banner's newlines being \"normalized\" to \\r\\n (unrelated to this issue)\nI'll try your changes and check again. =]\n. @jmeas I've just ran the tests after applying your patch, everything goes well now (except one failing test due the banner's newlines but that's completely unrelated here, I'll file it separately).\n. It should be simple enough, it is not really an issue with the functionality, just the test. It is really weird that the test sends \\n in the banner and the output contains \\r\\n but that's probably an Uglify thing. Oh sorry, going a bit too off-topic, I'll open another issue now.\n. Would you mind sharing what warnings are those? As far as I can see, I don't get any warning when executing the grunt test command.\n. Oh wait, I'm having some issues with source maps on Windows.\nEven though your patch from https://github.com/gruntjs/grunt-contrib-uglify/pull/175 did fix the issue, after pulling the latest commit the issue is still present. (?) This might be a derp moment, but I can see the correct code in the files but it is as if not taking effect. I'll try to debug this later and file an issue separately/ask for reopen if needs be.\n. No. I've passed \"foo\\n\" on the command line, interestingly enough it kept the \"\\n\" string as literal characters and added a line feed after it (just LF, not CRLF). Seems rather weird now.\n. Sorry for the delay, the preamble output seems okay. It adds two LFs, one for the \\n in the end of the preamble string and another automatically added it seems.\nSo my deduction wasn't very correct. Though it is weird that there are two tests using banners and only one fails.\n. Oh wait, this plugin handles banners differently depending on the source maps settings! Guess I'm on the right track now.\n. Yes I've read that part of the code earlier and it just hit me. :) Though, even then, this doesn't make much sense. The test which fails is the one without sourcemaps whose preamble is concatenated by Uglify, but Uglify is working correctly from the command line.\n. Oh doh sorry missed that small ! in the conditional :)\n. options.banner contains \\r\\n at tasks/uglify.js#L57 for both banner tests. So it is Uglify normalizing it to \\n in the test with sourcemap.\n. Yep, uglifyjs --preamble $'foo\\r\\n' -o out.js main.js removes the \\r from the output so Uglify is doing the normalization job there.\nNow the problem is, from where are those \\r coming.\n. @jmeas if you're up for teamviewer or similar and have free time, we could track the issue faster.\n. @jmeas  Yep, TV is cross-platform and free for personal use. I've messaged you through hangouts, my email is ultcombo@gmail.com\n. I believe this can be closed as #198 was merged through https://github.com/gruntjs/grunt-contrib-uglify/commit/1a9f177efb485fbf0b1fec72ce06c8bd9594e31d @vladikoff \n. No problem. =]\n. Works perfectly! All tests passing (except the unrelated banner newline issue).\n. @jmeas oh nice! :D\n. @tomByrer the preserveComments: 'some' option is handled at grunt-contrib-uglify. It accepts a custom function as per docs as well.\n. @jmeas I'm doing nothing atm, should be no problem.\n3am here but I just need to grab one more coffee before getting started. :P\n. I've fixed  and simplified the Uglify preamble normalization description above -- trailing line breaks are not collapsed, all line breaks are matched (and replaced by \\n) before reaching the |\\s*$ part.\n. It is already fixed in the master branch (https://github.com/gruntjs/grunt-contrib-uglify/pull/175 and https://github.com/gruntjs/grunt-contrib-uglify/pull/183), should land on 0.5.\n. @leigeber it is fixed in the github repo but not in the current release.\nAlthough @jmeas commented that a new release would have been made about a month ago, there hasn't been a new release since March 1st as per release history.\n. @jmeas alright, by \"change the name\" you mean a simple rename throwing away banner, or keep banner as an alias for preamble for back-compat?\nI believe back-compat is always nice, but it could also result in unexpected behavior when both banner and preamble options are supplied. Although back-compat is nice for those updating from older versions, it could be unnecessary and confusing in the long term.\nSince grunt-contrib-uglify still has experimental API, we are allowed to break back-compat, but I'm not sure whether to keep the banner alias or not.\n. Well, it was simple enough to keep the banner as an alias. I've added a test for preamble and updated the readme as well.\n. @jmeas Alright, done. =]\n. @jmeas anything else that should be done before merging?\nJust give me a holler if this needs rebasing as well. \n. @jmeas no problem, I've been rather busy lately as well.\nI've signed the CLA using my GH username as the foundation username. =]\n. You have some basic JS error there -- properties in object literal syntax are always interpreted as strings. This is unrelated to Grunt.\nA more suitable Grunt syntax for your use case would be:\njs\nfiles: [{\n    src: '<%= concat.dev.dest %>',\n    dest: jsRelease\n}]\n. I personally use <br> when editing my .md/.markdown files -- it is more clear and visible than trailing whitespace, and of course doesn't need special-casing to allow trailing whitespace in the editor and git pre-commit checks.\nIMHO trailing whitespace == PURE EVIL, but that is an issue with the markdown language though.\n. I believe deleting files from the disk is rather dangerous and out of this plugin's scope. You can always use grunt-contrib-clean.\n. @jmeas By \"move away\" you mean dropping support for external maps? I'd like to still be able to generate separate .map files, mainly because the minified files are smaller and pretty much optimal for production environment -- external maps are only downloaded when the user opens DevTools. If maps are inline by default, it would be necessary to run a build with different configs before deploying the minified files. I guess this is a bit off-topic here, maybe we can open another issue for this.\n. @jmeas thanks! I didn't know there was a repository for grunt-contrib source mapping convention. embed seems like a fine sourceMapStyle, my previous comment assumed inline to be the default.\n. Seems like you're misinterpreting the scope of this plugin -- the same \"problem\" affects any plugin that outputs files to disk. That is why we have grunt-contrib-clean.\nThe warning means you should fix your gruntfile.\nAnd, IMHO, it doesn't make much sense to write empty files nor overwrite existing files on a failed compilation. The best course of action on a failed attempt is to not produce results. This scenario shouldn't happen with a well-configured Gruntfile, and if it does, all you get is a warning so that you may review it.\n. That part of the code won't exist anymore when #193 is merged. Also, when that PR is merged, Uglify will automatically add a line break between the preamble and the code as explained in #191, so your suggestion will be implemented as a side-effect of the #193 changeset.\nI'll note that the line break will be a \\n, as Uglify's output uses \\n as line separator independent of OS.\n. Probably a dupe of #190 \n. Yep, the problem is with Uglify and an workaround is available at #190\n. True, it is clearly invalid JSON. Thing is, Uglify processes JavaScript expressions and returns valid JavaScript, not JSON (which is a more strict subset of JavaScript's object syntax). Even the .json files in this PR are not valid JSON.\nAs a hackaround, you could use the old eval trick and JSON.stringify the result to obtain valid JSON, I'm not aware of a better option.\n. Well, I can also try handling this if @robwierzbowski is too busy debugging some other issue.\n. I've just been thinking for a minute, it feels somewhat wrong to use slash for this.\nslash is for safely converting file path separators. However, source maps expect URLs in the sources array, not file paths. That is, it is the browser whom resolves the source URLs, not an OS's file system.\nSince grunt-contrib-uglify always uses relative paths for the sources (correct me if I'm wrong), I believe the correct approach would be to always convert backslashes to /, running each path part through encodeURIComponent. I wonder if @sindresorhus has a module for safely converting relative paths to URLs?\n//cc @jmeas @robwierzbowski \n. I've been playing with URI.js, but I'm not having luck with pathnames which contain # there. And we can't just encode all reserved characters as the path separators must be kept.\nGuess I'll export my previous idea into a module then.\n. Oh damn, why do I always forget to branch. Follow on #224\n. For reference, see the reasoning in https://github.com/gruntjs/grunt-contrib-uglify/pull/175#issuecomment-37899694 and https://github.com/gruntjs/grunt-contrib-uglify/issues/222#issuecomment-47471524\n. @jmeas do I have to add use cases where sourcemapping does not work without this fix? Or are you just a bit too busy to review these PRs?\n. Updated OP.\n. How come your network does not allow access to Stack Overflow? If your network is used by coders, disallowing SO access means a 90% productivity drop roughly. You could always try a VPN or Tor to bypass that.\nBut anyway, on-topic, you can pass an array of sources:\njs\nbuild: {\n    files: {\n        'public/all.min.js': ['c.js', 'b.js', 'a.js'],\n    }\n}\nOr, for laziness' sake, you also could rename the files like 001_c.js, 002_b.js and 003_a.js, then *.js would minify them in the order you want.\n. Oh I see. I don't have much experience with Ember, someone else around here might be able to help you.\nThough, when I have a lot of files, I prefix independent dependencies with _ for them to be concatenated before other files, but that only works with files in the same directory.\nBy the way, avoid starting paragraphs with tab or 4 spaces, otherwise your text gets formatted as a code block. :P\n. As this task delegates to Uglify 2, you should probably request this feature there.\n. Maybe run your files individually through grunt-contrib-jshint before attempting uglification?\nBy the way, most IDEs and text editors support JSHint through extensions/plugins. This provides a faster feedback cycle than looking at the console and mapping the errors back to the editor manually.\n. I've just tried to uglify a file with invalid syntax, the line numbers are correct for me. The error message outputs a comma-separated list of files instead of the file which threw the error, though. This seems to be due to the src array being coerced into a string.\nI don't know how easy or hard it would be to workaround this issue, seeing as the error is thrown from inside the Uglify2 library (it would probably need storing and passing around the current file before attempting to parse it with Uglify). I would just take one of the thousand ways around it meanwhile.\n. @lewisdiamond I've tested it by uglifying two files inside of a folder (src: dir/*.js). I've inserted syntax errors on each them, one file at a time, and the error pointed to the correct line inside of the file that contained syntax errors.\nAnd as far as I can see, each file is compiled individually inside of a forEach loop. Perhaps there is another issue with how your gruntfile is set up?\n. The trailing spaces are part of the markdown syntax.\nI believe the GitHub-flavored markdown does not need trailing spaces to insert line breaks, but it is better to keep them for compatibility with standard markdown parsers.\n. @jmeas from Writing on Github:\n\nNewlines\nThe biggest difference with writing on GitHub is the way we handle linebreaks. With Markdown, you can hard wrap paragraphs of text to have them combine into a single paragraph. We find this causes a huge number of unintentional formatting errors. GitHub treats newlines in paragraph-like content as real line breaks, which is usually what you intended.\n\nProblem is, it is not always clear what the GFM parser considers as \"paragraph-like content\". Plus, we also need compatibility with npm's markdown parser (I have no idea what they use). So, it is better to not rely on this behavior anyway.\n. @sindresorhus IIRC if you run Grunt on this repository, it will regenerate the Readme file with a new footer timestamp even if none of its contents have changed. This is just noise diff which is never committed. Not sure if this is what OP meant though.\n. It does call track:\njs\nfunction doFormSubmit(a){if(track(a),\"form2\"==a.id){var b=321;doThat(b)}}\n                            ^^^^^\nThe comma operator will discard track(a)'s return value, thus not affecting the if condition.\n. Also, issues with the output should be reported in the UglifyJS2 repository. https://github.com/mishoo/UglifyJS2/issues/new\n. Possible dupe of https://github.com/mishoo/UglifyJS2/issues/88, https://github.com/mishoo/UglifyJS2/issues/180, https://github.com/mishoo/UglifyJS2/issues/332 and https://github.com/mishoo/UglifyJS2/issues/446?\n. Well, the common approach is writing code which doesn't conflict with other files once concatenated. You usually achieve that with the good ol' IIFE wrapper boilerplate.\n. What conflict? The whole jQuery library is defined inside of an IIFE and is non-strict -- I assume you'd concatenate jQuery before your other files.\nAnyway, going a bit off-topic, in order to optimize caching you'd rather not concatenate the jQuery library with other files. That is, if you're concatenating the jQuery library with your code, the clients will be forced to re-download the whole jQuery library again every time you make any change to your code. It is usually better to leave the jQuery library in its own file so that it can live in the browser cache for longer.\n\nBack on-topic, you should use the IIFE wrapper boilerplate to make your files concatenation-safe.\njs\n(function() {\n    'use strict';\n    // your code\n    window.globalVar = someValue; // if you need to export any globals\n}());\nI don't think there would be an option to remove the \"use strict\" pragma, that would have potential side-effects as strict code is not fully back-compatible with non-strict code.\n. Isn't there any guideline for verbosity in grunt-contrib plugins? Creating one would avoid all these discussions.\nAnyway, I believe most users want feedback when files are written to disk, so .log is more suitable here imho.\n//cc @sindresorhus \n. I may not be 100% up to date with npm development, but isn't ~ a lost cause? Isn't npm improving ^ instead?\n. @kraftwer1 Provided package authors are using (and respecting) the semver spec, ^ is the best choice AFAIK. Semver allows for breaking changes between 0.0.x and 0.0.y as well as pretty much anything in the 0.x scope, so ^ is safest.\nOf course, many authors only apply breaking changes in major versions (e.g. don't give 0.x any special meaning), but maintaining a list of which packages use semver and which use their own versioning that works best with version operator hacks do not seem like a very maintainable approach imho. I guess it is better to play it safe and follow the spec (e.g. don't break if other authors make use of the 0.x rules).\n. Oh wait a min, guess I'm a bit too sleepy, so now ^0.x.y === 0.x.y because according to semver, for example, 0.1.x is not necessarily compatible with 0.1.y.\nMy bad, I see now the problem with the incompatibilities.\n. @XhmikosR your line endings checkout style is probably wrong. You should checkout with LF line endings. \n. @XhmikosR are you sure you had autocrlf = input in your global .gitconfig before cloning the repo, or have you fixed it in your local repo and did a reset/checkout?\n. @XhmikosR sounds like a good idea! Maybe open another PR or issue?\n. @vladikoff why global? Windows folks may not always want to checkout with LF line endings in every single repository they contribute to. Modularity for the win.\n. @vladikoff what's the problem with a local .gitattributes? It would be quite useful for Windows contributors AFAICS.\n. @shama the unit tests fail when the fixtures contain \\r\\n.\nAnother option would be normalizing the \\r\\n to \\n when reading the fixture files' contents.\n. > It's easier for everything to just stick to LF. All not completely awful Windows editors supports LF, so that's not a blocker either.\nAgreed.\nThough, normalizing the line endings in the unit test script does not add much complexity and allows a bit more of flexibility. Anyway, either of the solutions are fine, and one does not conflict with the other so why bother.\n. WRT the tests, see discussion here. We've already done some work to get the tests running in Windows (see #186), but you still have to disable autocrlf by yourself.\nJust let me add a bit of explanation to non-Windows users: Git in Windows installs with autocrlf=true by default, so whenever you checkout, the working directory's text files' line endings are automatically normalized to \\r\\n causing the tests to fail. One needs to globally set autocrlf=false or autocrlf=input before cloning the repo, otherwise it is a bit of a hassle to disable the autocrlf after cloning the repo. IMO, a .gitattributes as suggested here would eliminate all this confusion and streamline the contributing process for Windows users.\nMaybe a new issue should be opened for this.\n//cc @vladikoff @jmeas @cowboy \n. Also, for future reference, issues with the code output should be reported in the UglifyJS2 repository.\n. From #65:\n\nUsing uglifyjs directly has the same result; so I'm assuming that it always produces minified output, even when doing no compression. That's a shame.\n\nYou should probably report it in the UglifyJS2 repository.\n. Related #254 #249 #229 #75\n. What exactly do you mean by \"mixed js code\"? Do you mean you don't want to concatenate the files?\n. Try the mangle: false option. =]\n. dupe of #254 and a dozen more.\n. @sindresorhus a RFTM link would be better than sending extremely low quality questions to Stack Overflow imho.\n. @TiagoPacheco25 oh, and please don't take offence by \"extremely low quality\", your question is actually very well written and clear, but it has one fatal flaw which is that your question is answered by the very first pages of the docs: http://gruntjs.com/configuring-tasks\nThese questions are often not welcome in SO.\n. Issues with the output should be reported in the uglify repository.\nAnd you're probably concatenating files with 'use strict'; in the top-most scope with non-strict files.\n. > Please do correct me if removing the node_modules directory is common practice. Thanks.\nThis probably doesn't mean much, but I personally always do rm -rf node_modules && npm install for updating dependencies. I've had way too many problems with npm update in the past, though most of them might have been fixed in the latest npm releases and the npm@3 beta.\nIn the packages I maintain, I do bump the minor and patch versions explicitly, not because the user may have an older version in the package's node_modules directory, but rather because there may be an older version in a node_modules directory sibling of an ancestor directory (downstream package) which satisfies the semver.\nAlso, in npm@3 dependencies are installed maximally flat. This means that having a package anywhere in the dependency tree (including the downstream package's full dependency tree) which satisfies a given dependency's semver range will prevent a newer version from being installed.\nSo, if you make use of a dependency's feature which was introduced in a minor release (e.g. 1.1.0), make sure to depend on ^1.1.0 and not ^1.0.0. Likewise, if your scripts relies on a bug fix (1.1.1) to work correctly, make sure to depend on ^1.1.1.\n. See http://gruntjs.com/configuring-tasks#files\nAlso, support questions are best fit for Stack Overflow.\n. :+1: \n. Just because a single dependency does not respect semver, it does not mean that you have to lock down all other dependencies. I'd recommend using ~ for the problematic dependency (uglify-js) only.\nnpm has chosen to change the default range operator from ~ to ^ for reasons. One of these reasons is the ability to pull in new features and bug fixes automatically when new minor versions are released.\nThere has been recently a surge of people trying to lock down dependency versions (i.e. depend on exact versions). This is not really useful because these dependencies will still depend on other packages via semver ranges. Bottom line is: don't try to subvert semver, there will always be breakage when semver is not respected. People make mistakes and things will be broken. Semver is what allows fixing those mistakes without having to update and release a new version of every package in the dependency chain between your package and the buggy package.\nuglify-js is the exception, not the norm. If they deliberately decided to not follow semver, then add special treatment for that specific package only.\n/CC @sindresorhus \n. Thanks for taking the time to reply. :smiley: \n\nSame happened to less. If developers in charge of less and uglify-js do not respect semver I don't expect more from developers of less used libraries.\n\nThose projects started long ago, before semver was so ubiquitous. I believe this is not about popularity or competence, but rather resisting to change.\n\nIMHO ~ is safest\n\nThat may be the case. Though, if a developer does not know semver, they are as well likely to release a breaking change in a patch version.\nIn any case, no dependency management solution is perfect, so I believe this topic (general dependency versioning) won't settle for a good few years at least.\n. You can do the sugaring in your own code (I'm assuming CoffeeScript):\ncoffeescript\nmodule.exports =\n  prod:\n    files:\n      \"build/js/app.js\": [\"foo.js\", \"bar.js\"].map f -> \"app/js/#{f}\"\n      # OR\n      \"build/js/app.js\": (\"app/js/#{f}\" for f in [\"foo.js\", \"bar.js\"])\n. In your example, there is absolutely no semantic difference. When entering an execution context, Function Declarations are always instantiated before any other statements are run.\nIssues with the output should generally be reported in the Uglify repository, but as far as I can see this is a non-issue.\n. @XhmikosR An upstream _non-_issue, to be more precise. :stuck_out_tongue:\n. Try extDot: 'last'\nhttp://gruntjs.com/configuring-tasks#building-the-files-object-dynamically\n. How about extDot: 'last', src: ['**/*.js', '!**/*.min.js']\n. Update: fixed a typo in the code sample above.\n. No problem. :smiley:\nI also agree that a different dest directory would be a better option, I prefer to avoid using negated globs needlessly. Changing the directory may or may not be viable for the user, so we can leave both possible solutions.\n. This plugin does not support ES2015 (ES6) yet, see https://github.com/gruntjs/grunt-contrib-uglify/issues/421#issuecomment-232933640\n. Yes, it is. https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#New_notations_in_ECMAScript_2015\n. Looks like a dupe of #381\n. Dupe of #3?\n. This line should be normalized too, otherwise the sources will contain backslashes. \n. Agreed, less conditionals is a good thing. =]\n. ",
    "frankie-loves-jesus": "Same problem here :/. ",
    "MikeGodin": "Setting beautify to true seems to allow mangle and compress to be set to false.\n   options : {\n      beautify: true,\n      mangle : false, \n      compress : false \n    },.\n",
    "emohedano": "Is the sourceMapOverride already avaliable? I'd like to remove the prefix from the sources in the source map file \n. ",
    "fundon": "@emohedano Unavaliable\n. ",
    "gspe": "Yeah this is the problem, the target is a url, I'm trying to implement a google maps on a web site.\nI've read the doc but i haven't find any option to ignore an url\nThis is my gruntfile, generated by yeoman\n```\n// Generated on 2013-06-24 using generator-webapp 0.2.3\n'use strict';\nvar LIVERELOAD_PORT = 35729;\nvar lrSnippet = require('connect-livereload')({port: LIVERELOAD_PORT});\nvar mountFolder = function (connect, dir) {\n    return connect.static(require('path').resolve(dir));\n};\n// # Globbing\n// for performance reasons we're only matching one level down:\n// 'test/spec/{,/}.js'\n// use this if you want to recursively match all subfolders:\n// 'test/spec/*/.js'\nmodule.exports = function (grunt) {\n    // load all grunt tasks\n    require('matchdep').filterDev('grunt-*').forEach(grunt.loadNpmTasks);\n// configurable paths\nvar yeomanConfig = {\n    app: 'app',\n    dist: 'dist'\n};\n\ngrunt.initConfig({\n    yeoman: yeomanConfig,\n    watch: {\n        options: {\n            nospawn: true\n        },\n        coffee: {\n            files: ['<%= yeoman.app %>/scripts/{,*/}*.coffee'],\n            tasks: ['coffee:dist']\n        },\n        coffeeTest: {\n            files: ['test/spec/{,*/}*.coffee'],\n            tasks: ['coffee:test']\n        },\n        compass: {\n            files: ['<%= yeoman.app %>/styles/{,*/}*.{scss,sass}'],\n            tasks: ['compass:server']\n        },\n        livereload: {\n            options: {\n                livereload: LIVERELOAD_PORT\n            },\n            files: [\n                '<%= yeoman.fapp %>/*.html',\n                '{.tmp,<%= yeoman.app %>}/styles/{,*/}*.css',\n                '{.tmp,<%= yeoman.app %>}/scripts/{,*/}*.js',\n                '<%= yeoman.app %>/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}'\n            ]\n        }\n    },\n    connect: {\n        options: {\n            port: 9000,\n            // change this to '0.0.0.0' to access the server from outside\n            hostname: 'localhost'\n        },\n        livereload: {\n            options: {\n                middleware: function (connect) {\n                    return [\n                        lrSnippet,\n                        mountFolder(connect, '.tmp'),\n                        mountFolder(connect, yeomanConfig.app)\n                    ];\n                }\n            }\n        },\n        test: {\n            options: {\n                middleware: function (connect) {\n                    return [\n                        mountFolder(connect, '.tmp'),\n                        mountFolder(connect, 'test')\n                    ];\n                }\n            }\n        },\n        dist: {\n            options: {\n                middleware: function (connect) {\n                    return [\n                        mountFolder(connect, yeomanConfig.dist)\n                    ];\n                }\n            }\n        }\n    },\n    open: {\n        server: {\n            path: 'http://localhost:<%= connect.options.port %>'\n        }\n    },\n    clean: {\n        dist: {\n            files: [{\n                dot: true,\n                src: [\n                    '.tmp',\n                    '<%= yeoman.dist %>/*',\n                    '!<%= yeoman.dist %>/.git*'\n                ]\n            }]\n        },\n        server: '.tmp'\n    },\n    jshint: {\n        options: {\n            jshintrc: '.jshintrc'\n        },\n        all: [\n            'Gruntfile.js',\n            '<%= yeoman.app %>/scripts/{,*/}*.js',\n            '!<%= yeoman.app %>/scripts/vendor/*',\n            'test/spec/{,*/}*.js'\n        ]\n    },\n    mocha: {\n        all: {\n            options: {\n                run: true,\n                urls: ['http://localhost:<%= connect.options.port %>/index.html']\n            }\n        }\n    },\n    coffee: {\n        dist: {\n            files: [{\n                expand: true,\n                cwd: '<%= yeoman.app %>/scripts',\n                src: '{,*/}*.coffee',\n                dest: '.tmp/scripts',\n                ext: '.js'\n            }]\n        },\n        test: {\n            files: [{\n                expand: true,\n                cwd: 'test/spec',\n                src: '{,*/}*.coffee',\n                dest: '.tmp/spec',\n                ext: '.js'\n            }]\n        }\n    },\n    compass: {\n        options: {\n            sassDir: '<%= yeoman.app %>/styles',\n            cssDir: '.tmp/styles',\n            generatedImagesDir: '.tmp/images/generated',\n            imagesDir: '<%= yeoman.app %>/images',\n            javascriptsDir: '<%= yeoman.app %>/scripts',\n            fontsDir: '<%= yeoman.app %>/styles/fonts',\n            importPath: '<%= yeoman.app %>/bower_components',\n            httpImagesPath: '/images',\n            httpGeneratedImagesPath: '/images/generated',\n            httpFontsPath: '/styles/fonts',\n            relativeAssets: false\n        },\n        dist: {},\n        server: {\n            options: {\n                debugInfo: true\n            }\n        }\n    },\n    // not used since Uglify task does concat,\n    // but still available if needed\n    /*concat: {\n        dist: {}\n    },*/\n    requirejs: {\n        dist: {\n            // Options: https://github.com/jrburke/r.js/blob/master/build/example.build.js\n            options: {\n                // `name` and `out` is set by grunt-usemin\n                baseUrl: yeomanConfig.app + '/scripts',\n                optimize: 'none',\n                // TODO: Figure out how to make sourcemaps work with grunt-usemin\n                // https://github.com/yeoman/grunt-usemin/issues/30\n                //generateSourceMaps: true,\n                // required to support SourceMaps\n                // http://requirejs.org/docs/errors.html#sourcemapcomments\n                preserveLicenseComments: false,\n                useStrict: true,\n                wrap: true\n            }\n        }\n    },\n    rev: {\n        dist: {\n            files: {\n                src: [\n                    '<%= yeoman.dist %>/scripts/{,*/}*.js',\n                    '<%= yeoman.dist %>/styles/{,*/}*.css',\n                    '<%= yeoman.dist %>/images/{,*/}*.{png,jpg,jpeg,gif,webp}',\n                    '<%= yeoman.dist %>/styles/fonts/*'\n                ]\n            }\n        }\n    },\n    useminPrepare: {\n        options: {\n            dest: '<%= yeoman.dist %>'\n        },\n        html: '<%= yeoman.app %>/index.html'\n    },\n    usemin: {\n        options: {\n            dirs: ['<%= yeoman.dist %>']\n        },\n        html: ['<%= yeoman.dist %>/{,*/}*.html'],\n        css: ['<%= yeoman.dist %>/styles/{,*/}*.css']\n    },\n    imagemin: {\n        dist: {\n            files: [{\n                expand: true,\n                cwd: '<%= yeoman.app %>/images',\n                src: '{,*/}*.{png,jpg,jpeg}',\n                dest: '<%= yeoman.dist %>/images'\n            }]\n        }\n    },\n    svgmin: {\n        dist: {\n            files: [{\n                expand: true,\n                cwd: '<%= yeoman.app %>/images',\n                src: '{,*/}*.svg',\n                dest: '<%= yeoman.dist %>/images'\n            }]\n        }\n    },\n    cssmin: {\n        dist: {\n            files: {\n                '<%= yeoman.dist %>/styles/main.css': [\n                    '.tmp/styles/{,*/}*.css',\n                    '<%= yeoman.app %>/styles/{,*/}*.css'\n                ]\n            }\n        }\n    },\n    htmlmin: {\n        dist: {\n            options: {\n                /*removeCommentsFromCDATA: true,\n                // https://github.com/yeoman/grunt-usemin/issues/44\n                //collapseWhitespace: true,\n                collapseBooleanAttributes: true,\n                removeAttributeQuotes: true,\n                removeRedundantAttributes: true,\n                useShortDoctype: true,\n                removeEmptyAttributes: true,\n                removeOptionalTags: true*/\n            },\n            files: [{\n                expand: true,\n                cwd: '<%= yeoman.app %>',\n                src: '*.html',\n                dest: '<%= yeoman.dist %>'\n            }]\n        }\n    },\n    // Put files not handled in other tasks here\n    copy: {\n        dist: {\n            files: [{\n                expand: true,\n                dot: true,\n                cwd: '<%= yeoman.app %>',\n                dest: '<%= yeoman.dist %>',\n                src: [\n                    '*.{ico,png,txt}',\n                    '.htaccess',\n                    'images/{,*/}*.{webp,gif}',\n                    'styles/fonts/*'\n                ]\n            }, {\n                expand: true,\n                cwd: '.tmp/images',\n                dest: '<%= yeoman.dist %>/images',\n                src: [\n                    'generated/*'\n                ]\n            }]\n        }\n    },\n    concurrent: {\n        server: [\n            'coffee:dist',\n            'compass:server'\n        ],\n        test: [\n            'coffee',\n            'compass'\n        ],\n        dist: [\n            'coffee',\n            'compass:dist',\n            'imagemin',\n            'svgmin',\n            'htmlmin'\n        ]\n    },\n    bower: {\n        options: {\n            exclude: ['modernizr']\n        },\n        all: {\n            rjsConfig: '<%= yeoman.app %>/scripts/main.js'\n        }\n    }\n});\n\ngrunt.registerTask('server', function (target) {\n    if (target === 'dist') {\n        return grunt.task.run(['build', 'open', 'connect:dist:keepalive']);\n    }\n\n    grunt.task.run([\n        'clean:server',\n        'concurrent:server',\n        'connect:livereload',\n        'open',\n        'watch'\n    ]);\n});\n\ngrunt.registerTask('test', [\n    'clean:server',\n    'concurrent:test',\n    'connect:test',\n    'mocha'\n]);\n\ngrunt.registerTask('build', [\n    'clean:dist',\n    'useminPrepare',\n    'concurrent:dist',\n    'requirejs',\n    'cssmin',\n    'concat',\n    'uglify',\n    'copy',\n    'rev',\n    'usemin'\n]);\n\ngrunt.registerTask('default', [\n    'jshint',\n    'test',\n    'build'\n]);\n\n};\n```\n. The solution that i've find is to remove uglify from grunt task and call it from requirejs optimizer.\nRequirejs have an empty: option in order to ignore something.\npaths: {\n    'googlemaps':'empty:'\n}\nSo i changed my gruntfile as follow and it works\n``\nrequirejs: {\n            dist: {\n                // Options: https://github.com/jrburke/r.js/blob/master/build/example.build.js\n                options: {\n                    //nameandout` is set by grunt-usemin\n                    baseUrl: yeomanConfig.app + '/scripts',\n                    //optimize: 'none',\n                    optimize: 'uglify2',\n                    // TODO: Figure out how to make sourcemaps work with grunt-usemin\n                    // https://github.com/yeoman/grunt-usemin/issues/30\n                    //generateSourceMaps: true,\n                    // required to support SourceMaps\n                    // http://requirejs.org/docs/errors.html#sourcemapcomments\n                    preserveLicenseComments: false,\n                    useStrict: true,\n                    wrap: true,\n                    //uglify2: {} // https://github.com/mishoo/UglifyJS2\n                    paths: {\n                        'googlemaps':'empty:'\n                    }\n                }\n            }\n        }\n.............................\ngrunt.registerTask('build', [\n        'clean:dist',\n        'useminPrepare',\n        'concurrent:dist',\n        'requirejs',\n        'cssmin',\n        'concat',\n        //'uglify',\n        'copy',\n        'rev',\n        'usemin'\n    ]);\n``\n.uglifytask is not configured because I haven't found any option that telluglify` to ignore something.\nSo I've configured requirejs to call uglify\n. ",
    "ilanbiala": "Yes, I would like to have the option to have the map files to be output in an unminified format. I've seen others with unminified sourcemaps and it definitely helps on occasion. The sourcemaps are generated in grunt using the uglify sourcemaps option. I am referring to the output sourcemaps that should be able to be unminified.\nIs there any good guide by the way for setting up sourcemaps properly because for some reason I can't get it to work.\n. ",
    "benbuckman": "Thanks!!\n. ",
    "bill-barron": "Thanks!\n. ",
    "nitriques": "+1 on this issue, It's been really anoying.\n. Here's my version of the fix: a new task, called fix source map;\njs\n// fix source map url\ngrunt.registerTask('fix-source-map', 'Fix the wrong file path in the source map', function() {\n    var sourceMapPath = grunt.template.process('<%= uglify.options.sourceMap %>');\n    var sourceMapUrl = grunt.template.process('<%= uglify.options.sourceMappingURL %>');\n    var diff = sourceMapPath.replace(sourceMapUrl, '');\n    var sourceMap = grunt.file.readJSON(sourceMapPath);\n    sourceMap.file = sourceMap.file.replace(diff, '');\n    var newSources = [];\n    sourceMap.sources.forEach(function (elem) {\n        newSources.push(elem.replace(diff, ''));\n    });\n    sourceMap.sources = newSources;\n    grunt.log.write(sourceMap.sources);\n    grunt.file.write(sourceMapPath, JSON.stringify(sourceMap));\n});\n. Yeah for me it did not work...\n. Woooo! Thanks for sharing, I might try it soon. The property is NOT properly named though!\n. Great thanks!\n. ",
    "incompl": "+1 because tools should accommodate the project, not vice-versa.\n. I actually managed to fix this problem in my case by doing this:\nuglify: {\n      options: {\n        sourceMap: 'dest/<%= pkg.name %>.map.js',\n        sourceMapRoot: '..',\n        sourceMappingURL: '<%= pkg.name %>.map.js'\n  },\nI know relative paths may not work in your case, but I hope this is helpful.\n. I would, but I don't understand the issue enough to fix it. It does seem like some of the options should be renamed, especially sourceMapPrefix, which is not a prefix.\n. ",
    "sgade": "Hardcoding the sourceMappingURL did the job for me.\nThat way, I tell the client where the file is stored, relative to my min.js.\n. ",
    "koen-serry": "I think the easiest solution is to add an 'options.outputFolder' to the grunt.file.write in the tasks uglify.js, that way you can put them anywhere you'd like.\njavascript\n      // Write source map\n      if (options.sourceMap) {\n        grunt.file.write(options.sourceMap, result.sourceMap);\n        grunt.log.writeln('Source Map \"' + options.sourceMap + '\" created.');\n      }\n. ",
    "dmodalek": "The sourceMapPrefix Option did it for me. It's an integer that removes the amount of path segements when declaring files in the source map. \njavascript\noptions: {\n    ...\n    sourceMapPrefix: 2,\n    ...\n},\nGot it from here http://badwing.com/my-gruntfile-js-an-example-gruntfile-and-my-workflow/\n. ",
    "javoire": "+1\n. ",
    "light24bulbs": "And there's no good explanation of what this does in the docs, that I saw.\n. has anyone figured this out?\n. ",
    "adamterlson": "So, any word/feedback on this?  I mean, I know it's small and all, but it'd be nice to take care of this....\n. That is good to know.... \nHowever, PR #75 seems to support this PR in that others also find the success spam annoying.\n. More appropriately solved with pull request #72.  But then again, I'm probably biased.\nNice to see I'm not the only one annoyed by this!\n. @shama Thanks for the comments.  Cheers.\n. ",
    "ghost": "Got that. thanks\n. Yup, it's not dead code if it's eval'd into a variable later on. I've since worked around the issue by using the same approach as nodejs, so dumping the value into module.exports =.\nHowever this is utilising a public variable and I'd rather not do that, cause it sucks.\nI emailed the uglifyjs author too but had no response.\nRegards, Andrew\nOn 8 Feb 2014, at 13:09, Beau Charman notifications@github.com wrote:\n\nHaving the same issue.\nUglifing something such as:\nvar foo = 'bar';\n(function () {\nvar qux = 'baz';\n})();\nif (1 === 1) {\nfoo =  'foo';\n}\noutputs:\nvar main = \"main.js.bup\", foo = \"bar\";\nfoo = \"foo\";\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nAndrew Charnley\nPersonal: andrewcharnley.com\nWork: igaro.com/mobile, igaro.com/api, igaro.com/legacy\n. Agreed this is an uglifyjs issue. Regardless, uglify should be 'compressing' and not rewriting javascript methodology. The code I supplied is valid.\nCheers, Andrew\nOn 8 Feb 2014, at 13:41, Jarrod Overson notifications@github.com wrote:\n\nClosed #126.\n\u2014\nReply to this email directly or view it on GitHub.\n\n\nAndrew Charnley\nPersonal: andrewcharnley.com\nWork: igaro.com/mobile, igaro.com/api, igaro.com/legacy\n. @vladikoff yes but that way the beautifier option stops to work. I've tested it using v.0.3.1 .. Why grunt-contrib-uglify can't have this option since it's a documented option of UglifyJs2?\n. ",
    "piuccio": "I know that it's an old issue, but my repo has ~500 files, each of them generates 2 files (minified and .map)\nJust yesterday @sindresorhus merged this PR into gruntjs/grunt-contrib-imagemin#236\nWould you consider changing grunt.log to grunt.verbose? I can open a PR if you prefer\n. ",
    "timburgess": "+1\n. ",
    "timhudson": "+1 I'd love to get the footer functionality published.\n. ",
    "LaurentGoderre": ":+1: we are also having this issue and it create a whole bunch of warnings in git\n. This issue is caused by Grunt, not Uglify. It's because of this line: \nhttps://github.com/gruntjs/grunt-contrib-uglify/blob/master/tasks/uglify.js#L31\ngrunt.template.process calls grunt.utils.normalizelf which is dependent on the OS\n. I found a fix, you can add this line to your Grunt file\nmodule.exports = function(grunt) {\n  grunt.util.linefeed = \"\\n\";\n  grunt.initConfig({});\n}\n. ",
    "hkongm": "I mistake... sorry...\nmiss the command line argument\n. ",
    "leonardosouza": "It may have to do with the version of the module ... here I am using 0.2.2 and it worked perfectly.\n. ",
    "vohtaski": "tried on 0.2.3, the same thing\n. If I remove \"files\" tag it starts to work:\nuglify: {\n    my_target: {\n        expand: true,\n        cwd: 'public/cdn/js',\n        src: '**/*.js',\n        dest: 'public/cdn/js',\n    }\n  }\n. sorry, you are right, wrong copy-pasting from my other task ...\n. ",
    "didip": "Yes, it would be nice to read the line number when uglification failed.\n. ",
    "sillydeveloper": "+1\n. ",
    "efidiles": "+1\n. ",
    "tomccabe": "+1\n. ",
    "mrmuh": "+1\n. ",
    "DarrenCook": "+1 (I manually applied and tested it, appears to work.)\n. This is basically what https://github.com/gruntjs/grunt-contrib-uglify/pull/87 does (but #87 also shows line number when it can). So I suggest pulling #87, and closing this one (#88).\n. I didn't know :-) I just did a git clone, configure, make, make install. My point is that many people who use grunt are treating node the same way they would about java or any other lower-level dependency, and won't be aware of node.js developer conventions. But I guess most people are using a pre-compiled node.js binary, so won't be affected.\n. ",
    "larsbo": ":+1: \n. ",
    "vladikoff": "Closing in favor of #87 \n. Seems inactive \n. This should take care of this:\noptions : {\n  beautify : {\n    ascii_only : true\n  }    \n}\n. ping @jmeas \n. Merged in #208 \n. Closed as inactive.\n. > if this is a bug or uglify is not intended to uglify an already minified file.\nnot intended in 99% of cases. However try using Uglify directly and see if it works. \n. > running uglify on this file from the command-line works just fine.\n@nareshbhatia Thanks for checking, we will investigate the cause of this issue then.\n. npm issue and peerDep issues tracked in https://github.com/gruntjs/grunt/issues/1186 and https://github.com/npm/read-installed/issues/28\nInstallation issues with grunt-contrib-uglify in \"npm 2\" have been resolved for 0.4.x and 0.5.x versions of the plugin\n\n. Please post questions to http://stackoverflow.com/questions/tagged/gruntjs \n. Probably a question for Uglify, see https://github.com/mishoo/UglifyJS2#readme\nMaybe the https://github.com/gruntjs/grunt-contrib-uglify#beautify option? \n. @sindresorhus yeap 100% agree with your comment. One thing we need to fix though is to show how many files created: \nThis is a bit ugly right now: \n\nReopening until we fix that.\n. Output fixed in 0.6.0\n. :+1: Thanks!\n. Update to grunt-contrib-uglify 0.4.1, it has a fix for backwards incompatible changes introduced in npm. Also use this PR for grunt-replace  https://github.com/outaTiME/grunt-replace/pull/57\n. > sounds like a good idea! Maybe open another PR or issue?\nThose should probably be in a global .gitattributes \n. Thanks to @shama, he added * text=auto just now\n. @sindresorhus yeap okay, it's good to have .gitattributes in the repo though \n. Related https://github.com/gruntjs/grunt-contrib-uglify/issues/249 \n. Blocked by https://github.com/gruntjs/grunt-contrib-uglify/issues/249\n. Done.\n. Thanks!\n. ```\n\u279c  tmp  npm cache clean\n\u279c  tmp  npm install grunt-contrib-uglify --save-dev:\ngrunt-contrib-uglify@0.6.0 node_modules/grunt-contrib-uglify\n\u251c\u2500\u2500 uri-path@0.0.2\n\u251c\u2500\u2500 lodash@2.4.1\n\u251c\u2500\u2500 chalk@0.5.1 (escape-string-regexp@1.0.2, ansi-styles@1.1.0, supports-color@0.2.0, has-ansi@0.1.0, strip-ansi@0.3.0)\n\u251c\u2500\u2500 uglify-js@2.4.15 (uglify-to-browserify@1.0.2, async@0.2.10, optimist@0.3.7, source-map@0.1.34)\n\u2514\u2500\u2500 maxmin@1.0.0 (figures@1.3.3, pretty-bytes@1.0.1, gzip-size@1.0.0)\n\u279c  tmp  \n```\nWorks here. \nSeems like an error related to your setup: \n[Error: EACCES, unlink '/Users/fang/GitHub/galaxy/galaxy/node_modules/grunt-contrib-uglify/node_modules/.bin/uglifyjs']\ntry deleting the node_modules directory and reinstalling.\n. Where are they missing?\nuglify is right here: https://github.com/gruntjs/grunt-contrib-uglify/blob/master/package.json#L33\n. This feature might be useful yeah. A workaround right now is to write a simple task that does something like:\nvar updateMap = JSON.parse(fs.readFileSync(SOURCEMAP_PATH));\nupdateMap.sources = ['some-path.js'];\nfs.writeFileSync(SOURCEMAP_PATH, JSON.stringify(updateMap));\n. Thanks\n. https://github.com/gruntjs/grunt-contrib-uglify#turn-off-console-warnings\n. Thanks for the PR! some tests are failing though :(\n. @jrhite could you please rebase your PR? also no need to update the changelog\n. thanks!\n. No need, done automatically \n. merged via https://github.com/gruntjs/grunt-contrib-uglify/pull/327\n. Merged via a PR related to #331\n. uglify output:\nfunction page(a){void 0===a&&(a={}),a.pageUrl=a.pageUrl||windowLocation.href,a.pageHostname=a.pageHostname||windowLocation.hostname,a.pagePath=a.pagePath||windowLocation.pathname,this.track(\"pageview\",a)}\n. Fixed! Thanks!\n. I think the problem is unrelated to node 4, it is something with configuration because of\nCannot assign to read only property 'warnings' of true.\n. @eshikerya could you post the options you use in the task?\n. You should get something like this when you install:\n\u279c  sl  npm install grunt-contrib-uglify --save-dev \nnpm WARN package.json sl@1.0.0 No description\nnpm WARN package.json sl@1.0.0 No repository field.\nnpm WARN package.json sl@1.0.0 No README data\ngrunt-contrib-uglify@0.9.2 node_modules/grunt-contrib-uglify\n\u251c\u2500\u2500 uri-path@0.0.2\n\u251c\u2500\u2500 lodash@3.10.1\n\u251c\u2500\u2500 chalk@1.1.1 (escape-string-regexp@1.0.3, supports-color@2.0.0, ansi-styles@2.1.0, strip-ansi@3.0.0, has-ansi@2.0.0)\n\u251c\u2500\u2500 uglify-js@2.5.0 (uglify-to-browserify@1.0.2, async@0.2.10, source-map@0.5.1, yargs@3.5.4)\n\u2514\u2500\u2500 maxmin@1.1.0 (figures@1.4.0, gzip-size@1.0.0, pretty-bytes@1.0.4)\nSo it downloads several dependencies to run the task. let us know if you have other issues\n. is this a lint error? why are you linting minified code?\n. done\n. > Just because a single dependency does not respect semver, it does not mean that you have to lock down all other dependencies. I'd recommend using ~ for the problematic dependency (uglify-js) only.\nSame happened to less. If developers in charge of less and uglify-js do not respect semver I don't expect more from developers of less used libraries. \n\nnpm has chosen to change the default range operator from ~ to ^ for reasons. One of these reasons is the ability to pull in new features and bug fixes automatically when new minor versions are released.\n\nnpm makes decisions but they don't have to maintain production builds for dozens of projects where developers do not have time to deal with package manager issues.  \n\nBottom line is: don't try to subvert semver, there will always be breakage when semver is not respected. \n\nTrue, IMHO ~ is safest, also use npm shrinkwrap it is a pain to maintain but it saves you from these issues for packaged builds. \nTo make it safer for plugin users I suggest we keep ~ for now.\n. > In any case, no dependency management solution is perfect, so I believe this topic (general dependency versioning) won't settle for a good few years at least.\nYeah agreed.\n. lgtm! @jrhite are you interested in helping maintain this plugin?\n. Seems to be good, @advg should we merge it?\n. I made an issue and will try to care of it tomorrow\n. :+1:\n. nests need to be adjusted\n. Don't uglify minified code.\n. https://github.com/gruntjs/grunt-contrib-uglify/issues/233#issuecomment-49798903\n. not a plugin issue. search through Uglify bugs.\n. AppVeyor says \"good\". let Travis check master\n. AppVeyor says \"good\".\n. @XhmikosR gave you npm rights to this uglify plugin\n. @XhmikosR published internal!\n. tested locally, works well! Thanks!. minor bump, not just patch. Thanks!\nOn Apr 4, 2017 11:19 AM, \"XhmikosR\" notifications@github.com wrote:\n\nShould I release a patch version?\nOn Apr 4, 2017 20:36, \"Vlad Filippov\" notifications@github.com wrote:\n\nMerged #454 https://github.com/gruntjs/grunt-contrib-uglify/pull/454.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/pull/454#\nevent-1028855997,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-\nauth/AAVVtW74yVF0ePsji1dKk6n-kR_sYqoJks5rsn-ugaJpZM4MOdPo\n.\n\n\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/pull/454#issuecomment-291587648,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAH280XTJq-DqB24gPuu7LUMURVjkm20ks5rsomkgaJpZM4MOdPo\n.\n. @XhmikosR @alexlamsl invited! . If there is ever a security issue for 2.x we probably would have to make a release. But we can make that branch if needed when that happens.. @XhmikosR should I do a final review of this?. CLA is at https://js.foundation/CLA\n\nwhere is the broken link?. > @vladikoff on the signing page https://cla.js.foundation/gruntjs/grunt-contrib-uglify?pullRequest=472 JS Foundation projects, including code contributions and all related materials, are each released under the terms of the individual licenses as noted in the project's repository, or, if no separate license is specified, under the terms of the Apache v2.0 license (the \"Applicable License\"), with the exception of project documentation and sample code, in accordance with the JS Foundation IP Policy.\n@dmethvin ^ what do we do about that?. @XhmikosR Amazing.....!!!. @XhmikosR do we need rewrap package-lock?. @XhmikosR do we still need to do this or do people use -es for now?. Published at https://www.npmjs.com/package/grunt-contrib-uglify-es \n@XhmikosR adding you as contrib to that package. @XhmikosR done! . Thank you!\nOn Sun, Aug 26, 2018 at 2:24 AM XhmikosR notifications@github.com wrote:\n\n@XhmikosR https://github.com/XhmikosR requested your review on:\ngruntjs/grunt-contrib-uglify#527\nhttps://github.com/gruntjs/grunt-contrib-uglify/pull/527 v4.0.0..\n\u2014\nYou are receiving this because your review was requested.\nReply to this email directly, view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/pull/527#event-1809240631,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAH28xmUACGtAhUlb4zRCh9_oD0NHgasks5uUj8egaJpZM4VlJCs\n.\n. Thanks!. there are issues with new uglify i assume?\n. do we need to wait until they fix it?\n. this is fine\n. \n",
    "alexhanh": "I can replicate the issue with a new 'yo angular' app by changing app.js to the following and leaving everything else as default:\n``` javascript\n'use strict';\nangular.module('ngappApp', [])\n  .config(function ($routeProvider) {\n    $routeProvider\n      .when('/', {\n        templateUrl: 'views/main.html',\n        controller: 'MainCtrl'\n      })\n      .otherwise({\n        redirectTo: '/'\n      });\n  }).config(['$provide', function ($provide) {\n    // Adding this block causes Uncaught Error: Unknown provider: aProvider <- a in modules.js\n  }]).run(function($rootScope, $location) {\n    $rootScope.$on('$routeChangeSuccess', function(event, current, old) {\n    });\n  });\n```\n. Merging the two separate config blocks into the same one solved the problem.\n. @turian I did not file a bug to uglifyJS2. Please feel free to do so!\n. ",
    "sonata82": "More then one run block also causes the same error.\nImho this issue shouldn't be closed :-/\n. Sorry, you are totally right. I willl raise the issue there.\n. ",
    "azachar": "Hi there, is here any update?\n. ",
    "turian": "Did you ever file a bug on uglifyJS2? I also have this issue.\n. ",
    "chrisirhc": "Bleah, didn't see #89 and the other logging pull requests.\n. ",
    "lz000": "I found that in parse.js,  below code converted unicode into character :\n    function read_escaped_char(in_string) {\n        var ch = next(true, in_string);\n        switch (ch.charCodeAt(0)) {\n          case 110 : return \"\\n\";\n          case 114 : return \"\\r\";\n          case 116 : return \"\\t\";\n          case 98  : return \"\\b\";\n          case 118 : return \"\\u000b\"; // \\v\n          case 102 : return \"\\f\";\n          case 48  : return \"\\0\";\n          case 120 : return String.fromCharCode(hex_bytes(2)); // \\x\n          case 117 : return String.fromCharCode(hex_bytes(4)); // \\u\n          case 10  : return \"\"; // newline\n          default  : return ch;\n        }\n    };\nso the string \"\\u000b\" is converted to a line break character. Is it possible to add an option to not convert the unicode\n. ",
    "qcgm1978": "It now works. I don't know why because I don't modify the code. Perhaps the js files I choosed to set breakpoints were not the soucemap maps, i.e. not heading with http://localhost\n. Ok, if I meet the question again, I'll ask it on StackOverflow.\n. ",
    "XhmikosR": "This seems to occur when compress: true and report: min options are used.\n. An example from david-www\n...\nRunning \"uglify:compress\" (uglify) task\nWARN: Dropping unused function argument exports [bundle-2.13.1.js:173,33]\nWARN: Dropping unused function argument exports [bundle-2.13.1.js:9448,33]\nWARN: Dropping unused function argument module [bundle-2.13.1.js:9448,26]\nWARN: Dropping unused function argument require [bundle-2.13.1.js:9448,18]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11374,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11376,0]\nWARN: Dropping unused function argument _$ [bundle-2.13.1.js:11369,71]\nWARN: Dropping unused function argument hash [bundle-2.13.1.js:11465,37]\nWARN: Dropping unused function popStack [bundle-2.13.1.js:11481,13]\nWARN: Dropping unused variable TERROR [bundle-2.13.1.js:11469,139]\nWARN: Dropping unused variable EOF [bundle-2.13.1.js:11469,151]\nWARN: Dropping unused variable a [bundle-2.13.1.js:11494,47]\nWARN: Dropping unused variable col [bundle-2.13.1.js:11682,12]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11774,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11779,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11781,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11783,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11785,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11787,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11789,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11791,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11793,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11795,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11797,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11799,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11803,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11805,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11807,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11809,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11811,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11813,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11817,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11819,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11821,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11823,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11825,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11827,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11829,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11831,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11833,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11835,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11837,0]\nWARN: Dropping unreachable code [bundle-2.13.1.js:11839,0]\nWARN: Dropping unused variable YYSTATE [bundle-2.13.1.js:11758,4]\nWARN: Dropping unused function argument exports [bundle-2.13.1.js:12258,52]\nWARN: Dropping unused function argument exports [bundle-2.13.1.js:12285,157]\nWARN: Dropping unused function argument exports [bundle-2.13.1.js:12367,34]\nWARN: Dropping unused function argument exports [bundle-2.13.1.js:14769,34]\nWARN: Side effects in initialization of unused variable fs [bundle-2.13.1.js:14773,4]\nWARN: Dropping unused function argument exports [bundle-2.13.1.js:14874,63]\nWARN: Dropping unused function argument module [bundle-2.13.1.js:14874,56]\nWARN: Side effects in initialization of unused variable fs [bundle-2.13.1.js:14880,4]\nWARN: Dropping unused function argument exports [bundle-2.13.1.js:14934,114]\nWARN: Dropping unused function argument module [bundle-2.13.1.js:14934,107]\nWARN: Dropping unused function argument exports [bundle-2.13.1.js:14940,92]\nWARN: Dropping unused function argument module [bundle-2.13.1.js:14940,85]\nWARN: Dropping unused function argument require [bundle-2.13.1.js:14940,77]\nWARN: Dropping unused function argument exports [bundle-2.13.1.js:15048,34]\nWARN: Dropping unused function argument module [bundle-2.13.1.js:15048,27]\nWARN: Dropping unused function argument exports [bundle-2.13.1.js:15145,53]\nWARN: Dropping unused function argument module [bundle-2.13.1.js:15145,46]\nWARN: Side effects in initialization of unused variable fs [bundle-2.13.1.js:15151,4]\nWARN: Dropping unused function argument window [bundle-2.13.1.js:15646,12]\nWARN: Dropping unused function argument exports [bundle-2.13.1.js:15558,214]\nWARN: Dropping unused function argument module [bundle-2.13.1.js:15558,207]\nWARN: Dropping unused function argument require [bundle-2.13.1.js:15558,199]\nWARN: Dropping unused function argument exports [bundle-2.13.1.js:16937,34]\nWARN: Dropping unused function argument module [bundle-2.13.1.js:16937,27]\nWARN: Dropping unused function argument require [bundle-2.13.1.js:16937,19]\nWARN: Dropping unused function argument exports [bundle-2.13.1.js:17329,34]\nWARN: Dropping unused function argument module [bundle-2.13.1.js:17329,27]\nWARN: Dropping unused function argument require [bundle-2.13.1.js:17329,19]\nWARN: Dropping unused function argument exports [bundle-2.13.1.js:19346,34]\nWARN: Dropping unused function argument module [bundle-2.13.1.js:19346,27]\nWARN: Dropping unused function argument require [bundle-2.13.1.js:19346,19]\nWARN: Dropping unused function argument value [bundle-2.13.1.js:19551,49]\nWARN: Dropping unused function argument value [bundle-2.13.1.js:19542,44]\nWARN: Dropping unused function argument exports [bundle-2.13.1.js:19517,34]\nWARN: Dropping unused function argument module [bundle-2.13.1.js:19517,27]\nWARN: Dropping unused function argument require [bundle-2.13.1.js:19517,19]\nFile dist/js/bundle-2.13.1.js created.\nOriginal: 651679 bytes.\nMinified: 268198 bytes.\nNote that if I don't specify compress: true or set it to false the warnings no longer show up.\n. BTW, this makes no sense at all since compress is on by default. So something must be wrong in the plugin's code.\n. I see, thanks. Now why would one choose that syntax beats me.\n. I'm pretty sure it's documented, I don't judge that. I simply say the option doesn't feel implemented the natural way, or the way one would expect. Making it a sibling of compression is pretty weird that's what I'm saying.\n. @jmeas: this is included in 2.4.14 and we reference ^2.4.0. So, I guess we should close this.\n. Check out globs and ['foo.js', '!bar.js'].\n. My line endings are fine but I'll look again later.\nOn Aug 26, 2014 10:35 PM, \"Fabr\u00edcio Matt\u00e9\" notifications@github.com wrote:\n\n@XhmikosR https://github.com/XhmikosR your line endings checkout style\nis probably wrong. You should checkout with LF line endings.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/pull/253#issuecomment-53476108\n.\n. @UltCombo: yeah I do have autocrlf already enabled.\n. Perhaps we should enforce LF via a .gitattributes file.\n. I just tried it.\n\nA simple .gitattributes file in the repo with the following fixes the tests failures here\n*.* text eol=lf\n. I, too, believe the output file should be logged in without verbose.\n. IMO this is important info and should be shown without a switch at all.\n. Sorry for that. It seems @vladikoff merged that PR fast. I reverted that PR. Please check and let me know so that I cut a new patch release.\n. Duplicate of #254\n. @isaacchansky: any PR to clarify this in README is welcomed.\n. Duplicate of #273\n. Seems added in https://github.com/gruntjs/grunt-contrib-uglify/pull/282\n. https://github.com/gruntjs/grunt-contrib-uglify/blob/master/tasks/uglify.js#L66\nAre you sure you don't see any message?\n. Please share a minimum test case and I'll try to have a look.\nOn Feb 17, 2015 2:58 PM, \"Daniel Dorndorf\" notifications@github.com wrote:\n\nI'm sure, always happens to me when I forgot to install bower components\nor something.\nI defined them as a source file in my grunt task but there is no\nnotification of a non existing file. :-/\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/issues/284#issuecomment-74663755\n.\n. OK, confirmed.\n\n/CC @sindresorhus \n. @featdd: this should do the job.\n. https://github.com/gruntjs/grunt-contrib-uglify/compare/warn-on-missing-input-files\n. Everyone's welcome to make a PR. Don't forget to CC me.. I feel like it's a bug in node but haven't had the chance to look into it\ncloser either.\nOn Jan 31, 2015 8:48 PM, \"Kris Siegel\" notifications@github.com wrote:\n\nAlso running into this issue but haven't had a chance to track down its\nsource.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/issues/287#issuecomment-72330358\n.\n. BTW I see it with 0.11.16 too.\n. Or you can just remove it completely because your way will silence the warnings.\n. @meschbach: maybe add a test for false? Otherwise it seems to do the job fine :+1: \n. @meschbach: yeah, exactly. You know, just to be safe.\n\n/CC @sindresorhus @vladikoff \n. What exactly is wrong with this approach @sindresorhus? Because what we have now is also wrong.\n. Duplicate of #287.\n. It's an upstream issue.\n. LGTM /CC @sindresorhus for merge and new release <3\n. Does this happen with the latest version?\n. That is expected although personally I  don't like this approach.\nOn Mar 24, 2015 9:10 PM, \"Rob Walch\" notifications@github.com wrote:\n\n@XhmikosR https://github.com/XhmikosR I'm using grunt 0.4.5 with\ngrunt-contrib-uglify 0.8.0 with report: 'gzip'. It works, but I only see\nthe report details with verbose enabled.\ngrunt uglify\nRunning \"uglify:player\" (uglify) task\n\n\n1 file created.\n\n\ngrunt uglify --verbose\nRunning \"uglify:player\" (uglify) task\nVerifying property uglify.player exists in config...OK\nFiles: bin-debug/jwplayer.js -> bin-release/jwplayer.js\nOptions: banner=\"\", footer=\"\", compress={\"booleans\":true,\"cascade\":true,\"conditionals\":true,\"dead_code\":true,\"drop_console\":true,\"evaluate\":true,\"if_return\":true,\"join_vars\":true,\"pure_getters\":true,\"sequences\":true,\"unused\":true,\"warnings\":false}, mangle, beautify=false, report=\"gzip\", expression=false, maxLineLen=32000, ASCIIOnly=false, screwIE8=false\nMinifying with UglifyJS...Reading bin-debug/jwplayer.js...OK\nOK\nWriting bin-release/jwplayer.js...OK\nFile bin-release/jwplayer.js created: 609.97 kB \u2192 214.36 kB \u2192 76.35 kB (gzip)\n\n\n1 file created.\n\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/issues/302#issuecomment-85648445\n.\n. Feel free to open a new issue about moving the size report to normal output.\n. Travis failures are unrelated, I'm on it.\n. @aendrew: please rebase and sort https://github.com/gruntjs/grunt-contrib-uglify/pull/306#discussion_r26437557 too.\n. Plain git rebase -i  should do the job. Otherwise 0ing me and I'll do it\nmyself.\nOn Apr 5, 2015 8:02 PM, \"\u00c6ndrew Rininsland\" notifications@github.com\nwrote:\nHey @XhmikosR https://github.com/XhmikosR,\nI fixed the merge conflicts (and added two spaces) by merging master into\nmy branch and then using git mergetool; though I'm totally lost as to how I\nshould rebase now that there have been commits between when my initial and\nupdated commits. Normally I just do git rebase -i HEAD~2, but that'll\nrewrite the 8 or 9 commits since then. Apologies for the utterly newbie\nquestion, but how do I rebase such that my commits can be squashed and the\nother history is preserved? Thanks!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/pull/306#issuecomment-89812106\n.\n. It looks fine now. The only downside the way you did it is that the commit date changed, but it's not important.\n. Nope :tongue: \n. @aendrew: those last comments should be it. Thanks for the PR :+1: \n. In markdown two trailing spaces means a line break, so yeah.\nOn Apr 5, 2015 11:08 PM, \"\u00c6ndrew Rininsland\" notifications@github.com\nwrote:\n@XhmikosR https://github.com/XhmikosR Is the whitespace in the rest of\nREADME.md fine? Because I have invisibles on and the only lines with two\nspaces and a newline are my lines.\nTo confirm I'm understanding correctly \u2014 on lines that are only newline,\nyou want \\s\\s\\n, not simply \\n?\nUpdating rest of PR now.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/pull/306#issuecomment-89846111\n.\n. I added the line breaks myself in https://github.com/gruntjs/grunt-contrib-uglify/commit/672d94aae0097b8569c243a5a5164bb8f01c4bc7\n. New stuff is nice and all, but I'm old school and I use my Notepad2 fork  :)\n. @pcolton: please fetch upstream, rebase and squash the patches.\n. #348.\n. hey. How's this better?\n. /CC @vladikoff \n. I'm still waiting for a reply from @vladikoff 'cause as you can see from here https://github.com/gruntjs/grunt-contrib-uglify/compare/tests, I only managed to fix 2...\n. Thanks!\n. I don't make the releases myself so when @vladikoff thinks it's OK :P\n\nThough, perhaps we could wait a couple of days in case we merge some of the other PRs too.\n. @vladikoff: for some reason I didn't get notified of your comments at all :/\n. Yeah, confirmed :/\n/CC @jrhite since it seems to be caused by #312.\n. Thanks.\nPlease use \"Fixes #foo\" in the PR description so that the issues are closed when then PR is merged.\n. 1. Please squash the patches\n2. Make sure tests pass\n. I'm gonna make a branch for this since I think I have already isolated the problem.\n. Doesn't seem a bad idea to me. Maybe add one more test with a custom function passed.\n/CC @vladikoff @sindresorhus \n. @vladikoff: this is a breaking change it seems. It results in all comments being kept https://github.com/twbs/bootstrap/issues/18216\n. OK, it's just for the 'some' case, using preserveComments: /^!|@preserve|@license|@cc_on/i like before gives the same output. Perhaps we should document it or something.\n. You are welcome to make a PR.\n. You are welcome to make a PR.\n. This seems unrelated to grunt-contrib-uglify; try reporting the issue upstream.\n. Works fine for me with 4.x.\nThe issue you describe was fixed a long time ago https://github.com/gruntjs/grunt-contrib-uglify/issues/287\n. Closing since the info we have is not enough.\nFeel free to provide a test repo to reproduce the problem.\n. I would just do this for uglify-js. The rest of the dependencies respect that. Also, tests pass fine with uglify-js 2.6.0, so this whole thing was a little unneeded now.\n. https://github.com/gruntjs/grunt-contrib-uglify/issues/271. @vladikoff: does this look good to you?\n. Closing because this is an upstream issue.\n. Closing since this is by design.  http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically\n. @SmartArtsStudio; I believe the issue is https://github.com/gruntjs/grunt-contrib-uglify/commit/fca1a067f0f81ccfd636dfa524e1b3b7bdcb7467\n. This should work fine with the latest version; if not please provide a full test case.. I don't see those warnings on our CI builds which run on 0.10.\n. Closing since everything looks good here.\nIf you still have the issue, report back with more info, node version, npm version etc,.\n. 1st problem: you are welcome to make a PR to update the docs.\n2nd problem: unrelated to grunt-contrib-uglify; try reporting the issue upstream.\n. https://github.com/gruntjs/grunt-contrib-uglify/tree/harmony. This isn't a grunt-contrib-plugin issue so feel free to ask upstream.. Or grunt-iife.\n. Closing since it's an upstream issue.\n. /CC @jmeas \n. I doubt it since 2.x was released a lot after that comment.\n. Removed this in https://github.com/gruntjs/grunt-contrib-uglify/commit/3a718cfbb89abf70289e687d1e624c936259c3cd. I'm gonna merge this manually and update test files too.\nEDIT: see #416\n. We currently have ~2.6.2 meaning you won't get 2.7.0. For the next version we should bump the minor or major version.\nhttps://github.com/gruntjs/grunt-contrib-uglify/compare/update-uglify\n/CC @vladikoff \n. @mgibeau: you are using an old version of the plugin.\nC:\\Users\\xmr\\Desktop\\grunt\\grunt-contrib-uglify>npm ls uglify-js\ngrunt-contrib-uglify@1.0.1 C:\\Users\\xmr\\Desktop\\grunt\\grunt-contrib-uglify\n\u251c\u2500\u252c grunt-contrib-nodeunit@1.0.0\n\u2502 \u2514\u2500\u252c nodeunit@0.9.1\n\u2502   \u2514\u2500\u252c tap@0.7.1\n\u2502     \u2514\u2500\u252c runforcover@0.0.2\n\u2502       \u2514\u2500\u252c bunker@0.1.2\n\u2502         \u2514\u2500\u252c burrito@0.2.12\n\u2502           \u2514\u2500\u2500 uglify-js@1.1.1\n\u2514\u2500\u2500 uglify-js@2.6.4\n. Huh???? They are tested just fine.\n. Something keeps overwriting the options object.\n. This is incomplete. File tmp/sourcemaps_multiple2.js.map created (source map)..\n. I'd still remove the empty line you added when you removed log and lastly squash the patches into one.\n. No reason; it's just a simple command.\ngit rebase -i upstream/master\ngit push --force\n. /CC @shama @vladikoff \n. Lack of info and probably an upstream issue, so closing.. Upstream issue.\n. Of course an upstream issue. They have a branch for ES6 and I have made a\nbranch in the plugin for people who want to try that.\nOn Mar 30, 2017 22:50, \"Michael Richardson\" notifications@github.com\nwrote:\n\nStill an upstream issue? Hard to imagine anything not supporting arrow\nfunctions these days.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/issues/421#issuecomment-290524699,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAVVtUrL4nrHqxTu4uxmyTYPvdIqlLFMks5rrAdogaJpZM4JNQ6u\n.\n. https://github.com/gruntjs/grunt-contrib-uglify/tree/harmony. npm i grunt-contrib-uglify-es. @avdg: this is a big decision and the test scripts are maintained in grunt-contrib-internal. So make an issue there and CC shama, vladikoff and me.\n. Will you tag and npm publish @vladikoff?\n\nAlso, please publish grunt-contrib-internal since I don't have npm rights.\n. Thanks!\n. This is by design as far as I can tell.\n/CC @vladikoff \n. @avdg: true but this issue is for our removed option, not upstream.\n. Either way, closing this for now. There is a known solution to get the same behavior plus you should ask for this upstream.\n. Feel free to make a PR for that.\n. You are missing the point. preserveComments just passes its value to uglify's comments option.\njs\nif (typeof options.preserveComments !== 'undefined') {\n  outputOptions.comments = options.preserveComments;\n}\n. It was not my choice to merge it. I would still remove it though.\n. Feel free to update the docs and CC me.\nOn Oct 24, 2016 00:52, \"Anthony Van de Gejuchte\" notifications@github.com\nwrote:\n\nApi has been changed on 2.7.4 to include accepting some and stringified\nregexes as valid options for the comment filter.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/issues/426#issuecomment-255617227,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAVVtflHjxBhgFtTvkb0EadDhE2rlNV-ks5q29c2gaJpZM4JYWWQ\n.\n. Confirmed.\n\n/CC @shama @vladikoff \n. Hmm, actually this is probably by design.\nTry extDot: 'last' http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically\n. all doesn't exist either. Basically preserveComments just sets the upstream comments option.\n. This should be sorted with #472, right @alexlamsl?. @cheshrkat: feel free to fetch and rebase. Otherwise please close this.\n. https://github.com/gruntjs/grunt-contrib-uglify/issues/271. You should be able to do what you want already; just make sure you reference the file the right way.\njs\nbanner: '<%= grunt.concat.dev.files.dest %>'. Does this happen with the same options passed to uglify-js itself?. Closing as an upstream issue. If you verify this only happens with grunt-contrib-uglify itself let me know.. Is this still an issue? If so please try and provide a patch.. @vladikoff: do we close this? See also #467.. if this is an issue, it should be an upstream one.. https://github.com/gruntjs/grunt-contrib-uglify/issues/405. This is an upstream issue.. This is not an issue with this module. It's an upstream issue.. There is no such thing. You should ask upstream.. I doubt this has anything to do with this plugin.. This is an upstream issue, please it there.. It means, it's an issue with uglify-js and not this plugin.. https://github.com/gruntjs/grunt-contrib-uglify/issues/421#issuecomment-290525091. Obviously. You are using ES6 code.. I'll see how to work around this then.\nAre there any breaking changes though?. OK, thanks. Those shouldn't affect us.. @alexlamsl; you mean in this branch? Note that I have no idea why they say there they get 2.8.0 since we use a tilde for uglify so it shouldn't get that.. @alexlamsl: so I apply that one line patch and I get different output. Is that normal?\nI pushed the patches in this branch for you to have a quick look.. I'm gonna merge this and release the new version in a few hours.. @kzc: although it shouldn't matter due to us using tilde for uglify version, I can wait for 2.8.3, rebase and then release the new version.. @vladikoff: any thoughts?. @vladikoff: bump. Should I release a patch version?\nOn Apr 4, 2017 20:36, \"Vlad Filippov\" notifications@github.com wrote:\n\nMerged #454 https://github.com/gruntjs/grunt-contrib-uglify/pull/454.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/pull/454#event-1028855997,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAVVtW74yVF0ePsji1dKk6n-kR_sYqoJks5rsn-ugaJpZM4MOdPo\n.\n. Done, release 2.3.0.. Thanks, @alexlamsl mentioned this in https://github.com/gruntjs/grunt-contrib-uglify/pull/453#issuecomment-283256043 so I applied it there.. Try again after deleting your local node_modules and reinstalling them. It probably is an upstream issue.. This is an upstream issue. Clear your local node_modules and reinstall and report any issues upstream.. Tests are passing fine so we need more info.. I still don't see what's wrong. The only code change was 0f638cf45e07daa997ee9cbf782f1365400747ac. @alexlamsl: any idea?. uglify-js never had a banner option IIRC. We had that.\n\nMy question is if any recent changes changed the preamble behavior. If so, then the line you suggest might no longer be needed.\nOr can this change cause this issue? https://github.com/gruntjs/grunt-contrib-uglify/commit/0f638cf45e07daa997ee9cbf782f1365400747ac#diff-afaf7edd36b493b2d939b60518620ec6R101. js \n   if (options.banner && options.sourceMap) {\n      outputOptions.preamble = options.banner;\n    }\nIt is converted in lib/uglify.js.... Can you review https://github.com/gruntjs/grunt-contrib-uglify/compare/banner?. Thanks! Please ping me when the new version is out so that I release a patch version here too.. Thanks, published a new patch version.\n@conceptualspace @aaron-nance: please confirm it fixes your issue.. I believe that is the case, yeah.. Upstream issue, doesn't support ES6.. This is an upstream issue.. Thanks!\nWe are using parse() so I couldn't quickly figure out the needed changes.\n@vladikoff: might be worth giving @alexlamsl push rights to this repo, if he agrees of course :). @alexlamsl: can you sign the CLA agreement too?\nAs for the changes themselves, they are too many :/ I'll try to review most of them but it's my understanding you removed our custom options?. Ah, I see. I'm all for removing custom options. I just want to handle this the easiest and clearest way for people who upgrade. Perhaps we should make a paragraph about breaking changes from our side and also add a link to the upstream breaking changes if there's one?. uglify-options.md seems like the best place to add them.\nThanks for all your help!\nPS. I don't watch all the repos so for future issues/PRs please CC me :). One last thing: how about the test files you removed (enclose.js, exportAll.js)? Are those options obsolete or something?. > OT: I guess I'm one of those oddballs that would actually try and read the licence, though with [JS Foundation IP Policy]({{ site.url }}{{ site.baseurl }}/pdf/ip-policy.pdf) I'm not sure how much further I can get into it \ud83e\udd23\nSorry about that, @vladikoff might know how to fix it :/. So a couple more questions. Do you plan to support v2.x? If so we should\nmake a branch here too.\nSecondly will uglify throw an error if an invalid option is passed ? Say\none passes an option from v2 which has been deprecated.\nOn May 9, 2017 18:27, \"Alex Lam S.L.\" notifications@github.com wrote:\ncan you sign the CLA agreement too?\nOT: I guess I'm one of those oddballs that would actually try and read the\nlicence, though with JS Foundation IP Policy I'm not sure how much further I can get\ninto it \ud83e\udd23\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/pull/472#issuecomment-300200936,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAVVtQrN47OoSOATDtJd7EOHE0BliLV5ks5r4IXLgaJpZM4NVQ5V\n.\n. If you think there's no need to keep 2 separate branches then we don't need to. I'm not sure why you keep a branch for 2.x in the first place :)\nAs for the unknown options, I guess we can keep the same behavior. Personally, I don't like silent failures but that is for another time.\n@vladikoff: please address https://github.com/gruntjs/grunt-contrib-uglify/issues/471#issuecomment-300078551 and https://github.com/gruntjs/grunt-contrib-uglify/pull/472#issuecomment-300200936. @vladikoff: I mostly meant https://github.com/gruntjs/grunt-contrib-uglify/pull/472#issuecomment-300200936 about the CLA :). I believe most plugins just do this. @vladikoff: what is your opinion about unknown options handling? Currently we don't show anything and wrong switches are being silently ignored. Note that this change should be made in most if not all plugins so it's for the future.\nAbout this PR, we can all do a final review and squash and merge it when we are all done. I should have some time in a few hours. Also, I suppose the new release should be v3.0.0 and I vote to keep a 2.x branch just in case we need it in the future.. @alexlamsl: thanks for all the help! I'm gonna release v3.0.0 now.. Hmm, @alexlamsl, you could have pushed directly to the harmony branch :). You are asking us to look at that huge gist and find a solution for you. The solution is what @alexlamsl said above; adapt it to your use case.. /CC @alexlamsl . Thanks, I merged master into harmony.. https://gruntjs.com/sample-gruntfile. I doubt it's an issue in this plugin rather uglify itself, so report it there.. You change the filename in a later step and it's impossible for the plugin to know that.. No way I'm aware of, sorry. You could hook up a replacement task somewhere in your pipeline though.. And what makes you think this isn't an upstream issue? Doesn't it happen with uglify itself?. /CC @vladikoff for thoughts.\n@joeldenning: please fetch and rebase against master to see if it fixes the build errors.. @joeldenning: that is not a rebase; you have modified files which you should have.... This thing with this, is that it changes the behavior our contrib plugins have. If we accept this, then this will only happen in grunt-contrib-uglify. Not sure how to proceed...\n/CC @vladikoff . https://github.com/gruntjs/grunt-contrib-uglify/issues/482#issuecomment-312860523. You are doing it wrong. Please read the upstream docs.. Nope.\nThat error must be because the master branch was force pushed. Delete the\nrepo and clone it again or fetch and reset it.\nOn Nov 28, 2017 20:54, \"Vlad Filippov\" notifications@github.com wrote:\n\n@XhmikosR https://github.com/xhmikosr do we need rewrap package-lock?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/issues/498#issuecomment-347626344,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAVVtRzcSYLY0hGRGKAQrCg2RKMTBW7mks5s7FbcgaJpZM4QtuYp\n.\n. The harmony branch is always rebased so you better link to the branch\ninstead of a specific commit otherwise you will keep hitting this.\n\nOn Nov 28, 2017 22:04, \"Jonathan Hu\" notifications@github.com wrote:\n\nThanks, guys!\nturns out we were pulling a specific revision of this dependency in order\nto support ES6 syntax. Looks like that commit is removed.\n\"grunt-contrib-uglify\": \"git://github.com/gruntjs/\ngrunt-contrib-uglify.git#c2ccee1\",\nupdated to use the latest stable release resolved the issue.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/issues/498#issuecomment-347646823,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAVVtes5eAMJBNLFqx7F1d-VstD5ghCuks5s7Gc_gaJpZM4QtuYp\n.\n. Just change the hash. This happens due to the rebase.\n\nWe'll need to do this differently since people are using the branch; when I made it, was just as an experiment.. Not sure how that can be related to grunt.. @alexlamsl: I think the best at this point would be if we made the harmony branch a separate package here too.\nWe'll need @vladikoff's help in order to publish it on npm though.\n. @alexlamsl: can you you fetch the harmony branch and review it/try it live? The package should be now grunt-contrib-uglify-es.\nWe just need to be super careful with rebase not to have issues like the other time with master.\nIf all is good, then we need @vladikoff to publish the new package/git tag/relase and then you can do it for future releases.. Always do git fetch && git reset --hard origin/harmony before you try to do anything on the branch. Please do it one more time because I made one more small change, not sure if you picked it.\nAlternatively we could just push and merge from master; this should be the safest, although messier.. Just be patient until we publish it on npm. Otherwise clean your cache or make sure you are using the latest LTS 8.. @vladikoff: we need this published on npm as grunt-contib-uglify-es otherwise people will still have the same issues when the branch is rebased.. @vladikoff: you should give npm access to @alexlamsl too since he makes the uglify releases himself.\nAssuming everyone's careful with rebasing, we shouldn't have any issues.. Because you are doing it wrong. You don't need two uglify tasks; you need one with two targets.. Why don't you have the appveyor and travis changes? There is a reason they exist. 0.10 is ancient.. @alexlamsl: don't merge yet please, I'll try to have a look later.. All right, so I locked grunt-contrib-internal to 1.3.0 in order for us to keep 0.10.\nIf we want to drop that, we should do a major version bump, so I left it as it is for now.. So, if the test file changes look good to you @alexlamsl we can merge it and tag/publish.. @alexlamsl: be careful when you rebase the harmony branch; you will need to update package-lock.json too there.\nI just published 3.3.0.. uglify-es is deprecated.. @alexlamsl: I took care of my comments and force pushed this branch.\nDon't overwrite the changes please.\nIf tests pass we can merge and release it.. @vladikoff: what's our Node.js support plan?. @vladikoff: Looks good to you?. README.md is autogenerated, you need to edit the docs/ files.. @vladikoff: how about we make this just uglify instead of specifying each subtarget?\n. Needs two trailing spaces for a line break.\n. Maybe _.isUndefined(options.quote_style)?\n. This should be reverted too.\n. Needs 2 tailing spaces for a new line for all the newly added types.\n. Needs 2 trailing spaces for a line break.\n. Oh, also, please use 2 spaces for indentation consistently.\n. Finally, quoteStyle seems consistent with the scheme that's already being used, i.e. camelcase.\n. There's a typo here.. Still doesn't make any sense. Do you mean exclude?. except -> exclude. No need for 3 line breaks use one and remove the one before the closing three backticks.. @alexlamsl: can you put back the trailing spaces in markdown files? They are used for line breaks.. Are warning off by default now?. This seems invalid now? There might be more instances in docs.. No worries. BTW, you can skip README.md in your patch; it will get updated automatically with the next version bump.. But it's my understanding that OutputStream() is no longer available. That is where I'm referring to :). @alexlamsl; what is the reasoning behind this change?. Is this right? It's missing the file extension.. Hmm, I see now. Indeed. Cool, just leave it like that.. Thanks for the explanation.\nWe should be using path.posix methods when we drop node.js 0.10 support but that's for the future.. BTW, how about moving this require to the top along with the rest? It seems better from a maintenance point of view.. Try replacing the default task in Gruntfile and run grunt again:\ngrunt.registerTask('default', ['test', 'contrib-ci:skipIfExists', 'contrib-core']);\nI have already made a PR upstream to add node.js 10 so after that this won't be needed. please use ^. Ah, wait this was screwed up, I remember now. So, it's OK to use a tilde here.. ",
    "herom": "I'm struggling with the same problem as I want to mangle my application.min.js within my prod location, but to have a not mangled application.min.js within my dev location... my particular question is if it's possible to have a options object per location or just once per task?\n. @jsoverson thanks a lot, I figured it out and am now able to have a not mangled dev and a mangled prod application.min.js file.\n. ",
    "ShimShamSam": "I found the issue. I had a syntax error in my first script. Originally I was manually concatting the files together. The way I had things set up, concatting resolved the syntax error. By disabling concatenation and letting Uglify handle it, it was failing when processing the files individually.\nAs a side note, there should be more descriptive errors to help developers debug that.\n. ",
    "davemo": "ping @DrewMartin, could you add tests and update the README.md for this? I'm guessing that's probably one of the things holding this from getting merged :)\n. ",
    "DarrylD": "perfect, thanks!\n. ",
    "rndevfx": "What's your node.js version? It fails on current 0.11 development branch but should be stable with 0.10.x\n. ",
    "hotmeteor": "Yes, in the last couple days I keep getting similar errors. From some research I see it's related to encoding:\nWarning: Uglification failed.\nUnexpected character ''.\n. @jsoverson Yes, it seems to. Wondering if it's something to do with concat.\n. Well, I added grunt.file.defaultEncoding = 'utf-8'; to my Gruntfile and now all seems well. Let's see if it sticks.\n. ",
    "landed1": "its great that I am not the only one trying to solve this unfortunately grunt.file.defaultEncoding = 'utf-8' doesnt work also tried adding \ngrunt.file.defaultEncoding = 'utf-8';\ngrunt.file.preserveBOM = true;\n. I needed to explicitly set the charset in the include (thought it was enough to have this set in the html doc)\n\n. ",
    "menimaj": "Seems like grunt-contrib-uglify dependency with uglify-js does not work.\nCurrent version of uglify-js is 2.4.22 when i do npm install grunt-contrib-uglify and getting an error of Unexpected token '?'.\nIf I change the dependency version to uglify-js@2.4.15 it works well.\nPlease change the version of uglify-js in grunt-contrib-uglify package.json\n. Well, this was fixed in uglify-js:\nhttps://github.com/mishoo/UglifyJS2/issues/714#issuecomment-103842822\n. ",
    "bcbailey": "I updated the docs and added a simple test for this.\n. Thanks, this works. Sorry for the duplication.\n. ",
    "allaniftrue": "yes, I am using a valid js file. I just upgraded my config file and I think the error I have now is related to encoding of the file.  The error is:\nWarning: Uglification failed.\nUnexpected token: punc (:). \nLine 7 in assets/dev/js/app.validate.js\n Use --force to continue\nbut I saw this post that would probably work somehow. http://stackoverflow.com/questions/11482577/in-grunt-js-during-uglify-jquery-and-blockui-i-get-error-unexpected-charac\n. ",
    "idleberg": "The mistake was somewhere on my end, sorry!\n. Sorry guys, that was more than two years ago and I can't remember. I have moved on to Gulp.\n. ",
    "kbond": "@idleberg i seem to be having the same problem.  what was the issue?\n. ",
    "brundonsmith": "@idleberg I'm having the same issue. A posted solution would be helpful.\n. ",
    "SaraSoueidan": "I can verify that. Tested on Windows 7, same issue.\n. ",
    "jonathantorres": "Yes. I'm having the same issue.\n. ",
    "toddmotto": "<3 thanks for much - especially for the speed.\n. ",
    "raDiesle": "I see, \nthanks for explanation!\n. ",
    "ansonkao": "My mistake - I meant to say that it should only apply when comments are preserved, so set to true rather than false.  \nWhen preserving comments, I think the purpose is to aid with debugging - in which case adding a newline or 2 (literally only 2 characters! haha) between each source would be quite welcome imo?\n. You could try adding it using the banner functionality?\n. Definitely feel you on the \"hackiness\", but I can confirm that it will work (the banner doesn't have to be a comment).  Cheers\n. ",
    "jpommerening": "Sounds good to me, would be breaking backwards compatibility though.\nI deliberately made this PR backwards compatible; didn't have to touch any of the existing tests.\nThe up-side is that it would probably allow for a cleaner tasks/lib/uglify.js. \n. Should this rather be relative to the sourceMap?\njavascript\nfile = path.relative(path.dirname(options.sourceMap), file);\nI wasn't quite sure of the implications \u2013 does the filename have any significance outside of sourceMaps?\n. ",
    "epicserve": "I'm having a heck of time getting this to work ... I can get it to work manually if I do the following.\n$ cd dist/js\n$ uglifyjs --comments '/jquery-photo-enlarger/' --source-map jquery-photo-enlarger.min.map --output jquery-photo-enlarger.min.js jquery-photo-enlarger.js\nHowever, to do this same thing with grunt-contrib-uglify, seems impossible. I've tried all the example source map configurations in the example read me. All the example configurations put paths in the map file. I just want it to work by assuming the map, source and minified files are in the same directory.\nThe project I'm trying to add this to is this one, https://github.com/epicserve/jquery-photo-enlarger.\n. ",
    "gr2m": "oh wait, we can't do if (options.indentLevel) {, as I want to support and indentLevel of 0. That's why I did https://github.com/gr2m/grunt-contrib-uglify/commit/1ff7bc02b7b243a27e7094f1f98c3778a6812348\n. I've followed the style from https://github.com/gr2m/grunt-contrib-uglify/blob/47682add0e70b5c38e0e0db63b7878c15f1aa04c/tasks/lib/uglify.js#L35\n. fixed via 6650f3d\n. ",
    "RReverser": "Yes, cache is why I wanted to force exact version range >= 2.4.4, not any from 2.4.* since some contributors complain on project not being built due to that bug (which covers different usecases and projects).\n. :+1: \nPlease return sourceMapRoot. It's important to be able to customize it. For example, I used following configuration:\njavascript\nsourceMapRoot: (\n  process.env.CI\n  ? 'https://raw.github.com/'+process.env.TRAVIS_REPO_SLUG+'/'+process.env.TRAVIS_COMMIT\n  : '../..'\n)\nThis allows to build releases on CI differently so source maps point to sources at Github instead of local ones. And since sourceMapRoot is removed, this is no more possible.\n. @sindresorhus Fixed and rebased.\n. Sure - I added it for the same usecase but feels like maintainers have no time to merge it yet :(\nRegards,\nIngvar Stepanyan.\n\nFrom: Asa Ayersmailto:notifications@github.com\nSent: \u200e15.\u200e12.\u200e2014 21:35\nTo: gruntjs/grunt-contrib-uglifymailto:grunt-contrib-uglify@noreply.github.com\nCc: Ingvar Stepanyanmailto:me@rreverser.com\nSubject: Re: [grunt-contrib-uglify] Add back sourceMapRoot as optional config. (#275)\nI have a project where I don't want my sourcemaps available to the general public, but they're sometimes useful to have for debugging production issues. In 0.2.7 I was able to accomplish this by pointing sourceMappingURL to a path on http://127.0.0.1.... If anyone else opens the console you just get a 404 on the sourcemap, but since I'm running my development server locally I'll get the correct sourcemap.\nWith this PR would I be able to point sourceMapRoot to 127.0.0.1 to accomplish the same thing?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/gruntjs/grunt-contrib-uglify/pull/275#issuecomment-67051372\n. Just copy-pasted from official spec. Will change.\n. Oh... I see.\n. @sindresorhus Fixed.\n. Fixed.\n. Not sure what to update it to since there are still removed options.\n. What do you want it to be? Maybe makes sense to do that separately from PR?\n. @jmeas @sindresorhus Ping.\n. ",
    "bertzzie": "@jmeas Please continue to work on it. I am currently having the same problem, and unfortunately, I can't really help to code. But I think this feature is important to have. \nSorry that I can't help in coding :(\n. ",
    "aMoniker": "I wouldn't. ascii_only is already an option in UglifyJS2 with a known use-case. This just exposes it to grunt-contrib-uglify along with the other options which are already exposed.\n. ",
    "beaucharman": "Having the same issue.\nUglifing something such as:\n``` js\nvar foo = 'bar';\n(function () {\nvar qux = 'baz';\n\n})();\nif (1 === 1) {\nfoo =  'foo';\n\n}\n```\noutputs:\n``` js\nvar foo = \"bar\";\nfoo = \"foo\";\n```\nupdate\nSeems to be my misunderstanding of minification :( Works fine with actual working code. Just wouldn't minify with variables that were declared but not used.\n. ",
    "richgilbank": "np, thanks for the quick merge!\n. ",
    "arty-name": "I was adding a short parameter description to the readme, isn't that enough? \n. Regarding #122 I initially tried to add support for similar option to UglifyJS, both to the command-line tool and the minify method, but then I have noticed that grunt-contrib-uglify does not use the minify method. If it will, and if UglifyJS2 accepts my PR, then grunt-contrib-uglify will get the support for this option for free.\n. ah, right, I forgot to restore the text I lost when readme was re-generated, it should be \"Pass this flag if you want to include the content of source files in the source map as sourcesContent property.\"\n. Regarding the last point about consistency, I believe that because of outputSourceFiles grunt-contrib-less has no internal consistency for source map options. Currently grunt-contrib-uglify has all source map-related parameters starting with sourceMap.\n. Right, I can't just do that on GitHub.\n. Got to keep commit log clean and tidy. \nWow, git stuff seems the most difficult part of contributing so far :)\n. ",
    "Aaron3": "Comments like this are used in selectivizr v1.0.2:\n```\n(function(win) {\n// If browser isn't IE, then stop execution! This handles the script\n  // being loaded by non IE browsers because the developer didn't use\n  // conditional comments.\n  if (/@cc_on!@/true) return;\n```\nWhile it is an upstream bug, just thought I'd demonstrate it being used. It's been reported to uglify.\n. ",
    "hex": "Done, forgot about that. Cheers!\n. Done, is the README.md file generated? Should I update that file as well?\n. ",
    "dsiepman": "The coming --silent mode is not the solution for my problem as I do not want to disable all grunt logs during my build. Maybe it is an idea then to create a successMessage option which is true by default, and can be set false if you don't want any success messages printed. Maybe this is a viable option?\nPerhaps it's also clarifying if I say why I'm in need for such an option. Our project at the moment Uglifies like 40 separate files with source mapping enabled, hence resulting in like 80 succes messages which are all superfluous in my opinion.\n. Yes, there's a reason for that - we load the code on demand.\nYour idea of also adding a summary after the uglification process is done is not a bad idea at all. Take the grunt-contrib-copy for instance, there they also display a summary of how files have been copied and how many directories have been made.\nTo be honest, I still would like to see some way of disabling or shortening these success message. Any other suggestions would indeed be greatly appreciated.\n. Thanks a lot for your input tkellen and cowboy, the event and logger solution indeed seems like the way to go in the long term. The question remains though if we should opt for a short term solution or just keep it the way it's now.\n@jmeas Could you make the concluding decision?\n. ",
    "sharkbrainguy": "Oh, thanks\n. If you're using a config object instead of a boolean, you need to set beautify: true if you \nwant beautification.\njavascript\noptions: {\n    beautify: {\n        ascii_only: true,\n        beautify: true\n    }\n}\n. ",
    "jedireza": ":+1:\n. js\n...\noptions: {\n  sourceMap: true,\n  sourceMapName: function(filePath) {\n    return filePath + '.map';\n  }\n},\n...\n. Yup. Just did. Same thing.\n. I can move forward with 0.3.1 as is. And because the source maps are technically working and resolving, I'm not sure if this is considered a bug, but I wanted to ask incase I was configuring something wrong.\nI'm seeing the relative ../ prefix in the source map under the sources declaration.\n0.2.7\n{\"version\":3,\"file\":\"public/layouts/core.min.js\",\"sources\":[\"vendor/jquery/jquery-1.10.2.js\",\"vendor/underscore/underscore.js\",\"vendor/backbone/backbone.js\",\"vendor/bootstrap/js/affix.js\",\"vendor/bootstrap/js/alert.js\",\"vendor/bootstrap/js/button.js\",\"vendor/bootstrap/js/carousel.js\",\"vendor/bootstrap/js/collapse.js\",\"vendor/bootstrap/js/dropdown.js\",\"vendor/bootstrap/js/modal.js\",\"vendor/bootstrap/js/tooltip.js\",\"vendor/bootstrap/js/popover.js\",\"vendor/bootstrap/js/scrollspy.js\",\"vendor/bootstrap/js/tab.js\",\"vendor/bootstrap/js/transition.js\",\"vendor/moment/moment.js\",\"layouts/core.js\"],\"names\":...\n0.3.1\n{\"version\":3,\"file\":\"core.min.js\",\"sources\":[\"../vendor/jquery/jquery.js\",\"../vendor/underscore/underscore.js\",\"../vendor/backbone/backbone.js\",\"../vendor/bootstrap/js/affix.js\",\"../vendor/bootstrap/js/alert.js\",\"../vendor/bootstrap/js/button.js\",\"../vendor/bootstrap/js/carousel.js\",\"../vendor/bootstrap/js/collapse.js\",\"../vendor/bootstrap/js/dropdown.js\",\"../vendor/bootstrap/js/modal.js\",\"../vendor/bootstrap/js/tooltip.js\",\"../vendor/bootstrap/js/popover.js\",\"../vendor/bootstrap/js/scrollspy.js\",\"../vendor/bootstrap/js/tab.js\",\"../vendor/bootstrap/js/transition.js\",\"../vendor/momentjs/moment.js\",\"core.js\"],\"names\":...\nI know there is a lot going on, but here is the output using --verbose.\nhttps://gist.github.com/jedireza/8526105\n. I'm not setting a cwd option property. Here is the Gruntfile:\nhttps://github.com/jedireza/drywall/blob/master/Gruntfile.js#L85-L130\n. @jmeas sounds good. Thanks for checking it out. I'm happy to help test.\n. Yup. Here is the previous version:\nhttps://github.com/jedireza/drywall/blob/fceec657d12055de21d5765bc4ed3e825089acac/Gruntfile.js#L85-L134\nL89-L94 may have been redundant.\n. Interestingly enough I'm not seeing this anymore. Maybe a correction was made in the latest Chrome. I'm running Version 32.0.1700.77. I wish I checked the version of Chrome I was using when I submitted this. Unless others want to keep this issue open, I'm happy to close it.\n. ",
    "zmike86": "Now the lastest version is 0.3.1, but failed again. 0.2.3 is ok.\n. Yes. I use the uglify2 for grunt plugin. I can not find anything I change for config but it indeed failed.\nthe code without problem look like this:\nvar cx=/[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,escapable=/[\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g\nand when I use either 0.2.4 or 0.3.1, It appears some unrecognized charactors.\n(update: 0.2.3 can successfully go through this problem, and I tried 0.2.4, it failed)\n. I drop all other files , and only minify json2.js\nI also has problem.\nHere is my configuration about uglifyjs:\n    options: {\n        banner: '/* minified js file /\\n/ <%= grunt.template.today(\"yyyy-mm-dd\") %> */\\n',\n        report: 'gzip',\n        beautify: false, \n        compress: {\n            properties: true,\n            dead_code: true,\n            drop_debugger: true,\n            unsafe: false,\n            conditionals: true, \n            comparisons: true,\n            evaluate: true,\n            booleans: true,\n            loops: true,\n            unused: true,\n            hoist_funs: false,\n            hoist_vars: false, \n            if_return: true,\n            join_vars: true,\n            side_effects: false,\n            warnings: false,    // todo\n            global_defs: {\n                DEBUG: false\n            }\n        },\n        wrap: null,\n        enclose: null\n    }\n. ",
    "maxparm": "Same issue here, we had to use v.0.2.2.\n. ",
    "wangzuo": "same issue here, working fine on localhost but causing runtime problem on production server. Could it be some encoding setting problem?\n. ",
    "stevenvachon": "Yep, https://github.com/stevenvachon/can-boilerplate/blob/master/tools/gruntfiles/compile.js#L267-L308\n. Great! Thank you.\n. That fixed the filename issue, thank you. Sorry about that, I hadn't noticed that the docs had changed; or maybe I misunderstood it from the start. Original post updated.\nThe soucesContent issue still remains, though.\n. Not to sound impatient or anything, but have you discovered anything on this since last night?\n. I cannot use source maps at this time. They are generated, but not working. A quick shortcut to see the output would be to double-click tools/compile.command (if on a Mac, otherwise, run the Grunt code that's inside it) and run through its short questionnaire with non-default settings. The output will be in bin/.\n. An even quicker shortcut would be to check out the already-generated outputs: https://github.com/stevenvachon/can-boilerplate/tree/js-source-maps/\nrequirejs/ is what comes from requirejs and is passed to uglify\nrequirejs+uglify/ is what comes from uglify\nThank you for looking into this!\n. Did you use default settings on the compiler? They have source maps disabled\nThanks :) I've been working on this for the last few weeks; trying to make it as awesome as possible, heheh\n. haha, no problem! :)\n. I have a series of user prompts that, when completed, alter grunt.config() values. I had originally modified only sourceMap to false and it threw the error.\n. Very cool, thank you\n. No problem! Yeah, but it's not too bad. The problem I'm having mostly is with paths to files. Maybe if the output paths were separated from the filenames?\n. #144 specifically for now. With paths, however, it was with source map URLs starting with sourceMapRoot followed by parenting (../) within sourceMapFilename. May not be an issue for me now that I'm going with sourceMapIncludeSources. I'll keep you posted on it, though!\n. +1\n. ",
    "Baccanno": "@stevenvachon @jmeas see my comment in #148 ,\nMy sourcse are linked starting with ..\\javascripts[...] I want /assets/javascripts/[...] \n. Well, this is mandatory cause it's impossible for me to get the job done. \nWith less contrib this does the trick\noptions: {\n                paths: [\"assets/less\"],\n                sourceMap: true,\n                sourceMapFilename: \"./assets/css/main.css.map\",\n                sourceMapURL: \"/assets/css/main.css.map\",\n                sourceMapRootpath: \"/\"\n            },\nWhat is the configuration equivalent to this one in the new flavor ? something equivalent to =>\noptions: {\n                paths: [\"assets/javascripts\"],\n                sourceMap: true,\n                sourceMapFilename: \"./assets/js/main.js.min.map\",\n                sourceMapURL: \"/assets/js/main.js.min.map\",\n                sourceMapRootpath: \"/\"\n            },\nThis does not work => http://badwing.com/my-gruntfile-js-an-example-gruntfile-and-my-workflow/\noptions: {\n                sourceMap: true,\n                sourceMapName: \"./assets/js/main.js.min.map\",\n                sourceMapRoot: \"/\"\n            },\nthe source are linked starting with ..\\\\javascripts\\\\[...] I want /assets/javascripts/[...]\nThanks\n. I'll try this with SourceMap option only, presently running on window with Play Fwk hence the fact I need absolute paths (however less sourceMaps are generated with unix-like paths).\nAnyway I'll probably activate the minified file on production and let the good old script tags on dev cause compilation even quick breaks my workflow !\n. ",
    "facboy": "Ah, thanks for that.  I had a feeling there was something built into grunt already, in fact I think I was using this somewhere else previously!  I've been looking at this Gruntfile for too long :).\n. ",
    "boltex": "Thanks, I'll report it to them :-)\nOn Jan 28, 2014 9:54 PM, \"Matthew Kime\" notifications@github.com wrote:\n\nsound like a bug with https://github.com/mishoo/UglifyJS2 rather than\ngrunt-contrib-uglify\n\nReply to this email directly or view it on GitHubhttps://github.com/gruntjs/grunt-contrib-uglify/issues/150#issuecomment-33551955\n.\n. \n",
    "azhang": "I've also tested uglifyjs standalone, and it seems to work fine.\n. I use the example given in the readme.\nuglify: {\n  my_target: {\n    files: {\n      'build/output.min.js': ['build/output.js']\n    }\n  }\n}\nand I run grunt uglify.\n. Unfortunately I cannot, since it is proprietary. However, I can tell you that it is generated by http://github.com/component/component, and is a backbone/marionette project.\nI just tried running grunt with --stack.\nat /Users/aaron/src/someproject/node_modules/grunt-contrib-uglify/tasks/uglify.js:135:19\n at Array.forEach (native)\n at Object.<anonymous> (/Users/aaron/src/someproject/node_modules/grunt-contrib-uglify/tasks/uglify.js:64:16)\n at Object.<anonymous> (/Users/aaron/src/someproject/node_modules/grunt/lib/grunt/task.js:264:15)\n at Object.thisTask.fn (/Users/aaron/src/someproject/node_modules/grunt/lib/grunt/task.js:82:16)\n at Object.<anonymous> (/Users/aaron/src/someproject/node_modules/grunt/lib/util/task.js:282:30)\n at Task.runTaskFn (/Users/aaron/src/someproject/node_modules/grunt/lib/util/task.js:235:24)\n at Task.<anonymous> (/Users/aaron/src/someproject/node_modules/grunt/lib/util/task.js:281:12)\n at Task.<anonymous> (/Users/aaron/src/someproject/node_modules/grunt/lib/util/task.js:215:7)\n at Task.runTaskFn (/Users/aaron/src/someproject/node_modules/grunt/lib/util/task.js:238:9)\n at Task.<anonymous> (/Users/aaron/src/someproject/node_modules/grunt/lib/util/task.js:281:12)\n at Task.start (/Users/aaron/src/someproject/node_modules/grunt/lib/util/task.js:290:5)\n at Object.grunt.tasks (/Users/aaron/src/someproject/node_modules/grunt/lib/grunt.js:155:8)\n. It's bugging out in at node_modules/grunt-contrib-uglify/tasks/lib/uglify.js\n80:    topLevel = topLevel.transform(compressor);\nI'll be looking into it more.\n. Oh, I realized when trying it with the standalone uglify, I wasn't enabling the compressor. Now that I do enable the compressor, \nuglifyjs build/someproject.js -o build/someproject.min.js --compress\nIt ends with RangeError: Maximum call stack size exceeded. I'm closing this because it's an uglify issue. Thanks for your help!\n. ",
    "ibash": "+1\n. ",
    "wrongcoder": "Just copying the value over seems to work for me. This is what I'm using; sorry, I couldn't be bothered to parameterize it or do any error checking or whatever else.\ngrunt.registerTask(\"fix-uglify-source-map\", \"Workaround for https://github.com/mishoo/UglifyJS2/issues/419\",\n        function () {\n            var source = grunt.file.readJSON(\"build/app.js.map\");\n            var dest = grunt.file.readJSON(\"build/app.min.js.map\");\n            dest.sourcesContent = source.sourcesContent;\n            grunt.file.write(\"build/app.min.js.map\", JSON.stringify(dest));\n        });\n. ",
    "PEM--": "Oops, my bad. Didn't know that you were generating your history. Pretty sweet BTW. I've to learn how you do that.\nK.R.\nPEM\n. ",
    "zgmnkv": "Ok, thank you, I see that it is possible to do it this way\nI think it will be useful to notice such method in readme\nHowever, this method requires extra copying of sources that may have a big size\nMaybe it will be better to add options to configure sources path manually as an alternative to automatic path calculation\n. Also, I have problems with sourceMapIncludeSources, breakpoints and step-by-step debug shows wrong lines, I haven't dug deeper into this yet\nUpd: ignore this, the same behavior is without sourceMapIncludeSources, it happens because uglify can concatenate several operations into one with ,\n. ",
    "hashchange": "Indeed, thanks. I have filed a bug there.\n(158 open issues. Sigh.)\n. ",
    "mikach": "Like https://github.com/thlorenz/inline-source-map\n. ",
    "johanneswuerbach": "Yes, copying the files before would be an option, but this means usemin would not work out-of-the-box anymore. Also I think not providing a way to overwrite an automatically generated default decreases the usability a bit.\n. I use the default configuration from the yeoman generator-ember. (An index.html in app/, which is moved to dist/index.html during build)\nusemin is compiling and concatenating all files into .tmp/scripts/concat and then uglifys the result into dist/scripts/\nHere the official docs: https://github.com/yeoman/grunt-usemin#transformation-flow\nToday this generates source maps referencing .tmp/scripts/concat. With 0.2 I can overwrite this path and copy the original files into dist/scripts after the uglify and filerev tasks finished. This ensures also that the original files are not renamed with by filerev.\n. Embedding the source files into the map works for me and removes the copy task. Thanks for the feedback :-)\n. ",
    "mzgoddard": "Glad embedding worked. Embedding will help in a bunch of edge cases that would otherwise be hard or annoying. I'm guessing sourceMapPrefix was the old option that helped and is a convenience hack that we should avoid adding back.\nThe thing that would really help is having source map support in the whole build process. That way grunt-contrib-uglify doesn't need hack options to help it track down files from the first task transforming anything. For the process created by generator-ember and other generators having support in grunt-contrib-concat will be a big step for that. This problem should get better soon since source map support should land in grunt-contrib-concat soon!\n. @jmeas Yeah. For source maps we should normalize to / forward slashes in sources and the sourceMappingURL. I think https://github.com/mozilla/source-map/issues/91#issuecomment-34845169 makes a good point. These values are URLs and not paths. This is something we'll need to consider, to make sure we're normalizing to urls when storing in sources or other related source map fields. \nThis PR looks good to me.\n:+1: \n. Good call.\n. ",
    "jackocnr": "Yer it would be really useful if the uglify task triggered an error when it can't find a file. Recently one of the 3rd party libs we use changed it's file structure, but our uglify task still seemed to work fine (not even a warning in the console), so we didn't notice and this caused a tricky bug that took us a while to figure out.\n. ",
    "kirkas": "Thank you, this is working perfectly.\nNote that i've add to change my file array to\nfiles: [{\n    dest: '<%= ref.dist %>/js/vendor.js',\n    src: [vendor],\n    nonull: true\n}]\nThis doesn't work:\nfiles: {\n    dest: 'dist/js/vendor.js',\n    src: [vendor],\n    nonull: true\n}\nNeither this\nfiles: {\n    dist/js/vendor.js': [vendor],\n    nonull: true\n},\nSince it's a very specific syntax and missing file can be a huge problem, maybe it should be specified in the README.md as a note or a warning.\n. Not every grunt task but grunt task dealing with files yes, https://github.com/gruntjs/grunt-contrib-concat is doing it and add a section cal \"Invalid or Missing Files Warning\".\nI agree this is not directly to do with grunt-contrib-uglify, but as one of the most used task for grunt, it could help people to add a note, and avoid confusion in the future when dealing with missing file.\n. ",
    "jokeyrhyme": "Thanks @kirkas, your comment is very important and needs to be read carefully. This is an especially sensitive feature.\nNote that even with this setting, you only see console output when a file is missing. For example:\n\nRunning \"uglify\" (uglify) task\n\n\nSource file blah.js not found.\nFile foo.min.map created (source map).\nFile foo.min.js created: 78.78 kB \u2192 38.92 kB\n\n\nDone, without errors.\n\nThe exit code is still 0, so automated scripts have no idea that anything went wrong. Is it possible to fix this so that we get truly strict behaviour, and error exit codes when files are missing?\n. ",
    "joeldenning": "I know that this project and grunt itself aren't as popular anymore and that this might not be actively maintained anymore, but I would like to echo @jokeyrhyme's comment. We just deployed bad code to production at the company I work at because the exit code is zero even though a file isn't found in the build process (even when you use nonull). I think I will see if I can add that functionality to this project in a pr.. done, see #390 \n. As far as I can tell, the test failures are not related to my changes. If I am missing something though, I'm happy to help get the tests passing.. @XhmikosR Done. And looks like it did fix the tests!. Ooops, sorry about that. I did a merge instead of a rebase, and am not even sure how it ended up with 24 files changed. But I have fixed it now, thanks for the help.. ",
    "WickyNilliams": "Just in case you guys aren't aware, this also seems to have the effect that you cannot install v0.4.0 from npm. I had to specify v0.3.3 to get it to work\n. ",
    "pifantastic": "Ahhh, makes sense. I'm on a laptop I opened for the first time in 7 months :P\n. ",
    "jcreamer898": "thanks.\nOn Mar 3, 2014, at 1:27 PM, Jmeas Smith notifications@github.com wrote:\n\nYou'll need to update npm to get support for the caret operator.\nnpm update npm -g\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "aedenj": "I'm so sorry about that. I posted in the wrong window. Please feel free to remove this post. In fact I would really appreciate it if you did.\n. ",
    "m90": "Same here. Worked fine installing via npm install grunt-contrib-uglify --save-dev this morning on my machine, but will my build system will refuse to install the dependency with the error described above, both when trying to install it via package.json as well as directly by specifiying the package name.\nnpm version on local machine is: 1.3.14\nnpm version on build machine is 1.2.15\nProbably more of a npm bug as I think about it.\n. Ok, I fixed it for me by updating npm, which was quite painful as the same bug/problem hindered me from updating npm via npm.....\nForce-installed it from here: http://nodejs.org/dist/npm/\n. Using Windows Server 2008 I copied the extracted content to C:\\Program Files\\nodejs replacing the old version of npm. Don't know how that works on OS X and the likes though.\n. ",
    "reneweteling": "@m90  how did you do that?\n. @m90  haha ok windows user... sorry not very useful in the webworld, the way i fixed it is by uninstalling npm than checking which npm is running then uninstalling that one, than download the binary, make install, added it to the path and than it installed like a charm!\ntnx for the input, you sent me on the right path!\n. ",
    "codebryo": "Ideed, somehow a old version as sneaked into this. Update Worked. Thx a lot. Keep up the great work!\n. ",
    "shinnn": "I see.\nI'll fix them soon.\n. Done.\n. You're welcome.\nThanks for reviewing my PR.\n. @Yokocapolo In your repository, js/fontsize.js defines the increase function and decrease function in the global scope, so that they are hoisted to the top of minified code by the hoist_funs option. \nThat is why jQuery code doesn't remain the top of the file.\n. This is an issue with the upstream project. Use mishoo/UglifyJS2 issue tracker.\n. ",
    "julien-c": "Would using temp files that would be passed from task to task (and wiping them at the end) a good Grunt practice? Or is it a bad idea because it breaks the modularisability of tasks?\nThanks!\n. Cheers @jmeas !\n. ",
    "st-fankl-in": "If I find the time I give it a try. :)\n. ",
    "Yokocapolo": "I have found a temporary fix though I believe Uglify should address this order issue (if it is a genuine bug/issue.) My solution was to have the jQuery files minified on their own and then the rest of the files ran threw Uglify. Then using contrib-concat concatenate the two files together.\nHere is the new Gruntfile.\n```\nuglify: {\n    build: {\n        src: [\n            'js/libs/jquery-ui.js',\n            'js/libs/lightbox.js',\n            'js/fb.js',\n            'js/fontsize.js',\n            'js/general-jquery.js',\n            'js/pluseone.js',\n            'js/stopCloud.js',\n            'js/twitter.js',\n        ],\n        dest: 'js/build/minified.js'\n    }\n},\nconcat: {\n    options: {\n        separator: ';'\n    },\n    dist: {\n        src: [\n            'js/libs/js/libs/jquery-2.1.0.min.js',\n            'js/libs/jquery-migrate.js',\n            'js/build/minified.js'\n        ],\n        dest: 'js/build/js-min.js'\n    }\n}\n```\n. Ok turns out it was a one off now it longer maintains the order!!\n. Still not working.\n. Thank you.\n. I have just tried moving the library files out of the libs folder with the rest of the js files, using concat then Uglify with no change. Concat keeps the order as  want, but using Uglify reorders the files.\nGruntfile\n```\nconcat: {\n    options: {\n        separator: ';'\n    },\n    dist: {\n        src: [\n            'js/jquery-2.1.0.js',\n            'js/jquery-migrate.js',\n            'js/jquery-ui.js',\n            'js/lightbox.js',\n            'js/fb.js',\n            'js/fontsize.js',\n            'js/general-jquery.js',\n            'js/pluseone.js',\n            'js/stopCloud.js',\n            'js/twitter.js'\n        ],\n        dest: 'js/js-min.js'\n    }\n},\nuglify: {\n    build: {\n        src: ['js/js-min.js'],\n        dest: 'js/build/js-min.js'\n    }\n},\n.\n\"grunt-contrib-uglify\": \"~0.2.2\",\n```\n. That's odd I have only just started using Grunt yesterday, I wonder why it installed v2.2 and not v4.\nBut after updating the order is still not maintained jQuery is not at the top.\n. I think I'll go back to using uglify in the cli without grunt, that's never failed me. I can use grunt to concat everything them I will manually use Uglify.\n. Afraid not, I could never get my head around git. Tell me what I have to do in order for you to have a look. How do I put it in a repository for you?\n. I will look at it and see if I can get my head around it. \n. I've created a repo but how do I place the files you need in there? I can't out how anywhere...\n. Ok I worked it out, which files do you want?\n. There you go https://github.com/Yokocapolo/grunt_uglify\n. Of course!.....I can be really thick sometimes. Thanks for pointing it. I've corrected it now and everything is working as it should be thank you.\n. ",
    "PokemonAshLovesMyTurkeyAndILikeYouTwo": "@shinnn Thank you!! I was having the same exact issue and was wondering why the hell uglify was putting my functions at the top, especially after I concatenated the files.. lol\nEdit: Also thanks to @Yokocapolo for bringing the issue up :)\ncompress: {\n                    drop_console: true, // <- removes console.log \n                    hoist_funs: false // \n            }\n:+1: :+1: :+1: :+1: :+1: :+1: :+1: :+1: :+1: :+1: :+1: \n. ",
    "pythdasch": "I'm still having this issue, and adding this compress: hoist_funs doesn't help.\nI'm on version : \n    \"grunt-contrib-uglify\": \"^2.3.0\",. I also have this issue on grunt contrib uglify 2.3.0\nuglify: {\n            common: {\n              options: {\n                    mangle: true,\n                    compress: {\n                      drop_console: true, // <- removes console.log \n                      hoist_funs: false // \n                    }\n                },\n                files: {\n                    \"<%= paths.compiled %>/common.min.js\": [\n                        '<%= paths.vendor %>/jquery-ui/jquery-ui.min.js',\n                        '<%= paths.vendor %>/jquery.countdown/jquery.countdown.min.js',\n                        '<%= paths.vendor %>/bootstrap/bootstrap.min.js',\n                        '<%= paths.vendor %>/jquery-media/jquery.viewportchecker.min.js',\n                        '<%= paths.static %>/jquery-media/js/jquery.countTo.js',\n                        '<%= paths.vendor %>/vue/vue.min.js',\n                        '<%= paths.vendor %>/vue/vue-resource.min.js',\n                        '<%= paths.vendor %>/vue/vue-infinite-loading.js',\n                        '<%= paths.static %>/js/components/ajax-utils.js',\n                        '<%= paths.static %>/js/global.js',\n                        '<%= paths.static %>/js/components/selecttextevent.js',\n                        '<%= paths.static %>/js/components/smart_select.js',\n                        '<%= paths.static %>/js/components/utils.js',\n                        '<%= paths.static %>/js/components/words.js',\n                        '<%= paths.static %>/js/components/auth.js',\n                        '<%= paths.static %>/js/sections/landing.js',\n                        '<%= paths.static %>/js/sections/socials.js',\n                        '<%= paths.static %>/js/sections/actions.js',\n                        '<%= paths.static %>/js/sections/publications.js',\n                        '<%= paths.static %>/js/sections/projects.js',\n                        '<%= paths.static %>/js/sections/people.js',\n                    ],\n                },\n            },\n}. ",
    "Francisc": "Great, thanks.\n. Thanks for that.\nIt's awful to add JS just so that the minifier behaves, I'll have to think of something else other than comments.\n. Oups, missed that part of your message. Clicked the \"Ref\" link and stopped there.\nThat's a far better solution.\nI'll have too check what kind of size I'm gaining if I turn that off.\nThanks a lot.\n. The sequences option is ignored for the case above.\nIt probably works somewhere else because filesize is slightly bigger.\nJavaScript\noptions:{\n    sourceMap:true,\n    compress:{\n        sequences:false,\n        preserveComments:'some',\n        drop_console:true,\n        screw_ie8:true\n    },\n    mangle:{\n        screw_ie8:true\n    }\n}\n. I should be looking there, really...\n. Still failing though.\nThe plugin delegates to Uglify, so the issue lies there.\n. I mean, the vars are now separated, but Warning: Uglification failed. Use --force to continue..\nIf I remove preserveComments, it works, but that defeats the purpose, haha.\n. ",
    "tomByrer": "I don't think UglifyJS keeps /*! */ comments, nor is there a 'some'.  If you set comments: true|all it will keep all, or you can set a RegEx to @licence if you wish.\n. Ah, ty.\n. ",
    "leigeber": "Just checking in on this issue as I am still experiencing it. Wasn't sure if the comment by @UltCombo meant that it was already supposed to be deployed or was waiting for 0.5?\n. ",
    "highvoltag3": "@jmeas any news on 0.5 release?\n. +1 looking for a work around\n. ",
    "sandinmyjoints": ":+1: \n. This works great for me -- previously I couldn't get to the coffeescript source because the source files would not be included in the map, now with this patch, they are. Can you explain what the problem is that you are having?\n. I think it's working for me. When I was in a breakpoint, I double-clicked on a variable name and selected \"Evaluate in console\" and it worked. In general, the debugger seems to work as expected. \nTo generate my source map, I'm using browserify with debug: true, then piping to exorcist to extract the map to its own file, then calling uglify like this:\ncoffee\n        options:\n          sourceMap: true\n          sourceMapIn: \"public/js/mobile.js.map\"\n          sourceMapName: \"public/js/mobile-min.js.map\"\n          sourceMapIncludeSources: true\n. But actually, setting a breakpoint is broken -- no matter what line I click on in a source to set a breakpoint, it is actually set on the very last line. Maybe this means that the offsets are wrong. It will still break and let me evaluate variables, though.\n. This is working great for me. :+1: \n. It was useful to me!\nOn Monday, July 28, 2014, Bob Zoller notifications@github.com wrote:\n\nrebased\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/pull/208#issuecomment-50346725\n.\n\n\nwilliamjohnbert.com | github.com/sandinmyjoints |\ntwitter.com/williamjohnbert\n. Awesome, can't wait for the next release that has this!\n. ",
    "Aaronius": "+1\n. ",
    "nikku": "Seems to be broken on latest master. \n. Source code displays correctly, but evaluate in console won't work.\n. For me, variable offsets are still broken. That means I cannot focus a variable and evaluate it to the console during a debugging session. Would be cool if you could check if that applies for your scripts, too or if it is just my project setup.\n. Interesting. At the moment I pull out the source maps myself like this: \n``` javascript\n...\nuglify: {\n  options: {\n    sourceMap: true,\n    sourceMapIncludeSources: true,\n    sourceMapIn: function(file) {\n      var content = grunt.file.read(file, { encoding: 'utf-8' });\n  var match = /\\/\\/# sourceMappingURL=data:application\\/json;base64,(.*)/.exec(content);\n\n  if (match) {\n    var b = new Buffer(match[1] + '==', 'base64');\n    var s = b.toString();\n\n    grunt.file.write('tmp/sourceMap.json', s, { encoding: 'utf-8' });\n\n    return 'tmp/sourceMap.json';\n  } else {\n    return null;\n  }\n}\n\n}\n}\n```\nI do not see any obvious differences to using exorcist here but who knows.\n. ",
    "xeroply": "+1\n. ",
    "ntwb": "Thanks, I thought it was an odd issue, as evidenced by the title of this issue it was not an easy search looking for similar issues with terms period and extension et al :P\n. For WordPress the issue is now resolved via https://core.trac.wordpress.org/changeset/35564\nWhich is to use: preserveComments: /^!/, instead of the old some value\nRelated: #190 preserveComments:'some' removes subsequent /! / comments\n. ",
    "laurentgoudet": "In fact I'm using a JS errors monitoring/tracking tool (like Sentry for instance). In order to provide better error reports, these tools can take advantage of source maps, however they need a \"publicly\" accessible uncompressed version of the source.\nIf you don't want to to publish uncompressed sources, \"publicly\" accessible means restricted to the reporting server. However, if the JS files are served off a CDN, there is no way the set up this restriction: the uncompressed sources have to be served from another domain (origin domain, S3 bucket..).\nOne solution could be to set up \"source\" lists in source maps with absolute links. However:\n1/ Concatenated but uncompressed sources then need to be taken care of (deployment, revision management)\n2/ The source maps \"sources\" lists need to be edited with absolute URLs, and AFAIK there's no easy to do that with Uglify\nThe other, much cleaner, solution is the embed the source content in the source maps. The *.map files can then be restricted at the origin server, and the only requirement is to have absolute sourceMappingURLs pointing to the origin server (e.g. example.com -> origin.example.com). Access to the origin server can also be IP restricted to an office/VPN server, allowing to debug production bugs too.\nTo generate these absolute source mapping URLs, grunt-contrib-uglify only needs:\n- The location where these source maps will be hosted, i.e. sourceMapLocation = \"//origin.example.com/\" or \"https://s3.amazonaws.com//\"\n- The destination folder of your build, i.e. sourceMapRoot = \"<%= yeoman.dist %> \", so that this path can be stripped off the dest path.\n- (sourceMapName could also be used along with these 2 options if needed)\n. ",
    "monolithed": "+1, @laurentgoudet  :+1: \n@jmeas, Where do you work?\n. @jmeas, what version/commit had this functionality?\n. Try  to use drop_console option, or see my issue https://github.com/gruntjs/grunt-contrib-uglify/issues/291\n. +1\n. +1\n. I've solved the problem\njs\ncompress: {\n    warnings : false\n}\n. ",
    "alexlamsl": "Should be working in the latest version of grunt-contrib-uglify:\nhttps://github.com/gruntjs/grunt-contrib-uglify/blob/ccd7ad0efd8959fb1753c78e8010f8e21cbab6c9/Gruntfile.js#L181-L189. Those are properties, so you would want to use:\njs\noptions: {\n    mangle: {\n        properties: true\n    }\n}. Code sections will move across boundaries of input files when they are compressed by uglify-js, so there is no meaningful way to insert a line break anywhere:\njs\n// a.js\nfunction a() {\n  return 1;\n}\nconsole.log(a());\n// b.js\nfunction b() {\n  return 2;\n}\nconsole.log(b());\n... will become:\njs\nfunction a() {\n  return 1;\n}\nfunction b() {\n  return 2;\n}\nconsole.log(a());\nconsole.log(b());. There have been fixes to source-map on uglify-js@3, so this may already be addressed.\nPlease report to https://github.com/mishoo/UglifyJS2/issues with reproducible test case if this is still an issue.. There have been fixes to source-map on uglify-js@3, so this may already be addressed.\nPlease report to https://github.com/mishoo/UglifyJS2/issues with reproducible test case if this is still an issue.. There has been fixes to source-map on uglify-js@3, so this may already be addressed.\nPlease report to https://github.com/mishoo/UglifyJS2/issues with reproducible test case if this is still an issue.. With the latest version sourceMap.root should do what you expect. More documentation here:\nhttps://github.com/mishoo/UglifyJS2#source-map-options. There have been fixes to source-map on uglify-js@3, so this may already be addressed.\nPlease report to https://github.com/mishoo/UglifyJS2/issues with reproducible test case if this is still an issue.. Setting destination same as source works in the latest version - closing.\nDemonstrate with a (minimal) reproducible test case if you still have any issues.. Yup - after #472 this will now be just output.comments, and https://github.com/mishoo/UglifyJS2#keeping-copyright-notices-or-other-comments should detail its possible forms.. There has been fixes to source-map on uglify-js@3, so this may already be addressed.\nPlease report to https://github.com/mishoo/UglifyJS2/issues with reproducible test case if this is still an issue.. FWIW, #472 footer is retained (and compress_mangle_beautify test still passes).\nThe option itself will probably not interact with sourceMappingURL regardless of whether there is a pending new line or not though, since it's effectively disabled the directive in question.. public/frontend/**/*.js includes public/frontend/app.min.js which explains the concatenation as observed.. @XhmikosR that warning is new but harmless - it merely states the fact that the despite specifying output = {max_line_len: 40} it was unable to quite fit the line into that stated limit.\nI guess a test in this project has set that specifically.. global_defs now applies to globally declared variables - but this option does nothing by default.\nNot sure if these counts as well, but collapse_vars and reduce_vars are now enabled by default.. @XhmikosR please consider applying the one-liner from https://github.com/mishoo/UglifyJS2/issues/1516#issuecomment-283102405. @XhmikosR I mumbled about that in https://github.com/mishoo/UglifyJS2/pull/1519#issuecomment-283120363 as well.\nAnyway, this new method is introduced back in uglify-js 2.6.3, and without it passes (& now reduce_vars) cannot be used, i.e. they will be no-op.. @XhmikosR the minified .js looks correct to me (I don't have enough knowledge on source maps)\nThanks!. uglify-js 2.8.3 released.. With 3.x options.sourceMap is now (almost) directly passed onto uglify-js:\nhttps://github.com/gruntjs/grunt-contrib-uglify/blob/755360bee66c9d5a43650be7e82a88d88fca293b/tasks/lib/uglify.js#L52. @XhmikosR I don't see banner anywhere in uglify-js, not even for 2.7.5\nDid grunt-contrib-uglify convert options.banner to options.output.preamble but dropped it at some point?\nOT: this workaround may be obsolete now https://github.com/gruntjs/grunt-contrib-uglify/blob/373626827003303a2ad77b8014608874fc153b9c/tasks/uglify.js#L174-L177. > Or can this change cause this issue?  0f638cf #diff-afaf7edd36b493b2d939b60518620ec6R101\nI don't think so, no.\nI just went through https://github.com/gruntjs/grunt-contrib-uglify/blob/master/tasks/uglify.js and AFAICT options.banner doesn't get converted to options.output.preamble, so uglify-js simply won't act on it, not even back in 2.7.x. So the only reason why banner would stop working over here is if somebody specified options.sourceMap, which https://github.com/gruntjs/grunt-contrib-uglify/issues/463#issuecomment-290616440 does.. Oh, I didn't read https://github.com/gruntjs/grunt-contrib-uglify/blob/master/tasks/lib/uglify.js - sorry about that.\nLet me verify now and get back to you.... > Can you review https://github.com/gruntjs/grunt-contrib-uglify/compare/banner?\nLGTM\nI have also identified https://github.com/mishoo/UglifyJS2/pull/1545 as the reason why preamble (alone) does not work - it was trying to fix bad interactions with shebang but ended up relying on its (or other comments') presence in order to function.\nWill push a fix to uglify-js and publish shortly. Thanks for the heads up!. uglify-js 2.8.20 is tagged, waiting for Travis CI to complete in ~10 minutes.. The major one being UglifyJS.minify(), which is now the only way to perform compression.\nI'll put together a PR for this project since it's probably easier this way. :wink: . > As for the changes themselves, they are too many :/ I'll try to review most of them but it's my understanding you removed our custom options?\nApologies for the volume of changes - switching over to minify() should hopefully be more maintainable from here on out.\nI've removed custom options that are direct case-renaming of minify() options like ASCIIOnly. Things that have special meanings within this project like sourceMapIn and sourceMapName are kept, just updated to set the new options within sourceMap.. > Perhaps we should make a paragraph about breaking changes from our side and also add a link to the upstream breaking changes if there's one?\nI can tabulate the list of deprecated custom options and their corresponding names in minify(). Which markdown files under docs/ should I be adding that to?. > One last thing: how about the test files you removed (enclose.js, exportAll.js)? Are those options obsolete or something?\nIndeed - those two features have been removed from 3.x. > can you sign the CLA agreement too?\nOT: I guess I'm one of those oddballs that would actually try and read the licence, though with [JS Foundation IP Policy]({{ site.url }}{{ site.baseurl }}/pdf/ip-policy.pdf) I'm not sure how much further I can get into it :rofl: . > So a couple more questions. Do you plan to support v2.x? If so we should\nmake a branch here too.\nWe do have a 2.x branch for backports of bug fixes only, at least for a while. That means you'll only get 2.8.x, so I think the current version of grunt-contrib-uglify should cover that without any modifications.\nObviously if you are planning on pushing fixes to 2.x of grunt-contrib-uglify as well, then making a branch makes sense.\n\nSecondly will uglify throw an error if an invalid option is passed ? Say\none passes an option from v2 which has been deprecated.\n\nUglifyJS.minify() will throw if invalid options are passed to it, which was the case in v2 as well. However, in tasks/lib/uglify.js I take the approach of constructing an options object from known keys and pass that onward to minify() instead. So any (top-level) invalid options from grunt-contrib-uglify would simply be ignored.. > If you think there's no need to keep 2 separate branches then we don't need to. I'm not sure why you keep a branch for 2.x in the first place :)\nIn case my screw-up receives knighthood. :sweat_smile: \n\nAs for the unknown options, I guess we can keep the same behavior. Personally, I don't like silent failures but that is for another time.\n\nI share the same opinion, but am unfamiliar with grunt to know what the norm is around here.. @vladikoff on the signing page https://cla.js.foundation/gruntjs/grunt-contrib-uglify?pullRequest=472\nJS Foundation projects, including code contributions and all related materials, are each released under the terms of the individual licenses as noted in the project's repository, or, if no separate license is specified, under the terms of the Apache v2.0 license (the \"Applicable License\"), with the exception of project documentation and sample code, in accordance with the JS Foundation IP Policy.. @XhmikosR +1 for v2.x branch before merging this PR - it's free anyway :wink: . @kzc I believe they have a fork that works & is just waiting to merge upstream.\nCombination of an ES6 codebase, extra dependencies & the fact that I've never used webpack before means I'm not the best candidate out there... \ud83d\ude05 . Have you tried the following:\njs\n{\n  options: {\n    mangle: {\n      properties: {\n        keep_quoted: true\n      }\n    }\n  }\n}. eval() disables most compression and mangling due to its unsafe nature.\nThink eval(\"console.log(sum)\").\nEither case I think your config is correct as far as grunt-contrib-uglify is concerned. It's uglify-js which couldn't determine your particular use of eval() is safe(r).. Closing as the issue has been addressed.\n@zeuscronos if you think there are use cases which uglify-js can be improved, please file feature requests at https://github.com/mishoo/UglifyJS2/issues. @XhmikosR will do next time, sorry to bother your workflow with the extra clicks :ghost: . This is related to uglify-js rather than grunt-contrib-uglify.\nLong story short, const is an ES6 feature, and support in uglify-js 2.x has known issues, so it was removed in uglify-js 3.x as ES6 users should be using uglify-es instead.. I'm not well-versed with the internals of grunt, but from https://gruntjs.com/configuring-tasks#files it implies node-glob is in use, and from https://github.com/isaacs/node-glob#glob-primer it says negation looks like !(pattern|pattern|pattern), i.e. with a parenthesis around the pattern.. Thanks for the information - good to know :+1: . Try drop_console - https://github.com/mishoo/UglifyJS2#compress-options. I only know how to do it within uglify-js, no idea where to put that within grunt. Sorry.. uglify-js does not support ES6 - you will need uglify-es for that, which means using the harmony branch of this project:\nhttps://github.com/gruntjs/grunt-contrib-uglify/tree/harmony. Yes.. Closing as duplicate of #480 - please use harmony branch for ES6 support, which depends on uglify-es.. @XhmikosR updating harmony branch after uglify-js@3.1.0 is released on master should take care of this nicely.. @akgoyal1987 in case this may address your issue - uglify-js does </script> escaping if inline_script is enabled.\nIn the future please file the issue directly on https://github.com/mishoo/UglifyJS2/issues so I can notice it sooner.. @joeldenning on your PR branch (issue-160) locally, try the following commands:\n```sh\nsync master with upstream\n$ git pull -u origin master\nreset back to your original commit\n$ git reset --hard e8eed5e3ccc9e25bd203fab7802b372d9ffe5ec7\nrebase your PR on top of master\n$ git rebase master\nresolve conflicts if any\nforce push to PR\n$ git push -f -u origin issue-160\n``. Useharmonybranch which supports up to ES8.. Thanks for spotting this - fixed!. https://github.com/gruntjs/grunt-contrib-uglify/issues/482#issuecomment-312860523. https://github.com/gruntjs/grunt-contrib-uglify/issues/482#issuecomment-312860523. There is no need for this change to pick up the latest version ofuglify-js. @nyurik that's an issue withuglify-es, the fix for which has been made and will be in the next release.. @XhmikosR no objection to a separate package - and we can keep the current rebase approach with the harmony branch.. @XhmikosR a quicknpm testonhtml-minifierby modifyingpackage.jsonandGruntfile.js` seems to function as expected.\n\nWe just need to be super careful with rebase not to have issues like the other time with master.\n\nWhen I did git pull just now, I then have to do git reset --hard origin/harmony in order to get rid of the two extraneous merge commits that appear on my local branch - am I doing it right? :sweat_smile: . Thanks for the lesson - that worked flawlessly :wink: . @LeviRosol seems to work with current version of uglify-es:\n```sh\n$ uglifyjs -V\nuglify-es 3.3.4\n$ echo 'const string = require(\"string\")' | uglifyjs\nconst string=require(\"string\");\n``\nIf you hit an issue withuglify-es, please follow the guidelines and file at https://github.com/mishoo/UglifyJS2/issues. @vladikoff @XhmikosR many thanks :+1: . Works fine inuglify-es. @XhmikosR I wasn't sure what to include from thegrunt` task changes to the files, that's all :sweat: \nDone in https://github.com/gruntjs/grunt-contrib-uglify/pull/503/commits/06b13a4b634a287ca596a1aa0d9bdcbbfaa586a0. Should I also include the auto-generated README.md changes here?. @XhmikosR roger that - I shall leave this in your capable hands :wink: \nThanks!. @XhmikosR I've manually scanned and fixed all the tests, and they are good to go :+1:. @XhmikosR thanks for the help \u2013 I shall be careful.. That is valid JavaScript - nothing is wrong here.. Please file issues with uglify-es in the upstream project, not here.\nFor harmony branch, see https://github.com/gruntjs/grunt-contrib-uglify/issues/499#issuecomment-354288623. https://github.com/gruntjs/grunt-contrib-uglify/issues/499#issuecomment-354288623. Follow the issue template and file at https://github.com/mishoo/UglifyJS2/issues. Closing as off-topic - please provide a (minimal) reproducible test case which uses grunt-contrib-uglify-es if you believe there is an issue.. That is reported by uglify-es not this plug-in.\nFollow the issue template and file at https://github.com/mishoo/UglifyJS2/issues if you think your input is valid ECMAScript.. Follow the template at https://github.com/mishoo/UglifyJS2/issues and file there.. Follow the template at https://github.com/mishoo/UglifyJS2/issues and file there.. Your runtime environment is discarding useful information from SyntaxError - nothing we can do here.. Follow the template at https://github.com/mishoo/UglifyJS2/issues and file there.. File an issue with npm.. Not a bug in grunt-contrib-uglify.. This package uses uglify-js, thank you.. @XhmikosR thanks for merging - just to clarify, I did not make any further changes other than:\n- add a few lines to CHANGELOG\n- run grunt\nAdmittedly the second step has undone some of the changes in #524. There is no uglify-es@3.4, therefore no won't be any updates to grunt-contrib-uglify-es. Sorry about that - my editor was configured to automatically remove them.\nI'll go through the changes and restore them.. Yes.. I've retained this shorthand here https://github.com/gruntjs/grunt-contrib-uglify/pull/472/files#diff-afaf7edd36b493b2d939b60518620ec6R60. Ah, that explains the repetition from docs/uglify-options.md etc.\nI'll revert this file then.. Ugh - of course! :sweat_smile: \nWill remove that sentence.. The test case has been like that before this PR:\nhttps://github.com/gruntjs/grunt-contrib-uglify/blob/master/Gruntfile.js#L176\nhttps://github.com/gruntjs/grunt-contrib-uglify/blob/master/test/fixtures/expected/source_map_custom_name\nBut for some reasons this generated map file isn't being compared at all, so I thought I'd add it to the list here.. relativePath() is only used once, down here:\nhttps://github.com/gruntjs/grunt-contrib-uglify/pull/472/files#diff-0c8f71b28b3ffffd4d019110b7446b88L139\nSince I'm now using path.join() instead of string concatentation down below, that trailing (back)slash is no longer required.. Will do :+1: \nIt's not like this require() is particularly compute-intensive anyway.. ",
    "latmagicman": "@jmeas a war file is basically a zip file that contains some .xml files for application configuration. For local development, you typically deal with expanded war files which means the war is 'unzipped' (allows hot swap of code).\nMy website will deploy sections of the site independently via war files.  The source files for each application live in {application}/src/main/webapp/*/.js.  The app server puts each .war file on a different path (context) to prevent overlaps.  Ex. app1 is on /index.html, and app2 is accessible on /app2/index.html\nI didn't need to use sourceMapName - I did try to use it, but it still uses relative paths to the source files. I wanted to change the sourceMapRoot. Here's the setup:\n1. Sourcemaps will only be generated for pre-prod builds.\n2. I've set sourceMapIncludeSources:true as I don't want to deploy the raw source code for even pre-prod (to mirror production).\n3. I specified the '{application}/target/expanded-war/{application}.js' file path via the files property on the uglify task. The same directory for the map file works for me, which is another reason why I didn't need sourceMapName. \nHere's the problem:\nThe sourcemap file uses a relative path to the src files based on where the sourcemap is generated. Ex. if app1's sourcemap is in app1/target/expanded-war/app1.map, the path to the js files is ../../src/main/webapp/app/myapp.js.  This shows up in dev tools as src/main/webapp/app/myapp.js.  But if app2/target/expanded-war/app2.map also has a ../../src/main/webapp/app/myapp.js then devtools only sees one file at src/main/webapp/app/myapp.js (they collided).\nI ended up having to use grunt-contrib-replace to change the relative paths to be specific to the app context.  This gives me a clean devtools - ex. /app/myapp.js and /app2/app/myapp.js\nphew, sorry it's a bit complex. Hope it shows the auto-calculated issue with multiple war files and map files with the same source path + filenames.\n. ",
    "KevinRausch": "+1.  All my source files are compiled from ./client/private and served from ./client/public. This causes the map for a file served at /folder/file.js to point to ../../private/folder/file.js\n. ",
    "avdg": "Please reopen or open a new issue if this issue is still occurring.\n. Is this still an issue?\n. Is this still an issue?\n. Is this still an issue? Also, uglifyjs might be changed a lot by now\n. Is this still an issue in the latest uglify releases?\n. Might actually investigate to include https://github.com/vibornoff/grunt-contrib-uglify/commit/12c7dedeb9ba4c9c6f34fb668f90bd230c046ec5\n. @vibornoff Any comments on the inclusion of https://github.com/vibornoff/grunt-contrib-uglify/commit/12c7dedeb9ba4c9c6f34fb668f90bd230c046ec5 in grunt-contrib-uglify?\n. Never mind, I found #311\n. @brendonco Is the problem solved? If not, do you have an example file?\n. Use options.ASCIIOnly (and yes, the options don't align with uglifyJS options)\n. Duplicate of #303, #377 should fix this.\n. A better option was to fix upstream first\n. Hmm I prefer to see patches with tests.\n. Fixed in #375\n. There is no harmony support on uglifyjs2's side on npm just yet. See https://github.com/mishoo/UglifyJS2/issues/448 if you want to track status\n. ~~hmm might be a side-effect of // being recognized as a reg-exp~~\nuh nevermind, that's the comment option I guess. I'm not sure how the preserveComments from grunt is hooked up with uglifyjs yet and how uglifyjs is using it.\n. Note: Old post, code not working, use preserveComments instead of comments\n\nnot sure if this works:\n\njavascript\nuglify: {\n    options: {\n        output: {\n            comments: /^!/\n        }\n    }\n}\n. That's the case if grunt uses the cli to communicate to uglifyjs, with the api, it can directly call the uglifyjs api and bypass the cli options (avoiding to parse such things).\n. Uh... I see that this project is using its own minifier instead of UglifyJS's minify function. It's using this: https://github.com/gruntjs/grunt-contrib-uglify/blob/master/tasks/lib/uglify.js.\nNeed some time to investigate stuff here before I can say more...\n. uh, that's because I mixed up the UglifyJS.minify options with grunt-contrib-uglify options. Cleaning up...\n. There is no harmony support on uglifyjs2's side on npm just yet. See https://github.com/mishoo/UglifyJS2/issues/448 if you want to track status\n. I'm curious to know what broke\n. @Rialgar I understand, I'll be more patient\n. @rialgar if you can, you can bisected between the commits on UglifyJS or if you're happy with sharing code that causes the problem, submit it there as bug report.\n. I believe this is fixed as there have been new releases by now, but I still have to do extra checks. In case you can conclude this faster, is this fixed so we can close this issue?\nThanks\n. In short:\n- This project relies on UglifyJS2 to do the heavy lifting, which is used as npm dependency\n- UglifyJS2 (the upstream branch) has a harmony branch\n- The harmony branch is not released on npm or is merged with the main branch (and released afterwards).\nSo, unless there will be a npm release on mishoo/UglifyJS2 or have an other way to include the code, it will be very unlikely to have es6 support just yet.\n. I have no confirm of the fix on my part though the fix does look good on first sight, so I need a bit more time first\n. Ok, I can confirm that this patch solves the error message when options screwIE8 and mangle are set to true.\nLGTM\n. (yeah, I know I have merging rights, but I'm focussed on other projects)\n@vladikoff Still planning to merge this?\n. Maybe I should add some tests first\n. This must be the syntax used in json object notation no? UglifyJS2 doesn't support them except maybe on the harmony branch.\nThere is no such support yet in grunt-contrib-uglify unless the package.json uses the UglifyJS2's experimental harmony branch.\n. Yes, that should work fine :-)\n. There is no harmony support on the uglifyJS side except on the harmony branch, which is under heavy development and thus for now declared unstable. Harmony progress can be followed here: https://github.com/mishoo/UglifyJS2/issues/448\n. Can reproduce, see https://gist.github.com/avdg/4226e11ddd761cdfa6ff for reproduction\n. That would also select the .min.js files though\n. Solution would be to change the dest directory\n. whatever works I guess :-) (and ty for sharing)\n. Uh, I think you need a better code example. Please give some code that shows the option and how its used.\n. true and false behaviour is still supported on the uglifyjs side. also \"all\" is supported which is a sort of alias of true. I did refactored the comments handling and did attempt to keep all options in as it was before, but due to a lack of tests and lack of knowledge of these features they might not have been kept.\nAt least, I don't know what's happened, I will take a look (on the mishoo/uglifyjs2 repo) and will throw a lot on tests on it to make sure these kind of situations will never happen in the future.\n. For comments, there is still an option to support strings as predefined sets (except for the option \"all\", \"true\" or \"false\" through commandline). But for now its not supported because of a few reasons:\n1. There is no support on the uglifyjs side to store configurations (being .uglifyjs, npm settings, or presets clearly defined by standards/organizations/specialized index sites)\n2. There is no db to store some sets, or any clear organization or standard to define comment filters\n. For grunt-contrib-uglify options, I might need to inventorize the options before I can align them better though.\n. beautify options are just send straight to uglify's output option (see https://github.com/gruntjs/grunt-contrib-uglify/blob/ea77dde2ac86d507f37f6a06c88ed2afbc007c06/tasks/lib/uglify.js#L209).\nThe preserveComments is defined later in the code (see https://github.com/gruntjs/grunt-contrib-uglify/blob/ea77dde2ac86d507f37f6a06c88ed2afbc007c06/tasks/lib/uglify.js#L262).\nSince both are assigning to the same objects, the latter option will always win in cases where both are set. Since I'm just contributing where I'm aware there are problems and didn't really write the code, I have to ask myself if this is intended and how this should be solved myself :-)\nAt least I hope you know why this is the case now :-)\n. Hmm... I'm not sure I can fix these issues as I'm already quite busy\n. Please reopen if this is a bug on grunt-contrib-uglify. For help you might be better of on stackoverflow though\n. Should be fine to merge\n. I might prefer to go dual stack. I had some conversation on here https://github.com/SoftwearDevelopment/grunt-contrib-uglify/commit/e026537146a77065bc70090692918f311cdeabe0\nThis sees doable, we'll just throw in a harmony option I guess\n. It seems that dependencies are installed named as in package.json. Not sure how to avoid the naming conflict.\n. UglifyJS doesn't support es6 with the exception of the experimental harmony branch. Grunt-contrib-uglify doesn't use the harmony branch to my knowledge.\nPlease track #393\n. grunt-contrib-uglify v1.0.1: https://github.com/gruntjs/grunt-contrib-uglify/blob/fe967c8e2235a0efd1d682459ce33940b92a0e6a/package.json#L22\nI don't see anything wrong here\n. The options are categorised per phase (compress, output, etc...), did you read the readme?\n. I saw some comments on a unmerged commit that might be a fix, however, there was no pr being made here and the way github is set up I'm not sure how to find that specific patch so I could link it anyway.\n. It's not even tracked on an issue tracker\n. So yeah, while at it, open the discussion :-)\n. Hmm.. I think the issue was about something else (there was some renaming happening). This question however is asked a lot I think but I need to use search engine and stack overflow myself :/.\n. If you can, it might be better to ask on stack overflow. Github is just for issues with the package itself or pull requests\n. Maybe it's better to do that hack for now, if you can send the \"corrupt\" file.\nPls upload on gist.github.com or so on case someone wants to digg in or when we get more of these issues. Then the bug is at least somewhat documented.\n. hmm it's a bit weird that an error occurs while parsing in a block, bug seems to be uglifyjs side though\n(or after concatenating multiple files) \n. UglifyJS doesn't support it yet, there are some harmony implementations underway on the harmony branch though. See mishoo/UglifyJS2#448.\nYou could try harmony out yourself by replacing the version number to the git url https://github.com/mishoo/UglifyJS2.git#harmony at\nhttps://github.com/gruntjs/grunt-contrib-uglify/blob/f680e895de04be9ce90a23ebd8da49e571a823d8/package.json#L22\nI guess it won't make a lot of difference for now. There is still a lot of work to be done in the harmony branch.\n. Bug is found, see mishoo/UglifyJS2#1154\n. See #407\n. Hmm... weird to not have build running, I guess it has something to do with travis tweeting about github issues....\n. Let me see if reopening this issue helps\n. Seems to fix\n. The expected results of the failing tests are pre-computed with an older uglify-js version.\n. I'm not aware on the full impact of this change yet, but on long term ie8 support will be deprecated and removed anyway. Instead, I can only encourage to manually set the screw_ie8 flag manually for now and expect a full removal of the ie8 flag around the time when full harmony support will be introduced.\n. TODO\n- [ ] Inform users about manually setting screwIE8 flag\n- [ ] Inform users about screwIE8 changes from uglify\n. Uh not sure how to get these ie8 tests fixed. If they don't test the output for being ie8 friendly then they aren't needed. But those tests will be removed on long term anyway.\n. Uh.., I just saw theses tests being modified. I might have been too worried. I didn't had time to look deeper into it yet.\n. Ah yeah, the test is just doing the opposite after it and testing when screwIE8 is enabled instead of disabled. Edgy but fine I guess since these tests will be removed long term anyway...\n. Failures seems to be the same as in other pr. There were a few numbers of new releases on the side of  uglifyjs and it seems that even before the minor increase (so releases 2.6.3 and 2.6.4, and 2.7.0 is current stable) there were 'breaking' changes to the output.\nIt might be important to get #416 merged quickly.\n. There is already another patch fixing the test. Feel free to rebase the patch or rework from scratch (since the patch isn't big anyway yet)\n. Verbose is not defined\n. Any idea how the error looks like? We like to be pinpointed to the cause of the error. Thanks\n. Support for arrow functions are only available on the harmony branch of uglify-js. Although even that might not fully support correctly.\nThis can be enabled by having a clone of grunt-contrib-uglify and set the uglify version in package.json to https://github.com/mishoo/UglifyJS2.git#harmony.\nOtherwise, feel free to follow the harmony status at mishoo/UglifyJS2#448\n. @rainabba this repo has a harmony branch? I thought that UglifyJS (with mishoo/UglifyJS2) had that and this one doesn't.\nDid you tried your suggestion out yourself?. Nevermind, I checked the branch list, but apparently I missed the highlighted one (which was the harmony one) :/ wow. Uh yeah, I now see that Object.assign is actually es6 stuff (I was questioning that dependency). Version 4 is node version I assume.\nWe shouldn't do builds for node 5 and iojs anymore btw. At uglifyjs the builds are still enabled for 0.10 and 0.12, but I guess we better keep supporting it there as they don't have es 6 features and uglifyjs can work in the browser. Grunt-contrib-uglify doesn't have that problem (it's just node dependent, no browser issues).\nSo it should be fine to drop 0.10, iojs (experimental) and 5 (unstable release, support ended) for now. Not sure if 0.12 has to be removed yet.\n. I see, The main grunt base still support them. This should be decided on that level too.\n. There is no harmony support yet in current shipped grunt-contrib-uglify plugin. Closing.\n. Just passing /^!|@preserve|@license|@cc_on/i should work fine though. I don't know what happens there, but maybe this should be fixed upstream if an agreement can be gained there.\n. only using the cli interface\n. It's still weird that someone makes a suggestion, the patch get merged without question and getting complains afterwards :/\nThe patch was intended to break stuff.\n. Please send patches upstream on uglify, it's the best way to close this discussion.\n. Ok I get it... we should be 100% annoying by design without getting users agreement. I better give this stuff up for now :/\n. Api has been changed on 2.7.4 to include accepting some and stringified regexes as valid options for the comment filter.\n. all should be replaced by true\n. Please do note that a major part of this issue may be caused due to having 2 different api's on the side of UglifyJS. The CLI api doesn't fully match the internal library api.\n. Created mishoo/UglifyJS2#1285\n. If there are confusions about the passthrough function parameter usage, the first parameter is the containing node where the comment is nested in, the second is the comment token (of which property value contains the comment).\nDue to api being this way I am not able to make changes to the parameters. Documentation fixes may be suggested in the above pr though.\n. Not sure how npm will handle this as it will only maintain 1 reference for each package name while we have to handle 2 packages with the same name. This would require some npm voodoo powers to resolve the issue.\n. There are duplicated issues anyway like #393. But sadly still no solution/workaround (unless local checkout and change uglify ref to github repo) except waiting till uglify harmony has been completed.\n. ",
    "iszak": "If the scope of grunt-contrib-uglify is to not write empty files nor overwrite existing files on failing compilation then I would agree that the change I am suggesting to introduce would go against this principle.\nAlthough many other plugins do output on compilation error, an example is grunt-contrib-compass, but I guess that is the scope of their own project.\n. ",
    "bobzoller": "apologies... I just signed one if this is still a useful PR.\nOn Sat, Jul 26, 2014 at 4:03 PM, Vlad Filippov notifications@github.com\nwrote:\n\nClosed as inactive.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/pull/208#issuecomment-50250993\n.\n. rebased\n. you should only do this if options.sourceMapIncludeSources is true.  The mappings work fine even if you never call setSourceContent.\n. \n",
    "SimonSchick": "I just ran into the same problem, seems like adding back the optional sourceMappingURL callback option would help resolving this, or an option to use the absolute path rather than the root directory.\n. ",
    "MrJH": "+1 same problem here. \n\"sourceMappingURL - Once again, this is calculated automatically\" << this is not working!\n. ",
    "carmandrew": "+1 It would be nice to configure this still.\n. ",
    "seemsindie": "Nevermind...It is valid\n. ",
    "davidparsson": "I can confirm that UglifyJS does not handle the case when the provided outputOptions.comments is a function. When it's a function, the default function is used.\nSee the source code for UglifyJS.\n. ",
    "SamvelRaja": "@davidparsson  :+1:  gotcha\n. I wonder why we are putting efforts here instead of just passing the option value for preserver comments to UglifyJS just like we passing here\n. Added the changes here https://github.com/gruntjs/grunt-contrib-uglify/pull/338\n. No we can close this one. \n. ",
    "jonas-db": "@vladikoff @jmeas Any ideas???\n.  @jmeas  wow.. it seems i was using 0.2.0(!), no idea why i was using such a low version.. i've updated and it working fine now :)\n. ",
    "mattslocum": "I tried this, but it didn't work either\noptions: {\n    mangle: {\n        toplevel: true\n    }\n}\n. ",
    "Fizzleban": "I have also tried to mangle the top level, and it is not working.\n. ",
    "caimen": "I'm trying to get this to work as well with no luck.  I swear I had it working before too.. ",
    "whisher": "imo its an issue ^^\nThanks the same.\nOn 8 June 2014 22:00, Sindre Sorhus notifications@github.com wrote:\n\nStackOverflow was the right choice. The issue tracker is for actual issues\n;)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/issues/217#issuecomment-45446810\n.\n. \n",
    "gh-amistry": "@UltCombo Thanks for the clarification and potential workaround. I'm new to this, but what you described makes sense. The real reason I want to 'uglify' JSON files was so that I could have (an invalid) version with comments, and a valid version without comments. The expression option works great for this, except for the quotes thing.  I thought this plug-in might be the best way to do what I needed.\n. @sindresorhus I was going to try that next! Removing the comments to create valid JSON is essentially all I need to do for my JSON task. Thanks for suggesting it. I'll keep you posted!\n. @avdg thanks for following up. It's no longer an issue, at least for me. Closing.\n. ",
    "jtangelder": "219\n. ",
    "robwierzbowski": "Go for it, Fabr\u00edcio :).\nRob Wierzbowski\n@robwierzbowski http://twitter.com/#!/robwierzbowski\nhttp://github.com/robwierzbowski\nhttp://robwierzbowski.com\nOn Sun, Jun 29, 2014 at 3:36 PM, Fabr\u00edcio Matt\u00e9 notifications@github.com\nwrote:\n\nWell, I can also try handling this if @robwierzbowski\nhttps://github.com/robwierzbowski is too busy debugging some other\nissue.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/issues/222#issuecomment-47470465\n.\n. BTW, https://github.com/sindresorhus/slash.\n. Sure.\n. \n",
    "hwoarangzk": "Thanks for your reply. It's really hard in China that SO has been blocked :(\nAs of the question, a.js, b.js and c.js is just a simple example. In my project, it's based on Emberjs, so there are a lot of folders and js files. Let's say, in the models folder, there is a model.js which I want to concat and compress in the first place than other js files in the models folder, so I think if I list all the files under an array like ['c.js', 'b.js', 'a.js'] is not the best way to deal with this situation.\nIs there any better way to solve my issue?\n. Thank you all the same :) Your suggestion is really a great help to me!\n. ",
    "mulyoved": "Posted in Uglify https://github.com/mishoo/UglifyJS2/issues/500\n. ",
    "hajiz": "I found a shortcut for now that is to uglify each file, and then concat them using grunt-contrib-concat, but that is not an optimal solution since it needs some hack. It's specially challenging for me since the list of the files to be minified are not predefined.\n. ",
    "lewisdiamond": "@UltCombo there are a thousand ways around it, which doesn't mean the error message should be so useless.\n. From what I could see, the line number is incorrect. The line number displayed refers to the line number of the result of the concatenation of all uglified files. It's not the line number of the correct file (unless that file is the first file of the concatenation).\np.s. Wouldn't it be simple to just uglify the files separately before concatenating them?\n. ",
    "ericf": "Bummer. In my case I'm just minifying one file, and now I get no output :(\nGrunt's verbosity has to be turned on as a CLI option.\n. ",
    "hbrls": "Not happy either. All the other tasks have output except uglify. It drives me crazy. And you can not just turn --verbose on because they are really verbose.\nI've turned back to 0.5.0.\n. ",
    "david-martin": "Looks related to update to source-map from 0.1.34 to 0.1.35\nhttps://github.com/mozilla/source-map/issues/123\n. ",
    "sjurba": "I have the same issue and can confirm that by forcing version 0.1.34 of source-map it works.\n. @ampgcat: Sure. Add \"source-map\": \"0.1.34\" to your package.json file. Then delete node_modules/grunt-contrib-uglify, and run npm install. \n. ",
    "raunakkathuria": "As this mozilla/source-map#123 is fixed so marking this as closed. Have tested it, it works fine now. Thanks for the help.\n. ",
    "watilde": "@jmeas, @UltCombo I see now that I did not think that way! Thanks :D\n. ",
    "nareshbhatia": "@jmeas, running uglify on an already-uglified file was not intentional. I was using a grunt file generated by the yeoman webapp-generator and it started hanging after I had used it successfully for several days. Tracked it down to a 3rd party minified library that I had added recently. FWIW, running uglify on this file from the command-line works just fine. So it appears that something in the grunt plugin is causing it to hang. I could modify the grunt script to take minified files out of the uglify flow, but I would have to make sure that they are still in the concat flow. Would be better if this complication could be avoided.\n. ",
    "rupamkhaitan": "Is it possible to tell uglify not to minify a file if its already minified? \nOr is there a way to check in grunt if a file is minified ?\n. thr is no solution as of now.. what i did was make {mangle: false} for all the vendor JS\n. ",
    "jannikegger": "Is there a solution? \nWe have the same issue and it would be great if we could tell uglify to skip files (or something similiar ;) )\n. ",
    "SuneRadich": "I've run into the same issue. Is there a way to exclude certain files in an uglify config?\nRight now my config for uglify looks like this:\nuglify: {\n   my_target: {\n       files: [\n       {\n          src: 'assets/**/*.js',\n          dest: 'assets/'\n       }\n     ]\n   }\n}\nBut one subfolder in the assets folder contains already minified files (downloaded 3. party libraries). I would like to include everything in assets, ecept the folder assets/vendor. Or perhaps exclude all files that ends with min.js.\nAre there any config options available that would enable me to do so?\n. ",
    "dannysouza16": "The exclamation prefix doesn't work, He exclude the min file of the output file.\nThere is a solutions? Anyone?\n. ",
    "ivnmaksimovic": "I had the same issue before and I had to use just unminified files. Now I am running grunt-contrib-uglify 2.0.0 and my vendor sources are mix of unminified and minified files. \nNo problems anymore!\n. > Migrating from 2.x to 3.x\nShouldn't that be:\n\nMigrating from 1.x to 2.x\n. \n",
    "voxpelli": "This is actually worse than it initially looked. Currently also an npm update -g will update npm's dependencies to make the check for fulfilled peerDependencies already use the new Semver 3.0 and thus even updated NPM 1.4 installations will run across this issue.\nRelevant issue for the problem in NPM 1.4: https://github.com/npm/read-installed/issues/28\n. Most other grunt plugins use ~0.4.0 so it would make for a more consistent experience if that were used \u2013 at least for the peerDependency\n. ",
    "donaldpipowitch": "FYI: It looks like UglifyJS has these options built-in: https://github.com/mishoo/UglifyJS2\n. ",
    "trevithj": "That's what I thought, but not what I got. Okay, problem might be elsewhere.\nThanks UltCombo for prompt response - will investigate further and take to other repository.\n. ",
    "huang-xiao-jian": "Actually, I can't find it out neither. I don't want uglify to drop any of the functions, but I didn't find the way to achieve.\n. ",
    "dannyhanke": "Ok, thanks! We built our way around it.\n. ",
    "giolvani": "I thought exists an option to don't write this part of code. The conflict happens just with jQuery.\n. ",
    "JTLR": "Awesome thanks, perhaps it should default to last?\n. ",
    "PrimeLens": "beautify alters the code too. but thanks\n. ",
    "yogeshgadge": "This need to be fixed in UglifyJS2 which has such options. Closing unless anyone feels strongly to open this or thinks that we need to perhaps bridge cameCase to UglifyJS2 \n. ",
    "JamesMGreene": "Thanks, @vladikoff! :heart:\n. @davetgreen: Before this fix, you wouldn't have even saw \"X files created\" but yes, it would be nice to also get the size outputs back in there like they used to be, especially since there is a config option controlling that which is essentially being ignored. :astonished: \n. ",
    "davetgreen": "I've just upgraded to 0.6.0 and I'm still only getting 'X files created': is this an ongoing problem? I just want to see the size change in the output :/\nCheers,\nDave\n. ",
    "joaovieira": ":+1:  what @JamesMGreene said: having the reports back would be nice.\n. :+1: \nOne has to google where did the report output go to find that the report option is useless now without being verbose (at least update the docs). I believe people don't want two switches to turn this report on. Plus, we don't need entire verbose info if I just want to get the gzip report..\n. ",
    "prionkor": "+1 The compression report should be shown like cssMin\n. ",
    "radkodinev": "Happy to help :)\n. ",
    "kraftwer1": "I don't think so, see this for clarification: https://github.com/npm/npm/issues/6033#issuecomment-53310936\nAnd as I said, ~ is maybe not necessarily correct, it's only a proposal. You might have to double check.\n\nAm 26.08.2014 um 01:30 schrieb Fabr\u00edcio Matt\u00e9 notifications@github.com:\nI may not be 100% up to date with npm development, but isn't ~ a lost cause? Isn't npm improving ^ instead?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "chimericdream": "Here is the uglify options block from my gruntfile:\noptions: {\n    compress: {\n        drop_console: true,\n        screw_ie8: true,\n        warnings: false\n    },\n    mangle: {\n        except: ['jQuery', 'Backbone']\n    },\n    report: 'min'\n},\n. Even beyond that, the report is not displayed at all. Looking at the output again, I noticed that specifying report: 'min' or report: 'gzip' does not produce any report whatsoever, regardless of whether --verbose was specified.\n@vladikoff Should I update the title of the issue to reflect that reports are no longer being generated at all, regardless of verbosity?\n. ",
    "commadelimited": "+1 to fixing this issue. The docs don't mention any requirement for verbose mode, meaning many will assume it's broken.\n. I know this issue is closed, but I'll chime in here. I'm writing a chapter about Grunt for a book I'm co-authoring. The docs have this to say about the report option:\n```\nreport\nChoices: 'min', 'gzip'\nDefault: 'min'\nEither report only minification result or report minification and gzip results. This is useful to see exactly how well uglifyjs is performing but using 'gzip' will make the task take 5-10x longer to complete. Example output.\n```\nNowhere in the docs does it indicate that -v is required to display the report. The docs should either be updated to reflect this requirement, or allow the report to display without verbose mode (my preference). I don't want ALL of the output, just the bits I'm explicitly requesting as per the documentation.\n. ",
    "Schinkentanz": "+1\n. ",
    "zachleat": "+1 for non-verbose report output. The default report might be better as falsy, with non-empty values for report showing non-verbose output.\n. +1 for non-verbose report output. The default report should be empty, with non-empty values for report showing non-verbose output.\n. For future visitors, I believe the discussion for this issue is currently taking place at #254.\n. ",
    "vsn4ik": ":+1:\n. ",
    "roncli": "I commented on 4944e2c a few months ago that I wanted to do a PR to make an option to have the minification data in the general log and not in grunt's verbose log.  Based on the feedback, I did not.\nMy opinion is that the minification data is significant enough to not have to use grunt --verbose AND add an option to the gruntfile just to get it.\n. ",
    "ronnyhartenstein": "+1 for @XhmikosR and @zachleat  I miss it, thought it is a bug.\n. ",
    "meschbach": "I submitted a pull request (#288 above) which will hopefully be accepted and make both parties happy.\n. There are differing opinions on what it means to fix it, including mine in #288, which was accepted on March 4th, 2016.  The fix was then reverted in #419 in the middle of July.\n. Thank you for the feedback @XhmikosR !  Just to make sure we are on the same page, were you asking for a unit test to verify the verbose log would be utilized when the configuration value is false?\n. @XhmikosR : There doesn't appear to be unit tests, however many system tests which I feel would be inappropriate for this particular test case; but if there is desire from a collaborator I would gladly add them.\n@sindresorhus : I'm not really sure what to think of your feedback, however if there is something you do not like about the suggested patches I would gladly accept constructive criticism or a statement as why you are not interested in the patch set.\n. The commit eec87eb should bring the code style in-line with the remainder of the file.  I can respect desiring to find your own solution, however like you I am also busy.  I would be happy to make additional changes, but please be specific about what you would like to have changed. :-)\n. ",
    "dominikwilkowski": ":+1: for a fix\n. ",
    "deveras": ":+1: for a fix\n. ",
    "janrembold": "+1 for a fix\n. ",
    "j-walker23": "Hey all. Wondering if someone knows the answer to this.\nDid this task use to say the difference in size by default? I swear i used to see it, but i can't remember. \nIf so, what were the reasons to take it out? Mostly just curious since i am assuming taking it out was due to other reasons i am ignorant to.\n. ",
    "2ge": "got v0.9.2 and info is still not displayed :(\n. ",
    "MarcosBL": "+1 to fix this issue\n. ",
    "Jerska": ":+1: \n. ",
    "suabo": "This Bug ist still there... ist there nobody to fix it?\n. If i do my task i get no report. But i think there should be a short report about how many files and maybe the size of files before and after in sum should be displayed like in cssmin! Otherwise the report option make no sense. If you set it to 'none' the task can be quiet but not if it is set to min or gzip.\n. PLease can anyone check this, so that the changes can be released. Seems im to stupid to check that out or there is still no reporting?\n. ",
    "ZitRos": "OK, all seems well. I have added tests for this options. Thank you for your help.\n. ",
    "hal-gh": "OK, will do.\nStill, the documentation has not reflected the actual behaviour of this aspect of UglifyJS2 for over a year now. It would be good to correct it.\n. ",
    "MichaelJCole": "See this issue in UglifyJS\n. Hey, what was the result of this?  Uglify is breaking my AngularJS code.  \n'Error: [$compile:nonassign] Expression '' used with directive 'graphTree' is non-assignable!'\nI'd like to turn if off, but it's built into the Angular-Fullstack toolchain, so I can't just remove the grunt task and have it work.\nHow do I turn off mangling?\n. ",
    "Izzmo": "@monolithed that's interesting, thanks for the update!\n. ",
    "jpillora": "I seeeee, quite the contentious issue. We don't need a 5th issue about this so I'll close. My vote is for at least one success print, or an option to enable this grunt.log, or for the report option to enable this grunt.log.\n. ",
    "STRML": "+1 for this, doesn't make sense to have the option if we can't see the output anyway.\n. ",
    "leandono": "+1 for the @zachleat solution, the option needs 3 values: false (default), min or gzip.\n. ",
    "geraintluff": "Thanks :)\n. ",
    "mlhch": "Hi, uglifyjs says there is an option 'keep_fargs' to prevent from dropping unused function arguments. Maybe grunt-contrib-uglify shall support this in future? See https://github.com/mishoo/UglifyJS2/issues/557\nThanks\n. ",
    "dutchiexl": "Can you tell me how to do that ? I am not really an expert with the whole npm story yet, so I used grunt to manage it.\nIn my node_modules I have the grunt-contrub-uglify folder, can I run the command from there somehow ?\n. Yes I get the same problem. I posted in the uglify repo\n. ",
    "cesarvarela": "I have the same issue, the sourcemaps are being loaded, but chrome isn't making \"the connection\".\nI think this is related to the removal of some options related to custom paths, that now are being calculated automatically. \n. ",
    "vgrinko": "Well, I don't think it is directly related to that change, since I tried on both old and new versions, outcome is the same.\n. ",
    "atav32": "+1\nDo your maps throw an error when parsed by the BASE64 VLQ CODEC http://murzwin.com/base64vlq.html\nInvalid input: Unexpected token v\n\nI've also tried serving .map files as application/json instead of the nginx default (application/octet-stream), but that didn't seem to change anything\n. Or is it related to this issue https://github.com/gruntjs/grunt-contrib-uglify/issues/270?\n. ",
    "SamVerschueren": "Experiencing the same issue\nInvalid input: Unexpected token v\n. ",
    "smonev": "Same here:\n\nInvalid input: Unexpected token v\n. jQuery source map also produces the same error: Invalid input: Unexpected token v so I am exactly sure what we can make of the error.\n\nBy the way, my problems were solved by upgrading all my npm modules to the latest versions. So I am not sure what exactly the problem was.\n. ",
    "elsigh": "Same here:\nInvalid input: Unexpected token v\nBut I'm using webpack, so this might be a red herring?\n. ",
    "javagtcpp": "such as :\nfunction getName(name){\n  return name;\n}\nwill be compressd like : function getName(a){retun a;}\nI don't want paramter \"name\" to \"a\";\n. It works! Thank you again!\n. ",
    "mbrammer": "Yes I have and no it doesn't sort the code.\nI used uglifyjs js/.generated/public/global.js -o webroot/js/global.js\nSo the problem seems to be grunt-contrib-uglify.\n. Oh sorry, forgot to mention that. No, the production is used. I have specially added beautify: false, but I didn't change anything.\nI just tried to turn on beautify and it's also sorted.\n. Tried a more basic config and started grunt uglify:production\nuglify: {\n    production: {\n        files: {\n            'js/global.min.grunt.js': ['js/.generated/public/global.js']\n        }\n    }\n}\nSame problem.\nBTW: I'm using the latest version 0.6.0 of grunt-contrib-uglify\n. @jmeas Can you reproduce this issue?\n. ",
    "argyleink": "+1, i'm experiencing this as well. \nprod:\n    options:\n      banner:     \"<%= banner %>\"\n      screwIE8:   true\n      compress:   drop_console: true\n    files: \n      \"<%= dirs.build %>/js/app.js\":\"<%= app.js %>\"\nthe array of app.js is not respected, breaking the production minified code. i havent tried uglify from the command line, but will try now. \n. not sure what this dumb shit is going on. console log is the array in the order i want. verbose logging of the task shows the files in the order i dont want. piss me off. not uglifies fault it doesnt seem. \n. Your suggestion (like below right?) is not the same as the kind this pr enables.\ncoffeescript\nmodule.exports =\n  prod:\n   files: [\n      expand: true\n      cwd:    \"app/js/\"\n      src:     [\"foo.js\", \"bar.js\", ...]\n      dest:   \"build/js/\"\n      ext:    \".js\"\n    ]\nIt enables the kind below, taking an array of files and creating 1 single file, with a base dir set. It's just a little sugar. \ncoffeescript\nmodule.exports =\n  prod:\n    options:\n      baseDir:    \"app/js/\"\n    files:\n      \"build/js/app.js\":[\"foo.js\", \"bar.js\", ...]\nWhat am I missing? Feels like a primary use case to bundle an array rather than minify and straight copy, baseDir is just sugar on that common case. I'm happy to keep it in my fork though =) It does present a decent amount more of code, that's not adding to the beauty/simplicity of the current code. \n. @UltCombo I totally agree that would work, but I've not been able to achieve a map function with grunt's lodash templates. See the open stack overflow ticket. So we're getting into the nitty gritty of why I made the fork, I would prefer to not have my own fork, but mapping a templated array seems to be a difficult task for grunt/lodash. The stack overflow ticket shows all the ways I've tried to get the .map function to work, to no avail. \n. ",
    "AsaAyers": "I have a project where I don't want my sourcemaps available to the general public, but they're sometimes useful to have for debugging production issues. In 0.2.7 I was able to accomplish this by pointing sourceMappingURL to a path on http://127.0.0.1.... If anyone else opens the console you just get a 404 on the sourcemap, but since I'm running my development server locally I'll get the correct sourcemap.\nWith this PR would I be able to point sourceMapRoot to 127.0.0.1 to accomplish the same thing?\n. ",
    "kevynb": "Yeah, I agree with @naugtur . I want to get this info without being in verbose mode. Maybe just display it if the option was specified by the user. We can do that by removing the default value.\n. ",
    "isaacchansky": "You can get debugger to stay put with:\njs\noptions: {\n    compress: {\n        drop_debugger: false\n        }\n},\n. Oh, thanks. Added.\n. ",
    "MrLesion": "http://stackoverflow.com/questions/27086533/unique-config-json-for-grunt-uglify\n. ",
    "mar10": "I guess this doesn't make sense, since the map generator need access to the original sources. Closing this.\n. ",
    "ItalyPaleAle": ":+1: for this\n. ",
    "derzwen": "+1\n. ",
    "sebastientromp": "+1. ",
    "featdd": "I'm sure, always happens to me when I forgot to install bower components or something.\nI defined them as a source file in my grunt task but there is no notification of a non existing file. :-/\n. for example I deleted the jquery folder in my bower_components, but when it runs the task it just don't show the missing file\ntask:\njavascript\nuglify: {\n    dist: {\n        files: {\n            'Resources/Public/js/scripts.min.js': [\n                'bower_components/jquery/dist/jquery.min.js',\n                'Resources/Private/Assets/js/main.js'\n            ]\n        }\n    }\n},\n\n. ",
    "aldarund": "Still having this error. even verbose mode show nothing\n. ",
    "cobbdb": "Any update on this issue? Was a work-around ever found?\n. ",
    "juliusza": "See this solution https://github.com/gruntjs/grunt-contrib-concat/issues/57\nOr this:\nhttps://gruntjs.com/configuring-tasks#custom-filter-function\nmodule.exports = function(grunt) {\n    function checkFile(filepath) {\n        if (!fs.existsSync(filepath)) {\n            grunt.fail.warn(\"file not found: \" + filepath);\n        }\n        return true;\n    }\n{src: sources, dest: baseTarget + target, filter: checkFile}\n. ",
    "moefinley": "@juliusza I tried this and the filter only seems to run against files that exist. This was with grunt@1.0.1 and grunt-contrib-uglify@3.0.1. ",
    "tcipierre": "Thanks a lot for your help sindresorhus, I'll do.\n. ",
    "KrisSiegel": "Also running into this issue but haven't had a chance to track down its source.\n. ",
    "robertdunaway": "I installed NodeJS on a new machine and I now have this problem on the new machine but not the old machine.  For me it only happen with ngannotate.  Concat and Uglify work.\n. ",
    "bricss": "Getting this error in Node 0.12 & Io 1.1.0\n. Problem was solved by adding:\njavascript\ncompress : {\n  warnings: false\n}\n. Everything works as is, just update to latest version. Bug was resolved.\n. +1, got same problem after version update :3\n. Interesting, what if I want to minify ES6+ code? \ud83e\udd14 . For those who wanna minify ES6+:\n```javascript\nconst terser = require('terser');\nconst options = {\n  compress: {\n    passes: 3,\n  },\n  ecma: 8,\n  output: {\n    beautify: false,\n  },\n  toplevel: true,\n};\njavascript\nterser: {\n  main: {\n    files: [\n      {\n        cwd: '<%= meta.rootPath %><%= meta.srcPath %>/js/',\n        dest: '<%= meta.assyPath %><%= meta.srcPath %>/js/',\n        expand: true,\n        src: ['*.js'],\n      },\n    ],\n  },\n  options,\n},\njavascript\ngrunt.registerMultiTask('terser', 'Parse, mangle & compress source code files.', function () {\n  this.files.forEach((file) => {\n    let contents = grunt.file.read(file.src);\n    contents = terser.minify(contents, this.options()).code;\n    grunt.file.write(file.dest, contents);\n  });\n});\njavascript\ngrunt.registerTask('minify', ['terser']);\n``\nJust add it to yourgruntfile.js` and change paths for your files.. ",
    "travischoma": "Any more ideas on this one besides disabling compress? Had to disable it in io 1.1.0\n. ",
    "braoru": "Same bug on 0.12.0 for me\n. ",
    "giannisp": "options: { compress: {} } seems to be working for me with 0.12.0.\n. ",
    "tremby": "Please clarify: is compress: true not allowed any more? Should I use compress: {} instead to mean the same thing (compress with whatever the default options are)?\n. D'oh -- you're right. I had somehow updated to 0.7.0 (where the bug remained) rather than 0.8.0. Thanks.\n. ",
    "jimthedev": "I would love to see this implemented. I think we could do it by allowing that variable to be an array of strings or a glob.\n. ",
    "richard16": "Would be nice.  I'm using both coffeescript as well as concat.  It's a bit of a pain that you can't pull both the sourcemaps in.\n. ",
    "betam4x": "Would be helpful.  What i'm trying to do is take a bunch of JS files and CoffeeScript files, compress them into one .js file, and have all the proper sourcemaps generated so that it can be easily debugged.\n. FYI I found a tool that does exactly that.  grunt-contrib-mapcat.  Works great!\n. ",
    "jvilk": "+1. This is very frustrating.\n. ",
    "stefan--": "+1\n. ",
    "godo13405": "+1\n. ",
    "abirmingham": "+1\n. ",
    "bartoszbobin": "+1\n. ",
    "paulohenriqgoes": "+1\n. ",
    "fean": "+1. ",
    "audunolsen": "+1. ",
    "aendrew": "Happy to, though they haven't put it in a release yet \u2014 I've mostly written the PR but will submit it once they do a new release.\nAlso, haven't really PR'd a grunt plugin before \u2014 am I correct in thinking all I need to do (beyond adding tests/documentation/etc) is add a line to this.options?\n. Lulz, dat commit log... :sweat_smile: \n. Not sure why Travis is failing, I haven't touched the failing tests. Note that the same tests failed upon cloning to local.\n. Apols for the delay, will update the commit first thing tomorrow!\n. @XhmikosR PR updated. Also changed the \"typeof varName !== 'undefined\" stanzas starting at tasks/lib/uglify.js to use _.isUndefined() for consistency, hope that's okay.\n. Hey @XhmikosR,\nI fixed the merge conflicts (and added two spaces) by merging master into my branch and then using git mergetool; though I'm totally lost as to how I should rebase now that there have been commits between when my initial and updated commits. Normally I just do git rebase -i HEAD~2, but that'll rewrite the 8 or 9 commits since then. Apologies for the utterly newbie question, but how do I rebase such that my commits can be squashed and the other history is preserved? Thanks!\n. I think I've got it now \u2014 I merged upstream/master into local master, renamed my local working branch to \"temp\", checked out a new 293_adding_quote_style_option branch from master, did a git merge --squash temp on 293... and then committed afresh, force-pushing to my branch. \nDid I totally overthink this? Should I have just, in the beginning, pulled upstream master into my current branch, merged, resolved merge conflict, committed, and then squashed my merge commit into the one before it?\nThanks for taking the time to explain this to me \u2014 I should really know this, given how many open source projects I contribute to... :sweat_smile: Thanks!\n(Also FYI, took me forever to figure out what was going on with the two trailing spaces on newline, but it's because Atom has a plugin enabled by default that automatically strips extra whitespace. Worth knowing if you run into that again \u2014 atom/whitespace#10)\n. @XhmikosR I think I've finally fixed the whitespace issue, now, finally. :sweat_smile: \n. @XhmikosR Is the whitespace in the rest of README.md fine? Because I have invisibles on and the only lines with two spaces and a newline are my lines.\nTo confirm I'm understanding correctly \u2014 on lines that are only newline, you want \\s\\s\\n, not simply \\n?\nUpdating rest of PR now.\n. Yay! Thanks! :+1: :shipit: \n. @XhmikosR Thanks for doing that, not sure why I was having such issues \u2014 even after disabling the Atom Whitespace plugin. \n. ",
    "190n": "+1 million\n. ",
    "augbog": "My bad. Thanks for the quick close.\n. ",
    "rauberdaniel": "I guess I found the reason: Having set the option compress to true instead of {} (which is allowed by documentation) causes the issue.\n. ",
    "oleksiipysanko": "+1! You saved my day, thanks!\n. ",
    "NorikDavtian": ":+1: @rauberdaniel tnxx\n. ",
    "ahmednuaman": "So I had this problem too, but it was fixed by running git clean -xdf and npm install again.\n. ",
    "4aficiona2": "replacing true with {} worked for me too. Thanks @rauberdaniel\n. ",
    "2013gang": "+1\n. ",
    "willthemoor": "Thank you @rauberdaniel!\n. ",
    "Deanzie": "+1\n. ",
    "amccarthyMatchbook": "+1. ",
    "niemyjski": "Seems to be an issue as referenced here: https://github.com/lodash/lodash/issues/900#issuecomment-74587039\n. Thanks\n. ",
    "timotgl": "Can confirm that removing the report option also worked for me.\n. ",
    "robwalch": "@XhmikosR I'm using grunt 0.4.5 with grunt-contrib-uglify 0.8.0 with report: 'gzip'. It works, but I only see the report details with verbose enabled.\nsh\ngrunt uglify\n```\nRunning \"uglify:player\" (uglify) task\n\n\n1 file created.\n```\n\n\nsh\ngrunt uglify --verbose\n```\nRunning \"uglify:player\" (uglify) task\nVerifying property uglify.player exists in config...OK\nFiles: bin-debug/jwplayer.js -> bin-release/jwplayer.js\nOptions: banner=\"\", footer=\"\", compress={\"booleans\":true,\"cascade\":true,\"conditionals\":true,\"dead_code\":true,\"drop_console\":true,\"evaluate\":true,\"if_return\":true,\"join_vars\":true,\"pure_getters\":true,\"sequences\":true,\"unused\":true,\"warnings\":false}, mangle, beautify=false, report=\"gzip\", expression=false, maxLineLen=32000, ASCIIOnly=false, screwIE8=false\nMinifying with UglifyJS...Reading bin-debug/jwplayer.js...OK\nOK\nWriting bin-release/jwplayer.js...OK\nFile bin-release/jwplayer.js created: 609.97 kB \u2192 214.36 kB \u2192 76.35 kB (gzip)\n\n\n1 file created.\n```\n. \n\n",
    "okonomiyaki3000": "Still happening in 0.9.1\n. ",
    "kayhadrin": "Found the same issue at 0.8.1 and 0.9.1.\n. ",
    "philgruneich": "Any workaround?\n. ",
    "crohrer": "Issue still present in 0.11.0\n. ",
    "gregor": "Use grunt-contrib-copy\n. ",
    "arthurvr": "https://github.com/gruntjs/grunt-contrib-copy is what you need.\n. And @gregor-w was just a few seconds faster :D\n. Is there a ticket about this in the actual uglify repo?\n. I'd leave this issue open. The dep being locked is temporary, right?\n. ",
    "developer1998": "Thank you.\n. ",
    "vibornoff": "Take a look to #303 and my a workaround of the bug in my project.\nMy patch resolves the issue.\n. ",
    "jrhite": "The 4 failing tests have been failing since commit: 8f9bb92. Earlier comments from @XhmikosR say that he is on it and fixing them.\nI added 5 new tests specific to the new functionality and they're all passing.\n. Rebased PR and reverted changelog changes...\nThanks!\nOn Tue, Mar 31, 2015 at 3:33 AM, Vlad Filippov notifications@github.com\nwrote:\n\n@jrhite https://github.com/jrhite could you please rebase your PR? also\nno need to update the changelog\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/pull/312#issuecomment-87824130\n.\n. @XhmikosR I just reverted the package.json version change and rebased to the latest code. Should be good to go.\n\nCheers!\n. @XhmikosR good eye again! (uggh...MD requires 2 extra spaces like that...still learning it :-) )\nI went ahead and add the 2 trailing spaces to all the new options in docs/uglify-options.md. I also fixed some of the older options that were missing this too.\nChecked in and rebased. Thanks!\n. Thanks!\n@XhmikosR when/how will this make it to the npm repo? it will be version 0.8.2, correct?\n. Ah, got it ok. Thanks...\nNo big rush here, but the sooner the better of course! :-)\nOn Thu, Apr 2, 2015 at 12:28 PM, XhmikosR notifications@github.com wrote:\n\nI don't make the releases myself so when @vladikoff\nhttps://github.com/vladikoff thinks it's OK :P\nThough, perhaps we could wait a couple of days in case we merge some of\nthe other PRs too.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/pull/312#issuecomment-88740781\n.\n. I don't know what the issue is, but there was a new 2.4.18 and now 2.4.19\nreleased yesterday. If you were already using uglifyjs to obfuscate angular\ncode and it was working fine prior to yesterday, there might be a real bug.\nPlease file that here:\n\nhttps://github.com/mishoo/UglifyJS2\nJust to be clear though, in case you aren't already aware, if you're using\ngrunt-contrib-uglify with angular code you should probably be using\nng-annotate too, because obfuscation can break on angular's dependency\ninjection system. If you don't use ng-annotate see\nhttps://docs.angularjs.org/tutorial/step_05 and search for 'A Note on\nMinification' on how to write angular code in an obfuscateable way.\nOn Mon, Mar 30, 2015 at 1:25 AM, Arthur Verschaeve <notifications@github.com\n\nwrote:\nIs there a ticket about this in the actual uglify repo?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/issues/313#issuecomment-87453417\n.\n. Yes, totally agreed @alonisser. I'll +1 your PR. It will be nice if someone\npicks it up and commits it quickly.\n\nAs you say, that will lock in people with the previous code and they'll be\nsafe. Then moving forward we can work out any kinks in the new updates.\nCheers.\nOn Mon, Mar 30, 2015 at 6:20 PM, Alonisser notifications@github.com wrote:\n\nI think a better idea would be to accept the pr for this version and merge\n@jrhite PR in the next version of grunt-contrib-uglify, so users who suffer\nfrom this problem won't have their build process broken\nTwitter:@alonisser https://twitter.com/alonisser\nLinkedIn Profile http://www.linkedin.com/in/alonisser\nFacebook https://www.facebook.com/alonisser\n_Tech blog:_4p-tech.co.il/blog\n_Personal Blog:_degeladom.wordpress.com\nTel:972-54-6734469\nOn Mon, Mar 30, 2015 at 10:52 AM, Mihai Bazon notifications@github.com\nwrote:\n\n@alonisser https://github.com/alonisser I can only advise you to file\nan issue https://github.com/mishoo/UglifyJS2/issues at UglifyJS, if\nyou\nfeel the breaking change comes from there. Please include a small test\ncase\nwhich does not involve Grunt.\nThe idea is that @jrhite https://github.com/jrhite sent a PR for\ngrunt-contrib-uglify which actually depends on a feature introduced in\nUglifyJS 2.4.18, so sooner or later it will have to upgrade.\n\u2014\nReply to this email directly or view it on GitHub\n<\nhttps://github.com/gruntjs/grunt-contrib-uglify/issues/313#issuecomment-87582684\n.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/issues/313#issuecomment-87638106\n.\n. +1 let's lock down to the old version of uglifyjs for now and let the kinks be worked out of the new uglifyjs release.\n. There was a recent upgrade of the underlying uglifyjs tool. The version of\nuglify that grunt-contrib-uglify uses is ^2.4.0 which means it's picking up\nthe latest uglifyjs 2.4.19 changes.\n\nI recommend this PR\nhttps://github.com/gruntjs/grunt-contrib-uglify/pull/314 from @alonisser gets\napproved/submitted asap so that the uglifyjs tools gets pinned to 2.4.17\nfor now.\nAlso can you please repro this bug with a small sample of code (no grunt\nincluded -- just use the uglifyjs cli interface directly) and submit a bug\nhere: https://github.com/mishoo/UglifyJS2\nOn Mon, Mar 30, 2015 at 4:29 PM, Phinome notifications@github.com wrote:\n\nI recently updated to node 0.12.1, npm 2.7.3 and right now I\u2019m getting the\nfollowing error with grunt-contrib-uglify version 0.8.0:\nRunning \"uglify:min\" (uglify) task\n[Warnings: Cannot assign to read only property 'subarray' of main.js'\ncontent]\nUglifying source static/js/main.js failed.\nWarning: Uglification failed.\nCannot assign to read only property 'subarray' of main.js' content.\nUse --force to continue.\nAborted due to warnings.\nHappens with any .js file, so it seems to be a bug either with nodejs\nv0.12.1 or with this uglify task. Any ideas?\nhere is my gruntfile.js configuration:\nuglify: {\n      options: {\n        banner: '<%= banner %>'\n      },\n      js: {\n        src : '<%= concat.js.dest %>',\n        dest : 'release/<%= pkg.name %>.min.js'\n      }\n    }\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/issues/315.\n. The tests you see failing, have been failing for about 17 days now and are likely unrelated to the problems you have recently starting seeing.\n\nA bug may have been created in the way the grunt-contrib-uglify interacts with the underlying uglifyjs api. This bug was likely created due to the new uglify release and grunt-contrib-uglify will need to be updated (I have a PR to update it). For now, to get around this we can 'FIX' grunt-contrib-uglify to version 2.4.17 which doesn't have the potential grunt-contrib-uglify/uglifyjs tool conflicts.\nCurrently however grunt-contrib-uglify uses version ^2.4.0 which means it picks up the latest 2.x.x version, which is currently 2.4.19. To avoid this we remove the ^ and specify a specific version, 2.4.17 until the bug(s) in 2.4.19 are worked out. That's what @alonisser 's PR is about.\nDoes that make sense?\nCheers.\n. Ugh...so trivial I missed it...sorry.\nThe changes I added assume/require options.mangle is an object, not just a simple boolean value. If options.mangle === false there is no problem, but if options.mangle === true the bug is triggered.\nI created PR 319 to fix the problem and added a test too. It checks if options.mangle is an object or not, and if not converts it to an object.\n. Sorry if I am confused, but what is done automatically? My experience was unless I explicitly deleted node-modules/grunt-contrib-uglify and then did and npm install, grunt-contrib-uglify would not pick up the latest uglify-js release. That's why I wanted to explicitly update the version number in packages.json.\nMaybe the end result is the same though. ie: I'd still have to delete and reinstall grunt-contrib-uglify to get the latest version of uglify-js.\nCheers.\n. > Use grunt-contrib-concat to concatenate the files first.\nNo need. uglify itself will do the concatenation for you.\nOn Mon, Jun 1, 2015 at 4:40 PM, Sindre Sorhus notifications@github.com\nwrote:\n\nUse grunt-contrib-concat to concatenate the files first.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/issues/336#issuecomment-107381629\n.\n. @milkisevil  @reppners\n\nSorry, my bad here. I implemented this without checking if there was already a similar PR. They're basically the same. Had I seen the original PR I would have just commented rather than code up a new PR.\nI do have a slight preference to my PR for 2 reasons though:\n- I changed the mangleProperties option to work the same way that the mangle option already works. Specifically, as with mangle it can either be true/false or an object (which means true) with more detailed options. I like that both mangle and mangleProperties work in the same way.\n- having both mangleProperties and mangleRegex doesn't make a lot of sense, because mangleRegex will just be ignored if mangleProperties is false, which might be confusing and produce counter-intuitive behavior.\n@XhmikosR @vladikoff, any way we can get some eyes on either this PR or #352 ?\nWould be great to get either this PR or that one merged as the regex functionality is pretty handy.\n. Hi @XhmikosR @vladikoff \nIs grunt-contrib-uglify dead or dying? Just curious as to the future of this grunt plugin.\nThanks!\n. @vladikoff thanks for the merge! I am happy to help when and where I can. Not sure about the time commitment but will do what I can!\n. @vladikoff @XhmikosR  thanks guys, happy to see this merged.\nI see npm is still on version 0.11.0. What's the process to get the official npm version bumped up?\nThanks!\n. ",
    "pdachtera": "+1 for the PR!\n. ",
    "chesserik": "+1 !\n. ",
    "jk-": "really good idea! +1\n. ",
    "yneves": "best idea ever +1\n. ",
    "alonisser": "Yes, the breaking change is 2.4.18 , and yes It's concerning a specific ng\nannotation case that worked with the previous version but not with the new\nversions, I did fix our code not to fail, but since ugilfyjs2 is presenting\nbreaking changes in a patch version I still think a widely used plugin as\ngrunt-contrib-uglify should use fixed versions and bump uglifyjs2 versions\nonly after checking\nTwitter:@alonisser https://twitter.com/alonisser\nLinkedIn Profile http://www.linkedin.com/in/alonisser\nFacebook https://www.facebook.com/alonisser\n_Tech blog:_4p-tech.co.il/blog\n_Personal Blog:_degeladom.wordpress.com\nTel:972-54-6734469\nOn Mon, Mar 30, 2015 at 10:15 AM, Jacob Hite notifications@github.com\nwrote:\n\nI don't know what the issue is, but there was a new 2.4.18 and now 2.4.19\nreleased yesterday. If you were already using uglifyjs to obfuscate angular\ncode and it was working fine prior to yesterday, there might be a real bug.\nPlease file that here:\nhttps://github.com/mishoo/UglifyJS2\nJust to be clear though, in case you aren't already aware, if you're using\ngrunt-contrib-uglify with angular code you should probably be using\nng-annotate too, because obfuscation can break on angular's dependency\ninjection system. If you don't use ng-annotate see\nhttps://docs.angularjs.org/tutorial/step_05 and search for 'A Note on\nMinification' on how to write angular code in an obfuscateable way.\nOn Mon, Mar 30, 2015 at 1:25 AM, Arthur Verschaeve <\nnotifications@github.com\n\nwrote:\nIs there a ticket about this in the actual uglify repo?\n\u2014\nReply to this email directly or view it on GitHub\n<\nhttps://github.com/gruntjs/grunt-contrib-uglify/issues/313#issuecomment-87453417\n.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/issues/313#issuecomment-87576557\n.\n. I see,\n\nTwitter:@alonisser https://twitter.com/alonisser\nLinkedIn Profile http://www.linkedin.com/in/alonisser\nFacebook https://www.facebook.com/alonisser\n_Tech blog:_4p-tech.co.il/blog\n_Personal Blog:_degeladom.wordpress.com\nTel:972-54-6734469\nOn Mon, Mar 30, 2015 at 10:52 AM, Mihai Bazon notifications@github.com\nwrote:\n\n@alonisser https://github.com/alonisser I can only advise you to file\nan issue https://github.com/mishoo/UglifyJS2/issues at UglifyJS, if you\nfeel the breaking change comes from there. Please include a small test case\nwhich does not involve Grunt.\nThe idea is that @jrhite https://github.com/jrhite sent a PR for\ngrunt-contrib-uglify which actually depends on a feature introduced in\nUglifyJS 2.4.18, so sooner or later it will have to upgrade.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/issues/313#issuecomment-87582684\n.\n. I think a better idea would be to accept the pr for this version and merge\n@jrhite PR in the next version of grunt-contrib-uglify, so users who suffer\nfrom this problem won't have their build process broken\n\nTwitter:@alonisser https://twitter.com/alonisser\nLinkedIn Profile http://www.linkedin.com/in/alonisser\nFacebook https://www.facebook.com/alonisser\n_Tech blog:_4p-tech.co.il/blog\n_Personal Blog:_degeladom.wordpress.com\nTel:972-54-6734469\nOn Mon, Mar 30, 2015 at 10:52 AM, Mihai Bazon notifications@github.com\nwrote:\n\n@alonisser https://github.com/alonisser I can only advise you to file\nan issue https://github.com/mishoo/UglifyJS2/issues at UglifyJS, if you\nfeel the breaking change comes from there. Please include a small test case\nwhich does not involve Grunt.\nThe idea is that @jrhite https://github.com/jrhite sent a PR for\ngrunt-contrib-uglify which actually depends on a feature introduced in\nUglifyJS 2.4.18, so sooner or later it will have to upgrade.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/gruntjs/grunt-contrib-uglify/issues/313#issuecomment-87582684\n.\n. @mishoo First of all I want to thank you for uglifyjs2! It's a great project and has an important part in our js world.  now for the bug:\n\nI don't exactly know what the bug is, it has something to do with mangle behavior with angular.js when not using the (recommended) [] notation  for an \"unused\" injected service (that's why it didn't break until now) . when I override grunt-contrib-uglify version of uglifyJS to 2.4.17 everything passes fine with my build process, but when bumping to 18 (or 19) the build breaks. we did manage to fix our code, but we spent half a day going through dependencies and the build process to find this.. and I guess lots of people are going through the same pain. \n. ",
    "Phinome": "@jrhite that's ok , when i use the uglifyjs cli interface directly. but i do not understand these meanings and next what i should do ?\n\nI recommend this PR\nhttps://github.com/gruntjs/grunt-contrib-uglify/pull/314 from @alonisser gets\napproved/submitted asap so that the uglifyjs tools gets pinned to 2.4.17\nfor now.\n\nbecause i see this PR https://github.com/gruntjs/grunt-contrib-uglify/pull/314 displayed \n\nThis branch has failed checks, but can be merged.\n\nThat's all , Thanks.\n. Thanks. I see.\n. ",
    "daniel-mf": "I removed the cwd parameter and added src/www/ to the file paths, so it worked.\njavascript\n{\n    src: [\n        'src/www/../../bower_components/test/test.js',\n        'src/www/../../bower_components/test2/test2.js',\n        'src/www/../another-dir/test3.js'\n    ],\n    dest: 'dist/www/js/main.min.js'\n}\n. ",
    "nicolaspanel": "Same issue here.\nIs there any workaround to use cwd option instead of renaming paths? \nNote: glob resolution work properly. Error happen when start generating minified version\n. ",
    "nitulkukadia": "@sindresorhus it is not working.\nIt has changed my file to as below (removed array brackets):\nangular.module('myApplication').factory('myService', function() {\nreturn {\nname: 'name'\n};\n});\nbut after uglifying it still gives me same error.\n. Thanks.\n. ",
    "RyanFrench": "It seems that I misunderstood the reason for the --source-map-root option. I'm going to close this pull request and open a discussion on the issue I was attempting to resolve with this.\n. ",
    "brendonco": "Hi,\nIt seems ASCIIOnly : true doesnt work.  I have a unicode string in js e.g. \\u0074\\u0065\\u0073\\u0074 but after minified, the unicode character are converted back to a normal string.\nuglify: {\n      options: {\n        // banner: '/! <%= pkg.name %> <%= grunt.template.today(\"yyyy-mm-dd\") %> /\\n'\n        ASCIIOnly: true\n      },\n      build: {\n        src: 'dist/www/js/<%= pkg.name %>.js',\n        dest: 'dist/www/js/<%= pkg.name %>.min.js'\n      }\n    },\n. Hi @XEuRoMAN ,\nI'm using latest \"grunt-contrib-uglify\": \"^0.9.1\" and below is the package.json for uglify.  I still getting my unicode transform back to visible string.\nuglify: {\n      options: {\n        report: 'min'\n      },\n      build: {\n        options: {\n            ASCIIOnly: true\n        },\n        files: {\n          'dist/www/js/<%= pkg.name %>.min.js' : ['dist/www/js/<%= pkg.name %>.js']\n        }\n      }\n    }\n. sorry I mean above script is my Gruntfile.js not package.json. let me debug the grunt-contrib-uglify and see what I can find.\n. ",
    "XEuRoMAN": "Hi, @brendonco \nI'm using \"grunt-contrib-uglify\": \"0.9.1\"\nand my uglify properties looks like this:\njs\nuglify: {\n    options: {\n        report: 'min'\n    },\n    'all': {\n        options: {\n            ASCIIOnly: true\n        },\n        files: {\n            'destination/js.min.js': ['destination/js.js'],\n            'destination/js2.min.js': ['destination/js2.js']\n        }\n    }\n},\n. Then I only could guess what could be wrong...\nWhy do you say that there is your package.json content? As I know, package.json are used for npm to install packages and Gruntfile for all grunt tasks...\nAnyway, try to debug grunt-contrib-uglify module. See how looks options object inside minifiy function.\n. ",
    "bhamodi": "@jrhite - you are correct. To get the version to update automatically, the node_modules directory has to be removed. I also sent a PR updating more dependencies in #345, but it was very quickly shot down. I do understand that ^2.4.19 will upgrade to v2.4.24 automatically but the issue is that if you have already run npm install before, you won't be able to upgrade to v2.4.24 because 2.4.19 satisfies ^2.4.19. The only way to get around it is to delete the node_modules directly as you mentioned.\nHoping @sindresorhus and @vladikoff could give us more insight as to why we wouldn't want to explicitly upgrade the dependency so that we wouldn't have to remove the node_modules directory every time we want to contribute? Please do correct me if removing the node_modules directory is common practice. Thanks.\n. @milkisevil @garygreen - it has been properly released as of v2.4.24. Can we update to use the latest version?\n. ",
    "saravananceg": "+1 for this issue. Please can you advise on this issue. Debugging is very painful as paul mentioned.\n. ",
    "mukundmurrali": "Any update on this issue ?\n. ",
    "jeroenheijmans": "An answer came in on that SO question, mentioning an Issue reported for Chromium, also reporting that mapping back to the variable names isn't working. It seems claimed there that this is a problem with the sourcemappings spec.\n. ",
    "larpo": "This was a browser issue as noted above. To my surprise, I noticed today that the name mapping support had been implemented and was working on Chrome Canary.\n. ",
    "Rouby": "If I encapsulate the string-literal (before transformation) with brackets it gets transformed correctly.\nreturn ('\\\n    .......\\\n    ');\n. ",
    "waltfy": "+1\n. @gauntface I am currently using @marlun78's branch of this project. Maybe it'll help?\nhttps://github.com/gruntjs/grunt-contrib-uglify/pull/331\n. ",
    "ashokfernandez": "+1\n. ",
    "DmitryGonchar": "+1\n. ",
    "denisbabineau": "+1\n. ",
    "snajo": "+1\n. ",
    "mlynam": "Turned on invisibles and found no new lines... Problem on my end. Closing.\n. ",
    "albell": "+1. This is still happening. In addition, these options also fail:\nmangle: false,\ncompress: true,\nscrewIE8: true,\nwith the message:\nWarning: Cannot assign to read only property 'screw_ie8' of true\nI :heart: screwIE8. This seems like basic uglify functionality. Please fix?\n. ",
    "swashcap": ":+1:\n. ",
    "matthewleon": "\n. ",
    "masterspambot": ":+1: \n. ",
    "marlun78": "I failed to see there was a similar PR (#327) already\n. ",
    "gauntface": "I'm actually hitting similar issues with this. Any tips?\n. ",
    "passy": "That does not look like 29MB. Are you sure it's that big? And if this is only a part of it, please don't paste the full one!\n. ",
    "seiyria": "That is definitely only a part of it -- you can see it gets truncated at the end.\n. ",
    "ezekel": "ok thank you\n. ",
    "liselnicole": "I am seeing the same thing. \n. ",
    "benjaminsuch": "The error occures, when you include \".map\" files in your concatenation. Grunt-Uglify can't handle them. Remove the \".map\" files from your concat-task and it should work.\n. ",
    "julmot": "For me this occurred because I was using const. This message is useless to find the real problem...\n. ",
    "philipbulley": "Looks like mishoo/UglifyJS2 hasn't released this feature yet (as of v2.4.23). I had to npm install mishoo/UglifyJS2 to get this. I guess it should only be added to grunt-contrib-uglify when properly released. \nBut +1 for when that happens!\n. :+1: briefly tested on my fork and works as expected.\n. Hey @jrhite, is there any improvement with the technique used in this PR when compared to #352?\n. ",
    "garygreen": "@sindresorhus thanks for friendly advice :stuck_out_tongue_winking_eye: \n. ",
    "reppners": "So.. how can I use the mangle-regex option with grunt? Is it integrated yet?\n. > I do have a slight preference to my PR for 2 reasons though\nI think those are valid reasons. The only thing that was a concern to me was to simply pass through the options to Uglify2 so the API of the grunt task and the underlying Uglify2 lib are the same. I don't know how important that is to the maintainers and users of grunt-uglify. I'm fine with both solutions  :)\n. ",
    "gothburz": "I replicated your problem and has the same issue, it only worked correctly when I renamed the files without \"jquery.\". Just leave the files as .js extensions.\n. ",
    "helgatheviking": "Yes, it works when I rename the files to remove the \"jquery\". I think it would be ideal for the grunt plugin to get the file name from whatever preceeds .js instead of first character up until the first .\n. I can confirm that @UltCombo's suggestion works for me.\n. ",
    "adamovsky": "Sorry had accidently prematurely submitted\n. I think it was a caching issue that didn't update the code base during build.  It works as expected now.\n. ",
    "seriema": "I checked v0.9.2 and it's there. I also tried setting quoteStyle: 1 on my project and it worked. Can you describe your problem a bit more?\n. ",
    "58bits": "I'm getting this error as well now on a remote production deploy (Ubuntu, Node 4.1.1, Npm 3.3.3, grunt-contrib-uglify 0.9.2\nDefaultsError {\nDEBUG[f2248766]       msg: '`quote_style` is not a supported option',\nDEBUG[f2248766]       defs:\nDEBUG[f2248766]        Object {\nDEBUG[f2248766]          indent_start: 0,\nDEBUG[f2248766]          indent_level: 4,\nDEBUG[f2248766]          quote_keys: false,\nDEBUG[f2248766]          space_colon: true,\nDEBUG[f2248766]          ascii_only: false,\nDEBUG[f2248766]          inline_script: false,\nDEBUG[f2248766]          width: 80,\nDEBUG[f2248766]          max_line_len: 32000,\nDEBUG[f2248766]          ie_proof: true,\nDEBUG[f2248766]          beautify: false,\nDEBUG[f2248766]          source_map: null,\nDEBUG[f2248766]          bracketize: false,\nDEBUG[f2248766]          semicolons: true,\nDEBUG[f2248766]          comments: false,\nDEBUG[f2248766]          preserve_line: false,\nDEBUG[f2248766]          negate_iife: true } }\nDEBUG[f2248766]\nDEBUG[f2248766]     [31m>> [39mUglifying source [36mapp/scripts/admin-invitations.js[39m failed.\nDEBUG[f2248766]     [33mWarning: Uglification failed. Use --force to continue.[39m\nDEBUG[f2248766]\nDEBUG[f2248766]     [31mAborted due to warnings.[39m\nStrange as the task runs fine on a local dev build.\n. Solved - the problem was a dependency that was installing an older version of uglify-js.\n. ",
    "mikila85": "did you solve it eventually?\n@hguiney\n(stuck on the same thing). Thx anyways :). ",
    "hguiney": "@mikila85 Filed this last year so I don\u2019t remember. But it looks like I had a deadline to meet so I just excluded the plugins that were causing problems rather than spending a bunch of time trying to get them to work. Sorry I can\u2019t be of more help.. ",
    "m0ngr31": "What does your grunt.registerTask('default') look like?\n. ",
    "MoLow": "That is not supported in the level of the entire task, if for example I want to use an array of files\n. ",
    "RevanProdigalKnight": "What version of NPM are you using? I just ran on node v4.1.1 without any problems.\n. ",
    "eshikerya": "$ npm --version\n2.14.4\n@vladikoff under version v0.11.13 it works fine, when I switching to v4.1.1 and try to build the project - it fails with message above\n. javascript\nuglify: {\n    libs: {\n        options: {\n            mangle: true,\n            compress: true,\n            wrap: false\n        },\n        files: {\n            'deploy/js/libs.js': grunt.file.read('./config/libs.list')\n                .split(/\\n/).filter(function (s) { return /^$|^#|^\\//.test(s) == false })\n        }\n    }\n},\n. ",
    "sgtpenguin": "Btw I found the error does not happen if you include the unminified version of ScrollMagic and uglify that along with your other libs. ",
    "bipashant": "Getting same error on Ruby On Rails application on the Production environment.. ",
    "johnjspiteri": "@TeodorKolev, wondering... have you tried manually setting the file order to rule out \"if\" any of the files in your directories are causing the error?\n``` javascript\n    target: {\n        files: {\n            'client/js/app.min.js': [\n                'client/js/app/app.module.js',\n                'client/js/app/app.routes.js',\n                'client/js/app/app.config.js',\n                'client/js/app/app.run.js'\n```\n. @avdg, you inspired me to look at this differently...\njavascript\nvar holder = {};\nholder[\"images.interior.\"+ index] = content;\nWrapping up the concatenation made this pass through Uglify, and still work with Mongoose.\n$set: holder\n. ",
    "Mottie": "I'm having this same issue... it appears that Uglify2 now only accepts three comments settings (ref):\n\n\nPreserve copyright comments in the output. By default this works like Google Closure, keeping JSDoc-style comments that contain \"@license\" or \"@preserve\". \nYou can optionally pass one of the following arguments to this flag:\n\"all\" or \"true\" (ref) to keep all comments.\nA valid JS regexp (needs to start with a slash) to keep only comments that match. \nNote that currently not all comments can be kept when compression is on, because of dead code removal or cascading statements into sequences.\n\n\nThe only way I was able to get it to work like the previous 'some' setting was to add a function to my Gruntfilte.js:\njs\nuglify: {\n    options: {\n        preserveComments: function(node, comment) {\n            // preserve comments that start with a bang\n            return /^!/.test( comment.value );\n        },\n    }\n}\nTrying to use preserveComments: '/^!/' did not work for me.\n. I don't think so. If you look at the code that starts at line 236:\njs\nif (ARGS.comments != null) {\n    if (/^\\/.*\\/[a-zA-Z]*$/.test(ARGS.comments)) {\n        try {\n            OUTPUT_OPTIONS.comments = extractRegex(ARGS.comments);\n        } catch (e) {\n            print_error(\"ERROR: Invalid --comments: \" + e.message);\n        }\n    } else if (ARGS.comments == \"all\") {\nIt uses test on ARGS.comments, so it is expecting a string.\nThe extractRegex function on line 203:\njs\nfunction extractRegex(str) {\n  if (/^\\/.*\\/[a-zA-Z]*$/.test(str)) {\n    var regex_pos = str.lastIndexOf(\"/\");\n    return new RegExp(str.substr(1, regex_pos - 1), str.substr(regex_pos + 1));\n  } else {\n    throw new Error(\"Invalid regular expression: \" + str);\n  }\n}\nis testing for a string again, but it must start with a /, which it strips out, then it uses new RegExp. So, that option will only accept a string, and it should also be noted that special characters will need to be double escaped, e.g. \\\\s.\n. The README.md needs to be updated as well as it still includes 'some' as an option: https://github.com/gruntjs/grunt-contrib-uglify#preservecomments\n@avdg shouldn't this be preserveComments instead of comments?\n\njs\nuglify: {\n    options: {\n        output: {\n            comments: /^!/\n        }\n    }\n}\n. \n",
    "Ry7n": "To those dealing with this issue, the full \"some\" behavior as documented should be something like this:\njs\ngrunt.initConfig({\n  uglify: {\n    options: {\n      preserveComments: /(?:^!|@(?:license|preserve|cc_on))/\n    },\n    files: []\n  }\n});\n. ",
    "geddski": "+1\n. ",
    "gduarte": "Hi there. This does it for me:\njs\noptions: {\n    mangle: { keep_fnames: true }\n}\n. ",
    "seckardt": "+1\n. I hunted down the issue and created https://github.com/mishoo/UglifyJS2/issues/866\n. ",
    "swilliamset": "\nDo not use \"^\" versions, ever, use ~\n\nCurious. Could you unpack this statement? Is this a decision specifically for this project or a general recommendation all projects should consider.?\n. @Rialgar thanks for the clarification\n. ",
    "Rialgar": "Thank you for the quick response and all the suggestions and valid points.\n@avdg Our uglify step started hanging. We are not sure what exactly caused it to hang, it might be related to the \"hangs when compressing already minified files\" thing, but we will have to look at that. Point is, that takes time to fix, and we cannot halt development until it is fixed.\n@swilliamset My commit message may be a bit harsh, I was quite upset when all our builds broke. I personally think a user of a library should never automatically consume updates of your dependency, that you did not thoroughly test. Even when everybody follows semver, minor versions can introduce new bugs. I prefer dependency updates resulting in a new version of the library itself, so each update is an active, conscious step. The npm maintainers follow another philosophy, grunt-contrib seems to agree with me, their package.json uses \"~\" exclusively.\nIt is not only unsettling but dangerous if a whole project's development gets disrupted without anybody in that project changing anything. It was no change we could revert, no change we could tell people not to consume until the issue is resolved. We could provide a workaround by changing  grunt-contrib-uglify's package.json locally, but by the time we figured out it was caused by the uglify.js update, many people were very angry. I would prefer telling npm which versions to use globally, show an error if that won't work, and warnings if there are compatible updates available. Afaik that is not possible. Please correct me if I'm wrong. We will probably start using npm shrinkwrap or some bundling, even for use in development builds.\nI agree, dependency hell is real, and neither npm nor any other package manager has managed to solve the problem. I don't know if it is possible at all, but I hope that sometime, somebody will come up with a solution that works.\n@XhmikosR passing automatic tests only proves that there is no regression. Testing can never prove that it works, it can only prove that it is broken or prove nothing at all. Still, it may be related to something we did wrong, and we WILL look to fix that. Nevertheless it should always be possible to go back to a working version, or a specific version for that matter, if you need to reproduce a bug to verify it was fixed since that version.\n. @avdg What we could gather: It was NOT an already minified file. It is related to what uglify does to return statements. We could not find what exactly happened, but using if_return=false removes the hang. It seems like that transformation interferes with another. When it hangs, CPU usage stays up, suggesting an infinite loop. Unfortunately we can not provide a bug report to uglify.js since we do not know what part of the code triggers the problem. Providing the whole code is not possible (it's not an open source project) and would not be feasible anyway.\n. ",
    "plynchnlm": "I tried the newest version, 0.11.0, and I got 2.6.1 of uglify-js, so I will close this.  Thanks!\n. ",
    "martingg88": "any update on this issue?\n. ",
    "davnicwil": "+1 for merging this feature when possible (I need it!) and +1 for this approach of nesting mangleRegex inside mangleProperties as an option, makes more sense than having them as two separate options.\n. ",
    "eddiemonge": "Nope, still doesn't seem to do anything. ",
    "sailens": "It's a PoC what I'm building, so the unstable branch will do. Much obliged.\n. ",
    "jrtitus": "@morious Can you post a few things?\n1) Your declaration of the mangleProperties option\n2) Your declaration of the exceptionsFiles option\n3) The source from the JSON files specified in your exceptionsFiles option\n(Is it possible you have an error in one of the JSON files? This can be checked with http://jshint.com/)\n. ",
    "QuintinS": "Bump\n. I've discovered the reason for the issue by looking at the debugger in Firefox Dev. The sourcemap is pointing to a source which is not in localhost on my machine, resulting in a 404.\nMy file structure looks like this:\n`\n/\n/wwwroot // <-- Localhost\n/_dev <-- Location of source files\n/_project <-- location of gruntfile.js\n`\nAll dev files are inside the /dev/ folder, which is being correctly pointed to... but as the folder is not on the localhost, it was resolving to a 404, which in Chrome Debugger appears as a blank screen. Firefox Dev generated the HTML for a 404 inside the debugger which gave me a clue as to what the problem was.\nMy gruntfile looks like so:\n`\n```\n    uglify: {\n        common: {\n            options: {\n                mangle: false,\n                compress: true, // true or false or {}\n                preserveComments: 'all', // true or 'all' or 'some'\n                sourceMap : true\n            },\n            files: {\n                // '../wwwroot/Content/includes/js/libs.js': ['../_dev/js/common/libs/.js'],\n                '../wwwroot/Content/includes/js/buildbar.js': ['../_dev/js/common/buildbar/.js'],\n                '../wwwroot/Content/includes/js/framework.js': ['../_dev/js/common/framework/*.js'],\n            }\n        },\n}\n\n```\n`\nI understand there might be a way to use sourceMapRoot to point the browser to a different location, but as the location will be outside of localhost I'm not sure how to proceed.\nBizarrely it was working fine until a month or so ago. I may have updated to a later version of the package without realising.\nIs there a way that I can resolve this without needing to change my directory structure?\n. ",
    "mcpengelly": "I also experience this. Is there any solution? Am I missing something?\nedit: i should note that im using grunt-ts to compile ts to js files so the problem is probably me\n. ",
    "antonpantev": "I don't think this is a bug with grunt-contrib-uglify. \nTry using sourceMapIncludeSources: true in your uglify options.\nThis will include the original source file inside of your map files instead of trying to reach the files located outside of your localhost.\n. ",
    "distinctdan": "I had a similar issue and it turned out to be my sourceMapRoot was set incorrectly in my grunt-ts config. If you look at your generated sourcemap file, you can see what the root is and also what the file paths are. In my case, the file paths were missing one folder, so I added it to the sourceMapRoot property.. ",
    "SmartArtsStudio": "``` javascript\ngrunt.config.init( {\nuglify: {\n    // strip all comments but custom /*# comments*/\n    stripComments: {\n        options: {\n            mangle          : false,\n            compress        : false,\n            preserveComments: function ( node, comment ) {\n                // keeps /*# comments*/\n                return comment.type == 'comment2' && comment.value.charAt( 0 ) == '#';\n            },\n            beautify        : {\n                beautify     : true,\n                indent_level : 4,\n                indent_start : 0,\n                quote_keys   : false,\n                space_colon  : true,\n                ascii_only   : false,\n                inline_script: false,\n                width        : 80,\n                max_line_len : 32000,\n                source_map   : null,\n                bracketize   : true,\n                semicolons   : true,\n                preamble     : null,\n                quote_style  : 0,\n                // documented here http://lisperator.net/uglifyjs/codegen \n                // but not documented on GitHub Uglify/UglifyJS2 or grunt-contrib-uglify. \n                comments     : true,    // task keeps ALL comments. (preserveComments function overridden? ignored? sucessful? )\n                comments     : false,   // task keeps NO comments.  (preserveComments function overridden or ignored! )\n             // comments  : undefined   // Don't even mention comment in object definition:\n                                        // preserveComments function prevails and task\n                                        // keeps all /*# comments*/ stripping all others ('yay')\n            }\n        },\n        files  : [\n            {/* file details*/}\n        ]\n    }\n}\n\n});\n```\nI assumed not defining 'comments' would default to either true's or false's behaviour accordingly. To my surprise it  resulted in a third behavior... which is a good thing!\nI assume it is depreciated. Just thought I would mention it in case its messing with someone else's, custom preserveComments. And vote to keep this current behaviour.\n. Thanks for the insight, it may actually be the intended result. Because without it, if the 'comment' option had a 'strict' Boolean behaviour, in my use case my custom preserveComments would not have the opportunity to succeed. \nIt may just help others save some head scratching if its documented that the 'comment' boolean value will override a custom preserveComments function (and anything else in preserveComments that it may or may not override, if it overrides other stuff aswell.) \nIt would probably rarely come up since it is a potentially depreciated option being that it is only documented at http://lisperator.net/uglifyjs/codegen. I just happens to stumble across it trying to do get uglify to NOT do 95% of what uglify is designed to do. Thought I would mention it in case the developers were not even aware of it, to think to clarify it.\nThanks again for your insight.\n. ",
    "nwoltman": "It looks like the work done in this PR was essentially reverted in d7704c4da62b52f3ad9f22767579f7e09842b939. It turns out there is an undocumented grunt command that builds the documentation from the files in the docs folder.\n@joeldenning To fix this, you could open another PR and instead edit docs/uglify-examples.md, then run the grunt build-contrib command to build the README.\n. ",
    "swarajgiri": "@vladikoff - Any idea when this is up for release?\n. cool\n. ",
    "ArthurAssuncao": "Using node 0.10.x?\nIn install (npm install) get this message?\nnpm WARN engine gzip-size@3.0.0: wanted: {\"node\":\">=0.12.0\"} (current: {\"node\":\"v0.10.25\",\"npm\":\"1.3.10\"})\n. ",
    "kzc": "http://stackoverflow.com/questions/6830796/regex-to-match-anything-but-two-words/6830819#6830819\n. 2.8.3 will be released shortly:\nhttps://github.com/mishoo/UglifyJS2/pull/1523. @XhmikosR True, but that uglify-js@2.8.2 error is fairly likely to occur in the wild. . @alexlamsl Any interest in porting uglifyjs-webpack-plugin to use uglify-es ~~or uglify-js@3~~?\nhttps://github.com/webpack-contrib/uglifyjs-webpack-plugin/issues/32\nIt's just one source file:\nhttps://github.com/webpack-contrib/uglifyjs-webpack-plugin/blob/master/src/index.js. ",
    "paladox": "Caused anything that was running on nodejs 0.10 to fail with these error https://travis-ci.org/sindresorhus/maxmin/jobs/116383262\n. Thanks.\n. ",
    "brettz9": "Nevermind...See I should have omitted dist.\n. ",
    "geooogle": "https://davidburgos.blog/how-to-fix-grunt-contrib-uglify-for-es6/. ",
    "vivekkodira1": "Hi Anthony, \n     The title is probably wrong. I didn't know which version of uglify was being used by the grunt task. And assumed that it may not be the latest because of the difference in behavior between the grunt task and the online tool. The observation is correct though: the grunt task is ignoring most of the options passed to it and is removing valid code while the online tool does not.\n. Thanks Anthony. I didn't read the readme properly and was passing options by themselves without categorizing them.\n. Unfortunately, I won't be able to upload the code since it is proprietary. I was able to come up with another workaround to solve the problem. Documenting it here just in case someone else needs it. \nI added a lineending task before invoking uglify to explicitly convert the line endings. Now uglify runs without issues.\n. Yes. I am concatenating multiple files before running uglify.\n. ",
    "invinciblemuffi": "So you mean to say, it is an issue which is still not fixed and in open state\n. Can you guide me how to find this issue, so that I can show it to my other team mates\n. ok will check\n. ",
    "MichaelZalla": "Another alternative that I've tried:\n1. Run grunt-wrap to create a new set of wrapped source files (written to a temporary project directory).\n2. Map the original set of source paths to be relative to the temporary directory, and pass this to uglify.\n3. Clean up the temporary directory contents after the build.\nThis meets my needs, but it's work that could be avoided if the uglify task can support it as a feature.\n. ",
    "Arkni": "I have seen something like this before. The problem was the grunt-contrib-concat that use CRLF on windows and that cause JSCS to throw a code style error (Invalid line break at ...). So as a solution, you can set grunt.util.linefeed to LF in your Gruntfile:\njs\ngrunt.util.linefeed = \"\\u000A\";\n. ",
    "endymion1818": "Thanks for the response, yes will give that a go.\n. ",
    "evanhuang8": "It's true that IE8 support will be deprecated, but it should be marked on the documentation. As of now, setting the screwIE8 to false according to this grunt task's docs will not set the appropriate flags in uglifyjs. Since it's not a major version bumped (no version bumped at all in this project), it might catch users out of surprise when builds start to fail.\n. ",
    "mgibeau": "Using node 0.10.29 and npm 1.4.14 I got 2.7.0.\ngrunt-contrib-uglify@0.9.1 node_modules/grunt-contrib-uglify\n\u251c\u2500\u2500 uri-path@0.0.2\n\u251c\u2500\u2500 chalk@1.1.3 (escape-string-regexp@1.0.5, supports-color@2.0.0, ansi-styles@2.2.1, strip-ansi@3.0.1, has-ansi@2.0.0)\n\u251c\u2500\u2500 maxmin@1.1.0 (figures@1.7.0, pretty-bytes@1.0.4, gzip-size@1.0.0)\n\u251c\u2500\u2500 uglify-js@2.7.0 (uglify-to-browserify@1.0.2, async@0.2.10, yargs@3.10.0, source-map@0.5.6)\n\u2514\u2500\u2500 lodash@3.10.1\nAlso, you might want to add support for the --support-ie8 option as described here: https://github.com/mishoo/UglifyJS2/commit/02c638209ee22816b1324ff0c0f47b27db1336af. In my case, turning off the screwIE8 did not work, I had to manually downgrade the uglify-js lib to 2.6.x.\n. ",
    "tHBp": "@XhmikosR Done\n. @XhmikosR Should I reopen a fresh pull request?\n. Squashed the changes into one.\n@XhmikosR Thanks for the tip :)\n. ",
    "rainabba": "Still an upstream issue? Hard to imagine anything not supporting arrow functions these days.. I see the harmony branch now. Thank you. \nFor anyone else looking for ES6 support, install harmony branch with npm install git://github.com/gruntjs/grunt-contrib-uglify#harmony --save-dev. @avdg I did. In fact, I copied from my console to be sure there were no typos. You can see the branch at: https://github.com/gruntjs/grunt-contrib-uglify/tree/harmony. Install harmony branch. See: https://github.com/gruntjs/grunt-contrib-uglify/issues/421#issuecomment-290524699. Install harmony branch. See: https://github.com/gruntjs/grunt-contrib-uglify/issues/421#issuecomment-290524699. ",
    "amineparis": "You can usefunction(x) { //do something }. ",
    "ivianiac": "Please look closer this is not a Harmony / ES6 feature.\n. Sorry for the misunderstanding. Thank you for the clarification.\n. ",
    "skfd": "Upsrteam had no native some option as far as I understood.\n. @avdg I did just that, but that's a clear regression that could cause production issues -- see https://github.com/moment/moment/issues/3283 for example.\n. Changelog does not say anything about this breaking change. It's ok to break thing, but it should be in the change log.\n. I think you should not remove it docs about some. You should document that this option was removed and warn if someone tries to use it as a parameter.\n. Yes, but check out how many people use some option that was quietly removed. You're giving them no warning. All their minified resources would have comments in them. Come on, just give this option back.\n. ",
    "cheshrkat": "If I'm reading this thread correctly (and I may not be) grunt-contrib-uglify has effectively removed the some option? If so it should be removed from the docs..?\n. I'll take that as confirmation the option was removed.\n. My PR just removes documentation of a feature that doesn't exist or work. I think there are deeper issues with the API...\nThe upstream API includes --comments (https://github.com/mishoo/UglifyJS2) which works the way some is documented. That is, it preserves comments with explicit preserve flags.\nBased on my testing, the grunt-contrib-uglify plugin doesn't reproduce that with any configuration of preserveComments; it either strips everything or keeps everything, but no combination kept the preserved comments. Happy to be corrected if I've missed something here, I've just read the docs and not dug through the codebase (I was just trying to use contrib uglify in a project :)).\nMy test cases were:\n/*! Preserved comment */\n/* @preserve preserved comment */\n/* @preserve preserved comment\n * \n */\n/* @license preserved comment\n * \n */\n/* @cc_on preserved comment */\n// Unpreserved comment\nWhat I think should happen assuming the intent is to mirror Uglify2:\n- preserveComments:true should preserve comments explicitly marked for preservation but strip all others.\n- preserveComments:all should keep all comments.\n- preserveComments:false should strip all comments.\nRemoving some makes sense, as it's not in the upstream API either (hence my PR). It just seems that the behaviour of true is wrong.\nHappy to push this over to a new issue people actually agree, but I really don't know what the maintainers have in mind for this feature?\n. This thread is hung up on the wrong point, I've raised https://github.com/gruntjs/grunt-contrib-uglify/issues/430 with details and tests to illustrate what I think is the problem.\n. all should not be replaced with true, it should map to all as it does in the upstream API. The way some worked should be mapped to true. See https://github.com/gruntjs/grunt-contrib-uglify/issues/430 for tests and details.\nThus in the washup - this doc change should stand, but there'd be a doc change to correctly document the options true, false and all.\n. Updated the docs based on further discussion here and elsewhere:\n- Removed all\n- added an example regex to replicate what some used to do and to replicate the inaccessible default behaviour of Uglify's CLI API. Note this is in line with the response in the Uglify project that people should write their own regex.\n. Realised I'd edited the wrong files, will raise a fresh PR.\n. Ahh that explains a lot - didn't realise Uglify had divergent APIs (how annoying!). \n\nThe code generator can keep certain comments in the output. If you pass comments: true it'll keep all comments. You can pass a RegExp to retain only comments whose body matches that regexp. You can pass a function for custom filtering. For example, when --comments is passed with no argument the command-line tool will keep all comments containing \"@license\", \"@preserve\" or \"@cc_on\".\n\nI guess this is why some happened in the first place. It was probably the right solution given the constraints :-/\n. Note the test breaking Travis also fails when I run it on master - not introduced by this change as far as I can tell.\n. @Invis1ble worked when I tested it back in August. More-recent commits here or upstream may have changed something.\n. ",
    "Kelderic": "Oops, yep that is the issue right there. Thanks @XhmikosR. Closing the ticket.\n. ",
    "Invis1ble": "Seems like function usage instead of 'some' doesn't works.\n. ",
    "claudiostevanato": "Mine error, i was copying in a wrong way the files with concat, you can close this issue, thanks by the way\n. ",
    "franciscop": "Ah I see how this could be a problem, no problem then, I close the issue\n. ",
    "GMartigny": "I just reproduce it in v2.2.0\nI can make a PR, but I'm not sure how you want to address this.. In tests, the footer options is prefix with a '\\n'.\nDo you expect user to put '\\n' after banner and before footer ?\nIn that case, this is currently working as designed and this PR is useless.\n. ",
    "Jonlondon": "Same issue.. ",
    "lorenzo-dd": "same here!. ",
    "jsf-clabot": " All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.fehrlich seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.. ",
    "xavadu": "What it means that is a upstream issue?. ",
    "samson-sham": "When using grunt-contrib-uglify@3.3.0\n{ [SyntaxError: Unexpected token name \u00abof\u00bb, expected punc \u00ab;\u00bb\n  at JS_Parse_Error.get (<anonymous>:73:23)\n  at formatError (util.js:802:16)\n  at formatValue (util.js:615:14)\n  at inspect (util.js:328:10)\n  at Object.formatWithOptions (util.js:182:12)\n  at Console.(anonymous function) (console.js:188:15)\n  at Console.log (console.js:199:31)\n  at /Applications/mampstack-7.1.15-0/apache2/htdocs/xxx/node_modules/grunt-contrib-uglify/tasks/uglify.js:144:17\n  at Array.forEach (<anonymous>:null:null)\n  at Object.<anonymous> (/Applications/mampstack-7.1.15-0/apache2/htdocs/xxx/node_modules/grunt-contrib-uglify/tasks/uglify.js:78:16)\n  at Object.<anonymous> (/Applications/mampstack-7.1.15-0/apache2/htdocs/xxx/node_modules/grunt/lib/grunt/task.js:252:15)\n  at Object.thisTask.fn (/Applications/mampstack-7.1.15-0/apache2/htdocs/xxx/node_modules/grunt/lib/grunt/task.js:70:16)\n  at Object.<anonymous> (/Applications/mampstack-7.1.15-0/apache2/htdocs/xxx/node_modules/grunt/lib/util/task.js:294:30)\n  at Task.runTaskFn (/Applications/mampstack-7.1.15-0/apache2/htdocs/xxx/node_modules/grunt/lib/util/task.js:244:24)\n  at Task.<anonymous> (/Applications/mampstack-7.1.15-0/apache2/htdocs/xxx/node_modules/grunt/lib/util/task.js:293:12)\n  at /Applications/mampstack-7.1.15-0/apache2/htdocs/xxx/node_modules/grunt/lib/util/task.js:220:11\n  at process._tickCallback (internal/process/next_tick.js:61:11)\n]\nStill upstream issue?. @XhmikosR \nOh, since I followed the GitHub link from grunt-contrib-uglify-es NPM to here, hence I thought 3.3.0 has updated to use ES6.\nNow I see the branch harmony. Solved. Thanks for the reply.. ",
    "stegmanh": "Hey encountered this too. Not sure the root cause/exactly how this fixed it but once I fixed this to version 0.9.1 and fixed my package.json's reference to uglify-js to 2.4.23 it seemed to resolve the issue. ",
    "tristanpemble": "What version of UglifyJS did you pull in? We ran into issues with v2.8.8 that was released last night (around the time you posted this issue), and downgrading to v2.8.7 fixed it. I think this issue is related: https://github.com/mishoo/UglifyJS2/issues/1573. ",
    "Wohlie": "Hi,\nsee https://github.com/mishoo/UglifyJS2/issues/1605 for more information.\nI think this issue here can be closed.. ",
    "chforster": "I guess the problem has been answered with https://github.com/gruntjs/grunt-contrib-uglify/issues/458. ",
    "pvdz": "Maybe it would be handy to have an option object that is passed on straight to uglifyjs? That way you don't have to update this package every time there's a new feature in uglify. Or if it exists please document it because I didn't see such option described :). ",
    "conceptualspace": "+1\nmac os 10.12.3\nnode v7.7.3\noptions: {\n    banner: \"\\\\TEST\",\n    dead_code: true,\n    unused: true,\n    loops: true,\n    conditionals: true,\n    booleans: true,\n    drop_console: true,\n    screwIE8: true,\n    sourceMap: true,\n    sourceMapIn: function(path) {\n        return path+\".map\";\n    }\n}. just to be explicit: the banner string does not appear in the uglified js. confirmed working in 2.1.0 with same options. maybe something in uglify 2.8. \ud83d\udc4d \nconfirmed working in 2.2.1. thanks for the super prompt fix!. ",
    "pflannery": "@XhmikosR is it not possible that grunt-contrib-uglify allows us to switch the require call between uglify-js and uglify-es?\nThey apparently have the same API so it would only be a matter of adding \"uglify-es\": \"mishoo/UglifyJS2#harmony-v3.0.14\" to the package.json and an extra option to choose between es5(default) or es2015.\n . @XhmikosR or the other alternative could be to have grunt-contrib-uglify@next which just uses uglify-es instead. @XhmikosR ignore the last comments now :).  I've discovered that there is a branch here that does already support the es2015 version.\nSo I'm now using https://github.com/gruntjs/grunt-contrib-uglify/tree/harmony\nand this is my package dep entry\njson\n\"grunt-contrib-uglify\": \"gruntjs/grunt-contrib-uglify#harmony\"\n@alinleonard does that solve the problem for you?. ",
    "slig": "FWIW, Uglify doesn't not support the newer ES6 syntax. See https://github.com/mishoo/UglifyJS2/issues/448. ",
    "dmethvin": "@vladikoff Hmmm, not sure why that link is broken but it's supposed to point to https://js.foundation/pdf/ip-policy.pdf which has also gone missing. I'll page @kborchers who can probably clear things up. @alexlamsl thanks for finding this! \n. ",
    "zeuscronos": "thanks Alex!. ",
    "burakkilic": "After upgrading grunt-contrib-uglify, problem solved. . ",
    "sblantipodi": "I solved simply by switching the order \nsrc: [                     \n                        '**/*.html',\n                        '!**/bower_components/**'\n ]\nit seems that exclusions must be at the end. ",
    "gsivaprabu": "Hi @alexlamsl  i am using that method but not removed any logs in  my souce.min.js file can u overwrite my Gruntfile where i added properly\nClone this gist. ",
    "sohansoni": "Thanks, Does uglify-es have backward compatibility for ES5 code as well ?. How do I get the harmony branch , because when I do npm install grunt-contrib-uglify --save-dev its giving me uglify-js instead of uglify-es ?. Got it I did \nnpm install git://github.com/gruntjs/grunt-contrib-uglify.git#harmony. ",
    "chsyzxcv": "hi sohansoni,\ndo you find out how to install grunt-contrib-uglify harmony branch ? i am having the same issue as well... hi alexlamsl ,\nThank you so much for your reply. how can we install harmony branch by using npm?\nnpm install grunt-contrib-uglify --save-dev. hi alexlamsl,\ni had successfully install harmony version . It's work perfectly. Thank you so much\nnpm install git://github.com/gruntjs/grunt-contrib-uglify.git#harmony. ",
    "phoenixdev-kl": "Found it on https://stackoverflow.com/questions/44848273/how-to-integrate-uglify-es-in-grunt\nnpm install git://github.com/gruntjs/grunt-contrib-uglify.git#harmony --save-dev\nIf you are behind a firewall like me, please also notice https://github.com/npm/npm/issues/5257. The following worked fine for me:\ngit config --global url.\"https://github.com/\".insteadOf git@github.com:\ngit config --global url.\"https://\".insteadOf git://. ",
    "liquidvisual": "Thanks for this! Was searching for so long, I thought I was never going to find the answer.. I also experienced various errors with everything breaking suddenly, the following fixed it for me:\npackage.json\n\"grunt-contrib-uglify-es\": \"github:gruntjs/grunt-contrib-uglify#harmony\",\ngrunt.js\ngrunt.loadNpmTasks('grunt-contrib-uglify-es');\n.babelrc\n{\n    sourceType: 'script',\n      presets: [\n        ['env', {modules: false}],\n      ]\n}. ",
    "Kerwood": "When is harmony branch going to be master and published to npm?\nIts nice that we have the opportunity to download and use uglify-es manually, but it gives some challenges if your using a automated pipeline.. . ",
    "samir-mahendra": "I have a weird issue with the \"harmony\" branch as of 3 days ago.  Two different functions are getting uglified into the exact same method name, which causes my code to break.\nI found that this older commit from the \"harmony\" branch gets me back to where I was before:\nnpm install git://github.com/gruntjs/grunt-contrib-uglify.git#c2ccee1b61a585c5f4fca00da8f79cc1db37048b --save-dev\nThere is probably a more recent commit, but this worked, so I am using it for now.\nIf I have time, I'll try to put together a minimum reproducible test case.  I'm seeing it in an Angular JS project that uses this dependency: https://github.com/chieffancypants/angular-hotkeys.  At first I thought it was due to a change to angular-hotkeys, but then realized it only happened with the uglified code.\n. I need this as well.\nI was using the \"#harmony\" branch in my npm, but due to some recent bug, 2 separate functions are getting uglified with the same signature, and thus breaking my release.\nI cannot use a hastag for some reason in my environment.  I am running in Docker (Ubuntu) with npm 5.5.1 and git 2.7.4, and my \"npm install\" fails with:\nnpm sill fetchPackageMetaData error for grunt-contrib-uglify@github:gruntjs/grunt-contrib-uglify#9315efca3bf977a35ce2f29ee34b00b14dafa171 Command failed: /usr/bin/git checkout 9315efca3bf977a35ce2f29ee34b00b14dafa171\nnpm sill fetchPackageMetaData fatal: reference is not a tree: 9315efca3bf977a35ce2f29ee34b00b14dafa171\nnpm sill fetchPackageMetaData \nnpm verb stack Error: Command failed: /usr/bin/git checkout 9315efca3bf977a35ce2f29ee34b00b14dafa171\nnpm verb stack fatal: reference is not a tree: 9315efca3bf977a35ce2f29ee34b00b14dafa171\nnpm verb stack \nnpm verb stack     at ChildProcess.exithandler (child_process.js:275:12)\nnpm verb stack     at emitTwo (events.js:126:13)\nnpm verb stack     at ChildProcess.emit (events.js:214:7)\nnpm verb stack     at maybeClose (internal/child_process.js:925:16)\nnpm verb stack     at Socket.stream.socket.on (internal/child_process.js:346:11)\nnpm verb stack     at emitOne (events.js:116:13)\nnpm verb stack     at Socket.emit (events.js:211:7)\nnpm verb stack     at Pipe._handle.close [as _onclose] (net.js:554:12)\n. ",
    "induratized": "Use - https://www.npmjs.com/package/terser\njavascript\nnpm install terser\nIt's APIs are compatible with UglifyJS@3 and supports ES6+. ",
    "mkappelhof": "Works perfect! Thx. ",
    "FromStoneage": "can we get this change to master? for those that rely on ES6 support every time the master branch updates the harmony's rebase caused shrinkwrap unable to find the dependency and we have to fix the build.\nWhat's preventing this feature to be merged to master?. Thanks, guys! \nturns out we were pulling a specific revision of this dependency in order to support ES6 syntax. Looks like that commit is removed.\n\"grunt-contrib-uglify\": \"git://github.com/gruntjs/grunt-contrib-uglify.git#c2ccee1\", \nupdated to use the latest stable release resolved the issue.\n. ",
    "DamodarSojka": "Is there a way to notify the plugin about it? Can you think of any workaround? I am quite sure I am not the only one having this use case so having a solid approach would increase the usability of the plugin.. ",
    "akgoyal1987": "@XhmikosR , it may be upstream issue, I didn't check, I accept that this is my fault. \nas I found this when I was uglifying my code using grunt-contrib-uglify, I reported it here. \nI will check this with uglify-js.\nThanks.. ",
    "Qoraiche": "Install harmony branch in dev dependencies\nnpm install git://github.com/gruntjs/grunt-contrib-uglify.git#harmony --save-dev. ",
    "AustinMCrane": "merge pweas? @XhmikosR . ",
    "jlobello": "I looked at some of your unit tests & fixed my issue.  I was adding this to the global uglify options, but that didn't work.  I had to add it to the file portion...\n    uglify: {\n        options: {\n            compress: {\n                unused: false\n            },\n            preserveComments: \"some\",\n            sourceMap: function(path) {\n              return path + \".map\";\n            },\n            beautify: {\n                ascii_only: true\n            }\n        },\n        dynamic_mappings: {\n            // Grunt will search for \"**/*.js\" under \"lib/\" when the \"uglify\" task\n            // runs and build the appropriate src-dest file mappings then, so you\n            // don't need to update the Gruntfile when files are added or removed.\n            files: [{\n                expand: true, // Enable dynamic expansion.\n                cwd: \"<%= dir.main %>/static/\", // Src matches are relative to this path.\n                src: [\"IccControls/**/*.js\",\n                    \"IccControls/**/*.JS\",\n                    \"js/**/*.js\",\n                    \"js/**/*.JS\",\n                    \"sframe/*.js\",\n                    \"squid/**/*.js\",\n                    \"!sframe/sframeCommonLogon.js\"\n                ], // Actual pattern(s) to match.\n                dest: \"<%= dir.dist %>/static/\", // Destination path prefix.\n                ext: \"\", // Dest filepaths will have this extension.\n            }, ],\n            options: {\n              sourceMap: {\n               includeSources: true\n             }\n           },\n        },.\n",
    "Nodarii": "ok, got it. thank you. ",
    "frekele": "or a version for example: \n\nv3.2.1-harmony\nv3.2.1-es\nharmony-v3.2.1\nes-v3.2.1. for now I'm using it like this:\n\n{\n    \"devDependencies\": {\n        \"grunt-contrib-uglify\": \"github:gruntjs/grunt-contrib-uglify#harmony\"\n    }\n}\nbut it would be cool as the @gkatsev said: \n{\n    \"devDependencies\": {\n        \"grunt-contrib-uglify-harmony\": \"^3.2.1\"\n    }\n}\nor\n{\n    \"devDependencies\": {\n        \"grunt-contrib-uglify\": \"^harmony-v3.2.1\"\n    }\n}\nThank you.. My concern is exactly that, make sure I use a stable version.\nGreat tip @gkatsev , I will do it.\n{\n    \"devDependencies\": {\n        \"grunt-contrib-uglify\": \"github:gruntjs/grunt-contrib-uglify#9315efca3bf977a35ce2f29ee34b00b14dafa171 \"\n    }\n}\nThank you.. Hi @alexlamsl and @XhmikosR  \nRelease the grunt-contrib-uglify with version: harmony-v3.3.2? Please.\n. @davideschiera \nuse: grunt-contrib-uglify-es\n{\n    \"devDependencies\": {\n        \"grunt-contrib-uglify-es\": \"git+https://github.com/gruntjs/grunt-contrib-uglify.git#harmony\",\n    }\n}\nor\n{\n    \"devDependencies\": {\n        \"grunt-contrib-uglify-es\": \"git+https://github.com/gruntjs/grunt-contrib-uglify.git#ccb95a70cad6a4e9e902d3bd5d0e38a4de09a1e1\",\n    }\n}\n. ",
    "gkatsev": "I've used gruntjs/grunt-contrib-uglify#9315efca3bf977a35ce2f29ee34b00b14dafa171 to make sure that branch doesn't change from under me.\nAn npm tag would work too.. This treeish should work: ccb95a70cad6a4e9e902d3bd5d0e38a4de09a1e1. Yup, the new branch has renamed it grunt-contrib-uglify-es so you'll need to load it that way. I don't think the old commit had renamed it. https://www.npmjs.com/package/load-grunt-tasks would still be useful here since the task is still called uglify and it would've just loaded the correct new one.. To clarify what I meant is that the package name in the #harmony branch (the ccb95a7 treeish) was renamed grunt-contrib-uglify-es: https://github.com/gruntjs/grunt-contrib-uglify/commit/ccb95a70cad6a4e9e902d3bd5d0e38a4de09a1e1#diff-b9cfc7f2cdf78a7f4b91a753d10865a2R2. Thanks @vladikoff!. ",
    "oychao": "Hi @XhmikosR @alexlamsl \nWhy not publish the harmony branch to npm.. ",
    "nyurik": "I also recently began experiencing uglification issues, and unable to build newer versions. Please publish a stable trackable version. gruntjs/grunt-contrib-uglify#9315efca3bf977a35ce2f29ee34b00b14dafa171 does not work -- npm fails with reference is not a tree.  Thanks!. @XhmikosR I tried github:gruntjs/grunt-contrib-uglify#harmony and it npm installs fine, but the resulting code no longer runs in the browser.. ",
    "davideschiera": "I tried what suggested by @gkatsev, but unfortunately didn't work on my side (see below for error log).\nI'm currently working around the issue by using a fork of this repository (https://github.com/davideschiera/grunt-contrib-uglify/tree/master) where master has been replaced by a branch created from https://github.com/gruntjs/grunt-contrib-uglify/commit/9315efca3bf977a35ce2f29ee34b00b14dafa171.\nIs there a better way to refer to harmony branch on the official repository?\nThanks!\n```\nnpm ERR! git rev-list -n1 9315efca3bf977a35ce2f29ee34b00b14dafa171: fatal: bad object 9315efca3bf977a35ce2f29ee34b00b14dafa171\nnpm ERR! git rev-list -n1 9315efca3bf977a35ce2f29ee34b00b14dafa171: \nnpm ERR! git rev-list -n1 9315efca3bf977a35ce2f29ee34b00b14dafa171: fatal: bad object 9315efca3bf977a35ce2f29ee34b00b14dafa171\nnpm ERR! git rev-list -n1 9315efca3bf977a35ce2f29ee34b00b14dafa171: \nnpm ERR! git clone --template=/home/user/.npm/_git-remotes/_templates --mirror git@github.com:gruntjs/grunt-contrib-uglify.git /home/user/.npm/_git-remotes/git-github-com-gruntjs-grunt-contrib-uglify-git-9315efca3bf977a35ce2f29ee34b00b14dafa171-ddaa8034: Cloning into bare repository '/home/user/.npm/_git-remotes/git-github-com-gruntjs-grunt-contrib-uglify-git-9315efca3bf977a35ce2f29ee34b00b14dafa171-ddaa8034'...\nnpm ERR! git clone --template=/home/user/.npm/_git-remotes/_templates --mirror git@github.com:gruntjs/grunt-contrib-uglify.git /home/user/.npm/_git-remotes/git-github-com-gruntjs-grunt-contrib-uglify-git-9315efca3bf977a35ce2f29ee34b00b14dafa171-ddaa8034: Permission denied (publickey).\nnpm ERR! git clone --template=/home/user/.npm/_git-remotes/_templates --mirror git@github.com:gruntjs/grunt-contrib-uglify.git /home/user/.npm/_git-remotes/git-github-com-gruntjs-grunt-contrib-uglify-git-9315efca3bf977a35ce2f29ee34b00b14dafa171-ddaa8034: fatal: Could not read from remote repository.\nnpm ERR! git clone --template=/home/user/.npm/_git-remotes/_templates --mirror git@github.com:gruntjs/grunt-contrib-uglify.git /home/user/.npm/_git-remotes/git-github-com-gruntjs-grunt-contrib-uglify-git-9315efca3bf977a35ce2f29ee34b00b14dafa171-ddaa8034: \nnpm ERR! git clone --template=/home/user/.npm/_git-remotes/_templates --mirror git@github.com:gruntjs/grunt-contrib-uglify.git /home/user/.npm/_git-remotes/git-github-com-gruntjs-grunt-contrib-uglify-git-9315efca3bf977a35ce2f29ee34b00b14dafa171-ddaa8034: Please make sure you have the correct access rights\nnpm ERR! git clone --template=/home/user/.npm/_git-remotes/_templates --mirror git@github.com:gruntjs/grunt-contrib-uglify.git /home/user/.npm/_git-remotes/git-github-com-gruntjs-grunt-contrib-uglify-git-9315efca3bf977a35ce2f29ee34b00b14dafa171-ddaa8034: and the repository exists.\nnpm ERR! Linux 4.9.51-10.52.amzn1.x86_64\nnpm ERR! argv \"/home/user/.nvm/v6.2.2/bin/node\" \"/home/user/.nvm/v6.2.2/bin/npm\" \"install\"\nnpm ERR! node v6.2.2\nnpm ERR! npm  v3.9.5\nnpm ERR! code 128\nnpm ERR! Command failed: git clone --template=/home/user/.npm/_git-remotes/_templates --mirror git@github.com:gruntjs/grunt-contrib-uglify.git /home/user/.npm/_git-remotes/git-github-com-gruntjs-grunt-contrib-uglify-git-9315efca3bf977a35ce2f29ee34b00b14dafa171-ddaa8034\nnpm ERR! Cloning into bare repository '/home/user/.npm/_git-remotes/git-github-com-gruntjs-grunt-contrib-uglify-git-9315efca3bf977a35ce2f29ee34b00b14dafa171-ddaa8034'...\nnpm ERR! Permission denied (publickey).\nnpm ERR! fatal: Could not read from remote repository.\n```. Sounds good! And thanks a lot for taking care of this ;-). @frekele thanks for the suggestion!\nTried\n\"devDependencies\": {\n    ...\n    \"grunt-contrib-uglify-es\": \"git+https://github.com/gruntjs/grunt-contrib-uglify.git#ccb95a70cad6a4e9e902d3bd5d0e38a4de09a1e1\",\nbut got\njit-grunt: Plugin for the \"uglify\" task not found.\nIf you have installed the plugin already, please setting the static mapping.\nSee https://github.com/shootaroo/jit-grunt#static-mappings\n(node v8.9.3, npm v5.5.1)\n:-/. ",
    "samueleastdev": "Manage to get this working by following this link.\nhttps://stackoverflow.com/questions/44848273/how-to-integrate-uglify-es-in-grunt. ",
    "LeviRosol": "is there a functional commit that can be used while waiting for the npm update? I had been using #harmony w/o issue for months, and just now started failing. I've tried to look for older commits but can't seem to find one that works.. @gkatsev I had tried that, also assuming it would be the ideal commit, but didn't have any luck. To clarify a few things;\nHere's my package.json entry:\n\"grunt-contrib-uglify\": \"git://github.com/gruntjs/grunt-contrib-uglify.git#ccb95a70cad6a4e9e902d3bd5d0e38a4de09a1e1\",\nThe error i get when running:\n{ SyntaxError: Unexpected token: keyword (const)\nand the offending line of code:\nconst string = require('string')\nThis error is what brought me to use the #harmony branch, but now it's as if it's magic is completely gone.\nAm I missing something silly or are others having this same issue?. I don't think my issue is there though.\nUp until the latest release of grunt-contrib-uglify a few days ago, things were working as expected. \nAm I missing something?. Adding to the comment @frekele made, in addition to using either of his suggested package.json entries, you also need to update your grunt file to use uglify-es like so:\ngrunt.loadNpmTasks('grunt-contrib-uglify-es');\nPretty obvious oversight on my part, so posting here in hopes it saves someone else some time.. ",
    "Pamblam": "two months.. it would take me 5 minutes to fork this and publish it on my own npm account.. why hasn't this been done yet... ",
    "sagarkbhatt": "Sorry,my bad I raised issue in wrong repo.. ",
    "JeffWinder": "There was a reference in my package-lock.json to the es module which caused this. Now installing fine.. ",
    "agnaveen": "any help to fix this issue, I am facing the same issue....... ",
    "stefangabos": "Nevermind. It has to be\njavascript\noutput: {\n    ie8: true\n}\nThanks!. ",
    "jaller94": "I just noticed that this might not be the repo for grunt-contrib-uglify-es.\nThe page of it links to this repo:\nhttps://www.npmjs.com/package/grunt-contrib-uglify-es. ",
    "alpipego": "I've updated the files in docs with these changes.. ",
    "MareoRaft": "P.S.  I've tried using the harmony branch but run into a different error there.. To answer my own questions:\nThe harmony branch (grunt-contrib-uglify-es) worked for me (supports JS 6 and uglifies without error).\nI don't know if version 4.0.0 supports JS 6 or not, but I'm airing on the side of not.\nTo migrate from grunt-contrib-uglify to grunt-contrib-uglify-es successfully, I did the following:\n\n\nnpm uninstall grunt-contrib-uglify and npm uninstall --global grunt-contrib-uglify to make sure that was no longer on my system.  Then npm install --save-dev grunt-contrib-uglify-es to install the harmony version.\n\n\nChange grunt.loadNpmTasks('grunt-contrib-uglify') to grunt.loadNpmTasks('grunt-contrib-uglify-es') in my Gruntfile.js.\n\n\nNO other changes needed.\n. "
}