{
    "SBoudrias": "Done in 1672f22\n. Done in 1672f22\n. That's fixes for questions. Not sure I see the point for choices, so that is out for now.\n. @mchlltt Multiline support in choices should work fine https://github.com/SBoudrias/Inquirer.js/blob/master/examples/long-list.js#L11\nBut there's a good chance having bigger than ~2 lines choices can trip the UI badly. The pagination is pretty dumb ATM. You can see this PR trying to making it better #492 . Finally, nope. keypress are only available on the stdin and I don't feel listening to multiple events sources in each prompt ATM.\n. Fixed on master. Please test and let me know how it goes.\n. Partial fix, but there's an issue with the readline counting the ANSI characters from the prompt in the length.\nThe last commit also fix issue with using up and down arrow and this resulting in navigating the history.\n. Fixed!\n. Work started on the wip branch: https://github.com/SBoudrias/Inquirer.js/compare/wip\n. first implementation in wip branch - closing\n. Wow, really nice suggestions! I think we'd go for that. Plus it's in sync with some of the visual improvement asked over on the Yeoman-generator repo.\nI'll keep you posted on the advancement.\n. @robwierzbowski Can you give a try to the lastest master?\nI implemented your suggestion. And also, now the lists type prompts fold once they're answered letting the answer easier to review.\n. I fixed some of the remaining issue here. Could someone give it a try on the lastest master?\nI was wondering if it could be nice to have the prefix [?] changed depending on the state of the question:\n- [?] Question mode\n- [!] Error mode (the input didn't pass validation)\n- [\u221a] Answer is saved\n. I removed the square brackets [ ] from all prompts (exception of the checkbox prompt on Windows and the question line prefix). Now list prompt simply implement a pointer like the checkbox. I think this better convey the action being done for this prompt (and there's less noise). So, thanks for the suggestion :)\nShould be almost ready for a 0.2!\n. Thanks, happy to reduce your OS workload :)\nI'm closing this issue as 0.2 is getting out in the next minutes. Feel free to reopen issue for any other UI improvements; these comments and suggestions are incredibly usefuls.\n. Oh damn, we crossed efforts :P I fixed that on 0606ad5a70555b5cd2ea0616174826731db59361 when I manually merged your previous commit.\n. Yeah, I also added default value capitalized in the prompt.\n. Ok, that's on lastest master! Please let me know how this works for you!\n. @robwierzbowski @stephenplusplus @sindresorhus\n. @stephenplusplus suggestion make sense, if there's no suffix in the prompt already, we can add a default one.\nI think it'll be a pretty edge case if a user don't want to use any prefix. (And I think this edge case would be better served with #18 functionnality)\n. @passy I'm not sure I follow here, if you don't enter a message, Inquirer print [?] undefined:\nI forced default parameter with errors messages on the lastest master to prevent weird issue and error messages. Although, I'd like to hear back from you on this bug as I believe you made a typo?\n. Now suffix only happens if the last character of the message parameter is a letter.\nI tough about just removing the suffix; but that was problematic as the input could be directly glued to the message (could always add a space, but that's just throwing the ball around). So there's no big logic, but there's a safe fallback if the message haven't been suffixed by the user. Anyhow, user will have to checkout their prompt logic and adjust somehow.\nI'll release this change with next 0.1.10 - not sure when, but shouldn't be too far off.\n. Last master fixed the issue on Ubuntu, I'd like feedback just to make sure it's working for everyone now.\n. That's related to #22 - I'll close this one, follow the bug over there.\n. Can you make sure you're running release 0.1.5?\nI can't reproduce and there's unit test covering this: https://github.com/SBoudrias/Inquirer.js/blob/master/test/specs/prompts/confirm.js#L44-L59\n. Hey, just tested on terminal.app and iterm and everything looked fine. Is it still occuring on your side?\n. Does it just flicker a second or the content is gone until you press an arrow key again?\n. Haven't had a lot of feedback from anyone on this issue, so I'll close.\n. It'll be new prompt as I'd like to get each prompt public interface very simple. It wouldn't be as clear if list could return the specified value or an array of values.\n. Ok, I have a working multi-select prompt on the wip branch called Checkbox.\nCould you give it a try and maybe some visual feedback on the implementation? I'm not sure about the pointer marker... Looks somehow like this ATM:\n``` prompt\n[?] Select toppings:\n    [ ] Peperonni\n    [\u2714] Cheese\n    [ ] Pineapple\n\n[\u2714] Mushroom\n    [ ] Bacon\n```\n. I really like those two \u2b21\u2b22\n\nI wonder however how good the support is (in fonts), and if support is lacking, will the prompt fallback to a default font for these char, etc?\nThere's two concern I try to keep in mind with Inquirer: it must works without color, it must work if unicode char fails to display (e.g.: \u20ff).\nHaving a single char work ok:\n[?] List\n    choice A\n  \u20ff choice B\n    choice C\nBut having single unicode in the case it is checked and not checked could be problematic:\n[?] List\n  \u20ff choice A\n  \u20ff choice B\n  \u20ff choice C\nSo, I'd really like to check the implications and the risk on mac and unix system (windows will use simple letter - for now at least).\n. Reworked the prompt with your suggestion @sindresorhus. I've been with the \u2b21\u2b22 char for now. If it causes issue for someone on linux or with a funky mac config, I'd think about changing - but unicode support seems pretty constant on these platform so I guess we can live with it for now :)\nStill pretty ugly on windows - but I don't think much can be done there.\n. In fact I'll leave open a little longer, might want to consider consistency in the look and feel between different prompts.\n. Updated list prompt to drop the checked char and only use a pointer instead. Feels more consistent for the look and feel.\n. Wow, I used charm extensively when starting Inquirer and never realize it had an API for the cursor visibility. Finally I got rid of charm because it had issue with memory management, but I'll check to replicate this in.\n. Ok, fixed in 0.1.6 (Only working on unix)\n. Nice catch, seems like Unix don't allocate new line when you move your cursor over, so that was breaking when the line just under the prompt haven't been touched (like in the case of a series of input).\nCan you confirm it works on your side too? thanks!\n. We tough about using checkbox on #14 \nMy only concerns is to support a large set of fonts and Windows - which was a given with the X. I know Mocha uses a check in their test who's working on PowerShell.\nWe'll need some support test for that - or make sure we can have a clean fallback.\n. To keep up with what I found, I'll post here.\nchcp in Windows returns currents language.\nhttp://stackoverflow.com/questions/1259084/what-encoding-code-page-is-cmd-exe-using\n. Added a check so unix system use the symbols, and windows will fallback to the X. May revisit later, but I really got some weird output on windows so for now I don't want to overthink this...\nPlanned to be release with 0.2 who'll add some new prompts - work is in wip branch.\n. @sindresorhus Oh yeah, good idea! Will do!\n. @mikedevita no, that's not a feature at the moment. Are you running somewhere where unicode is not supported?\n. In the doc, default ain't listed in the supported arguments for list: https://github.com/SBoudrias/Inquirer.js#list----type-list- - Although, maybe the doc wasn't clear, and I'd like to hear more about your impression on this to improve it.\nAllowing default value in list/rawlist would be rather trivial. I wasn't sure it was really usefull though as anyone could simply put their default as the first on a list. Is there a particular reason you wanted the x choice to be the default and not put it as first?\n(I'll add this to todo)\n. Let me know how it goes on lastest master!\n. Crashes are fixed in 0.1.8\n. Hum, I see. Although, I don't think validate is the right method to handle such cases. In the end what you want is to exclude some choices depending on the previous answers.\nMaybe I could allow choices to be a function returning an array of choices, so this way you could programmatically exclude choices.\n. ATM to prevent crashing your app, what you can do is calling inquirer.prompt multiple time, and between each you check the answers received to determine the choices you'll allow.\n. Ok, in the wip branch, choices can now be a function which receive the current answers as first parameter and is expected to return a choices array. Based on the answers, if you'd like to skip the prompt altogether, use the when function. This should be release on 0.2.0.\nPlease give it a try and tell me how it works for you!\n. Allright!! Thanks for the feedback!\n. Looks good thanks!\n. Will have to recheck animated gif one day.\n. Hey, thanks for the PR. I'll test it today.\nMeanwhile, could you fix the linting errors and make sure your PR follow the projet style guide (guidelines are over idiomatic.js).\nLast thing, could you please reopen this PR on the wip branch?\nThanks!\n. reopened on #37\n. Hi, thanks a lot for the work.\nThe only problem is that the PR is a little dirty. First of all, could you cherry-pick your commit over a clean wip branch so you won't include the master branch un-merge commits? And after that, I'd appreciate if you could squash your commits together (so the fixes commits don't showup).\nIf you're not sure about how to proceed, feel free to ping me on #yeoman IRC channel - I'm sboudrias over there.\n. If this is implemented, my main concern is that it shouldn't add any overhead to the interface. I don't think it should have any visual tips (You know it exist or you don't).\nThis is a nice to have, but really ain't any core feature or any extremely useful one. So it should be discrete.\n. Ok, it's been added to the lastest wip without any visual or interface clubbering.\n. Thanks for the report! Solution ain't super clean, so it'll probably be refactor, but it'll work for now.\n. What I can think of would be to manually limit the number of items shown, and then programmatically imitate the scroll by pushing and poping rows from the lists depending on the direction the user goes with their arrow keys.\n. I added a first version of the pagination option to the list and checkbox prompt. Right now it is manually triggered by the developper and the pagination length is hardcoded to 7 elements.\n```\n[?] What's your favorite letter?\n  B\n  C\n  D\n\nE\n  F\n  G\n  H\n```\n\nAnd you go down a little more\n```\n[?] What's your favorite letter?\n  E\n  F\n  G\n\nH\n  I\n  J\n  K\n```\n\nYou can test both prompt by running the long-list.js examples on WIP branch.\nI'll probably check to automate the pagination trigger for long list. Although I'm not sure about basing the number of showed element on the stdout rows as it may get big... Feedback welcome on this last point!\n. Removed the user defined options and simply automatically fall on the paginated list if the choices array have more than 9 items (to match 1-9 shortcut) - separators included.\n. Merged in wip!\nThanks a lot! I added realtime masking and the tests on 6031d8b502d083ac49a8374d061ccfdc90fded66\n. BTW, seems like your git credentials ain't linked to your github account. You need to link the user.email in the git config to the emails of your github account if you want the commit to be tracked back to you.\n. Kinda bad because I can't find any checkboxish unicode character working with consolas and lucida console fonts...\nIf anyone has a suggestion, that'll be great!\n. Hi, this bug was present in 0.1.10 and 0.2.0 -- 0.2.1 and 0.1.12 fix this issue.\nUsing 0.1.12, I cannot reproduce it (both on node 0.8 and 0.10). Can you make sure the version of Inquirer you used on your side for the test is correct?\n. Which OS are you using? Windows, Linux, mac?\n. Hi, just tested it out and it worked great for me on windows 7 (with the default command line).\nI'll close this issue as I can't reproduce on any environnement and as many people had confirmed the 0.1.12 release fixed this bug.\nFeel free to add more detail and dig your bug deeper; I'll reopen if I have solid proof this bug happen on specific configurations.\n. Hi, Inquirer prompt offer such a possibility through the when function. https://github.com/SBoudrias/Inquirer.js#question\nFor example:\n``` javascript\ninquirer.prompt([{\n  name: \"food\",\n  type: \"list\",\n  message: \"What do you want\",\n  choices: [ \"Calzone\", \"Pizza\", \"Sub\" ]\n}, {\n  name: \"toppings\",\n  type: \"list\",\n  when: function( answers ) {\n    // Only run if user answered Pizza to the first prompt\n    return answers.food === \"Pizza\";\n  },\n  // etc\n}]);\n```\nDoes it work for your use case?\n. That's because I haven't feed every required field in my example (so I put // etc... to be filled with your logic).\nI see what you mean, but this is 100% possible with the current when implementation. It may not feel like the cleanest way to you, but it helps maintaining long prompt array without entering a nested hell. Plus, it keeps the Inquirer API surface minimal (easier to read and understand).\nTry it out with when, it'll work out. If you need help down the road, just wave an arm over here and I'll be happy to land a hand (You may also find me on #yeoman on IRC under the pseudo sboudrias).\n. > Is it currently possible to disable/pause the user input until a check is performed (e.g. the async version check example in the yeoman link above)?\nThe best way is to nest calls to Inquirer. So you make your first call, get user feedback and handle it in the callback. If you then need to make async actions, do them (display a loader with some other Inquirer UI who're not the prompt UI), once its down, prompt the user with a new prompt session.\nBasically, the use case you ask for won't be implemented as programmatic re-rendering and I don't think it need another API. The current way to do it seems reasonable to me.\n. Hum, we never really implemented this in core. I think it's fair to close it as there's no plan to make this work right now - and I don't think there's an easy win here.\nMaybe if we ever get done with the refactor idea then it'd be a good time to revisit.. Thanks a lot! This make total sense\n. Using the cmd? I can't reproduce here on Win 7\n. Thanks for following this one up @danielchatfield!\n. Hey, could you squash these togheter? (git rebase -i)\n. Merged, thanks\n. LGTM\n. Hey, haven't planned much more work on 0.2.x series, and this pull was hanging on - so I just release 0.2.4 containing your addition.\nThanks again :+1: \n. The rl was paused initially, but this created issue when the prompt was nested (like the bug you bring up on win8).\nThe relevant commit: https://github.com/SBoudrias/Inquirer.js/commit/1a7bc41fb4719e77a600ec8b5b3954e094ccd7d4\nAnd I think this was the issue bringing this fix up: https://github.com/yeoman/yo/issues/51\nNone the less, I'll test your current patch and see if the same issue happen again.\n. > If we do need to use close then another way of fixing it is calling pause before close.\nIf this works, let fix it this way.\n. Thank you!\n. Presently, I prefer { separator: \"---------------\" }.\nAnother option I could think of was to join choices group in sub-arrays, e.g.:\njavascript\nchoices: [\n    [\n        \"choice A\",\n        \"choice B\"\n    ], [\n        \"foo\"\n    ]\n]\nThat syntax wouldn't allow custom text and stuff to fill the space, but it'd be easier to implement and could enforce consistency (which may not be super useful...) - So all in all, I think @danielchatfield 2nd option is the best ATM.\n. Ok, so I think I got it!\nWhat I don't like from option 2 is that it infer a \"type\" based on the presence or absence of some values in an object. I usually don't like infering as it can only brings problem eventually.\nSo, I think that'll be perfect:\njavascript\nchoices: [\n  \"choice A\",\n  new Inquirer.Separator(\"-----------------\"),\n  \"choice B\"\n]\nIt feels like the Handlebars.SafeString constructor to notify the engine we send escaped data. And I think some parts of how Inquirer handle some objects internally could be rewritten in similar fashion.\nWhat do you think?\n. I just pushed Separators support on the WIP branch. It'll be release with the 0.3 tag (see roadmap on #55).\n. Thank you!\n. @danielchatfield Hey, would you mind double checking everything works fine? I've tested OSx (terminal and iTerm) and Windows 7 (powershell and cmd.exe), I'll look on Ubuntu later on.\nLet me know how you feel about the pagination interface!\nShould be ready for 0.3 release very soon!\n. Renamed the file. About the spacing, I'm not sure I want to take a decision right now as the padding to add would be different depending on your system (windows prompts in ASCII is longer) and that I'm not sure I want to manage programmatically the spacing after a line return in different context. This may be something to consider for 0.4.\nAnyway, merging and publishing 0.3. Thanks for the help!\n. Hey, can you tell me which version of Inquirer you're using? And try the lastest version on NPM (0.2.4)\n. Could you try on a stable Node.js release (0.8 or 0.10)? I'm not on Mac currently so I can't test/reproduce your issue, but I'll check this more in depth later on.\n. Hey, I've been able to reproduce the bug and commit a fix to master. Could you test it out and tell me if it resolve the problem on your side too?\nAs the fix is not yet published to NPM, simply add this repo URL (git@github.com:SBoudrias/Inquirer.js.git) as the inquirer version in your package.json file\n. @DannyDouglass Try using the http URL maybe... https://github.com/SBoudrias/Inquirer.js.git\nI wanted to give you the git:// protocol url but give you the ssh one - NPM probably don't support ssh\n. Just releases 0.2.5 containing the fix on NPM. Thanks for the report @DannyDouglass!\n. Hi, I'd be interested to know more about the UX issue you encountered.\nHow long was the list? Was scrolling the prompt up/down caused issue when you moved the cursor inside the list? And maybe which OS and terminal you're using.\nThe pagination sure try to leverage issues with long lists, but it may not cover every needs.\n. 0.3 have been out for a couple days, can you tell me how you feel the pagination is handling your issue?\n. Feel free to reopen if you want to continu discussion or propose something more concrete. As of now with pagination support, I'll close as this feels unecessary.\n. Nested call (https://github.com/SBoudrias/Inquirer.js/blob/master/examples/nested-call.js) should reproduce in theory. You should just change the type to lists instead of input. (and use 0.3.0)\n. Hi, that'd be the rawlist prompt.\n. Design decision have been made to only allow rawlist to have numeric index as this is easier to sort out for the user.\nExpand allow letters because these are easier to relate when the choices are on a single line.\nDo you have a use case where using number as index or the expand prompt as is causing an issue?\n. I'm really trying to limit any bloat or extra unnecessary feature out of Inquirer. And I feel setting page size is such a bloat.\nAs I see it, there's no case where an author need to setup a different page size per prompt.\nI tested different size, and I felt 7 choices was the right one as it offered enough choices in one look, without overloading the prompt with text. I considered a moment basing the choices number on the prompt height, but that would've made huge lists (who're not super user friendly).\nNote that I'm open to discussion so I keep it open hoping some other people are willing to chip in their opinion. (cc @danielchatfield @robwierzbowski)\n. I think most agree this is unnecessary measure, so I'll close the request.\n@danielchatfield Exposing Choices could work, so feel free to send a PR. Although, it should be noted monkey patching would work now, but it won't get documented and could break in any future release.\n. Fix is out on release 0.3.2\nThank you for the report, and thanks to @danielchatfield for the quick fix!\n. Maybe we could keep a count of the listeners added/removed on the Readline stub to see if there's any leakage.\nBut I think we should rethink how the stub works as the same trouble you have to add a test for this leak is the same as #59 \nI'll merge and push a patch in the next couple minutes.\n. Yeah, I was thinking about a more complete readline stub with readable/writable streams in places of stdin and stdout - or even a real readline with stubbed Streams.\nI just moved last weekend, so I don't have much time to dig this deeper, but I'll do in the next couple weeks.\n. I don't believe the flow control belong in Inquirer. This is a totally different concept and responsibility.\n. Inquirer let you validate answer, so you can check the validity of the email, and if it's not valid, then it'll ask the question again.\n. BTW, you don't need to nest the second inquirer.prompt call, but the solution is the way to go. Recurse over the same screen (in the example called getEmails) until the user opt-out.\n. Can you send a PR?\n. end button will move the cursor passed the end of line because it does not escape ANSI code ATM (bug in Node). That is something that should be easy to fa\u00e7ade in the Inquirer Readline fa\u00e7ade.\n. @danielchatfield https://github.com/joyent/node/issues/3860\n. Hey, just updated #71 with fixes for all prompt by mostly porting fixes done on Node.js 0.11 over our Readline fa\u00e7ade.\nI'd appreciate if you both could give it a try and tell me if it resolves the issue on your side too!\nBTW, thanks a lot @datheme for bringing this issue up - that was pretty major and touched every OS!\n. I'll release 0.3.4 sometime today. Thanks again.\n. Oh, this one is good. Send it on master.\n. You have nothing more to do.\nI just want to double check and validate this fix won't break on other environment (windows/Mac) before merging it.\nStay tune.\n// cc @danielchatfield \n. What do you mean already broken?\n. The behavior I can reproduce on windows ain't quite the same. The cursor is always stuck at the end of line, but there's no spaces between both. (Do you get the same thing @danielchatfield?)\n@datheme Please keep differents issues separated.\n. @danielchatfield Agreed on your last comment, feel free to open an issue or a PR relating to this suggestion.\nAbout the current PR, I'll close it because it is not fixing the issue in a general way. Although, note that I worked on a fix on PR #70 which is working for the input prompt. Some other prompt will require in depth changes to fix the bug.\n@datheme I'd really appreciate if you could test #70 on Mint and tell me if it fixes (or at least normalize) the behavior. The spaces between the cursor and the end of line might be due to bad ANSI code escapes (which is a bug in Node handled in Inquirer by the Readline fa\u00e7ade); that would be to explore if the issue still occur.\n. Hi,\nWhich font where you using which haven't the hexagon glyph support? And on which OS (and terminal)? And was this font the default?\n. @wking Just to keep you up. I'll probably merge this in, I'm just not sure if I want to wait until 0.4 or making this into a patch release.\n. Yeah, I wanted to give you a headup, but I was leaving work right after sending the PR.\nI've checked your commit on my mac, and I'm not really happy with the rendering. The glyph is very small and hard to distinguish.\nAre there any other option you know that could replace the current glyph? (I really want to change the current glyph because it is not obvious when used with all checkbox checked)\nThough, if we cannot found a compelling replacement glyph, I'm thinking of using two global variable allowing user to override Inquirer glyphs. For example: INQUIRER_CHECKED and INQUIRER_UNCHECKED to be set to the glyph desired by the user. It seems not ideal, but would cover edge cases.\nWhat do you think?\n. Here's a visual of what I got on my system:\n\nIt is unfortunately very small, and I don't feel comfortable using this one as default.\n\nI'm fine with these so someone who uses Inquirer.js a lot can change glyphs that bug them. For someone who doesn't even realize they're using Inquirer.js (e.g. me when I was using Yeoman), they won't be much help.\n\nYeah, but this is a solution program relying on Inquirer will be able to propose as an alternative to user having trouble getting right prompts. Not ideal, but it'll be available.\n. \nThere\n. The thing with checkmark + spaces, is that when the option is uncheck, there's no indicator an action can be taken.\nI've looked around, and there seems to be a lot of form with empty/fill combination. Maybe you could find one with better support?\n. Yeah, thanks for hanging out that long.\n. That make sense to me. Will probably implement in future version.\nThanks for the suggestion!\n. This have been added to the last WIP and will be part of the next release.\n. My pleasure!\n. I'm not sure I'd like to implement useDefaults.\nBut using inquirer to display a resume of previous choices and confirming them make sense. PR welcomed if you want to give it a shot.\n. It's been open forever and I really don't have plans to do this anymore. Anyone's free to take it, but I'll close it as won't fix.\n. ES5 have clarified reserved keywords and now reserved keyword are allowed as object keys.\nTry setting your JSHint to parse with ES5.\n. Hi, list currently doesn't have any hint support for 2 reasons:\n- It allow you to put as much test as you want as label (in contrast to the expand prompt).\n- The list can be long, so using hint might seems weird/unrelated if it appears to the bottom of the list.\nAlso, you can freely add ANSI control chars the your list prompt label to put emphasis on the choice name, or vice-versa; e.g.: chalk.bold(\"Choice a\") + \" (explanation)\".\nCould your use case be resolved like this?\n. Hi, this options have been discussed (and ruled out) on issue #61 \nFeel free to send a PR clarifying the documentation if you feel it's necessary!\n. Looks good to me, thanks!\n. Wow, I dunno how it happens, but I though I merged those in... Anyway, done it manually now!\n. I really like this functionality, thanks for the PR!\nIf you can just fix the array format to follow the code style (and squash/amend it on the current commit).\nI'll be glad to merge it afterwards.\n. Thanks to you. It'll be out on the next release.\n. This have already been discussed and ruled out. We want to offer a simple API without overhead. See #61 \n. Couldn't you filter only valid choices by passing a function to choices?\nIssue currently is that validate is handled by a prompt, so it have no knowledge of external answers.\n. Thank you\n. ~~Ah, need to add some documentation.~~\n. Right, forgot about that one!\nCan you squash your commits together?\n. Hey, I wanted to advice this tonight so I took care of it myself and squashed your commits and bundled them on top of WIP branch (no worries you kept authorship).\nThanks!\n. It is very unclear what you're asking... Can you describe what you want in words?\n. I'll close as pretty much the same functionality asked in #118 (and I feel the option proposed in the other issue might be more UX friendly).\n. Well, could you describe your use case? It'd help finding an appropriate api.\n. This is available as of last release. See https://github.com/SBoudrias/Inquirer.js#reactive-interface\n. Haha, nice catch. Thanks :)\n. We discussed this on another issue and decided not to go forward with it as the silent is implement in Unix for simplicity reason rather than security.\n. I think that's a good idea. We'll implement in an upcoming version.\nFeel free to send a PR too.\n. Can you explain your precise use case?\nI feel there's already options to achieve similar needs in clean fashion and I wouldn't want to grow the API for non optimal solutions.\n. I meant, please explain what you're trying to do.\n. It might be a good feature for the grunt-prompt plugin as it is configuration based, rather than programmable like inquirer API would be. You should ask over there, to me it make sense for them to add support for such a use case.\n. They could wrap inquirer.prompt calls.\n. Ah, it's been brought up before, but I wasn't sure it'd be useful enough to worth it.\nBut, now you've asked it, I should make it happen. - Might be good to have some specific unit test suite too, right now it is a bit lame.\n. Yeah, from my feeling working a lot on the Yeoman project, I feel like lots of people ain't sure where to start testing on the CLI as it doesn't seem as straight forward as triggering \"click\" events on a browser UI (though really it is).\nA while ago I wanted to test Inquirer.js with an Integration test suite (right now we test functionnality behind the scene, but the actual UI could broke during testing without the current tests failings). I haven't quite figure out if there's any good tools (Selenium like) for terminal testing - I ought to search more on native desktop app tools. Do you know any?\n. Hey, exported the module in another repo: https://github.com/SBoudrias/readline2\nI'll add documentations and dedicated tests in the next few days - then release to NPM and use it in here. Feel free to contribute if you feel like it!\n. BTW, worked on the unit tests and published it to NPM today!\n. I'm not sure I see the issue with writing to stdin and emitting line events with testing the prompt returns the correct values.\nIMO though, you're duplicating the Inquirer test suite and this is probably unecessary tests for your project. What you should do instead is mocking inquirer methods to return predefined values. This is how we manage it on Yeoman: https://github.com/yeoman/generator/blob/master/lib/test/helpers.js#L171-L192\n. Good idea, will do.\n. Awesome, great solution too. I'll publish with next release!\n. I wonder if we could call the system editor like when you git commit and get the content back afterward.\n. Just to keep track: http://stackoverflow.com/questions/19456184/cli-implement-something-like-git-commit-open-a-text-editor-and-get-value\n. @adjohnson916 PR welcomed.\n. This is now shipped with v1.1.0\n. Hey, this is not something I wish to add for UX sake. I don't see points to use \"auto answers\".\nIf it is testing concerns, then mock Inquirer module. You can checkout how this have been achieve on the yeoman-generator.\n. Right, will fix.\nLines:\nhttps://github.com/SBoudrias/Inquirer.js/blob/master/lib/prompts/base.js#L187\nhttps://github.com/SBoudrias/Inquirer.js/blob/master/lib/prompts/input.js#L70\nhttps://github.com/SBoudrias/Inquirer.js/blob/master/lib/prompts/password.js#L74\n. Hi, that's because your line is too long and is wrapping in the terminal.\nYou should manually wrap your line (using \\n) in the message field or simply reduce the amount of text.\nIn your case, the best would probably be to simplify the message and add content inside the choices.\n. BTW, I'll close as it is a duplicate of #6. To be honest, this bug is low priority to me, and I don't have plan to fix it in the near future. However any PR fixing this issue is warmly welcome.\n. Thanks!\n. Hi, list prompt is the same as radio button.\n. Looks like david-dm SVG badge is not working?\n. Thanks\n. In what way is the cursor not restored? (position, muted, etc?)\n. You mean the npm being outputed after you exited? Or the line being duplicated at the beginning?\n. Alright, I wonder if that's related to a new (non backward compat) Node release. The bug appeared without any update to the core of Inquirer.\nI'll have to check it out!\n. I tested it on iterm yesterday and I haven't been able to reproduce with node v0.10.26 on iTerm 2\nBut I had this bug on Windows powershell back at work...\n. @rodriguise Did you ran on this issue using a yeoman-generator or running this repo examples?\n. @rodriguise which prompt / operating system do you use?\n. @knownasilya Yes, that will effectively happen currently if two inquirer or readlines run at the same time.\n. I cannot reproduce in the latest release. I did some cleanup to events listeners a while ago, so that might just've fixed the issue.\nEither way, feel free to reopen if the issue still occurs for you.\n. Hey, I don't want to look like a jerk by closing this PR. I really do appreciate the efforts you put in!\nThe thing is at the moment I want Inquirer to be a UI library giving users easy flow controls of prompts. And I don't wish to provide options to customize the look and feel. I think good UX is good UX and that style configuration are simply a bloat. They complicate the API for what I believe to be very little added value.\nSo, I'd like Inquirer to stick to the masked password prompt for easier usability. Hidden password are really not obvious the first time you encounter them.\nFeel free to continue conversation if you think there's thing to be added.\n. Please don't bump the version. Let module owner handle that.\n. Awesome, I'll get a release (0.5) out soon.\n. Yeah, some functions are does not support asynchronous signature because they're not part of the \"lifetime\" cycle. If they were that would bring quite a level of complexity to the code.\nWithout really good use case, I'm not sure I want to change this.\n. You're free to check the code out and see if this is easy to implement. Send a PR if you find an elegant solution!\n. Hey, sorry for the time it took to get a review here. I don't really like how the logic is handled here. Having two methods onEachPrompt and _onEachPrompt is a bit tedious.\nIMO, the flow would be cleaner if the question was passed in a factory method that would handle the async complexity of setting up correctly every values of the questions before hand.\nDo you can think you could handle this task?\n. @kaelzhang Thanks for holding up, I think it is good enough then. I'll merge.\n. Ah, that's good to know. Thanks for following this thing through!\n. Hi,\nThat's effectively a bug because of the way Inquirer handle the input stream. We'll probably fix it sometime, but it is not currently in my priorities.\nMaybe @danielchatfield could take a look (and fix) sooner?\n. Hey @carlosacabrera, thanks for your fix suggestion.\nUnfortunately, this is really a hack a we should just take time to correctly fix it inside the core. As you found a workaround, I guess it doesn't matter if this bug stays on for a little while.\nI'll keep your issue open and will work on it, hopefully in the next month.\n. @Coriou I'll be happy to look at a new PR regarding this bug.. I'm not sure that would be super user friendly...?\n. But, how about separating this in two different set of checkbox? Or using a simple list.\n. @danielchatfield want to take care of it?\n. Fixed with #120\n. I fixed the failure on Travis by updating npm prior to running the installation phase: https://github.com/SBoudrias/Inquirer.js/blob/master/.travis.yml#L5-L6\nCherry-picked your relevant commit on master. Thanks a bunch!\n. Fixed https://github.com/SBoudrias/Inquirer.js/blob/master/.travis.yml#L5-L6\n. But if you switch them around, this mean your filter method must handle possible invalid input. I'm not sure this is a wise behavior.\n. Been thinking about it, and I guess filter first make sense finally. I'm just hesitant to change it before a major bump mostly for backward compatibility concerns.\n. For the input prompt that should be the case. Which prompt are you using?\n. Some comments, the rest LGTM!\n. Allright, squash those commits and it'll be good to merge!\n. @danielchatfield Totally, we used it on Yeoman and it helped a lot!\n. Oh that's right. We shouldn't send the post-filtered value out of the input prompt.\nWe run filter twice to output the filtered value in the input prompt, and then in the centralized filter system.\n. Fixed in 0.6.0\n. Hi, I'd love to merge your PR. The issue is that you added a bunch of unrelated stuff, and I cannot merge it as is.\nPlease only PR the relevant changes and squash all your commits into a single one.\n. @johnlegend Do you still want to follow up with this PR?\n. Closing for inactivity, and also because the core changed a lot since. Other PR welcome by anyone interested by that feature.\n. The idea here is not to revert our previous changes of displaying filtered value, but just to pass the raw answer out.\n. Run the function twice on the raw input, rather than once on the raw input and once on the filtered output.\n. That is because we want to display the filtered input.\n. Fixed on latest master.\n. Already reported on #115 - this is a bug in Node that'll be fix.\nUpdate your version or use stable ones.\n. Started some work on this branch: https://github.com/SBoudrias/Inquirer.js/tree/rxjs - far from complete, but there's a basic idea.\n. Hey @danielchatfield, I just pushed a pretty complete input prompt using rxjs. I wonder what you think of the result.\nSome of the validation logic could be moved to generic helpers. But I'm really more wondering what you think of the readability and the general flow it creates.\n. Currently you can nest functions to create a new prompt based on old answer.\nBut in the future, it might be possible to dynamically push new prompts if you pass an observable rather than an array in - but this is really work in progress/experimentation phase.\n. I'm pretty sure list/checkbox allow using numbers to quickly select an options. Is that not an option?\n. @GeorgeGkas yeah, I agree with you, let's close this one. It's been a while and I don't think there's a huge need in the community to support adding this.. Done in 0.6.0\n. LGTM! We were long due for a clearer checkbox icon.\nAbout radio prompt, the functionality would be the same as the list prompt (I almost named list prompt radio).\n. Although, we recently refactored lots of the prompt processing logic. I think that would be easier to implement now.\nIt would basically only involve adding a line to fetch the async message property here: https://github.com/SBoudrias/Inquirer.js/blob/master/lib/ui/prompt.js#L83\nPull Request welcomed (from anyone) with unit test and documentation update.\n. Hey, the issue is that the question filtering is done at the inquirer level and not at the prompt constructor one.\nThis mean your test is not at the right place, it should be with the inquirer.prompt tests.\n. Thanks!\n. LGTM!\n. Decided to go for a single ? in all case. So we got a better alignment. The unicode icons weren't exactly to my taste.\n. Oh yeah, we'd just need to update the suffix to only add it if the last char is alphanumeric. I'll create an issue.\n. Thanks for going over all of these!\n. Woot! I really like the dim prop - I though gray would never be an option\n. I added it because some options are hidden, so even though user know to use arrows, they won't realize the list scroll until they go down 2-3 times (list only start scrolling afterward)\n. I don't think it is Inquirer responsibility to forcefully close a program. I'll leave that to the description of the software using inquirer :)\n. This is effectively not intended.\n. filter would change the value returned out of the prompt - but you would just like to change the displayed label?\n. What would be the point of filtering the value returned when there's the value property in the choices array?\n. Yeah, I think a solution could be to add a method to change the output to be displayed when the prompt pass. And this would make sense as part of the validation/filtering handling (and that could probably be normalize for each prompt types).\n. @dantman Ah, that would be very simple to implement and it would probably resolve most use case for an answer filtering option.\nHow do you feel about this @sindresorhus?\n. Example implementation here: https://github.com/SBoudrias/Inquirer.js/tree/short-name-for-choices\n. @ascariandrea I was waiting for feedback on the suggested API.\n. Done in latest master. Release to come soon.\n. @JimmyBoh No documentation at the moment, help is welcome to add one.\n. Hey @danielchatfield Thanks for fixing this!\nBTW, a more idiomatic way of handling clearing events would be to use a submitHandler who'll dispatch valid/error events. See https://github.com/SBoudrias/Inquirer.js/blob/master/lib/prompts/input.js#L38-L43\n. Fixed on master - will release soon.\n. I'll reopen an investigate that!\n. Just copying comment on the issue so it can be retrieve in the future.\n\nHey @danielchatfield Thanks for fixing this!\nBTW, a more idiomatic way of handling clearing events would be to use a submitHandler who'll dispatch valid/error events. See https://github.com/SBoudrias/Inquirer.js/blob/master/lib/prompts/input.js#L38-L43\n. Hey, took care of it myself finally. I had some free time and was wondering why our unit tests didn't catch the failure.\n. More information about your system?\n. @danielchatfield That'd be great, I have no windows box anymore :(\n. FYI Console2 is just a wrapper on top of any other windows cmd line environment (like powershell, or cmd, or cygwin).\n. deasync maybe... But that's like the biggest hack I've seen.\n\nNode.js is async, so you better just embrace that fact and program in a way that allow easy asynchronous logic. Break things into standalone function and orchestrate them via events, or promises, or async.js, or any other abstractions node users created over the years.\n. Ah, thanks!\n. Ahh jeez, clever finding!\n. Hey thanks for looking into it, using 1.3 worked good.\n. There's a lot of way this can be done manually by the user in pretty easy way (build/filter the question array) - or even using parts of inquirer api like when functions.\nIt is actually a pretty common use case in a lot of yeoman-generators.\nThanks for the suggestion, but I don't think this functionality would add real benefits over filtering the array you pass to inquirer manually.\n. Okay, I'll reopen. That's been a feature asked many times.\nI'm still unsure how this could cleanly fit in the codebase - and it needs to works properly with plugins.. Yeah, currently the code assume a single line. Fix welcomed.\n. Fixed on master. Please test and let me know how it goes.\n. Nope. As we ask for user input, there's no way to block processing and make it synchronous.\n. @AdrienHorgnies Yeah, common in a lot of languages, but Node.js doesn't have a synchronous Readline module https://nodejs.org/api/readline.html - so unfortunately, this isn't possible.\nThat being said, you can leverage the await/async functions to get a similar style\njs\nconst { name } = await inquirer.prompt();. Hey, this one is on my todo. I already took a quick look but had nothing to say immediately without digging deeper.\n. These changes broked a couple other prompts (notably the raw list, but I also got weird output on a couple other ones). You should go through the example folder and make sure your changes won't break.\n. @tonylukasavage They can't be covered in unit tests because they are platform display specific. The functionality is working, but the display on some command line interface is broken.\nThis is the difference in web dev between unit tests and integration testing. I'd like an integration suite for Inquirer, but I don't know of any command line integration testing tools.\n. I have a branch out refactoring or rendering that will eventually fix the line wrapping issues.\nI'll close this CR as it's pretty old and I don't intend on merging it anymore.\n. I tested the fix on Mac OSx and it's working great.\nWhat device have you test yourself?\n@danielchatfield Any chance you could double check this is working good on Windows?\n. @bezoerb would you be nice enough to give a run of this one on Windows too? If you can go through the example and see that the display is not messed up it'd be super appreciated!\n. Alright, that looks good to merge. Thanks for taking the time to investigate and fix the bug!\n. I've been fixing lots of similar issues with natural line returns on master. Please test and let me know how it goes.\n. Closing this issue for inactivity.\n. No, we made the decision to not offer this option for UX reasons (7 is the maximum numbers of item we consider reasonable to display on a user screen - not everyone use full screens terminals).\n. As I said, we decided not to provide this option to make sure Inquirer user get the best UX possible. To ensure that we made opinionated decision to enforce some appearance options. You're free to provide your own prompt with configurable height via the plugin system.\n. To be fair, line wrapping is not supported.\n. Fixed on master. Please test and let me know how it goes.\n. You can create a custom prompt and register it on Inquirer so you or other people can use it without hacking Inquirer source in a way that'll be unmaintainable.\n. Thanks!\n. Yeah, list have no validation method as you're the one passing in the choices - just never pass invalid value.\n. throwing an error seems like the expected thing to do.\n. Yeah, but that won't help your user. A stack will.\n. @Amberlamps if you want to do an action on the selection of a choice, no need to hack around. Just do it in the callback function.\n. We don't want to provide this as an option as it would prevent us from eventually setting it to a dynamic value.\nAlso, lists bigger than 7 options risk being too large for some people terminal sizes. 7 right now is a good compromise.\nPR welcomed to dynamically set the size depending on the terminal rows.\n. Fixed with #300\n. Hey, thanks for starting the work on this. A couple concerns this should address:\n1. We'll need unit test to merge this\n2. What happens when the question take more than one line? When there's an error message displayed? We need to take these variables into account.\n3. What happens when stdout.rows is undefined (I believe on windows and if you're remotely connected to a terminal)\n. Hey @dylang, still up?\n. So, the code have been changing a lot lately, this is no longer merge-able - and it's been pretty much a dead PR for while. I'll close.\n. Sure, just handle it in inquirer.prompt() callback.\n. I don't see any inquirer in your trace. This trace is a syntax error at import time.\n. Oh, it was to pass the recursive prompt configuration. But I'm actually not sure why I needed this at that time.\nI'll close, I don't think it's very important.. Wouldn't it make sense to just use ttys by default no matter what?\n. I'd make it default :)\nMight even make sense to add it to Readline2 directly - I'll let you judge of this one.\n. @naholyr Hey, still up to change it to use ttys as default?\n. One last comment.\nAfterward, if you could squash these commits into a single one, I'll merge asap.\n. Ref https://github.com/Reactive-Extensions/RxJS/pull/363\nA breaking change/bug have been introduced in RxJS\n. Installing an old version on RxJS for the time being?\n. RxJS just merged the fix and it'll be on npm in a few. Run npm update at that moment.\nFor now, just cd into node_modules and manually install an older version of rxjs for inquirer.\n. The warning is fixed on latest RxJs.\n. Maybe the when option would fix you use case too.\n. I'll leave open as an example would be helpful.\n. Maybe your yeoman-generator inquirer version is not up to date. Run npm update\n. duplicate #214 \n. You can call this.prompt any number of time you like, and you can pass an object to the prompting priority to break in multiple subtask.\n\nYou can also group multiple methods to be run together in a queue by using a hash instead of a single method\n\nsee http://yeoman.io/authoring/running-context.html\n. Thanks :)\n. The reason really is only because Inquirer won't ever return an error.\n. Oh, it'll be done, but this will require a major version bump. I'm just not quite ready for this bump as there other thing I'd like to fix first.\n. Thanks!\n. @rmg I think your issue is actually not the same, last release broke in non tty (which is kinda expected, it was weird it ever worked - but we're working on a fix)\nFor your Yeoman-Generator, use the RunContext to test them. http://yeoman.io/authoring/testing.html\n. I actually unpublished 0.8.1, will investigate this more deeply, for the time being you can still use 0.8.0\n. The key line is this one: https://github.com/SBoudrias/Inquirer.js/blob/e146441bb83f565801fd31db53cb4f30044fbf8b/lib/prompts/base.js#L151\nThe answers are passed to the constructor, so they should be available at that point.\n. Yes, that would be a good/helpful first step\n. Use list type to navigate with arrows. rawlist only allow entering the index of the line.\n. @paglias open a new bug report then.\n. We use chalk for colors. I believe if you pass --no-color flag it'll just disable itself.\n. Default could be used as an object key in es5 - has it been changed for es6?\n. FYI I unpublished inquirer 0.8.1\nTo fix further issue for now:\njs\nnpm install inquirer@0.8.0\n. What would this option do?\n. Going over old issues ATM. I agree with:\n\nI think this is a better solution than an option.\n\nSo I'm going to close this issue.\n. @knownasilya https://github.com/SBoudrias/Inquirer.js#separator\n. This is the commit causing your issue: https://github.com/SBoudrias/Inquirer.js/commit/9abf288afb06a7133f1eddeb61eddb7f983fba1a\nFeel free to send a PR fixing it. Basically copying this logic in an internal helper or an external package: https://github.com/medikoo/cli-color/blob/master/index.js#L98\n. FYI I unpublished inquirer 0.8.1\nTo fix further issue for now:\njs\nnpm install inquirer@0.8.0\n. Hey, cli-width will need test before I can merge this in.\n. Cool thanks!\n. @sindresorhus That's because it might not be a tty - like on CI.\n. I could reproduce this issue, I'll investigate what on rx.js side is breaking.\n. I fixed it on yeoman side.\nJust reinstall and it'll be working :)\n. Update your inquirer version, we unpublished the version using ttys for failures it could cause in CI.\n. You'll need to close an inquirer session (prompt) before you can open another one. There's only a single tty available, so here you duplicate the number of prompts listening for answers at the same time.\n. The prompt is re-rendered each time someone type a character, so my guess is once we have a line return the cleanup code for the previous line is not affecting a correct line.\nA fix could be to compare the real line length to the terminal width and determine how many line we need to cleanup.\n. What happens when you submit the input and the validation fail?\n. Fixed on master. Please test and let me know how it goes.\n. @jviotti please open new issues for new issues :)\n. @episodeyang please open a new issues with code and steps to reproduce the issues you're having.. Thanks!\n. How about simply asking for a list of values separated by commas in an input prompt?\nThe issue with using x as an exit value is that it'll prevent using it as a valid value.\n. So I'll close this issue as the UX suggested is not possible. And there exist - or will exist - other solutions:\n1. Ask for an input with comma separated value or whatever similar\n2. Just do a recursive prompt asking the user if he wants to add new value each time\n3. [eventually] handle this with a multiline prompt\n. https://github.com/SBoudrias/Inquirer.js/blob/master/examples/recursive.js\n. Pretty sure you're not on the right HEAD here...\n. What I meant on the ticket was to create a custom prompt as an external plugin. I'm currently working towards making the creation of custom prompt easier, but it's totally possible to do it today.\n. PR welcome.\n. This is something you can handle in your code via a fa\u00e7ade. You can check how Yeoman does it https://github.com/yeoman/generator/blob/master/lib/test/adapter.js#L47-L51\nBut it is not something that should be handle by Inquirer.\n. Thanks!\n. Why?\n. Pretty sure you can currently pass a raw object and it'll just work.\n. If you send a PR, it can.\n. Just mock inquirer.prompt() method. You don't need (or want) to send tty events for testing.\n. I think it'd be fairly simple. A couple hours at most, but it might be more since you might need to get used to the core principles - and the core of Inquirer date from ~2 years ago, so it's not the cleanest code I've written out there.\n. Oh, I think the public API is fairly simple and pretty feature complete. I was more thinking of the behind the scenes abstractions who're bloated around classes. Redoing the core code today, most of this would be in functional style as a lot of class base abstraction currently in use are not needed. But you should be able to wrap your head around it.\nI think the list prompt implementation is the most similar to the suggested kind of prompt: https://github.com/SBoudrias/Inquirer.js/blob/master/lib/prompts/list.js\nWe use RxJS to handle user inputs https://github.com/SBoudrias/Inquirer.js/blob/master/lib/prompts/list.js#L65-L69\nThen you just react to those events by writing and clearing the terminal with the new layout.\n. Right this is now published as a standalone plugin https://github.com/mokkabonna/inquirer-autocomplete-prompt. I don't understand your request.\n. inquirer.prompt is an asynchronous function. It can't return anything.\n. Yes, PR welcomed :)\n. Closing has this issue has been addressed a while ago when we moved to instantiable prompt modules.\n. Does it even makes sense for password to allow a default?\n. But your user wouldn't know what the default actually is as it'll be hidden. It could be anything.\n. Setting storing to true will save the user password in clear in a public file. You shouldn't do this.\n. I'll close as I think it makes sense to always display the default. Probably just shouldn't be defaults for password.\nAnyway, I don't personally intend on fixing it. Feel free to send a PR if you feel strongly about it.\n. Looks good to me, can you squash your commits?\n. Thanks!\n. That's already possible through the Reactive interface:\njs\ninquirer.prompt(prompts).process.subscribe(\n  onEachAnswer,\n  onError,\n  onComplete\n);\n. You mean a callback each time a user move through a list without submitting?\n. It is case sensitive.\nAbout copyTpl it's all about the clarity of intent and the traceability of the data source. Using this.template just create a huge mess where it's hard to find data sources and intent.\n. In an Object literal.\n. Just one object with multiples keys. That's explained in the documentation.\n. Please read the documentation and learn a bit of JavaScript, I can't continue answering all those questions.\nSee StackOverflow if you want to ask further questions.\n. @emilyrose do you have the same issue on Cloud9 or another editor?\nThis feels like an issue specific to Cloud9 terminal. I believe you might want to report the issue over there rather than here.\n. Pushed some fixes for rendering edge cases on master. Please test and let me know how it goes.\nWithout more details on your issue, I won't be able to help further on this issue. Closing for now.\n. You can provide a minimal reproduction case. That'll help.\nThen, I don't own a windows machine, so it's hard for me to reproduce and debug. But I know for a fact this was working fine and I haven't pushed new version out for a while... So I'm not sure why it stopped working.\nMaybe try on older node 0.10.x?\n. No idea at all, readline is Node core module. It seems to me the readline is not attached or maybe the cmd is not in tty mode... I don't know for sure.\nI think you should open an issue on the Node.js repository.\n. Yeah, this was on purpose. Might be worth revisiting.\n. inquirer.prompt take an array of question objects. Please read the documentation.\n. Hey, I see what you're trying to accomplish here, but I don't think that's a maintainable solution.\nExposing random modules and function as class property is probably the biggest technical debt you'll encounter anywhere. It freeze interfaces and tightly couple everything.\nThis is definitively not the way I want to go about providing base helpers to help the community to create custom prompts.\nThe way forward is to decouple all the class based helpers functions there's right now in Inquirer to utilities and then create an external packages out of them. We could then do the same thing with the base prompt class if necessary.\nWe would also need to clarify the prompt interface. What is a prompt object? How does it work? Clearly define the responsibility of each part of the inquirer system.\nIt is important these things stay versioned out of inquirer so people can reliably expect them to work even if we do breaking change over here. Also, we have a growing use case of user who abstract GUI on top of Inquirer, so considering their use case and how they can leverage our core system without rewriting the whole thing would be a welcome addition.\n. > You mean access helpers from Inquirer Client interfaces. Same approch like Separator? \nNo, I mean like separate packages require('inquirer-util'). But before you jump there, we need to define interfaces in Inquirer so they're easy to separate.\n\nWell that means that we need to define proper interface for already existing Prompts. Am I correct?\n\nYes, for the existing stuff. This is a hard work.\n. Hey, I'd have a couple comments on the code changes, but I'll hold onto them for now because this fix is very specific to the input prompt and I have a solution in mind that would fix this issue for every prompt type. I'm experimenting with it ATM and just need some more time to make sure it'll work fine.\n. I'm going forward with the rendering process redesign. I'll close this PR as I don't intend to merge it.\n. Yup, known issue: https://github.com/SBoudrias/Inquirer.js/issues/6\nYou can manually line wrap your questions to prevent this.\n. Also https://github.com/SBoudrias/Inquirer.js/issues/214\n. Hey, thanks for that! This is awesome.\nJust a few things:\n- Can you make the logo smaller? Maybe float it next to the main title so it doesn't push all the content so deep into the page\n- I guess your editor is removing trailing whitespace, but trailing whitespaces have a meaning in markdown and that changed the output of the readme.\n. Thanks, this is looking good! Can you squash the commits?\n. Thanks!\n. Thanks!\n. You can add it manually.\nI plan on removing auto prefix/suffix soon enough.\n. We'll take care of input wrapping in a correct fix. This is a very specific hack to the input prompt.\n. Why don't you generate the outcome after from the result? I have a hard time to see what's your issue.\n. Hey, thanks for letting me know. I'm always interested to see what other people build on top of inquirer - or projects just inspired by it.\n. No, I don't think that's something most users would needs.\nAlso, if you want to pass JSON in, almost everything will work, excepts  validate/filter and other functions versions of properties.\n. Fixed on master. Please test and let me know how it goes.\n. Hey, I'm not sure I understand the feature you're describing.\n. @paoloantinori Inquirer doesn't close when someone press q. That's something in your own code.\n. You guys might be interested in this project https://github.com/mokkabonna/inquirer-autocomplete-prompt\n. Just use two prompts. Depending on the result of the first prompt, then display the second one.\nInquirer is just a tool, you can still program any javascript to implement more complex behavior.\n. I don't think this is clearer - the line actually look like the currently selected element.\n. Users can overwrite it in their own programs.\n. Hey, thanks for taking care of this (and providing a unit test +++)\n. Yeah, you can use strip-ansi for that. I have a branch on the side that's doing a very similar logic. Another issue with your implementation is that it won't consider the cursor position if you're outsetting it with a long line. Also, I'm pretty sure  it'll break our input prompts where the user answer is wrapping.\nSo this is not mergeable as is, but I might base something out of your solution.\n. My fix is on master now.\n. There's still a lot to figure out to the internal API and extensibility that should be fixed before I consider 1.0\nFWIW I'm actively working towards that goal.\n. There's no option for this currently, and no plan to add it.\nWe might in the future be smarter and use the terminal height to determine the number of choice we display.\n. PR welcomed to auto adjust the height.\n. I can pass slashes to raw input field without any issue. My guess is you're using a validation function that doesn't allow them.\nInquirer does nothing at this level.\n. There is not.\nWe might parametrize the size to be the terminal window size eventually, but that's not in the next near future.\n. It's working fine for me with the latest inquirer 0.9 release. I believe yo is still on 0.8. - So this rendering bug shouldn't be an issue with latest version.\nThat being said, maybe some improvements could be done for long choices as if it spawn on a multiple lines it shows up pretty abruptly. My concern here is that if we start cutting the choice text to fit the screen scroll state, then we might end up with more edge case. What if the question is longer than the maximum number of line? Can we assure the choice is readable in its totally when it's selected? I don't really have an answer for these currently - and I'm not sure pursuing a fix here is currently worthwhile.\n. Ah, actually this bug only show up on terminal (I was testing with iterm). Will investigate.\n. Investigated this tonight, I have a feeling the issue is when we reset the cursor to the left position, we send it too far and it silently goes up a line in Windows and Terminal, but not in iterm.\n. Sorry this is taking forever. Tried to figure out the inconsistencies for a while now, and I'm now pretty sure it's because when cleaning a line, Terminal will clean a prompt line with a wrapping answer, while iTerm only clean the current line.\nI'm still a bit unsure of how I'll handle the inconsistency (and I also need to confirm the behavior on Windows), but now that I know the cause a fix should be coming soon.\n. Can't reproduce on iterm v2.1.1, are you sure you tested latest version?\n@doapp-ryanp FWIW, if you're debating writing your own, just send a PR fixing this bug and we'll merge it. That would be easier than rolling up your own solution.\n. @ac360 @doapp-ryanp I know the cause, but the issue is a bit tricky to fix as it impact multiple kind of prompts who don't have the same requirements, so it need to be as transparent as possible. It'll take me a little while to fix it correctly.\nThat being said, Inquirer only struggle with implicit line returns because they're not handle in a consistent manner by all the prompts out there. If you manually set \\n in your prompts/list choices, it'll work just fine. You can check process.stdin.column to know the size of your user window.\n. FWIW not got a fix for OSx on master. But that's breaking on windows.\nThere's also some edge cases failures on OSx with the input prompt, but that seems fairly minor.\n. I believe this is fixed on the latest version. Would someone mind testing it?\n. @abramdemski I think you should check with the maintainer of vorpal.. Which version are you using?\n. Yeah, please retry on the latest version. This should be fixed.\n. Yeah, I'm removing all the crust around the huge classes so it can easily be exported to a standalone module.\nNot sure what I want to do about prefixes/suffixes yet.\n. @jsonmaur Well, it depends on the solution implemented.\nWhat do you have in mind?\n. @jsonmaur maybe we could set it up as a constant inquirer.PREFIX or something similar. Then it could be replaced without too much trouble and without adding extra API surface to the prompt method.\n. @jsonmaur an object map would be better.\n. Hey! Thanks for working on this.\nThis prompt should be published as it's own npm package. Inquirer allow to be extended with custom prompt type:\njs\ninquirer.registerPrompt('search', require('your-module');\ninquirer.prompt({ type: 'search', ... });\nThis would allow you to stay the owner the that module and fixing, patching and releasing new versions of it!\n. Which version of inquirer?\n. @LPGhatguy does it work with inquirer 0.8.0?\n. @LPGhatguy I don't have easy access to a windows machine. This seems to be a big issue for you, it'd be nice if you investigate and send a fix as a PR.\n. @artem-malko did you try with cmd.exe?\n. @artem-malko Looks like windows is not entering in the readline or tty mode...\n. Looks like a Node.js bug. I'd like to have more details to give them to repro, but I don't really have the time to dig this one further.\nYou should probably investigate the issue on your own (no need to use inquirer, just reproduce it using a Node readline) and report a bug on node.\n. @maxdow can you post the steps you took to reproduce here?\n. I wonder if maybe Node is not detecting the windows cli as a TTY on the first run. We could try to force it in TTY and then try if it still fails for you.\n. I've open an issue on Node side. https://github.com/nodejs/node/issues/2996\nAny help from someone here (able to consistently reproduce the bug) would be very useful. A step by step test case to reproduce the issue with a raw readline would be awesome.\n(also ping @maxdow)\n. Anyone tried on the latest node? If it's not fixed yet, you should ping them on their bug thread.\n. Bash (like git bash and cie) terminals don't support readlines on Windows. They're very bad emulator.\n. There's a regression on the node side. The team is investigating.\n. https://github.com/nodejs/node/issues/5384\n. The symbols inquirer is using are provided by: https://github.com/sindresorhus/figures\nYou should open an issue over there! (please link to this issue so we have a trace)\n. Once it'll be available in native node, then we'll make it happen.\nBut this is not yet the case.\n. @callumlocke PR welcomed.\nNote that the Reactive interface currently expose will still need to work. So you cannot only return a promise.\n. PR welcomed as it's now officially supported since Node v4\n. We can return a promise and add the rx property on it.\njs\nvar promise = new Promise(/* etc */);\npromise.process = rx.js.stuff;\nreturn promise;\n. Soon, it'll be released with 1.0 you can see the issues left on the milestone here: https://github.com/SBoudrias/Inquirer.js/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0.0\nHelp is welcomed to make it happen faster.\n. Your subprocess is not a TTY, so it cannot run inquirer.\nIt'll work if you inherit the stdio. https://nodejs.org/api/child_process.html#child_process_options_stdio\n. It is possible you can only use spawn. The important thing is that you need to be able to inherit the stdio.\n. I believe you can implement to logic to mask the previous password in your own code. The default value is used as is and is provided directly by the user. It is then totally possible for you to mask it without Inquirer doing anything.\nAs so, I'll close this issue as I prefer this logic to be kept on the user side.\njs\ninquirer.prompt({\n  default: mask(previousPassword),\n  // etc...\n});\n. See my answer on the issue. This should be handle on the user side.\n. >  Git Bash is the only sane thing to use on Windows\nFWIW, Powershell2 is a good console for Windows environment. If you want more control on the look, wrap it inside Console2. - That was my setup a couple years ago when I was working on ASP projects.\nFor the bug itself, someone or me is going to take a look eventually. But I don't have a windows machine handy currently, and it's not exactly at the top of my OSS todo list. - If you feel like debugging this one, please do! :)\n. FWIW, that's the issue on Node side tracking the issue you're having https://github.com/nodejs/node/issues/3006\nNode always had issue with fake windows command lines. Not sure what their plan is for eventually fixing.\n. Please try the latest inquirer version and let me know if that's still an issue.\nA lot of work have been done on the Node.js side, and I remove all Inquirer custom readline handling as the Node version is now good enough.\n. It's the castle of Citizen Kane :)\n. Alright, LGTM.\nMind squashing these commits? I'll merge once that's done.\n. Sorry, doesn't look like it worked. You now have 5 commits on this CR.\n. Feel free to send a PR\n. After reconsidering and going through @jdalton answer. I think we should drop this issue. We're using lodash a lot inside of Inquirer, there's really no reason to start using only specific modules until we rely less on lodash.\n. Ok, I could reproduce this bug. Not sure what on rx.js side is breaking that flow. I'll investigate.\n. Well, the bug is pretty simple to find.\nBasically when you add an extra listeners, each items in the array get processed again (this here is going to get called twice https://github.com/SBoudrias/Inquirer.js/blob/master/lib/ui/prompt.js#L61).\nGonna have to read RX documentation to see how to not rerun the whole process for each listeners... Pr welcomed.\n. Can you explain which part of inquirer you're using?\n. Feel free to contact me if you'd like.\nFor your issue, it's because we drop the ctrl key on the utility transforming keypress events into rx streams. https://github.com/SBoudrias/Inquirer.js/blob/master/lib/utils/events.js It'd be trivial to add the any extra details to the events being send around. PR welcomed.\n. Oh yes, if you don't see it on a raw keypress event on stdin, then I don't know what your issue is.\nAlso, you're correct, I wrongly assume we were deleting the ctrl key data, but it's kept through the stream.\nI'll close this issue as it doesn't seem related to inquirer.\n. Oh yes, we're mirroring the event on the readline here: https://github.com/SBoudrias/Inquirer.js/blob/master/lib/ui/baseUI.js#L67\nThat should be removed. I'll reopen to take note.\n. Oh, readline is an EventEmitter. Inquirer is manually triggering keypress on the readline when they occurs on the input stream.\n. I removed the hack triggering the keypress on the readline today.\n. There's a lot of other issue about this subject on the bug tracker. Please research your issue before opening a new one.\n. Yes, I totally want to allow a user to set input/output stream manually.\nIt just requires a bit of a refactor.\n. Similar to it yes, but I'm pretty sure there's place where we're calling process.stdout directly. I remove them as I fall on them, but there might be some still around.\n. Awesome, thanks a ton!\n. Inquirer is asynchronous. You cannot run two prompt at the same time.\n. Hey guys, I'll need more details because I just tested this on Window 10 (cmd.exe and Node 4.0) and everything is working fine.\nI also copied your code example verbatim and it's working fine.\nSo please retry with the latest Inquirer version. Then give me:\n1. Code that I can run and that is failing for you on your computer.\n2. Windows version\n3. Node version\n4. Inquirer.js version\n5. Command line used to reproduce the bug\n. I'm going to close this issue as #266 have more feedback and is tracking the issue on Node side. Please continue further conversation over there.\n. Why would you display invalid choice to the users? Instead make choices a function, and filter out the invalid choices.\nAlso, you can display these invalid choices as Separators to they're not selectectable - but still visible to the end user.\n. Thanks\n. You should probably open an issue on cli-width package.\n. Thanks!\n. This is a node issue, we're tracking it on https://github.com/SBoudrias/Inquirer.js/issues/266\n. I have a really hard time to see what you're trying to achieve. It looks to me like you want to overwrites prompts methods?\nIf that's the case, why not overriding the prompts types with inquirer.registerPrompt()?\nAbout the \"next\" event, why not use the reactive API?\n. You can still access the Inquirer prompts (require('inquirer/lib/prompts/input')), modify them with your extra behavior and re-register them on Inquirer.\n. @dthree that'd be great. I'd just like it to match closer the api design style of Inquirer.\n. @artem-malko Feel free to send a PR.\n. We don't intend to overwrite the default ctrl-c behavior. This would be a pretty bad user experience.\n. Inquirer re-process every input everytime it's called. There's no cache.\nI'll need some code to see what you're doing that might break.\n. Closing as inactive. Feel free to reopen if you provide reproduction steps.\n. Inquirer shouldn't trap SIGINT. What's your OS/terminal/node version?\n. @ChristianAlexander can you link to the Node documentation stating that readlines won't propagate signals to the process?\n. @ChristianAlexander mind opening an issue on Node and linking this issue?\n. > I'm unsure if this should be considered an issue at the Node level. Perhaps there could be a case where it wouldn't be desirable to send a SIGINT on ctrl+c in a project directly dependent on readline.\nI don't know, but that seems like a conversation worth having with the Node community.\n\nIf Inquirer doesn't end up sending SIGINTs to the process itself, would it be possible to have Inquirer pass the event along after it is done closing up? If not, could Inquirer send an error object in its callback where results are sent?\n\nFeel free to send a PR.\n. @felipenmoura these events are global, you don't need to listen to it on inquirer.\n. @felipenmoura that's what this thread is saying. That's due to the Node.js readline. You guys should open an issue on the Node project.\n. This should work fine on the latest release now.\n. @iamakulov not sure anymore, it's been fixed for a while.\n. Fixed with #300 \nAlso a duplicate of #180 \n. Duplicate of https://github.com/SBoudrias/Inquirer.js/issues/290\n. The context is different, the issue is the same. Inquirer should handle a cli width of 0 by setting a baseline default value.\n. Thanks!\n. Ah, thanks for the help\n. This is the same bug as #261 - I'll close this one in favor of this other one who contains lot more details as to why this behavior is happening.\n. Thanks!\n. Thanks!\n. Is there a chance the RX versions just mismatch?\n. So, I think Rx.Subject is a hot observable. That means it won't replay event who've already been dispatched. You'd use it as so:\njs\nvar prompts = new Rx.Subject();\ninquirer.prompt(prompts).process.subscribe(function onEachAnswer(answer) { ... }\nprompts.onNext(questions.a);\nprompts.onNext(questions.b);\nprompts.onNext(questions.c);\nSee the onNext calls happens after inquirer binded the Observable object.\n. Duplicate of https://github.com/SBoudrias/Inquirer.js/issues/266 - you have the full background of the issue there and Node.js fixed the issue on their master branch.\n. @Amberlamps please see related issues. It's all explained in deep. Node release a bug causing a race condition who's not creating keypress events on windows.\n. @allenhwkim how about a custom prompt plugin?\n. @allenhwkim feel free to publish this custom prompt to npm so other people can use it in their own projects!\n. @sullof I'll be happy to list it in the README plugin list. Send a PR when you feel it's ready.. Hey, I won't be merging this.\nThe main reason is ES6 modules don't support conditionals/nested loading. So this is not future friendly.\nAlso, having God object with a bunch of stuff on it are hard to maintains on the long term.\nThe commonjs module system is the standard in the Node environment, we'll stick to it for now.\nThanks for sending this PR out though.\n. @jonschlinkert this was a misunderstanding on the goal. The issue was about lazily evaluating the terminal environment to prevent crashes on load in non-tty environment; not about using lazy-require.\n. Done on master.\n. Oh that's simple enough. I'm happy to promoto vorpal here.\n. You can return a promise.\nAlso, ES6 didn't deprecate function () {}\n. @keithamus oh yes, PR welcomed.\nThe PR might not be release to npm for a while though as master is broken on windows and I haven't really got the time to investigate that further.\n. @keithamus no ticket, it's just part of refactor/fixes to issue with implicit line returns https://github.com/SBoudrias/Inquirer.js/commit/6e269f05ebc49383398b8504dc65a5c7cd0806c0\nIf you feel like investigating, windows add an extra empty line between each line. I feel like it automatically send the cursor to the next line after writing a line (maybe).\n. Hey, this can be an inquirer plugin. There's no need to add it to the core.\n. I'm planning to eventually move every prompt in the core to plugins. Yours would really fit better as a plugin.\n. @Signus that's the way to go currently. I eventually want to split the prompt core and the inquirer system in different modules to ease the creation of plugin. I just need more time to work on that specific feature.\nI'm not sure about creating a guide right away as I feel the API is pretty sketchy and I don't want to bind people to it. - if that makes sense.\n(also closing as this initial issue is resolved with a module)\n. Thanks!\n. What do you mean?\n. Well, the checkbox will return the choices in an array value. So just check what this array contains.\nThis is not an issue with the project, and it looks like a basic JS question. Please refers to StackOverflow with a reduced test case if you need further help.\n. What do you mean?\n. @mxstbr doesn't the default option enough?\nAlso, if you need specific formatting or answers, then other prompts like lists might be more appropriated. Or using a filtering/validator function.\n. @mxstbr the default is displayed. Maybe you don't see it because or your terminal color theme?\nIn your example for a twitter user name. The user shouldn't have to worry about that, your filter function should handle both case and normalize it.\n. Can you explain clearly how to reproduce the bug you're having?\n. One last comment and the rest looks good (and way simpler!)\nOnce you've fixed the last thing, please squash your commits and we'll be good to merge.\n. Awesome! Happy new year :)\n. Inquirer is just JavaScript. Any JavaScript logic will just work.\nJust check the result of the initial list, and take another action (like calling inquirer.prompt() again) based on their answer.\n. Nest the prompts - Inquirer is only javascript.\n. Most inquirer functions get an answer object as parameter. Pretty sure validate have it too.\n. Doing it manually is not cluttering the API with specific needs and is not that hard. I'll close the request.\n. Why not just exclude the choice from the list?\n. Hum, that might be a bug. Feel free to investigate and send a PR.\n. Thanks for bringing that bug up and offering a fix! That's awesome :)\n. Okay, code LGTM. Please remove the extra dependencies you kept and squash your commits. We'll be good to merge after.\n. Last thing, can you squash your commits into a single one? See https://ariejan.net/2011/07/05/git-squash-your-latests-commits-into-one/\n. Awesome, thanks a ton!\n. Awesome, thanks!\n. 0.11.3 is out.\nI needed to manually validate it was still working as expecting accross a few platform.\n. You could check the cli-width size prior to prompting and change the ASCII art being displayed (maybe show a smaller one on smaller screen).\nThere's definitively no way to resize text programmatically in the terminal to make your art fit.\n. Also rule of thumb, keeping the art under 80char width will match pretty much any screens.\n. It doesn't resize. Like I said, it change the content when the screen size change. You can listen to all those things with Node API. That's not something that Inquirer is handling or is Inquirer specific.\n. We set a default value at the top of this file.\n. Alright, sounds good then!\n. @bcoe done!\n. Ah, thanks for that\n. Yeah, need to update that part of the readme.\nThanks for the PR\n. That's not possible ATM. And to be fair that's not really a priority, I'm not sure how we'd handle a similar use case.\n. Well we'd probably want to do something like the BottomBar module where we'd probably want to split our screen in two stream and make inquirer write to the bottom stream while the log is piped to the top stream.\n. Thanks\n. If you're willing, I'd be happy to accept a PR adding eslint following xo style.\n. Exactly :)\n. @hzoo any chance you're still up for the task?\n. Done.\n. Thanks!\n. Awesome thanks!!\n. 0.12 is out with this fix in\n. We're using lodash pretty extensively in this package. I don't see reason to split in multiple package.\nEspecially, given how npm cache modules and how network requests goes. It's probably faster to load one version of lodash rather than 15 others modules. See the discussion on the issue this PR is linked to.\n. You should open an issue on the cli-width package.\n. ~~PR welcomed.~~\nMy bad, that's a PR :laughing: - let me look through it.\n. Maybe we should instantiate the screen manager inside the UI class. Then we don't have to reach for properties on children objects.\n. Oh yeah, sorry missed that part. Let's go ahead with that!\n. Hey 1.0 just landed. Mind rebasing on it and then I'll take a look at this PR code.\n. > Out of curiosity, did you have any plans to refactor that?\nYes and no. I want to keep the reactive interface hook exposed for now. For semi backward compatibility and just because some people really like the feature. And promises have been a major request for a while, so I felt it was important to ship it soon, especially as Promises are now native in Node.\nI'm not sure how to conciliate all these needs for now. I don't like the monkey patching, but that was the easiest and simplest way to move forward without breaking most people code.\n. Good point. Please open an issue to discuss solutions and way forward further.\n. Thanks\n. Yeah, that was broken on master since a pretty major push to add Promises for 1.0 release. It's fixed now.\nNote that 1.0 is not yet released and promise API won't be working on the 0.x branches.\n. Hey, thanks for sending the PR.\nI'd have merged it, but I had already fixed those in another branch. I usually push code right away to prevent this kind of conflict, but unfortunately I broke a bunch of tests so I needed to fix them before.\nThanks again.\n. Hi, can you start by fixing the coding style? Right now everything changed and every line is highlighted in the diff.\n. @ronkorving I think it's been rebased on a version of master I pulled away due to people getting confused with the current stable release and the planned 1.0\n. That's not currently possible.\n. Please refer to the 0.12.0 documentation here https://github.com/SBoudrias/Inquirer.js/tree/v0.12.0\nor on npm https://www.npmjs.com/package/inquirer\nMaster is now on its way to 1.0, so the documentation doesn't represent the last available version on npm.\n. Sorry, the new version is not released yet (but hopefully very soon). You can see the latest release documentation here https://github.com/SBoudrias/Inquirer.js/tree/v0.12.0\n. I also just changed master to represent the latest release to prevent further confusion as this release is taking longer than usual.\n. There won't be callback anymore.\n. Yes, that function won't be there anymore. You'll call it like inquirer.prompt(question).then(callback)\n. @ronkorving thanks for helping up reviewing.\nI'll come back to this PR once we ship version 1.0 out.\n. Hey 1.0 just landed. Mind rebasing on it and then I'll take a look at this PR code.\n. > Just to clarify for the chalk styling, something such as a colored background or colored text for the key names would be feasible?\nYes totally\n. @senshuu hey, any chance you can do address the review comments so we can move this PR forward? It's been idle for a pretty long time now.\n. @sdotson if you want to address the review comments and make it compatible with latest master, send a PR and I'll merge.\n. Manually fixed and pushed to master.\nThanks for sending this out!\n. Hey @samuelwight thanks for sending this out. We just released 1.0 and the fixes you made don't merge cleanly. Any chance you could rebase on top of current master?  \n. This being quite an edge case, I feel like we shouldn't add further API surface to fix it.\nThat being said, you should approach this problem from the JS perspective. Your issue is how the objects you create get stringified.\nAs so, just define a custom toString() method on the object you return from your filter function, and it'll fix your output :)\n. Why not something of your own:\n``` js\nconst flags = parseCLIFlags()\ninquirer.prompt(excludePreAnsweredQuestions(questions, flags));\n```\nThen this doesn't need to live in Inquirer. It's just a function adapted to your needs.\n. Yeah, that might be a better solution. As I see it now, this feature is out of scope for the project.\n. Isn't this the case already?\n. You can use var cb = this.async()\n. https://github.com/SBoudrias/Inquirer.js#question\n. What's your suggestion?\n. No, you need to pipe the stdin/out to the process or it won't receive key inputs.\n. That being said, I don't know about shelljs specifically. It might be that exec don't allow to pipe the stdio. You might actually want to use node native child_process.spawn instead.\nBut the main point remain, you need to pipe the stdio for it to work.\n. @yorkie that means when you spawn the process, it is not a tty. This is really not an issue with Inquirer itself, you need to make sure you can spawn tty process that'll have the current tty as input/output. I don't know exactly how you'd do that with node.. Added a working example in the repo: https://github.com/SBoudrias/Inquirer.js/blob/master/examples/spawn.js\nLike I said, you need to inherit the current tty\n```js\nvar spawn = require('child_process').spawn;\nspawn('node', ['input.js'], {\n  cwd: __dirname,\n  stdio: 'inherit'\n});\n```. Can you explain what happened? It's not clear from the issue you linked and the related fix.\n. Oh yes. Since 1.0, inquirer returns a promise. So the callback is not used anymore. That was noted in the release notes breaking changes: https://github.com/SBoudrias/Inquirer.js/releases/tag/v1.0.0\n. Ugh, my bad :fearful: \nIt's out now.\n. Thanks\n. Everything is possible, the question is more what would be the API exposed to the user?\n. I think that makes sense. PR welcomed\n. @travi no magic around tests, the npm test command should have this file tests running... Any chance there's an error when parsing/importing the file and that somehow makes the runner skip the whole file?. @travi just checked it out myself, and you're right some tests weren't running. I think a version update changed how mocha treated the glob pattern and drop all test in nested folders (but kept travis green, so it went unnoticed.)\nIt's fixed on latest master.. Hey, there's no plan to add new default prompts, but you can create an Inquirer plugin for it.\nYou can check https://www.npmjs.com/package/inquirer-list-input (and others on npm) for example.\n. Can you post a code example?\nIt's possible we should clone the option object before operating on it.\n. Thanks for the report, I'll look into it as soon as possible.\n. Yes, failing validation doesn't fail the prompt. It warn the users and ask a valid answer.\nThis all happens on the UI. The catch() is only called if a code error is thrown somewhere.\n. @zckrs so you're saying rejecting the promise end up throwing an unhandled error?\nWith every prompt? Only one prompt? Please give me more context + code example if possible.\n. This appears to be a duplicate of the clearer issue #383 - I'll close in favor of that other one.\n. Don't you think it's normal to fail on a type error?\n. @dickeyxxx inquirer relies on the readline. Usually input is read once we reach an end of line marker, and from what I see, this should occurs using yes. I'll see if I have time to investigate further, but to be fair that's not exactly taking top priority on my bug list.\n. I believe the issue is that you need to resolve the promise with the error message. Rejecting the promise is currently handled as a code error.\n. validate: Boolean will return false if you get null or an empty string.\n. Some node version ship with a totally broken readline.\nSee https://github.com/nodejs/node/issues/5384 for more details. You'll want to try again on latest stable Node.js version.\n. Happy to add it. I like the interface.\n. That's not really possible through our API.\nMaybe you could hack something by passing a Stream to inquirer as arguments. Then maybe you could just close the stream.\n. Also, you might wanna look at https://github.com/dthree/vorpal that is built on top of Inquirer, but offers more interactivity.\n. Thanks!\n. PR welcomed. I think the default behavior should be updated to not clear the initial answer.. Inquirer correctly clears its listeners using events constraints. (see the takeUntil https://github.com/SBoudrias/Inquirer.js/blob/master/lib/prompts/input.js#L42)\nSo the event listener issue really is only in your own code.\n. How about we just check the result of the value lookup in the where() and if we get no value, then we throw an helpful error message. That'd be better than a bunch of type checkings that doesn't actually fix the issue.\n. I ran some tests and fixed the bug in this commit https://github.com/SBoudrias/Inquirer.js/commit/8a49df659d54ada610c8437c89a02f3f1572ecd5\nThanks for sending this out!\n. @simonepri I'm not planning to do that right now, but I'm happy to add documentation to the wiki or the readme - and if the community adopt a solution, then I think we could consider bringing this into the core library.. I'm happy to merge test utilities as a test new package to the monorepo. Maybe like @inquirer/test.\nI'm not planning to work on this myself, but I'm happy to help with reviewing and merging the initial version.. I'd just like to clarify as I didn't in this ticket. I'm actually not personally too interested in this concept as I do write UT for project using inquirer and a ton of other libs without issues by mocking inquirer (jest.mock('inquirer')).\nI usually don't need any smart behavior applied for me, just need an answer returned to test it worked fine. And if need, I manually call the filter/validate/etc methods to tests they're working as expected.\nI'm still happy to help review and merge a proposal - maybe as part of the refactor #692. But I hope this clarification can help most readers who might think inquirer isn't testable - you never need a library to provide test tool, just a mock library (jest, proxyquire, mockery, etc). I don't see why it is confusing. If a prompt is skipped, there's no result in the answer object.\n'_' in a will return false in your case.\n. I'm not sure, I really feel if a prompt doesn't run, it shouldn't provide a value as answer.\nReceiving an answer object without the answer allows you to know the question was actually skipped.\n. Explicitly the list prompt doesn't support validation. It present a list of choices, so there's no reason a user could select an invalid value.\nThat being said, it should ignore the validation function altogether.\n. @danielo515 I'm open to receiving a PR to add validation to the list prompt.\nStill, I think the best UX would be to find another way to do that. But I think it's fine if inquirer provide a consistent interface for all prompts type.. Instead of title, use name as the key and it'll just work.\n. Please refer to the documentation inside the Readme.\n. Hi, thanks for your interest, but I have no plan to change the core language of inquirer.\n. Thanks!\n. Oh yeah, missed that :(\nThanks for the PR!\n. I think the multiline input should be it's own prompt. How it work is very different then how the input one is working.\n. @mrkmg oh, maybe just multiline?\nBTW, thanks a lot for this PR!\n. @mrkmg no worries about the screenshots\n. The feature LGTM. Some minor reviews on the testing itself.\n. Awesome!!\n. See the discussion at https://github.com/SBoudrias/Inquirer.js/issues/264 for a better solution to the issue.\n. @jaredleechn Inquirer is only JavaScript, feel free to make it call itself recursively or nesting the calls or whatever other things you can do with the programming language.\n. Define a custom value property, and that's what you'll get instead of the name property.\n. I don't see how the documentation suggest it would be? Can you explain what let you believe that?\n. You want to npm install the project dependencies first. No need to globally install inquirer.\ngit clone https://github.com/SBoudrias/Inquirer.js\ncd Inquirer.js\nnpm install\nnode examples/pizza.js\n. Please refer support question to StackOverflow. This doesn't seems related to Inquirer, you're just wondering how to piece your program together.\n. Woooo, not good! Fixed :)\nThanks for the report!\n. Well, it would be worse in my opinion to provide a default which is hidden; then the user don't even know the default being provided.\nFurthermore, if you can preload a password as text from anywhere, then you have a security leak. Don't ever store people passwords.\nWorth reading: https://nakedsecurity.sophos.com/2013/11/20/serious-security-how-to-store-your-users-passwords-safely/\n. Node doesn't load global packages.\n. Hey, I don't personally use TypeScript. But feel free to send a PR to deftyped if you found a bug. I'll close here as I don't support the typed interfaces provided by other projects.\n. You need to resolve(false) or resolve('error message').\nI think you're just missing your log message because by calling console.log you change the input height which will mess up the next clean/write phase.\n. @tishma add \\n around your console.log if you want to see the message.\nGiven Inquirer needs to cleanup the console content to make dynamic prompting possible, I'm sure you can understand why pushing lines on the prompt doesn't play well.\n. Can you explain your issue clearly and provide minimal code reproducing the issue?\n. No, just do it in your JavaScript code.\nanswer.primaryBrightColor || ''\n. No, that's not possible at the moment.\n. Thanks\n. So instead of one cached lodash version, well be loading over 10 other dependencies? This is not fixing an actual issue.\n. Lodash announced they were reducing size and dependencies on their next release. IMO that's where you should look if you want to help fix size issues.\n. Thanks\n. Why not listen to those events yourself?\n. Thanks for sending this out :) Sorry for the delay to review.\n. Platform? command line? Node and system versions? etc etc\n. @ozzie1998 what's your terminal app?\n. @ozzie1998 I take it you don't understand OSS maintainers are busy sometime?\n. Any chance a promise somewhere is failing and the error is just swallowed?\n. Some node version ship with a totally broken readline.\nSee https://github.com/nodejs/node/issues/5384 for more details. You'll want to try again on latest stable Node.js version.\n. Hey, so the latest version reject the promise when you interrupt the prompt session right?\nI'd like to merge that in. Mind sending a pull request?\n. I feel rejecting the promise would be a better default behavior.\n. Thanks!\n. Only the editor prompt support multiline input.\n. what is versions here? Any chance one of the value in the array is undefined?\n. @dddom you can just do choices.filter(Boolean) to remove the falsy value from your array.. It might just be the side effect of switching process. Did you try logging to a file rather than the stdout?\n. @guigrpa so the plugins we use for the editor is spawning the editor synchronously, so it'll keep the thread busy prevent any async operartions https://github.com/mrkmg/node-external-editor/blob/master/src/index.coffee#L73\nYou might want to bring this issue up with this package author.\n. Manually fixed and pushed to master.\nThanks for sending this out!\n. Fixed a line and merged manually on master.\nThanks a ton!\n. Some node version ship with a totally broken readline.\nSee https://github.com/nodejs/node/issues/5384 for more details. You'll want to try again on latest stable Node.js version.\n. @fearphage I was waiting feedback from the user reporting the bug.\n. Did you try with cmd.exe? Git bash isn't a tty terminal.. @cckelly yes, it's not an inquirer issue as far as I know. Git bash just appear to not support tty.. Some node version ship with a totally broken readline.\nSee https://github.com/nodejs/node/issues/5384 for more details. You'll want to try again on latest stable Node.js version.\n. Hey, sorry for letting this linger. I don't really like the solution as this mean it needs to be provided for each questions.\nIs there any use case where that's what we want rather than a \"global\" option applied everywhere?\n. The ideal API would be:\njs\ninquirer.setOptions({prefix: '>'});\nThis would be unique per inquirer instance.. @Skywalker13 you'd just pass an empty string for remove it.. Closing this PR as inactive and I don't plan to merge it as is.\nIf someone wants to see this merge, they can open a new PR with the code review concern addressed.. Do you have any specific use case where this is really desirable?\nI see how this can be a syntax sugar, but I don't see why or where this would be necessary.\n. I've been thinking about this for a little while, and I think that's a good and easy improvements. I'm merging :)\nThanks for sending this out!. @gentunian sounds like a potential solution. Want to try it out and send a PR?\n. What's the use case for escaping from the list prompt? Why would a user escape rather than just ctrl-c out of the process?\n. validate does take the answer hash as second parameter. I think only filter doesn't.\nIf you want to send a PR, you just have to add it on this line https://github.com/SBoudrias/Inquirer.js/blob/287d437ae505764acbe6d2ecdb5a5c841811e487/lib/prompts/base.js#L88\n. Any chance nodemon doesn't spawn the subprocess as a tty? If it only reports logs from the process, then it won't work.\nAnyway, this is on nodemon side. You should open an issue over there if you want this fixed.\n. Thanks!\n. Please refer coding question to StackOverflow. Specifically, in this case you're asking about how promise are working.\nYou should give this documentation a read: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\n. That's not about Inquirer. Inquirer doesn't shut the process after it ran. Your code will run as any other code.\n. Given it doesn't display color, I wonder if it supports ANSI code at all. If it doesn't, then I don't think it'd ever be possible for us to support this terminal.\n. @nickolasclarke how did you run this program? Right now all your input is being parsed as JS - just as if you were in the node repl. That is the issue @nerdybeast is having, running Inquirer inside the node repl won't work because both are reading from the readline module and parsing input differently.\nThis is not a bug with Inquirer.. You can check how yo handles it by abstracting menus away in routes https://github.com/yeoman/yo/blob/master/lib/cli.js#L146\n. No problem, this is really more a problem of how you use the library than a concern the library should address. The library provide the a base tool, but then it's really up to each developer to architect their app as best they can/know.\nI'll close the issue as there's no actionable item here.\n. Looks like this should work. It's possible we broke something at some point during a release and no one realized? (might even just be a bug with the confirm prompt...)\n. Oh quite possible then, would you mind testing on the latest release?\n. Updated the readme accordingly.\n. @ev1stensberg travis failed due to the code formatting inside the example file you added not being standard with the rest of the library.\nAlso, could you only use lower case in file names. Ubuntu and Mac doesn't handle them the same way and it sometimes makes for really hard to find bugs.\nThanks for sending the PR :)\n. We decided the height of the list based on common terminal size setup. We also don't want to make it configurable for this reason.\nThat being said, we've been talking for a while to make the height relative to the current size of the terminal window. PR is welcomed to add this feature :)\n. Letting the developer specify the height they want don't fix the UX/UI issue for end users.\n. Oh, the UI issue is making the prompt too big and then it'll break if it don't fit the terminal.\n. @ldeluca looks like you're using an old version. inquirer doesn't uses callback function anymore.. Spacebar (that's the standard, it's how it works in UI apps and web browsers). We also support a for all and i to inverse.\n. There's a few plugins for that:\nhttps://www.npmjs.com/package/inquirer-path\nhttps://www.npmjs.com/package/inquirer-directory\n. Well, the prompt method takes an observable as argument no? So if you keep your observable alive, you can just push more prompts as you go.\n. inquirer.prompt().ui.process is an observable if you want to get the answers as an observable.\n. Thanks!\n. It is documented here with the choice key https://github.com/SBoudrias/Inquirer.js#question\n. Can you use when to skip your empty prompt?\n. Well it is just JavaScript, split your prompt array in two and only run the second group only if the results from the first session warrant it.\n. filter takes the whole answer and return the new answer for that prompt (in this case you're stringifying the array and processing it as a string). I'm unclear as to what you expected?\n. You should open this ticket on inquirer-directory. They probably skip the validate function.\n. Thanks!\n. This is intentional. It now returns a promise.\n. Okay, so I've been thinking about this PR and the functionality it provides. Overall, I don't think this is the right approach.\nInquirer shouldn't provide stricter APIs surface to the end user for specific use cases. I want a more generic way to allow these kind of behavior to be define by the user outside of Inquirer. Inquirer should then only provide lower level API allowing you to circumvent the current flow.\nWhat I wish would happen is that outside of Inquirer, you set a listener for the escape key. Then inside the escape key press callback you abort the current question, maybe return to the previous prompt or use the RX api to push a different prompt in the queue - basically anything you want.\nI'll close this PR as it doesn't go in a direction I'd be willing to merge. But feel free to think this issue over and send another PR reversing the control from Inquirer to the api user.. @laggingreflex I think the user should use the readline module themselves to listen to the esc key. In pseudo code:\njs\nrl.on('keypress', () => {\n  inquirer.abort();\n});\nI'd explore what option there is using the RX interface in this case.. Just use a rawlist for a very similar UI. Expand prompts cannot be expanded by default.\n. Yes, that's correct.\nIf you just want to present a list of options, then we consider indexes to be a better UX for the end user.\n. This wouldn't display the prompt expanded, it would just default to expand if the user press enter. Is that correct? Is that what you want?. How about we just make help the default option if no default key is provided?. @ihorskyi cool, I think changing that will make this review good to merge.. Great, thanks!. Node 7.1.0 is broken https://github.com/nodejs/node/issues/9542\nOnly option is to use an older Node version (Node's bug fix is planned for release next Tuesday as either 7.1.1 or 7.2.0)\n. @jondubois the responsibility of pining dependencies relies on the end users with the Node ecosystem. For this you want to use either npm shrinkwrap or Yarn.\nEven if I were to ping the dependencies, each of inquirer dependencies are still not pining their dependencies, and they'd get update. So this wouldn't fix any security issue.. Unpublished 1.3 and released 2.0. See #461\nI'm sorry it causes you troubles, but sometime there's no perfect solutions.. You can use https://github.com/SBoudrias/Inquirer.js#inquirerregisterpromptname-prompt to overwrite the existing prompts. Would you need anything more?. Thanks. Thanks!. I would assume nodemon is wrapping the module in some way that might prevent us from correctly handling the node readline.. Oops, it's done now.. @ZombieHippie I'm not sure I understand your request? What's wrong with using the answer object passed as argument?. It's automatic, the functions just receive them.\njs\n{\n    default: function (answers) {\n        return 'default value';\n    }\n}\nIf this is not working, then make sure you're using the latest Inquirer.. Thanks!. Hello, thanks for sending this PR out.\nI think you should publish this as a standalone plugin for Inquirer.. Just like https://github.com/mokkabonna/inquirer-autocomplete-prompt\nBasically what you did, but you export the prompt itself and let your end user register it.. Hey, I'm not really feeling like publishing a new major bump to revert that change. Given I haven't seen other people complain about that feature, I think it's fine to keep it as is for now.. How would we detect keys press if we can't listen to keyup?. I do believe we're properly cleaning inquirer keypress listeners when the prompt is answered.\nCan you provide a specific code example with which I can reproduce this bug?\nI'm going to close this issue for now, but I'll reopen if you can add helpful details to help me debug your issue.. Inquirer is only javascript, so yeah:\n```js\nvar config = getMyConf();\ninquirer.prompt([{\n  ...\n  when: function() {\n    console.log(config); // it's available here due to variable scoping\n  }\n}])\n``. I don't think it's making the code clearer or easier to understand. Also, depending on each person use case, you would probably want slightly different logic; example, someone want to passnull` value as answer, but someone else wants to ignore it, etc.\nI don't think that's something that would make Inquirer better and benefit most users.. Feel free to send a PR since it looks like you figured out a fix :). Thanks!. Thanks for reporting. It's now fixed.. Thanks!. This is not a feature supported by Inquirer. You'd have to create a custom prompt yourself to allow for that behavior.. You could maybe trigger a SIGINT event on the readline?\nOtherwise, a clean way could be to implement a custom prompt \"confirm-with-timeout\" that'd handle an answer timeout.. Thanks for helping out @souravray :). Also, realize we were doing this here https://github.com/yeoman/insight/pull/51/files\njs\nvar prompt = inquirer.prompt(...);\nprompt.ui.close(); // will cancel the current prompt. Hey thanks for sending this out. I think this is heading in the right direction.\nI think we just need to change two things:\n\nMake auto the default behavior. If pageHeight is not defined, then automatically use the terminal window size.\nWe need to be smarter about letting room for the question message and the validation message. Instead of a hardcoded amount of lines to keep, let's calculate the messages sizes and remove them from the page height.. Well, are you sure onSubmit is getting called?. This example is broken for you? https://github.com/SBoudrias/Inquirer.js/blob/master/examples/long-list.js#L11. If you were able to fix the pagination, then a PR is welcomed.. We could probably add a check and reject the promise in non-TTY. PR welcomed.. Looks good to me, thanks :). Can you explain a bit more about your use case? If you just want to display a prompt line, then you can call console.log().. Not sure I understand why you can't use console.log('my message'). Inquirer is still only javascript. If you log in between 2 prompts, it won't mess up with Inquirer layout.. This looks like the right approach to me, but we need to implement the default close behavior. I don't want prompt authors to have to write this logic themselves all the time.. Thanks!. 3.0.2 is out. Thanks, I believe we just don't handle the Promise failure in that way. When we moved from callbacks to promises, we only handled successful promise passing the status (true/false).\n\nRejected promise were treated as errors. So some code around the promise implementation might still follow this initial behavior.. That's the file handling events https://github.com/SBoudrias/Inquirer.js/blob/master/lib/utils/events.js\nIt's listening for keypress events on the Readline.input stream. If you send your events on that stream, Inquirer will catch them.. Thanks for following up in this.. This is not an option currently. What's your use case?. You can add the information in the prompt message\nLike:\njs\nmessage: [\n  'Some information',\n  'And more info',\n  'And my question:'\n].join('\\n'). There's a few plugins already doing that - you might want to have a look https://github.com/mokkabonna/inquirer-autocomplete-prompt\nThe base prompt in Inquirer at the moment are in my opinion final. I prefer to see extra prompts published as plugin.. We made the exit code simpler by combining multiple code path. Is it an issue that there's an extra white line?. Good catch, that's a bug.. These are fonts related. Different fonts will render glyphs differently.. You're right, the 9 should also be changed. Mind adding this to your PR?\nThanks for helping out so much recently!. Thanks :)\nThis part is a bit weird because we didn't use to allow to pass a pageSize option at all. So the code was apparently only half fixed :P. What I see is like your second screenshot. When user ctrl-c, the prompt goes directly under all the content (including the help text)\nNode 7.6 on osX. Okay, released a new version with the PR fix.. I think that fix is fine given it should only impact force close. As far as I understand #506 problem, it was about prompt closed following usual process (answer all question and be done with Inquirer)\nBut so in your case, the only time the prompt isn't cleaned properly is when you ctrl-c it?. Okay, I'll release it tonight (in my TZ). Awesome thanks a lot!. Looks like dropbox close down the public images... What do people use to host images in readme nowaday?. And it's back! Thanks for the report. Maybe would could print yourself the values in the when function:\njs\nwhen: function () {\n    if (options.foo) {\n        console.log('? My question is:' + chalk.cyan(options.foo));\n        return false;\n    }\n    return true;\n}. I'm not super warm to the idea of allowing users mutate the answers object. That's usually a pretty bad design decision.\nWhy not just provide defaults? Object.assign({ q2: 'bar' }, answers)?. Inquirer won't run in non-tty environment. The git hook is probably called in a sub process or a process without access to the prompt tty.. @jrylan thanks for following up with the proper way to handle it <3. @brianantonelli weird, but that doesn't seem relate to Inquirer. As you might guess, we're not snooping in on your AWS creds.. @brianantonelli I'm not super familiar with that, but any chance some ANSI control chars can't be use on stderr?. Simpler yet, I believe chalk doesn't print colors when --no-color is in the process argv.. Could you explain in more details what you have in mind? And what you're trying to do . Well the message property can be anything. It can be multi-line and contains color. The only missing part is the question prefix who's hard-coded.\nThere's been a few discussion about the best way to change that. Search the issue tracker. I'm happy to merge a PR fixing this issue properly . Hey, can we display a useful message to explain to the user their password won't show up as they type? This might be confusing to a few users who're not used to CLI and unix.. No worry about codacy, it's not really working out. I'll disable it.\nThanks for the PR, it's merged now. I'll make a release soon.. Which terminal are you using?. I'll close as inactive.. Indeed, thanks!. If no value is entered, then you receive a null or undefined value. So you need to handle that type properly. FWIW, we do not only send string as values - like in the case of list and checkboxes inputs. So passing null if no value is provided doesn't break types expectations.\nIMO this seems to be working as expected. I'll close the issue.. Thanks!. Hey @DerekTBrown, looks like you're running in a REPL interface. This means each time you type something and press enter, node will eval the line and try to run it as JavaScript code.\nYou won't be able to run any command line tools inside a REPL session.. Any chance the repl code handle the enter keys when it's used to confirm an inquirer answer?. The library does do it. It just seems like the code you wrote or the modules you used are injecting an extra line break. Inquirer can't know or control that.. Yeah not supported; I'll close this issue in favor of #517.. Hey, thanks for sending this out! Huge improvement!\nI think you're correct that I changed rx-lite to rx in order to get the reduce operation.. Thanks!. Yeah that's a bug, PR is welcomed :). @ujenjt we'd need test and documentation. (You can build on top of the opened PR by cloning PR itself) Or collaborate with the initial author if he still has some time to get this PR moving to a mergeable state :)\nThanks for offering help!. @kbrandwijk sorry, I didn't reply as I saw you had left a list of todos.. You can use the when function to console.log() warning on your own. Or you can just split your prompts in multiples functions that you chain:\njs\nprompt1()\n    .then(prompt2)\n    .then(prompt3)\n    .then(onAnswer);\nI don't think Inquirer needs to provide a specific API for that.. when receive previous answers as argument.. That's not something I've ever tried. Maybe you could register custom prompt types?. I don't know of any sorry.\nI'll close this issue as that's not something I consider in the scope of Inquirer.. Thanks!. Hey, thanks for sending the PR.\nI think the solution was a bit overly complex, so I've pushed another simpler fix.\nI'll make a patch release today. Thanks for the help though.. You're right the error doesn't get cleared.. Thanks for updating the thread! I'll close this issue.\nFix: Upgrade to at least Node v8.1.2. @DerekTBrown sorry, haven't had time to review yet.\nUsually I'm not super open to add new prompts to the core. Maybe you'd like to consider publishing it as a plugin? Like https://github.com/mokkabonna/inquirer-autocomplete-prompt. @DerekTBrown I'll be happy to merge a PR adding a section about available plugins to the Readme!. I think this can be useful, it depends how much space it takes maybe.\nThere's not a whole lot of plugin at the moment, so it shouldn't be too bad. Might just need to consider a proper plugin page eventually if it grows unwieldy.. ^1.0.0 covers ^1.1.3.\nYou can learn more about Semantic Versionning (semver) and npm here: https://docs.npmjs.com/getting-started/semantic-versioning. Please take time to read the documentation I linked to you and understand how the Node community works.\nNo need to get mad.. Can you give context on your OS, terminal, node version? etc etc\nWe can't help you if you don't provide debugging information. What's your Node.js version?\nAlso, is this example working for you? https://github.com/SBoudrias/Inquirer.js/blob/master/examples/hierarchical.js. Yeah, Node 8.1.0 broken the Readline module. The latest release fixes it.\n@NoelAnnParisi try it out and close the issue if it's now working for you.\nThanks everyone :). Sorry about that, git bash isn't a TTY terminal and as such cannot support the interactive features.\nI'd recommend using a proper command line tool.. Thanks a lot, that'll be useful for our everyone :). No, but you can use recursion to do the same thing by yourself. No need for an API, just use JavaScript :). Thanks. Hey @adamreisnz, thanks for sending this. Do you have any documentation of this? It's unclear to me why Node requires us to manually exit the process by calling process.exit() instead of handling it automatically.. Okay, doesn't seem to be documented very well, but listening on the SIGINT cancel the default handler; which is why we need to the exit the process ourselves.\nI'll merge once CI pass.. Thanks!. What do you mean? You could call a function launching the list prompt again?. Looks cool! Thanks for putting this out :). The issue isn't that I don't want to support it. The issue is that git bash is not an interactive/TTY terminal. So it just cannot work :(\nI though windows shipped with bash built in now?. Maybe this can help? https://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/. Thanks for the PR.\nSorry it took so long to review. I wasn't totally sure this was the approach I'd like to take on the issue, but finally I think that's a fair option. I'll merge and release with next version.. @Fynnx1 we assigned default values. Are you having this issue?. Seems to not be a problem according to this answer https://softwareengineering.stackexchange.com/questions/141847/how-does-using-a-lgpl-gem-affect-my-mit-licensed-application and the details on github when you look at the license: https://github.com/aadsm/jschardet/blob/master/LICENSE. @mrkmg Hey Kevin, any chance you could find an alternative to jschardet?\nI know most alternative seems to rely on the ICU binary, so it might be a bit complicated to find a proper alternative.. @mrkmg thanks a ton :). Hey, thanks for opening this issue. Looks like a valid use case.\nGiven you already figured out the solution, would you mind sending a PR? Feel free to also explore UI options.. You can already do that with pure JS by nesting your calls or chaining promises. There's an example here: https://github.com/SBoudrias/Inquirer.js/blob/master/examples/hierarchical.js and https://github.com/SBoudrias/Inquirer.js/blob/master/examples/nested-call.js and https://github.com/SBoudrias/Inquirer.js/blob/master/examples/recursive.js\nAs I don't think adding an extra API would make the use case clearer or make Inquirer easier to use; I'll close this issue. Let us know if you need further help.. Thanks :). You can use the short to provide shorter choice option to display in the list. There's not support for fully customized function to change the output.. Cool, thanks!. Can you try on latest node? https://nodejs.org/en/\nThere was some bugs in the earlier 8.x release breaking the readline module.. Thanks!. You can add an empty line in your question or use the new suffix option.\n{ message: 'foo \\n' }. Which node version? Did you try updating it?. Yes, try updating to the latest node v6.x. Can you post your code?. Looking at the code yes, but it's not a complete example. So there could be other modules touching the TTY that are conflicting with inquirer.\nIt'll be hard to really help without a full example I can run and reproduce.. cc @mrkmg looks like something you could fix upstream no?. You guys are awesome, thanks a lot!. You can:\n\ndisplay a list\nIf user select \"Custom value\", then display an input field.\n\nAnd you use the when option to skip the input field when the user selected a value.. Hey, just merged #571 that does the same thing. Hope it'll accomplish the same for your issue with next release.. @czebe yeah, any keypress can be detected.\nI think using tab to put the default value in is a great idea actually. Would you be interested in preparing a PR?. I wonder if this might just be an issue with the action ordering... Maybe inquirer resolve the promise before releasing the prompt?. Hey, it is indeed a bit extreme. I think lodash is often cached and used within subdependencies.\nI don't think the complexity of this change is worth the benefit. Thanks for sending the PR though!. Hey @leak4mk0, I've been putting aside reviewing this PR for a little while now. I read the code and I don't understand the bug you're having.\nCan you post screenshots of the behavior before and after? And maybe an example to reproduce the issue you're having? Without this information, I can't really make an informed decision as to merge this PR and if this really is the proper fix for the issue. Thanks. @leak4mk0 thanks for the explanation. Can you try to make the code a bit more understandable?\nRight now this is a bit too confusing and quite unclear how it fix the issue.\nI'd suggest assigning more descriptive variable names, stop using or at least removing nested ternary operators, and maybe split the core logics pieces into many functions.\nAlso, would the bug be fixed on windows if we simply do not insert \\n at the line end inside breakLines? (I'd test it myself, but I don't have a windows computer/VM handy...). @leak4mk0 thanks! BTW I've made some major code upgrade in the repo today, might have created a few conflicts on your side.. Thanks a lot :). @joshkel Oh hey, actually I think it's fine as is. I've played around the code thinking about fixing myself to make the next release; and after all, I thought it wasn't really clearer with standalone functions. So we're good like this :)\nThanks again for sending this PR. Did you try with latest node?. Okay, I'd suggest trying with latest. Node had a lot of issues around their Readline module a few months ago. And I can't really fix inquirer when the core has major bugs.. I'll close this issue and will reopen if need be. But this was a known issue with old Node.js versions.. You can split your prompts in 2 functions. Then only call the second function if the first answer is \"no\".\nThis is just JavaScript code, no special feature on Inquirer to do this.\nNote, you could also use the when option if it's more convenient for you.. Oh yeah, that is a weird behavior. Do you want to send a PR? I think it'd be simple to fix :). Thanks :) I'll cut a new release this weekend most likely. @willclarktech I don't think this can ever work in the node interactive prompt as each line returns is also handled by the node interactive process.. Ah, thanks!!. Which terminal?. I'm wondering, so there's no more rx lite?. Thanks for your answer. I'll merge this branch, but not right now as I just released a major version. I want to make sure this release is stable before pushing a new one out.. @kbrandwijk are you waiting for this for new features?. I'll cut a release later today :). Is it purely visual?. Thanks! I'll make a release tonight.. @gms1 yeah, highly probable Nodemon doesn't pipe a fully interactive prompt by default to the subprocess it spawns.\nAny chance other people reporting this issue are also not running Inquirer through raw node process?. When failing validation, the error event isn't triggered. The error events would only get triggered in case of an exception thrown from code (throw new Error(); or just broken code).\nWhen the validation fail, inquirer handles it an display the error message automatically to the user, so you would see a re-rendering on the readline. I don't think you could get this from the reactive interface.. I love this idea, although I'd prefer to keep the assets locals to this repository so the project remains the owners of the demo images.. Looks like the white text isn't showing up on the latest demos?. Thanks for the PR! I merged it aside to remove the commit I added on top.. Which ubuntu terminal? the latest one?\nAnd how do you run the examples? (just node examples/list.js?). Yeah the weird thing is that if you see the raw code rather than arrow keys, it means the terminal isn't registering the keyboard events and is printing everything directly... Not sure where to go from now as I'm no ubuntu expert.. This would be a great improvement I believe.\nAnyone wants to work on a PR?. @kbrandwijk I removed Codacy as its supports for eslint config is too flakey. It kept starting to mark PR as failing every few months.\nI'd love to get this merged. Any chance you could resolve the conflicts and try to finalize the integration?. I don't think you need a change to inquirer to handle that. Just make a recursive function or chain 2 functions calling inquirer together. Some JavaScript code scheduling your events should work just fine.. If the process just exit, my guess would be that there's a lock on the process (like no callback keeping the process alive). Should we just reject default passwords?. Isn't it weird though to have a default password and not being able to see what it is?. @pofallon for this case, I'd just edit the message value and wouldn't specify any default.\nI see a lot of workarounds to most issues here. I don't think hiding the default password is the best default behavior for this library or a blocker to implement your own custom behavior around that.. I'll accept a PR on this issue. Seems there's enough community support to push the needle and hide the default password when provided.. Merged on master, I'll try to release a major version in the coming days.. Thanks for sending the PR!. Yeah, I think it'd make sense for us to handle that properly. Want to send a PR?\nI think you'd need to modify this file https://github.com/SBoudrias/Inquirer.js/blob/master/lib/ui/prompt.js. Thanks!. Yes, that's just the list prompt.\nIt doesn't have radio (there's no mouse on the console), but it's the same principle.. Can you add documentation for this new feature?. Yes, I think the approach and UT are good.. Thanks! I just updated piece of the documentation because the new API isn't actually asynchronous.. Thanks!. Do you mean if only some when functions return false the changes aren't ignored?. #665 should've fix this issue :)\nLet me know if that's not the case!. So this might be caused by having 2 readlines runs over each other. The repl is also using the readline, so there might be some conflicts.\nIf you want to dig into that issue, you'd probably want to modify this function: https://github.com/SBoudrias/Inquirer.js/blob/master/lib/ui/baseUI.js#L43\nIf you find a solution, please send a PR!. Thanks!. Chances are that VS studio doesn't have full TTY support. I don't think you'd be able to get this working outside your terminal (or until VS add full TTY support). I use the chrome devtool connected to the node remote debug process. This probably works similar with vs code. If anyone want to send launch.json config for the project. I'll be happy to help merge it.. Want to send a PR?\nI think this might've been done because ANSI code in string might mess up the size calculation (although I do believe this might've been fixed since then). @dwieeb might be an issue with Codacy. I'll check it later on.\nI'm not sure about this branch, I feel like this wouldn't be a very clear change for people using the rx interface. This package has a lot of issues about size though, I feel I get a bug report or similar PR every few months... Not sure what to do about it, I feel like this should be fixed upstream.. > It looks like the next major version of RxJS changes imports anyway. Perhaps when Inquirer upgrades to RxJS 6 (which will be a breaking change) this PR can be included?\nYes, this would be awesome!. @dwieeb as I merged the rxjs 6 branch, I'll close this one. But feel free to follow-up if you think we can do more :). There's no such prompt at the moment. The closest would be the normal input prompt with a validation checking user only inputted numbers.\nI'm not against adding such a prompt to the core if someone wants to send over a PR.. Oh good point. Anyone want to send a PR to update the README?. Thanks for the PR!\nWe can properly close this issue now :). Thanks :). This option is not opened as something that can be programmatically done now.\nNot sure Inquirer provide a proper interface for this to be easily implemented/and usable for developers.\nI'm open to API suggestions; but not totally sure I want to add this feature unless there's lots of community support.. I'll prepare a release later today.. Good idea, thanks :). @LitoMore any chance we could use the same transformer function to also transform what we display once the prompt is answered?\nI'd like to limit the amount of new API we add.. What about a flag passed to the transformer function? isFinal or something like this. Awesome thanks!. Last thing before merging, could you update the README documentation for this feature? Thanks!. Thanks! :). I'm wonder if somehow inquirer kills the readline? \nRelevant lines of code if you want to test it out https://github.com/SBoudrias/Inquirer.js/blob/master/lib/ui/baseUI.js#L54. Thanks!. I think you could achieve this with https://www.npmjs.com/package/yargs-interactive\nThere's a few other projects on NPM also handling the logic between args parsing and interactive prompts.\nHope this helps :). Thanks!. Thanks!. It would be possible with a custom prompt - but that's not a feature of the input prompt right now.\nMaybe a solution is to have an extra property, like suffix append that after the cursor. I don't think there's a way this could work with the transformer function.. Hum, I wonder if we could provide the caret in a way like this:\njs\ninquirer.prompt([{\n  name: 'suffix',\n  type: 'input',\n  message: 'suffix:',\n  transformer: function (a, b) {\n    return `${a}${inquirer.CARET}.mydomain.com`\n  }\n}]);\ninquirer.CARET could be a Symbol or a unique enough string we'd search for and when found use to position the caret maybe?. Seems good, wanna send a PR?. @gentunian don't worry about Codacy, looks like they once again stopped parsing the eslint config properly... I've disabled the check as it didn't provide value and confused contributors.. @gentunian no issues with --amend. Just make sure you force the push otherwise the updates won't be seen here.. @gentunian I thought this branch still had the off-by-one error on the cursor? Is this not the case given we're still slicing with the indexOf() result?. Thanks! :). @ehmicky thanks for helping out.\nThat's indeed what should be done now that lodash published a fix.. Thanks!!. Hum, how about we change prefix the contain the space, so you can more easily overwrite it without relying on \\b?\nIf that sounds reasonable to you, I'll be open to receive a PR and merging it.. oh yes, right now we hard the space here: this.opt.prefix + ' ' + chalk.bold(this.opt.message)\nWe should instead remove the space there and put it in the prefix (e.g. prefix = '? ';)\nThat way, when you set a custom prefix, you can remove the space is you want.. @NearAutomata There's a PR open to bump rxjs to the latest version. That'll also be a breaking change, so now is actually a good time to get a breaking change in even if it's small.. @NearAutomata I'm away from home now, so not sure when I'll have time. I'll gladly merge a PR sooner though.. Could you achieve the same thing with the short/name options?. Thanks!. Thanks!. I don't think you'll be able to write to /dev/tty directly. Node only supports stdout and stderr as far as I know.. @kwkelly actually, you can pass any stream as output. So it should work fine with the result of fs.createWriteStream.. Anyone has a suggestion on how to reduce rxjs size? We made the choice to use rxjs a long time ago, but it's been causing file size issues for a long time now.... @hdorgeval thanks for taking the time to answer :)\nIn unit test you'll want to mock inquirer (like any other system input usually). jest.mock should work just fine for that.. Check Node child_process core module. It'll do what you need :). cc @dwieeb . > Easier/better access to the writable stream\nI'm not completely clear on what the issue here is and what is involved. The ionic-cli example seems to just mute the stream to prevent user from typing while the bottom bar is showing up.. @wtgtybhertgeghgtwtg checkout https://github.com/SBoudrias/Inquirer.js/pull/688\nWent with a similar solution, just no need for inquirer.prompt at all to use prompts if imported directly. We'll keep inquirer.prompt for convenience and backward compatibility, but it won't be a requirement for simpler usage.. Closing in favor of #692 . If/else works just fine\njs\nif (choices.choices === 'Get list of users') {\n   getListOfUsers();\n}. Yeah, wait for the first one to complete before triggering the second one.\nPure async won't ever work as a user can't answer 2 prompts at the same time.. @jwinnie yes that would be a good approach. Here's example code:\n```js\nconst options = await getOptions();\nconst { choice } = await inquirer.prompt([ ... ]);\nconst options2 = await getOptions2();\nconst { choice2 } = await inquirer.prompt([ ... ]);\n```. Yeah, we'll see how much people contribute and how fast this move forward. But I'd like the refactor to be completed in a few months.\nBut anyway, by adding typescript, it'd be easy to support Node 6 no?. You should check the refactor plan over here: https://github.com/SBoudrias/Inquirer.js/issues/692\nThe new core will make adding similar hook trivial.. Thanks!. Hey thanks! \ud83d\ude04 . I think stripping the quotes might have side effet for other users who might need them. I guess you could allow spaces and strip them in the filter function.\nOr maybe use backspace on empty answer to get rid of the default?. Yeah, I think this would be more intuitive and more clearly communicate it with the user.\nWant to send a PR?. I see the problem. I think on keypress, we can check the value of this.line. And if the line is empty then we set a flag like this.isEmpty or a relevant name. Then if this.isEmpty === true && key.name === 'backspace' we clear the default.. Thanks! The latest version looks great :). @adityaparab I'd suggest you to try asking on StackOverflow. I do not maintains the typescript bindings myself - and do not use typescript, so I don't know much to help you out.\nGood luck.. Closing as this question was posted twice.. Hey @PaQ666,\nThis isn't something I've tried making work. You could get some inspiration from the BottomBar module in this repository - but it's not working out of the box with prompts.. That's not a feature Inquirer expose - and I'm not really interested in adding support for it as it feels quite an edge case.\nI'd suggest you to find a better prompt UX for this. Maybe just string separated by commas? Or you could write your own prompt module to match your own use case.. Error: Failed to read temporary file - are you running with sudo or somewhere your user do not have write/read permissions?. Hey, there's no such things as option.source. Maybe they use a custom wrapper on top of Inquirer or they use the key for their own reference. Either way, this is not an Inquirer option.\nHope this help a little :). > are you in beijing of China now?\nYes, that's where I live \ud83d\ude1b \nThe source parameter might be from an inquirer plugin too. You can see it's not used in Inquirer's own code base with search: https://github.com/SBoudrias/Inquirer.js/search?q=source&unscoped_q=source. @NE-SmallTown Feel free to ping me on gitter, I can send you my wechat.. Thanks. Thanks!. @sergei-startsev I wasn't personally in a hurry, but as you requested it I'll cut a release tonight.. I think this is reasonable. How do you feel about sending a PR? :). Thanks. Thanks, this actually makes a lot of sense \ud83d\ude06 . Hey @phantom0424, thanks for the PR. Always happy to welcome new contributors!. @phantom0424 I think you closed this PR by mistake right?. Thanks!. Any specific reason you need to prevent this behavior?. Hey, thanks for sending this PR!\nThe linting is failing on Travis, could you fix that? Once CI pass, I think we'll be good to merge.. Good idea, thanks!. Hey @felixfbecker thanks for opening this issue.\nI've already though about this as part of a refactor I want to see in Inquirer. It's not been progressing very fast right now, but if you're willing to, help would be welcomed. You can learn more about the refactor over here https://github.com/SBoudrias/Inquirer.js/issues/692\nI'll close this issue as I'm not really open to release a major breaking changes without major changes to the core library.. You can find help on how to mock modules on StackOverflow. (you'd want to use something like jest.mock(), proxyquire or equivalent feature with other tools)\nI hope this doesn't get around too rudely, but I cannot offer technical support to all the users of Inquirer. Let's keep the issues channel for bugs and feature requests.. @itsravenous-sky couldn't you do this anyway? Split your prompts in 2 calls to prompt(), then check if the values are valid and allows you to move forward with the second set of questions.. That was the initial goal, but the implementation didn't turn out as I had hope. Currently this is not possible.\nThe main issue is that combining 2 readlines (where one readline is a children of the first one) wasn't really working properly. If there's was always one write per prompt screen update - it might be possible. But right now there's no easy way to know when the prompt readline would need to be refreshed inside the bottom bar.. Thanks for scripting the fix! I'll republish when I'm back from vacation.. It should be compatible... I haven't heard of any upcoming breaking changes on Node part. You should open a ticket over there if it really stop working on the latest version.. I think it'd be okay to set the answer to default when when returns false.\nDo you want to send a PR?. I don't think the use case is worth adding so much complexity and API surface to Inquirer.\nI'm okay to keep as-is or go with automatically adding default. Exposing an extra configuration option is not something I'm willing to merge at the moment.. Hi, we're running a refactor within which we hope to improve the startup performance considerably. All the help is welcomed over on https://github.com/SBoudrias/Inquirer.js/issues/692. Do you mean to clean the terminal?. Thanks!. @balupton I think this can be fix in user land. How about prompting at the end of the questions if they'd like to edit any answer? Then just show all answers in a list/checkbox prompt and make them select those they wish to edit.\nI don't think that's something Inquirer should handle in the core library.. Nothing prevents you from using prior answers to decide what/how to handle the next prompts. You can use the answers passed to most callbacks, or you can just split your prompts in 2 pieces (or more.) At the end of the day, this is just JavaScript, just use the language.. Thanks!. The script needs to inherit the stdio stream to be able to listen and respond do keypress. If the stdio stream allocated isn't a TTY, node readline module will auto exit . @mickeypearce looks like in your case it ignores the ANSI clear codes... I'm not sure why. But I'd assume somehow the terminal prevent this from spawned processes. Did you try with exec?. Thanks for following up :)\nI didn't know the exec < /dev/tty; trick, that's quite handy!. Thanks!. Thanks for contributing to the environment :). Looks like a bug :)\nCode is inside this file if anyone wanna try fixing this https://github.com/SBoudrias/Inquirer.js/blob/master/packages/inquirer/lib/prompts/rawlist.js. Thanks!. Thanks!!. Thanks!\nI'll try to prepare a release during my evening as time permit.. :+1: thanks!. Thanks!. Any chance you called inquirer 2 times? Maybe there's some issue with listeners cleanup on the readline?. Thanks a ton for following up on this @Ezekiel-DA !!. You probably need to run yarn lerna bootstrap to get the tests to pass . Sounds like we might not be escaping ansi code (or other code?) used by terminal link when calculating position.. Thanks!. Thanks a lot :D. Thanks! I didn't know that. Are you suggesting we change cli-cursor dependency as it captures the SIGINT?. This change looks fine to me. Let's just add an error message \"this option is disabled\" when pressing enter on a disable line.. Thanks!!. This looks like a Node.js bug; can you try reporting it over there?. Oh yes, git-bash is not a proper tty terminal, for some reason it has never worked properly with Node.js readline.\nI'd encourage you to use another terminal on windows; git bash has a many issues with many tools.. These clouple lines could be simplified like this:\njavascript\nvar mask = new Array( value.length ).join(\"*\");\n. Add spaces between the [] brackets and content\n. Add spaces between the [] brackets and content\n. This approach is fine and clean. :+1: \n. use if/else here. There's no advantage to using an inline command here.\n. multiple var to stick to project style guide\n. Can we just add chalk.bold to the _.compose list?\n. Got it.\n. I don't like how this internal detail is exposed publicly. I might add a getter method to access prompts... Still considering.\n. This will require a takeUntil\n. Yes, that's what you'll need.\n. Pretty sure you can safely split only checking for \\n. See https://github.com/SBoudrias/Inquirer.js/search?utf8=%E2%9C%93&q=split\n. What happens if we just always return to the left most position?\nWhat happens if the terminal windows is wider than 1000 chars? (is this a possibility or is a 1000 safe)\n. Make this an if statement.\n. cliWidth can return 0 which is definitively not what we want.\n. In this case: https://github.com/knownasilya/cli-width/blob/master/index.js#L17\nPretty sure all the time on Windows.\n. You can get free Windows VM to test on https://www.modern.ie/en-us/virtualization-tools#downloads \nPretty sure you can install git and checkout inquirer with them.\n. Seems like a potential workaround.\nAnother is to manually handle line returns so we stay consistent. But that might just bring new kinds of issues.\n. That is correct as we use a mocked readline. So there's no usual Readline behavior during testing.\n. Sorry, I'm not sure I understand this question. Mind clarifying?\n. can you remove the extra whitespace\n. use one var statement per line.\n. Just need single backtick for inline code highlight.\n. Also, please keep the Xanadu reference.\n. Note sure what changes on this line, but keep a line return on last line.\n. I'm fairly certain we can just call this.rl.output/this.rl.input without requiring us to keep the reference around.\n. I think inquirer.createPromptModule() should take input/output options. inquirer.prompt should stay as is.\n. FWIW you can delete this line. I forgot to remove it when I moved cursor support to cli-cursor.\n. We should pass both the pointer and the offset. A single value (pointer + offset) should work just as fine in this case.\n. Also, I feel like the correct position really just is this.opt.choices.choices.indexOf(activeChoice). As this will position the choice item in the full array (with separators).\n. Can you add an indexOf function on the Choices collection object rather than accessing inner properties of the object (choices.indexOf rather than choices.choices.indexOf). This is already done for other Array.prototype methods here: https://github.com/SBoudrias/Inquirer.js/blob/master/lib/objects/choices.js#L98\n. Please don't bump versions yourself. The maintainers will take care of that.\n. Let's drop the custom code in favor a module doing what we want - in this case https://www.npmjs.com/package/string-length will do both astral points and ANSI.\n. We don't use these two modules anymore. You can remove them.\n. How about we pass the width as a parameter instead of making those class method?\n. I mean breakLines(text, width);\nIMO that makes function easier to tests as they don't rely on an obscure and ill defined this value.\n. Let's calculated the width value only once at the beginning of the function and reuse it elsewhere.\n. Okay, so if we do this, we need clear relationship. Modifying an object outside your own scope is pretty bad practice and it'll make it hard to debug in the future.\n. Would it be too cumbersome to remove promise.rl and reference it as promise.ui.rl in the tests?\n. This approach is way better in my opinion, but I think we can do something better:\nWould it makes sense for the BaseUI to call a method (forceClose or cleanup) on the Prompt instance. Then the prompt release the cursor in screen manager. That approach would really mean we don't pass or reference the screen manager in objects that don't own it.\n. Okay so, let's simplify this case:\n- space: select one\n- a: select all/none\n- i: inverse\nLet's drop random.\n. All these names are not really reusable. I'd prefer these observable to be called aKey, iKey, etc.\nWe might want to listen to a keypress, but it might have another meaning than \"select all\" in other contexts.\n. The a key can do both. It select all if not all are selected, and unselect all if all are selected.\n. Don't mutate the pointer. If we do so, then we'll lose the position.\n. Instead use this.opt.choices.forEach(iterator) and the other iteration methods on the choice object.\n. We need to make this message way shorter now that there's so many keys.\n(Press space to select, a to toggle all, i to inverse selection)\nMaybe with some chalk styling for the key name?\n. Re-reading the issue, this section here actually is the only bug.\nIt'll ignore falsy value. As so, that's actually the only fix we need.\n. Can you return the promise instead of using done (like the second test).\n. Any things we could do to get some input back to the prompt? It'd be nice if we could expect(answer).to.equal('dummy answer');.\nThe empty string is not super insightful in this case :(\n. Hey, this module is used all over the place. Let's keep it compatible with es5 otherwise it'll break for users on older node versions.\n. Let's remove console.log calls\n. You can use Array.prototype.find to not do a full pas over the array.\n. Don't bump versions yourself. I'll do it when a release is ready to launch.\n. Would (this.opt.prefixMessage || chalk.green('?') + ' ') work just as fine?\n. Just change this to this.opt.choices.length - 1;. You don't need this anymore. I see you reverted the use of this.opt.choices.length, any reason for that? Doesn't look like the pluck is useful here as we only want the length.. There's choices.realLength https://github.com/SBoudrias/Inquirer.js/blob/master/lib/objects/choices.js#L40. Let's not overwrite linting rules on a per file basis.. This doesn't get restored (same with other test).\nIn this case you'd want sinon.stub(process.stdout, 'getWindowSize').returns([80, 20]). Call paginator.getHeight() directly in tests.\nTo make it shorter, maybe iterate over the different test case rather than creating one it() block for each value.. Let's move this line into the class constructor function.. We'll be able to get rid of this function once we move the initialization to the constructor.. I wonder if it'd make sense to store the prompt instead of the screen; egthis.activePrompt = new Prompt();\nThen we could call this.activePrompt.stop() and that function would be in charge of clearing the screen. It's an extra layer, but it'd prevent having to pass this.screen as argument everywhere.. Instead of tracking the this.hints value in many methods, it'd be simpler to think about firstRender.\nWhat the code you changed basically means only render the hints on the initial render. So I think that's how we should model the code. Render hints on first render, hide afterwards.. Let's not process.exit, this prevents users from handling the exception.. Hey, I feel like it'd be pretty simple to make breakLines and normalizedCliWidth into fully standalone functions.\nThen we wouldn't need to keep track of whether or not we received a ScreenManager instance.. They could be static on ScreenManager for now at least.. The readline instance (e.g. used in this.rl.output) is always available on the UI classes as this.rl. So yeah, we can pass it in as an argument.. Thanks for sending the fix. This code would be cleaner as:\njs\nthis.selected = Math.max(this.opt.choices.pluck('value').indexOf(def), 0);\nMind updating?. Overall looks good, just same comment as the other review about this piece (index !== -1 ? index : index);. It's cleaner (less code branches) if we use Math.max(index, 0).. Missed that earlier in the PR, but we can do all this in a single loop if we use Lodash _.findIndex\n_.findIndex(choices.realChoices, ({value}) => value === defaultChoice)\n(and let's do the same with the rawlist to keep the logic more consistent). Yeah this only applies to the view layer. It doesn't modify the actual answer.\nAs such, this function cannot be used to prevent the user from entering more than X characters. It could only be used to modify the style of the input text.. Not sure we should use Math.random() here. This would break if the system ends up with many version of inquirer installed and some plugins are relying on another version.\nLet's hardcode a random string here instead.. When not found, it'll do slide(0, -1). That's probably not what we expected. Maybe message.slice(0, Math.min(0, message.indexOf(constants.CARET))) will fix this.\nI wonder if that's causing the bug you talked about with regards to the caret position being offset by one.. Let's keep standard with the other version def ^3.0.0. Math.max() would work then; just provide the wrong function as example :P. To explain the issue with multiple versions, it's because with nested modules systems like Node, there's no guarantee there's a single version of Inquirer installed.\nSo each version get its own instance. So things like randoms values or instanceof checks on classes breaks between different instances. And these issues are really hard to debug on the user side as it's hard to see - and just think about. (Had an issue like this when we first implemented the inquirer.separator for lists)\nHope this makes a bit a sense :). add a 3rd argument? { isFinal: this.status === 'answered' }. Ah I thought I initialized it that way, but looks like I messed this up. Updated.. I think I prefer to keep it flat to reduce unnecessary folder nesting.. When rewriting this line, the blank space between the checkbox and the option name has been removed (e.g. []Choice A vs [] Choice A). We'll need to also account for the selected index going under or over the list length.. Is reassigning the rl.line necessary? I don't think it'll be in this case.. Should this just be =?. I'm not sure it's more readable, what we want is to keep the answer on the line. Having += is confusing because if the line wasn't cleaned and cursor reset to 0, we'd end up duplicating the answer. Without knowing the internal of how readline works, this would be quite confusing.. ",
    "mchlltt": "Apologies for reviving an extraordinarily old issue, but I wanted to check whether multi-line choices ever became possible. I'd like my user to be able to view pretty-printed JSON objects and choose between them, but the fact that they're ~5 lines each means that the interface is bugging out pretty badly. I've tried upping pageSize to no avail. I'm sure I could find a workaround for my specific case, but I thought I'd ask.. @SBoudrias - Ah, thanks :) I'll keep an eye on that PR in case I'm able to help out.. ",
    "eddiemonge": "+1\n. (Use arrow keys or corresponding number keys)\n< > 1. Option A (for multi select).\n(1) Option A (for single select).\nToggle the state and move to it for multi. For single, move to it and require pressing enter then\nIf there are more than 10 options, the UI is probably broken. Thats a lot of options to choose from.\n. i disagree on the visual tips part partially. if should have the number indicators so if there is a list of more than a few items you can quickly see what the number is. For me, its around 5 or 6 that I start counting and if im counting to find the number then its already slowed me down\n. +1. karma init does this reasonably well\n. more friendly i think than checking both boxes and then the validation fails and they have to go uncheck one of them\n. use case i have is for generator-angular:\nPlease select which modules you could like:\n[] Angular Animation\n[] Angular Cookies\n[] Angular Router (select this or UI Router)\n[] UI Router (select this or Angular Router)\n[] Angular Storage\nI could break out the router selection but its an extra action the user has to perform. It'd be nice if they could do it in one go but if its too hard to do or does seem user-unfriendly then I'll go with two prompts. @addyosmani thoughts on UI-nice-ness?\n. geez that was fast\n. Here's a use case I have:\nA prompt has a default value, needs to be a certain string length and can only contain certain characters.\nIf a user enters a string, it should do the filter first. If that value leaves it an empty string then it should use the default value. Then validation should fire.\nOr if they enter a string, and filter leaves it empty then validation should complain. That might be more appropriate then automatically using the default value\n. input. \n. Ok nevermind. already fixed. had to go into a module and update its sub-dependencies. (yo)\n. @johnlegend see Simon's comment above ^\n. @johnlegend If you want to land this please follow-up, otherwise the changes will be incorporated without credit :( for you\n. I think OSX actually has the worst looking one. Besides that though :thumbsup: \n. ",
    "mrkev": "Probably related. I get the following bug:\n\n1. No newline when text won't fit on a single line. The next line is drawn over the previous.\n2. If this happens and I hit backspace, the last line of the console gets \"eaten\" and the whole thing moves up. (This stops when the text fits in a single line again) \n3. This also happens when I press enter, plus the console doesn't get cleared up correctly.\nUsing inquirer 0.5.1 and the following index.js:\n```\nvar inquirer = require(\"inquirer\");\nfunction someString () {\n    return \"nm\"\n}\ninquirer.prompt([{\n      type    : 'input',\n      name    : 'name',\n      message : 'What up?',\n      default : 'hi'\n    }], function( answers ) {\n    // Use user feedback for... whatever!!\n});\n```\n. +1\n. awesome thanks!\n. ",
    "Rolilink": "Love to see this, actually i wanted to use password prompt for one of my generators!\n. i will open it on wip, sorry this is my first collaboration to an open source project, will lint my code and make another pull request.\n. ",
    "robwierzbowski": "Thanks!\n. Looking great! Couple notes:\n- I don't think the (default option) is necessary on the list prompt type, since the marked checkbox is a clear indicator of what you get when you press enter.\n- The [?] prefixes are a node prompt library default. I don't think they're needed, but it might be worth getting other opinions.\n- The cursor bumps right up against the last list prompt option now, which is a little constricting. Could it be hidden on list prompts, or can a space be added in between it and the last prompt choice?\n\nGreat improvements so far. I'm really looking forward to using this.\n. Just noticed the folding. Very cool.\n. Great! I'll test out tomorrow.\nDo you think it would give the user more information at a glance? For me, those states are apparent based on what text is being presented to me at the time. I do really like the color change from white to blue when you enter a choice \u2014 that helps me easily see the choices I've made after everything's been filled out.\nI was thinking the checkmark would be a nice replacement for the x in the list prompt. Like:\n\n. Although I don't know if the check character is universal, or if I added a font with it at one point when configuring zshell.\n. +1 on this.\n. Thanks!\n. I think a user needs to know what they'll get if they press enter. Currently the jekyllrb generator grabs a user's name, email, and github user name from the .gitconfig, and gives a prompt like:\nYour email: (hello@robwierzbowski.com)\nWithout a default, how does I know that:\nYour email:\non enter will insert my email that includes my painfully long last name?\n. Ha, sorry, by \"default suffix\" I thought we were talking about the (default option) indicator. Yeah, the colon, definitely removable.\n. Confirmed that the nfinityC's are gone on Mac. Thanks!\n. Thanks.\n. What would the interaction be? Maybe check/uncheck with spacebar?\n. Yep, works! \nWhen an input prompt is followed by an input prompt it still inserts a blank line at the bottom of the terminal, but that's not a big deal. If you end up fixing this sometime in the future, great, but no worries if not.\n. IMO this is a good place for decisions and consistency over options. Ideally you could read the height of the terminal and set the pageSize to 7 or 50% of the terminal window, whichever is larger, but barring that a single number seems best to me.\n. ",
    "stephenplusplus": "It just keeps getting better and better :cool: \n. I'm always sneakin' in rebases :) Oh well, as long as it all worked out in the end!\n. I like either removing the : or\njs\nif (!promptMessage.match(/[?|:]$/)) {\n  promptMessage += type === 'confirm' ? '?' : ':';\n}\nBecause:\njs\nprompt({\n  type: 'confirm',\n  message: 'Would you like to proceed'\n}, function(){});\nwould be:\n[?] Would you like to proceed (Y/n)\nbut it might look better:\n[?] Would you like to proceed? (Y/n)\n. What if just a string was passed to the choices array? \"------------\", \"######\", whatever. That, or  your first suggestion is my +1.\n. Ah, I see. Bad idea, then! Unless that functionality was ever intended to\nbe deprecated. Setting a value to a longer option name seems a little\nproblematic; eg \"Run the Angular generator\" and props.choices.indexOf('Run\nthe Angular generator') > -1\nOn Saturday, August 17, 2013, Daniel Chatfield wrote:\n\n@stephenplusplus https://github.com/stephenplusplus Would that not\nconflict with the current API, as it allows just strings to be passed\n(set's both name and value to whatever the string is).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/SBoudrias/Inquirer.js/issues/53#issuecomment-22811377\n.\n. Sorry, that video didn't turn out well. The line duplicated as well as when\nI hit \"y\" to answer a question, it comes up as \"yy\".\n\nOn Monday, April 28, 2014, Simon Boudrias notifications@github.com wrote:\n\nYou mean the npm being outputed after you exited? Or the line being\nduplicated at the beginning?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/SBoudrias/Inquirer.js/issues/109#issuecomment-41610132\n.\n. generator-angular's latest release.\n\nOn Monday, April 28, 2014, Daniel Chatfield notifications@github.com\nwrote:\n\n@stephenplusplus https://github.com/stephenplusplus Which generator is\nthat with? I can see how that would happen if using the API incorrectly.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/SBoudrias/Inquirer.js/issues/109#issuecomment-41613287\n.\n. Hmm.\n\n``` bash\n$ node -v\nv0.10.26\n$ npm -v\n1.4.3\n```\nHappens in Terminal and iTerm 2 for me.\n. :+1: I bet it'll look cool after answering a few prompts, having them collapsed, eg\n```\n(?) How are you? Good.\n(?) Why is Sindre obsessed with horses? Cause he is one.\n(?) What now?\n  Talk about horses.\n  Talk about unicorns.\n\nTalk about unihorns.\n```\n. \n",
    "sindresorhus": "\nI was thinking the checkmark would be a nice replacement for the x in the list prompt. Like:\n\nI agree. Might also consider dropping the brackets [].\n. Yay \\o/\n. Just wanted to say you're doing an awesome job with this prompt. I've had \"create a better more interactive prompt\" high on my todo-list for a long time, but never was able to realize it. So happy we finally have this.\n. No, I don't see the point. Using the standard colors (green, red, yellow, etc) will look nice in any Terminal.\n. I agree, I see no use in having a default suffix.\n. Also, when just hitting enter without any input, it ignores the default: false and returns true.\n. Sorry, 1.1.4 was stuck in the npm cache.\n. Yup, just checked out wip (https://github.com/SBoudrias/Inquirer.js/commit/bad2d3071fdb4724f57b0c111c0e35bf7362d2b4) and still seeing the issue: https://dl.dropboxusercontent.com/u/71884/inquirer-flicker-bug2.m4v\n. A second\n. It still flickers for anyone using Terminal.app on OS X, but i guess there's no easy way around it.\n. yup\n. ^ +1\n. - Use \u276f or \u2023 character instead of > on unix.\n- I think it would look better if you dropped the brackets []  or maybe even used another check character \u2b21\u2b22 \n- Shouldn't the selected checkbox be green?\nOther feedback:\n[?] could be ?\u20e3 on unix. \n. Awesome!\nSidenote: Add some screenshots of the prompts to the readme for better marketing ;)\n. It should be a pro feature and shouldn't clutter up the interface.\n. :+1: to both comments.\n. the less options the better :)\n. Who cares, Windows users are used to an already suboptimal experience. ASCII works fine.\n. I'd prefer the 2nd\n. yup\n. @SBoudrias i think both of your suggestions could be useful, sub groups if you dont care about the separator and separator  if you need to fill in custom stuff.\n. :+1: \n. I too have some ideas for useful things that could be created with interactive cli. But I think it would be better to extract out the UI stuff and make it more generic so other things than a prompt could be built on it.\n. It's hidden.\n. I think it would be nice. We already do this in the browser.\n. > Will this need a dependency bump for chalk?\nNo.\n. @eddiemonge I find that one to be the prettiest.\n. > Please don't hate me\nYou're dead to me. [insert gif]\n\nAll the icons break the visual flow a little\n\nCan you clarify? There aren't any more icons than before. Just IMHO a more aligned and prettier one.\n\nUnicode replacement character shown if it can't render the given glyph.\n\nI agree with the Windows one, but even the OS X one?\n. Thanks :)\n. I find the current [?] really ugly. Seems like it's the OS X one people don't like. How about using the Ubuntu question mark on OS X too? It's so much nicer when everything is aligned.\n. :+1: I'm good with that. Still much better than previously :)\n. @SBoudrias \n\nOn a related note, can we please drop the : at the end of the question? It looks ugly.\n\n?\n. /[A-Za-z0-9]$/\n. @soyuka that's what $ means.\n. @SBoudrias indeed.\nThe coolest thing I just realized is that dim also preserves the color. So you can have dimmed colors if you want:\n\n. Actually when I think about it. We already show Use arrow keys, and when they do they see that the list moves. So I would say that message is pretty moot. Would you be open to removing it?\n. Oh, yeah. Good point. I still find it a bit too verbose though.\n. @SBoudrias \n. I want to be able to change both.\n. I don't know. Just thought someone might have a use-case. I'm mostly interested in changing the name property. But currently it only allows me to change value which, as you said, not very useful.\nContext: https://github.com/yeoman/yo/issues/187\n. @SBoudrias thoughts :arrow_up: ?\n. Looks like this was fixed in 0.11.0: https://github.com/SBoudrias/Inquirer.js/releases/tag/v0.11.0\n. @SBoudrias fyi, 1.1.0 is now out with the lenient mode.\n. @SBoudrias Can you do a patch release when this lands? I'm planning to do a yo release this week and would be nice to have it fixed for that ;)\n. bump\n. I tried node -e \"console.log('\u221a')\" on Windows 8.1, but didn't get a beep sound. I get a beep sound with node -e \"console.log('\\7')\". Can anyone come up with a simplified testcase that reproduces the issue?\n. ping\n. @dylang Any chance you could finish this up?\n. https://github.com/chjj/blessed/issues/56#issuecomment-42671945\n. > An alternative would be to put a separator after reaching the end.\nI think this is a better solution than an option.\n. Why not just use tty directly then? Instead of first checking stdout then falling back.\ntty.getWindowSize ? tty.getWindowSize()[1] : 0\n. @knownasilya I'm not saying your module should be fixed. I'm saying it's probably moot.\nAlso, when you make a module you should really know how it works.\n. :+1: \n. I think makes sense to override the color, but not the style. Eg. override the blue, but not the bold.\n. Oh yeah, I should have been more specific. Terminal.app, Node 0.12.7, Inquirer 0.9.0.\n\nMy concern here is that if we start cutting the choice text to fit the screen scroll state, then we might end up with more edge case.\n\nI might be misunderstanding this, but I don't want Inquirer to truncate the question.\n. :+1: Promises are already available in Node.js 0.12, and if you're not willing to drop Node.js 0.10 support, you can use a tiny polyfill like pinkie-promise.\n. :+1: \n. :+1: I too wish Inquirer were more easily programmatically extendable.\n. :+1: I want things like this to be possible: https://github.com/SBoudrias/Inquirer.js/issues/46\n. :+1: \n. Or better, remove the hint on select instead of arrow keys.\n. ping @ihorskyi . I don't want the prefix bold. It looks better normal.\n. @SBoudrias This actually fixes a bug where the message above was not shown on error.\n. ",
    "pldg": "Checkbox are not displayed properly in WSL (tested also with ConEmu) and Git Bash for Windows 10\n\nIs there a way to add square brackets instead of the current symbols? \n[ ] jpeg\n   [X] webp\n-> [X] png\n   [ ] tiff\nSuggestion: maybe add another prompt type rawcheckbox. ",
    "passy": "Thanks, @SBoudrias! :)\n. @robwierzbowski Sorry, I should have been clearer in the original comment. I definitely do not want to remove those. :)\n. Another thing to add: I didn't find the part in the code for this, but if you do not provide a custom message and Inquirer generates one for you, it capitalizes the name and adds another colon, so you get two at the prompt.\n. Interesting! I guess I just overlooked some piece of code in the generator that was responsible for dynamically creating the message. Sorry for the confusion. :)\n. @SBoudrias Thanks! :)\n. > What I can think of would be to manually limit the number of items shown, and then programmatically imitate the scroll by pushing and poping rows from the lists depending on the direction the user goes with their arrow keys.\n:+1: You can probably rely on process.stdout.rows for that.\n. Please don't hate me, but I personally prefer the old one. All the icons break the visual flow a little and I also get the impression by looking at it that this is the Unicode replacement character shown if it can't render the given glyph.\nI don't hate it, but I don't love it either. Whichever decision you make, I'll be happy with it. :)\n. > You're dead to me. [insert gif]\n\n\nCan you clarify? There aren't any more icons than before. Just IMHO a more aligned and prettier one.\n\nIt's very subjective. The circled question mark is obviously smaller than the normal one and to me the baseline is where the textual glyphs lie on and not the decoration surrounding it. So I guess to please my weird eyes the circle would have to be larger in order to keep the question mark at the same size.\n. ",
    "rdodev": "+1 for this feature\n. That could definitely work. Right now, I'm using a somewhat hamfisted approach of throw new Error if the user chose a data-invalid choice, after the fact. This has the undesireable effect of crashing the app and being unable to go back and fix the issue.\n. Cool. I''l give it a shot and let you know. Thanks for prompt work.\n. Sorry for so much delay, but I've been pretty busy at work. I just tried this change and yes, it meets my requirements. Thank you.\n. ",
    "jdespatis": "And has gone on Linux Ubuntu 12.10 as well\nAnd the code is even more better now\nThanks again!\n. Sorry @SBoudrias, the doc is clear enough indeed, I've seen the available options for list after this message, sorry :)\nIndeed, I use yeoman to install one tool among a list of them, let them be [A, B, C], for example\nSo the first time, the user will see A as default one, I'm ok with that.\nLet now imagine a user choose B to install.\nThe fact is this user can run again yeoman (in order to update some other files as yeoman fetchs things on github and updates some local files).\nAnd on this second run, I'd like the prompt to indicate the current tool already installed (B in the current case)\nAs you mention, I could then put the list [B, A, C], but it may disturb my users, as the order changes on the second time.\nI think, it would be better for my users to always see [A, B, C], with B checked by default when running yeoman for the second time (for users that have installed B)\nYou see my point @SBoudrias  ?\nAnd btw, thanks for this awesome new prompt for yeoman!\n. I've upgraded to 0.1.7 that includes this fix, and 2 remarks (one is blocking):\n- the default is an index integer to indicate, why not putting one value of the choices instead ? I'm thinking about the developers that were using default before new prompt, for the old list, they were putting a value as default. They now need to update their script\n  Further more, putting an integer forces developer to search the index in their choices, in order to give it as default with inquirer 0.1.7. I think it would be easier for developers to rely on inquirer to find the corresponding index\nIn the overall, I would far better prefer to indicate a value, instead of an index, just my opinion (or maybe you think about several same values proposed in a list ? I don't see well the benefit of it)\n- another important remark: with last yeoman 0.12.0 that includes inquirer 0.1.7, whenever there's a conflict, the yeoman script just stops just after showing the list (overwrite / do not overwrite / etc.)...\n  It's a blocking bug\n  (I've tried to import last fix from @passy : https://github.com/yeoman/generator/commit/932859ae70c1c88995f64e8c94181d81618377d4, but the problem is the same, yeoman scripts crashs)\nI've no error to give to you that may help you... (even with last fix from @stephenplusplus https://github.com/yeoman/generator/pull/290)\n. Well, concerning my first remark...\nAfter having added the needed code to be compatible with the new behavior of default (compared to previous yeoman prompt), it adds in consequence an indexOf() in my code for each default, not a big deal to insert.\nFurther more, your logic is the same as the <select><option> tag in HTML, and maybe you have in mind multiselect choices, so integer or array of integers for default is surely the best choice\nSo discard my first remark :)\nSecond remark is still active though, yeoman just crashs in my case (whenever there's a conflict)\n. or maybe an inquirer into an inquirer?\nGonna check this right now...\n. All choices in the first question are valid\nBut the behavior of second question (in fact its validation) changes a little according to first answer\nHowever, after a quick test, nested calls seems to answer my need perfectly...\nI think I can safely close the issue\n. ",
    "danielchatfield": "@sindresorhus Are you still having this bug with 0.2.3 and if so is it as severe as it was (if I mash the arrow keys I can get terminal to flicker very very briefly but not like the video)\n. I wonder what enhancement's, if any could be made to the UI to make it more obvious that you can do this (if it get's implemented).\nCurrently to the right of the question it says\n\n(Use arrow keys)\n\nI wonder if this should be changed to something like (with better wording?)\n\n(Use arrow keys or type number)\n\nOr include the number before the option like so:\n\nI prefer the second one (maybe in combination with the first one as otherwise it is difficult to easily discern what number applies to an option if the list is longer.\nAnother idea:\nIf a list contains less than 10 items then the functionality works as you describe but if it contains more then the program could implement a delay and support typing 2 digit numbers.\nAlso what do you think should actually happen? With a list I suggest it just selects the option and the user still has to press enter. With checkboxes do you think it should toggle the state and move the cursor to it, just toggle the state or just move the cursor.\nIf we get all these fleshed out then I'll have a stab at it when I get time.\n. @eddiemonge I agree about 10 options being too much and I guess that is something that can be added later if someone asks for it\n. I just tried to reproduce on my laptop (also on win 8) and couldn't so I'm going to close this and assume that my system is wonky until further information.\n. I have identified what the problem is (after manually going through comparing running processes between laptop and desktop).\nIn Windows 8 there is an application (LiveComm.exe) which is used by the mail and messenger metro apps. When this is running (does automatically if mail or messenger apps are configured) inquirer does not work properly.\nI have filed a bug report with Microsoft (although I had to do it against PowerShell so I'm hoping it will find it's way to the right person).\n. Are you using latest inquirer, It's been fixed in another issue.\nOn Sunday, 18 August 2013, Andr\u00e9 Cruz wrote:\n\nI'm also experiencing this (I'm implementing Inquirer on bower package\nmanager). Sometimes, we need to double hit enter to pass to another\nquestion. I've killed LiveComm.exe and the problem persisted. I think\nthis needs to be re-open for further investigation.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/SBoudrias/Inquirer.js/issues/48#issuecomment-22834714\n.\n\n\nFor contact info visit: www.danielchatfield.com\n. Fixed in #52\n. @satazor Does upgrading inquirer fix it?\n. @SBoudrias I can now confirm that this is causing issues with Yeoman under windows.\nSystems tested:\n- My desktop (windows 8.1, powershell, cmd )\n- My laptop (windows 8, powershell, cmd )\n- Brand New EC2 instance (Windows server 2012, powershell, cmd)\nReproduction steps:\n-  install node\n- npm install -g yo\n- yo --help\n- Select second option in menu\n- Now can't interact with new menu\nSource (where prompt is called from within a callback): https://github.com/yeoman/yo/blob/master/bin/yoyo.js\nI'm going to have a stab at implementing some simple blocking or ensuring that the callback is only called after inquirer has completed removing all event handlers etc.\n. Squashed\n. @SBoudrias I see that there is a test that inquirer should always create a new instance of readline, what is the reason behind this?\nIf there is a reason why this behaviour is necessary then I'll have to work on getting it to work with close() but I can't see any reason why it is not working with close() with the current code (I tried removing the resume call but that doesn't fix it) so I suspect it is a bug in node somewhere.\n. If we do need to use close then another way of fixing it (although I don't have a clue why it is fixing it) is calling pause before close.\nThere is definitely a node bug and I've managed to reduce it down to a smallish testcase and opened a ticket: https://github.com/joyent/node/issues/5927\n. Ok, I'll update the pull request when I've finished my dinner.\n. @SBoudrias I've updated the pull request.\n. How do you propose the API should change to include this?\nSome possibilities:\njavascript\n{\n    choices: [{\n        name: \"Some option\",\n        value: \"someOption\"\n    },{\n        type: \"separator\",\n        value: \"----------------------------------\"\n    }]\n}\n(with value having a sensible default)\nOr:\njavascript\n{\n    choices: [{\n        name: \"Some option\",\n        value: \"someOption\"\n    },{\n        separator: \"----------------------------------\"\n    }]\n}\nIf separator is true instead of a string then default is used.\nOr:\njavascript\n{\n    choices: [{\n        name: \"Some option\",\n        value: \"someOption\"\n    },{\n        name: \"----------------\",\n        value: \"_separator\"\n    }]\n}\nOr:\njavascript\n{\n    choices: [{\n        name: \"Some option\",\n        value: \"someOption\"\n    },{}]\n}\nDisadvantages of this method is you can't specify the separator string (although I don't actually think that is necessary), also it isn't easy to understand what the empty object is doing without consulting the API.\nMy personal preference would be either of the first two. Any more ideas?\n. @stephenplusplus Would that not conflict with the current API, as it allows just strings to be passed (set's both name and value to whatever the string is).\n. @sindresorhus And do you think separator is the right word to use?\n. I like that. Perhaps inquirer.separator should be a function which returns\nthe new instance. I think it would be cleaner to just have a function call\nrather than having the 'new'.\nOn Tuesday, 20 August 2013, Simon Boudrias wrote:\n\nOk, so I think I got it!\nWhat I don't like from option 2 is that it infer a \"type\" based on the\npresence or absence of some values in an object. I usually don't like\ninfering as it can only brings problem eventually.\nSo, I think that'll be perfect:\nchoices: [\n  \"choice A\",\n  new Inquirer.Separator(\"-----------------\"),\n  \"choice B\"]\nIt feels like the Handlebars.SafeString constructor to notify the engine\nwe send escaped data. And I think some parts of how Inquirer handle some\nobjects internally could be rewritten in similar fashion.\nWhat do you think?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/SBoudrias/Inquirer.js/issues/53#issuecomment-22922450\n.\n\n\nFor contact info visit: www.danielchatfield.com\n. @SBoudrias Testing now\n. @SBoudrias Looks good\nJust this one thing:\nThe multiline list does not align properly for checkboxes.\n\nAlso another thing (not related to this but might as well mention it here).\nIn examples you have long-list and nestedCall, I think there should some consistency with the naming.\n. Fix works fine (I was able to reproduce as well).\n. I didn't pick that up when testing, how can I reproduce?\n. I think 7 is a good number, we could create APIs for every little thing but that would just turn inquirer into a bloated mess. I can't think of a situation where a developer would need to override it.\n. I don't really like this, but we can see what @SBoudrias thinks.\nWe could add inquirer.Choices = require(\"./objects/choices\"); to the client interfaces which would then let a client library disable the pagination by monkey patching it:\n```\n\"use strict\";\nvar inquirer = require(\"inquirer\");\ninquirer.Choices.prototype.setRender = function( render ) {\n  this.renderingMethod = render;\n};\n``\n. Technically that code is not compatible withinquireras each subsequentpromptshould be called from within the callback of the previous one (seeexamples/nested-call.js) (or useasync` to handle this for you), and I can't think of a case where you couldn't just use a single inquirer.prompt call with multiple choices (although there may be one).\nEven if you remove the eventEmitter limit then it will be buggy as the keypress and SIGINT listeners would be added numerous times causing all sorts of problems.\nBut I think this is something inquirer should support (or if it doesn't then it should fail with a warning when prompt is called before the previous prompt call has terminated).\nOne way to support this is to have an inquirer.queue so when inquirer.prompt is called it adds an anonymous function (that runs the prompt) to the queue and then if inquirer isn't already running (inquirer.running is false)  it calls the first function in the queue (which will be the one it just added) and sets inquirer.running to true. Then as part of the onCompletion function it pops itself from the queue and then checks whether the queue is empty - if it is then it sets running to false, if it is not empty then it runs the next prompt in the queue.\nThis will prevent multiple event listeners from being attached (whilst still maintaining the ability for tests to override the stream as the listeners will be attached and removed before and after each prompt in the queue).\n@SBoudrias I'm bad at explaining things but I hope you got the gist of what I am saying, I'll knock up a pull-request when I get back later today for you to take a look at.\n. @SBoudrias Is this still valid? The tests don't override the stream like that any more.\n. I completely overlooked your test1 and assumed that the problem was with 2 and 3 (didn't notice that test1 was infinite and thought it was just one call).\nThere are 2 bugs here:\nThere is a memory leak (I'll post more details on this below), which will cause all 3 test cases to fail. Even after fixing the memory leak test 2 and 3 will still fail as currently inquirer cannot be called like that - it is asynchronous so the subsequent calls to inquirer.prompt will happen before the first one has finished and then you get a mess of loads of event listeners all trying to do stuff at the same time.\n. The memory leak is something to do with mute-stream, I'm not sure whether it's a bug with inquirer and we are not closing the mute-stream properly (the docs imply that this shouldn't be necessary and that by closing the readline the mute-stream will be automatically closed or somewhere else but I'm investigating now.\n. The test that I am using at the moment is (no user input required):\n``` js\nvar inquirer = require('inquirer');\nvar nestingsCounter = 0;\nvar maxNestings = 10;\nvar promptsGroup = function (callback) {\n  inquirer.prompt([{\n    type: 'input',\n    name: 'option' ,\n    message: 'Nest:',\n    default: nestingsCounter\n  }], function (answers) {\nnestingsCounter += 1;\n\nif (nestingsCounter <= maxNestings) {\n  callback(callback);\n} else {\n  console.log('Maximum nested prompts number (%d) reached!', maxNestings);\n}\n\n});\n  console.log(\"\");\n  inquirer.rl.emit(\"line\");\n};\npromptsGroup(promptsGroup);\n``\n. [cleanup](https://github.com/joyent/node/blob/v0.11.6-release/lib/stream.js#L102) isn't being called. It is called automatically when:\n- theendevent is emitted on thesource- thecloseevent is emitted on thesource- thecloseevent is emitted on thedestination`\nSince the destination is process.stdout we can't close that. We close the readline interface but this does not close the input or the output streams so cleanup is never fired.\nTo fix this leak we need to call mute-stream's end method.\nBy adding this.rl.output.end(); the above test doesn't fail (but it currently causes other tests to fail). I'm investigating the other tests now (at least one of them I can see is because we overwrite the output stream with something that doesn't have an end method).\n. It would need more than just \"catching\" the console.error as the memory leek doesn't occur in the tests as the ReadlineStub doesn't register the event listeners that cause the leak.\n. @SBoudrias In this particular case the event listeners that were causing the problem were on process.stdout, not the readline and since the stub doesn't connect any of that stuff the memory leak doesn't actually occur in the test suite.\nI think the stub is pretty convenient but we also need tests to make sure the readline interface is behaving properly as currently that can break and I'm not sure the tests would catch it.\n. @mpal9000 Completely agree\n. That is much better, I thought it felt a bit weird as well.\nAlso, I think it is an improvement to automatically add a separator at the end as it makes it easy to see when you have reached the end without having to remember which options were at the beginning.\n. Thanks :)\n. Not entirely sure what you want to do.\nquestions = []\nfor (var i = 0; i < 10; i += 1) {\n    questions.push({\n        type: \"input\",\n        name: \"email\",\n        message: \"Enter recipients email\"\n    });\n}\n. I'm going to have trouble reproducing this, and it sounds like it is a bug in mint (or you could argue Node, since libuv is meant to standardize all of that stuff).\nJust to clarify, it is the cursor pointer that is in the incorrect position - it is still typing correctly.\n. @SBoudrias Has that been logged as a bug on node? I couldn't find an issue for it.\n. Breaks on windows :(\n. Edit: Already broken on windows, and this doesn't fix it\n. Running the expand example and typing several characters and then using the arrow keys produces the bug described. I don't see a change in behaviour with this patch.\n. @datheme thanks for taking the time to work on a patch\n@SBoudrias I wonder if perhaps expand should overwrite when other options are pressed.\nCurrently it does this:\n\n[?] Conflict on file.js: (Yadxh)\n\nUser presses Y\n\n[?] Conflict on file.js: (Yadxh)  Y\n\n\nOverwrite\n\n\n\nUser presses a\n\n[?] Conflict on file.js: (Yadxh)  Ya\n\nThis makes more sense:\n\n[?] Conflict on file.js: (Yadxh)\n\nUser presses Y\n\n[?] Conflict on file.js: (Yadxh)  Y\n\n\nOverwrite\n\n\n\nUser presses a\n\n[?] Conflict on file.js: (Yadxh)  a\n\n\nOverwrite this one and all next\n. @SBoudrias I'm going to bed now but I'll open a PR for it tomorrow\n. No problem, I was moving back home from uni for Christmas today so didn't\nhave much time.\n\n\n\nOn Thursday, 19 December 2013, Simon Boudrias wrote:\n\nClosed #86 https://github.com/SBoudrias/Inquirer.js/pull/86.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/SBoudrias/Inquirer.js/pull/86\n.\n\n\nFor contact info visit: www.danielchatfield.com\n. @huei90 That is not my interpretation of what @joseadrian means. It is a way of filtering the options by typing the beginning of the name. I can see this being useful for long lists although I would implement it such that typing the name moves the pointer rather than filters the results as this wouldn't require adding anything to the UI.\n. Personally I don't think there is anything wrong with splitting it into several Inquirer.prompt() calls (as in https://github.com/SBoudrias/Inquirer.js/blob/master/examples/nested-call.js).\nAlternatively you can use the when function to look at the previous answers and decide whether the question should be shown.\n. > Using multiple calls to Inquirer.prompt() will work, but it can be annoying having to deal with the additional variables in grunt-prompt.\nHmm, I see what you mean but I kind of feel that the API shouldn't become cluttered just because the recommended way of doing it can't be used from within another module.\n\nUsing when to perform actions based on the previous answer and not just to decide whether the question should be shown is backwards logic. The code is not where we'd look for it.\n\nI disagree, that is exactly what when is for, hence why it is passed answers. For your particular use case it may make more sense to have the logic attached to the previous question, however consider the case where the decision to show a particular question requires knowledge of more than just the previous question.\nI'm also not sure what then is actually meant to do. What does it return and how would this be used by inquirer?\n. If there was no second question then the code can go in the regular callback: inquirer.prompt( questions, callback ) could it not?\n. I'm still not entirely sure what then is meant to do and how you could use it to not show some questions.\n. For it to have an effect on which questions are being shown then it needs to return something to Inquirer which if it is \"just a callback with an answers argument; much like an onComplete\" then it won't be able to do that.\n. Can you give an actual scenario? I'm still not getting why that code couldn't be in the final callback.\n. How is it going to \"cancel all subsequents\"?\n. process.exit() shouldn't be used to break out of some code, it makes the code very inflexible as you can't then add some code to run afterwards.\nI don't see what is wrong with this.\nInquirer.prompt({\n    type: \"confirm\",\n    name: \"continue\",\n    message: \"Continue?\"\n  },function(answers) {\n    if(answers.continue) {\n        Inquirer.prompt([...], cb);\n    }\n});\n\nOr perhaps in addition to that, returning false from then's callback could result in a cancellation of all subsequents?\n\nIn that case it would be more appropriately named continue and wouldn't be able to do anything that when wouldn't be able to do and thus I don't see it being added.\n. This is an interesting issue, I'm not sure if the non-empty token would be the best way of doing this as it would either require adding more stuff to the UI to let the user know what that exists or it would only be used by the few people who know the API.\nThe recommended way of doing this (from examples/pizza.js) is to split it into two questions, the first would ask 'do you want to use a proxy?' and the second only shown if the previous answer was yes.\nI appreciate in this particular example that doesn't seem ideal however I think this use-case isn't very common and it is arguably easier for a user to enter answer an additional Y/N question than type a token.\nAnother possibility would be to hit backspace on the empty answer to clear the default but I don't think this is intuitive and thus would only be used by those that knew the API and unlike the token idea may well be accidentally triggered.\nIn summary, I don't think the additional Y/N question is particularly cumbersome for a user - it only takes 2 additional key presses (which is less than the proposed alternative).\n. @stephenplusplus Which generator is that with? I can see how that would happen if using the API incorrectly.\n. I can't reproduce this, is there anything I'm missing?\n. No luck on my windows machine with power shell either.\nI have a feeling this is going to be a tricky one to pin down.\n. Currently inquirer masks passwords as you type, if you don't want the masking then just use a text input - they are functionally identical apart from the masking. I might be misunderstanding what this PR is for though.\n. I see what you are saying now. May I ask why you prefer this?\nIf someone was watching over your shoulder then they could have seen how many key presses were pressed regardless of what is displayed on screen.\nIf you are worried about logs (I can't think of a scenario when this would actually happen) then hiding the password wouldn't change anything if a new line was added everytime the output was flushed as this happens on keypress regardless of whether anything changes and thus the number of lines in the logs would equal the number of keypresses. If the logs only log the final output (non-streaming logs) then a better patch would be one that changes the number of asterisks to a fixed number after hitting enter.\nIf this was accepted then the default would definitely be the current behaviour as this has clear U/X advantages.\n. As per https://security.stackexchange.com/questions/35133/masking-password-when-typing-vs-hiding-input-when-typing sudo does not do this for security reasons but simply because it is easier.\nI don't see anything wrong with how we currently handle it, sure it may not be what you are used to but this way is better from a UX perspective and the majority of new CLI programs do it this way.\nWe'll see what @SBoudrias thinks.\n. This LGTM.\nWhat do you mean by \"tried\"? Does this not fully fix the issue (away from PC at the moment so can't check).\n. Because that would make it unnecessarily complex and it isn't as if we could be doing something useful whilst we are waiting for that function to return - we need the result before we can display the question.\n. No problem, this will need some thought before merging anyway.\n\"leave the memleak warning of node.js which was already existing\" <- how are you getting this warning, last time we had this it was an actual memory leak: https://github.com/SBoudrias/Inquirer.js/pull/63\n. I need to go to bed as well. What are you actually running to produce that trace? I can't get it to give me that warning.\n. When the prompt is finished this is called which calls this which removes the listeners we added and closes the readline - we even have a test to ensure that this happens properly.\nI can't reproduce the trace you are getting (using your PR or the current code). Which version of node are you using?\n. I am unlikely to be able to look at this any time soon as I'm preparing for\nmy exams.\nIn regards to the not having to press enter, I did wonder if that should be\nthe default behaviour for inquirer - it is not as if someone could\naccidentally press y instead of n. I do think that some more feedback would\nbe required before changing that though.\nThat would also fix the current issue where if someone accidentally hits a\n'U' or 'T' instead of Y then it is interpreted as no.\nOf the top of my head in /lib/prompts/confirm.js if you change the event\nbinding from 'line' to 'keypress' then I think that will do that (really\nnot sure if that will be sufficient but worth a try).\nI'll think about this a bit more if I get time tonight.\n\u1427\nOn 14 May 2014 15:23, Carlos A. Cabrera notifications@github.com wrote:\n\nThanks for the quick response @SBoudrias https://github.com/SBoudrias.\nQuick question. Is there a way (work around I can apply to a copy of\nInquirer) where pressing \"y\" or \"n\" doesn't echo the input and apply the\nselection without needed to press [enter]?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/SBoudrias/Inquirer.js/issues/116#issuecomment-43086616\n.\n\n\nFor contact info visit: www.danielchatfield.com\n. @carlosacabrera Thanks. Note that the modification I mentioned in my last comment wouldn't be sufficient (assuming it works) if we do decide to change the behaviour as we would want to actually check which key was pressed and handle the case when the key was neither Y or N.\nAlso we would still need to handle the enter key if the user wants to use the default.\n. :+1: for moving to chalk, it's long overdue\n. Looks like the unit tests are broken for node 0.8 (fairly sure this has nothing to do with this PR though).\n. Just because the tests pass in the current version doesn't mean there isn't\na bug that manifests itself in older versions but the logs show errors that\nseem unrelated to inquirer itself.\nOn Monday, 26 May 2014, soyuka notifications@github.com wrote:\n\nIndeed, I launched \"npm test\" locally before making the PR.\n\nReply to this email directly or view it on GitHubhttps://github.com/SBoudrias/Inquirer.js/pull/120#issuecomment-44176103\n.\n\n\nFor contact info visit: www.danielchatfield.com\n. That's a good point.\nIt seems like some of the development dependencies no longer support node\n0.8, not sure how to work around that.\nI wonder if it would be possible to install the dev dependencies with\nlatest node and the regular dependencies with 0.8 then run the test suite\nwith 0.8.\nWould require some significant changes to the travis file.\nOn Monday, 26 May 2014, soyuka notifications@github.com wrote:\n\nDude I can read...\nTested on local with node v0.8.26 but if I remember well there was an npm\nupdate where versions could be prefixed with ^ as of node v.10.28.\nI've got the following error while running npm install with npm 1.2.30and node\n0.8.26 :\nnpm ERR! Error: No compatible version found: date-now@'^0.1.4'\nNo way to found which package is installing this package :/. Any clue ?\n\nReply to this email directly or view it on GitHubhttps://github.com/SBoudrias/Inquirer.js/pull/120#issuecomment-44176795\n.\n\n\nFor contact info visit: www.danielchatfield.com\n. If there was a way to skip the jshint test (and install) in node 0.8 then\nthat would be a viable solution since it would still be run in the 0.10\ntest and that isn't version dependant. Not sure if that is doable though.\nOn Monday, 26 May 2014, soyuka notifications@github.com wrote:\n\nI've found the failing package: grunt-contrib-jshint. But it seems this\ngo way further to another dep of another dep ...\n\nReply to this email directly or view it on GitHubhttps://github.com/SBoudrias/Inquirer.js/pull/120#issuecomment-44177616\n.\n\n\nFor contact info visit: www.danielchatfield.com\n. I completely agree. I really don't want to lose the 0.8 tests though.\nTemporary solution for now might be to disable the 0.8 test and do it\nmanually for PRs.\nOn Monday, 26 May 2014, soyuka notifications@github.com wrote:\n\n120 https://github.com/SBoudrias/Inquirer.js/pull/120\n119 https://github.com/SBoudrias/Inquirer.js/issues/119\n\nReply to this email directly or view it on GitHubhttps://github.com/SBoudrias/Inquirer.js/issues/121\n.\n\n\nFor contact info visit: www.danielchatfield.com\n. I'm assuming filter but I'll check now.\n. Validate is done first: https://github.com/SBoudrias/Inquirer.js/blob/2ab0c87acd648cab5296f8228a1a6ee3a3236afd/lib/prompts/input.js#L74-L92\nCan't currently be swapped around.\n. I wonder if it makes more sense to do it the other way around.\ncc @SBoudrias \n. :+1: I have exams until 11th June then 3 days of boat racing then several days of intoxication, after that I'll take a look at this unless you wanted to submit a PR.\nI think the second option is probs better.\n. Equally the validate function has to handle non-filtered input.\nI can think of scenarios where filter first would cause the filter function to error but the same scenarios can be applied to the validate function if it expects filtered input.\nPersonally I think the filter first is more logical as I think it is more likely that the validate function will need to use the filtered value than the filter function requiring input to have been validated.\n. :+1:\n. Hmm, I thought this was fixed with https://github.com/SBoudrias/Inquirer.js/commit/a02aebe881dae38c055528fc69b9ae1898c4c227\n. Are you using latest version of inquirer?\n. LGTM\n. @SBoudrias I wonder if jscs should be added to the tests to catch the style guide stuff that jshint can't catch. Don't know if it is worth it though.\n. If I remember correctly there was a bug in node that caused two returns to have to be pressed sometimes, there could be a regression in node 0.11.x although it only affected windows (was todo with changes in windows 8 I think).\n. That is not a stable version of node and is a bug in node.\n. Can you give some example code that causes the warning.\n. Scratch that, didn't read it properly.\n. Very interested to see where this goes.\n. Big :+1:, it looks a lot cleaner and far less opportunity for bugs to sneak in.\n. I mentioned this here: https://github.com/SBoudrias/Inquirer.js/issues/116#issuecomment-43088038\nI absolutely think this is something that needs to be looked into - I can't see a need for why enter should be required from a ux point of view. (it does simplify the logic though).\n. :+1: \n. :+1:\n. This has been discussed before and we decided against it - it would require significant changes to inquirer under the hood and this can be achieved by nesting calls to inquirer.prompt (see the example).\n. Submit the PR against master.\n. LGTM\n. :+1:\nWill this need a dependency bump for chalk?\n. Lol, that's the windows \"I don't know what this character is meant to be\" character.\n. Not sure if I have understood this correctly.\nThe callback is called after all the questions have been asked.\n. Correct behaviour is:\n- Ask all questions\n- call callback with answers\n- loop if askAgain was true\nIs this not what you are observing?\n. You can use validate for that?\nFor cases where the built in validation support doesn't work (e.g. you need to modify future questions based on previous answers) then nesting is the best way:\nhttps://github.com/SBoudrias/Inquirer.js/blob/master/examples/nested-call.js\n. But the validate option should just work for the use case you described.\n. Correct and if you could it would repeat this question:\nThe module name already exists do you want to use it anyway (Y/N) ?\nwhich is not what you intended.\nI've actually done something pretty much exactly like that example before. I decided there were two ways of doing it:\n- validate the first question and if it exists make the error message say that it exists and to use it put an exclamation mark at the beginning.\n- Use a nested call\nI went with the first option but I think the second option is better from a UX perspective (the module I was writing was only going to be used by me so I wasn't too fussed).\n. Cannot reproduce\n. Accidentally tested against old version - I can reproduce this.\n. Offending code is here: https://github.com/SBoudrias/Inquirer.js/blob/master/lib/prompts/checkbox.js#L63-L66\n. @SBoudrias Totally agree, I'll modify the PR after I've eaten.\n. :+1: \n. @SBoudrias I'm currently on holiday but can test this when I get back on Sunday if you don't have access to a windows box any more.\nI've never used powercmd before and I think it is more likely to be a bug with powercmd.\n. I think this does what you want: https://github.com/abbr/deasync\n. Issue: https://github.com/npm/npm/issues/5920\nFix for now seems to be to install npm version 1.3 npm install -g npm@1.3\nThis has been fixed but 2.0.2 hasn't been released to npm, not sure why.\n. It has been released but not yet under \"latest\" tag as per npm's release process.\nCan be installed by doing npm install -g npm@2.0.2\n. This is still not working so I'm going to close this.\n. Cannot reproduce\nCan you provide an actual code example?\n. Hmm 0x7 is the ANSI code for beeping but as far as I am aware it shouldn't cause a beep in that format.\nNode has to virtualise ANSI parsing as windows doesn't support it (at least pre windows 10) and there might be a bug in the way it does this.\nIf you remove all the x7s does it stop the beeping? If so I'll investigate further and see if I can track down the node bug.\nCan you also confirm which version of node you are using.\n. @Skywalker13 Is this problem only manifesting itself with the above code or with any prompt?\nIf it is only the above code can you try removing all the x7s\n. cc @priyeshpatel\n. This has been discussed before, It adds no security to do this since for someone to see how many asterisks appear then they must be able to observe the screen and thus can see the number of keystrokes pressed. The output is removed when the password entered so they will not appear in any logs.\n. Good point.\n. Need new line at end\n. ",
    "vladikoff": "Would love to have a multiple select prompt! Would that be a new prompt type or an option for list?\n. ",
    "mikedevita": "Is there a way to force inquirer to use non unicode characters? \n. Were a shop which runs windows and uses putty to connect to RHEL servers and can't reliably set putty to use fonts which support unicode...\nRather than fixing all our machines to use a unicode font I'd rather just use plaintext and bypass the issue. . ",
    "CDHDeveloper": "just did the following:\n1) create new dir\n2) npm install inquirer (note: npm reported inquirer@0.1.12 node_modules\\inquirer)\n3) cd to node_modules\\inquirer\\examples\n4) node nestedCall.js\n5) same results\nFrom package.json :  \"version\": \"0.1.12\",\n. Windows\n. Choosing Calzone (or Pizza or Sub) returns exception generated from base.js:83\n  throw new Error(\"You must provide a \" + name + \" parameter\");\nSo based on that no.\nFor the use case as far as I see it, you want to be able to dog leg to another set of questions (like asking what you want on your calzone) then go back to asking any further questions. So really what is needed (thinking out loud) is a way to diverge to another question set and come back. Also you need to be able to specify those other questions in a reasonably easy to maintain manner. You have the \"when\" but what about the \"then\", is what I guess I'm saying.\n. ",
    "datio": "What a great idea! It'd be awesome if we could display loading indicators using the fired events.\nIs it currently possible to disable/pause the user input until a check is performed (e.g. the async version check example in the yeoman link above)?\nWith lengthy actions that need to be completed before allowing the user to get to the next step, it is beneficial to display loading indicators or other dynamic updates.\n. > Just to clarify, it is the cursor pointer that is in the incorrect position - it is still typing correctly.\nYes, indeed.\nEDIT: The same happens on ElementaryOS (which is also based on Ubuntu)\n. I installed Ubuntu 13.04 (desktop raring) on a VM and I'm still experiencing the same issue.\nInquirer was installed via npm and run on nodejs v0.10.18\nI had to change the line 47 of\n~/app/node_modules/inquirer/lib/utils/readline.js\nfrom \nJavaScript\n    readline.moveCursor(this.output, visualLength, 0);\nto\nJavaScript\n    readline.moveCursor(this.output, this._prompt.length + this.cursor \n      - (line.length - visualLength), 0);\n. Ehm, sorry for the multi branch PR. Not sure how to cancel the one to the master.\n. I get a Permission Denied error when I try push it to your repo (as expected I guess).\nShouldn't you be able to merge this pull request? :/\nI'd appreciate a walkthrough of the commands I have to use if it's up to me.\n. Cheers :)\n. Argh, good to know. I'll try to revise it if I get some free time.\nThere are some additional bugs that clear the lines above the input when the text doesn't quite fit.\nPressing 2. The above lines get eaten and the cursor position is wrong again (at the very end):\n\n. \n@SBoudrias The cursor is now displayed in the correct position with #70.\nI'll add that separate bug to its own Issue tomorrow.\nThe examples/password.js cursor is still frozen at the end though.\nCheers guys!\n. ",
    "GeorgeGkas": "@SBoudrias \nThis issue was created 5 years ago. This was being addressed in #289, but @dthree canceled it. The proposed API was implemented in Vorpal as I read on https://github.com/SBoudrias/Inquirer.js/pull/289#issuecomment-145107571, but not addressed at Inquirer in that time.\nThe current version of Inquirer (6.2.0 as seen in package.json) gives the option through Reactive Interface to dynamically  handle question prompts. Is that the case we tried to accomplish when the issue was first introduced? If that's that case we can safety close this issue, else more investigation has to been done. . @SBoudrias \nThe current version of Inquirer (master branch) address nest calls (see https://github.com/SBoudrias/Inquirer.js/blob/master/packages/inquirer/examples/nested-call.js). We should close this issue. . @SBoudrias should we close this issue? If this is a design decision (and we cannot support this feature request), I do not see any other way to resolve this issue.. @shannonmoeller this issue was addressed by providing a default key in question objects. \nFrom Readme.md:\n\ndefault: (String|Function) Default value to use if nothing is entered, or a function that returns the default value. If defined as a function, the first parameter will be the current inquirer session answers.\n\nSee L287, L107, L107 for some test cases. Run pizza.js for an interactive experience. (See Examples (Run it and see it) to find out how to run examples.) \n@SBoudrias can you close this?. @shannonmoeller my answer was regarding your original proposal of adding an optional options argument, which was addressed by using default key in question objects. As for the example of Yeoman the best you do is to test it and post the results. This issue is old and it's better to open a new one if there is still an issue. You'll have more chance to get an answer. Also, you can open a new issue in Yeoman repo. I do not know how Yeoman handle it's inputs. . Okay thank you for the clarification. :+1: . It seems that the issue was resolved. @SBoudrias can we close it for inactivity? If there is more discussion to be done, it's better to file a new issue. Many things have been improved from the last comment 5 years ago. . It seems that this issue needs a more UX Design approach (\"How to make the prompts more user friendly?\") than a strictly programmatic answer. I agree with the options provided by @SBoudrias. If you have a prompt where you only need to select one answer, and disable all the others, then use list or rawlist type. By the time you have to choose more than one answers, you go for checkboxes. But what happens when you have to conditionally choose items from a list?\nLet's try to find a solution for the generator-angular use case:\nFirst we have to understand that it's a good design decision to create prompts that serve only one purpose. This is called Grouping, to divide a list of items based on a reason which makes sense in the context of the use case. \nIn your example, we can extract the options \"Angular Router\" and \"UI Router\" into a separate prompt. Both items relates with routing, where all the other serve more abstract choices (do not relate with each other). By doing this we achieve the following results:\n\nIncrease the usability (effectiveness, efficiency and satisfaction) of the design.\nConforms to Don\u2019t Make Me Think principle: People don\u2019t like to puzzle over how to do things. The human mind needs more time to interpret texts that contain conditions (click this or do not click the other) which, especially in large scale, frustrate us. Consider a list with 50 choices and 20 conditionals. \nConforms to Don\u2019t waste my time principle: More thinking = more time to interpret messages = more time to take action = more frustration [citation needed].\n\nThis explanation does not relate only for this specific use case. You can argue that the list is small, but what will happen if implement this feature? Someone can be tempted and use this conditional-chose-list for everything. It's not an unrealistic example as we have seen in many aspects of our lives as programmers that users prefer the simple, easy, sometimes dreadful choice, to save them some time.\nBy not implementing this feature, the user will necessarily go for two lists, which is the optimal UX. You see, even if the user cannot extract the reasoning I have already described, he still will make the right decision by grouping items in distinct lists. \n@eddiemonge have you understand the explanation? Does anyone else wants to say anything? If we are done, then @SBoudrias you can close this issue.. @lakenen \nYou can use autocomplete plugin for autocomplete prompts and inquirer-fuzzy-path for autocomplete in file system level. \nDo those options cover your needs?. @danielchatfield, @hansvb  it's better not to exclude the <enter> key. Many tools and terminal commands require to press the enter key to accept an answer. It is a convention that adds more to UX than it takes. It allows for critical commands not to be executed by mistake. \nAs for the argument regarding the decreased number of keystrokes, it reminds me the ambiguous 3-click rule, just in different context. The <enter> key does not have negative impact in UX. (It's just one key press. Consider how many thousands of key presses you do every day without counting them.)\n@SBoudrias this question is inactive for years. If there is no more discussion to be made consider to close this issue. If someone have to share more info, please file a new issue. :smile: . Let's make a little investigation.\nBefore I start, keep in mind that the list types (list, rawlist, expand and checkbox) work as Circular Buffer.\n@dylang I believe this does not cause so much trouble.\nLet's start with an example. The long-list.js example suits fine. The list starts circling when the user press the up key at first keypress or after 3 down keypresses. The message (Move up and down to reveal more choices) does a good job denoting that there are choices that are hidden. This message is shown only in large lists (or lists that exceed pageSize) which is a good thing because it does not add visual noise for small lists. For me this is the simplest usable UI.\n@sindresorhus I cannot think something better for the UI that will be less verbose and offer the same level of usability. Of course we can investigate the idea of @dylang more, but the current implementation (as Circular Buffer) makes the things more complex in terms of UX.\nSuppose we agree to work in the idea of @dylang (which I personally find quite attractive). With the current implementation we have to answer the following: What exactly does the number in the 6 more choices indicate?\nConsider the following edge example. A list with 8 elements of pageSize equal to 3.\n\n\n\nIf more choices denote the choices from the current answer 3 then (because the nature of the list allows circling) both \u25bc and \u25b2 will contain the same number (which is 7). \n\n\nIf more choices denotes the number of elements that exceed the current pageSize then both \u25bc and \u25b2 will contain the same number (which is 5). \n\n\nOf course this edge case was created to show that  both \u25bc and \u25b2 can contain the same number of elements. But this does not make the solution more acceptable, in terms of UX, if the number of items where distinct values either. We would have to increase the \u25bc  and decrease the \u25b2  (or vice versa) every time the user pressed up or bottom arrow key.\nA solution like this would be good enough to be implemented if the list was linear.\nFinal Thoughts\nThis issue was created 4 years ago. Until now, this package was used in thousands of projects and downloaded millions of times. I believe that if this issue was critical, there would be complains regarding this feature. But this is not the case and this issue is inactive since then. If there are no more comments, then @SBoudrias you can close it.. What is the current state of this? @pyramation gave a solution by creating another package. Do we expect to implement this feature in this package as well? Should we close it?\n@tonylukasavage you are the one who opened the issue. What is your opinion?. Hi @bmeck. What is the current state of this issue? Have you found a solution to this? It's been a long time and there was no replies. Do you want us to investigate it or can we close this issue?. The when key can receive the current user answers hash as its first parameter. Is that what the prompt in your example was referring to?. @Freyert I know it's a bit late, but you can check the rx-observable-create.js example. The API was updated since the time you post your answer. . @shellscape you can provide a prefix key in question objects and set manually the prefix you want. See the documentation for more details. If this was what you wanted, then we can close this issue. . should we close this issue? . #571 successfully resolved this issue. Should close this issue.. ",
    "satazor": "I'm also experiencing this (I'm implementing Inquirer on bower package manager). Sometimes, we need to double hit enter to pass to the second question; this happens only on the first question. I've killed LiveComm.exe and the problem persisted. I think this needs to be re-open for further investigation.\n. @danielchatfield yes! thanks!\n. ",
    "alrra": "+1 on this :)\n. ",
    "DannyDouglass": "Apologies for leaving that information out.  I'm using Inquirer 0.2.4 and Node 0.11.5.  \nMy temporary solution is just prompting for the password last.\n. I tried running using Node versions 0.8.4, 0.10.0, and 0.10.16.  The same issue exists with all 3 versions.  As I mentioned, I have a work-around so no rush.  Just wanted to make sure I reported the issue.\n. I tried doing that, however I get an NPM error \"Error: No compatible version found...\"\nHere's my package.json configuration for Inquirer...am I missing something (http response 304)?\n\"dependencies\": {\n    \"inquirer\": \"git@github.com:SBoudrias/Inquirer.js.git\"\n. Yeah I tried https gives me an error that it is not a package.  I was able to install the latest by deleting the module folder and using the git:// protocol: git://github.com/SBoudrias/Inquirer.js.git:\nLooks good now!  Thanks for the incredibly fast response.  Loving Inquirer.\n. Updated per your feedback!\n. squashed!\n. ",
    "ericduran": "Actually after thinking it over, Page Up and Page Down is incorrect here. Home and End is what I actually wanted.\n. Killing PR after re-reading readme\n\nAny new features should be send on the wip branch\n. Also I came across the roadmap. Killing this.\n. No need, I think pagination is great. Thanks.\n. \n",
    "aaronshaf": "rawlist seemingly forces one to use numeric keys. I want to specify letters as keys, etc.\n. In some cases the menu items naturally fit with respective letters. It'd be nice to at least allow the developer/designer to choose how the prompt works.\nAlso, is there a way to increase the minimum \"height\" of prompts?\n. Ahh... Choices.prototype.paginateOutput... pageSize\n. How about the ability to override the pageSize globally?\n. > \"I can't think of a situation where a developer would need to override it.\"\nHow about... when a developer wants a pageSize more than 7... when traversing to look at the eight item is unacceptable.\nThis is not a slippery slope into \"[creating] AIPs for every little thing\", or into a \"bloated mess.\" This is a simple request. \n. ",
    "jeffreytgilbert": "(a)bort\n(r)etry\n(f)ail\nor\n\u300b (B)uild release version of script\n\u300b (S)tart services and watch files for changes\n\u300b (E)xit script\n\u300b (R)estart services\n\u300b (C)lose services\n...etc\nWay easier to work with than numeric values \n. commas would be nice as well, and i would vote for \"h for help\" written out separate from the list of options. \n. Have also noticed this. I'll try this fix out and see if it works on my setup. \n. Seems like this happens when there is an unexpected line termination or output which comes in after the menu is displayed. I was able to stop this from happening by halting output when the menu is shown, and resuming it when a selection is made. \n. ",
    "shayne": "It's easier to mistype the wrong index since the keys are all adjacent. Not necessarily a vote for adding support in rawlist but perhaps adding an expanded: true optional property to expand. Also, is it necessary to re-collapse the expand list when you've made a selection. The cursor and character disappear on me, perhaps it's enough to type the letter and press enter w/o un-expanding the list.\n. ",
    "hi2u": "Is there still no way to have a menu of single letter keypresses that displays the menu by default and doesn't require the user to hit enter?\n. This would be really useful.  My use case is entering dates in a CLI (paper documents) scanning interface.  \nMy default value is today's date, such as 2018-06-07 - but when I need to enter a different date, it's usually around the same time, so would be handy being able to just edit the default answer rather than having to fully type it out (or copy and paste).  \nI know there's datepicker plugins, but text is a bit easier for me.\nThe file renaming example above is really good too.\nThe tab completion idea is nice, but as a basic start without much more work it would be handy just as an option we can specify.  . ",
    "heisian": "I also desire the same functionality as @jeffreytgilbert posted. I do agree w/ @shayne that mistypings are bound to happen.\nAdditionally, if the list happens to expand, one must maintain the same index/order, otherwise users will have to get used to the new ordering of options.\nThe use of letters as hotkeys can make the list order-independent while still maintaining familiar hotkeys for existing options. One is also not limited to 1-9.. Let us also see a real-life example, in iptraf, one of the most well-written graphical CLI utilities of all time. The main menu says it all:\n\n\n\n. Upon further investigation, iptraf uses the ncurses library, created 25 years ago. I guess we're still reinventing the wheel.. Luckily for us, javascript has no real concept of private methods. Here's how to auto-expand the expand menu:\n```node\n;(async () => {\n  const myMenu = inquirer.prompt([\n    {\n      type: 'expand',\n      name: 'someName',\n      message: 'What do you want to do?',\n      choices: [ ... ],\n    }\n  ])\nmyMenu.ui.activePrompt.status = 'expanded'\n  myMenu.ui.activePrompt.render() // voila\nawait myMenu()\n})()\n```. ",
    "mpal9000": "My use case is to maintain the flow, while navigating between different sections in a script. Something like an old school menu with \"select\" and \"back\" options.\nSo it's like \"Test 1\" (nested calls). I added \"Test 2\" and \"Test 3\", because I think a solution to \"Test 1\" will fix those too and a warning from Node should be prevented in any case (except misuse). Like with errors.\nThe example in ./examples/nested-calls.js is not good for testing nested calls, because there is only one nesting and the warning that this issue is about, is printed only when the nestings are more than nine (with the default \"maxListeners\" value). Nested calls should be infinite theoretically. Like in \"Test 1\".\n. // Test 1 (visually better)\n``` javascript\nvar inquirer = require('inquirer');\nvar nestingsCounter = 0;\nvar maxNestings = 10;\nvar promptsGroup = function (callback) {\n  inquirer.prompt([{\n    type: 'list',\n    name: 'choice-A' + nestingsCounter,\n    message: 'Select:',\n    choices: [\n      'value-A' + nestingsCounter + '.1',\n      'value-A' + nestingsCounter + '.2'\n    ]\n  }, {\n    type: 'list',\n    name: 'choice-B' + nestingsCounter,\n    message: 'Select:',\n    choices: [\n      'value-B' + nestingsCounter + '.1',\n      'value-B' + nestingsCounter + '.2'\n    ]\n  }], function (answers) {\n    console.log(\n      'choice-A%d:',\n      nestingsCounter,\n      answers['choice-A' + nestingsCounter]\n    );\n    console.log(\n      'choice-B%d:',\n      nestingsCounter,\n      answers['choice-B' + nestingsCounter]\n    );\n    console.log('');\nnestingsCounter += 1;\n\nif (nestingsCounter <= maxNestings) {\n  callback(callback);\n} else {\n  console.log('Maximum nested prompts number (%d) reached!', maxNestings);\n}\n\n});\n};\npromptsGroup(promptsGroup);\n```\n. Nice, so we have a test and an example!\n. It works fine now, thanks!\n. I think the only reason for implementing option 2, is having a synchronous api too. It could be useful when writing shell style scripts (with shelljs for example), in which you target on using sync only functions, for \"simplicity\".\nPersonally I like using async style as much as I can. So classifying this as a misuse and reporting it, seems right to me.\n. Hello, I think the way you are doing it now is more user friendly. Maybe a comma separator would be better than \"|\".\nBelow is a sample of what you want to accomplish:\n``` javascript\nvar\n  inquirer = require('inquirer'),\n  someLib = { isEmail: function () { return true; } };\nvar getEmails = function (emails, callback) {\n  inquirer.prompt({\n    type: 'input',\n    name: 'email',\n    message: 'Enter an email:',\n    validate: function (input) {\n      if (someLib.isEmail(input)) {\n        return true;\n      }\n      return 'Email address is not valid. Please try again...';\n    }\n  }, function (reply) {\n    emails.push(reply.email);\ninquirer.prompt({\n  type: 'confirm',\n  name: 'confirmed',\n  message: 'Do you want to enter another email?',\n  default: false\n}, function (reply) {\n  if (reply.confirmed) {\n    getEmails(emails, function (mails) {\n      callback(mails);\n    });\n  } else {\n    callback(emails);\n  }\n});\n\n});\n};\ngetEmails([], function (emails) {\n  console.log('emails:', emails);\n});\n```\n. ",
    "jamestalmage": "Fastest PR merge ever!\n. ",
    "jahvi": "Sorry I didn\u00b4t explain correctly.\nWhat I need is to prompt the user for something (emails in this case) but I\nwant to give him the choice to enter as many as he wants, so it\u00b4d be\nsomething like:\n[?] Enter an email // User enters an email\n[?] Do you want to enter another email? (Y/n) // If yes repeat\nAnd then to be able to access the list of emails somehow (an array maybe),\nmaybe there\u00b4s another way to achive this differently?\nRight now I just display an \"input\" prompt and ask the user to enter the\nlist of emails separated by a \"|\" and later I parse them as an array so I\nwas just looking for a user-friendlier way to do the same.\nOn Sun, Sep 15, 2013 at 4:17 PM, Simon Boudrias notifications@github.comwrote:\n\nInquirer let you validate answer, so you can check the validity of the\nemail, and if it's not valid, then it'll ask the question again.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/SBoudrias/Inquirer.js/issues/67#issuecomment-24479835\n.\n\n\nIng. Javier Villanueva\n. Thanks a lot, I know right now my solution looks friendlier but the app\nmight need more fields later on besides the email so I'll need to add more\nseparators to make it work. It's nice to have options.\nOn Sun, Sep 15, 2013 at 10:42 PM, mpal9000 notifications@github.com wrote:\n\nHello, I think the way you are doing it now is more user friendly. Maybe a\ncomma separator would be better than \"|\".\nBelow is a sample of what you want to accomplish:\nvar\n  inquirer = require('inquirer'),\n  someLib = { isEmail: function () { return true; } };\nvar getEmails = function (emails, callback) {\n  inquirer.prompt({\n```\ntype: 'input',\nname: 'email',\nmessage: 'Enter an email:',\nvalidate: function (input) {\n  if (someLib.isEmail(input)) {\n    return true;\n  }\n  return 'Email address is not valid. Please try again...'\n}\n```\n}, function (reply) {\n    emails.push(reply.email);\ninquirer.prompt({\n  type: 'confirm',\n  name: 'confirmed',\n  message: 'Do you want to enter another email?',\n  default: false\n}, function (reply) {\n  if (reply.confirmed) {\n    getEmails(emails, function () {\n      callback(emails);\n    });\n  } else {\n    callback(emails);\n  }\n});\n});};\ngetEmails([], function (emails) {\n  console.log('emails:', emails);});\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/SBoudrias/Inquirer.js/issues/67#issuecomment-24487067\n.\n\n\nIng. Javier Villanueva\n. ",
    "wking": "On Sun, Sep 22, 2013 at 02:41:15PM -0700, Simon Boudrias wrote:\n\nWhich font where you using which haven't the hexagon glyph support?\n\nAs hinted at in the commit message, I am using monospace fonts in my\nterminal, and I don't have the hexagon glyphs in any monospace font on\nmy system.  DejaVu Sans Mono is the only monospace font on my system\nwith glyphs in the U+2BXX block, and both Liberation Mono and DejaVu\nSans Mono have glyphs in the U+26XX block.  Listing with\nfontconfig:\n$ fc-list -v :spacing=mono:style=book | grep 'family:\\|002[6b]:'\n      family: \"DejaVu Sans Mono\"(s)\n      0026: ffffffff ff00ffff ffffffff ffffffff 1fff0fff 00030003 00000000 00000000\n      002b: 07fc0000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n$ fc-list -v :spacing=mono:style=regular | grep 'family:\\|002[6b]:'\n      family: \"Liberation Mono\"(s)\n      0026: 00000000 1c000000 00000005 00008c69 00000000 00000000 00000000 00000000\nOther monospace styles are either bold, or not ones that I'm really\ninterested in for a terminal:\n$ fc-list :spacing=mono style\n:style=Regular Oblique\n:style=Regular\n:style=Oblique\n:style=Bold Italic\n:style=Bold Oblique\n:style=Bold\n:style=Book\n:style=Italic\nI'm invoking xterm with:\n$ xterm -fg white -bg black -fa mono-medium\nTo confirm the fonts, I straced an xterm run and then pasted the\nballot and hexagon glyphs into the terminal:\n$ strace -o /tmp/trace xterm -fg white -bg black -fa mono-medium\n  \u2026paste glyphs in and then exit that terminal\u2026\n$ grep '^open.*usr.*font' /tmp/trace\nopen(\"/usr/lib64/libfontconfig.so.1\", O_RDONLY|O_CLOEXEC) = 3\nopen(\"/usr/share/fonts/dejavu/DejaVuSansMono.ttf\", O_RDONLY) = 5\nopen(\"/usr/share/fonts/dejavu/DejaVuSansMono-Bold.ttf\", O_RDONLY) = 5\n\nAnd on which OS\n\nGentoo, using the default/linux/amd64/13.0 profile.\n\n(and terminal)?\n\n$ xterm -version\nXTerm(285)\nInstalled with Gentoo's truetype and unicode USE flags, which\ntranslates into a ./configue call something like the following:\n$ ./configure\n  --libdir=/etc \\\n  --disable-full-tgetent \\\n  --with-app-defaults=/usr/share/X11/app-defaults \\\n  --disable-setuid \\\n  --disable-setgid \\\n  --with-utempter \\\n  --with-x \\\n  --disable-imake \\\n  --enable-256-color \\\n  --enable-broken-osc \\\n  --enable-broken-st \\\n  --enable-exec-xterm \\\n  --enable-freetype \\\n  --enable-i18n \\\n  --enable-load-vt-fonts \\\n  --enable-logging \\\n  --enable-mini-luit \\\n  --enable-luit \\\n  --enable-wide-chars \\\n  --enable-dabbrev \\\n  --enable-warnings\n\nAnd was this font the default?\n\nThe default for what?  xterm?  Gentoo?  Gentoo doesn't have default\nfonts, because there's no need for TrueType fonts, etc. on a server\nthat doesn't render text.  I assume you're not asking about console\nfonts, which have nothing to do with xterm.\nI use -fa mono-medium in my xterm invocation, but even without that,\nI can't render the hexagons (because mono is xterm's default\nFreeType font).  I can render the hexagons with -fa\nsans (but not -fa serif), but using a non-monospace font in xterm\nis pretty hideous.  Interestingly, the sans font is also DejaVu, but\nit has better coverage than the monospace flavor:\n$ strace -o /tmp/trace xterm -fg white -bg black -fa sans\n  \u2026paste glyphs in and then exit that terminal\u2026\n$ grep '^open.*usr.*font' /tmp/trace\nopen(\"/usr/lib64/libfontconfig.so.1\", O_RDONLY|O_CLOEXEC) = 3\nopen(\"/usr/share/fonts/dejavu/DejaVuSans.ttf\", O_RDONLY) = 5\nopen(\"/usr/share/fonts/dejavu/DejaVuSans-Bold.ttf\", O_RDONLY) = 5\n$ fc-list -v :file=/usr/share/fonts/dejavu/DejaVuSans.ttf | grep 'family:\\|002[6b]:'\n    family: \"DejaVu Sans\"(s)\n    0026: ffffffff ffffffff ffffffff ffffffff 1fffffff 01ffffff 0000000f 00000004\n    002b: 87ffffff 0000001f 00180000 00000000 00000000 00000000 00000000 00000000\nAll of this is with DejaVu v2.33.  It looks like they're up to\nv2.34, but the only changes in the U+2BXX range were the\naddition of U+2B05-U+2B0D to SansMono.\nIt's certainly possible that Gentoo or an overlay maintainer does\npackage a monospace font that contains U+2B21 and U+2B22, but I don't\nreally want to check all of them ;).\nBacking away from the installed-font issue, is my semantic argument\nabout X-ed and empty ballot boxes being closer to the docs not\nconvincing? :p\n. On Mon, Sep 30, 2013 at 06:50:10PM -0700, Simon Boudrias wrote:\n\n@wking Just to keep you up. I'll probably merge this in, I'm just\nnot sure if I want to wait until 0.4 or making this into a patch\nrelease.\n\nI thought I'd bump this in light of the UI fixes and release comments\nin #85 ;).\n. On Tue, Dec 17, 2013 at 07:48:11PM -0800, Simon Boudrias wrote:\n\nI've checked your commit on my mac, and I'm not really happy with\nthe rendering. The glyph is very small and hard to distinguish.\n\nFor everyone else, this is what the glyphs look like in the terminal on OS X 10.6.8 with whatever they use as the default font:\n\n\nAre there any other option you know that could replace the current\nglyph? (I really want to change the current glyph because it is not\nobvious when used with all checkbox checked)\n\nMy second choice (breaking from the Windows ASCII-art rendering), would be U+2713 CHECK MARK and U+0020 SPACE ;).  Both are in Unicode since v1.1.\n\nThough, if we cannot found a compelling replacement glyph, I'm\nthinking of using two global variable allowing user to override\nInquirer glyphs. For example: INQUIRER_CHECKED and\n`INQUIRER_UNCHECKED to be set to the glyph desired by the user. It\nseems not ideal, but would cover edge cases.\n\nSurely there are some glyphs we can all agree on ;). I'm fine with these so someone who uses Inquirer.js a lot can change glyphs that bug them.  For someone who doesn't even realize they're using Inquirer.js (e.g. me when I was using Yeoman), they won't be much help.\n. On Mon, Dec 30, 2013 at 10:36:14PM -0800, Simon Boudrias wrote:\n\nHere's a visual of what I got on my system:\n\n\nGitHub doesn't seem to display cross-site images, and I don't have a\nDropbox account so the URL you give 403s.  Can you add the image again\nusing GitHub's web UI 1?\n. Thanks.  I've overlayed this on an example from the README for side-by-side comparison, although I suspect the increased transparency on the new screen shot may be playing a role.\n\nIn any case, U+2713 CHECK MARK and U+0020 SPACE will have more contrast than thin, light colored, partialy transparent lines ;).  I'm happy to adapt my PR if you want to see how it looks or take another screenshot.\n. On Tue, Dec 31, 2013 at 02:26:36PM -0800, Simon Boudrias wrote:\n\nThe thing with checkmark + spaces, is that when the option is\nuncheck, there's no indicator an action can be taken.\n\nGood point.\n\nI've looked around, and there seems to be a lot of form with\nempty/fill combination. Maybe you could find one with better\nsupport?\n\nDo you mean \u201cfind other choices for character pairs\u201d?  I think the\nballot box ones are going to be the best semantic match.  If you don't\nlike the glyphs in your usual font, I'd suggest just sticking with\nASCII [ ] and [x].  Using the hexagon glyphs and falling back to\nASCII when the user doesn't have a Unicode font would be ok, but\nreliably detecting if the user's terminal has a font that can display\nthe hexagons is likely more trouble than its worth.\n. On Tue, Aug 12, 2014 at 02:16:53PM -0700, Simon Boudrias wrote:\n\nClosed #72 via #138.\n\nU+25CC DOTTED CIRCLE (\u25cc) and U+24E7 CIRCLED LATIN SMALL LETTER X (\u24e7)\nboth date back to Unicode 1.1, so I'm happy.  Thanks :).\n. ",
    "shannonmoeller": "Thank you!\n. Just wanted to say that this change allowed me to vastly simplify an in-house generator (and it's web-interface counterpart) over the weekend. Thanks again!\n. Are you saying that something like this is possible now?\nyes | yo your-gen\nBased on those examples I\u2019m not sure you quite understand what I\u2019m asking for. :)\n. It is old and I haven\u2019t used inquirer recently. Just know that the default field isn\u2019t what I was talking about as that field was available when I asked the original question. :)\nWhat I wanted was the equivalent of the -y flag of npm init -y.. ",
    "johannesjo": "I would find this very useful! Especially since this is not working any more:\necho -ne '\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n' | yo your-gen\nyes | yo your-gen\n. Same issue here.\n. ",
    "hs3180": "Have you thinked about tty.js?\nhttps://github.com/chjj/tty.js\n. ",
    "ruyadorno": "True! It's even described in the same mozilla doc page... Thanks for pointing that out!\n. would it be the same refactor from #197 ? (excluding adding ttys again of course)\n. got it, I might give it a try and send a PR in the next few days :blush: thanks!\n. :+1: addressed all comments\n. :confetti_ball: \n. :confetti_ball: thank you!\n. do you mean the output or really just the returning value of cliWidth()? :confused: anyways this.rl.output is the reason I had to turn them into class methods\nThe first thing I tried was sending the output as a parameter but then it cascades to breakLines() and forceLineReturn() having to add an extra parameter to them just to send down this.rl.output - it was a much uglier solution to be honest\nI'm pretty sure it's going to look the same if we were going to do the same thing with the width\n. oh yeah :stuck_out_tongue: only for breakLines and forceLineReturn might be better, let me try in a sec\n. what about it now?\n. yeah, I just thought about it too, makes sense :+1: \n. oh yeah, much much better :trophy: \n. ",
    "NickHeiner": "I want to make a tool that lets you switch between various config files. I want to let users see a preview of each file as they scroll through the list. I can't cram that into the label.\nI know it could be used to create a bad user experience, but I think it's ok for a tool like this to trust developers using it to do the right thing.\n. I'm fine to close the issue.\nOn Sat, Sep 15, 2018 at 3:37 AM George Gkasdrogkas notifications@github.com\nwrote:\n\nIt seems that the issue was resolved. @SBoudrias\nhttps://github.com/SBoudrias can we close it for inactivity? If there\nis more discussion to be done, it's better to file a new issue. Many things\nhave been improved from the last comment 5 years ago.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/SBoudrias/Inquirer.js/issues/77#issuecomment-421550575,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAypg2diKF2kdQmKOGQ3DD2U80tGQlgHks5ubNhngaJpZM4BFtLU\n.\n. \n",
    "tklun": "Hope this helped out. Any plans to merge this back in?\n. :thumbsup:\n. I'm glad you like it!\nThanks for the code style feedback. I think I got everything fixed, squashed, and amended. Let me know if there is anything else I can do!\n. Sorry for the oversight, but thanks for clarifying. I wasn't sure if you wanted this or the multi-line approach. I'll make the changes.\n. ",
    "hueitan": "+1 for this cool feature.\nAsking for more choices if other is selected.\n. ",
    "webpro": "Sure. In this case it's a tool to e.g. do some Git commands. It asks whether it should \"commit\", then \"tag\", then \"push\". The push command is only relevant if the commit command actually succeeded. It would be wasteful if a question was asked that's not used.\nIn this example you can see I'm using the when option every time to do an action that actually belongs to the previous question.\nBtw, I am refactoring this into a stand-alone tool (it's currently only a Grunt plugin), and while I was at it I wondered how I could improve this.\n. Update: moved example\n. Thanks. I'm on a Mac, so either this is another issue or it's not Windows-only.\n. ",
    "v0lkan": "you're welcome. great library btw.\n. ",
    "stevenvachon": "Awesome!\nI wish that I could help with a PR, but at the moment I don't have the time.\nI do have a syntactical thought, though:\njavascript\nchoices: [\n    { name:\"asdf\", disabled:true },\n    { name:\"asdf\", disabled:function(){return true} }\n]\n. filter and valdiate do not work with type:\"confirm\" and are somewhat illogical for the purpose of a then\n. Ah. I'm trying to cancel the task or the entire task list when certain questions are answered. Without having to separate into many targets.\n. Does your silence mean that you're busy or that you disagree with the idea?\n. Using multiple calls to Inquirer.prompt() will work, but it can be annoying having to deal with the additional variables in grunt-prompt.\nUsing when to perform actions based on the previous answer and not just to decide whether the question should be shown is backwards logic. The code is not where we'd look for it.\n. What about if there is no second question? This is what I mean about broken logic; there is nowhere to put my code except in a custom task. And, I'm not debating the usefulness of when, as I use it quite often. then would just be a callback with an answers argument; much like an onComplete, or similar.\n. Ah, yes, forgot about that. That would work for that case.\nI'll have to stick with my original argument of good organizing, then. Sometimes it makes most sense to throw related code in a when, but code unrelated to the following question belongs with the originating question (in a then?).\n. I wouldn't use it to not show questions, I would use it to perform actions unrelated to the questionnaire, but related to the question that was just answered.\n. Let's say we had 50 questions and the first question was \"would you like to continue?\". Instead of having 49 whens to skip the next 49 questions, we'd put a then on the first one that could cancel all subsequents.\nIt also allows us to group our logic with the question at hand when necessary, instead of a really long callback at the end.\n. process.exit()\n. Or perhaps in addition to that, returning false from then's callback could result in a cancellation of all subsequents?\n. The biggest issue I'm facing is that I'm not using Inquirer directly; I'm using it through grunt-prompt. I'd have to use trickery to get it to work or disorganize logic across unrelated whens.\nI'd figured that requesting a feature here would be best so that the grunt task could simply hook into it. But if that feature bloats Inquirer, it's kind of pointless. Thank you.\n. @SBoudrias what event could they listen for, though?\n. Ah, I see, could get a little messy in their code, but it will work. Thank you.\n. ",
    "djensen47": "Personally, I think it's definitely worth it. I scoured npm for CLI projects and almost none of them have a test suite. It's quite a shame actually.\n. ",
    "joaoafrmartins": "i guess it would be usefull if readline would be bounded to process somehow in a way that when u emit line on process that would bubble down to instances of rl... do u agree? is this something u could add?? this is maybe three lines of code in the right place... dont know about the consequences of doing this...\n. i added a pull request... also... the readline.js file under utils exists in the npm version of the package but not on your github repository...\n. i published my dirty little hack in a package called 'inquirer-process-events'...\n- @example\n  \n  -  inquirer = require 'inquirer'\n  -  lib = require 'inquirer-process-events'\n  -  lib(inquirer)\n    \n  -  process.stdin.resume()\n  -  process.stdin.setEncoding 'utf8'\n  -  inquirer.prompts [some prompt...], (values) ->\n    *\n  -  setTimeout () ->\n  -      process.emit 'iquirer_write', \"hello world\"\n  -      process.emit 'iquirer_line'\n  -  , 500\n. i see what u mean... but imagine u wahnt to test this function\n*\n \\* @method prompts\n \\* @description prompt user for additional information util all\n \\* required information has been defined\n###\n\n```\nprompts: (prompts, callback) ->\nself = @\n\n@inquirer.prompt _.values(prompts), (values) ->\n\n    _prompts = (_values) ->\n\n        ask = []\n\n        for key, value of _values\n\n            if typeof value == undefined then ask.push prompts[key]\n\n        if ask.length then self.inquirer.prompt ask, _prompts\n\n        else\n\n            values = _.defaults(_values, values)\n\n            for key, value of values\n\n                console.log \"#{key}: #{value}\"\n\n            confirm =\n                name: \"confirm\"\n                type: \"confirm\"\n                message:\"do you confirm?\"\n\n            self.inquirer.prompt [confirm], (confirmed) ->\n\n                if confirmed.confirm then callback(values)\n\n                else\n\n                    _values = {}\n\n                    for key, value of prompts\n\n                        _values[key] = undefined\n\n                    _prompts _values\n\n    _prompts values\n\n```\ni dont now if there is a better way to write similar functionality... but mocking the prompt wouldent actionally test this... \nthis is how i wrote the test\nrequire('inquirer-process-events')(cmd.inquirer)\n```\n    prompts =\n        hello:\n            type: \"input\"\n            name: \"hello\"\n            message: \"hello?\"\n            default: undefined\nprompt = cmd.prompts prompts, (values) ->\n\n    assert.equal values.hello, \"world!\"\n    done()\n\nprocess.stdin.resume()\nprocess.stdin.setEncoding 'utf8'\n\nsetTimeout () ->\n\n    process.emit 'inquirer_write', \"world!\"\n    process.emit 'inquirer_write', \"y\"\n\n, 500\n\n```\nand this is the hack.. \nmodule.exports = (inquirer) ->\n```\nprompt = undefined\nprompts = []\ncallbacks = []\nprocess.on \"inquirer_write\", (str) ->\nprompt = prompts.pop()\nprompt.filter(str, callbacks[0])\nprompt.rl.emit \"line\"\n\nfor type, definition of inquirer.prompts\ninquirer.prompts[type].prototype.run = (cb) ->\n\n    callbacks.shift()\n    callbacks.push cb\n    prompts.push @\n\n```\nalthough i agree with you this could potentially introduce bugs...\nthanks for your repply... i will close this now...\n. this is most certainly not the way to do it... \nPrompt.prototype.run = function( cb ) {\n  var self = this;\nprocess.on(\"inquirer_write\", function(str) {\n    self.rl.write(str)\n  });\nprocess.on(\"inquirer_line\", function() {\n    self.rl.emit(\"line\");\n  });\nthis._run(function( value ) {\n    self.filter( value, cb );\n  });\n  return this;\n};\nthis works... for a quick fix and ugly hack... on lib/prompts/base.js... if u want i can submit a new PR but in my opinion... there the test io mockup should be on a different module... \n. ",
    "chrisenytc": ":+1: for this idea.\n. ",
    "jameswomack": "This would be great for doing things like blog posts from the command-line. Hexo would do well to integrate this.\n. ",
    "RonaldTreur": "Just to make sure this stays on the radar: +1\n. ",
    "AndersDJohnson": "+1 Any updates on this? I support the Shift+Enter idea, either as a default to insert newline on any option, or swapped for Enter behavior which instead inserts newline on options explicitly configured as multiline.\n. ",
    "0phoff": "I know there is editor support, but is there any chance that you will also support multiline?\nI prefer would prefer multiline over editor for my application.\nMultiline should allow the user to enter multiple lines, and close when it encounters an empty line (or line with only a dot) or when the user presses CTRL+D.\nAt least that is the standard behaviour across various command line applications I use.\nI tried to look at your code to implement it myself, but I don't really understand how to implement a custom prompt... Is there any documentation or tutorial?. ",
    "aleclarson": "A working (yet untested) implementation: https://github.com/aleclarson/inquirer/commit/16ddf2f497ca7b0929ba252eef875062eebd5e64\nIt adds a multiline boolean option to input prompts. It probably won't merge cleanly into master, because I've made other changes. But you can take inspiration from it.\nThe ctrl+d key binding has its own commit: https://github.com/aleclarson/inquirer/commit/e5c844e9ab056e3b17eef94ae05dc211d0656275. Anyone here should check out #709 and give their thoughts on it. Cheers \ud83c\udf7b . @rdpacheco See #709. @rdpacheco Unlikely that it will, because it modifies the \"old\" codebase and has no unit tests.. @karlhorky That's a good idea. I'll see what I can do. Something like this, right?\njs\nconst answers = await prompt(questions, {\n  foo: true,\n  bar(answers) {\n    if (answers.foo) {\n      // Promises are supported\n      return fetch(url);\n    }\n    // Return undefined to trigger the prompt.\n  }\n});. @karlhorky Okay, give it a try. It works great! :) cb4750be1470f1df2df98795261d95d10f763334. @karlhorky Yup. @arcanis I'm using this PR without issue. I think the maintainer won't merge it because (1) it has no tests and (2) it's not implemented in the new core.. Is this better than parseFloat in some way?. ",
    "kartikluke": "\n. Doesn't seem to be the when option that's causing it I tried allowing the when function to return true only the first time.\n. Thanks.\n. ",
    "jescalan": ":+1: \n. ",
    "sahat": "@SBoudrias their server is currently down since last night, once it comes back up it should work.\n. Should be working now.\n. ",
    "bajtos": "Thank you for the quick and detailed response. I agree with you that an additional Y/N question is the best solution, even though it means more work for me in my app.\nClosing the issue as resolved.\n. ",
    "zewa666": "I'm experiencing the same issue with Node v.0.10.24 and Inquirer v0.5.1 on my Windows 8.1 machine. It just doubles every key stroke, but interestingly the value provided as answer is the proper data.\nSo e.g. I enter ABC -> display == AABBCC, but the value nevertheless = ABC.\nI guess it may be some event emitting called twice.\nEDIT:\nI found the reason for my scenario at least.\nI'm creating a CLI module which of course should operate cross-plattform. So I had to handle CTRL+C on windows where code like this is needed\n```\nif (process.platform === \"win32\"){\n    var rl = readLine.createInterface ({\n        input: process.stdin,\n        output: process.stdout\n    });\nrl.on (\"SIGINT\", function (){\n    process.emit (\"SIGINT\");\n});\n\n}\n```\nSo the readLine interface is interfering with Inquirer. Hope this helps to find out how to solve the bug.\n. ",
    "rodriguise": "Any update on this? I'm seeing this issue on v.0.8 node 10.33.\n. No running my own code\n```\ninquirer.prompt([\n{\n    type: 'input',\n    name: 'user',\n    message: 'Enter your username',\n    validate: promptRequired('username'),\n    when: promptWhen(user, false)\n},\n{\n    type: 'password',\n    name: 'pass',\n    message: 'Enter your password',\n    validate: promptRequired('password'),\n    when: promptWhen(pass, false)\n},\n{\n    type: 'list',\n    name: 'cmd',\n    message: 'Select an operation',\n    choices: ops,\ndefault: false\n}\n], function(answers) {\nuser = answers.user;\npass = answers.pass;\ncmd = answers.cmd;\ncallback();\n});\n```\n. OS X 10.10, Terminal.app\n. This behavior seems to be linked to the bottom bar.\nvar ui = new inquirer.ui.BottomBar();\ncommenting that out it goes away.\n. ",
    "7nights": "@rodriguise \nThe same problem. Have you found a solution?\n. ",
    "masondesu": "FWIW, I ran into the same issue when I when requiring (and using) Inquirer in two separate modules, both of which were being required by a third module.\nI resolved the issue temporarily by reducing it to a single var inquirer = require('inquirer'); for my entire app, and passing that var around when needed, which obviously isn't ideal. Hope that helps :dancer: \n. ",
    "knownasilya": "Might be unrelated, but I ran into this when I instantiated two instances of readline.\n. Basically if you reach the end of the list, clicking down  will not do anything. Same thing when going up.\nBasically this is a ux issue, since you can't tell if you've already been through those options. \nAn alternative would be to put a separator after reaching the end.\n. Is there another issue to look at, or is this already possible (a link/example would be appreciated if so)?\n. Guess this is an alright solution, definitely not the best. Easy to think that the separator is not separating the start and end of the list, but multiple groups in the list, especially if you have many items.\n. @SBoudrias updated\n. @sindresorhus it was taken from cli-color module. If there's a better way, feel free to submit a PR to cli-width. I'm not sure how process.stdout/tty have priority.\n. Looking for something similar for inputing environment variables, so keys and values. Maybe have a recursive input that allows to input one entry, then asks if the user wants to input more, if so, shows it again. This is probably possible with the existing types, but I'd need to experiment to see if it works. Also I'd take an example from @SBoudrias :wink: \n. @SBoudrias can you give a simple example of a recursive prompt?\n. @SBoudrias thanks!\n. ",
    "ruizb": "Got the same problem here with this piece of code:\n```\nvar inquirer = require('inquirer');\nvar ui = new inquirer.ui.BottomBar();\nvar questions = [\n  {\n    name: 'firstname',\n    message: 'First name?',\n    validate: function (data) {\n      // there are as many character duplicates as there are instanciations of BottomBar\n      new inquirer.ui.BottomBar();\n      new inquirer.ui.BottomBar();\n      return true;\n    }\n  },\n  {\n    name: 'lastname',\n    message: 'Last name?'\n  }\n];\ninquirer.prompt(questions, function (answers) {\n  console.log(answers);\n});\n```\nIt seems like the more there are instances of BottomBar, the more there are duplicates.\nTested on OS X Yosemite v10.10.4, node v0.10.33 and iTerm2 v2.1.1.\n\n. ",
    "ccostel": "I am having the same issue.. \nNode v8.9.4\nNPM 5.6.0\niTerm \nOSX 10.12.6 (16G29). ",
    "Poyoman39": "Hey ! Same for me on windows10 with git bash (aka cygwin) and OSX terminal (using last LTS v8 nodejs and inquirer 5.2.0). I did a work around for this bug, if you can't wait for a bug fix. Just decorate the original prompt function like this =>\n```javascript\n  const inquirer = require('inquirer');\nconst pause = duration => (new Promise(resolve => (\n    setTimeout(resolve, duration)\n  )));\nconst decoratedPrompt = async (...args) => {\n    const r = await inquirer.prompt.call(inquirer, ...args);\n    await pause(200);\n    return r;\n  }\nmodule.exports = {\n  prompt: decoratedPrompt,\n }\n```\n... Hope it may help some of you.. ",
    "devzsolt": "Broken for me now, inquirer 6.0.0, node v10.6.0\nBtw. the old prompt package caused the same issue. Any idea guys?. ",
    "AlbertEmil": "Similar problem of duplicate output here. Working with nodejs v10.14.2 and inquirer 6.2.1 on Windows 7 Pro, x64.\nProject dependencies:\n\"dependencies\": {\n    \"cli-interact\": \"^0.1.9\",\n    \"coffeequate\": \"^1.3.0\",\n    \"inquirer\": \"^6.2.1\"\n  }\nSample output:\n$ node app.js\n? What's the sample volume [mL]?  2270\n? What's the sample volume [mL]?  2270\n? What's the sample density [g/mL]?  ,987\n? What's the sample density [g/mL]?  .987\nAdd 1384.04 g of pure ethanol.\nTried both using cmd andGit Bash (based on MINGW64) which provide same faulty output.\nInquirer related code is as follows:\n```\nconst validateFloat = (val) => {\n    if ( val && val.match(/^[0-9][.\\,]?[0-9]$/i) ) {\n        return true\n    }\n    else {\n        return 'Please enter a valid float'\n    }\n}\nconst replaceComma = (val) => {\n    return val.replace(',', '.')\n}\nconst questions = [\n    {\n        type: 'input',\n        name: 'volume',\n        message: \"What's the sample volume [mL]? \",\n        filter: (val) => replaceComma(val),\n        validate: (val) => validateFloat(val),\n    },\n    {\n        type: 'input',\n        name: 'density',\n        message: \"What's the sample density [g/mL]? \",\n        filter: (val) => replaceComma(val),      \n        validate: (val) => validateFloat(val),\n    },\n]\ninquirer.prompt(questions).then(answers => {\n    for (const answer in answers) {\n        answers[answer] = parseFloat(answers[answer])\n    }\nconst answer = query('Press any key twice to exit.')\n\n})\n```. ",
    "kristianoye": "I think the multiple character echo stems from multiple calls to readline.createInterface.  If you have more than one module that does this, then you end up with the duplicate.  Look for and eliminate any redundant calls to fix your problem.. ",
    "jarretth": "@danielchatfield This causes the default password behavior to be simple muting vs masking. IE, hunter2->vshunter2->*******. \n. @danielchatfield The preference simply stems from my expectations as a user of other software which hides passwords entirely in the CLI: Most notably ssh and su[do]. That being said, after doing a bit of research it seems that there are differing opinions on what is the best. \n. Fair, I will change the PR to not alter the default\n. ",
    "Poxiaozhiyu": "\u2018033\u2019 change to '0o33'. ",
    "kaelzhang": "fixes #111 \n. @SBoudrias Got it.\n. Suppose that I will do something as grunt-init xxx does. I need to spawn to get several informations from git, so I have to invoke a async.each to get this. If inquirer supports this.async() in question.default, the code might be clean and clear.\nActually just bringing another utils.runAsync to the code will solve this feature:\n``` js\nutils.runAsync(question.default, function(value){\n  question.default = value;\n// do the things as the old time.\n}, this.answers);\n```\n. @SBoudrias :smile:\n. sorry im late. i'll check this today!\n. @danielchatfield Wait a minute plz.\n. It's already 5:30am at my time. Gotta sleep. Dying. \n. The warning details\nbash\n(node) warning: possible EventEmitter memory leak detected. 11 listeners added. Use emitter.setMaxListeners() to increase limit.\nTrace\n    at ReadStream.EventEmitter.addListener (events.js:179:15)\n    at ReadStream.Readable.on (_stream_readable.js:667:33)\n    at new Interface (readline.js:124:11)\n    at Object.exports.createInterface (readline.js:38:10)\n    at Object.Interface.createInterface (/Users/Kael/Codes/Node/Inquirer.js/node_modules/readline2/index.js:39:21)\n    at PromptUI.UI (/Users/Kael/Codes/Node/Inquirer.js/lib/ui/baseUI.js:23:40)\n    at new PromptUI (/Users/Kael/Codes/Node/Inquirer.js/lib/ui/prompt.js:26:8)\n    at Object.inquirer.prompt (/Users/Kael/Codes/Node/Inquirer.js/lib/inquirer.js:39:10)\n    at Context.<anonymous> (/Users/Kael/Codes/Node/Inquirer.js/test/specs/inquirer.js:246:25)\n. readline.createInterface(input, ...) uses process.stdin as input by default(actually done by 'readline2'). And several listeners will be attached to input such as 'data' and 'end'.\nSo is it something wrong that we forget to remove the listeners after the execution of .prompt method?\nSee you tomorrow.\n. Maybe we should open another issue to talk about this? 'coz the current version of Inquirer.js already has this issue (Rel #115)\n. Sorry, i was deadly busy these days. I'll check this today.\nDid you mean i should handle the question.default inside the centralized sys, i.e. prompt/base?\n. The problems I met:\nthis.answers should be passed as the parameter of question.default. I've got the scenario:\nLet's take npm init into consideration. Maybe the first question is \"what is your repo clone url\", then we answer 'git@github.com:SBoudrias/Inquirer.js.git'.\nThen the second is \"what is your username ?\". We will notice that the default answer of username should be based on the repo from which we can analysis that the default value of username is 'SBoudrias'.\nSo, we can't handle the default value before hand, and it is impossible to do as a instance method of the inquirer.prompts[type] constructor, that we could not get the this.answers from there.\nThe conclusion is:\nWe must handle question.default in PromptUI as well as question.choices does.\n. @SBoudrias Thanks :smile: . I'll handle #125 then.\n. I thought I found who to blame.\nIt's a 'end' event on process.stdin with a handler function inputEnd which is attached by node readline.js but not removed when rl.close().\n. I thought It was a issue of readline.js itself.\n. Related to joyent/node#7578\n. here displays the filtered answer to the user, but I thought it was weird.\n\nI want a a, b, c, but it let out a b c. Why ?\n. Great, I will fix this today after the question.default pr ~\n. So what about the case in #125 ?\n. I think we should only run the filter function on the raw input once.\n\njs\n{\n  name: 'keywords',\n  type: 'input',\n  filter: function(keywords){\n    return (keywords || '').split(/\\s*,\\s*/); // Oops, array has no method split\n  }\n}\nAll other prompt types only run filter functions only once except input, which is a bit weird.\n. Wait a minute\n. ",
    "balupton": "You could also use bevry/ambi\n. To workaround this problem, once I've got the answers, I manually apply the missing values based on the answer results. It is quite annoying I have to say!. Figured out a solution for this that works quite well. Will release it once I am done testing.. For the functionality, refer to:\nhttps://github.com/bevry/boundation/blob/977314f8ac1a827b1c7f0e8cb05cb3d59aee160d/source/answers.js\nFor the usage, refer to:\nhttps://github.com/bevry/boundation/blob/977314f8ac1a827b1c7f0e8cb05cb3d59aee160d/source/questions.js\nGive it a go via:\nhttps://github.com/bevry/boundation\n@SBoudrias is it possible to see this skip/ignore handling make its way into inquirer? Or should I publish a wrapper package? . Usage is easier having both constructs available. The ignore implementation functions as when currently does, and the skip implementation functions as when but applies the default. Just having one or the other makes things a lot more complicated, for instance, just doing defaults means one needs to add default null cases for everything they want ignored, which is a nightmare \u2014 it was my first attempt. It is only in times when one wants things skipped that they want the default value. See the usage link for the contrast between the two.\nSent with GitHawk. I'd rather not do any PR, as I don't get paid to program, so open-source is at the expense of my sanity and limited finances and detracts from my family, all of which are already in the dumpster due to my own open-source projects draining everything out of me.\nSent with GitHawk. Keep as is. As it enables extensions like I have done. Doing default on when false, actually makes consumption more complicated, as described before. As questions that are not applicable, will get default values, rather than no value. Doing defaults on when false, means you have to convert defaults to functions that do the appropriate check, and returns null if not applicable, or the default value if applicable. Hence my implementations distinguishement between ignore/when and skip (which uses default). If this was to be bultin, all it would be to keep existing when functionality, introduce ignore which inverts the when result, and introduce skip which when true uses default value. The default value should be contained in the params sent to them, to make their implementation easier. As it is common to skip things based on the default value, but at other time you want to skip things based on other values. You can run boundation to see how this works in practice. The output of ignored things is dimmed, the output of skipped things is not dim.. Is there a way to abandon the current flow? As the \"finish then start again from\" won't work for my use case, as the questions after depend on the questions prior.\nSent with GitHawk. ",
    "soyuka": "I'm sure that there are plenty of workarounds for this, like promises for example.\n. +1\n. Indeed, I launched \"npm test\" locally before making the PR.\n. Dude I can read...\nTested on local with node v0.8.26 but if I remember well there was an npm update where versions could be prefixed with ^ as of node v.10.28.\nI've got the following error while running npm install with npm 1.2.30 and node 0.8.26 :\nnpm ERR! Error: No compatible version found: date-now@'^0.1.4'\nNo way to found which package is installing this date-now package :/. Any clue?\nCould we depreceate node 0.8?\n. As of 10.26 npm had this versionning update source\nTravis has automated node installation through nvm, so npm is dependent on which nodejs version you use. As far as I know, there is no way of configuring travis that way (or nvm).\n. I've found the failing package: grunt-contrib-jshint. But it seems this go way further to another dep of another dep ...\n. There is an optionalDependencies option in the npm package.json file but no optionalDevDependencies... We could add a \"preInstall\" script with a try{} catch() block on the GruntFile but that's really messy and only for nodejs 0.8 support?\nI Don't think this is a solution, I'm opening an issue for further disussions on this.\n. Why? Nodejs 0.12 'll be released soon (I hope) so it looks like 0.8 is going to be depreceated isn't it?\nYes if there is no further solution to this the only option would be to remove 0.8 from travis, but even manually I can't seem to find the problematic package :/. \n. string.charAt(string.length - 1)\n. \\o/ my bad\n. ",
    "fnhipster": "Thanks for the quick response @SBoudrias. Quick question. Is there a way (work around I can apply to a copy of Inquirer) where pressing \"y\" or \"n\"  doesn't echo the input and apply the selection without needed to press [enter]?\n. @danielchatfield great, thanks. I'll also take a look and see if I can contribute with something. Good luck with your exams!\n. @danielchatfield although I like the submit on keypress, I don't think it changes the core of the issue. Adding ui.rl.output.mute() right before the question removes that open output that the BottomBar leaves right open.\n```\ninquirer = require \"inquirer\"\nui = new inquirer.ui.BottomBar()\nAsk the Question\nui.rl.output.mute() # quick hack to overcome BottomBar issue\ninquirer.prompt [\n    type: 'confirm'\n    message: 'Select the environments underline you would like to deploy to:'\n    name: 'confirmation'\n], (answers) -> console.log \"You have selected #{answers['confirmation']}\"\n```\nIn another note and going back to the keypress, the only issue with that is that Yes is true and any other key is false. I tried adding validations to \"y\" and \"n\" and having any other key return the question back up. I couldn't get the question to pop right back.\n. I solved my issue. I'm not sure if you have a more elegant way to fix it but here is my two cents https://github.com/SBoudrias/Inquirer.js/pull/117\n. ",
    "Coriou": "I believe this bug is still in today. ",
    "zakdances": "This would be great. It would help keep prompts as brief as possible (no unnecessary sub-options prompts needed).\n. ",
    "sabsaxo": "Radio Buttons vs Checkboxes?. Great, thanks.. ",
    "macrolo": "  $(\"#yes\").on(\"click\", function () {\n        var yesDocket = document.getElementById('no');\n        yesDocket.checked = false;\n    });\n\n    $(\"#no\").on(\"click\", function () {\n        var noDocket = document.getElementById('yes');\n        noDocket.checked = false;\n    });.\n",
    "khmelevskii": "sorry\n. for example API:\n```\n  var prompts = [\n    {\n      type: 'input',\n      name: 'additionFields',\n      message: 'Addition fields(comma separated)'\n    },\n    function(props){\n      var fields = props.additionFields.split(','),\n        fieldsPrompts = [];\n  _.each(fields, function(field) {\n    fieldsPrompts.push({\n      name: field + 'FieldInfo',\n      message: 'Use ' + field + ' field'\n    });\n  }\n\n  return fields;\n}\n\n]\n```\n. ",
    "UltCombo": "@SBoudrias Thanks, fetching the message value with fetchAsyncQuestionProperty seems to do the trick. However, I'm having issues to write a test for it.\nthis.output (which I assume to be written from here) is not working as I'd expect, it is writing message.toString() instead of the function's return value/async result. Weird how this patch works in practice but seems to fail in the test before reaching that write method.\n. And should this patch go in the WIP branch? Looks like the WIP branch wasn't refactored yet.\n. This works with the public API (inquirer.prompt()), any pointers on what's wrong with this test?\n. Oh alright, thanks! I'll take a look when I have some more free time. =]\n. @SBoudrias PTAL.\n. You're welcome. :smile:\n. ",
    "kevva": "Lol, yeah. Windows is the ugliest one, of course.\n. ",
    "addyosmani": "Please don't hate me either :')\nI personally prefer the existing one for OSX but the Windows and Linux variants look a lot nicer. The circled question mark is smaller than at the current one and I actually thought that I was looking at a substituted glyph initially (sorry!). Other than that, these look beautiful. \n. ",
    "dylang": "Despite this text and using this library for years in projects I maintain, I still think my code must be broken when I see fewer options than I'm expecting because I forget it scrolls.\nWhat if it said something at the bottom like\n\u25bc 6 more choices\nIt could have something similar show up at the top too using \u25b2.\n. > PR welcomed to dynamically set the size depending on the terminal rows.\nGreat, will attempt a PR.\n. Hi @SBoudrias, \nOther priorities took over and I haven't been able to look at this. From what I remember, some of the issues you mention are already issues in the current code and I didn't want to get too deep given my limited time. \n. @sindresorhus I'd love to but I don't think I'll have time to look at it for a few weeks.\n. ",
    "dantman": "This is a severe problem for some users of inquirer like npm-check. When multiple separators are used this bug can stack resulting in the cursor completely leaving the visible area.\n\n. This bug is probably related to this line:\n\nhttps://github.com/SBoudrias/Inquirer.js/blob/master/lib/prompts/list.js#L97\njs\nmessage += \"\\n\" + this.paginator.paginate(choicesStr, this.selected);\n\nThe lines of choicesStr includes the separators. But the active integer this.selected does not account for separators.\n. I'm not sure what the point of doing this as a filter would be. I'd like this too, but I think it should be an optional property on the choice object.\njs\nchoices: [\n  { value: 'pizza', name: \"Order a pizza\", short: \"Pizza\" }\n]\nOr maybe a pretty or other property to override the text shown in the list instead.\nI do think this is fairly important, because there are various cli apps where the name is made really long and formatted so it's helpful to the user. But all that formatting is in the way after the selection.\nFor example npm-check -u which turns into this after selection.\n? Choose which packages to update. bluebird  2.10.0  \u276f  2.10.1  https://github.com/petkaantonov/bluebird, req...\nThis got cut off because it line-wrapped and ended up written over by the continuation of npm-check.\n((This is actually cut off \n. The bottom bar broke recently. This appears to be the fault of 84b2bbc.\nrlUtils.clearLine(rl) was changed to rlUtils.clearLine(rl, lines) expecting a new len arg. The bottom bar still calls it the old way not indicating how many lines to clear effectively meaning 0 lines are cleared instead of the previous 1 line cleared.\n. ",
    "Froren": "Doesn't seem like this is an issue anymore.. Created PR 609 to experiment with this functionality.. Created PR 607 to address the issue. Updated again.. Great catch, I'll use that from now on. Will update it in a while.. Updated.. Sure, that sounds great.. I realize now that this was a bug, it should be defIndex = (index !== -1 ? index: defIndex);\nI'll make the change in the commit to use _.findIndex, though I don't think we can use Math.max anymore with that, since expand's default is the end of the array.. ",
    "LouiseBC": "It's still an issue for me in both iTerm and Terminal. ",
    "ascariandrea": "@SBoudrias any update of this?\n. I'd suggest to make the list you are filtering on visible and make it works like rawlist.\n. ",
    "fnky": "I was just about to issue this feature :)\n+1\n. ",
    "JimmyBoh": "@SBoudrias Is there any written documentation on this? I see how it works with the built in types, but wasn't sure if there was a wiki page or blog post with details and gotchyas.\n. @SBoudrias Any insight on this? In the meantime I will make the change and send a PR out. Please let me know if there is any other definitions that needs updating.\n. Will do, thank you!\n. ",
    "hemanth": "@danielchatfield Yes, but say the use case prompting the user for a module name checking if it's present and prompt the same question without proceeding. Tried something like this and seems like there is a side effect with that approach.\n. If it's of type confirm we can't have an explicit validate right?\nSay like:\nEnter the module name: yo\nThe module name already exists do you want to use it anyway (Y/N) ?\nOn yes proceed to the next question and on no ask the same question again.\n. Thanks.\n. ",
    "0x6e6562": "I've been able to reproduce this with Terminal app (in addition to iTerm2 on OSX) - and also on Debian  Wheezy (with v0.10.31).\n. I retested this with 34fbdcb which appears to have fixed the behavior I originally reported, so many thanks for that, but I think there might still be a couple of more subtle bugs with this particular example. For example, using the checkbox.js example and pressing enter without de-selecting anything results  in this behavior:\n```\n$ node examples/checkbox.js\n? Select toppings:\n The usual:\n\u276f\u25cc Peperonni\n \u24e7 Cheese\n \u25cc Mushroom\n \u25cc Pineapple\n \u25cc Bacon\n - Olives (out of stock)\n \u25cc Extra cheese\n\n\nYou must choose at least one topping.\n```\n\n\nAlso, if I de-select the default Cheese setting, i.e.\n$ node examples/checkbox.js\n? Select toppings:\n The usual:\n \u25cc Peperonni\n\u276f\u25cc Cheese\n \u25cc Mushroom\n \u25cc Pineapple\n \u25cc Bacon\n - Olives (out of stock)\n \u25cc Extra cheese\nand then press enter, the validation doesn't fire at all:\nnode examples/checkbox.js\n? Select toppings:\n{\n  \"toppings\": []\n}\nBut if I modify the default setting in the question descriptor, i.e. \ndiff\ngit diff examples/checkbox.js\ndiff --git a/examples/checkbox.js b/examples/checkbox.js\nindex 498c309..d9f6f98 100644\n--- a/examples/checkbox.js\n+++ b/examples/checkbox.js\n@@ -16,8 +16,8 @@ inquirer.prompt([\n         name: \"Peperonni\"\n       },\n       {\n-        name: \"Cheese\",\n-        checked: true\n+        name: \"Cheese\"//,\n+        //checked: true\n       },\n       {\n         name: \"Mushroom\"\nThen this time the validation does (correctly) fire.\nWhat would be the preferred way of handling this - by re-opening this issue or creating a new issue?\n. Cool, this looks pretty good now, thanks for sorting this out :-)\n. ",
    "kxbrand": "Yeah, operating environment is windows, normal execution in the standard CMD window, in the powercmd, can not input and can not choose, but in the console2 execution is normal, there may be problems with powercmd.\n. Yeah,Console2 is juest a wrpper.\n. I solved the problem using consle2, if the problem is the powercmd's bug, please close issue .\n. ",
    "akwangho": "@danielchatfield\nCool!! This is really what I want.\nThank you so much!\n. @SBoudrias  Thank you for the comment. I've tried async.js but I found the code is still not easy to understand.\nIndeed, it's really a challenge to get familiar with events and promises which are the asynchronous nature of node.js for command line prompt. Anyway, I will try to embrace them.\nThank you again for this good module.\n. Eventually I can succeed write asynchronous code by deferred with its promises.\nTo use deasync is really not a good idea in this case since I found the CPU usage is quite high (2% to 3%) because of the while loop.\nWith asynchronous code the CPU usage is almost 0%.\nThank @SBoudrias to let me know the benefit of asynchronous code.\n. Duplicate to #172 so close this.\n. I've verified this by Mac OSx, ubuntu 14.04 and. CentOS 6.\n. @bezoerb Thank you so much for trying this.\nIt's a wrapping issue which we may not support it as #176 mentioned.\n@SBoudrias Please also take a look at the video Inquirer.js 8.0 in Windows 7 which is my verification in Win 7.\nLine wrapping issue is still there although they are not exactly the same.\n. Thank you for the reviewing.\nIf I understand correctly we should use takeUtil like following code since there's no validation required with handleSubmitEvents by referring to prompt list.\n``` js\n  var events = observe(this.rl);\n  events.keypress.takeUntil( events.line ).forEach( this.onKeypress.bind(this) );\nevents.line.take(1).forEach( this.onEnd.bind(this) );\n```\n. 1. Nothing happens. I add those precondition just want to make sure for minimum impact.\n2. To a terminal wider than 1000 chars, than it will still render from a wrong position although I do not think there's any terminal wider than 1000. This can be verified by changing the magic number to 100 or 10 to get a try. Anyway, the magic number was replaced by actual length in the latest code.\n. ",
    "pyramation": "can we reopen this?\nI'll try to illustrate a good use case:\njs\nvar inquirer = require('inquirer');\ninquirer.registerPrompt(\n  'autocomplete',\n  require('inquirer-autocomplete-prompt')\n);\n...\ninquirer.prompt([{\n  type: 'autocomplete',\n  name: 'from',\n  message: 'Select a state to travel from',\n  source: function(answersSoFar, input) {\n    return myApi.searchStates(input);\n  }\n}]).then(function(answers) {\n  //etc\n});\nIf we filter the questions, you will see that answersSoFar will be missing what could be useful for narrowing down a search result, for example. I understand there are hacks around it, but I agree with @tonylukasavage that this is an important missing feature.\n. cool! I took a stab at it here: https://github.com/pyramation/Inquirer.js/pull/1/files\nI think I have something that works, but 3 tests are broken, maybe you can see what I did wrong! The test case I wrote passes---it's something around async fetching of property defaults that broke (error messages at bottom of this post)\nMy approach was to return an always-resolving answer from the overrides before asking the user anything. \n```js\nPromptUI.prototype.fetchAnswer = function (question) {\n  if (question.name && _.has(this.overrides, question.name)) {\n    return rx.Observable.defer(\n      function () {\n        return rx.Observable.fromPromise(\n          new Promise(resolve => {\n            resolve({\n              name: question.name,\n              answer: this.overrides[question.name]\n            });\n          })\n        );\n      }.bind(this)\n    );\n  }\nvar Prompt = this.prompts[question.type];\n  this.activePrompt = new Prompt(question, this.rl, this.answers);\n  return rx.Observable.defer(function () {\n    return rx.Observable.fromPromise(this.activePrompt.run().then(function (answer) {\n      return {name: question.name, answer: answer};\n    }));\n  }.bind(this));\n};\n```\nFor providing overrides, I passed them into the prompt constructor:\njs\n    var overrides = {\n      q1: false\n    };\n    var prompts = [\n      {\n        type: 'confirm',\n        name: 'q1',\n        message: 'message',\n        default: true\n      },\n      {\n        type: 'confirm',\n        name: 'q2',\n        message: 'message',\n        default: false\n      }\n    ];\n    var promise = this.prompt(prompts, overrides);\nHere were the errors:\n```\n1) inquirer.prompt should run asynchronous message:\n     Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n2) inquirer.prompt should parse default if passed as a function:\n     Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n3) inquirer.prompt should parse choices if passed as a function:\n     Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n```. finally got around to it - but ended up just making a wrapper. If anyone is interested in this https://github.com/pyramation/inquirerer. ",
    "tonylukasavage": "\n. Feedback on this one? In #167 it seemed as though you were open to receiving a PR for this fix. Just want to make sure this suits the task as I would incorporate it immediately.\n. Tests are running fine for Mac as well. @sboudrias was indicating that certain examples weren't running as expected. It would be ideal if those issues could be covered in the unit tests, but since they aren't, I'll need to run the examples and figure out which ones fail and how. I haven't had time to do all that functional testing yet, but hopefully will soon since this is an important fix for us. \n. @SBoudrias is there a workaround for those of us using inquirer.js?\n. @SBoudrias but rx is a dependency of inquirer, how can I make inquirer use an earlier version when its a dependency of my project?\n. +1, im all for interim quick-fix 0.8.1 with the hard-coded, or range limited, rx version\n. kk, thanks @SBoudrias for the insight and very quick response! I'll close this issue once the rx fix is in place.\n. ",
    "flovan": "I think I found another bug that overlaps with the behaviour reported above.\nWhen the default value of a prompt spans across a new line, the error message gets cut off by the amount of characters already present on that line.\nExample result with response \"this is an error message\":\n? This is a question? (and this is a very long\ndefault answer) WrongAnswer\n? This is a question? (and this is a very long\ndefault answer) essage\n. ",
    "AdrienHorgnies": "@SBoudrias Why is that ? I don't quite get it, ask user input synchronously is what I'd do in many languages. The case where you wait for user input and cannot do anything without it is pretty common.. Note : I discovered that inquirer default field could receive a function after coding all this mess... Damn me.\nIf anyone is interested, here is how I tested code using inquirer with sinon.js.\n```javascript\nconst askCredentials = () => {\n    const credentials = {};\nreturn inquirer.prompt(inquiries.dbms)\n    .then((onFulfilled) => {\n        credentials.dbms = onFulfilled.dbms;\n\n        inquiries.port.default = cst.dbmsList[credentials.dbms].defaultPort;\n\n        return inquirer.prompt([inquiries.host, inquiries.port, inquiries.user, inquiries.password]);\n    })\n    .then(onFulfilled => Object.assign(credentials, onFulfilled));\n\n};\n``\nThis function prompts the user required information to log in a database. The objectinquiriescontains the questionsinquirer` must ask. It first asks the user what dbms he uses and then set the corresponding default port for the following question.\nAnd here is how I test this function : \n```javascript\nconst assert = require('assert');\nconst sinon = require('sinon');\nconst inquirer = require('inquirer');\nconst prompt = require('../prompt'); // contains the method I'm testing\nconst cst = require('../constants');\nconst sandbox = sinon.sandbox.create();\nconst inq = cst.inquiries;\ndescribe('askCredentials', function () {\n    afterEach(function () {\n        sandbox.restore();\n    });\nit('provides the correct default for the chosen dbms', function () {\n    const inquirerPromptStub = sandbox.stub(inquirer, 'prompt').onCall(0).resolves({ dbms: cst.dbmsList.mysql.name });\n    inquirerPromptStub.onCall(1).resolves(null);\n\n    const expectedPortInq = Object.assign({ default: 3306 }, inq.port);\n\n    return prompt.askCredentials()\n        .then((onFulfilled) => {\n            assert.deepEqual(inquirerPromptStub.getCall(1).args[0], [inq.host, expectedPortInq, inq.user, inq.password]);\n        });\n});\n\n});\nSo the idea is... not to use `inquirer` during the tests. I replaced the function `inquirer.prompt` with one function I defined and which will simply return what I want it to return.. I've came with a workaround. Maybe it can help someone.\nThe idea is that I have two information source : a configuration file (could be whatever object your want) and `inquirer.prompt`.\n1. I load the configuration file and validate values using `question.validate` functions.\n2. Depending what's is defined in the configuration file, I set related `question.when` to false.\n3. I run every `question.default` on the configuration values and replaces default with output if any. That is because skipping questions doesn't populate the answers as explained above.\n:javascript\n// Here prompt is my own.\nprompt.init() // init load configuration file\n    .then(config => prompt.askCredentials() // asking information\n        .then(answers => Object.assign(config, answers)) // merging\n    )\n```\n``javascript\n/**\n * load configuration file if present\n * make related prompts to be skipped\n *\n * @resolves configuration object\n */\nconst init = () => fse.readJson('.db-config.json') // todo use constant\n    .then((config) => {\n        // disable prompts for provided items\n        lodash.forEach(config, (value, key) => {\n            if (inquiries[key]) {\n                // I am so sorry, I have no other choice than to compare to true\n                // validate returns true or the error message and a non empty string is considered truthy\n                if (typeof (inquiries[key].validate) === 'function' && inquiries[key].validate(config[key]) !== true) {\n                    // better store all errors then log them all\n                    throw Error(.db-config.json \"${key}\": \"${value}\" ${inquiries[key].validate(config[key])});\n                }\n                inquiries[key].when = false;\n            } else {\n                // todo more something of a warning\n                throw Error(${inquiries[key]} is defined in .db-config.json but is not a valid configuration item`); // todo use constant\n            }\n        });\n        lodash.forEach(inquiries, (prompt) => {\n            if (typeof (prompt.default) === 'function') {\n                // if prompt can define a default value from configuration, uses it\n                if (prompt.default(config)) prompt.default = prompt.default(config);\n            }\n        });\n        return config;\n    })\n    .catch((error) => {\n        console.error(error);\n        return {};\n    });\nconst askCredentials = () => inquirer.prompt([\n    inquiries.dbms,\n    inquiries.host,\n    inquiries.port,\n    inquiries.user,\n    inquiries.password,\n    inquiries.schema\n]);\n```\nIf you want more details, the source is here.. ",
    "bezoerb": "@SBoudrias Testet on Windows 7:\nshell\n146 passing (655ms)\nDone, without errors.\n. I'll walk through the examples folder later this day\n. This one does not fix the mentioned multi-line error.\nCan be reproduced on windows by pressing <space> + <return> on the pizza example beverage question: http://take.ms/5v6eV\n. Testet the example on Windows 7 (VM) \nSeems like the weird positioning bug is solved\nThis is the only strange behavior i could produce: http://take.ms/l8RUf\nhappens through: <space> + <return> on the beverage question\n. ",
    "przemyslawpluta": "I'm using checkbox list at #L86 \nThis is how it looks on win7 via cmd. Beep seems to be produced on the first 4 items regardless of the direction taken.\n\nand check content: \n[ { type: 'checkbox',\n    message: 'Select From 26 Videos. Download:',\n    name: 'videos',\n    choices:\n     [ { name: 'All', value: 'all', checked: true },\n       { name: 'Cancel', value: 'cancel' },\n       { name: 'm101 week 3 intro - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 0 },\n       { name: 'm101 1 intro2 - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 1 },\n       { name: 'm101 2 intro - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 2 },\n       { name: 'm101 3 relational normalization - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 3 },\n       { name: 'm101 4 mongo design for blog - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 4 },\n       { name: 'm101 5 mongo design for blog - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 5 },\n       { name: 'm101 6 alt schema for blog - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 6 },\n       { name: 'm101 7 living wo constraints - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 7 },\n       { name: 'm101 8 living wo constraints - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 8 },\n       { name: 'm101 9 living wo transactions - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 9 },\n       { name: 'm101 10 living wo transactions - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 10 },\n       { name: 'm101 11 one to one - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 11 },\n       { name: 'm101 12 one to one - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 12 },\n       { name: 'm101 13 one to many - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 13 },\n       { name: 'm101 14 on to many - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 14 },\n       { name: 'm101 15 many to many - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 15 },\n       { name: 'multikey - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 16 },\n       { name: 'm101 17 benefits of embedding - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 17 },\n       { name: 'm101 18 representing trees - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 18 },\n       { name: 'm101 19 representing trees - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 19 },\n       { name: 'm101 20 when to denormalize - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 20 },\n       { name: 'm101 21 storing large files - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 21 },\n       { name: 'm101 23 hw2 - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 22 },\n       { name: 'm101p_hw 3.2 - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 23 },\n       { name: 'm101 24 hw3 - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 24 },\n       { name: 'm101p_hw 3.3 - 1280x720',\n         value: 'https://youtu.be/itemToDownload',\n         id: 25 },\n       [length]: 28 ],\n    validate:\n     { [Function: validate]\n       [length]: 1,\n       [name]: 'validate',\n       [arguments]: [Getter/Setter],\n       [caller]: [Getter/Setter],\n       [prototype]: { [constructor]: [Circular] } } },\n  [length]: 1 ]\n. Thanks for the tip @SBoudrias \n. ",
    "Skywalker13": "I confirm this problem with Windows 7 and I'm using node v0.10.32.\n. I've this problem with all checkbox prompts. The beep(s) appears when at least one entry is selected. And when the cursor is moved up and down, it beeps the same number of times that entries are checked.\nIt suggests that the problem is the \"draw\" used when an entry is checked. This \"character\" seems to be the beep. If you look the previous screenshot, nothing is printed between '(' and ')' for the checked entry.\n. Hello,\nAn example in order to remove ?.\njs\n/* HACK inquirer prefix */\nObject.keys (inquirer.prompt.prompts).forEach (function (prompt) {\n  inquirer.prompt.prompts[prompt].prototype.prefix = function (str) {\n    return str;\n  };\n});\n. > This pull request adds support for clients overriding the \"?\" prefix that appears on question prompts, by specifying a prefixMessage property.\nI think that you should provide a way to remove completely the prompt, not just a way for changing.. ",
    "gdbtek": "is there anyway that I can extend this variable easy without forking and patching the code? I'm thinking of if it is possible to provide a way to override the default value rather than forcing everyone to use the same default value?\nThanks!\n. @SBoudrias  so I should use https://github.com/SBoudrias/Inquirer.js/releases/tag/v0.8.0 instead of v0.8.1, am I correct? Thanks\n. use v0.8.0 and now I don't have the issue. Thanks\n. ",
    "kokujin": "@SBoudrias , do you have a link to the docs on how one can develop plugins? Thanks\n. Does anyone have a solution for this issue? Thanks\n. ",
    "Asheboy": "This would not be the case during a \u2018screen sharing\u2019 session/recorded screen playback.\n. You certainly can hack it together by removing https://github.com/SBoudrias/Inquirer.js/blob/master/lib/prompts/password.js#L148-L152. You'd really want to remove that function, alas, I receive an error of which I do not have time to resolve at the moment. I might take another look this evening\n. ",
    "timmyg": "anyone know how to hack this together @Asheboy @danielchatfield?\n. yea ok, I'll mess around with it and hopefully send a PR this weekend or early next week.\n. eek, going to close and redo\n. ",
    "aakilfernandes": "\nThis has been discussed before, It adds no security to do this since for someone to see how many asterisks appear then they must be able to observe the screen and thus can see the number of keystrokes pressed. The output is removed when the password entered so they will not appear in any logs.\n\n@danielchatfield do you have a source on that?. ",
    "thaiat": "ok i understand , but how would you then terminate a generator when a passed arguments is invalid ?\n- this.end() will execute the on('end') listener so not good\n- this.emit('error') output an ugly stack\n- process.exit() will exit gulp test when running unit tests\n. the call stack displayed in the console is really ugly when i would just need a log(chalk.red('You did something wrong'));\n. ",
    "Amberlamps": "I would like to have a validate function on list types. Why would you purposely remove that feature?\nFor anyone who wants to validate on list types, you can abuse the filter function for that if you must.\nfilter: function(val) {\n    if (val === 'throw') {\n      throw new Error('illegal');\n    }\n    return val;\n  }\n. I am running Node in 5.0.0 on Windows 8.1. Arrow keys do not work in this simple example:\n```\nvar questions = [\n  {\n    type: \"list\",\n    name: \"color\",\n    message: \"Pick a color\",\n    choices: ['red', 'green', 'blue']\n  }\n];\ninquirer.prompt(questions, (answers) => {\n  console.log(answers);\n});\n```\nBut when I add a simple boolean it magically works. Maybe this sheds a little light on this issue.\n```\nvar questions = [\n  {\n    type: \"confirm\",\n    name: \"mood\",\n    message: \"Are you feeling alright?\",\n    default: true\n  },\n  {\n    type: \"list\",\n    name: \"color\",\n    message: \"Pick a color\",\n    choices: ['red', 'green', 'blue']\n  }\n];\ninquirer.prompt(questions, (answers) => {\n  console.log(answers);\n});\n```\n. ",
    "lxlang": ":+1: \n. ",
    "nhubbard": "Okay, I get what you're saying. I have my functions, but I'm confused on how to run it. Should it be like this?\njavascript\nif(answer === 'null') {\n// callback goes here\n}\n. I got the hang of it. Sorry about that.\n. ",
    "CWSpear": "Argh, I misread when. I guess I can do the 2nd part via that. Sorry!\n. ",
    "jlukic": ":+1: \n. :+1: \n. ",
    "naholyr": "Very probably, I didn't want to change default behavior in this pull request because I'm not fully aware of the potential side-effects. You may know better ;)\n. OK let's rock 'n roll if you feel it, I update my PR to add this :)\n. solving conflicts now\u2026\n. Hmm, when squasing into a single commit it grabbed (and reauthored) the commits I merged from master. I make a new fresh PR from a cherry-pick :)\n. Well done :)\n. ",
    "jhaynie": "Looks like they fixed the parent thing just now\nhttps://github.com/Reactive-Extensions/RxJS/commit/3f8c21c46174fe2c07a5960f71685091f0869f83\n. we (inquirer) should hard code previous version in package.json for now (instead of ^ range)\n. thanks @SBoudrias \n. ",
    "mjpearson": "Thanks @SBoudrias \n. ",
    "sheerun": "It doesn't seem rx.js 2.3.16 fixed the problem:\n$ cd bower\n$ npm list | grep rx\n\u2502 \u251c\u2500\u2500 rx@2.3.16\n\u2502 \u2502 \u251c\u2500\u2500 rx@2.3.16\n$ bower init\nfromArray is deprecated, use from instead. Error\n    at Rx.helpers.deprecate (/Users/sheerun/Source/Bower/bower/node_modules/inquirer/node_modules/rx/dist/rx.all.js:91:79)\n    at Function.Observable.fromArray (/Users/sheerun/Source/Bower/bower/node_modules/inquirer/node_modules/rx/dist/rx.all.js:2297:5)\n. rx.js fixed the error, but deprecation warning persists. It only looks like an Error.\n. ",
    "Swiip": "It's perfect! It fits my needs and it's so much simpler to use.\nStill a bit frustrated to not be able to use RxJS but thanks.\n. ",
    "Freyert": "I attempted to pass in an Rx.Observables instance in a yeoman generator prompt and was slapped with this message:\nError: You must provide a 'message' parameter\nThis is how I use it.\n``` javascript\n  prompting: function () {\n    var prompts = Rx.Observable.create(function(obs) {\n      obs.onNext({ type: 'input',\n        name: 'howdy',\n        message:'howdy'\n        }\n      }); \n      obs.onCompleted();\n    }); \nthis.prompt(prompts);\n\n}, \n```\nI must be missing something. If you require('inquirer') and use it instead of the interface built into the generator class it works perfectly except for the duplicate bug in issue #209.\n``` javascript\n  prompting: function () {\n    var done = this.async();\nvar log = function(answers) { this.log(answers); }.bind(this);\n\nvar complete = function() {\n  this.log('complete');\n  done();\n}.bind(this);\n\nvar prompts = Rx.Observable.create(function(obs) {\n  this.log(obs);\n  obs.onNext({ type: 'input',\n    name: 'howdy',\n    message:'howdy'\n  }); \n  obs.onNext({ type: 'input',\n    name: 'okee',\n    message:'okee'\n  }); \n  obs.onCompleted();\n}.bind(this));\n\ninquirer.prompt(prompts).process.subscribe(log, log, complete);\n\n}\n```\n. Alright, got this to work. @justin-calleja what OS and Shell are you running? This happened to me on OSX Yosemite 10.10.3.\nHere's a log of what went down:\n>>? signifies user input\n```\n{ isStopped: false,\n  observer: \n   { observer: { isStopped: false, observer: [Object], m: [Object] },\n     selector: [Function],\n     source: \n      { source: [Object],\n        selector: [Function],\n        _subscribe: [Function: subscribe] },\n     i: 0,\n     isStopped: false },\n  m: { isDisposed: false, current: null } }\nDUPLICATE>>? howdy: { isStopped: false,\n  observer: \n   { observer: { isStopped: false, observer: [Object], m: [Object] },\n     selector: [Function],\n     source: \n      { source: [Object],\n        selector: [Function],\n        _subscribe: [Function: subscribe] },\n     i: 0,\n     isStopped: false },\n  m: { isDisposed: false, current: null } }\n\n\n\n? howdy: hello\n{ name: 'howdy', answer: 'hello' }\n? okee: there\n{ name: 'okee', answer: 'there' }\ncomplete\n```\n. \n\n\n",
    "tkellen": "That's a bad reason. The lack of adherence to this node standard breaks an entire ecosystem of control flow libraries that compose callback-taking methods. Would you consider bumping major to fix this?\n. Now I am doubting myself... I may be conflating reserved words and identifiers. @rwaldron, could you weigh in here?\n. Thanks @rwaldron.  Ignore me @SBoudrias.\n/cc @carldanley, I was wrong!\n. ",
    "JimtotheB": "I just stumbled on this issue myself, I have a pretty complicated setup composed of a bunch of reusable prompts. I figured I would just use bluebirds Promise.promisifyAll() to compose them into the order I wanted. No dice, my promises all get resolved on the .catch or .error handler though... \n. @SBoudrias @shellscape I figured this would be the case, as it is going to break for everyone that already wrapped it.\n. ",
    "jergason": "I have the exact same issue as PaperElectron. Conforming to the node api makes a lot of sense and makes it easier to interoperate with other tools, even if the error will never be present.\n. ",
    "shellscape": "@SBoudrias doesn't look like I'm alone in this situation, several good points made. Reconsideration?\n. ",
    "callumlocke": "Has there been any progress on this?\n. @SBoudrias I am happy to put together a PR if you can confirm you're willing to do a major version bump for this?\n. @AGresvig I had a dig around but decided I'm not the one to do it if @SBoudrias wants to retain the Rx stuff.\n. ",
    "guillaumervls": ":+1: \n. ",
    "rmg": "Similar to @adriengibrat for me. I've got yeomen generators failing in CI all over the place once 0.8.1 was released.\n. @SBoudrias the generator is using the test helpers and the stacktrace shows var helpers = require('yeoman-generator').test; right near the bottom.\nTo be clear:\n- the error is Error: ENXIO, no such device or address '/dev/tty'\n- it comes from TooTallNate/ttys/index.js:9\n- is triggered on load via require('yeoman-generator')\nThe root of the problem is that the ttys module assumes there actually is a TTY to attach to. The result is this PR adds that same erroneous assumption to inquirer.js, which in turn adds it to yeoman.\nSince tty hasn't been updated in 3 years (as far as I can tell), I'm inclined to think that require('ttys'); added by this PR should be wrapped in a try/catch rather than relying on an update to the tty module.\n. Forgot to mention the reproduction steps:\n1. ssh -T localhost \"cd $PWD; npm test\"  (where $PWD is some generator's checkout)\n2. there is no step 2, ssh -T localhost is a quick'n'dirty way to drop your TTY.\n. ",
    "n2liquid": "Can't wait to implement a line picker once this is implemented to do things like this:\n$ vim $(find . -name config.json | picklines)\n? Pick lines: path/1/to/config.json, path/2/to/config.json\n \u25c9 path/1/to/config.json\n\u276f\u25c9 path/2/to/config.json\n \u25ef path/to/some-other/config.json\n2 files to edit\n[Vim session]\nIt's hard to do that when stdin / stdout are being used by Inquirer itself :(\n. ",
    "MohamadAtieh": "+1\nMy case is that I want to validate the current answer if and only if a previous answer was given. The line here - based on this one\n. I think if we can pass the answers object to validate just like when, somehow, then that would be it.\nHaving validate to accept either one or two parameters, making the first one the input value (required) and second (optional) parameter be the answersobject? Is that possible? \nSimilar to this\n. ",
    "himynameisdave": "+1\nThis should really exist already && I have the same concern as @MohamadAtieh. My current workaround is to have two sets of prompts (synchronous), the second one based on the results of the first set. It feels ugly && this is a bad UX for people using my yeoman generator. Will this be patched or is it a 'wait until the next release' kind of thing?\n. I sort of overexaggerated the bad UX thing. It works but its just to me as the developer it looks sloppy/I wish there was a cleaner way to do it. To the user it pretty much does what you need.\n. ",
    "mischah": ":+1: \nWould love to have that. My use case:\nI have prompts to name directories and feel the need to validate against already given answers to prevent naming directories the same. Because that would mess things up badly.\n@himynameisdave \nIt seems that \u00bbsomeone\u00ab has to send a PR according to the tweet of @SBoudrias :octocat: \nI\u2019m already digging into the sources of Inquirer.js, but I\u2019m not convinced that I can handle that.\n. @SBoudrias \nThanks for the hint. But it seems that I\u2019m not smart enough when it comes to JS architecture to implement that.\nWould you accept a PR providing an example and the test and you take care of the implementation within /prompts/base.js?\nJust in the case, that no one else is willing to send a PR dealing with the whole thing. :smirk:\n. Should be fixed with the current Node Release from today:\nQuote from https://github.com/yeoman/yo/issues/485#issuecomment-262441418\n\nClosing this since Node 7.2 fixes this issue:\nhttps://nodejs.org/en/blog/release/v7.2.0/. Yeah \ud83c\udf89 . You could send this one through an SVG optimizer to get rid of unneeded stuff and bytes. Either locally installed or this neat online thing: https://jakearchibald.github.io/svgomg/\n\nBecause perf matters \ud83d\ude0a . ",
    "pigulla": "+1 for this!\n. ",
    "paglias": "@SBoudrias the prompt still says to use the keys to move up and down in a raw list\n. ",
    "rwaldron": "tl;dr: reserved words are ok to use as property names.\nIdentifierName can be any word, including ReservedWord (which itself includes Keyword,  FutureReservedWord, null, true and false). PropertyName is always an IdentifierName, so indeed any ReservedWord is allowed as a PropertyName (as of ES5 and forever). Identifier can be any IdentifierName, but not ReservedWord (those are: FunctionDeclaration, VariableDeclaration, and as of ES6: GeneratorDeclaration, LexicalDeclaration, ClassDeclaration).\n. No problem :)\n. ",
    "pmyagkov": "Sorry, I haven't seen this.async(). Thanks.\n. ",
    "dnozay": "as you can see if default is not one of the choices it breaks at runtime; it's fine to close this as \"not a bug\" but maybe we can make that part fool-proof.\n. ",
    "mrkmg": "This no longer appears to be a bug.\n. I am unable to replicate this bug. I used the following as a test:\n{\n  type: 'input',\n  name: '_',\n  message: 'Say hello',\n  validate: function (value) {\n    return new Promise(function (resolve, reject) {\n      if (value == 'hello') resolve(true);\n      else resolve('Bad user, say hello');\n    })\n  }\n}\nEverything seems to be working correctly here.\n. I am willing to do that! Do you have a preference on naming? Maybe add a type called \"editor\"?\n. I think editor makes the most sense, since it's not really multiline, its a completely different paradigm. I say this because multiline to me implies that it would be more like input but with multi-line support, where editor is more descriptive of what is actually happening.\n. Also, I am going to omit the .png for the new type so it can be made on the same system with terminal colors as the rest of them (and be hosted in the same dropbox account).\n. Please look at the test, as it is using the Linux command truncate to alter the tempFile to verify that the $VISUAL is actually getting called. It was the most simple way I could think to test that the VISUAL is actually getting called.\n. It appears spawnSync is not available in node .10\nGoing to look into implementing with async spawn.\n. There is a problem with using spawn. I implemented it, but about half of my keypresses are absorbed by the node script and not sent to the editor. Now using a polyfill for spawnSync. Should be good for review.\n. @SBoudrias I have wrote a new package external-editor to handle the external editor by itself and then used that package in Inquirer. That way people can use just the editor if they want. This removes the complexity from Inquirer. The tests still verify that everything is working correctly. I also updated the output to not output the multiline output as it could be very large and take away from the beauty of Inquirer. If this should be changed back, let me know. \nAlso, your very welcome for the PR. I am love Inquirer and use it on a couple projects.\n. Something weird with the test. Trying to figure out whats going on...\nEdit Fixed test\n. I have just added the ability to use external-editor in an async manner. I am now working on implementing this into Inquirer.js \n. @SBoudrias Rx.js takes some learning! Awesome library but man I had no idea what I was doing at first...\n. I would love find an alternative. This has come up before. I will put an effort in today to find an MIT package.\nhttps://github.com/mrkmg/node-external-editor/issues/9. I just launched a new version (2.1.0) which uses https://github.com/runk/node-chardet, licensed under the MIT License.\nAlso updated tests and verified compatibility from 0.12 to 9.2.0. @SBoudrias Checking this out now. @mhchen Could you do me a favor. While vim is open, can you check to see if the temporary file it is trying to edit exists on the filesystem?\nExternalEditor should create the file itself. So if vim does not write to the file, it should still exist.. I have accepted @mhchen pull request and published the new version.\nThanks @mhchen!. Wow, didnt realize npm would save the package file like that... I'll fix first thing in the am. . ",
    "marcelogft": "+1\n. ",
    "justin-calleja": "@Freyert and @SBoudrias - thanks for fixing!\nJust saw the latest reply. Must have missed the other one..\nKudos\n. ",
    "nelsonpecora": "Ahh, that makes sense. Is there a quick way to close a session that's currently open (and in the middle of questions)?\n. Hmm, I don't think I ever did. Here's the repo if you wanna poke around with my attempts. Might this issue also cause inquirer prompts to silently fail when calling get-stdin before instantiating inquirer? That's what I'm seeing on a project, but I don't know enough about stdin/tty to figure it out. (It might have something to do with this). ",
    "Pau1fitz": "@nelsonpecora did you manage to figure out how to do this?. ",
    "mindfullsilence": "+1\n. ",
    "callumacrae": "Does seem to be what's happening: when the prompt becomes three lines long, the first two aren't touched.\nI don't know how to write a test for this, sorry. Can you replicate it?\n. Heh, pasting tokens is the case I had, too\n. :+1: :confetti_ball: \n. Seems to be fixing the symptom of the problem and not the problem itself, though.\n. Is there any way you can add a test for this?\n. Most linters can be configured to ignore lines with regular expressions in, for that exact reason. You can use the constructor function, but then you're compromising code quality, which isn't great.\n. That's what I would vote for :smiley: \n. ",
    "jonschlinkert": "I've had the same issue on both windows and mac, in the built-in terminal on mac and iTerm.\n. that would be great @jviotti. this happens every time I use yeoman \n. I'd be happy to do this, would you be willing to take/review a pr? I was about to create this request, glad to see it's on your mind already :)\n. great, I'll put something together this week. thx!\n. @SBoudrias I'm working on this now. since I have to update require statements I noticed that some places have double quotes, some single. which do you prefer? edit: nvm I think double quotes are used more. I'll go with that, but let me know if you want me to change it.\n. also related https://github.com/SBoudrias/Inquirer.js/issues/214\n. Great! thanks. I'll also report back after I have a chance to review. Thank you so much for the hard work!\n. this would be great to have. \n. as a sidenote, to make inquirer initialize faster during actual use, it might be worth considering using something like https://www.npmjs.com/package/kind-of for checking native types instead of lodash. Not because the type-checking would be better or faster, but because in some cases that is the only thing lodash is used for, which means the entire lodash module might be loaded up, adding 40-70ms to init, just do Array.isArray(). \nif you want i can do this as well\n. Silliness. It's trivial to swap out that file in a build step. Of course, that's your call, but you should have said that before saying you wanted the pr. It's a shame too, since this is by far the least performant library we used in node.js.\n. ",
    "jviotti": "Are there plans to fix this?\n. I have a fix working locally. I'll submit a PR soon.\n. PR sent: https://github.com/SBoudrias/Inquirer.js/pull/239. I only tested on OS X, so if you run a different OS, your testing would be appreciated :)\n. @SBoudrias The repeating issue is fixed however:\n- When pasting a long line, the text prompt eats a bunch of lines from above.\n- When printing short new lines afterwards (console.log), there are parts of the token not being cleaned up at the right.\n. @callumacrae Let me see what can I do.\n. Works great in Ubuntu as well.\n. I was able to write some unit tests that check that the corresponding number of lines are cleaned, and that my patch is reverted if cliWidth() === 0.\n. @SBoudrias  Is there anything else needed for this PR to be merged?\n. I've sent a PR for setting the default value to 80. I've experimented with it in a Windows 10 PC and seems to be working fine.\nOmitting tests since screen-manager.js it not being unit tested at all.\n. Yeah sorry, I deleted the message before you posted that one. I believe you updated the link since it was pointing to another issue before.\n. Found them while making the previous PR.\n. If backwards compatibility with applications that may be using periods in their\nnames is a concern, I propose allowing the name property to be an array of\nstring, in which case its interpreted as a path:\njs\n{\n  type: 'input',\n  name: [ 'name', 'first' ],\n  message: 'What\\'s your first name?'\n},\n{\n  type: 'input',\n  name: [ 'name', 'last' ],\n  message: 'What\\'s your last name?'\n}\n. @SBoudrias, Its just a matter of being able to better organize the resulting answers object without any intermediary transformation (so we get the exact answer object that we need).\nWe (Etcher) are building a configuration/reconfiguration solution for OS images (see https://github.com/resin-io/etcher/issues/718#issuecomment-251005065 for details), and will be presenting complex Inquirer forms to users that would greatly benefit from grouping answers in different nested levels in order to plug the answers directly to our (re)configuration engines.\nThere are also cases where we ask similar sets of questions repeatedly in a dynamic fashion (for example, we ask ssid and key for several wifi networks), and without support for nested properties, a lot of top-level properties get unwieldy very quickly.\n. Ugh, I didn't think of these edge cases when implementing the patch, I'm very sorry about that! Let me think of a way we can fix this.... What about my second suggestion in this thread, of only enabling this functionality if the question name is an array of strings (which _.set happily takes as an alternative)?\nI'll prepare a PR for it to speed things up in case @SBoudrias agrees :). I guess an array of paths its the only non-intrusive way to introduce this, since I imagine there might be other people using periods in their question names for some reason. Adding a boolean option to enable/disable this behaviour seems too much of a burden IMHO.\nI made the change I proposed above here: https://github.com/SBoudrias/Inquirer.js/pull/475. Looking forward to @SBoudrias' input!. This line gives a long line warning from the linter. What can we do about it?\n. @SBoudrias In which cases can it return 0?\n. Hm, I guess my fix will not work in Windows in that case. Let me borrow a PC and give it a try there. Maybe there is an alternative way to get the terminal width in Windows.\n. @SBoudrias I've tested in Windows 8.1 and cliWidth returns the correct width on that platform. I had to implement some windows-specific workarounds for my patch to work fine, but I can confirm it works as expected on cmd.exe.\nThere still exist the possibility of cliWidth() returning 0, maybe in older Windows versions? I propose checking the return value of cliWidth, and if it is zero, don't make use of my patch, thus resulting in the actual behaviour. What do you think?\n. @callumacrae @SBoudrias Workaround implemented. tty.lines now returns 1 if cliWidth is 0, which, preserves the original behaviour.\n. For some reason, I have to assign this.rl.line directly, as emitting a line event doesn't assign the actual line to neither this.rl.line or this.rl.history, where tty expects them.\n. @SBoudrias Do you have any insight on how to get this function (Prompt.prototype.onEnd) called in the unit tests? Currently only onKeypress seems to be called there, even when emitting a line event.\n. @SBoudrias If you take a look at my latest changes in the PR, I was able to unit test Prompt.prototype.onKeypress() by using this.rl.emit(), however calling this.rl.emit() in the unit tests doesn't call Prompt.prototype.onEnd() (it does call it when not mocking readline), so I wonder if you know a way to make Prompt.prototype.onEnd() get called as well, to unit test that function as well.\n. ",
    "FremyCompany": "FYI, I have a one-line fix (tested on Windows). Feel free to try it and comment on whether it works for you or not.\n. Well if (like I assume) there's no reason to redraw the line on each keypress, then fixing the while-writing line-redrawing issue is a waste of time and adds more code to maintain than it should. In this case, it's easier to remove the behavior altogether. Also: it may work better when you resize your console than the previous fix (as the question & input text may or may not rewrap, making things hard to compute reliably).\nBut, you're right, the \"redraw onEnd\" is still buggy with this one-line fix. However, the amount of code required to fix that one bug would be much smaller than to fix both issues. Also, I don't care much about that remaining issue: what's important to me is that I can type more than one line without being disturbed ;-)\n. Oh, by the way, this fixes another bug on Windows(cmder): the input cursor is now properly located at the insertion point, and not at the end of the input (#229). \nIt was really annoying to edit your text because you had to remember in your head where the insertion point was, and how many times you had to press LEFT or RIGHT to move to the right location. When you don't rewrite the text while Windows isn't looking, you don't have this problem.\n. ",
    "pauldijou": "I just wanted to highlight the fact that there is also a problem if the message of the question wraps. It gets really ugly with list and checkbox types because the message will be printed again and again and again each time the user navigate the answers using arrow keys. I do hope the PR also fix that...\n\n. @adam-lynch Actually, array of objects should contain objects with 2 keys: name and value where name is the message to display and value the object that will be selected.\nJust add this value, something like:\n``` coffeescript\noptions.forEach (option) ->\n        option.value = semver.inc currentVersion, option.type, 'rc'\n        option.name = \"#{option.type}#{Array(20 - option.type.length).join(' ')}(#{currentVersion} -> #{option.outcome})\"\ninquirer.prompt\n    type: 'list'\n    name: 'bump'\n    message: 'What type of bump would you like to do?'\n    choices: [{name: \"don't bump\", value: false}].concat options\n, (result) ->\n    # will be the incremented version or false\n    console.log result\n\n```\n. ",
    "adriancooney": "Also getting the same problem if a value in a list wraps.\n. Actually, there's an issue with this. It counts hidden characters such as color and incorrectly assumes the length of the line. Actual length of the line needs to be detected either by rendering then counting or somehow flattening colors and text decoration.\n. That's cool! Glad I could help somehow. Any rough ETA on a fix?\nOn Tue 30 Jun 2015 at 00:45, Simon Boudrias notifications@github.com\nwrote:\n\nYeah, you can use strip-ansi for that. I have a branch on the side that's\ndoing a very similar logic. Another issue with your implementation is that\nit won't consider the cursor position if you're outsetting it with a long\nline. Also, I'm pretty sure it'll break our input prompts where the user\nanswer is wrapping.\nSo this is not mergeable as is, but I might base something out of your\nsolution.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/SBoudrias/Inquirer.js/pull/255#issuecomment-116880687\n.\n. Sorry, fixed!\n. \n",
    "allenGKC": "This problem happen when i npm install inquirer\uff0canyone can help me\uff1f. \n\nenvironment\uff1amacOS\uff0cand ITerm2. I install the Inquirer.js with npm install Inquirer. I have solve the problem because i use readline module, I remove it and become nomal, I guess it is the module's problem. \n@SBoudrias  thank buddy any way. ",
    "episodeyang": "I'm seeing this problem again with long lines in checklist.. will do thanks!\nOn Mon, Jan 22, 2018 at 11:45 PM, Simon Boudrias notifications@github.com\nwrote:\n\n@episodeyang https://github.com/episodeyang please open a new issues\nwith code and steps to reproduce the issues you're having.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/SBoudrias/Inquirer.js/issues/214#issuecomment-359683072,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAme2mNUbTTt3aJeOUYCgX8HkZQX-qagks5tNXIIgaJpZM4Dbqvb\n.\n. this is such an important issue. I hope this is merged.. \n",
    "kuborgh-bzoerb": "got an outdated version. is already fixed\n. ",
    "igorlino": "Great.  Done, here it is:\nhttps://github.com/SBoudrias/Inquirer.js/pull/222\n. ",
    "oleksandr-dakal": "Then it can be used in Yeoman without additional require of Inquirer.js\n. No) It's returns [object Object]\n. So can it be done? \n. Sorry, first commit was bad solution so I fixed and pulled one more time. Please review if it's suitable fix\n. Done. Thank you.\n. Well I tested and I see that process.subscribe works when user submit answer but not traversing between answers in scope of 1 question.\n. Yes.. It can give ability to create dynamic content under list (for example hint or item long description), but it cause problems with identifying correct cursor position.\n. So I had a lot of experiments with Inquirer and the best solution is to add functionality to create custom prompts types based on already available prompts.\nI created pull request with proposed changes\n. > The way forward is to decouple all the class based helpers functions there's right now in Inquirer to utilities and then create an external packages out of them. We could then do the same thing with the base prompt class if necessary.\nYou mean access helpers from Inquirer Client interfaces. Same approch like Separator? \ninquirer.Utils= require(\"./utils/utils\");\ninquirer.Observe= require(\"./utils/events\");\n\nWe would also need to clarify the prompt interface. What is a prompt object? How does it work? Clearly define the responsibility of each part of the inquirer system.\n\nWell that means that we need to define proper interface for already existing Prompts. Am I correct?\n. ",
    "yangchenyun": "+1\n. Hi SBoudrias@, I notice that you are also author of this awesome repo!\nHow much work do you evaluate to implement this feature? If this is within reasonable time, I could implement it and send you PR for review.\n. Wow, I didn't know this almost 2 years old! So far this is most friendly module to work with terminal app. \nCould you point me to some main abstractions you have defined in the core to help me start: \n- Abstraction to work the terminal\n- Abstraction to work with user input\n. ",
    "btakita": "is this still in the works?\n--- edit\nit looks like there's an autocomplete plugin\nhttps://github.com/mokkabonna/inquirer-autocomplete-prompt\n. ",
    "patrick-motard": "Is this request different from https://github.com/SBoudrias/Inquirer.js/pull/265, the auto-complete prompt? If so, should this be closed?. Looks like inquirer-autocomplete-prompt is now published on npm.. @PierBover You can style text using chalk and you can do multiple lines using the new line character. Here's an example where i do both using chalk and string interpolation.\n``\nvar inquirer = require('inquirer'),\n    chalk = require('chalk');\nvar questions = [\n    {\n        name: \"name\",\n        type: \"input\",\n        message:${chalk.red(\"what's your name?\")}\\n${chalk.blue(\"i'm a chicken\")}`\n    },\n    {\n        name: \"phone\",\n        type: \"input\",\n        message: \"what's your phone?\",\n        when: answers => {\n            return answers.name;\n        }\n    }\n];\nvar prompt = inquirer.prompt(questions);\n```. ",
    "leo60228": "Example:\n```\n\"use strict\";\nvar inquirer = require(\"../lib/inquirer\");\nconsole.log( JSON.stringify(inquirer.prompt([\n  {\n    type: \"checkbox\",\n    message: \"Select toppings\",\n    name: \"toppings\",\n    choices: [\n      new inquirer.Separator(\"The usual:\"),\n      {\n        name: \"Peperonni\"\n      },\n      {\n        name: \"Cheese\",\n        checked: true\n      },\n      {\n        name: \"Mushroom\"\n      },\n      new inquirer.Separator(\"The extras:\"),\n      {\n        name: \"Pineapple\",\n      },\n      {\n        name: \"Bacon\"\n      },\n      {\n        name: \"Olives\",\n        disabled: \"out of stock\"\n      },\n      {\n        name: \"Extra cheese\"\n      }\n    ],\n    validate: function( answer ) {\n      if ( answer.length < 1 ) {\n        return \"You must choose at least one topping.\";\n      }\n      return true;\n    }\n  }\n], function( answers ) {\n  return answers;\n}), null, \"  \") )\n```\nAs opposed to:\n```\n\"use strict\";\nvar inquirer = require(\"../lib/inquirer\");\ninquirer.prompt([\n  {\n    type: \"checkbox\",\n    message: \"Select toppings\",\n    name: \"toppings\",\n    choices: [\n      new inquirer.Separator(\"The usual:\"),\n      {\n        name: \"Peperonni\"\n      },\n      {\n        name: \"Cheese\",\n        checked: true\n      },\n      {\n        name: \"Mushroom\"\n      },\n      new inquirer.Separator(\"The extras:\"),\n      {\n        name: \"Pineapple\",\n      },\n      {\n        name: \"Bacon\"\n      },\n      {\n        name: \"Olives\",\n        disabled: \"out of stock\"\n      },\n      {\n        name: \"Extra cheese\"\n      }\n    ],\n    validate: function( answer ) {\n      if ( answer.length < 1 ) {\n        return \"You must choose at least one topping.\";\n      }\n      return true;\n    }\n  }\n], function( answers ) {\n  console.log( JSON.stringify(answers, null, \"  \") );\n});\n```\n. ",
    "adamzr": "The only use case I can think of is persisting a password and offering the user the ability to use the saved password (the default) vs. entering a new one.\n. He'll know that there is something saved and he can use that. Or we can put in text that says (Press enter to use the saved/default password) or something to that effect instead of the default text. The use case I was thinking of was using store : true in a yeoman generator.\n. ",
    "xtianus79": "so does that mean the ['title:' 'message here'] title = 'name' in hash?\n. ok and last question on this topic... \nCan you have multiple options set like this. \nthis.fs.copyTpl(\n      this.templatePath('index.html'),\n      this.destinationPath('public/index.html'),\n      { title: 'Templating with Yeoman' },\n      { h1: 'Your message here'},\n      { h2: 'Some message here'}\n    );\n. sorry... like so...\nthis.fs.copyTpl(\n    this.templatePath('index.html'),\n    this.destinationPath('public/index.html'),\n    [ \n      { title: 'Templating with Yeoman' },\n      { h1: 'Your message here'},\n      { h2: 'Some message here'}\n    ]\n  );\nCan you do the same for the templatepath and destinationpath options?\n. the problem with frameworks and libraries is that they all do different things no?  so while I assume you can do as much sometimes you can't... for whatever reason.  However, with that said this would be a feature improvement no?  So why not just give the answer.\n. for example I am looking into refracting this code... but want to plan it out properly so it can all be updated to the latest yeoman generator version.  \n```\nswitch (this.type) {\n    case 'empty':\n\n        this.sourceRoot(path.join(__dirname, '../templates/projects/' + this.type));\n\n        this.template(this.sourceRoot() + '/startup.cs', this.applicationName + '/Startup.cs',         this.templatedata);\n\n        this.copy(this.sourceRoot() + '/project.json', this.applicationName + '/project.json');\n\n        /// wwwroot\n        this.directory(this.sourceRoot() + '/wwwroot', this.applicationName + '/wwwroot');\n\n        break;\n\n```\n. ",
    "Amorelandra": "I'm experiencing the same thing. If anyone knows where to start looking for a fix, I'm happy to try & contribute a patch.\n. I've noticed that this won't happen with the first prompt, but happens reliably with subsequent prompts.\n. @SBoudrias nope! I'm using inquirer directly with a node CLI application I'm maintaining.\n. I will try to find steps to reproduce and if I'm able to I will post them along with a separate issue.\n. ",
    "Fatme": "I forgot to mention that the script works if I use conEmu - http://sourceforge.net/projects/conemu/\n. I've just tested with latest changes from master branch and the result is the same - the arrow keys are not working.\n. The problem is reproducible without importing inquirer - only if we use readline module so I'm closing this issue.\n. ",
    "rosen-vladimirov": "@SBoudrias \nDo you have any idea what might cause this issue? It's really important for us to get it working, so we are ready to help you with whatever information you need and testing of possible solutions or even workarounds.\nThanks in advance for your help!\n. @SBoudrias \nThe issue is reproducible with the code above. In fact we've simplified it to this code, in our scenario we are executing some http requests and after they finish (we use Fibers to make sure operation is completed) we use Inquirer to prompt the user for a choice. The problem is that we see the choices, but arrow keys are not working - the prompter doesn't move the selection. However we are able to write text and it is shown on the console, we can use backspace to delete it (as far as I understand, we shouldn't be able to do this when we have choices prompter).  If enter is pressed, the first option is selected and the prompter is hidden (as expected, but we are unable to change the selection). You may have to run the script several times as the issue is not reproducible each time. We've tested the following scenarios:\n- Node 0.10.x on Windows 7 - everything works as expected\n- Node 0.12.x on Windows 7 - everything works as expected\n- Node 0.10.x on Windows 8 and Windows 8.1 - unable to use arrow keys\n- Node 0.12.x on Windows 8 and Windows 8.1 - everything works as expected\nI've just tried with Node 0.10.10 and Node 0.10.20 - the issue is reproducible as well. We've just integrated Inquirer in our code and we've noticed the issue, so I'm not able to say if it is related to some changes in the inquirer itself with latest versions or there is some other issue.\n. Hi @SBoudrias ,\nWe've investigated the issue, and we've simplified the case:\n``` JavaScript\nvar readl = require(\"readline2\");\nvar rl = readl.createInterface(process.stdin, process.stdout);\nrl.on('line', function(err) {\n console.log(\"on line\");\n});\nrl.on('keypress', function(err) {\n console.log(\"on keypress\");\n});\n```\nWe've tried executing the script in cmd and using the arrows to see if data event is emitted from node, but when I pressed up arrow, the console showed my the previous command I've executed. It looks like node does not emit the event and the up arrow is caught by cmd itself. The issue is reproducible with both readline2 and readline and nodejs 0.10.x\nAny ideas how to workaround this case?\n. Hi @SBoudrias ,\nThanks for pointing this. However we are using inquirer in synchronous code (by using fibers) and as I've tried to simplify the repro case, I've made mistake in the script that I've sent you. Here is the correct one:\n``` JavaScript\nvar inquirer = require(\"inquirer\");\nvar question1 = {\n    type: \"input\",\n    message: \"Enter something: \",\n    name: \"Failing_Node_4.0.0\"\n}\ninquirer.prompt([question1], function( answers ) {\n    // Use user feedback for... whatever!!\n    console.log(\"First inquirer answered:\", answers);\ninquirer.prompt([question1], function( answers ) {\n    // Use user feedback for... whatever!!\n    console.log(\"Second inquirer answered:\", answers);\n});\n\n});\n```\nIt is working fine on Node 0.12.x, but not on Node 4.0.0. The second inquirer calls the answers callback and accepts the same answer. After that the console is not released, it keeps waiting for input I think.\n. Just to add something - the second inquirer does not accept the same answer - it receives empty string as an answer.\n. ",
    "teobugslayer": "Hello @SBoudrias,\nYou can download a testing VirtualBox appliance with Windows 8.1 from here. It is good for 90 days and you can use it to debug the issue.\n. ",
    "the-simian": "No sweat, I'll fix these thing today! Thank you for the feedback!\nOn May 11, 2015 2:12 AM, \"Simon Boudrias\" notifications@github.com wrote:\n\nHey, thanks for that! This is awesome.\nJust a few things:\n- Can you make the logo smaller? Maybe float it next to the main title\n  so it doesn't push all the content so deep into the page\n- I guess your editor is removing trailing whitespace, but trailing\n  whitespaces have a meaning in markdown and that changed the output of the\n  readme.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/SBoudrias/Inquirer.js/pull/241#issuecomment-100793051\n.\n. Ok, I did everything you asked. \n- whitespace restored in readme\n- image is smaller, and floated\n- images are compressed\n- image has 'padding' for readme\n\nPardon the number of commits, I needed to test how it appeared on github itself to be certain the readme.md looked correct. I took a couple of small attempts.\nhere is the way it appears:\n\n. Everything is squashed now! :smile: \n. This is a cool feature idea for large sets, I can see its being handy.\n. ",
    "plemarquand": "Thanks for the quick turnaround!\n. @SBoudrias Done\n. ",
    "adam-lynch": "The outcome is used in the name of each choice;\ncoffeescript\noption.name = \"#{option.type}#{Array(20 - option.type.length).join(' ')}(#{currentVersion} -> #{option.outcome})\"\n. The only reason I can see why you might pass an array of objects instead of an array of strings is so you can access the chosen object.\n. @pauldijou Thanks! That's better. \nNote for anyone reading this issue looking to do something similar: it should be result.bump.\nI'm going to close this because I'm happy with that. Not sure this is obvious in the readme but I'll leave that up to the maintainers.\n. ",
    "adius": "@SBoudrias I feel like this should be part of inquirer. Did you ever think of making this a first class feature?\n. > Also, if you want to pass JSON in, almost everything will work, excepts validate/filter and other functions versions of properties.\nI'm not sure if you really know what JSON schema is all about.\nIt's not about that it uses JSON (you can use plain js objects or YAML just as well)\nIt's about specifying what object you want to have in the end instead of which questions to ask.\nThis would enable cool stuff like this:\nSchema:\njson5\n{\n  title: \"Person\",\n  type: \"object\",\n  properties: {\n    favorite_color: {\n      type: \"string\",\n      format: \"color\",\n      title: \"favorite color\",\n      default: \"#ffa500\"\n  },\n  \u2026\n}\nSo instead of specifying that inquirer shall ask for the red, green and blue value of a color,\nyou just say that you want to have a color in the end and inquirer automatically knows what to do.\ne.g.\n? Favorite Color:\n  ? red 54\n  ? green 232\n  ? blue 49\nThis would also be great for dates, contacts, \u2026 and all kind of other custom data types.\nFurthemore it's reusable. Maybe you want to create the same objects via an web-interface.\nThen you can simply reuse your JSON schema like this http://jeremydorn.com/json-editor\n. This is also a great resource to learn about JSON schema: http://spacetelescope.github.io/understanding-json-schema\n. ",
    "gobwas": "@adius \ud83d\udc4d \n. ",
    "korvus": "Will do it asap ; \nThx for your work.\n. ",
    "robdylan": "Like\n\nWhen I hit enter it get's autocompleted to the entry I've currently selected.\nWhen I continue typing and my word is not contained by any entries, display no entries and display an error message.\nWhen I delete one letter, filter though 'ab' instead of 'abe'.\nWhen I type nothing, display all entries unfiltered.\nYou could even use your bottom-bar extension displaying '...' when the word to filter is getting updated. But that's not important. I mean this is still a CLI application, no loading animation needed. I mean it is nice, but not as important compared to other things. \nI'm glad for any feature that gets closed to it.\n. Oh the jsfillde link was broken. Here is a working one: http://jsfiddle.net/yL2gLz2e/\n. @paoloantinori nice is that published already? :+1: \n. @paoloantinori  Did you publish the application? Was it https://github.com/paoloantinori/git-bc ?\nhttps://github.com/search?utf8=%E2%9C%93&q=user%3Apaoloantinori+abc&type=Code&ref=searchresults\n:|\n@SBoudrias https://github.com/mokkabonna/inquirer-autocomplete-prompt/blob/master/example.js doesn't work for me.\nI'm still very interested.\n. ",
    "juancoen": "+1\n. it would be nice to make prefix and suffix configurable, can that be done in other way?\n. ",
    "paoloantinori": "Hi, I am working on a customization to get the same result:\nhttps://asciinema.org/a/2abz5r1f4sfsahhbl6161nc3f\nI'm currently hitting a specific problem: q key closes the app.\nI have not been able to understand how to disable this behavior. Any hint?\n. @SBoudrias thank you for pointing that out. I was looking in the wrong place!\n. ",
    "lewisacidic": "Thanks for the rapid reply.  I already tried many separate prompts, but there are about 30 different subsections (with ~10 options each), and the typical user would be potentially interested in over 10 of the subsections - it just felt very clunky to have 10 follow up checkbox prompts coming one after another, and an accordion style interface would have felt intuitive when it was implemented that way.\nI understand it is an edge use case, just thought I would suggest it as it seems to fit nicely with the current api - I suppose it would be difficult to implement though, with few use cases, so perhaps not worth the time.\n. ",
    "stevemao": "Do you have any solution in mind? expose the color as the second argument?\n. oh ok\n. ",
    "wraithan": "You literally have over 100k downloads a day. If you are going to change anything in the API it will be backwards incompatible for all 100k/day users. They are already locked into your API, calling it 0.x is just making them not be able to pick up backwards compatible updates automatically... Seems like you should just cut a 1.x then, if you find yourself needing an API change, cut a 2.x. \n. ",
    "ihorskyi": "Any updates on this?\n. @SBoudrias but rawlist won't accept any other shortcut keys, except item's index?\n. This is a workflow I'm trying to achieve:\n1. User launches a cli app and sees lot of options (let's say 15)\n2. User forgot which key corresponds to item so he just press Enter\n3. Help shows items and item's shortcut key (same as used in CLI version)\n4. User clicks that key and action is triggered\nThus having same shortcut keys is very important, b/c in most cases user will remember most used ones in CLI and will easily use same in inquirer\n. @SBoudrias yep, that's it. @SBoudrias That would make even more sense. @SBoudrias great, will change that tomorrow.. Hi @SBoudrias, first part is clear and I just pushed commit for it. But I'm not sure about second part, could you elaborate, please?. @SBoudrias this was changed in following commit, it is outdated now. @SBoudrias The reason to use this.opt.choices.pluck('key') is to get choices with keys excluding separators. \nthis.opt.choices.length === 6 \ndefStr.length === 5\n. @SBoudrias choices.realLength works, thanks!. ",
    "oleander": "+1. This is how my console looks right now. Would be nice if the height could adjust to the console.\n\n. ",
    "raisen": "It looks like this is possible by changing the pageSize parameter for the paginate prototype on utils/paginator.js - is that right?. ",
    "petersandor": "You're right, I didn't return true properly in my validation function. Lesson learned, Thanks!\n. ",
    "timkelty": "Looking for this option as well.\n. ",
    "sixertoy": "Hey :)\nShould i confirm this issue also happens with a too long message value ?\nOn windows\n. ",
    "doapp-ryanp": "Can confirm this occurs on iTerm2 v 2.1.1 as well, and on previous 0.8.5 too (and .7).\nFWIW we would like to use this in our new JAWS project that has quite a bit of visibility.  While no other tool is as good as yours, this issue is a big enough problem where we are debating writing our own.\nDo you have any rough eta? we are targeting release of JAWS 1.0 beta this thursday 9/10 and would really like to use this module.\n. inquirer@0.9.0. Check out this screencast: https://dl.dropboxusercontent.com/u/1374786/inquirer.mov\nI was hoping you would be able to fix since it sounds like you already had a fix coming soon, and to be honest node cli i/o is outside of my wheelhouse, so it would take me a long time diagnose and fix.\n. ",
    "ac360": "Inquirer is an incredible, wonderful tool and we really want to use it.  But, I'm also having similar issues rendering prompts in plain Mac Terminal using v0.9 and previous versions.\n\n. ",
    "abramdemski": "I am still having this problem on Mac, with this project: https://github.com/dranorter/metaprompt_command. ",
    "mkorakakis": "The latest 0.9.0\n. ",
    "martinheidegger": "Note: this is a bug in early Node 4 & 5 versions. Should be fixed now.\n. @SBoudrias There is a way of resizing text programmatically in the terminal to make art fit (its how & why vim and emacs works). Here is terminal-layout, a library that does resizing. Technically - as far as I understand - it works by deleting formerly rendered content and rendering it again. I thought it could be best if Inquirer could have something like.\nheader: function () {\n    return '...'\n  }\nwhich is called everytime the screen resizes.\n. While being presented a question the inquirer renders the string output and changes it upon selection. On Screen-resize I would need to clear the inquire content AND the header.\n. ",
    "jokeyrhyme": "If this is related to https://github.com/nodejs/node/issues/5384 then I have a module that helps identify broken versions of Node:\n- https://github.com/jokeyrhyme/is-node-interactive-tty-broken\nDo you think it might be worth integrating a similar check into this library? So that a warning or something could be displayed? Or perhaps modifying the \"engines\" part of package.json to help avoid broken Node versions at installation time?\n. I have a module that helps identify broken versions of Node:\n- https://github.com/jokeyrhyme/is-node-interactive-tty-broken\nDo you think it might be worth integrating a similar check into this library? So that a warning or something could be displayed? Or perhaps modifying the \"engines\" part of package.json to help avoid broken Node versions at installation time?\n. I have a module that helps identify broken versions of Node:\n- https://github.com/jokeyrhyme/is-node-interactive-tty-broken\nDo you think it might be worth integrating a similar check into this library? So that a warning or something could be displayed? Or perhaps modifying the \"engines\" part of package.json to help avoid broken Node versions at installation time?\n. ",
    "lazabogdan": "Still trying to make some sense of the weird behaviour I'm getting from this.\nTried the same thing using process.subscribe and the code is more similar now to the examples/recursive.\n``` javascript\nvar inquirer = require('inquirer');\nvar bower = require('bower');\nvar dependencies = [];\nvar prompts = [{\n    type: 'input',\n    name: 'package',\n    message: 'Please provide a bower package name (or press ENTER to exit)',\n    validate: function(answer) {\n    var done = this.async();\n\n    if ( ! answer) {\n        return done(true);\n    }\n\n    bower.commands.info(answer)\n        .on('end', function(info) {\n            done(true);\n        })\n        .on('error', function(e) {\n            done(\"You must provide a valid bower package name. E.g. package, package#version, name=package#version, name=github/shorthand#version, etc\");\n        });\n}\n\n}];\nfunction onEachAnswer(prop) {\n    if (prop.name == 'package' && prop.answer) {\n        dependencies.push(prop.answer);\n        ask();\n    }\n}\nfunction onError(error) {\n    console.log(error);\n}\nfunction onComplete() {\n    console.log(dependencies);\n}\nfunction ask() {\n    inquirer.prompt(prompts).process.subscribe(\n        onEachAnswer,\n        onError,\n        onComplete\n    );\n}\nask();\n```\nSo, when I run this:\n1. the prompt always shows up, asking for package names .. all good!\n2. I type a package name (valid or invalid) .. all good!\n3. Here's the weird part .. sometimes the validation works, for instance if I entered an invalid bower package name it displays the error message from validate immediately, but sometimes it gets stuck doing something, and it just doesn't display the error message until I press any keys repeatedly for a few times (any key, for example an arrow key)\n4. Other times it works for a couple of loops, but then gets stuck again on what seems to be random intervals (sometimes after entering a valid package name, sometimes after entering an invalid package name, it just seems totally random).\nAm I missing something obvious here?\n. Ok, it's starting to look like a serious bug. I striped out bower from the equation and simply used a timeout like in the official examples.\nI've got the same behaviour. Sometimes it displays the error message from validate, sometimes it doesn't until I press some keys.\n``` javascript\nvar inquirer = require('inquirer');\nvar dependencies = [];\nvar prompts = [{\n    type: 'input',\n    name: 'package',\n    message: 'Please provide a bower package name (or press ENTER to exit)',\n    validate: function(answer) {\n    var done = this.async();\n\n    if ( ! answer) {\n        return done(true);\n    }\n\n    setTimeout(function() {\n        done(\"false\");\n    }, 1000);\n}\n\n}];\nfunction onEachAnswer(prop) {\n    if (prop.name == 'package' && prop.answer) {\n        ask();\n    }\n}\nfunction onError(error) { console.log(error); }\nfunction onComplete() {}\nfunction ask() {\n    inquirer.prompt(prompts).process.subscribe(\n        onEachAnswer,\n        onError,\n        onComplete\n    );\n}\nask();\n```\nI think it might have something to do either with my terminal (tried both iTerm2 and default terminal) or my OS (Mac OS X Yosemite 10.10.4). Just tried on a Linux machine and it works just fine, so definitely a bug!\nJust spent the last 20h trying to solve this.\nI'm using: \n- inquirer#0.9.0\n- Mac OS X Yosemite 10.10.4\n- node v0.12.2\n- npm 2.13.2\nIt's also worth mentioning I initially began experiencing this as part of a yeoman generator using the latest yeoman-generator#0.20.0 which I can see is using inquirer#0.8.5.\n. After updating to node v0.12.7 the issue seems to be solved.\n. +1\n. ",
    "revelt": "@lazabogdan if it's solved, would you mind closing this issue please? Thank you.. Confirmed, this line alone will cause duplicated rows:\njs\nconst ui = new inquirer.ui.BottomBar()\n\nWhen I remove it, there's no duplication, as intended.. Hi Josh!\nI tested your theme on my Terminal and if not my previously left transparency setting, it would have been black on black.\n\nHowever, it doesn't look like it's Inquirer's problem but rather terminal theme issue. May I kindly suggest exploring different themes on Hyper or iTerm2.\nMy concern is that while we might explore solutions for this, the community would probably benefit more if we worked on Inquirer's own features and bugs, the ones within its code scope.\nIf you can, please try out different themes and report back how it went.. Hi Josh, \nNo it's not transparency setting causing problem. Anyway, to me it looks like it's terminal theme issue, it's got nothing to do with Inquirer.\nLet's close this issue, what do you say?. @RodeyManager how did it go, did you solve this since?. ",
    "jsonmaur": "I agree with this, I don't like having the ? suffix for each question asked, especially when it doesn't go along with my UI. It really should be configurable so I can remove it. @SBoudrias is this something that you'd take a PR for? I'd be happy to do it.\n. @SBoudrias Maybe just a messagePrefix option on the question object that would default to ?. Seems like you could just add it as a default at lib/prompts/base.js line 21, then just reference it in Prompt.prototype.getQuestion. But that's from me looking at the code for all of 5 minutes, haha.\nThat may get tedious to set the prefix on every question, so maybe a second parameter passed to inquirer.prompt could be global options (unless that's reserved for a callback). That could be useful for more than just setting the prefix, such as defining a global validators, etc. Thoughts?\n. Any update on this? My ideas above may be overkill, but I need to at least hide it. My current solution is really hacky (overriding the getQuestion prototype with my own function).\n. That would work. With that in mind, it would also be nice to provide a way to customize prefixes for other things such as validation error messages, prompt arrows, checkboxes, etc. Maybe a list of several different constants, or having the PREFIX constant accept an object map?\n. Sorry I got busy and wasn't able to tackle it. Someone else better take a shot at a PR.. ",
    "heylookltsme": "Is this still on the roadmap? I just started using inquirer and customizing the prompt prefix is literally the first thing I wanted to do. ;) . @allenhwkim +1 for publishing this to npm! This is exactly what I was looking for. . @allenhwkim fwiw I just tried implementing this and I'm running into readline issues - \nTypeError: Cannot read property 'substring' of undefined\n    at Interface._getCursorPos (readline.js:651:49)\n    at Interface._moveCursor (readline.js:671:21)\n    at Interface._ttyWrite (readline.js:761:14)\n    at Interface.write (readline.js:344:24)\nSee: https://github.com/SBoudrias/Inquirer.js/issues/272 and https://github.com/nodejs/node/issues/3006. Oh I'm not on Windows either. I use a Mac.  \nWhat version of inquirer are you using? I'm wondering if maybe this prompt broke with a later version.\nAlso, I realized I was using the integrated terminal in my IDE, so maybe that had something to do with it.  . ",
    "Rawnly": "I just sent a PR (#571) with something like this. Now you should be able to set prefix/suffix from question options. It could be good to have a function like inquirer.setDefaultPrefix(prefix).. You can do something just like this @mechanical-turk \n\nI know that is closed but may this will help him\n\n```js\n  function myFunction(callback) {\n  prompt(questions).then(answ => {\n    usersList.push({\n      name: answ.userName,\n      value: answ.userValue\n    });\nif ( /* repeat condition */ ) {\n  myFunction(() => {\n    callback();\n  });\n} else {\n  callback()\n}\n\n})\n}\n```. ",
    "Sotxice": "Cheaters never win. ",
    "derhuerst": "Looking forward to see this getting merged. :+1:\n. ",
    "mokkabonna": "For anyone interested, I have started progress on the prompt here: https://github.com/mokkabonna/inquirer-autocomplete-prompt\nNot published as a npm package yet. Feedback is welcome.\n. Would be awesome if this got implemented so I can change the autocomplete prompt to use this.\n. You could just make sure that choices done previously automatically eliminates choices from the list(s) later in the prompt that are now incompatible. That's better UX. Use reactive interface: https://github.com/SBoudrias/Inquirer.js#reactive-interface. Valid points :). If we use the activePrompt idea, what do we then do with calls to this.screen.render in prompts?\nLike this one:\nhttps://github.com/SBoudrias/Inquirer.js/blob/master/lib/prompts/input.js#L69\nI think we need to pass screen in.\nEDIT: think I understand now, you mean to go back to creating the screenManager in the prompt? . I made some quick changes that you can see here: https://github.com/SBoudrias/Inquirer.js/pull/500\nAnd then I do in my prompt:\nPrompt.prototype.close = function() {\n  if (this.screen.extraLinesUnderPrompt > 0) {\n   utils.down(this.rl, this.screen.extraLinesUnderPrompt);\n  }\n}\nThis approach makes way less changes to the code. I am in favor of this.. Sure\nOn Feb 21, 2017 14:33, \"Simon Boudrias\" notifications@github.com wrote:\n\nThis looks like the right approach to me, but we need to implement the\ndefault close behavior. I don't want prompt authors to have to write this\nlogic themselves all the time.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/SBoudrias/Inquirer.js/pull/500#issuecomment-281345318,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAOF3WVL0mwIcFSy5LsFZC_5bUwd1ikzks5reue_gaJpZM4MGXzd\n.\n. This ok?. Need to wait for it being released. That's up to @SBoudrias .. Then it should be pageSize instead right?\n\nAnd no problem, I find it fun and learning a bit.. Yes only on force close. The prompt is cleared until the last line but only horizontally to the position of the cursor position.. You can host them in the repo itself with a relative url from the readme.. In the example above you will get the value with answers.my_name. Thanks for adding my plugin as well! :+1: . Couldn't you just get all directories in the folder and if directory exists for the selected repo name (and what would be the folder name), just require that new_name actually needs to be something? That you would do in the validate function of new_name.. Not sure what to do with default for this prompt, since we have a external unknown at runtime resultset. If you want a default, maybe have the service return that choice if no match? Or should we allow a default choice(s) that is used as resultset if the search returns empty array?\n. Creating a choices object with the resultset when done.\n. Empty results as we are about to search and the old results aren't valid anymore.\n. Again, create Choices object.\n. @SBoudrias is this something you could live with? Ref the other discussion.. Will take a look at the tests if it is ok. If not I might need some help with an alternative approach.. I now set screen here. Is this ok?. ",
    "LPGhatguy": "Woops, sorry, 0.9.0 from npm\n. Have you been able to reproduce the issue or look into it? I've confirmed that it still occurs on io.js 3.0.0, and I'll be checking it out on Mac OS X this Monday when I stop into work since we're using Inqurier for our new generator system.\nWhat's curious to me is that yo from the yeoman project, which uses Inquirer 0.9.0, doesn't seem to have the same issue despite having the first prompt as a list input.\n. @SBoudrias It does not.\n. This bug does not occur on OS X as far as I can tell, so it's probably something Windows specific.\n. Now that node 4.0 is the mainline release, this issue might affect more users.\n. It appears to work in 5.3.0 for me -- thanks for pointing that out!\n. @SBoudrias: I opened an issue on the repository and submitted a fix for io.js to make this all work out.\nI have doubts that this will land in figures all that soon, would you be open to using a fork of inquirer until functionality like that would be merged? I'm not familiar with npm etiquette on that subject.\nI submitted a pull request here which also links back to the repository, which is up-to-date.\nEDIT: This isn't a good idea, upon further testing none of the symbols from figures are in Consolas, which means none of them are usable by default on Windows, even 10+. What a shame.\n. @SBoudrias Node v4 landed today which has nearly full ES6 support now. Node 0.12 had promises as well.\nNative node has landed.\n. @Awk34 @lsycxyj that issue is reported for Windows at issue #266.\n. ",
    "JCMais": "Same issue, it works on node 0.10.40\n. ",
    "leerlemoniii": "This is still an issue with windows 12 node 4.0.0..... in both command prompt and in powershell\n. my very hacky fix for this was to have a regular Y/N question that asked the user if they were ready to run my config.... this then allowed me to make the drop down be the second question.  mean user has to hit enter (defaults to yes), but it works after that.  I also wrapped this inside a check of if I was on windows so I only add this question if I need to.\n. ",
    "artem-malko": "@SBoudrias Is there any news?) I have the same problem in Windows 8.1 cmd and git bash.\n0.10.0\n. @SBoudrias yeap. And it doesn't work in cmd.exe. I have 3 lists, so, the first one doesn't work, but other are fine.\nThere is interesting behaviour with firtst list. When I press any button, I see a char from with button in console. It seems, that cmd just output all what I've entered.\n. @SBoudrias so, what can I do or it is a bug of Inquirer?\n. @maxdow so, what can I do with that?\n. @leerlemoniii I did the same thing, but it is not good way)\n. @maxdow @mzgol @SBoudrias @peterblazejewicz As I understand, we have to wait for new Node release?\n. :+1: got this bug on WIndows.\n. @SBoudrias is there any news about this bug?\n. ",
    "maxdow": "Yes it's a nodejs bug. I'm able to reproduce it only with readline. It is related to the keypress event that is not triggered correctly\n. I tried to solve the issue but without success :/ I don't have the time to investigate more before next week. I think the best is to report an issue to node linked to this issue ( the same exist for angular formly and probably somewhere else ) and with a simple reproductible example.\n. I can't have access to my windows machine until Monday. I will post you my test code. \nThe idea was to detect the keypress event using only readline and nodejs. I had the same result than  Inquirer : new line ( press enter ) was Ok but nothing on keydown .\nNext i used the keypress module (https://www.npmjs.com/package/keypress)  and i was able to make it working. \nI'm pretty sure it's a bug from nodejs. Maybe you can try to use keypress in Inquirer.js as a fix but the best it's to find the real problem.\n. I do a minimal example and i run this on win8 and  win xp  : \n```\nvar readline = require(\"readline\");\nvar rl = readline.createInterface(process.stdin, process.stdout);\nrl.on(\"line\",function(){\n  console.log(\"line event\");\n});\nprocess.stdin.on(\"keypress\",function(){\n  console.log(\"keypress\");\n});\n```\nOn the win8 computer, i don't have the keypress event triggered at first. I have to press enter to \"trig\" the keypress event. On win xp there is no problem, i got keypress and line events separatly.\nI suppose it works on linux too\nInquirer.js list works fine on win xp that's why it's probably related to node \n. done ;)\n. Probably, or use a patch with keypress on Inquirer.js ..\n. ",
    "peterblazejewicz": "@SBoudrias \nWe got an input about the issue that maybe somehow will help to trace the problem:\nhttps://github.com/OmniSharp/generator-aspnet/issues/351#issuecomment-141696695\non the \"yo -v\" select list, arrows works fine\nI'll try to help somehow as that is a core component of generator-aspnet (and probably many others).\nThanks!\n. @SBoudrias \nI'm not able to run these examples on my machine at work:\nhttps://github.com/SBoudrias/Inquirer.js/blob/master/examples/checkbox.js\nhttps://github.com/SBoudrias/Inquirer.js/blob/master/examples/list.js\nhttps://github.com/SBoudrias/Inquirer.js/blob/master/examples/long-list.js\nhttps://github.com/SBoudrias/Inquirer.js/blob/master/examples/nested-call.js\nnode -v: v4.1.0\nnpm -v: 2.14.3\nInquirer.js: v0.10.0\nWindows OS:: 8.1\nTried CMD, Bash and PowerShell terminals.\nLet me know where too start with code to debug issue.\n. The tests pass OK on the same machine:\nhttps://gist.github.com/peterblazejewicz/162289a5f2ef93554293\n. @maxdow \njust observation: I've got the same problem with keypress - as you described I had to hit Return (Enter) key first to get listener broadcasting keypresses.\n. @SBoudrias I'll do this with LTS version. Thanks!\n. @SBoudrias \nTested on Win8.1: it seems that Node 5.1.1 Stable comes with fix.:\nPS C:\\Users\\pibl> node --version\nv5.1.1\nThe 5.1.1 works with CMD and PowerShell terminals. I was not able to get it worked with Bash terminal.\nThe LTS 4.2.3 version does not contain a fix I think.\nThanks!\n. > Bash (like git bash and cie) terminals don't support readlines on Windows. They're very bad emulator.\n\nUnderstand. Just posting facts for the records. Thanks for the comments!\n. @LPGhatguy\nIt seems to be fixed in Node:\nhttps://github.com/nodejs/node/issues/2996\n. @SBoudrias Thanks for the patience :bow: \n. \n",
    "mgol": "@maxdow Could you repost that at https://github.com/nodejs/node/issues/2996 so that core Node folks have a test case to try?\n. ",
    "philkunz": "any update here?\n. ",
    "AlexGustafsson": "Still not working for me. I thought this was solved by the Node JS team?\nWindows 10,\nCMD & Babun(Cygwin),\nNode v5.6.0.\n. @SBoudrias is there any related issue I can follow?\n. ",
    "TrySound": ":+1: \n. Also it would be good to return promise in async callbacks instead of this.async();\n. I don't think it's a good idea. Better split lodash into atomic functions.\n. @SBoudrias Any thoughts?\n. We already did it in gulp\n. I think here we should reduce something\n. But we don't need to update whole lodash only because one function is changed. Common packages via npm3 looks pretty good. Better than large bundle. If we will find solution in reducing assign, clone and defaults download size will be smaller.\n. ",
    "pgherveou": "That would be great especially when used with generator function \njs\nco(function*() {\n  const answers = yield inquirer.prompt(questions)\n})\nor even easier\n``` js\nconst prompt = (question) => new Promise((fulfill) => inquirer.prompt({ name: 'default', ...question }, (answer) => fulfill(answer.default)))\nconst desc = yield prompt({ type: 'input', message: 'Describe the bug' })\n```\n. ",
    "AGresvig": "@callumlocke did you ever get around to it? I agree Promises is the way to go now, callbacks are a thing of the past in my workspace.\n. ",
    "Dianoga": "Is this change stable enough to release a new version?\n. ",
    "matthewp": "@SBoudrias There is no such option for child_process.exec it seems, do you know if that's right? I think you must use spawn when creating a child using inquirer.\n. @ayhankuru What about this comment is not clear enough? https://github.com/SBoudrias/Inquirer.js/issues/272#issuecomment-138375494\n. ",
    "jo": "That way the answer would include the masked password.\n. ",
    "smeijer": "would indeed be useful to me: \njs\nconst { password } = prompt({\n  name: 'password',\n  type: 'password',\n  mask: '*',\n  default: process.env.PASSWORD,\n});. ",
    "wanthering": "\nwould indeed be useful to me:\njs\nconst { password } = prompt({\n  name: 'password',\n  type: 'password',\n  mask: '*',\n  default: process.env.PASSWORD,\n});\n\nthat solve my problem. ",
    "mradionov": "Have the same issue. The problem is that readline does not consider Git Bash a tty, this.terminal option of the readline instance is being set to false internally, and as I can understand inquirer won't work without tty.\n$ node -p -e \"Boolean(process.stdout.isTTY)\"\nfalse\nGit Bash is based on mintty. From mintty docs:\n\nLIMITATIONS\nConsole issue\nMintty is not a full replacement for the Windows console window that Cygwin uses by default. Like xterm and rxvt, mintty communicates with the child process through a pseudo terminal device, which Cygwin emulates using Windows pipes. This means that native Windows command line programs started in mintty see a pipe rather than a console device. As a consequence, such programs often disable interactive input. Also, direct calls to low-level Win32 console functions will fail. Programs that access the console as a file should be fine though.\n\nSee also: https://github.com/nodejs/node-v0.x-archive/issues/6459\n\nThat's caused by cygwin's terminal emulation, it's incompatible with node. Closing as WONTFIX. If you feel really strongly about it, you could try your hand at a libuv patch.\nNote that you can still use node with cygwin, just not in the mintty terminal.\n\nFrom my research I do not think that it would be possible to fix it, but I am not competent in this question, maybe @SBoudrias has some ideas. If this is actually unfixable, than the solution would be (for me at least) to check if the process supports tty and respond with a user-friendly error message (maybe it can even be built into inquirer, if it strictly requires tty, I'm not sure).\nSome related stuff:\n- http://stackoverflow.com/questions/10043177/node-js-cygwin-not-supported\n- http://stackoverflow.com/questions/17297422/trouble-with-starting-node-js-from-a-cygwin-console\n. ",
    "pumbers": "Getting the same problem on Babun ... also mintty based I believe.\n. ",
    "c0b41": "Any update this issue?\n. @matthewp sorry, \u0131'm checkout that comment\n. ",
    "Danita": "Puzzlingly enough, I executed node -p -e \"Boolean(process.stdout.isTTY)\" on my machine but it returned true. My specs:\n- Windows 7 x64\n- Gitbash (which comes with Git for Windows, Mintty ver 2.0.3 x86)\n- Node v5.5.0\nI'm here trying to find info to debug this package which depends on Inquirer, and it's failing on said configuration.\n. ",
    "doxxx": "I ran across a similar issue and found it worked when running node using winpty in Cygwin's mintty console with the fish shell.\n\nEdit: I fail at linking.\n. ",
    "jhwohlgemuth": "I wanted to include a link to what \"Xanadu\" is... but I was not sure what, in fact, it is... My best guess is \"an idealized place of great or idyllic magnificence and beauty.\"?\n. Castle of Citizen Kane...I of course...knew that... hehe...\nI will update my PR with a link to the wiki article for Xanadu\n. Commits have been sufficiently squashed\n. I am making this way too hard... Perhaps you should just close this PR (because of my inability to squash commits).  I have created a second PR with a single commit.\n. ...and I am not sure why I keep inadvertently removing the line return.\n. ",
    "tryzniak": "Allow me to chime in. I've got the PR ready for the submission. Shall I send it out? @Downchuck does not mind?\n. Thanks!\nThat's amusing. Same thing happens here. That's only increased the size of the package. Not worth it. I think the issue can be closed.\n. ",
    "Downchuck": "That's fine with me. We did find in another project, that if you include many lodash modules, the aggregate size of the license files is unreasonable.\nsee: https://github.com/dthree/vorpal/issues/2\n. This issue pops up for quite a few projects; it's possible the lodash upstream project may have opinions on it.\nI do see a benefit.\n. ",
    "dthree": "@SBoudrias this is a really big deal for me. \nAs you know Vorpal is a big user of Inquirer. \nI have been trying to make Vorpal as slim as possible:\n- Like Inquirer, it's a user-downloaded module. That means someone types npm install and stares at a terminal waiting for the library depending on Inquirer / Vorpal to download. Speed is of the essence.\n- The slimmer the module, the more willing someone will be to include it as a dependency. \nRight now, the latest lodash version is taking 61% of Inquirer's total size. Vorpal has the same problem, also depending on lodash.\nI've been thinking long and hard about how to handle this, and so I'm proposing a solution I hope you're okay with.\n\nI published a repo that mirrors the latest build of lodash and matches its semver. It's simply the minified build of the full library, built with lodash-cli.\n- That means it's 68KB unzipped, instead of 1.07MB. Thats a big difference.\n- This reduces Inquirer's size from 1.71MB unziped to 727KB.\nAs you may have a concern on depending on something unofficial, know I've already published it in Vorpal and so have a vested interest in keeping it up to date. I've also given you publishing rights to the module, so you don't have to depend on me if you need it updated right away.\n\nI've submitted a Pull Request that uses the minified module instead of lodash, with passing tests:\nhttps://github.com/SBoudrias/Inquirer.js/pull/335\n\nDoes this sound okay to you? Thanks.\n. @jdalton thanks.\nI do understand how NPM caching works, and have been over this before. However, for first-time installs, it is still taxing. For example, I'm about to release an app that's going to have a ton of first-time installs as it reaches to a different public.\nI get that gzipped, you'll get lodash at 245kb over the wire. That's good, but if you gzip lodash minified, that's 21kb over the wire - 8% of the cost.\nI guess my main question is this: would it really be so terrible for lodash core to support an official, automated minified version over NPM that would publish with zero thought or effort, like the individual modules? It would very rapidly adopt a ton of dependencies and so pick up on cache saves, thought at 21kb that's almost no problem anyways.\nI have no desire to publish mindash and will remove it any day for an official module, and I'd willingly do all the work to help you guys build an official bundler. I guess my question is, can we possibly look at this?\nThanks.\n. Totally got it on your points. I'm completely all for official builds with a ton of dependents. With in mind, could you please let me know your thoughts on the latter half of my last, concerning why there can't be an official minified module?\n\nI guess my main question is this: would it really be so terrible for lodash core to support an official, automated minified version over NPM that would publish with zero thought or effort, like the individual modules? It would very rapidly adopt a ton of dependencies and so pick up on cache saves, thought at 21kb that's almost no problem anyways.\nI have no desire to publish mindash and will remove it any day for an official module, and I'd willingly do all the work to help you guys build an official bundler. I guess my question is, can we possibly look at this?\n. I'm okay with this.\n. @SBoudrias It's not a public API feature per say. This can be found in overwriting your onKeyPress event:\n\njs\n    inquirer.prompt.prompts.input.prototype.onKeypress = function(e) {\n      // This reproduces the keypress event I am talking about.\n      // This event does not capture [control] + [backspace].\n      console.log(e);\n      // Your default functionality for handling keypress.\n      this.render();\n    };\nThanks!\n. Btw, I'd love to get in touch with you, if you'd like. I've been putting a lot of work into Vorpal / Vantage and these are totally based on inquirer (I credit you). I'm trying to build Vorpal into a pretty robust framework for CLI apps, and inquirer is no small part in this. If you're interested, i'd love to throw ideas back and forth with you.\n. Thanks.\nHmm: Didn't see any code there that explicitly drops it. Also, I tried this:\njs\nprocess.stdin.on('keypress', function(value, key){\n  console.log(key);\n});\n/*\n{ sequence: ',\n  name: 'backspace',\n  ctrl: false,\n  meta: false,\n  shift: false }\n*/\nUnless you're somehow magically manipulating process.stdin, this doesn't look like your problem, does it?\n. K no problem. Do you happen to know what lib the keypress event comes from? You listen for a 'keypress' event, but readline doesn't emit that by default.\nYeah - this is totally confusing. I can't find what fires keypress in any of your dependencies.\n. K thanks.\nBut looking at readline, it doesn't emit keypress events! Only a line event from any docs I can see. I'm trying to see where the keypress event comes from. Odd.\n. You're right. I verified this as a node bug and filed.\nhttps://github.com/nodejs/node/issues/2890\n. Thanks!\n. Added a second commit that so that the Inquirer UI fires an event when the prompt changes. In this way, you can programmatically determine when each question gets asked.\nDo these changes look okay to you? \n. Thanks for your answer. Let me try to clarify.\nWhat I'm really running into is that Inquirer.js is very well designed as a UI for a CLI user, but it (intentionally, nothing wrong with it) doesn't provide much support for programmatic control of the existing UI components on the fly.\nVorpal.js is built off of Inquirer, and I expose all prompts (such as lists, etc.) through it. What Vorpal does do with these however, is gives more fine-grained control of those prompts so that one can do some fancier things with them, such as:\n- Edit the user content of a prompt on the fly. For example, Vorpal provides an API for tabbed autocompletion. So when the user presses [tab] on an Inquirer input, Vorpal has to access that input, edit the text and then redraw it.\n- Edit the message of an input on the fly. For example, vorpal-less is a JS implementation of the less unix command. When running vorpal-less, when you hit the end of the content, the message needs to change from : to an inverted END string. Vorpal does that with any inquirer UI piece.\n- Listen for key-presses on any prompt. For example, in less and vorpal-less, almost every key does a custom function, i.e. navigates the content, pulls up help, quits the app, etc.\n\nSo in summary, I'm simply trying to use vorpal to make inquirer more powerful and flexible from a programmatic perspective. I don't want to register a new UI component for Inquirer as the existing ones are perfect, and I want someone to be able to use and manipulate any of them.\nRight now, Vorpal does do all of the above, however it's way too hacky and messes with your internals too much. Properly exposing the active prompt lets me do the above far more gracefully (and stably).\nDoes this answer your question?\n\nOn RxJS, I can totally do that. Just need to study up on it a bit because it's honestly still magical and new to me. :)\n. Sigh. I guess I can, however I then need to start re-writing your methods, which gets super messy, and as soon as you do an Inquirer update, it's going to break something.\nAll I'd really like to do is expose a UI Component (not change its methods) while it is being prompted, and then I can cleanly handle the rest. If you don't like the way I did it, I can totally change it to whatever you see as the best way to go about it: just let me know.\nAny chance we can just do this? :smiley: \n. @SBoudrias @sindresorhus perhaps we could discuss a roadmap in this direction that we all can agree on and that doesn't mess with Simon's original goals in making Inquirer. I've had a lot of experience now messing with Inquirer's internals, so I could lay out what I think would improve it in a programmatic sense, and wouldn't mind helping get done whatever we agree on.\nWhat do you guys think?\n. :+1: \nI'm currently finalizing the vorpal API for the following methods:\nui.cancel: Cancels Inquirer prompt\nui.submit: Submits the Inquirer prompt as if the user pressed [enter].\nui.pause: Pauses Inquirer prompt\nui.resume: Resumes Inquirer prompt\nui.imprint: Logs current prompt text and delimiter and returns to the same prompt (good for tabbed auto-completion).\nui.delimiter: Changes the Inquirer message and redraws.\nui.input: Re-writes user input mid a prompt (like #46 above).\nui.redraw: Exposes log-update.\nui.redraw.done: Exposes log-update.done, and then refreshes Inqurier's prompt after completion.\nui.redraw.clear: Exposes log-update.clear.\nMost of these dig deep into the internals of Inquirer. This is my wishlist: I would love if Inquirer exposed functionality for these! :star2: \n. Just put together better descriptions of the functionality I'd love to see in Inquirer. \n(Need to work more on the pause and resume methods. They're way too hacky still.)\n. @SBoudrias I managed to figure out a workaround for now on this issue, so I'm going to close the PR. You don't seem to excited about it haha.\nAnyway, if you ever want to get around to making Inquirer more programmatically accessible, let me know and I'll gladly help!\n. :+1: thanks!\n. kk\n. Thanks! You're awesome! :sparkles: \n. Did you add up the combined package size of each of these modules? The problem as stated earlier is that, inflated with licenses, markdown, etc. these come out to the same size as lodash as a whole.\n. ",
    "jdalton": "I don't think an unofficial mindash is necessary for the case of npm i if download size is the issue. The lodash v4.5.0 package is 245kb over the wire to npm i it. If I'm not mistaken npm installs should be cached by npm so it's a one time download cost per version. And since lodash is the most depended on package in npm it will most likely be in the cache.\nSee @othiym23 comments:\n\nWhen packages are in the cache, the initial metadata request sends the cached etag for the package, and in the vast majority of cases, the registry will return a 304 and the package tarball won't need to be downloaded again.\n\nSo by using mindash you're actually increasing the cost for most folks since it is likely uncached.\n. @Downchuck \nIf the npm cache isn't working, and there is a real issue, then yep lodash core is interested in helping. However, if the npm cache is working, then it's just about getting that knowledge out (better npm docs). I see this come up from time-to-time from those super interested in saving file size but without the background knowledge of how npm works or know-how of bundlers/minifiers.\n. @dthree\n\nHowever, for first-time installs, it is still taxing. \n\nIf Lodash has already been installed on their system, and chances are it has, then it should be cached regardless of your new package release.\n\nThat's good, but if you gzip lodash minified, that's 21kb over the wire - 8% of the cost.\n\nIt's a one time cost. A cost that's likely already paid.\nSo what you're doing is likely adding extra download time to your app because chances are mindash is uncached and will require a download unlike lodash.\nLet's put it another way. 46,977 packages depend on lodash in some way. That's 46,977 opportunities for it to be cached. None currently published depend on mindash. For a better chance of Lodash being cached use lodash@^3.0.0 as it has a greater number of package dependents.\n. @dthree\n\nI guess my main question is this: would it really be so terrible for lodash core to support an official, automated minified version over NPM that would publish with zero thought or effort, like the individual modules?\n\nThe individual modules actually take a considerable amount of thought/effort. Every additional build has a cost to maintain.  I don't see this as adding value and worse it promotes misinformation about size, caching, & priorities. I don't want devs falling into this trap so no I'm not going to help push them in.\n\nI have no desire to publish mindash and will remove it any day for an official module, and I'd willingly do all the work to help you guys build an official bundler. I guess my question is, can we possibly look at this?\n\nI think you're premature-optimizing/obsessing to the point of actually adding a cost (however minimal) to your users. On 3g Lodash takes maybe 1 second to download on a fresh non-cached install.\n. ",
    "rtsao": "I'm getting the same issue with duplicate output\nPossibly related: https://github.com/SBoudrias/Inquirer.js/issues/209\n. ",
    "dubeej": "Thanks for all the help!\n. ",
    "lsycxyj": "A bug similar to it. It works fine except Node 4.0.0. Arrow keys does not work in windows prompt.\njavascript\n  var inquirer = require('inquirer');\n  inquirer.prompt([\n    {\n      type: \"list\",\n      name: 'test',\n      message: \"test?\",\n      choices: [\n        'A',\n        new inquirer.Separator(),\n        'B',\n        new inquirer.Separator(),\n        'C'\n      ]\n    }\n  ]);\n. ",
    "Awk34": "I have the same issue. I was trying to install Semantic UI, which uses gulp-prompt, which in turn uses Inquirer.js. My solution was to use Node.js 0.12.7 via nvm-windows, install Semantic UI, and then go back to using Node 4.0.0.\n. ",
    "jasoncmcg": "Nevermind, issue fixed when updated to node v4.1.1\nThis worked great on v0.12.x, but not on v4.x.x:\n```\nvar inquire = require('inquirer');\nvar childProcess = require('child_process');\nvar chooseList = {\n    type: \"list\",\n    name: \"whichProcess\",\n    message: \"Which process to run?\",\n    choices: [\"Option 1\", \"Option  2\", \"Option  3\", \"Option  4\", \"Option  5\"]\n}\ninquire.prompt(chooseList, function (prompts) {\n    switch (prompts.whichProcess) { //etc\n```\nI ran an npm update --save and have \"inquirer\": \"^0.8.5\" in the package file.\n- Windows 10\n- Node v4.0.0\n- Inquirer v0.8.5\n- Just running my script like this node .\nSame problem as above. The arrow keys do not move up and down. I can hit enter and select the first entry.\n. ",
    "johnweland": "I actually have the same issue in Node 5.1.0\n. ",
    "ericis": "Same. I also have the issue on Node 5.6.0\n. ",
    "kascode": "Same issue. Node v.5.11.0\n. ",
    "projer": "Same issue with 5.10.1 here\n. ",
    "navehazan": "did u resolve this problem ? i have the same issue . ",
    "lostPixels": "Just encountered this one too when users of my app were attempting to execute a script in the Intellij shell.\n. ",
    "saulobrito": "A temporary fix is setting an environment variable named CLI_WIDTH to anything greater than 1. \n. ",
    "aguerrieri": "I'm not implying breaking the default behavior, but providing means to be able to get out of a menu by pressing some key(s) [escape perhaps?].\n. ... and in fact right now, if you press ctrl-c it goes into a \"locked\" state and you need to press ctrl-c again to get out of it, so something seems to be indeed messing with the default behavior.\n. ",
    "savageautomate": "I would like to second this issue.  I ran across this scenario today.\n. ",
    "ro31337": "I want this feature to be done from the software side. So some delayed handler can be executed, and if the user has not provided something within a limited period of time (or for some other reason - something has happened in the system, and its state has been changed, so there is no reason to prompt), javascript code should be able to break out of existing prompt.\n. I added PoC interruption mechanism here: https://github.com/ro31337/Inquirer.js#modified-by-roman-pushkin\nCommit: https://github.com/ro31337/Inquirer.js/commit/954f94616ba9d0e997be738446001354791010ec\nIt's for list only. I don't know if it fits the philosophy of the library, and a good way to go, so wanna hear your comments guys. @SBoudrias \n. @Pomax added PoC interruption mechanism here https://github.com/ro31337/Inquirer.js#modified-by-roman-pushkin\n.  UPD: I have some more work in my branch. Now I just return undefined as answers when things were interrupted.\n. @SBoudrias well, it does not reject the promise (it does internally, however). So inside of\n.then((answers) => { ... })\nI just check answers to be truthy. \nMoreover, interrupt handler implemented for list only. There is some work required for other types of prompts. I don't have too much time now, can you tell me your preference, what's better:\n- Reject the promise\n- Resolve the promise with undefined answers\n?\n. ",
    "mbleigh": "Interesting...I tried to create a minimal repro but couldn't reproduce the behavior. I thought I had seen the behavior in bower init but now can't reproduce that either. Feel free to mark as closed, I must be mistaken about the cause of my issue.\n. ",
    "ChristianAlexander": "I ran into this issue recently. Because of Inquirer.js's usage of readline, SIGINT only gets sent to Inquirer, which is fine when Inquirer is in the only running process. \nFor me, the problem came up when I had a child process running. Since Inquirer does not propagate the signal, it is never exposed to the main process. This essentially removes any ability to listen for any signals with process.on. \nThe real question is, should SIGINT only go to Inquirer, and be required a second time for the process, or should Inquirer be responsible and ensure that SIGINT is sent properly?\n. After looking into this further, there is no documentation explicitly stating that signals do not propagate. In fact, manually sending a SIGINT (ex: kill -2 <node process id>) does work.\nThe problem is that readline itself listens to the TTY directly, so a 'real' SIGINT isn't produced.\nSee: https://github.com/nodejs/node/blob/master/lib/readline.js#L689-L700\n. I'm unsure if this should be considered an issue at the Node level. Perhaps there could be a case where it wouldn't be desirable to send a SIGINT on ctrl+c in a project directly dependent on readline.\nHowever, I can not come up with a scenario where any Inquirer-based projects would use ctrl+c. Even if such a scenario were to exist, the event wouldn't be exposed to consumers of Inquirer.\nIf Inquirer doesn't end up sending SIGINTs to the process itself, would it be possible to have Inquirer pass the event along after it is done closing up? If not, could Inquirer send an error object in its callback where results are sent?\n. ",
    "felipenmoura": "So...\nI want to capture the ctrl+c to, let's say, output a \"good bye\" before exiting, killing a socket, and other small things like logs.\nBut I also want to listen to ctrl+l to clear the console, and if possible, esc!\nIf inquirer does receive these events somehow, it could have an API so we could have access to them.\n. Well, they are not being triggered!\nI am using inquirer, with wait, and also using the process.on('SIGINT', ... ), and it is never called!\nI am not sure if I am doing something wrong, or if it has something to do with this thread.\n. ",
    "dcrockwell": "What about some kind of solution like exposing the readline instance as a workaround?\nSee this comment from a Node.js Foundation Member: https://github.com/nodejs/node/issues/4758#issuecomment-231155557\n. Turns out it's pretty easy to test via simple asserts on stdout, but the trick to getting it to accept an input is: process.stdin.emit(\"data\", \"Your Input\\n\");\nThis can be considered closed, I think.\n. ",
    "adamreisnz": "Does anyone have any new insights or workarounds for this issue? It's still present one year on and quite annoying that one has to CTRL-C twice to exit a process where inquirer prompt is active.\nLooks like the suggestion as above by @dcrockwell is already present in the code but to no avail:\nhttps://github.com/SBoudrias/Inquirer.js/blob/master/lib/ui/baseUI.js#L21\nFurther investigation shows that the called onClose handler doesn't really do anything except output a new line:\nUI.prototype.onForceClose = function () {\n\u00a0 this.close();\n\u00a0 console.log('');\n};\nI'll create a PR to fix this.\n. @welwood08 I can confirm that using process.kill(process.pid, 'SIGINT'); has the desired effect as well. I will create a PR for that. Thanks for pointing this out.. Thanks, yes I followed the link posted in the issue, and after reading some more I stumpled upon an issue in Node repo which still isn't resolved. Long story short, this seemed to be the way to do it, listen for SIGINT on the readline instance like you were already doing, but then send terminate the process because that's not done.. Possibly yes, it looked to me like there was some redundancy, but as I didn't author this package nor spent a lot of time analysing the code, I wasn't sure how refactoring it would impact other area's. Probably best for the package owner to have a look.. Would love to see this feature too, it's getting very messy when other console logs are displayed in the prompt.. ",
    "welwood08": "I disagree with the recently merged process.exit(0) solution to this issue.\nThe application making use of inquirer may wish to do unrelated cleanup via process.on('SIGINT', ...) before exiting normally. Conversely, the application may be running in a shell script where a normal exit after Ctrl+C would incorrectly execute subsequent commands in the script. https://www.cons.org/cracauer/sigint.html explains this much better than I could.\nThe correct way to handle this is process.kill(process.pid, 'SIGINT'). If the application has a listener handling this then it can deal with it how it wants, if it's not listening then the signal is correctly propagated to other processes.. I happened to be skimming through the code looking for something unrelated and noticed there's cleanup code 20 lines below this change that should probably be synced to remove the new listener.. ",
    "b4dnewz": "I just tried with the version 6.x and my SIGINT handler never gets called unless I remove this line: process.kill(process.pid, 'SIGINT') from onForceClose function.. that is strange, is not supposed to forward the call to any listener? In my case it just kill the process, no SIGINT/exit handlers are called. ",
    "junfeisu": "I also have the same problem in the 6.x version.I found the problem is in this.close() method in ui/baseUI.js.More specific is the combination of \njs\nthis.rl.pause()\nthis.rl.close().\nI also look the pause and close method in node readline.js.But I can not find the reason.\nI hope someone can help me to understand it.\nThanks!. ",
    "jbreeden-splunk": "EDIT: I guess this is more a comment on the issue that b4dnewz & junfeisu had, rather than the OP, in that I couldn't catch my SIGINT at all (I did not have to send it to my process twice). Still, I hope this is helpful for others that land here looking for signal handling issues\nI thought I was hitting this issue with version 6.2, but it turned out not to be an issue with inquirer, it was more with the way signal handlers work in node.\nPosting my solution here in case it's helpful for others:\nMy issue was, in short\nThat when inquirer encounters a SIGINT, it closes the underlying readline interface, which I believe cancels any handlers for readline input. If the only thing your app is doing is waiting for the inquirer prompt result, that means that the event loop will no longer be considered \"alive\", so the process will exit with a zero exit code.\nYou might think that your signal handler would be ref'ed by the event loop, as any socket listener or file read request is, but that is not the case. So even though you may have set a process.on(\"SIGINT\", ...), the process will actually exit before it gets a chance to run your signal handler.\nThe solution was\nTo maintain a ref'ed handle in the event loop until I'm done listening for signals (or, equivalently in my case, until I'm done with my inquirer prompting).\nMy implementation of this solution\n```js\n/\n * This class is required for proper signal handling of\n * inquirer-based programs.\n \n * USAGE:\n \n *    async function myTask() {\n *      // Create a signal ref for the signal you'd like to catch\n *      const signalRef = new SignalRef(\n *        'SIGINT',\n *        () => { process.exit(1); }\n *      );\n \n *      try {\n *        await doYourInquirerStuff();\n *      } finally {\n *        // Release the ref to avoid keeping the loop alive forever.\n *        signalRef.unref();\n *      }\n *    }\n \n * NOTE: If you're not going to exit in your signal handler,\n * consider whether you want to catch the signal only once\n * (in which case maybe have it unref itself) or many times.\n \n * See: https://github.com/SBoudrias/Inquirer.js/issues/293\n /\nmodule.exports = class SignalRef {\n    constructor(signal, handler) {\n        this.signal = signal;\n        this.handler = handler;\n    process.on(this.signal, this.handler);\n\n    // This will run a no-op function every 10 seconds.\n    // This is to keep the event loop alive, since a\n    // signal handler otherwise does _not_. This is the\n    // fundamental difference between using `process.on`\n    // directly and using a SignalRef instance.\n    this.interval = setInterval(() => {}, 10000);\n}\n\nunref() {\n    clearInterval(this.interval);\n    process.removeListener(this.signal, this.handler);\n}\n\n};\n```\n. ",
    "iamakulov": "Whoops, sorry, I was wrong about cmd.exe working properly. Removed that line.\n. Amazing, thanks!\nCould you please point to the commit that fixes it? Just interested what was the reason.\n. ",
    "EladBezalel": "+1\n. ",
    "hrbu": "+1 The same in git-bash on Windows.\n. ",
    "karol-f": "Same behavior can be observed on OSX(El Capitan) standard terminal and iTerm2\nEDIT\nProblem was with not waiting for Gulp task to finish inquirer before ending task. Now it's ok.\n. ",
    "scotthovestadt": "Confirmed this happens in raw Inquirer.js as well as Vorpal. In screen-manager.js, if I console.log every time input is detected, I can go to 2 lines (and on the third line this happens). Seems related to screen-manager.js.\n\n. Note that the attached behavior only happens until it reaches the top of the screen and then it behaves somewhat normally.\n. Using require('cli-clear')() will reset terminal input and everything works correctly from that state. If terminal input is pushed to bottom again this resumes happening.\n. ",
    "djskinner": "I just tried using \"rx-lite\": \"^3.1.2\" and it has the same issue.\n. Ah I see. Perhaps a ReplaySubject was what I was looking for.\n. ",
    "nmai": "@SBoudrias Thank you, and my apologies for creating a duplicate. I upgraded to Node 5.0.0 in hopes that it would have the latest patch. It did not. Hopefully they'll roll out the fix in the coming days.\nI discovered that the arrow keys worked perfectly fine in https://github.com/Maximus5/ConEmu but the default Windows command prompt, Node.js command prompt, and Git command prompt all failed. \ntl;dr: The only solution to this problem is to use ConEmu or generate the .eslintrc file yoursef, at least until a fix is released by the Node team.\nOr just use a better shell environment, such the ones offered by Linux and OS X :+1: \n. ",
    "Spaider": "For some reason, ConEmu does not always work as well. I did not investigate it a lot, but it worked for me only for non-admin console.\n. ",
    "geddski": "Here's a workaround for anyone that needs it. https://gist.github.com/geddski/c42feb364f3c671d22b6390d82b8af8f\n. ",
    "Jeff-Lewis": "Also see https://github.com/nodejs/node/issues/5384\n. ",
    "amartiuk": "Keypress doesn't work in Git Bash for me also. But it works fine with ConEmu64 (https://conemu.github.io/) on Windows 10.. ",
    "mhkeller": "I think this could work by modifying the input prompt type to fill in the default value. \nThe use case I'm envisioning is you want to use the default string as a starting point. For example, you have a date 2016-05-01 as the default and you want it to change it to 2015-05-02. You could up-arrow and change only the last character.\nIf what you're thinking is that inquirer should remember your last values, I think that belongs in whatever application you're building. I've done this usually by writing out the answers object to a file and then dynamically populating default fields with those values for new inquirer sessions.\nBecause inquirer supports custom prompt types, I'm going to take a crack at adding that functionality using input as a jumping off point.\n. I've got a basic version working here: https://github.com/mhkeller/inquirer-input-up\nHaving some trouble with the cursor position though that would be great to get some help on: https://github.com/mhkeller/inquirer-input-up/issues/1\n[Edit] Issue is resolved\n. Thanks. That does the trick.\n. ",
    "allenhwkim": "How about up/down arrow keys to navigate through the previous answers  only for input prompt?\nI am recently buildnig a command line interface to accept commands which are repeating often.\nThis feature will make  more like unix command line and it will be very useful for developers like me.\nIf it's ok with the owner, I can make PR for either;\n1. modify input prompt to store/load the last input here, https://github.com/SBoudrias/Inquirer.js/blob/master/lib/prompts/input.js#L102\n1. or, create a new command promote copied from input prompt. \n. @SBoudrias yes I can build a custom prompt. However, IMO, I think it's better to be a core feature instead of custom one. It's up to you. I am just making a question and suggestion.\n. For those who is interested in solution to build a command prompt extended from input prompt. First install preferences to save command history\nnpm install preferences --save\ninquirer-command-prompt.js\n``\n/**\n *commandtype prompt\n * It works the same asinput` type prompt, plus;\n \n *  1. It auto fill commands when UP/DOWN arrow is pressed\n *  2. It auto fill commands when TAB is entered\n *  3. It saves the history to ~/.config/preferences\n /\nvar util = require('util');\nvar InputPrompt = require('inquirer/lib/prompts/input');\nvar Preferences = require('preferences');\nvar commands = new Preferences('inquirer-command', { history: [] });\nvar numCommandsHistory = commands.history.length;\nvar currentNdx = numCommandsHistory;\nmodule.exports = CommandPrompt;\nfunction CommandPrompt() {\n  return InputPrompt.apply(this, arguments);\n}\nutil.inherits(CommandPrompt, InputPrompt);\nCommandPrompt.prototype.onKeypress = function (e) {\n  / go up commands history */\n  if (e.key.name === 'up') {\n    currentNdx--;\n    (currentNdx < 0) && (currentNdx += numCommandsHistory); //prevents negative value\n    this.rl.line = commands.history[currentNdx % numCommandsHistory];\n    this.rl.write(null, {ctrl: true, name: 'e'});\n  }\n  / go down commands history /\n  else if (e.key.name === 'down') {\n    currentNdx++;\n    this.rl.line = commands.history[currentNdx % numCommandsHistory];\n    this.rl.write(null, {ctrl: true, name: 'e'});\n  }\n  / search for matching history /\n  else if (e.key.name === 'tab') {\n    var matchingHistory = commands.history.find(el => {\n      return el.match(new RegExp(^${this.rl.line.replace(/\\t/,'')}));\n    });\n    if (matchingHistory) {\n      this.rl.line = matchingHistory;\n      this.rl.write(null, {ctrl: true, name: 'e'});\n    }\n  }\n  this.render();\n};\n```\nUsage\nvar inquirer = require('inquirer');\nvar InquirerCommandPrompot = require('./inquirer-command-prompt');\ninquirer.registerPrompt('command', InquirerCommandPrompt);  // register \"command\" prompt\n...\ninquirer.prompt([{\n  name: 'my-command',\n  type: 'command',  // <-- instead of \"input\", use \"command\"\n  message: '>', \n  validate: function(command) {\n    return true; \n  }\n}]).then( function(answers) {\n  ...\n})\nI was almost close to submit a PR for this feature, but I did not because I wasn't not sure of owner's willingness to accept it.\n. @heylookltsme \nInteresting. I don't have that issue(because I do not use Windows?).\nI am using this for my webtest module, and it works without a problem.\nPlease copy/paste code if these are helpful.\nhttps://github.com/allenhwkim/webtest/blob/master/src/inquirer-command-prompt.js\nhttps://github.com/allenhwkim/webtest/blob/master/index.js#L54\n. @heylookltsme yes it's possible. I only use iTerm2 or built-in terminal.  WebTest is using inquirer 1.2 as you see at package.json https://github.com/allenhwkim/webtest/blob/master/package.json#L19\n. @sullof I am fine with it. ",
    "sullof": "@allenhwkim I have the same problem on Mac using the standard terminal. It would be great if you fix this issue and publish it to npm.. @allenhwkim If for you it's fine, I can fix the prompt and publish it to npm \u2014 when I have time :-). Great, thanks. I fixed it and I am adding a few more features (like context-based histories, dynamic autocomplete, etc.). I will let you know.. @SBoudrias @allenhwkim @heylookltsme \nI have published the prompt on npm (https://www.npmjs.com/package/inquirer-command-prompt). \nAs you can see on Github (https://github.com/sullof/inquirer-command-prompt) I haven't set any tests yet. I will do it asap. Though, I am actively using this prompt in a project and I can say that everything works as expected. Let me know.. ",
    "BlueHotDog": ":+1: \n. ",
    "senshuu": "I've submitted a Pull Request to implement the features proposed in this request. Options to select all, none, or the inverse have been implemented. Additionally, I implemented a \"random\" function as well, just for scenarios that may call for random choice selection. Please feel free to remove the 'random' option though, if it's not desired.\n. Sorry about that. My editor must have inherently changed the code styling upon loading the file. I've gone through and fixed all the coding style changes to eliminate any false differences. Just the actual differences should display now.\nP.S.: Disregard the empty commit before the fix.\n. @ronkorving @SBoudrias The initial change was only to 2 files, but I'm not quite sure what happened after the initial commits to make all these other changes appear. It looks like prior commits were added automatically to this pull request for one reason or another. I've tried to rebase the changes so that it will squash the commits prior to my changes, but it doesn't seem to working. \nI can continue trying the rebase to remove the earlier commits, or close this pull request and submit another.\n. Initiated variable 'i' and fixed indentions as indicated in the code review.\n. Sorry about the confusion. The changes have now been pushed.\n. Random key functionality has been simplified, as previously suggested.\n. Looks like something went wrong with the rebase once again. I'll try to resolve as soon as I can.\n. Merge conflict has been resolved. \nNot sure if you'd like me to resolve the 'coverage/coveralls' check or squash the rebase history. Let me know if so.\n. Sorry for the delay in getting this committed and pushed. I've been away on vacation for a little while.\nAs suggested, the 'select all' button will now deselect all options if all choices have already been selected. The 'select none' and 'random' buttons have also been removed.\n. Affirmative on the pointer mutation.\nJust to clarify for the chalk styling, something such as a colored background or colored text for the key names would be feasible?\n. @SBoudrias All the comments and requests have been implemented up until the chalk styling. Unfortunately, I won't have the time to continue working on it from there, so I can get this PR finalized and someone else can take over from there.\n. Got it. I'm wrapping up the changes now but wanted to confirm before committing.\nYou'd like the 'a' key to 'select all' if every choice isn't selected, but to also 'select none' if all the choices are already selected?\nLet me know if this is mistaken from what you were expecting.\n. ",
    "keithamus": "Hey @SBoudrias you mention that I could return a Promise instead of using this.async.\nI had assumed this to be the case for when - but it seems not to be. (Using inquirer 0.11.0).\nHere you can see I'm trying it in the Node repl:\n``` js\n$ node\n\nvar inquirer = require('inquirer');\nvar q = {\n...  name: 'test',\n...  message: 'This shouldn\\'t come up because when resolves to false',\n...  when: function () {\n...    return Promise.resolve(false);\n...  }\n...};\ninquirer.prompt(q, console.log.bind(console));\n\n? This shouldn't come up because when resolves to false\n```\nIt looks like the problem is that run-async is only version 0.1.0 in Inquirer's package.json. Would you like me to PR an update to 2.0.0?\n. Is there an issue for Windows breaking? Do you know the commit that caused it?\n. ",
    "nicksrandall": "Ahh, looks like travis didn't like my unit tests. I agree that this could be a plugin, but I was thinking that this was a common enough use case that it could be added into core so that individual users didn't have to seperatly implement it. \n. Ok. It was worth a try!\n. ",
    "Signus": "@SBoudrias, do you plan to implement a plugin guide for instances like this? I see Nick simply implemented a new Prompt prototype, which is the convention I'm following for this very same problem.\n. ",
    "lfilho": "Sorry, my bad. I forgot to pass -t to docker in order to emulate a real tty. Now it worked. Sorry for that\n. ",
    "yashiel": "ok here is the example\ni'm asking what do you want to backup, and there are two answers(checkbox) one is src folder another one is build folder, when someone check both option then both are created, i have try length, check, truthy, equal things but none of them working. but when someone choose one of answers then it build backup according to what he choose. i need to check if both are checked. that is what i want to do.. thanks if you can help me.. i know this is simple thing. but this simple thing won't work. can someone suggest a simple solution\n. i figure it out.. thanks\n. ",
    "mxstbr": "Like a placeholder, giving the users an example of what the answer to the input might look like. I've had this request a few times, and think it'd be really useful!\n. The problem is that you don't show the default afaik. So as a user, I have no idea what I should put in the input.\nAn example would be a question after a twitter username, should I include the @, should I not include it,...?\n. Oooh nice, this issue can be closed then I guess. Thanks!\n. ",
    "fredericgrati": "Try to have a long checkbox list with separator. \nYou will see that the cursor will disappear.\nI have modified the examples/checkbox.js in order to have a long list. try it with the master version ;)\n. You are right, I have made the modifications :)\n. Thank you for your help on this PR. ;)\nCan you update the package.json version after the merge ? thx\n. ",
    "eurochriskelly": "Thanks for the quick response. I prefer my own hack to nesting though. I was thinking it would be nice to make answers accessible as another parameter to the validate callback or perhaps to a before hook.\n. Ok, that's great. thanks. I can ditch the closure now:\nvar prompts = [\n        {\n            type: 'input',\n            name : 'min',\n            message : 'min?'\n        },\n        {\n            type : 'input',\n            name: 'max',\n            message : function (a) { return \"max: must be greater than \" + a.min; },\n            validate : function (m, a) {\n                return (m > a.min);\n            }\n        }\n];\ninquirer.prompt(prompts, function (answers) {\n    // do stuff with answers\n});\n. ",
    "kmgilbert100": "I have a terminal menu for a full block terminal application... Multi level menu etc... Some items are disabled temporarily therefore they should show.\nI found this - https://github.com/SBoudrias/Inquirer.js/issues/92 \nBut i tried it and it seems it doesn't work so well.\n. It seems if you add that disabled you can still select the list item... if you do it returns the response for the next item in the list.\n. Sure - Always glad to contribute when the project is actually monitored.. haha\n. Hmm.... I tried setting up a new env and pulled from master and the disabled state seems to work... ill have to do some more investigating but can maybe mark this as resolved here in a bit.\n. ",
    "yibn2008": "I found https://github.com/sindresorhus/string-width can solve the CLI character width problem, I will fix with it later.\n. @SBoudrias Now the extra dependencies has removed.\n. All commits has squashed to a single one.\n. :+1:  thx a lot :-)\n. @SBoudrias I'm afraid that string-length cannot be used in this case, for example, the stringLength(\"\u54c8\") is 1, but what we want is 2, the real width displayed on terminal. Actually the code is reference to the _getDisplayPos in https://github.com/SBoudrias/readline2/blob/master/index.js#L67-L95.\nMaybe we should extract the width calculate logic from readline2 to a npm module.\n. ",
    "bcoe": "@SBoudrias yeah, but unfortunately as of right now cli-width only respects the default value if process.stdout.getWindowSize and tty.getWindowSize() are not available\nIn the case of Alpine running on Docker, process.stdout.getWindowSize() returns a width of 0 -- which cli-width in turn happily returns; I think better behavior might be to return the default value if process.stdout.getWindowSize() returns anything that's not truthy.\n. @SBoudrias thanks for patching this so fast \\o/ now I have no reason to procrastinate from releasing the next version of npm On-Site.\nMind pinging me when you release the patch to npm?\n. @SBoudrias in the very least, you can try commenting out || cliWidth.defaultWidth; and get a feel for the error.\n. ",
    "hzoo": "Sure - and removing JSHint/changing the readme to say it's following xo style?\n. Sorry, was busy - if you are going to do it soon anyways then go ahead, otherwise I can probably tonight\n. ",
    "gajus": "Furthermore, install is now throwing warnings:\nnpm WARN deprecated lodash@0.9.2: lodash@<3.0.0 is no longer maintained. Upgrade to lodash@^4.0.0\nnpm WARN deprecated lodash@2.4.2: lodash@<3.0.0 is no longer maintained. Upgrade to lodash@^4.0.0\n. Never mind, https://github.com/SBoudrias/Inquirer.js/blob/v0.11.4/package.json#L30\n. ",
    "vweevers": "How about this?\n. OK, ready for review. The base UI's close() now always calls screen.releaseCursor(), and screen.done() clears the screen's internal state. So in a normal close, screen.releaseCursor() is effectively a noop.\nMaybe even better would be to have the base UI instantiate and remember the screen manager, then from PromptUI, pass it to the Prompt:\n``` js\nvar screen = this.createScreen();\nvar prompt = new Prompt(question, screen, this.rl, this.answers);\nvar answers = this.answers;\nreturn utils.createObservableFromAsync(function () {\n  var done = this.async();\n  prompt.run(function (answer) {\n    answers[question.name] = answer;\n    done({ name: question.name, answer: answer });\n  });\n});\n```\nHowever, this would be a breaking change to the Prompt constructor, and break a lot of tests, so I decided against it.\n. > Maybe we should instantiate the screen manager inside the UI class. Then we don't have to reach for properties on children objects.\nLike I said:\n\nMaybe even better would be to have the base UI instantiate the screen manager [..]. However, this would be a breaking change to the Prompt constructor, and break a lot of tests\n\nIf you're OK with that, I'll go ahead\n. @mokkabonna feel free to take over (tbh, this is a low priority for me, might never get around to it)\n. Updated to only expose ui. rl and process can be referenced as promise.ui.x.\nRe promises: the downside of the current approach, besides the monkey patching, is that it swallows errors (including errors thrown in user land). People who use a regular callback, will not think to add a catch handler on the promise. Nor should they have to.\n. Gotcha. Though it's difficult to do this cleanly with the current class hierarchy.\n. @SBoudrias Before I start updating the tests, I wanna make sure we're on the same page. Happy with this?\n. By Prompt, do you mean PromptUI or Prompt? Either way, this would only make sense if we go all the way and have the screen manager do all the cleanup (unmuting and ending output etc). Because now, the order of things is quite specific. And if we were to replace the releaseCursor() call below with a cleanup() call, it's not exactly clear what the responsibilities of that cleanup method are.\n``` js\nUI.prototype.close = function() {\n  // ..\n  this.rl.output.unmute();\nif (this.currentScreen) {\n    this.currentScreen.releaseCursor();\n  }\nthis.rl.output.end();\n  this.rl.pause();\n  this.rl.close();\n};\n```\n. ",
    "ronkorving": "Looking at the files changed, I still see tons of style changes. Was your intention really to change 58 files? Because that's the state of this PR at the moment.\n. Please lint your changes (as Travis did)\n. Did you forget to push? I don't see the changes you mention.\n. Whether or not there's value in \"random\", I leave to @SBoudrias. Other than that, LGTM.\n. @SBoudrias thanks for review, looking forward to the changes you asked for\n. i is not declared, so becomes a global here. (same comment applies to your other methods)\n. Indentation is off on these blocks. (same comment applies to your other methods)\n. Indentation is off in all the labels you added to this object.\n. You could make this quite a bit simpler by comparing against 0.5.\n. ",
    "ghost": "Thanks, looking forward to the release. \n. Will the promise resolve after the callback executes or before? \n. What I mean is the second function that you pass in that will receive the error and answer object. See below:\n``` javascript\nlet questions = [{\n    type: 'input',\n    message: 'What is the meaning of life?',\n    name: 'truth'\n}]\nfunction answerProcessingFunction(error, answer){\n}\nlet promise = inquirer.prompt(questions, answerProcessingFunction);\n```\nThe function used to process the answer\n. Ok, so you can eventually, or now with babel, if you are that way inclined do\njavascript\nasync function run() {\n    var answer = await inquirer.prompt(\n [{\n    type: 'input',\n    message: 'What is the meaning of life?',\n    name: 'truth'\n}]\n);\n    //do something with the answer? \n}\n. I am using JXCore but tested it with the default version of Nodejs: v4.4.7, and got the same result, it did flicker a bit less using node then it did with JXCore. \n I am running on Mac OSX El capitan. \nWhat do you mean by 'command line?' ? \n. terminal.app, the default terminal that comes with a Apple Macintosh. \n. I take it you don't want to accept that there's an issue?\n. You must be very busy... \n. Some input on fixing this issue would be useful. \n. My bad* . Yep, just noticed. Probably should've read over the PR's... But yes, that will also work too! . Yes, when I type anything it is visible on the console. Figured It myself. Thank you.\nTook Help from the generator-node project. Sorry, but I don't understand your suggestion - can you elaborate more?. Although this change makes sense, you might break code from other people. Assume they have a custom prefix without a space at the end. Once you remove the hardcoded space as suggested, prefix and message suddenly get glued together. Even though it is only a \"cosmetic\" change, it is a breaking change nonetheless.\nMy suggestion is to add an option for the time being that, when turned on, does exactly what you describe; otherwise, it shall behave as before.. Alright, I am all for it anyways, since I don't need to maintain and update my forked version with customized changes in the meantime then \ud83d\ude04 . @SBoudrias When do you consider adding the discussed change? I guess there is no PR necessary since it's only a very minor change in code.. ",
    "sdotson": "Is this PR still moving? I could use @senshuu's fork as a starting point, rebase with whatever is current on master, and address the comments. It looks like this feature is really close to being done.\n. The model you've included seems to work fine on mac. What version of Windows are you running?\n. Awesome. Your two comments should be addressed in the latest commits. I also gave a minor bump to the package.json. Let me know if you'd like me to squash commits or otherwise edit anything else.\n. No problem. I'll keep your comments in mind for next time.\n. ",
    "samwightt": "Sure! I should be able to fix it near the end of the day.\n. ",
    "southpolesteve": "That was my initial solution, but as the prompts become more complicated (specifically more logic in the when functions) I found myself with weird edge cases. I did tried an attempt at replacing the answers object on the prototype but wasn't able to make it work.\nJust spliting up the prompts or try and simplifying the question hierarchy may just be the best solution here. I could also walk and execute the when functions but that may still lead to edge cases.\n. ",
    "endquote": "Looks like it is... wasn't working for me in some case, probably user error.\n. Found it... thanks! Interesting how that works.\n. ",
    "drobertduke": "Don't erase the Press <space> to select hint.\n. ",
    "shanshanyang": "great, thanks, i'll give it a try\n. ",
    "yorkie": "@SBoudrias child_process.spawn doesn't work with me, the weird part is not just the stdin, when I pipe the spawned inquirer program to process.stdout, the color gets removed.. Yea @SBoudrias you are right, I didn't inherit processes.. ",
    "grabbou": "We basically called inquirer.prompt({}, resolve) instead of inquirer.prompt([], resolve) and that caused the callback to never be called.\n. Oh thank you! \n. ",
    "sarbbottam": "Hi @SBoudrias, does this sound feasible? If yes, I can work on a PR, with little guidance.\n. I guess the API remains the same, if optional transformer function is passed, this.rl.line is transformed before it gets added to the message.\nMay be I am over-simplifying, you could suggest better.\n. ",
    "pudgereyem": "@sarbbottam, @SBoudrias, any progress on this?\nIf not, I might look into it.. ",
    "travi": "@pudgereyem i've been meaning to make a contribution around this for a while, but have never found time to start looking into it. it would be hugely helpful to me if you end up getting it working. if any help testing it out would be helpful, i may be able to find some time for that.. @SBoudrias i know this is a pretty dated issue at this point, but i tried to take a stab as this a couple of nights ago and had some trouble figuring out how the tests are intended to run.\nhttps://github.com/SBoudrias/Inquirer.js/blob/master/test/specs/prompts/input.js looks like an appropriate place to try to test drive this behavior, but the changes that i've made there don't appear to be executed when i run npm test. am i missing something obvious, or is this file somehow excluded from the tests that are intended to run? are there any tricks or tips you could share about how to test a new feature like this?. > no magic around tests, the npm test command should have this file tests running\ni didnt think it looked like anything more than a simple config for the tests. however, even with my changes stashed, any console.logs that i add to the beforeEach or test blocks (it) dont show up in the mocha output when running npm test. if it's helpful, mocha reports 93 passing. does that number align with what you would expect if that file is being included?\ni saw the engines defininition of using node 6:\n\"engines\": {\n    \"node\": \">=6.0.0\"\n  },\nso after switching with nvm to v6 with nvm use 6, i end up on v6.9.1. thats the context i'm running npm test in. Glad to hear I'm not crazy at least. Thanks for taking a look and getting it taken care of. \nHopefully that clears the way to getting this feature knocked out. With any luck I'll get a PR to you within the week so we can finalize implementation details. . i added a test for the actual application of the transformer for the input, but i'm not familar enough with your test suite to know if that covers the functionality full in line with your normal approach. is there any additional testing that you want to be added?\nif you're good with this approach, i'm happy to follow up and add this to the docs. sure thing. if you're good with this approach, i'll try to get this added to the docs tonight. docs have been updated. let me know if you'd like any adjustments, but i think it should be good to go otherwise.. thanks for working through it with me. \nthis is a great tool and really appreciate your work on it!. updating this documentation raises a question for me about the behavior, as it has been added. \nmy intent with the transformer is to format what is shown to the user while they are typing into the Input (things like those listed in #359: change color after some # of characters, prevent typing beyond another # of characters, maybe provide an indication of the remaining characters like \"15 characters left\"). i would expect the formatting to be removed before the text was added to the Answers hash or be used elsewhere in the program. essentially i would only want the formatting to be shown while typing and removed after the input is considered answered.\nsince i don't have full context about how things are wired together, do i need to modify the implementation at all to have it behave according to those expectations? are there other examples that i missed that behave in that way and i should model the docs description from?. > As such, this function cannot be used to prevent the user from entering more than X characters. It could only be used to modify the style of the input text.\ngreat clarification. so, my understanding was mostly in line with my goal, but i hadn't considered that angle. it doesn't prevent the overall goal, but very worth clarifying. \ni'll get this description updated. ",
    "MaffooBristol": "Ah okay, thanks- I hadn't noticed the plugin API!\n. ",
    "booooh": "This is just a very slightly modified version of the recursive example provided in the repository (added a default section):\n``` javascript\n/*\n * Recursive prompt example\n * Allows user to choose when to exit prompt\n /\n'use strict';\nvar inquirer = require('inquirer');\nvar output = [];\nvar questions = [\n  {\n    type: 'input',\n    name: 'tvShow',\n    message: 'What\\'s your favorite TV show?',\n    default: function(answers) {\n      return 'The simpsons ' + output.length;\n    }\n  },\n  {\n    type: 'confirm',\n    name: 'askAgain',\n    message: 'Want to enter another TV show favorite (just hit enter for YES)?',\n    default: true\n  }\n];\nfunction ask() {\n  inquirer.prompt(questions).then(function (answers) {\n    output.push(answers.tvShow);\n    if (answers.askAgain) {\n      ask();\n    } else {\n      console.log('Your favorite TV Shows:', output.join(', '));\n    }\n  });\n}\nask();\n```\n. ",
    "Turbo87": "awesome, thanks for the quick fix!\n. ",
    "oveddan": "This changed caused a confusing error for me which I had to dig into source code to troubleshoot:\nTypeError: Cannot read property 'short' of undefined\n    at Prompt.onSubmit (/usr/local/lib/node_modules/yo/node_modules/yeoman-environment/node_modules/inquirer/lib/prompts/expand.js:164:23)\nIt would be better if there was a more descriptive error message\n. Thank you!\n. ",
    "zckrs": "Same issue. \nvalidate(input) {\n        return new Promise((resolve, reject) => {\n          console.log(input);\n          reject('Wrong choices. You should select other choice!');\n        });\n      }\nOutput:\n```\n/home/zckrs/.nvm/versions/node/v6.2.0/lib/node_modules/yo/node_modules/rx/dist/rx.js:77\n    throw e;\n    ^\nWrong choices. You should select other choice!\nproject7 git/master\n\u276f \n```\nHow can we reject user choices without stop process ?\n. Sorry for missing informations\nI edit the first prompt in examples/list.js \n```\n/*\n * List prompt example\n /\n'use strict';\nvar inquirer = require('..');\ninquirer.prompt([\n  {\n    type: 'list',\n    name: 'theme',\n    message: 'What do you want to do?',\n    choices: [\n      'Order a pizza',\n      'Make a reservation',\n      new inquirer.Separator(),\n      'Ask for opening hours',\n      {\n        name: 'Contact support',\n        disabled: 'Unavailable at this time'\n      },\n      'Talk to the receptionist'\n    ],\n    validate(input) { // <========= add validate\n      return new Promise((resolve, reject) => {\n        console.log(\\n${input});\n        reject('Wrong choices. You should select another choice!');\n      });\n    }\n  },\n  {\n    type: 'list',\n    name: 'size',\n    message: 'What size do you need?',\n    choices: ['Jumbo', 'Large', 'Standard', 'Medium', 'Small', 'Micro'],\n    filter: function (val) {\n      return val.toLowerCase();\n    }\n  }\n]).then(function (answers) {\n  console.log(JSON.stringify(answers, null, '  '));\n});\n```\nOutput\n```\nInquirer.js/examples git/master*\n\u276f node list.js\n? What do you want to do? (Use arrow keys)\n\u276f Order a pizza \n  Make a reservation \n  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  Ask for opening hours \n  - Contact support (Unavailable at this time)\n  Talk to the receptionist \nOrder a pizza\n/home/zckrs/github/Inquirer.js/node_modules/rx/dist/rx.js:77\n    throw e;\n    ^\nWrong choices. You should select other choice!\n```\nAnd process is finished.\nFor other question type like \"input\", \"checkbox\", \"password\" and \"rawlist\"  validate function works as expected\n. Maybe a error handler miss here\nhttps://github.com/SBoudrias/Inquirer.js/blob/master/lib/prompts/list.js#L69\n. > Explicitly the list prompt doesn't support validation. It present a list of choices, so there's no reason a user could select an invalid value.\nMake sense ^^'\n. ",
    "rclark": "Here's a very simplified case:\n``` js\nvar inquirer = require('inquirer');\ninquirer.prompt({\n    type: 'input',\n    name: 'data',\n    message: 'tell me:',\n    filter: function(data) {\n        var cb = this.async();\n        cb(new Error('oopsies'));\n    }\n}).then(function(answers) {\n    console.log(answers);\n}, function(err) {\n    console.log('we died! %s', err);\n});\n```\nI would expect to be able to somehow handle an error that may occur during an async validate or filter operation. Instead, we end up throwing an exception that is unrecoverable. In this script the catch function is not fired and I get a stack trace pointing to rx.js\n.../node_modules/inquirer/node_modules/rx/dist/rx.js:77\n    throw e;\n. ",
    "mh-cbon": "If that is the way you prefer to handle undefined / null / boolean / meaningless values.\nThat's all fine.\n. ",
    "jdxcode": "@hone mentioned a lot of Docker users like to use yes |, so it would be great if this worked!\n. Looks like this does work with inquirer 0.x but not 1.x with this code:\n``` js\n'use strict';\nlet inquirer = require('inquirer');\ninquirer.prompt([{\n  type: 'confirm',\n  name: 'yes',\n  message: 'Hello World?'\n}], (resp) => console.log(resp))\n```\n$ yes | node inquirer-test.js\n. ",
    "anortef": "This is very annoying when scripting to be honest.\n. ",
    "november-yankee": "I'm running into this issue as well.. ",
    "fearphage": "I cannot confirm. Master and the latest release are working flawlessly as best I can tell.\nshell\n\u279c  Inquirer.js git:(master) yes | node test-confirm.js\n? Hello World? Yes\n{ yes: true }\n\u279c  Inquirer.js git:(master) gco -q v3.0.6\n\u279c  Inquirer.js git:(6fa4610) yes | node test-confirm.js\n? Hello World? Yes\n{ yes: true }\nUpdate your version of the library?\nEDIT: I'm using the same code as above.. If this was a node bug, you should close the issue.\n. @SBoudrias I was actually talking to the ticket opener :+1: \n. ",
    "elclanrs": "I'm experiencing the same issue. yes accepts the confirm, but then it prints y forever, it doesn't actually exit the script.. ",
    "architectcodes": "Closely related: #310.\n. Tried that as well \u2013 that still leads to an instant [object Object] error message.\n. You can see that here, by the way. A Promise resolved to true should be accepted.\n``` js\n$ node greetMe.js\n? Say \u201chello\u201d: hello\n\n\n[object Object]\n```\n. Hey, thanks for looking at this! To be honest, I no longer have access to the project I used Inquirer for. It might have been fixed \u201cby accident\u201d in the meantime \u2013 or it might have been a glitch in the matrix \ud83d\ude09\n\n\nSince I can\u2019t reproduce this either, let\u2019s consider this wrapped up \ud83d\ude42\n. ",
    "deep9": "I am using https://github.com/dylang/grunt-prompt, which uses inquirer@0.11.4, and the issue is the same.\nWhen having just one prompt with pasword, it is only masked in the second line, so you can see what are you typing (password), then after pressing enter you see the line repeated, but with masked input.\nEdit: Windows 10 cmd.exe, ConEmu with PyCmd\n. ",
    "dprothero": "Same issue on Windows 10 with Powershell\n. I should say, I have both issues... first line is duplicated and if the first prompt is type password, you can see the input that is typed.\n. Awesome SBoudrias, thanks so much.\n. ",
    "nshtg": "I can confirm both issues!\n. ",
    "drewdotpro": "+1\n. ",
    "fabiorogeriosj": "+1\n. ",
    "Vasyl-Kobyletskiy": "Thank you SBoudrias for your answer.\n. ",
    "leo": "@SBoudrias Yey! Thank you.\n. ",
    "Pomax": "oh cool, will be checking that out. Also, thanks for the quick response!\n. ",
    "akatsukle": "I am not really sure what should be the behaviour here. The API is not really specific on what types are allowed for value.\nMy first commit paches getCurrentValues. If the value was faulty (ie the boolean false) then the function would return the name. \nMy second one add a verification on the field value, that will allow only Strings, Integers and Booleans.\nI think doing both is a good idea, however supporting objects should probably also be done for the second fix.\n. Yes the fix that actually distinct between false and falsy (like undefined) is actually enough for the bug.\nHowever, how should values like undefined or null be treated?\nchoices:  [{key: 'n', name: 'no, the game does not have teams', value: false}, {key: 'y', name: 'yes, the game have teams', value: undefined}] produces the same error than in #373 (TypeError: Cannot read property 'short' of undefined)\nchoices:  [{key: 'n', name: 'no, the game does not have teams', value: false}, {key: 'y', name: 'yes, the game have teams', value: null}] does not allow me to select 'y'.\nIf the decision is to forbid the usage of these values, then it should be specified in the API, and the error should be handled correctly. \nOtherwise, they should be returned correctly.\nMaybe I can treat these cases in another pull request?\nI didn't completely understood the part about the where(). Which one do you mean? In getCurrentValue?\n. Bad response:422 {\"message\":\"Couldn't find a repository matching this job.\",\"error\":true} did I broke something?\nSorry about the coverage decrease, I don't get which line does not get covered :/.\n. Thanks, awesome :+1: \n. ",
    "rohmanhm": "I agreed with @mhkeller .\nAre there any options to clear the screen after user submit an answer?. ",
    "frandiox": "Thanks for checking!\n. ",
    "marvinhuebner": "I found the solution for that. I will post the solution if anybody else runs into this.\n``` js\n{\n    type: 'input',\n    name: 'fileName',\n    message: 'Type in a filename:',\n    validate: function (value) {\n        if (value) {\n            // this functions checks if the directory already exists and return a true or false\n            check.ifDirExist(value, function(val){\n                if (val == true) {\n                    // warning for the user but don't break the process\n                    gutil.log('WARNING...');\n                }\n            });\n            // SOLUTION: Simple place the return outside from the function\n            return true;\n        }\n    return 'You need to type in a filename';\n}\n\n}\n```\n. ",
    "radiovisual": "I agree. A better way to unit test would be ideal. Writing unit tests for prompts is difficult, and providing a clear testing API would be amazing. I like many of the API suggestions by @jamestalmage.\n. ",
    "cauealvesbraz": "\ud83d\udc4d \n. ",
    "reflexdemon": "\ud83d\udc4d \n. ",
    "unclay": "\ud83d\udc4d\n. ",
    "juniperoserra": ":+1: \n. ",
    "rodleviton": "\ud83d\udc4d \n. ",
    "mymattcarroll": "\ud83d\udc4d . ",
    "evenstensberg": "Probably someone should start working on this? Being a contributor is hard in nature, so external help is gold! Hint hint!. Use Jest \ud83d\udcaf  Ref. Hi! Please check out the new examples, they're more consistent. Also, the API has changed, but the new examples should work \ud83d\udc4d \n. js\ninquirer.prompt(prompts).ui.process.subscribe(\n  function(answer) {\n  // answers go here\n  },\n  function(err) {\n  // catch errors\n  },\n  function() {\n  // on completed, this is where you could hook up additional functions.\n  // console.log(\"done!!\")\n  }\n)\n. Seems like travis is failing on env vars. Code has no issue though\n. Fixed what I could do. Is there any way to lint this with current style? Can't see any scripts in pkg.json\n. Fixed it. PR &  squash coming in shortly.\n. Ready for merge! Git skills not good enough yet to resolve conflicts without breaking the file, but working on it. Hope the PR helps you, and also great job creating this. I appreciate it. \n. Got an example of how to do this? It seems like there's only 1 way to validate questions, and that is all at once via the  inquirer.prompt(obs).then( ans => ...) promise\n. Great. Thanks for the tip. Closing this now, got enough context to proceed. \n. ",
    "simonepri": "I wrote an helper to be used inside tests, it should support all the prompt.types available.\n@SBoudrias any plan to integrate mocking tools directly inside Inquirer or should we build an external package to do it?\nExample of usage:\n```js\n'use strict';\nimport test from 'ava';\nimport inquirer from 'inquirer';\nimport mocki from './inquirer-mock-prompt.js';\n// The mock is automatically removed after the answers are returned.\ntest('work should be false', async t => {\n  mocki({\n    work: false\n  });\n  const answers = await inquirer.prompt({\n    type: 'confirm',\n    name: 'work',\n    default: true\n  });\n  t.is(answers.work, false); // => true\n});\n// You can even mock multiple times\ntest('work should be false', async t => {\n  mocki({\n    work: false\n  });\n  mocki({\n    text: 'cool'\n  });\nlet answers1 = await inquirer.prompt({\n    type: 'confirm',\n    name: 'work',\n    default: true\n  });\n  t.is(answers.work, false); // => true\n  answers = await inquirer.prompt({\n    type: 'input',\n    name: 'text',\n  });\n  t.is(answers.text, 'cool'); // => true\n});\n```\nContent of inquirer-mock-prompt.js\n```js\n/ eslint-disable no-await-in-loop /\n'use strict';\nconst inquirer = require('inquirer');\nconst isNumber = i => typeof i === 'number';\nconst isFunction = i => typeof i === 'function';\nconst isUndefined = i => typeof i === 'undefined';\n/*\n * @param  {Object} prompt\n * @param  {Object} answers\n * @param  {string} input\n * @return {Promise.}\n /\nasync function promptHandler(prompt, answers, input) {\n  if (prompt.when === false) {\n    return;\n  }\n  if (isFunction(prompt.when) && !await prompt.when(answers)) {\n    return;\n  }\n  if (isFunction(prompt.message)) {\n    // Just for coverage\n    prompt.message(answers);\n  }\n  if (isFunction(prompt.transformer)) {\n    // Just for coverage\n    prompt.message(input);\n  }\nlet answer = input;\n  if (isUndefined(answer)) {\n    if (isFunction(prompt.default)) {\n      answer = await prompt.default(answers);\n    } else {\n      answer = prompt.default;\n    }\n    if (isNumber(answer) && prompt.type in ['list', 'rawlist', 'expand']) {\n      if (isFunction(prompt.choiches)) {\n        answer = await prompt.choiches(answers)[answer];\n      } else {\n        answer = prompt.choiches[answer];\n      }\n    }\n  }\nif (isUndefined(answer)) {\n    switch (prompt.type) {\n      case 'expand':\n        answer = {\n          key: 'h',\n          name: 'Help, list all options',\n          value: 'help',\n        };\n        break;\n      case 'checkbox':\n        answer = [];\n        break;\n      case 'confirm':\n        answer = false;\n        break;\n      default:\n        if (Array.isArray(prompt.choiches)) {\n          [answer] = prompt.choiches;\n        } else if (isFunction(prompt.choiches)) {\n          [answer] = await prompt.choiches(answers);\n        } else {\n          answer = '';\n        }\n    }\n  }\nif (isFunction(prompt.filter)) {\n    answer = await prompt.filter(answer);\n  }\n  if (isFunction(prompt.validate)) {\n    const valid = await prompt.validate(answer, answers);\n    if (valid !== true) {\n      throw new Error(valid);\n    }\n  }\n  return answer;\n}\n/\n * @param  {Object} inputs\n * @return {Function}\n */\nfunction inquirerHandler(inputs) {\n  /\n   * @param  {Object} prompts\n   * @return {Promise.}\n   /\n  return async prompts => {\n    const answers = {};\n    for (const prompt of [].concat(prompts)) {\n      answers[prompt.name] = await promptHandler(\n        prompt,\n        answers,\n        inputs[prompt.name]\n      );\n    }\n    return answers;\n  };\n}\n/\n * @param  {Object|Object[]} inputs\n /\nfunction mock(inputs) {\n  if (typeof inputs !== 'object') {\n    throw new TypeError('The mocked answers must be an objects.');\n  }\nconst promptOriginal = inquirer.prompt;\n  const promptMock = async function(questions) {\n    try {\n      const answers = await inquirerHandler(inputs)(questions);\n      inquirer.prompt = promptOriginal;\n      return Promise.resolve(answers);\n    } catch (err) {\n      inquirer.prompt = promptOriginal;\n      return Promise.reject(err);\n    }\n  };\n  promptMock.prompts = inquirer.prompt.prompts;\n  promptMock.registerPrompt = inquirer.prompt.registerPrompt;\n  promptMock.restoreDefaultPrompts = inquirer.prompt.restoreDefaultPrompts;\n  inquirer.prompt = promptMock;\n}\nmodule.exports = mock;\n```. As you can see, I've tried to re-implement the way how inquirer threat the prompts object.\ndefaults -> filter -> validate\nThis seems really a lot of unnecessary effort on our side.\nAlso because maybe my implementation is just wrong.\nNo way to export the methods that inquirer uses internally to handle the answers after the input has been read from stdin?\nThis would make everything simpler.. ",
    "alexlee-dev": "@simonepri, @SBoudrias Has there been any update or development on this? Running into this issue on a project of mine now. I'd be happy to provide support along the way.. ",
    "Shreyas-vgr": "Is there a way to write unit test cases for such cases?\nI don't know how to verify the validate: (value) branch?\nI'm using sinon.js fyi\ninquirer.prompt([{\n    message : 'test',\n   type : 'input',\n  validate : (value) => {\n      if(value === null) return 'Error';\n     if( value.length == 3) return 'Error';\n    return true;\n  }\n}]).then(result) ......... ",
    "pvdlg": "How would suggest recommend to test code that use the reactive interface to dynamically add questions?\nFor example how would you test this example that asks for a confirmation and make a backend call based on previous answers:\n```js\nconst inquirer = require('inquirer');\nconst {Subject} = require('rxjs');\nasync function checkOnServer({quantity}) {\n  return quantity <= 20;\n}\nconst quantity = {\n  type: 'input',\n  name: 'quantity',\n  message: 'How many do you need?',\n  filter: Number\n};\nconst confirm = {\n  type: 'confirm',\n  name: 'confirm',\n  message: 'That\\'s a lot, are you sure? A server verification will be performed.'\n};\nvar prompts = new Subject();\nconst prompt = inquirer.prompt(prompts);\nconst answers = {};\nprompt.ui.process.subscribe(async ({name, answer}) => {\n  Object.assign(answers, {[name]: answer});\n  if (name === 'quantity' && answer >= 10) {\n    return prompts.next(confirm);\n  } else if (name === 'confirm' && !answer) {\n    return prompts.complete();\n  } else if (name === 'confirm' && answer) {\n    answers.valid = await checkOnServer(answers);\n    return prompts.complete();\n  } else {\n    return prompts.complete();\n  }\n},\n() => {},\n() => {\n  if (answers.confirm === false) {\n    console.log('No quantity selected');\n  } else if (answers.valid === false) {\n    console.log('Server authorization failed');\n  } else {\n    console.log(Quantity: ${answers.quantity});\n  }\n});\nprompts.next(quantity);\n```\nThanks for your help!. Should a way to write unit tests for apps build with Inquirer be aded in the refactoring? See #379 for a proposed API. \nNot being able to test your code is a blocker for me and prevent me to use Inquirer (I had to switch to prompts that offer the inject method but there is many Inquirer features that I miss). The issue #379 is also the most thumbed up in the issue tracker, so I imagine I'm not the only one in that situation.\nEven if a complex API like the one described in #379 is out of this refactoring scope, that would be great if at a minimum:\n- We had a simple function to inject answers in unit test. Inquirer would just skip prompting the user and would use each answer injected. It would still trigger the onEachAnswer, onError and onComplete callbacks.\n- We had access to function/state that would ultimately allow to develop a test module with the API described in #379.. ",
    "souravray": "I am facing the same issue. When I add a buttomBar to a list, then pressing arrow button duplicates the first two lines (including the header text).\n``. Thanks SBoudrias, but couldn't find any documentation on creating a custom prompt.\nDo you think there is any existing custom prompt that I can refer to?. @christav I figure out that the original prompts are reference for writing your own prompt.\nhttps://github.com/SBoudrias/Inquirer.js/tree/master/lib/prompts\nYou can use the custom prompt in your code just by registering the prompt\n```\nvar inquirer = require('inquirer');\nvar timeoutPrompt = require('./prompts/my-shiny-new-timeout-prompt')\ninquirer.registerPrompt('timeout',  timeoutPrompt );\nvar pmt = inquirer.prompt([{\n    type: 'timeout',\n    name: 'url',\n    message: ' some random message',\n    choices: choices,\n    input: stdin,\n}]).then(function (answers) {\n    console.log (answers.name + \" was selected\")\n});\n``\n. yes on submit is getting called. I am re-render the sceen in onSubmit, and that logic is working fine.. I printed a console.error in the base class and it looks likesresolve(value)` is also get called.. Looks like some peculiar JS issue. This code is working fine -\nvar pmt = inquirer.prompt([{\n    type: 'mypromt',\n    name: 'xxx',\n    message: ' some random message',\n    choices: choices,\n    input: stdin,\n}]);\npmt.then(function (answers) {\n    // My custom call back method (it'st getting called)\n}). The culprit is this logic in utils/paginator.js\njavascript\n  var lines = output.split('\\n');\n // Move the pointer only when the user go down and limit it to 3\n  if (this.pointer < 3 && this.lastIndex < active && active - this.lastIndex < 9) {\n    this.pointer = Math.min(3, this.pointer + active - this.lastIndex);\n  }\nThis is an issue not just in case when you put hard line break in your choices text. If you have choices text too larger than cli width (default is 80 i guess), then this problem occurs during text wrapping.\nInfact text wrapping cause much more comlicated issues like lionger than viewport text. becaus the text wrapping is called in the render method, and pagination is been calculated in before that.\nFor my custom prompt I handel these issue by using a custom implementation of paginator.js and using a pre-formator (also I need to do some indentation fixes in multiline lists) to format the choices text before calling pagination function.. @SBoudrias I am not sure about if it is the best way to solve the issue, that's why I was refrained from doing PR. \nIt is kinda brute force  logic, I am doing the line calculating the position of the last visible line by simply calculating the line number till the last line of selected section (after wrapping the text) and passed that number to pagination function, if the number is not undefined then the pagination function bypass all pagination logic by doing \njavascript\n var topIndex =  Math.max(0, lastVisibleLine - pageSize);. ",
    "TimothyGu": "But the point is that there's a default for this specific member, and the documentation says that it is the \"default value(s) to use if nothing is entered.\" If when is false, indeed nothing is entered, and I was surprised to find that the default is not used.\n. ",
    "Robinfr": "I also ran into this and find it confusing that it doesn't take the default when when is false.. ",
    "bastuijnman": "That's true, haven't thought about that one yet. Thanks!\n. ",
    "evil-shrike": "\nExplicitly the list prompt doesn't support validation.\n\nit make sense indeed but why not? If there're several lists I'd better show user all options but in case an incompatible combination I'll tell why it can't be used. \nPlease add support for filter for list prompts.\nOr at least update docs to say it's not supported.. >You could just make sure that choices done previously automatically eliminates choices from the list(s) later in the prompt that are now incompatible. That's better UX. \nSometimes it can be helpful to show an option but say why it cannot be use.\n\nUse reactive interface\n\nI'm using Inquirer via Yeoman, not sure it's possible.. ",
    "danielo515": "I'm also on a situation where I want to make use of validation on list. Maybe I just want to give an option to early abort the process, and providing a list of choices where one of them breaks the flow will save a potential user a lot of typing. I'm also see the same advantage on confirmation, which does not support validation neither. \nBasically inquirer should provide ways to abort a set of prompts for any kind of question.\nRegards. ",
    "sergeysova": "@SBoudrias thank you!\n. ",
    "lichenhao": "Thx~~ \n. ",
    "tishma": "Sry. You're right. I've missed the point I'm trying to make. The issue doesn't belong to github, but I guess that was the only place where I could get in touch. Simply reading the page at https://www.npmjs.com/package/inquirer doesn't suggest one should do anything else but npm install...\n\n. Btw, here's my hack: \ninquirer.prompt.prompts.password.prototype.getQuestion = function () {\n    var message = chalk.green('?') + ' ' + chalk.bold(this.opt.message) + ' ';\n    // Append the default if available, and if question isn't answered\n    if (this.opt.default != null && this.status !== 'answered') {\n        message += chalk.dim('(*******) ');\n    }\n    return message;\n};\n. Thanks @SBoudrias ,\nGood point is to mention in the question message that pressing Enter will keep the old password.\nAnd nobody said it's a 'people password' ;) For example, I've never seen a DB config file that uses anything but plain text password (or equivalent which might be somewhat obscure and more painful to manage, but never more secure) in order to be able to establish a connection.\nBest\nv.\n. so, are you suggesting not to use console.log, and use resolve('error message') instead? whatever gets messed up, I don't think it's too much to ask that a message remains on screen.\n. ",
    "gentunian": "I've tried to run examples this way:\nnpm install -g inquirer\ngit clone https://github.com/SBoudrias/Inquirer.js\ncd Inquirer.js\nnode examples/pizza.js\nresults in:\n```\n$ node examples/pizza.js \nmodule.js:327\n    throw err;\n    ^\nError: Cannot find module 'external-editor'\n    at Function.Module._resolveFilename (module.js:325:15)\n    at Function.Module._load (module.js:276:25)\n    at Module.require (module.js:353:17)\n    at require (internal/module.js:12:17)\n    at Object. (/home/seba/code/node/Inquirer.js/lib/prompts/editor.js:7:22)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n    at Module.require (module.js:353:17)\n```\nDo we need an extra package to test examples? I'm using inquirer in code and works well. Only examples are not working.\n. After a fast code lookup I found that would be possible to create a new method in bottom-bar.js like this one:\njavascript\nPrompt.prototype.destroy = function() {\n    this.onForceClose();\n}\nonForceClose() is defined in the base UI here: https://github.com/SBoudrias/Inquirer.js/blob/master/lib/ui/baseUI.js#L30\nWhat do you think?\nEDIT: or maybe just emitting the event that onForceClose() is waiting for:\njavascript\nPrompt.prototype.destroy = function() {\n  this.rl.emit('SIGINT');\n}\n. I'm reading more code as I'm writing this.\nIt seems that the functionality is already there. The baseUI has 2 methods that could be used for that purpose and they are inherited by the Prompt object (that would be our ui):\n1. ui.onForceClose()\n2. ui.close()\n(1) is a method named for receiving events, so a good practice would be to not call on*() method manually. But it just works...\n(2) is called by onForceClose(). The only difference is that calling the latter directly won't send a newline to our shell.\nIf good practice is a go, we could write a destroy() method that emits the signal that invokes onForceClose(). Anyway, the functionality is already there and I didn't find it until I read the code to find its solution :)\n. Hey @SBoudrias :)\nI was reading your code and trying to hack it. I was only reading the parts of interests and this hack seems to work only for suffixes because prompt is based on length:\n```javascript\n--- a/lib/prompts/input.js\n+++ b/lib/prompts/input.js\n@@ -55,7 +55,7 @@ class InputPrompt extends Base {\n       bottomContent = chalk.red('>> ') + error;\n     }\n\nthis.screen.render(message, bottomContent);\n\nthis.screen.render(message, bottomContent, this.getQuestion() + this.rl.line);\n   }\n--- a/lib/utils/screen-manager.js\n+++ b/lib/utils/screen-manager.js\n@@ -22,7 +22,7 @@ class ScreenManager {\n     this.rl = rl;\n   }\n\n\nrender(content, bottomContent) {\n\nrender(content, bottomContent, changedPrompt) {\n     this.rl.output.unmute();\n     this.clean(this.extraLinesUnderPrompt);\n\n@@ -30,7 +30,7 @@ class ScreenManager {\n      * Write message to screen and setPrompt to control backspace\n      */\n\nvar promptLine = lastLine(content);\nvar promptLine = changedPrompt? changedPrompt: lastLine(content);\n     var rawPromptLine = stripAnsi(promptLine);\n\n```\nI will give it another review for working in most cases.\nSample test:\n```javascript\nvar inquirer = require('inquirer');\ninquirer.prompt([{\n  name: 'suffix',\n  type: 'input',\n  message: 'suffix:',\n  transformer: function (a, b) {\n    return ${a}.suffix\n  }\n}, {\n  name: 'middle',\n  type: 'input',\n  message: 'middle:',\n  transformer: function (a, b) {\n    return test==>${a}<==my-input\n  }\n}, {\n  name: 'prefix',\n  type: 'input',\n  message: 'prefix:',\n  transformer: function (a, b) {\n    return prefix==>${a}\n  }\n}]);\n```. After giving this a little thought and understanding of the code, this seems unlikely to be implemented.\nMy impressions are that this feature should be implemented on the transformation as it's the only point where the user takes control of the readline output buffer. The transformation function basically sticks in the middle so it seems there's no way to know where the user is typing just because the user can transform the output as the way he/she may like.\nFrom the above, it follows that the transformation (if exists) should inform where the user want the cursor to be positioned. This is possible to do, but not elegant, this is my example:\n\nFor achieving that behaviour, the transform function should provide the prompt information. As I said, not elegant at all:\n```javascript\nvar inquirer = require('inquirer');\ninquirer.prompt([{\n  name: 'suffix',\n  type: 'input',\n  message: 'suffix:',\n  transformer: function (a, b) {\n    return ${a}.mydomain.com\n  }\n}, {\n  name: 'middle',\n  type: 'input',\n  message: 'middle:',\n  transformer: function (a, b) {\n    return {\n      text: test==>${a}<==my-input,\n      caret: test==>\n    }\n  }\n}, {\n  name: 'prefix',\n  type: 'input',\n  message: 'prefix:',\n  transformer: function (a, b) {\n    return {\n      text: test==>${a},\n      caret: test==>\n    }\n  }\n}, {\n  name: 'complex',\n  type: 'input',\n  message: 'complex:',\n  transformer: function (a, b) {\n    return {\n      text: ${a} <--> ${a},\n      caret: ${a} <-->\n    }\n  }\n}]);\n```\nFor this to work, the inquirer.js library needs this patch:\n```javascript\ndiff --git a/lib/prompts/input.js b/lib/prompts/input.js\nindex 4fd765e..da77b38 100644\n--- a/lib/prompts/input.js\n+++ b/lib/prompts/input.js\n@@ -42,11 +42,20 @@ class InputPrompt extends Base {\n     var bottomContent = '';\n     var message = this.getQuestion();\n     var transformer = this.opt.transformer;\n+    var caretOffset = '';\n if (this.status === 'answered') {\n   message += chalk.cyan(this.answer);\n } else if (transformer) {\n\n\nmessage += transformer(this.rl.line, this.answers);\nvar transform = transformer(this.rl.line, this.answers);\nif (typeof transform === 'string') {\nmessage += transform;\n} else if (transform.caret && transform.text) {\nmessage += transform.text;\ncaretOffset = transform.caret;\n} else {\n+\n\n}\n     } else {\n       message += this.rl.line;\n     }\n@@ -55,7 +64,7 @@ class InputPrompt extends Base {\n       bottomContent = chalk.red('>> ') + error;\n     }\n\n\nthis.screen.render(message, bottomContent);\n\nthis.screen.render(message, bottomContent, this.getQuestion() + caretOffset);\n   }\n\n/**\ndiff --git a/lib/utils/screen-manager.js b/lib/utils/screen-manager.js\nindex f19126e..d33257a 100644\n--- a/lib/utils/screen-manager.js\n+++ b/lib/utils/screen-manager.js\n@@ -22,7 +22,7 @@ class ScreenManager {\n     this.rl = rl;\n   }\n\nrender(content, bottomContent) {\nrender(content, bottomContent, changedPrompt) {\n     this.rl.output.unmute();\n     this.clean(this.extraLinesUnderPrompt);\n\n@@ -30,17 +30,13 @@ class ScreenManager {\n      * Write message to screen and setPrompt to control backspace\n      */\n\nvar promptLine = lastLine(content);\n\nvar promptLine = changedPrompt? changedPrompt: lastLine(content);\n     var rawPromptLine = stripAnsi(promptLine);\n// Remove the rl.line from our prompt. We can't rely on the content of\n // rl.line (mainly because of the password prompt), so just rely on it's\n // length.\n-    var prompt = rawPromptLine;\n-    if (this.rl.line.length) {\n-      prompt = prompt.slice(0, -this.rl.line.length);\n-    }\n-    this.rl.setPrompt(prompt);\n+    this.rl.setPrompt(rawPromptLine);\n// SetPrompt will change cursor position, now we can get correct value\n var cursorPos = this.rl._getCursorPos();\n```\n\n\nlib/prompts/input.js was quickly and dirty modified to test the functionality and show the idea. Those if statements are a bad idea.\n. Nice tip. I found a solution for that :)\nI've chosen a custom string for specifying the caret. Not sure how could I reach the inquirer namespace inside input.js without including inquirer.js.\nIt could be placed in a custom file just like constants.js or something like that. So client code will use inquirer.CARET and library code will use internally that file.. @SBoudrias this is the commit, can you take a look? :)\nEDIT: I'm testing this thing out, but the main idea is not so bad.\nHere are the results:\n\nI've detected only one minor issue when not specifying the cursor position. The cursor will be 1 character to the left than where it should be.\nSample code:\n```\nvar inquirer = require('inquirer');\ninquirer.prompt([{\n  name: 'suffix',\n  type: 'input',\n  message: 'suffix transform:',\n  transformer: function (a, b) {\n    return ${a}${inquirer.CARET}.mydomain.com\n  }\n}, {\n  name: 'middle',\n  type: 'input',\n  message: 'in the middle CARET:',\n  transformer: function (a, b) {\n    return optional---> ${a}${inquirer.CARET} <---optional;\n  }\n}, {\n  name: 'prefix',\n  type: 'input',\n  message: 'prefix transform:',\n  transformer: function (a, b) {\n    return append-me: ${a}${inquirer.CARET};\n  }\n}, {\n  name: 'complex',\n  type: 'input',\n  message: 'complex and mixed:',\n  transformer: function (a, b) {\n    return ${a} <--> ${a}${inquirer.CARET};\n  }\n}, {\n  name: 'nocaret',\n  type: 'input',\n  message: 'transformer without CARET:',\n  transformer: function (a, b) {\n    return ${a} ----NO CARET ----;\n  }\n}, {\n  name: 'normal',\n  type: 'input',\n  message: 'this is normal:'\n}]);\n``. @twang-rs Sounds good but you will need to refactor more code if you plan to apply this logic intoscreen.render`. I think the solution should maintain the current interface and methods. \nThat is, in order to maintain the interfaces you should process this tuple before calling screen.render.. it would be nice to check why the code is failing:\nCodacy/PR Quality Review \u2014 Not up to standards. \n. @SBoudrias up to standards? \"Strings must use doublequote. (quotes)\"\nI'm used to write angular apps and my linting always says that I should use single quotes (').\nIt's ok for me to use double quotes for this repo if it's your will.\n. @SBoudrias I'm committing with --amend just to maintain the commit message. Just let me know if you are ok with it :)\n@thetutlage great! check the PR and give us feedback of what you think :+1: . @SBoudrias are we ok to merge this PR? . @SBoudrias it's fixed with an if statement. For some reason, seems that github can't show the commits pushed with --force, but you can see the files here: https://github.com/SBoudrias/Inquirer.js/pull/671/files\nAnd the change in discussion: https://github.com/SBoudrias/Inquirer.js/pull/671/files#diff-a44f44aa53608f57cbfbd206ad281c3d. @SBoudrias anything I could help for this to be merged?. hi @SBoudrias can you guide me on how could be merge this change? :). good to know, not sure if I completely understand the issue with multiple versions.. yes, the minor issue I found was what you mentioned. I didn't want to add IF statement for solving as it's a bug that could be ignored and I prefer code styling over solving it. But your solution using Math.min() is clever enough to maintain the code legibility.. reviewing this it won't work with Math.min() just because min(0, -1) = -1. I'm working on a solution for it.. @SBoudrias it won't work with Math.max() either because \"foo-bar\".slice(0, 0) will strip the whole string. The only way it would work is with a function like this:\njavascript\nmessage.slice(0, \n  ImaginaryPackage.positive(\n    message.indexOf(constants.CARET), message.length)\n)\nThat is, a function that will return the lesser positive number of 2 numbers :). ",
    "chrisroselli": "Alright makes sense, sorry. I actually figured it out from another closed Issue, ironically.   \"Improve title for checkbox like list #384\" \n. When user answers \"Yes\" to Do you want to add primary colors? , the question is displayed in the command line, the user provides an answer, and EJS enters that answer into the template with <%- primaryBrightColor %>. When the user answers \"No\" that question is skipped, as desired, but automatically returns a value of undefined causing an error when EJS runs <%- primaryBrightColor %> because there is no value for EJS to input into <%- primaryBrightColor %>. Unless I'm missing something, there doesn't seem to be a way to add a default value of maybe an empty string when false is chosen as a value for when:?\ngulp.task('default', function (done) {\n      var prompts = [\n        {\n           name: 'colorOption',\n           message: 'Do you want to add primary colors?',\n           type: 'list',\n           choices: ['Yes', 'No']\n        }, {\n           name: 'primaryBrightColor',\n           message: 'Paste primary bright color (ex. #XXXXXX)',\n           when: function(answers){\n             return answers.colorOption === 'Yes';\n           }\n        },\n. ",
    "olso": "Publish to npm please \ud83d\udc4d @SBoudrias \n. ",
    "Starli0n": "I found a walkaround by setting the NODE_PATH environment variable to make it possible.\nhttp://stackoverflow.com/a/15646750\n. ",
    "dguettler": "@SBoudrias I'd like to ask you to reconsider. Yes it does add additional dependencies, however it reduces number of files, disk space and install time.\n@stefanpenner might have some more details on this.\nBased on some naive testing I get the following results\n```\nWith PR applied\ntime npm install --production\nreal    0m4.390s\nuser    0m2.084s\nsys 0m0.688s\n781 node_modules\n25  lib\n24  test\n14  examples\n4   assets\n1   package.json\n1   gulpfile.js\n1   README.md\n1   LICENSE-MIT\n0   coverage\nSize: 10 MB\nWithout PR applied\ntime npm install --production\nreal    0m8.518s\nuser    0m2.289s\nsys 0m0.863s\n1739    node_modules\n25  lib\n24  test\n14  examples\n4   assets\n1   package.json\n1   gulpfile.js\n1   README.md\n1   LICENSE-MIT\n0   coverage\nSize: 14 MB\n```\n. ",
    "aydn": "Those events never triggers in prompt mode. I want to return back to prev. menu or cancel a step with this keys.\n```\n'use strict';\nprocess.on('SIGINT', () => console.log('bye!'));\nconst inquirer = require('inquirer');\ninquirer.prompt({\n  type: 'input',\n  name: 'test',\n  message: 'hit CTRL + C to test SIGINT in prompt mode'\n});\n```\n. ",
    "cqcwillard": "You can pass your own event listener like @SBoudrias suggested.  I ended up doing this in my app since I needed synchronous behavior.\n```\n  let stdin = process.stdin;\n  stdin.on(\"data\", (key) => {\n      if (key == \"\\u0003\") {\n          LOG(\"catching ctrl+c\");\n      }\n  });\ninquirer.prompt(questions, {input: stdin});\n```. ",
    "superonduper": "this is the code, it fails with \"TypeError: choices.forEach is not a function\" and I have checked the array, it's as it's supposed to be.\n```\nvar questions = [\n  {\n    type: 'list',\n    name: 'nics',\n    message: 'Please select a NIC',\n    choices: function () {\n      return new Promise(function (resolve, reject) {\n        getnics(function (result) {\n          var arr = \n          resolve(arr)\n        })\n      })\n    },\n    filter: ''\n  }\n]\ninquirer.prompt(questions).then(function (answers) {\n    console.log(JSON.stringify(answers, null, '  '))\n})\n```\n. ok, nevermind.\n. ",
    "colophonemes": "Having similar issues\n. I think I've solved my issue \u2014 the issue seems to happen when running Inquirer in a child process (e.g. via Supervisor). Running the script standalone is fine\n. ",
    "jordan-simonovski": "I think I've worked it out. I had written some stuff using callbacks. Switched to promises and it's working perfectly fine! :D \n. ",
    "aaronbrowder": "Checkbox doesn't work for me either, as described by @renan-quirino. I'm on Windows 10.\n. ",
    "acburdine": "This is odd as well because the default inquirer.prompt is itself a created prompt module.....\n. Figured out the issue, fix incoming.\n. ",
    "ericuldall": "Cool. Thank you.\n. ",
    "wwhurley": "So it turns out that the code I was reviewing set the default value to the label of the option not the value of the option. So this particular case was simple developer error. Though it does leave open the fact that the developer needs to verify that the default value exists within the choices otherwise you get an exception. That's a different problem from what I described, but I think the hard error is somewhat problematic.\n. ",
    "eephillip": "Just found in v3.3.0\n```\nreadline.js:981\n            throw err;\n            ^\nTypeError: Cannot read property 'value' of undefined\n```\nWill see if I can mitigate with a default value per @wwhurley \n. ",
    "dddom": "This is not exactly relevant but perhaps it could be a part of a wider improvement to handle null and undefined's for better dev experience, which could be separated out into an individual issue.\nI think it's not unreasonable for the Choices object to handle false, null, undefined within the array, in a reasonable way.\nHow I'd like to use it (made up):\nconst choices = [\n    { key: 's', name: \"Skip\", value: 'skip' },\n    condition ? { key: 'c', name: 'Continue', value: 'continue' } : null, // <- this\n    { key: 's', name: \"Stop\", value: 'stop' }\n]\nError call stack (trimmed):\nTypeError: Cannot read property 'type' of null\n    at Choices.choices.choices.map.val (<project>/node_modules/inquirer/lib/objects/choices.js:17:15)\n    at Array.map (<anonymous>)\n    at new Choices (<project>/node_modules/inquirer/lib/objects/choices.js:16:28)\n    ...\nCurrently I push to the choices array, and if I want it to appear in a specific location I'd need to reconstruct the array somehow, meh.\nUnless there's a different approach of how to do this within Inquirer.\nThanks \ud83d\ude42 . ",
    "guigrpa": "My example above was very contrived. In our application, we periodically sent a UDP packet, and the packet doesn't get sent as long as the external editor is open.\n. Works like a charm, thanks!\n. And thanks to @mrkmg as well!\n. Maybe I'm wrong, but I believe the failed test has nothing to do with my additions.\n. We have an app in production that would greatly benefit from this:\n- It uses the list prompt to present the user with several nested menus. The user can go down the menu hierarchy by choosing a menu option, and up by choosing the \"Back\" option. Pressing ESC would be a faster way, since some menus are quite long.\n- For some menu options, it requests several answers from the user, some of them via the list prompt. Cancelling via the ESC key would also be great.\nIn none of these cases ctrl-c is useful, since we don't want to exit the app.\n. @SBoudrias Any chance this might land? Would you need any additional info?\n. I've noticed that this approach works on Windows but not on Linux machines, given how Linux treats ESCAPE sequences. Furthermore, I've developed a new extension for our particular needs (a nested tree of menus based on the List prompt) that allows shortcuts to be associated with list choices (F5, backspace, etc.).\nFor both reasons, I'm closing this PR. Please tell me if you're interested in a new PR adding shortcut support to the List prompt (simple shortcuts only for the time being, i.e. no modifier keys, but more complex shortcuts could be added afterwards).\n. ",
    "razzlero": "I just did some testing and I can replicate it on my system. So I'll share what I found. It's happening for me in git bash, windows cmd, and cygwin all on windows 10. I haven't tried it on any other OS yet.\nThe problem seems to be with the calling of the onKeypress function in password.js. I put a console.log statement into it to test when it's being called, it seems to trigger only after you press enter. It then triggers once for every character in the string.\nHere's en example of what happens when I put a \"Debug statement inside\" the onKeypress Fucntion\n$ node password.js\n? Enter your git password test\nDebug statement\n? Enter your git password *Debug statement\n? Enter your git password **Debug statement\n? Enter your git password ***Debug statement\n? Enter your git password ****\n{\n  \"password\": \"test\"\n}\nonKeyPress is beign called on line 52 of password.js by\nevents.keypress.takeUntil(validation.success).forEach(this.onKeypress.bind(this));\nSo something funny is happening with that.\n. I just updated node to v6.7.0 and that fixed it for me at least.\n. ",
    "carreath": "Oh sorry,  I have been able to fix the problem on the password.js file itself but yeoman didn't change. I have the same node version that was described as working earlier. However I have the same error.\nI am pretty sure it is a problem with the yeoman generator and it is going to take me a while to figure out how it works on Windows. And if worst comes to worst I can just replicate the prompt in the bash file I call directly after prompting for password.\nIf I am able to fix the bug in the future and it is inquirer I will come back and update.\nThanks for the help though!\n. I wasn\u2019t able to fix this issue as I believed it was just caused by an incorrect installation of inquirer. I also thought it may have been git bash giving issues on text replace with the password mask.. ",
    "lmh2072005": "I have the same problem, how is the progress about this question ?  My Inquirer version is 3.3.0 (Git Bash Win7) @carreath . ",
    "cckelly": "@SBoudrias sorry for rehashing an old issue but is it determined that this is a Git Bash issue and not an inquirer issue? I'm on inquirer 6.0.0. Confirmed that cmd.exe works.. @SBoudrias cool no problem, thanks!. ",
    "starpit": "hi, thanks for the quick feedback on my pull request!\nwe could go a number of ways here. i wanted to support prefixMessage: '', which javascript, in its glory, evaluates to a non-truthy condition. this is why i added the hasOwnProperty.\n. howdy, no worries. we do have a release coming up soon, but i can always point to my fork, for now.\nthis is a good suggestion, to make \"?\" a global preference. however, as far i can tell, each prompt impl has no reference back to the enclosing PromptModule (which would seem to be the natural home for a global preference).\nwe could change promptModule.registerPrompt so that it calls prompt.globalOptions = opt, and then prompts/base.js could have this._opt = _.defaults(_.clone(question), globalOptions, { ... defaults ... }\n. ok yeah, that more or less would work. we'd have to update ui/prompt.js to preserve this.opt = opt, and update prompts/base.js to accept a globalOptions fourth parameter...\n. ",
    "tandrewnichols": "Is there a way to opt out of this? In my case, the names of the questions are generated dynamically based on filenames, so I end up with answers something like:\n{\n  'foo/bar/baz' {\n    js: true\n  }\n}\nI don't actually object to the feature. It's pretty cool really. But it would be nice if there were a way to turn it off or otherwise say \"don't do it this time.\". That could be one way to do it, although I feel like my use case is the more edgy edge case. I could see wanting to have it work the other way most of the time. I think filenames are not going to be that common, so I'm willing to use whatever workaround you come up with. Right now, as a workaround, I'm replacing \".\" with \"|\" when generating the questions and then in the callback, mapping the answers back to \".\" (which isn't great, but it does work).. ",
    "dickeylth": "Need it as well.\n. ",
    "Ridermansb": "@SBoudrias I know how promise works.\nMy question is about handle callback with Inquirer.\nInquirer return to terminal after promise are resolved. But in my case , I execute another code with callback, that are called but the terminal not show anything because already receive return code from Imquirer.\nSee my code , after Imquirer promise are resolved, I call callFn function with callback.\nCallback is never called.\n. ",
    "tdmalone": "Thanks for the reply. I should've mentioned - it does support colour in other contexts (eg. git logs are coloured), but there seems to be an issue with chalk detecting that it supports colour so therefore chalk doesn't output colour (not being aware of the specifics behind it all I'm not sure whether this impacts you or not!)\n. I found a related issue for chalk: https://github.com/chalk/supports-color/issues/36. They eventually decided it's a wontfix, as I understand it they just couldn't reliably detect if it was a TTY or not.\n. Thanks @Grigory90! That most definitely fixes the colour issue. The double questions with Inquirer still remain, though:\n\n. ",
    "grig0ry": "@tdmalone set FORCE_COLOR property to TRUE (Properties of the system -> Additionally -> Environment variables)\n. @tdmalone Yes, double questions, this is problem :(\n. ",
    "kevinzliao": "Not sure if this is directly related, but in addition to the double questions, it doesn't seem like password inputs are hidden on MINGW64:\n\n. ",
    "nickolasclarke": "I am seeing the same thing with an extremely simple use case. However, I'm rather noob, so perhaps I'm missing something here.  I nearly commented on #410 , but found this to be more accurate. Not only am I getting ReferenceError for non-numbers, it is also exiting on completion, even if I just give it numbers. \n```javascript\n\"use strict\"\nvar inquirer = require('inquirer');\nvar prompt = inquirer.createPromptModule();\nvar promptQuestions = [{\n  type: 'input',\n  name: 'do_api_token',\n  message: 'Digital Ocean token:'\n}, {\n  type: 'input',\n  name: 'ssh_key_location',\n  message: 'Path of SSH key used to connect to Streisand droplet:'\n}]\nfunction getSessionInfo() {\n  prompt(promptQuestions).then(answers => {\n    console.log(answers);\n})\n}\n```\nreturn with values that I would actually want for my questions:\n``` \n getSessionInfo()\n? Digital Ocean token: undefined\n? Digital Ocean token: bb4543f0e\nReferenceError: bb4543f0e is not defined\n    at repl:1:1\n    at sigintHandlersWrap (vm.js:22:35)\n    at sigintHandlersWrap (vm.js:96:12)\n    at ContextifyScript.Script.runInThisContext (vm.js:21:12)\n    at REPLServer.defaultEval (repl.js:313:29)\n    at bound (domain.js:280:14)\n    at REPLServer.runBound [as eval] (domain.js:293:12)\n    at REPLServer. (repl.js:513:10)\n    at emitOne (events.js:101:20)\n    at REPLServer.emit (events.js:188:7)\n? Digital Ocean token: bb4543f0e\n? Path of SSH key used to connect to Streisand droplet: ~/.ssh/priv_key\n~/.ssh/priv_key\n ^\nSyntaxError: Invalid regular expression flags\n? Path of SSH key used to connect to Streisand droplet: ~/.ssh/priv_key\n{ do_api_token: 'bb4543f0e',\n  ssh_key_location: '~/.ssh/priv_key' }\n```\nanother run, this time just spamming with something.\ngetSessionInfo()\n? Digital Ocean token: undefined\n? Digital Ocean token: 123\n123\n? Digital Ocean token: 123\n? Path of SSH key used to connect to Streisand droplet: hi\nReferenceError: hi is not defined\n    at repl:1:1\n    at sigintHandlersWrap (vm.js:22:35)\n    at sigintHandlersWrap (vm.js:96:12)\n    at ContextifyScript.Script.runInThisContext (vm.js:21:12)\n    at REPLServer.defaultEval (repl.js:313:29)\n    at bound (domain.js:280:14)\n    at REPLServer.runBound [as eval] (domain.js:293:12)\n    at REPLServer.<anonymous> (repl.js:513:10)\n    at emitOne (events.js:101:20)\n    at REPLServer.emit (events.js:188:7)\n? Path of SSH key used to connect to Streisand droplet: hi\n{ do_api_token: '123', ssh_key_location: 'hi' }\nlastly, running with only numbers. Returns successfully, but still exits. adding a .catch() after the .then() block returns the same. \ngetSessionInfo()\n? Digital Ocean token: undefined\n? Digital Ocean token: 123\n123\n? Digital Ocean token: 123\n? Path of SSH key used to connect to Streisand droplet: 1232\n1232\n? Path of SSH key used to connect to Streisand droplet: 1232\n{ do_api_token: '123', ssh_key_location: '1232' }\nWindows 10 (but running node under Bash on Windows. Havent tried on native node yet)\nnode: v6.9.1\ninquirer@1.2.3. ",
    "nerdybeast": "I eventually figured this out, thanks for the follow up @SBoudrias!. ",
    "cbuteau": "Yeah that is similar to the strategy I came with.\nIt just didn't feel that clean because I was calling back into the initial app pointer.\nThanks for responding.\n. Thats fine this issue can serve as the documentation I asked for.\n. ",
    "thejohnbackes": "is this something that was fixed in a previous version? I just realized that Plop.js is using Inquirer@0.12.0\n. ",
    "ldeluca": "looks like the code has some logic for \"pageSize || 7\".  Seems like it could be an option that developers could specify.  What is the reasoning behind them not being able to? wouldn't they still be able to scroll up and down if it's not in view?  or is it more of a concern about the help \"move up and down\" not being displayed if it's off the terminal height?\n. That's my question. What are/were your ux/ui issues? Just the arrow interaction help comment in gray? Or is there something else as well?\n. pageSize doesn't affect anything for me @diegohaz ... maybe it only works on Windows?  I'm running on a mac.  My pageSize value is set to 10 and it only shows 7 options before asking me to use the arrow keys.. \nHere's my code:\ninquirer.prompt([{\n    type: \"list\",\n    name: \"template\",\n    message: welcomePromptMsg,\n    pageSize: 10,\n    choices: WELCOMEOPTIONS\n  }], function( answers ) {. Thanks @SBoudrias, odd that the callback function still works with version 1.2.3 of inquirer. But I was working off of an older version. Changed the code to use .then and now I see the pagesize properly. Thank you!.\n",
    "diegohaz": "Does not it work? (I'm currently using this pageSize to control the height of a checkbox)\njs\n{\n      type: 'list',\n      pageSize: 9,\n}. I'm on Mac. Maybe Yeoman has something to do with it?\n\n. I think we should work on this. inquirer-path doesn't work with inquirer's last versions (not even v1).\ninquirer-directory works, but it's not a \"tab completion\".. ",
    "ORESoftware": "nevermind, it says to use the spacebar to select checkbox items!\nIs there a way to select checkbox items with a keyboard key besides the spacebar?\n. Ok cool. I am going to file another issue.\n. I tried inquirer-directory, seems to have a bug, will try inquirer-path\n. I'd recommend that you adopt inquirer-directory and make that core to your lib, plugins have always been dumb, they never work\n. nevermind, I am just using the API wrong :)\n. there is a way to do this, I had to go through the code, it is like this, where alias is \"name\" and the actual value that gets passed back is value.\njs\n choices: [\n    {\n      value: './node_modules/.bin/suman',\n      name: 'Locally installed ($ ./node_modules/.bin/suman foo bar baz)',\n    },\n    {\n      value: 'suman',\n      name: 'Globally installed ($ suman foo bar baz)',\n    }\n  ],\n. this seems like a common need, should this be in the docs / readme?\n. yeah, a code sample would help there, though\n. Oh, I see, filter is running for the whole answer, I thought that filter function was being called for each item in the choices array. Makes sense that it takes the whole answer, because filter works for other types besides checkbox. Sorry, false alarm!\n. Yeah could be, thanks\n. nevermind, I sort of figured it out\n. So I think that Vorpal is using a very old version of Inquirer\nI looked into the node_modules dir, this is the package.json file for Inquirer\njs\n{\n  \"_args\": [\n    [\n      {\n        \"raw\": \"inquirer@0.11.0\",\n        \"scope\": null,\n        \"escapedName\": \"inquirer\",\n        \"name\": \"inquirer\",\n        \"rawSpec\": \"0.11.0\",\n        \"spec\": \"0.11.0\",\n        \"type\": \"version\"\n      },\n      \"/Users/alexamil/WebstormProjects/oresoftware/sumanjs/suman-d/node_modules/vorpal\"\n    ]\n  ],\n  \"_from\": \"inquirer@0.11.0\",\n  \"_id\": \"inquirer@0.11.0\",\n  \"_inCache\": true,\n  \"_location\": \"/inquirer\",\n  \"_nodeVersion\": \"0.12.7\",\n  \"_npmUser\": {\n    \"name\": \"sboudrias\",\n    \"email\": \"admin@simonboudrias.com\"\n  },\n  \"_npmVersion\": \"2.14.2\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"raw\": \"inquirer@0.11.0\",\n    \"scope\": null,\n    \"escapedName\": \"inquirer\",\n    \"name\": \"inquirer\",\n    \"rawSpec\": \"0.11.0\",\n    \"spec\": \"0.11.0\",\n    \"type\": \"version\"\n  },\n  \"_requiredBy\": [\n    \"/vorpal\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/inquirer/-/inquirer-0.11.0.tgz\",\n  \"_shasum\": \"7448bfa924092af311d47173bbab990cae2bb027\",\n  \"_shrinkwrap\": null,\n  \"_spec\": \"inquirer@0.11.0\",\n  \"_where\": \"/Users/alexamil/WebstormProjects/oresoftware/sumanjs/suman-d/node_modules/vorpal\",\n  \"author\": {\n    \"name\": \"Simon Boudrias\",\n    \"email\": \"admin@simonboudrias.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/SBoudrias/Inquirer.js/issues\"\n  },\n  \"dependencies\": {\n    \"ansi-escapes\": \"^1.1.0\",\n    \"ansi-regex\": \"^2.0.0\",\n    \"chalk\": \"^1.0.0\",\n    \"cli-cursor\": \"^1.0.1\",\n    \"cli-width\": \"^1.0.1\",\n    \"figures\": \"^1.3.5\",\n    \"lodash\": \"^3.3.1\",\n    \"readline2\": \"^1.0.1\",\n    \"run-async\": \"^0.1.0\",\n    \"rx-lite\": \"^3.1.2\",\n    \"strip-ansi\": \"^3.0.0\",\n    \"through\": \"^2.3.6\"\n  },\n  \"description\": \"A collection of common interactive command line user interfaces.\",\n  \"devDependencies\": {\n    \"chai\": \"^3.0.0\",\n    \"cmdify\": \"^0.0.4\",\n    \"grunt\": \"^0.4.1\",\n    \"grunt-cli\": \"^0.1.8\",\n    \"grunt-contrib-jshint\": \"^0.11.1\",\n    \"grunt-mocha-test\": \"^0.12.7\",\n    \"mocha\": \"^2.2.1\",\n    \"mockery\": \"^1.4.0\",\n    \"sinon\": \"^1.12.1\"\n  },\n  \"directories\": {},\n  \"dist\": {\n    \"shasum\": \"7448bfa924092af311d47173bbab990cae2bb027\",\n    \"tarball\": \"https://registry.npmjs.org/inquirer/-/inquirer-0.11.0.tgz\"\n  },\n  \"files\": [\n    \"lib\"\n  ],\n  \"gitHead\": \"8a7a538d365a15a9ba9a97e464a487a7d2410dc4\",\n  \"homepage\": \"https://github.com/SBoudrias/Inquirer.js#readme\",\n  \"keywords\": [\n    \"command\",\n    \"prompt\",\n    \"stdin\",\n    \"cli\",\n    \"tty\",\n    \"menu\"\n  ],\n  \"license\": \"MIT\",\n  \"main\": \"lib/inquirer.js\",\n  \"maintainers\": [\n    {\n      \"name\": \"sboudrias\",\n      \"email\": \"admin@simonboudrias.com\"\n    }\n  ],\n  \"name\": \"inquirer\",\n  \"optionalDependencies\": {},\n  \"readme\": \"Inquirer.js\\n===========\\n\\n[![npm](https://badge.fury.io/js/inquirer.svg)](http://badge.fury.io/js/inquirer) [![tests](https://travis-ci.org/SBoudrias/Inquirer.js.svg?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js) [![dependencies](https://david-dm.org/SBoudrias/Inquirer.js.svg?theme=shields.io)](https://david-dm.org/SBoudrias/Inquirer.js)\\n\\nA collection of common interactive command line user interfaces.\\n\\n\\n## Goal and Philosophy\\n\\n<img align=\\\"right\\\" alt=\\\"Inquirer Logo\\\" src=\\\"/assets/inquirer_readme.png\\\" title=\\\"Inquirer.js\\\"/>\\n\\n**`Inquirer.js`** strives to be an easily embeddable and beautiful command line interface for [Node.js](https://nodejs.org/) (and perhaps the \\\"CLI [Xanadu](https://en.wikipedia.org/wiki/Xanadu_(Citizen_Kane))\\\").\\n\\n**`Inquirer.js`** should ease the process of\\n- providing *error feedback*\\n- *asking questions*\\n- *parsing* input\\n- *validating* answers\\n- managing *hierarchical prompts*\\n\\n> **Note:** **`Inquirer.js`** provides the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js).\\n\\n\\n## Documentation\\n\\n### Installation\\n\\n shell\\nnpm install inquirer\\n\\n\\njavascript\\nvar inquirer = require(\\\"inquirer\\\");\\ninquirer.prompt([/ Pass your questions in here /], function( answers ) {\\n\\t// Use user feedback for... whatever!!\\n});\\n\\n\\n\\n### Examples (Run it and see it)\\nCheckout the `examples/` folder for code and interface examples.\\n\\n shell\\nnode examples/pizza.js\\nnode examples/checkbox.js\\n# etc...\\n\\n\\n\\n### Methods\\n\\n`inquirer.prompt( questions, callback )`\\n\\nLaunch the prompt interface (inquiry session)\\n\\n- **questions** (Array) containing [Question Object](#question) (using the [reactive interface](#reactive-interface), you can also pass a `Rx.Observable` instance)\\n- **callback** (Function) first parameter is the [Answers Object](#answers)\\n\\n\\n### Objects\\n\\n#### Question\\nA question object is a `hash` containing question related values:\\n\\n- **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\\n`list`, `rawlist`, `password`\\n- **name**: (String) The name to use when storing the answer in the answers hash.\\n- **message**: (String|Function) The question to print. If defined as a function, the first parameter will be the current inquirer session answers.\\n- **default**: (String|Number|Array|Function) Default value(s) to use if nothing is entered, or a function that returns the default value(s). If defined as a function, the first parameter will be the current inquirer session answers.\\n- **choices**: (Array|Function) Choices array or a function returning a choices array. If defined as a function, the first parameter will be the current inquirer session answers.  \\nArray values can be simple `strings`, or `objects` containing a `name` (to display in list), a `value` (to save in the answers hash) and a `short` (to display after selection) properties. The choices array can also contain [a `Separator`](#separator).\\n- **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\\n- **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\\n- **when**: (Function, Boolean) Receive the current user answers hash and should return `true` or `false` depending on whether or not this question should be asked. The value can also be a simple boolean.\\n\\n`default`, `choices`(if defined as functions), `validate`, `filter` and `when` functions can be called asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\\n\\n javascript\\n{\\n  validate: function(input) {\\n\\n    // Declare function as asynchronous, and save the done callback\\n    var done = this.async();\\n\\n    // Do async stuff\\n    setTimeout(function() {\\n      if (typeof input !== \\\"number\\\") {\\n        // Pass the return value in the done callback\\n        done(\\\"You need to provide a number\\\");\\n        return;\\n      }\\n      // Pass the return value in the done callback\\n      done(true);\\n    }, 3000);\\n  }\\n}\\n\\n\\n### Answers\\nA key/value hash containing the client answers in each prompt.\\n\\n- **Key** The `name` property of the _question_ object\\n- **Value** (Depends on the prompt)\\n  - `confirm`: (Boolean)\\n  - `input` : User input (filtered if `filter` is defined) (String)\\n  - `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\\n\\n### Separator\\nA separator can be added to any `choices` array:\\n\\n\\n// In the question object\\nchoices: [ \\\"Choice A\\\", new inquirer.Separator(), \\\"choice B\\\" ]\\n\\n// Which'll be displayed this way\\n[?] What do you want to do?\\n > Order a pizza\\n   Make a reservation\\n   --------\\n   Ask opening hours\\n   Talk to the receptionist\\n\\n\\nThe constructor takes a facultative `String` value that'll be use as the separator. If omitted, the separator will be `--------`.\\n\\nSeparator instances have a property `type` equal to `separator`. This should allow tools fa\u00e7ading Inquirer interface from detecting separator types in lists.\\n\\nPrompts type\\n---------------------\\n\\n> **Note:**: _allowed options written inside square brackets (`[]`) are optional. Others are required._\\n\\n#### List - `{ type: \\\"list\\\" }`\\n\\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\\ndefault must be the choice `index` in the array or a choice `value`)\\n\\n![List prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/list-prompt.png)\\n\\n---\\n\\n#### Raw List - `{ type: \\\"rawlist\\\" }`\\n\\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\\ndefault must the choice `index` in the array)\\n\\n![Raw list prompt](https://i.cloudup.com/LcRGpXI0CX-3000x3000.png)\\n\\n---\\n\\n#### Expand - `{ type: \\\"expand\\\" }`\\n\\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\\ndefault must be the choice `index` in the array)\\n\\nNote that the `choices` object will take an extra parameter called `key` for the `expand` prompt. This parameter must be a single (lowercased) character. The `h` option is added by the prompt and shouldn't be defined by the user.\\n\\nSee `examples/expand.js` for a running example.\\n\\n![Expand prompt closed](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-1.png)\\n![Expand prompt expanded](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-2.png)\\n\\n---\\n\\n#### Checkbox - `{ type: \\\"checkbox\\\" }`\\n\\nTake `type`, `name`, `message`, `choices`[, `filter`, `validate`, `default`] properties. `default` is expected to be an Array of the checked choices value.\\n\\nChoices marked as `{ checked: true }` will be checked by default.\\n\\nChoices whose property `disabled` is truthy will be unselectable. If `disabled` is a string, then the string will be outputted next to the disabled choice, otherwise it'll default to `\\\"Disabled\\\"`. The `disabled` property can also be a synchronous function receiving the current answers as argument and returning a boolean or a string.\\n\\n![Checkbox prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/checkbox-prompt.png)\\n\\n---\\n\\n#### Confirm - `{ type: \\\"confirm\\\" }`\\n\\nTake `type`, `name`, `message`[, `default`] properties. `default` is expected to be a boolean if used.\\n\\n![Confirm prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/confirm-prompt.png)\\n\\n---\\n\\n#### Input - `{ type: \\\"input\\\" }`\\n\\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\\n\\n![Input prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/input-prompt.png)\\n\\n---\\n\\n#### Password - `{ type: \\\"password\\\" }`\\n\\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\\n\\n![Password prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/password-prompt.png)\\n\\n## User Interfaces and layouts\\n\\nAlong with the prompts, Inquirer offers some basic text UI.\\n\\n#### Bottom Bar - `inquirer.ui.BottomBar`\\n\\nThis UI present a fixed text at the bottom of a free text zone. This is useful to keep a message to the bottom of the screen while outputting command outputs on the higher section.\\n\\njavascript\\nvar ui = new inquirer.ui.BottomBar();\\n\\n// pipe a Stream to the log zone\\noutputStream.pipe( ui.log );\\n\\n// Or simply write output\\nui.log.write(\\\"something just happened.\\\");\\nui.log.write(\\\"Almost over, standby!\\\");\\n\\n// During processing, update the bottom bar content to display a loader\\n// or output a progress bar, etc\\nui.updateBottomBar(\\\"new bottom bar content\\\");\\n\\n\\n#### Prompt - `inquirer.ui.Prompt`\\n\\nThis is UI layout used to run prompt. This layout is returned by `inquirer.prompt` and you should probably always use `inquirer.prompt` to interface with this UI.\\n\\n\\n## Reactive interface\\n\\nInternally, Inquirer uses the [JS reactive extension](https://github.com/Reactive-Extensions/RxJS) to handle events and async flows.\\n\\nThis mean you can take advantage of this feature to provide more advanced flows. For example, you can dynamically add questions to be asked:\\n\\njs\\nvar prompts = Rx.Observable.create(function( obs ) {\\n  obs.onNext({ / question... / });\\n  setTimeout(function () {\\n    obs.onNext({ / question... / });\\n    obs.onCompleted();\\n  });\\n});\\n\\ninquirer.prompt(prompts);\\n\\n\\nAnd using the `process` property, you have access to more fine grained callbacks:\\n\\njs\\ninquirer.prompt(prompts).process.subscribe(\\n  onEachAnswer,\\n  onError,\\n  onComplete\\n);\\n``\\n\\n## Support (OS Terminals)\\n\\nYou should expect mostly good support for the CLI below. This does not mean we won't\\nlook at issues found on other command line - feel free to report any!\\n\\n- **Mac OS**:\\n  - Terminal.app\\n  - iTerm\\n- **Windows**:\\n  - cmd.exe\\n  - Powershell\\n  - Cygwin\\n- **Ubuntu**:\\n  - Terminal\\n\\n\\n## News on the march (Release notes)\\n\\nPlease refer to the [Github releases section for the changelog](https://github.com/SBoudrias/Inquirer.js/releases)\\n\\n\\n## Contributing\\n\\n**Style Guide**  \\nPlease brief yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \\n\\n**Unit test**  \\nUnit test are written in [Mocha](http://visionmedia.github.io/mocha/). Please add a unit test for every new feature or bug fix.npm testto run the test suite.  \\n\\n**Documentation**  \\nAdd documentation for every API change. Feel free to send corrections\\nor better docs!  \\n\\n**Pull Requests**  \\nSend _fixes_ PR on themasterbranch. Any new features should be send on thewip`branch.\\n\\nWe're looking to offer good support for multiple prompts and environments. If you want to\\nhelp, we'd like to keep a list of testers for each terminal/OS so we can contact you and\\nget feedback before release. Let us know if you want to be added to the list (just tweet\\nto @vaxilart) or just add your name to the wiki\\n\\n## License\\n\\nCopyright (c) 2012 Simon Boudrias (twitter: @vaxilart)  \\nLicensed under the MIT license.\\n\",\n  \"readmeFilename\": \"README.md\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/SBoudrias/Inquirer.js.git\"\n  },\n  \"scripts\": {\n    \"test\": \"grunt --verbose\"\n  },\n  \"version\": \"0.11.0\"\n}\n```. ",
    "moqmar": "I have the exact same issue, but it doesn't even require two editors - the problem occurs always if the editor is not the last question:\njavascript\nrequire(\"inquirer\").prompt([\n    { type: \"editor\", name: \"test1\", message: \"Enter some text:\" },\n    { type: \"input\", name: \"test2\", message: \"Something else:\" }\n]).then(answers => console.log(answers))\n\n. Argh, I can't even commit messages... Hope that's still fine :stuck_out_tongue:\n. ",
    "0x62": "That would require all subsequent prompts (of which there are quite a few) to check that the users array isn't zero-length, which is a bit messy. \n. ",
    "sidharthv96": "It is not possible to cancel List input either using Ctrl + C or Esc. ",
    "laggingreflex": "No problem, appreciate the feedback. I did actually anticipate this might not go well with the existing code the more I began to grasp it. I'll see if I can come up with something better. \nCould you expand on this:\n\noutside of Inquirer, you set a listener for the escape key\n\nFirstly, other than the \"outside\" aspect of it, was the onEscapeKey function at least close to the listener that you wanted? The user still could've done anything in there, even throw an error to abort the whole inquiry. I imagined more could've been done with this in it but I didn't explore much.\nOr I'm guessing you don't want anything exposed that lets you use this of Inquirer? \nWhat would be the ideal thing that could be provided to the user to set a listener for the escape key? readline module? \nI haven't checked out the RX api in detail yet, but it seems to be an important wrapper around readline.. ",
    "whitecolor": "@SBoudrias It is not exactly clear how to correctly implement it with rl.on('keypress\nI tried to insert before prompt which could be canceled and return to main menu made:\njs\n    const rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout\n    })\n    rl.on('keypress', () => {\n      showInitialMenu()\n    });\nBut it doesn't seem to work. Can you elaborate?. Yeah I know it thanks.. js\nvar prompt = inquirer.prompt(...);\nprompt.ui.close();. ",
    "c0bra": "@whitecolor this worked for me:\n```javascript\nconst readline = require('readline');\nreadline.emitKeypressEvents(process.stdin);\nconst ui = new inquirer.ui.BottomBar();\n...\nprocess.stdin.on('keypress', (ch, key) => {\n    if (key && key.name === 'escape') {\n        ui.close();\n    }\n});\n```\n. ",
    "wtgtybhertgeghgtwtg": "\nI don't see the benefit of auto-updating such trivial modules..\n\nEven if you use Greenkeeper, it is extremely easy to let dependencies get stale, and makes deduping very difficult.. > You're just giving trust and control to the dependency owners (which is only as truthworthy as the least trustworthy among them)\nYou're already trusting them by using their package.  And it is in their best interest to make sure that non-major releases do not break.  If they do, you can raise an issue and work with them to fix it.  It's a mutually beneficial relationship.. Coverage drops because a line is removed.. This'd totally be breaking, but how about removing the Question object and have people pass in a function that can be created by a function?\n// Not this\ninquirer.prompt([{message: 'Enter your password.', type: 'password'}]);\n// This\ninquirer.prompt([passwordQuestion({message: 'Enter your password.'})]);\nPrompts would no longer have to be registered, meaning that all of the built-in prompts would not have to be require'd at initialization.  This might also make custom stuff a little easier, since there's no registration anymore.. ",
    "jondubois": "I guess it depends on preference. Personally I prefer to have stale dependencies and update them only when needed than to run the risk of an arbitrary sub-module owner sneaking in malicious or unwanted code into my module.\nIt's always safer to trust 1 person you know than 100 people you don't know.\nWhat if a dependency module owner decides to add a patch which is good for 95% of all projects that depend on it, but YOUR project just happens to be in the 5% where it's not suitable (in fact it actually breaks your project).\nYou're just giving trust and control to the dependency owners (which is only as truthworthy as the least trustworthy among them) and making it so that every user who installs your module ends up with different permutations of dependency versions (often making issues within your own module difficult to reproduce).\nAnd as demonstrated by the left-pad drama, relationships/trust between people does tend to disintegrate over time.. @wtgtybhertgeghgtwtg I trusted the code itself (as it was at a specific point in time); I don't necessarily trust all of the sub-project owners on an ongoing basis (especially since there are a lot of them involved). This is mostly an issue when it comes to code auditing.\nI just raised this issue because some companies are really strict regarding dependencies.\nIt's low priority. Just something to think about. Feel free to close, anyone.\n@wtgtybhertgeghgtwtg thanks for your feedback in any case - I'm still trying to decide how to approach that other dependency issue you raised in SC - I think having a separate CLI module as you recommended might be the best solution - There are a few issues I have to think about before doing this though.. ",
    "ThomWright": "Thank you :smile: . ",
    "sebilasse": "@stefanbuck You can have a look at https://github.com/KamiKillertO/inquirer-select-directory for an example regarding https://github.com/SBoudrias/Inquirer.js#inquirerregisterpromptname-prompt .... ",
    "stefanbuck": "I'll check out your repo. Thanks for sharing..  I didn't have time to take a closer look. Will do it over christmas and comment here in case this is not what I want to do \ud83d\ude09 . ",
    "greenkeeper[bot]": "Version 2.0.1 just got published.\nUpdate to this version instead \ud83d\ude80 \n. After pinning to 4.17.3 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 2.1.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits .\n\n5a40333 2.1.0\n76d8f62 Only write the escapes when the stream is TTY\n\nSee the full diff.\n\n. ## Version 4.3.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits .\n\ne878086 4.3.0\n9cedf6e Increase the max buffer\n\nSee the full diff.\n\n. ## Version 4.3.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 5 commits0.\n\n67b1e3e 4.3.1\n315275f Rewrite tests to use AVA\n4ac3c98 Cleanup\n9ddcbd0 Convert objects to key value lists. Closes #167 (#171)\n55004ca Fix require option for multiple entries (#173)\n\nfalse\nSee the full diff\n\n. ## Version 2.3.4 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nMake sandbox.resetHistory also reset spies\n\nFix #1372: make sandbox.resetHistory also reset spies (#1424)\n\n\n\nCommits\nThe new version differs by 5 commits.\n\n72ae300 Update docs/changelog.md and set new release id in docs/_config.yml\n769d770 Add release documentation for v2.3.4\nc8d2ec0 2.3.4\nd27976a Update Changelog.txt and AUTHORS for new release\n330101a Fix #1372: make sandbox.resetHistory also reset spies (#1424)\n\nSee the full diff\n\n. ## Version 2.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits.\n\n5827081 2.0.1\ncaeb7d8 fix missing TERM cases\n\nSee the full diff\n\n. ## Version 3.1.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 15 commits.\n\n1e33b74 Update docs/changelog.md and set new release id in docs/_config.yml\n3e0fe34 Add release documentation for v3.1.0\n24207cd 3.1.0\n94e262d Update Changelog.txt and AUTHORS for new release\naf6348c Merge pull request #1519 from fatso83/sandbox-wrong-config-passed\nf8b4ea1 Update sandbox docs\n127aafc Add missing docs on sandbox config change\ncacd10d Fix relative links\n1f2d2e3 Merge pull request #1515 from sinonjs/create-factory-functions\n75ad693 Merge pull request #1516 from fatso83/1512-sandbox-stub-props-on-prototype\nb4a3f42 Fix regression on sandbox.stub(obj,protoMethod)\nece1ee5 Add regression test case\n6648f1b Use new sandbox and fake server factory functions in documentation\n4c2aa41 Add factory functions for sandbox and fake server\nec74e94 Add support for passing a function to stub.throws(...). (#1511)\n\nSee the full diff\n\n. ## Version 3.2.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nAdd stub#resolvesThis\n\nFix #1521 by caching references to Array.prototype.filter (#1523)\nFix #1368 by adding stub#resolvesThis (#1517)\n\n\n\nCommits\nThe new version differs by 15 commits.\n\nf1d6e75 Update docs/changelog.md and set new release id in docs/_config.yml\nf6374e8 Add release documentation for v3.2.0\n1b81ec6 3.2.0\naea2654 Update Changelog.txt and AUTHORS for new release\n81c23fb Merge pull request #1523 from fatso83/1521-stub-array-filter-fails\n052a2d0 Add requirements to pull request template\n56ca580 Cache other references to Array.prototype.filter\n531f872 Cache reference to filter in stubbing calls\n3df68a7 fixes issue #1368 by adding stub#resolvesThis (#1517)\n6689cab Merge pull request #1522 from sinonjs/centered-readme-header-with-logo\nbe66ebb Fix \"npm based CDNs\" link\nb005f1d Contered header with logo in readme\n996d502 Merge pull request #1520 from fatso83/jsdelivr\nb376dcf Add hints on using CDNs in docs and README\n3ad5e05 Add props for default file in CDN delivery\n\nSee the full diff\n\n. ## Version 4.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv4.0.1\n4.0.1 / 2017-10-05\n\ud83d\udc1b Fixes\n\n#3051: Upgrade Growl to v1.10.3 to fix its peer dep problems (@dpogue)\n\n\n\nCommits\nThe new version differs by 6 commits.\n\neb8bf8d Release v4.0.1\n3b485ea update CHANGELOG.md for v4.0.1 [ci skip]\n96e5c1a upgrade eslint to v4.8.0\nd7cff37 Update growl to 1.10.3\n0cdd921 remove preversion script; test on publish; closes #2999\nf49c0ce Fix changelog issues/pr URLs (#3047)\n\nSee the full diff\n\n. ## Version 0.20.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits.\n\n3b4da3a 0.20.1\n4bd7813 Remove the function-paren-newline rule\n\nSee the full diff\n\n. ## Version 5.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 182 commits ahead by 182, behind by 30.\n\nac71bfd Fix invalid documentation for fake.yields, fake.yieldsAsync\nbeb4c6b Add release documentation for v5.0.1\nd707712 Update docs/changelog.md and set new release id in docs/_config.yml\nbb062a3 5.0.1\n5d885b2 Update History.md and AUTHORS for new release\nc794709 Add documentation for fake().callback and fake().lastArg\nd5cd20f Add .lastArg and .callback to fake and call\n01cbe61 Allow replacing non-own object properties (#1705)\n7e2f05a Change yields semantics to match stub behaviour\ncf99c5a Add a failing test for #1695\n88e6e5f Remove deprecated spy.reset method\nf133b6a Docs: add migration guide for v5\nf29f918 Add replace methods\nafec7b2 Extract isPropertyConfigurable to own file\n738638d Extract nextTick to own file\n\nThere are 182 commits in total.\nSee the full diff\n\n. ## Version 0.24.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits.\n\n41d0292 0.24.1\n892d392 Temporarily disable the require-unicode-regexp rule\n\nSee the full diff\n\n. ## Version 0.24.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits.\n\nca8e043 0.24.2\n20daf6d Don't enforce destructuring on object assignment\n\nSee the full diff\n\n. ## Version 0.25.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 4 commits.\n\nc748ad5 0.25.0\n9d5f1cd Add require-await rule\n1257597 Remove the no-use-before-define rule\nea693f3 Prevent using template literals when not needed\n\nSee the full diff\n\n. ## Version 3.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.0.1\nBug Fixes\n\npublish: Allow unpublished packages to pass access verification (3a7348c)\n\n\n\nCommits\nThe new version differs by 2 commits.\n\nbf530b8 chore(release): publish v3.0.1\n3a7348c fix(publish): Allow unpublished packages to pass access verification\n\nSee the full diff\n\n. ## Version 3.0.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.0.2\nBug Fixes\n\nconventional-commits: Pass --tag-version-prefix to changelog utilities (8ed7d83)\nconventional-commits: Provide fallback bump when releaseType is missing (e330f6f), closes #1551\nexec: Allow config files to override defaults (2335149)\npublish: Add default for --tag-version-prefix (f159442)\npublish: Allow disabling of registry and package verification (0bfdff5), closes #1552\nrun: Allow config files to override defaults (f15b6fb)\nversion: Allow config files to override defaults (bb1cfb5)\nversion: Positional bump supersedes --conventional-commits when choosing version (a74c866)\n\n\n\nCommits\nThe new version differs by 9 commits.\n\n784d64e chore(release): publish v3.0.2\ne330f6f fix(conventional-commits): Provide fallback bump when releaseType is missing\na74c866 fix(version): Positional bump supersedes --conventional-commits when choosing version\n8ed7d83 fix(conventional-commits): Pass --tag-version-prefix to changelog utilities\n0bfdff5 fix(publish): Allow disabling of registry and package verification\nf159442 fix(publish): Add default for --tag-version-prefix\nbb1cfb5 fix(version): Allow config files to override defaults\nf15b6fb fix(run): Allow config files to override defaults\n2335149 fix(exec): Allow config files to override defaults\n\nSee the full diff\n\n. ## Version 3.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits.\n\nb905d39 eslint-config-prettier v3.0.1\ne0bee25 Clarify eslint --print-config usage\n\nSee the full diff\n\n. - The devDependency husky was updated from 0.14.3 to 1.0.1.\nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 12 commits.\n\n998339e Lint\nfd5379c 1.0.1\n3c3b60d Update CHANGELOG.md\nff64d7e Update README.md\nd6c3acb Merge branch 'master' of https://github.com/typicode/husky\n9b1ed8f Update CHANGELOG.md\n1aac5c3 husky-upgrade: don't create husky config if no hooks exist (#359)\n14e4c45 Update README.md\nee39cf9 husky-upgrade replace GIT_PARAMS with HUSKY_GIT_PARAMS (#360)\n201221e Update README.md (#361)\n5926ac6 upgrader: Add trailing newline to package.json (#362)\n582b6b6 Fix link in CHANGELOG.md (#357)\n\nSee the full diff\n\n. - The devDependency lint-staged was updated from 7.3.0 to 8.0.1.\nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes for v8.0.1\n8.0.1 (2018-10-29)\nBug Fixes\n\ngit: Use resolveGitDir to resolve to .git for git commands (#518) (da42f8a), closes #514\n\n\n\nCommits\nThe new version differs by 2 commits.\n\nda42f8a fix(git): Use resolveGitDir to resolve to .git for git commands (#518)\n592486f docs: Update readme to include info about partially staged files support\n\nSee the full diff\n\n. - The devDependency lint-staged was updated from 7.3.0 to 8.0.2.\nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes for v8.0.2\n8.0.2 (2018-10-29)\nBug Fixes\n\ngit: Use resolveGitDir in hasPartiallyStagedFiles (#520) (af99172), closes #514\n\n\n\nCommits\nThe new version differs by 1 commits.\n\naf99172 fix(git): Use resolveGitDir in hasPartiallyStagedFiles (#520)\n\nSee the full diff\n\n. - The devDependency lint-staged was updated from 7.3.0 to 8.0.3.\nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes for v8.0.3\n8.0.3 (2018-10-30)\nBug Fixes\n\nAllow to use lint-staged on CI (#523) (225a904)\n\n\n\nCommits\nThe new version differs by 1 commits.\n\n225a904 fix: Allow to use lint-staged on CI (#523)\n\nSee the full diff\n\n. - The devDependency lint-staged was updated from 7.3.0 to 8.0.4.\nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes for v8.0.4\n8.0.4 (2018-10-31)\nBug Fixes\n\npackage: update staged-git-files to version 1.1.2 (ce434d3)\n\n\n\nCommits\nThe new version differs by 6 commits.\n\n5e165a3 Merge pull request #513 from okonet/greenkeeper/staged-git-files-1.1.2\n07fd087 Merge branch 'master' into greenkeeper/staged-git-files-1.1.2\n00047de docs: fix typo (#527)\nbedba5a refactor: Use object spread (#524)\nc4e8a2d chore(package): update lockfile yarn.lock\nce434d3 fix(package): update staged-git-files to version 1.1.2\n\nSee the full diff\n\n. After pinning to 1.14.3 your tests are passing again. Downgrade this dependency \ud83d\udccc.. - The devDependency prettier was updated from 1.15.0 to 1.15.1.\nYour tests are still failing with this version. Compare changes\n\nRelease Notes for 1.15.1\n\ud83d\udd17 Changelog\n\n. - The devDependency regenerator-runtime was updated from 0.12.1 to 0.13.1.\nUpdate to this version instead \ud83d\ude80. After pinning to 1.2.1 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. - The devDependency husky was updated from 1.3.0 to 1.3.1.\nYour tests are still failing with this version. Compare changes\n\nCommits\nThe new version differs by 6 commits.\n\n566699c 1.3.1\n45252e0 Update CHANGELOG.md\n88bfce4 Update DOCS.md\n942df81 Disable enable stdin if terminal\n0f038a5 Update CHANGELOG.md\n35b6b0d Upgrade is-ci dependency (#427)\n\nSee the full diff\n\n. After pinning to 3.6.0 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. - The devDependency lerna was updated from 3.7.0 to 3.7.1.\nYour tests are still failing with this version. Compare changes\n\nRelease Notes for v3.7.1\nBug Fixes\n\nbootstrap: Pulse progress bar during execution (b38a151)\nclean: Pulse progress bar during execution (f1202de)\ncommand: Enable progress from top-level log object (95e88f0)\nimport: Pulse progress bar during execution (b552e22)\nnpm-dist-tag: Accept opts.log, defaulting to libnpm/log (97edc7e)\nnpm-publish: Accept opts.log, defaulting to libnpm/log (a1d61f6)\npack-directory: Accept opts.log, defaulting to libnpm/log (d099d13)\npublish: Do not pass this.logger into conf, it does not respect log.level (9bcd503)\npublish: Pulse progress bar during execution (49b8771)\nAdd @lerna/pulse-till-done utility (3359c63)\nrun-lifecycle: Accept opts.log, defaulting to libnpm/log (dde588a)\nrun-lifecycle: Do not execute on packages that lack the target script, avoiding spurious logs (c0ad316)\n\n\n\nCommits\nThe new version differs by 13 commits.\n\n284aa47 chore(release): publish v3.7.1\n9bcd503 fix(publish): Do not pass this.logger into conf, it does not respect log.level\nc0ad316 fix(run-lifecycle): Do not execute on packages that lack the target script, avoiding spurious logs\ndde588a fix(run-lifecycle): Accept opts.log, defaulting to libnpm/log\na1d61f6 fix(npm-publish): Accept opts.log, defaulting to libnpm/log\n97edc7e fix(npm-dist-tag): Accept opts.log, defaulting to libnpm/log\nd099d13 fix(pack-directory): Accept opts.log, defaulting to libnpm/log\n49b8771 fix(publish): Pulse progress bar during execution\nb552e22 fix(import): Pulse progress bar during execution\nf1202de fix(clean): Pulse progress bar during execution\nb38a151 fix(bootstrap): Pulse progress bar during execution\n3359c63 fix: Add pulse-till-done utility\n95e88f0 fix(command): Enable progress from top-level log object\n\nSee the full diff\n\n. - The devDependency lerna was updated from 3.7.1 to 3.7.2.\nYour tests are still failing with this version. Compare changes\n\nRelease Notes for v3.7.2\nBug Fixes\n\npack-directory: Accept lazy Package, passing directory as second parameter (c6819c0)\npackage: Add Package.lazy() helper (4aa9d37)\npackage: Chain self from serialize() method for parity with refresh() (98c812c)\npublish: Re-order --git-reset flag in options (0653af9)\npublish: Remove unused --npm-client option (4e7eaef)\nsymlink-binary: Use Package.lazy() instead of private resolver (83fe3ef)\nversion: Prevent clobbering composed --yes option (f3816be)\n\n\n\nCommits\nThe new version differs by 11 commits.\n\n52796f6 chore(release): publish v3.7.2\nf3816be fix(version): Prevent clobbering composed --yes option\n0653af9 fix(publish): Re-order --git-reset flag in options\n4e7eaef fix(publish): Remove unused --npm-client option\nc6819c0 fix(pack-directory): Accept lazy Package, passing directory as second parameter\n26e6ec2 refactor(command): Tinker with 'private' properties\n1aa4af7 test(add): Use Project.getPackages() consistently in assertions\n83fe3ef fix(symlink-binary): Use Package.lazy() instead of private resolver\n858caf3 test(helpers): Refactor pkg-matchers\n4aa9d37 fix(package): Add Package.lazy() helper\n98c812c fix(package): Chain self from serialize() method for parity with refresh()\n\nSee the full diff\n\n. - The devDependency lerna was updated from 3.7.2 to 3.8.0.\nYour tests are still failing with this version. Compare changes\n\nCommits\nThe new version differs by 5 commits.\n\nda5057f chore(release): publish v3.8.0\nf1f0871 fix(publish): Heighten dist-tag success log level to distinguish from noisy fetch logging\n5e790e5 feat(publish): Add --contents option\n09fccd3 fix(publish): Unhide options shared with version command\ndb5a7b5 chore(prettier): Let prettier have its way with Markdown\n\nSee the full diff\n\n. - The devDependency lerna was updated from 3.8.0 to 3.8.1.\nYour tests are still failing with this version. Compare changes\n\nCommits\nThe new version differs by 15 commits.\n\n00a372e chore(release): publish v3.8.1\n0de3df9 fix(progress): Correctly avoid progress where we don't want it\n8957648 refactor(symlink-dependencies): Pass Tracker instance instead of this.logger\nda81e60 fix(progress): Enable progress during logging setup, correcting default\n8e59950 fix(npm-publish): Pass normalized manifest to libnpm/publish\nef23757 refactor(publish): Move package serialization into explicit step\ndb5631e feat(command): log whether CI environment has been detected (#1841)\nb47e546 chore(stale): Add more exempt labels [skip ci]\n70c2eed chore: Change staleLabel to 'stale'\n936089e chore: Increase daysUntilLock\n2bcc366 fix: Do not print duplicate stdio after a streaming command errors (#1832)\nef18236 docs: Update README with lerna link convert command (#1836) [skip ci]\n95d9ddd chore(github): Add dessant/lock-threads config\nbaec1bc chore(github): Add probot/stale config\n462b15c fix(publish): --canary should also respect --include-merged-tags\n\nSee the full diff\n\n. - The devDependency lerna was updated from 3.8.1 to 3.8.2.\nYour tests are still failing with this version. Compare changes\n\nCommits\nThe new version differs by 10 commits.\n\n25da088 chore(release): publish v3.8.2\nc5676bb fix(publish): Run root prepublish lifecycle if it exists\ne133134 fix(publish): Avoid recursive root lifecycle execution\n089392d fix(version): Avoid recursive root lifecycle execution\nb7255da refactor(run-lifecycle): Reasonable default for opts.unsafe-perm\nae29097 fix(run-lifecycle): Short-circuit ignore options\n0ef71fb refactor(run-lifecycle): Improve logging\nde8ed88 refactor(run-lifecycle): Do not pipeline target Package instance\n4cd375d refactor(npm-publish): Do not pipeline target Package instance\n169c943 fix(bootstrap): Bail out of hoisted recursive lifecycles\n\nSee the full diff\n\n. - The devDependency lerna was updated from 3.8.2 to 3.8.4.\nYour tests are still failing with this version. Compare changes\n\nCommits\nThe new version differs by 4 commits.\n\nc7fa580 chore(release): publish v3.8.4\n31982a1 fix(publish): Pass username to access.lsPackages()\n4300a07 chore(release): publish v3.8.3\nb44f2f9 fix(publish): Give up trying to validate third-party registries\n\nSee the full diff\n\n. - The devDependency lerna was updated from 3.8.5 to 3.9.0.\nYour tests are still failing with this version. Compare changes\n\nRelease Notes for v3.9.0\nBug Fixes\n\nbootstrap: Only run install lifecycles once-per-package, in topological order (929ae22)\ndescribe-ref: Properly handle sha-like tag names (#1853) (094a1cb)\nrun-lifecycle: Ensure all npm_package_* env vars are created (bab8e58), closes #1752\n\nFeatures\n\nbootstrap: Add --ignore-prepublish option (f14fc06)\nbootstrap: Run root install lifecycles where appropriate (944e36f)\n\n\n\nCommits\nThe new version differs by 19 commits.\n\n1c1ac15 chore(release): publish v3.9.0\n094a1cb fix(describe-ref): Properly handle sha-like tag names (#1853)\nf14fc06 feat(bootstrap): Add --ignore-prepublish option\n944e36f feat(bootstrap): Run root install lifecycles where appropriate\n929ae22 fix(bootstrap): Only run install lifecycles once-per-package, in topological order\nbab8e58 fix(run-lifecycle): Ensure all npm_package_* env vars are created\n39c46c2 test(run-lifecycle): Use Package instance in test instead of bare object\n4c5ad31 test(pack-directory): Use new Package instance in test instead of hack\neb79058 chore(stale): Exempt 'bug' label from stale bot [ci skip]\n9f5c824 chore(release): publish v3.8.5\n63a7a89 fix(npm-dist-tag): Improve robustness\n6c0d1d8 docs(publish): Add 'Per-Package Configuration' section\naf1c2ad fix(publish): Ensure pkg.publishConfig is handled correctly when promoting dist-tags\n1877def fix(npm-publish): Ensure pkg.publishConfig is handled correctly\n5a04145 fix(publish): Tweak progress logging\n\nThere are 19 commits in total.\nSee the full diff\n\n. - The devDependency lerna was updated from 3.10.5 to 3.10.6.\nYour tests are still failing with this version. Compare changes\n\nRelease Notes for v3.10.6\nBug Fixes\n\nexec: Tweak description (68a0685)\nimport: Ensure compatibility with root-level package globs (#1875) (16ab98d), closes #1872\noptions: Document negated boolean options explicitly (8bc9669)\npackage-graph: Ensure cycle paths are always names, not objects (ae81a76)\npackage-graph: Use correct property when testing for duplicates (ef33cb7)\npublish: Map packument requests concurrently directly from package graph (c79a827)\nrun: Re-order --npm-client in help output (bfa89bf)\n\n\n\nCommits\nThe new version differs by 35 commits.\n\n5a7392e chore(release): v3.10.6\n743988d test(package-graph): Full unit coverage\nae81a76 fix(package-graph): Ensure cycle paths are always names, not objects\nf0e3dba chore(package-graph): Add inspect helper to workaround Jest bug\nef33cb7 fix(package-graph): Use correct property when testing for duplicates\n16ab98d fix(import): Ensure compatibility with root-level package globs (#1875)\nbfa89bf fix(run): Re-order --npm-client in help output\n68a0685 fix(exec): Tweak description\n8bc9669 fix(options): Document negated boolean options explicitly\n80092e5 refactor(listable): Pass explicit arguments to batch-packages\nc79a827 fix(publish): Map packument requests concurrently directly from package graph\n713f72d chore(release): v3.10.5\n79549c1 fix(run-lifecycle): Do not customize npm_config_prefix during execution\nd9ac62c chore(release): v3.10.4\nd9d4bc4 fix(add): Do not scope chained bootstrap\n\nThere are 35 commits in total.\nSee the full diff\n\n. - The devDependency lerna was updated from 3.10.6 to 3.10.7.\nYour tests are still failing with this version. Compare changes\n\nRelease Notes for v3.10.7\nBug Fixes\n\ncli: Ensure exit code is always numeric (a2362b8)\nnpm-publish: Ensure process exits non-zero when libnpm/publish fails (9e9ce08)\n\n\n\nCommits\nThe new version differs by 4 commits.\n\nb16451a chore(release): v3.10.7\n9e9ce08 fix(npm-publish): Ensure process exits non-zero when libnpm/publish fails\na2362b8 fix(cli): Ensure exit code is always numeric\nd0ff473 test(cli): Add direct unit coverage\n\nSee the full diff\n\n. After pinning to 3.0.0 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 3.3.0 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. - The devDependency eslint-config-prettier was updated from 3.4.0 to 3.5.0.\nYour tests are still failing with this version. Compare changes\n\nCommits\nThe new version differs by 4 commits.\n\n261d47c eslint-config-prettier v3.5.0\na3275ee Update dependencies\n9072c91 Add new Vue rules coming in the next eslint-plugin-vue version\n6c4d1f0 Revert the Vue changes from commit 089a7b53 (PR #69)\n\nSee the full diff\n\n. - The devDependency eslint-config-prettier was updated from 3.5.0 to 3.6.0.\nYour tests are still failing with this version. Compare changes\n\nCommits\nThe new version differs by 7 commits.\n\nf5f7549 eslint-config-prettier v3.6.0\n494f940 Fix build\ne58dd2c Update readme\n203094f Update dependencies\n2928c7a Clean up test-lint/ comments\n5fba4c6 Update copyright years\n2297f5a Add support for eslint-plugin-babel (#72)\n\nSee the full diff\n\n. After pinning to 5.12.0 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 1.16.0 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. - The devDependency prettier was updated from 1.16.1 to 1.16.2.\nYour tests are passing again with this update. Explicitly upgrade to this version \ud83d\ude80\n\nRelease Notes for 1.16.2\n\ud83d\udd17 Changelog\n\n. - The devDependency prettier was updated from 1.16.2 to 1.16.3.\nYour tests are passing again with this update. Explicitly upgrade to this version \ud83d\ude80. After pinning to 8.1.0 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ",
    "colelawrence": "How do you pass the answers as an argument?. No, I understand this, thank you for the attention to my question.\nI mean when you call inquirer.prompt(questions, answers)\nOr, my original thought for complete control,\ninquirer.prompt(qs, {\n  onUpdate: (question, value, answers) => do something, return new answers.\n})\nEtc.\nOn Tue, 6 Dec 2016, 6:56 PM Simon Boudrias notifications@github.com wrote:\n\nIt's automatic, the functions just receive them.\n{\n    default: function (answers) {\n        return 'default value';\n    }\n}\nIf this is not working, then make sure you're using the latest Inquirer.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/SBoudrias/Inquirer.js/issues/469#issuecomment-265322566,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACyjU3MrMcvoCYq3SjBNUn5mTdziifSPks5rFgQfgaJpZM4LF_Se\n.\n. \n",
    "ChrisPhillips-cminion": "Do you have a common method for doing plugins to inquirer or are you suggesting I just maintain my fork?. Thanks I have done this, https://www.npmjs.com/package/inquirer-orderedcheckbox. ",
    "Aaaaaashu": "@SBoudrias \nWhat I mean is that when using Inquirer.js ended, remove the keyboard related events.. ",
    "RonWang": "Is there any correction for that?\nAlso when I input the number of answer, the first line of the list will go up to the line of the question. Any solution to that?. ",
    "RyanLiu0235": "I've updated Inquirer to the newest version and it seems to be unsolved still.\nDo I have to set type to list to scroll the choices with keyboard UP and DOWN? Any workaround? THX.. ",
    "ianwremmel": "right, but that means i have to check both the config object and the answers passed to when. \nRather than\n```javascript\nvar config = getMyConf();\ninquirer.prompt([{\n  ...\n  when: function(answers) {\n    return (!has(answers, key-a) && !has(config, key-a) \n  }\n}])\n```\nsomething more like\n```javascript\nvar initialAnswers = getMyConf();\ninquirer.prompt(initialAnswers, [{\n  ...\n  when: function(answers) {\n    return !has(answers, key-a);\n  }\n}])\n```\nwould make things a bit easier. . ",
    "fogine": "@SBoudrias I disagree. It would simplify users' code a lot.\n\nAlso, depending on each person use case, you would probably want slightly different logic; example, someone want to pass null value as answer, but someone else wants to ignore it, etc.\n\nI don't think I understand your argument. The proposal is simply about the ability to set the initial answers instance property value of PromptUI which should always be a hash map.\n\nI don't think that's something that would make Inquirer better and benefit most users.  \n\nBecause I don't understand your argument (explained above), the quoted statement doesn't make sense to me either. Please, could you elaborate?\n```diff\ndiff --git a/lib/ui/prompt.js b/lib/ui/prompt.js\n util.inherits(PromptUI, Base);\n-PromptUI.prototype.run = function (questions) {\n+PromptUI.prototype.run = function (questions, answers) {\n   // Keep global reference to the answers\n-  this.answers = {};\n+  this.answers = _.isPlainObject(answers) ? answers : {};\n// Make sure questions is an array.\n   if (_.isPlainObject(questions)) {\n```. @foisonocean , on Linux systems, when you print \"\\033c\" sequence, it will clear user's console.. ",
    "daviestar": "I wonder if this issue is related to my recent question on SO?\nI can confirm this fix works in my project.. ",
    "insin": "The import should be removed if the intention was to drop support for Node.js v0.12.\npinkie-promise is also still present in yarn.lock.\nExample of this breaking an npm2 build here (I assume some other dependency still uses pinkie-promise, as the npm3 build must still be able to accidentally resolve it): https://travis-ci.org/insin/nwb/jobs/194576544#L726. ",
    "christav": "@SBoudrias Any pointers, documentation or examples I can look at to figure out how to write a custom prompt?\n. ",
    "dominikwilkowski": "I get around this currently by using new Inquirer.Separator() for each extra line. But that's probably not the right thing to do ;). Yes sir!\nThe problem here only occurs when you have a window that is smaller than the viewport we have set.\nYou can see the bug on larger terminals as well but it's not as visible. Notice the jump of the cursor. That is just amplified when you have less space and the cursor moves outside the viewport.\nSee gif below:\n\n. Actually it doesn't matter how tall the console is. A line break will throw the calculation off and you notice that if you have more than one of them inside the code.\nI just ran this:\n```js\n/*\n * Paginated list\n /\n'use strict';\nvar inquirer = require('inquirer');\nvar choices = [];\nchoices.push('Multiline option \\n  super cool feature\\n  super cool feature');\nchoices.push('Multiline option \\n  super cool feature\\n  super cool feature');\nchoices.push('Multiline option \\n  super cool feature\\n  super cool feature');\nchoices.push('Multiline option \\n  super cool feature\\n  super cool feature');\nchoices.push('Multiline option \\n  super cool feature\\n  super cool feature');\nchoices.push('Multiline option \\n  super cool feature\\n  super cool feature');\ninquirer.prompt([\n    {\n        type: 'checkbox',\n        name: 'name',\n        message: 'Select the letter contained in your name:',\n        paginated: true,\n        choices: choices\n    }\n]).then(function (answers) {\n    console.log(JSON.stringify(answers, null, '  '));\n});\n```\nThis results in this:\n\n. ",
    "NTag": "I quickly fixed the issue described by @dominikwilkowski for the case of a list. I am only talking about this issue and not the problem of the terminal size.\nActually, I think the Paginator works, but the active parameter received by the paginate method needs to be the current line numbers, and not just the selected choice's index. Of course they are the same when all your choices are single-line.\nSo I changed list.js so it computes the number of lines of the choices before the current one.. ",
    "joshkel": "Does #602 address this?. Hey. I'm sorry I didn't follow up on this like you'd asked. Thank you for merging it. Do you want me to open a separate PR to make the functions standalone?. Thanks for the feedback. I'm happy to make whatever changes will help maintenance.\nSince normalizedCliWidth needs an output value, I assume that that would be passed in as a parameter to breakLines and normalizedCliWidth?\nWhere would you like the standalone functions to reside? utils.js? Static functions on ScreenManager?. ",
    "Necmttn": "We are using Plop for generate components. which depends on this repo. \n\nCurrently best solution we did able to is like this. \nwe show line of prompt with no argument. \n{\n    type: 'confirm',\n    name: 'wantActionsAndReducer',\n    default: true,\n    message: 'Do you want an actions/constants/selectors/reducer tuple for this container?',\n  }, {\n    when: (response) => response.wantActionsAndReducer,\n    name: 'actionsAndReducerWarning',\n    message: chalk.yellow('\ufe0f\u26a0\ufe0f Not loading in a route?, Add to app/reducers.js: combineReducers. Ref #1407. [ENTER]'),\n  },\nbut it's still require us to press enter for go next prompt. \nwhat we want is just show the warning message in new line show next prompt.\nfor reference\nhttps://github.com/Necmttn/react-boilerplate/blob/f2a971b5e24af0e59e18aee0ed471dc218f09fde/internals/generators/container/index.js\n. ",
    "foisonocean": "How can i use it?. @SBoudrias \nI have a list of questions, and before ask questions, I will print some info in the screen. If each question leave a message, the screen will scroll, so people can't see the info before the question.. @SBoudrias \nThe information is generated by other codes, put the information to prompt message will make it too coupled. Also, put the information to prompt message means the information will be printed many times, which is not what I want.\nSo could you please make a option to clear the prompt ? Thanks a lot.. ",
    "simonmarklar": "I am happy to have a look at this over the weekend and submit a PR if that helps.\nfor now i am re-ordering my code to get around this. Hi, sorry i've not had the time to look at the code yet. \nYou're right, if i have when: () => Promise.resolve(false) then it behaves the same as returning false.\nI checked the validate function for an input prompt and if i reject a promise in there it will re-ask the question rather than trigger the .catch function (i think this is why i was rejecting in when - I expected the behavior to be uniform). \nSwallowing the rejected promise and making it act the same as Promise.resolve(false) does raise the question of what to do if the when function throws a legitimate error that should be handled by the developer using the library. I'm not sure if this happens, but if inquirer does swallow the rejection and behave as if the result is false, it could be a really frustrating bug to track down. So perhaps how it works now is better than swallowing a possible legit error, and just making the docs a little clearer would suffice (or perhaps this thread is enough clarification?)\nI wonder about the clean up when a promise is rejected, because i dont think that just sitting there waiting for ctrl-c is what you intended. It looks like PromptUI.prototype.onCompletion is not being called when there is a rejected promise in this part of the code\nI thought perhaps I should be cleaning up in inquirier.prompt().catch(), but the prompt's close function doesnt appear to be available.\nas an experiment, I changed this part of prompt.js to\njavascript\n return this.process\n    .reduce(function (answers, answer) {\n      _.set(this.answers, answer.name, answer.answer);\n      return this.answers;\n    }.bind(this), {})\n    .toPromise(Promise)\n    .then(this.onCompletion.bind(this))\n    .catch((err) => {\n      this.onCompletion()\n      throw err\n    });\nand inquirer stops the prompt and triggers the .catch with the rejection error from when - so perhaps this is the solution to the hanging prompt. or maybe its better to expose a function on the Inquirer object that will run the prompts onCompletion function ?\nI'm happy to turn the above snippet this into a PR if it is in line with how you want inquirer to work. ",
    "jpnelson": "I've got something mostly working, but I have a dilemma now \u2013 j and k navigation will compete with the typeahead.\nSo for this list:\n\na\nb\nc\njjk\nd\n\ntyping jj will no longer select c, it will select jjk.\nSo my options are:\n1) detect when in \"j / k nav mode\"\n2) make the autocomplete behaviour optional\nwhich would you prefer?. ",
    "mvila": "Yes, it is a big issue for me because I need to control exactly what is printed in the console. Is there a way to get rid of this extra line?. Thanks @SBoudrias! \ud83d\ude04 . ",
    "mysticflute": "actually this also happens if you use the a and i shortcuts too. So the only way to get rid of that is to use space on a specific choice. ",
    "andyford": "I ended up here because I was trying to figure out why the keyboard hints disappeared as soon as you pressed space, a, or i (before pressing Enter to continue). It's actually very confusing to remove hints while a user is still trying to use the prompt.. ",
    "kelvinau": "Agree with @andyford. I don't remember the key options at all and I need to re-run it again to see the hints. This is annoying when I need to pick multiple choices.\nMaybe providing an option for always showing the hints in multiple selection.. ",
    "anicke": "@SBoudrias Good idea! I have made a new patch.. ",
    "sholladay": "Absolutely. This is a great pattern in Yeoman generators like generator-seth, so I will use that as an example.\nSteps:\n1. Get a command line argument.\n2. Dynamically show/hide a prompt based on whether the argument was provided.\n3. Merge the arguments and prompt answers with something like Object.assign().\nThe linked example uses some Yeoman APIs for dealing with arguments, but could be refactored pretty easily. I would use meow for this in a standalone CLI.\nThis approach is quite flexible. In your case, it sounds like instead of skipping the prompt when the user has provided an argument, you still want to show the prompt but make their argument the prompt's default value. It would be shown to the user and behave kind of like a confirmation screen. To do that, you would pass the argument to default instead of when.. > Have you got the idea?\nI think so, we'll see. \ud83d\ude04  \nLet me revisit what you mean by \"default\" and \"automatically answer the question.\" In Inquirer, the term \"default\" really means \"initial value\", similar to defaultValue on an input element in the DOM. If the prompt is not shown due to using when: false, then the default is not used.\n\nI don't want confirm it for the each question\n\nOkay, so it sounds like you don't want to prompt for a question at all if we receive a value for it via a command line argument. This is what when does in my example earlier.\nIf you do use when: false, then there won't be any answer in the object returned by Inquirer. This is why I use Object.assign() to merge the command line arguments and the Inquirer answers.\n\nI just want to fill in them once and other day just generate without prompting them once again\n\nAh, okay. This sounds like what store: true does in Yeoman. This in not part of Inquirer, but could be added to your app by using conf to persist the answers. You would attempt to load existing configuration and use those values instead of prompting for them.\n\nI don't want return false as when value, because I want to see which answers were set (automatically) for which question.\n\nSo you want to show the user what value is implicitly being used but not let them change it? This sounds like bad UX to me, honestly. And yeah, you can just use console.log() as @SBoudrias described. At that point it's not a prompt, it's just a log.. I think one thing that would help clarify some of the feature requests going on here is if people would make a mockup for how you want it to look and work for the user, then post a recording of it using asciinema.. ",
    "likerRr": "@sholladay thank you for explanation, but unfortunatelly it's not what I'm looking for. \nYou was right when you mentioned that my case bit different. I want to skip the confirmation step for the questions with auto property, because when I call my app with some argument which sets default answers on questions I don't want confirm it for the each question. Imagine, that I have 100 of questions. I just want to fill in them once and other day just generate without prompting them once again, even with default values set as for previous time.\nAlso I don't want return false as when value, because I want to see which answers were set (automatically) for which question.\nHave you got the idea?. So, I found the code which generates question output line and as @SBoudrias said and modified code a little:\n```javascript\nconst PromptBase = require('inquirer/lib/prompts/base');\nfunction autoAnswer(question) {\n  // since console.log() returns undefined, we can use such one-liner\n  question.when = () => console.log(new PromptBase(askName).getQuestion());\nreturn question;\n}\nconst askName = {\n  type: 'input',\n  name: 'name',\n  message: What's your name?,\n  default: 'Anonymous'\n};\n// now the question is \"auto answering\" and output remains native\nautoAnswer(askName);\n```\nWhat do you think? Is it safe to use internal function from here inquirer/lib/prompts/base ?. But probably it would be better to use other color to let the user know, that particular question was answered not usual way.. ",
    "leebenson": "I need this too.\nI'm building a CLI tool that takes options via yargs. Inquirer is used to show a 'wizard' for any question that isn't already answered by a command line arg.\nI can't use default, because that's basically just echoing back what the user has already entered, and is asking them to re-confirm (and if when is false, it gets ignored completely.)\nI can't use when(), because that will skip the question entirely and avoid populating the answers hash for further questions, as well as miss out on the validation functions.\nWhat would solve it is an answer field on the question object. Unlike 'default', putting a value there would avoid asking the question - BUT, it would automatically re-ask it if the value fails validation and show the usual error prompt.\nSo, it's basically a means to skip asking the question, but treat the value given as the answer.\nDoes that make sense?. ",
    "karlhorky": "Update: This doesn't work completely because it will return an empty object if none of the questions are asked.\n\nWhat I ended up doing was a variation on @SBoudrias's comment https://github.com/SBoudrias/Inquirer.js/issues/517#issuecomment-288964496 which sets the answer to an arbitrary value and tells the user that the answer was set to a specific value for a specific question.\n```js\nconst value = 'BAR';\nconst askName = {\n  type: 'input',\n  name: 'name',\n  message: \"What's your name?\",\n  when(answers) {\n    if (skipQuestionAndSetValue) {\n      console.log(${chalk.blue('!')} Setting answer to \"${value}\" for \"${this.message}\");\n      answers.name = value;\n      return false;\n    }\n    return true;\n  },\n}\n```\ncc @likerRr @leebenson does this work for you?. Ah I've found out that an array of questions with whens that always return false just returns an empty object \ud83d\ude15 \n@SBoudrias would you be up for changing this behavior to not discard the mutated answers value? I've opened PR #645 with a failing test.\nTo demonstrate what I'm looking for, another (simpler) example of what I hope to get working:\n```js\n// NOTE: Not working currently, don't use :)\nvar prompts = [\n  {\n    type: 'confirm',\n    name: 'q1',\n    message: 'message',\n    when: function(answers) {\n      answers.q1 = 'foo';\n      return false;\n    }\n  },\n  {\n    type: 'confirm',\n    name: 'q2',\n    message: 'message',\n    when: function(answers) {\n      answers.q2 = 'bar';\n      return false;\n    }\n  }\n];\ninquirer.prompt(prompts);\n// answers: {}\n```\nTo contrast, if there is at least one question that actually gets asked, the answers array is set correctly\n```js\n// This works\nvar prompts = [\n  {\n    type: 'confirm',\n    name: 'q1',\n    message: 'message'\n  },\n  {\n    type: 'confirm',\n    name: 'q2',\n    message: 'message',\n    when: function(answers) {\n      answers.q2 = 'bar';\n      return false;\n    }\n  }\n];\ninquirer.prompt(prompts);\n// answers: { q1: '', q2: 'bar' }\n```. Defaults would almost work, but they are not great for the following reasons:\n\n\nThey happen outside of the sequence of the prompt. This is sub-ideal because:\n\nThey are outside of the validation logic\nThe assignment to the final answers object happens at a different time. Because of this, notifying users that a default value has been assigned needs to happen out of sequence (e.g. after the rest of the prompts).\n\n\n\nThis moves some of the sources of the answers outside of the questions list, which makes it one more place to look. I like to think of prompt() kind of like Array.prototype.reduce(), taking in the questions list and providing answers at the end. I'd like to keep all of the logic within the questions if possible. I'm using (and can envision continuing to use) the when() callback kind of like a callback function to reduce(), except that every question has its own separate callback.\n\n\n\n\nI'm not super warm to the idea of allowing users mutate the answers object. That's usually a pretty bad design decision.\n\nRegarding this, I agree with you from an idealistic perspective (immutability improves comprehensibility and debuggability) and I would greatly prefer a way to achieve my goals without having to mutate answers.\nSo if there's a different way of achieving something similar (other than modifying the answers outside of the questions objects), I'm all ears. Here's another illustration of the complex sequence I'm trying to do:\nSimplified example:\n```js\nconst options = await getArgsOrConfig();\nconst allCustomers = await getAllCustomers(token);\nconst prompts = [\n  {\n    type: 'list',\n    name: 'customer',\n    message: 'Customer:',\n    choices: allCustomers,\n    when(answers) {\n      if (options.customer) {\n        console.log(${blue('!')} Using \"customer\" option from arguments or config);\n        answers.customer = options.customer;\n      } else if (allCustomers.length === 1) {\n        const firstCustomer = allCustomers[0];\n        clog(${blue('!')} Using only authorized customer \"${firstCustomer.name}\");\n        answers.customer = firstCustomer.value;\n      } else {\n        // Prompt for input\n        return true;\n      }\n    },\n  },\n  {\n    type: 'input',\n    name: 'git_url',\n    message: 'Git URL:',\n    validate: input =>\n      /(github.com|bitbucket.org|gitlab.com|.git$)/.test(input) ||\n      'Please enter a valid Git URL.',\n    when(answers) {\n      if (options.git_url) {\n        console.log(${blue('!')} Using \"git_url\" option from arguments or config);\n        answers.git_url = options.git_url;\n      } else {\n        // Prompt for input\n        return true;\n      }\n    },\n  }\n];\ninquirer.prompt(prompts);\n```\nFull code: https://github.com/amazeeio/lagoon/blob/a4a6fa7f101243a69676f060c6c5d8ddaa403ccd/cli/src/commands/projectCommands/create.js#L123-L222. @SBoudrias Would you be up for alternately extending when() to allow for a different, non-boolean return type? The return value could potentially be either:\nOption 1: a value for the current answer\nOption 2: a new object to replace answers with (kind of similar API to reduce() callbacks?)\nThe second option would be more flexible but also allow for more footguns (a question that changes an answer not meant for it).. Yep, exactly. It accepts the mutations to the answers object if at least one prompt goes through.. I thought it maybe could have something to do with this: https://github.com/SBoudrias/Inquirer.js/blob/258064f8b1a4002e3393455918912004748d8bea/lib/ui/prompt.js#L98-L100\nMaybe it doesn't create an answer object if it's just an array of empty()s?. Great, I'll take a look and report back if there are still issues, thanks!. I've tested the fix from #665 by upgrading to 6.0.0 and the answers are indeed there. Thanks @yujunlong2000 and @SBoudrias!. Can this be closed now that #663 was merged?. Thanks for taking a shot at this Alec!\nI suppose this doesn't allow for dynamically setting answers during the prompt sequence as I mentioned in https://github.com/SBoudrias/Inquirer.js/issues/517#issuecomment-366711463 ?\nWould you consider an alternative API that would allow for this? Perhaps accepting callbacks with the answers object as a parameter, in addition to the static values?. Wow, awesome, your example looks great! \ud83c\udf89\nDoes this run in the sequence of the prompts? Eg. if the foo in your example was user-entered at runtime, does it still go into the block with the fetch?. ",
    "bapti": "Thanks @SBoudrias  for the quick response, more googling required from me then! Thanks for the hint. Thanks again @SBoudrias - this was the hint I needed\nAdding the following command to my pre-hook has made my tool work as expected\nsh\nexec < /dev/tty #allow interactive shell commands. ",
    "eitah": "@bapti Brilliant!!! this thread saved the day.\nSince my team uses Husky to manage githooks it was as simple as:\n\n    \"postcommit\": \"my-script < /dev/tty\"\n\n\nthanks again!!. ",
    "jayrylan": "@brianantonelli I needed this too and just discovered it's already available.\n```js\nconst inquirer = require('inquirer')\nconst prompt = inquirer.createPromptModule({ output: process.stderr })\nprompt(/ question array/object here /)\n```\n. @brianantonelli That's strange, is that on AWS? I'm using iTerm2 as my terminal on macOS and all the output is identical when using process.stderr -- everything works perfectly fine.. ",
    "brianantonelli": "Thx!. So I'm still seeing some issues with this. I followed @jrylan 's instructions and my prompts are now directed to stderr which is perfect. However, I'm still seeing some rogue control characters being sent to stdout.. Thoughts?\n^[[?25l^[[?25hexport AWS_ACCESS_KEY_ID=aaa && export AWS_SECRET_ACCESS_KEY=bbb && export AWS_SESSION_TOKEN=ccc\n^[[?25h. No, running this on OSX in Terminal. As soon as I make the call to inquirer I get those control chars. The one at the end really throws me because its printing that many function calls later. I only see these characters in VIM. I caught this because it breaks wrapping the output in a eval $(foo) call.. That's just an example output from an application that leverages this library. In my application if I pipe all data to stderr using the above solution and only do a single output to stdout (the AWS keys export command in this case) I see these control characters. If I remove the call to inquirer the control chars disappear. . This only occurs if you use the list prompt. If I do a standard input prompt the characters aren't there. Here's a snippet to reproduce this:\n```\nvar inquirer = require('inquirer'),\n    prompt   = inquirer.createPromptModule({ output: process.stderr });\nconsole.error('start');\nif(process.argv[2] === 'inq'){\n    prompt([ { type: 'list', name: 'test', message: 'Test', choices: ['a', 'b', 'c'] }]).then(function(answers){\n        console.error(answers);\n    });\n}\nconsole.log('test');\nconsole.error('stop');\n```\n\nRunning node test.js > out.txt && vi out.txt shows no control characters:\ntest\nRunning node test.js inq > out.txt && vi out.txt shows control characters:\n^[[?25ltest\n^[[?25h^[[?25h. Any ideas?. Can't those be disabled? \n. \n",
    "popey456963": "@brianantonelli Those control codes are for colours.  This is something inquirer uses.  Vi doesn't support those control code colours, so displays the base codes.  Hence you're running into an issue.. @brianantonelli You can use something like strip-ansi to remove ansi from a string, I've opened an issue to be able to use it with streams https://github.com/jlord/sheetsee.js/issues/26.  However, it would probably be pretty simple to allow it to support streams yourself.\nIt's been a while since I've manipulated such streams, but with a stream.Transform it should work.. ",
    "PierBover": "I'd like to style the question in any way I wish. For example without the > as first character, having multiple lines, multiple text styles, etc.\nI understand this is out of scope for this package, so a simple solution would be to be able to omit the message and simply present the options to the user.. But the message property is always styled as bold, no?\nI'll check what can be done about the prefix.. Thanks @patrick-motard for the suggestion.\nI'm guessing this should be closed then.. ",
    "jcready": "@SBoudrias not sure why the codacy check is failing, do you want me to switch to using double-quotes for strings even though single-quotes are used throughout?. ",
    "dhaniboy09": "It return undefined. It says my_name is not defined.. ",
    "pietrovismara": "But why? \nWould there be any gain in rewriting the code? Could you elaborate on it? Or is it just because, you know, ES6?\nFurthermore, i would strongly refrain from adding babel just for the sake of having new ways of doing the old stuff. Babel adds a big layer of complexity and in my experience it slows down development and debug quite a lot.. ",
    "antoine-pous": "In fact ES6 coding style is more clear, but i don't find babel usefull at all. ",
    "imkimchi": "Just think simple guys, writing Node in v4 is same as using iPhone 4 even though there's iPhone 8 coming out. Yeah, you could still use iPhone 4 but It's really slow, have a lower storage and can't even use LTE. \nWhy would you use oldest version if there's more developed version?\nLet's just use ES6 at least. You don't have to add babel.. ",
    "kbrandwijk": "Seems done.. @kevinschaul Regarding the visual indication, I have just created #631 and #632 for this.. @SBoudrias I would have liked that feedback on the PR right away. Right now, I'm very limited in time, so I can't add to it.... Seems fixed as of 4.0.0. Any plans for releasing this?. I'm looking to get started with it, and I want to plan it a bit, so if I start now, I won't be confronted with an upgrade to v5 in two weeks \ud83d\ude04 . Unable to reproduce in the latest version using examples/password.js. I don't have issues with mintty on Windows.. You could easily achieve this in a plugin, I think.. With some guidance, I might. It seems that functionality would wrap this call: https://github.com/SBoudrias/Inquirer.js/blob/master/lib/prompts/base.js#L87 with something like startSpinner -> call validate -> resetSpinner. Would that be the right place to put this?. This is the implementation I have now. I added another option validatingText to a question for it too.\n\nThis can also be extended to filtering, which is also async:\n\nIn the filtering case, I also added updating the display with the filtered answer after filtering is complete.\n. @SBoudrias Please see my PR for implementation details. . The PR apparently needs something (test case?) but I don't have any time to do it.... @benmonro Feel free to contribute if you'd like to 'have this'.... It seems Codacy and the XO settings don't agree.... Well, I actually have a use case for a default password, where I don't want to skip the question.. ",
    "maheshj567": "Yes, that worked. Thanks Simon. I added the line process.stdout.write(ansiEscapes.eraseLines(2)); in the isInquiring check and it removed the line I used to input the data. Using console.log didn't work well btw, it created an empty new line.\nIt would be great if the library could do this instead of the developer handling it, because it is able to do it outside the REPL.. Ok. As written in the code, I'm using just the two modules - repl and inquirer. I also have checks to make sure I'm not handling anything extra or printing anything else to the console. So I thought Inquirer's implementation missed this.\nTo me, it seems like the repl module is adding the extra line break. I tried to understand the code to see if I can tweak it to handle this case, but haven't spent enough time on it yet.. ",
    "JPeer264": "js\ninquirer.prompt([{\n  type: 'list',\n  name: 'name',\n  message: `msg`,\n  choices: [\n    {name: 'https://x.com', value:'https://x.com'}, \n    {name: 'https://y.com', value:'https://y.com'}\n  ]\n}])\nThe example above highlighted the text as expected. After value from your example I removed one of the singlequotes as they are invalid.. ",
    "ujenjt": "Thanks for this PR, I really need this bugfix. How can I help to get the pull merged?. ",
    "mmikitka": "Do you know of a library, not including a tightly-coupled MVC,etc. framework, that provides Web UI prompts? In the meantime, I'll play around with Inquirer.js, trying to separate the presentation layer (console, web UI) from the data-processing layer.. ",
    "rhyek": "You too.. ",
    "ngotchac": "Okay yeah I understand :) However does the error gets cleared with a hidden password input?. This should fix it : #546. ",
    "LeonBlade": "I also just encountered this issue as you made this issue coincidentally enough.. ",
    "not-an-aardvark": "This is probably caused by https://github.com/nodejs/node/issues/13557.. ",
    "rileyio": "Just encountered this issue on node v8.1.0, upgraded to v8.1.2 and the issue went away.. ",
    "DerekTBrown": "Seems like there are some conflicting standards for style. Codacy/pr wants strings with double quotes, and the npm test command wants single quotes?. Right now this addition adds both the date.js and dateformat dependencies due to a usage issue in date.js.  I created an issue (https://github.com/datejs/Datejs/issues/104) in the hopes of resolving this, so that I can delete the dateformat dependency.. @SBoudrias I am interesting in merging this.  Can you give me an idea of what I need to do to merge / improve on?. @SBoudrias I thought about that as well, but I think this may be a pretty common need, so I thought I might shoot for package inclusion first. It is a fairly lightweight change (a single file).. @SBoudrias I closed in favor of creating a plugin.  I think it would be good to add a section to the Readme which includes a list of available prompt plugins.. https://www.npmjs.com/package/inquirer-datepicker-prompt\n. @SBoudrias can I include gifs/screenshots of these tools, or is that too much?. ",
    "EsrefDurna": "if you want npm will update a higher version\nwhy don't you test it before npm distributes ? you want npm to install ^packageName but you don't want to test it with your module?\nyes this is the irony of open source,\nyou are alright with other packages update them self and install whatever they distribute into your package,\nbut you also don't willing to test,. no mad,I'm using node since day 1, please check who the person is before giving links to semver,\n. ",
    "marcielmj": "Having the same issue here.. ",
    "ctrlplusb": "Also experiencing this.\nI tried your example.  The first question responded, second question hangs.\nNode 8.1.0\nWill try update to 8.1.2 and report back. 8.1.2 resolves the issue \ud83d\udc4d. ",
    "NoelAnnParisi": "Thanks!! I'll try this :)\nOn Wed, Jun 21, 2017 at 5:10 PM Sean Matheson notifications@github.com\nwrote:\n\n8.1.2 resolves the issue \ud83d\udc4d\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/SBoudrias/Inquirer.js/issues/555#issuecomment-310239058,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AUMvu03Mn2cmwWRN4l87iDTWRgPxMIEtks5sGbD-gaJpZM4N_5EB\n.\n. Upgrading my node version solved it! Thanks so much :D. \n",
    "dafo": "Thank you for your response. . ",
    "jtillmann": "The Travis test failed since numbers outside ouf array index range should cause the default value to not be set, but my initial PR allowed for those numbers to be looked for as choice values. \nI have changed this, however now numbers are no longer allowed as default values. ",
    "joshvickerson": "@revelt Thanks for the thoughtful response! I definitely understand that this is a matter of priority - just thought I'd bring it to someone's attention to see if this was worth resolving.\nJust to clarify your comment:\n\nif not my previously left transparency setting, it would have been black on black.\n\nDoes this mean that it's the transparency setting that's causing the color to be black on black? i.e. my theme has reduced opacity (65%), and I'm guessing your opacity was still at 100% (or something closer to it)?\nSince filing this bug I've changed jobs (and thus, work computers) and don't currently have Sonar / anything I know to use Inquirer installed so I can't readily test this at the moment. If you are going to prioritize other more relevant issues over this I'm happy to edit my terminal theme should I run into this issue in the future - just want to make sure I know what to edit.\nAgain, thanks for the response!. Sure thing. Thanks for taking a look!. ",
    "mechanical-turk": "@Rawnly thanks mate. ",
    "ccorcos": "Did it? How can I open it?\nOn Wed, 26 Jul 2017 at 04:20 Simon Boudrias notifications@github.com\nwrote:\n\nClosed #570 https://github.com/SBoudrias/Inquirer.js/issues/570.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/SBoudrias/Inquirer.js/issues/570#event-1179696029,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABth33si07Drulnga3LUj5ogplnRNsyKks5sRyEbgaJpZM4Oi6oC\n.\n. Amazing! Thanks!\n\nOn Thu, 27 Jul 2017 at 00:26 Simon Boudrias notifications@github.com\nwrote:\n\nMaybe this can help?\nhttps://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/SBoudrias/Inquirer.js/issues/570#issuecomment-318281756,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABth34guQ4O7gcFIhlsxp2rHk4ji033Tks5sSDupgaJpZM4Oi6oC\n.\n. \n",
    "jimthedev": "Any update on this one?. ",
    "kreig303": "@SBoudrias I hate to be a nag but even though you view it as not being a problem, any commercial organization attempting to use open source software will shy away from GPL and derivatives.  The FSF licenses are dated and vague.\nBelieve me, your software's usage will drop over time if you continue to use a piece with an LGPL... even if your own usage of jschardet is not threatened due to your source distribution.. @SBoudrias So great to hear!  Now we need to bump the dependency version (and then I need to get the eslint folks to do it too). :-)\nAssembling a PR now.\nEdit: Done!  #616 .  Solely bumps semver for module as well as for dependency.. Ran npm test too... first time it failed on\n1) inquirer.prompt\n       hierarchical mode (`when`)\n         should run prompt if `when` returns true:\n     Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\nbut then the second time (et seq.) it ran fine... just fyi?\n. ",
    "michaelzoidl": "@SBoudrias but you don't have to find an alternative to jschardet, since you use the external-editor package which uses jschardet.\nSo the solution would be to find an alternative to external-editor, plus, all dependencies should be MIT.. ",
    "jonscottclark": "Thanks, @odolha for your notes and initial investigation!. @SBoudrias Working on getting these tests to pass. I was getting errors locally when running tests that prevented me from getting much further - the ones below, if they look familiar to you? I ran npm install before running npm run test.\n```\nFAIL  packages/input/test.js\n  \u25cf Test suite failed to run\nCannot find module '@inquirer/core' from 'index.js'\n\n> 1 | const { createPrompt } = require('@inquirer/core');\n\nFAIL  packages/core/test.js\n  \u25cf Test suite failed to run\nCannot find module 'cli-spinners' from 'index.js'\n\n> 6 | const spinner = require('cli-spinners').dots;\n\n```. Thanks, @SBoudrias, I will try that.. ",
    "dnutels": "Thank you.\nThis, unfortunately, is rather unsatisfactory, as the values of short are joined, resulting in(when short is _, for example):\n_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _\nWould you accept a PR for this? Like, in a couple of days?. ",
    "sbj42": "Looks like that was it.  I upgraded to node 8.4.0 and the issue is resolved.  Thanks!. ",
    "dsc03": "I'm currently on v6.10. I just saw that the recommended version for node is v6.11...not sure if you still think i should try updating.. Experiencing the same issues on v6.11...additionally had a friend try on v8.4 and didn't work.. \nvar inquirer = require('inquirer');\nvar prompt = inquirer.createPromptModule();\n/** VERIFY INITIAL COMMAND PROMPT QUESTION INFO **/\nlet commandPromptQuestions = {\n  type: 'list',\n  name: 'command',\n  message: 'What operation do you want to perform next?',\n  choices: ['this', 'that', 'other', 'next']\n};\n```\n/ TAKE IN USER INPUTTED COMMAND AND PASS THROUGH SWITCH STATEMENT /\nlet commandPrompt = () => {\n  prompt(commandPromptQuestions)\n    .then(answers => {\n      commandRunner(answers.command);\n    })\n.catch(error => {\n      console.log('There was an error with this command! Try again');\n      commandPrompt();\n    })\n}. hey! Wanted to see if you had any updates on this issue?? Let me know. Does it seem like I am implementing it correctly given the code above?. I was testing it out as a tool so I actually just have a basic server set up with that command you have above (commandRunner was just console logging). I will create a repo for it, push it up and send you the link so you could see everything.. https://github.com/dsc03/clitool. ^^ that was the playground i was testing inquire with and where I was getting issues...the only additional module I'm using in this case is express.  . hey! Any updates on this? . ",
    "saikatharryc": "this is because of terminal plugins like i use zsh it doesn't works here, but when i shifted to bash it works fine.\nwe can solve that by adding a script in package.json\n\"start\":\"echo bash && node index.js\",\non npm start it will start bash shell and execute the programme. and in bash shell you can use .\nremember this bash only works in UNIX based systems. not in windows.. ",
    "nelsonomuto": "same issue and I'm on node v10.9.0. ",
    "mhchen": "Thanks @SBoudrias and @mrkmg for the quick replies!\n@mrkmg I did some investigation and ended up opening a PR here: https://github.com/mrkmg/node-external-editor/pull/10\nWhat seems to be happening is that https://github.com/mrkmg/node-external-editor/blob/develop/src/index.coffee#L91 has an encoding of null when the buffer is empty, which causes IConvLite to crap out, throwing a ReadFileError. I did check your suggestion: vim does in fact create the temp file, but because it doesn't insert a newline, the buffer will be empty, which doesn't seem to happen at least with nano. Btw this is all on Mac OS X.\nDidn't see a Contributing.md so I hope the PR format is good, but the fix seems easy enough to replicate if you want to incorporate my changes. Thanks!. Everything's working well now. Thank you both for the quick response!\nOn Tue, Sep 19, 2017 at 6:31 AM, Simon Boudrias notifications@github.com\nwrote:\n\nYou guys are awesome, thanks a lot!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/SBoudrias/Inquirer.js/issues/587#issuecomment-330539892,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABQ57fAELRDp5vTOrSudTmXHr9FfE-Toks5sj8JNgaJpZM4PZt5J\n.\n. \n",
    "reznord": "Thanks for the explanation. It would be great if you can give me an example.. ",
    "raphaelokon": "An example would be great @SBoudrias . ",
    "renarsvilnis": "Any feedback?\nIf so, I'm interested in contributing the feature.. @SBoudrias I'll give it a shot, to implement tab complete.. @jonathancochran No, I needed a quick fix, so I just added a prefix +, in my app, that when present prepends inputted tabs with the \"initial values\". ",
    "czebe": "This would be useful. At the moment it's hard to get default value in the input prompt and edit/modify it (eg. rename  file.xxx to file2.xxx etc). To me it'd feel natural if I press TAB, the default value gets written in the input so I can edit it (I'm not sure if you can detect this in the console).. ",
    "jonathancochran": "Any luck with this @renarsvilnis?. ",
    "nuintun": "Closed, Promise.catch worked now, but it didn't work before!  Very strange.... Already deleted process.exit.. ",
    "rayk": "The repeating of the questions is a problem, I found it mentioned in https://github.com/SBoudrias/Inquirer.js/issues/432 also. \nI have noticed the problem does not occur if you have a function per question, but using a recursive approach like above it is real problem.  Basically this bugs makes it harder to keep code DRY.\nfor example, a generic navigation function like the one below:\njs\nconst nav = session => {\n    const menu = session.menuNext;\n    out(chalk.green.bold(menu.name));\n    inquire.prompt(menu).then(choice => {\n        R.head(R.values(choice))(R.pipe(updateHistory, setPreviousMenu, clearNextMenu)(session));\n    });\n};\nalways cause the question to be repeated.. ",
    "darscan": "Seems codeclimate is not happy with any of the open PRs :/. Hi @SBoudrias Any thoughts on this? I realise that it's probably a bit extreme.. At the same time, reducing the filesize for consumers seems reasonably beneficial.. Thanks, I agree - thought I'd just raise it for fun/discussion. Cheers :). ",
    "leak4mk0": "Thank you for your reading my PR.\nFirst, I want to fix slipped cursor on win32.\nThis problem is occurred by decremented width.\n\nSo, I tried to remove decrement of console width on win32 (File: screen-manager.js, Line: 113).\nBut new problem is occurred and I understood why console width is decremented..\nOn windows, if there is newline at right end of console, extra newline appears.\n\nTherefore, I got an idea.\nI tried to insert cursor up (\"\\x1b[1A\") after newline, if there is newline at right end.\n\n. Thank you for your reply.\nAs you say, this code is not easy for reading, sorry.\nI'll rewrite this code more simply.\nI tried your way (\"do not insert \\n at the line end\") before I tried cursor-up way.\nBut, duplicate lines appeared.\n\nTried code: (PoC code, all newlines are removed.)\n```diff\ndiff --git a/lib/utils/screen-manager.js b/lib/utils/screen-manager.js\nindex e5d60fd..dbb70a0 100644\n--- a/lib/utils/screen-manager.js\n+++ b/lib/utils/screen-manager.js\n@@ -110,7 +110,7 @@ ScreenManager.prototype.normalizedCliWidth = function () {\n     output: this.rl.output\n   });\n   if (process.platform === 'win32') {\n-    return width - 1;\n+    // return width - 1;\n   }\n   return width;\n };\n@@ -131,5 +131,5 @@ function breakLines(lines, width) {\n }\nfunction forceLineReturn(content, width) {\n-  return .flatten(breakLines(content.split('\\n'), width)).join('\\n');\n+  return .flatten(breakLines(content.split('\\n'), width)).join('');\n }\n``. I'm sorry for being late.\nMost of this problem seems to be fixed in new screen manager.\nSo, I fixed only two points for Windows console.\n1. Remove extra right space on Windows. (screen-manager.js: 114)\n2. Prevent move cursor if cols equals to 0. (screen-manager.js: 76)\n    Because behavior ofcursorForward(0)looks like one ofcursorForward(1)` on Windows cmd.exe.. ",
    "RodeyManager": "By the time Project Description is not entered, the command line is jammed. I current use node version 8.1.0\n\n. OK, I'll try. ",
    "MLoughry": "@SBoudrias, I and some on my team are running into this issue on Node v11.1.0.. Ah, nevermind, false alarm. Seems we had an older version of inquirer, and this doesn't repro with latest (6.2.0). ",
    "sathomps": "Appears this is a documentation issue.  The password type needs to be supplied a mask option.  It would be nice if it defaulted to one if the user didn't supply it.. Sure I'll create one this weekend.. Guess that weekend was a long one :)\nPull request here #751 . ",
    "ksmithut": "Nevermind, I hadn't actually installed inquirer in the project, must have been using some older version from another dependency. ",
    "openwings": "MacOS system terminal.. ",
    "user3587412": "To my knowledge, no. However starting with RxJS 5 we can use prototype patching to import just the operators we need. They've also recently added lettable operators as an alternative.. In lib/prompts/editor.js,\ndiff\n- 26 this.lineSubscription = events.line.forEach(this.startExternalEditor.bind(this));\n+ 26 this.lineSubscription = events.line.subscribe(this.startExternalEditor.bind(this));\n...\n- 86 this.lineSubscription.dispose();\n+ 86 this.lineSubscription.unsubscribe();\nShould fix this specific problem for now. Before, forEach used to return a disposable subscription but now it returns a promise (which is still fine for most use cases in this library). . ",
    "soruly": "moving to RxJS 5 adds 3000+ more files in node_modules\nRxJS put all their source code and source map in production node_modules\nhttps://github.com/ReactiveX/rxjs/issues/3334\nI'd refrain from upgrading and keep using 4.x. ",
    "ycmjason": "Same issue for me too... . I think this will make the prompt more extendable.. @SBoudrias \nNice. The ongoing refactor definitely looks like it will resolve these issues. However, I do feel that the completion of this may be quite a while away. This proposed change will make this library more extendable without affecting the API. This should be safe to implement so maybe it's worth doing in the meantime?. +1 to this suggestion.\nI would also want the pager to only scroll when the highlighted option hits the bottom.. ",
    "deepakshrma": "Same happens to me. I debug a lot. Seems when ever you run js as bash. It not working as it suppose to work on git-bash.\ncan be reproduce\n```\n!/usr/bin/env node\n// rest of the code.\nexamples/password.js\n```\n. ",
    "gms1": "I can reproduce this issue using nodemon 1.14.3:\ngms@sirius:~/work/HOT/sandbox (master)$ ./node_modules/.bin/nodemon ./index.js \n[nodemon] 1.14.3\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching: *.*\n[nodemon] starting `node ./index.js`\n? test password:  1234\n? test password:  ****\ntestinput:  {\n  \"password\": \"1234\"\n}\nbut not, if I run the same code from node 8.9.4 directly:\ngms@sirius:~/work/HOT/sandbox (master)$ node --version\nv8.9.4\ngms@sirius:~/work/HOT/sandbox (master)$ node ./index.js \n? test password:  ****\ntestinput:  {\n  \"password\": \"1234\"\n}\nthe code for the tests above:\nconst inquirer = require('inquirer');\ninquirer.prompt([{name: 'password', type: 'password', message: 'test password: ', mask: '*'}]).then((answers) => {\n  console.log(`testinput: `, JSON.stringify(answers, undefined, 2));\n  return answers.password;\n});\nmy shell is bash 4.4.12:\ngms@sirius:~/work/HOT/sandbox (master)$ bash -version                          \nGNU bash, Version 4.4.12(1)-release (x86_64-pc-linux-gnu)\n.... Oh, I'm so sorry! nodemon --no-stdin did the trick. ",
    "sunrize531": "I can confirm that in mintty (that comes with git for windows, no additional configuration) moving the cursor with arrows in prompts doesn't work at all. mintty tries to emulate xterm terminal, so I'd guess there would be some problems with xterm as well?. So, more info on this. When script with inquirer prompt in it called directly - it works perfectly fine in mintty too. But if the same script called via npm run in mintty running gitbash - it's completely screwed. Arrows don't work, you can't even close it with Ctrl-C and also the output lacks colours. Probably something to do with stdout/stdin pipes in mintty.. ",
    "sramam": "dang! makes sense.\nThough it would be nice to be able to get the errors messages on some kind of a subscription.\nAnd the same for the output messages. Would make testing a sequence of prompts a breeze. \nThanks for quick turn-around.\n. ",
    "marionebl": "Test timeouts on Travis are unrelated. I removed the local *.png files and added the *.svg demos. The rawgit.com urls now point to the local copies . GitHub strips CSS when embedding SVG directly, that's the main reason why I used rawgit. Adding the prefix again should fix it.. ",
    "damianmr": "Sorry, I answer myself. Basically when you create the answer object you just pass a default option. :). ",
    "jeremy-j-ackso": "@damianmr You should do a PR on the README that adds this.. ",
    "tx4x": "ubuntu, yes! (17.10) pretty much all terminals have the same. tried stdin.setRawMode and what also listening to data & keypress but always the same. maybe this is just a glitch of my OS. . examples: yes, tried many, no difference\n  . ok, will close this; thanks again. ",
    "atian25": "+1 for this.\nworkaround\n```js\n_initInquirer() {\n    const originPrompt = inquirer.createPromptModule();\n    const prompt = (questions, cb) => {\n      if (!Array.isArray(questions)) questions = [].concat(questions);\n  const task = originPrompt(questions, cb);\n  let sendCount = 0;\n\n  // will trigger after each prompt result\n  task.ui.process.subscribe(() => {\n    // only auto answer if current questions list is not finish\n    if (sendCount < questions.length) {\n      process.send({ type: 'prompt' });\n      sendCount++;\n    }\n  });\n\n  // send first key\n  process.send({ type: 'prompt' });\n  sendCount++;\n\n  return task;\n};\nreturn prompt;\n\n}\n```. ",
    "benmonro": "any update on this @kbrandwijk @SBoudrias ?  I would love to have this!. bummer :(. any reason this can't be merged? @kbrandwijk . ",
    "ihack2712": "Check out the ora module by Sindre Sorhus.\nhttps://www.npmjs.com/package/ora. ",
    "sam3d": "Don't suppose you have any updates on this @kbrandwijk? This would be incredibly useful to have!. ",
    "truckingsim": "@SBoudrias its not about making javascript that can call inquirer twice, I already do that.  The problem is node is exiting after doing the second prompt before I can answer.   As soon as I show the second prompt the process exits with a 0 exit code.  \nThe process should still be open because I haven't selected an option on the second prompt, but its not and that's why I created this.\nYou're saying it should work, can you think of any reason why it would exit without me selecting an answer?. @SBoudrias found a way around this by spawning an instance of less (the gnu program, not the css preprocessor) and using that to show data.. ",
    "pofallon": "Maybe an option to specify a \"mask\" function to control how the default values are displayed?  In my case I'm prompting the user to confirm or overwrite an existing API key (input type) and secret (password type).  It would be great to control how the defaults (the existing values) are displayed to the user without affecting the actual default values.  I'd like to display just the first few characters of the API key with an ellipses, while I might display the existing API secret as a series of asterisks.\n(Sorry if that's partially off-topic, but to me both cases are just a mask used to control how the default value is shown to the user...)\nThanks for creating such a great node module!. ",
    "yvele": "Same use case here.. The user can overwrite the default password (found somewhere)\nAnd I don't want the password to appear in the console logs. ",
    "menixator": "It can be a good utility feature to have. Currently, I have a testing setup that heavily relies on inquirer. One of the routines involves logging in, and I prefer to have a fallback password in the environment so that I don't have to type it out every time I run it. Although it's not necessary, it would make the password prompt more complete.. ",
    "RayBenefield": "Just wanted to echo that I just ran into this problem as well. Below is my stack trace in case it helps.\n```\nTypeError: this.lineSubscription.dispose is not a function\n    at EditorPrompt.onEnd (/Users/RayBenefield/Development/kikd/node_modules/inquirer/lib/prompts/editor.js:86:27)\n    at SafeSubscriber._next (/Users/RayBenefield/Development/kikd/node_modules/src/Observable.ts:256:13)\n    at SafeSubscriber.__tryOrUnsub (/Users/RayBenefield/Development/kikd/node_modules/src/Subscriber.ts:255:10)\n    at SafeSubscriber.next (/Users/RayBenefield/Development/kikd/node_modules/src/Subscriber.ts:205:14)\n    at Subscriber._next (/Users/RayBenefield/Development/kikd/node_modules/src/Subscriber.ts:136:22)\n    at Subscriber.next (/Users/RayBenefield/Development/kikd/node_modules/src/Subscriber.ts:96:12)\n    at TakeSubscriber._next (/Users/RayBenefield/Development/kikd/node_modules/src/operators/take.ts:80:24)\n    at TakeSubscriber.Subscriber.next (/Users/RayBenefield/Development/kikd/node_modules/src/Subscriber.ts:96:12)\n    at FilterSubscriber._next (/Users/RayBenefield/Development/kikd/node_modules/src/operators/filter.ts:96:24)\n    at FilterSubscriber.Subscriber.next (/Users/RayBenefield/Development/kikd/node_modules/src/Subscriber.ts:96:12)\n    at RefCountSubscriber.Subscriber._next (/Users/RayBenefield/Development/kikd/node_modules/src/Subscriber.ts:136:22)\n    at RefCountSubscriber.Subscriber.next (/Users/RayBenefield/Development/kikd/node_modules/src/Subscriber.ts:96:12)\n    at Subject.next (/Users/RayBenefield/Development/kikd/node_modules/src/Subject.ts:61:17)\n    at ConnectableSubscriber.Subscriber._next (/Users/RayBenefield/Development/kikd/node_modules/src/Subscriber.ts:136:22)\n    at ConnectableSubscriber.Subscriber.next (/Users/RayBenefield/Development/kikd/node_modules/src/Subscriber.ts:96:12)\n    at MergeMapSubscriber.notifyNext (/Users/RayBenefield/Development/kikd/node_modules/src/operators/mergeMap.ts:154:24)\n/Users/RayBenefield/Development/kikd/node_modules/rxjs/Subject.js:61\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n            ^\nObjectUnsubscribedError: object unsubscribed\n    at new ObjectUnsubscribedError (/Users/RayBenefield/Development/kikd/node_modules/src/util/ObjectUnsubscribedError.ts:12:22)\n    at Subject.error (/Users/RayBenefield/Development/kikd/node_modules/src/Subject.ts:68:13)\n    at EditorPrompt.endExternalEditor (/Users/RayBenefield/Development/kikd/node_modules/inquirer/lib/prompts/editor.js:78:25)\n    at /Users/RayBenefield/Development/kikd/node_modules/external-editor/main/index.js:64:18\n    at /Users/RayBenefield/Development/kikd/node_modules/external-editor/main/index.js:120:24\n    at ChildProcess. (/Users/RayBenefield/Development/kikd/node_modules/external-editor/main/index.js:204:20)\n    at ChildProcess.emit (events.js:159:13)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:209:12)\n```. ",
    "felixsanz": "Even the example from examples folders doesn't work. @SBoudrias do you have any idea on how to debug this further?. @user3587412  can we get a version bump please? this is a critical bug for those that use the editor prompt :disappointed: . ",
    "s50600822": "nvm, it seems my npm went rouge\n``\nPS C:\\Users\\hoaphan\\Inquirer.js> npm list\ninquirer@5.0.1 C:\\Users\\hoaphan\\Inquirer.js\n+-- UNMET DEPENDENCY ansi-escapes@^3.0.0\n+-- UNMET DEPENDENCY chalk@^2.0.0\n+-- UNMET DEPENDENCY cli-cursor@^2.1.0\n+-- UNMET DEPENDENCY cli-width@^2.0.0\n+-- UNMET DEPENDENCY external-editor@^2.1.0\n+-- UNMET DEPENDENCY figures@^2.0.0\n+-- UNMET DEPENDENCY lodash@^4.3.0\n+-- UNMET DEPENDENCY mute-stream@0.0.7\n+-- UNMET DEPENDENCY run-async@^2.2.0\n+-- UNMET DEPENDENCY rxjs@^5.5.2\n+-- UNMET DEPENDENCY string-width@^2.1.0\n+-- UNMET DEPENDENCY strip-ansi@^4.0.0-- UNMET DEPENDENCY through@^2.3.6\nnpm ERR! missing: ansi-escapes@^3.0.0, required by inquirer@5.0.1\nnpm ERR! missing: chalk@^2.0.0, required by inquirer@5.0.1\nnpm ERR! missing: cli-cursor@^2.1.0, required by inquirer@5.0.1\nnpm ERR! missing: cli-width@^2.0.0, required by inquirer@5.0.1\nnpm ERR! missing: external-editor@^2.1.0, required by inquirer@5.0.1\nnpm ERR! missing: figures@^2.0.0, required by inquirer@5.0.1\nnpm ERR! missing: lodash@^4.3.0, required by inquirer@5.0.1\nnpm ERR! missing: mute-stream@0.0.7, required by inquirer@5.0.1\nnpm ERR! missing: run-async@^2.2.0, required by inquirer@5.0.1\nnpm ERR! missing: rxjs@^5.5.2, required by inquirer@5.0.1\nnpm ERR! missing: string-width@^2.1.0, required by inquirer@5.0.1\nnpm ERR! missing: strip-ansi@^4.0.0, required by inquirer@5.0.1\nnpm ERR! missing: through@^2.3.6, required by inquirer@5.0.1\n```\nnpm update fixed it\n``\nPS C:\\Users\\hoaphan\\Inquirer.js> npm update\nnpm notice created a lockfile as package-lock.json. You should commit this file.\n+ cli-cursor@2.1.0\n+ ansi-escapes@3.0.0\n+ external-editor@2.1.0\n+ chalk@2.3.0\n+ mute-stream@0.0.7\n+ lodash@4.17.4\n+ figures@2.0.0\n+ run-async@2.3.0\n+ rxjs@5.5.6\n+ cli-width@2.2.0\n+ string-width@2.1.1\n+ strip-ansi@4.0.0\n+ through@2.3.8\nadded 31 packages in 2.947s\nPS C:\\Users\\hoaphan\\Inquirer.js> npm list\ninquirer@5.0.1 C:\\Users\\hoaphan\\Inquirer.js\n+-- ansi-escapes@3.0.0\n+-- chalk@2.3.0\n| +-- ansi-styles@3.2.0\n| |-- color-convert@1.9.1\n| |   -- color-name@1.1.3\n| +-- escape-string-regexp@1.0.5\n|-- supports-color@4.5.0\n|   -- has-flag@2.0.0\n+-- cli-cursor@2.1.0\n|-- restore-cursor@2.0.0\n|   +-- onetime@2.0.1\n|   | -- mimic-fn@1.1.0\n|-- signal-exit@3.0.2\n+-- cli-width@2.2.0\n+-- external-editor@2.1.0\n| +-- chardet@0.4.2\n| +-- iconv-lite@0.4.19\n| -- tmp@0.0.33\n|-- os-tmpdir@1.0.2\n+-- figures@2.0.0\n| -- escape-string-regexp@1.0.5 deduped\n+-- lodash@4.17.4\n+-- mute-stream@0.0.7\n+-- run-async@2.3.0\n|-- is-promise@2.1.0\n+-- rxjs@5.5.6\n| -- symbol-observable@1.0.1\n+-- string-width@2.1.1\n| +-- is-fullwidth-code-point@2.0.0\n|-- strip-ansi@4.0.0 deduped\n+-- strip-ansi@4.0.0\n| -- ansi-regex@3.0.0-- through@2.3.8\nPS C:\\Users\\hoaphan\\Inquirer.js> node --trace-warnings .\\examples\\password.js\n? Enter a password [input is hidden]\n```. ",
    "mems": "Remove package-lock.json and npm install fix the issue for me (related to when an old run-async version is already installed). ",
    "E314c": "probably worth clarifying that REPL doesn't exit in the clean sense:\nif you add an 'exit' event handler, it never gets called\njavascript\ncliInstance.on('exit', (...args)=>{\n    console.log('REPL saw exit: ', args);\n});\ninstead the repl instance appears to just terminate. ",
    "ellis": "Just as a minor note, baseUI.js has been moved and can currently be found here:\nhttps://github.com/SBoudrias/Inquirer.js/blob/master/packages/inquirer/lib/ui/baseUI.js. ",
    "phobal": "And how do you debugger ? now. console.log ?. ",
    "rajsite": "Ran into this as well, added \"console\": \"integratedTerminal\" to my launch configuration to change from the debugger repl to full terminal and was able to debug inquirer apps using vscode debugger.\nvscode docs: https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_node-console\nMay be worth mentioning in a FAQ or the README :). ",
    "sqren": "Example of launch.json with terminal that supports tty:\njson\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"name\": \"With TTY\",\n      \"program\": \"<path to program>\",\n      \"console\": \"integratedTerminal\"\n    }\n  ]\n}\nThis works really well for my use cases.. ",
    "erichs": "Sorry, this was user error. This code works just fine:\n```\nconst choices = [\n  chalk.red('red'),\n  chalk.green('green'),\n  chalk.yellow('yellow')\n];\nconst question = {\n  type: 'list',\n  name: 'choosy',\n  message: 'choose one',\n  choices: choices\n};\ninquirer.prompt(question)\n  .then(answers => {\n    console.log(stripAnsi(answers.choosy));\n    console.log('fin');\n  });\n```. ",
    "dwieeb": "Regarding the Codacy checks: I followed the style from existing code. Is the linter configured properly? . @SBoudrias I don't think Inquirer is heavy (a fresh npm install only adds 32 packages). But when one of those packages reads and parses half a thousand JS files when the base module is required, runtime performance is poor, especially since this package is meant for CLI programs, which have users continually booting up and shutting down the node runtime. \nIt looks like the next major version of RxJS changes imports anyway. Perhaps when Inquirer upgrades to RxJS 6 (which will be a breaking change) this PR can be included?. @SBoudrias Thanks! I do think we can do more to optimize. A first step would be lazily loading rxjs imports. Not sure how welcome you'll be to that! I'll open a no-pressure PR about it eventually. \nEDIT: PS: congrats on 7000 stars \u2728 . This would be a breaking change, of course.. Wait for https://tc39.github.io/proposal-observable? \ud83d\ude02 \nOn a more serious note, it'd be possible to do a massive refactor of Inquirer to have the \"core\" be event-based, and then have inquirerjs-reactive or something for those who wish to use the reactive interface. Just a lot of work.\nThis library is depended upon by Facebook, ESLint, Vue, Ionic, Yeoman, and likely many more big names. Could we all come together and help? I'd be happy to give more hours of my time. I can't promise anything related to sponsorship, though.. - What is UT?\n- Not too familiar with the plugin API, but I tend to be decent at designing public APIs \ud83d\ude0a \nAmong the goals listed, I'd also like to see:\n1. Near immediate startup time. Probably the most important thing. Inquirer is solely used in Node CLI programs, where the runtime is spun up and down frequently. Doing require('inquirier') should be instantaneous. We can accomplish this by dropping unnecessary dependencies and lazy-loading necessary dependencies.\n1. Automatic non-TTY detection and handling. I think this might be the suitable issue for that. I have a few ideas for this, because I've already been wrapping prompt() to provide non-TTY fallbacks. \n1. Easier/better access to the writable stream within Inquirier. By necessity, Inquirer hijacks stdout through readline, but if a CLI writes to stdout while a prompt is showing, the output gets scrambled. I've discovered if I use the BottomBar UI component, it works as expected, but instantiating a BottomBar seems to have its own set of strange issues and it seems kinda hacky. Maybe this code can explain better what seems to be necessary. It'd just be nice to have a more unified, clean interface. I'm not sure what this would look like yet.\n1. A way to have the default value be modified, not just shown and either accepted or rejected.\nLastly, and this might be a touchy subject for some, but I've seen large codebases benefit greatly from using TypeScript. I'd love to see it considered during this proposed refactor.. I'll make a simplistic example repo and maybe a video to show what I mean. It's a strange use case of using both prompts and having an instantiated bottom bar at the same time. I think it's a bug.. > I was worried working on a major rewrite on a branch might makes it hard to incorporate fixes/features introduced to the current package while we work on the rewrite branch.\nThis will likely be a challenge in any case, especially with the fresh release of 6.0 \ud83d\ude04 \nSee my concern w/ fixed versioning mode above. Personally I'd opt for the branch strategy to keep fixed versioning. . I will 100% help get Inquirer setup with TypeScript. That will be a good task to start off with for me.\nDepending on the timeline of this refactor, we may want to consider targeting Node 8 as a minimum. Node 6 will reach end-of-life next April: https://github.com/nodejs/Release Node 8 will allow us to use async/await natively. . It'd be easy, but there are two issues: 1) Missing newer Node APIs and 2) The output to Node 6 is ES2016, so when new syntax is used, TypeScript has to do some pretty ugly transforms, which result in ugly stack traces.\nBut... those issues probably aren't big enough reasons not to support Node 6.\nWe can always support a minimum of Node 8 later by \"flipping the switch\" and doing a major release. TypeScript will then output ES2017. . Looks like Travis runs npm ci though. . You can add \"private\": true if you like. You can use \"packages/**\" to have packages such as packages/inquirier/ and packages/@inquirer/core/ if preferred. Will you be using fixed versioning mode? I don't think that will work with having 6.x inquirer in with 7.x/latest\nYou can use independent versioning mode though: https://github.com/lerna/lerna#independent-mode---independent. ",
    "kvnlnt": "my bad, type was set to input.. ",
    "dkirchhof": "Hello, i was looking for the number prompt feature and found this issue first. You should update the documentation and typings, that this feature was merged.. Just made a pull request (https://github.com/SBoudrias/Inquirer.js/pull/786).. ",
    "raingerber": "Thank you!. ",
    "LitoMore": "Regarding the coverage test: Am I missing some test?. @SBoudrias Good point.\nWhat about this solution?\njavascript\n{\n  type: 'input',\n  name: 'fav_color',\n  message: \"What's your favorite color\",\n  transformer: {\n    input: function(input, inputs) {},     // This will transform user's input\n    answer: function (answer, inputs) {}   // This will transform answer\n    // Even more...\n  }\n}. @SBoudrias Code updated. @SBoudrias Docs updated ;). +1 for TypeScript!. BTW, I think we can add package-lock.json* and yarn.lock* to the .gitignore file.. Currently, there is no API doing something like this.. Hi @sarthology We could close this issue if it already solved.. It's a bug of the ansi-regex. I created an issue to track this bug.\nhttps://github.com/chalk/ansi-regex/issues/28. The build failed was caused by this issue https://github.com/facebook/jest/issues/8069. > What about a flag passed to the transformer function? isFinal or something like this (@SBoudrias)\nWe should transform answer in answered case, how can we send the isFinal flag to here?. No problem \ud83d\udc4c. ",
    "iovis9": "It seems that you're right. Both pause and close by themselves keep readline from listening further, but it works if I comment them out. Weird.... Yup, I did the following:\n```js\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  });\nrl.close();\nreadline.emitKeypressEvents(process.stdin);\n  process.stdin.setRawMode(true);\nprocess.stdin.on('keypress', (ch, key) => {\n    if (key.ctrl && key.name === 'c') process.exit();\n    console.log(key);\n  });\n```\nNo keypresses. But it seems if I create a new interface I get the keypresses again, which sounds reasonable. \nI'm going to close this up as I don't think this is an issue, thanks man!. ",
    "mniasse": "Hello, I am not sure where I could place my question, so I think I'll do it here:\nWhen calling an inquirer question, a wanted to follow up using a method, which is waiting for a resolve of it's promise:\n```\nconst recInq = () => {\nreturn inq\n    .prompt(filenameQuestions)\n    .then(answers => {            \n        if (!(fs.existsSync(directory + \"/\" + answers[\"filenamequestion\"] + \".json\"))) {\n            console.log(\"Press Ctrl and c or close window to stop recording\\n\\nRecord mode activated! Start recording...\");\n\n//Waiting for a resolve\n                return Runner.record(directory + \"/\" + answers[\"filenamequestion\"] + \".json\");\n            } else {\n                console.log(\"File already exists! Please delete it before creating a file with this name.\");\n            }\n            return;\n        })\n        .then(() => {\n            myPrompt();\n        });\n};\n```\nI am talking about the \"Runner.record(..);\" -Method.\nIn this Method, I want to resolve it by pressing a special Key Kombination, but as it seems, the Keys, except for ctrl & c are always blocked, it just doesn't work. What is really strange, is, that ctrl & c just works if process.stdin.setRawMode is commented out:\n```\nexport class Runner {\n    public static record(newfilename: string) {\n        return new bluebird(resolve => {\n            readline.emitKeypressEvents(process.stdin);\n            if (process.stdin.setRawMode) process.stdin.setRawMode(true);\n        process.stdin.on(\"keypress\", (str, key) => {\n            if (key && key.ctrl && key.name == \"e\") {\n                resolve();\n            }\n        });\n    })\n        .then(() => serial.close());\n}\n\n```\nIs there any workaround for that? How can I use for example the inq.ui.Prompt.onKeyPressed Method for my task?\nSorry for my bad english. \n. ",
    "anchengjian": "It's worked\n``` javascript\n // some inquirer code ...\nconst readline = require('readline')\n  readline.emitKeypressEvents(process.stdin)\n  process.stdin.setRawMode(true)\n  process.stdin.resume()\n  process.stdin.on('keypress', (str, key) => {\n    if (str === '\\u0003') {\n      process.exit()\n    }\n  })\n```\n. It's worked\n```js\n // some inquirer code ...\nconst readline = require('readline')\n  readline.emitKeypressEvents(process.stdin)\n  process.stdin.setRawMode(true)\n  process.stdin.resume()\n  process.stdin.on('keypress', (str, key) => {\n    if (str === '\\u0003') {\n      process.exit()\n    }\n  })\n```. ",
    "antony": "Interesting - thanks!. ",
    "twang-rs": "Why not optionally allow a tuple return instead?  You can place the cursor position at the end of the string if the transformer returns a simple string; otherwise, place the cursor after the first element in the tuple and render the rest of the tuple after the cursor.. ",
    "thetutlage": "Looking for same thing :smile:. ",
    "ehmicky": "This should not be an issue since they are using ^. Removing your package-lock.json then running npm install should solve this problem?. ",
    "wadehuang36": "Yes, it works.  Sorry for that, I should read the document carefully.. ",
    "kwkelly": "Interestingly, the bash builtin read uses stderr to display the prompt text. Redirecting stderr to stdout causes it to be captured in the variable.\n. Looks like this is probably solved by https://github.com/SBoudrias/Inquirer.js/issues/519\nBut is it possible to write to /dev/tty instead of stderr?. /dev/tty is just a file, so it can be written to as you would a file:\n```\nvar fs  = require('fs');\nvar tty = fs.createWriteStream('/dev/tty');\ntty.write('testing\\n');\n```\nHowever, this might not be a great idea since I have no idea what the equivalent would be on Windows.. ",
    "hdorgeval": "Hi @grv190, @SBoudrias , maybe this kind of test is an answer to your problem: inquirer unit testing on publish-please repo \nand inquirer unit testing. ",
    "Odka33": "Thanks for help ! . ",
    "jwinnie": "@SBoudrias Sorry, I'm not very good at JS. How would you do that? Using async/await?. ",
    "felixfbecker": "+1 for TypeScript!. ",
    "codecov[bot]": "Codecov Report\n\n:exclamation: No coverage uploaded for pull request base (master@e96cb32). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #693   +/-\n=========================================\n  Coverage          ?   80.46%         \n=========================================\n  Files             ?       26         \n  Lines             ?     1034         \n  Branches          ?       19         \n=========================================\n  Hits              ?      832         \n  Misses            ?      184         \n  Partials          ?       18\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e96cb32...6b2d409. Read the comment docs.\n. # Codecov Report\nMerging #694 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #694   +/-\n=======================================\n  Coverage   92.73%   92.73%         \n=======================================\n  Files          26       26         \n  Lines        1033     1033         \n  Branches       19       19         \n=======================================\n  Hits          958      958         \n  Misses         75       75\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e965c11...b83acb4. Read the comment docs.\n. # Codecov Report\nMerging #695 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #695   +/-\n=======================================\n  Coverage   92.73%   92.73%         \n=======================================\n  Files          26       26         \n  Lines        1033     1033         \n  Branches       19       19         \n=======================================\n  Hits          958      958         \n  Misses         75       75\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f610f13...fda6333. Read the comment docs.\n. # Codecov Report\nMerging #697 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #697   +/-\n=======================================\n  Coverage   92.73%   92.73%         \n=======================================\n  Files          26       26         \n  Lines        1033     1033         \n  Branches       19       19         \n=======================================\n  Hits          958      958         \n  Misses         75       75\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 06dd904...10dde60. Read the comment docs.\n. # Codecov Report\nMerging #698 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #698   +/-\n=======================================\n  Coverage   92.73%   92.73%         \n=======================================\n  Files          26       26         \n  Lines        1033     1033         \n  Branches       19       19         \n=======================================\n  Hits          958      958         \n  Misses         75       75\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1908432...9b09f62. Read the comment docs.\n. # Codecov Report\nMerging #700 into master will decrease coverage by 0.04%.\nThe diff coverage is 85.71%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #700      +/-\n==========================================\n- Coverage   92.73%   92.69%   -0.05%   \n==========================================\n  Files          26       26            \n  Lines        1033     1040       +7   \n  Branches       19       19            \n==========================================\n+ Hits          958      964       +6   \n- Misses         75       76       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/inquirer/lib/prompts/input.js | 97.77% <85.71%> (-2.23%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 08432db...ef148f5. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@aef66ed). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #710   +/-\n=========================================\n  Coverage          ?   92.74%         \n=========================================\n  Files             ?       26         \n  Lines             ?     1034         \n  Branches          ?       19         \n=========================================\n  Hits              ?      959         \n  Misses            ?       75         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/inquirer/lib/prompts/base.js | 93.47% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aef66ed...d8bf36a. Read the comment docs.\n. # Codecov Report\nMerging #713 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #713   +/-\n=======================================\n  Coverage   92.73%   92.73%         \n=======================================\n  Files          26       26         \n  Lines        1033     1033         \n  Branches       19       19         \n=======================================\n  Hits          958      958         \n  Misses         75       75\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 08432db...40d1b22. Read the comment docs.\n. # Codecov Report\nMerging #714 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #714   +/-\n=======================================\n  Coverage   92.69%   92.69%         \n=======================================\n  Files          26       26         \n  Lines        1040     1040         \n  Branches       19       19         \n=======================================\n  Hits          964      964         \n  Misses         76       76\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 877b42d...8d57405. Read the comment docs.\n. # Codecov Report\nMerging #715 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #715   +/-\n=======================================\n  Coverage   92.69%   92.69%         \n=======================================\n  Files          26       26         \n  Lines        1040     1040         \n  Branches       19       19         \n=======================================\n  Hits          964      964         \n  Misses         76       76\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c756cf7...24d563f. Read the comment docs.\n. # Codecov Report\nMerging #716 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #716      +/-\n==========================================\n+ Coverage   92.69%   92.69%   +<.01%   \n==========================================\n  Files          26       26            \n  Lines        1040     1041       +1   \n  Branches       19       19            \n==========================================\n+ Hits          964      965       +1   \n  Misses         76       76\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/inquirer/lib/prompts/checkbox.js | 99% <100%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1a79fbe...fc1c0e8. Read the comment docs.\n. # Codecov Report\nMerging #718 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #718   +/-\n=======================================\n  Coverage   92.69%   92.69%         \n=======================================\n  Files          26       26         \n  Lines        1040     1040         \n  Branches       19       19         \n=======================================\n  Hits          964      964         \n  Misses         76       76\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1a79fbe...ad37b41. Read the comment docs.\n. # Codecov Report\nMerging #719 into master will decrease coverage by 0.03%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #719      +/-\n==========================================\n- Coverage   92.69%   92.66%   -0.04%   \n==========================================\n  Files          26       26            \n  Lines        1041     1036       -5   \n  Branches       19       19            \n==========================================\n- Hits          965      960       -5   \n  Misses         76       76\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/inquirer/lib/prompts/input.js | 97.5% <50%> (-0.28%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f94e5d0...92cfbd3. Read the comment docs.\n. \n",
    "banminkyoz": "Since there's 'j', 'k' mapping to move up and down like vim, i think mapping 'o' to select is really cool. ",
    "danmactough": "Are you suggesting backspace would clear the default and rerender the prompt? That sounds great!. > Yeah, I think this would be more intuitive and more clearly communicate it with the user.\n\nWant to send a PR?\n\nI've looked into using backspace, and I don't actually see how we could do it correctly.\nIt's possible to intercept the backspace here and remove the default value, but it's not possible to distinguish whether the user has hit backspace on an already empty line (for which we want to clear the default) or instead has hit backspace to remove the last previously-typed character to leave the line blank (which I don't think should trigger clearing the default.\nMaybe an example will clarify.\nIf we change that onKeypress method to:\n```js\n  onKeypress(event) {\n    const { key } = event;\n    // Empty the default when a user clears the input\n    if (key.name === 'backspace' && !this.rl.line) {\n      console.log('');\n      console.log('key', key);\n      console.log('this.rl.line', JSON.stringify(this.rl.line));\n      this.opt.default = undefined;\n    }\nthis.render();\n\n}\n```\n```sh\n$ node packages/inquirer/examples/input.js\n? What's your first name # hit enter\n? What's your last name (Doe) # hit backspace\nkey { sequence: '\u007f',\n  name: 'backspace',\n  ctrl: false,\n  meta: false,\n  shift: false }\nthis.rl.line \"\"\n? What's your last name # ^D\n$ node packages/inquirer/examples/input.js\n? What's your first name # hit enter\n? What's your last name (Doe) a # hit a followed by backspace\nkey { sequence: '\u007f',\n  name: 'backspace',\n  ctrl: false,\n  meta: false,\n  shift: false }\nthis.rl.line \"\"\n? What's your last name # ^D\n``. @SBoudrias Ok, I updated this to use the backspace key instead of stripping surrounding quotes. I realized that we want to get this behavior even if the user has made no keypress before the backspace, so I implemented that little state tracking ashasInputinstead ofisEmpty`. . Thanks for your thoughtful feedback, Simon.. ",
    "lukasholzer": "The typings using an old version of rxjs that is the problem.. ",
    "DrMabuse23": "@lukasholzer and how did you fix that ?. ````\nimport { tap } from 'rxjs/operators';\nimport { prompt, Question} from 'inquirer';\nimport { of, Subject } from 'rxjs';\n/*\n * @export\n * @class TowerCommand\n /\nexport class TowerCommand {\n  private prompts = new Subject();\nconstructor() {\n    of(prompt(this.prompts))\n      .subscribe(\n        console.log,console.log,console.log\n      );\n    this.prompts.next(this.start());\n  }\nstart() {\n    return [\n      {\n        type: 'list',\n        name: 'tower',\n        message: 'What do you want to do?',\n        choices: [\n          {\n            key: 'create',\n            value: 'marketplace',\n            name: 'Create anything new'\n          },\n          {\n            key: 'help',\n            value: 'help',\n            name: 'Help'\n          },\n          {\n            key: 'quit',\n            value: 'quit',\n            name: 'exit the DCP Cli'\n          }\n        ]\n      }\n    ];\n  }\npublic help() {\n    return of('coming soon...')\n      .pipe(\n        tap(txt => console.log(txt))\n      );\n  }\n}\n```\n@adityaparab not for me ?\nArgument of type 'Subject>' is not assignable to parameter of type 'Questions<{}>'.\n  Type 'Subject>' is missing the following properties from type 'Observable>': observeOn, subscribeOn, amb, onErrorResumeNext, and 140 more.ts(2345)\n. which version of rxjs you are using ?. @adityaparabArgument of type 'Subject>' is not assignable to parameter of type 'Questions<{}>'. Type 'Subject>' is missing the following properties from type 'Observable>': observeOn, subscribeOn, amb, onErrorResumeNext, and 140 more.ts(2345)`. ",
    "adityaparab": "@DrMabuse23 - The newer version of \"typings\" seems to work just fine.\nhttps://www.npmjs.com/package/@types/inquirer\n. @DrMabuse23 What's the error you're getting? Also, do you have it published on github by any chance? It would be much easier that way.\nI'm using rxjs v6. @SBoudrias Sorry about the confusion, but the reactive library they are using is rx and not rxjs which is what causing the incompatibility.\nRx - https://www.npmjs.com/package/rx. ",
    "lineus": "I was actually looking for a way to do this myself, it turns out that node makes this pretty easy; calling console.clear() before asking my next question works as advertised. \nHere's a simple example for anyone looking to solve this in the future:\n```js\n!/usr/bin/env node\n'use strict';\nconst cli = require('inquirer');\nlet questions = [];\nasync function ask() {\n  let responses = await cli.prompt(questions);\n  questions = [];\n  return responses;\n}\nfunction choice(name, message, choices, go) {\n  questions.push({ type: 'list', name, message, choices });\n  if (go) {\n    console.clear();\n    return ask();\n  }\n}\nasync function run() {\n  await choice('one', 'choose', ['a', 'b', 'c'], true);\n  await choice('two', 'choose', ['a', 'b', 'c'], true);\n  await choice('three', 'choose', ['a', 'b', 'c'], true);\n}\nrun();\n```\nThis clears the screen before printing each question.. ",
    "NE-SmallTown": "Thanks for you reply, I think maybe it's not true.\nYou can check something like:\nhttps://github.com/SBoudrias/Inquirer.js/issues/166#issuecomment-324805981\nor\nhttps://github.com/carloscuesta/gitmoji-cli/blob/master/src/prompts.js#L39\nBy the way(sorry for maybe here is not the right place to ask), are you in beijing of China now?. Woo, small world. Maybe we could have a little bit chat, do you use wechat or other IM softwares?\nYea, I searched before but don't find anything, that's why I file this issue. I don't know there is a plugin mechanism before, thanks for you reply.. @SBoudrias Yea, ping you ~. ",
    "rdpacheco": "This would be very valuable for testing. > @rdpacheco See #709\nThis is great, hope it gets merged soon. Thanks!. ",
    "jeasonstudio": "what about pre-set 'environmental variable'  @aleclarson . ",
    "arcanis": "What's this PR status?. ",
    "ZYSzys": "Yeah, it seems to be more reasonable indeed.. ",
    "sergei-startsev": "@SBoudrias is there a chance to publish the changes?. @SBoudrias thanks for the release!. ",
    "phantom0424": "Yes, I found that I referenced to the mismatched issue #699  . . I think the rl.line value should correspond to the selected index, otherwise it is not very strange?. ",
    "apierzch": "The list of choices that I want to display is ordered chronologically, it's very confusing when the last item appears before first.. ",
    "SurenAt93": "@SBoudrias There is at least should be an ability to change/control this behavior.. ",
    "mnpenner": "I'm using this for now:\njs\nasync function ask(question) {\n    return (await Inquirer.prompt({...question,name:'_'}))._\n}. ",
    "bokub": "From the npm documentation:\n\nThis file is intended to be committed into source repositories. \n",
    "zzzgit": "\nhere is a typo.... ",
    "itsravenous-sky": "Any news on this? Sometimes it's useful to present a Y/N question where only one answer is acceptable. Our use case is a commit prompt that asks a few things, among which are:\n\nThe type of commit this is (a feature, refactor, bugfix, etc)\nWhether you introduced breaking changes\n\nAnswering \"yes\" to the second question is only acceptable if your answer to the first is \"feature\". We still want to ask the question, because we want to bomb out if someone tries to mark a breaking change commit as, say, a refactor, and tell them why, rather than just hiding the question with when.. ",
    "notnarb": "As of today, this issue is still present:\nshell\n$ curl -sS $(npm v inquirer dist.tarball) | tar tvzf -\n-rw-r--r-- 0/0            1327 1985-10-26 01:15 package/package.json\n-rw-r--r-- 0/0           16945 1985-10-26 01:15 package/README.md\n-rw-r--r-- 0/0            2344 1985-10-26 01:15 package/lib/inquirer.js\n-rw-r--r-- 0/0             921 1985-10-26 01:15 package/lib/objects/choice.js\n-rw-r--r-- 0/0            2755 1985-10-26 01:15 package/lib/objects/choices.js\n-rw-r--r-- 0/0             779 1985-10-26 01:15 package/lib/objects/separator.js\n-rw-r--r-- 0/0            3609 1985-10-26 01:15 package/lib/prompts/base.js\n-rw-r--r-- 0/0            6102 1985-10-26 01:15 package/lib/prompts/checkbox.js\n-rw-r--r-- 0/0            1851 1985-10-26 01:15 package/lib/prompts/confirm.js\n-rw-r--r-- 0/0            2330 1985-10-26 01:15 package/lib/prompts/editor.js\n-rw-r--r-- 0/0            6387 1985-10-26 01:15 package/lib/prompts/expand.js\n-rw-r--r-- 0/0            2220 1985-10-26 01:15 package/lib/prompts/input.js\n-rw-r--r-- 0/0            4447 1985-10-26 01:15 package/lib/prompts/list.js\n-rw-r--r-- 0/0             695 1985-10-26 01:15 package/lib/prompts/number.js\n-rw-r--r-- 0/0            2212 1985-10-26 01:15 package/lib/prompts/password.js\n-rw-r--r-- 0/0            4826 1985-10-26 01:15 package/lib/prompts/rawlist.js\n-rw-r--r-- 0/0            1792 1985-10-26 01:15 package/lib/ui/baseUI.js\n-rw-r--r-- 0/0            2350 1985-10-26 01:15 package/lib/ui/bottom-bar.js\n-rw-r--r-- 0/0            3057 1985-10-26 01:15 package/lib/ui/prompt.js\n-rw-r--r-- 0/0            1368 1985-10-26 01:15 package/lib/utils/events.js\n-rw-r--r-- 0/0            1490 1985-10-26 01:15 package/lib/utils/paginator.js\n-rw-r--r-- 0/0            1179 1985-10-26 01:15 package/lib/utils/readline.js\n-rw-r--r-- 0/0            3864 1985-10-26 01:15 package/lib/utils/screen-manager.js\n-rw-r--r-- 0/0             780 1985-10-26 01:15 package/lib/utils/utils.js. ",
    "ohjimijimijimi": "Hey, I just came across the same question. I solved it with an input question as follows:\nconst questions = [{\n    type: 'input',\n    name: 'list',\n    message: 'What are you looking for?',\n    suffix: ' Please, enter a comma separated list of items',\n    filter: (versions) => {\n      return versions.split(',').map(item => item.trim(item))\n    }\n  }\n];\nWith the input Song 1, Song 2 , Song 3 the output will be ['Song 1', 'Song 2', 'Song3'].\nHope it could help\n. ",
    "redxtech": "That makes a lot of sense - thanks a ton.. @ohjimijimijimi Just an FYI you can improve this and make it less code if you refactor the filter line to this:\njavascript\n{\n    filter: versions => versions.split(',').map(item => item.trim(item))\n}. ",
    "gustavomerini": "ok, thanks, i'll investigate better.. ",
    "Cyclonecode": "I also agree with this approach: \n\nI think it'd be okay to set the answer to default when when returns false.\n\nSeems like the simplest way.. ",
    "udithv": "@SBoudrias yes but not the whole console. just the output. Something like logUpdate module where the output is replaced with another... only in my case it has to be replaced with nothing.. ",
    "Nessworthy": "Running into the same issue in node v10.13.0 and inquirier v4.0.0. Will give inquirer an update and check later.. Just commenting back on this, upgraded to inquirer 6.2.0 and it has resolved my issue! Thanks devs :). ",
    "braydenc303": "I get the same thing with node v11.4.0 and inquirer v6.2.1. Rolling back to 6.2.0 fixed it for me.. ",
    "mickeypearce": "I similarly use inquirer in a spawn process. I inherited the stdin stream and It works quite well:\njs\nchild.spawn(process.execPath, params, {stdio: [\"inherit\"]})\nBut there is a minor glitch when using prompt inputs. It echoes the inputed string char by char:\nbash\n? Your input: h\n? Your input: he\n? Your input: hel\n? Your input: hell\n? Your input: hello\nAny idea on how to solve this issue? I tried inheriting the stdout  {stdio: [\"inherit\", \"inherit\"]} but it doesn't work.\n. Hey, I think exec is \"synchronous\" in a way that it waits for the child process to end and then returns all data at once. It hangs in my case (waits on input?) and doesn't respond... \nCan you please tell me a bit more about ANSI clear codes. Which are in question here, cursor maybe? thanks.. I figured it out. It is:\njs\nchild.spawn(process.execPath, params, {stdio: \"inherit\"})\nwhich inherits whole stdio (including stdout and stderr) not only stdin as I had in my previous case. \ud83d\ude44\nsorry to bother you and thanks.. ",
    "jeffreyhshapiro": "I figured out my problem as well- really easy\n```\n!/bin/bash\nstuff happening here, and pass data into script\nexec < /dev/tty;\nnode /path/to/node/script/index.js\n```. ",
    "sarthology": "Ohk on it.\n. Yeah it's solved from my side.. Wait, there is one more bug. I'm fixing it too.. ",
    "marcoschaarschmidt": "I've the same problem on a windows machine with node 11.9.0 too.. ",
    "Ezekiel-DA": "\nAny chance you called inquirer 2 times? Maybe there's some issue with listeners cleanup on the readline?\n\nI'm literally invoking the 5 line script so that's unlikely!\nI've actually narrowed down the issue to Node 11.8.0. The exact same script behaves correctly with 11.7.0 and fails with 11.8.0.\nCurrently git bisecting the Node repo and rebuilding to try and narrow it down, which isn't exactly how I was intending to spend my work day but I can't have this internal tool I built start misbehaving just as we were starting to deploy it to everyone \ud83d\ude31 \nI suppose this means this issue isn't really for you but once I know the exact commit in Node that breaks this I might need your expert opinion on what they broke!. The underlying issue in libuv has been fixed and the relevant upgrade of the dependencies was just merged in Node: https://github.com/nodejs/node/pull/26037\nSo the fix for this should be an upcoming in Node 11.9.1 soon, I guess!. This is fixed with Node 11.10.0!. ",
    "nicojs": "I can confirm that it still persists in node 11.9 :(. ",
    "ambiguities": "-.- I should have looked over my detailed message... . ",
    "rwson": "I changed my call like below and work well\njavascript\ninquirer.prompt(\n[\n {\n    name: 'language',\n    message: 'which language would you like to write this project?',\n    choices: ['JavaScript', 'TypeScript'],\n    type: 'list'\n },\n {\n      name: 'name',\n      message: 'your project name',\n      type: 'input',\n      default: 'xxxxxx'\n }\n]\n). ",
    "gskapka": "```javascript\nconst gimmeMahVariable = _ =>\n  process.env.yourVariable\n    ? Promise.resolve(process.env.yourVariable)\n    : inquirer.prompt({\n      // stuff...\n    })\ngimmeMahVariable()\n  .then(_mahVariable => // ...\n```. ",
    "sumarlidason": "It's not so much cli-cursor as signal-exit. signal-exit ensures the cursor is always re-enabled upon process exit. A lot of code to do something so simple. I lack the bandwidth to dig deep -- will revisit. I need to build a sample that reproduces the actual problem. . ",
    "Neunerlei": "As I did not read the code to determine what went wrong, but only tried what by #767 seemed logical; I don't see exactly what I should write them /o. ",
    "mattsalt": "Having read the supported client list I have tried this again on cygwin and it works correctly. \nIt appears there is a problem with using git-bash on windows 7.. Thanks. I'll bear that in mind! Cygwin is working fine for me so I'm happy again. Closing the issue as it's nothing to do with inquirer.. ",
    "aliaksandr-yermalayeu": "My mistake. Blank space was restored in the latest commit.. ",
    "dangen-effy": "I'll modify it  as +=\nThank you for review.. Actually, += = are doesnt matter. Because this.rl.cursor is set to 0 on error.\nBut for readability using += is more reasonable i think.. So += and = both are not correct?\nDo you say that it should be implemented more codes above?. "
}