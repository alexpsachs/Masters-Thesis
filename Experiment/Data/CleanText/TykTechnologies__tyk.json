{
    "nodesocket": "You missed it in a few spots. :-) Namely the error responses.\nmiddleware_oauth2_key_exists.go\nmiddleware_check_HMAC_signature.go\nmiddleware_basic_auth_check.go\nmiddleware_auth_key.go\n. Nice, had to lookup the definition of pedant. ;)\n. ",
    "lonelycode": "Lol, pedant ;-) Fixed. \n. Thanks!\n. The test failures were because the new osin Client is an interface, so nested data structs needed to be initialised with defaults before unmarshalling Redis data. Have modified and fixed, tests pass now. \nThanks for updating the deps! Serves me right for having old versions hanging around...\n. Smashing, thanks for fixing, was an oversight on my part... should make getting set up with a vanilla box much clearer.\n. Beautiful, thanks :-)\n. Hi Alex,\nI agree that option 3 sounds the most attractive, as it also opens up the data collection element to third-party processes in case Mongo isn't suitable back-end (Mongo is used mainly because of the aggregation framework and the Tyk Dashboard).\nPersonally I think simpler is better :-)\nIt should be relatively easy to enable this by simply checking the purgeDelay value in the globals setup and not firing off the goroutine (with an appropriate log message, we'll need to warn the user that their Redis DB might get massive), though I might use -1 instead of 0?\nhttps://github.com/lonelycode/tyk/blob/86678f56ee7ab27194e8e53aad3c9a7fa8422a78/main.go#L55\nLonger term perhaps the analytics handler should be converted to an interface, that way Tyk could write directly to alternative stores...\nWill add that to roadmap.\nCheers,\nMartin\n. Fixed in #9 \n. Top man! Very nice, and cleaned up that ugly object creation... nice :-)\n. Hi Alex,\nIf you are using the master branch, then there's a caveat in how key collections are handled. In order to enable separate AuthHandlers and SessionHandlers (these are interfaces now in order to be extensible to provide support for multiple identity providers), key collections need to be pulled by their API ID (as they may be stored across multiple SessionHandlers and Storages: imagine running two API's, one that is REST-based and can use Redis/built-in auth and another that needs to check LDAP for authentication but store sessions in Memcached). The new structure enables this to be segregated on an API basis, but means that aggregate functions like /tyk/keys need extra data to function. \nBasically, if you request /tyk/keys/ with a request parameter value for api_id, then the keys that are assigned to that API will be listed out.\nFor example:\n/tyk/keys/?api_id=abc1\nI'm open to ideas on how to handle this more gracefully, perhaps the error should be clearer regarding the parameter requirements :-)\nThe handler is here:\nhttps://github.com/lonelycode/tyk/blob/86678f56ee7ab27194e8e53aad3c9a7fa8422a78/api.go#L273\nLet me know how you get on - certain things in master are different. Crucial ones are listed in the changelog:\nhttps://github.com/lonelycode/tyk/blob/master/CHANGELOG.md\n. That sounds like a good idea - it feels like that API function should have been there all along ;-)\nInitially all this was done by the dashboard, because configurations lived in the Mongo database and so could be queried directly, so the Tyk process didn't have this function.\nWill put it in my Todo list...\n. Created a new endpoint /tyk/apis/ that gives active API information, no need for detail view, returns an array of API Defintitions\n. Hi,\nWe do have a roadmap - it's a trello board that's public here:\nhttps://trello.com/b/59d5kAZ5/tyk-api-gateway-roadmap\nNew suggestions and requests can either be brought up in the GitHub issue tracker, or alternatively at our community site (a Google group) which you can find at http://Tyk.io.\nAny questions just let me know :-)\n\nOn 18 Sep 2014, at 19:47, shopline notifications@github.com wrote:\nInteresting project and affordable for us smaller companies. I thank you for that. We need to settle on an API gateway instead of writing our own but the pricing is ridiculous.\nI hope this project will grow. Do you have a roadmap you could share?\nThank you.\n\u2014\nReply to this email directly or view it on GitHub.\n. Not at the moment, though since Tyk acts as an upstream proxy there's nothing stopping you adding reverse proxy in front of it to cache requests once they are handled by Tyk. \n\nThe reasoning is that we don't want to re-invent tech that's already out there that handles caching very well, and caching around web applications is well established, so using varnish or memcached integrated into your own app would be more effective than having Tyk try and shoe horn it in.\nTyk records data on all requests for quota and rate limiting, so it does need to hit the database in order to fulfil its primary gate keeping functions\nFor speed Tyk uses Redis, which is meant to be used in high traffic environments and can hand many read/writes cleanly. It can also be load balanced and clustered, so it can scale quite easily.\nHappy to hear thought s on what could be done to make cache integration easier though - there's many assumptions here that NginX is being used to plumb request routing.\nCheers,\nMartin\n\nOn 18 Sep 2014, at 23:48, shopline notifications@github.com wrote:\nAny support for cache?\nHitting the same request twice or more with a cache can really save resource/backend server load.\n\u2014\nReply to this email directly or view it on GitHub.\n. Well, it is actually recommended to run Tyk behind a web server as an upstream proxy, so the stack would look like:\n\nNGinX > Tyk > (Cache) > Application -> DB\nThis should take care of the SSL issue as you could terminate the SSL connection at the NGinX end and then handle unencrypted traffic upstream afterwards, this would simplify things massively, exposing a cache to a DMZ might not be a good idea.\nI'm not overly familiar with Varnish, but looking at some configuration examples configuring it as a reverse proxy is relatively simple (at least that's what these templates imply: https://github.com/mattiasgeniar/varnish-3.0-configuration-templates), caching only methods and paths that are needed, since SSL is no longer a problem (as it is dealt with by the web server, where it should be handled), you can pipe traffic via Tyk through Varnish which is reverse proxying your web app.\n. Added a naive cache (redis) middleware feature in latest merge.\n. I like the idea, would definitely improve the potential scale of Tyk. Question: have you seen any good Golang extensibility examples? Would love to see a reference implementation to emulate.\n. I came to a similar conclusion while investigating the problem.\nThere is actually a middleware \"framework\" in the current master branch, all that needs to be done is implement the TykMiddlewareImplementation interface and subclass a parent type (TykMiddleware) to set it up - take a look at https://github.com/lonelycode/tyk/blob/master/middleware_ip_whitelist.go for a recent real-world example, as a developer feature It's not fully documented yet though.\nWith the middleware interface and class you can define configuration-level elements so they don't need to be included anywhere else in the code (i.e. the main ApiDefintion object), and create the ProcessRequest() method to manipulate the request and response objects. Inserting the middleware into the request chain is also relatively easy as that is handled in a single place (https://github.com/lonelycode/tyk/blob/master/main.go#L230).\nNot ideal, but a step in the right direction. I think it still needs cleaning up.\nKeen to see what you think about the approach, let me know.\n. A great idea - can't believe the feature was missed out! Tyk doesn't currently support method ignores out of the box, it would need to be added in (shouldn't be too hard though):\nThe things that would need doing are:\n1. Enabling users creating new defs to add methods\n2. Extending URLSpec to include a methods slice\n3. Populating tURLSpecs\n4. Actually checking if the method is supported when matched in a request\nFirst off, https://github.com/lonelycode/tyk/blob/master/api_definition_manager.go#L87 would need to be changed to use a map[string][]string, which would be map[<URL>]['method1', 'method2', ...], this way we can define ignored methods against URL's\nTyk converts these verbose definition elements into leaner objects called an ApiSpec (https://github.com/lonelycode/tyk/blob/master/api_definition_manager.go#L134), these use regexps to identify paths quickly when a request hits the router, the ApiSpec maps a regexp to a URLSpec, which would  need extending with a slice of strings such as []string Methods (https://github.com/lonelycode/tyk/blob/master/api_definition_manager.go#L127) to hold the methods array that was created in the definition.\nIn order to populate this object at load time, we'd need to incorporate the new values into the MakeSpec function, in particular the loop that creates the URLSpec values: https://github.com/lonelycode/tyk/blob/master/api_definition_manager.go#L208\nTo actually ensure the HTTP method gets checked, the IsURLAllowedAndIgnored function would need extending to include a method check on match https://github.com/lonelycode/tyk/blob/721a05f468269e53c3d32d4063e80c4eb2ded91f/api_definition_manager.go#L333\nIt would also need to have it's signature changed to include the method data as part of the function parameters (or change it to take a request object pointer) https://github.com/lonelycode/tyk/blob/721a05f468269e53c3d32d4063e80c4eb2ded91f/api_definition_manager.go#L438\nThe versioning code that controls most of this needs refactoring, it's a little messy at the moment, would much rather have all these methods in the middleware, but that's something I'll tackle at a later date :-/\n. I think you may have identified a pretty serious bug!\nIn the loadApps() function in main.go, in the middleware chain, authentication happens before version checking. Which means ignores paths are only ignored in the context of being versioned, not being free of auth.\nIt should be a quick fix (I will patch tomorrow - it's 1am atm) simply moving &VersionCheck up above keyCheck should solve it, so long as it doesn't require user context (which I think it doesn't).\nGood spot!\nBtw are you running master branch or a binary version?\nM.\n. Minor bugfix release for ignored paths now published:\nhttps://github.com/lonelycode/tyk/releases/tag/v1.1.1\n. Currently it's not possible, one endpoint per app definition I'm afraid.\nIt's an interesting idea though, since Tyk can be deployed load-balanced behind NGinX, the individual nodes would round-robin out to the hosts (which could essentially create a random pattern), so it might be better to assign targets randomly from the pool, at least we can hope for a standard distribution across endpoints that way.\nOf course, running the API endpoint behind it's load balancer would would be a preferred option instead of trying to give Tyk load-balancing features (there's better, more mature kit out there to handle that sort of thing).\nAlternatively, Tyk could be deployed on the same machine as the API endpoint, with the target URL being localhost, then these could be auto-scaled behind an ELB, you'd need to duplicate your app definition, but that could be done using the DB back-end option, then the only configuration that you would need to handle would be the Analytics purge, but you could tell all the nodes to not purge and have a dedicated analytics purge instance that does nothing but shovel data out of Redis.\nI think I might be over-thinking it ;-)\nIt really depends on how you want to deploy tyk, as a self-contained application it is quite flexible and can adapt to many set ups. \nWhat do you think?\n. I see, that makes sense.\nThere is the possibility of trying to compile Tyk for windows, but I believe some of the deps aren't 100% compatible, though it should be a target I guess, will put it on the list :-)\n\nOn 12 Nov 2014, at 19:31, Patrick M. Slattery notifications@github.com wrote:\nOK, that's what I suspected.\nThe simplest scenario that I can see is:\nClient -> Nginx_gateway(443) -> Tyk(8080) -> Nginx_upstream(8443) -> Endpoints(01-06)\nWhere Nginx_gateway(443), Tyk(8080) and Nginx_upstream(8443) are all running on a single VM and the endpoints are running in their six separate VMs.\nIn our case the application endpoints are IIS on Windows so it's not possible to consolidate to a single host.\n\u2014\nReply to this email directly or view it on GitHub.\n. Fixed in master - you can now round-robin load balance to multiple upstream services using \n\n...\n    \"enable_load_balancing\": true,\n    \"target_list\": [\n        \"http://server1\", \n        \"http://server2\", \n        \"http://server3\"\n    ],\nIn the proxy section of the API Definition\n. Amazing idea, and pretty simple to implement I'd think, maybe extend the ApiDefintiton object to include a new section (https://github.com/lonelycode/tyk/blob/master/api_definition_manager.go#L49) that went:\nAnalyticsMeta struct{\n    EnableIgnoreIPs bool\n    IgnoredIPs map[string]bool\n}\nThen the RecordHit function (https://github.com/lonelycode/tyk/blob/master/handler_success.go#L111) would need to take the ApiSpec as a parameter (https://github.com/lonelycode/tyk/blob/a097a87dfef64cc2427def9e3ba3b962b5c3e302/analytics.go#L61) so that it can check for the IP in the map, if it exists, it doesn;t do the write and we still keep the request clean.\nWhat do you think?\n. That's a good point, I get obsessed with granularity when it really isn't necessary with this. Good idea.\nAlso, should it be needed at the application level, it can always be added.\n. There's a solution to this, it's similar to how ignored paths are handled. In the config, end users can use simple strings to define the URL to be ignored, but the management class, on load, will parse and compile them to regexp objects so that pattern matching is faster when a request goes through the middleware machinery. We could do something similar here.\nIt would mean adding some additional methods, but they don't need to be exposed with JSON tags.\nSo we change\nIgnoredIPs      map[string]bool `json:\"ignored_ips\"`\nto \nIgnoredIPs      map[string] `json:\"ignored_ips\"`\nignoredCompiledIPs      map[string]bool\nThen add a method to the Config struct called LoadIgnoredIPs() which converts the string slice to a map[string]bool, this can then be called on startup here.\nWe then add your StoreAnalytics() method to the Config struct as well, this does a key check on ignoredCompiledIPs, this can then be called from the success and error handlers as the config object is global.\nThis means no pesky loop and no duplicated code, while keeping the functionality in the object where it makes semantic sense (Config).\nWhat do you think?\n. Smashing, thanks Alex!\n. Yep, tests were failing - was just about to add this back in ;-)\n. I think I may know what's wrong here, the version_data section still requires the ignored, blaklist and whitelist metadata. In a non-versioned API Tyk uses a \"Default\" version (the first in the list). So if you add a single version entry with empty values it should behave itself:\n{\n    \"name\": \"API\",\n    \"api_id\": \"1\",\n    \"org_id\": \"default\",\n    \"definition\": {\n        \"location\": \"header\",\n        \"key\": \"version\"\n    },\n    \"auth\": {\n        \"auth_header_name\": \"authorization\"\n    },\n    \"version_data\": {\n        \"not_versioned\": true,\n        \"versions\": {\n            \"default\": {\n                \"name\": \"default\",\n                \"expires\": \"\",\n                \"paths\": {\n                    \"ignored\": [],\n                    \"white_list\": [],\n                    \"black_list\": []\n                }\n            }\n        }\n    },\n    \"proxy\": {\n        \"listen_path\": \"/\",\n        \"target_url\": \"http://backend:8000\",\n        \"strip_listen_path\": true\n    }\n}\nWill fix the HTML encoding, that'a a little odd...\n. Fixed HTML encoding... not ideal, but fixed, still pondering if we should switch out from HTML templates instead of text.\n. Great idea. Was in the original spec actually :-) will go back on the todo list! \n\nOn 28 Nov 2014, at 14:29, Jimmi Dyson notifications@github.com wrote:\nCurrently the /apis/ endpoint lists APIs - how about POST/PUTting definitions there too? Thinking of using this in a Kubernetes/Docker environment & being able to update API definitions through REST calls rather than adding files or editing the database would be pretty useful. (Love the project by the way!)\n\u2014\nReply to this email directly or view it on GitHub.\n. We're still reviewing this feature request. \n\nThe core issue with API management via the endpoint is that when tyk is deployed as multiple nodes across VM's (a pretty traditional deployment scenario tbh), writing an API Definition to file and reloading is inefficient as it introduces the risk of files going out of sync across the nodes. \nThe dashboard has an API endpoint that will write to the DB to update a definition (in the licensed version, it will also trigger a hot-reload event and update the whole cluster). We're still writing all the documentation for the dashboard API, it's a lot bigger and stricter than the Tyk Gateway.\nEdit: This has been added to the roadmap as a proposal.\n. There might be a bit of a misconception as to the architecture of Tyk, the dashboard speaks to Tyk via the REST API exclusively, it is essentially a client. it also serves as a CRUD GUI for putting definitions into the DB but that's about it, at it's core, it only ever speaks to Tyk directly, otherwise there would be two interfaces and that would be bad architecture :-).\nOn start, Tyk pulls it's configurations either from disk or from Mongo and they remain in memory, in this case, Mongo basically acts as the Master you mention in your diagram, currently it's basically a dirty object store. in multi-node configurations only one tyk node would be configured to purge.\nA key issue here is fail-over and accidentally creating a SPOF, both Redis and MongoDB can be clustered well, so they offer a safe place to store keys and configurations. Creating a new service would seem dangerous, as if it goes down then your management infrastructure is gone.\nThis can be overcome though - but it means a rethink (and worth investigation).\nIf we embedded the API Definition management to live inside a Master, and assume that the master is actually just a Tyk node, then there is another possibility:\n- Tyk nodes create a quorum, they reach a consensus to elect a master, this master's configurations are synchronised and flushed to disk across the cluster\n- If the master fails, the quorum elects a new master\n- Reloading the master should then reload the remaining cluster and re-synch configurations\n- Adding new nodes means the quorum grows\nThe only problem to solve is:\n- Notifying a registry where the master is (although this is trivial)\n- Speed of synchronisation and reload (it needs to be extremely quick in HA envs), updates need to travel through the nodes, be flushed and then reloaded all at once.\n- Figuring out how to make service discovery seamless\nI quite like the idea, but I feel it needs some deep consideration. I'll put it in the roadmap, as it serves to make the application more resilient.\nthanks! :-D\n. We will be adding the capability to post new definitions into a Tyk node, and it flushes them to disk. A hot reload call after this would make the definition live.\nAny multi-process and multi-node installation will need to target all nodes in order for them to be in sync.\nFor master -> slave writes, it is recommended to use the advanced API that ships with the dashboard. This will also be fully documented.\n. Fixed in master branch.\n. Hi,\nNice one :-)\nQuestion - what is the stage/tyk binary? I'm assuming it needs to be built every time?\nMartin\n. I'm not that familiar with docker would appreciate any help :-)\n. Hi,\nThe tyk_analytics config file has the redis password set, which means it will be trying to authenticate the session when it creates it. \nTo fix this, set a password in redis.conf (http://redis.io/topics/security), restart the redis process, then update both tyk.conf and tyk_analytics.conf to use the new password. \nIt's a known bug with the dashboard, it expects a secured redis DB while tyk doesn't, we'll be fixing this soon :-/\nLet me know how it goes,\nMartin\n. I should mention your email address is the login username, not first or last name... will make that clearer in the UI, nice catch :-)\n. Excellent idea. Marked as enhancement and adopted.\n. Latest merge fixes this issue \nHeaders are added on responses, they may be slightly (-1) out of sync with the rate-check endpoint, but this is considered acceptable for now.\n. This was buggy in dev, fixed now - you need to call /{api-listen-path}/tyk/rate-limits/ to get the data. \n. You got it, if you are using a standard token based setup, and are not using the Auhorization header (maybe the APi was built to use x-myappname-token), it can be set in this value.\nIt's referenced in the key middleware\n. Hi Ricardo,\nThis is a known bug, the dashboard will show stats, but only in 24 hours. We've fixed this in the next version, it only affects the free version of the dashboard due to the 7-day stats limit calculation.\nIf you still can't see the stats in 24 hours, then let me know - we'll take a closer look.\nMany thanks,\nMartin\n\nOn 25 Dec 2014, at 17:09, Ricardo Coelho de Sousa notifications@github.com wrote:\nHello , Maybe something I'm doing wrong, but I've just installed tyk version 1.2.1 and dashboard 0.8 on a ubuntu 14.04. Everything seems to be working correctly as I verify the proxy is working correctly ( I can reach my endpoint through tyk) and I can also login the dashboard without problems. I have configured tyk to use use_db_app_configs and managed to create the API from the console.\nSo far so good. tyk starts ok I think:\nTyk.io Gateway API v1.2.1\nCopyright Jively Ltd. 2014\nhttp://www.tyk.io\nINFO[0000] No configuration file defined, will try to use default (./tyk.conf) \nINFO[0000] Setting up analytics DB connection\nINFO[0000] Using MongoDB cache purge\nINFO[0000] Connecting to redis on: localhost:6379\nDEBU[0000] Enabling debug-level output\nListening on port: 8080\nINFO[0000] Listening on [::]:8080\nINFO[0000] Using App Configuration from Mongo DB\nDEBU[0000] INITIALISING EVENT HANDLERS\nINFO[0000] Loading API configurations.\nINFO[0000] Loading API Spec for: rcsousa\nINFO[0000] Connecting to redis on: localhost:6379\nINFO[0000] Connecting to redis on: localhost:6379\nINFO[0010] Not connected to analytics store, connecting... \nDEBU[0112] Setting key: analytics-2014122516-422c9f6e-fddd-439f-73d0-43099ea0d014 \nDEBU[0122] Setting key: analytics-2014122516-bccee697-89cb-4941-4786-8c5155761bfb \nDEBU[0133] Setting key: analytics-2014122516-1ca6b565-2576-40dd-44ab-d6c85c66276d \nDEBU[0308] Setting key: analytics-2014122516-4f021902-85ff-4852-4577-9fa88a81cc54 \nDEBU[0827] Setting key: analytics-2014122516-524f35a2-f0ae-4d07-485e-5be3d4e36578 \nDEBU[0846] Setting key: analytics-2014122516-c455b1b3-2e55-4adf-5b2b-f321c7db7a95 \nDEBU[0975] Setting key: analytics-2014122516-1396192c-c8ac-4688-6fb0-4a363d4536e7 \nDEBU[1058] Setting key: analytics-2014122516-cc3781a2-cc65-4f35-7207-662d413d951a \nDEBU[1073] Setting key: analytics-2014122516-0f6d9753-58ad-47f6-657d-e28ef383c467 \nDEBU[1269] Setting key: analytics-2014122516-7fbe5842-4505-4fcf-5b77-7afff22cbf84\nand as you can see, statistics are being correctly add to the Mongodb collection.\nshow dbs\nlocal 0.03125GB\ntest (empty)\ntyk_analytics 0.0625GB\nuse tyk_analytics\nswitched to db tyk_analytics\nshow collections\nsystem.indexes\ntyk_analytics\ntyk_analytics_users\ntyk_apis\ntyk_organisations\ndb.tyk_analytics.count()\n31\ndb.tyk_analytics.findOne()\n{\n\"_id\" : ObjectId(\"549c30c5e3eb809beead5f13\"),\n\"method\" : \"GET\",\n\"path\" : \"\",\n\"contentlength\" : NumberLong(0),\n\"useragent\" : \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36\",\n\"day\" : 25,\n\"month\" : 12,\n\"year\" : 2014,\n\"hour\" : 15,\n\"responsecode\" : 200,\n\"apikey\" : \"\",\n\"timestamp\" : ISODate(\"2014-12-25T15:44:02.614Z\"),\n\"apiversion\" : \"Non Versioned\",\n\"apiname\" : \"rcsousa API\",\n\"apiid\" : \"1\",\n\"orgid\" : \"default\",\n\"oauthid\" : \"\"\n}\nAlthough everything seems to be ok.. I can't see any changes in the dashboard ... It's like there's no data to display\nKind regards,\nRicardo\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi Ricardo,\n\nWhat version of Mongo DB are you using? The stats pipeline only works with 2.6 and up.\nMany thanks,\nMartin\n\nOn 25 Dec 2014, at 17:09, Ricardo Coelho de Sousa notifications@github.com wrote:\nHello , Maybe something I'm doing wrong, but I've just installed tyk version 1.2.1 and dashboard 0.8 on a ubuntu 14.04. Everything seems to be working correctly as I verify the proxy is working correctly ( I can reach my endpoint through tyk) and I can also login the dashboard without problems. I have configured tyk to use use_db_app_configs and managed to create the API from the console.\nSo far so good. tyk starts ok I think:\nTyk.io Gateway API v1.2.1\nCopyright Jively Ltd. 2014\nhttp://www.tyk.io\nINFO[0000] No configuration file defined, will try to use default (./tyk.conf) \nINFO[0000] Setting up analytics DB connection\nINFO[0000] Using MongoDB cache purge\nINFO[0000] Connecting to redis on: localhost:6379\nDEBU[0000] Enabling debug-level output\nListening on port: 8080\nINFO[0000] Listening on [::]:8080\nINFO[0000] Using App Configuration from Mongo DB\nDEBU[0000] INITIALISING EVENT HANDLERS\nINFO[0000] Loading API configurations.\nINFO[0000] Loading API Spec for: rcsousa\nINFO[0000] Connecting to redis on: localhost:6379\nINFO[0000] Connecting to redis on: localhost:6379\nINFO[0010] Not connected to analytics store, connecting... \nDEBU[0112] Setting key: analytics-2014122516-422c9f6e-fddd-439f-73d0-43099ea0d014 \nDEBU[0122] Setting key: analytics-2014122516-bccee697-89cb-4941-4786-8c5155761bfb \nDEBU[0133] Setting key: analytics-2014122516-1ca6b565-2576-40dd-44ab-d6c85c66276d \nDEBU[0308] Setting key: analytics-2014122516-4f021902-85ff-4852-4577-9fa88a81cc54 \nDEBU[0827] Setting key: analytics-2014122516-524f35a2-f0ae-4d07-485e-5be3d4e36578 \nDEBU[0846] Setting key: analytics-2014122516-c455b1b3-2e55-4adf-5b2b-f321c7db7a95 \nDEBU[0975] Setting key: analytics-2014122516-1396192c-c8ac-4688-6fb0-4a363d4536e7 \nDEBU[1058] Setting key: analytics-2014122516-cc3781a2-cc65-4f35-7207-662d413d951a \nDEBU[1073] Setting key: analytics-2014122516-0f6d9753-58ad-47f6-657d-e28ef383c467 \nDEBU[1269] Setting key: analytics-2014122516-7fbe5842-4505-4fcf-5b77-7afff22cbf84\nand as you can see, statistics are being correctly add to the Mongodb collection.\nshow dbs\nlocal 0.03125GB\ntest (empty)\ntyk_analytics 0.0625GB\nuse tyk_analytics\nswitched to db tyk_analytics\nshow collections\nsystem.indexes\ntyk_analytics\ntyk_analytics_users\ntyk_apis\ntyk_organisations\ndb.tyk_analytics.count()\n31\ndb.tyk_analytics.findOne()\n{\n\"_id\" : ObjectId(\"549c30c5e3eb809beead5f13\"),\n\"method\" : \"GET\",\n\"path\" : \"\",\n\"contentlength\" : NumberLong(0),\n\"useragent\" : \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36\",\n\"day\" : 25,\n\"month\" : 12,\n\"year\" : 2014,\n\"hour\" : 15,\n\"responsecode\" : 200,\n\"apikey\" : \"\",\n\"timestamp\" : ISODate(\"2014-12-25T15:44:02.614Z\"),\n\"apiversion\" : \"Non Versioned\",\n\"apiname\" : \"rcsousa API\",\n\"apiid\" : \"1\",\n\"orgid\" : \"default\",\n\"oauthid\" : \"\"\n}\nAlthough everything seems to be ok.. I can't see any changes in the dashboard ... It's like there's no data to display\nKind regards,\nRicardo\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi,\n\nI think it's because the collection is called tyk_analytic and not tyk_analytics, you may ned to rename it in Mongo (and change it in your tyk.conf). The analytics collection is fixed in the dashboard, but changeable in the gateway (in case you want to store it elsewhere and not use the dashboard).\n. Hi Tor, yes, and it is wrong, it needs to be tyk_analytics (see the plural?), if you rename the collection in mongo and change it in tyk.conf (and reload), it should work.\n. It isn't used, the collection and URL are the important bits\n\"type\": \"mongo\",\n\"mongo_url\": \"mongodb://HOST:PORT/tyk_analytics\",\n\"mongo_db_name\": \"tyk_analytics\",\n\"mongo_collection\": \"tyk_analytics\",\n\"purge_delay\": 10,\nI would diverge from this.\n. Hi Dan,\nWhat version of MongoDB are you running? Tyk analytics needs version 2.6+?\nAre you running the latest version of Tyk? There was a bug where only 7 days would show 24-hours after the first hit, but that should be resolved in the latest version.\nLet me know if that solves it, here's how to get the latest Mongo for Ubuntu:\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\necho 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list\nsudo apt-get update\nsudo apt-get install mongodb-org\nCheers,\nMartin\n. If you are running on a *nix system you could just direct the output of the application to logs, this command would put both stdout and stderr to an output file:\n$> ./tyk  >> tyk.log 2>&1\nWe tend to install the tyk processes using supervisord, which automatically handles logging stdout and stderr to file into /tmp and also manages log rotation, great little utility for managing start-up processes. Tyk (and golang apps in general) don't play well with daemonizing, so supervisord is ideal to manage them and takes care of log management to boot :-)\n. Here's the architecture of a Tyk setup (roughly), the reload signal is a fanout signal that hits multiple host managers:\n\nTo answer your questions:\n1. tyk-admin-api-XXX - this is a user session in the dashboard, not used by Tyk at all.\n2. apikey-XXX - this is an API key that will give access to a stored API (depending on settings stored under that key)\nThe things you see in mongo are all mainly related to the dashboard:\n- tyk_analytics_users: User logins for dashboard (not the same as API jey users)\n- tyk_apis: API Definitions that can be pulled by Tyk and edited in the Dashboard\n- tyk_organisations: Organisations are a meta-user for API's, you wil notice in a file-based API definition that there is an OrgID field, this basically enables the segmenting of API's by organisations, these are relent if:\n  - in Tyk: An Org ID can be given a SessionState object in redis (current dev version) to allow organisation-based quota management\n  - In Tyk: OrgID's are prefixed to API keys when the CREATE method is used, this allows API keys to be segmented by organisation\n  - In the dashboard: Users and API Definitions belong to Organisations, if you created a user against a different org using the command line (or Tyk Dashboard API), then those users would not be able to access non-owned analytics, API defs or other users.\nWe use two backends because Tyk can work entirely without Mongo (you could purge the analytics to CSV if you like), and we needed something to manage the dashboard and Mongo had better features for that.\nMongo was chosen for the dashboard because of the built-in aggregation framework in v2.2+, this makes data aggregation into useful analytics data much easier ,as data pipelines can be built and handled in Mongo instead of being crunched by the dashboard. It makes things much cleaner in terms of code and flexibility and puts less stress on the application servers.\nWe decided from the start that Mongo is not a dependency to use the core gateway, only if you want a GUI and an easy way to get to view and filter analytics data, it's a value-add, not a requirement, Tyk can work entirely with only redis.\nThis means that all functional data is either stored in a file (Definitions) or in Redis (Keys). Also worth noting is that the Session and Authentication handlers use separate storage interfaces, so strictly speaking, you could swap out Redis for something else on an api-by-api basis if the correct interfaces are implemented. So loosely speaking, even Redis isn't even a requirement, so long as you can build a new Storage interface driver, which I imagine some forks may be doing.\nAs discussed in the other ticket, API Definitions are file-based because ultimately this is the simplest and most robust thing there is for an infrastructure service (see NginX, Redis and Apache  all file-based configurations), the version data stored in Mongo are in fact almost exactly the same except for some additional metadata for the dashboard (an API Definition is a JSON document, which makes portability between Mongo and file really easy and painless), all the meta-data fields are completely ignored by Tyk as they are only so that the dashboard can do clever things like portable webhooks and event handlers. \nBoth projects (Tyk and the Dashboard) share the tykcommon package, this defines the APIDefinition object so that they are always compatible with one another, even if one is upgraded faster than the other.\n. I may do that :-) Would probably clear up some things for our users...\nAs for putting everything in Redis, this is an option, however, as I mentioned API Definitions can actually set which session stores and auth handlers they want to use on a per-api basis, although Redis is the only supported store at the moment (there is a deprecated in-memory version too), it's a simple interface that could easily be transferred out to other k/v stores (or DB's for that matter).\nIt would mean that Redis becomes an overarching requirement for system management as opposed to a per-implementation dependency, which makes the current code quite flexible (I hope).\nFor example, if we decided to shift to BoltDB or Riak or Tokyo Tyrant instead of Redis, it would be very easy as we simply implement the Storage{} interface and register it in the right code hooks.\nThere's the Raft algorithm (goraft) which might be worthwhile looking at to sync up API configurations across a cluster, which makes having an API endpoint sensible again, as you could just query the cluster for the leader, then make a REST API call to push the new Definition, it would flush to file on the leader, which would then replicate to all the nodes organically. \nThis same functionality could then be used to push hot-reloads across a cluster without individual polling of the nodes and ensure that if things fail, there's always a leader to step up, you could even incorporate some functionality to auto-start more nodes using a webhook or some event handler (the infrastructure is already there for that).\nOn the other hand, sticking it all in redis really would be so amazingly simple, I'm of two minds on it - there's a lot of advantages to having the nodes sync up and elect leaders:\n- The purging node could be set automatically\n- Hot Reloads could spread dynamically\n- Configurations would be consistent\n- A node can fail but the cluster would remain stable and maintainable\nPutting the definition into Redis would mean the dashboard needs to speak to Mongo and redis and there would be two copies of the definition floating around, which could introduce drift.\nI'm just thinking out loud here... sorry for the rant :-/\nI will have a play around with Raft to see how much of a pain it would be to implement well, a POC would set things straight and make it a bit clearer, if there's no existing implementation that we can use, there's no way we're rolling our own, so the Redis option will be what we end up with.\n. Interesting, more thoughts (sorry, this is a lengthy one):\n- Single node purge: This is actually already implemented, setting the purge value in the configuration to -1 for a node stops it purging, purges need to managed for mongo too otherwise there is a risk of getting duplicate entries if two nodes purge at the same time. Implementing a lock in redis sounds like a plan to get a clustered-mode Tyk installation behaving itself. I think we can use this as a wider solution, see below.\n- Hot reloads: Not convinced that this should happen with a new definition write automatically, reloads should be \"committed\" to a configuration, keeps a locus of control outside of the system. Also, I really still prefer the idea of having a single node do the write, there's a lot of underlying complexity in the statement \"One could also implement a concurrent modification detection that checks if two nodes want to update the config at the same time\", would b keen to avoid this.\n- Dashboard switch to Tyk/Redis writes - I would posit that It would be better to \"publish\" configurations to Redis from Mongo, and then have the nodes pick them up from there as an updated configuration, then Redis is just a configuration source like file or DB. This saves us re-writing large chunks of the GUI but makes Mongo a requirement ONLY for analytics data aggregation.\nLet's turn this on it's head a little and start with the desired behaviour:\nFrom an end-user perspective, setting up a single tyk node, or booting up twenty should be seamless, and require little to no configuration on my part. In a typical cloud environment it should be assumed that the node will fail, shut down or be arbitrarily rebooted for maintenance, this should not affect the performance of the application or the cluster and I should still be able to administer it remotely using the API.\nHaving Tyk nodes own their own configuration management in the above scenario creates the following problems:\n1. Which node \"owns\" the configuration, and how is this selected? We don't have high-concurrency requirements as API defs change more slowly, the risk of \"stale\" data is low as configurations are pushed out across the nodes, it should also work with 1, 2 and n nodes.\n2. When I make a request into the cluster, how do I know which one to send the request to? I would assume any node that replied would tell me which node was the current master, and then I could re-run my request there. \n3. How does a single-node install become clustered? Ideal scenario Just boot a new box with the same configuration and they mesh.\nA potential implementation:\n1. Introduce a clustered mode, this is set in the configuration of a Tyk node (tyk.conf)\n2. Clustered mode meta options include a redis store configuration, separate to the key store (it may use a different DB or a different server altogether for this, tuning a long-term storage redis DB vs. a ephemeral key store would be a requirement for many end-users, it also reduces SPOF)\n3. When a tyk node starts up:\n   - It grabs all the keys with the prefix tyk.node.id.*, then sorts them by their value (a random integer between 1 and n)\n   - The node with the smallest randInt() is the master, it stores this value locally so it can respond to the /tyk/master request\n   - It creates an ID for itself and creates a key in redis that looks like this: tyk.node.id.{{IP}}.{{Port}}: randInt() with a TTL of 20s and a floor of the lowest value in the list (so it appends itself), it it is the only node, the floor is 0.\n   - It starts a goroutine which updates the TTL of its ID key to 10s, this runs every 5s\n     - This goroutine will also regularly pull the key list and do the sort to update its master ID\n   - It creates a pub/sub subscription to a tyk.nodes.reload key, if it receives a message, it triggers a hot reload\n4. When a tyk node fails, or is destroyed:\n   - The node will stop updating the TTL, so the key will expire\n   - The other nodes will update their master keys within 10s of the key expiring\n5. Tyk pulls it's API definitions from Redis keyspace tyk.definitions.* and loads them to memory\n6. A write request to /tyk/apis on the current master will overwrite the key in redis\n7. To reload the nodes, a new API request /tyk/actions/reload (or something similar) on the master will send a trigger message via the redis pub/sub channel, only the master may write to this channel\n8. If  a machine has detected it is the master, it will activate it's purge loop (actually, the purge loop will already be running, but will skip execution if it isn't the master)\n   - A change to master state should trigger a system event so reactions can be scripted (e.g. boot another instance - event data should include most current instance list.)\nSo, what does this system mean, worst case scenario:\n- The master node explodes in a fiery ball of soot and ash an silicon shards\n- It's master key expires within 10s of losing power, the other tyk nodes react within 5s: max-time to a switch in master: 15 seconds\n  - Most LBs are configured with health checks around 30s (maybe less), so the cluster could recover before the LB does\n- New nodes just join the cluster, so long as they know they are running in clustered mode, they can share a configuration\n- If all nodes fail, with only one left, it will make itself master, so this scenario works down to a single node and can bootstrap a cluster\n- API clients will need to check for a master before every API Definition write and reload command, but all other writes (key creation, analytics is permitted by multiple instances).\nWhat does this enable? Looking at the above list of things we want to achieve: \nFrom an end-user perspective, setting up a single tyk node, or booting up twenty should be seamless, and require little to no configuration on my part. In a typical cloud environment it should be assumed that the node will fail, shut down or be arbitrarily rebooted for maintenance, this should not affect the performance of the application or the cluster and I should still be able to administer it remotely using the API. - :+1: \nAnd from the benefits of a self-managing cluster:\n- The purging node could be set automatically :+1: \n- Hot Reloads could spread dynamically :+1: \n- Configurations would be consistent :+1: \n- A node can fail but the cluster would remain stable and maintainable :+1: \nAnd above all, we can now store API Definitions centrally in redis, trusting that they are managed by only one node, removing the requirement for MongoDB altogether (and the host-manager for that matter).\nThoughts?\n. I agree with you, I think this whole discussion has become a little academic, and it really doesn't need to be, it boils down to: \n- Q: Why do we want to store stuff in Redis? \n- A: To synchronise a bunch of nodes\n- Q: But then that' what Mongo already does, why recreate a new central repository when one already exists? \n- A: Because the Tyk API endpoint doesn't let me create new API's\n- Q: But the dashboard API does, why not use that?\n- A: Because it isn't documented\nSo the action from this, really, is to document the Dashboard API - which I really should have done a long time ago.\nIf we were to add an endpoint to update or add an API definition, it should just flush to disk, and the integrator would need to manually update all hosts (not too hard, it's a loop through all running nodes). Followed by an API call to all running nodes to reload.\nThat would be the simplest thing to do.\nThen if an integrator would rather have a centrally managed service, they can use the (soon to be documented) dashboard API. Let me explain why the API that ships with the dashboard is better:\n- To administer Tyk, you need to use the master secret key, this is insanely insecure and not advised if you want to expose it to more users than the integrators (app devs etc.)\n- To administer Tyk via the dashboard API, you need to have a user account on the system, that user account's API key can be dropped and re-created whenever needed, and keeps access isolated and controlled.\n- You can create a non-organisational user using the CLI that is a super-admin, they can control all accounts, so there's a level of top-down control over all tenants.\n- Creating organisations and users in the tyk Dashboard API requires another secret key, this should only really ever be known by the system owners, those functions are blocked form regular users.\n- Tyk dashboard users are isolated to only being able to access API's and Keys  within their domain (organisation)\n- Tyk dashboard input is much more heavily validated than the raw Tyk one, with more verbose error messaging\n- The dashboard API (when licensed) takes care of host naming (if you want subdomains for your API's and are using NGinX) and hot-reloads on changes.\nYou get this hierarchy in the Dashboard API:\n- System Owner\n  - Organisation(s)\n    - Organisation User(s)\n      - API(s)\n        - API Key(s)\nThe web app is basically a REST client to the dashboard API. Since it's meant as a C&C API, it has much more functionality than the main Tyk one does.\nso basically - this needs documentation, and potentially the API endpoint needs fleshing out to flush to disk.\n:-D\n. It's an idea worth considering, to be honest it felt quite awful crippling software like this.\nThe dashboard is actually just a large API server and a separate webapp, so you never need to touch the dashboard, you could just run the application and use the API directly, the license is actually for the dashboard and the finer-grained management API.\nImplementing an API endpoint that will flush a configuration to disk is a compromise I'm quite happy with, it's actually the only bit of functionality that is exclusively in the dashboard. So that's one element that we'll put on the roadmap and get out with the next release.\nRegarding lifting restrictions on the dashboard API, we'll have a think, we're quite focussed on getting more people to use the software so it's a bit more... complicated.\n:-)\n. Closing this ticket, we're going to go with Adding REST anf file based flush to Tyk for now, reverting this back to ticket #23 and tagging as appropriate.\n. This is now fixed in dev, will be in next release.\n. This is a bug, though only in the dashboard. Nice find, the angular app is actually using the incorrect dashboard API endpoint:\nRequest URL: //api/keys/basic/{{username}}\nIt should be using the new API-based structure: /apis/:apiId/keys/basic/:username\n. Also fixed in dev.\n. Bug #34 is related but only to the dashboard, the Tyk API will still create basic auth users just fine.\nKeys are cheap to create, so deleting and recreating is a viable alternative.\n. Fixed in 1.6\n. The analytics are correct, the dashboard sets up API endpoints to strip the path upstream, so you create an endpoint for /test/, then access /test/widgets and tyk will strip /test/ from the endpoint so it doesn't get proxied, if your upstream proxy is http://camann9.com/api, then without this option turned on, Tyk would proxy to http://camann9.com/api/test/widgets, with the option it proxies to http://camann9.com/api/widgets\nIf you look at the drop-down in the dashboard, you will be able to filter your API results by API:\n\n. No worries :-) This is all going to need to be put in the docs, which are in need of updating asap.\n. Tyk analytics uses bcrypt.\n. Basic Auth passwords are now hashed by default in the development branch of Tyk, will be in the next point release.\n. I actually realised in the shower this morning that this commit doesn't fully solve the issue anyway, since we set the value of the Quota if the key is not found, strictly speaking, Scenario A still applies since a concurrent set of requests could set the same key to a maximum, now this isn't too much of an issue, but theoretically speaking you could bypass quotas with some clever timing.\nI'm considering switching it around to be an INCR instead of a DECR, then there's no SET required (then just subtract Max from Remaining to update the session cache, however the race condition that is mentioned in the pattern applies where there is a risk of a floating key, though I feel it's unlikely to occur.\nI think Scenario B is solved since the rate limiter uses the Redis store as the \"truth\" and the session store as a record, so if a password reset resets the quota counter, if the key is already present then it will just DECR (or INCR, as the case will be), the actual value in the session is irrelelvant except for in the reply and health-checks, which can't be guaranteed values.\nWill send some more time on this today.\n. Tests passing, quota and rate limiter now redis based with finer-grained quota reset commands in the API. :-)\n. 1. Yes\n2. QuotaRenews is used to report back to health check headers, it is also used to set the initial rate limit. User can set it manually, updating a session via API will reset the quota in Redis (unless new param ?suppress_reset=1 is sent with request), this basically means quota renewals can be scripted to occur whenever if needed). This was actually how it all behaved, so we're preserving exiting functionality, but adding a workaround for session updates that shouldn't affect quota.\n3. Yes it can, though not a priority\n4. Eek! Fixed in master.\n5. Leaving it as is for now\n. You're right, it isn't set, and really should be, it's used in reporting current session state back to the user through the rate-limit endpoint and reply headers:\nhttps://github.com/lonelycode/tyk/blob/b28c02a59e9deec2bba398b1b3bdc2b4c50b31cc/api.go#L1204\nhttps://github.com/lonelycode/tyk/blob/77f4f7d5e23d78a46f4d02a07044c6402fc9163a/tyk_reverse_proxy_clone.go#L185\nHave just pushed an update to master branch.\n. This is fixed in master - see the changelog for details, implementation is a white list URL regex + Method check. Allows for highly granular policies to be created.\n. Fixed in master, will be in 1.5\n. Hi, If you're up for it, the CSV purger is here:\nhttps://github.com/lonelycode/tyk/blob/master/analytics.go#L125\nAs you can see two things need doing, the headers need expanding and the puurge map lower down needs to use the hole object (https://github.com/lonelycode/tyk/blob/master/analytics.go#L15). \nTrickiest thing would be to make sure values are converted properly.\n:-)\n. Added in master branch. Will be part of 1.6\nSetting auth.use_param in an API Definition to true will have tyk look for API tokens in the requests parameters instead of the header. This is case sensitive.\n. @cheald It's totally possible, though I would prefer to make it an explicit configuration, either one, the other or both.\nCurrently, they share a configuration setting (the name of the field). This proposal would require:\n- The addition of a new field in the tykcommon API Definition to hold the new data\n- The modification of all the middleware and methods that extract version data (there's two I believe) to handle a new field\nThis would break backwards compatibility,  to make it compatible, we would need to introduce behaviour that infers the correct name, i.e. some kind of \"sluggifier\" that converts headers (I believe these are case insensitive but make use of hyphens) into the respective querystring representation.\nIt's not ideal, but that's how I'd approach it to make sure it was backwards compatible without adding more data.\nIn V2 we can add new fields.\nIf this is something you want to see, open a new issue requesting the capability and it we'll get to it.\n. Hi,\nDoes the tyk installation work without NGinX on the raw listen path?\nIf NGinX is giving a bad gateway error then it can't connect to Tyk at all, which means the node either isn't running or the port is misconfigured. If tyk couldn't find he listen path, it would respond with a 404.\nCan you see the Tyk node log output? Would suggest first verifying that tyk is listening, that the raw tyk URL works and responds, and then NGinX.\nCheers,\nMartin\n\nOn 5 Mar 2015, at 04:12, kudigaracoder notifications@github.com wrote:\nHi,\nWe've followed your installation & setup guide to install the gateway & the dashboard. We've independently verified the data from mongodb & they seem to be fine. When we hit up the URL, nginx always seems to respond back with 'Bad Gateway' (or) 'Internal Server Error'.\nOur sites-available config for tyke is below\nserver {\n    listen 5000;\n    server_name ;\n```\ngzip              on;\ngzip_buffers      16 8k;\ngzip_comp_level   4;\ngzip_http_version 1.1;\ngzip_min_length   1280;\ngzip_types        text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript image/x-icon image/bmp;\ngzip_vary         on;\nThe Go application server\nlocation / {\n    rewrite /(.*) /API_LISTEN_PATH/$1 break;\nproxy_pass_header Server;\nproxy_set_header Host $http_host;\nproxy_redirect off;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Scheme $scheme;\nproxy_pass http://tyk;\n\n}\n```\n}\nOur assumption is that the API_LISTEN_PATH is not being picked up from mongodb. How can I resolve this?\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi,\n\nYou will need to use the host manager that comes with the dashboard tarbal to auto-reload the configuration from the dashboard. Or you can use the REST API (hot reload).\nThanks,\nMartin\n\nOn 6 Mar 2015, at 19:48, kudigaracoder notifications@github.com wrote:\nThanks Martin, We've managed to resolve the conflicts & got the redirects working (directly through tyke port, nginx rewrite is still throwing a 404).\nOne other thing we've noticed is that the configuration update through the Analytics dashboard doesn't seem to reflect real-time. It works only when we restart tyke every time. Are there specific cache settings we should be looking at?\n\u2014\nReply to this email directly or view it on GitHub.\n. There may be a workaround for this: https://groups.google.com/forum/m/?utm_medium=email&utm_source=footer#!topic/tyk-community-support/-KD2L8M6qh0\n. Hi,\n1. Yes this true, it is used in reporting though, we will eventually phase it out\n2. Also aware of this one, and it should be simple to fix\n\nGeneral question: we only put quota thresholds in the response header because throttle thresholds change so quickly and would be different across parallelised responses.\nBut yes it could be added, we've just not seen the need for it yet.\n\nOn 13 Mar 2015, at 05:31, Thomas Peters notifications@github.com wrote:\nAccording to Access Control (v1.5), allowance and rate should be set to the same value.\nI'm seeing two issues:\nallowance is never actually used. AFAICT, it's only ever decremented (session_manager.go).\nrate has an off-by-one error. If you set rate to 5 and per to 5, this sounds like it should be: \"max of 5 requests every 5 seconds\". However, this will only allow 4 requests to succeed and will fail on the fifth request.\nGeneral question: If you are using rate limiting, should it return in the response headers? Currently I only see the quota information returned with a X-Ratelimit-Remaining header which isn't accurate as usually your rate limiting has tighter thresholds that your quota. Restated: should there be separate response headers: one for quota, and one for rate limiting?\n\u2014\nReply to this email directly or view it on GitHub.\n. Ah, yes I see your point regarding the bucket emptying. It's an interesting option, would need to investigate further as our throttling mechanism is entirely in Redis to speed things up, not sure if it supports auto decrementing keys. I guess it could be done with a built in Lua script command.\n\nOpen to suggestions (and PR's) :-)\n\nOn 13 Mar 2015, at 05:41, Thomas Peters notifications@github.com wrote:\nOne more potential issue (I hope it's a bug and not a feature):\nLet's say you have a rate of 1000 per 60 seconds.\nMake a single request\nWait 58 seconds\nMake 998 requests\nWait 2 seconds\nMake 999 requests\nI would like to see rate limiting prevent more than X requests over a given Y period. Instead of having the bucket completely emptied when the time elapses, the bucket can be slowly drained every second in order to prevent a burst of double the rate in a short time period.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for the example, you're right, the tests don't catch the off by one issue - to be honest we really need to improve the testing throughout :-S\n\nThe off by one bug is quite a simple fix, we'll just need to increment the counter when it goes into the key store, that makes the rate limiter behave more rationally. \nWill add this to the next release.\n. Just saw your commit to your fork, want to send a PR? Will merge it in :-)\n. Merged :-) thanks for that!\nYeah, I've been thinking about bucket draining too - the current setup does\nall the work in redis, so it's quite efficient.\nHowever, we could implement a more robust time-window based method that\nstill makes use of redis increments (so that multi-node deployments keep in\nsync with parallel requests), so long as all the variables of the algo are\nexposed it should work... Now just need the algorithm.\nOn Friday, March 13, 2015, Thomas Peters notifications@github.com wrote:\n\nI submitted the pull request. I'll give the bucket draining code some\nthought and will hopefully submit something soon.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lonelycode/tyk/issues/48#issuecomment-79002514.\n. Rate limiter has now been switched to use a rolling window. Still supports multiple processes (transaction MULTI) and can't be gamed by straddling the TTL since it uses a rolling record of request history in a sorted set, so straddling TTL will fail because request count follows the rate limit period window.\n. Fixed in 1.6\n. You can set a time limit to kill off analytics data, ever since 1.4:\n\n\"Added expiry TTL to tykcommon, data expiry headers will be added to all analytics records, set expire_analytics_after to 0 to have data live indefinetely (currently 100 years), set to anything above zero for data in MongoDB to be removed after x seconds. requirement: You must create an expiry TTL index on the tyk_analytics collection manually (http://docs.mongodb.org/manual/tutorial/expire-data/). If you do not wish mongo to manage data warehousing at all, simply do not create the index.\"\n. This is resolved in master branch, all dependencies for google code were removed ages ago. \nI assume you are building from a release, if so you'll need replace all the dependencies references, we pinned go-uuid to this repo:\n\"github.com/lonelycode/go-uuid/uuid\"\nThanks google code for breaking our backwards compatability :-(\n. Dammit, a dependency in a pinned dependency... missed that one. Try it now (you'll need to git update the osin lib)\n. The makefile is set up to compile for linux on amd64, if you are running on a different platform you'll need to modify this line:\nGOOS=linux GOARCH=amd64 go build -o build/tyk\nin the Makefile to be whatever platform you are building for, according to the golang docs you have the following to pick from\n$GOOS   $GOARCH\ndarwin  386\ndarwin  amd64\ndragonfly   386\ndragonfly   amd64\nfreebsd 386\nfreebsd amd64\nfreebsd arm\nlinux   386\nlinux   amd64\nlinux   arm\nnetbsd  386\nnetbsd  amd64\nnetbsd  arm\nopenbsd 386\nopenbsd amd64\nplan9   386\nplan9   amd64\nsolaris amd64\nwindows 386\nwindows amd64\nFYI: The reason this isn't working is because we don't actively support Docker yet, this file was supplied by a third-party, so it's pretty custom to their setup.\n. haha, wow - that's a bit much, it may just be a case of building for whatever is on the system, I don;t think you need to set those flags per se. \nThere's quite a lot you are missing i think - the dashboard is a seperate component, that docker file is just for the gateway binary. \nWould suggest looking at the docs as there's quite a lot!\nhttps://tyk.io/v1.5/setup/install-dashboard/\nThanks,\nMartin\n. Solved it :-) You need to add a content type header:\n```\ntyk@tyk-dev-env:~/$ curl -X POST http://localhost:8080/tyk/keys/989897876776567 --header \"Content-Type:application/json\" --header \"x-tyk-authorization: 352d20ee67be67f6340b4c0605b044b7\" --data '{\n    \"allowance\": 999,\n    \"rate\": 1000,\n    \"per\": 60,\n    \"expires\": 0,\n    \"quota_max\": -1,\n    \"quota_renews\": 1406121006,\n    \"quota_remaining\": 0,\n    \"quota_renewal_rate\": 60,\n    \"access_rights\": {\n        \"3b7e73fd18794f146aab9c2e07b787bf\": {\n            \"api_name\": \"Second Test API\",\n            \"api_id\": \"3b7e73fd18794f146aab9c2e07b787bf\",\n            \"versions\": [\n                \"Default\"\n            ]\n        }\n    },\n    \"org_id\": \"53ac07777cbb8c2d53000002\"\n}'\nResponse: {\"key\":\"989897876776567\",\"status\":\"ok\",\"action\":\"added\"}\n```\n. This is now fixed in 1.6 :-D\n. This should be fixed in the latest dashbaord release (see the 1.6 release section for 0.9.4.1)\n. This should be resolved now - you'll need to pull the latest docker images though.\n. > API consumer makes a request to https://{client}.mydomain.com/{service}/{path} where {client} is a client name and {service} is the particular micro-service that they are attempting to access and {path} is everything after the name of the micro-service. Once this request is processed by Tyk it is sent to https://{service}.myinternaldomain.com/{path} but I need to provide the {client} value to my target somehow.\nThis is possible, but might involve some duplication, Tyk has two variables it can play with when generating domain configurations (requires NginX) the org_slug - an \"organisation\" in Tyk parlance, this can be an \"owner\" of a series of API Definitions, and an api_slug which in this case could be the {service} description. \nTyk makes these variables available to it's host-manager - a process that can manage nginx configurations, these are templated, so you could potentially generate a configuration tempalte that manages this, but you would need to do this for every \"client\" (this is where the duplication is), so:\nhttps://{client}.mydomain.com/{service}/{path}\nIs actually:\nhttps://{org-slug}.mydomain.com/{api-slug}/{path}\nWhich is rewritten to:\nhttps://tyk-service/{api-id}/{path}\n(this is the bit that Tyk processes), in Tyk, your API definition would need to proxy to:\nhttps://{service}.myinternaldomain.com/{path}\nThe only issue is that you would need to duplicate each service (API Defintion) for each organisation (client), which could be quite serious.\nBut since you are separating out by Organisation and have seperate API definitions for them, you could then use the header injection middleware to hard-code the 'client' (org) value as a header to the upstream service.\nNow this would be quite painful to do manually, for each client. But you could probably script the Organisation and API definition creation/deletion using the REST API (this is how our uickstart script does it with the docker images)\nAlternatively, if you don't mind a bit of latency, you could use the scripting option to create some custom Javascript middleware that would \"move\" headers from inbound request to an outbound one, you could use this to create a catch-all nginx configuration using a wildcard and then leave the rest to the middleware script.\n\nThe next would be to be able to dynamically rewrite the URL. In this case I would have Tyk rewrite https://{client}.mydomain.com/{service}/{path} (where {client} and {path} are both dynamic values) into something along the lines of https://{service}.myinternaldomain.com/clients/{client}/{path} but I'm not seeing a clear path as to how I would accomplish this with Tyk right now either.\n\nFor this, I'm afraid Tyk can't help, this seems like full-blown URL rewriting, which is a feature set we'd rather leave to other web servers... we might look at doing something like this at some point, but we'd need some help :-)\n`\n. Just a side note - in the latest build of the portal / dashboard, we've\nchanged organisation level quotas:\n- you can still set the overall request quota for a whole organisation\n- you can no longer set a \"key quota\" - this was almost impossible to\n  enforce in the architecture, especially because of key hashing and keys\n  that potentially expire (I.e an org can only issue x number of keys)\n- you can set a developer quota though (I.e. Only x number of registered\n  developers allowed per portal), this is the change that is only available\n  in v0.9.4.4 - the change went out yesterday\nJust a heads up - the docs need to catch up :-)\n. @DavidTPate \nIt's a hard one to diagnose, some questions may clarify th answer a bit:\n1. Are you using the docker containers, the quickstart script or are you running each process raw?\n2. Are you using the dashbaord or file-based definitions?\nHere's an attempt at an anwer, or at least places to look:\nI am assuming you are using the host manager (one of the docker containers from the quickstart). If you are, then your url structure will look like this:\n{api-slug}.{org-slug}.localhost.com:8080/{resource}\nAssumption: You have set an org-slug (can do this on create or using the admin API) and an api-slug (can be set with dashboard under \"Advanced\" or just add an \"api_slug\": \"{apiname}\" to the api defintion object at the root)\nIf you haven't, then your URL's might look like this (ick):\n{api-id}.{org-id}.localhost.com:8080/{resource}\nObviously if your API ID isn't a UUID then it will be whatever string you put in that field - this is only possible with file-based definitions.\nI have a feeling that the proxy is acting up because nginx is just reverting to the first domain it finds matching localhost.com.\nIf you are using file based definitions, have you switched strip_listen_path to false?\nIf youa re not using file-based definitions, have you tried accessing the API proxy directly:\nhttp://192.168.1.BLAH:8080/{api-id}/{resource}\nAll the host maanger does is create nginx configurations that translate the structure at the top of this answer into the one above.\nKeep in mind, you can compeltely change how these redirects work, if you want to have a listen structure like:\n{org-slug}.localhost.com:8080/{api-slug}/{resource}\nThen all you need to do is modify (or override) the nginx template the host manager uses here, you can see there's a URL rewrite under the hood:\n```\nlocation / {\n        rewrite /(.*) /{{.ApiId}}/$1 break;\n    proxy_pass_header Server;\n    proxy_set_header Host $http_host;\n    proxy_redirect off;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Scheme $scheme;\n    proxy_pass http://tyk;\n}\n\n```\nUnfortunately, the host manager is not clever enough yet to generate multiple API rewrites under a single org subdomain, it's an option we've thought of adding for those who want to have this kind of structure, however, you can always do it yourself if you have a fixed set of API names.\nThis is a long and rambling answer, so may not be very helpful, if you answer the top two questions I think I'll be able to offer more insight.\n:-S\n. @DavidTPate\nOk, you can actually directly diagnose this on the docker container by looking at what it's generating, first off, connecto to the running tyk_nginx container and start a bas shell:\nsudo docker exec -i -t tyk_nginx bash\nThe nginx configurations that are generated can be seen in the default nginx folder, just do:\nls -al /etc/nginx/nginx/conf.d/\nThere should be a few *.tconf files with long file names, these are the ID's of your API's, to see what was generated.\nTake a look and see how many there are, there should be 6 files, two configurations for the portals, and four API configurations.\nWould be interesting to see what you find... :-)\n. @DavidTPate \nYes that looks right, Tyk will write to the local folder and NginX picks it up via the symlink. That's the way it's meant to be set up :-)\nWhat do the files look like? Can you post them (test and www for only one organisation, should give us an idea of what's going on)\n\nI setup my hosts file to point www.localhost.com and test.localhost.com to the Tyk server.\n\nHave you set up your hosts file to take into account the additional subdomains? As in:\n127.0.0.1 httpbin.test.localhost.com\n127.0.0.1 google.test.localhost.com\n127.0.0.1 httpbin.www.localhost.com\n127.0.0.1 google.www.localhost.com\n127.0.0.1 test.localhost.com\n127.0.0.1 test.localhost.com\nRealise it's obvious, just wanted to make sure ;-)\n. @DavidTPate \nI think I see the problem :-)\nYour hosts file says: \n192.168.1.xxx     www.localhost.com\nNginX confs are listening out for:\n\nserver_name google.www.tyk.docker;\n\nin your hosts file, change localhost.com to tyk.docker\nOr change it the other way in the templates, NginX is trying to service an inbound request and since there's no default.conf it's picking the first one it finds.\n(At least I hope this is the problem) :-D\n. Hi david,\nYes the high-level admin API is a little limited, it has only very few methods, we'll expand this in future.\nIn the meantime you can probably get around this by creating a single super-user using the /admin/users command, simply don't assign an Org ID and the user will have a \"global\" view\nYou can use this users key to maniulate the users the way you wish.\nLet me know if that works, I'll keep this ticket open in the meantime.\n. HI, that makes sense - you only list endpoints in the designer if you want to have actions applied to it, otherwise the endpoint ill ot be marked as an exception.\nBy default Tyk will proxy everything, unless you set up an endpoint as one of the lists, in which case the API switches modes.\nThe only odd exception is mocks - a mocked endpoint MUST be attached to a list (usually ignore or white-list), because it piggybacks on the middleware that handles the path finding to apply the list rules.\n. That's a good idea, there's some rules in place that enable / disable checkboxes to stop certain impossible configurations from being made, so adding a warning or a tool-tip to catch this would probably benefit users. Will mark as an enhancement.\n. This is changed now in the latest version - no more checkboxes. Warnings are now in place to ensure the correct options are selected.\n. We get asked this a lot :-)\nMongo was chosen for the built in aggregation framework, it allows us\nto offload analytics processing entirely to the database with no data\ncrunching code at all in our base and is quite efficient and very flexible\n(we can upgrade analytics data without affecting backwards comlatability).\nIt's possible to add a different analytics storage engine to the gateway as\na new 'purger' - similar to the CSV one, e.g. If you had your own BI such\nas Tableau.\nHowever for the portal and dashboard the coupling is quite tight so major\nchanges would be needed to start using a new DB (not big fans of ORMs here).\nWe use http://compose.io for a managed service since there is no RDS\nversion of Mongo, it does quite well. There are some issues with hooking up\na replica set with the current configs though which we are working on (the\nURL connection string provided by compose needs slight modification).\n. It's a bug, will add to fix list - thanks for pointing it out :-)\n. @richard-hulm Which version are you running of the gateway? We added a global response code fto the Tyk gateway API in September last year?\nAre you suer you aren;t talking about the Avanced API? \n. Ah, that's actually in the dashboard - have just pushed a fix to our main branch, will be resolved int he next release...\n. Hi,\nYes there is afull portal API - the dashboard is essentially a client of it (it's an angular app). We may publish the documentation on that, it depends on demand, there's quite a lot of documentation :-)\nSome of the dashboard API is documented under \"Advanced Management API\" on our site so you can do key management through this quite easily, but not anything to do witht he portal.\nWe're unlikely to open source the dashboard any time soon, we are looking for partners to bring on board that can work with us on the repo, but there would need to be some serious interest in wanting to get involved. the details for that haven;t been ironed out yet though.\nBasically though, if you can do it in the dashboard interface there's an API for it :-)\n. BTW Tyk users are basically admins, so I wouldn't use those for your developers :-)\nThe need is understandable - and it'll be done, eventually... it's quite a large system now.\n. There are plans to eventually support it, though it's not on the roadmap atm.\nThe importer is actually an interface, it's very easy to extend the functionality simply by implementing the importer interface and registering it as a name.\nThe way the importers work is quite simple really - you need to create a struct that resembles the swagger format (or can capture it), and the transform it into our own ApiDefinition format (That's what those private methods are for)\nAll the bits are there for generalising to a multi-format solution, they just haven't been tied together :-/\nThe trickier bit would be to generalise the command mode options - as they aren't as modular as they could be. Though you could jsut create a new specific flag handler and then invoke your converter - the longer term plan wa to generalise the whole thing and make it so that importers could jut be \"registered\".\nBottom line - the whole thing needs a little polish :-S\n. Hi There,\nYes all of that lives in the dashboard, it's actually shared code - we just need to pull it in. Also, the command mode option will only dump the APi definition to file / memory, not into the DB. \nBut if you put the basics in, we'll roll it up :-)\nThanks,\nMartin\n. Thought id add this here:\nhttp://mholt.github.io/json-to-go/\nReally handy for generating tha massive Swagger struct, if you can get hold of a fully qualified AST for Swagger this will make writing it less painful ;-)\n. Fixed in master, can now be accessed using --import-swagger command line option (same as blueprint). dashboard interface TBC, on roadmap for 1.7.\n. Only basic supprot :-) Mocks not supported (Swagger doesn;t seem to let you define mock responses very well, just schemas)\n. Hi,\nThe current dashboard release that is in our GitHub releases section is the same as the one in the docker image, which includes swagger support on imports. So you should have that feature available now.\nThe next version of the dashboard will be out in the next few months - we have quite a bit to do - take a look at our roadmap:\nhttps://trello.com/b/59d5kAZ5/tyk-api-gateway-roadmap\nCheers,\nMartin\n. Which dashbaord release are you using? 0.9.4.4?\n. This is how our script does it via the command line:\ncurl --silent --header \"admin-auth: 12345\" --header \"Content-Type:application/json\" --data '{\"owner_name\": \"TestOrg5 Ltd.\",\"owner_slug\": \"testorg\"}' http://$LOCALIP:3000/admin/organisations\n. Ah 0.9.4.1 had an old schema for the organisations object that excluded those fields, the quickstart uses the latest docker container so I would recommend moving to 0.9.4.4\n. You can do this if you create a super user with the API (I think), create a new user which has no OrgID assigned using the admin/users endpoint.\nThen use this to create new APIs, when it creates the API it will have an empty OrgID, but if you then do a PUT update with the OrgID you want it should stick.\nThis is intentional, we do not want user tokens from other organisations being able to create API's that do not belong to the org. Having a single super user (no organisation affilliation) then gives cross-org read access and some write capability.\n. Ah, you are using the api_id, not the object ID - they are different, one is a universal representation and the other is an internal database ID, the Advanced API will need the ObjectID, not the api_id.\nYou need to re-send the whole object.\nI would suggest Creating the Org, GET it again, modify the OrgID then PUT it.\n. There's a lot of security cruft sitting on top of this that prevents users from being able to manipulate objects outside of their organisation.\nAgree that having more methods would make this particular workflow easier, but the thing is this would work with a single request if you used a user token that part of the organisation.\nWe currently do something like this for organisation-level operations:\n1. Create a temporary user for the org, get their auth-code (you dont need a password, jsut ther eturned auth token)\n2. Manipulate objects\n3. Delete the temporary user with their own token\nMuch easier, and (1) and (3) are pretty much template code that just ened an org ID.\n. It looks like something is wrong with the User object or the schema, the dashboard is trying to validate the User object against the schema it has stored.\nTwo things worth checking:\n1. Is there a schemas/ folder in the tyk-dashboard folder and are there files in it?\n2. What does the user record in your database look like? (Check the tyk_analytics_users collection in Mongo)\nIf there are no files in schemas/ you may have a funky build, you'll need to replace them manually from one of the other tarballs.\nMore questions:\n1. Which dashboard version are you running (latest is 0.9.4.4)? \n2. Did you build the docker container yourself or is it one of ours? \nImportant to note that the master branch of our docker repo in Github is not used, only the version tags are. We recommend getting our pre-builts from docker hub since we validate those.\n. Great to hear though I strongly recommend moving to 0.9.4.4 :-)\n. Hi,\nYou will need to use a middleware for this, assuming that your authentication server has http access:\n1. Request comes in with an API token + maybe the other auth data\n2. API Token is checked by Tyk, if it is valid the request passes tbhrough the rest of the machinery, then before it leaves Tyk is passed to the middleware\n3. The middleware calls your auth server, gets the user ID and adds it as a header to the outbound request along with any other data you may need to send upstream\n4. The request proceeds onwards or is stalled by the middleware\nWe're looking into other methods for hooking up other auth systems, but their are very much still WIP :-/\n. The JS middleware can handle http requests (it's a little tricky to test) but isn't as fast as golang, but you can just drop it into an existing install without recompiling.\nIf you want speed, write the middleware in golang - there's an example middleware file included in the source tree to see how the module is made.\nAdding it to the chain is a matter of modifying the main.go file when it sets up the URL paths. \n. Awesome, thanks! Will review and merge as soon as possible :-)\n. Nope, it's a one for one proxy, though it does support batch requests to\ngroup things like that for end users.\n. set use_api_defaults to false in your tyk_analytics.conf\nTyk has some preset modes to enforce certain safe behaviours. Setting this option to false will stop Tyk from trying to build the listen path for you.\n. Thakns, nice catch :)\n. You will need to set use_api_defaults to false in the tyk_analytics.conf file for the listen path to not be managed by the dashboard.\nLet me know if this works, it should...\n    _____\nFrom: S. Alexander Zaman notifications@github.com\nSent: Friday, July 3, 2015 19:27\nSubject: [tyk] Gateway API Doesn't allow listen path to be renamed (#75)\nTo: lonelycode/tyk tyk@noreply.github.com\nUsing latest docker pull of tyk_gateway as of today (7/3/2015).   \nI am trying to rename the listen path from '/a39e0fa55f6e445e58355bde9a9377fa/' to '/restricted/' using the tyk dashboard.   \nReproduce:       Create an api    Go to the api edit screen    rename listen path for /{api_id}/ to /restricted/    save    Leave and return to the page to see that the path is unchanged.      \nit was working before but now it does not work. If it works the first time, you may need to rename it back to the api_id and try naming it restricted again.   \n\u2014\nReply to this email directly or view it on GitHub.\n. If you are uing the docker version, it is incredibly simple to change the option using standard docker command line flags. Use the -v option to mount your own tyk_analytics file over the one that is bundled (see this section in the docker docs).\nThe config file will be located under /opt/tyk-dashboard/tyk_analytics.conf in the container, and it is the vanilla one that ships with the tarball (see our releases page on GH), so you can download a copy and use that.\nWe've made this a little stricter in the latest version as the dashboard by default will enforce an API ID to be used so as to prevent users from entering conflicting paths by accident (or maliciously), using the REST API.\nI've just looked into it a bit more, and there is one side-effect that you may encounter when you change the option - the force defaults option also sets the \"strip_listen_path\" setting in the API definition to true, this prevents your listen path from being transmitted along to the upstream API. \nThis option can't be set in the dashboard at the moment, so you would need to make the change using the REST API instead :-/\n. I've pushed an update - Dashboard 0.9.5.2 to our releases page and our docker repository that addresses the problem. LIsten path should now be editable without resorting to switching off API default safety.\nYou may need to wait a while for the docker hub container to build and update though. But you should be able to just docker pull -u to update it.\n. Unfortunately docker hub seems to be having an issue so the image isn't pushing. sigh. Might take a while...\n. Aaaaaand the docker build pushed successfully. Done.\n. Hi,\nNot at the moment, however it's definetely a feature we'd consider adding.\nwill add it as an enhancment :-)\nThanks,\nMartin\n. There's a method conversion middleware in v2.2\n. Don't see why not, will modify our build script to include these, though it will most likely only be the tarballs...\n. Here's a cut from dev - should be pretty stable, there have been very few changes to this build for now:\nhttps://www.dropbox.com/sh/e2ev1yqjhcv7nyi/AAAZbUSSxOLAn8wHFNhMTC8Ha?dl=0\nWant to give it a test to see if it behaves itself?\n. We do dashboard BSD builds all the time now as standard.\n. Not much coverage on OpenId in golang land - there's this library: https://github.com/ekozan/OpenID-Connect But it doesn't seem to have many tests (or any kind of validation). \nThere's another lib but it seems to be very WIP, so will steer clear of that. \nTo implement this we'd probably need some kind of layer on top of our OAuth 2.0 server. Would even need to test if it's compatible. TBH I know very little abut OpenID.\nI'm a little concerned about how many versions there are of this protocol...\nIf there's enough demand around this feature will be happy to add to roadmap.\nObviously will be happy to help anyone else who wants to take on the challenge and add support in themselves ;-)\n. It is possible, that's what the StorageHandler interface is for:\nhttps://github.com/lonelycode/tyk/blob/master/storage_handlers.go#L30\nWe rely on Redis to provide a fast and atomic way to rate-limit and enforce quotas across a bunch of instances, so switching out whole-heartedly to another DB could impact key retrieval and latency (it's why we went with Redis in the first place).\nWe did put in a mechanism for exactly this scenario though where valid key storage that is separated from the session-handling. Tyk has a two-phase authorisation an authentication check:\n- If Tyk finds the key in the session handler (Redis) it assumes that the key is authenticated and uses it\n- If Tyk does not find the key in the session handler, it asks the auth handler if the key is valid, this component can have a different storage engine, if the auth handler replies with a valid session object, that session object is copied into the session handler for further use.\nThis was actually first developed so that the logic that defines how a key is authenticated versus how it is extracted and processed for session use are separate, these two area actually interfaces AuthorisationHandler and SessionHandler, so they can be completely replaced with new logic if necessary. By default, they both use the same back-end.\nBut this functionality can also be hijacked, there's a nifty trick where you can just swap out the back end of this authentication operation. This is quite handy if you are maintaining keys outside of tyk, because you can set the session lifetime really low (e.g. 60 seconds), this would force keys to expire quickly and re-authenticate with the third party storage system. This is exactly how the LDAP handler is meant to work, if you look at the code, it only implements the read operations, none of the writes.\nThe implications of this are: You will not be able to use the Tyk REST API to generate keys (or you could, but your system would then need to manually sync them to a new storage engine to ensure they are retrievable on a teardown). This makes sense, since you are separating authentication from authorization. You would also need to remove them when they are invalidated so they do not get re-synced.\nA final option would be to bastardise the Redis session handler to push data into your third party storage on UpdateSession(), but then you break authentication/authorization separation.\nPersonally I find that injecting a read-only storage handler into the Auth Handler is the most elegant solution, configuring it super simple too, in the API Definition, here's the LDAP example:\n\"auth_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"ldap\",\n        \"meta\": {\n            \"ldap_server\": \"test-ldap.yourserver.com\",\n            \"ldap_port\": 389,\n            \"base_dn\": \"dc=test-ldap,dc=tyk,dc=io\",\n            \"attributes\": [\"cn\", \"description\"],\n            \"session_attribute_name\": \"description\",\n            \"search_string\": \"(cn=TYKKEYID)\",\n            \"use_ssl\": true\n        }\n    },\nSee how the storage engine and meta objects are the only things populated? All that tells Tyk to do is to init the default Auth Provider and use the assigned storage handler (ldap) for when it checks if a key is valid. \nWhipping up a quick read-only back-end is pretty simple, so the question is which DB to choose :-)\n. Ah yes, we know about this - we should really clean up the command line inputs...\n. This has been fixed in master, will be in the next dashboard release.\n. This will be fixed 0.9.6 - already in dev branch :-)\n. Templates are loaded into memory when the aplpication starts, you will need to restart the process for the template to be registered.\n. Ah, wait a second - the index page is s special case :-/ The name of the template is hard coded to \"indexPage\"\nYou will need to modify indexPage directly or name your new template indexPage nand rename the other one.\n. Fixed dashboard UI (it was fontawesome) . \nPortal headers can be edited by end users so will be left as-is.\n. Added in v1.9\n. Duplicate of #91 \n. This is fixed in master branch now. API will return error when create key and writes fail. \n. How odd, it may have something to do with Go 1.5. host lookup is handled differently. Will investigate :-)\n. This is a bug in golang's resolver, using the 127.0.0.1 IP is the recommended way to fix this.\n. Tyk's Oauth driver supports all of the modes you've listed, however we haven't investigated the flows for them yet since Oauth and third party gateways can provide problems since the spec isn't designed around a third party sitting between the resource owner and the client.\nSupport currently looks like this:\n- Password Grant flow - driver supports it, not implemented or tested\n- Implicit Grant flow - sit-up ported out of the box\n- Authorization Code flow - supported out of he box\n- Client Credentials flow - driver supports it, not implemented or tested \n- Ability to revoke refresh and access tokens - you can revoke access tokens if you know what they are, but not refresh tokens.\nWe use this fork of Osin (the Oauth lib) to handle the various grants https://github.com/lonelycode/osin\n(We vendor it because the original upstream version keeps making breaking changes).\nBut as you can see it has all of your access types, we just need torn able them in our flows: \nhttps://github.com/lonelycode/osin/blob/master/access.go\nThe number of requests for more OAuth support has been increasing, so we'd be looking to expand on this feature set soon.\nOf course, we would love some help in this regard as OAuth flows are complicated and can be very nuanced, making them hard to test :-)\n. Update on this issue - master branch of the gateway now supports password grant flow:\n- Create new client\n- Create a basic auth key for each user\n- Set the allowed_access_types array to include password\n- Generate a valid access request with the client_id:client_secret as a Basic auth header and the u/p in the form of the body.\n- POST to: /oauth/token/ endpoint on your OAuth-enabled API\n- If successfull, the user will get: \n{\"access_token\":\"4i0VmSYMQ2iN7ivX0LaYBw\",\"expires_in\":3600,\"refresh_token\":\"B_99PjEmQquufNWs8QYbow\",\"token_type\":\"bearer\"}\nThis will be in the next point release.\n. Latest point release is out that begins to address this issue - includes Password OAuth support: https://github.com/lonelycode/tyk/releases/tag/v1.8.3.2\n. Eventually, yes. We're adding to the OAuth feature set all the time, we're basically working through the list in this ticket.\u00a0\nThe last release had password flow, this release we're smoothing out some issues around request token invalidation and configurable access token lengths.\nWe'll be addressing each of them as we get to them :-)\n. Update: Refresh token invalidation now has an API endpoint in Tyk develop branch.\n. I think the Authorization header needs to be base64 encoded as per the Basic Auth spec. You don't need to md5 the client id. That may be your issue here.\n. Our URL matcher is quite strict, so the slash is required. We're looking to fix this in the next point release as it trips up a few people.\n. Yup, this isn't the place for it.\nThe scenario is possible, read the docs on transformations\nFurther questions would be best in the community mailing list where there's already discussions on this.\n. It's on the roadmap :-)\n. Client credentials is supported\n. It's been supported for a while now, in the dashboard auth options you can now select client credentials as an option and use that flow.. Create an aPI and set it to use OAuth2 (and set the client creds option) then in the api list there's an OAuth clients button next to the api name where yu can add clients. There's an overview of the most standard flow here:\nhttps://tyk.io/tyk-documentation/security/your-apis/oauth-2-0/\nAnd sample code here:\nhttps://github.com/TykTechnologies/tyk-oauth-flow-example\n. The examples all use the authorisation flow because it's the most complex, client credentials should use the same flow as just standard access token without the bit where a login is required. \nThere's a test you can use for reference here:\nhttps://github.com/TykTechnologies/tyk/blob/master/oauth_manager_test.go#L437\n. It's b64 encoded clientid:secret as a basic auth header, pretty standard for OAuth . Amazing - I'll update the docs with a link to this from the docker quickstart, much simpler, it's a great idea. Thank you! :-)\n. This is now in the main docs here as an alternative quickstart: https://tyk.io/v1.8/setup/docker/\n. Yes there is, for online portals it uses the latest version of the swagger\nJS I believe.\nit will also use an exgternal validator too.\nHowever, the portal templates are changeable, just look at the\nportals/swagger.html file to change the deps to something local.\n. Actually, it's probably JQUery missing, in the /portal/tempaltes/scripts.html file there's a reference to the CDN version:\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js\"></script>\nReplace this with a local version and it should work :-) \n. If you go to the developer's profile (portal developers -> developer) you can see the Apis they have access to, there is a link for each key in that view directly to the token analytics for that dev (they may have multiple tokens), so you can see their usage.\nNot sure if that answers your question?\n. Interesting - how is the API set up? Is the api that you are tracking a token based api, or open?\nIf it's open then very little will track, since there's nothing to tie data too :-)\n. Is the API actually set to use auth token? If you drop the header does it stop working?\nWhat does the Stats by token table look like? Anything in there? Can you share a screenshot?\n. The key that you are pin ting at here: http://screencast.com/t/1I2KAWr4dxs\nIs different from the graph you screenshotted here: http://screencast.com/t/bTu5HA7J\nWhich one is going up?\nWhen you select the key that seems to have an increasing request count, does it display a graph?\nWhat are the time zones set to in the machines? Are the dashboard and Tyk gateway using the same time zone?\nWhat happens when you increase the range to include one more day on the future?\nLots of questions - sorry, but it's a bit odd, because the analytics data that provides the increasing request count is the same that is used for the graph, just a different aggregation.\nSo the data is there, just not visualising for some reason.\nMight be worth taking a look in your mongodb and pulling out the analytics data to see what it looks like...\n. Yeah that will happen if you haven't set up a host name\nThis is a new thing (not documented yet) - you need to set the hostname field in the tyk_analytics.conf file to your desired host name to override that. This literally came out yesterday and the docs haven't caught up yet :-)\nTyk tries to be clever with identifying it's hostname and IP for the gateway and portal to get things to work, but for it to work as needed (like our cloud setup) you need to set the hostname field and get the host manager running (https://tyk.io/v1.8/host-manager/). There's only so much we can do to detect environments...\nAlso take a look at this: https://tyk.io/v1.8/tyk-routing/\nThe portal is heavily dependent on URL rewriting, you can obviously change that my manually editing the templates, but using the host manager and the provided templates sorts all this out quite quickly.\n. What I'll do is improve the docs around this - the portal URL routing really messes with self hosted users.\nWatch this space :-)\n. whoops, that's probably just the wrong error message, not validation. Thanks for the spot :-)\n. Fixed, will be in next point release.\n. Yes there is (it's in our roadmap), the trick s trying to make it performant as it will most likely rely on a regex.\n. This is now available in v1.8.3 and 0.9.6.3\n. Yeah, our docs do state it needs to be a JSON object that gets traversed, not an array. It's a tricky one. Will investigate, we want to support default consul services. \n. This is fixed 1.8.3 :-)\n. Note on list-based returned values like Consul - you'll also need to also check the \"Enable round-robin load balancing\" option, otherwise you'll get errors. (you don't need to add any hosts though)\n. Yes it should be, will add to roadmap for next version.\n. Host manager now reconnects on start if mongo is missing...\n. It's possible, but we'd need to move all targeting from the main definition into the version info, that includes service discovery. It would basically create a whole new API definition within the definition object.\nMight be easier to just create a new version... ;-)\nThis might be a consideration for v2, hwere we make breaking changes to definitions, and might separate out targets completely.\n. Target can now be changed per version. Auth not yet.\n. In your tyk_analytics.conf file, create a new field called 'hostname' and give it the hostname of your Tyk dashboard host and port (in our docker QuickStart we use Tyk.docker)\nYou will also need to set an organisation slug and an API slug\nAnd, to get the routing to work (Tyk assumes that if hostname is set then routing will work), you'll probably need to get the host manager working.\u00a0\nFinally, the template for the swagger docs is editable, so you can always edit the swagger init JS to suit your needs.\nThen restart the dashboard.\u00a0\nThe portal does very little to try and work on a local host unless you are running our docker instances or something that has DNS and routing set up with the host manager.\nThere's too many ways of running Tyk for us to make it work universally, so we cover the most obvious cases and leave the rest up to the implementer.\nCheers,Martin\n```\n\n```\nFrom: Adamou notifications@github.com\nSent: Wednesday, September 9, 2015 20:21\nSubject: [tyk] API Catalogue displaying swagger documentation  {{.HOST}} & {{.BASEPATH}} empty (#105)\nTo: lonelycode/tyk tyk@noreply.github.com\nWhen using dashboard 0.9.6.1 on an local machine to display swagger documentation, i can't try it out because in the swagger template {{.host}} & {{.basepath}} are empty    \nDoing the exact same thing on tyk cloud platform with the same software version, and it works.   \nAny idea ?   \n\u2014\nReply to this email directly or view it on GitHub.\n. We haven't tested for it, might be a bug.\nTyk isn't nginx based, so it's something we'll need to investigate.\n. Have you tried setting close_connections in the Tyk.conf file to false?\u00a0\nThis setting forces the proxy to close the upstream connection as soon as it gets a response.\n. Confirmed solution: To enable processing of Transfer-Encoding: chunked, set the close_connections property in the tyk.conf file to false (or remove the line altogether).\nTyk aggressively closes TCP connections by default, to stop this from happening you can unset this option and Tyk will respect HTTP 1.1 convention to keep open TCP channels per client.\n. Ah I see, this solution might just cause the proxy to fill the buffer and then proxy back. The tests I ran were against the httpbin stream endpoint (which returns a chunked response).\u00a0\nThis will need further investigation, since we don't have an easily accessible streaming API to test against, unless you have a good example available to hand? :-)\n. Right, I think we can make this configurable - currently the default flush interval to write to the client is set to 0 so there is no periodic writes.\nIf we make this configurable then that should fix this problem.\n. Yup - martin@tyk.io\n. This has now been addressed in the master branch, will be in the next point release.\nEnable streaming endpoints by setting a flush interval (in seconds) in your tyk.conf file:\n\"http_server_options\": {\n    \"flush_interval\": 1\n}\n. This is now in an active release: https://github.com/lonelycode/tyk/releases/tag/v1.8.3.2\n. You will need to set the close_connections flag too as otherwise the writer will send a close header which terminates after the first flush.\nLet me know if that works...\n. You will need to set it to true. Can you share your Tyk.conf?\nOn Tue, Sep 22, 2015 at 6:02 AM -0700, \"Alex Giovannetti\" notifications@github.com wrote:\nI set close_connections to false and the issue still persists\n\u2014\nReply to this email directly or view it on GitHub.\n. My bad, close_connections needs to be false (duh), replied in haste.\nWill reply directly to your email.\n. Fixed in latest release... whoops. (https://github.com/lonelycode/tyk/releases/tag/v1.8.3.2)\n. How odd. Login is cookie-based and matched with a redis key. \nIs your redis conection intermittent?\n. Also, does this happen in Firefox? \n. This is a good point, will add it into the roadmap\n. Fixed in 1.9\n. Does it need to be a query string parameter?\nThis is possible with headers - take a look at our header transforms: https://tyk.io/v1.8/api-management/transformations/ you can associate meta data (such as a hidden API key, with a token that you create. \nYou can then access that token data from inside the header transform and body transform middleware as a variable namespace ($tyk_meta or _tyk_meta respectively)\nIf it has to be a querystring parameter you may need to resort to a custom JS middleware plugin that adds to the URL: \nhttps://tyk.io/v1.8/plugins/plugin-overview/\n. Nice one :-)\nThere's a way to enable middleware without modifying the mongo definition - it hasn't been documented yet, but essentially it involves creating a folder structure and dropping your middleware in:\n- /etc/tyk---- middleware/-------- {API ID}/------------ pre/---------------- javascriptfile_with_session.js------------ post/---------------- javascriptfile_with_session.js\n  If you set your file up like this it will load the middleware for the api ids you set up, no messing with mongo needed.\n. The bit that loads the JS from a folder path is here:\nhttps://github.com/lonelycode/tyk/blob/master/main.go#L254\nNeeds refactoring out into the plugins module.\n. Thinking about this, it could be quite tricky, because CORS is handled before key lookups happen, since CORS requests tend to be pre-flight in  browser. So no auth is necessarily sent with the OPTIONS request (the client may have no control over this).\nAnother option might be this: When a user key is created, store their CORS domain in their metadata set with the key object. Then you can at least link domain ownership to a token (if you are using developers, then you could add it to their custom fields set, as this gets copied into a key metadata set on creation).\nThen any CRUD actions on the token can also reference the domain list in the api definition using third-party integrations.\nAlternatively, we look at making the CORS domain list external to Tyk so it can be easily managed third-party (e.g. a pluggable backend, like redis, consul or etcd). A bit trickier since cORS is handled by a third-party lib.\nNeeds some more thought, we could always reverse token lookup an CORS, but again there's no guarantee that the client has control over the pre-flight CORS request in-browser.\n. @manjeshpv Interesting, not sure this is the right place for this question as this ticket is specifically for a new feature.\n1. Have you tried it with a wildcard allowed origin (i think the allowed origin should just be http://teambnw.com)?\n2. Have you tried using a custom header instead of Authorization?\n3. You have OPTIONS pass-through enabled, which means that the OPTIONS request is being handled by the rest of the Tyk middleware and being allowed through to your underlying service, which could be writing new CORS headers to the response which could be causing the conflict\nTo debug, can you share the actual response headers from both the pre-flight OPTIONS and attempted request?\n. @manjeshpv When tyk is managing CORS for you, it will basically handle pre-flight requests (which are OPTIONS requests generated by the client) and respond according to your configuration in the dashboard. Tyk will not continue proxying that request to your app, that OPTIONS pre-flight request will terminate with the gateway and never reach your application.\nNow if you enable the pass through, Tyk will:\n1. Write the required headers to the http response steam (keeping the conneciton open)\n2. Send the OPTIONS request ON through the middleware to your upstream application\n3. Your app will then process it, and potentially add it's own headers to it's response\n4. Tyk will take the repsonse from your app, and copy it's headers, body and other data to it's open response stream.\n5. It will then flush the buffer to the client and essentially write the whole proxied response back\nSo, if you have pass-through enabled, and your ap is configured to handle CORS, it could be duplicating the headers that tyk has already added.\nBy switching it off, you ensure that this can't happen.\nNow I've just tried your app (sorry, I was curious), and I can see that all the requests that are going through Tyk Cloud are responding with the correct headers and responding with 200 OK statuses. So you've either resolved the issue, or you are testing with a different application, in which case, what are you using to run these tests, and are they running from the domain you've specified?\n. @manjeshpv ok this is totally the wrong place for this discussion. Please put any further questions in the mailing list.\n1. Our CORS middleware sends all the headers automatically, the easiest thing to do is to set a wildcard allowed host \"*\", this allows everyone access\n2. Don't use service discovery until you've solved the CORS issue... you're conflating two issues, please view the documentation on the site, the change log and the version notes for examples for all of these things in action, there's also extensive examples in the service discovery test suite\n3. Do not use pass through, you are now conflating two CORS implementations - your apps and Tyk, pick one. The point of CORS is to protect the JS client, so why would your app, if it is being proxied by Tyk, set CORS headers too? In fact, if your app is handling CORS, then switch it off in Tyk, since you've already handled it.\n. Intriguing - do you have a sample use case? \n. Tyk doesn't do many pure reads - most keyspace activity is read/write (transactions), analytics are all writes, only initial key lookups for auth are pure reads. \nIt's a possibility - we'd need to modify Tyk to use a read-only DNS for reads and seperate one for writes. \nHave you considered redis cluster?\n. I see, we need a middle-ground.\nWill investigate, it should be possible, the driver is quite malleable and needs some work inthe next version anyway. Will take a look.\nI wonder if one of the proxies has already solved this (twemproxy etc)?\n. First check would be if the DNS update is propagated properly to the Tyk node?\nSecond option (and one most people use I think), is HAProxy + Sentinel. This would give you automatic failover without needing DNS changes, since HAProxy offers a single point of entry (you can active/standby this too if you need to), and then have sentinel elect a new master from your slaves, completely transparent to Tyk.\nNice little writeup here: http://www.101tech.net/2014/08/08/highly-available-redis-cluster/\n. I think I've spotted where it's going wrong:\nhttps://github.com/lonelycode/tyk/blob/master/redis_cluster_handler.go#L71\nWhen reads, writes or anything fails, the app is meant to re-run the Connect() function - this is fine if it's the same server, the connection just resumes (driver is quite clever like that). But this function is actually not doing anything since the db object is initialised already.\nSo it doesn't re-create the connection pool (as in, there's no system call to re-evaluate the IP addresses) which causes the behaviour you are describing... will look at this now.\n. Update on this, the driver handles reconnects just fine, but it's a deeper problem that will need some investigating (the reconnect IP is already resolved, which means that the entire connection pool needs to be destroyed and then recreated). DNS swapping won't be something easily fixed for now I'm afraid. Suggest a proxy approach for now.\n. I just took apart the storage handler and added a bunch of forced reconnects and disconnects to completely replace the pool.\nIt's a tricky problem, mainly trying to get all the components to listen to the same pool again. Will keep working on it, but no promises :-/\n. No update recently, we've been deep in finalising the next version, I will take a look at this once we've got the bulk of the new system ready, we're very close...\n. @mvdan redis cluster is different from redis sentinel, it wil require a driver change as redigo has stopped adding new major features. There are wrappers and proposalls about though to add sentinel support (much like our cluster support is provided by a wrapper).. You can give a token or a policy access to multiple APIs.\u00a0\nWhen you create a key take a look at the access rules (same goes for policies) - you can add as many Apis and versions to a key or policy as you like so that you can create a policy that enables access to a group of APIs that you're managing with Tyk:\nhttps://tyk.io/v1.8/quotas-limits-security/limiting-access/\n. In the portal, you can publish an API catalogue entry that is tied to a policy, the policy grants access to multiple APIs\nThat policy is the applied to the token generated for the developer.\nDevelopers can't control anything about their keys except request them and monitor them. It's quite intentionally limited to ensure access control remains with the API owner.\nYou could publish multiple catalogue entries that give different access rights Via different policies. Then the developer can have multiple keys that represent those groups.\n. @yoanisgil I see what you are getting at and I can see the possibilities.\nTyk definitely supports this kind of work-flow (simply modifying user keys' access permissions, but placing that control user-side instead of owner-side). So writing a portal would be quite simple, you would need to do away with managing anything within Tyk Dashboard though. No change needed on Tyk side\nAdding this to the existing portal is a bit tricky, the current flow is very much based on policies and keys being linked with developer accounts, wht you are proposing is a completely different mode of access - i.e. a developer is allowed access to API A, B and C, but has no token, they then generate a token for A+B and another for A+C and maybe one for A+B+C. \nPolicies stratify these rules into groups so that many keys can be managed en-masse. The above flow would mean no policies (so no way of ensuring you disable or catch errant tokens), or decoupling access control from policies using another policy (ouch, especially on a per-token basis), or inverting the access control override chain from being \"policy overrides key\" to being \"key overrides policy\" (but since keys without access control lists enable global access, this would be a bad thing and is disabled by default as a security measure, integrators can chose to switch this off though).\nPolicies enable API owners to control hundreds of thousands of keys with a single setting (including their rate limits and quotas), instead of managing those keys independently (remember in many setups keys are hashed, so they are not even visible to the API Owner unless they retained a copy of the raw key), enabling this kind of composition on the portal end breaks all that management of keys en-masse.\nWhile I like the idea of having an API owner expose 10 different APis via the portal and allow devs to compose their own access controls, the argument for complexity vs. payoff just doesn't hold (I save a dev a line in their configuration file for an extra token, while we need to implement a whole new security layer for compositional keys), remember that dev still needs a wrapper or library to access that API, especially if it has more than one resource - so where's the practical benefit?.\nTyk has APIs that handle key access-control composition, both via the Advanced and Gateway API, if an integrator wants a compositional interface, they can quite easily set one up and just bypass the Tyk portal altogether and not use policies (or they could use aspects of it, then modify the keys themselves). The system is very flexible for devs wanting do things their way, so it's not like it's impossible, just the argument for building it into the (non open source) portal isn't strong enough.\nWill leave this ticket open, if there's more interest would be happy to come back to it.\n. A policy object is just the same as a key session object, and the Access Rights value in the policy is copied over the key when it comes in:\nhttps://github.com/TykTechnologies/tyk/blob/master/handler_success.go#L82\n(If you use the dashboard, you'll see that you can set access rules on policies), you can also add granular rules on a method / path regex basis to create really custom access modes.\n\nIt's also impossible to create a key without access rights (is there a setting i missed?)\n\nSince policies override token values, the token needs a base set (in case the policy gets deleted), so you need to give them access to something (or nothing), even with a policy. You can override this in your tyk.conf by enabling allow_master_keys. This will allow access rules to be empty, use with caution. Should be fine on a small install.\n. In the dashboard, fill in the listen-path value. That should solve it\n. Never said it wouldn't be fixed.\nPutting a workaround in our issue tracker will help others until the fix is released.\n. Fixed in Develop - Tyk will skip over invalid listen_paths now.\n. Thanks for the pull request! We updated the driver in the develop branch yesterday with exactly your changes though! :-D\nAppreciate the effort, but can't merge it I'm afraid... \n. We've not extended this feature yet because nobody has asked :-) (and yes, resources are thin).\nI'd be delighted to accept contributions towards making the HMAC middleware more compliant, so if you fancy taking it on, would be more than happy to help out.\nLike with anything, if demand for this feature grows we'll put more work into it to make it better. So far HMAC demand has been pretty low (and usually when someone does want it, it's a very specific implementation they want)\nPersonally I'd love to get this implementation fully spec compliant, so would be keen to see it get done. If there's time/space at the end of this dev cycle I might take a look at it.\nIf you want to contribute (that would be great) - please work against the develop branch, not master.\nWhat do you think?\n. Fixed in develop:\n- request-target now supported\n- headers signature field is now supported (this means Digest can be included)\n- Clock skew has always been configurable on a per-API basis\n. If you want to use the dashboard, you'll need to configure Tyk to load Apis from mongo DB. The dashboard does not work with Tyk in file-based mode.\u00a0File based mode is basically tyk's stand-alone setting (so it can just work or of the box, no dependencies except Redis).See step 1 here:https://tyk.io/v1.8/setup/install-dashboard/\n. You could use a small script that pushes the file based versions to the advanced API:\nhttps://tyk.io/advanced-api-v0-9/api-definitions/\n. Thanks for the heads up - we'll check it out. In the mean time, If you want us to reset your password let us know at support@tyk.io :-)\n. Hah! Yes we're working on putting all the copy into GH... I have sausage fingers so typos eventually find their way into the copy :-/\n. So we now have the content for the site in it's own repo: https://github.com/lonelycode/tyk-io-site-content\nThis doesn't include the home page though ;-)\n. Fixed typo on home page :-) \n. Can you pull this in the develop branch instead? Will need to reject this one :-/\n. Interesting, build fails now\n. wait, needed to update local deps... sigh\n. In a hosted install you can update the portal email templates to exclude the password. We only include it in the release template because otherwise API owners wouldn't know it was available ;-)\nIn our cloud version - I see your point, we should probably change the template once we have a recovery feature :-/\n. Apologies, yes I did mean reset. \nI can see your reasoning in not having the password variable available to the template.\nNot sure there's any need to cast aspersions on the wider security of the product, we appreciate the input, continually improve things, and take security very seriously.\n@azare the passwords are encrypted in the database using bcrypt, they are only unencrypted for this single moment when this template is executed, the plaintext never reaches a storage medium. \nTake a look in the database, all the passwords that are stored are secure.\n. Password template field is now no longer accessible to portal owners. \nFor those that can't wait until the next release, they can edit portal/email_templates/welcome.txt and portal/email_templates/welcome.html to remove the mention in their outbound emails (if they have the email integration enabled).\nThis change has been pushed to cloud.\n. @joshuajabbour Completely understand, and agree with your assessment - which is why we pushed the change to the cloud version so quickly :-) This kind of feedback is important, and continually helps us improve quality.\n. Interesting. Can you share your API definition? As in, how have you configured the API that caused the crash - what plugins/middleware are you using?\n. Also, can you share your Tyk.conf too - it seems to be crashing trying to purge your analytics cache over and over again, it might be misconfigured.\n. Just as suspected: set your purge_delay to anything larger than 0.\nI will put an enforcer in to check the value to prevent this error.\n. Interesting, will look into it, our proxy doesnt strip out the header, so it's quite odd that this happens. If you put in a custom header it works fine.\nWill investigate.\n. Hmmm, I've tried this with curl and explicitly setting the host header, and it worked (tested against auth0), though not exposed in Tyk, but was passed through.\nhowever, it seems Golang reserves this header and so isn't part of the default header map: \nhttps://code.google.com/p/go/issues/detail?id=7682\n. This has now been addressed in the develop branch.\nAdded capability to preserve host header, if proxy.preserve_host_header is set to true in an API definition then the host header in the outbound request is retained to be the inbound hostname of the proxy.\n. Date ranges on first load are automatically computed in the dashboard, seems there's an off by one error there somewhere. \nIt doesn't affect data retrieval as analytics data is time stamped with an ISO date object.\n. Fixed in develop.\n. I think it's the pre-flight request. It will be an OPTIONS request, and since it is generated by the browser, it will strip auth headers from the pre-flight.\nWhen the options request hits Tyk, on a secured API path, it will still expect a header, and since that header is missing, block the pre-flight response, which in turn breaks the following (actual) request.\nYou've got two options:\n1. Add OPTIONS and a wildcard to your endpoint designer, i.e. Method: OPTIONS Value: {*} select \"Ignored\" from the drop down (this will match anything one-level deep, e.g. pong/, foo/ but not foo/bar/baz, thatwould need more wildcards, i.e.: {*}/{*}/{*}) What this will do is tell Tyk to not try and authenticate any of those requests and therefore let them through to your app.\n2. Enable CORS in the Advanced options and set the relevant settings, then switch it off in your app. Then Tyk will handle pre-flight OPTIONS requests for you and write the relevant headers,\n. @krsand I'd really suggest looking at our community forum, CORS is covered in excruciating detail.\n. That's probably happening because the key does not belong to an organisation, and when the dashboard was set up it was set up with a primary organisation. \nThe dashboard won't allow users of another organisations to pull tokens from a Tyk cluster if they key is not owned by the same organisation as that user.\nTo fix this, go to Users -> Your User in the dashboard\nAnd copy the RPC ID value, then use this value in the org_id element of your token, and PUT it to the gateway REST API, you will get a modified response and it should now be searchable in the dashboard.\nAs for the way key analytics hare handled, the keys that you see in the key analytics are the hashed representation of the token, once a token is created, it is only available to the user once, right after creation. After that it is hashed and can never be retrieved and is never stored alongside analytics, this is why we attach this representation to a developer profile so that there is some form of identity management in place.\nIf you want don't care about keeping the keys secured in Tyk, you can disable key hashing by setting hash_keys to false in both your tyk.conf and tyk_analytics.conf files.\nYou will need to recreate your keys through.\n. You can get the Org ID by doing a request to your User object in the advanced API (https://tyk.io/advanced-api-v0-9/users/), so:\nGET http://domain.com:3000/api/users/\nWith your users API key s the authorization header, you'll get a list of user objects, they will all have the same org ID\nAlternatively, open up the browser console, select the network tab and then open the Users page (not developers), you'll see the same API request go out, if you examine the response preview, you'll see the Org ID.\nDeveloper management can be done with the advanced API, the flow is the same as the portal, you create a developer, submit a v2 key request, and the approve it, the key will be generated and made public to the calling API once, and then hashed.\nDeveloper API: https://tyk.io/advanced-api-v0-9/portal-developers/\nKey Request API: https://tyk.io/advanced-api-v0-9/key-requests/\nThe advanced API goes via the dashboard, it is different from the raw node API as it restricts requests to specific orgs and users, but it has a ton of functionality.\n. Are you using a policy? A policy will overwrite a keys tags\n. Yes we'd like it to do that too, the reason it doesn't do it is more to limit GC and CPU cycles, extending an array is expensive, overwriting a pointer is cheap. So policies overwrite instead of merge. Since policies are applied in real-time, we try to make that really lightweight.\nMaybe we should modify it so that policies don't overwrite tags, but instead are referenced again at the analytics writing level and do the merge there (it's not happening during request throughput, but in a goroutine so it might be ok there). \nIf you have middleware that is reliant on tags (e.g. header or body transforms that reference session data or dynamic middleware) then it will only have access to key-level data, which isn;t ideal... \nAn alternative might be to have a secondary field in a key we can add to.\nLeave this ticket open, we'll consider it as a feature request.\n. :+1: \n. You might just need to add a meta_data key to your session object (either via the REST API or add some meta data using the dashboard) - there's JSON Schema validation error sometimes when a key is created without meta_data in the gateway and is then managed in the dashboard.\nWe'll be addressing this in the next version.\n. The docs are a bit out of date. Will leave this ticket open as a reminder to update them.\nSelect the dashboard option, set a tag to match for the version and use it as part of your URL structure.\nAny paths you specify operations on must include the version though.\n. its the same as using the Param based and header based version, you set this as the type and then in the list of versions under the setting you add your various version tags and expiry dates.\nThe tag should just be v1 for /v1/ based URLs etc.\n. Why is it in your listen path? The listen path should be a single, unique path that precedes any API specific info.\nListen on: /API-name/\nVersion tag: v1\nTarget: http://API.your domain.com/\nThen direct traffic to \nTyk.domain.com/listen_path/verion-tag/resource\n. There's an issue with path-based versioning where the analytics aren't recorded properly. It has been fixed in develop so will be fine in the next version.\nAs for modiying listen path - just change it in the tyk_analytics.conf file:\n{\n...\n    \"hide_listen_path\": false,\n...\n}\nThen restart the dashboard, it should be editable (might need to refresh browser)\n. When it is ready ;-)\n. I'd suggest not using the path-based versioning then - we have no release date that we can publish. It's close though.\n. Oh right, sorry - I thought you wanted to edit the listen path.\nThat setting won't be respected i the dashboard if set in the DB, it gets reset in the webapp because it assumes a certain kind of operation.\nHave you considered using the host manager?\n. Not with the dashboard. If you modify it in the DB, then save the API in the dashboard, it will overwrite the setting.\nThis is not causing the issue with the analytics, that is a bug. When tyk writes the analytics it doesn't grab the version data properly if it's a path-based version.\nTip: Don;t version your API and just have it as it's own API, then set the listen path to api/\nUsers will access api/v1/* and v1/* will be passed on to your app.\nIf you want more control, add a rewrite rule in apache to detect requests to v1/ and rewrite them to listen_path/v1 then you can have it sit on root.\n. Yeah that would be fine - you may need to fiddle about with slashes though, so target:\nhttp://localhost:8080/API-name/\nThen listen:\n/API-name/\nThat's how we usually do it. This will cause Tyk to listen on http://domain.com/API-name, then strip \"API-name\" and take the rest of the url and put it on the end of target_url, so you get it back on the other end.\n. had a dig around in this issue, to fix, you can set it so that you can enable strip_listen_path by setting force_api_defaults to false in analytics.conf - the dashboard will still override the setting if you save it, but the API will not.\n. Yup, think it's definitely something that can be done for the dashboard - the data is mostly there, just need to understand what the filters would be and how they would be used and graphed.\nIt's too late for the next version, but can go in the roadmap - it would help to have a better idea of exactly how this would break down, I can't visualise the UX / screens / graphs right now - but it might be just because it's late :-)\n. Don't close it dude! ;-) will keep open for further discussion...\n. Yeah you've set expire to 0 which means it will expire almost instantly. Use -1 for never expire, otherwise set a value.\n. So they key actually works for 24 hours? As in, you can use it?\n. Hmmm, that is a little odd - so the reason dashboard is saying never is because it can't match your value to one of the presets (or it might just be a select bug, I think it's having trouble converting the value to a date)\nThe expiry is meant to be an epoch value, so if it's 0 the key is expired (sometime in 1970), so it's weird that you can use it.\nHowever Tyk does not delete keys instantly, it expires then first (returns an error to the user) but then drops they key from memory some time after. Just in case you want to edit or change the key. \nWhich explains while it exists for a day... Although it should be expired in software terms, not existence terms. Try setting -1, or a UNIX epoch value in the future.\n. Are you restarting redis?\n. In your API definition have you set \"session_lifetime\" to anything other than 0?\n. Well, if you were restarting redis - you might have been losing data on the restart unless you explicitly save the data\nIf you had session lifetime set to larger than 0, then the session cache would expire all keys after x seconds, but it's 0 in your conf, so that's not it.\nYou've set the expire on the key to -1, so that will stop it from dropping the key after a forced expiry (in fact I don't think it drops them at all).\nWhen you POST it creates a key using your custom key name, if you PUT it updates a key (under the hood it's the same SET operation).\nLets take a look at your tyk.conf file.\nAlso, how have you set up redis?\n. Potentially - by default Redis will lose everything stored in it if the process restarts.\u00a0\nTo make it persistent you need to set the appendonly option in the conf file (Google it) - though this could adversely affect disk space on the instance, so it needs to be managed.\nAlternatively you need an active backup so it never goes down (master slave).\nThough you did say that the instance or process isn't restarting... So it shouldn't be that.\nI'm assuming you just installed Redis on a box somewhere and left the defaults? Can you tell me more about the Redis setup?\n. This is the topic you want:\nhttp://redis.io/topics/persistence\n. I don't think you need to make the CORS headers allowed, Tyk handles that for you.\nAlso, you don't need to allow OPTIONS as that is part of the CORS standard, Tyk will respond appropriately to a preflight from a browser, allowing OPTIONS could be doing something weird like making it try to pass through.\nLastly, a preflight request from a browser will strip out Authorization headers according to the spec, so you don't need to send them.\nWhat you need to look at is the actual OPTIONS request in your browser (not the console) to see what is coming back - check the network tab to see what Tyk is responding with to the OPTIONS request that the browser sends pre-flight.\nYou also seem to have a very aggressive cache enabled (all safe requests - this includes options) I would disable that (though it shouldn't affect things - I can see your second GET is returning cached responses), but the CORS middleware should just be responding and not passing through.\nYou could try a more verbose and specific options test to get more data:\ncurl -H \"Origin: http://example.com\" \\\n  -H \"Access-Control-Request-Method: POST\" \\\n  -H \"Access-Control-Request-Headers: X-Requested-With\" \\\n  -X OPTIONS --verbose \\\n\"http://testorg.tyk.docker:8888/aolCourseSearch/?jsonIndent=1&type=search&ctype=12415&lat=12.79&long=77.51&center_list=1\"\nAgain, would be good to see what the browser is doing.\n. Ok that's a bit odd. Did you remove the allowed headers  values and switch the caching off?\n. Also please post your JS so we can replicate\n. One idea: Remove the authorised headers you have there - the browser is asking if the 'accept' and 'Authorization' headers are allowed in its request, this will fail since they are not according to your config so add these in and remove the CORS ones.\nAlso, maybe disable allow credentials\n. It should auto-scroll, it could be that we missed it in some of the UI components. \nI take your point that there should be more useful feedback (maybe in the form of a success dialog).\n. Which browser are you using?\n. Awesome, thanks - probably screwed up HTML element... we've had this happen elsewhere with FF :-/ \nCan confirm it's OK in Chrome though. \n. Fixed (requires re-install)\n. Wow that gist is ancient and hasn't been maintained in a loooong time. \nIt also assumes a certain version of Tyk (0.8 I think), suggest you take a look at our official QuickStart for docker which uses docker compose to bootstrap everything: \n. Forgot to add the link: https://tyk.io/v1.9/setup/docker/\n. As of v1.9 nginx is no longer a requirement for Tyk, domain handling happens entirely within the Tyk node.\nHow does NginX indicate a request has been retried? It could be captured (we don;t store request data atm, but we're looking to expand that)\n. There's a better way to do this, you can proxy the dashboard using Tyk itself :-)\nBasically - since Tyk Gateway can handle domain management, you can set up Tyk to proxy the HTTP requests just like NginX or Apache does, we've made it bootstrappable with an API call, to set up the proxy configurations, simply run:\ncurl -d \"domain=\"{PORTAL-DOMAIN}\"\" -H \"admin-auth:{ADVANCED-ADMIN-API-SECRET}\" http://YOUR-DASHBOARD-INSTANCE:3000/admin/organisations/{YOUR-ORG-ID}/generate-portals\nIn a terminal\nHere:\n- PORTAL-DOMAIN must be a standard domain form, no protocol or slashes, so e.g. www.my-portal.com.\n- ADVANCED-ADMIN-API-SECRET Must be the admin_secret value of your tyk_analytics.conf file\n- YOUR-DASHBOARD-INSTANCE probably localhost, given you can't access from outside. If you've set a dashboard domain in the tyk_analytics.conf file, then you'll need to disable tyk Dashboard host management as you'll be using Tyk Gateway as domain manager\n- YOUR-ORG-ID is the value under \"System Management\" -> \"Users\" -> Your user -> \"RPC Credentials, basically the organisation ID for all of your APIs and the portal you are building\nThis command will create three APIs in your dashboard, they will reverse proxy from Tyk Gateway (which I assume you have running on port 80) to your dashboard and assets for you, binding to your preferred domain name, however this command assumes that the Tyk Dashboard instance is on localhost.\nThese APIs have some special properties - they have a do_not_track setting so they don't mess with your analytics, and they also are marked as a \"site\" so they appear greyed out (they are still editable though).\nThis is what we do in the docker instance where everything is on the same host and want it all to work over port 80.\nAlternatively, if you must use apache, you will need to proxy/rewrite:\n- /api/ to http://localhost:3000/\n- /portal-assets/ to http://localhost:3000/\n- / to http://localhost:3000/{YOUR-ORG-ID}/portal/\nThis will proxy the ROOT of the domain that apache is managing to be the portal, if you want it elsewhere, change the last proxy rewrite to something else\n. Ah I see. You still want the dashboard to work on port 80 too. My suggestion would be to have the dashboard work on a different hostname then, so you set up Apache to proxy everything to hostname A to the dashboard, and hostname B to the portal using the above rewrites.\nYou need to split it out somehow, you can't have the portal on the same hostname as the dashboard. In our docker config we bind the dashboard to tyk_dashboard.tyk_dashboard.local and the dashboard to a separate host name.\n. Override_hostname will basically just force Tyk Dashboard to assume what the Tyk Gateway hostname is when it uses it in the GUI (it's purely aesthetic)\nHostname is the hostname the the dashboard binds to, it's extremely strict.\n. No, not yet. but good idea.\nWant to open a feature request?\n. V1.9 handles domains internally, and when it attaches listen paths, it doesn't put them in length order, so the router may be matching your closed API instead of he Open one.\nYou can address this by either:\n- re adding them in a different order, longest path first (we need to address this anyway)- setting a fixed hostname on one API and not the other, they will then be matched differently\n. If you've set up Tyk 1.9 you can add a custom hostname to an API, so you could just bind the longer listen path to a domain. See here enable_custom_domains here:\nhttps://tyk.io/v1.9/configuration/configuration/\nYou should be able to add the custom domain using the new version of the dashboard.\nTo be honest I'm surprised it worked in previous versions as that logic hasn't changed much.\nThere's another hack you can use and that is the sort_by parameter in the Tyk API definition, it's used by the system to sort API's by force (not documented).\nYou will need to add a sort_by field to the root of the API definition in Mongo for each API with different integer values and they will sort accordingly. You may need to experiment.\n. Ok, I think sort_by is the solution you need here.\nYou will need the latest version of dashboard for it to work, as yes, otherwise the values will be overwritten as older versions do not support this new API Definition schema.\nTo enable the sort_by field, you need to edit the API manually in MongoDB OR use the Advanced API to update Dashboard.\nHere's an abriged DB entry for an API definition with sort_by set:\n{\n  _id: ObjectId(\"5654565430c55e3904000002\"),\n  name: \"Closed\",\n  ...\n  domain: \"\",\n  do_not_track: false,\n  tags: [],\n  hook_references: [],\n  is_site: false,\n  sort_by: 100\n}\nSetting this value in the DB, then hot-reloading the gateway will load up the correct API.\nThe other option\nHow do you target your API? via http://localhost/api/v1/notify?\nIf so, add \"localhost\" to domain for one of your APIs and make sure custom domains are enabled (all this is documented in the site).\nThis creates two route entries, one for the root domain of the gateway, and one for the other API. This is more of a hack, Id suggest the sort_by method, we use this to make sure that that domain listings are in the right order for portal proxying.\nQuestion: Why is /test/v1/notify a separate API, why not just have it as a reserved ignored path in the API designer of the first API, if you set this to be ignored, it will bypass the auth altogether and have the same effect?\n. Q: I am using the latest version of dashboard, and by overridden sort_by means the dashboard is overwriting the value to 0 again,\u00a0\nA: Are you sure you are not overwriting the data by saving the dashboard entry over the DB one (you need to refresh the API in the designer to load the new data) - this is quite easy to do by accident :-)\nQuestion How to set this value from Advanced options, not able to see that , is it hook??\nA: sort_by is an internal value, it's not exposed to the dashboard yet except to respect it when saving. We use it in the docker setup and in that setup we ask users to change the config in the dashboard, and sort by remains in place, so we know for a fact that it is not overwritten by the dashboard.   \nQ: Using endpoint designer i was able to ignore the Endpoint but I wanted to have it whitelisted also, which mean only specific IP's hitting that url, but as I make it whitelist the other paths stop working giving 403 error.\nA: You need to whitelist all paths, a whitelist is not an IP block, it stops other endpoints except those specifically listed from working. \n. That's easy, just change the port configuration in Tyk_analytics.conf and use the domain feature to expose the domains.\nThen run the gateway on a separate instance so that there is no port conflict.\n. Then you will need to proxy the dashboard and portal via the gateway, exactly how we describe it in our documentation for running Tyk in docker:\nhttps://tyk.io/v1.9/setup/docker/\n. Did you set the domain name for the portal in the site entries in the dashboard APIs view?\nhttps://tyk.io/v1.9/setup/docker/#one-last-thing-for-your-portal:69e60651f42783a7df723575c4088b5b\n. It might be the fact you are using a CNAME, the host header might not be making it through the proxy properly, have you tried an A record to point at the IP?\n. Ah, wait, yes - sorry, there I was thinking you were trying to access the portal, but you want dashboard on 80 too. That's super tricky, as you would need to expose the entire dashboard / dashbaord API through the gateway - you could try to add an APi entry similar to the portal one, bind it to your dashboard domain and proxy it internally to 3000.\nNo guarantee that will work though, it's just not designed to have the portal, dashboard and APIs all listening on 80 without outside help.\nYou could use our host manager and NGinX, but that's a pretty major change that doesn't fit here.\n. It's not something we've tried to set up, though it should be possible to just proxy it through with a domain name. Needs investigation...  I'm pretty sure it should work with Tyk doing the proxying. \n. Right, so I got this to work:\n1. Kill all your containers, including Mongo, we need a fresh start here\n2. Edit the tyk.conf to add \"enable_custom_domains\": true to the end of the object (make sure it validates as JSON).\n3. Edit the tyk_analytics.conf and set \"portal_root_path\": \"/\" (it defaults to /portal)\n4. Start the containers with compose\n5. Run the setup script\n6. Now edit the APIs for the portal replacing localhost with ambassador_1\n7. Now edit the Portal API and change the listen_path to / (it might already be this)\n8. Add a new API and call it dashboard:\n   -  Custom domain:   www.my-dashboard.com\n   - Listen path: /\n   - Target: http://ambassador_1:3000\n   - Auth: Open\n9. Save it and wait for the Tyk Gateway to reload\nSince the quickstart is just that, a way to get started with the portal, the APIs and the dashboard, we don't do strict domain matching (otherwise generic domains wouldn't work properly and other weirdness).\nIf you enable custom domain on the gateway, then it will enforce listen paths on a domain level instead of root, but adds the requirement of a strict domain path to all APIs - if you look at your logs for the gateway, you'll see your dashboard API is probably being skipped because of a dupe listen path.\nSo, now you have a portal (on root, at www.tyk-portal-test.com), and a dashboard (on root, at www.my-dashboard.com)\nI would suggest to add another hosts entry:\n192.168.99.100    apis.my-dashboard.com\nAnd then when you create your APIs, bind them to this domain.\nAll possible, just not with the cookie-cutter quickstart config, it needs tweaking :-)\n. Thx :-)\nAll the content is here:\nhttps://github.com/lonelycode/tyk-io-site-content\nLooking forward to contributions!\n. You can edit all the templates in the portal, so you can just remove that from the template, because of the super odd configuration, Tyk is trying to be clever to guess the right doc location.\n. Are they both linked to the same policy?\nIf yes, change the policy in the second Catalog entry.\nOne policy per catalogue entry\n. Note to self: add validation.\n. That'll be it - generate a new policy and link it to the first API Catalogue entry, save it, and editing will work again.\nWill leave this open as we should handle this gracefully :-)\nWhy is the same policy set up for the two different API entries?\n. Ah, yeah that should be fine, you can totally duplicate policies - it's just catalogue entries that are coupled to policy uniqueness, not policies to API's... They are meant to be varied (e.g trial policy for API 1, pro policy for API 1, enterprise policy for API 1 etc).\n. @Klaboe \n\nIs there a reason why one should not be able to have the same policy on two different API-entries in the Catalogue?\n\nIt's an abstraction we didn't deem necessary -policies are cheap, so you can always have more than one - it offers more control and more traceability than just blanketing a single policy across multiple catalogue entries.\n\nI mean it is plausible to have multiple APIs that will have the same access rights and rate-limits... But have different documentations?\n\nIt is possible, but then it's also incredibly easy to just set up a second policy for that documentation set. \nThe catalog is mainly meant for generating a public facade to a group of internal microservices, so you might actually have 100 services you bundle into a single public-facing API, now you use a policy to grant access to a subset (as a trial) and full (as Pro) and it's all transparent to the end-user because APIs are organised on a slug basis, so it all seems like one API even when it is being used.  At least that's a preferred use case.\n\nAlso: If i have two API-entries in my Catalogue that share the same policy; trying to edit the second one will put me in editing mode for the first one....\nThis seems like bug in the dashboard?\n\nYes it is a bug, the workaround is to not have the same policy for two catalogue entries.\n. It's not going to be changed, but we'll be putting a check in place to prevent users from doing it.\n. There's a bug with the date range for December - it sets the end date to month 0, when it should be month 1 - try selecting Jan in the end date drop down and pressing the search icon. The stats should show up.\n. When the bootstrap script does that, dashboard is not running.\nCheck if dashboard is running using \nsudo service tyk-dashboard status\nIf it is running - did you go through the configuration (setup) step and change the port number for dashboard? What port is it running on?\nIf you can't browse to the URL then dashboard is definitely not running.\n. if you can't browse to the server and get a connection refused error, then the dashboard might be running but that port is blocked. Are you running it in a VM?\nIf so, you need to open all the ports\nif you cannot browse to the dashboard then the bootstrap script can't access it either (it uses the API to get things set up, there's no magic DB interactions)\nDid you run the setup properly before starting the process?\nIf the process is running, then there will be a log file in car/log/upstart - maybe check that it to see if anything is up.\nIf you can't get to the login screen, you can't bootstrap it, so solving that problem is your main issue, and if it's running then it's the OS, not the process.\n. Well that seems pretty clear - the dashboard can't start because the mongo DB can't be found :-) \nIs mongodb up and running?\n. Would recommend taking a look at the mongodb docs on installing mongo on Ubuntu, there may be something with your distro/image.\nYou could always just create the required directories :-)\nSorry I can't help more, but I've never seen mongodb not install correctly - maybe you installed the wrong version or the installation just didn't work\nYou could try a hosted mongo if necessary. \nHow are you virtualising?\n. i don't think it's the OS, I think it's what it's running on, Mongo is trying to access files that don't exist but should because they would have been created on install.\nWhich means the install can't do something - if you are running in VirtualBox, with an 8GB disk, is that full? Is it read only?\nIf you are virtualising and trying to run Tyk - you could use Vagrant - it works with VirtualBox without all the manual setup (it also handles all your networking and disk allocation). We also have a setup guide for vagrant :-)\nWhen you install mongo, are there any error messages? When we use Mongo in docker for example, it throws a fit if it doesn't have enough disk space - and this only on OSX because the way docker runs in OSX is with a VM and the VM doesn't have enough disk space :-)\nSo I really think it's the virtualisation & Mongo - maybe give your install a bigger drive?\n. Yep, we enable small files on the docker QuickStart :-)\n. You seem to be running a really old version of the quickstart... the tyk host manager is no longer run as part of this script. \nAlso, that blog post is terribly out of date (note to self: update it)\nI would suggest destroying all of your containers, then:\n```\ncd tyk_quickstart\ngit pull -u\ndocker pull tykio/tyk-dashboard:latest\ndocker pull tykio/tyk-gateway:latest\ndocker-compose up -d\n./setup.sh  \n```\nAlso, we just updated the docker setup guide with an even newer version that uses the docker ambassador pattern, so the instructions have changed slightly, I suggest revisiting the setup guide :-)\n. That's a little odd, you may have some other problems down the line since the new Docker install no longer uses the tyk_dashboard.tyk_dashboard.docker anymore :-)\n. Yeah it's all in the config file, you can change the connection pool size by setting two values:\nstorage{\n...\noptimisation_max_idle: 2000,\noptimisation_max_active:3000,\n...\n}\n. Would you be willing to share your results? Always interesting for us - you can email me directly if you like on martin@tyk.io\n. @sousmangoosta That's about as clear as mud, if this is a bug, please raise a new ticket with the actual details of the issue. If it's a question about how Tyk works or a problem with your configuration please see our community forum\n. You can add an endpoint swagger JSON in the portal for publication, but not to define an API.\nGood idea though -)\n. URL based import is supported for the portal. For the gateway, it's injected and converted as raw JSON.\nWe'll look into adding this in future.\n. Every time, it's not an import\n. By default Tyk will 404 even if yu have items in the endpoint designer. \nHowever is you white list those endpoints thenyou get the error you describe.\nThis is by design, since white lists enforce access rules.. As suggested earlier, disable the white list. This will stop the 403s on non-listed paths. Swap them tonne tracked instead.\nIf you do not have each endpoint in a white list then it will 404 - swagger imports create white lists by default (which I assume is what happened here), you actually don't need to register anything in the endpoint designer unless you are doing something to the path or want to track it.\nIn other words: remove all the endpoints in the designer and you will get 404s for bad paths and 403s for bad keys.\nThe change we may want to introduce is that for swagger imports we generate a tracked list instead of a white list. \nWhite lists purposefully obfuscate the facade of an api, even for users with valid keys (considering they may have escalating roles - brute forcing discovery of the non-accessible endpoints could be achieved by testing response codes)\n. Snap :-/\nThis is the right place for this kind of thing. We'll look at making this a bit better.\nYou can increase the page size in the tyk_analytics.conf to bring it in a bit.\n. That could be done, if we modify the white-list, then you define the patterns for the list and add an option \"Group by List Entry\" or something like that, then we tag the analytics entries by their matching whitelist pattern instead of their actual values.\nWe would need to copy the masked values to a real field so that we don't lose the data.\nI like the idea :-)\n. Are they on the same domain? It could be an ordering issue\n. What version are you using? Listen paths are sorted by size these days.\n. Hmmm, might be because it's keyless.\nWhy not use an ignored path for the auth endpoint?\n. It needs to be in your white-list too I think.\n. Yeah, we'll take a look  at it... thanks \ud83d\udc4d \n. You are using the Tyk REST API for an installation that wants to store definitions in Mongo (I.e.. Is portal based), if this is your use case, you need to use the Advanced API (port 3000), which will write the API definition to MkngoDB.\nThe Tyk REST API does not ever write back to Mongo, it only flushes to disk for a disk based install, which is why you see the file ther. But since your install is dashboard based (docker based) Tyk will ignore those definitions and only load from DB.\nHere's the relevant API doc: https://tyk.io/advanced-api-v0-9/api-definitions/#create-api-definition:cdac0ac5cf58124a5fc9102bcd4708e4\nThat command you are using looks like it Les from the file-based section of the tutorial. You can re-use it (pretty much) take care with the JSON structure) for the other API\n. If you don't mind updating the nodes independently, you can do this. But then you can use the gateway docker with mongo/Redis independently and configure it manually and don't need all the guff that comes with the compose QuickStart.\nThe docker QuickStart assumes a DB backed install, and DB backed installs are managed via the dashboard API. There's no way round that. Dashboard API means configs are centralised if you have multiple nodes.\nIf you don't need analytics or users, then you don't need Mongo either, you can just have gateway+Redis.\nyou will need to manually edit your Tyk.conf - take a look at the setup script or some of the pre-shipped templates that come with Tyk to see how that file should look, they are in the install folder.\nNot really a GitHub ticket topic though ;-)\n. That's a python error. The setup.sh expects to have python 2.6 / 2.7 on the system, so it sends the requests, but then can't interpret the reply.\n. Ok, thx for pointing out - I think its because we modify the opaque URL while the cache operates on the path. Might need to be bright in line.\n. Ah, on second look it's because the cache operates before the URL rewriter does (and effectively short circuits any further middleware ops), we need the cache and URL rewriter to be flipped around in terms of order of operation. Should be an easy fix :-)\n. This has now ben added in the next version of the dashboard.\n. Soon? :-) \nWe're in the middle of quite a large overhaul, so it may be a while.\n. We neglected to add this to the docs, I guess we should migrate it in from the knowledge base.\nTo add a policy to a key, simply use the keys API PUT:\nhttps://tyk.io/advanced-api-v0-9/api-keys/#update-a-key:84dc085e9f591e43ce6b2a50cfcb1584\nAnd add the apply_policy_id field with the policy ID (I can see it's missing from the object description in the docs, we need to add this), here's an up-to-date key object model (regular API docs):\nhttps://tyk.io/v1.9/rest-api/api-key-management/#add-update-keys:62eb43c854cb923da811a9fa4c845be3\nTo check if a key has a policy, just GET the key, it's right there in the object. \nYou're right though, the object model is a little out of date in the advanced docs :-/\nIf you see anything or want to add it, the docs are publicly available on GH to edit: https://github.com/lonelycode/tyk-io-site-content\n. Have you tried to use an ID wildcard? We switched our muxer over to gorilla in v1.9 and it supports parameters as part of the path, so you can set a listen path of:\n/organisation/{id}/\nAnd it will work with any value in the id field.\nThough you would still need to differentiate between the two, otherwise they are considered the same, so to have two, you would need:\n/organisation/{id}/resource1/ -> API1\n/organisation/{id}/resource2/ -> API2\nBut resource1 and =resource2 are fixed strings, as they differentiate the wildcards from one another, otherwise they would always match to API 1.\n. I think I know what it is. It does work, but the proxy request will 404 because of the stripped listen path, since the gateway will look for organisation/{id} and strip that, not the matched value. So while the router will react and route correctly, it will not strip the dynamic path.\nSorry to get your hopes up :-/\nCould be an easy fix though to replace the {value} with a regex pattern (we do this on path matching post routing). Might be an idea, will keep this ticket open to keep it in mind as it ould be a handy feature.\n. The ambassador error is telling - docker compose is not very consistent when assigning container names across versions and operating systems. \nDo a docker ps to see what docker containers are running and what ports, then rename them as appropriate in your compose yaml file.\nThen you'll be able to create a key.\nTyk hasn't got any configuration params to work with another proxy.\n. Can you access it directly from within the container?\n. No you shouldn't have to do anything else except make sure that the the ambassador is referencing the correct names for the dashboard and gateway and that the gateway and dashboard can see the ambassador (if it's name is different).\nYou will also have to change the portal data to make sure the proxies all work for the portal (if you are using it, this is set in the dashboard APIs list as per the docker setup guide).\nI was asking, if you open a bash shell in the gateway docker container, can you ping / curl your API? It might be an issue with the networking setup of the containers themselves.\n. 1) In the compose.yml ambassador needs to point at the right containers, this line: command: \"-name tykquickstart_tyk_gateway_1 -name tykquickstart_tyk_dashboard_1\"\n3) This error: http: proxy error: dial tcp 54.175.222.246:80: i/o timeout implies that the gateway (Tyk) cannot reach this IP address from within it's container. To test this theory, you should open a shell in the container to try the curl command to your raw api, not Tyk, this will emulate what Tyk trying to do, if you get a timeout from curl within the container, then the networking of docker is the problem. If not, then it's something else.\nFinally, as I mentioned earlier: Tyk does not support proxy authentication on outbound requests. It assumes a clear route to the host.\n. There you have it, there's a problem with how your containers are configured. It's not a Tyk problem, docker can't see your API, in fact, applications in the container can't see the internet as a whole.\nNot sure how to address that, as I've never seen it before, what OS/Docker environment are you running?\n. Take a look at the tests, they provide the clearest examples of settings vs. SD return types. \nThe target URL is assumed to be root at the moment (/), there's another ticket requesting being able to tag on a target URL to the discovered host.\nDepending on your configuration you could have the SD system return a full set of target URLs with route info as a list, then you don't need to use the system's construction capabilities (which don't use a target route).\n. Do you have strip_listen_path enabled? It looks like the error reporter (it's a system error, not a proxy error), is using a different path, which is why you might be getting that.\n. Set your listen path so it's like this: \n/ws-test/\nAnd it will strip properly.\n. That's going to cause problems, suggest you change the listen path to something else as I think the path stripping is malfunctioning because it doubles up\n. Awesome, thanks! Though next time please PR to develop branch :-) (master and develop are in line atm, so it's no problem to merge back)\n. It's been requested before. The simplest thing would be to add an override target field to the version definition object, then have the proxy use that instead.\nThe problem here is that the proxy object is created during the bootstrap load of the API definition, so it's set in stone. That would need to be changed, which could be quite difficult.\nThat, and that there are many manipulation a to the target, can cause compounding issues with other features.\nSo it can be done, but we were waiting for a major version change to introduce it as it's pretty severe.\n. Afraid so, there's something to be said about dynamically creating the proxy at runtime instead of at init, but I worry about performance impact and the side-effects with all the other path-manipulation and target-manipulation features (e.g. service discovery, load balancing - how would that work on a versioned basis?)\n. So I had a bit of an experiment here and have a working version in the experiment/multi-target branch.\nYou will need to pull tykcommon again as I had to update the APIDefintion object.\nIf you set an override_target on the version definition, then it will override the base target, if this value is empty, it will use the base target.\nObviously, clever things like service discovery and round robin aren't supported. But for this use case, it should work.\nThere's potential to move the various options for the proxy into the version definition, but there's a lot of scope for side-effects, so will need to investigate. For a simple target override though, it shouldn't be a problem.\nTake a look and tell me what you think :-)\n. Not yet, you'd need to compile it yourself and then insert it into the container manually.\n. I don't think you did that right, the domain needs to actually resolve to the dashboard, otherwise the API calls will fail and the bootstrap script will fail (it's explained in the section with the command: https://tyk.io/v1.9/setup/vagrant-setup/#8-configure-tyk-dashboard:741a95b7e23e61d4ffb7ee44824ee9fa) \nSee the community forum for stuff like this because it's not a bug and lots of people have reported it.\nAs for the services, did you actually start them? (https://tyk.io/v1.9/setup/vagrant-setup/#5-start-tyk-and-tyk-dashboard:741a95b7e23e61d4ffb7ee44824ee9fa)\nLog files are where you would expect them to be /var/log or /var/log/upstart\n. So the error you have there is because setup.sh wasn't run before starting Tyk, so it assumed installation files were in /etc which they aren't. That panicked the binary and so nothing ran.\nYou need the domain to be valid outside vagrant, inside shouldn't matter.\n. Fantastic, thanks! :-D\n. We have a new rate limited, it uses a sentinel to drop rate limit enforcement off thread, the sentinel times out based on the period value. \nThis is fine for short periods, not for long ones.\nThe trade offs are: either process on-thread (in request) and decrease throughout overall, or do it with the sentinel to increase overall throughout and performance. \nThe value of sentinel degredation is still up for grabs though.\n. Sweet :-)\n. Merge against develop though please :-) been a bit going on with JWT middleware.\n. This is now in the nightlies (it may even be in 2.0), but it's definetely done.\n. Are you reporting a bug? The JWT implementation is specific to you generating your own JWTs, not 3rd parties and works as described in the docs.\nFor third party integration I suggest using Tyk Identity Broker.\nThere's centralised JWT on the way where you can use virtual tokens (see the community forum and other issues in this issue tracker) that are generated elsewhere.\n. Here's a similar discussion with Auth0 where the new centralised JWT handler is discussed:\nhttps://community.tyk.io/t/tyk-io-auth0/325/2\nAnd here it is on our roadmap:\nhttps://trello.com/c/FNiyd5kP\n. This is expected behavior, to write to DB use the advanced API, the gateway API does not write back to DB. its to ensure independence between the services.\n. Just use the dashboard API (aka Advanced API):\nhttps://tyk.io/advanced-api-v0-9/api-definitions/#create-api-definition:cdac0ac5cf58124a5fc9102bcd4708e4\nThis will save to DB and signal cluster to hot reload\n. Go to your dashboard -> Users -> Select a user (or create one for the app) -> The API Key is listed under the user profile\n. That can happen, sometimes the access key isn't saved properly and needs regenerating.\n. Not sure why that happens, it could be simply the key was lost in Redis when it restarted.\n. That is a fantastic idea :-)\n. Lovely, thank you very much :-)\n. This is already in the Develop branch:\nhttps://github.com/TykTechnologies/tyk/blob/develop/CHANGELOG.md\n. To do it dynamically you could use some Middleware JS.\n. Not sure how that is possible: \nhttps://github.com/TykTechnologies/tyk/blob/master/middleware_jwt.go#L91\nMaybe the logic is wrong? \n. Can you provide a sample JWT that failed?\n. Right... so I ran your code, and you are correct, you need sub AND kid for the key to validate, you take either out, and you get an error.,\nBut did you look at the logs?\nINFO[0690] Attempted JWT access with non-existent key.   key= key_present=false origin=62.232.114.250:57818 path=/jwt-hmac-2/get\nERRO[0690] Token validtion errored: illegal base64 data at input byte 26\nNow if I use an online JWT builder such as this one - it doesn't even allow me to set the KID header, so I just use the subject (which is required by the standard I believe) - but the tokens validate with a sub of my key ID.\nJust because I'm paranoid I decoded the header of these and it's just:\n{\"typ\":\"JWT\",\"alg\":\"HS256\"}\nSo i have a feeling there's something off with the encoding of your token. \n. I would suggest to not run the docker components together but split them out and use publicly addressable network IP's / hostnames to target them instead of plumbing the containers together through the ambassador proxy. They aren't really meant to be run together like they are in the quick start, that's a kludge to make it nice and easy to get started with.\nHere's an idea, but I'm not sure exactly if it will work:\n1. Put SSL certs for portal domain and for gateway in the tyk.conf since (in the quickstart), it is proxying the traffic to that component\n2. For the dashboard, you just need the cert for the dashboard, and you'll need to explicitly set the port\nIf you are proxying the dash via the gateway too, then you could add the cert to the tyk.conf only as it will handle the offloading.\n. Nope, not yet. You can do it with third party DNS like Cloudflare or whacking a web server in front of Tyk.\n. Sorry guys, no idea... internal docker compose wiring is plain weird. I'm a big fan of traditional networking :-)\n. Yeah we had to put old compose configs in to handle naming conventions for previous versions before - not ideal.\n... I think keeping things fresh is a good idea, but maybe try and make it reactive to the docker version somehow. \nWe could split the repo into multiple directories named after the supported docker versions, with a different compose config for each docker version. \nThe official docs then support latest, and then the read me in each folder can be up to date for legacy?\nJust an idea...\n. It depends on how you want to expose your API - the portal only exposes policies, not actual APIs, so you have 3 API's, that you want to grant access to via a single token for a developer. So you bundle all three APIs into a single Policy. So now your three services look like one single service to the public. \nNow your docs need to reflect that, so your 3 swagger docs should really be a single doc that describes your \"public\" API.\nIf you have three APIs that you want three sets of access too, then you want 3 swagger files, since you would have 1 token per API and they are all independent.\nThe balance we've struck is: Whatever sits behind Tyk can be an absolute mess of services, what you present to the public should be carefully controlled. Whether that is with blueprint or swagger, or even just markdown pages, but it needs to be controllable.\nWill leave this open to see if there is more interest. \n. We do a lot of hackery to overwrite and set the API domain, and swagger docs all contain root domain values. So there's a limit to what we can do there I'm afraid.\n. Can you share the JSON so we can look at it, maybe we can fix it in a future release.\n. Hmmm, that's 404ing.\nI think you want to keep the listen_path out of the swagger doc as Tyk should add that for you (since it may change with your API def)\nCan you re-up or do a GDrive link?\n. You've found a bug :-) We need to fix that...\n. :+1: \n. Did you look at the chrome dev tools network view? I bet it was a CORS failure.\nSwagger gives terrible error messages, that's a canned response.\nIn your public API, enable CORS and especially options pass through so that the upstream service handles CORS.\n. This is the license for Tyk Gateway:\nhttps://github.com/TykTechnologies/tyk/blob/master/LICENSE.md\nAnd here's the tldr :-)\nhttps://tldrlegal.com/license/mozilla-public-license-2.0-(mpl-2)\nOf course we'd love to get a PR if your middleware is awesome :-)\n. Email notifications for this are already supported in the dashboard, documented here, add appropriate settings to your org object:\nevent_options: {\n    key_request_event: {\n      webhook: \"\",\n      email: \"developer.support@email.com\"\n    }\n  },\nYou'll also need: https://tyk.io/v1.9/configuration/dashboard-config/#email-backend:8f1ac6c580c2f6cd2c8954a33f3ca4d6\nBatch emails are a good idea though.\n. https://tyk.io/dashboard-v0-9/events/events-notifications/\nThat's the one...\n. Mandril needs both, but I've never actually received a txt one. \nYou could try, it may crash.\n. What version are you running? The transforms happen before rewrites atm:\nhttps://github.com/TykTechnologies/tyk/blob/master/main.go#L641\nWhich makes this behaviour difficult to explain ;-)\n. Ah, wait, f course, sorry - I read that as a request body transform. \nRight, if the response is being transformed then it will run after the rewrite, which would explain why you need to match a different URL.\nI see the issue though, seems a little counter-intuitive to match two different paths in and out.\n. Use the workaround, tracking number two paths and this kind of middleware interaction is a bigger task that isn't done lightly.\n. Thanks! :-)\n. Thanks for reporting. Basically that ID isn't valid so it throws a wobbly. We'll need to validate inbound IDs better.\n. You can ADD keys using the REST API on the gateway instead of having them created. So you could basically GET the key on one instance and then ADD it to the other gateway, so long as Org IDs and Profile IDs match things should be ok.\n. You are using a docker quickstart setup, which loads up the portal and dashboard, which means you have a dashboard based setup, so you need to use the advanced API to do what you are doing.\nIf you want to use gateway only you'll need to split out the docker container from the others in the quickstart, or install manually not using docker.\nThe tutorial here is for installations that aren't using dashboard (the CLI version), the docker quickstart assumes dashboard is being used.\n. The advanced API is what is now called the dashboard API . It rhymes with Mike :-) \n. Hmmm, usually this kind of thing is resolved on the SD layer through DNS or some inherent feature for he SD system\n. Lovely :-)\n. Nice one :-)\n. Yes, eventually. This has been raised elsewhere. It isn't a priority at the moment, but we're always open to pull requests :-)\n. Duplicate of #118 which has been fixed in develop branch.\n. Can you provide a little more detail?\n. Thanks for the tip! Do we really need to make exclamations in a bug report?! It makes it so much better!\nOn a serious note, we already have try/catch style handlers for various mongo errors across all Tyk elements, for example, this is from Dashboard:\ngo\nfunc HandleStoreError(e error) {\n    if strings.Contains(e.Error(), \"EOF\") {\n        log.Info(\"Attempting to reconnect\")\n        Store.Connect()\n        Store.db = Store.session.DB(\"\")\n        return\n    }\n    if strings.Contains(e.Error(), \"Closed explicitly\") {\n        log.Info(\"Attempting to reconnect\")\n        Store.Connect()\n        Store.db = Store.session.DB(\"\")\n        return\n    }\n}\nAnd the gateway re-connects on purge, so it should be immune.\nWe've never come across a reset by peer error (and we use compose.io), so we'll add that in, cheers.\n. Fixed in develop, will be in next version.\n. Tyk dashboard is proprietary, so you'll need to wait for the next version I'm afraid.\n. When you white list it becomes exclusive, the entire path structure becomes subject to white listing and all other path considerations are discarded. So you can't really mix.\nI think you can still ignore paths, but that's it. Blacklists no longer apply.\nThey aren't deprecated, they have moved to the extended_paths section as this is more verbose and allows more features. The old paths sextion is deprecated.\n. It could juet be bad matching, if your listen_path ends in a slash, then your URLs here should not start with one and vice versa.\n. I've created a SendGrid email back end (that seems to work). Also a Mailgun handler, as yet untested. This will be in the next version of dashboard.\n. Mailgun client tested, currently only supports text-based templates.\n. Nice :-) and there's a golang client: \nhttps://github.com/SparkPost/gosparkpost\nWe've now spun out our email driver into an open source lib (it's interface driven - so easy to extend) - if anyone fancies adding more integrations:\nhttps://github.com/TykTechnologies/tyk-email-driver\n. Since we're very close to releasing a v1.0 of Dashboard (which has breaking changes), we've published a mini-release of 0.9.7.x which incorporates the new email driver so that existing users aren;t stuck with Mandril and don't have a painful upgrade after 1.0:\nhttps://github.com/TykTechnologies/tyk/releases/tag/v0.9.7.3\n. Would happily consider it, it's not on the roadmap st the moment.\nI think our understanding is a bit limited for WS federation though, do you have a clear use case / standard flow we could work with? It's definitely worth considering.\n. You could do this with Golang middleware, but I don't feel this is a generic enough flow to warrant something to be added to Tyk itself unless it handled the federation flow for a bunch of other providers.\nHowever, there is a project we recently released called the Tyk Identity Broker, which is easy to extend with plugable identity providers and is designed for stuff like this. It would be easier to modify than Tyk itself and there's less risk in forming and managing your customisations.\nIt would be easier to extend the TIB with the flow that you describe as it will take care of bridging the gap between Tyk and your IDM by generating tokens in exactly the mode you describe.\n. You might need to write your own plugin, so your TIB plugin sets the cookie before the redirect, and then TIB generates an auth token or an oauth token for the ID, you can redirect the user with the token to your app, which can use the token to make requests and since the browser has been redirected, the claims are with the browser. Alternatively, use an alt header in Tyk for auth and put your claims in the auth header.\n. My thoughts: I think this is getting quite complicated, which is why there's no WS-Federation plugin for Tyk :-)\nThe cookie causes real problems, we have very little cookie support (they are not very RESTFul). You'll need to shoe-horn this into a custom version of Tyk to get this to work as a golang middleware if you want any speed.\n. Would be happy to merge it in so long as all the existing tests pass and some new ones are added, our CI will take care of that :-) \nYour code would work instantly with file-based configs (no UI), also all our unit tests assume that there is no UI (Tyk operates just fine without one and is designed for the UI to be an add-on). \nThis is also a feature people have been asking for (multiple auth location options) for a while, so it's definitely worth considering.\nAs for performance, those request copy operations are expensive, so we try to avoid them at all costs, if someone is using param and cookie they cause two request object copies to happen, which isn't ideal, but should be easy to fix (just re-use the existing copy if it has been already created).\nAlso, we'd need to go the bool route as we need to retain backwards compatibility where possible.\nAs for UI integration, we have v2.0 very close to roll-out, so depending on when this hits, and how robust tests are etc it might make it in, but no guarantees. However it would definitely make it into a future UI release.\n. This could quite easily be done by adding  a ReturnOverrides struct to the MiniRequestObject, in here.\nThe ReturnOverrides could look like this:\ngo\ntype ReturnOverrides struct {\n    ResponseCode int\n    ResponseError string\n}\nSo a JS middleware plugin can set these values as part of it's return value.\nThen, before the middleware handler returns, if the error string in the MiniRequestObject is not empty, and the code is not 0, return the new code and an errors.New(errorString) instead of 200, nil, this would instantly cause an error response to be returned in the middleware processor.\n. The dashboard will only pull keys the organisation owns, s:\n1. make sure you are using a dashboard user that belongs to an org\n2. Make sure all APIs / Policies etc belong to that org\n3. When you generate custom keys they need to be in the form orgid+key, otherwise they will not show up.\n4. Do not use a superuser, or non-org user to do anything but bootstrap and pull data\nThere's no other way to make it work, the Dashboard only works with keys that the org that the user that is doing the requesting owns, and then only in unhashed mode.\n. No, directory based middleware was created for this very purpose. We don't want dashboard users guessing where files are located on servers.\n. Thx, we're overhauling docs so that will be handled in the sweep.\n. LGTM\n. As an alternative to what?. Why not just add the required version header in the swagger UI?\nhttps://github.com/swagger-api/swagger-ui#header-parameters\n. What is the IP address of your Docker VM? Are you in OSX or in Linux?\n. Well, if you are running Linux, docker is usually on 127.0.0.1, but if you are on OSX, then you'll need to query an environment variable that's set it kitematic, just open a terminal and run:\n~> echo $DOCKER_HOST\nI have absolutely no idea how to get the IP in windows, but a quick google search tells me it's likely to be: 192.168.59.103, of course you can always just check VirtualBox and see what the VM's IP is there.\nWhen you explicitly set the host address in the setup.sh command, you told the script to assume Tyk was on 127.0.0.1, and therefore run all the API bootstrap commands against it, and they failed.\nBTW - by replying by email you are exposing your email address in all of your comments.\n. Hosts file:\n192.168.99.100    www.tyk-portal-test.com\nThen\n./setup.sh 192.168.99.100 www.tyk-portal-test.com\n. We've successfully tested Tyk on Scaleway's ARM infrastructure, there's no reason Tyk wouldn't work for Raspberry Pi, and it would make full use of its multiple cores.\nThe only problem would be Redis, which needs a lot of RAM, so that would need to live elsewhere.\n. Well, Tyk uses Redis as the primary key store and rate limiter bucket store, so there's quite a lot of interaction between the two.\nTyk uses as much RAM as it needs depending on traffic and the number of objects in memory so it grows and shrinks.\nRedis, if misconfigured could be volatile and start ejecting keys if you aren't careful, which could cause key owners to no longer have access :-)\nIf you are recording analytics, then expect more RAM usage. Though if you are doing that, do not expect to be able to run the dashboard as that also requires MongoDB.\nWhen we did our Scaleway tests, we had Tyk Gateway and Redis separate, and Mongo and Dashboard separate. \nI'm not saying that it wont work - it will - but you'll need to be careful about RAM as the process could be killed if you run out of memory. You also need to consider that your 1GB or RAM will also have to hold the Linux distro, and some of that RAM is reserved for the GPU on the RPi.\n. What did you call your authorisation header? Both error are not about the key, but the header itself:\n\n\"error\": \"Authorization field missing\"\n\nIt looks like you modified the name of the header value. Set it to be Authorization. If it were a key error, then you would get:\n\n\"error\": \"Key not authorised\"\n. Closing because this isn't a bug. Please use & search the community forum for this kind of thing.\n. The best place for this question would be on the community forum, but I'll answer these here to prevent duplication:\n1) Plugin mechanism: those seem to be geared towards small extensions to the existing functionality. So let's say we want to implement another log service that fits our very specific needs. Should we do it in JavaScript or Go?\n\nYou would want to do this in go, the logger we use is pluggable so extending it is very simple. We have also externalised our time-series analytics pump mechanism to a third-party service which is very small and easy to customise (Tyk Pump)\n\n2) Access Control -> Basic Authentication: TYK documents seems to indicate that passwords are defined with the API. Is this right? What if we want like LDAP?\n\nTake a look at the Tyk Identity Broker to handle integrations with IDM's - it's a pluggable open source project that handles integration with the Tyk Component structure.\n\n3) Would you have samples of Access Control using OAUTH2 where the Identity Provider is independent of TYK?\n\nThere's some examples in TIB, we've managed to get it working with OAuth providers like Auth0 with no modification. There's not example, but it was discussed in the community form.\n\n4) The Dashboard seems to be extremely sensitive to the address it's being access (localhost, 127.0.0.1, machine IP, machine name). Is this by design? It's causing some problems to us due to our network environment: multiple network interfaces thus multiple IPs, in some cases multiple network names.\n\nYou can force the dashboard to bind to a specific domain name or host name, it's covered in the configuration docs. As part of tyhe latest versions we removed a dependency on NginX to handle domains, that is all internalised now, so yes, binding to domains is sensitive if misconfigured\n. @lomori You switch off the domain binding in the dashboard configuration:\nhttps://tyk.io/v1.9/configuration/dashboard-config/#enable-host-names:8f1ac6c580c2f6cd2c8954a33f3ca4d6\nI think for the default setup instructions this is all enabled because of the portal. You can;t have one without the other.\n. Smashing, thanks! :-)\n. Hmmm, no release slated until April AFAIK, you'd be best compiling your PR yourself :-)\n. We've never tested against mesosphere, here's all the tested integrations and data structures we explicitly support:\nhttps://github.com/TykTechnologies/tyk/blob/master/service_discovery_test.go\nShould help in finding a combination that works.\nThe Service Discovery client needs to handle dynamic, un-typed JSON objects based on rules provided by the user, you are right it should not crash, but runtime type-assertions are brittle without reflection, which I'd rather avoid. There's probably catches that could go (in we have some in place already) to stop execution before a panic occurs.\nOf course, you can always pitch in and help out with some of the type assertions if you'd like to contribute :-)\n. Again, thanks! :-D\n. Awesome, thank you  :-)\n. LGTM, Service Discovery path creation is self contained in the handler.\n. Very nice :-)\n. Tyk Dashboard has a bootstrap API, this secret is for the bootstrap API, these call do things like: Create new organisations, create super users etc. See the Advanced API documentation for more on these endpoints.\n. We only proxy the portal in the quickstart because it's single-instance and people like everything running on port 80.\nYou can also set the portal domain as a CNAME entry in the organisation record in MongoDB. you can use the organisations admin API to set this value (cname and cname_enabled).\nThe simplest method is to set the domain by using the dashboard, selecting \"Your developer portal\" and then \"Set domain\", this does the same thing as the above API call, just in a more limited context.\n. You will need to do some domain binding for all of the services and make sure that the Tyk dashboard is configured to allow domains.\nThe details for all the settings are here:\nhttps://tyk.io/v1.9/configuration/dashboard-config/#enable-host-names:8f1ac6c580c2f6cd2c8954a33f3ca4d6\nYou need to enable domains, and set a hostname for both the dashboard and the portal, then that can be overridden with the per org version.\nDomains are port-bound, so if you are running on port 3000 then the domain that will work (and not 404) will need to include the port.\n. No, sorry didn't mean to confuse, if you set a standard hostname Tyk will listen on hostname:port automatically depending on the port you set in the configuration.\nSo if it's on 3000, then setting a hostname of www.mydomain.com will only work on www.mydonain.com:3000 and that includes the portal.\nAlso pay attention to the portal root setting, everything will 404 except the portal root. \nThe best thing to do might be to look at how the QuickStart handles things, although it's a bit special in that it reverse proxies the portal via The gateway so everything can be available on port 80.\nHowever, if you are running behind NGinX, why bother with Tyk domain handling? Switch it off and have NGinX do the rewrites for you.\nTake a look in the Tyk-analytics installation folder in the container, there is a host manager folder which has a bunch of templates for various Tyk routing configurations that demonstrate how the rewrites work for single site and subdomain based setups.\nthe host manager is a legacy service we used to bundle to manage domain routing so it's probably your best source of info for NGinX.\nI think having Tyk try to bind to a domain and nginx do it you'll just end up confusing things. It might work, but it's two things to synchronise.\n. I meant the QuickStart repo ;-)\n. What OS? on Ubuntu they will be under var/log/upstart, RHEL they will be under /var/log/\nThey don't use the *.stdio.* moniker though.\n. Hmmm, weird.  It's obviously logging as that status command shows the data\n. Start Tyk with --debug\n. That's the way to do it.\n. Nope.\n. Watch the logs when you do a hot reload, 404 means that the API listen path isn't listening, so it might have a duplicate listen path and being skipped by the loader.\n. How odd, have you modified the template in any way?\n. I doubt it... SwaggerUI does the downloading, so it's a little out of our hands. Looking at some other docs it does make a bunch of requests. Might need to update the dep (eek).\n. Either that or make sure the resource gets cached.\n. Ok, will take a look at it - not ideal.\n. The docker images are built off our APT repositories, since the patch is not available there it won't show up on docker hub. Suggest using 0.9.7.2 and mounting binary from the patch into the container\n. Yeah, it won't work with 0.9.7.2, since the email library isn't part of that build. But yeah, ugly error, will look into cleaning up.\n. Are you running with the dashboard enabled? If so you need to use this API: https://tyk.io/advanced-api-v0-9/about/\n. What version of docker are you running?\n. How odd, That's the version we've tested against, although we're running in Kitematic, are you using native OSX Docker (Beta)?\n. The container doesn't do anything unique, \"Not a directory\" seems to indicate one of the mounts is failing, can you ls -al the ty_quickstart folder?\n. I think this is similar to your problem:\nhttp://www.davidgarcia.es/solved-cannot-start-a-container-system-error-not-a-directory-docker-compose/\n. I see, I'm a bit stumped here, because it's definetely a permissions issue in the VM or file system - we've tested this in Kitematic and native linux docker server and it's working just fine. \n. @matiasinsaurralde What docker version are you running? \n. Use Tyk Pro if you want to use a DB based approach (dashboard) or you'll need to sync the apps and policies folders between your instances of you are going file based.\n. Yup, in the returned object in the middleware JS, you can add a ReturnOverrides object:\nhttps://github.com/TykTechnologies/tyk/blob/master/plugins.go#L21\nthat contains a response code, if this response code is non-0, the middleware will throw an error which then breaks the chain and stops the request reaching the back end:\nhttps://github.com/TykTechnologies/tyk/blob/master/plugins.go#L194\n. You will need to update the redigocluster dependency, we maintain our own fork.\nI think \ngo get -u github.com/lonelycode/redigocluster \nshould do it.\n. Ah yes, was doing it from memory...\n. Noted, will add it to roadmap - part of our drive in the next version is better OAuth\n. There is no list users endpoint AFAIK for the admin API, you need to use the standard Dashboard API. [edit: This was an error in the docs that is now fixed.]\n. Ok, so there's three levels at play:\n- Admin API: Bootstrap an Organisation / User that belongs to that Org OR create an unbounded user\n- Dashboard API (unbounded user) - if a user is created in the admin API that has no OrgID attached to them, they have read access to everything across orgs, so if you use an unbounded user auth token with the dashboard API, you can list all users\n- Bounded user - Works within the bounds of an organisation\nSo, in this case, lets assume you have a multi-tenant (multiple orgs) install:\n1. Use Admin API to create a temporary unbounded user (no org ID in user record)\n2. Use unbounded user key to list users - find the one you are looking for\n3. Grab that users access key and use that to perform operations within their org\n4. Remove the unbounded user with the Admin API\nYou basically de-escalate\n. Looks awesome - thanks :-)\n. (have merged to develop so we carry this all through to the next release)\n. Indeed it will be added :-) It's a great feature, and an elegant way to make it backwards compatible, so adding two new fields for paramname and cokiename will be pretty straightforward. \n. It's now in our roadmap, so it will definitely end up in the dashboard on the next release.\n. Smashing :-) thanks!\n. @ivaningrooves FYI - we now have nightlies so your change is present in the latest dashboard tarball:\nhttps://tyk.io/docs/tyk-api-gateway-v-2-0/installation-options-setup/nightly-builds/\nthis is experimental atm, so no guarantees - back up your binary :-)\n. NIce idea.\n. Denying access to a feature is the absence of read or write permissions, so it not 'saving' is ok (but not ideal UI granted.\nAre you editing the currently logged in user? The user must log in again for the settings to take effect.\n. I have mixed feelings about this - it feels like a kludge, the machinery needed to make this work would inevitably also integrate ACL and rate limits at org level if you don't approach it correctly.\nYou could do this manually in the middleware itself instead of using the built in policy handling, it would be the only way to not introduce spurious Redis round trips.\nPerformance and utility is my real concern - a policy handler just for quotas, and those policies need to be unbounded (admin level - no org ID) causes edge-case security issues of having policies applied to tokens that don't belong to an org.\nIt might  be easier to just track an orgs quota level and manage the keys manually.\nHappy to take a look at some code if you've written something, but am reticent to merge skmething like this without some serious due consideration \n. > As long as you only applied quotas, you wouldn't need to be concerned with ACL/rate limits correct? As I understand it, the quota values are the only thing that the org quota middleware is concerned with?\nThat's what I was trying to say, you would need to replicate the policy machinery in the org middleware handler since you can't use the existing one - it's too bound in with the rest of the auth mechanism. So we're talking duplication, which I'm not fond of - we already have some in the JWT handler. You could try to hook into it, but there would be side effects that I don't feel it's worth untangling for this feature\n\nSo have a hard-coded list of quotas I'd like to enforce?\n\nNo, you introduce a new org policy object and manage it separately - the logic that applies policies does quite a lot and is intricately tied to token sessions, whereas the org system isn't tied into this subsystem. That way you can isolate quota's only and don't muddle things - I'd extend the session object and add org_policy or something.\n\nIt might be easier to just track an orgs quota level and manage the keys manually.\n\nPolicies do a lot, and are meant to. If you are just managing quotas, then it would be easier to just track what orgs are on what quotas and change their limits appropriately as opposed to pushing policies up the stack into org territory. \nWhat i'm trying to say is keep it simple, pushing policies into Org territory muddles security domains and muddles logic between regular tokens and org tokens. I'm all for the feature, just not implementing it this way.\n. > OK, so I believe I am following you on the org policy object stuff -- Basically, you would prefer an implementation that doesn't try and shoehorn session policies into being used for org policies. That makes sense.\nYup, exactly\n\nWhen a client is upgraded/downgraded from our administration portal we should make the request to Tyk with an updated organization policy\n\nYes, once that mechanism is in place. It will mean creating a new Org Policy object in tykcommon and adding a function to the Org check middleware that checks the policy exists, retrieves it, overwrites the max values in the session object before running the quota check.\nWe'll need to make a call on what to do if the policy does not exist but the org has values set - my preference would be to throw a warning and then to allow the org through based on existing values (if they are unset or zeroed it would block anyway.\n. Care to supply a pull request?\nThanks. \n. Lovely, thanks!\n. Related to #241 - but this should be cool - want to give it a shot? (Develop branch of poss)?\n. What version of docker are you running? Latest quickstart requires v1.10 and docker networking\n. The dashboard can't see the gateway, that's where keys get generated. This is probably yet another bug with docker networking.\n. Odd, what is the output of the gateway container?\n. You won't need debug output. Unauthorised API access is always logged, so if things are working as expected then you would see your test requests in the log as warnings.\nYou will also errors caused by a failure to respond to the dashboard. So this debug output isn't helpful. Can you switch it off, then just try to create a key - you need to watch the logs of both systems to see what the error is.\n. > time=\"Apr 20 17:58:20\" level=info msg=\"Loading API Specification from /opt/tyk-gateway/apps/app_sample.json\" \nLooks like your setup is configured to get API Definitions from disk and not the dashboard service\n. Yeah - that's ugly. But if the API is not loaded, and we're not in DB mode and the dashboard is trying to create a keey for non-existent API, I don't expect the app to react well, considering it is an unstable configuration.\n. Ummm, doubt it, the default in the quickstart is to use the dashboard: \nhttps://github.com/lonelycode/tyk_quickstart/blob/master/tyk.conf#L8\nSo something changed the configuration to stop it from loading from the dashboard. The quickstart mounts a valid config from the repo: \nhttps://github.com/lonelycode/tyk_quickstart/blob/master/docker-compose.yml#L44\n. How are you starting the containers? You need to start it with compose. It's still using the file-based config.\n. Thanks for raising, it's a very valid point and we'll look at making no sure that config option is clearer\n. To add to this, the middleware path is used for folder-based plugin loading (no need to edit the API Definition) while the path in the middleware section of the API Def is for explicit loading.\nBut it still needs to be made clearer.\n. How did you create the developer? Also, did you have a fully functioning portal in place?\n[Edit] Assuming this was done with a super-user. Not recommended, it will break :-/ Super users are only ever for bootstrapping a system, they shouldn't be used for anything else.\n. There's something really wrong with the user that is generating objects in the GUI, and it's wrecking havoc on your install.\n. I wouldn't modify the response processors, they need to be manually invoked by the API Definition as middleware. \nInstead I would look at an API Definition object-level setting, or a conf setting (even easier) that handles this rewrite all the time as a standard, always-on, response middleware processor.\nSo you just create a new response middleware, as you say, and call it something like ResponseProxyHeaderCleanup and then ensure it gets invoked on all requests instead of just registered response handler (before the chain check here.\n. Great - thanks :-)\n. From gateway to service\n. Yes it does: https://tyk.io/docs/tyk-api-gateway-v-2-0/configuration/tls-ssl/\n. LGTM :-) Thanks!\n. (This is in our roadmap now for dashboard integration)\n. When a token is generated for a dashboard user, the following is added to the token metadata:\n- tyk_key_request_fields - The field set that was defined when the user submitted the key request\n- tyk_user_fields - The fields that are part of the user account (the custom fields)\n- tyk_developer_id - The internal dev ID of the user that you can use as a REST lookup\nYou could use the $tyk_meta.tyk_developer_id reserved field to inject into a header to get identifying data for a user?\n. Yep, that should do it - so long as the token was created by the portal, the field should exist.\n. How exactly do you see this nntegration working?\n. I have no experience with Symfony, or PHP I'm afraid :-) so \"a bundle\" doesn't mean much.\nWhat are you trying to achieve? \n. Well you can use Tyk Dashboard to administer your APIs that are managed by Tyk, I.e. That are using the Tyk API gateway, but not to manage your actual application. \n. That's kind of what it's for ;-) \nBut seriously - it depends what you are looking for. Tyk can do a lot of stuff, like rate limiting, quotas, access control etc. as well as http transforms and analytics gathering.\nSuggest you take a look at the site (https://Tyk.io) for a feature list to see if it's what you need\n. Lots of these errors look networking related? \nAlso, if you are trying to create a key for an Open API or non-live API you'll get problems, I think that panic is for an API that doesn't exist or may have been skipped. Tyk will only create keys for APIs that are live.\nIt looks like you have some serious connectivity issues, how are these instances networked?\nAre you starting more than one gateway?\nAre you adding or editing APIs as a super user? If you are, don't, perform all operations within an organisation, you get wierd behaviour if you create things as a super user, they are for monitoring only.\n. Super users: are not all controlling entities, they can see and modify some data on a Tyk installation but should not be used for anything except bootstrapping an organisation and a regular user. That's all there is to it, if you do stuff as a super user, you basically create non-owned APis and keys and policies and Tyk isn't meant to be used that way, so you get surprising behaviour.\nBottom line: don't use a super user, instead restrict existing users by using the within-orgs permissions.\n2) Nonce failed means that the Tyk gateway call tk the dashboard had an invalid nonce and so the request is rejected. Tyk uses a nonce for eachgateway interaction to keep track of gateways and ensure comms is secure. It's between gateway and dashboard\n3) Registering nodes means unpacking your license, it has nothing to do with your connected gateways\n4) the reason is an access denied message that isn't decoded (this can happen in a bootstrapped first run, it fixes as soon as you save your first policy or API \n5) no it means that Tyk tried to find an API spec that doesn't exist to access it's backend DB reference and since it's not there it fell back to a secondary handler which wadnyltnintiialised properly, it's a known bug - and you're probably only seeing it because of a misconfiguration (creating a key on anon existent API)\n5) if you are using the dashboard for anything you need MongoDB, it's not optional for the dashboard (and that means for a Pro install too)\n. Ok, then the API you were granting access to wasn't loaded\n. You could try using localhost instead of the IP loopback. Also, the forum would be a better place for this as Github is mainly for bug reports, not software support.\n. tyk already orefixes all of its keys. It's unlikely we'll make this configurable.\n. Is that your use case? Multiple Tyk gateways using the same DB but no key crossover?\n. Is there a reason they can't share a DB, after all, that's what the access control section of the token object is for?\n. yes it probably would. So this JWT identity can't have a policy that allows access to all the services? They need to auth for each service independently? \n. It's only critical of your Tyk APIs aren't loading and this is a cold start. Because if that's the case then your gateway is not starting and can't pull its API definitions.\nStart your dashboard service, with license, first, and then start your gateway. \nThis is only really meaningful if you include the gateway log output from a cold start\n. This issue was resolved in the v2.3 release of Tyk - nonces are no longer used.. The policy overwrites the key limit rules, it basically sets the new maximums and ACL as soon as the key shows up, every time the key shows up. \nSo it's either the policies maximums or the keys limit but never both.\nIn the next version we are including a way to have partial policies (partitioned policies we are calling them) hat only apply to portions of a key.\n. Nice one :-)\n. I'd suggest looking at our support forum where these kinds of questions have been asked loads of times, this isn't a code issue or a bug report so GH isn't the best place for this. \nFWIW it looks like you have misconfigured your dashboard and it can't resolve your gateway.\n. > FWIW it looks like you have misconfigured your dashboard and it can't resolve your gateway.\n. Ok, so that tutorial assuems that you are not using the docker quickstart, the docker quickstart is a whole different ballgame.\nWhen you ran this, did everything work as expected?\nyou'll need to examine your docker logs output and the compose network to see if everything is working, it looks to me like the compose script did not build the DNS properly. This happens a lot, because docker insists on changing it's behaviour across versions and platforms.\ntry and find out what the hostnames are internally of the various hosts and the adjust your configuration accordingly.\n. This issue is addressed in develop, however invalid APIs will still be bounced.\n. You have to reset the quota too, there's a query param for that \n. Nice catch, thanks for letting us know. \n\nAlso, quick question: I have to send my API requests as raw JSON data. Is there a reason why they can't be sent as form-data?\n\nIt's a JSON API, there is no support at all for form data and it's unlikely there ever will be.\n. Hi Kevin,\nI've put a bunch of new tests in place for the JWT middleware to check out the various cases above (missing auth header, empty auth header, malformed header, completely incorrect header - all for RSA) just to make sure that we weren't returning 200OK codes, and looking at the results, we're getting:\n- 400 for missing or empty JWT Auth Header\n- 403 for incorrect JWTs\nIn code, it looks like this is working. Are you running Tyk behind anything?\n. Indeed very bizarre, and not covered by our tests, so we'll make sure to check it out before our next release.\n. We've already done all this in our develop branch :-(\n. Yeah, we recently did a small patch and found the same - the OpenID middleware is also broken, so our fork needed updating.\nDevelop will be merged to master very soon so it should all be stable then. \nFor hot fixes have been temporarily vendoring older versions\n. Thank you though! Really do appreciate it, nothing worse than upstream library changes breaking your code! M.\n. Rate limiting is done in redis, so it's automatically in sync across nodes \n. Well, keeping the clocks in sync across nodes is up to you (ntpd is useful), and secondly the log output only reflects a part of the actual rate limit operation. That output shows a request being logged to a sorted set.\nThe way the rate limiter works (high-level) is with a sorted list in redis. Every request is asynchronously added to the bottom of the list with the time stamp epoch as an index. In the same transaction, the top X number of entries that fall between the rate limit period are removed and counted from the top.\nIf the count is larger than the limit per period, then the request is blocked. Since other requests keep adding to the bottom, the rate limit is rolling and so is accurate at the time of the request for each request no matter where it landed. \n. :-D\n. Thanks for the heads up! We'll log it and see if we can't do something about that :-)\n. @dividinglimits The docs are a little out of date, we're in the middle of a re-write. the for_plan key request setting is part of a v2 portal catalogue object key request.\n. Have you pulled the latest master (2.2)? Upstream dependencies in the JWT library and OIDC libraries caused this failure. We've fixed them and forked OIDC to prevent it, but if your version is before we applied these fixes it will break.\nWe build dev nightly with clean dependencies and dev was very recently merged to master for the 2.2 release, so it should all be ok.\n. Hmmm, I wonder there is another breaking change that's been introduced...\n. Nah, that would be too easy! go get -u will update deps :-) \nThat's why we do the nightlies, they are always clan builds in an empty baseline - they flag up when a dependency changes!\n. We've moved to a new docs stack - thanks for the heads up though!\n. That should be up again, we're looking at replacing these in future.\n. Up again :-/\n. We'll replace the URLs soon, i promise :-/\n. Whitelists are case sensitive, black-lists are not, in your /data/ path, your seralnumber path element is lowercased.\n. Ah, you're right - you need to specify your path in lowercase in the whitelist list, because the match is ToLower(url) vs. the regex, where case is not altered.\nSo make your path like this:\n{\"path\":\"/data/boxnumber/{boxNumber}/serialnumber/{serialNumber}/code/{code}\",\"method_actions\":{\"GET\":{\"action\":\"no_action\"}}}\nAnd it should capture both lower and upper case\n. This is really cool - I didn't know the oauth server could handle separated urls, where does it check the fields?\n. Just realised its part of Osin... Derp ;-)\n. This looks good, but could you make the PR against develop? That will be the next cut.\n. That's ok, will be on our end, Dev is still a little unstable.\n. Ah, no, it's actually a bug with the graylog hook... have raised an issue\n. Submitted PR: https://github.com/gemnasium/logrus-graylog-hook/pull/13\n. @nazarhussain Dashboard is closed source I'm afraid, we'll push these changes in upstream, it's in the board now. \nAFAICT this only works if a oauth_redirect_uri_separator has been specified, we can't necessarily assume this is the case unless we make it a default in the config we ship, which we will need to do for Pro installs.\nThere's some other roadmap OAuth changes to allow self-registering of OAuth data in the portal, so it will probably be bundled with that.\n. The plan is our trello board, and we'll release when it's ready :-)\n. We literally pushed a patch for this release today so if you update your docker container or update your install you'll find that the concurrency issues are gone and we've also fixed a JWK cache back-fill bug.\n. (V2.2.0.3 to be exact)\n. It might actually be the JWK - the reason yu get a panic on the second response is because the cache is being flushed and a new correct validation is returned - it's a bug in the openid lib. \nWe'd need to look at the JWK to be sure though.\n. Thanks - leave it with us and we'll investigate :-)\n. I've pushed a fix for the OIDC lib that at least should remove the type error causing the panic you're seeing. Still trying to get a handle on why it's failing. The panic is essentially that Tyk can't find the kid field in the JWK for the issuer.\n(the fix will be available in our nightlies if they deploy properly)\n. Hi @lmlynik thanks for considering Tyk - this kind of question would probably be better placed on our community forum.\nTo answer your questions: \n\nThe documentation contains examples to do simple batch aggregation for static URLs. Is there a way to store these urls somewhere and load them via javascript into the Virtual Path code? Maybe even use consul for service registry.\n\nVirtual Paths are interpreted at least once by the gateway when the API Definition is loaded into memory (in order to pre-warm the script for faster execution). So you could add an init method to the first Virtual Path to be loaded (longest first) and call it outside of the method to setup any kinds of globals for that virtual path. IIRC Virtual Paths for a single API share an ECMAScript environment, so globals / services could be shared.\n\nShould a gateway contain conditional calls - meaning that if call service-A will return an error we should not call service-B.\n\nThat's a good point, currently batches execute regardless of return code, you don't need to use the batch caller and could always use the built-in HTTP Request (TykMakeHttpRequest) method to compose your chains conditionally.\n. > Is there any way to the virtual endpoint js code to read from some dynamic datasource?\nYou have the Http request mechanism, so you could have an external service provide that data on init to the JS by pulling i ton first parse, and then flush it based on some timestamp delta as requests are handled. But apart from that, the environment is pretty sealed up.\n. OAuth token expiry is set in the config unfortunately:\nhttps://github.com/TykTechnologies/tyk/blob/master/config.go#L95\n. It's not planned at the moment - but this setting handles the TTL of the key. \nIf you set the '\"expires\": 1458669677' section of the key_rules, the token (should) return an error if it expires. Because that middleware is independent of the oauth validation checker.\nThe timestamp 1458669677 converts to March 22nd:\n~ $ date -d @1458669677\nTue Mar 22 14:01:17 EDT 2016\nSo if you used that token, it would actually be bounced. But the expires_in is the TTL of the key lifetime, so what Tyk cares about when it is using the key is the expires metadata timestamp.\nOr does the token, when actually used, not respect the expires date?\n. I think more sensibly the system should use the expires field of the key rules or the base policy, the key-rules section is a session object template, it doesn't make sense to add a new field to it.\n. The thing is - it does work, just the value that comes back regarding expires_in is incorrect.\n. It most likely is the large API - there's performance issues in the API designer with very large swagger definitions... \nWe're working on addressing it, could you share your browser version / OS?\n. This should be addressed in cloud, on-Prem will be released soon which fixes this. Hi Ryan, did you generate a new JWT for a new sub? If not, the policy will not have been updated on the underlying bearer identity, you will need to delete the underlying token to apply a new policy to it.\n. The case here is that Tyk has generated an internal representation for this identity (sub), and this identity has the matched policy ID set. Changing the policy ID it at the client level will not affect an existing user (a sub that Tyk has seen before), changing the policy itself will though. \nSee this documentation article, in particular step 8.\nWhat has happened is that your JWT has generated an internal representation and Tyk will not update the policy based on the client, but you can update the policy on the internal representation (to get this, inject a header with the value of $tyk_meta.TykJWTSessionID and edit this token).\nI hope that makes sense.\n. There is a case for that, though this behaviour has nothing to do with the client / policy, if you change the client and policy combo then any new bearers will be affected, just not existing ones. We'll add this to the docs to make it clearer.\n. Ah, I was assuming you were using it for users, which is the OIDC use case we've designed for. You can raise a feature request on our community forum :-)\n. \ud83d\udc4d \n. Usually bugs go into GitHub on the repo and feature requests go to the forum. We will track bugs here if they are relevant to the underlying repo.\nWe don't use GitHub for feature tracking because we have so many repositories, and touch points for bugs / issues / discussions etc (GitHub, forum, support desk, direct), so everything goes via our trello roadmap (public) where we move features into versions and into development, we'll close off stuff here after a release, but it's not guaranteed to make it into a build cycle unless we see demand.\n. @mhrabapayu it isn't on our roadmap for the near future. The default tyk_analytics.conf isn't to be used, the templates that are in the data folder are the ones used by the setup script.\nWe'all look at updating the default file that gets packaged.\n. Sample in the repo is \"mongo_url\": \"mongodb://localhost/tyk_analytics\nSo it's done\n. Hi Kamol,\nIs this an on-premise or a hybrid setup with Tyk Cloud?\nThe default timeout in Tyk is set to 30s, the 10s timeout is specifically for TLS negotiation.\nThe enforced timeout feature should override this and it is by far the best way to extend the timeout in the gateway, I don't think there's another way to configure this value.\nAlternatively, you could try and drop https in your target to see if that improves things...\nDoes the gateway provide any logs that you can share when the timeout kicks in?\nM.\n. Interesting, if the gateway were causing the timeout as part of the proxy then it would return an error, both to the client and to the log.\nThis could mean that Tyk is not reachable from your ELB? Can yu target the gateway(a) directly to test?\n. @kamoljan Tyk is meant to run on multi-core boxes, and should on a 2GB/2-Core VM handle about ~1,000 requests per second. \nWhat kind of spec are you running the container on? Also redis can become a bottleneck if the box is not large enough and can't handle the high connection volume.\n. Thanks for reporting the issue - seems like something we need to look into \n. This will be in the v2.3 release.\n. Have you tried the latest version? We are on v2.2.0.28 I think at the moment in our package cloud - we fixed most of the LB issues and SD issues around .14->.20.\nThe LB system was completely replaced in this version with a more resilient data structure.\n. This is a very old bug. It has been fixed in v2.3, the issue is that the API has not been loaded into your gateway yet and so Tyk can't find the back end to publish the key to.\nThe trick is to wait 10s to make sure the API has been loaded by the dashboard (if the API spec is misconfigured it will also not get loaded, which can cause this error).\nRestart your Tyk process and check the logs to see if the API this key is meant to target gets loaded properly.\n. Can you confirm what go version outputs? \nOur CI (Travis) builds this repo just fine so this is a local issue with your setup.\n. Nice idea - would require a pretty serious refactor though :-/\n. Or you've misconfigured your build - Tyk has 4 different rate limiters that are activated by different configurations. See the example config in the data directory for one that enables the leaky bucket.\n. We don't use GitHub for a Q&A - only bugs - please use the community forum for questions.\nThe answer is that if you have multiple users changing apis or updating things in the dashboard then you get manybrelod requests in tandem, having a delay allows us to \"store up\" reloads (e.g. a use might update an API, realise they made a mistake, and then update again - with the delay we avoid reloading twice\n. Because you can only have one listennpath per API - again this is a question for our community forum.\nYou can share listen paths across different domains, so they can be the same so long as the custom domain is different.\n. That is correct... if the domains are different then there is no listener clash.\n. This Ian fixed in v2.3\n. https://github.com/TykTechnologies/tyk/blob/master/CHANGELOG.md\nSee the third bullet point - this let's you clear cache.\nYou can also set what status codes to cache in your API definition\n. V2.2.0.28?\n. You are calling the gateway API right? Not the dashboard API.\n. If it were cached (????) then you would see a header that states its cached specifically by tyk: X-Tyk-Cached-Reponse - it's very unlikely unless you have Tyk proxying itself.\nIf you are getting intermittent 404s, are you running a load balancer in front of Tyk? If so, are all the attached instances running the same application with the same configuration?\nThe forbidden error is promising.\nIf you have ssh access to the gateway boxes you can just run the curl command against local host. You might just have the wrong secret.\n. @penhauer-xiao I just tried to replicate this by deleting logrus and re-getting it, and also go get -u on the graylog hook (which is my fork, and I know I haven't broken it). Tyk compiles fine.\nI know you are using glide and doing all sorts of wierd things with the vendoring - we ship with the venored libs we want to track in the repo, if you have changed that, you may have broken your own build\nOur CI tool, which build from develop and pull all deps every build, build fine too.\n. Interesting, thanks for letting us know - we'll investigate. If you truncate the token, it fails though am I correct?\n. We're looking into Go plugins for Tyk, but it will be dependent on v1.8 of Go as that introduces dynamic linking.\nFor v2.3 (released this/next week), there is a major update regarding plugins.. Could you commit this to the develop branch? Master always reflects the latest packaged version.. Have you tried using v2.3? Or maybe the later builds of 2.2?. The older v2.2 patches had a bug which caused this panic so you really should work against the v2.2 branch as it is patched, up to date and stable\nThough v2.3 is even more stable, so that's your best bet - your code isn't what's breaking here, it's a bug in the version you are running . Is custom domains enabled in Your Tyk.conf?. Just to confirm:\n\nYou have one API set up with custom domain api.domain.com with the listen path set to / and a target that might be http://example.com\nYou have another API set up with api-dev.domain.com with the listen path set to / and a target that might be http://httpbin.com\n\nAnd you find when sending a request to api.* it works, but api-dev.* is 404ing?\nThe first thing to do is check your gateway log output, it should lok something like this if you have your domains set up correctly:\n[Dec 22 11:50:07]  INFO main: Detected 2 APIs\n[Dec 22 11:50:07]  INFO main: Preparing new router\n[Dec 22 11:50:07]  INFO main: Initialising Tyk REST API Endpoints\n[Dec 22 11:50:07]  INFO main: Loading API configurations.\n[Dec 22 11:50:07]  INFO main: Tracking hostname api_name=Open 2 domain=api-dev.custom-domain.domain.com\n[Dec 22 11:50:07]  INFO main: Tracking hostname api_name=Open domain=api.custom-domain.domain.com\n[Dec 22 11:50:07]  INFO main: Custom Domain set. api_name=Open 2 domain=api-dev.custom-domain.domain.com\n[Dec 22 11:50:07]  INFO main: Loading API api_name=Open 2\n[Dec 22 11:50:07]  INFO main: Checking security policy: Token api_name=Open 2\n[Dec 22 11:50:07]  INFO gateway: Loaded: Open 2 api_id=6e6ccaaac6b240d97a3ff9dfc6e546dc org_id=53ac07777cbb8c2d53000002 server_name=-- user_id=-- user_ip=--\n[Dec 22 11:50:07]  INFO main: Custom Domain set. api_name=Open domain=api.custom-domain.domain.com\n[Dec 22 11:50:07]  INFO main: Loading API api_name=Open\n[Dec 22 11:50:07]  INFO main: Checking security policy: Open api_name=Open\n[Dec 22 11:50:07]  INFO gateway: Loaded: Open api_id=54b3b420f4384e557d2ac163d0c040c8 org_id=53ac07777cbb8c2d53000002 server_name=-- user_id=-- user_ip=--\n[Dec 22 11:50:08]  INFO main: Processed and listening on: /{rest:.*}\n[Dec 22 11:50:08]  INFO main: Processed and listening on: /{rest:.*}\n[Dec 22 11:50:08]  INFO main: Initialised API Definitions\n[Dec 22 11:50:08]  INFO main: API reload complete\n(I actually just tested this in the latest release and it does in fact work, we have the custom domain set as a wildcard A record to point at our gateway.). Is your app handling CORS or are you deferring it to Tyk? If CORS is handled upstream, then Tyk just passes the request right through:\nhttps://github.com/TykTechnologies/tyk/blob/master/middleware.go#L57\nIf Tyk is handling preflight, we use this library to handle CORS, which looks like it sends a 200 OK if it is handling the pre-flight and the pre-flight is in order (https://github.com/rs/cors/blob/master/cors.go#L182).\nHow is CORS configured?\n. Headers are case insensitive: \nhttp://stackoverflow.com/questions/5258977/are-http-headers-case-sensitive\nAnd different parsers will interpret headers differently (some all upper, some Sentence case;.. Master always reflects the last published on-prem release (v2.3.1 atm), all development by team members happens in feature branches, then merged to develop either via PR or directly. \nWe keep master as a mirror of latest packaged release to ensure that if someone uses one of our packaged binaries from packagecloud/docker and needs to modify it, they can be sure that what is in master will behave the same way as the version branch they have. \nWe could achieve the same result from version tags (I think we may have in the past), but as far as the project goes, master is stable at the cutoff point of the latest release.\nThere's no policy documented because we don't have contributor docs yet ;-)\n. We use logrus, in fact we use a forked version of logrus, and logging is shared with this module: tykcommon-logger. What @buger said - dump the logs on failure.. What's the simplest and fastest thing to do?. @buger Are you happy for this to be merged?. I can see this as a positive move, but we don't want to lose momentum because of refactor - small incremental updates to this issue should help. Schema is a good start, I think this could be done incrementally in terms of complexity. From experience we know that some users have problems installing Tyk because they missed an option or they've actually just configured something wrong (like a connection string).\nSo maybe we do it in bits:\n\nv1: Check the config against a schema to make sure no basic errors have been made\nv2: Check for common screw ups in known configuration topologies, e.g. if db based config is enabled, that the dashboard connection string is enabled in all the right places.\nv3: Sanity check some of the values, so for example: Is redis reachable and does it accept writes? Is The dashboard reachable and responding? etc.\n\n. This is definitely for Tyk gateway - it's like nginx -t\nThis will need def need @ilijabojanovic input. subcommand might be more scalable. > Your tests involve installing and upgrading the gateway. How is that relevant? Lint is only affected by config files.\nTo properly test, you start from a clean slate, so installation is part of that in order to remove externalities, it's an extreme setup and teardown. The checklist is for @ilijabojanovic here :-)\n\nAlso, what do you mean by \"invalid configuration\"? As explained above in v1/v2/v3, there are different levels for how a config can be correct or not.\n\nIt's in the summary:\n\nv1: Check the config against a schema to make sure no basic errors have been made.. The templates are meant to be user editable, so they get budked along with a bunch of other stuff. We use go bindata for the dashboard assets actually.. Matias already found a fix, it's got to do with the DefaultServeMux . This issue is related to #410 and need revising so re-opening.. LGTM\n. I assume all this work is complete now?. > Ping @lonelycode in case any of these were left unused on purpose.\n\nThey may have been part of old tests that are no longer part of the codebase. \ncreateConnectionStringFromDashboardObject looks like a simple change, no bugfix, just variable renaming so not sure if it needs a unit test just yet ;-)\n. LGTM. \ud83d\udc4d . > The badges don't usually turn green until you have high numbers like 80% or 90% anyway, so if our tactic was to wait for a full green we might have to wait a long time.\nThen it defeats the purpose, either badge because high coverage has been achieved or don't, it;s like showing a low food hygiene rating.. LGTM\n. (editing issue because it needs more detail in the issue). Maybe, or nothing... if't a heal;thcheck it could flood the logs, sh*t happens. @mvdan To init it would require the presence of a MaxMind DB :-/ Which I don;t want to include with the source. This may need to be manual. I'm ok with it. @buger Care to do the honours?. This should be clearer, my apologies:\nThe Gateway exposes an administrative API under /tyk that is protected by a single hard-coded secret. This would leave the endpoint open to abuse by an external user brute-forcing it. If I can change the port of all the functions associated with the /tyk API endpoints so they listen on a different port, then they are not exposed when the gateway is run behind a load balancer that enforces a port-forwarding policy.\nThis same issue can affect dashboards that are exposing the developer portal.. Good point - it will need to. @lghiur \n\nI have transformed the apply_policy_id key to apply_policies, and it's an array of values now:\n\nThis would break backwards compatibility in the API :-/ So it will need to be a new field.. They are different counters, so for example if all users have a rate limit of 100/s and the global limit is 1000/s, then 10 users can go at full speed, however if another user started sending the same 100/s requests, then the aggregate throughput would be more than 1000/s, and all 10 users would be throttled.\nThis is so that if I am an API owner, and I know my infrastructure will explode at 1100/s, but be ok at 1000/s that I can guarantee that no amount of users concurrently accessing my service can exceed that limit to damage the infra.\nIn a real case this would be much higher. I see this rate limit affecting everyone equally.\nIn terms of the code, it basically means that each API has it's own DRL bucket that gets incremented before the user r/l bucket.\n. I've moved this into 2.4 because it only requires a small UI change in the dashboard to make live.. (cc @lghiur / @ConsM). Relevant PR because it didn't link properly: https://github.com/TykTechnologies/tyk/pull/1138. I\u2019d rather not add that kind of complexity. MTLS feature should grow an error though. Can this be used without recompiling Tyk?. Can we move it into a middleware.md then? Would like a reference version slmewhere in the repo.. Coprocessor build and tests should be covered by ci no?. Why didn't Travis pick it up then?. > I suggest we make it an example then. Examples are like tests, also run as tests, but they're meant as useful source code for users. Also shown in the godoc.\nGreat idea\n\nInstead I would suggest that Travis should build all the tag combinations. If I understand correctly, then Travis would throw a compile error since getBundlePaths would then be missing.\n\nYep, but then all the deps need to be in place as it can get messy :-)\nFor our CD we have these installed:\n```\napt-get update && apt-get install -y ca-certificates\napt-get install -y wget\napt-get install -y build-essential\napt-get install -y libluajit-5.1-2\napt-get install -y libluajit-5.1-dev\napt-get install -y luarocks\napt-get install -y python3-setuptools\napt-get install -y python3-dev\napt-get install -y libpython3.4\napt-get install -y python3-pip\napt-get install -y ruby-dev gcc make rubygems\napt-get install -y gnupg\nluarocks install lua-cjson\nwget https://github.com/google/protobuf/releases/download/v3.1.0/protobuf-python-3.1.0.tar.gz\ntar -xvzf protobuf-python-3.1.0.tar.gz\ncd protobuf-3.1.0/ &&  ./configure -prefix=/usr && make && make install\ncd protobuf-3.1.0/python && python3 setup.py build --cpp_implementation && python3 setup.py install --cpp_implementation\npip3 install grpcio\n```\n. @matiasinsaurralde Want to confirm all ok? Then I'll merge.. We can't build a binary that handles all three plugin targets (grpc, Python, lua) - that's the combos\nThe tests for CP don't target the plugin langs, but do activate the CP logic as part of the middleware chain, which some tests hit, but which is absent in vanilla.\nVanilla only handles ecmascript, which is a different MW\nSo in short, half the tag set kicks off some general CP tests, there are no tests for actual targets.\nSo for now just running the high level tests will handle an integration scenario, but won't test or compile against the bindings.\nThis means we need to actually build the coprocessor targets to make sure the code is sane, tests need to come separately.. @matiasinsaurralde  can explain when yu meet him next week.. It's something I'd like to achieve in 2017, so we should still solve this, and we may leave redis as an option for users that do not want to take the cluster option and all the downsides that comes with.\n. The tests should be ok to run in any order, however they have always run sequentially. Since they ised to run on an instance with a standing redis DB, \"duplication\" of data shouldn;t be an issue. You may get other problems with port bindings though.\nHas anyone actually tried running in parallel?. As you wish.... ;-). Looks good to me\n. It might not be gorpc but instead how the analytics purger works with the RPC client, there's two Connect functions:\nRPCStorageHandler uses this: \nhttps://github.com/TykTechnologies/tyk/blob/master/rpc_storage_handler.go#L151\nWhile the RPCPurger uses this: \nhttps://github.com/TykTechnologies/tyk/blob/master/rpc_analytics_purger.go#L34\nI wonder if it's because it is assigning an internal reference to the object (Store) instead of just referencing the RPC singleton directly.\n. This could very likely be the cause for this issue - I'd like to get this into the 2.3.2 bugfix release.. @buger You happy with this approach?. HostList is used extensively in the service discovery system, it must be thread safe and the list can change at any time.\nI'd say keep the mutex but find where it's being copied, and make that just a pointer reference to be swapped around. \nThis code is known to be a bit buggy, if the mutex is being copied all over the shop it might actually explain why some users report random nil pointer dereference panics during SD switchovers.. API Defintions are huge, so they should always be pointers (and I think they are IIRC, went through a refactor a ways back to make sure it wasn;t copied too often).\nHostlist is dynamic and shared across proxies requests (it must be up to date for any single configuration), so it too should be a pointer\n. > Unless the mutex isn't actually used in between copies, or the copies don't happen in practice, this is bound to produce some sort of bug. Can't hurt to fix anyway.\nYes I think we should fix it.. LGTM. We need to have a default conf somewhere that \"just works\", so might need to leave that, or put it in a folder and change the default load location.\nThe JSON file is a gateway API test, the test should delete the file (using the API).. @buger it's for people who build the repo and run locally - tyk develop env is internal only :-)\n. If we're not shipping a working conf file with the source (so it works with go build), then yes, but IMO we should have a working reference config somewhere.\nthe apps/1.json can be deleted, unless it;s another demo, in which case we should move that.. They should probably be cleaned up then...\nThe 1.json file may be an API test, the gateway API flushes API definitions to disc if you use it to save them. @mvdan \n\nI would instead suggest just making it part of this repo. I don't see an advantage in a separate one.\n\nAPI Definition objects are big, and they change a lot, instead of having to manually copypasta the object into Tyk Pump and Tyk Dashboard (and MDCB, and Host Manager and Tyk CLI), and hope they are all in sync we have it in a third party repo, it makes life a lot easier.\n@buger \n\nI'm not sure if it is a good idea, but for example if we make \"tykcommon\" git submodule, instead of folder, it may work. What do you think?\n\nNot a fan of submodules, I'd rather just not vendor it. The vendoring thing came about because our pipeline CD was having connectivity problems with GH and I was tired of the go get taking an age.\nI'd ultimately prefer changes to be made to the original repo instead of the vendor version - we use govendor to handle it and so far it's done an ok job.\nWith regards to this PR, it looks and smells ok to me, a quick smoke test implies it's safe, needs more rigorous test, but that can be handled at integration.\nAny objections? Otherwise I will merge it.. > The same could be done with this repo - all others could depend on this one.\nFair point, and one to consider later down the line. Modifying the dependencies across a whole host of projects isn't particularly palatable at the moment :-). \ud83d\udc4d But must still support the slash because we have legacy clients that use it.. Tyk Gateway uses some pretty old-school variable extraction. There should be a separate issue to move all API URL variables to a router.. The only reason I prefer this exposed is because it changes default behaviour, and makes the muxer stricter, so it will impact any clients our customers are using that have sloppy URL schemes, which is quite likely.. @matiasinsaurralde Can you squash the commits as @mvdan suggested?. > It makes accepted urls more liberal, not stricter. An example of what could break?\nIt does, that's not what I'm getting from the docs:\n\nWhen true, if the route path is \"/path//to\", it will remain with the double slash. This is helpful if you have a route like: /fetch/http://xkcd.com/534/\n\nSo if we default it to \"on\" then anyone who has a client that might have a reconfigured URL builder (e.g. that doesn't join strings correctly with slashes, or accidentally adds a / in the middle, such as: strings.join([\"http://mydomain.com/\", \"myfolder/\"], \"/\") (this happens more often than you think). Basically, by making this assumption on behalf of users, and changing it we break code they may be using to access their own services, because suddenly the muxer became strict.\nSo we need to retain default behaviour (set it to false), and if a user has an API method that requires a double-slash as part of the path, they can explicitly make that work. . LGTM. LGTM. We ideally want to avoid third party initialisation and any dependency on the goodwill of others, it puts the build at risk and adds another barrier to adoption for contributors.\nIt's also an extreme optimisation: some users are experiencing timeouts from girhub: change the entire vendoring system.\nClosing this for now.. > There's a lot of []Foo that I wanted to tackle next. Those can be useful sometimes, though. Map pointers are certainly wrong.\nCareful about these :-/. >  is there is any reason why you used pointer to the map? I mean map is already pointer by design. There is lot of places in Tyk when we use double pointers.\n@buger Ah, my golang-fu failing me... if they are already pointers and treated as such then yeah, we can kill the double pointers to maps.. Wouldn't the entire tyk codebase be compiled into the binary for whatever is using it then? If I import a package from another large project, I thought the entire project doesn't get compiled in, just the package (it's already a big binary) - but I could be wrong?\nRegarding the API Definition objects, I like the idea of versioning them, opens us up to change in the future, though when we were discussing versioning I was talking about the path interfaces exposed by the dashboard and the gateway, not the objects, so maybe tyk/apidef/v0.* would be better for the objects as it is different from api, which might end up being the actual service?\n. > In general an api package means API objects. It's a name that you'll have to type very often, so IMO the shorter the better.\nStill confusing: The Gateway API, API Definition objects for hosted proxies, API's have a dual meaning in Tyk, the one(s) being hosted and the actual C&C API. Would prefer this to be explicit in the naming, so apid is better than just api.. Lovely!. LGTM. Can you share the API rate limiting feature? It's a roadmap feature we're looking at ;-). Lets wait until the bugfix release, then we can get schwifty.. @ilijabojanovic This isn't a feature, so milestone here does not matter.. As far as I can remember the keys are not reused between tests (or they shouldn't be), in some other tests I think we started adding random numbers. . sgtm. Closing because magic seems to have resolved it, or I'm an eejit.. Two things that I'd like to add here:\n\n\nText is easily seen as aggressive, it's not an emotive means of human communication, which means that choosing how things are communicated is important and everyone's responsibility, most comms here happen via text in some form, so please take the few extra characters to make sure the response being writing comes across well, so misunderstandings are minimised.\n\n\nLeave dogmatism at the door please, it's just software. Arguments about style are completely superfluous and do not belong here. We don't have a style doc, and Go enforces many style guidelines by default, if you want to propose style: open an issue and construct a style guide. \n. Looks like this is caused by #340, removing the relevant commit (2f5b2247f195296568fcdc259613701b652e1c46) makes reload behaviour revert back to the desired state.. Suggest re-opening #340 as it will need to be rolled back.. IIRC when custom http server overrides we're added they did have issues with hot reloads registering properly in some cases, so this might be a deeper issue with how we listen / reload. . Bumping this into 2.3.2 as it's pretty serious (but small). Also, LGTM. We might just want to add an option: force_user_agent_string: \"foo\" to the config, that will override it. If it is blank, we leave it as is?. > It is not about forcing (it can be done using existing dashboard/tyk config). \n\n\nYes it can, but you need to do it on an API by API basis, which is not practical for users that are managing 100's of APIs (many are). So forcing it means that you could actually then create firewall rules that allow the gateway-sourced requests through.\n\nSo a customer may send User-Agent header, and it will be forwarded to the API, or he may not send any User-Agent and our gateway will not add default Go header.\n\nGood point, we should also be able to \"allow_empty_user_agent\": true, that can cover this case.\n. > So maybe instead of all these options, we discuss above, make sense add \"default_user_agent: \", which kinda solve all the requests.\nsgtm. /cc @ilijabojanovic for test cases.. Has this been tested with hot reload logic? . Lurvely . LGTM. HMAC verification checks clock skew, it might be that.. I guess we can always add it back in again if we need to step back.. LGTM. LGTM. \ud83d\udc4d . > If tyk is ever to be used as an importable package (library), this will not integrate with the caller's logging\nThis isn't a design goal at the moment, so would suggest this is premature optimisation.\nI don't think we're going to be switching out logging frameworks any time soon (i.e. logrus is probably here to stay for the foreseeable future).\nThe interface route is probably the best path to take, but I would just standardise on logrus, that makes the interface easier, and we should only focus on compatibility within Tyk code.\nIf the global log variable is set to an interface, and then initialised by init() then we can basically use the fact logrus is hook-driven to write a new hook that just works for the tests. Hooks are pretty easy to write.\nTo fix the third issue of knowing what to log, can we have two behaviours:\n\nAll tests: no logs \nSingle test run: show logs\n\nIf tests fail in parallel, then we can always just run the failed test with a flag to get the logs output?. sgtm.\nImportable package thing - still think it's not relevant.. Let's separate them out :-). The store uses a global driver, and the logic there probably needs more elegance - it's basically a bad singleton. \nBut the storage handlers enforce the prefix on all operations on the store and basically ensure a namespace.\nThe key prefixes are specific to the functionality, so should be consistent in the tests.\n. Yeah this looks good :-). LGTM . The reason it's this way is to stop copying API Definitions around. Using this was just lighter and faster. We would need to confirm whether this change has a detrimental effect on performance and load times of large API Definitions sets for a gateway (2,000 and up). Until we can be sure of that am reticent to make a change.. > so I doubt this would affect performance in any way. Rather the opposite - you're using pointers to 24-byte structs, which is likely to degrade performane a tiny bit.\nAssumption is the mother of all fckups, prove that performance isn't affected and I'm a happy man.. > Well, while I agree that performance should be ok, try very basic synthetic benchmark of inserting few thousand APISpecs, iterating over them, and accessing few fields in contexts of [] and [], it should be enough.\nThe synthetic test should be:\n\nInsert a few thousand APIs\nHot reload them a few times\nCheck speed and memory consumption. \ud83d\udc4d \n. > @buger's https://github.com/buger/goreplay could be useful here.\n\nWhile it's a very cool application, we can't use our client's traffic for testing, it's their traffic, not ours - we're a proxy and we make guarantees that we store nothing, it ensures compliance across a whole host of potential legal issues. So this is out\nBenchmarks that we need would be against each middleware component, especially the auth ones so we can see potential for optimisation. If I look at our instrumentation on cloud for middleware latency, there's a few that could use work. \nThe other thing is handling large service installs, so thousands of APIs across many tenants - this is more of a hot-reload speed issue, but important in our cloud and for our larger users.\n. > If you can capture cpu/mem profiles of our cloud, that should be enough to know what requires our attention.\nWould rather not, we autoscale and the environments are constantly being rebuilt/destroyed. I do think benchmarks for the middleware would be fine.. We do have data in our statsd dashboard that gives us some indication, but it's on live throughput and not all users use the same components, so it's non-representative sampling.. I'd say we push this to the load testing stage where we test the integrated components under realistic conditions. We can build a profile of popular middleware from our statsd dashboard and from anecdotal data via the forum.\n. Most CI tools support redis as a service - it's only for local dev where it's annoying. Instead of miniredis we should just FLUSHAL during teardown.. We should handle errors, even if it just outputting them, if they are not being handled then that was an oversight when we put the functionality in.. @buger Seconded, please raise an issue in each relevant repository, assign a milestone and get it into the v2.4 (or related project) milestone / board backlog.. My policy is: if it ain't broke don't fix it, so keeping them as is and pinned is just fine.\nIf a vendor is updated, then it should be done one at a time with a full regression test.\nWe can get rid of the forks if there are no mods, the modified versions we should keep.\nSome of the forks are because the original author at some point f*cked us with a breaking change (a la logrus and osin).. loadAPIEndpoints loads up endpoints for the gateway API, and so the routes are not needed for API Definiiton / proxied API tests.\nloadApps loads up the API definition into the muxers, if they were in the tests it was to try and adhere to the logic of the application and the order it does things.\nIf the tests still pass then I can't see a problem with it.. On a slightly less vigorous test, with RPC reloads, the memory was recouped, but only after a quite long wait. @ilijabojanovic It might be good to get benchmarks for this.. >Assuming coprocess is disabled (doCoprocessReload does nothing), it seems like either doReload or checkReloadTimeout are the culprits. They both do sleeps for some reason, and I don't quite understand why. If the sleeps are long enough, and the reloads triggered fast enough, you could end up with thousands of goroutines before any of the sleeps is over.\nThe sleeps are there to keep a sentinel running so that you can't constantly reload, basically it forces reloads to happen at intervals of x seconds, even if you hit the reload over and over again (with thousands of APIs this becomes a thing, it's irrelevant with small numbers)\nWe would need to ensure that the hot reload is memory neutral and completely efficient, then we can remove all the timers (think Tyk Cloud - we have thousands of users updating apis all the time, the timers ensure that the stack only reloads in tranches of 120s or so on that system), none of these goroutines execute if reloadScheduled.\nI would like to clean this up if possible, it's not an ideal situation and more of a kludge.\n\nOne way to discern which of the two types of leaks it is would be to measure how many reloads it takes to OOM in under a minute (like your mentioned 2,600, rounded up to 3,000 just to be sure) and do them instead over a longer period of time, like every 10s.\n\nIn my tests it didn't actually OOM kill, I think it started paging.\n. > A single goroutine handling hot reloads, receiving requests via a channel\nGo for it, if we can get rid of this dumb timer it will be so much better.\n@buger any objections?. We've had reports from users where the JSVM was enabled (enable_jsvm: true) that caused a memory consumption issue - it goes away when you stop the JSVM so it's something to do with the interprester env not being released. Let's try and get it into a bugfix - 2.4 is a while away and has a big plan which might need whittling down. So either 2.3.5 or 2.3.6, the former would be better obvs.... Spot on... . Also /etc/tyk/tyk.conf because our package installer overwrites local ones atm.. @nickReyn / @matiasinsaurralde If no code has been done against this ticket yet, let's drop it from the 2.4 milestone and move it to 2.4.1. > Do we ever want the muxer to be modified concurrently by two goroutines? I think not.\nNo I don't think so, one routine to rule them all.... extended_method_versioning_test.go can just be acl_lists_test.go because those tests essentially check white list, black list and ignore list. Because we used to have a different structure that handled these, they are part of the \"extended\" set, but we can actually just get rid of the old ones, they are truly legacy and need decommissioning.\n. > Get rid of what, exactly?\nThese \nThe same whitelist/blacklist functionality, but it wasn;t quite as feature rich, had to change the data structure to make it work. But that was a long time ago and is no longer supported by the dashboard.\n. This has implications for Tyk Dashboard (and maybe Pump), so there is a critical path there that must be followed if we update one, we need to mirror.. This is all we got:\ntime=\"Feb 13 17:41:41\" level=warning msg=\"Handler seems to have disconnected, attempting reconnect\"\ntime=\"Feb 13 17:41:51\" level=warning msg=\"Handler seems to have disconnected, attempting reconnect\"\ntime=\"Feb 13 17:41:59\" level=warning msg=\"RPC Handler: GetApiDefinitions() returned nil, returning empty string\"\ntime=\"Feb 13 17:41:59\" level=info msg=\"Storing RPC backup\"\ntime=\"Feb 13 17:41:59\" level=info msg=\"--> Connecting to DB\"\ntime=\"Feb 13 17:41:59\" level=info msg=\"--> Connected to DB\"\ntime=\"Feb 13 17:41:59\" level=error msg=\"Failed decode: unexpected end of JSON input\"\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x8 pc=0x465aea]. All redigocluster driver does is add some handlers to manage cluster slots handling and re-sharding, under the hood, it actually creates many redigo redis clients (one for each seed_redii entry), it's just a wrapper with bells on.\nAlso, redigocluster is badly maintained, which is why we have internalised it - I wouldn't trust upstream too much, the original code had serious problems with parallelism. So we live with it until we swap out for a newer overall driver.\nIn fact, a long-term goal should be to swap out to a new driver.\nThe customer that reported this bug was using the healthcheck API under load, which is a terrible thing to do because it calls to redis on every request to increment counters, it is a legacy feature that we no longer recommend anyone use, but they insisted. \nWhat will happen in this scenario is: each request comes in, if redis fails, the request will try to write to healthcheck, fail, and call itself, and fail, but this will back-up across all the http handler go routines and so just stack up and try to open thousands of connections because that's what's happening at the HTTP end with each request because of the load test.\nSo load was generating the connections, not the redis driver IMO.\nI think the failure tail calls in most of the methods are ok, because they won't fail instantly, they fail after timeout (unreachable network / connection refused etc.) so it's a slow growth and not necessarily the root cause.\nThey are still awful and must be handled better.\n. It is indeed a duplicate. Suggest we stick with the other ticket as it has links with dependent projects already . This can happen when the process forks I think.. > Perhaps the intent was to have exactly one watch loop per store. In that case, we would need two bools or another mechanism to ensure it properly.\nThat was the idea, now that it's a singleton it's no longer needed twice\nWe should internalise it to the store itself, and clean it up - the RPC driver should be handling this for us, but it doesn't do it properly I think, our ELB still kills connections after a period of inactive time. Please don't modify the scripts :-) there are counterpoints in the CD system so one impacts the other. (And I recently had to re-fix them). That's a beautiful number :-). As @buger said, this can only be merged in a major release, well aware of the issue - it causes no end of issues with the api import and export functionality as well as inter-connectivity between the dashboard and the gateway. This would have really wide ranging (subtle) problems and need to be approached holistically. Please do not merge.. Too many external side effects - will very seriously break user installs and other functionality. This needs Togo against a major version.. It is an option, but it's cross-project and is tricky:\n\nTyk Dashboard uses this object too (but the tags are different I think, which is where it gets screwy)\nThe import/export api has management code for this on import because there's some weird serialisation side effects\ndashboard policy loader (from dashboard to gateway) \nMDCB RPC call (from server to gateway). \n\n(These are off the top of my head)\nSo all must be fixed at once and the \"coping code\" that currently translates and manages this anomaly needs removing and the entire stack needs regression testing.\nThe bigger problem is then releasing it to our cloud, because we can't guarantee all hybrids are the same version and so they will break.\nIdeally - we have two tags that are both valid, but I don't think that's possible?. Fantastic news - the del was he most likely culprit for the issue we saw, so this is definitely a fix worth including in 2.3. @gwshaw you may have missed this part of @buger's suggestion: \n\nFor sure worth mentioning that this issue can be solved by writing own middleware, in the language of your choice, which can handle any logic. Also already available if using on-premise or hybrid versions.\n\nYou can write your own plugin for Tyk in JS, Python, and Lua as native plugins and any gRPC supported language: Java, .Net, Ruby, Go, etc.\nThese can run post-auth (and so pre-cache). There are reference implementations here for plugins our team has built. Docs are on our site under \"extending Tyk\".\nTyk is architected this way precisely for performance reasons (code is integrated) and to provide a solid feature set for a variety of purposes so that users can get up and running quickly, not to fulfill a niche requirement for every single user - if you don't want to write a plugin, then you could just modify and compile the cache middleware to strip your query Param, Tyk is open source after all and this is a trivial change to cover your specific use case. \nOr use could use the custom middleware capability we already provide that offers a wide spectrum of capabilities to fulfill this requirement.\n. @buger to actually help address this requirement and your question: I think an anonymiser middleware that can be given a bunch of directives (headers, body regex, query string param keys) to remove or redact might be best, for ease of use, there could be an option to pre-set the current auth mechanism used by the api definition, but since other personally identifiable information may be available in the request then we should widen it out.\nThis should be a global MW so that it only needs to be set once\nAlso it will help where users are recording the full body data, because then it would be possible to store the anonymised data based on customised rules.... The Mserv project does this already - you can push a bundle to it with a .so and it wraps it in a gRPC server and makes it available to the gateway, it\u2019s a dynamic go code loader basically.\nThe issue with pluging into Tyk will be the dependencies in Tyk, using the CP API and MiniRequest object actually makes it more difficult, and I\u2019d make sure that you have a test setup in place where you can rule out plugin failures right from the start (build in one docker container, test in another to ensure reproducibility).\nIt may be worth time-boxing the discovery piece so you don\u2019t go down a rabbit hole, then make the implementation decision off that?\n. This echoes a lot of the stuff I found actually: \nhttps://medium.com/@alperkose/things-to-avoid-while-using-golang-plugins-f34c0a636e8. Disregard this, I don;t think this issue is from the gateway end, restarting the MDCB instance(s) seems to fix it.  . LGTM. @matiasinsaurralde Can you let us know the significance of these lines? I imagine they are redundant but want to be sure.. All good - though we might want to look at what debug logs we want to include, lots of people run with debug on.. Show off ;-). Can you raise thi in our community forum? It would be the appropriate place for this as this is not a bug, but most likely a configuration issue.. LGTM. > note that this touches the log call I modified recently to use r.RemoteAddr. I don't see how that log call could ever fire \nWhen could it fire: When SplitHostPort() fails, which admittedly is unlikely, but it would be abnormal to fail, and in the interest of exposing abnormal behaviour, I'd like an error message there to cover the scenario. (See all the error scenarios in the source: https://golang.org/src/net/ipsock.go?s=3572:3638#L104)\n\nor why it's useful, as it's from an error to get an IP address that we never use.\n\nThe IP address is used, it is used to modify the X-Forward-For header, which informs the upstream server  of the proxy path that this request has gone through, if someone were messing with the chain, it might be useful to inform the user.... Sweet Christmas. Just leave it alone please.. As an aside to this issue - if the options in the config.go file for HTTP Server options:\ntype HttpServerOptionsConfig struct {\n    OverrideDefaults bool       `json:\"override_defaults\"`\n    ReadTimeout      int        `json:\"read_timeout\"`\n    WriteTimeout     int        `json:\"write_timeout\"`\n    UseSSL           bool       `json:\"use_ssl\"`\n    UseLE_SSL        bool       `json:\"use_ssl_le\"`\n    EnableWebSockets bool       `json:\"enable_websockets\"`\n    Certificates     []CertData `json:\"certificates\"`\n    ServerName       string     `json:\"server_name\"`\n    MinVersion       uint16     `json:\"min_version\"`\n    FlushInterval    int        `json:\"flush_interval\"`\n    SkipURLCleaning  bool       `json:\"skip_url_cleaning\"`\n}\nAre active, it can affect reload behaviour, so can we make sure that when ReadTimeout etc. are set that the reloads are still good (including SIGUSR2 reloads from the command line).. :+1:. @csyllac Thanks for the STR, it will help us get this issue solved.. Keep the strings.Replace stuff please - there's a wider refactor where we base64 encode every UUID but for now we use them as is pls.. So, the question is, at any point were any of the forks modified or touched? I can't remember messing with any, but might be worth confirming first.. It will require a flag to say it is one . Actually, the flag should just stop it from broadcasting its details on the pub sub channel. It should be very straightforward.. So quotas are not broadcast and do not affect the server table that gets built up by the nodes. Only the DRL does that.\nSo the fix is: \n\nAdd a flag ManagementNode:true\nif set the DRL does not activate at all\n\nThis stops the broadcast, the other rate limiters do not make use of broadcast so that's ok and the quota system uses a direct redis counter so this should not need modifying.\nA user could just disable the rate limiter by enabling one of the others, but that isn't intuitive. . Btw it's possible to set different templates per event,  so a user can modify these templates as a workaround.. It's a bit tricky, since the XFF header can be arbitrarily added by a client, it's not a viable check to just ignore it or include it, since most servers run behind a load balancer and most of those are proxies.\nStrictly speaking, we should have a list of allowed proxies that need to be present in the XFF header, this way at least we can validate the chain. Also, we should not allow duplicate entries in the XFF chain, since if the XFF header is meddled with client side, your real proxies should still append their own values, this should detect spoofing... at least I think so :-/\n. That is not possible, Tyk requires redis. This is not a bug, it's how it's supposed to work.\nThe api id is not a filter, it specifies the storage back end to use to update the token.\nBecause it is possible to have different auth and session back ends for different apis. . So in the dashboard, in a default setup, will hash tokens, so it will not list them for editing (this might change), instead you need to search for them.\nThe search screen for the tokens will group APIs by their session provider and then generate a search box for each session back-end.\nSo a user that has generated a key for API 1 (redis) or API 2 (LDAP), will need to search for it against one of the two back-ends.\nIf they need to edit a key that has access to API 1 and API 2, they can use either search, because the write is handled by the gateway, it will iterate through all ACL entries and then call the update function on each session provider.\nThe benefits here are that a local dashboard, with a custom gateway, that has a custom back-end for a specific API, can still mange that token via the dashboard so long as they have filled in the write-specific functions of the interface (so far this doesn't exist, our demo ones are read only, e.g. LDAP. But that doesn't mean it isn't possible, it's how we switched from redis to redis cluster, we just wrote to the interface.\nTo add to the confusion, note that there are two back-ends per API, an auth back end and a session back end.\nAuth back-ends provide raw data from a master (authentication) and session handlers provide authorisation, the best example is the RPC handler, authN is provided by an MDCB server and authZ is provided by the redis cache locally. \n(since MDCB is itself backed by a master gateway backed by redis means it is literally a bridging service, but it could be any auth back-end so long as the write functions are implemented).\nI agree it is confusing, we have a lot of users expecting the query param to be a filter, when in fact it should be a back end, so maybe, it may be worth adding a new param name that is also respected called backend_provided_by and stop using the other filter, then deprecating it in a major version, also, if it is not provided, we should assume redis (I've always planned to do it and never got round to it).\nHope that ramble made sense... :-/\n. This will have inplications with the hot reload (sigusr2) signal as well - just to keep it in the picture in terms of testing, between process reloads connections can't be lost.. > What is the current behavior?\n\nUptime Tests feature doesn't work well, with this option enabled gateway sends traffic on host which is down\n\nWhat option enabled?. I think it's an interaction with versioning - we know it works with standard default version apis.. That's why I asked \"what option enabled\" - the bug report is not very clear. And the community forum post will change, so the full replicated bug should be on this ticket.. You don't have the feature enabled that checks against the load balancer:\ncheck_host_against_uptime_tests: false\nIt's an option in the UI above the uptimebtests settings.. When you start the gateway - does it show the log message from the virtual endpoint script? \nVirtual Test initialised\n^ this message?. That basically means that the JS is ok. Is this api open or closed (uses an api token)?. The atob function doesn't do UTF-8 well IIRC. We had some trouble a while back encoding blueprint docs for the portal that were in simplified chinese because we couldn't trust the atob func to handle it properly. \nhttps://stackoverflow.com/questions/30106476/using-javascripts-atob-to-decode-base64-doesnt-properly-decode-utf-8-strings. I have set up a new ticket for dashboard here https://github.com/TykTechnologies/tyk-analytics/issues/433. Might have already added this as #641 :-/ sorry. What were you doing when this bug happened?. Interesting, I thought we had fixed this bug. It essentially means the key you created was for an api that was not live or loaded by the gateway. \nHas the api been loaded on the gateway yet?. @penhauer-xiao The panics, according to the trace and the tag, starts here (line 101):\n```\nfunc (b *DefaultSessionManager) ResetQuota(keyName string, session SessionState) {\nrawKey := QuotaKeyPrefix + publicHash(keyName) // 101 right here\n\n```\n... in auth_manager.go Which is a weird place for a nil pointer dereference. If you are using the dashboard, then you really should be using our packaged releases - have you tried replicating with them?\nAlso, have you made any changes to the source?\nWe will need a full STR (Steps to Reproduce) and to see the changes in order to help as we can't replicate this otherwise.. That's completely unreadable - can you use the proper formatting tools so we can read it? (Three backticks to open and close a code block)\nAlso - are you saying that this is your modified version?. Ok so you're just compiling our code and it's causing this error?\nHave you tried our packaged versions?. Can't we version the protobuff? . You're right it could be an absolute nightmare... let's keep it all in line. Well, if the api is tagged then we could use the tag in kreference of a uuid?. Yeah, I think we could dontag first then uuid so its a hierarchy, would be v. Useful for management gateways that are managing many tagged clusters - and it's predictable, whereas uuid would be good to just helpnusers out that are making mistakes. Agreed - this is a stopgap solution. The dashboard shouod direct the request to the correct gateway - the issue is it has no knowledge of which back-end to use. So we may need to cache metadata in mongo to make it smarter.\nThis is actually on the roadmap.. We can actually implement this in parallel, to support redis with a new driver we just need to implement the StorageHandler interface with the new driver and add a selector for it as a name. \nThere might be some places where a Redigo cluster driver is explicitly called which would need to be weeded out, but I don;t think there's many.\nThis should also port because the other libs base their implementations off a variation of the StorageHandler interface.\nNote this would have a major impact on MDCB too.\nWorth doing IMO, we can side-load it instead of replacing it, then we can canary it with out owned network.. Note: we have a function that truncated and semi-anonymises a token (**abcdf) instead of the hash, we use this elsewhere in the audit logs, might be worth using that?. This feature encompasses multiple projects and a multi-phase swap out of the pub/sub and storage mechanism... there's no way these PRs will be small.... > Did you try rebasing? \nEndless conflicts\n\nOtherwise, perhaps squash into a single commit?\n\nSeems to also cause endless conflicts\nTried to squash again and the amount of conflicts is so large that I reckon resolving them might take longer than writing the feature.\n. Wil squash and merge when the time comes. Spending more time pruning GH than actually getting meaningful work done.. @ilijabojanovic Can you run a manual test of this PR please - need a second set of eyes on it to make sure it functions robustly.. Closing this in favor of #696 . That makes no sense - if the uptime tests start again after you stop and start the gateway process then the api definition is still there and is still configured with uptime tests. . These are debug logs, so not massive priority.. All nodes actually do have an ID now that is either a random UUID (CE Mode) or a pool ID supplied by the dashboard, we should use that instead:\nhttps://github.com/TykTechnologies/tyk/blob/36e7e951cd9678f5df5cc2dafef778c6970ab0f7/main.go#L66. In this case we are talking about the TTL of the session object (token data) stored in redis.\nThis is different from the expiry - since a token can continue to exist, but be expired - and so it's expiry can be extended and the token continue to be used. Once the token session is removed from redis because of the TTL, this can't be done, the whole token needs recreating.\nThere is a function called GetLifetime() which handles this for us at the moment, you can set TTL on the token via a global override, an api-level override or a value stored in the session object itself.\nHowever, if a token expires later than the TTL, then the TTL should actually take that into account in order to preserve the data just in case.\nSo in a long running gateway instance, there is a chance that your key store will fill up with expired keys because no global TTL was set. But if you set a global TTL then tokens that should never expire (expires:0), should not have a TTL. The same goes for a token that has an expiry in 5 days, but the TTL is 2 days. . @buger agreed - it needs to be an opt in, not a default :-). You enable detail recording in the tyk.conf in the analytics section, once enabled the gateway will record the requestvand the response data in wire format as part of the analytics record.\nThis is disabled on cloud (you can imagine the disk space requirements), But some users prefer a full log of all data.\nIt can be enabled with a config change to the organisation key (the object used to enforce quotas on tenants, if present) and therefore can be used for debug logging, but many users need a full audit trail and want to record everything. \nBecause it's a wire format string blob, we don't want to have to re-parse it to target segments of the object, I'd rather just have a list of regexes to run that do the redacting since the user might not be using headers, I.e. Auth in JSON body, auth in querystring and auth in header.\nAdding user-defined regexes is a good idea - similar to our URL normalisation list. Would be useful for removing personally identifiable info from a log for e.g. Healthcare providers.. We can bump this to patch.. No, I mean that the file mode shouldn't allow \"other\" read access - it's user/group/all at the moment it's r/r/r \nSo it is connected, but they are not dependent on each other. \nEdit: I mean that if I run as root then if the file is not world readable then this requirement is satisfied. Ownership is a separate thing, thatvalso needs fixing, bit not dependent.. Bump to patch. > You probably want to swap the author of the commit to be you instead of me :) I forgot to do that.\nDoes it really matter?. > So I understand you enable UseDistributedQuotaCounter on all gateways and DQSetMaster in exactly one, and it just works? What if you set two to be master? What if you set none?\nIf you set none to be master quota doesn't work. \nIf you set more than one it doesn't matter, the stored value isn't used except initialising a fresh node that has never seen the token and reporting. More than one will also cause more writes to your data store which we are trying to avoid, but if using redis, more than one should be master for HA.\nHowever, with a raft based k/v there is automatic leader election and detection, and in the Tcf framework it's plug and play as part of the store package, so master can be dynamically adjusted on node failure once integrated.\n\nI'm still concerned about the initial sleep. What would happen if we removed it? What would happen if the network was slow and nothing happened in those 100ms?\n\nFor a single node it is irrelevant, it matters for new nodes joining a cluster as part of a scaling event, they need enough time to gather CRDT data from other nodes to initialise their own counters so they can accurately enforce a quota without resorting to the DB (because the stored value can be out of date by whatever the flush interval is).\nI tried removing it, if the node gets traffic immediately the you run the risk of accidentally resetting the quota for the user. We could double it, or add a channel to wait for data, but if this is the first node of a cluster, it will block. So we'd end up with a  wait anyway. \nHowever, if the network is slow, that's ok, the worst case scenario is that a quota is not enforced correctly, which isn't terrible, just not ideal.. Aaaaand for some reason the * commits are duplicated... gah! I give up.\nEdit: It's because I rebased, and it duplicated the commits. sigh. @ilijabojanovic over to you.... @mvdan might need your help to squash this thing down.. Yep it's based off the original dq cherry pick which is why it's funky. I just wanted a PR in place so that I can start on the k/v piece.. No go for it - squash away. Also most users will use the group reload, which is actually a pubsub trigger and a sync by default because we don't know about the state of other gateways.\nAgree that it should be possible to have the reload call block, seems more like what you would expect.\nWhat would be great is somehow seeing a group status of when each node last reloaded so I can confirm that a whole cluster is up to date.. Yes it's the same thing as a request ID, mainly used for auditing. To be used by users, we've been asked for this for ages, so much so that we set up a python plugin that does it:\nhttps://github.com/TykTechnologies/tyk-plugin-correlation\nBut now it can be part of the main build (optionally added by enabling the context variable option in the api spec).\n. Yes it will. I'm a bad person - sorry I should have made it clearer.. @mvdan this code normalises a URL so that when the proxy sends the request upstream it doesn't contain the slug used to hit the gateway.\nE.g. If the gateway listens on /super-api/\nThe target might actually be serving on root (/), so if we proxies /super-api/{id} it would 404, so we strip the section out of the URL before proxying it so that you can essentially generate a facade.\nI'd say replacing the first occurrence is better than prefix, because we can't guarantee that there isn't another proxy downstream doing some of its own shenanigans, and so can't guarantee that the listen path will start at index 0.. The reload ID is good - it means that audits can be done and validated, if the reload endpoint returns an OK / 200, the reload ID and the endpoint to poll for which nodes have completed, so:\n{\n    \"status\": \"ok\",\n    \"reload_id\": \"grl-321cca81-fc0d-400d-b3e3-99168b933bf3\",\n    \"time\": \"1493851640\",\n    \"status_url\": \"/reload/group/status/grl-321cca81-fc0d-400d-b3e3-99168b933bf3\"\n}\nThen if you visit this URL it returns a list of the nodes that have sent a reload notification. All the gateways would need to harvest/collect these passively and store them in memory for a while (maybe in a time-limited cache).\nWe could go further and extend the status/ root endpoint to include a listing of timestamp / caller IP / reload ID and nodecount (e.g. 5/5). We keep data for an hour.\n(but that might be for a later time).. The time stamps would be from the gateway at the end of the relod procedure - they would be nothing more than informational. Time sync wouldn't be critical, but if server 1,2 and 3 are all within 5ms but then server 4 is 5s that's an outlier that might need investigating.\nAs for time, dump the data into redis then it won't mater, they aren't large objects so memory overhead would be minimal even if it lives in ram. \nThe thing is, reloads from the dashboard happen all the time (every time you save or update an api or policy, which happens loads), so that cache of n reload becomes swamped with data from one user that can't make up their mind and offers no meaningful insight. \nI'm not so bothered by the list, we can go with the most efficient option for now and get feedback.. Could handleURLReload take an additional argument onComplete chan struct{}, then when the reload handler completes it asynchronously notifies this channel (so it can't block) and closes it. \nThe caller, if interested, can then either block on the chan to confirm completion (with timeout) or just ignore it altogether / read it non-blocking / or call handleURLReload with nil instead of a callback chan?. Gotcha, so basically we need a publisher instead of just a channel.\nSo maybe don't send a channel, instead register a channel with a notification queue / list / map, and have a dedicated reload notifier channel that sends data to a listening long running goroutine, this routine just copies the message to each registered channel and then closes and removes it.\nThat means any method that needs to know if a reload has happened just registers with the reload listener? . Mine requires two goroutine a:\n\nThe reloader that waits for a reload signal and actually does he work\nThe publisher that Listens for signals from the reloader when it's done\n\nEach reload caller (sender to the reloader) (api, redis signal, other) can register a one off listen channel with a global map (essentially a subscription to a topic)\nWhen the reload completes, it sends a signal on the reload channel\nThe reload channel notifies the publisher\nThe publisher loops through each registered subscription channel to tell those callers that the reload is complete\nNo polling is required, it's entirely push-based\nThe caller can either chose to block on the subscription channel or skip it.\nIt's basically a pub/sub structure with channels\n. This is good - it should be fully backwards compatible with JS that users already have. Not so worried about the additional encoding.. > From our perspective, this feature looks quite complex, and touch a lot of application parts. We should not just replace this named variables by regexp, but actually, store them somewhere, and make accessible to JS context.\nThis feature should happen in the context map middleware where we already do splitting and storing other data as part of the request lifecycle.\nWe can then shove the entire context into wherever it's needed.\nThis feature though is most relevant to the Virtual Path functionality, which is completely different to the dynamic middleware and currently is only Otto JS. \nSo doing it \"properly\" is a big task if you reframe it as all plugins and VP. Which wasn't the initial framing of this feature or the request raised by the user.\nSince MW is not designed for orchestration, but VPs are, we could just do it so that the virtual paths have access to the whole context namespace (like $tyk_meta) so they do not need to do a regex in interpreted js on every request, it is wasteful and slow, it makes good sense to make them available only in VP and then extending the feature out to plugins.\nLet's not over complicate something that could be inherently simpler.. It wasn't meant to be much broader, so it's an interface, but it gets used as a map all the time so we should change it.. Assume a downstream proxy or trusted client inserts its own IDs. We sort by host and then listen path because we need to make sure that the routes are longest-first, and listen paths can be duplicated between domains, but not within them.\nIf we don't have longest-first, we end up with a shorter route capturing the traffic for another route, so:\n/api/\n/api/v2\nV2 will never be hit because the first route will always be matched.\n@buger Sorting by mongo ID is not a good idea, since with CE there is no Mongo In the stack and IDs are arbitrary. We should use api_id (not id), but since this is an arbitrary string in CE file based mode we can't guarantee that it will be of any specific length. It might actually be better to just use a counter.\n. @MangoMM That logic is correct, but should actually already be applied because OPTIONS requests when the feature is enabled always get passed straight upstream. \nMight drop this issue form the milestone into a patch.. This should be configurable as a header so it works with different things\nAlso maybe we should ensure that rate limits and quotas can use arbitrary metrics first (generalised metric counter), then we can easily plug new ones in. So if a user wants to do \"100 records per second\", how do you define a record if a request could return 1 or 50 objects in a list? And that data might be in XML or JSON? \nSo you'd want something that can take an arbitrary object, parse it, make some basic assumptions and then count the number of records - if it's generic enough it can fit any use case\nAnother one we get a lot is KB or MB per second or total - so based on content-size. But that's not generalisable I think.. Stupid mobile version of GH lost all my input . Is there a back-end PR for this? This has a gateway dependency.. We don't have an input validation middleware at the moment, though it's been asked for enough times - maybe we should generalise this to include XML schemas and JSON schema?. Constraint on this should be gRPC for now, we still need a good way to build go plugins.. You need to re-pull dependencies - logrus jas since renamed back, this is an issue with your build env, travis Ci is passing.. We shouldn't leak log information to a client (a potentially hostile one in case of a DDoS).\nWe should defjnetely return a meaningful response.. This can be tricky, I may decommission this requirement because Access tokens deployed by OIDC IPDs can vary, so there's no guarantee that they will follow a specification in terms of JWT structure. Also, access token validation must be done by the client according to the core spec here.. Can you share log output from when the requests fail please? \n. Did you look at this log?\n\ntyk_gateway_1    | time=\"Jul 12 01:28:42\" level=error msg=\"JWT validation error: Invalid Key: Key must be PEM encoded PKCS1 or PKCS8 private key\" origin=172.19.0.1 path=\"/test/\" \n\n... And did you read the post regarding the JWK?\n\nAs you can see this document contains a list of RSA Public keys (the key is in the x5c property - this is not on-spec), these keys are a base64-encoded version of the PEM-encoded version of the RSA public key (if you decode it you'll see a traditional public key ascii file format - this is where we also differ from the JWK spec). All these keys are delimited by their key ID.\n\nI tried to decode the key in your JWK and it came out binary. If your public key were encoded from the PEM, it would look like this:\nLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0NCk1Gd3dEUVlKS29aSWh2Y05BUUVCQlFBRFN3QXdTQUpCQUo0QWhRNkZHc3B2TUFuQm1jbEF6eWRWQjM1aS9NSmUNCkRxK09CNWRpN1lMeTNWY0g2Nk1KME5TbkV5L3M1NWhnY1FRK0lvekpLNFVUeUF5R3dSR1Z4bjhDQXdFQUFRPT0NCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ==\nYou have: \nMFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAJ4AhQ6FGspvMAnBmclAzydVB35i/MJeDq+OB5di7YLy3VcH66MJ0NSnEy/s55hgcQQ+IozJK4UTyAyGwRGVxn8CAwEAAQ==\nMaybe that's the problem?\n. I would suggest just trying to add it via the dashboard for now, IIRC the last time I tested this I didn't need to do anything fancy to update the api definition, tyk assumes it's b64 encoded. Erm, this is not related to JWTs or a bug, you are trying to access an api version that isn't on your gateway. . Not really - this is an undocumented feature that will likely get deprecated. It was entirely superseded by OpenID support, which handles standard JWKs in a standardised and transparent way.\nMy advice: use OIDC.\nAlso, there's a test here that makes sure that the feature works as expected:\nhttps://github.com/TykTechnologies/tyk/blob/master/mw_jwt_test.go#L658\nSo I'm not sure what's happening with your config, maybe the test will help you diagnose it.. This isn't a bug. The bootstrap script must point at the dashboard and it's most likely that the dashboard isn't running or isn't reachable on that address. Can you post this to the community forum, we can help you there (https://community.tyk.io). This isn't a bug, since mocks piggyback on list functionality, the inbound path is matched to the defined one in lowercase, this means that /aBc will match against /abc.\nHave tu tried using the camel case request against a lowercase definition?. It's because the mocks execute alongside a list, and since lists are there for securing an API they apply case insensitivity, while others don't \nEventually we need to move the mocks into their own middleware, if you want to raise an issue for it it'll be on our radar?. What's the plan and approach with this issue - can't see how it is being resolved anywhere. Will mark as requires planning until there is clarity in the thread.\n. There isn't a plan to implement a service discovery system in Tyk in the short term. Though I can see the reasoning, we do have the capability to integrate with any system that provides a REST interface to handle service discovery though, so that might help (if you don;t want to install consul or etcd, you might just use a smaller homebrew API). You smart b%st%rd @buger, this is awesome research. \nDoes sound like a lot of work though - will need planning and prioritising.... The camel casing comes from Go's parser, it automatically changes the case, so we don't actually know the original header case. \nThe only option as @mvdan said is to use a getter and setter that filters this - but what gets proxies will probably still be camel cased.. You can use the dashboard API and just PUT the API back? There's full CRUD functionality built into every dashboard operation (the dashboard is just itself an API client)\nalso, instead of the API file export, use the dashboard GET api for the api definition?\nThis is the API in question:\nhttps://www.tyk.io/docs/tyk-dashboard-api/api-definitions/\n. > kid as policy identifier, and make a policy link to it.\nThis is not a claim, it is a header, which is why this probably will not work. Add a new claim for the policy for this to work with JWT. kid is reserved for key IDs. That's quite a long time ago, what did yu upgrade from? \nThe change is because the kid header is reserved for key IDs, therefore if the JWT is used elsewhere you break the spec.\nBetter idea is to not use a reserved header.. One workaround for this is to add the certificate to the trusted certificate store on the requesting box, it should bubble through.  \nTykMakeHttpRequest does not use the proxy, so it will use a different client, which is why the setting isn't applied. Though I guess it should.. The workaround described above is this:\nhttps://unix.stackexchange.com/questions/90450/adding-a-self-signed-certificate-to-the-trusted-list. Would suggest having all or specific JS functions might be the most effective thing to do here:\n\nAdd a new middleware hook that fires regardless of the in bound API listen path, this takes care of a global inbound traffic\nMake it easier to write generic specific JSVM code by introducing a shared namespace for the JSVM as suggested in #853 e.g. some kind of tyk_contrib.js which can be added to the middleware dir and is loaded as a common lib.\n\nThis would make it easier for grouped APIs (they just invoke shared code) while also allowing a blanket approach and means we don;t need to introduce additional code-execution logic beyond the existing path matching.. @bitsofinfo have you hard -refreshed your dashboard?. @bitsofinfo This was an error on our part, the change made it to package, but not to cloud - that's being addressed now.. > How do I merge IsInactive? True if any of them are true, false if any of them are false, whatever the first policy has, whatever the last policy has?\nIf any one policy sets this to true, it should be active on the key.\n\nShould coprocess.SessionState be updated exactly like the internal struct, or in a different way?\n\nThat's one for @matiasinsaurralde \n\nIn the JWT code, now only the first policy is used. Is that correct, or should it use all policies somehow?\n\nJWT and OIDC would need extending to support multiple policies, JWT would need a new claim for policies (or a bool to expect multiple policy IDs) and OIDC would need the ability to add more than one policy in the UI and against a Client\nI would suggest we make this a 2.4.1 enhancement.\n. > I took 3 guys all day to resolve this issue. And i lost a customer for that reason. \nSorry to hear that, it is unfortunate.\n\nThe real error on the end was that the api was duplicated on the endpoint. Human error.  \n\nWe can't protect against that\nWere you using the dashboard for integration? If you were using the Dashboard, then it shouldn't have allowed you to add a duplicate API. The Gateway doesn't have that many checks for dupes except for when the APIs get loaded. \nv2.3.4 of the gateway improved dupe detection even more, so you might want to try that.\nA panic is never good, so we'll make sure we clean that up.. This is not a bug, tyk community edition is configured with files and does not use the dashboard at all. There is no link between the files in the gateway and the dashboard.\n. What I mean is that's you need to use a file based configuration and not use the dashboard, or use a dashboard based configuration and no files - the two are mutually exclusive. Trying to use them together causes weird behaviour.\nBasically, if you are using dashboard, you are using Tyk Pro, and should use tutorials and guides that are focussed on the dashboard.\nIf you are using just the gateway, then you are using community edition, this can only be configured with files. . If the list from the dashboard returns 0 (it is filtered on the activation flag) then Tyk takes it as a failed get and doesn't unload. So you need to deactivate one at a time.. If this is closed why is it in the backlog for 2.5?. Re-opening this as we may need a better fix for this issue than what is currently in place.. Edit: This should apply before stripping the listen path.. Then the filters in dashboard need to be rewritten to use the new field too, feels like duplicating data and indexes. \nThat\u2019s a lesser problem though, the bigger issue is the matching between middleware.. There isn't one, see slack.. I've created one here: #1043 . Have updated with suggested changes.. @mvdan bump. Have addressed the two review issues... will merge when ready. If it fits and can be tested, would be good to put it into 2.4, but since it's not in the project plan it won't be the end of the world if it makes it into 2.4.1. this is already possible with non-JS middleware using the ReturnOverrides object, and a patch for JS has been put in place for a future version.\nIf you want to get this to work, use a rich plugin and not the JSVM.. Relevant PR: \nhttps://github.com/TykTechnologies/tyk/pull/1042. So the dashboard does store API Definitions, but it is not guaranteed that the API Definition is on the gateway (for example if it is a \"sharded\" gateway that uses tags), OR if a gateway ignored an API Definition because of a dupe (used to happen) then this shyould happen.,\nBasically, the gateway refuses to put API Definitions into the store unless it can find all the API IDs in the ACL in it's own map.\nIt could be a few things:\n\nThe wrong ID is being added to the ACL (Dashboard has an internal ID and also an API ID, we must use the API ID for all ACL actions, same goes with policies).\nAn empty ACL entry is being added to the ACL (i.e. a {} object)\n\nWhat we need to see the actual object the dashboard UI is sending on update. It could just be data corruption.\nI don;t have this version running a the moment, so @lghiur if you can share the Session Object from when  you CREATE the key and also from when you UPDATE the key, we might know more.. So, headers are already exposed to context, you can access any header from context by using:\n$tyk_context.headers_HEADERNAME\n\nOr (for body transforms):\n{{._tyk_context.headers_HEADERNAME}}\n\nRelevant code has been there for a while It was just never documented.. THRis has been done in the gRPC-proxy branch. Worth noting that the catalogue entries are linked to policies and can potentially grant access to multiple services as part of an aPI product, instead of just 1-to-1. \nSo linking them up could be problematic in cases where the policy grants access to many apis. Which in micro service environments is very likely.. @mvdan can you review that this doesn't undo some of the work you did on the reloads?. @mvdan If you can suggest a good alternative to httptest.NewRecorder() would be happy to change it. . I have changed the context part, a context is needed by the function that gets called to register the endpoint in the gRPC Proxy (added a comment to that effect). \nctx is also part of the module library that solves the other type sharing headaches. Unless we want to fork and modify that,m I'm leaving it as is as it doesn't hurt. Instead I am passing the Init() func a nil value which seems to be ok since it is not used).\nHave added tests.\n. Which ones in particular? Some I won't fix (like the context).. Bump. That's the gRPC proxy specific code annotations to have the proto file generate a proxy in the first place.\nYou're right though the  readme should be clear that yu need to do this with the bakery.. Bump. We may need to drop this for v2.4, happy to do so, it's hyper experimental.. @mvdan @buger correct - this was done in a morning to see if it's possible, some of the packages will need to better extraction.\nGiven that by 2.5 master will have dramatically changed, it might be worth me doing it again closer to the time.\nThis PR is huge because the goal was to pull out apispec, it might actually be easier to inverse what this PR does and just try to do one or two of the smaller packages over time (outside in) instead of focussing on apispec.. LGTM.. There is a dashboard dependency on this, this only affects the gateway CLI command mode.. Dammit - will remove the swagger stuff.... Swagger stuf removed. @ilijabojanovic https://github.com/TykTechnologies/tyk/pull/1208. I chose a map so that I didn't need to iterate an array on each request, that is correct.\nI also thought that a map interface would mean that in future, if we want to extend this feature to do more than just copy the value of the header into the analytics, then we can add per-header config operations to it, so for example:\n\"tag_headers\": {\n    \"x-role\": {\n        \"count\": true,\n        \"category_set\": {\n            \"user\": \"foo\",\n            \"admin\": \"bar\",\n            \"badger\": \"baz\"\n        }\n    }\n}\nThis could then create:\nx-role-N #Where n is an incremented counter\nx-role-category-set-foo #if the value of x-role header was \"user\"\netc.\nIn terms of the API design, I realise it's arbitrary at the moment, but I'd rather be able to extend this than lock it down with an array to then have to change it to a map later.. Fair enough - wanted to go with simplest option first. Instead will now have another nested loop instead... which IMO is uglier\nNot sure how:\ntag_headers\": {\n    \"x-role\": true\n    \"x-banana\" true\n}\n\nIs confusing for a user - even more so when it's done behind the scenes in a UI :-)\n. Actually, come to think of it, having this as a map isn't a great idea - but not because of the reasons you raised. \nThis will need encoding into bson, and mongo throws an error if you use a field name that has reserved characters in it like a dot. So we'd need to base64 encode it like we do with the version names and a couple of other fields.\nNow dots might not be standard header chars, but plenty of users use non-standard headers, so that will be a problem once it comes to integrating with the dashboard. Might as well save ourselves that headache.\nMight make in array of objects, then we can still extend the objects if we need to down the line, I.e.\ntag_headers: [\n     {name: \"foo\"}\n]\n\n. Uptime tests are not available for cloud users due to data storage constraints.. > Worth noticing that retrying request is a very tricky since a lot of requests are not safe to retry because they can modify application state, and error not always comes because the host is not available, same with timeouts (sometimes they are kind of ok, just require timeout tuning).\nThis is 100% the issue with this feature request, NginX does retries by default and it catches users by surprise when they get data created twice/updated as a race condition. It is really hard to get this right unless you configure it per-request.\nAn API client should be responsible for retry behaviour, not the gateway - it introduces unexpected behaviour which the end user, service provider and client developer may not be aware of and is inconsistent with the behaviour of a standard HTTP client.. The documentation will be released with v2.5. Late to the party here - this field is only used by the dashboard, since on the gateway only configs, api ids are arbitrary, deleting the api altogether and recreating it is just as easy as setting a bool in the object.\nWe should update the documentation . Sure - however given this is a file-based configuration doing so with source control would be trivial.\nNot saying this wouldn\u2019t be nice to have - but it\u2019s a feature request not a bug, we\u2019ll prioritise it into a release instead of a patch.. I think in order to make it usable we will need some kind of help text.\njq is a very powerful JSON transformation CLI tool, and this issue binds the core library of that tool into Tyk and makes the jq command pipeline available to the user in the body transform system.\nSo for example, in the current system, there's a bunch of stuff you can do with Go templates to transform JSON data, but with jq you can do specific JSON stuff like search through an array, find specific fields and even subfields and modify those. It's extremely powerful and extrmeely complex.\nSo from a UX perspective, I think first steps would be to make sure the user knows they can use JQ notation to do stuff, with a bunch of associated examples, and then later, what would be really cool, is a syntax checker in the UI that makes sure the commands are sane (take a look at regexr).. Relevant PR (because the link failed, again): https://github.com/TykTechnologies/tyk/pull/1180. @mvdan We are going to have to undo this - it will break backwards compatibility for all CE users upgrading that do not have this flag set, which is extremely likely since all our demo files do not include it for file-based.. Bump to v3 or to 2.6 with ample warning. >  understand why you decided doing it base64 (in order to avoid problems with mongo), but it is terrible UX for the users both community and, what most important, people use use API\nI am following the convention that has been used for large blob objects in Tyk API definitions since forever, things that are stored as b64 objects in CE and dash:\n\nVirtual path functions\nMiddleware code (it does not need to be a file)\nSchemas\nVersion names\n\nThere is precedent.\n\nwould say that valid solution to this trouble, is to re-architect our mongo API storage, and store whole definition as json string\n\nPutting JSON into a file reference makes sense to me, but translating that to a document store sounds like an anti-pattern to me. \nAnd in the dashboard, the reference is an ObjectID? So now need to keep those links in place though code? Mongo is not a relational DB, take a look at the clusterf*ck that is webhook storage to see why that might be a bad idea.\nAlso, just to clarify, instead of adding a feature that is a no brainer you want to re-architect our mongo DB storage I'll leave that never-ending task to you.\n\nAlso, I think OpenAPI (swagger), does the better job of supporting json schema, see examples here http://bigstickcarpet.com/swagger-parser/www/index.html. In addition to body validation, it also validates URL params. If we going to improve our support of OpenAPI, I think it makes sense follow similar patterns.\n\nSo we can't add a feature and improve it incrementally? Well, better throw the whole thing in the trash.\n\nTo recap:\nMove base64 logic to dashboard side, and keep everything in json\n\nI agree with the file based approach for CE, though docker users will hate having to add more files to their setups. The dashboard side of this particular approach can be your problem because I am not writing SQL-glue code again from Mongo, it's a document store.\n. @buger Over to you.. > Well, I'm not sure why this PR was closed, I definitely not meant this.\nIt was closed because it's now your problem, this was a tactical PR, it is now a dashboard, mongo and schema refactor ven though it's just a CE feature. It has gone from small, to enormous. \n\nPoints described by me here is a standard code review, and my responsibility is to ensure that everything will be done the right way. My point was to raise these important topics and discuss them.\n\nNot really, a standard code review does not suggest refactoring a whole storage engine in another project. That would be done in a major release planning phase.\n\nIt is not \"no brainer\" feature, because it touches a lot of people in our team and a lot of developers who will use it. This feature is VERY useful, and potentially can be used A LOT. So thinking about developer user experience in this particular case is a top priority for me. Moreover, it appeared without any planning and out of milestone.\n\n\"No brainer\" means we should implement it because it is obvious that it needs to be done, and that it is a powerful feature, and that we should KISS.\n\nIf we think about future of this feature in terms of UI, I would say that at the start it probably should be the raw text field, with JSON syntax highlighting, but in future, it would be nice to have visual editor to control each attribute and its type.\n\nWhy are you thinking about UI? This PR is for the core feature in the gateway. Cart before horse, again.\n. Why create a key with expire 0?. > and also I found the db tables (eg. tyk_apis) in my mongo would be gone, only some analytics table are remain.\nTyk doesn't have any logic in it to remove or delete MongoDB collections, if you are using  MongoDB via docker, have ensured that there is disk persistence? If the mongo container restarts you may lose all your data if it is misconfigured.\nIt also looks like the actual start of this trace is missing, it would give us the entry point of the failure.. As a workaround (while we fix) it is possible to increase the average page size from 10 to an arbitrary value by setting a new size in the tyk_analytics.conf called page_size. @buger Is this closed? Issue seems very old.. Looks ok to me :-) once QA KS happy let's roll with it.. > When creating a Key, the hash is returned and the user can choose to record this using their own method. The hash can then be used to query keys usage, without exposing the key itself.\nYou can enable an event hook on the gateway that can send a webhook or run a plugin whenever a key is created. This will include the raw original token in the payload, the user can then use this to store the token in a secure location if they need to. This is already possible, we may want to improve the documentation around it.. We've had a discussion internally and are going to adopt parts of the recommendation proposed by @nextmetaphor - in particular the improvements to the existing Tyk API.\nWith regards to the filtering options, these look like they will be superseded by a different feature which is currently in planning.\nTo clarify, that means the following requirement will be dealt with as part of the scope:\n\n[ ] /tyk/keys/create [POST] also returned the key hash\n[ ] /tyk/keys/{access_token} [GET] could also accept the key hash if the hashed boolean parameter is set, as is currently supported for the DELETE method. This obviously wouldn't return the key value itself, but would be used to examine what access a key has access to, rate limits, policies etc from the hash of the key\n[ ] /tyk/keys/ [GET] would return the key hash for all keys\n. Question: Why Kingpin? We use cobra in our other cli tools.. I believe you can set the api_id with a PUT. The segments aren\u2019t in the dashboard drop down, but they are available as tags - if you add the name of the segment to the tab list filter and run the query it will segment the data on the tag (the cluster segment). \n\nWe may wan to clarify that in the docs. @buger Sending SIGUSR2 should do a fork and hot-reload. @csbogdan What about APIs that make use of OpenID Connect ID tokens, or use JSON Web Tokens? Or SAML envelopes, or APIs that use legacy tokens that are injected into the gateway by the user because their upstream needs them? Or what about OAuth APIs that use an external provider such as Okta or Ping where the identity of the user may need to be interrogated post-hoc?. Added model support for the new setting to dashboard here, need assistance with FE @lghiur (https://github.com/TykTechnologies/tyk-analytics/tree/strip-auth). Yes this is against 2.3 on purpose as it means we can just release it as a patch. @letzya Your ticket is related, but not the same as this. This ticket is to inform the user that the rate limits and the quota in the UI cannot be edited because they are bein set by a policy, this means this is an aesthetic change.\nThe issue you reference is a functional one, it requires the policy to applied to the token at the time of reading so that the token is always in line with what is stated in it's linked policy. Basically we can have both, and they do not interact.\n. I propose we go with Option 3 here, for closure :-). @ilijabojanovic I just tried this on Tyk Cloud:\n\nCreate an API and enable caching\nAdd an endpoint that is cached (e.g. get) and set 200 as thew accepted cache response codes\nCreate a key to access this API with\nSend a request to the gateway, see the headers, there is no x-tyk-cached-response header\nSend a second request: get a x-tyk-cached-response header:\n\n```\ncurl -v \"https://tyk-inc-portal-test.cloud.tyk.io/cacheme/get?auth=xxxx\"\n Hostname was NOT found in DNS cache\n   Trying 34.200.195.179...\n Connected to tyk-inc-portal-test.cloud.tyk.io (34.200.195.179) port 443 (#0)\n successfully set certificate verify locations:\n   CAfile: none\n  CApath: /etc/ssl/certs\n SSLv3, TLS handshake, Client hello (1):\n SSLv3, TLS handshake, Server hello (2):\n SSLv3, TLS handshake, CERT (11):\n SSLv3, TLS handshake, Server key exchange (12):\n SSLv3, TLS handshake, Server finished (14):\n SSLv3, TLS handshake, Client key exchange (16):\n SSLv3, TLS change cipher, Client hello (1):\n SSLv3, TLS handshake, Finished (20):\n SSLv3, TLS change cipher, Client hello (1):\n SSLv3, TLS handshake, Finished (20):\n SSL connection using ECDHE-RSA-AES128-GCM-SHA256\n Server certificate:\n        subject: CN=.cloud.tyk.io\n        start date: 2017-02-06 00:00:00 GMT\n        expire date: 2018-03-06 12:00:00 GMT\n        subjectAltName: tyk-inc-portal-test.cloud.tyk.io matched\n        issuer: C=US; O=Amazon; OU=Server CA 1B; CN=Amazon\n        SSL certificate verify ok.\n\nGET /cacheme/get?auth=xxxxHTTP/1.1\nUser-Agent: curl/7.35.0\nHost: tyk-inc-portal-test.cloud.tyk.io\nAccept: /\n< HTTP/1.1 200 OK\n< Access-Control-Allow-Credentials: true\n< Access-Control-Allow-Origin: \n< Content-Type: application/json\n< Date: Wed, 29 Nov 2017 21:50:40 GMT\n Server meinheld/0.6.1 is not blacklisted\n< Server: meinheld/0.6.1\n< Via: 1.1 vegur\n< X-Powered-By: Flask\n< X-Processed-Time: 0.001305103302\n< X-Ratelimit-Limit: -1\n< X-Ratelimit-Remaining: -1\n< X-Ratelimit-Reset: 1511994854\n< X-Tyk-Cached-Response: 1\n< Content-Length: 495\n< Connection: keep-alive\n<\n{\n  \"args\": {\n    \"auth\": \"xxxx\"\n  },\n  \"headers\": {\n    \"Accept\": \"/\",\n    \"Accept-Encoding\": \"gzip\",\n    \"Connection\": \"close\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"curl/7.35.0\",\n    \"X-Scheme\": \"https\",\n    \"X-Test\": \"hello\"\n  },\n  \"origin\": \"203.211.126.161, 203.211.126.161, 172.30.2.234, 172.30.0.152, 54.172.196.251\",\n  \"url\": \"http://httpbin.org/get?auth=55d5927329415b000100003bf4971f18f1a74527987134859e261613\"\n}\n* Connection #0 to host tyk-inc-portal-test.cloud.tyk.io left intact\n```\n\nWhen I tested with the \"Cache all safe requests\" it did not work, but a specific endpoint did. Also, the gateway should have 500 errored if it crashed, and cloud isn't crashing, it is servicing the requests.\nSo it looks like it is working.\nDo you have detailed recording enabled? It looks like that is causing the crash?\nHowever, \"Cache all safe requests\" does not work.\n. We need to make sure we document this extremely carefully. . I would suggest we go live with what we do have support for so as not to delay the feature and then update the library for a later release in a different issue, since it is also used elsewhere it will have a wider testing surface so will need more time to integrate.. I just tested the change on a test box and with a number of 10 I now get:\nroot@load-hybrid-gw:/opt/tyk-gateway# netstat -anp | grep :9090 | grep ESTABLISHED | wc -l\n10. I would suggest starting simple and just using a list. Feels like pre-optimising for a non-problem using the OpenSSL format. \nWe would basically be implementing a list as a string with directives, which then needs to be parsed and interpreted correctly.\nIf we ever get someone saying \u201cbut why can\u2019t I just cut and paste my ssl directive from my nginx config\u201d then we can look at adding another way of setting these rules, but it just seems overly complicated to me when a list would be just fine? Or am I missing something here?. That looks like it causes the request to fail if the policy doesn\u2019t match what was created in first use, but if the JWT is valid then the policy should just be switched because the signature is valid?. The JWT flow with tyk as it is now will create an internal token based of failure the policy field the first time the JWT is seen and is validated.\nAfter that the cached version is used so long as the JWT is valid.\nBut if the JWT is valid and the policy ID changes to a different valid ID, then the gateway should respect the change, since the credentials issue is externally trusted by the JWT issuer. So basically we need to recreate the internal token (or update the policy of and make sure the creds are applied) when the policy ID changes to a different valid policy ID (and the JWT itself is valid).. > The JWT flow with tyk as it is now will create an internal token based of failure the policy field the first time the JWT is seen and is validated.\nTypo: \nThe JWT flow with tyk as it is now will create an internal token based on the the policy field the first time the JWT is seen and is validated.. > Document that setting id_extractor_deadline is required, should specify ID extractor cache TTL, and should be set inside Auth plugin\nYes this is a good move\n\nSet session.LastUpdated field when creating an id extractor cached session\n\nOr document that the auth MW should do this when it passes the session object back.. Can the value still be set in the MW though? The field is to prevent unnecessary writes to redis for quota updates iirc?. Did you take a look at my branch @dencoded? . @bitsofinfo on that last comment - why do you need to delete the definition - if you use the Tyk dashboard apis to GET and then PUT the JSON you should be able to hot-change the definition.\nThe export/import buttons probably aren\u2019t the best thing to use here as they are more for backup and initial setup.. Note this also removes the request encoding in the event handler for simplicity sake, I feel it's a fair trade-off for async.. LGTM. It means that a PR has been submitted, tested and merged and is ready to go into the next release.. I think your second solution (certain conditions create an options request) is the most spec compliant.\nIMO, the gateway should act just like any other user agent, that basically means that when options pass through is enabled, it should be constructing pre-flights on behalf of the inbound request and sending those on.\nWe can either make these conditional (I.e. on errors only), or make them constant, so they run on every request type.\nEither way the pre-flight should go from gateway to upstream based on the real request made by the downstream user-agent. This basically means implementing the pre-flight spec into an http client.\nWhen to trigger this client can then be a secondary option.. Released in 2.6. The notification is used here: https://github.com/TykTechnologies/tyk/blob/master/redis_signals.go#L108\nWhen gateways are load balanced the cluster should be sharing the LE SSL cert to prevent spamming LE, IIRC it stashed the cert in redis and tells the cluster to use that.. > Received DRL data: {82d92f09a11e\nThis is not a redis connection issue, what's happening is that for some reason the DRL is not adding the server (the tyk host) to it's server index. We can narrow it down by printing out the error here:\n```\n        if DRLManager.Ready {\n                 // Change to use the error\n        if err := DRLManager.AddOrUpdateServer(serverData); err != nil {\n                    log.Error(err)\n                    return\n                }\n    log.Debug(DRLManager.Report())\n} else {\n    log.Warning(\"DRL not ready, skipping this notification\")\n}\n\n```\nI have a hunch that it could be the tag you are using, what happens when you take the tag off the gateways?\n. You may need to put the method transform to trigger on the rewritten URL instead of the original one.. Will this still work without node registration (CE cluster)?. This mightbhave to do with our hashing library - we\u2019ll need to look at replacing that sharpish @buger. Dave can you provide your OrgID?. NOTE: We have not managed to replicate this in our cloud environment\nAgreed that this is a serious issue, however to scope it -  I believe this is because this is in a sparse keyspace environment (there are few tokens issued and few APIs on the system).\nThe simplest way to mitigate it at the moment is to disable key hashing in the tyk.conf, this should completely resolve the problem (the underlying cause is in our hashing lib).\nWe are actively working to resolve this issue.. I agree - this solution isn't robust enough - I think we may need something much more structured. I'm going to close this PR as I think we can do it better. \nI have opened a new PR that addresses the core issue of the three-char access in certain hash conditions, that should at least speed up patch release, completely changing hash mechanism may be something in 2.8.. Keyclok OAuth 2.0 flow should work if you enable OpenID Connect and supply an ID token to Tyk (Tyk is OIDC compatible and OIDC sits on top of OAuth 2.0)\nIt would be better to post this to the community forum (community.tyk.io) as GH is only used by the team for big and feature tracking.. Forgot to add ticket number in message, fixes #1725. Awesome! Is there a way we can check the append-three character issue has been solved?. I only just got round to reading this today, this seems pretty reasonable, we don\u2019t really do quotas at a rate of 1s, so I wouldn\u2019t be too worried about latency vs. Timeout in the RPC quota scenario. \nSounds sensible to me, we basically aggregate locally, then merge and flush to server periodically.\nAn enhancement I can think of is that the solution here is basically a poor-mans CRDT, but I feel that having a single central counter might be prone to race conditions, we might actually be able to simplify this by actually using a regular CRDT structure:\n\nEach gateway has a unique ID\nFor each token, we create a redis Hash, with a field for the gateway ID, e.g. with 3 gateways and one token with quota we have a redis key that has three fields\nAs each gateway receives traffic, it increments an in-memory counter\nAfter the aggregation period, it increments the redis key.gatewayID hash field by its in-mem total\nThe gateway then uses HGETALL to fetch the whole hashed set for the key\nIf there is a \u201cblockUntil\u201d field in the set, stop and block the request\nif there\u2019s no block sentinel, the gateway adds all the field totals together (the merged CRDT value for the cluster)\nIf the total is larger than the quota, add a \u201cblockUntil\u201d field to the quota key that has a value of seconds to when the quota renews (it should then update the EXPIRE)\n\nThen when the key expires, a new CRDT gets built by the cluster.\n(As a sideline benefit, this will also improve the moving quota window issue as the EXPIRE can be set exactly to a calendar date).\nAs for implementation I don\u2019t think it\u2019s much different to what Den has suggested above, just making the structure cleaner (as the CRDT can scale with a gateway cluster and will retain information even if a gateway shuts down after the scaling event).\nFor RPC scenarios we may need a secondary  merge that gets the CRDT values from MDCB and merges it with what\u2019s local, or just pass it through - it depends on how often the gateway flushed and the load it puts on RPC (you need to merge for each token, might want that call to MDCB to be a batches operation). Im not sure I fully understand this bit :\n\nif current_total < key quota then increment current_total by 1 and increment local_counter by 1, respond with 200\n\nWhy would we increment current_total? . Just looking at the chunked limiter PR, this is a different approach to the one set out above, or am I misunderstanding?. Suggest to put in 2.8 if we are code-freezing this week.. To confirm, this is per-token, per-api?. > I should be able to protect an API, and also specify a whitelist of paths / enable within middleware specific paths which may be accessed keyless.\nThat's what the ignore middleware is for, what else is required?\n. Right, that makes more sense, so we need a no-auth endpoint check in the auth MW (all auth MW). I assume you mean prepend / prefix the token with the org ID, not actually adding as a suffix?\nIn non-hashed node we enumerate keys by just scanning the api-key-{orgid}* namespace in redis with a SCAN, this guarantees we get only owned tokens back and is quite efficient.\nThat\u2019s all fine, because a legacy key uses the orgid as a prefix anyway so it\u2019s all built in.\nBut because we hash the whole key, the org data is lost and so we can\u2019t enumerate anymore as we\u2019ll get back an empty list.\nOur storage driver already has a native capability to namespace all keys (for example the \u201capi-key\u201d is automatically added as a prefix on write and removed on read when working with the key store)\nWe could do something similar with namespacing the organisation, just add it on write and remove it on read so it\u2019s transparent.\nFor backwards compatibility, if this feature is enabled, we just do a double read like you say.. There is a hard timeout option already available that fires an event. Dropping this in favour of #1966 . need to add an import for \"bytes\" at the top, build is failing :-)\n. This method actually enforces detailed analytics recording, not caching, so we need to call it...\n. There isn't a test to cover this functionality, it looks ok, but we can't guarantee it works (Use case is: a path that is being rewritten has a hostname in it, and so needs re-parsing so the proxy target changes). Wouldn;t it also be possible for the API Spec to be nil too?. Oh!~ Hurr durr..... Happy to have an internal commandment for this, even if it's just a prefix so that people reading the code can see it's a constant.. It's for readability, I find it useful to know that \"Someone else has handled this for me\". The go http lib provides status code constants, which is great, maybe it should be a package level thing, they are all prefixed by 'status'.\n. I think this is perfectly OK, so I will merge this, but there's a potential case where a reload is triggered by a policy update signal which we might need to keep an eye on in regression testing with the dashboard.. We need the IP in there, this might be a dead var, but we can;t losr it from the log message - some users require IP traces for security auditing.. Maybe make it remoteAddr? Then it may or may not be an empty string. . Yes please. This will be vendored when that library is stable, they are currently codependent, one informs the utility of the other somewhat, for now I didn't want to introduce any vendoring until I'm happy with the lib across Gateway, Dashboard and Pump. Never seen this syntax, so not sure what you mean.. Not sure what you mean - feel free to change.. I prefer to be explicit, makes it easier to read.. IIRC it makes sure that the flusher and the CDRT notifier has time to initialise and do it's thing. There are two systems working in tandem here, one is a batch writer and the other is a distributed in-memory merge, the two are eventually consistent.\nThis function is only called at startup, so this pause is ok.. Done. Going to leave this, it's tempting to merge them, but they deal with different configuration cases.. Fixed. Done. Added a log. > I realise that it's not hugely important as far as start-up time goes, but this can be racy and bite us in the future really easily. Is there no way to wait for exactly what we're after, not just an arbitrary amount of time?\nHave made this directly linked to the broadcast interval, so the node waits for at least 1 CRDT to arrive to fill it's cache.. It's actually a deserialisation issue - this loop handles both objects from the local node and those that come in from the broker. For some reason it deserialises to a float when it should be an int.. Nothing probably - copypasta, will fix.. It gets trickier, this deserialisation is handled at the framework level in tyk-cluster-framework, since the deserialisation is handled there, I'm not sure I want to force using numbers when the same framework sends floats for things like DRL notifications. Would need to expose the UseNumber() somehow on the DecodeMessage, but that's pretty specific.\nCould eventually refactor to offer a raw message so that decode can be exported, but defeats purpose of a managed payload interface and structure.. Have added a defer(). 666 is a magic return code that makes the gateway halt MW processing and respond. That's a fantastic idea, let's do that! So much clearer. Not sure my last comment saved - if building the pb.go files manually you need to do this otherwise you can't actually generate the templates. It doesn't affect these instructions, this command generates the plugins needed by protoc in the previous step to do the generating, so the stuff in our vendor dir won;t be part of the go bin path. \nThey would need to change their GOPATH after when they actually build the plugin.\n. I really don't want to mess with these because it's part of the plugin fix for type passing - it's literally a lift and shift from the github.com/akutz/gpds/lib code. . See the last comment, this mechanism solves a whole bunch of type conversion headaches. I'm not confident enough to redesign it, so if you want to take a shot, be my guest.. Eventually, this is alpha, so keeping a readme here is a good idea until we formalize. I do not know... I haven't found a better way to dump the request so we can use it after.. Tyk has response processors - that process the response on the way back. We could completely bypass those but then the cache will also be unavailable.\nWhat we basically need is a copy of the response object to make that work.\nI don't know how else to proceed, I don't know enough about RoundTrip. . I can't see another way of grabbing the response, unless we can write a matching interface that will partially buffer like RoundTrip does... but that's beyond my ken.. Well, you donwant to ensure that a user compiling the source with 1.8 gets a meaningful error instead of a panic, so we do actually want to test that the error is indeed there ;-). See the same code in error_handler.go?. I'll force lowercase, I don't want to leave it up to the user and converting to CanonicalHeaderKey seems unnecessary.. Ah, I thought the init wasn't getting called, so I was calling them manually.. Should we just get rid of this line altogether?. Is it always going to be \"middleware\"? (Just nitpicking). Sounds ok to me. This isn't my code - i just duplicated the previous function (see the same file above), all I did was remove the request object requirements, can't speak to the actual contents. Because the request object was causing a read panic later in the stack - see the convo in slack. There\u2019s is a list in the api definition for tracked URL patterns, if this list is longer than 0 it should be enabled otherwise it shouldn\u2019t . ",
    "rmg": "From a completely new to Go perspective (these commits being my first), it looks like vendoring these deps with something like godep might be the way to go.\n. ",
    "alexwhitman": "Thanks, I've implemented disabling of the cache purge in #9.\n. Thanks, that makes more sense, I should have looked at the change log.\nHow about adding routes of /tyk/apis/ and /tyk/apis/:id where each api object would have a keys attribute along with other information about the API?  It would also have the benefit of not having to look in apps/ file to see what APIs are loaded.\n. Would you do this at the API level or the application level?  It may be simpler to add another attribute to the AnalyticsConfig in the main config: https://github.com/lonelycode/tyk/blob/master/config.go#L24\n. Resolved by #19 and #20\n. I've refactored the code so there's no duplication and the json now uses an array of strings.\n. That's done it, thanks.\n. Also, might be worth adding rate limit data to response headers so extra requests aren't required to determine the remaining limits.\n. Ah, of course it is.  I forgot that it would get transposed to AuthHeaderName.\n. ",
    "shopline": "I agree that reinventing the wheel is not a good approach, but if it is possible to utilize for example varnish or maybe nginx for the caching it would be nice with some documentation on how to set that up.\nWe also need to utilize SSL for all API calls. I know that varnish doesn't support SSL, but I am not sure if that only applies when it is used at the frontend and not the backend?\nA typical scenario (for us) would be something like:\nTyk > Cache > Resource API server > Database\nI have not speed tested Tyk yet but I trust you have and that Tyks speed is not an issue. The cache would not be for speeding up Tyk but the main issue for us would be to offload the resource servers with duplicate API calls.\n. ",
    "heynemann": "After talking to some golang gurus, I don't think there's an easy way of doing this. The only idiomatic way of doing this would be recompiling tyk every time we need a new \"middleware\".\nNot sure if that's a limitation you are willing to have, but if it is I still think it would be nice to have a middleware \"framework\" built-in that allows me to include my middleware and recompile NGinx-style.\nWhat do you think?\n. I'm pretty sure that is good enough to get started with. \nWould an extensible declarative approach be better? Yes. Can we do it? I don't think so, hehehe.\nThanks a lot for your great work. As soon as we start using tyk I'll let you know of what we find out. We'll do some extensive performance testing. I hope we can send some of that data your way so you can publish its results.\n. ",
    "PatrickWolleb": "Great will try to look into it this weekend. Just ran into an issue that paths.ignored is still checked for authentication. Below my json. The target API  has an endpoint POST /users/create and listen path is set to \"/\". TYK should ignore \"/users/create\" what I am doing wrong? Do I need to create a version or white list? \njson\n{\n  \"proxy\": {\n    \"target_url\": \"TARGET\",\n    \"listen_path\": \"/\"\n  },\n  \"version_data\": {\n    \"versions\": {\n      \"v1\": {\n        \"paths\": {\n          \"black_list\": [],\n          \"white_list\": [],\n          \"ignored\": [\n            \"/users/create\",\n            \"/users/auth\"\n          ]\n        },\n        \"expires\": \"3000-01-02 15:04\",\n        \"name\": \"Default\"\n      }\n    },\n    \"not_versioned\": true\n  },\n  \"auth\": {\n    \"auth_header_name\": \"Authorization\"\n  },\n  \"definition\": {\n    \"key\": \"version\",\n    \"location\": \"header\"\n  },\n  \"org_id\": \"default\",\n  \"api_id\": \"1\",\n  \"name\": \"Tyk Test API\"\n}\n. Awesome! \nI am working off the binary BTW.\n. ",
    "patrickmslatteryvt": "OK, that's what I suspected.\nThe simplest scenario that I can see is:\nClient -> Nginx_gateway(443) -> Tyk(8080) -> Nginx_upstream(8443) -> Endpoints(01-06)\nWhere Nginx_gateway(443), Tyk(8080) and Nginx_upstream(8443) are all running on a single VM and the endpoints are running in their six separate VMs.\nIn our case the application endpoints are IIS on Windows so it's not possible to consolidate to a single host.\n. ",
    "camann9": "I also like the idea of providing a complete endpoint for APIs. I think Tyk is awesome because it takes so much hassle out of API management and because it does exactly the stuff one would expect. But it has some inconsistencies in the API, one of which is the /apis endpoint.\n. Ok, I understand. But now I can create APIs via the dashboard and I can create keys (tokens) via the Gateway. Both end up in the same Redis (if Redis is used). The architectural problem I see is that the Dashboard and the Gateway communicate via Redis and MongoDB and not via the Tyk API.\nAs long as communication is done in this way there is never a real incentive to add new functionality to the API since it is always possible to just communicate between dashboard and gateway via the database (as it happened with the /apis endpoint).\nMaybe it would be an idea to have a master that manages (/owns) the configuration and defines the endpoints (plus purges statistics). Then the nodes would just need to have access to the Redis and the MongoDB dependency would be gone. The master would offer the REST interface and the Dashboard would communicate with the master via the REST interface. I drew a little ugly diagram to make my idea clearer: http://i.imgur.com/pu3nOaB.png\nAs I said before, I really like the idea of Tyk and its simplicity. But especially because of this I don't like the idea of making the Dashboard the master. It just doesn't sound right from a design point of view to add API components to the GUI.\n. Thanks again, the support for Tyk is truly awesome :-) . I think the diagram is very enlightening so maybe you want to put it into the official documentation.\nSo to summarize, the key data and the request journal are stored in Redis and everyting else is stored in Mongo.\nIn the light of my newly acquired knowlegde I understand what you were talking about in #23 . What about actually putting the metadata (except for aggregated analytics) into Redis? Then Redis would be the master that stores API definitions and organizations. If Redis is updated by one node, the nodes that are attached to it reload (let's say they poll every minute or when the manual reload is triggered). Then they don't need to know of each other. They just synchronize via Redis and it doesn't matter how many there are. We also don't get a new SPOF since the nodes are dependent on an available Redis instance anyways to access the sessions.\n. I still thing that the distributed master election is a bit overengineered. AFAIK Redis satisfies all the requirements we have.\n- Allow only one node to purge: Redis has a transaction support, see http://redis.io/topics/transactions . So we can have a String field that stores the ID of the node that is currently responsible for purging. If a node wants to know whether it is supposed to purge it checks in a transaction if the key is present and sets it to its own ID if it's not present. The field can automatically expire after a certain time. If the node doesn't renew the lease because it disappeared or got stuck then another node can start purging. This is basically a lock implementation. If CSV metrics are used one node must be designated manually to purge since it doesn't make sense to write CSV files on every node.\n- Hot reloads can be managed using an integer field (the revision number) that is incremented every time a node writes a new configuration to Redis. Nodes look at the revision numkber regularly and if their in-memory revision is lower that the revision in Redis they reload. One could also implement a concurrent modification detection that checks if two nodes want to update the config at the same time. In the \"disk configuration\" mode hot reload is disabled or nodes have a file watcher that notifies them of changes.\n- The dashboard can talk to any node to store/read API definitions and keys. The node takes care of incrementing the version flag and storing new definitions. The dashboard doesn't need to speak to Redis directly, just through a node.\nYou could still define interfaces that encapsule the storage functionality. One interface called ApiStorage with a Redis and a file backend and one interface called MetricsStorage with a CSV and a MongoDB backend.\nWhat do you think?\n. Thanks for the long reply :-)\nI still have some problems with the idea of a master election. For one, I could not just go to any node to add APIs, I would have to go to one node that tells me who is the master. Then I can query the master. This complicates things for clients. The problem is also that the Tyk master may not be reachable from the outside if there is a firewall/LB between the client and the Tyk master. The LB only allows us to send our query to an arbitrary node (which might not be the master), not to a specific one. I would be more happy if the Tyk node would just forward the query to the master (if you really want to go with the master/slave method). \nWith the solution I proposed you wouldn't have any downtime or addressing problems because every node has the same rights to write to Redis. The question is really whether API definitions are more special than keys and why we should treat them differently. Why should writing API defs be restricted to one node but not writing keys?\nAbout your annotations to my proposal:\n- Also, I really still prefer the idea of having a single node do the write, there's a lot of underlying complexity in the statement \"One could also implement a concurrent modification detection that checks if two nodes want to update the config at the same time\", would b keen to avoid this.\n  - Even if there is only one master, concurrent modification can still happen in a broader sense. Imagine two users with the dashboard load the same API definition, then user 1 saves it and afterwards user 2. User 2 would not get any notification saying that the content he wrote overwrote changes from user 1 and not just the stuff he saw when he opened the API definition (which he actually wanted to overwrite). Assume e.g. that user 1 adds a version and user 2 changes the listen path. There needs to be a way to deal with concurrent updates in the long run, no matter whether only the master can write the config or any node can do this.\n  - If we don't want to deal with that problem then the node that gets the API create call just dumps the new definition into Redis and notifies other nodes (either via pub/sub or by incrementing the version). If we want to enforce manual reload then we disable listening to the notification. Exactly the same thing would also have to be done by the master so I think having the master doesn't add any value. It doesn't really prevent concurrent modification (without additional measures).\n- What do you mean with I would posit that It would be better to \"publish\" configurations to Redis from Mongo? You want to keep the API configuration in Mongo and in Redis but with Redis as the master?\nAs you see, I'm not a fan of the whole \"master\" thing. To me it doesn't provide any benefits compared to synchronizing via Redis. Every Tyk node has to have the code to write to Redis since any one might become master. And careful synchronization is necessary anyways. So why make it more complicated that necessary. The only thing a dynamically elected master would bring is better ways of synchronizing but I think that's not worth all the trouble since it can also be achieved differently (as described).\n. The thing with making the dashboard the master is that people would have to license the dashboard to be able to administer Tyk. I like the idea of making the dashboard for-pay and the node for-free. Every sane person in an enterprise environment would of course license the dashboard instead of building it himself (at least with the current pricing). But to couple the dashboard GUI to the administration API and license them together is not an idea I like. Why not leave the administration API open-source and free and just license the actual dashboard? Of course this is a business decision rather than a technological decision :-)\n. Ok, thanks. Sorry to bother you.\n. Thanks :-) . It's good that you reference the issue from the commit.\n- Actually I think the commit doesn't solve the problem completely since it still writes back the session data to the store. So the concurrency with the dashboard issue is still unsolved.\n- Writing back is probably necessary since rate limiting is still handled the old way in the session storage. Should also be changed to the new method. Then the write back could be removed, improving performance because we save one database roundtrip.\n- The transaction you added in \"RedisStoreManager.decrement\" doesn't have any effect since the DECR command is atomic anyways. I think you can remove the transaction.\n- session_manager:125 The quota is reset to the maximum quota but it should be reset to max-1 since one call is already used.\n. Awesome. Just a few things:\n- The method session_manager.IsQuotaExceeded should be unused now, could be deleted\n- In the current version of the quota algorithm the quota is handled like the rate limit. This means that QuotaRenews is ignored. The field could be removed. This also has the consequence, that a user could not set it manually any more (e.g. if he wants the renew to always occur at midnight).\n- RedisStorageManager.Decrement could be removed now, no?\n- RedisStorageManager.IncrememntWithExpire calls RedisStorageManager.Decrement if it has to reconnect (line 267). I assume this is a typo.\n- Can't you just remove the reconnect attempts in RedisStorageManager? Does r.pool.Get() not deliver a connection reliably?\n. On 2.: QuotaRenews is not set any more in IsRedisQuotaExceeded. Thus it is not updated any more anywhere (since IsQuotaExceeded is not used any more). Or am I overlooking anything?\n. Yeah, that solves it :-)\n. ",
    "coveralls": "\nCoverage remained the same when pulling 46ff23f0f41a5e46d85b155e91cd2a6b9e84efd4 on jimmidyson:dockerfile into 59000682d7164310da8ed9c351ba631efa9deb94 on lonelycode:master.\n. \nCoverage increased (+0.17%) when pulling 6e8c29519949fe6cf045a3e397511f5fa82296f3 on jimmidyson:api-definitions-rest-handler into 59000682d7164310da8ed9c351ba631efa9deb94 on lonelycode:master.\n. ",
    "jimmidyson": "Awesome! Cool thing about go is that you don't really need any extra\nlibraries, running on busybox is fine. So it needs to have a compiled\nbinary to be added to the image. If you set up a trusted build on docker\nhub (let me know if you need any help with that) then it can use the binary\n& keep a tiny image. Other option is to build the binary as part of the\ndocker image build but that requires all the golang build tools which in\nturn require loads of other packages & you end up with a huge image instead\nof a lovely tiny image.\nOn 16:49, Fri, 28 Nov 2014 Martin Buhr notifications@github.com wrote:\n\nMerged #24 https://github.com/lonelycode/tyk/pull/24.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lonelycode/tyk/pull/24#event-200001481.\n. Docker hub allows you to create automated builds that will rebuild & push (publish) the image when you make any commits to the source repo (this repo).\n\nPretty easy to set up - just sign up at https://hub.docker.com/ & \"Add Repository\" -> \"Automated Build\". Fill in the details & all done. Good luck! \n. ",
    "sonicaghi": "we're already playing with it ;)\n. ",
    "thibaultcha": "Alright, got it working, thanks! Good stuff\n. Oh wait, maybe I should have left that open for the redis issue?\n. ",
    "rcsousa": "Thanks a lot Martin, Mongo DB version was the problem . standard trusty version is 2.4. After I upgraded to 2.6 it worked like a charm.\n. ",
    "toringe": "Hi. I'm having a similar issue. Using Tyk 1.5.1, Tyk Analytics 0.9.3 and Mongo 3.0.1. Analytics data are stored in mongo, but I get only an empty graph on the dashboard. And it's still empty even after 24 hours.\n```\nDEBU[165806] Setting key: analytics-201531914-8888f7b6-82e9-46e6-5146-11229d015b2f \n\ndb.tyk_analytic.count()\n154\n```\n\nAny clues?\n. My configuration already uses tyk_ analytic for collection name.\ntyk.conf:\n\"analytics_config\": {\n    \"type\": \"mongo\",\n    \"csv_dir\": \"/tmp\",\n    \"mongo_url\": \"mongodb://localhost/tyk_analytics\",\n    \"mongo_db_name\": \"tyk_analytics\",\n    \"mongo_collection\": \"tyk_analytic\",\n    \"purge_delay\": 10,\n    \"ignored_ips\": []\n  },\nAnd in mongo:\n```\n\nshow dbs\nlocal          0.078GB\ntyk_analytics  0.078GB\nshow collections\nsystem.indexes\ntyk_analytic\ntyk_analytics_users\ntyk_apis\ntyk_organisations\n```\n\nBut I too noticed the analytics in the debug output. So this name is the collection not the db name?\n. Ah, now it works! Thank you!\n. I have restarted the tyk-analytics process, but it still uses the indexPage template defined in index.html.\n. Yes, that was it! Added jquery to portal-assets/js and updated scripts.html. Works just fine. Thanks!\n. Found it! I had set timeout 10 in the redis configuration, whilst my previous setups had disabled the timeout.\n. No, it was just something that hit me. But on further reflection, the tight coupling between policies and specific access rights wouldn't make sense or at least make things more complex if policies were to inherit. So, never mind...\n. I'm closing this issue\n. ",
    "mingfang": "what exactly is the proper configuration?\nThe documentation says analytics_config.mongo_db_name is \"not used\".\nPerhaps the default should be filled in instead of blanks.\n. +1\n. Thank you very much!\n. ",
    "Romain1204": "Hello,\nI started redis/mongo/gateway/dashboard on my server. I don't have any error in my log files. I configure one API using the dashboard and when I run curl commands on my gateway, the target url responds OK. But on my dashboard, I can't see any data (graph is replaced by a \"No data to display\" message). \nMy mongo config is the following one:\n\"analytics_config\": {\n    \"type\": \"mongo\",\n    \"pool_size\": 100,\n    \"csv_dir\": \"/tmp\",\n    \"mongo_url\": \"mongodb://mongo:27017/tyk_analytics\",\n    \"mongo_db_name\": \"tyk_analytics\",\n    \"mongo_collection\": \"tyk_analytics\",\n    \"purge_delay\": 100,\n    \"ignored_ips\": [],\n    \"enable_detailed_recording\": true,\n    \"enable_geo_ip\": false,\n    \"geo_ip_db_path\": \"\",\n    \"normalise_urls\": {\n          \"enabled\": true,\n          \"normalise_uuids\": true,\n          \"normalise_numbers\": true,\n          \"custom_patterns\": []\n      }\n  }\nBut when I inspect the content of my tyk_analytics db :\n`> show dbs\nadmin          0.000GB\nlocal          0.000GB\ntyk_analytics  0.000GB\n\nuse tyk_analytics\nswitched to db tyk_analytics\nshow collections\ntyk_apis\ntyk_organisations\ntyk_analytics_users\n`\n\nI have no tyk_analytics collection. I think that my gateway is not able to write in the mongo db or write data into another db. it's weird because I have any error messages in logs. Please have you some idea about this problem ?. hmmm. No. I don't install the pump component. I try to run the following tutorial : https://tyk.io/docs/get-started/with-tyk-on-premise/installation/docker/docker-quickstart/\nAnd as I understand, this page does not deal with the pump. But OK, I will install it. Thanks for this quick reply.. OK. It's better. I launch a tyk-pump container. Now in my mongo db, I have a tyk_analytics collection. And when I run queries to my gateway, lines are added in the tyk_analytics collection. But I still not have result in dashboard.. ",
    "ConsM": "Hi @Romain1204 , is your Pump running ? If you need any further assistance please open a new topic on https://community.tyk.io/ and include your tyk.conf, analytics.conf and pump.conf.  Implement token recycling functionality. @ryanwalls you can subscribe on the Releases section and get notified for new posts.. @ilijabojanovic if you check the page source of the url you provided you will see that it still uses the old code inside the getUrl function\nHere https://github.com/TykTechnologies/tyk-analytics/blob/master/portal/templates/swagger.html#L58 is the updated function that it should work. Thanks for your suggestion. \nThis is more like an enhancement rather than a bug and it's already in our Dashboard backlog, it will appear in a feature release.. Thanks for your suggestion!\nThis feature has been in our backlog and it will appear in the 1.4 release.. Thanks for reporting it. This bug fix will be part of the next release. Thanks for reporting it. We have raised an issue and will be improved in the next release.. Yes this is fixed in 2.4 and will display a more verbose error message. @buger sure. Hi Tim, thanks for your suggestion.\nThere's already a fix for this and will be included in the next (2.4) release.. @buger sure\n@nickReyn any suggestions from your perspective ?. @gfouquet confirmed, fix will be part of the next major release (v1.5). How have you installed Tyk ? I assume this is On Premise ?. Ok, this is not a bug though. \nThe right place to get help for this would be the community forum, I will close this issue so please open a new topic there and we'll be happy to help you debug your issue.\nIn the meanwhile the credentials you should use to login to your Dashboard are the ones that are generated by the setup script in step 4.. @LinuxUser3 this fix will be part of 2.5 release. ",
    "buger": "If you are using https://github.com/TykTechnologies/tyk_quickstart and docker-compose, it should use and start pump for you, when you run docker-compose up. @plazmist have you tested our latest versions, we have a doc on various init systems and log paths now https://tyk.io/docs/get-started/with-tyk-on-premise/?\nHope it helps.\n. We are investigating your issue. In meantime can you share your API definition?. And your policy is named \"default\" and it has access to this API?\nAsking because there can be some confusion here. When you configure OpenID you need to specify policy when creating the API because keys are created dynamically, and this policy will be applied to all the OID keys. Problem is that you can't create this policy before unless you have API... :)\nSo when you define OpenID API you first create it without policy, then you create a policy with this API, and after you can modify API to include policy ID. Well, at least that how it works when you use Dashboard. \nI'm right that you are using Tyk without Dashboard?. So, In your policy json access rights you have, \"41433797848f41a558c1573d3e55a410\" which should be your API id, and inside this object you have \"api_id\": \"1\",. But this ID's should actually match. \nNote that dashboard was built for managing distributed configurations, so if you start new gateway process it automatically sync all your definitions. \nSo it is unlikely that you can distribute your API definitions and policies via files using ansible and at the same time use dashboard. You have to pick one way. \nAlso note that lot of our users who use dashboard, use only its API, and you can easily script all the actions using Dashboard API. And for example using Tyk Pump you can even send traffic to elastic search instead of mongo/dashboard. . Yeah, Tyk define 2 special meta variables which can be included into headers dynamically: $tyk_meta.TykJWTSessionID and $tyk_meta.ClientID. To make it works, just inject new header with one of the values above.. I think what you may need is here https://tyk.io/docs/transform-traffic/request-headers/ \"Injecting Context Data into Headers\" section. Take a look at $jwt_claims_CLAIMNAME, where you should replace CLAIMNAME with actual variable you want. I know that docs says (not OIDC Middleware), do not believe it \ud83d\ude48 , it should work for OpenID.\nWe going to fix docs and improve OpenID docs.\nThank you!. \ud83d\ude0e . I believe it should be $tyk_meta.jwt_claims_name. Also, ensure that your API spec has enable_context_vars set to true. . Oh, I made a typo and completely confused this issue, you need to use $tyk_context not $tyk_meta variable. . @minicats seems like it is was fixed in our latest stable version. If you try 2.3.1 and have the same bug feel free to re-open this issue. Also if you can give us full API spec (you can export it from Dashboard UI if you use on-premise version), or from /apis folder in Tyk gateway if you use it without a dashboard.\nI'm closing it, for now, thanks everyone!. @JayCeeJr in latest release this is how it works. Users can change their own password. Admins by default now can't reset passwords of users unless they have a special permission, which can be set using Admin API like this curl -X PUT -H \"admin-auth: <your secret>\" http://<dashboard>/admin/users/:userId/actions/allow_reset_passwords. Based on log messages I assume Tyk use kind of log package with different verbose levels, I'm sure there is configuration option which can control verbosity level. . \ud83d\udc4d . > print the entire log on any failure.\nworks for me. Well it depends on the test, sometimes error is actually expected test outcome. Need to check every test.. \ud83d\udc4d . This is what the last argument stands for:\n\nBy default, docopt calls os.Exit(0) if it handled a built-in option such as\n-h or --version. If the user errored with a wrong command or options,\ndocopt exits with a return code of 1. To stop docopt from calling os.Exit()\nand to handle your own return codes, pass an optional last parameter of false\nfor exit.\n\nhttps://github.com/TykTechnologies/tyk/blob/60003580cd3e50c4809ddae9ec0f06898da2a1db/vendor/github.com/docopt/docopt.go/docopt.go#L36. So basically right now with last false option, it expected us to manually call os.Exit in case of -h flag. By removing this option, we allow docparse to exit the program automatically. \nIf my assumption is right, then \ud83d\udc4d . Just to clarify, you are talking about old branches like 1.7.2 and etc, right? \nAre tags going to work as expected with patch release branches like 2.3.2 which have own commit history, and sometimes unique commits? I'm not sure that tags will work here without branches.. If so, I'm totally ok with this approach. . @mvdan don't you think it make sense to include lint functionality to tyk-cli project? . The initial version should at least check that:\n1. Required attributes\n2. There are no misspelled fields\n3. Fields has the right format\nError messages should be human-friendly, and clearly state what happened and how to fix it. \nIn future, it will be great to have additional, pre-configured schemes for hybrid, community, and mdcb setups. So I can run smth like: tyk lint ./tyk.conf --env hybrid\nIn addition, if we go with JSON schema, it allows defining field descriptions, which means we can generate dynamic help for any field or group of fields. For example running smth like tyk help slave_options will tell you that it is used only with RPC, and will show the list of sub-options, each described.. @mvdan for v1 looks good! \nFor v2, as mentioned previously, I would like to see environment specific checks: hybrid, community, dashboard, performance focused, python plugin and etc. And for sure extending linter to the rest of our products.. \ud83d\udc4d . \ud83d\udc4d . yes. If there is no custom changes except linter ones, i'm ok \ud83d\udc4d . createConnectionStringFromDashboardObject function is a really good candidate for unit test. \nNot too complex and without side effects.. I mean you should write unit test if you think there is potential bug in it.. I assume that currently we have really low code coverage level, adding public badge will have negative effect :). Ah, I thought it was only related to the public badge. Well sure, feel free to configure coverall.io send message to our Slack (let's start with free account for main Tyk repo).. I just wanted to get some feedback from @ilijabojanovic first, but since he starting at 23 I think we can merge it and update in future if needed.. Does it mean that you want a way to specify port per API in API Specification object, or we talking about changing \"listen_port\" on the fly?. > and should supersede a token rate limit.\nWhat is the reason behind overriding token rate limit? Initially I was thinking that global rate limit is sort of \"default\" one, and you can override it if needed.\nOr by \"supersede\" you mean that if token_rate_limit > global_rate_limit, I should use global, eg it is maximum value, otherwise token based?. Clear \ud83d\udc4d . I made some research, and it does not look that scary. \nActually, it can work very similar to how \"Auth token\" works. \nFirst of all, single gateway probably can't handle both api's with and without Mutual TLS auth, because gateway instance should be configured in a special way. If a customer will want some API's to use non-Mutual TLS auth, they should have multiple gateways with different tags.\nWe do not have to create a special mapping between certificate and token, instead, we will use certificate CommonName field to store token information - it is a popular approach for mutual TLS.\nThe certificate itself consist of 2 parts public and private. For our use-case, to check client, we need only its public part. But we should still give the private key to the user. I would propose do not store it at all in our system, and return it only once when we generated cert, in API response. In the case of UI it will look similar to how Amazon do: once you requested key, it shows prompt which give you chance to download the key, if you close it, you have to issue a new key.\nCertificate public information will be stored similar to basic auth, in key data: \"cert\": \"...\", and we do not need to encrypt it anyhow. \nWell, to be clear, since this certificate bind to API token, we can easily revoke it, so maybe it make no sense to remove private data and store it together with private one. Actually, we can make it configurable. But for sure hiding private key will require way more business logic and UI. We can go with some \"salt\" encryption as well (for example use \"secret\" as salt)\nHere is the initial plan:\nGateway\nWe should add an option on gateway level to enable mutual auth. Once enabled our TLS configuration should include following options:\nClientAuth: tls.RequireAndVerifyClientCert,\nClientCAs: clientCertPool,\nWere clientCertPool is:\nclientCertPool := x509.NewCertPool()\nclientCertPool.AppendCertsFromPEM(clientCACert)\nIt will also mean that we need to scan for all active API tokens, extract Cert data from them, and add to our certificate pool.\nMiddleware which will be used for auth will extract token data from certificate CommonName field, using (http.Request).TLS variable, and after we have token will act exactly same way as \"Auth token\" middleware. \nTo create keys we will define new API, similar to how we handle basic auth, and as mentioned above it should return both public and private info. As an alternative, it can be included into regular \"key\" create method.\nWorth noticing that if key is expired or removed, we should delete it from ca pool as well. \nDashboard\nWe should have a checkbox on Key creation page, called \"Generate certificate\", and once the key is created, it should be possible to download public (and maybe private) certificate parts.\nAPI should have new authentification method called \"Mutual TLS\", with no configuration options.\nPortal\nIf the key has certificate, the developer should be able to download it.\nLinks\nhttp://www.bite-code.com/2015/06/25/tls-mutual-auth-in-golang/\nhttp://www.levigross.com/2015/11/21/mutual-tls-authentication-in-go/\nhttps://blog.codeship.com/how-to-set-up-mutual-tls-authentication/\nhttps://www.codeproject.com/Articles/326574/An-Introduction-to-Mutual-SSL-Authentication. I think this is related to #361. If Redis directly used in tests, there is high chance that one of them re-use same keys. . I'm ok with error handling and tab changes. \nRegarding removed code, it's required to get approval from @lonelycode.\n\nJust a tip, when reviewing the code you can add \"?ts=2\" to URL to set tab size to be 2 spaces. By default, Github sets tab to 8 spaces, and it kinda hard to review all these JSON changes.. BTW, what linter did you used to remove dead code? Or you found it manually?. I were able to reproduce it, and pinpoint to some specific functionality, but did not fix yet.\nMovin this task 2.4 milestone.\n\nSo, it leaks somewhere in the gorpc package, when our analytics turned on.\nWhen analytics turned off, it reaches some local memory maximum and does not grow further.. yes \ud83d\udc4d . @lonelycode tyk-develop-env can be a good place. I'm not sure if it is a good idea, but for example if we make \"tykcommon\" git submodule, instead of folder, it may work. What do you think?. \ud83d\udc4d . \ud83d\udc4d . \ud83d\udc4d . Thank you for a such detailed description! Looking into it. . I just checked, and it is tricky. The database we using for dashboard do not allow \"dots\" in key names, and the header name used as a key...  Fixing this bug will require touching all parts of the system.\nWe've put this issue to our backlog, but I do not have any release date yet.\nThank you!. Are you sure that this option should be configurable, can we just leave to to be true?. \ud83d\udc4d . \ud83d\udc4d . I just realized that \"OPTIONS\" was not removed from dashboard UI. @matiasinsaurralde can you create an Issue in analytics repo and explain @lghiur how to find it?. Make sense \ud83d\udc4d . > Add the \"Fixes #n\" to the commit?\nFixed the comment, rebased, and added \"fixes\" to commit message. . Is there is a way to add a test for this change?. Thank you!. There are NO code changes here, red was caused by Github issues.. @penhauer-xiao probably mean that if you are using smth like glide, you do not have to store vendor folder in GitHub. As a downside, you will have to run initial Glide command to download all the vendor dependencies on the first run.. Also if we are talking about our CI, package-cloud and rest of automated stuff:  it probably was the reason why we started using vendoring. GitHub recently fails quite a lot.\nPersonally, I did not experience timeouts yet.. Yeah, I was thinking about those maps as well.\n@lonelycode is there is any reason why you used pointer to the map? I mean map is already pointer by design. There is lot of places in Tyk when we use double pointers.. \ud83d\udc4d . Just to clarify, this will be a new separate package in tyk repo, smth like tyk/common?. Good work! Like how small change is \ud83d\udc4d . I briefly checked if StartPoller or EndPoller could be blocking, and seems like this change may work. \nHowever pls re-check all the dependent code, it is potentially dangerous change.. \ud83d\udc4d . Yes it is, i made PR from a wrong branch, will fix it.. Closing in favor of #401 . I think it should be a good start for now \ud83d\udc4d . A lot of this tests using RedisClusterStorageManager with same key prefixes. \nEven if we switched to miniredis, it is still a global storage for all tests.\nSo, maybe for tests that marked as parallel, we will use random prefixes? Assuming that removing global Redis object is not an option right now, smth like this may work:\n```\nFor purpose used fixed vocabulary, because reading from random may break redis\nconst letterBytes = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nfunc randomizePrefix(prefix string) string {\n    b := make([]byte, 10)\n    for i := range b {\n        b[i] = letterBytes[rand.Intn(len(letterBytes))]\n    }\n    return prefix + \"-\" + string(b)\n}\n...\nRedisStorageManager{KeyPrefix: randomizePrefix(\"apikey\")}\n```. Maybe in our case it make sense not to add parallel tests at all (considering that test time already great), and instead in TestMain ensure to Cleanup redis after each test call. This should be bulletproof way to avoid any redis related issues.. Well, we have to find some solution to global Redis object somehow, otherwise chances of getting crazy bugs and flaky tests too high. Especially when we start adding more tests. . >  I would use something like the test name as the prefix, which is known to be unique. I can do that change, if you wish.\nThis solution you proposed looks fine to me, and should solve our problem.. If you look at the used keys, they are like \"zxczxc\" or \"56423\". So I'm sure he have no clue too :)\nEven if current keys does not conflict, we can't rely on it in new tests.. Even when 1.8 get's released how you gonna keep compatibility between 1.7 and 1.8, assuming that we not going to ship tyk with 1.8 until there will be at least few patch releases?. \ud83d\udc4d . Neither I or @ilijabojanovic can't replicate this bug. Both param and header auth works as expected. \nCan it be that you mistyped api_key or similar?. Also vote for keeping constants as it is, uppercased. That's old school,\nand worked for decades.\nOn Mon, Jan 30, 2017 at 3:37 PM, Martin Buhr notifications@github.com\nwrote:\n\n@lonelycode commented on this pull request.\nIn middleware_jwt_test.go\nhttps://github.com/TykTechnologies/tyk/pull/408:\n\n// openssl genrsa -out app.rsa\n-const JWTRSA_PRIVKEY = +const jwtRSAPrivKey =\n\nIt's for readability, I find it useful to know that \"Someone else has\nhandled this for me\". The go http lib provides status code constants, which\nis great, maybe it should be a package level thing, they are all prefixed\nby 'status'.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/TykTechnologies/tyk/pull/408, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAA2uSNdPOv0jJd-jh_yKJSqgTUWC4Uiks5rXdl0gaJpZM4Lv4V1\n.\n\n\n-- \nSincerely yours, Leonid Bugaev\nhttps://goreplay.org - test your system with real data\n@buger https://twitter.com/buger - me on twitter\n. Our tyk repository is not a package, it a runnable program. Moreover, it is in test packages which are not exportable at all.\nI find this kind of discussions quite meaningless, just make what majority wants and move on to the different task. It does not matter a lot, even if it does not align with some guidelines. Yes, it is a C classic style, most of us prefer. That's just a few variables.. I'm not going to start confrontation because of such minor things, but saying \"I am not letting this go\" is not the most diplomatic thing to say. What we are building here is not about code, it's about people and their relationships. And like every good relationship it is about mutual respect and ability to compromise. Let's try not to repeat in the future similar situations.. Yeah, I also thought about this one. Reasonable change. \nI assume you did not test it yet since it requires tyk-sink access? . I meant load testing to figure out if it helped with memory leak.\nOn Fri, Jan 27, 2017 at 7:12 PM, Daniel Mart\u00ed notifications@github.com\nwrote:\n\nAll I did was run the tests. The change is pretty straightforward, so I\ndoubt anything broke.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/TykTechnologies/tyk/pull/409#issuecomment-275703767,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAA2uZOka1Q7DgSsGD_UdggrjR5n0Cncks5rWhd9gaJpZM4Lv5Dk\n.\n\n\n-- \nSincerely yours, Leonid Bugaev\nhttps://goreplay.org - test your system with real data\n@buger https://twitter.com/buger - me on twitter\n. Sure, will do tests on monday. . Can confirm that things are much better now!. @ammaskartik cool! Will wait for your PR then. . @ammaskartik  2.3.2 is a patch release, and have own branch now. You pull request needs to be manually merged into 2.3.2 branch (we will do it, should happen soon), that's why issue is not yet closed :)\nHope it makes sense! Thank you for the contribution!. Yes, pls describe how it fix the bug. And what was the reason behind the bug. \nAlso, I'm not sure why this PR even exist, we already have this functionality in our master https://github.com/TykTechnologies/tyk/blob/master/main.go#L1362\nTo do release we for sure can merge it like this, if it not waits. But we need to add test case which replicate this bug, and verify your fix.. Is there is a way to add simple test for hot-reload?. I can confirm that this fix is working \ud83d\udc4d \nI'm going to merge it both in master and 2.3.2 and will create a separate issue for adding tests.. I assume that we should keep logs and improve error codes.. > Any func that uses a global logger is not suitable for an importable package. Blocker for #308.\nI do not think we going to work on it in near future (year). Do not think we should plan for this use case at all, at least now.\nBy error codes, I mean making functions to return proper error objects/messages, instead of just boolean variables or nil values.\nWe need logs we currently have, not only for internal debugging but for our customers too. Instead of removing them, we should try move logs out of functions, to the places where they get called - based on returned error, or its absence.. \ud83d\udc4d . \ud83d\udc4d . User-Agent header is a special case, and net/http logic is that if the header is not set, it sets the default value, unless it set to empty value. In our case, the proper fix will be check if \"User-Agent\" header in headers that needs to be removed, and internally \"add\" empty header. \n. Also users were asking if we can add an option to not add default user-agent header. So basically if we see that incoming request has no \"User-Agent\" header, we should set it internally to the empty value.. It is not about forcing (it can be done using existing dashboard/tyk config). It is about not adding it by default. So a customer may send User-Agent header, and it will be forwarded to the API, or he may not send any User-Agent and our gateway will not add default Go header.. This feature request was part of a deeper problem, and we may fix it more conveniently. \nThe user wanted to remove default User-Agent not because it just was there, but because his system administrator disabled standard Go UA for security reason (probably protection against scrapping).\nSo maybe instead of all these options, we discuss above, make sense add \"default_user_agent: \", which kinda solve all the requests.. Cool! Can you update PR description with steps on how to configure and test separate port?. Do not forget that after merging we should update documentation.. Good point, linking #431. @ilijabojanovic this is PR, label and milestone added to underlying issue mentioned in description.. @ilijabojanovic ready for testing as well\n@matiasinsaurralde can you resolve conflicts in meantime.. @matiasinsaurralde some of this conflicts potentially dangerous (in main.go), so pls fix conflicts before it goes to QA.. @matiasinsaurralde bump. @ConsM pls update documentation about control_api_port flag.. Yeah, but frankly not the easiest git workflow :). Yeah, this may work as well. Will try in future.\nOn Tue, Jan 31, 2017 at 12:59 PM, Daniel Mart\u00ed notifications@github.com\nwrote:\n\nYou could do a single PR with all the cherry-picked commits. What matters\nis that the release branch stays green.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/TykTechnologies/tyk/pull/425#issuecomment-276321701,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAA2uUS2QjFHTaa97JOXXluLSHhdijcSks5rXwYCgaJpZM4LybLp\n.\n\n\n-- \nSincerely yours, Leonid Bugaev\nhttps://goreplay.org - test your system with real data\n@buger https://twitter.com/buger - me on twitter\n. Modified to send notifications only on failure (which should be rare thing).. I assume we have some flaky tests now, and I'm not sure if it caused by recent changes or was there before. @mvdan can you check:\n--- FAIL: TestHMACAuthSessionPass (0.00s)\n    middleware_check_HMAC_test.go:144: Initial request failed with non-200 code, should have gone through!:\nLink to failing build: https://travis-ci.org/TykTechnologies/tyk/builds/196897411\n(I'm going to re-run build). I thought travis runs have unique urls \ud83d\ude2c. I had to re-run it to make tests\ngreen. But log itself did not contain too much information (since we\ndisabled info messages \ud83d\ude09).\nOn Tue, Jan 31, 2017 at 8:06 PM, Daniel Mart\u00ed notifications@github.com\nwrote:\n\n@buger https://github.com/buger the linked Travis log is a success log,\nwhere is the actual error log?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/TykTechnologies/tyk/issues/429#issuecomment-276425763,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAA2udyeB0JIfZAYeeuwjFspVCRamc2Yks5rX2oggaJpZM4LyeST\n.\n\n\n-- \nSincerely yours, Leonid Bugaev\nhttps://goreplay.org - test your system with real data\n@buger https://twitter.com/buger - me on twitter\n. Well, it can be that it conflicts with another tests, shared variables or database. Try go test -count 500.. Closing in favor of https://github.com/TykTechnologies/tyk-analytics/issues/52. RPC tests now possible, check https://github.com/TykTechnologies/tyk/pull/516 as reference.. Will close it for now. Make sense add \"officially\" supported. Because it actually runs in Mac OS, Windows, and probably bunch of another platforms we not officiall support.. Support as \"word\" in this case a bit confusing, because if it is about customer support, yes, it is redundant, but most users I believe read as a technological limitation and that it will not work on rest of the platforms. I would still add \"official\" here, just removes all the confusion.. Can you break the build to test this feature?. Hm, It kinda weird, because log output is separate from actual test headlines. And there is no way to figure out which test generated output.. But how are we going to debug issues then? Just trying to imagine workflow. If you at least could print test name in this buffer, or even better add a prefix to each log line with test name like [TestMiddleware].., it will solve the issue, even with parallel tests.\nRight now if tests is failed, this logs is kinda meaningless because I do not know which log line to check. . Test names added in 1.8, but even now you can get it using reflect package, maybe it can help:\nv := reflect.ValueOf(*t)\nname := v.FieldByName(\"name\"). Looks like it was fixed in #546 . I wonder why it was even used originally. Arrays are already pointers, same as maps. . Well, for sure I meant slices.\nBut when they used as arguments, they send as pointers (yes to struct), not by value. So this is still technically a pointer. And you can access real pointer to \"slice\" anytime, by dereferencing it anyway, without explicitly sending(or returning it) to function.\nAnyway, I did not saw usage of such functionality anywhere, that's why I'm asking, maybe we missing something.. Actually, I probably wrong about dereferencing it, so yeah, only array reference passed as pointer, but we did not used it from what I see.\nNice explanation on this: https://www.reddit.com/r/golang/comments/283vpk/help_with_slices_and_passbyreference/. Well, while I agree that performance should be ok, try very basic synthetic benchmark of inserting few thousand APISpecs, iterating over them, and accessing few fields in contexts of *[] and [], it should be enough. . This synthetic test unlikely will be really useful in future, so probably you can just show results and throw it away. But in the context of #453 , it can be useful to add some benchmarks which test specific parts, but it will be separate task anyway.. @mvdan any updates on this?. I'm not sure what kind of traffic we can record without breaking our NDA, but I assume that it should be possible for our \"pure\" cloud users (excluding Hyrbrid).. I was talking in the context of goreplay because it requires your to record live traffic. . I do not think this is completely true, we just replace it by synthetic traffic which we try to make similar to production as much as possible, maybe multiple profiles. Worth noticing that @ilijabojanovic was planning to implement some of this. . In this case probably will be easier to force-push.... \"Benefits\" of using interface{} as arguments...\nAdding test here definitely make sense, at least overriding few arguments using ENV's. \nFrom what I understand it affects tests and when tyk run without specifying a configuration file, right?\n. I started filling bug for this issue (to move it through our pipeline), and noticed interesting behavior. Tyk binary actually works well, and TYK_GW_LISTEN_PORT=8080 TYK_GW_STORAGE_HOST=tyk-redis ./tyk works as expected and overrides config. \nCan it be that only tests are affected? And why tyk works?. So, tyk works because WriteDefaultConfig only writes it to disk, and environment changes will be missing there (still bug), but tyk loads this config using loadConfig which evaluate environment variables without issues. So in the end, only generated config have bug, but tyk still override its changes from env.. Yes it still the bug, but not as major as I thought. Including it to 2.4 milestone unless @lonelycode thinks different. . https://github.com/TykTechnologies/tyk/issues/457. Checked, fix is working \ud83d\udc4d . You only edited commit message, and it was green before. Don't be so pedantic \ud83d\ude1b . Btw, in future try to create Issue first, so we can follow our workflow.. Make sense update our contributing guidelines on how our logging works, since this is non-standard behavior.. Cool! Just fix the conflicts.. Travis seems do not see the changes (probably because of rebase).. @lonelycode since buddy works now does not use \"stable\" branch now, it is safe to merge.. @matiasinsaurralde so what was the issue? I can't figure it out because it is already rebased. How did you make it pass after failures? . @matiasinsaurralde should we merge it now, and you will create separate PR's for rest of tests? If so, pls mark checkboxes of completed tests here #431. . Works for me \ud83d\udc4d . What about trying https://github.com/rafaeljusto/redigomock ?\nSeems like it support pubsub\nUPDATE:\nIt is for mocking client code not server. > That doesn't seem to have affected us at all while we used the real redis, though.\nThis does not matter for Travis, because on each run it have clean state, but matter for local testing.\nAs an alternative, we may try make RedisClusterStorageManager interface, and for the tests write own implementation (which in most cases will just proxy original calls), which mock pubsub internally using channels.. Well in short term we can just rollback Redis, it is quite simple change.. Looks good \ud83d\udc4d . It looks sane to me, but since this is mostly not about tech but about vision, I would like to get @lonelycode approval here. \nAlso, I assume rest of repositories which use tykcommon should be updated as well?. Ok, let's merge it. But please create Issue to update all tykcommon references (you can find them using https://github.com/search?q=tykcommon&type=Code&utf8=%E2%9C%93). I'm generally ok, but we need to compile list of places which needs to be updated. Like docker images, build scripts, servers and etc.. I meant 1.6, just need to ensure that we do not use it anywhere. \nFor example, dev-env already use 1.7, buddy-works builds Tyk with 1.7 as well. Anything else what comes to the mind?. Well, latest Go version had 5 patch releases, so it was quite buggy. We can switch to 1.8 in dev environment, but BuddyWorks should stay on 1.7 until there will be at least few patch releases for 1.8.. I think part of this issue is to understand why we ever get such malformed IP? \nTo get IP we use GetIPFromRequest from util_http_helpers.go. And I may assume that some of the customers have issues in X-Forwarded-For header, or we parsing it wrong. Can you check this part too?\nAnd if this is an issue with X-Forwarded-For header format, it may be interesting to include this information to the Sentry.. Just an idea, maybe this is issue with IPv6 address format? . For example in case of IPv6 address (\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\"), doing strings.Split(remoteIPString, \":\") to find the port not the best thing. And instead we should rely on net.IP package for parsing IP addresses.. So, it actually fails now at \"panic: runtime error: slice bounds out of range\". Related links:\nhttps://golang.org/pkg/runtime/pprof/\nhttps://golang.org/pkg/net/http/pprof/ (<- what I used do get this profiles)\nhttps://blog.golang.org/profiling-go-programs. Worth noticing that this profiles were generated after load testing, so theoretically this numbers should have returned to normal, but not.  \nActually goroutine profile does not look so bad, but heap is.. Most likely by accident. Github remembers your choice when you are merging using UI button. \n. > What should our policy be regarding updating vendor/? I think now is a good time, when we have a few months to test things before the next minor release.\nIdeally, we should update only to latest bugfix release, and consider major package updates only if there are features we REALLY want. Unlikely anyone of us would like to fix bugs of vendored packages. But unfortunately is it very rare for Go packages to use semver or similar, which makes hard updating them. . I will merge this PR, but @lonelycode feel free to answer here. . Will this actually change the logic a bit, because before it was using clean state (router) each time, and now use global object, which can be potentially polluted during the tests. Are you sure you want introduce a new global object, or I'm missing something?\nAlso seems it does not call loadAPIEndpoints at all, why?. From what I see it should not be a problem to implement. Resolving DNS record can be done using net/#LookupAddr and caching itself can me smth like:\nhttp.DefaultClient.Transport = &http.Transport {\n  MaxIdleConnsPerHost: 64,\n  Dial: func(network string, address string) (net.Conn, error) {\n    separator := strings.LastIndex(address, \":\")\n    ip, _ := dnscache.FetchString(address[:separator]) <- I took this from dns cache example\n    return net.Dial(\"tcp\", ip + address[separator:])\n  },\n}\nSo we do not need dnscache, because it was written before Go had Lookup* functions.\nWe just need to write a proxy function which cache dns lookups in map for some short period of time, like 1s. Should be configurable I guess, and maybe be 0 by default. After we have cache, we just need to override HTTP dial function. \nWorth noticing that this cache should be concurrent, and performant, but frankly I think using RWMutex will be enough, especially compared to HTTP performance.\n. I meant that we do not need dnscache because net package already does the job, treat code snippet as pseudo code.\nAlso, I realized that we already have data structure for this purpose: \"github.com/pmylund/go-cache\". It is already used by Tyk in a lot of places and does the job.\n\nWhat should a value of 0 be?\n\nNot caching at all, this will be a way to turn feature off\n. Maybe instead explicitly enable caching, this at her than disable?. Updated task details based on talk with @evityuk . @evityuk do not think we should use DNS TTL values, because in most of the cases it is not the value you can configure, or set to the low enough value. But it is something we can use, if TTL in our config was not set.. Looks reasonable to me \ud83d\udc4d \nBut try to cover this functionality with tests.. @mvdan btw, did you checked stuff related to RPC based hot reloads?. It is definitely should be done like this; I just wanted quickly describe the bug while I remember it. \nWill leave it to the person who starts working on this task: please create separate issues like proposed above.. Worth noticing that it will be nice to have a way for Dashboard to know this values. For Tyk Gateway having special API request, and for Pump writing special mongodb record. . @matiasinsaurralde bump. Nice. Can you add full backtrace?. Yep, same one as I saw.. So basically, when it experience error it fallback to last cached value, which looks sane. \ud83d\udc4d . @matiasinsaurralde updated comment. Oops, did not expanded context till that point and was confused a bit by variable name, we have similar global name... :grimacing:. Actually, I do not think that this fix will work. I will try to add basic test.\nBut basically, returning nil is expected and handled everywhere, like here:\ngo\nspecs := getAPISpecs()\nif specs != nil {\n    loadApps(specs, defaultRouter)\n    getPolicies()\n}. I wrote a test and found the reason for a panic. It fails on this, and following lines:\nlog.WithFields(logrus.Fields{\n        \"prefix\": \"main\",\n    }).Printf(\"Detected %v APIs\", len(*APISpecs))\nhttps://github.com/TykTechnologies/tyk/blob/f82315b8d49a5e4902837af7a443427164a1b49e/main.go#L244:1-L245:1\nBasically all getAPISpecs() calls handle if it returns nil but getAPISpecs() itself internally does not handle such situation. Will push a commit soon.\n. Added proper fix and tests. \nSince *[] was removed in master, this bug should not affect it, but I still want to merge tests with few changes.. Should we included golint to CI as well?. Since you are flushing Redis, is there is a chance to tell the \"Tests\" use different database number, so it will not override any local data?. I'm not sure if it is currently possible, without adding new configuration option which specifies Redis database. In the case of redisgo it will look like: c.Do(\"SELECT\", db); where db is int. By default Redis use 0 database. . Actually looks like it is possible, and if in TestMain you will set config.Storage.Database and config.CacheStorage.Database to 1, and will use c.Do(\"SELECT\", db) when flushing, tests will use separate Redis database.. @mvdan  underlying gorpc package which we use for RPC stuff have some weird logging, and does not properly log client/server disconnects. So you may see following logs in tests:\n=== RUN   TestGetAPISpecsRPCFailure\n2017/02/15 11:53:12 gorpc.Server: [127.0.0.1:54268]->[:9090]. Cannot decode request: [read tcp 127.0.0.1:9090->127.0.0.1:54268: use of closed network connection]\n--- PASS: TestGetAPISpecsRPCFailure (0.01s)\n=== RUN   TestGetAPISpecsRPCSuccess\n2017/02/15 11:53:12 gorpc.Server: [:9090]. Cannot accept new connection: [accept tcp [::]:9090: use of closed network connection]\n2017/02/15 11:53:12 gorpc.Server: [127.0.0.1:54269]->[:9090]. Error when reading handshake from client: [EOF]\n2017/02/15 11:53:12 gorpc.Server: [127.0.0.1:54270]->[:9090]. Cannot decode request: [read tcp 127.0.0.1:9090->127.0.0.1:54270: use of closed network connection]\n--- PASS: TestGetAPISpecsRPCSuccess (0.02s)\nPASS\n2017/02/15 11:53:12 gorpc.Server: [:9090]. Cannot accept new connection: [accept tcp [::]:9090: use of closed network connection]\nok      github.com/TykTechnologies/tyk  0.129s\nI checked grpc master, and seems like some of this issues are fixed, but we probably should cherry-pick them one day. . Addressed both comments.. Race itself not, but actually fixing related endless connection loop should be included into 2.3.. We need to check distributed rate limiter and pubsub as well. I see, so just to summarize:\nAll the storage handlers share the same Redis pool and use singletons. \nOnce any of RedisClusterStorageManager instances makes the first Connect() call, it initializes singletons (and actually never returns false).\nThere are no places in code where singletons can be set to nil, which means all the reconnect logic does nothing and can be safely removed. To be precise, reconnecting still handled but inside redigocluster and redigo.\nIf we talking about #520 bug itself, I do not see the way how our code can cause them, so it is probably inside redigocluster. Make sense to check if we need to update our fork.\n@mvdan anything missing?. Worth noticing that I tried simulating Redis failure, like stopping it after it was initialized, single and multiple nodes: GetKey always returned proper error, without looping. . If we are talking in the context of 2.3.3, it seems like you did not change any functionality, just refactoring. I do not see how it can fix Redis connection count, or I'm missing something?. Looks good to me.. This looks very similar.. What was the previous version in terms of semver?. Yes, but what we have commit id, so it is possible to get version which was vendored. I wanted to check the changelog.. Ok, let me rephrase it. How do you ensure that updating this package is safe?. Here is changelog https://github.com/grpc/grpc-go/compare/b13ef794997191ec801db90a42c50034df91850a...708a7f9f3283aa2d4f6132d287d78683babe55c8. Seems like mostly minor fixes and documentation updates. Our version is between 1.0.4 and 1.0.5.. Oh, this ProcessRequest so big \ud83d\ude28 \n@matiasinsaurralde can you help me with review?. Right, forgot about \"?w=1\" url param feature. Looks good.. cc @matiasinsaurralde . @matiasinsaurralde it can be related to you changes #377 #412 . More context: the issue may happen if you start the new process right after killing the last one with -9. Maybe it does not free up the socket in time, or something similar. . So, here are tests https://github.com/TykTechnologies/tyk/pull/596. I did not found a way to cause this issue to happen, but I replaced \"http.Handle\" with \"http.Serve\", which should eliminate such issues, even if function called multiple times.\nWe have mix of various routers, depending if there is custom domain or separate control API. When http.Handle used, it always binds to default Go lang router, which can lead to unexpected behavior. . This issue require too many commits to be cherry picked, and most of them depend on master code. Considering that this issue happened only for one user, and did not happened any more in recent time, moving it to 2.4 release.. This issue was fixed quite a long time ago. Note that 2.3 is extremely old. The current release is 2.7.4. \nCheers.. I assume intention was to keep 2 separate keepalive checks per engine, and KeepaliveRunning should be variable of RPCStorageHandler object. . > I assume you mean one per engine?\nyes. I think currently it will break our deploy regexps which parse version number, so deployment to staging will be broken. As you mentions HEAD not really the right name, without having commit sha. \nSetting it to 2.4.0 probably should be good at this stage. . Right now only numbers. You can try to modify scripts here https://github.com/TykTechnologies/tyk/tree/master/utils and ensure that it will work with your scheme. . I think other repositories should not be affected, but we have lot of dependencies, can't be 100% sure. Also not sure about external stuff like docker hub and package cloud.. Well, chances that our customers use this fields are too high. This is a breaking change, and can be introduced only in major versions, do not think 2.4 is major enough. \nUsually changes like this made by adding both fields to JSON payload, with deprecation notice of old key names. . So, what are we going to do with this PR?. Can you give link to POST changes? Just curious what it does.. Can you provide instructions on how it can be tested?\nUPDATE:\nI see that original issue have it. This definitely makes sense! But not sure what is the best way to achieve it. \nSimplest approach will be not using query params, and instead, use headers. But well it requires changes on your side, which is not desirable.\nAnother option, if you do not have too many URL's, you can set URL rewrite rule per URL, and remove token param. Not extensible and hard to manage, but available even now.\nFor sure worth mentioning that this issue can be solved by writing own middleware, in the language of your choice, which can handle any logic. Also already available if using on-premise or hybrid versions.\nOne of the options is to somehow mark API as stateless, so we do not maintain our internal cache per token, and token does not get passed to your server. Or as you mentioned just add configurable option to not send token to the origin server if it was included into query string (should we also not send header based auth tokens?). \nMore extensible will be adding more general \"Anonymization\" middleware, where you can globally remove/rewrite URLs and headers. \nWhat do you think?. Need to check if it is already done and check status https://github.com/TykTechnologies/tyk-plugin-demo-golang. @dencoded transferring to you.\nGeneral idea is to come up with a proper spec for this task, gather all requirements, and do the proper PoC. @asoorm work should be a good start https://github.com/TykTechnologies/tyk/pull/1868 (feel free to use same branch if you want)\nI think maybe we could extend direct middleware interface here, with ProcessRequest and etc. \nAlso think about developer experience. It would probably mean creating a separate docker image which is used to build tyk at our CI and for building plugins themselves (since they are need to be build at the same env). \nAlso, we need to focus on developer experience as well, and probably docker image should provide smart entry point where you can pass Go code, and get so as output. Maybe just use plain STDIN and STDOUT, like docker run -i ... < plugin.go > plugin.so, or similar. \n. Additionally I have a feeling that there is no easy way to access parent process functions from inside plugin, and maybe it make sense to reuse same interface as we have for grpc plugins, when you have access to MiniRequestObject, session, context and etc. as function arguments. We also need to think about helper functions, we may need to expose, like set/get helpers, similar to rest of plugins.. Also, I believe it makes sense to re-use our existing bundler infrastructure. So you build your so file, create a bundle with this file and manifest declaration, and load it exactly the same way as you do with python bundles. This way you get dynamic plugin loader, and it fits nicely into our architecture.. Yeah, we need to start with Ops part first and find the reliable way to build plugins, before actual architecture. If the plugin needs to be re-compiled, each time when we do a major update, this should be totally fine (even if minor). One of the possible ideas:\n1) For each major Tyk version have a separate tag in our Docker build env (just created at https://github.com/TykTechnologies/tyk-build-env/)\n2) When a plugin gets build, version number gets embedded into its binary code (via LD_FLAGS is the easiest way), and when plugin is loaded we do a runtime compatibility check, and if major plugin version differs from Tyk major version. In most of the cases it will fail even before this check, but having additional safeguard can help. \n3) When the plugin gets build, it probably use some smart entry point, or bash script, which runs docker, and it requires you to specify Tyk version, for which you need to build your plugin. It checks out related version of Tyk from the GitHub.\n4) We limit plugin to consist only from the single file. In order to avoid \"mounting\" files, just read its content from STDIN. When script reads from STDIN, it creates plugin.go file inside Tyk folder, created in the previous step, and it runs go get for it: if plugin use some package already used by Tyk, it will re-use it from vendor, if not, download a new one, but the main idea that we will not have vendoring conflicts. \n5) We run go build and specify only this single plugin file, and run this command inside Tyk directory, to achieve the same env. If its build, output to STDOUT content of the plugin. \n. Well indeed \"To move beyond middleware into full customization\" sounds too risky and ambitious. I would say we need to start with exactly same functionality which we have for current middleware.  \nAlso, do not forget that Go based plugins can't use methods of the caller. You can only call methods exposed by plugins. So we define that plugin should export some specific functions like \"ProcessRequest\" or maybe export sort of \"Middleware\" object. But the basic idea we should provide Go package for writing such plugins, which strictly says how plugins should be made, which interfaces should be used, and which functions/objects should be exposed.. Linking original PR https://github.com/TykTechnologies/tyk/pull/550. Actually when backporting, and you have no new functionality, you can skip description and just link to original PR.. Looks like that Github webhook hanged, because Travis build actually passed. Merging.. > What do you mean? \nGithub UI showed that tests are still running, but Travis was green\n\nIf you mean the PR body\n\nright. what about https://github.com/mvdan/tyk/blob/6d884c4ed4ebf48148bd675e3e2dc76950dcd6b1/main.go#L1306\nhttps://github.com/mvdan/tyk/blob/6d884c4ed4ebf48148bd675e3e2dc76950dcd6b1/main.go#L1377\n?. Good point. It can send nil in case of error, and non-nil but zero length in case of expected empty api specs. We should cover it with specs... . Yep, agree about returning error.. ^ conflicts. ^ have conflicts. I remember it was the same flaky test. How easy is to replicate it? Does it possible to bisect the commit which introduced the bug?. Well, it is a bug in the test, so for simplicity reasons lets act accordingly. . Nice trick with type switch!. @matiasinsaurralde since it touch Control API functionality, can you check this changes?. Thank you!. That sounds bad. Can you try manually trigger reload via /tyk/reload/ and /tyk/reload/group/ on Gateway side?. @lonelycode this tests already included into my PR. It use test matrix and test all combinations of OverrideDefaults, with or with GoAgain and with control API on separate and on same port.. Yeah, and master have only 2 commits after this PR was merged. . @ilijabojanovic added fix #631. @ossvn and you can confirm that you calling it with the right domain? Also ensure that you have enable_custom_domains set to true. Is this the only API you have? \nAlso, can you confirm that Tyk Admin API still works?. Note that dashboard itself does not expose your APIs itself, the only gateway does. \nDoes it mean that API without domain works as expected?\nDo you see anything in gateway logs, can you post log output here (especially part when gateway starts, and you make first request).\nThank you.. To fix it we need to check on each request if policy id of current active session is the same as policy in JWT. You also removed this transformation strings.Replace(u5.String(), \"-\", \"\", -1). Does it expected? Such change can have unexpected side effects . . It changes the length of encoded string. Better to call @lonelycode here to clarify why it was added.. I assume you should add same change (strings.Replace) to b64UUID function too. . I see, well, let's wait for @lonelycode here. I also do not like this string.Replace stuff, so if we can confirm it is legacy, it should be safe to remove. . bump. bump. Is the there is a way to know if it is a management node? Or it require adding a new flag?. @lonelycode should we also exclude it from the quota calculations?. Also, it does not look like a proper fix. Maybe it makes sense to add an option which disables any rate limiting and quotas for the whole management gateway?. We should not forget to update documentation. Worth noticing that I did not reproduce issue by myself, @ilijabojanovic pls verify when you have time.. I verified the issue, and indeed things look bad. All versions of tyk affected.\nWe have tests covering webhooks, BUT, they do not check for full body, only for some specific strings. For example TestCreateBody test, generate { \"event\": \"QuotaExceeded\", \"message\": \" payload and pass because it checks for QuotaExceeded string \ud83d\ude48 . \nError itself says: executing \"default_webhook.json\" at <.Meta.Message>: can't evaluate field Message in type interface {}. It happens when you try to access element from Template which not exist, and path is nested. \nTo fix TestCreateBody test, it was enough to add Meta: EventAuthFailureMeta{}, to the template data. We should check all the places where we generate webhooks, and add empty objects, for values which can exist or be missing for the same template (if events share same template, like our default_webhook.json suggests.. @ilijabojanovic can you check it?. Thank you for reporting! \nDo you have any suggestions how to fix it? I assume some kind of option to disable X-Forwarded-For check? If so, in this case it will stop working with proxies.... This changes should be applied to the dashboard as well. . I see following panic:\ntyk-gateway_1    | 2017/03/17 17:24:18 http: panic serving 172.19.0.5:36612: runtime error: invalid memory address or nil pointer dereference\ntyk-gateway_1    | goroutine 13832 [running]:\ntyk-gateway_1    | net/http.(*conn).serve.func1(0xc4201def00)\ntyk-gateway_1    |  /usr/local/go/src/net/http/server.go:1491 +0x12a\ntyk-gateway_1    | panic(0xc40a00, 0xc420014060)\ntyk-gateway_1    |  /usr/local/go/src/runtime/panic.go:458 +0x243\ntyk-gateway_1    | main.(*DefaultSessionManager).ResetQuota(0xc420404850, 0xc42043ce40, 0x38, 0x0, 0x408f400000000000, 0x408f400000000000, 0x404e000000000000, 0x58cc3313, 0xffffffffffffffff, 0x58cc1bfe, ...)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/auth_manager.go:101 +0x452\ntyk-gateway_1    | main.createKeyHandler(0x11ebd00, 0xc420472680, 0xc4200bd770)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/api.go:1210 +0x2999\ntyk-gateway_1    | main.InstrumentationMW.func1(0x11ebd00, 0xc420472680, 0xc4200bd770)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/instrumentation_handlers.go:51 +0x97\ntyk-gateway_1    | main.checkIsAPIOwner.func1(0x11ebd00, 0xc420472680, 0xc4200bd770)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/main.go:368 +0x1f7\ntyk-gateway_1    | net/http.HandlerFunc.ServeHTTP(0xc420458c10, 0x11ebd00, 0xc420472680, 0xc4200bd770)\ntyk-gateway_1    |  /usr/local/go/src/net/http/server.go:1726 +0x44\ntyk-gateway_1    | github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux.(*Router).ServeHTTP(0xc4203b46e0, 0x11ebd00, 0xc420472680, 0xc4200bd770)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux/mux.go:114 +0x10d\ntyk-gateway_1    | net/http.(*ServeMux).ServeHTTP(0xc4201a03f0, 0x11ebd00, 0xc420472680, 0xc420668f00)\ntyk-gateway_1    |  /usr/local/go/src/net/http/server.go:2022 +0x7f\ntyk-gateway_1    | net/http.serverHandler.ServeHTTP(0xc42041c680, 0x11ebd00, 0xc420472680, 0xc420668f00)\ntyk-gateway_1    |  /usr/local/go/src/net/http/server.go:2202 +0x7d\ntyk-gateway_1    | net/http.(*conn).serve(0xc4201def00, 0x11eccc0, 0xc4201ced80)\ntyk-gateway_1    |  /usr/local/go/src/net/http/server.go:1579 +0x4b7\ntyk-gateway_1    | created by net/http.(*Server).Serve\ntyk-gateway_1    |  /usr/local/go/src/net/http/server.go:2293 +0x44d. Sure. I tried with the dashboard UI.. It is weird, but I can't replicate it anymore.\n@kohrVid can you try one more time? Does it still happen for you? If so, pls specify exact SHA1 of the commits, and export/upload API, Policy and Key definitions.\nThank you!. @lonelycode but what dashboard behavior? I it is definitely not expected, or at least very confusing.. @mvdan tests are failing in a strange way, and I have a feeling this is similar to why you removed this default case. Error similar to what you experienced previously, do you have ideas?. Well, this bug actually sounds like very serious. If we will be able put it to 2.3.4 it will be great. Needs investigation.... maybe. I initially thought that replicated this bug as well, but found that our default on-premise config have \"uptime_tests\": {\"disable\": true,... option.  Once I set it to false, everything started working as expected.\n@ilijabojanovic can you confirm that you can replicated it with this option turned off?\nWorth noticing that looking at logs in community forum, they have uptime tests turned on, because there is messages like:\ntime=\"Mar 21 13:45:40\" level=warning msg=\"[HOST CHECKER MANAGER] Host is DOWN: http://subdomainB:8890/v1/health\". I can confirm that uptime tests do not work when with \"failure_trigger_sample_size\": 1. I updated #635 to fix the issue. . tip: better to review with white space check turned off https://github.com/TykTechnologies/tyk/pull/635/files?w=1. @mvdan made the changes. Should be good now. Migrated to Dashboard repository https://github.com/TykTechnologies/tyk-analytics/issues/208\nWill keep this issue updated as well.. Part of this functionality added via this pull request https://github.com/TykTechnologies/tyk/pull/1044. Adding sprig to both Tyk and Dashboard should be a very easy win http://masterminds.github.io/sprig. We have separate ticket for that: exposing vars via context. Note that gtf library replace function is not what it looks, it actually a \"strip\" function :). Or just making path random uuid, as it done now when you by default create API without listen path.. Yes, make sense. We can try include it to the 2.3.5 if it will be easy to fix. . Currently, to solve issues like this we recommend creating separate \"management\" node, which does not receive any traffic loads ALL APIs and used only for talking with Dashboard, for API management. . @lonelycode i'm not sure that fallback here is the \"proper\" solution, but it can definitely work.\nThe proper solution will be probably re-thinking how search is made in Dashboard, and it should search keys in multiple Tyk nodes if needed. Or look at the API tags, compare them with Gateway Node tags (not sure if this information available), and then query Node which 100% should have access to the key. \nCurrent way of always querying using \"first\" API id is indeed a bit confusing, and works only in simple cases (for most of users it is acceptable). . Thank you!. Important addition, this bug happens ONLY if policy expiration set to \"Never\". In rest of the cases it inherited as expected.. @ConsM make sense create this issue in dashboard repository. Moved to dashboard repo. Found it there:\n```\n./install/data/tyk.self_contained.conf:\n   56      \"config\": {\n   57        \"enable_uptime_analytics\": false,\n   58:       \"failure_trigger_sample_size\": 3,\n   59        \"time_wait\": 300,\n   60        \"checker_pool_size\": 50\n./install/data/tyk.with_dash.conf:\n   73      \"config\": {\n   74        \"enable_uptime_analytics\": true,\n   75:       \"failure_trigger_sample_size\": 3,\n   76        \"time_wait\": 300,\n   77        \"checker_pool_size\": 50\n```. Currently, it means that for Tyk installed from packages, uptime tests almost did not work, because host will be marked as down only after 20 minutes (3 + 1) * 300s.. Page that should be updated once Issue get closed https://tyk.io/tyk-documentation/ensure-high-availability/uptime-tests/. Worth noticing that host checker properly set default value to 10 seconds, BUT, when it set Redis key, to mark host as down, instead of default value, it always use config value (which 0) + 1. So this host down key expire in 1 second, and next check in 9 seconds (10 - 1). So for this 9 seconds Tyk will send data to the down host.. Detailed explanation is in the original issue, but I updated commit message.. @lonelycode i set 2 retries with 10 seconds between them, so 20 seconds till host marked is down. Seems sane. . @ilijabojanovic ready for testing. \nThe Proper test will be comparing default configs, generated by tyk, before and after this PR, in order to ensure that they are identical. To make this work, delete local tyk.conf file, and /etc/tyk/tyk.conf files, and run tyk without --conf option. \nAnd in second, create local tyk.conf and ensure that tyk will use it and not override if you run it without --conf option. Next remove local tyk.conf and create /etc/tyk/tyk.conf, and ensure that tyk will use this path, if local one not found. \nAnd in third, ensure that --conf option works with custom paths. \n\ud83d\udc4c . @matiasinsaurralde can you add a bit more context. In which cases \"expiring\" sessions will work? \nI mean if we expire session, user API access will stop working.. @lonelycode well, potentially it can really surprise the user. For example, one if his developer have not paid for some time, and get back, if we had TTL, his API key will stop working, and have to be re-generated.  \nIt is ok, if customer knows about it, but otherwise very confusing. I would propose making this TTL turned off by default, and it works only for very specific workloads. \nThe rest is look good, and rules described by @lonelycode sounds like a plan \ud83d\udc4d . If we cover it with tests I'm ok with it :). @mvdan what about tyk-analytics, does it use uuid1 or uuid4? Is there any possible conflicnts you can imagine?. @matiasinsaurralde up to you. What is the purpose of the detailed recording? I always assumed that this is for debugging, so any information is useful.\nProbably it should be optional and user should we specify list of headers that should be sanitized.. Introducing new option, which holds an array of regexp sounds like a good idea. . I assume this is connected with #691. Here is related fpm options:\n```\n   --deb-user USER               (deb only) The owner of files in this package (default: \"root\")\n   --deb-group GROUP             (deb only) The group owner of files in this package (default: \"root\")\n --rpm-user USER               (rpm only) Set the user to USER in the %files section. Overrides the user when used with use-file-permissions setting.\n--rpm-group GROUP             (rpm only) Set the group to GROUP in the %files section. Overrides the group when used with use-file-permissions setting.\n\n```. @excieve assign to you. You mean unix file mode, right?\nIf so, you probably mean it should be readable only by special user, created by us, and Tyk process running with same user. \nWhat is the origin of this issue? Can you provide more details?. @excieve ^. Golang TLS library supports setting InsecureSkipVerify flag https://golang.org/pkg/crypto/tls/ to fix this issue. We need to make it configurable. . Will close it but keep branch for reference . I made an issue while creating this task, and actually confused you. \nThe real goal of this functionality is to allow Tyk query https endpoints with self-signed certificates. Currently it shows http: proxy error: x509: certificate is valid for ... error.  So instead of allowing insecureSSL for Tyk API, we should disable SSL checks for our reverse proxy.\ngo\n    tr := &http.Transport{\n        TLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n    }\n    client := &http.Client{Transport: tr}\n    _, err := client.Get(\"https://golang.org/\")\n    if err != nil {\n        fmt.Println(err)\n    }. Yeah, I think we can leave this option in http_server_option group, but a new one should be added to the different section.. Well, if @matiasinsaurralde can do this task this week, it can be included into 2.3.5. \nRecent merge of X.3.5 branches was made to start testing what we already have, and rest of the tasks will be backported if we will have time and bandwidth.. @ilijabojanovic ready for testing. @ilijabojanovic \n\nOver post-man try to get api definition\n\nCan you clarify this step? You mean calling /tyk/apis endpoint?. It is possible to test this functionality using httptest.NewTLSServer. Will close it but keep branch for reference . I like the idea, but I think it can be just query string param instead of new url.. I assume this Task also requires updating documentation. @ilijabojanovic yeah, details indeed missing.\nHere is documentation for this feature https://tyk.io/tyk-documentation/transform-traffic/request-headers/\nTo test it, your API definition should have the following global_headers section:\n+   \"version_data\": {\n +      \"not_versioned\": true,\n +      \"versions\": {\n +          \"v1\": {\n +              \"name\": \"v1\",\n +              \"expires\": \"2100-01-02 15:04\",\n +              \"use_extended_paths\": true,\n +              \"paths\": {\n +                  \"ignored\": [],\n +                  \"white_list\": [],\n +                  \"black_list\": []\n +              },\n +              \"global_headers\":{\n +                  \"X-Static\": \"foo\",\n +                  \"X-Request-ID\":\"$tyk_context.request_id\",\n +                  \"X-Path\": \"$tyk_context.path\",\n +                  \"X-Remote-Addr\": \"$tyk_context.remote_addr\"\n +              }\n +          }\n +      }\n +  },\nSo basically this PR's adds a new variable to $tyk_context. And all these context variables should be injected into response headers.. It looks good, but can you confirm that this fix works for you?\nI'm asking because code that actually stips the path is here: https://github.com/TykTechnologies/tyk/blob/master/handler_success.go#L327 and here https://github.com/TykTechnologies/tyk/blob/master/handler_success.go#L362. And seems like it already strips only first instance. \nCode you modified executed only if API spec have special \"response_processors\" field with list of available processors and their options: \"header_injector\", \"response_body_transform\", \"header_transform\". \nCan you confirm if you are using \"response_body_transform\" processor?\nThank you!\n. Was fixed in 2.3.7, appologies for delay!. To be consistent rename this functions to btoa and atob - standard browser methods to work with base64. We do officially support them, after this PR.  I'm generally ok with this names, just do not forget to update documentation.. I provided example in another issue why base64 may be useful, and one of the customers wanted them. So I would make them public.. Well, :nerd_face: mode, atob and btoa functions is not a package of ECMA standard, and even v8 does not ship them, not talking about node https://github.com/nodejs/node/issues/3462. These functions are browser extensions.\nSo we are free to name them as we want, and do not break any rules :). @ilijabojanovic still ready to be tested :). Thank you for the feature request! Looks sane, and we will try to implement it in further releases!. @jfranx actually what you described, is already how our Hybrid solution works. We have a lot of organizations, and each hybrid customer only loads API's belonging to their organization. \nThis works because of what we call multi-data center bridge, or \"MDCB\", which is a closed-source component, and basically acts as RPC proxy, which handles this logic and way more. This is a part of our enterprise offering, and if you are interested in it, feel free to reach us using form below this page: https://tyk.io/enterprise-api-management/\n. Recent example: one of the users wanted to use base64 encoding inside middleware to make a HTTP request to URL protected by basic auth. Otto itself does not have such built-in function, so he had to embed it into middleware itself. \nSo, there are multiple solutions to this issue.\n1) Leave it as it is\n2) Hide Tyk specific stuff into the string, and bundle to binary, and add an alternative solution for loading external code: for example load all files in js directory. \n3) Hide this stuff as in step 2, and tell user embed all needed functions right into the middleware. \nIn my view, 3) is easiest to support and maintain. . Note that this task will probably require tuning our release script, so it will stop including this file into distribution. . This is quite common in modern APIs to use this approach, and here is a nice description: https://myobie.svbtle.com/how-we-allow-any-request-to-be-safely-repeated-at-anytime-for-wunderlist\nI assume that basic idea is that even if upstream API does not support request-id feature, Tyk can augment this functionality on top of it. \nSo the basic plan is to have a new option which specifies request-id header name, and if it is non-empty, Tyk will remember requests with this ids (if response was 2XX), and if a new request with the same ID comes it, it gets rejected with 409 Conflict.  It should work with both Redis and RPC mode, including MDCB. . Just an addition to the message above. I assume we need to introduce 3 options here block_duplicate_requests, request_id_header, and duplicate_request_expire. . I think it still make sense load first API without a prefix. Because otherwise it is really easy to fuck up. Imagine that you have working production API, and someone creates a duplicate, and production API stops working because path changed. \nYou, know I realized that there is more consistent way to sort this specs. First of all it should check if spec are currently already loaded by Tyk, eg. working API, prioritize it, and count rest as duplicates. After it should sort by mongo ID: its first 4 bytes is a unix timestamp, so it acts as \"created_at\". If mongo id is not available (file based mode), sort by whatever we have, like ID. \nMain idea that adding a duplicate by accident should not affect existing working API's. . Looks good, @ilijabojanovic goes up to you. \nShould be tested for both community and onpremise versions. \nBasic idea is that when we add an API with duplicate listen path, it's listen path should be updated with postfix \"-1\", \"-2\", ... depending on number of duplicates. If changes applied in live mode, eg. on running Tyk instance via API calls/dashboard, original API which was already running should not be affected. You can test this by setting different upstream targets.. Hello, glad to hear this!\nMutual SSL is on our roadmap for next major release https://github.com/TykTechnologies/tyk/issues/357. @matiasinsaurralde up to you. Looking at the code I see that loadApps can't be run concurrently because it gets called only inside doReload function, which we control, and listen which called only once.\nIf you confirm this as well, should be safe to merge.. Tyk abandons requests before CORS middleware adds its headers. Probably just need move this middleware before Auth checker.. @asoorm can you recap what is the current status of this task?. @matiasinsaurralde can you pls create an issue in Tyk repo, and describe how/when it happens. And if possible, add here some details on how to test it.. Yes, @ilijabojanovic pls check. @lonelycode can you add some examples on \"generalised metric counter\"? Not sure if I fully understand the concept. . @joshblakeley moving to 2.7\nThis is definitely should be done in a more generalized way. Its configuration file can look smth like:\n\"weight\": {\n   \"extract_from\": \"header\",\n   \"extract_from_key\": \"X-Rate-Limit-Weight\"\n}\nIn addition to \"header\", possible values can be \"response_size\", or \"response_time\". \nAdditionally, I'm not sure which object should own these settings. It really looks like Key and Policy attributes. And since we planning rate limits per path, this weighting can be extended to paths as well.\nIt feels like can be a big theme for a separate release.\n. @matiasinsaurralde do not forget to update \"Project\" of the issue, and move it though pipeline.. @matiasinsaurralde can we fix tests?. I'm right that this is similar to what we have now with Virtual Endpoints in our JS middleware?\nPreviously we already had option to add new headers, but with this functionality it is now possible to write any logic. Right?\nAlso, does it affect only Coprocess (Lua, Python) plugins, or gRPC ones too (because I see that you changed protobuffers files as well)? . Yeah, this looks ugly :(\nWhat do you think about making IsThisAPIVersionExpired receive request object and call GetVersionData by itself: eg. making it independent from isRequestValid. And more over move it out of isRequestValid scrope, and call this check separately in ProcessRequest function. \nIt should be ok, since IsRequestValid called only in one place. \n. Ok, lets continue with TODO. . @mvdan it was backported, I just cherry-picked it from release-2.3 branch to release-2.3.6-backport, it mainly acts as a checklist, so I will not forget anything.  It should be safe to merge.\n\nAlso, the ReturnOverrides commit is duplicated?\n\nI think you hit Github UI bug when I force-pushed this branch. Reloading page should fix it.. Adding milestone and label, because it may require changes in docs.. \ud83d\udc4d . @mvdan regarding your TODO. Unfortunately when we set route to \"/apis/keys\", gorilla/mux do not understand \"/apis/keys/\" path. So we have to do both.. I'm talking about your TODO comment added in this PR https://github.com/TykTechnologies/tyk/pull/796/files#diff-7ddfb3e035b42cd70649cc33393fe32cR307\nPreviously we had only \"/api/keys/\" route, and a lot of our users was confused because querying \"/api/keys\" (without trailing slash) did not work, so we added the separate route. . Right \ud83d\udc4d . @ilijabojanovic ready for testing. @mvdan for documentation and testing reasons can you list here all the changes made in this PR. I mostly mean list of paths and HTTP methods, and how http codes changed.. Well, you change lot of internal code, handling of HTTP codes, and move some of this logic to the router. And potentially /keys/* endpoint can have regression. . Hello! You probably mean not restrict, but mark some of the params as required?. You can help with planning phase if you want: define the scope of the issue, check what is currently missing in Tyk to make it work and etc. Is there anything we can re-use to implement this task faster, for example, jsonschema? Swagger definition by itself support this kind of attributes, but internal Tyk api definition not. \nIn addition to Gateway we will need to update dashboard as well, so we need to think about the UI.. @ilijabojanovic pls test that JS plugins still work. For some reason lot of conflicts here.. @matiasinsaurralde can you clarify a bit. From what I understand having tags that build things separately not that bad, main idea here is that we should ship this functionality in default binaries. \nCan this task be solved purely by our packaging scripts, and just including \"coprocess\" tag in all our builds by default?. Are you sure that it is not used? \nSee https://community.tyk.io/t/virtual-endpoint-config/1291\n. \ud83d\udc4d  merging since behavior does not changed. Looks good to me. Can you create an issue related to this PR and attach it to 2.3.7 milestone with needs documenting label, because we have no right docs for this feature.. Ah, right. @ilijabojanovic change is big, and you can start testing it. The dashboard comes soon.. @mvdan ready for you :). Needs to be fixed for JSVM as well.. Regarding TODO, organization limits apply only to quotas, it does not handle rate limiting. So should be good as it is.. TestSyncAPISpecsRPCFailure and TestSyncAPISpecsRPCSuccess both start RPC server, so this tests can't be run in parallel. \nWe can make it work, if modify startRPCMock to use random port. In theory changing gorpc.NewTCPServer(\":9090\", to gorpc.NewTCPServer(\":0\", should do the job. Feel free to apply the fix. . Stacktrace tells Cannot listen to: [listen tcp :9090: bind: address already in use], and this is the only place where we start server on this address.  Also note that there is test TestWriteDefaultConf which sets TYK_GW_LISTENPORT to 9090 (and actually should be smth like 8181), and forget to set this value back to defaults. So there is chance that we start our internal server on this port somewhere (depends on tests order).. It exposes port in Addr variable, and we already assign connection string like this config.SlaveOptions.ConnectionString = server.Addr. Right, I remember that it is why I set fixed port there. Not sure what is the best way to do it, maybe dig inside gorpc library to extract port.... Standard response code for this error is 503. Hiding is fine. I'm not sure about part which removes PUT and DELETE, because it breaks compatibility in 2 ways: different status codes and, which is more important, we not show a good error message. . @ilijabojanovic ready for testing in conjunction with https://github.com/TykTechnologies/tyk-sink/pull/10. Pls, fix the test. Looks good so far. Feel free to open backport PR as well.. Can you backport it as well?. Looks like your license does not support this amount of nodes. Check your\ndashboard ui nodes section, to see how many active nodes you currently have.\nOn \u041f\u043d, 3 \u0438\u044e\u043b\u044f 2017 \u0433. at 5:09, RajeshKumar1990 notifications@github.com\nwrote:\n\nThis is what i found from tyk-gateway.stderr\ntime=\"Jul  3 06:12:56\" level=error msg=\" --> Response was: {\\\"Status\\\":\\\"Error\\\",\\\"Message\\\":\\\"No nodes available\\\",\\\"Meta\\\":null}\\n\"\ntime=\"Jul  3 06:13:00\" level=error msg=\"Failed to register node, retrying in 5s\"\ntime=\"Jul  3 06:13:00\" level=error msg=\" --> Response was: {\\\"Status\\\":\\\"Error\\\",\\\"Message\\\":\\\"No nodes available\\\",\\\"Meta\\\":null}\\n\"\ntime=\"Jul  3 06:13:01\" level=error msg=\"Failed to register node, retrying in 5s\"\ntime=\"Jul  3 06:13:01\" level=error msg=\" --> Response was: {\\\"Status\\\":\\\"Error\\\",\\\"Message\\\":\\\"No nodes available\\\",\\\"Meta\\\":null}\\n\"\ntime=\"Jul  3 06:13:05\" level=error msg=\"Failed to register node, retrying in 5s\"\ntime=\"Jul  3 06:13:05\" level=error msg=\" --> Response was: {\\\"Status\\\":\\\"Error\\\",\\\"Message\\\":\\\"No nodes available\\\",\\\"Meta\\\":null}\\n\"\nThis is found in tyk-dashboard.stderr\ntime=\"Jul  3 06:15:06\" level=error msg=\"No nodes available\"\ntime=\"Jul  3 06:15:10\" level=error msg=\"No nodes available\"\ntime=\"Jul  3 06:15:11\" level=error msg=\"No nodes available\"\ntime=\"Jul  3 06:15:15\" level=error msg=\"No nodes available\"\ntime=\"Jul  3 06:15:16\" level=error msg=\"No nodes available\"\ntime=\"Jul  3 06:15:20\" level=error msg=\"No nodes available\"\ntime=\"Jul  3 06:15:21\" level=error msg=\"No nodes available\"\nMay i know why it says no nodes available.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/TykTechnologies/tyk/issues/849#issuecomment-312533925,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAA2uV0Wh3sCY93jBVaUXq7VShn0aaPjks5sKE1igaJpZM4OLLTU\n.\n. It will dynamically call any backend it currently uses, so not only start-up status.. @ilijabojanovic pls verify that fix working and no regressions. Can it be related to https://github.com/TykTechnologies/tyk/pull/714 ?. Feel free to backport. Are there any changes we can use somehow, even potentially?\n\nAlso User-Agent line looks supricious, will it still be proxied?\n. Fair enough \ud83d\udc4c . Thank you!. @matiasinsaurralde can you think about the easiest way to solve this issue?\nIn my view it can be quite easily solved by replacing \nreturn errors.New(\"Key not authorised\"), int(returnObject.Request.ReturnOverrides.ResponseCode)\nwith\n```\nerrorMsg := \"Key not authorised\"\nif returnObject.Request.ReturnOverrides.ResponseError != \"\" {\n  errorMsg = returnObject.Request.ReturnOverrides.ResponseError\n}\nreturn errors.New(errorMsg), int(returnObject.Request.ReturnOverrides.ResponseCode)\n```\n@tumluliu do you think it should be enough?. @lonelycode do you have any objections over such patch? . Made change via Github UI \ud83d\ude48, will squash.. Let's try to backport it as well. Maybe instead of automatic merge better to do it manually.. ^ conflict. So you backported commit by commit, or by overall diff? \nAsking because in first PR you backported CloseNotifier support, and in this PR it was kinda removed and replaced by new version.. @matiasinsaurralde can we included this in 2.5? What is the state?. I'm going to close it because it is too old. . Can you clarify a bit, which exactly protocol does not supported by Tyk? \nLooking at the docs I see that https://docs.docker.com/swarm/discovery/ for Swarm you can use either Consul, Etcd or ZooKeeper, and all of them supported by Tyk. \nSee https://tyk.io/docs/ensure-high-availability/service-discovery/examples/ and https://tyk.io/docs/ensure-high-availability/service-discovery/\nBasic idea is that Tyk can work with any service discovery which provides data in JSON format, and examples described above, is just list of rules on how to parse this JSON.. I see what you mean. Well, we indeed do not support this yet. But from what I understand one of the main ideas of Swarm is to get away from service discovery tools like Consul. Swarm provides built-in DNS server, and you can just give this DNS address to Tyk and allow Swarm load-ballance by himself. And if you need more control, put proxy like nginx to do the job. \nBut frankly I do not have enough information, so can only speculate on this. . Thank you for the reporting!. @mvdan yeah, basic idea is that plugins/bundles are downloaded from the URL defined in API definition. Right now it allows only \"HTTP\". . @matiasinsaurralde if you want to backport it to upcoming 2.3.8, pls handle backporting, and documentation part. . Assigned milestone. Make sense.. As an alternative, we may just add \"context\" attribute to request object itself. By doing this way, even gRPC plugins will get support of this feature.. @matiasinsaurralde I would like to make it in more generalized way:\nEnvironment variables prefixed with TYK_CONTEXT, should be added to the actual tyk_context object in mw_context_vars.go, and JSVM and gRPC plugins will be able to access whole tyk_context object (and maybe modify it). It will probably mean new field in middleware objects.. @matiasinsaurralde bump ^ should be pretty straightforward to implement. \ud83d\udc4c . Make sense. Worth noticing that we sort of solved this issue if you are using Dashboard. We have jsonschema for the API definition, and if you try to submit broken definition to Dashboard API, it will give you the list of meaningful errors. Probably make sense implement the same thing in Gateway.. Just to clarify, Dashboard is not just a GUI. It is more like an API to control distributed gateway cluster. And UI itself it just built on top of this API. A lot of our clients use dashboard headlessly via API, and include it to CI/CD cycle. \nHere is JSON schema file we use at the dashboard.\nhttps://gist.github.com/buger/0a11b20ab3e44b5535c25cf96169656b\n. We do, but can't give you any ETA yet. Next milestone is very dense. . Thank you! This indeed looks like a bug. Community version should not require id in such format. . Thank you for reporting!. In my view, if we can not restrict user on value types, this will be the best option.\nIn theory, it can be fixed with smth like fmt.Sprintf(\"%v\", tempVal) instead of direct type conversion.. Why not remove it from auth_manager.go as well?. Is there any difference between rate limit and auth usage? My main point that, in my view, they look almost identical. And if it is redundant here, it probably can be removed from auth manager as well. . Make sense! I added this to the milestone.. Actually, I believe it should work. Can you provide an example of how you trying to use it?\nhttps://tyk.io/docs/security/your-apis/openid-connect/\nhttps://tyk.io/docs/transform-traffic/request-headers/\nExample of using it when rewriting headers\n\"global_headers\":{\n                    \"X-Static\": \"foo\",\n                    \"X-Request-ID\":\"$tyk_context.request_id\",\n                    \"X-Path\": \"$tyk_context.path\",\n                    \"X-Remote-Addr\": \"$tyk_context.jwt_claims_oci\"\n                }. As you can see, instead it should be prefixed with \"$tyx_context.\". See my example.. Moving to 2.7 (considering that #1453 will be fixed asap). And scope of this task should include CoProcess plugins too. . @bitsofinfo what if you change your regexp to \"/([^/]*)/(_search|_count)\" ?. Can you pls provide logs when TYK_LOGLEVEL env variable set to \"debug\". Yes, it should be visible to the gateway process.. Added to 2.3.8 \ud83d\udc4c . Note that it need be ported torelease-2.3` branch. We do not change build scripts too often, but keep in mind.. @excieve looks good! Pls, prepare similar change for the dashboard. \nThanks!. @ilijabojanovic list of files/folders which should not be updated on package upgrade:\n/opt/tyk-gateway/apps\n/opt/tyk-gateway/templates\n/opt/tyk-gateway/middleware\n/opt/tyk-gateway/event_handlers\n/opt/tyk-gateway/js\n/opt/tyk-gateway/policies\n/opt/tyk-gateway/tyk.conf. @ilijabojanovic ^. Google Cloud docs for their own feature https://cloud.google.com/endpoints/docs/grpc/transcoding. I made some research and found that its actually doable to implement both GRPC -> GRPC, JSON -> GRPC and GRPC -> JSON proxying without Go plugins, by dynamically reading Protobuf definitions. And looking at how it works, this is how Google and Envy does it https://www.envoyproxy.io/docs/envoy/v1.5.0/api-v2/filter/http/transcoder.proto.html#envoy-api-msg-filter-http-grpcjsontranscoder\nBasic idea that it is possible to generate language agnostic \"pb\" file which contains everything needed to parse protobuf message, using thedescriptor_set_out argument of protoc: protoc -I$(GOOGLEAPIS_DIR) -I. --include_imports --include_source_info \\\n--descriptor_set_out=proto.pb test/proto/bookstore.proto\nNext, ProtoBuffer provides API to dynamically load messages if you have such \"pb\" definition, example below in Java, but doable for Go too:\nFileInputStream fin = new FileInputStream(\"test.pb\");\n    DescriptorProtos.FileDescriptorSet set = DescriptorProtos.FileDescriptorSet.parseFrom(fin);\n    Descriptor md = Descriptors.FileDescriptor.buildFrom(set.getFile(0), new  Descriptors.FileDescriptor[] {}).findMessageTypeByName(\"Person\");\n    return DynamicMessage.parseFrom(md, data);\nhttps://stackoverflow.com/questions/4035027/generic-parsing-of-pb-in-java\nThe basic building blocks here is DynamicMessage and findMessageTypeByName, where you specify the name of the current protobuff class. Once you have this DynamicMessage you can iterate over its fields and do whatever you want. More over, this \"pb\" file can even be stored inside API definition, and uploaded by user via dashboard. Similary you can create object of any type, definited in \"pb\" file, only by knowing its name, e.g \"selector\".\nThe next part is configuring selectors on Tyk side, where we map objects to urls. And if we look at Google approach they provide 2 options to do this, 1) inside proto file 2) inside separate yaml config.\nOption 2 is exactly what we looking for:\nhttp:\n  rules:\n  ...\n  #\n  # 'GetShelf' is available via the GET HTTP verb and '/shelves/{shelf}' URL\n  # path, where {shelf} is the value of the 'shelf' field of 'GetShelfRequest'\n  # protobuf message.\n  #\n  # Client example - returns the first shelf:\n  #   curl http://DOMAIN_NAME/v1/shelves/1\n  #\n  - selector: endpoints.examples.bookstore.Bookstore.GetShelf\n    get: /v1/shelves/{shelf}\nhttps://cloud.google.com/endpoints/docs/grpc/transcoding#configuring_transcoding_in_yaml\nJSON -> GRPC\nTyk can use exactly the same approach, as google does and you assign \"GRPC plugin\" to endpoint, where you specify \"selector\" of your protobuf definition. Since you know object type, you can create protobuf message based on JSON input and forward it to GRPC server. More over, you can just use body transform, to turn user input into GRPC supported JSON format. API should know if upstream is grpc, but it is quite easy to do, by supporting \"grpc://\" protocol format inside upstream urls. \nGRPC -> GRPC\nGRPC itself uses HTTP/2 transport, and @josh already doing HTTP2 evaluation, so we can officially support it. Protobuf format itself use headers to indicate method name, and we can just use advanced url rewriter on top of it, and route this requests to \"loopback\" which will do additional logic if needed. Additionally, since it is HTTP based, all our auth modes should work well when Tyk put on top of GRPC. \nGRPC -> JSON\nNot sure how it is useful, just comes as a bonus. Since you have access to parsed protobuf message, you are free to serialize it into JSON, and advanced url rewrite like mentioned in previous step, but in addition use body transform plugin, which will know that input is GRPC, will serialize message to JSON, and you can use body transform to modify it as you want, and send to standard http endpoint. . I think the easiest solution here is to make tyk_js_path config option support directories. So instead of pointing to js file, it will point to a directory and load all of the JS files it can find. . It is actually a bit weird that timeout is 10s, because it should be 30s by default. The only 10s I see is the TSL handshake timeout, but it can happen only if smth wrong with SSL on the other side, not request timeout itself.\nhttps://github.com/TykTechnologies/tyk/blob/release-2.3/tyk_reverse_proxy_clone.go#L316. It is quite easy to test using http://httpstat.us/200?sleep=300000 (5 minutes).. Actually, I think this feature should be implemented on the Tyk Pump side as a separate pump.. Closing in favor of https://github.com/TykTechnologies/tyk/pull/984. Note that I just backported master changes. Basic idea is that now instead of setting \"handler\" to the server, it sets DefaultServeMux. Right, so the way to fix the issue define single sorting function SortableAPISpecListByHostAndListen, which will sort by both params. . You can have APIs on the different domains, but with same listen paths.. Right, I see what you mean now. So since host names bind to separate domains, there can't be any listen path conflict between them apriori. So this check is redundant. . @marksou ^. HTTP method support was added for both Coprocess and JSVM plugins in 2.4.3 \ud83d\udc4d . Not there yet, but will be in 2.5 https://github.com/TykTechnologies/tyk/pull/1422. Logs formatting in logrus achieved by Formatters, it can be JSON or plain text formatters by default, but can be extended. By default logrus outputs to its Out, but if you add hooks, it will output to both Out and all of the hooks. I checked logrus API, and can't find a way to iterate through list of Hooks and write to them directly. In addition you can't dynamically change Formatter of the logger. \nBased on that, I implemented the second logger, with custom raw formatter, because it is the only way to idiomatically implement needed functionality.\nRegarding tests output, I will push a fix which uses local RawLog variable, same as Log one, so it will write to the buffer in tests.\nAlso, note that you use custom JSVM logger only in tests, on production it use our global logger. And in addition, logrus is thread safe.\n. We already have ProxySSLInsecureSkipVerify flag in configuration, and probably it makes sense TykMakeHttpRequest to respect it. . Make local /etc/hosts record with valid domain name specified in the certificate?. @bitsofinfo will be addressed as part of 2.4.2, coming next week. Looks good, but this functionality is a perfect candidate to be covered with unit tests. . @lghiur you can start testing this branch with your PR.. @mvdan what is the latest status of it, issues fixed and ready for a new QA round?. @excieve feel free deploy to stage and confirm that it fixes your issue. . @excieve i see issue with deploy, any details on this PR?. Nice, happy to see your library in the wild :). \ud83d\udc4d ready for testing. \ud83d\udc4d \n@ilijabojanovic ready for testing. tests?. bump. Because initially I thought it will be for 2.4.1, but it depends on refactorings I do not want to backport. So moved from 2.4.1 to 2.5. . What if just add new AnalyticRecord field, which contains new value?. Can you pls link original issue or forum post?. @bitsofinfo this was merged long ago . I assume this it 2.4 ?. Coprocess part was implemented in terms of https://github.com/TykTechnologies/tyk/pull/763. @matiasinsaurralde just to clarify, it was fixed for JSVM too? And if so, can I see some examples?. @matiasinsaurralde if you can provide the sample, we can update docs. Thank you!. Sounds exciting! Can you add some of the documentation here, as a comment. . @mvdan do you want to add smth here? \nFor sure there some rough edges, like code duplication, but overall looks nice. And functionality introduced here can be very powerful. Would like to merge it soon and include into 2.4. Probably the most dangerous part here is jq bindings, they are in the early state. It uses CGO, and it needs to be verified for thread safety. The good thing here, that this binding should be fast because operate directly with C structures. Bindings code is very tiny, so it should not be a problem to solve bugs. Anyway, I would treat this feature as experimental, for 2.4, similar as gRPC bindings. \n@klyr any reason why you are using your own fork?. Apologies for such delay, this feature is finally ready to be included in 2.5. I requested some final changes, but we can do it by ourselves if needed.. @klyr I would love to see your changes! Any updated on this?. Sure, let's close this one in favor of new one. Feel free to open a new PR. Thanks!\nWould love to get it merged in 2.5.. You are right field was added to the docs, but description itself not. \n@marksou we need to extend JSVM guide with return_overrides example similar to what we have in python guide https://tyk.io/docs/customise-tyk/plugins/rich-plugins/rich-plugins-work/#returnoverides\nExample code:\n```\nvar testJSVMData = new TykJS.TykMiddleware.NewMiddleware({});\ntestJSVMData.NewProcessRequest(function(request, session, config) {\n    request.ReturnOverrides.ResponseError = \"Foobarbaz\"\n    request.ReturnOverrides.ResponseCode = 200\n    request.ReturnOverrides.ResponseHeaders = {\n        \"X-Foo\": \"Bar\",\n        \"X-Baz\": \"Qux\"\n    }\n    return testJSVMData.ReturnData(request, {});\n});\n```. See #documentaton slack room. Documentation in process, and once done, matias will send a link. I do not like merging it as a PR, maybe @lghiur can make this change locally in this own branch?. It will not help @ilijabojanovic as well because this change does not fix the issue, just ignore it on UI.\nIf goal is to release this feature, the only way it to fix origin issue.. Do not forget about https://github.com/TykTechnologies/tyk-identity-broker/issues/9. So Start() is not blocking, right?. Treat this message like a notification. But yeah, we should improve it.. conflict ^. \ud83d\udc4d . nice find \ud83d\udc4c . Thank you! \nHow do you think it should work/look instead?. @lghiur needs your input here. Yes, looks good, @ilijabojanovic pls test. How it fixes the issue? Before and after it use router newServeMux.Handle(\"/\", defaultRouter), and router code handle SkipClean option.. I think the actual issue happen on this line https://github.com/TykTechnologies/tyk/blob/release-2.3/main.go#L738\nWhen we assign new router but do not set SkipClean option, so after first reload, this functionality gets disabled. We should add smth like this to doReload:\nif globalConf.HttpServerOptions.OverrideDefaults {\n   mainRouter.SkipClean(globalConf.HttpServerOptions.SkipURLCleaning)\n}. Closing in favor of https://github.com/TykTechnologies/tyk/pull/1105. I think you need to add compatibility layer. A lot of our users already have code embed into tyk.js, and after upgrading the app will break. I propose to leave config option, and if the file in such path is found, load it.\nActually maybe make sense transform this task, by saying that all the built-in tyk functions is embedded to our JS code, and all the global JS functions, can be specified in tyk.js file. So this is similar to what I proposed in #739 \n\nHide Tyk specific stuff into the string, and bundle to binary, and add an alternative solution for loading external code: for example load all files in js directory.\n\nThis makes code both compatible with previous versions, we move our internal code into binary, and user has official option to set his global funcs.. Well, we should do it backward compatible, there is no another option here. The only place where we can drop tyk.js support is version 3. So my proposal was on how to get benefits from this situation.\nHaving an old code in Tyk.js is not a problem if we first load tyk.js and after our internal code: it still will use newest code.. > I'd still load our core first, because otherwise, it would be impossible to use it in js/tyk.js, potentially breaking people's code.\nYes, you are right. But we still need to load it.. bump . @ilijabojanovic ready for testing. \nThe basic idea that we are removing  \"js/tyk.js\" file from our distribution, and do not set tyk_js_path default config value. We still support loading Js files through tyk_js_path config variable, and our previous users should not have compatibility issues since they have old configs. \nAll the code loaded from file specified in tyk_js_path should be accessible to all JS middleware, and the easiest way to test it is to create function with like this: function foo(){ return \"bar\" } and use it in VirtualPath. @ilijabojanovic this pr is getting old :). ^ conflict. Fixed comments. Looks good! \nHowever, I'm not sure what \"Step 3\" with adding custom option does, and why it is needed https://github.com/TykTechnologies/tyk/blob/f07bd7ab0c7312b52258a3755875ef5712d1698e/plugin_build/README.md#step-3-add-a-custom-option-to-the-proto-file\nIt defines mapping between gRPC method and proxied URL, right?\nIf so, seems like bakery don't do it, and readme should mention that this step needed even with bakery. . @matiasinsaurralde pls do the QA of this task. Once you confirm that everything works, can be merged.. Long awaited change! \ud83d\udc4f . ^ conflict. @mvdan what is the best way to merge it (note that it is for 2.5 not 2.4). Hello! \nThank you for a great work! \nLooks good so far, and make sense. I think that for consistency reasons, it should check not only \"global_remove_headers\", but also per \"path\" configuration: \"versions.extended_paths.transform_headers\". Imagine if you are refactoring your code base, and splitting monolith to microservices, and replace urls one by one: in this case you will want remove this header only from few urls (which, for example, point to custom API Gateway upstream urls).. @mvdan what do you think? . @danp3d are you still here, and willing to do the last changes?\nif you do not have time, just tell, and we fix it by our own.\nThank you!. Perfect! Will be included into 2.4. Well, first of all, it is not right to compare MDCB with this project. Note that MDCB is not a k/v database. In addition it does not allow you to have the multi-master configuration. The goal of MDCB is to control multiple data centers with a single dashboard, and in addition, in case of failover, seamlessly switch from one DC to another. Usually, when you want to have multi-master, the main issue becomes a latency between DCs', and your application logic (not only gateway) should handle it somehow. \nIf we talking about Redis replacement, Tyk internally use https://github.com/TykTechnologies/tyk/tree/master/vendor/github.com/lonelycode/redigocluster/rediscluster (which is a fork), and probably \"CLUSTER INFO\" issue can be solved by not calling this function if \"isCluster\" set to false https://github.com/TykTechnologies/tyk/blob/master/vendor/github.com/lonelycode/redigocluster/rediscluster/rediscluster.go#L74 (feel free to open PR).\nWith PubSub (SUBSCRIBE), it will be harder. Tyk depends on it a lot, and the whole cluster keeps itself in sync thanks to pub-sub communication. If Dynamo do not support it, Tyk can't work with it.\nIf your DC's not located in different parts of the world, maybe you can consider using Redis Cluster, it is a quite mature project.\n. ^ conflict. @ConsM it is ready for building the UI on top of it. @lonelycode why are you using map[string]interface{} here? Don't you think using just array of headers will be enough? Not sure what is the purpose of map.. It's not about performance, it's more about API definition design. Map values here do not play any role, at least from what I see.. Well, in fact, slices are faster than maps when number of items < 10 :)\nRight now to me, this looks kind of ugly and complex. How would we understand the user in the documentation that value argument of the map means nothing? If the feature is not obvious to use, it becomes very confusing. \nI would say that if we want such advanced logic, it would make more sense exposing new context variable/array, which represents custom tags, and can be set via middleware. . If you going with using array of objects, it is a perfectly safe to use plain strings right now and when we want to introduce objects, update string type to interface{} and do some simple type checking. . Thank you! And sorry for being too picky \ud83d\ude48 \n@ConsM pls continue with the UI. @ilijabojanovic ready to be tested. Feature consist of 3 PRs: this, TykTechnologies/tyk-analytics-ui#171 and TykTechnologies/tyk-analytics#438\nGo the advanced tab in API designer, header tags section. Add some tags, some of them should match header names, some not. Next, if you have header tag X-Custom-Header, and you make a request to your API with this header, its value will be extracted and turned to tag in analytics. So when you go to log browser, you will see smth like x-custom-header-<value>. . What you describe here is a bit vague. We do handle upstream errors using different mechanisms. \nFirst of all, you can specify multiple upstream, and we do the health checks to them from time to time: if the host is down we exclude it from the list unless it healthy. \n\nIf we talking about service discovery, Tyk should not add own logic here, because health checking is the responsibility of service discovery service. \nAdditionally, you can add \"Circuit Breaker\", to temporary disable certain endpoint (recovery time), if certain number of errors found https://tyk.io/docs/ensure-high-availability/circuit-breakers/. What you described here is exactly what we have for round-robin load balancing, which I mentioned as first thing in my comment. Are you sure this is not available for the cloud users?\nAnother option for this customer is to use external load balancer like AWS Elb or even nginx, to perform all this logic, and point Tyk to use LB endpoint.. So, we already have LB support with periodic checks.\nI assume that @MangoMM means in case of issue retrying without any checks, with the different upstream target, which is next in the list. Right?. Worth noticing that retrying request is a very tricky since a lot of requests are not safe to retry because they can modify application state, and error not always comes because the host is not available, same with timeouts (sometimes they are kind of ok, just require timeout tuning).  \nWhat can be done, in case of failure we may notify GlobalHostChecker about it, so upstream failure will be triggered earlier, but it still requires having Host checker feature (it depends on Redis), and it is not available for the Cloud (but Hybrid is ok). . Thank you for reporting! . Nice! \n@lghiur @nickReyn UI for this feature can be non-obvious, and require planning. . There is no dashboard API needed here. The example you see here is part of API definitions url_rewrites object, mentioned by you.. Will check. @lghiur works fine for me. How do you run it, using dev env via docker?\nFor some reason, it does not see changes in \"apidef\". If you trying to use this new fields in dashboard, you should govendor new apidef package changes. \nGoing to merge this server-side PR.. @mvdan can you pls take a look?. Not sure what you mean by encryption here. Instead of sending key, we can send link with a secret ID pointing to the portal, and key will be shown only 1 time, in portal UI. . \ud83d\udc4d  Congratulations with the first contribution :). Actually, good point, missed it. At least one argument resp or err should be non-nil... Created for https://github.com/TykTechnologies/tyk/pull/1044. @lonelycode you need include task number to issue comment not header, to make links work. Maybe just include it into loadAPIEndpoints ?. My main point here that it is a internal admin api, and it should be ok expose it to control api router.. Should be fixed by https://github.com/TykTechnologies/tyk/issues/1379 in 2.5.X. Looks good, ready for testing. Can you pls clarify your issue?. I understand why you decided doing it base64 (in order to avoid problems with mongo), but it is terrible UX for the users both community and, what most important, people use use API. I would say that valid solution to this trouble, is to re-architect our mongo API storage, and store whole definition as json string: there are no use-cases which needed to quering api difinition internal fields via mongo queries, except api_id, api_name, or org_id fields, which can be denormalized into separate fields. As alternative, we can add small layer to Dashboard Mongo storage, which ensures that some of the keys will be serialized to base64 on write, and deserialized on read: but all this stuff will be hidden from user and UI, and when user retrieve or put data via API, it will be simple JSON for him. \nAlso, I think OpenAPI (swagger), does the better job of supporting json schema, see examples here http://bigstickcarpet.com/swagger-parser/www/index.html. In addition to body validation, it also validates URL params. If we going to improve our support of OpenAPI, I think it makes sense follow similar patterns.\nTo recap: \n Move base64 logic to dashboard side, and keep everything in json\n Rename validate_with to smth like body_schema. Well, I'm not sure why this PR was closed, I definitely not meant this.\nPoints described by me here is a standard code review, and my responsibility is to ensure that everything will be done the right way. My point was to raise these important topics and discuss them.\nI think the main difference in our thinking here is that you originally treat schema as a blob, and I as a part of API definition, similar to how Swagger does it: schemas have quite different nature then middleware and virtual path. \nIt is not \"no brainer\" feature, because it touches a lot of people in our team and a lot of developers who will use it. This feature is VERY useful, and potentially can be used A LOT. So thinking about developer user experience in this particular case is a top priority for me. Moreover, it appeared without any planning and out of milestone.\nWe can definitely start with something small, and continuously improve it, but we need to choose the right defaults. I think no one argues that showing base64 fields inside API definitions is a bad smell (but storing is ok), and at time it was added it was ok. But looking at the future, we can do better.\nIf we think about future of this feature in terms of UI, I would say that at the start it probably should be the raw text field, with JSON syntax highlighting, but in future, it would be nice to have visual editor to control each attribute and its type.\nRegarding mongo data storage format, I proposed 2 different solutions. I agree that going with storing the whole API as JSON string would be too much. But writing some glue code to deal with internal complexity, is totally ok. Moreover, we already have code on the dashboard which handles json -> base64 encoding and decoding for \"Versions\" field. So we already do it like this.\n```\n// Clean will URL encode map[string]struct variables for saving\nfunc (a *APIDefinition) EncodeForDB() {\n    new_version := make(map[string]VersionInfo)\n    for k, v := range a.VersionData.Versions {\n        newK := base64.StdEncoding.EncodeToString([]byte(k))\n        v.Name = newK\n        new_version[newK] = v\n    }\na.VersionData.Versions = new_version\n\n}\nfunc (a *APIDefinition) DecodeFromDB() {\n    new_version := make(map[string]VersionInfo)\n    for k, v := range a.VersionData.Versions {\n        newK, err := base64.StdEncoding.DecodeString(k)\n        if err != nil {\n            log.Error(\"Couldn't Decode, leaving as it may be legacy...\")\n            new_version[k] = v\n        } else {\n            v.Name = string(newK)\n            new_version[string(newK)] = v\n        }\n    }\na.VersionData.Versions = new_version\n\n}\n```\nIn case of this task, it will just mean addition simple additional logic for schema field. \nI'm going to re-open this request.. Closing in favor of https://github.com/TykTechnologies/tyk/pull/1343. Looks good. @ilijabojanovic when you perform full 2.4 integration testing, do not forget to include OpenID testing, oAuth, and simple JWT one. . coverals ok?. Add additionalProperties: true to the root and all nested object to enable typo validation.. Got it. As the first draft looks neat, but I would still prefer having all the possible fields we have in configuration within this PR, and typo check enabled by default. Because this is one of the most common errors. \nAlso, do you think it makes sense move schema data to the file, and embed it using go-bindata? Asking because we potentially integrate this functionality to all our components, so schema should be customizable. This is not scope of this PR, but just discussion for the future. . Well, most of the stuff here is done, so the rest is checking all attributes one by one, and ensuring that they are in jsonschema. We still have time for development of this issue, so I prefer to wait.\nAlso, have you tries automatically generating schema from GO type https://github.com/alecthomas/jsonschema ? Looks nice and using \"definitions\", like it does, may simplify schema.\nRegarding embedding schema to code, let's continue this discussion when we going integrate it into different components.. I more mean use it to generate initial JSON schema, not using it in runtime.. Nice! \n@ilijabojanovic ready for testing. @mvdan can you pls update description with the original issue ID, and what features needs to be tested.. @ilijabojanovic can you pls test one more time. @ArturoSerrano it is going to be included for 2.5, but wait for a person who responsible for the plugins: @matiasinsaurralde \nThank you!. What if we dump config_data into json string, and will pass it like string key. \nIt will make things more compatible and consistent. \nWhat do you think?. @ArturoSerrano @matiasinsaurralde so, what do you think about my proposal, or it is not worth doing?. @matiasinsaurralde your thoughts?. Closing in favor of https://github.com/TykTechnologies/tyk/pull/1347 \nWill be included in upcoming 2.5. Bump. @matiasinsaurralde so, it looks like we need extend our protobuffers file, and include this field. . Was implemented in 2.5. This is fixed in 2.4 which going be released in the next few weeks. @javi830810 is it possible for you to verify that #1231 fixes your issue?. @matiasinsaurralde prepared uber fix for lot of bundler issues, which should handle this leak too. @javi830810 it will be really helpful if you can confirm that https://github.com/TykTechnologies/tyk/pull/1260 fix your issue. Thanks!. Closing in favor of #1260 . API search is planned for 2.5. @ConsM it feels like we fixed this bug in 2.4, can you pls re-check?. @matiasinsaurralde you need to made same PR for master too?. @matiasinsaurralde Keeping it open so you would not forget merge it to master. This fix contained breaking changes required users middleware files be named middleware.py, so lot of user middleware broke. Trying to find solution which is cross compatible.. Thank you for reporting!\nWe are going to fix it in 2.5. already merged. Looks good. Do you think we really need addFormats function? gojsonschema.FormatCheckers is the singleton anyway, so maybe just call gojsonschema.FormatCheckers.Add inside init function, or similar?\nFor the reference, there is alternative way to define custom error messages by overloading gojsonschema.Locale object like described here https://github.com/xeipuuv/gojsonschema\nUntil we have lot of custom message current realization is ok.. @excieve can we extend package cloud to do this? Right now we have packages only for trusty and precise. @dragon28 even now you can download deb file from here and install it manually https://packagecloud.io/tyk/tyk-dashboard. @lonelycode plan looks sane. The only addition that listing hashed keys should be explicitly allowed in tyk config, and disabled by default, since it can be safely enabled only for single org installations. . For the Dashboard:\n- add an additional checkbox \"Hashed key\" on API search screen.\n- when viewing hashed key info, the form should be read-only (updates be protected on API level as well)\n. @dencoded assigning to you, pls implement GW and Dashboard API side.. Well, in fact, changes needed to be done are very simple, the first stage can be just adding an additional checkbox on API search screen, called \"Hashed key\". When turned on, and when you put key id/hash to search box, it will add \"hashed=true\" query param when calling /apis/:apiId/keys/:keyId endpoint.\nThe rest of changes, when we need to disallow hashed key updates and etc, can be done via server side errors.. @ConsM can you make this change?. This change covers b). \na) Log browser already should list all tags attached to the current session. The logic here is that analytics record tags field, which is displayed in UI is constructed by appending all the following tags below:\n1) key tags\n2) custom header tags - https://tyk.io/docs/tyk-rest-api/api-definition-objects/custom-analytics/\n3) Config related tags  (for example all hybrid requests have tyk-hybrid-rpc tag)\n4) key-X, org-X and api-X\n@nickReyn do you remember if we have tasks for making key hashed clickable in log browser? and for c) ?. @bitsofinfo can you try directly querying Gateway API to get this key (do not forget adding \"?hashed=true\" to URL. Do you see any errors when you query like this?. > If duplicate API names are permitted, it may be worth showing both fields (name and api_id) in the dashboard to help differentiate here.\nLike it! If API has same names, detect it on UI and attach API ID, smth like API 1: <api-id>. Should work only for dropdowns. Same for the Policies.. @matiasinsaurralde what is the state of this changes? Do you think it is ready to be tested? Does it align with changes we made previously?\n(also pls rebase). @matiasinsaurralde pls make it your priority it is too stale and need to get merged. Update from latest master: it contains real tests for plugins. And try to solve @ilijabojanovic issues. \nCoordinate with @excieve to make it compatible with his PR. @matiasinsaurralde bump. @matiasinsaurralde any updates on this? Can we configure our travis to run tests on both python environments?. @ilijabojanovic ? :). @matiasinsaurralde conflicts ^. @matiasinsaurralde bump. @ilijabojanovic ^. @joshblakeley pls rebase and solve conflicts. Looks good, will test it during 2.5 integration testing.. I will close it. Feel free to re-open if PUT wont work for you.. We plan to implement API search user interface in 2.5, and this issues should be solved.. @mvdan Transport object is responsible for managing all the connections and doing requests. If we talking about pool, you can control it using MaxIdleConns and MaxIdleConnsPerHost options, which we also do..  Well, we definitely need to QA performance for the GW, but probably for the whole master. So merging now.. Thank you for reporting!\n@jacyo by hot restart you mean reloading tyk.com config file?. What are your operating system, CPU architecture, If you are using docker or not, and etc. Basically, anything which can help us to replicate the issue.\nThank you.. Moving to 2.4.1. it is broken from 2.3.2?. Moving to 2.4.1. @matiasinsaurralde pls go back to this issue. @matiasinsaurralde bump :). @matiasinsaurralde indeed weird, try to check 2.4 branch on GitHub. \nIf it is not in 2.4, estimate how hard is to add them, and maybe it just make sense remove them from all the configs and docs.. Released as part of 2.7. I think you meant MDCB release?. I created new milestone 2.3.13. It also should include fix for DRL on low rates.. Key request event needs access to the developer object. I think it makes sense add all permutations to this test, using smth like this https://play.golang.org/p/Ulyo1H2Bii\nBasically mix them up, in all possible orders. Also, I would suggest adding sub urls, like /ab/a /ab/c and etc.. I wonder if it is more convenient to put this code directly to auth key middleware.. Looks good. @ilijabojanovic ready for testing.. @MangoMM will to help with merging to master?. @TimMcCauley right, so you probably mean quotas here. If so, yes, quotas will be the part of this issue too.. @TimMcCauley actually yes, this will be part of 2.8 which going to be released in a few weeks from now.. Nice! Pls create same PR for release-2.3 branch.. What tags did you used to build gateway?. @ilijabojanovic ready to be test. Just to clarify, you want to block requests which body size bigger than some value?. Got it, created internal dashboard issue, and milestoned . @excieve if you can make this work it will be great!. @excieve #1338 is merged. Do you think we should close it, or re-use, or you create a separate issue for compiling with different python runtimes for different OS?. Doing this will probably require making the query for each key, to get its details, but I assume doing this only for the current page with pagination should work, since amount of queries will be not THAT big, like 20-30 keys per page. It probably makes sense add a new endpoint to GW too, to fetch multiple keys at once. We need to think how to make it work from a performance point of view. . The issue itself happen because of the new formula which tries to make DRL more clear. Ajustement applied to the bucket token value, but instead should be applied to the rate limit value.. Fixed with #1300 . Looks good! Lets test together with UI part.. In theory extending current driver to support TLS dialer should be doable, however, needs investigation. However switching to go-redis sounds cool too, and we are planning it for a long time.. I pushed my changes. The previous fix not really worked because it always used the random port, and instead it should be using ListenPort. I think the real reason behind this issue is that goagain by design do not support multiple listeners, and when we called it twice, it just broke. \nIn addition, I applied goagain fix suggested by @jacyo and it should work for both Go 1.9 and Go 1.8 https://github.com/TykTechnologies/goagain/commit/e23361255278b7e2dcdfe6d1407191725340fa00\nNote that I could not make control API work if it set on a separate port, after fork, it just do not start litener. I do not fully understand the issue, but it is not the regression since it not worked on 1.3 branch too: control API on separate port is a new feature. \nWe need move to something like https://github.com/facebookgo/grace in future.. This is already implemented in upcoming 2.4, which going to be released at the start of the next week. \ud83d\udc4d . Well tests itself do not have any internal sleep or similar, so I assume it is related to the fact that cryptographic functions are slow by design, and generating certificates during tests can be slow. . Also I think that TLS handshake error messages are from Go internal library, not sure if we can mute them.. See the error in circleCI it fails on goimports check. . \ud83d\udc4c . Well, frankly I do not mind switching to 1.9 for 2.5, and this bug fix can go directly to 2.5, skipping 2.4.1. It is not that critical.. Should we close or at least rebase it?. I wonder if test logging like t.Log still works. Sometimes it is useful to add some debugging calls, but do not enable logging.. If there is a way to fix murmur hash and keep compatibility with old keys, let's try to do it.\nIn general, I would say that we need to make hash function configurable like this https://github.com/TykTechnologies/tyk/issues/509. Keep old behavior default, and introduce fixed one under new value. . Like it! I think it also make sense add dashboard option, to allow SSO login only for registered users. . https://github.com/TykTechnologies/tyk-analytics/pull/982 was merged to release-1.7 branch\nCreated via API. https://github.com/TykTechnologies/tyk-analytics/pull/982 was merged to release-1.8 branch\nCreated via API. @dencoded you spent quite lot of time on it, what do you think?. Got it.\nI'm happy to get rid of globals. Let's try to come up with the plan.. I would recommend you using git clone instead. But even in this situation just rename folder from 'tyk-2.4.0' to 'tyk'. @ConsM would you like to take a look? I prefer approach 1).. This is a small task and good for @ConsM, so yeah 1.5. Your ticket is about API behavior, it is a bit different. . This bug is fixed in master and already deployed to our cloud. Going to be included in the first  1.4.1 patch release.. /cc @excieve . Nice! \ud83d\udc4d . Don't you need to do same change in error handler (your original commit contained similar changes there)?\n. Nice! (I'll squash). race?. Btw, I simplified test a bit https://github.com/TykTechnologies/tyk/commit/a0772e584fd1a02fff426223f0bc2f0a8e8b9f6d. Fixed tests with adding additional timing, too many discussions for a such small thing :) \nI do not like this idea either, but introducing separate logic, which lives in production code, just to run the tests is a bad smell. And we for sure should solve this different way in future, by using of the suggestions above.\n@joshblakeley rebase from master, issue should be fixed. What about 3rd party python libraries. If they are installed via Pip locally, will they be available to our plugins if it statically linked?. @excieve I am right that changes introduced in this PR still can be useful to us even without static compilation? \nCan it help us increase compatibility with 3.5, and 3.6? \nMy main concern with this changes is compatibility issues. And the scope of this tasks becomes so much bigger, including adding own python packaging tools. Maybe we should think about plan B and ensure that our plugins work on most popular python distributions? Since now we have tests for coprocess plugins, it should be possible use CI to catch any inconsistency bugs. . I like how Plan B sounds. If we build this separate packages, can we ensure that each system will automatically get own packages? Does package cloud supports it?. Also can you update this PR to latest master, to resolve conflicts, so we can merge it.. Thank you for the report! It is definitely a regression.. Fixed with 2.4.2 \ud83d\udc4c . @joshblakeley bump. Do not forget that this feature should be added to the Dashboard as well, even if field will be hidden in UI. . It will be perfect you can add simple test covering websockets, because right now we have nothing. . Nice!. Nice! \nHowever, i see that it include a lot of refactorings, unrelated to NewRelic. Is it possible to extract only NewRelic part?. I also see that you were trying to solve bugs, caused by router reload logic. I think this is already fixed in our master in a similar manner, so maybe your custom changes will not be needed anymore.. In general looks fine, and it will go through our internal testing. The only thing that concern me is the RequestURI part which is not part of NewRelic change. \nI do understand why you added it, and I'm happy to merge it as a second feature (even in terms of this PR), but first let's clarify few things. Do you use it only for JSVM or for Coprocess plugins? I'm asking because JSVM implementation looks good, and coprocess one is a hack, and kind of require adding the new field to proto buffer object. I will create a separate ticket for adding field to coprocess request object anyway, but first, need to know in what kind of middleware you use it right now.. We definitely going include this functionality to 2.5, just need to properly implement RequestURI on coprocess side, but this change will be done by us. Will submit PR soon. . Merged manually https://github.com/TykTechnologies/tyk/commit/2580fd35b24be63e99433d6f8b777b61aa39a455\nNote that RequestURI moved from Metadata, to request object field https://github.com/TykTechnologies/tyk/pull/1391. Thank you for reporting, will try to fix in following bugfix releases.. Thank you! We will investigate.. False alarm. Looks good, will backport to release-1.4 too. Thank you for the report.\nIt happens because \"/tyk/*\" endpoints reserved for control API, and this routes loaded on Tyk start https://github.com/TykTechnologies/tyk/blob/827003094c4212e7a2354c14d1f9161f74119437/main.go#L356-L359\nNot sure what is the best way to fix this edge case. I would propose you to move Control API to a separate domain or separate port to solve the issue using control_api_hostname or control_api_port. \n. May I wonder why you closed it?. Nice! Have you tried linking JQ lib statically?. What about //#cgo LDFLAGS: -linkmode external -extldflags \"-static\" ?. JQ by itself support compiling fully static binary https://github.com/stedolan/jq/blob/master/Makefile.am\nAnd it feels like passing 2 flags to the linker: -static-libtool-libs and -all-static. I think we end up with dynamic linking. Do you think about nice way of capturing errors if jq lib not installed and showing error message to the user?. Merged by https://github.com/TykTechnologies/tyk/pull/1570 . Ouch! Definitely, a serious issue will try to fix in next patch release.. @joshblakeley ^. Should be straightforward to implement.\nCiphers specified via TLSConfig#CipherSuites array.\nList of available constants defined here https://golang.org/pkg/crypto/tls/#pkg-constants\nIt would be a good idea if instead of using uint8 type in the config, we will create string mapping for this constant with friendly names, so it will look like:\n\"http_server_options\": {\n...\n\"ciphers\": [\"RSA_WITH_RC4_128_SHA\", \"RSA_WITH_3DES_EDE_CBC_SHA\", ...],\n...\n}. @joshblakeley would you like take care of it?. Agree. Looking at AWS implementation it is just an array (on UI it is bunch of checkboxes).. If new chipher is added it should not be accepted by default. If company have own security policy on chipher, they should manually update list all the time they want to add or remove new one.. @lopssh have you closed it because the issue is solved?. @paolo-rodeghiero try setting the following settings in tyk.conf:\n\"http_server_options\": {\n...\n  \"override_defaults\": true,\n  \"skip_url_cleaning\": true,\n...\n}. @dencoded any ideas?. @dencoded I included websocket endpoint into default test server ^. Was fixed in 2.5. I think it is already fixed by https://github.com/TykTechnologies/tyk/pull/1325\nOriginal issue: #607. So, the issue, is that it should pick up a new policy for a new valid JWT, and right now it sort of cached?\nThe valid way is to delete association with old policy when new valid JWT found?. @dencoded found a new bug:\n\nwhen policy_id is changed in JWT we don't apply it on 1st API request right away. Just setting new policy ID worked but after two request to API which was confusing.\n\nMerging https://github.com/TykTechnologies/tyk/pull/1572 and moving to re-testing. Looking at the code I can see 2 issue, and not quite understand how it worked before. \nExtractor implementations have ExtractAndCheck method, which should return session_id and returnOverrides object. returnOverrides.ResponseCode set to 200 it indicates that cached value is found, and we can bypass auth plugin. \nAll the ExtractAndCheck functions have the same check:\n```go\n       if keyExists {\n        lastUpdated, _ := strconv.Atoi(previousSession.LastUpdated)\n        deadlineTs := int64(lastUpdated) + previousSession.IdExtractorDeadline\n    log.Error(\"Previous session:\", previousSession.LastUpdated)\n\n    if deadlineTs > time.Now().Unix() {\n        e.PostProcess(r, &previousSession, SessionID)\n        returnOverrides = ReturnOverrides{\n            ResponseCode: 200,\n        }\n    }\n}\n\n```\nTo make it work deadlineTs should be non zero and bigger than the current time. In my tests, it is always zero, which means both previousSession.LastUpdated and previousSession.IdExtractorDeadline are zero.\nLooking at the code LastUpdated field is set in 2 general cases:\n1. When the key is created via API or inherited from Policy.LastUpdated field. In case of ID extractor,\n2. When we call CheckSessionAndIdentityForValidKey, key not found in keystore but found in authstore. In on-premise and community versions keystore and authstore are equal (redis), so it never actually use authstore clause.  For the Hybrid installation, authstore is separate storage (calling RPC). \nBoth of the cases does not apply to id extractor because Session object created dynamically based on auth middleware response and I can't find a place which sets LastUpdated field anywhere. In addition CheckSessionAndIdentityForValidKey does not get called for dynamic sessions too. \nRegarding IdExtractorDeadline, which is required to make id extractor work, there is no placed in the code which set this value anywhere. So I assume this value should come from the plugin, but it does not mention anywhere. In fact, this value is just an ID extractor session timeout. \nConsidering all this, since session object can be modified inside plugin, I modified my plugin to make it work by adding following lines:\nsession.last_updated = str(int(time.time()))\n        session.id_extractor_deadline = 60\nBasically manually setting fields mentioned above.\nSo, my proposal is \n1. Document that setting id_extractor_deadline is required, should specify ID extractor cache TTL, and should be set inside Auth plugin\n2. Set session.LastUpdated field when creating an id extractor cached session.\n@matiasinsaurralde does it looks sane?. Ok, I found the issue, everything works as expected, and our docs mentioned it the right way: session.id_extractor_deadline = timestamp + 60. \nI was confused for multiple reasons, first of all LastUpdated field is used inside id_extractor and it always zero, and by looking at the code, it feels like deadline should be a relative value, but in fact it is absolute. \nI fixed the tests to follow docs https://github.com/TykTechnologies/tyk/commit/cb31ed781b26d6001b225635be523b703ba3d6f5\nAnd removed usage of LastUpdated field, as it never gets set https://github.com/TykTechnologies/tyk/pull/1400. It can be set via middleware, but it no longer used in ID extractor logic. \nMoreover, I think there was a bug there since the on-premise version was never setting last-updated field, and hybrid version was setting it on each key retrieval from RPC layer. So in some cases, it was used in id extractor ttl calculations, in some not.  So I think it is true to say that id_extractor was broken for hybrid/mdcb installations. . @dencoded I added few new tests including failing one. I can't get it work like your tests, with spec.Proxy.SkipTargetPathEscaping = false, not sure why. \nAlso, I changed Path to RawPath, because otherwise encoded urls get decoded.. I assume it is already fixed. I see you added the following comment:\n\nThere's a data structure that's based on this and it's used for Protocol Buffer support, make sure to update it on every change (coprocess/proto/coprocess_session_state.proto).\n\nBut what about coprocess/coprocess_session_state.pb.go, does it gets updated automatically? \nIf so, what commands I should run to do that?. 2.5 was released few days ago, try it out, should be fixed \ud83d\udc4c . Also try cleaning up browser cache first. \nI will re-open the issue in meanwhile. . @matiasinsaurralde  HTTP method merged, ready to be rebased. Merged manually d1e10cfcb290318c617fed827d9c463eb0ae86af. Nice! Would love to see a small test. \nThe basic idea here is that you specify some ciphersuites on server side, next specify incompatible ones on the http client side, you should get an error. \nIf we talking in terms of test framework:\n```\nconfig.Global.HttpServerOptions.Ciphers = []string{.....}\ndefer resetTestConfig()\nts := newTykTestServer()\ndefer ts.Close()\nbuildAndLoadAPI(function(s *APISpec){\n   s.Proxy.ListenPath = \"/\"\n})\nt.Run(\"Cipher match\", function(t *testing.T) {\n  client := &http.Client{&http.Transport{TLSClientConfig: &tls.Config{\n     CipherSuites: getCipherAliases([]string{....}} // matching ciphers\n  }}}\n// If there is internal TSL error it will fail test\n  ts.Run(t, test.TestCase{Client: client, Path: \"/\"})\n})\nt.Run(\"Cipher not match\", function(t *testing.T) {\n  client := &http.Client{&http.Transport{TLSClientConfig: &tls.Config{\n     CipherSuites: getCipherAliases([]string{....}} // not matching ciphers\n  }}}\nts.Run(t, test.TestCase{Client: client, Path: \"/\", ErrorMatch: \"tls: some internal error\"})\n})\n```. Nice job! I made small refactoring, removing unnecessary logic. . @joshblakeley the final thing left is to prepare documentation update for this page https://tyk.io/docs/security/tls-and-ssl/\nMake a separate PR to tyk-docs repo. Note that I also renamed config variable from ciphers to ssl_ciphers, to reflect what it is. Can you link and describe original issue? . I do not think your fix is enough, because mainRouter gets overridden on each doReload . Closing in favor of https://github.com/TykTechnologies/tyk/pull/1398. The idea is behind this mock was not only router everything to localhost but also to restrict all unknown domains. \nI would say that right way to solve this issue will be supporting regexps. \nSo instead of localhost.local. it should be localhost.*. And instead of string.Contains it should be regexp.Match. Does it make sense?. @joshblakeley the end goal of this task is to either write docs on how to support http2 in tyk, or tell that it is not supported at the moment. \nCan you pls post your research about the current state of things on http2 in Tyk and Go in general. . @joshblakeley bump. Not needed anymore, confirmed that Go handle DNS as expected . I believe we already had task like this here, on in product repo. The easiest way to solve this, detect multiple policies with access rights, and if such found, add policy_id as a prefix to session token. In other words, each policy will get own session object (separate quotas and rate limits). \nIt brings lot of questions how we going to maintain such keys, especially on UI. Needs thorough planning.. Thank you for reporting!. It feels like we have wrong boolean logic here https://github.com/TykTechnologies/tyk/blob/2cd94fd73078b07854a3e1646c258aacfe567e9c/redis_signal_handle_config.go#L66. Right now setting this options, makes client sent Connection: close header, but actually based on customer reports, this header is not sent for some reason (maybe it has special handling like connection-length). And even if we send such header, it still and optional thing, and in the end server will decide close connection or not. Instead, I would propose setting Transport.DisableKeepAlives variable for our http client, to explicitly disable connection re-use on network level. . Fix the tests, seems to be working. \nAlso introducing new config variable not needed, since we already have CloseConnections.. Add new configuration option called \"analytic_tags\" to \"analytic_configs\" part of tyk.conf, track all usages of analytics.RecordHit function, and ensure that AnalyticsRecord#tags will get updated with data from config. For tests, check TestAnalytics function, and include config tags in this contexts of existing tests. . @LuanvP bump :). /cc @nickReyn . Yes, coming in 2.6, full-text search. By default will be OR, in other words, multiple keywords will work, and phrases can be searched if wrapped in quotes.. I see, maybe we updated 3rd party library to the new version and it changed behavior. \nBut frankly this is undocumented change, and first time its usage like this :)\nHave you tried suggestion in error message, and replacing all (...) regexp groups with (?:...), e.g adding ?: to each?. Got it, will be included in next Dashboard patch release, with ETA about 2 weeks. . I see I confused you a bit. Panic indeed not solved, but UI bug was fixed. I closed this because panic happens quite deep in stack and quite rare case, but yeah, better re-open it.. Most likely. I see, but frankly, you should be able to update your API definition domain to new regexp even now. It should be supported by current gateways. Domain validation bug was fixed and deployed to our cloud in context of 1.5.1 dashboard release.. While its true that domain field not visible, I assume that previously you set it via Dashboard API. \nFix included to 1.5.1 dashboard fixed field validation (even if its hidden), but not showing domain field in the UI. . @LuanvP add a new configuration option to tyk.conf with a sensible name and make sure that it will default to 5 if not set.. Can you pls fix the tests, and update to use new test framework (mw_jwt_test.go already has examples of its usage).. @dencoded simplified tests a bit https://github.com/TykTechnologies/tyk/pull/1436/commits/af786916e6de2c3b64d7e59aecbb819630b3e635. Closed in favor of https://github.com/TykTechnologies/tyk/pull/2096. Do not forget link ticket in description. . We need to make this logic conditional to make it backward compatible. . Are you sure that you not overcomplicating it?\nBut even if it is not, why not just call redis Get/Set to some dummy key, and expect to get answer in 1 second or similar?\nMy main concert here that you a going deep into driver logic, and we plan migrate to go-redis soon. . Let's keep it like it is right now, but update retry interval to 1 second, with 5 attempts. \nAlso cache cluster is an optional, it fallback to default redis. Ensure that this case is handled. . pls fix the CI (gofmt). Actually found an issue, it was using wrong uuid library, we use another one in code. Test was failing because this lib was not vendored. Made a fix fa76911. This bug was fixed in 2.5.1/1.5.1 release 1 day ago. Try to fetch latest docker images.. @letzya is working on the fix to replace it with real email. Nice!  \nLets do token expiration time configurable via tyk.conf, if it is 0, do not remove. Does it make sense?\nNo comments on code itself, but we need tests for this functionality. \n. Sorry for misunderstanding, In this case, I meant time after \"expired\" tokens gets removed.. @dencoded pls also fix conflicts. Looks good! \nAdded RPC/Hybrid support notice into phase 2 https://github.com/TykTechnologies/product/issues/19. This is not really a fair way to test things like this :) \nThe issue initially tells about JSVM api calls. JSVM implementation use ManualBatchRequest function instead of BatchRequest, and main idea here that JSVM batch function works with absolute urls, while our internal batch API works with relative URLs. \nSo the valid way to test this feature would be creating test similar to TestVirtualEndpoint, but in this case, you create test https server using https://golang.org/pkg/net/http/httptest/#Server.StartTLS and inside virtual endpoint call this endpoint using TykBatchRequest. \nAlso, note that good test should test both success and failure. So you first run it without with config.Global.ProxySSLInsecureSkipVerify false, and next enable it and it should pass. \nNote that functionality itself looks nice, and for sure this function not that big to require full blown test but in this case treat it as an exercise :)\n. The test looks good! But you can remove SSL configuration of tyk itself, since it is not used here at all, it will help simplify test a lot.. @joshblakeley I simplified test as suggested check the diff https://github.com/TykTechnologies/tyk/pull/1471/commits/05b5649760513c80830271bb8bf46cb6990c58cd\nSorry for intervention, just want get it included into patch release. Fixed in master, scheduled to next patch release. Looks good, but I would probably simplify it a bit, RW mutex not really used here, function is non CPU sensitive, and replacing with the example below, on top ProcessRequestOffThread will do the same:\ngo\norgChanMap.Lock()\ndefer orgChanMap.Unlock(). @excieve do you want to implement changes mentioned in your last comment in terms of this PR, or it will wait for another one?.  So, I'm right that this option has an extremely confusing name, and in fact should be named smth \"enable_org_sessions\"?\nAsking that if you going switch it to false by default, we need to ensure that documentation explicitly says that in multi-org environment it should be turned on, right?. What if we remove this option at all, and enable off-thread processing by default?\n. @excieve bump to my latest comment.. I just realized that real reason behind off-thread calculation is our hybrid layer, since this is where we heavily use org level constraints. Organization monitor uses orgStorage storage for dealing with quotas, and in case of RPC layer, this is direct communication with our MDCB instance: which can be quite slow. \n@dencoded pls note that when you implement org level rate limiting, it should not use orgStorage and RPC layer, it should be redis layer. . Will merge it now, since its getting old. Raise new PR if you want additional changes. . Hello! \nWhile it is true that it asks for the certificate, it is optional for the client to have it.\nIt should not fail, if client miss certificate. \nCan you clarify what kind of issues it cause?. I see, well, it is definitely possible to set previous behavior, if none of APIs use mutual tls feature. Will try to fix it \ud83d\udc4c . Hello! I can\u2019t find exact ticket but this bug is definitely fixed in 2.7\nThank you!. \ud83d\udc4d . So, just to clarify, have you verified that \"Track endpoint\" functionality works as expected?. Do not forget about https://github.com/TykTechnologies/tyk/tree/master/install/data. Files inside data folder not really examples in a sense that you can't just use them, it is templates. That's why they hidden. Moreve over, I would say we should not encourage our users to experiment with config files manually and continue forcing them to use our setup.sh script. If they really want custom changes, they should do it line by line, after the main config generated by us.\n. We can't really fix it, since this is how TCP works: if connection receives activity and server do not close it, it will remain active, until one of two sides will close it. Additionally, there is no such TCP \"timeout\" or option which sets maximum \"active\" connection time, only timeout for idle connections.\nWhat we can do is to add a new option which set maximum connection length, which in fact just re-create HTTP transport for the API, so all active request will be served by new transport, and old connections will die by timeout. . Hello! Thank you for the suggestion, this is definitely in works.\nCan you clarify a few things? While its clear that having interactive Swagger doc is the way better user experience, is there any specific use case of using it inside CI/CD?. Got it, thank you! \nThis is definitely in oud nearest plans.. We can do even more, and support Mutual TLS certificates here too. \nSee @joshblakeley PR, he implemented similar for BathRequest function https://github.com/TykTechnologies/tyk/pull/1471. Well it is a bug too, since if your API protected by mutual TLS, and you configured certificate inside tyk, the gateway will proxy request to API without any issues, but uptime check will fail because it ignore certificates. \nSo I propose just include into the same PR.. Lets merge it like this, and will add certificate functionality if someone will complain. \nHost checker is deprecated anyway. . So, how do you see this implemented from your point of view? \nThe main issue here is how tyk will decide weighting of the server, for example, we can probably add way to specify weights which you can assign to upstream servers, but I'm not sure if this is what you mean.. Do you know examples of another systems which do it like this?. Looks good, pls add new config variable (false by default), which enable listing of hashed keys. There is case, like our cloud when you have a lot of keys, when you want to disable listing, but still, allow querying hashed keys. . Copy on write, make sense \ud83d\udc4c . While file description sounds fine, amount of CPU sounds too big. I would say it should be lowered to \"2\", to avoid running on single core. . I would suggest adding custom upstream server, which has some internal timeout for each request. . Yeah, makes total sense. \nMy main idea with sleep was that if we have some session level or path level locks, or we have some queues, with added latency and high concurrency such issues can become more visible. But I agree that it is a separate case, and probably can be a separate test.. I'm going to merge this changes now. @dencoded pls create an issue in product report with next steps you want to implement, and so @asoorm can provide his progress as well. . This PR #1511 adds new replaceTykVariables, which should be straightforward to use inside HeaderInjector and HeaderTransform middlewares which used for responses. \nRegarding body transformation, it is done using ResponseTransformMiddleware and we should took context variable support code from TransformMiddleware, looking at the code there can be a lot of re-use.. Better review with whitespace check turned on https://github.com/TykTechnologies/tyk/pull/1511/files?w=1. @dencoded existing benchmark won't show anything because it does not use URL rewrite plugins. Smth we need to address in future. . @ilijabojanovic pls check again. @joshblakeley re-opening seems like it still not work as expected. Pls add unit tests for both VirtualEndpoint, JSVM plugin and Python. In our current test suite you can find examples for writing tests for all of this plugin types.\nI would say we need to make such tests generalized, and check all minirequestObject fields, as well as context/meta, for all plugin types.. @joshblakeley I think the root issue also is that current feature code was implemented only for virtual endpoint, but also needs be extended for both JSVM, and Coprocess middleware.. I think you should use r.URL.Scheme instead.. We can support both formats for some time, and remove the lower case version in 3.0 or similar.. Released as part of 2.7. Hello! \nThis is definitely on our radar, and the first step will be implementing support of applying multiple policies to the token, so each API will have own limits https://github.com/TykTechnologies/tyk/issues/1409. This is in our very close roadmap. \nPortal improvements will be the next step, and it still not clear how to implement this functionality and make it backward compatible. \nThank you!. This is related to oAuth scopes support as well, when we will need to do the mapping between scope name and policy id, and after multiple policies will get merged. . In general looks good, needs some tests.. ^ races. Change itself look good! \nThe only thing that I would probably move it back from helpers package, in order to avoid creating general purpose packages, like \"utils\", or \"helpers\": with time such packages start looking like Frankenstein and would be really hard to manage. \nIn addition, I would propose not include benchmarks into the final merge. They were really useful in the context of this PR to see how change affects performance, but inside Tyk itself, probably does not make much sense. And we still can compare our @dencoded benchmarks added earlier, before and after the change. @asoorm it actually will be nice to see how it affected performance, maybe you can post them here as a comment?. I merged but forgot to wait for benchmarks. @asoorm can you pls put here bench before and after the change.. @davegarvey just to clarify are you talking about request body transform or response body transform?\n. Here is the example of extending Dialer object to support pinning: https://medium.com/@zmanian/server-public-key-pinning-in-go-7a57bbe39438. For the docs:\nExtracting public certificate from SSL protected domain:\n\nopenssl s_client -connect the.host.name:443 | openssl x509 -pubkey -noout\n\nGettig public key from existing certificate\n\nopenssl x509 -pubkey -noout -in cert.pem  > pubkey.pem. Thank you for reporting! \n\nIn your example it redirects to \"/api/\" urls, but I assume it just a mock for this github issue. Where it actually redirects, what is the pattern? What if you try without trailing \"/\" like curl http://example.com/example_api?\n. So, it looks like Tyk ignores trailing URL of your target URL, and your app trigger redirect, since it configured to work with trailing slash. Correct?. I would suggest setting the following option:\n\"http_server_options\": {\n      \"override_defaults\": true,\n      \"skip_url_cleaning\": true\n}. For now, I would recommend making 'http://example-api.example-api.rancher.internal:8080/' (without /api) your listen to path, and whitelist all available routes using, with rewriting. For example, your routes will looks like:\nmatch: /method\nrewrite_to: /api/method/\nand etc. \nI think you should not see this bug, if you will not use this url as root. . Added new proxy.disable_strip_prefix boolean variable. https://github.com/TykTechnologies/tyk/pull/1972 was merged to release-2.7 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/1972 was merged to release-2.8 branch\nCreated via API. It definitly more used more widely, feel free to update comment. Note that some of the features may require Go 1.10 https://medium.com/@mlowicki/https-proxies-support-in-go-1-10-b956fb501d6b. Will close for now. @asoorm pls create task for UI support. Pls create related ticket, assign it to 2.6 project, and attach \"require documentation\" label. . Looks good!. Not sure it is a good idea from security point of view, the whole id of kid, that if you check it, and verification failed, you should stop request. So adding new option indeed make sense.. Added new jwt_skip_kid API definition boolean field to ignore kid sub.. @ilijabojanovic aren't this is related to https://github.com/TykTechnologies/tyk/issues/1559 ? . @LuanvP can you check if mitigation method described in #1559 helps with this JWT issue?. Thank you for the debugging! Will check this today.. Are this tokens have the same or different sub ?. I see, the error itself coming somewhere from https://github.com/emanoelxavier/openid2go internals \ud83e\udd14 . openid2go itself does not show a custom error message, and in our fork, we can definitely extend it to get better error message https://github.com/emanoelxavier/openid2go/blob/99cabb451faff2d673301d6f9542ffd2184de280/openid/errors.go#L93. This happens only for \"developers\" or when you directly update key policy too?. It actually happens for all key updates, not only related to policies. \n1) Keyspace changes get synced every 10 seconds\n2) Once policy updated on dashboard we issue key space change event\n3) One of the GWs receive it and delete key from redis, in theory flushing cache\n4) When key is already deleted from redis, but still exist in memory cache in one of GWs, and you make request to this GW, it writes to redis \u201ccached\u201d key version\n. Should be fixed by https://github.com/TykTechnologies/tyk-analytics/pull/740. The current way to mitigate the issue is to check all three partition checkboxes.. Should be fixed. Fix should be included into 2.5.4 aimed to next week. https://github.com/TykTechnologies/tyk/issues/1563 adds support for all token header claims, in a similar way as body claims. Scheduled to be release in 2.5.4 next week.. Hm, it can be a different bug then, maybe its because this fields are numeric, and rest are strings. Can you verify this theory and check if you can access \"iss\" and \"aud\" in addition to \"sub\"?. Should be fixed by https://github.com/TykTechnologies/tyk/pull/1569. Yes . Make sense.\nPls update the docs, and inform customer how to use this feature. . In general, I think we should unite our statsd and newrelic functionalities into 1 abstraction, and apply those changes for all instrumentations.. We need to resume work on this feature. Before the actual work done, we need to do research of what should be done in the context of this issue.\nThe main things we need to support:\n\nExternal services section on newrelic portal\nfull URL of upstream endpoint\nResponse time\n\nThrougput\n\n\nService maps\n\nservice maps to see relation with other endpoint.. @asoorm pls fix conflicts and can be merged. Closing in favor of https://github.com/TykTechnologies/tyk/pull/1742, since required quite a big merge process.. Hi! Thank you for contribution. \n\n\nI created a new config variable a user has to set to agree with Letsencrypt's TOS\n\nDoes this step required?. I assume you tried uploading tls certificate as public key. . @dencoded lets fix conflict and merge it asap. Sorry for delay.. @matiasinsaurralde pls prepare tyk-docs PR with this changes. I assume we should convert all our examples to use lowercase?. @matiasinsaurralde pls fix the test, it is not that obvious. Note that setting HTTP_PROXY affects only HTTP or HTTPS traffic, redis is not affected. But dashboard yes.. At the moment we can support only what Go stack supports. Note that for example for basic auth it is quite easy, by adding Proxy-Authorization header to your request, which can be added via endpoint designer.. Will close, feel free to re-open if you replicate it. Hello! Well, you can't mix hashed and non-hashed keys. The whole idea of key hashing is to disallow lookups for user keys, even in cases when Redis or Gateway API is compromised.\nIf you want to migrate all your keys from non-hashed to the hashed environment, you first need export all your keys, turn on key hashing, and import previously exported keys. The other way migration is not supported for obvious reasons.\nHope it clarify things. . Hello! \nCan this issue be related to the previous ticket, which caused confusion when you switched from hashed to non-hashed version?\nAnd when you mean that it can't be find in Redis, does it means you run KEYS * and do not see anything?. Do you see this key in dashboard analytics? \nThe only reason when key still can be there, is some in-memory cache which Tyk can hold for some time, but it should be flushed on process restart (and you already did it). \nAlso when you say that key exists, what you mean here, how your API definition looks like (do you use multiple auth methods or similar), how is your key looks like?\nThank you.. I have a feeling that at the moment it can be possible only by using Python or gRPC middleware, where you track your own counter in Redis (and communicate with it directly).. Looks like a url validation issue, should be fixed in one of 1.6 bugfix releases. I believe there is some misunderstanding here. I'm not sure that infinite applicable to this option. From what I read in Go source before, 0, will mean that Go will set it to 2 - its default value. If you want it unlimited, you need set it just to a very high number.. ^ update on above\nI confused it with MaxIdleConnsPerHost which is 2 by default. \nAnd in this case, I probably agree to keep it 0 by default and avoid magic numbers like -1. . Yes, pretty much, because it won't change anything. Users still will be capped with MaxIdleConnsPerHost 100, which is set in all our default configs.  \nSo by setting it to 0, you will only allow it to set MaxIdleConnsPerHost more then 100.. @asoorm pls fix CI, from what I see only gofmt is needed. @asoorm see my comment here https://github.com/TykTechnologies/tyk/issues/929. @matiasinsaurralde can you put benchcmp results?. @matiasinsaurralde bump ^. @asoorm @dret so basically it is just about renaming our header, right?. @znystr may I wonder why you adding *. to the end of url? From what I remember it should work like this without it. Also why you are using RAW API Editor for this? Can you confirm that when using UI there is no such bug?\nssl_ciphers conversion is expected and should not cause any issues.. @lghiur seems like some UI bug, when no_action translated to no_reply. . Hello! Apologies for the delay.\nFirst of all, nothing to worry about, it automatically self-heal. \nThe message itself means that MDCB asked Gateway to provide login details (your API key and Org ID). This can happen when our MDCB server gets restarted due to update or auto-scaling event. Such situations are automatically handled by Gateway, and in this particular case, we need to better handle such error in this purge function and do not show such error. . Hi! I believe I managed to fix this issue https://github.com/TykTechnologies/tyk/commit/abb1b350b7dfdce52901e6e3f730a7fd899fd3f0\nAdded new API definition fields for granular JWT validation:\n- jwt_disable_issued_at_validation\n- jwt_disable_expires_at_validation\n- jwt_disable_not_before_validation\nChange should be available in upcoming patch release scheduled in 2 weeks.. Can we benchmark this change, do we have gRPC plugin benchmark, and if don't can we add?. Does it mean that we updated dependencies based on their masters? I thought we going to use stable tags?. @dencoded so, do you approve it?. @matiasinsaurralde seems like this task may require actually documenting global event handlers. If so, pls update this PR https://github.com/TykTechnologies/tyk-docs/pull/418. Do you think it makes sense instead of comparing profiling information, actually compare benchmarks output?\nAnd pls try using https://godoc.org/golang.org/x/tools/cmd/benchcmp for this. @joshblakeley can you also write func (s *SessionState) Hash() benchmark as suggested by @dencoded. It does not need to be included into this PR, but I want to see numbers before and after the change.\n. \ud83d\udc4d . Just depending on 56 probably won't work since UUID generation not used in all cases, as well as orgId. \nWe have the following key formats:\n- random UUID: fixed length 32\n- Basic http auth: variadic length depending on user name\n- Keys created based on certificates: fixed length 64\nAnd all the keys above can be created with or without orgID (length 24). On the other hand, if we make it work only for regular tokens it will be good for this stage, the rest (certs and basic auth), will use old hashing. So the only thing needs to be fixed is optional orgID, and ensuring that rest of token formats fallback to old hashing.. I think we need to remove option from config level, for consistency reasons. All our JWT options live in API definition at the moment. . I think we need to remove option from config level, for consistency reasons. All our JWT options live in API definition at the moment. . Also you added lot of unnecessary files like mw_jwt_test.go.10may2018_0107 tyk.test and etc. Pls remove them.. Don't you think we should limit number of cached items to avoid cache overflow? Especially when there are a lot of unique URLs like on our Cloud?\nWe are using github.com/pmylund/go-cache all over the code, which allows you to set the expiration of cached item, and in addition, it is already thread-safe. Do you think it makes sense re-use it here too?. I assume that this package should be applied to the rest of regexp usages, like URL rewriter. \nAnd inside advanced URL rewriter, we can run regexps against body, headers, query attributes: which can be quite big or had random nature. And in this case, such caching mechanism can cause quite big issues.\nI wonder if it makes sense to include at least some basic guards here, like the length of the cached key, and a total number of items in the cache, after which, caching of new keys (or too big keys) will be disabled.. @dencoded what about MatchString usage (especially in api_definition.go), can you also cover it?. Right! Make sense. \nI actually believe that it makes sense to keep your package as drop-in replacement without renaming \"regexp\" to \"tykregexp\", but its up to you.\nOverall looks great, and ready to merge once you will be ready \ud83d\udc4d . @matiasinsaurralde does it still a WIP? Do you want to include bencmp output?. @matiasinsaurralde bump. @matiasinsaurralde this PR becomes very old, pls rebase it against latest master and let's merge it.. Merged manually. This makes a LOT sense to me, and nice progress from https://github.com/TykTechnologies/tyk/pull/1684\nExposing some of the data, like hash version, does not look harmful to me, and our project already open-sourced and hash functions are known from the start. . Looks great! \nCan you extend a bit on:\n\nSupporting ID extractor on JSVM middleware.\n\nCan we already do it with this change, and if so, can you write some docs?. @matiasinsaurralde can you create task about allowing JSVM id extractor and auth plugins, and propose it for 2.8 (in product ticket)? Thank you!. @asoorm bump. Thank you, planned for one of then next patch releases.. Looks good, but let's make this change for 2.7 instead. @dencoded any update on BenchmarkMultiSession_BA_Standard_OK ?. Also, It will be fair for benchmarks if we create hundreds of keys, which limited like this, and benchmark will randomly choose between them, instead of using 1 session.. \ud83d\udc4c . We need to do coprocess change as well. @matiasinsaurralde can you help @joshblakeley with it?. Nice!. Can't merge to 2.7.X, too many conflicts, will be part of 2.8. Make sense! Do not think we should support versions < 2, since redis major version already 3.X. @asoorm so the main question is where body gets read twice, right?. I'm not sure if fully understand why this fix works. Can you explain?. Point about chunk encoding is interesting, but this is TCP level, and Go should handle it by itself. More over chunked encoding turned on optionally, depending on body size. \nFix with reading whole body first make sense.. @asoorm looks good, but are you sure that JSON part does not affected? Maybe make sense readall body for all cases including JSON?\nAlso do you think we should apply same logic to request body transformation?. We should detect encoded bodies and handle re-endoding when writing analytics, like it was done for body transforms https://github.com/TykTechnologies/tyk/blob/master/res_handler_transform.go#L29:6. I found really nice example on how to do it relatively easy https://github.com/cloudflare/cfssl/blob/master/revoke/revoke.go. Added new byte raw_body byte field to coprocess object which filled all the time. And body field now filled only if its valid utf (previously just paniced). Looks good. Will fix CI error (seems like its mine).. Allocations are quite small anyway. Looks good.. I think we should extend it even more. We introduced linter project some time ago, but the project was not that active in the last months. Right now it is a separate command, and user required to run it to validate config. I propose to include linter into tyk start flow: it should not prevent process starting if it found errors (so mistakes in schema won't cause outage), but it should print to ERR log all the issues. \nRegarding connection string, JSON schema we are using support dependencies and conditions, so it should be possible to write logic like:\nif use_db_app_configs is true:\n   connection_string != \"\"\nhttp://www.tothenew.com/blog/using-dependencies-in-json-schema-version-draft-v4/\nAlso see oneOf and allOf keywords. \nCan you investigate this direction? It will be extremely helpful for debugging config issues.. @ilijabojanovic I made another fix, probably require retesting. Seems so. Released as part of 2.7. I think we need to move from this approach to providing context and meta via template functions. \nAnd as migration level still support old context and meta approach, but only if bodyData is a hash, e.g. to type checking.. Well, actually in this exact case your fix will be enough since response transform does not expose cotext or meta. Using functions also probably won't work, since they are request dependant, and to implement such functions we need to generate templates on each request, which will be slow.\nI like the idea of special array case.\n@dencoded .index function not really required, but it can be really handy if you want to get the nested key, or for example key with non-standard characters. And it works with maps too.\nLets do so, will merge this specific fix, and will think a bit more how to properly fix arrays in request body transforms.. Since it is backward incompatible, we need to find another solution :(. @matiasinsaurralde I wonder if we can inject some manual code to bindings we generate, so we add some byte->string conversion?. What about plan on adding the second field, for compatibility?. Nice! I would also suggest that probably raw_body should be populated all the time. So if you are writing a plugin you do not have to think about this logic of switching different fields.. Now it looks really nice \ud83d\udc4c . \ud83d\udc4c . Thank you for the report. Can confirm the issue. We fixed similar in JWT middleware a while ago, should be a similar fix. . I increased the priority of this task, and its planned to be included into 2.7.2 with ETA around 2 weeks. @matiasinsaurralde looks really good! \nCan you clarify how exactly, from user perspective, things are changed for linter and import commands: before and after change.. Nice! Does it still a WIP or ready to be merged? (looks good to me). @matiasinsaurralde pls fix your last command and will be ready to be merged. @matiasinsaurralde I'm ok if you make start behave like tyk command. So calling tyk start will be the same as just tyk. Does it doable?. Merged manually https://github.com/TykTechnologies/tyk/commit/fd3af4861451e37d676cf8ef14024882323fb737. @letzya since your JWT disable validation fields not released yet, and do the similar thing but worse, what do you think about removing them at all?. Yes, but your options replace mine. If you set very high clock skew it is same as disabling validation.. Looks good \ud83d\udc4d\nWill go to 2.7.2 . Preferably. Can you add a bit more implementation details here? \nDoes it cross compatible? . @matiasinsaurralde can you pls explain your last fix?. Looks good! Since this stuff is sensitive, pls add tests using python, which test this functionality. \nThank you.. If they were broken, why test was not failing? Maybe test need to be fixed?. Ah, I see. Can we then extend this test with nested values?. Hi! In addition to STDOUT you can also send logs to various systems like Graylog, Logstash, or Syslog. See more details here https://tyk.io/docs/log-data/#aggregated-logs-with-syslog.. I just checked, and the second clause still needed, in cases when URL has no any matches, and it basically ignores rxPaths cycle. . Apparently, our tests were covering only XML -> JSON transform.. @lonelycode Worth noticing that I forked https://github.com/spaolacci/murmur3 to our org, and update d murmur32 hashing implementation to the version we had vendored. So all other algos like murmur128 got all the latest code and fixes, and murmur32 legacy support. github.com/aviddiviner/go-murmur mentioned in your proposal is older, support only murmur2 (and what we have already murmur3), and do not support 128 bit function. \n. @lonelycode Yes. Added tests showing both bug and fix itself, in various combinations: https://github.com/TykTechnologies/tyk/pull/1753/commits/3d25da10d6ebfd3ee557661cc41a6a7a0108222b#diff-092a80b1b0fbc9a08fef31ca557e51a2R20. Frankly, I would not care at all about key creation performance, since it does not need to be fast. \nBut note about HashStr every time using b64 is true, however, I'm not sure what we can do about it. I already added check which checks for legacy tokens without b64 decoding, but for new keys it probably will be required. Enabling caching for tokens seems like over-engineering here. b64 in general very fast, and we avoid full JSON parsing too. Let me add some benchmark results here, on how it affects basic request flow. . @dencoded fixed code styling issues. Regarding performance, as mentioned above, I would prefer not spending too much time on key creation process (if it looks good from code point of view), since this is quite rarely used functionality.. That's true but frankly, I can't see a more efficient way to encode custom metadata to token itself. I'm open to suggestions.. Ah, I see what you mean now, we can definitely hold token hash somewhere.. @dencoded change I made in https://github.com/TykTechnologies/tyk/pull/1770 should resolve the situation with key hashing called multiple times. . @matiasinsaurralde pls fix conflicts. Can you put some initial benchmarks to understand the difference it makes?. Also if it will show good performance, and we decide to turn async session write by default, it will make sense remove old setting, and introduce new one: disable_async_session_writes. @joshblakeley what is the state of this task?. @joshblakeley btw when you fix such things better push as separate commit next time, so it will be easy to track PR evolution and such PR fixes. We can always squash it in the end. . @dencoded can you pls re-review?\n. Hello! This definitely makes sense, however even right now, you can try to achieve this kind of functionality. \nYou can configure Tyk dev portal using 2 ways: by using our built-in portal, or by building customer developer portal in the language of your choice https://tyk.io/docs/publish/customise/custom-developer-portal/\nIn both cases, you have the ability to modify templates, and implement logic you want using templating logic or maybe with help of small javascript. \nI will provide you an example on how to do such filtering using the built-in portal.\nCatalog listing page template located at portal/templates/catalogue.html of your installation. \nOn top of the page, you can define select element, which will show your API categories. And then in Javascript you will define the mapping between your categories and API names, and will conditionally hide/show APIs based on what currently selected. Here is example code:\n```\n\nRoutes\nMaps\n\n\n// Mapping between categories and \nvar categories = {\n    \"Routes\": [\"Directions API\", \"Measurement API\"],\n    \"Maps\": [\"Tiles API\", \"Geo API\"]\n};\n\nfunction onCategoryChange(){\n   // get selected \n   var category = document.getElementById(\"categories\").value;\n   var catalogueAPIs = categories[category];\n\n   // DOM nodes of all API categories\n   var apiElements = document.querySelectorAll(\".col-md-4\");\n   // Hide DOM elements of APIs which do not match filter\n   apiElements.forEach(function(el){\n      var apiName = el.querySelector(\"h2\").innerText;\n      if (catalogueAPIs.indexOf(apiName) != -1) {\n          // Show APIs which names match category\n          el.style.display = \"block\";         \n      } else {\n          // Hide APIs which names not included into category\n          el.style.display = \"none\";\n      }\n   })\n}\n\n// Apply our filter on page load\nsetTimeout(function(){\n  onCategoryChange()\n}, 0)\n\n```. You can't create new files like this, you need to modify existing catalogue.html page, and just create backup of the original one. . Perfect! . @matiasinsaurralde yes, we thinking of rewriting bootstrap script from bash to Go and bundling it to tyk-analytics binary. @dencoded added change to improve KeyHash caching. Now it should be called only 1 time per session and be cached inside session object.. @dencoded pls take a look. Will be included in 2.7.2 with eta 2-3 weeks.. Should be streightforward in Go like this:\ncert, err := x509.ParseCertificate(d)\nfmt.Printf(\"%+v\\n\", cert.Subject.ToRDNSequence()). Should be great if we can get access to DN inside advanced url rewriter too.. This functionality should extend request object to provide 2 things:\n1) raw certificate information (can be accessed via req.TLS.PeerCertificates[...].Raw), so the plugin can do parsing and validation by itself\n2) certificate meta (we already have helpers to extract it, see CertificateMeta in code).\nNote that req.TLS.PeerCertificates[...] is an array, so both fields mentioned above also should be an arrays. \nFor GRPC compatibility, the second field with meta can be a list of JSON strings. . Fixed by https://github.com/TykTechnologies/tyk/issues/1774. @matiasinsaurralde this issue is reproducible on BuddyWorks https://app.buddy.works/tyk-projects/tyk/pipelines/pipeline/57441/execution/5b23bfc063115e33e38c0beb\nSolved it by updating image to Go 1.10 and installing python-3.5 instead of python-3.4. \n@ilijabojanovic has Python 3.6. So I may assume that issue is related by old protobuf pip package. Can you verify this theory? Will be a pity if 2.7 will cause backward incompatibility for some users.. @letzya at the moment it means that you need to attach multiple policies to the key itself. It will be great if this task will also allow creating \"meta policies\", so policy itself allow setting nested policies, e.g. contain apply_policies field.\nIt is quite clear what needs to be done for access merging. The main question here is how we going to implement rate limits and quotas handling for such sessions. Probably the easiest way to do it is to add \"policy-id\" to keys which store counters. To make it compatible, we need to implement check, which tells if access permissions from multiple policies are merged use new scheme, otherwise use old, what we have now. . @asoorm I updated title and description. @dencoded I think you a bit misunderstood initial proposal. Specifying it using single policy will cause lot of issues, since we had to completely change structure of policy object, and maintain backward compatibility with old and new policies. Even now you already can attach multiple policies to the key, and idea is to extend this support, so you can define multiple rate limits and quotas in different policies, and just specify multiple policies for the key. In this case, \"meta\" policy becomes quite an easy task, since if key will see policy like this, it will just inherit policies from this \"meta\" and that's all. I specified it in top task description, but probably not clear enough. \nRegarding key format, it definitely makes sense, but I propose making it a bit simpler. Instead of supporting hierarchy like this, we can do the following: dynamically iterate through all policies attached to the key, and find the deepest match (Global -> API -> Path), and just use this value.\nAlso, a quite common case when dealing with rate limits will be that total API rate limit is quite slow, and one of the paths (like status API), will have way bigger rate limit. So I think that if you specified path specific values, they should have the separate counter, and do not intersect with upper rate limits or quotas. \nDoes this makes sense?. Do not really tie to \"customer request\" label, since our solution should be general purpose anyway. \nIt can be that my ideas with policy merging is not optimal and we should embed rate limit info directly to policy, but let's try to get deep down to actual initial requirements.\nImagine the following use-case, that customer is someone like http://clearbit.com/ and have the following setup (real case):\nThere are 4 different APIs, sold separately. Each of those APIs has different rate limits and quotas, which depend on user subscription plan. So you can buy, small tier API1, medium tier AIP2 and etc. Free users have some limited access, only to some parts of this APIs. Also, it should be possible to properly track analytics for all cases. \nHow it IMHO should work from UX side of view:\nYou can create policy per API, and after, based on user subscription, mix this policy together. Each individual policy should contain quotas, rate limits and access rules per API. So I will have policies like: \"API1 tier1\", \"API1 tier2\", \"API2 tier1\" and etc. And when you assign them to the key, you just can assign: \"API1 tier1\", and \"API2 tier1\" policies. \nAs you mentioned currently we have the constraint, that multiple policies work only if partitions differ. We had to do it, due to lack of proper policy merging solution, and the point of this ticket is to eliminate this limitation, so you can mix policies however you want. But you still should be able to mix separate partitions if you want (with some sane checks, like multiple SAME partitions per SAME API not allowed). \n\nAccording to separate counter, and do not intersect with upper rate limits or quotas - it doesn't make sense to me as a potential user. If I have set rate limit for some API as 100rps I cannot understand how some paths under that API can have say x10 bigger rate. What the point to limit rate on API level then? What traffic are we limiting on API level?\n\nFrom our architecture point of view, setting separate limits per path will be tricky, so I propose to exclude this part from task definition (and you can always just create a separate API for this path if you want separate tracking). But one of the valid cases for such configuration is when your API has some status check, or similar, which should not obey the same rate limit as your API, and should have way higher limits. We can back to rate limit issue on per path rate limiting later (and maybe, in this case, it can be embedded into policy itself, to \"Path-based permissions\" section, and only for rate limits, and maybe with option to disable quota tracking for specified paths).\n. Hopefully in the next few weeks as part of 2.8 release.\nCheers.. I think we need update it to bug, and make ignore plugin work with rest of plugins.. /\u0441\u0441 @marksou . Should be fixed. Why this fix the issue? MergeFrom was doing nothing?. Re-opening, see PR comment.. Hi! thank you for the report. Do you see anything in gateway logs when you receive this error? . It was not originally clear by PR itself but looks like it added new functions rawb64dec and rawb64enc, which should hopefully fix the issue.. @ilijabojanovic bump ^. Implemented as part of 2.8. By default Go client does not support it but can be optionally enabled https://golang.org/pkg/crypto/tls/#RenegotiationSupport\nI wonder if we can enable it by default.\nWay to overcome the issue will be disabling keep-alive connections.. @asoorm pls verify. https://github.com/TykTechnologies/tyk/pull/1973 was merged to release-2.7 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/1973 was merged to release-2.8 branch\nCreated via API. As a more simple solution, which can be implemented right away, I would suggest implementing a wildcard option, which matches ALL methods. . Updated schemas in dash. Right now it works like his:\n1) Only safe methods can be cached\n2) If you checked only \"Enable caching\", then endpoint will be cached only if you set \"Cache\" plugin to endpoint\n3) If you check \"Cache all safe requests\" then it will cache all safe request by default, without needing step 2)\nWith this new functionality, if you set \"Cache\" plugin for POST endpoint, it will automatically understand it and will cache POST by the whole body.\nCache plugin for POST/PUT requests will have additional \"cache key regexp\" field, where you can optionally specify regexp to extract cache key from the body.\nNote that even if you enable \"Cache all safe requests\", then POST request will not be automatically cached. You always had to explicitly set \"Cache\" plugin for them.\nAssigning @komalsukhani for this ticket ^. @bitsofinfo 2.7.1 release should happen next week. @matiasinsaurralde we need cover basic JSVM from bundler with tests.. @bitsofinfo just an idea, you can proxy bundle URL with Tyk itself, and instead of basic http auth, and api key protection via url, or similar.. At the moment you do this check only when the session does not exist, and just created. \nWe also should handle the case when JWT expiration was extended for existing session (this is a valid case). So basically if original expiration != new expiration, override it. . Also pls rebase from latest master, and modify existing tests to test new behavior. . Sorry for the late review. I think you overdid it a bit. \nPassing NameToCertificate and Certificates to TLS client is too much. NameToCertificate for example used only by TLS servers, and passing Certificates for client, used only in mutual TLS flow. \nIn this case we need only option to ignore certificate verification for the dashboard connections. Using existing config as you did should be fine.\nMoving to in-progress for now. \n. \ud83d\udc4d \nWill be part of 2.7.2. I believe it should be part of basic auth middleware (and for example auth token middleware too, if the token should be extracted from the body). . Will be part of 2.7.2. @letzya you should put link to this proposal to 2.9 product ticket.. Currently, there is no any query string collision since during looping there is no any query param transfer, original request query params not get modified. I thought about adding support of passing custom query params or headers via url with some prefixed variables, but it can be done in future.. Loop limit now configurable via \"loop_limit\" query param variable:tyk://self/path?loop_limit=2. It can be set only one-time per request and can be set only for loop url. . @asoorm \n\nMany users don't use listen-path, but rather have each API listen on custom domain.\nSo rather than curl http://gateway:8080/httpbin/get, they would do curl -H 'Host: httpbin' http://gateway:8080/get\n\nLooping at works in context of current API, it does not matter if API bound to domain or some listen path prefix, when you set url to tyk://self/get, it means find /get endpoint in current API, not emulate http call to gateway and actually do /get HTTP call.. Since there are no more comments merged and went to testing. Will add more features once it will be actually used and we will understand full scope.. Do you think we can achieve this functionality without MDCB changes? What if for created keys we just issue \"update\" events? And instead of introducing special events for \"created\" keys, we just force fetching key after all events, even \"delete\" event? . Lets try to shrink it even more :)\nI do not think that handleAddKey and getKeyForCreation even needed here. \nPoint is that your goal is to warm up the cache. If we look at the pipeline, the main function which query the key is CheckSessionAndIdentityForValidKey, which actually does all needed lookups and update cache. The only thing you need to do, is to add flag to this function, so it will accept hashed keys, and will not do double hashing. IMHO it should work.. I actually realized that it could be not that simple, since CheckSessionAndIdentityForValidKey is quite bound to request flow, so probably your approach makes sense. . @joshblakeley made a small change to rewrite GetKey use GetRawKey, also noticed that latter one did you used caching (fixed).. \ud83d\udc4d . Yes, for sure I meant prefix.\nI also realized that doing hashing with different algos can be problematic, since we will be unable to list them. But I can force it to use murmur64 for orgs. . Hello! Thank you for the report.  You should also try using our in-memory rate limiter (which is actually turned on by default now), by ensuring that both enable_sentinel_rate_limiter and enable_redis_rolling_limiter are set to false. Yes, it works across gateway cluster, since while it in-memory, multiple gateway instances constantly sync rate limits via Redis pub-sub mechanism.. DRL supported it from the start, so it should. But anyway, I would recommend updating to recent versions, since 2.3 version is not officially supported anymore.\nCheers.. @wlf061 if you have setup with multiple gateway clusters, connected to the same redis, yes. . @matiasinsaurralde I see a TODO statement in comments, are you going to do it in terms of this PR?. I think it also make sense to add option that circuit breaker will only generate \"events\" and will not actually break the execution. In this specific case only events are needed.. As you mentioned it goes through auth options (headers, params, certs), one by one, and if multiple options specified it finds first that matched. A valid workaround here, will be specifying some invalid value to the header name, which never will be matched. \nIf we talking about more UX friendly solution, it probably make more sense add new attribute to api definition (smth like \"disable_auth_header\": negative logic needed for backward compatibility), which will toggle header option. \nDoes it makes sense?\n. Can you pls share your tyk.conf? \nThank you.. Also to clarify, do you see this error between Client -> Tyk communication, or for Tyk->Upstream communication?\nAdditionally, can you do the following ciphers check against Tyk and Upstream https://superuser.com/questions/109213/how-do-i-list-the-ssl-tls-cipher-suites-a-particular-website-offers\nThank you.. I think we found the issue, and it should be solved in upcoming 2.7.2 https://github.com/TykTechnologies/tyk-analytics/pull/924. One more thing, can you clarify in which point of time this error happens? On startup or on request?. Pls ensure that /opt/tyk-gateway/js/tyk.js is a valid file. Stacktrace itself points that JSVM was not initialized, can you show Tyk startup log?. \ud83d\udc4c . @joshblakeley I just realized that probably better place for this code can be actually a Pump, and only mongo pumps. It should be more backward compatible, since if person already use ES pump or similar, they setup will be broken with this code. . Also should work with context variables. Also pls check if it used in other places like body transforms. . \ud83d\udc4c . Closing in favor of https://github.com/TykTechnologies/tyk/pull/1954. Removed 1.9, new PR is https://github.com/TykTechnologies/tyk/pull/1976\nThank you!. Issue happen because during checking blacklist/whitelist endpoints we replace {...} parts with (?.*) https://github.com/TykTechnologies/tyk/blob/master/api_definition.go#L446, which is not matches with what gorilla/mux router has - match till first / character: ([^/]*). So basically regexp becomes too broad. \nThe way to overcome the issue at the moment is to blacklist all the \"nested\" paths, in this exact example, blacklist GET /accounts/{accountId}/paymentPlans. https://github.com/TykTechnologies/tyk/pull/1956 was merged to release-2.7 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/1956 was merged to release-2.8 branch\nCreated via API. Looks good! . @dencoded seems to be related to your code. @joshblakeley can you check pls?. @ilijabojanovic should be fixed now. Renamed to proxy_on_error and slightly modified error message.. Thank you for the PR! \nI think we can make it a bit smaller, like this:\napiLangIDsRegex := regexp.MustCompile(`{([^}]*)}`)\nasRegexStr := apiLangIDsRegex.ReplaceAllString(stringSpec, `([^/]*)`)\nBasically removing logic of detection end of string. And at the same time modifying tests to do that:\nv.Paths.WhiteList = []string{\"/foo/{fooId}$\", \"/foo/{fooId}/bar/{barId}$\"}\nBasic idea here that here at Tyk we have backward compatibility policy, and this regexp was here for a few years, so there is chance that some of our customers relied on its \"confusing\" behavior. Thankfuly it was possible to fix it using \"$\" at the end of string, to explicitly set end of the string. In case of #1944  bug this trick was not working for urls containing {...}. Goal of this PR in this case can be making {...} groups support addign \"$\" to the end of URL.\nHope it makes sense! . Thank you for all the work! Looks great!\n. I wonder if we can refactor it a bit, since jsvm_goja.go and jsvm_otto.go contains almost idential code. . \ud83d\udc4d . Should be solved with https://github.com/TykTechnologies/tyk/pull/1966 and will be part of 2.7.4 and 2.6.4 . Should be fixed by https://github.com/TykTechnologies/tyk/pull/1974. https://github.com/TykTechnologies/tyk/pull/1969 was merged to release-2.7 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/1969 was merged to release-2.8 branch\nCreated via API. Can you add a bit more details, since this is a quite non-standard solution. \nDoes it means that built-in logstash driver does not handle re-connections?. You have type \"bytes\" for this record, but in fact this field can contain multiple certificates. Should not it be array of bytes instead? \nAs for Certificate Meta, maybe just serialize to JSON? Also to avoid overhead, I suggest adding new manifest variable require_client_certificate, similar to require_session, and only if its true, it will load this variables. . @matiasinsaurralde bump. Nice! Do you think we can make it available to JSVM plugins too?. yes, I added \"needs documenting\" label for the task. \nIt will be released as part of 2.8.1 and 2.7.5. What other attributes except timeouts can be configurable?. Nice one! \n@dencoded can you pls review?. Thank you a lot for all changes! \n@dencoded does it looks good to you?. Better new PR, to separate feature thing from refactoring itself. Thank you!. https://github.com/TykTechnologies/tyk/pull/1977 was merged to release-2.7 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/1977 was merged to release-2.8 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/1979 was merged to release-2.7 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/1979 was merged to release-2.8 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/1982 was merged to release-2.7 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/1982 was merged to release-2.8 branch\nCreated via API. Replaced by https://github.com/TykTechnologies/tyk/pull/2004\nI \"fixed\" tests, by switching algo to murmur64, since it is expected to fail on murmur32, but having a test still a good idea. . Thank you! \n@joshblakeley this one is for you.. https://github.com/TykTechnologies/tyk/pull/1993 was merged to release-2.7 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/1993 was merged to release-2.8 branch\nCreated via API. \ud83d\udc4c . \ud83d\udc4d . Thank you! Can you a bit explain why FindAllStringSubmatch was replaced by FindAllString ?. Makes sense!. @dencoded can you think about anything which may go wrong?. @dencoded can you pls check. Nice job!\nUsing unsafe package is a bit tricky and dangerous. Do tests cover UTF-8/16 cases?. This will be great. This part of the code very senstive. . Well, seems like you removed all blockers. \nNice work \ud83d\udc4d . This is a tricky code, so I decided to write a test (added to this branch). And while EOF error was solved, RawResponse field not get recorded when cache is used. . Nice! So much clearer. . Indeed this looks like a new 2.8 looping feature issue, thank you for the tip!. @dskoval you won't belive how may things we have in parallel :)\nLot of the assigned stuff is in progress, and actual task state is determined by github projects we use, which are hidden from community at the moment. \nFeel free to work on it if you want. Ask any questions!. Replaced by https://github.com/TykTechnologies/tyk/pull/2014\nIt is a bit simpler, but explicitly in all middlewares which accountable for RL and Quotas. Thats, interesting, thank you for pointing to this! Will check.. Frankly, I'm a bit puzzled by your code, because you only read the counter, and do not update it. Not sure how it can fix this bug.. Closing in favor of work done by @excieve . I think that a more generalized approach here will be adding \"default policy\" field to JWT configuration,  which will be used if JWT policy scope not set. . Should be fixed by https://github.com/TykTechnologies/tyk/pull/2070. @andrewscode re-opening the issue. Can you pls share the full Tyk stack trace?. Should be fixed by https://github.com/TykTechnologies/tyk/pull/2070, but via another approach, by properly handling empty bodies.. I get the idea, but I'm afraid this will not work. When dashboard sends the request to gateway API, it does not set the right API id. . That's why I was thinking about extending Tyk Keys API, and for example, pass query attribute \"?username=true\" to the endpoint, and if it set, it will run logic similar to what you do in PR.\nDashboard can't know right APIID in advance. . @dencoded makes sense to me. Exactly, instead orgid extraction logic you implemented. Also note that gateway api is an admin one, and we trust user input, so check if orgid valid also redundant.. @dencoded pls check. Looks like fix was not merged in this branch. Makes sense! . Pls re-vendor it to tyk-analytics. https://github.com/TykTechnologies/tyk/pull/2031 was merged to release-2.8 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/2031 was merged to release-2.7 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/2033 was merged to release-2.8 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/2033 was merged to release-2.7 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/2049 was merged to release-2.7 branchCreated via API. https://github.com/TykTechnologies/tyk/pull/2049 was merged to release-2.8 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/2018 was merged to release-2.7 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/2018 was merged to release-2.8 branch\nCreated via API. It is totally doable with Virtual Endpoint https://tyk.io/docs/compose-apis/virtual-endpoints/. In other words some small piece of JS code, where you can make HTTP requests and apply logic you want.. @komalsukhani if you want, why not.. Needs updating swagger doc. @asoorm this PR conflicts a lot with recently merged PR by @furkansenharputlu, which mostly do the same stuff. I think you have to re-do your change with replacing github.com/Sirupsen/logrus. Just tried and can't replicate the behavior. Pls attach API definition if it still happens to you.. This is what actually happens https://github.com/TykTechnologies/tyk/issues/2067\nThat's why in some case it was replicated and in some not. https://github.com/TykTechnologies/tyk/pull/2062 was merged to release-2.8 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/2062 was merged to release-2.7 branch\nCreated via API. This is what was happening https://github.com/TykTechnologies/tyk/issues/2069. https://github.com/TykTechnologies/tyk/pull/2065 was merged to release-2.8 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/2065 was merged to release-2.7 branch\nCreated via API. HMAC needs more attention indeed, created the following PR https://github.com/TykTechnologies/tyk/pull/2071 which adds support for hmac-sha256, hmac-sha384 and hmac-sha512 algorithm headers. . https://github.com/TykTechnologies/tyk/pull/2071 was merged to release-2.8 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/2071 was merged to release-2.7 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/2068 was merged to release-2.8 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/2068 was merged to release-2.7 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/2070 was merged to release-2.8 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/2070 was merged to release-2.7 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/2073 was merged to release-2.8 branch\nCreated via API. https://github.com/TykTechnologies/tyk/pull/2073 was merged to release-2.7 branch\nCreated via API. @komalsukhani, in general, yes, there will be translations file. This feature is already in works by one of our members. Thank you for your help! . As discussed previously, let's make default plugin interface just be as simple as func(ResponseWriter, *Request), and things like getting and setting session, will be done using request context, exactly like our internal code does. In this case Auth middleware will be exactly same as Pre, just with setSession call: in this case the only difference will be only supporting ID extractor. Love it!\n. I think it makes sense add unit tests as well. In this case we can dynamically generate so files inside ci-tests.sh, and conditionally run tests only if specific tag is passed, or add some test helper which dynamicall compile Go code specific in some string, so flow will be similar to https://github.com/TykTechnologies/tyk/blob/master/coprocess_id_extractor_python_test.go#L57. https://github.com/TykTechnologies/tyk/pull/2082 should fix it. I think this should do a job https://github.com/TykTechnologies/tyk/pull/2082. Yes, I posted comment to wrong issue :). \ud83d\udc4c . I would be careful about it since the spec is a pointer. Are you sure it does not point to already running API spec?. From a technical point of view, it can look like this:\nPolicy and Key object should have new fields, ThrottleInterval (seconds) and ThrottleRetries (int). Similar to the rest of the fields like Rate or Per Key should inherit values from the Policy. \nSo if ThrottleRetries > 0, on rate limit failure, it should retry request ThrottleRetries times, and between those retries add sleep of ThrottleInterval  (which minimal value should be 1).\nIf we talking about actual retrying functionality, we can do as simple as this, inside rate limit middleware:\n```\nswitch reason {\ncase sessionFailNone:\ncase sessionFailRateLimit:\nif session.ThrottleRetries > 0 && ctxThrottleLevel(r) <= session.ThrottleRetries {\n    ctxIncThrottleLevel(r)\n    time.Sleep(session.ThrottleInterval)\n    return k.ProcessRequest(w, r)\n}\nreturn k.handleRateLimitFailure(r, token)\n```\nWhere ctxIncThrottleLevel itself, just sets and reads requests context, similar to ctxIncLoopLevel and rest of methods we use.\n. Added new attributes throttle_interval and trottle_retry_limit. . Makes sense. Deleting all tokens is not an options, since their analytics data potentially can be useful. And we already have options to control expiration of oauth tokens. . Makes sense!. Looks good!. Replaced by https://github.com/TykTechnologies/tyk/pull/2119. Thank you! \nGoing to review soon.. Yes, it can be a blocker, unless we can reliably statically link it. And so far this list does not looks that promising :(. Thank you! Going to review soon.. Nice!\nAs mentioned previously our swagger consist of 2 parts, manual part and auto-generated part.\nSo next step here, will be taking swagger.yaml from here https://github.com/TykTechnologies/tyk-docs/blob/db26f221108604da80d7cdf4a5469b83e722c1c7/tyk-docs/static/others/gateway-swagger.yaml and replacing its components object, part, with auto-generated stuff from your script: so we will have manually defined endpoints and automatic model definitions. . Test?. I think we need it more general purpose, to accept multiple event types.. So far I do not know how to do that. It will require some separate \"events\" collection, which can be mapped to existing analytics data. . @lghiur it should for sure be logged to Audit. So when we integrate Audit to the dashboard and expose this thing to UI by default, events should be available there as well. . @lghiur https://github.com/TykTechnologies/tyk-analytics/issues/344. @lghiur ^. Thank you for reporting!. This is a known bug, should be fixed in upcoming 2.8 release.. The fix, in this case, will be disabling new gas \"reconnect\" functionality if transport is UDP, e.g. back to previous behavior. . I think this can be already fixed in recent Tyk versions as well.. I believe it should be already fixed in recent versions. Not sure what is the proper way in such a situation. \nCode which broke your API was added to actually fix a bug when listen path conflicts with a path name. Previously Tyk was matching full request path, which was including listen path too. So lets say your listen_path is: \"/my/listen/path/\", and you have 2 paths explicitly defined in API (with different plugins), like: \"/my\" and \"/test\". When you try to query /my/listen/path/test path, Tyk tries to find if this endpoint has custom logic, e.g. defined in Endpoint designer, it goes through an array of all defined endpoints and tries to find a match. It starts with checking if \"/my\" match /my/listen/path/test and finds a false match: because listen path include the same part as path itself.\nNow with a fixed version, it strips listen path during this check, so /my/listen/path/test becomes just /test and it matches the right endpoint. \nIn your case, I have a feeling that you added endpoint match to include listen path too, to overcome this bug. And with this fix it is no longer needed: correct me if I wrong. \nHowever, I do get that it is kinda a breaking change. So maybe we should keep this change for 2.8, and leave 2.7 with original behavior. \nHappy to hear your thoughts. . Not exactly. We have 2 PRs.\nFirst which was already merged and released as part of 2.7.X, it broke @bitsofinfo APIs, and this ticket was created. PR created by Furkan is kinda rollback behavior of first PR.\nSo technically speaking we broke backward compatibility in this specific case with first PR, when \u201cfixed\u201d matching logic.\nSo our options are:\n1. Merge @Furkan PR (e.g. rollback), and consider this bug as a \u201cfeature\u201d...\n2. Rollback in 2.7.x branch but keep this \u201cbreaking\u201d bug fix in 2.8\n3. Do nothing and affected users had too modify their APIs\nRegarding way to adopt existing apis, you just need to exclude listen path from your urls when you url paths in API definition.. @bitsofinfo in your API which you attached, your slug is my/1.0/oauth/token\nAnd you have defined endpoint: /my/\\\\d.\\\\d/oauth/token\nSo in your case, replacing /my/\\\\d.\\\\d/oauth/token with just \"/\" should do the job.\n. Do not think we need to have it configurable. Just make it work without \"UseSession\", as our request header transformation works. \nAlso, we have replaceTykVariables helper, which you can see at mw_modify_headers.go , and in addition to tyk_meta, it will also add support for tyk_context.\nIMHO it can be as simple as:\nfor h, v := range h.config.AddHeaders {\n        r.Header.Set(k, replaceTykVariables(r, v, false))\n    }\nDo not forget to apply this modification for both endpoint plugin and global plugin (within same file).. Can you clarify which version of dashboard do you use?. done. Can it be related to https://github.com/TykTechnologies/tyk/issues/2143#issuecomment-471158803 ?. One of the biggest users of go-cache is our regexp package, so test there too. . Can it be that inside your plugin, you change/disregard body of the request?. Probably you need to remove this comment from source.. What is the reason of removing this lines?. I think only repo \"members\" can assign the labels. For example, If a user is not the first-time contributor, he can create a branch based on his old work. And there are many cases like this. . I'll create separate developer guidelines which include this information. Once it is added, I updated template and link to it.. It's totally ok, my grammar needs heavy lifting :) . Are you sure that \"show\" function should echo to stderr?. Well stderr for errors, stdout for warns and info messages. Just about semantics. \nIn this concrete case, there is high chance that Travis renders \"stderr\" and \"stdout\" with a different color, so there may be some confusion. . If so I'm ok :). Right! . Well, this section for contributors, and named \"Building the project\" the project. And it still generate binary, if you want just to test Tyk.\ninstall is a tricky command and rarely anyone use it. By default, $GOPATH/bin does not add to the $PATH, so it will only confuse newcomers. And frankly, I did not saw anyone using it in documentation.. Well, I'm not sure if @lonelycode used anything like that. I usually just use git clone with specified path, it automatically creates directories. . I'm not sure why, but right now with \"-u\" it generate lot of warnings like this:\npackage github.com/TykTechnologies/tyk/vendor/gopkg.in/vmihailenco/msgpack.v2: github.com/TykTechnologies/tyk is a custom import path for https://github.com/TykTechnologies/tyk, but /Users/buger/Documents/work/go/src/github.com/TykTechnologies/tyk is checked out from https://github.com/TykTechnologies/tyk.git. Since ApiSpecRegister is a global object \ud83d\ude1e you need to clean up for yourself and the end of the test. In your case it probably will be ApiSpecRegister = nil. It still moves the binary :) \nBut trick caching during running install indeed nice, make sense try it with our dev environment project.\nWell, this is trick, anyway. Those who know prefer about install, ignore our guide anyway.. Added vendoring example. > trick with  caching\nI specifically checked top Golang projects I know, now one use it. It means something. go build is a default by Go community, and everyone knows how to use it. So, leave it as it is. . Since you started refactoring it, probably make sense to simplify it even more and just subrouter := Muxer and remove else statement below.. While switches are ok, and some of the bracket removal too, I'm not sure about this optimization (and other similar like in middleware_HMAC.go#355). I liked the previous version way more.\nIn most of the coding standards (not Go, in general), having spaces around arithmetic operations is kinda required. And in this case brackets are ok as well.. Well, if this was a gofmt suggestion, then for sure will be easier not to fight with it. \ud83d\udc4d . So, if this function do not have any differences from SetRollingWindow, maybe make sense to remove it at all, and replace all references by SetRollingWindow ?. Got it, make sense. While I agree on functions, I'm not sure about constants. They usually always an upper case in all languages, which makes it easy to distinguish them when reading code.. Why did you decide to separate DummyProxyHandler from ProxyHandler definition? Aren't they related?. Previously this option was enabled only for 2 tests, did you enabled it for all for purpose?. Nope, it fine. Make sense. Just noticed that behavior changed.. Forgot to remove debug?. Ah, I see, did not noticed the context. \ud83d\udc4d . Yeah, but probably it make sense to control this situation with own timeout:\ngo\nselect {\ncase signalChan <- true:\ncase <-time.After(20 * time.Millisecond):\n   t.Fatal(\"Timeout reached\")\n}. Well, when we are talking about concurrency code there is no true or false, there is a lot of maybe. For sure we trying to control it, but bugs will happen anyway. So why not to have controlled failure. \nAnd yes, we can increase timeout. . For sure it is better to avoid timeouts, but in this case, you have to install triggers into the tyk internals, to check if requests finished/failed and etc, for example checking if NoticeGroupReload is pushed. \nIf there is sane way to get this event without rewriting tyk, I'm for sure prefer this approach. Just sometimes it can be really tricky.. Just out curiosity, it make sense make it Error again, and add \"ipStr\" to logging info, to see if number errors is changed, and if our assumption about Ipv6 is right. Maybe there are more ipStr issues we do not aware about?\nOverall looks good.. pls add ipStr to error message too. Can you group all multiline t.Error call to single one?. I understand that it was there before you, just thought it make sense fix it right away here. If you prefer separate PR it is ok.. If you want to get rid of fixed port, you can use \":0\", so OS will assign random free port, and getting it back using server.Addr. The same way you can get rid of global http server.\nIt can be a separate PR later if you prefer. Or maybe we can leave it as it is. . Why is it inside for loop?\nr.Connect can never return false and GetRelevantClusterReference seems like never can be nil if Connect was called.. Why you specify map length here? From what I understand it may be used only for performance reasons, but I doubt it is the case here. . > You may call it premature optimization\nI do :)\nIt is non-default behavior and usually not used for maps. That's why I was wondering, and someone else who will work on this code can too.\nIf you really want to keep them here, I'm ok, it just attracts attention.. Why not t.Fail(err)?. Why this test was removed?. It seems like this part was completely removed, without being replaced by GetIPFromRequest. Even if clientIP not used anywhere, it still miss error logging, in case if RemoteAddr has issues. . Yeah, we can do that in future, this block does have differences, but minor ones. Let's make it as separate PR, maybe you will touch this part someday :). Yeah, I do not like this set of booleans as well. Will think about using keyed values. . This tests need to ensure that NO apis exists at start of the tests. So it removes all the previous API's before each test run. os.RevemoAll also removes the test directory, so I have to re-create it. . Yeah, I made it hardcoded to avoid variable replace or templates. . Why you added lines above?. I'll be frank, this change does not look that good, especially we if we change config options, we will have to modify them there too. \nWhat about moving default config into a variable outside writeDefaultConf function: \nvar defaultConf = Config{\n        ListenPort:     8080,\n                ....\n}\nAnd then use this variable in writeDefaultConf and test initialization: config = defaultConf.. Yeah, lets try to do it.. Can you call it handleResponseChain to keep the same meaning as original one?. I'm concerned about this line, you completely switched logic here, nope?. Can we merge without this comment?:)\nI mean can you ensure that all dojwonwrite calls will not cause panic?. Probably should be named ctxIsDoNotTrack. What \"v\" variable means in this context? And < 2 in particular.. Just a thought, since \"/\" is optional here, does it means that \"/api{apiID}\" (without slash between path and id) will be valid? It is not the critical, just want to confirm.. Actually, I think it is totally safe to remove this compatibility check. If you pass 3 arguments to the function that have only 2, everything should be fine.. If client wrote 8 bytes on the wire, it will be always possible to read them in 1 single read. If it is not possible, it means that client wrote less than 8 bytes.. Yeah we should introduce const for this.. Right, I misunderstood what ReadFull does, you are right we can re-use it.. > the first two are so that we can change this \"protocol\" in the future more easily.\nExactly\n\nThe silent overflow is a bit scary, even if we're sure that we won't touch this very often.\n\nGood point, because if we would like to change protocol, we for sure forgot about this limitation.. I just realized that I can't just embedd the field, because I need to override Accept function. Also ListenAddr is a go-rpc function, and this is actually is not net.Listener but gorpc.Listener interface, which differs.. What about potential integer overflow?. Looks like a big chunk of code...\nIn master we still use valToStr https://github.com/TykTechnologies/tyk/blob/master/mw_url_rewrite.go#L90. Actually a good point, because our co-process functionality, which should be synced with this one, just use > 0 https://github.com/TykTechnologies/tyk/blob/master/coprocess.go#L274. I'm not sure why we have 2 steps here (t.JQFilter.Next()). Can you clarify it?. If we going to make it right, let's also introduce configuration variable. . This is also a new addition, which I proposed in https://github.com/TykTechnologies/tyk/pull/1094.\nSince we creating a new router, we should re-apply same router settings. . Not sure what you mean here. \ud83d\udc4c . It did not worked :). I think in future we will use custom client, in order to override TLS settings, but for now make sense to merge for consistency. . Missed your message! \nThank you for clarification, I was confused because our transformation middleware supports only response or request body modification. And your one also supports headers and context variables.\nI'm not sure if fully understand use case of setting context variables or headers based on the body. Is it something you actually use by your own? . I would prefer having 2 for cycles for both global and request specific headers, to avoid additional memory allocations.. If feel like \"allowed\" is not the right word here, because we talking about headers which should be removed. . Do not forget to remove log debug calls, and I think you can pass header name directly instead of using forwadedForHdr variable. Also, I think you can remove outreq.Header.Del at all, because our header transformation middleware will delete it, so you do the double work: goal of this functionality is not to override/add new heaver value.. Additional queston, in your examples you do: . as [$reqContext, $resHeaders, $body], which is a bit cryptic. Can we use proxy object instead, smth like .tyk.body, .tyk.context and etc?. Not sure if you got my idea. . in jq treated as a this or input data. What if instead of passing array to it, we will pass { \"body\": .., \"context\": ... , \"headers\": ... } object, so our jq filter will look like:\n.body + {\\\"TRANSFORMED-REQUEST-BY-JQ\\\": true, path: .context.path, user_agent: .context.headers_User_Agent}. Also, just to clarify, in jq syntax \"+\" means merge objects, right? . I assume you should rollback this config option?. Right. I assume we should add tagging to error handler too. . my bad. I wanted to make it consistent with rest of authentification methods. While from technical point of view we can replace it like this, from UX perspective, keeping separate attribute makes more sense, since it follows existing conventions on how we configure authentification.. It is possible but note that this is a static code which runs only on gateway start.. I'm not sure what you mean here if you look at the whole function this is a standard way how we conditionally include middleware: if spec.UseBasicAuth, if spec.EnableSignatureChecking, if spec.EnableJWT and etc. . Actually, it used a lot both in tests and code, outside of package. For example mw_auth_key.go. Used outside package, needed for tests.. Yeah, will leave it for you to refactor one day :). I know it is not your code, but still, don't you think it can cause a data race issues because spec object is shared across requests? In most cases, it will always be single value, but if there is lot of upstream rewrites logic it potentially looks dangerous.. Yeah, I did not mean that this issue should be in the context of this PR. Just wanted your thoughts on it.. TLS domain check works only if you pass it via URL. Inside this test actually both situations. First is when domain is provided in url, SNI turned on, and verification happens on TLS level, using domain. And second when domain is unknown.. I would prefer staying like this because this is one of the features I like with using t.Run. For me, it is the replacement of comments in the code, so I can in human language describe the high-level goal of the test. And in the end, it works fine when you run the single nested test from the command line too, it just replaces spaces with underlines. . Nice!. Does adding enum automatically makes field \"required\"? Asking because curious why you allowing empty string here.. I think it should be totally safe ignore both of this errors in this function. In the first case, you are parsing current URL, which was already validated. In the second case, almost the same URL object, just changed query string a bit.. Looks good! But I think it makes sense make it obvious to the user that tokes are hidden. Smth like this:\n```\nif key != \"\" {\n    fields[\"key\"] = key\nif !config.Global.EnableKeyLogging {\n  key = \"<hidden>\"      \n}\n\n}\n```. Note that it will be called for each incoming connection, and I would rather avoid it. \nCan we lock only writers here, and keep readers not touched?. @dencoded make sense. But in fact, we modify apiSpec records only inside apiLoader, so we modify them all at once, and can replace in Value.. should be called _tyk_context to be similar to follow same guidelines https://tyk.io/docs/concepts/context-variables/. Should be called response_headers. Should be called tyk_context. Should be called rewrite_headers. Should be called _tyk_context. Set them without prefix. Just  contextDataObject[k]. Should extend error message with an original error err. . I think it was sort of optimization here, to not run this middleware all the time. \nAnd it could be fixed without removing this for loop and adding an additional check, before loop, like:\nif m.Spec.CacheOptions.CacheAllSafeRequests {\n   return true\n}. Yeah, I'm ok with the current solution too, it should work well. Just needs to be confirmed.. Do you added = nil for expressivity or it is needed somehow?. I assume you forgot replace constant here. Does it needed for NewRelic integration somehow, or for your internal purpose?. I assume this line should be run only if new relic enabled?. Same here, maybe we should run it only if new relic is enabled?. Do you think it make sense get rid of Enabled field, and instead just check if AppName is non empty?. Since middleware created per API, I think it should be ok to add some field to ValidateJSON middleware and cache this schema.. Let's make it configurable, and add this header ONLY if header value is specified. \nRelated to our latest tech meeting. Basic idea that we should not expose user infrastructure, in other words that user use Tyk (which can be easily identified by this header name).. This can't be really counted as a real test because it does not show that request was actually sent to the right version. Also, it does not go through HTTP pipeline. Also, I see that you copy pasted API definition, and a lot of the stuff in it does not use at all. There is a better way of writing tests for the gateway, see buildAndLoadAPI function usage. But basic idea that your test will look like:\n```\nfunc TestDefaultVersion(t *testing.T) {\n    config.Global.ListenAddress = \"127.0.0.1\"\nln, _ := generateListener(0)\nbaseURL := \"http://\" + ln.Addr().String()\nlisten(ln, nil, nil)\ndefer func() {\n    config.Global.ListenAddress = \"\"\n    ln.Close()\n}()\n\n    buildAndLoadAPI(func(spec *APISpec) {\n       v1 := apidef.VirtualMeta{Name: \"v1\"}\n       v1.Paths.WhiteList = []string{\"/\"}\n\n       v2 := apidef.VirtualMeta{Name: \"v2\"}\n       v2.Paths.WhiteList = []string{\"/get\"}\n\n       spec.VersionData.Location = \"url-param\"\n       spec.VersionData.Key = \"v\"\n\n       spec.VersionData.Versions[\"v1\"] = v1\n       spec.VersionData.Versions[\"v2\"] = v2\n       spec.VersionData.DefaultVersion = \"v2\"\n    })\n\n    testCases := [...]struct {\n    url     string\n    code int\n}{\n    {\"/\", 404}, // Not whitelisted for default v2\n    {\"/get\", 200},  // Whitelisted for default v2\n    {\"/?v=v1\", 200}, // Allowed for v1\n    {\"/?v=v1\", 404}, // Not allowed for v1\n}\n\n    for _, tc := range testCases {\n      resp, err := http.Get(baseURL + tc.url)\n      if err !=nil {\n        t.Fatal(err, tc)\n      }\n\n       if resp.StatusCode != tc.code {\n         t.Error(tc.url, resp.StatusCode, tc.code)\n       }\n    }\n\n}\n``. Why you set it to v3?. I think it should be configurable via Tyk config. Only header. Exactly the same as now, just check config value instead, and check if its empty or not. I assume you need to removedefaultVersionHeaderconstant and replace it withconfig.Global.DefaultVersionHeaderin all places.. This code snippet repeated in 3 places, without any changes. I think make sense move it to separate function, and re-use everywhere.. Since it is notDefaultanymore, and probably make sense rename option to justVersionHeader. Rename JSON field too, and removedefaultVersionHeaderconstant. This stuff is new, did you used some experimental protobuf version to build this? . Now it requiredgrpc` packages (previously it dont). \nI would say that it is better to run script with same protobuf version as we officially use now in CI.. From what I understand RawPath do not include query string. Pls update your PR to use martin changes if you thin they will work.. You forgot to update \"X-Tyk-Default-Version\" to config.Global.VersionHeader. Right, I just thought you initially wanted make it configurable. Yeah, let's make it configurable, update bool to string.. I like indentation level. I'm a big concerned about single supported Cipher. Is it an official Go way to enable http2?. Can be replaced by tr.TLSClientConfig.InsecureSkipVerify = config.Global.ProxySSLInsecureSkipVerify. @LuanvP you should apply gofmt to fix formatting like this: gofmt -s -w config/.*. I think it should be Fatal instead. I assume this no longer needed since you migrated tests.. Pls remove this debugging. Why you removed it?. I noticed you not passing any info that key is hashed here, are you sure it will not do double hashing here?. Why this change?. \ud83d\udc4d . Looks like logic changed, are you sure about this change?. Check if json.Unmarshal returns error, maybe it will contain some useful debugging info. In this case better use switch:\n``\nswitch mode {\ncase TransformedResponse: \n...\ncase InjectHeadersResponse:\n....\ndefault:\ncontinue \n}. In general, I like this approach to reduce copy paste, and it should be probably applied to rest of modules in future, pls pls name it smth likemainLogor similar. . I do not think you should use string replace the whole URL. Make it work with path only, seeStripListenPath few lines below, it does exactly what you want and very similar in its logic. Also do not forget that we have also RawPath, which used for analytics. . As mentioned in slack, I would rather not rely on on 3-rd party library for json parsing, and will runyaml.Unmarshalonly if string looks like YAML, since it is easy to detect by checking first byte. . I think you need to calldefer resetTestConfig()after each config declaration section, in both tests, similar to how its done in the rest of tests.. For cases with config races, I introduced new mutexconfigMu` you can see its usage. . Not sure if I follow, here you actually removed usage of pointer, what I'm missing?. /cc @matiasinsaurralde . Can you add more debugging info here, like handle object. \nAnd for \"FOUND EVENT HANDLERS\" message, at least add handlers count.. good point, either this or replica function to just log.Debug. Why only context and not meta?. Do not think you can do this. Type checking for map[string]interface{} does not work. You should use reflect.TypeOf(a).Kind() == reflect.Map and reflect.TypeOf(a).Kind() == reflect.Array. Can you put link to related PR, so we can merge it, and you will rebase on master.. I think it is a bit unfair to call this variable recordsBufferSize, because its not total value, actual buffer will be pool * buffer_size. It feels like doing recordsBufferSize = recordsBufferSize / pool_size will be more fair.. We need to be careful here, in cases when detailed recording is turned on payload size can up to few mb for each record. Just want to ensure that such big buffer won't cause memory issues in edge cases.. Les say we have 50 workers, and 1000 buffer per worker and each receives traffic which has around 200ms around requests (but a bit lower), and do not hit timeout, mentioned above. Time to fill the buffer can be up to ((1000 * 50) * 0.2)/60 ~ 166 minutes. Correct me if I wrong. \nIf this true, I suggest putting one more top timeout to this select, which will force writing analytics to redis every second.. make sense replace with recordsBufferFlushInterval + 50?. Or you can leave it as it is, like \"buffer_size\", and per pool buffer will be: BufferSize / pool_size. \nIMHO, it is the most logical here. You separate control concurrency via pool size and total buffer size. Just set it to bigger value if you want, like 10000. \nFor sure if we will be able to auto-grow this buffer, and we do not need to expose this option at all, it will be even more cooler, but only if implementation does not take too much time. . It is definitely a bug (just fixed it). The main idea behind this line was to run session update for cases when plugin returned mwStatusRespond, e.g. responds on its own.\nThe fix itself was:\nif errCode != mwStatusRespond {\n...\n} else {\n    mw.Base().UpdateRequestSession(r)\n}. I actually believe it will be handled by itself. Session cache holds only pointers to session object, so if session itself modified, the cache should be too.. removed \ud83d\udc4c . removed. You are right, now I update the cache. Not sure why you moved code from here. Do not think duplication here is needed. \nIf len(splitKeys) == 0 then key is equal to  splitKeys[0].. Do you think that implementing GetRawKey for this makes more sense?. Do not think it should be a part of RPCStorageHandler class. Leave it as separate helper function.. Lets then generalize it, we will for sure need GetRawKey in future.. ^ yes, make sense to do right type checking, who knows which garbage can be inside this record. . Probably agree with @asoorm. In this case we solving a bug. . Why this check is needed, and why not to always set expiration form JWT token if it is not zero? . @joshblakeley do you think we can now rewrite GetKey function to use GetRawKey internally?. pls remove this line. Remove debugging info here, and few lines below.. dont usually not used in naming variables. \nAlso, since this is already inside the proxy section, you probably can name it: disable_strip_prefix ?. True. Just made the change.. I do understand why it was done like this, however, I feel bad while looking at it.\nI propose to make it simple, and in such case, just require passing one more attribute \"org_id\".. Maybe, but in general, it is very unsafe thing if you run on the multi-core machine and it schedules these goroutines in parallel.. thx, added note to ticket about swagger (it already had \"needs documenting\" label). \nBut in general, in future, it makes sense move swagger file from docs repository to Tyk repository. . Looking at analytics code we messed up this param previously, and in some places it use \"1\" and in some \"true\", so for backward compatibility reasons we have to keep it like this.. I think this clause, and in Check function not needed anymore.. Lets rename to meta_data like for keys. Agree. Main code should not contain helpers used for tests. Needs be moved to test suite.. Using all IPs from the record is the safest approach. I vote to just fetch random IP record instead of the first one, which is kinda simplified round robin. . I do not care that much about performance here. What I do care about, is that when we wrap dialer like this, we made all our users use this new code (which for sure has bug somewhere, like with all new code). So if we wrap dialer only when DNS turned on, this potential bugs will happen only for users who enabled DNS caching. . Let's keep it like this for now.. Pls do not use osArgs for this. Pass them directly requestThrottlingTest(\"PolicyLevel\"), and convert requestThrottlingTest to be a generator: \nfunc requestThrottlingTest (cfg sring) func(t *testing.T) {\n   return func(t *testing.T) {\n     ....\n   }\n}. Combine this 2 separate tests into a single one, with additional t.Run levels, like:\nfunc TestRequestThrottling(t *testing.T) {\n    t.Run(\"Policy level\", func(t *testing.T) {\n         testRunner := requestThrottlingTest(\"policy\")\n         ...Inner t.Run calls....\n    })\n    t.Run(\"Key level\", func(t *testing.T) {\n         testRunner := requestThrottlingTest(\"key\")\n         ...Inner t.Run calls....\n    })\n}. Do not rely on the test name. Pass configuration as arguments (see below comments for recommended approach). You probably meant what is the difference between \"pick first\" and \"no_cache\". \nIn think idea here, that since m.cacheStorage.Delete(host) is run, it forces \"cache\" wrapper to run DNS every time. Additionally \"pick first\" is a default Go DNS strategy too. In other words, we first cache and then disregard cache immediately.. True, but the alternative, in this case, is do a second DNS call, and run safeDial(host, \"\") \ud83d\ude1b . fixed. What it is? and why it is needed?. Why not to trust what passed to ctxSetSession ?. ",
    "danburke": "That worked Martin, sorry - I missed the requirement on Mongo\n. ",
    "mNantern": "Something new on that ?\nHow can I help ?\n. In OAuth 2.0 documentation page it's written that:\n\nTyk supports the following grants:\nAuthorization Code\nRefresh token\nPassword\nClient Credentials\n\nIs it possible to use client credentials grant type or it's a mistake in docs ?\n. Great news ! Do you have documentation (or an example) on how to use it ?\nWhat is missing to close that issue ?\n. Any news about that issue ? \nBecause when you put a keyless in /users and an Authorized in /users/protected everyone can call /users/protected without security.\nSeems really bad, no ?\n. tyk.linux.amd64-2.2.0.0\nTo be more clear I have a keyless API with only a listen_path:\n\"use_keyless\": true,\n...\n\"listen_path\": \"/mobile/v1/users\"\nAnd another one with whitelist:\n```\n    \"auth\": {\n        \"auth_header_name\": \"Authorization\"\n    },\n...\n   \"white_list\": [\n                                {\"path\":\"/users/peripherals\",\"method_actions\":{\"GET\":{\"action\":\"no_action\"}}},\n                        ],\n...\n\"listen_path\": \"/mobile/v1/\",\n```\nIn that case I can call /mobile/v1/users/peripherals without authorization\n. I have a 403 Forbidden when calling GET /mobile/v1/users/peripherals with the following:\n```\n    \"auth\": {\n        \"auth_header_name\": \"Authorization\"\n    },\n\"extended_paths\": {\n                    \"ignored\": [{\"path\":\"/users\",\"method_actions\":{\"POST\":{\"action\":\"no_action\"}}}],\n                    \"white_list\": [\n                                {\"path\":\"/users/peripherals\",\"method_actions\":{\"GET\":{\"action\":\"no_action\"}}},\n                                ],\n                    \"black_list\": []\n                } \n...\n \"listen_path\": \"/mobile/v1/\",\n``\n. The one that I'm trying to call (/mobile/v1/users/peripherals`) is already in my whitelist but I have a 403:\n```\ncurl --include -H \"Authorization: Bearer 6185b0cd-7181-4222-821d-5979aee136e9\" 'http://localhost:8082/mobile/v1/users/peripherals'\nHTTP/1.1 403 Forbidden\nContent-Type: application/json\nX-Generator: tyk.io\nDate: Tue, 30 Aug 2016 16:14:16 GMT\nContent-Length: 50\n{\n    \"error\": \"Requested endpoint is forbidden\"\n}\n```\nI can call POST /mobile/v1/users without authentication (and without adding it to the whitelist):\n```\ncurl --include -X POST 'http://localhost:8082/mobile/v1/users'\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json;charset=UTF-8\nDate: Tue, 30 Aug 2016 16:14:07 GMT\nPOSC_TRANSACTION_ID: TID=02b788ef-0d1d-4d3e-84df-d025e9b98b17\nServer: Apache-Coyote/1.1\nVary: Accept-Encoding\nX-Ratelimit-Limit: 0\nX-Ratelimit-Remaining: 0\nX-Ratelimit-Reset: 0\nContent-Length: 182\n{\n  \"errorCode\" : \"[160830-18:14:08][TID=02b788ef-0d1d-4d3e-84df-d025e9b98b17]HttpMediaTypeNotSupported\",\n  \"errorMessage\" : \"Content type 'application/octet-stream' not supported\"\n}\n```\n. So there are 2 issues here:\n1. The one originally reported by tandonraghav, that still exists in tyk 2.2\n2. Another one: if you have an \"ignored\" path then the white_list is not working anymore.\nDo you want me to open a new issue for n\u00b02 ?\n. I have to put a lowercase here otherwise it wasn't working.\nAnd it looks like whitelist are not case sensitive:\nwith the following whitelist (uppercase on serialNumber and boxNumber):\n{\"path\":\"/data/boxNumber/{boxNumber}/serialNumber/{serialNumber}/code/{code}\",\"method_actions\":{\"GET\":{\"action\":\"no_action\"}}}\nThat request is not working (uppercase on serialNumber and boxNumber):\nbash\ncurl -X GET -H \"Content-Type: application/json;charset=UTF-8\" \"http://localhost:8082/hub/v2/data/boxNumber/test/serialNumber/test/code/test\"\n{\n    \"error\": \"Requested endpoint is forbidden\"\n}\nBut with lowercase in whitelist it's working (lowercase on serialNumber and boxNumber):\n```\n {\"path\":\"/data/boxnumber/{boxNumber}/serialnumber/{serialNumber}/code/{code}\",\"method_actions\":{\"GET\":{\"action\":\"no_action\"}}}\n(uppercase on serialNumber and boxNumber)\ncurl -X GET -H \"Content-Type: application/json;charset=UTF-8\" \"http://localhost:8082/hub/v2/data/boxNumber/test/serialNumber/test/code/test\"\n{\n    \"error\": \"Authorization field missing\"\n}\n(lowercase on serialNumber and boxNumber)\ncurl -X GET -H \"Content-Type: application/json;charset=UTF-8\" \"http://localhost:8082/hub/v2/data/boxnumber/test/serialnumber/test/code/test\"\n{\n    \"error\": \"Authorization field missing\"\n}\n```\nTyk v2.2\n. Yes, sure, I'm closing it !. Is it something planned for a future release of Tyk ?\nIs it hard to implement that ? (I don't know Go but I can try)\n. I didn't actually use the key it was just a test to see if I can dynamically change the expires_in of an OAuth access_token.\nIt looks like it's not possible at the moment.\nWhat do you think of adding a new section in key_rules to specify the oauth access token expires_in ? \n. You can find here the list of supported command by Dynomite:  https://github.com/Netflix/dynomite/blob/3ad2d235428175b10e6568e566f7ef76d11dc413/notes/redis.md. Thank you for your response ! \nIndeed MDCB has not the same goal as Dynomite. I was just looking for a way to deploy a multi DC Tyk Open-Source so I only need Redis replication.\nI will try with Redis Cluster, thanks !. @lonelycode just a bug in our code. But the result seems odd\n@mvdan yes we are using Tyk 2.2\n\nEdit description (I made a mistake with my Redis command). Yep that should be sufficient from my point of view ! \n\nThank you for your quick response (as always) \ud83d\udc4d . ",
    "josephearl": "I think this can be closed now. The CSV pump writes out the whole struct - https://github.com/TykTechnologies/tyk-pump/blob/master/pumps/csv.go.\n. I'm running Tyk through Docker (v1.9) and I'd also like to be able to expose login to the dashboard on port 80, e.g. portal.domain.com for the portal and dashboard.domain.com for the dashboard both on port 80.\n. Yes I thought I could do it pretty easily if the dashboard was running on a separate instance - I may do that, but would be nice to have it all running on one small instance if possible.\n. I have followed that and setup 2 CNAMES from dashboard.domain.com and portal.domain.com to the instance DNS. However dashboard.domain.com resolves to the same content as portal.domain.com, but using port 3000 on either subdomain works to access the dashboard.\nMaybe I've configured something wrong?\n. Yes for each 3 entries I've changed the custom domain to use portal.domain.com and the target URL to use ambassador_1:\n- Portal: portal.domain.com, listen path: /, target URL: http://ambassador_1:3000/56a917b7b477e60001000001/portal/\n- Portal API: portal.domain.com, listen path: /api/, target URL: http://ambassador_1:3000/\n- Portal Assets: portal.domain.com, listen path: /portal-assets/, target URL: http://ambassador_1:3000/\nI don't see anywhere in there about setting a host name for the admin dashboard to be dashboard.domain.com though, unless that's what I should be putting there?\nNB: I did not edit the hosts file on the instance itself to point 127.0.0.1 at dashboard.domain.com like I did when testing locally since that was taken care of with DNS.\n. I've tried the v1.9 setup instructions again locally - and although it says it everything is available on port 80 the setup script tells me to login at port 3000 not 80; I do have 2 entries in my hosts\n<docker-machine ip default> www.tyk-portal-test.com\n<docker-machine ip default> default.docker\nbut am unable to login to the dashboard anywhere but port 3000\n. Thanks will give that a try out, but maybe I'll have to be happy with port 3000 - this is mainly for dev/test environments so that's OK. \nFor production I'll look at running the dashboard on a separate instance.\n. PS -- I tried creating a new API named \"Dashboard\" with the custom domain \"dashboard.domain.com\" and listen path \"/\" -- but had no luck. Will try splitting the dashboard and gateway across separate instances.\n. I tried A records, that didn't seem to help. Also tried doing it locally with the Tyk quick start and adding 2 hosts entries for www.tyk-portal-test.com and www.tyk-dashboard-test.com, setting the built-in 3 APIs to the first and adding a new dashboard API for the second but didn't have any luck. \nI have the feeling it should be working, but for some reason it's not :)\n. @lonelycode Thanks for all of your help, great support. If you have a repo for docs I'd be happy to contribute around the Docker area - I think having info on how to run the compose script on a remote Docker machine would be great (I had to make some modifications for this - mainly including the config files in the gateway/dashboard image rather than mounting them).\n. I noticed one issue with my setup - when I go to my portal and go to view the interactive docs for my catalogue it tries to send me to http://portal.domain.com/apis/apis/56aa28998b529b000100000d/documentation/ which gives a 404.\nIt looks like the correct URL is (without the double /apis/apis) http://portal.domain.com/apis/56aa28998b529b000100000d/documentation/ which works fine. \nDo you know how I can fix the link displayed in the portal? \nOr should I add another API with the listen path /apis/?\n. :+1: this is how I thought it would work initially, until I realised I had to paste the content in\n. Does URL based import load the original Swagger file once? Or every time I load the page?\n. Awesome. That's what I need then... although I need to set up a small server in front of my micro services first to combine the swaggers. Been using Tyk in a dev/test environment and was getting bored with repasting the swagger.json and updating links to the docs, that will save me some time, thanks!\n. :+1: since it is possible to set target URLs that include a path, this is needed to use the same path when using service discovery.\n. For me I got this working by just configuring SSL in the gateway (with a wildcard cert for subdomains covering both the portal and dashboard), then proxying the dashboard through the gateway, as @lonelycode mentions in his last comment.\n. @lonelycode Is there any way to redirect from http to https using the http_server_options ?\n. Actually I'm seeing an issue. Everything works except for requesting API keys (though creating them manually in the dashboard works).\n\nWhen I request a new key through the portal I see the following:\ntyk-dashboard_1 | time=\"2016-02-01T15:51:16Z\" level=warning msg=\"Failed to retrieve object: not found\" \ntyk-dashboard_1 | time=\"2016-02-01T15:51:16Z\" level=error msg=\"No menus found\" \ntyk-dashboard_1 | time=\"2016-02-01T15:51:16Z\" level=error msg=\"Trying to create token from cvatalogue with no auth types! No supported auth types!\" \ntyk-dashboard_1 | time=\"2016-02-01T15:51:21Z\" level=warning msg=\"Failed to retrieve object: not found\" \ntyk-dashboard_1 | time=\"2016-02-01T15:51:21Z\" level=error msg=\"No menus found\" \ntyk-dashboard_1 | time=\"2016-02-01T15:51:21Z\" level=error msg=\"Trying to create token from cvatalogue with no auth types! No supported auth types!\" \ntyk-gateway_1   | 2016/02/01 15:51:21 http: TLS handshake error from 172.17.0.4:59002: tls: oversized record received with length 21536\ntyk-dashboard_1 | time=\"2016-02-01T15:51:21Z\" level=error msg=\"Failed to create key: Post http://ambassador_1:8080/tyk/keys/create: malformed HTTP response \\\"\\\\x15\\\\x03\\\\x01\\\\x00\\\\x02\\\\x02\\\\x16\\\"\" \ntyk-dashboard_1 | time=\"2016-02-01T15:51:21Z\" level=warning msg=\"Failed create:Failed to create key: Post http://ambassador_1:8080/tyk/keys/create: malformed HTTP response \\\"\\\\x15\\\\x03\\\\x01\\\\x00\\\\x02\\\\x02\\\\x16\\\"\" \ntyk-dashboard_1 | time=\"2016-02-01T15:51:21Z\" level=error msg=\"Key creation failed! Failed to create key: Post http://ambassador_1:8080/tyk/keys/create: malformed HTTP response \\\"\\\\x15\\\\x03\\\\x01\\\\x00\\\\x02\\\\x02\\\\x16\\\"\" \ntyk-dashboard_1 | time=\"2016-02-01T15:51:21Z\" level=error msg=\"Generation error: Failed to create key: Post http://ambassador_1:8080/tyk/keys/create: malformed HTTP response \\\"\\\\x15\\\\x03\\\\x01\\\\x00\\\\x02\\\\x02\\\\x16\\\"\"\nIt seems to think the catalogue at first has no supported auth types, but the API is set to auth token. Then it goes ahead and still displays the request button but when I click that there is a lot of bad SSL responses.\nActually it looks the the dashboard is hitting the HTTP endpoint, and getting back an HTTPS response. Will try changing the tyk_api_config Host to to \"https://ambassador_1\" at port 8080\n. I tried setting the Host to https://ambassador_1 but of course my SSL certificate is not valid for that URL.\nI will try generate an SSL cert to be used only for the ambassador URL, and use my cert for the dashboard and portal URLs.\n. OK I got it working. I am serving all components from subdomains (e.g. dashboard.mydomain.com, portal.mydomain.com) using a wildcard SSL.\nSo I need to use the Ambassador with HTTPS, but in order to do that I need the Ambassador to be at a URL which has my domain in.\nSo I created a new DNS entry valid with that SSL certificate pointing to the machine running Docker (e.g. name it ambassador.mydomain.com) The reason for adding a new DNS entry is my Dashboard and Portal are bound to the others.\nThen in my tyk_api_config I changed the host and port to be\n\"Host\": \"https://ambassador.mydomain.com\",\n\"Port\": \"80\"\nI changed port 8080 to 80 so I did not have to expose port 8080 on the machine.\nRequesting API keys then works fine.\nThe downside of this is not all traffic travels within the Docker network, but since it is protected with HTTPS it should be fine.\n. I think it should be possible with just https://ambassador_1, if you change your SSL config to:\n\"http_server_options\": {\n    \"use_ssl\": true,\n    \"server_name\": \"*.mydomain.com\",\n    \"min_version\": 2,\n    \"certificates\": [\n      {\n        \"domain_name\": \"*.mydomain.com\",\n        \"cert_file\": \"/opt/tyk-gateway/ssl/mydomain.crt\",\n        \"key_file\": \"/opt/tyk-gateway/ssl/mydomain.key\"\n      },\n      {\n        \"domain_name\": \"*\",\n        \"cert_file\": \"/opt/tyk-gateway/ssl/selfsigned.crt\",\n        \"key_file\": \"/opt/tyk-gateway/ssl/selfsigned.key\"\n      }\n    ]\n  }\nSo a different SSL cert is used for the ambassador_1. Will give it a try later on.\n. OK I got this working without having to leave the Docker network.\n\n\nGenerate a self signed cert for the CN ambassador_1\n\n\nIn your tyk-gateway.conf file add both your own cert and the self signed cert for ambassador_1\n\n\n\"http_server_options\": {\n    \"use_ssl\": true,\n    \"server_name\": \"*.mydomain.com\",\n    \"min_version\": 2,\n    \"certificates\": [\n      {\n        \"domain_name\": \"*.mydomain.com\",\n        \"cert_file\": \"/opt/tyk-gateway/ssl/mydomain.crt\",\n        \"key_file\": \"/opt/tyk-gateway/ssl/mydomain.key\"\n      },\n      {\n        \"domain_name\": \"ambassador_1\",\n        \"cert_file\": \"/opt/tyk-gateway/ssl/ambassador_1.crt\",\n        \"key_file\": \"/opt/tyk-gateway/ssl/ambassador_1.key\"\n      }\n    ]\n  }\n\nYou will need to create a Dockerfile which extends tyk-dashboard and install the ambassador_1.crt as a trusted cert, you can do that with\n\n```\nADD ambassador_1.crt /usr/local/share/ca-certificates/ambassador_1.crt\nRUN update-ca-certificates\n```\n\nIn your tyk-dashboard.conf set your api_config to include https\n\n\"tyk_api_config\": {\n    \"Host\": \"https://ambassador_1\",\n    \"Port\": \"8080\",\n    \"Secret\": \"352d20ee67be67f6340b4c0605b044b7\"\n  },\n\nChange your Docker compose to use your custom version of tyk-dashboard with the SSL cert installed\n. Yes - I did this locally with the 1.10 RC2 and it worked fine, was waiting for it to go gold before submitting a PR. Will submit one tomorrow.\n. @senj yes I submitted a PR to improve the quick start a few days ago https://github.com/lonelycode/tyk_quickstart/pull/3\n. If Tyk could help creating that single public Swagger by aggregating the individual Swagger docs for each service/endpoint that would be useful for me.\n\nI'll do it manually for now, thanks!\n. So I combined my Swagger files into one with a simple Ruby script and pasted that into the portal docs.\nIt loads fine - but the portal seems to be prepending a random listen path (from the APIs I attached to my policy, changes each time I refresh) so I end up with a double listen path /listen-path1/listen-path2/ and the call fails. I have each API on a separate listen path\nActually it looks like every time I reload the page the endpoint is randomly picking one the API endpoints with the listen path included (e.g. domain.com/listen-path1/), rather than the root domain.com - although I suppose it doesn't know all of the APIs in the catalogue share the same domain.\n. Attached is a zip containing the combined swagger and the individual swagger files \nswagger.zip\nIn the combined swagger I prefixed each path with the listen-path of that API in Tyk, and the host is the same as I have set as the custom domain for each API in Tyk.\n. I re-uploaded, should work now. How does Tyk know the listen path to add? - since the combined Swagger doc represents multiple Tyk APIs with different listen paths - I think that might be why I'm seeing it pick a random one.\nI can see why, in the case of having 1:1 Swagger to API then appending the listen path works. But with multiple APIs I think the only way is by having the listen path in the combined Swagger.\n. Maybe it's time I learned Go :smile: ...\n. Also a catalogue could contain multiple APIs with different custom domains, in which case you can't really show a Swagger doc - so perhaps in that case it would just be better to disable the input and show a message explaining that in order to use Swagger all APIs must have the same domain.\n. Code used to combine the Swagger files is here: https://gist.github.com/JosephEarl/334ee0612decc3aaf4eb \nThere's also this https://www.npmjs.com/package/swagger-combined\n. Another approach would be to let the user attach a Swagger document per API, rather than per catalogue/policy, then the portal could combine them into one with the correct listen paths and endpoint.\nThen the custom gateway endpoint should probably be set on the catalogue (or policy), not per API, so all APIs for a policy share the same gateway endpoint and a combined Swagger file can be generated.\n. So I almost managed to work around it.\nI changed my 4 individual APIs with listen paths to use private-gateway.domain.com\nThen I set up another API to use public-gateway.domain.com with no listen path and point to private-gateway.domain.com\nThis works with no auth enabled when curling which is great!\nI imported my combined Swagger and the URLs look correct, but I just see \n{\n  \"error\": \"no response from server\"\n}\nin Swagger UI in the portal (curling the same request URL shown works) :cry: \nMy plan for enabling auth was: create a key that had access to the individual APIs that never expired, and set the main API to add this to the headers. Then secure access to the main with API.\nHowever problem 2 is that I can't seem to manually create a key (in Keys) that has access to those individual APIs - I keep getting \"Key not authorised\". Maybe it's because I don't have a catalogue or policy with them in?\n. Will check that out. Got my auth working, seemed to just be cached keys or something.\n. Checked the dev tools - it is a CORS issue. Thanks.\nI enabled CORS on the public API in Tyk and added the portal domain as an allowed origin, but I'm not seeing it return the Access-Control-Allow-Origin header. I didn't enable options pass through because my upstream application doesn't actually handle CORS at this point.\nEdit: :facepunch: didn't realise I had to specify each HTTP method, added that and it works! Thanks for all of your help.\n. Will look into this now the email part is split out\n. I missed that - was looking at the \"Sending emails\" section of the docs. Thanks that looks like what I want!\n. Sorry that first link didn't work - was the same as the second.\n. Great thanks. Quick q: can I remove the .txt email templates and just keep the .html ones if I want to send HTML email only?\n. You can do this with custom Tyk Middleware - https://tyk.io/v1.9/plugins/middleware-scripting/\n. @lonelycode great news! Thanks for all your hard work\n. Sorry just seen TykMakeHttpRequest in another section of the docs, Can close this, thanks.\n. Thanks @lonelycode, will look into that.\n. Sorry didn't mean to close it.\n. I think Mesosphere cannot be done with the current configuration options:\n- The endpoint returns a list, but it is inside an element \"tasks\"\n- However the list inside tasks is not nested inside a string, so parentPath cannot be used\n- The ports is an array\n. No problem Thanks for the great piece of software!\nWill have a few more changes ready in the next few days:\n- Updates to Docker docs on changes needed to move from the Quickstart to getting it run remotely\n- Some updates to the advanced API docs (things I had dig around for a bit to automate our portal setup)\n. What docker-compose version are you running @mjdev ?\n. ",
    "lchang": "Super. Thank you very much, Martin.\n. ",
    "cheald": "Would it be possible to permit both?\nI've never written go before, but would something like this work?\n``` go\ndiff --git a/middleware_auth_key.go b/middleware_auth_key.go\nindex 566d911..a15d820 100644\n--- a/middleware_auth_key.go\n+++ b/middleware_auth_key.go\n@@ -52,14 +52,14 @@ func (k AuthKey) ProcessRequest(w http.ResponseWriter, r http.Request, configu\n        thisConfig := k.TykMiddleware.Spec.APIDefinition.Auth\n    authHeaderValue := r.Header.Get(thisConfig.AuthHeaderName)\n\n\nif thisConfig.UseParam {\n\nif thisConfig.UseParam && authHeaderValue = \"\" {\n                tempRes := CopyRequest(r)\n        // Set hte header name\n        authHeaderValue = tempRes.FormValue(thisConfig.AuthHeaderName)\n}\n\n\n\nif thisConfig.UseCookie {\n\nif thisConfig.UseCookie && authHeaderValue = \"\" {\n                tempRes := CopyRequest(r)\n                authCookie, notFoundErr := tempRes.Cookie(thisConfig.AuthHeaderName)\n                if notFoundErr != nil {\n```\n\nIdeally, I'd prefer the ability to set both a header param AND a query param that'll be accepted, so that a request could authenticate with (header) Authorization: foobar or (query) ?access_token=foobar; headers are conventionally camel cased and dash-delimited, while query params are conventionally snake cased. It's not a huge deal, but it would be a nice little extra. :)\n. ",
    "lancehunt": "\n1\n  We are going to need the same support for both auth-tokens in querystring and in header.\n. FYI: I have a pull request incoming for this issue - just testing it.\n. Closing this after reading latest comment in #174 asking to merge against develop instead\n. \n",
    "kudigaracoder": "Thanks Martin, We've managed to resolve the conflicts & got the redirects working (directly through tyke port, nginx rewrite is still throwing a 404).\nOne other thing we've noticed is that the configuration update through the Analytics dashboard doesn't seem to reflect real-time. It works only when we restart tyke every time. Are there specific cache settings we should be looking at?\n. ITS ALIVE~\nThanks a lot Martin!\n. ",
    "weters": "One more potential issue (I hope it's a bug and not a feature):\nLet's say you have a rate of 1000 per 60 seconds.\n1. Make a single request\n2. Wait 58 seconds\n3. Make 998 requests\n4. Wait 2 seconds\n5. Make 999 requests\n1,997 requests will be made in a period of 4 seconds and all will succeed.\nI would like to see rate limiting prevent more than X requests over a given Y period. Instead of having the bucket completely emptied when the time elapses, the bucket can be slowly drained every second in order to prevent a burst of double the rate in a short time period. \n. I submitted the pull request. I'll give the bucket draining code some thought and will hopefully submit something soon.\n. ",
    "samek": "tnx. \n. Hi, \n1, No I don't have schemas folder  - but I've found it and put it into the docker.  Which solved the problem \n2. There's my user name inside. \n3. Dashboard is  0.9.3\n4. I've build it myself obviously without schemas folder. \nThanks. for the support. \n. ",
    "mDomingues": "So how do you explain this, master branch up-to-date:\n\n\nmake build/container\nGOOS=linux GOARCH=amd64 go build -o build/tyk\n../../gocode/src/github.com/lonelycode/osin/tokengen.go:7:2: cannot find package \"code.google.com/p/go-uuid/uuid\" in any of:\n    /usr/local/Cellar/go/1.4.2/libexec/src/code.google.com/p/go-uuid/uuid (from $GOROOT)\n    /Users/xxxxx/gocode/src/code.google.com/p/go-uuid/uuid (from $GOPATH)\nanalytics.go:8:2: cannot find package \"labix.org/v2/mgo\" in any of:\n    /usr/local/Cellar/go/1.4.2/libexec/src/labix.org/v2/mgo (from $GOROOT)\n    /Users/xxxxx/gocode/src/labix.org/v2/mgo (from $GOPATH)\n../../gocode/src/github.com/lonelycode/tykcommon/api_defintitions.go:6:2: cannot find package \"labix.org/v2/mgo/bson\" in any of:\n    /usr/local/Cellar/go/1.4.2/libexec/src/labix.org/v2/mgo/bson (from $GOROOT)\n    /Users/xxxxx/gocode/src/labix.org/v2/mgo/bson (from $GOPATH)\nmake: *** [build/tyk] Error 1\n. Ok, did it and now complains on this:\n\n\ngo build runtime: linux/amd64 must be bootstrapped using make.bash\nmake: *** [build/tyk] Error 1\nNote: I'm running this on OSX\n. Your totally right!! I did it using other way but thanks for that information. :)\nI recompiled go for all distributions available: brew reinstall go --cross-compile-all\nThis way user doesn't need to change the docker file to the OS based version.\nNow that I have the server up and running, what's the endpoint for the dashboard and management ? I saw a few endpoints in main but nothing as I was expecting..\n. Ok ok! Many thanks for your help! :)\n. ",
    "DavidTPate": "Thanks for the response!\nThat makes sense with what you are saying with organizations the duplication does suck, but could definitely be automated easily. I'm going to be using organizations anyways to make use of the quotas at the organization level. The duplication is mitigated some for me since we might have services A, B, C, D but a particular organization might only have access to A and C so that would have to be handled somewhere and the gateway makes sense for that.\nAs for the URL rewriting, yup it's definitely a full-blown implementation there and I understand the desire to avoid it. It would definitely be pretty cool to be able to do easily via Tyk but the cost in complexity might not make it worth it.\nThanks again, going to close this issue.\n. Thanks for the heads up! Luckily I'm only looking for setting an overall request quota.\n. @lonelycode I'm running into some issues trying to implement this, I think I'm missing one of the middle pieces which is causing my configuration to not work as expected.\nHere's my setup so far.\nUsers:\n1. Super User account created without any organization ties.\nOrganizations:\n1. Organization for test is created.\n1. Organization for www is created.\nAPI Definitions:\n1. Definition for HTTPBin - target URL: http://httpbin.org API slug: httpbin Auth: keyless created in both organizations. (everything else is default)\n1. Definition for Google - target URL: https://www.google.com API slug: google Auth: keyless created in both organizations. (everything else is default)\nWhat's happening is that when I have more than one API for a particular organization the requests always are sent to the first API defined irregardless of my host headers or path.\nNote: I setup my hosts file to point www.localhost.com and test.localhost.com to the Tyk server.\nBased on my understanding of the Host Manager I should be able to visit http://www.localhost.com:8888/httpbin/get to proxy to http://httpbin.org/get. This doesn't work as it proxies the request to http://httpbin.org/httpbin/get. Similarly I tried navigating to http://httpbin.www.localhost.com:8888/get. \nBut the problem is that no matter which API I try to communicate with my request always goes to HttpBin (only when it is the first API on the Organization). So when I try to go to http://test.localhost.com:8888/google it instead proxies to http://httpbin.org.\nHoping that you can point me in the right direction, as I've spent a good bit of time trying various thing but nothing seems to be resolving the issue.\n. > It's a hard one to diagnose, some questions may clarify th answer a bit:\n\n\nAre you using the docker containers, the quickstart script or are you running each process raw?\nAre you using the dashbaord or file-based definitions?\n\n\nYes, I'm using the docker containers and the quickstart script. I'm also using the dashboard to create the API definitions manually. \n\nI am assuming you are using the host manager (one of the docker containers from the quickstart). If you are, then your url structure will look like this:\n{api-slug}.{org-slug}.localhost.com:8080/{resource}\n\nYup, I've been trying with that URL structure as well with the same results.\n\nAssumption: You have set an org-slug (can do this on create or using the admin API) and an api-slug (can be set with dashboard under \"Advanced\" or just add an \"api_slug\": \"{apiname}\" to the api defintion object at the root)\n\nCorrect, I have the slugs set on the APIs. And just to make sure no one else sees this and gets the wrong idea, it is \"slug\": \"{apiname}\" instead of the \"api_slug\" parameter.\n\nObviously if your API ID isn't a UUID then it will be whatever string you put in that field - this is only possible with file-based definitions.\n\nI'm not using the file-based definitions, so my API_IDs are the UUIDs (confirmed by looking at the result of /api/apis as well).\n\nI have a feeling that the proxy is acting up because nginx is just reverting to the first domain it finds matching localhost.com.\n\nThat's my feeling as well. Accessing the APIs by their API_ID directly works fine.\n\nIf youa re not using file-based definitions, have you tried accessing the API proxy directly:\nhttp://192.168.1.BLAH:8080/{api-id}/{resource}\n\nYup, they work just fine accessing them in this way.\n\nKeep in mind, you can compeltely change how these redirects work, if you want to have a listen structure like:\n\nI'm definitely planning to change these redirects once I get it working the default way, thanks for pointing out how I will be able to do it.\nSo that's where I'm at right now, it seems like that issue is with the Host Manager doing the mappings based on everything else appearing to work as expected.\n. Looks about like what you are expecting:\nA few things to note. The directory for the nginx configurations is /etc/nginx/conf.d/ and it is just symlinked to the config files at /opt/tyk-dashboard/host-manager/nginx_confs.\n5fb3afce708c443e6046804aad2bb564.tconf\n6582f6f6419243786f5871bb83184acb.tconf\nbbd1f881d3d14ada6c02fd56d2d39c4b.tconf\ne415d7cd4546498873370868295a70b0.tconf\n_upstream.conf\ntest.admin.portal.tconf\nwww.admin.portal.tconf\n. Yeah, my hosts file is setup correctly. No worries, sometimes it's the easiest stuff to miss.\n192.168.1.xxx     www.localhost.com\n192.168.1.xxx     test.localhost.com\n192.168.1.xxx     httpbin.www.localhost.com\n192.168.1.xxx     google.www.localhost.com\n192.168.1.xxx     httpbin.test.localhost.com\n192.168.1.xxx     google.test.localhost.com\nHere's what the files look like:\n5fb3afce708c443e6046804aad2bb564.tconf\n```\nserver {\nserver_name httpbin.www.tyk.docker;\n\ngzip              on;\ngzip_buffers      16 8k;\ngzip_comp_level   4;\ngzip_http_version 1.1;\ngzip_min_length   1280;\ngzip_types        text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript image/x-icon image/bmp;\ngzip_vary         on;\n\n# The Go application server\nlocation / {\n    rewrite /(.*) /5fb3afce708c443e6046804aad2bb564/$1 break;\n\n    proxy_pass_header Server;\n    proxy_set_header Host $http_host;\n    proxy_redirect off;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Scheme $scheme;\n    proxy_pass http://tyk;\n}\n\n}\n```\n6582f6f6419243786f5871bb83184acb.tconf\n```\nserver {\nserver_name google.www.tyk.docker;\n\ngzip              on;\ngzip_buffers      16 8k;\ngzip_comp_level   4;\ngzip_http_version 1.1;\ngzip_min_length   1280;\ngzip_types        text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript image/x-icon image/bmp;\ngzip_vary         on;\n\n# The Go application server\nlocation / {\n    rewrite /(.*) /6582f6f6419243786f5871bb83184acb/$1 break;\n\n    proxy_pass_header Server;\n    proxy_set_header Host $http_host;\n    proxy_redirect off;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Scheme $scheme;\n    proxy_pass http://tyk;\n}\n\n}\n```\nbbd1f881d3d14ada6c02fd56d2d39c4b.tconf\n```\nserver {\nserver_name httpbin.test.tyk.docker;\n\ngzip              on;\ngzip_buffers      16 8k;\ngzip_comp_level   4;\ngzip_http_version 1.1;\ngzip_min_length   1280;\ngzip_types        text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript image/x-icon image/bmp;\ngzip_vary         on;\n\n# The Go application server\nlocation / {\n    rewrite /(.*) /bbd1f881d3d14ada6c02fd56d2d39c4b/$1 break;\n\n    proxy_pass_header Server;\n    proxy_set_header Host $http_host;\n    proxy_redirect off;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Scheme $scheme;\n    proxy_pass http://tyk;\n}\n\n}\n```\ne415d7cd4546498873370868295a70b0.tconf\n```\nserver {\nserver_name google.test.tyk.docker;\n\ngzip              on;\ngzip_buffers      16 8k;\ngzip_comp_level   4;\ngzip_http_version 1.1;\ngzip_min_length   1280;\ngzip_types        text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript image/x-icon image/bmp;\ngzip_vary         on;\n\n# The Go application server\nlocation / {\n    rewrite /(.*) /e415d7cd4546498873370868295a70b0/$1 break;\n\n    proxy_pass_header Server;\n    proxy_set_header Host $http_host;\n    proxy_redirect off;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Scheme $scheme;\n    proxy_pass http://tyk;\n}\n\n}\n```\ntest.admin.portal.tconf\n```\nserver {\n    server_name test.tyk.docker;\n\n    gzip              on;\n    gzip_buffers      16 8k;\n    gzip_comp_level   4;\n    gzip_http_version 1.1;\n    gzip_min_length   1280;\n    gzip_types        text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript image/x-icon image/bmp;\n    gzip_vary         on;\n\n    # The Go application server\n    location /portal/ {\n        rewrite /portal/(.*) /5554fa4019406a0001000003/portal/$1 break;\n\n        proxy_pass_header Server;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_pass http://dashboard;\n    }\n    location /portal-assets/ {\n        proxy_pass_header Server;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_pass http://dashboard;\n    }\n    location /api/public {\n        proxy_pass_header Server;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_pass http://dashboard;\n    }\n\n}\n```\nwww.admin.portal.tconf\n```\nserver {\n    server_name www.tyk.docker;\n\n    gzip              on;\n    gzip_buffers      16 8k;\n    gzip_comp_level   4;\n    gzip_http_version 1.1;\n    gzip_min_length   1280;\n    gzip_types        text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript image/x-icon image/bmp;\n    gzip_vary         on;\n\n    # The Go application server\n    location /portal/ {\n        rewrite /portal/(.*) /5554fa4019406a0001000002/portal/$1 break;\n\n        proxy_pass_header Server;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_pass http://dashboard;\n    }\n    location /portal-assets/ {\n        proxy_pass_header Server;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_pass http://dashboard;\n    }\n    location /api/public {\n        proxy_pass_header Server;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_pass http://dashboard;\n    }\n\n}\n```\nI went through and pulled up the APIs to make sure that the organizations and the API IDs matched. Everything looked fine:\nOrganizations\njs\n{\n  \"organisations\": [\n    {\n      \"id\": \"5554fa4019406a0001000002\",\n      \"owner_name\": \"WWW\",\n      \"owner_slug\": \"www\",\n      \"apis\": [\n        {\n          \"api_human_name\": \"HttpBin\",\n          \"api_id\": \"5fb3afce708c443e6046804aad2bb564\"\n        },\n        {\n          \"api_human_name\": \"Google\",\n          \"api_id\": \"6582f6f6419243786f5871bb83184acb\"\n        }\n      ],\n      \"developer_quota\": 0,\n      \"developer_count\": 0\n    },\n    {\n      \"id\": \"5554fa4019406a0001000003\",\n      \"owner_name\": \"Test\",\n      \"owner_slug\": \"test\",\n      \"apis\": [\n        {\n          \"api_human_name\": \"HttpBin\",\n          \"api_id\": \"bbd1f881d3d14ada6c02fd56d2d39c4b\"\n        },\n        {\n          \"api_human_name\": \"Google\",\n          \"api_id\": \"e415d7cd4546498873370868295a70b0\"\n        }\n      ],\n      \"developer_quota\": 0,\n      \"developer_count\": 0\n    }\n  ],\n  \"pages\": 0\n}\nHere's the results I get when I try to navigate to the different URLs with different ports.\n\n\n\n\nGoing to the APIs directly yields the results that I expect.\n\n\n. That did it! Definitely makes sense now that you've pointed that out.\nWith this, I think I can continue on and start getting things setup with the templates. Thanks a bunch for your time, really appreciate it.\n. Gotcha, wasn't aware that a super-user can be created. I'll do that for now, thanks!\n. Looks like I still can't list users for a specific organization with the super-user since the API lists users based upon the organization of the user making the request to the API. That's fine for now, I'll just not worry about creating duplicate users at the moment. \nI'd definitely love to see either the ability for a super-user to list users of an organization or the ability to list users from the admin api. I wasn't able to track down where the functionality is located otherwise I'd open a PR for it.\n. My previous comment about the super-user not being able to see the users of the other organizations is definitely incorrect. After doing some more testing I was able to do it, just not sure what path led me down having the issue before. Will update if I find something else.\n. @kohrVid I think it is still a worthwhile feature, but as mentioned above by @lonelycode there is a workaround for it.. > The only odd exception is mocks - a mocked endpoint MUST be attached to a list (usually ignore or white-list), because it piggybacks on the middleware that handles the path finding to apply the list rules.\nThat makes sense now why I couldn't create a single mocked end-point. Would definitely be good to convey this as an error or something in the UI/API when someone tries to create a mock without it being attached to a list.\n. :+1: thanks @lonelycode \n. ",
    "kohrVid": "Hi @DavidTPate, \nI've noticed that this issue has been open since 2015. Would it be all right if we closed this or would you still like to see this feature implemented in a future release?\nKind regards,\nJess. Hi @squiddle,\nThank you for getting in touch and apologies for the delayed response. I'm actually going to close this issue as we seem to have implemented a feature like this since this was posted (it is currently possible to set up an API with multiple endpoints and manage their permissions using different policies). If you're unsure of how to configure your API in this way, be sure to let us know in the Community Forum.\nKind regards,\nJess @ Tyk . Closing as this has been done.. Hi Maarten,\nFortunately, quite a lot has changed since this issue was raised over a year ago and our site now features documentation regarding the management of policies using the Dashboard API. Are you still having trouble with any of this or would it be all right if we closed this issue?\nKind regards,\nJess. Hi Guillaume,\nI'm sorry to hear that you were having trouble with this feature in the Tyk Dashboard last year. Did Martin's suggestion help at all? If so, would it be all right if we closed this issue on Github?\nKind regards,\nJess . Hi,\nApologies for the delayed response. I just wanted to check, did the suggestion made by the user above help with this issue at all? If so, would it be all right if we closed this issue on Github?\nKind regards,\nJess. Hi,\nDid the suggestion that Martin made last year help at all? If so, would it be all right if we closed this issue on Github?\nKind regards,\nJess. Hi @penhauer-xiao,\nApologies for the delayed response. Are you still unable to create new keys on the latest version of the Tyk Dashboard? If so, have you tried any of the suggestions made @alexraju, @james-tyk or @lonelycode? If you are in fact now able to create new keys, could you please confirm so that we can close this issue on Github?\nKind regards,\nJess @ Tyk . Hi Alex,\nDid Martin's suggestion help with this problem back in June? If so, would it be all right if we closed this issue?\nKind regards,\nJess. Hi,\nDid Martin's suggestion back in August resolve this matter? If so, would it be all right if we closed this ticket on Github?\nKind regards,\nJess. Hi Brian,\nThe bug you reported last August was fixed in a patch release and shouldn't appear in the latest version of Tyk. Could you please confirm as to whether you're still getting these errors? If you aren't, would it be all right if we closed this issue on Github?\nKind regards,\nJess. Hi \u0141ukasz,\nDid the suggestion Martin gave back in August help with this at all? If so, would it be all right if we closed this issue?\nKind regards,\nJess. Hi,\nApologies for the delayed response. I'm really sorry you had trouble installing Tyk with Docker last year - are you still unable to do this? If you're using Docker Toolbox to install this, it may be worth switching to Docker for Windows as many of our users have been successful using this tool when installing our Docker images. \nApart from that, it may be worth speaking to the Docker team about this error message as it does look like it could be related to an issue that was posted on the Docker repo in the past.\nKind regards,\nJess @ Tyk. Hi Kent,\nApologies for not following up on this issue for a while. Were you ever able to build Tyk from the source files in the end? If so, would it be all right if we closed this issue in Github? If not, could you please confirm as to whether you're using the most up-to-date version of the Tyk repo and that you're still trying to build with version 1.7 of Go without Glide?\nKind regards,\nJess @ Tyk. Hi,\nDo you still get this error when you create clients without a valid API? If so, could you please confirm as to whether you're using the latest version of the Tyk Gateway (v2.3)? If this is no longer a problem, would it be all right if we closed this issue?\nKind regards,\nJess @ Tyk. @mvdan and @matiasinsaurralde, are you guys using Docker to build the environment? If so, are you using quickstart or the develop-env repo?. Still getting this error in tyk-develop-env\ntyk-develop-env: 45ef212eac6bb2056ee62ab145a7c878798e18ea\ntyk: 9f8424e93d3776d73c5032540c60ff33afd39343\ntyk-pump: 798ff33ee62a8f6f425da47d82ce70410a3d6aa7\ntyk-analytics: d71d335f2555b6d66ea544b841b37a8d9ccd5f24\napi.txt\npolicy.txt\nstacktrace.txt. Just an update, I'm now unable to replicate this issue in the master branch and I think the issue was probably caused by a missing/incorrect $GOPATH (I think something happened to mine when I upgraded to 1.8).\nAs no-one else seems to be able to replicate this, it's probably best to close this issue.. This issue was also reported in #291 . ",
    "lyptt": "Thanks for the feedback, that makes sense!\n. That's understandable. Documentation for the portal-specific portions would be incredibly useful. We can get around our issue by just creating and managing Tyk users instead of portal developers, but it would be nice to have a clean separation between organization users and third party users.\n. Okay great, I've started working on the Swagger import. I'm assuming there won't be automation support for it until that's been worked on by you? I haven't found any references in the source code to API Blueprint import other than command mode, so I'm assuming that's all in the Dashboard somewhere.\n. That'll be handy, thanks! We'll probably be taking this on properly in a couple of days time.\n. It looks like we're currently on 0.9.4.1. I'll try upgrading and see if that helps\n. The docker script -does- work in importing the organization which is the odd thing, I'm unsure of what we're doing differently unless it's just that the docker script pulls in a newer dashboard\n. Brilliant, that's fixed it. Thanks!\n. Yeah that's exactly what we were doing, we had a super user with no organization and then created API definitions with it. The lack of an org id was the main reason this was problematic.\nWhen going with your suggested workflow I now get a stack dump on the Dashboard process.\nFor the following request:\n```\nPUT http://dashboard.local/api/apis/a7958b937a44438954ad16d11c2c9e14\nAuthorization: 038bd0544e3149eb7323e58248521d7a\nContent-Type: application/json\n{\n    \"api_definition\": {\n       \"org_id\":\"555b31436cf82c26b2000006\"\n    }\n}\n```\nI get the following error in the console:\nERROR 2015/05/19 12:53:16.996029 panic_handler.go:26: PANIC\nURL: /api/apis/a7958b937a44438954ad16d11c2c9e14\nERROR: Invalid input to ObjectIdHex: \"a7958b937a44438954ad16d11c2c9e14\"\nSTACK:\ngoroutine 33 [running]:\ngithub.com/gocraft/web.(*Router).handlePanic(0xc208062160, 0xc20802c240, 0xc20802c260, 0x814a80, 0xc20808c820)\n    /home/tyk/go/src/github.com/gocraft/web/router_serve.go:251 +0x37a\ngithub.com/gocraft/web.func\u00b7001()\n    /home/tyk/go/src/github.com/gocraft/web/router_serve.go:43 +0x84\nlabix.org/v2/mgo/bson.ObjectIdHex(0xc2080c510e, 0x20, 0x0, 0x0)\n    /home/tyk/go/src/labix.org/v2/mgo/bson/bson.go:174 +0x207\nmain.(*ApiDefinition).GetApiByInternalId(0xc208061400, 0xce6f68, 0x0, 0xc2080c510e, 0x20, 0x0)\n    /home/tyk/go/src/github.com/lonelycode/tyk-analytics/ModelApiDefintion.go:71 +0x17a\nmain.(*APIContext).UpdateApiDetail(0xc208038a50, 0x7fb119c90e90, 0xc20802c240, 0xc20802c260)\n    /home/tyk/go/src/github.com/lonelycode/tyk-analytics/ApiApiManagement.go:265 +0x449\nreflect.Value.call(0x876d00, 0xa9ad80, 0x13, 0x973470, 0x4, 0xc20810c908, 0x3, 0x3, 0x0, 0x0, ...)\n    /usr/local/go/src/reflect/value.go:419 +0x10e5\nreflect.Value.Call(0x876d00, 0xa9ad80, 0x13, 0xc20810c908, 0x3, 0x3, 0x0, 0x0, 0x0)\n    /usr/local/go/src/reflect/value.go:296 +0xbc\ngithub.com/gocraft/web.func\u00b7002(0x7fb119c90e90, 0xc20802c240, 0xc20802c260)\n    /home/tyk/go/src/github.com/gocraft/web/router_serve.go:113 +0xbc0\nmain.(*APIContext).ApiAuthorisationRequired(0xc208038a50, 0x7fb119c90e90, 0xc20802c240, 0xc20802c260, 0xc20808c530)\n    /home/tyk/go/src/github.com/lonelycode/tyk-analytics/Main.go:327 +0x11d\nreflect.Value.call(0x8a0d80, 0xa9ab80, 0x13, 0x973470, 0x4, 0xc20810ce18, 0x4, 0x4, 0x0, 0x0, ...)\n    /usr/local/go/src/reflect/value.go:419 +0x10e5\nreflect.Value.Call(0x8a0d80, 0xa9ab80, 0x13, 0xc20810ce18, 0x4, 0x4, 0x0, 0x0, 0x0)\n    /usr/local/go/src/reflect/value.go:296 +0xbc\ngithub.com/gocraft/web.(*middlewareHandler).invoke(0xc20808f470, 0x96e0e0, 0xc208038a50, 0x16, 0x7fb119c90e90, 0xc20802c240, 0xc20802c260, 0xc20808c530)\n    /home/tyk/go/src/github.com/gocraft/web/router_serve.go:133 +0x2d5\ngithub.com/gocraft/web.func\u00b7002(0x7fb119c90e90, 0xc20802c240, 0xc20802c260)\n    /home/tyk/go/src/github.com/gocraft/web/router_serve.go:122 +0x1c8\ngithub.com/gocraft/web.func\u00b7004(0x7fb119c90e90, 0xc20802c240, 0xc20802c260, 0xc20808c530)\n    /home/tyk/go/src/github.com/gocraft/web/static_middleware.go:23 +0x64a\ngithub.com/gocraft/web.(*middlewareHandler).invoke(0xc2080b9bc0, 0x937c80, 0xc208038a40, 0x16, 0x7fb119c90e90, 0xc20802c240, 0xc20802c260, 0xc20808c530)\n    /home/tyk/go/src/github.com/gocraft/web/router_serve.go:131 +0x71\ngithub.com/gocraft/web.func\u00b7002(0x7fb119c90e90, 0xc20802c240, 0xc20802c260)\n    /home/tyk/go/src/github.com/gocraft/web/router_serve.go:122 +0x1c8\ngithub.com/gocraft/web.func\u00b7004(0x7fb119c90e90, 0xc20802c240, 0xc20802c260, 0xc20808c530)\n    /home/tyk/go/src/github.com/gocraft/web/static_middleware.go:23 +0x64a\ngithub.com/gocraft/web.(*middlewareHandler).invoke(0xc2080b9b60, 0x937c80, 0xc208038a40, 0x16, 0x7fb119c90e90, 0xc20802c240, 0xc20802c260, 0xc20808c530)\n    /home/tyk/go/src/github.com/gocraft/web/router_serve.go:131 +0x71\ngithub.com/gocraft/web.func\u00b7002(0x7fb119c90e90, 0xc20802c240, 0xc20802c260)\n    /home/tyk/go/src/github.com/gocraft/web/router_serve.go:122 +0x1c8\ngithub.com/gocraft/web.LoggerMiddleware(0x7fb119c90e90, 0xc20802c240, 0xc20802c260, 0xc20808c530)\n    /home/tyk/go/src/github.com/gocraft/web/logger_middleware.go:16 +0x78\ngithub.com/gocraft/web.(*middlewareHandler).invoke(0xc2080b9b30, 0x937c80, 0xc208038a40, 0x16, 0x7fb119c90e90, 0xc20802c240, 0xc20802c260, 0xc20808c530)\n    /home/tyk/go/src/github.com/gocraft/web/router_serve.go:131 +0x71\ngithub.com/gocraft/web.func\u00b7002(0x7fb119c90e90, 0xc20802c240, 0xc20802c260)\n    /home/tyk/go/src/github.com/gocraft/web/router_serve.go:122 +0x1c8\ngithub.com/gocraft/web.(*Router).ServeHTTP(0xc208062160, 0x7fb119c90e58, 0xc2080306e0, 0xc2080c2820)\n    /home/tyk/go/src/github.com/gocraft/web/router_serve.go:48 +0x3cf\nnet/http.serverHandler.ServeHTTP(0xc20805cb40, 0x7fb119c90e58, 0xc2080306e0, 0xc2080c2820)\n    /usr/local/go/src/net/http/server.go:1703 +0x19a\nnet/http.(*conn).serve(0xc208030640)\n    /usr/local/go/src/net/http/server.go:1204 +0xb57\ncreated by net/http.(*Server).Serve\n    /usr/local/go/src/net/http/server.\n. I'm unsure if I need to have the entire definition sent again just to update the organization ID, obviously this is a PUT not a PATCH so I probably do need to, but this seems like a lot of effort to go to just to update one field.\n. Ah okay, that makes a bit more sense. I should be able to use the ID returned in the Meta field when creating the initial definition for that then.\nIt would be nice if there was a way of doing this that didn't require sending over the definition twice. Either by adding a PATCH operation so the field can be updated there without updating anything else, or by adding support for reading the field in the POST request, simply to just make the API a bit easier to work with. \n. Yeah, and that gets back to what our workaround involves whereby you create your definitions using an access token from a user associated to that organization. It seems like this is the official way you're supposed to go about this, so we'll continue with that method for the time being.\n. ",
    "schellkenig": "How did you configure compose with mongo ssl?\n. ",
    "richard-hulm": "Just to ensure you're aware, the gateway API also has this issue on a couple of endpoints, so far I've spotted it on the organisations\n. Not entirely sure of the distinction I'm afraid, I know it's part of the gateway binary at least.\nThe endpoint I'm hitting is localhost:3000/admin/organisations/ and getting a text/plain; charset=utf-8 header back even if I specify application/json\n/admin/users/ also seems to give the same thing when I'm creating an admin user\n. @lonelycode I can confirm the gateway and dashboard use the reconnect logic if mongo isn't avaliable at startup, but the host manager seems to consistently fail rather than retrying.\nIs this something that is fairly easy to change?\n. After discussing this with some of our front end devs, it seems we could send back a wildcard to all pre-flight options requests, and then when the actual request comes in, grab the auth key from there and return only the cors data associated with that key for the actual response. This seemed to work in some inital tests we did\n. Just an update on this - currently we're going to serve a wildcard CORS header on all options requests, then lock subsequent requests down by which API they're part of.\nLong-term, it would be nice if subsequent requests could have information that is grabbed on a per-key basis, as the wildcard for OPTIONS requests would allow the pre-flight request through, then the actual request with the KEY could have API-Key-specific headers returned on it\nCheers.\n. We have, but that seemed to be more geared towards different nodes for different keysets, and still left you with replica sets where only the master would accept writes.\nFor now we're not scaling for performance, so redis-cluster seemed like overkill for our needs.\nIt's not an essential feature by any means, as redirecting all requests to the master isn't the end of the world, just thought I'd see if it was easily doable\nCheers,\n. Just an update on this as well - we've currently got our redis nodes separated by two DNS entries\nWe specify the redis-master DNS entry for Tyk, but on a failover, the DNS entry updates to use the new address. \nHowever, Tyk still seems to use the old node address, as (when it comes back up) it's still a valid Redis node, it just can't accept writes anymore. Do you have any suggestions as to how to get around this?\n. Yep it's definitely propagated to the node, just confirmed that.\nWe already use sentinel for fail-over, we just don't use HAProxy as we're using Consul for our service discovery, so we have a redis-master service with a health check, meaning the redis-master.service.consul address always points to the current master.\nI agree HA proxy would be a solution here but am hesitant to add another item to our stack for this, would it not be possible to add hitting a slave node as another failure case which would prompt a retry forcing a refresh of the address?\nCheers,\n. Hmm ok - thanks for having a look. We'll consider using something like HA proxy\n. Just revisiting this on our end - currently our \"fix\" is to restart the dashboard whenever the redis-master address changes, so it's always looking at the latest address, and adding retrys to our configuration service to handle the brief downtime....\nDecided implementing a proxy would add too much complexity in terms of doubling up places which check which node is currently the master and adding to components which could fail\nIs there any update on how possible this is on your side?\n. Merged in #197 \n. Oops - unintended changes on the branch.\nGive me a minute...\n. Urgh - not used to github and put this under the wrong branch... sorry....\n. Yes - I'm on the latest version of the develop branch. (well, technically I'm on the commit from the PR I just submitted)\nThe JWT being imported in middleware_jwt is     \"github.com/dgrijalva/jwt-go\" - doesn't look like the forked version?\n. Urgh - sorry.\nWent into my local copy of both of the repos causing a problem and did a git pull and it builds now.\nStill getting used to golang - I imagined goget would get the latest version of all the dependencies but apparantly not (??)\n. (So just for posterity - I was using the latest version of Tyk, but had to do\ncd $GO_HOME/src/github.com/openid2go/openid\ngit pull\ncd $GO_HOME/src/github.com/dgrijalva/jwt-go/\ngit pull\n. Didn't do it into develop again... sorry again!\n. ",
    "grocky": ":+1:\n. ",
    "smuniswamy": "@lonelycode, I noticed latest Tyk Dashboard docker image includes support for swagger import. Is there an ETA on v0.9.5.4 release?\n. Thanks @lonelycode. I have upgraded from v0.9.3 to v0.9.5.3 but did not see Swagger option. Just found out it was due to browser cache.\n. ",
    "raccoon42": "Thanks for the reply. Is it possible to do http call from javascript middleware ? or I should write a middleware in go itself?\n. Thanks for the help. Will try with middleware. \n. ",
    "bazani": "Thanks.\n. ",
    "mvdan": "This feature request affects the dashboard, not the open source gateway. As such, I've moved the issue to our internal repo.\nI'm closing this for now, but we'll post a comment once it is fixed.. @nchapon unless there's something I'm missing, your question has nothing to do with Oauth2. Please take this to the community forum: https://community.tyk.io/\nEdit: Ah, you already raised it there first. My bad.. @smuniswamy apologies that you never got a response. Is this still an issue? If so, what's the latest Tyk version that it happens on?. Closing this for now. Please reopen if the issue persists on the current stable version.. @buger @lghiur do we have this in the web UI now? If not, we should move this to the appropriate internal issue tracker.. @lonelycode if I undersatnd properly, we now support this? Or is a redis cluster a different thing?. Hi @allan-simon,\nWe've addressed this issue in the upcoming 2.4 release. Thanks for your input!. Thanks for spotting! The code is part of the dashboard, which is not open source. Sent a pull request.. My assumption is that if we used 404s, anyone could \"discover\" the endpoints without having access to them.\nA lot of websites that require login do this - if you try to access a resource, it will 401/403 instead of doing a 404.\nI'm not sure if this was by design of if it's a bug, though.\n/cc @lonelycode @buger . Thanks for reporting! Posting a fix soon.. Shouldn't comments like these go in the PR, to not bother the original poster?. This feature request affects the dashboard, not the open source gateway. As such, I've moved the issue to our internal repo.\nI'm closing this for now, but we'll post a comment once it is fixed.. @1329555958  I'm closing this issue now - if you're still having the same problem or would like any more help, feel free to reopen with more information.\nThanks.. @veger this panic affects the analytics/dashboard Go code, not the open source gateway. As such, I've moved the issue to our internal repo.\nI'm closing this for now, but we'll post a comment once it is fixed.. @veger this change would break backwards compatibility, and we don't want to have the field duplicated. So we're going to get to this as part of 3.0.. There was no more information, so I'm closing this for now. There is little we can do without knowing the cause or being able to reproduce the problem.. @lomori sorry that we didn't respond earlier. Is this still an issue? If so, what's the latest Tyk version it happens on?. Closing this for now. Please reopen if the issue persists on the current stable version.. Answer to the first, courtesy of @ConsM: https://community.tyk.io/t/is-there-any-way-to-disable-the-onboarding-popups/672/4. @veger is the second issue still present on the latest version?. I'm going to close this then, as we don't offer support for older versions at the moment.\nOut of curiosity, what keeps you from updating?. If you have any issues with 2.3.x, feel free to reach out.. @byrnedo this panic affects the analytics/dashboard Go code, not the open source gateway. As such, I've moved the issue to our internal repo.\nI'm closing this for now, but we'll post a comment once it is fixed.. @penhauer-xiao I'm closing this issue now - if you're still having the same problem or would like any more help, feel free to reopen with more information.\nThanks.. Thanks for the update! Glad you sorted it out.. @penhauer-xiao could you please post on community.tyk.io with full details on your setup and how to reproduce the issue? We can take it back here on the tracker once it's clear that there is a bug to be fixed.\nThanks!. What happened to this? Should we abandon/close?. @chlab since this concerns the dashboard, which isn't open source at the moment, I've moved this issue to its private repo. Closing this now, but we'll update this issue once it's fixed there.\nThanks!. We have updated and improved the page, and posted it to the new docs site: https://tyk.io/docs/configure/import-apis/\nThanks for the patience!. As with #266, I've moved this to the dashboard private repo.\nThanks!. Took over the patch, keeping the original author. See the new PR.. I just did exactly that - they all use a local http server now.. @wonderslug I'm closing this issue now - if you're still having the same problem or would like any more help, feel free to reopen with more information.\nThanks.. @dangxunb I'm closing this issue now - if you're still having the same problem or would like any more help, feel free to reopen with more information.\nThanks.. Even though https://github.com/TykTechnologies/tyk/issues/351 is newer, I'm merging threads. Thanks for the report - it seems like it happens with octet-stream as well as form-data.. Hi @foobargeez,\nPlease use the community forum for questions, as this issue tracker is for bugs and feature requests.\nThanks!. @kalyankuramana could you provide complete steps to reproduce, please? (given the latest gateway release running). Closing this for now. Please reopen if the issue persists on the current stable version.. @lonelycode was this done? If not, shouldn't this be moved to the correct repo?. @penhauer-xiao apologies for the late reply - does this still happen with 2.3.x? If so, could you please post a new crash log?. @mNantern I'm closing this issue now - if you're still having the same problem or would like any more help, feel free to reopen with more information.\nThanks.. @minicats does this still happen with 2.3.1? I can't reproduce it here.. @buger could you please try to reproduce this one too? Maybe I did something wrong or there's something I'm missing.. Seems like this was moved to https://community.tyk.io/t/custom-authentication-flow/1211/2.. @JayCeeJr did you try @matiasinsaurralde's suggestion above?. This is a very weird setup. From what I can see, develop is @lonelycode's WIP branch. It even has \"FOR TESTING ONLY\" commits. Master is not the stable branch, and this policy isn't documented anywhere, so I don't fully understand what the logic here is.. I still don't understand the logic, but I'll get back to that later :). Running go test by default now outputs a screen of output. Still a lot IMO, but much better than before.\n@buger proposed something that I like: logs should always be shut off, except if a test fails in which case they should be printed. Only the logs from that failed test should be printed.\nThis is easy to do if tests aren't parallel. We simply have to set the log output to a buffer, and print it if the test in question fails.\nIt's trickier with parallel tests. The same method to capture the log output for a certain test won't work since they would all write to the log concurrently.\nThis has to be possible somehow though, and the package testing seems to already capture stdout/stderr on a per-test basis, which has to still work with parallel tests.\n@buger @lonelycode would you be OK with this method? Then I would make Travis also use this, and the travis build logs would get a lot shorter (as long as nothing fails).. I forgot something - are logs outside of a test useful? For example, what about logs from the startup (TestMain) or logs from tests that ran in parallel with the one that failed?\nIf either or both of those matter, perhaps it's better to just print the entire log on any failure.. All the logs, or just the logs from each failed test? That's the question :). All the logs, since it doesn't require splitting output per test. I'll do that then.. If it is, the log error line should not be shown to the user (at least by default).. Now that we hide error logs by default, this is no longer a problem. Perhaps there would be a way to mute \"expected errors\" if you will, but I don't think we should do that since they aren't bothering us right now.. Yeah, that's my understanding too.. I do agree that we need more packages. Some projects use way too many packages, though. I suggest we split up the current one into 2 or 3, and then see if we need to split further.\nIf we start exposing parts of Tyk as a library, then we have the issue of backwards compat. So we should be really sure about what to expose. Until then, we are free to keep things in the main package or in internal/..... Looking at the files, two easy candidates come to mind:\n\nmiddleware*.go\ncoprocess*.go. Yeah, this is low priority. At the same time I'd like to see the low-hanging fruit happen sooner than later, as this disorganization slows things down a bit.. Agreed. One step at a time, though. You could say this issue is a dependency of yours.. FWIW, down from 148 to 138, both including directories. We haven't started splitting the main package into multiple ones.. @matiasinsaurralde thoughts on moving all of the coprocess stuff to tyk/coprocess? I guess what's already in that package can stay there.. What do you think about moving coprocess*.go to the tyk/coprocess package, then?. awesome, will do a PR soon. As good as it will get without refactoring the main packages into multiple packages, which will happen at some point in 2.5.. @buger is there a plan to do this? If we don't care about having old versions as tags, we should just remove old version branches.. > Just to clarify, you are talking about old branches like 1.7.2 and etc, right?\n\nYes. All of https://github.com/TykTechnologies/tyk/branches/stale, pretty much.\n\nAre tags going to work as expected with patch release branches like 2.3.2 which have own commit history, and sometimes unique commits?\n\nYes. Tags are the exact same as branches - they are just references to commits. Git will not \"throw away\" a commit unless it's pointed to.\nThe only difference between a branch and a tag is that the former is easier to update and it's used for rolling things, whereas the latter is meant for static things. But you could use any for either purpose.. To clarify the last point, once we drop support for 2.3.x, we can simply remove release-2.3 and all the v2.3.* tags will keep on working just fine.. There are various layers of checks that come to mind - how deep should we go?\n\nparse errors (invalid configs)\nvalid configs that would make tyk just error and exit\nvalid configs that definitely look wrong or would do confusing things. @lonelycode your layered approach sounds fine. I'll develop v1 and send a PR soon.\n\nAs far as I know this would be the first tyk tool we develop. I would say a subcommand like tyk lint would be the best option, since we'll probably add more. We don't want to pollute the PATH with tons of tyk-* binaries, each statically linking most of Tyk.\nMy proposal for testing is a series of config inputs (structs) with the expected warnings, if any. This is assuming that there are already tests in place for loading a config struct from a file (plain text).\nShould we get @ilijabojanovic involved in this, since it's the design stage of a new feature?. It lints the server config, not the client config, so I don't see why it should go in the client.. Okay, I'll wait for ilija to give input on my implementation proposal above.\n@lonelycode thoughts on a subcommand versus an option? I'm inclined for the former, but perhaps you want to avoid subcommands.. Yeah, definitely. I also prefer them because otherwise they get mixed with options that just modify how the daemon works, instead of running something completely different in its place.. > Create tyk-lint subcommand\nI assume you mean tyk lint here.\n\nCommand should execute during gateway setup or any changes on configuration file\n\nI assume you mean \"user should execute it when...\". This will not run automatically as part of tyk.\n\nAfter configuration check we should have output message e.g \"Configuration loaded\"\nIf we have some errors during configuration parse we should have output message e.g \"Configuration check failed\"\n\nI don't understand these. As with all linters, it should print warnings and exit with a non-zero code if there are any warnings, and print nothing and exit with a zero code if there were none.\n\nTest checklist:\n\nYour tests involve installing and upgrading the gateway. How is that relevant? Lint is only affected by config files.\nAlso, what do you mean by \"invalid configuration\"? As explained above in v1/v2/v3, there are different levels for how a config can be correct or not.. > The checklist is for @ilijabojanovic here :-)\nAh, thought it was directed at me for the unit tests.. Note to self - sometimes the gateway config along with an API definition can be misconfigured, meaning that things break. The current lint scope concerns just the gateway config, so once that is working well perhaps we can look into linting the API definitions along with it too.. @buger @lonelycode v1 is pretty much done. Any ideas of what else could be written in the next week for 2.4?\nAlso, any suggestions as to what could go in v2? Surely we have many examples from the support tickets that resulted in bad config files.. I am moving this to 2.5 then. If there are any useful v2 features that we want to include in 2.4.x, we can always cherry-pick as needed.. Ah, that makes sense. Thanks for the explanation.. This stinks of path.Join.. Rebased after conflicts with my other PRs.. The only change that affects the behaviour is the changes in error strings. Errors in Go should not be capitalized or have punctuation.. @buger you mean it should stick around?\nPing @lonelycode in case any of these were left unused on purpose.. Ah, I assumed you meant a function I was removing.\nAs far as I can tell none of this redis stuff has independent unit tests (no redis_*_test.go files) and I'd rather not add yet another file to the root dir. Not sure it's the thing to do right now.. I tend to be more positive - it would put pressure on us to increase it faster :)\nThe badges don't usually turn green until you have high numbers like 80% or 90% anyway, so if our tactic was to wait for a full green we might have to wait a long time.. Okay then, let's keep it to ourselves and reconsider once the badge changes colour.\nUsing one of these services would still be useful for PRs and to keep track of the coverage over time, though.. Wait, why is this closed? Even if we agree on not having badges, integrating one of those services with our PRs will still be useful.. I think it should be configured to post comments to PRs. I don't think wiring it up to Slack directly would be particularly useful.. Now done and working.. See above, it happens with application/octet-stream too.. I'm having difficulties reproducing this issue.\nI set up a very simple Go HTTP server that just dumps info about the request body. I set up a Tyk API that just points to it (modifying target_url in apps/app_sample.json). Then I hit both with curl like:\n```\nThrough Tyk\ncurl -v -F 'file=@a.jpg;type=application/octet-stream' http://localhost:8080/tyk-api-test/\nDirectly to the simple Go server\ncurl -v -F 'file=@a.jpg;type=application/octet-stream' http://localhost:8081/\n```\nThe JPEG file is intact in both cases. I tried this in master first, then in our 2.3 branch. I also tried a large (~10MB) JPEG file.\n@xagaba Are you still experiencing the issue? If so, could you provide more info like what Tyk gateway version you're running when you see this?\nIf you could provide an API definition that reproduces this, that would be wonderful. Any pointers towards reproducing this issue would help.. Regarding the API definition, I'm especially interested in whether you're using any plugins or middleware. Those can move the request body around, so that could be the cause.. Update; I was able to reproduce a broken body with a JS plugin that didn't modify the body. @xagaba could you confirm you were using a JS plugin?. Great, thanks for confirming. The bug is definitely in how we send the request data (including the body) to plugins.. @lonelycode what should happen then, if we get an IP that can't be parsed properly? A warning?. I can fix this very easily, but I'm struggling with the test. Basically, analytics.GeoIPDB isn't set up in the tests.\n@lonelycode should I init it in the tests somehow (any hints?), make a test without that part (which would do very little, really) or not do a test at all?. @lonelycode how about checking in a small, test database like https://github.com/maxmind/MaxMind-DB/blob/master/test-data/MaxMind-DB-test-ipv4-24.mmdb? That way we can have GeoIP enabled in all the tests.. I didn't mean to \"fix\" this with the commit above, it said \"in preparation to fix #n\". My wording triggered the github hook, though.. LGTM, assuming you'll squash before merging. @lonelycode I can understand the purpose of middleware_sample.go, but it should definitely not be here. If you'd rather have it moved elsewhere than deleted, let me know.. > Why didn't Travis pick it up then?\nI must have broken it. go install -tags coprocess fails here too. Will fix.\n\nI suggest adding a test for it, and not removing that part of the code, as it's clearly not unused code.\n\nInstead I would suggest that Travis should build all the tag combinations. If I understand correctly, then Travis would throw a compile error since getBundlePaths would then be missing.\nIn any case, it should be moved to that file since it's not needed in the regular build with no tags.. > Can we move it into a middleware.md then? Would like a reference version slmewhere in the repo.\nI suggest we make it an example then. Examples are like tests, also run as tests, but they're meant as useful source code for users. Also shown in the godoc.. Oh, okay. I'll open an issue for that then.. Awesome, opened #360.\nWill address issues and fix Travis in a separate PR.. FWIW, Travis has always been broken with regards to tags. It wouldn't have picked up build issues with tag combinations before I started changing things either. See #360.. Done. Verified that coprocess still compiles via go install -tags coprocess,python.. See comments in https://github.com/TykTechnologies/tyk/pull/359#issuecomment-272921556. This is more subtle than I thought. Turns out our CI line go test -tags coprocess is wrong, because:\n\nIt doesn't actually build the whole package/executable. go instlal -tags coprocess fails, yet the test binary builds fine.\n-tags coprocess isn't enough. It seems like another tag is needed, like -tags coprocess,python.\n\n@matiasinsaurralde @lonelycode what was the logic behind the use of -tags coprocess in the old .travis.yml then? Was it simply wrong?\nWhat are all the possible combinations? As far as I can tell, they should be coprocess,grpc, coprocess,lua and coprocess,python.. Also, what's the logic behind having some of the tests under the coprocess build tag?. Okay, so for example for coprocess,python, we don't need any python stuff to run the tests since they're just coprocess, but we do need them to compile since that will also build the python-specific Go files that require the extra dependencies.\nThis finally makes sense, thanks.. Ah, yes, I remember him mentioning it. If the plan is to remove Redis in the short term, perhaps we could skip this altogether since it would go away entirely.. Sounds good. We should do this soon, then.. I have a patch for this that works, but can't submit because it depends on #386.. That's a good point. There probably will be more issues since tests have always been run sequentially - temporary files, used ports, global variables.... The tests pass after 40s on my laptop, with none of my CPU cores ever going past 5% use. 40s is way too long for me to quickly iterate. I think this is pretty high priority, as I'd rather not waste my time.. Nope, but it's on my list lf things to do soon. Would self-assign but can't anymore :). As it turns out, quite a lot of tests modify global state (like the global config). Ideally this wouldn't be true, but it's unrealistic to refactor everything to remove global state just so we can run every test in parallel.\nA good part of the tests don't modify global state though, and would likely still work in parallel. Keeping this issue open to track those.. After removing lots of network use from the tests, the total test time is down from ~4s to ~2s. I think that's acceptable for now, and it's no longer high priority to make lots of tests parallel.\nNot a fan of umbrella issues with non-specific goals, so going to close this.. Some updates:\n\nI've fixed two races, see fedf73f808de6a8ca905cba33113e9e49ec477b6 and 0936e1a4b644480bd729a544e3cc12974c054272\nThe three issues mentioned above are almost completely fixed\nA race remains in HostCheckerManager that I have failed to fix so far\nA couple of races remain in RedisClusterStorageManager that I haven't looked at yet. I'll revisit this for 2.4 once we have swapped the redis cluster library. It's likely that the redis races are caused by it.. > BTW, what linter did you used to remove dead code? Or you found it manually?\n\nhttps://github.com/dominikh/go-unused. Not sure if this is it (found this weird code randomly), but this is definitely wrong and a leak:\nfunc (r RPCPurger) StartPurgeLoop(nextCount int) {\n       time.Sleep(time.Duration(nextCount) * time.Second)\n       r.PurgeCache()\n       r.StartPurgeLoop(nextCount)\n}\nThe calls will stack up ad infinitum. Given the 10 seconds, it would probably take a long time (weeks?) for Go to actually crash becuase of the stack being too large. Until then, the stack just keeps on growing, hence, memory leak.\nI'll post a PR soon. @buger please re-run your tests once it's merged.. I was not given the chance to update the commit message, so closing manually.. @lonelycode so which should be a pointer, APIDefinition or the HostList inside APIDefinition?\n\nif the mutex is being copied all over the shop it might actually explain why some users report random nil pointer dereference panics\n\nUnless the mutex isn't actually used in between copies, or the copies don't happen in practice, this is bound to produce some sort of bug. Can't hurt to fix anyway.. > API Defintions are huge, so they should always be pointers (and I think they are IIRC, went through a refactor a ways back to make sure it wasn;t copied too often).\n\nHostlist is dynamic and shared across proxies requests (it must be up to date for any single configuration), so it too should be a pointer\n\nAh, thanks for the pointers. PR incoming soon.. Now fixed, see commits above.. Same for tyk.conf. This one is in the gitignore. I don't like how it's left in the root of the repo, though.. @lonelycode should tyk.conf be deleted too?\nAlso, why is 1.json being written to disk at all? It's not useful for the tests since they run fine in parallel. Perhaps we could disable writing to disk entirely?. @lonelycode we're talking about the files that the tests generate and are not checked into git. I think you got confused with the files we do check into git?. BTW, I'm aware that I'm changing the vendored tykcommon. This makes my life easier to apply all the changes in a single PR and be able to test them and get it reviewed at once. IMO that's better than a first PR to tykcommon.\nIf this is merged, then I'd do a PR to tykcommon to sync the change.. I would instead suggest just making it part of this repo. I don't see an advantage in a separate one.. The same could be done with this repo - all others could depend on this one. I still don't see why a separate git repo helps - if anything, it makes changes like this more complicated.. We should also support stuff like //tyk//apis///. Most routers have support for removing extra slashes.. (to clarify for anyone not following why this was re-opened - the fix didn't actually work and the test didn't actually test the muxer setup). It seems I can't mark the requested change as solved. I assume only you can do that.. I also strongly believe this should not be exposed. Why should this ever be off?. Also, I feel like the three commits other than 2e0a131d49b32d95f895c98790502df56cda2592 should be squashed together, as they just change and move around the same lines of code.. It makes accepted urls more liberal, not stricter. An example of what could break?. Right - I was confused by this because of the double negative (Skip set to false). I thought this was about turning off path cleaning by default, when it's about keeping it on by default and allowing to turn it off.\nSGTM. If the commit message includes \"Fixes #n\", the issue will be automatically closed when the commit is merged. Unless I misunderstand and this doesn't actually fix it?. Rebased to fix conflicts due to newer PRs.. Add the \"Fixes #n\" to the commit?. LGTM. Why was this PR red right before merging?. What exactly did you run?\nTools like glide will still vendor. Even if they used something like git submodules, you would still have to download everything all the same. I don't understand what your suggestion here is.. Then you depend on third-party git repos not disappearing or doing silly things like force-pushing. Which can be an okay thing to assume, but it's not as stable as what we currently have so the decision shouldn't be taken lightly.\nAlso note that we can't rewrite the git history, so the repo won't get smaller unless you do a shallow clone.\ncc @lonelycode . Ignoring test files is a good start. For example:\n```\n $ dupl -t 100 $(ls *.go | grep -v _test)\nfound 2 clones:\n  storage_handlers.go:709,730\n  storage_handlers.go:732,753\nfound 2 clones:\n  command_mode.go:37,103\n  swagger.go:142,208\nfound 2 clones:\n  middleware_url_rewrite.go:75,98\n  middleware_url_rewrite.go:119,142\nfound 3 clones:\n  main.go:461,484\n  main.go:515,538\n  main.go:543,566\nfound 2 clones:\n  oauth_manager.go:641,661\n  oauth_manager.go:743,763\nfound 2 clones:\n  rpc_storage_handler.go:571,595\n  rpc_storage_handler.go:598,622\nfound 2 clones:\n  middleware_rate_limiting.go:40,60\n  middleware_rate_limiting.go:62,82\nfound 2 clones:\n  middleware_jwt.go:427,449\n  middleware_openid.go:232,254\nFound total 8 clone groups.\n```. The sample above is down from 8 to 5. One of them is the redis code that we will likely refactor. The rest aren't particularly bad, as the code isn't easily deduplicated.\nI'm going to close this, since we no longer have large bits of very similar code. Smaller refactors can be done over time.. Travis, wake up.. There's a lot of *[]*Foo that I wanted to tackle next. Those can be useful sometimes, though. Map pointers are certainly wrong.. Yep, which is why I left them for another time.. @lonelycode this is my proposal for the new package paths:\n\ntykcommon.GetLogger() -> tyk/log.Get()\ntykcommon API stuff -> tyk/api/v0.* (package name api)\ntykcommon.coprocess.* -> tyk/coprocess.*\n\nIf it sounds OK with you, I'll handle the move.. No, when I say tyk/log.Get the package will be tyk/log. Same for the rest - they all hang from the root package here without a common in between. That's IMO as meaningless as util.. I missed this comment, apologies.\n\nWouldn't the entire tyk codebase be compiled into the binary for whatever is using it then? If I import a package from another large project, I thought the entire project doesn't get compiled in, just the package (it's already a big binary) - but I could be wrong?\n\nIf you import a Go package, only it and its dependencies will get linked. What I'm changing here is git repos - all the tykcommon stuff will keep on being separate Go packages. The new packages being subpackages of the big tyk one doesn't change anything. I don't undesrta\n\nRegarding the API Definition objects, I like the idea of versioning them, opens us up to change in the future, though when we were discussing versioning I was talking about the path interfaces exposed by the dashboard and the gateway, not the objects, so maybe tyk/apidef/v0.* would be better for the objects as it is different from api, which might end up being the actual service?\n\nIn general an api package means API objects. It's a name that you'll have to type very often, so IMO the shorter the better.\nFor the actual service you can come up with something like tyk/gateway, tyk/service, tyk/runner, etc.. To fix packages:\n\ntykcommon-logger.GetLogger() is now tyk/log.Get()\ntykcommon.* is now tyk/apidef.*. This is covered by go test, which is how I found the race. The goroutine handling is entirely in the covered code, so it's IMO safe.\n\nIf you guys want to wait until the bugfix is released to merge this just in case, that's fine by me.. reping since bugfix is ready. Also, I realise this makes the New() lines more complex. But they're already complex anyway. I plan to refactor that into a proper constructor func soon.. Also, isn't the first commit already in master?. Travis, wake the fuck up.. @matiasinsaurralde as we discussed, this only tests their builds.\nPTAL @buger @lonelycode . Also note that this only includes the build dependencies, not the runtime ones. If we ever need to run any python or lua as part of the coprocess tests, we'll need more packages.. @buger I was thinking the same, but apparently this doesn't happen. If it did, I assume many of the tests would fail. I made sure via -count 100, i.e. firing all the tests 100 times. If any keys were stomped, a good part of the runs would have failed then.\nYour solution doesn't convince me either - there is still space for flakiness. I would use something like the test name as the prefix, which is known to be unique. I can do that change, if you wish.\nI'd first like input from @lonelycode as to whether the keys are repeated or not.. > Maybe in our case it make sense not to add parallel tests at all (considering that test time already great)\nI disagree. Four seconds is better than before, but it's still pretty bad. Remember that we have a 30% test coverage. Once that reaches decent numbers like 80%, the 4s could easily duplicate or triplicate. Parallel tests don't increase linearly in time consumed.\n\nand instead in TestMain ensure to Cleanup redis after each test call. This should be bulletproof way to avoid any redis related issues.\n\nThis is not how TestMain works, unless I'm missing something. In any case, it would be a hack and a workaround for our messy use of redis in the tests (if it is messy).. @buger sure, but giving up parallel tests altogether isn't a good option IMHO. A few of our tests already take long (half a dozen are around 0.2s) while not using almost any CPU, so it's definitely the way to go.\nThis PR is not high priority, we can discuss keys with Martin once he's back.. > I'd first like input from @lonelycode as to whether the keys are repeated or not.\nJust in case there's already something in place for this that we've both missed :). @lonelycode thanks, what I'll do is make key prefixes unique.\nUnfortunately this will come with 1.8: https://tip.golang.org/pkg/testing/#T.Name\nWill pick this up in a couple of days once it's released.. Unfortunately, 1.8 has been delayed by two weeks. So delaying this PR further.. @buger I can implement the helper func (the one that sets up the prefixes) twice, with test names for 1.8+ and with a random string pre-1.8. This way we can assure no failures going forward. We'll have to live with the potential collisions until we drop support for 1.7, but should be fine as long as the strings are long enough.\nThen again, I can implement this right now, no need to wait for 1.8.. I need to send other incremental patches first, so will redo this PR from scratch.. First issue I found on tip:\n```\n$ go install -tags 'coprocess lua'\ngithub.com/TykTechnologies/tyk\n./coprocess_lua.go:191: cannot use luaState (type unsafe.Pointer) as type C.struct_lua_State in argument to func literal\n./coprocess_lua.go:204: cannot use luaState (type unsafe.Pointer) as type C.struct_lua_State in argument to func literal\n```\n@matiasinsaurralde any suggestions?. I didn't introduce a bug after all. Huzzah!. @buger as said before, this forces exporting the constants so it's not an option.. > Our tyk repository is not a package, it a runnable program.\nWell, it's like that because of many limitations, one of them being this.\n\nMoreover, it is in test packages which are not exportable at all.\n\nThat's still no reason to abuse exported names. Also, we're not using a foo_test package, so it's technically the same package.\n\nI find this kind of discussions quite meaningless, just make what majority wants and move on to the different task. It does not matter a lot, even if it does not align with some guidelines. Yes, it is a C classic style, most of us prefer. That's just a few variables.\n\nWell, so far you're the only one pushing for C-style constants. I've shown why their use in Go is fundamentally flawed, even if the disadvantages don't affect us right now. Feel free to reject this PR right now, but I am not letting this go.. I hope you'll understand that I have respect for everyone here. What I'm trying to do is stick to my beliefs, unless they are proven wrong. Since yes, this is a minor patch/fix, I'd be ok with you closing and not merging. What I meant by \"I'm not letting this go\" is that I definitely think our current approach is not good in the long term.\nIn general I'd rather have discussion and end up with the right answer than give up the discussion altogether. It's easy for written text to seem agressive, but that was not my intention.. All I did was run the tests. The change is pretty straightforward, so I doubt anything broke.. Nope, hence \"perhaps related\".. Is this a regression?. What makes this fix correct in comparison to the old fix?. +1, tests for this would be very useful since it seems particularly flakey.. If we keep the logs, all the disadvantages listed there don't improve. What do you mean by error codes?. > I do not think we going to work on it in near future (year). Do not think we should plan for this use case at all, at least now.\nThis is what I said in the original issue :)\n\nBy error codes, I mean making functions to return proper error objects/messages, instead of just boolean variables or nil values.\nWe need logs we currently have, not only for internal debugging but for our customers too. Instead of removing them, we should try move logs out of functions, to the places where they get called - based on returned error, or its absence.\n\nYes, of course. When I said removing logs, I meant moving them out to their parent funcs. The more funcs we have that just return errors, the better.. Then again, keeping this issue open doesn't help much. Hard to tell when this will be \"done\" and it's not a priority.\ncc @matiasinsaurralde . Also, I want to see if Coveralls actually works, so don't merge yet.. Rebased.. @ilijabojanovic please unassign yourself when adding the \"QA ready\" label, to make it clearer that it's up for grabs to implement.. By the way, should this setting default to empty string (no defualt user-agent string) or to something that says Tyk/Go? I assume our default is one that says Go now, as that's the net/http default unless you do otherwise.. To clarify, we've decided to set the default user agent in the Tyk reverse proxy to Tyk/VERSION, like Tyk/v2.3.7. This default will not be set if an user agent was set by the client, even if it was empty.\nWe haven't added an option to change when the user agent is set and the user agent string itself. We haven't seen a user specifically ask for these two things. If anyone would find either useful, please speak up or open a separate issue.. @matiasinsaurralde also please rebase onto master instead of merging master onto PR branches. Thanks for using PRs to cherry-pick!. You could do a single PR with all the cherry-picked commits. What matters is that the release branch stays green.. Note that this also disables email notifications if master or any other important branch breaks. I'd rather keep those on.. sgtm, squash though?. Sure, on it.. This was probably me when I removed the sleeps from the tests.. @buger the linked Travis log is a success log, where is the actual error log?. > But log itself did not contain too much information (since we disabled info messages)\nThey're disabled by default, but not on Travis - see .travis.yml. Do you have it somewhere?\nIf not, I'll try to find it going through all of the history.. Can't reproduce, even with go test -run TestHMACAuthSessionPass -count 500 -race. Removing from 2.4, unless it happens again (and we do have a proper log).. I already tried that but no luck. I wanna get back to this once we have parallel tests in place, which will make flakiness like this surface a lot easier (it will also make go test -count 500 not take forever).. Have we seen this again? I haven't. We won't have parallel tests soon, so I'm not sure how to track this down.. Not another occurrence for more than 4 months, so I say we close this for now. We can re-open if it pops up again.. Happened again, not the same test though:\n=== RUN   TestHMACAuthSessionPassWithHeaderFieldLowerCase\n[Jul 10 22:37:47]  WARN Legacy path detected! Upgrade to extended.\n[Jul 10 22:37:48] ERROR hmac: Clock skew outside of acceptable bounds\n[Jul 10 22:37:48]  INFO hmac: Authorization field missing or malformed origin=192.0.2.1:1234 path=/\n--- FAIL: TestHMACAuthSessionPassWithHeaderFieldLowerCase (0.04s)\n    mw_hmac_test.go:356: Initial request failed with non-200 code, should have gone through!: \n         400\nEdit: it's happened twice in half a year, so it's safe to not target 2.4 for now.. I thought about adding officially, but I think it's redundant. What kind of support is not official? What you're describing is more of a \"happens to work on\", since we don't even test it on those.. fair enough, done (github hasn't reloaded yet). @buger PTAL. I tested it locally, but I'll push a breaking commit here just to be sure.. @buger see above, is that ok?. That's the whole point of printing all the logs. Even if we kept things as they are, once tests were made parallel, the logs would not be in their proper sections either.. @buger sure, but how? This is precisely what I was commenting about in the issue, and you said ok to both options.\nWhat you're saying, which is the first option I proposed, will need serious tweaking because we use a global logger that is used by all the code. So with parallel tests, it will be impossible (as it is now) to just catch the logs \"for this test\".\nA slight variant is catching all log output between the start and end of a failed test. This will also catch the logs from other tests that ran in parallel to it.. After some discussion with @buger I'll do this another way. Will open another PR.. Yeah, it's in the history.. @davegarvey were you thinking a custom header, or reusing an existing one like cache-control?\nThe problem with cache-control is that it might get clients to cache API responses, which I assume we don't want.\n/cc @buger . Do we have any naming scheme for these? Most are x-tyk-*, but some aren't like x-ratelimit-limit. I can't see any x-api-* uses yet.. Note to self: use RFC1123 for the time format, as described in the HTTP/1.1 RFC:\n\nHTTP/1.1 clients and servers that parse the date value MUST accept all three formats (for compatibility with HTTP/1.0), though they MUST only generate the RFC 1123 format for representing HTTP-date values in header fields.. Note that the first two could be fixed by making the global var log an interface, replaceable with a stub (to remove all logging) or another package's logging system.\n\nThe problem with the latter is that the interfaces probably won't match, hence the standardization discussion.. @buger also suggested that, to fix the third one, we could use \"goroutine IDs\". Unfortunately, these (goroutine IDs) are advised against since people could abuse them to have \"thread-local storage\", which doesn't make sense in Go. I'd like to avoid implementing this in a hacky way.. > This isn't a design goal at the moment, so would suggest this is premature optimisation.\nI realise it's not a blocker in the short term, which is why it doesn't have a milestone. I don't see why that's reason to ignore it, though.\n\nThe interface route is probably the best path to take, but I would just standardise on logrus, that makes the interface easier, and we should only focus on compatibility within Tyk code.\n\nYes, that's the first step that we could take.\n\nIf tests fail in parallel, then we can always just run the failed test with a flag to get the logs output?\n\nThis won't work if the test is flaky (hard to reproduce) or if it failed because of it running in parallel.\nWe figured out a short-term solution with @buger, which consists of Travis running tests twice:\n\nsequentially with full logging\nin parallel with -race and no logging\n\nThis still doesn't fix the problem above, but it's better than having mixed up logs because of parallel tests. It will be configurable via TYK_LOGLEVEL in any case.. Would you rather close this once the interface is done and keep track of all stuff relevant to the importable package in that issue?. @buger the idea is that once this is merged, making key prefixes truly unique will be a tiny patch as we only set them up in three lines.. I broke the coprocess tests again. Thank god CI checks for it now.. @buger PTAL. @lonelycode is it possible to do away with the global, or somehow be able to set a unique KeyPrefix for each test as described above?. @lonelycode makes sense, thanks - do you LGTM this?\nI'm not going to change the global right now.. Enhancement with no assignee by the time of the feature freeze, so moving to 2.5 for now.. > Arrays are already pointers, same as maps.\nCareful with the wording there - you mean slices, not arrays :)\nAlso, grouping slices with maps isn't exactly correct. Maps are a single pointer, while slices are a three-field struct (arr, len, cap) where the actual backing array is a pointer. Using pointers for slices is still useful to update any of the three fields, as explained above.. Slices don't actually contain the objects directly, so I doubt this would affect performance in any way. Rather the opposite - you're using pointers to 24-byte structs, which is likely to degrade performane a tiny bit.\nBut my main concern here is making the code overly obtuse for no reason.\nThis isn't blocking anything else of mine though, so feel free to run your tests first.. Well, I would if we had benchmarks :) I don't know how you run yours, so I can't prove much.. I've opened https://github.com/TykTechnologies/tyk/issues/453 about our gateway benchmark discussion on Slack.\nIf I write an APISpec benchmark, would it be useful to keep in the repo?. Not yet, was distracted with other stuff.. I've added a somewhat stupid benchmark:\n```\nname               old time/op    new time/op    delta\nApiInsertReload-4    14.9ms \u00b1 1%    14.8ms \u00b1 0%  -0.48%  (p=0.015 n=6+6)\nname               old alloc/op   new alloc/op   delta\nApiInsertReload-4    4.37MB \u00b1 0%    4.37MB \u00b1 0%    ~     (p=0.485 n=6+6)\nname               old allocs/op  new allocs/op  delta\nApiInsertReload-4     47.2k \u00b1 0%     47.2k \u00b1 0%    ~     (p=0.608 n=6+6)\n```\nI say it's stupid because it doesn't use http to create the apis, and it doesn't reload them.\nThe way the tests are written is a bit confusing:\n\ndo I need to set up http.DefaultServeMux?\ndo I need to use httptest?\ndon't I need a secret to do these things, like shown in https://tyk.io/tyk-documentation/get-started/with-tyk-on-premise/tutorials/tyk-premise-community-edition/create-an-api/?\n\nAlso, @lonelycode, when you said \"Insert a few thousand APIs\", do you mean one by one or all at once?. Actually, these are the real numbers for the silly benchmark - I hadn't noticed the gateway was erroring and not actually doing much.\n```\nname               old time/op    new time/op    delta\nApiInsertReload-4    77.7ms \u00b1 0%    76.9ms \u00b1 1%  -1.07%  (p=0.030 n=5+6)\nname               old alloc/op   new alloc/op   delta\nApiInsertReload-4    33.7MB \u00b1 0%    33.7MB \u00b1 0%    ~     (p=0.937 n=6+6)\nname               old allocs/op  new allocs/op  delta\nApiInsertReload-4      400k \u00b1 0%      400k \u00b1 0%    ~     (p=0.619 n=6+6)\n```\n. Okay - I'll open an issue about making the benchmark better.. By \"real-world\" I meant that it reflects what parts of the gateway are used in what proportions. The actual data doesn't have to be real. It's just about keeping the load in the right places.. I agree that separate benchmarks will be useful to prove optimizations. I'm just worried that we would optimize irrelevant stuff if we don't have a global view of where the time is spent.\nIf you can capture cpu/mem profiles of our cloud, that should be enough to know what requires our attention.. Is there really no way to know what takes most of our resources? Without it, it's very likely that we'll be doing premature optimization in unimportant parts of the gateway.. @lonelycode @buger so to summarize, should we abandon the possibility of a high-level benchmark that throws \"realistic\" traffic at the gateway and instead focus on lower-level benchmarks, like the one I added that adds a lot of APIs?. That was my thinking too, but the discussion and silence made me think that we weren't going to do it :) Wanted to make sure it was on the roadmap if we were to keep the issue open.. Also I can attach a test, but I first wanted input on whether my intuition regarding this fix was correct.. It affects the tests and when tyk is run with no config file, yes. In both cases env vars are discarded when they shouldn't be.. @buger PTAL, confirmed test was failing without the fix.. As said, this only affects the real binary when the config is missing. Have you tried that?\nEdit: besides the tests, of course.. True, but it can still break if you do:\nrm -f tyk.conf\nTYK_GW_LISTENPORT=9090 tyk\ntyk\nNone of the two executions will have the proper setting, and it's discarded.. Let me fix the commit message then, to reference the issue.. Merged before green?. Travis gets borked if we merge before it can pull from git, so this merged PR will stay red. So it makes things unnecessarily confusing.\nAlso I'd rather be safe than sorry :). Yeah, that was my bad. Done.. Yeah, me conflicting with myself again like a retard.. Rebased, PTAL. Actually, no, I fucked up the rebase.. @buger now, sorry.. It gets stuck sometimes.. Nope, search for it on https://github.com/alicebob/miniredis.\nWe should probably open an issue about it and consider undoing the miniredis switch, unfortunately.. @matiasinsaurralde rebase on master, pub/sub should work now.. @matiasinsaurralde this needs a rebase now, apologies :). @matiasinsaurralde looks like 1.8rc3 hit the 10m timeout again. reping @matiasinsaurralde please rebase and fix the timeout issue. The discussion at https://github.com/alicebob/miniredis/issues/1 tells me that this wouldn't be easy. If anyone wants to have a go at it they're welcome to, but I don't think we should hold up new tests like your PR until we have it working.. I want to avoid mocking libraries as that would be quite a lot of work to integrate. The advantage of miniredis is that it was a drop-in replacement.\n\nit's only for local dev where it's annoying\n\nYep, this is about making our lives easier when running the tests locally. @lonelycode you said Redis was going to be replaced, but you also said something like it would still stick around. Is it always going to be needed for the tests?\n\nInstead of miniredis we should just FLUSHAL during teardown.\n\nI assume this is to clean up. That doesn't seem to have affected us at all while we used the real redis, though.. > This does not matter for Travis, because on each run it have clean state, but matter for local testing.\nThat's what I meant - I fire up Redis in the morning and keep it up. So it should have been affecting me.\n\nAs an alternative, we may try make RedisClusterStorageManager interface, and for the tests write own implementation (which in most cases will just proxy original calls), which mock pubsub internally using channels.\n\nYou mean implementing pub/sub on top of miniredis? This could work.\nI'd only do this if we'll definitely need redis in the tests in the long run, though. If it can be removed sometime this year, perhaps it's better to just deal with the real redis for a few months.. Yeah, that depends on whether we're blocking @matiasinsaurralde, which I guess we are.. If anyone wants to tackle re-adding something like miniredis instead of a full redis, feel free to reopen this issue and submit a PR. As said above, that would require some work to add pub/sub support, at least.\nI'm going to close this for now as we do need pub/sub and running a full redis service is bearable.. Cool, thanks for confirming.. Also, I went with the simplest forms of package names, /log and /apidef. We can hide log inside /internal and version via /apidef/v0 later.. > It looks sane to me, but since this is mostly not about tech but about vision, I would like to get @lonelycode approval here.\nI got his approval on the idea in #390, so this should only be about execution.\n\nAlso, I assume rest of repositories which use tykcommon should be updated as well?\n\nWe should do it the sooner the better. But since we're not taking down the other repos yet, we can give it a couple of weeks.. @lonelycode @buger you can find them referenced in #390. I just opened them, haven't assigned/milestoned them.. > Coverage increased (+0.1%) to 32.525%\nWoo, this thing works!. I don't know if I'll be able to get to this for 2.4 - already have four unstarted 2.4 issues that need doing.. Yeah, no time for this in 2.4 I'm afraid. Moving to 2.5 for now.. I realise 1.8 isn't out yet, but it will be out within a week. This also doesn't force us to use 1.8 to build our release binaries as we will still support 1.7.. @buger you mean to update to 1.7 or to 1.8? I don't know what we use right now.. Perhaps some of the docker images? Otherwise not that I know of.\nOnce 1.8 is released, perhaps we should use that instead of 1.7. After all, we support two versions and the newer one is almost always going to be better for us, as long as we stay within stable Go releases.. I don't mind what policy we take too much, just want to easily know what Go version our binaries and cloud are running. Right now it's not documented or listed anywhere, that I know.. @buger @lonelycode PTAL\nAnother option that comes to mind, instead of demoting from error to warning, is to keep it as an error but see what errors we get now that we'll see what string is being passed. Then we can decide what to do.\nThe problem is that we'd need to ship the patch in 2.4 to get the extra info, and then actually get rid of all the useless errors in a following release. Since I assume this is not low priority, I've gone ahead and demoted to warning directly.. Yeah, will have to look into it.. @buger PTAL at the two new commits.. Ah, was running just my test. Forgot about the rest.. @buger done. @buger how were these reports generated?. I've used cpu and mem (heap) profiles plenty of times before, but not goroutine block ones. Will have a look later.. This could use some rebasing/squashing :). Enhancement with no assignee by the time of the feature freeze, so moving to 2.5 for now.. Coveralls isn't happy because a lot of the now shorter code was covered. Shouldn't matter.. Out of curiosity, why was this squashed? If you wanted me to squash, I could have done it myself.. Ah right, no problem :). @lonelycode @buger we're also lagging behind on lots of other packages by quite a lot. This raises two questions:\n\nWhat should our policy be regarding updating vendor/? I think now is a good time, when we have a few months to test things before the next minor release.\nWhy do we have so many TykTechnologies/* and lonelycode/* forks? Some have modifications, like rediscluster, but most don't. We should minimize forks to simplify staying up to date with upstream.. > Ideally, we should update only to latest bugfix release, and consider major package updates only if there are features we REALLY want. Unlikely anyone of us would like to fix bugs of vendored packages. \n\nThis doesn't apply to golang.org/x/... - those are rolling and maintained by the Go team.\n\nBut unfortunately is it very rare for Go packages to use semver or similar, which makes hard updating them.\n\nIt's actually fairly common, and should become more so since it will be used by the upcoming official dep tool.. > Will this actually change the logic a bit, because before it was using clean state (router) each time, and now use global object, which can be potentially polluted during the tests. Are you sure you want introduce a new global object, or I'm missing something?\nBefore, a local router was used that was discarded. Now, a global one is used and is discarded. I did it this way because it's more obvious and cheaper. Either way, the router is pointless.\n\nAlso seems it does not call loadAPIEndpoints at all, why?\n\nBoth loadAPIEndpoints and loadApps seem unnecessary, which is why I'm asking for input as to what the logic behind all this was.. @buger rebased, PTAL. Perhaps something like https://github.com/viki-org/dnscache, but that package seems abandoned.\nhttps://golang.org/src/net/dnsclient_unix.go also has a TODO about a small cache.. @buger you're right, good spot. Since this seems to be fairly important for performance, I'll try to get to coding this soon.\nSome out-loud design points:\n\nWhy do you say we don't need dnscache, but you use it in the sample code? I assume you mean we'd implement the dnscache.Fetch line ourselves.\nFor the sake of simplicity, I'm thinking of a map guarded by an RWMutex that gets cleared every N seconds. This should guarantee that our cache is at most N seconds behind and we don't have to worry about refreshing it in parallel.\nI think a default of many seconds like 5s or 20s would be saner than 1s, since DNS records don't change that often and we don't want to grab the lock and block the cache often.\nWhat should a value of 0 be? Caching forever, or no caching at all? We could also make 0 be caching forever and -1 be no caching at all, or the opposite. Also worth noting that caching forever is not a good idea in any scenario, as you'd want to instead cache for a day or some other very long period.\n. Note to self - simply changing http.DefaultClient won't do the job, as we create new http.Client objects all over the place.. Worth noting that if it takes a while but the memory is eventually freed, it could be simply the GC's tuning.\n\nWill look into the OOM first thing tomorrow.. @lonelycode does this happen if you do /tyk/reload? My assumption is that it does.\nIn any case, the culprit is very likely here:\nfunc ReloadURLStructure() {\n        if !reloadScheduled {\n                reloadScheduled = true\n                go doReload()\n                go doCoprocessReload()\n                go checkReloadTimeout()\n        }\n}\nAssuming coprocess is disabled (doCoprocessReload does nothing), it seems like either doReload or checkReloadTimeout are the culprits. They both do sleeps for some reason, and I don't quite understand why. If the sleeps are long enough, and the reloads triggered fast enough, you could end up with thousands of goroutines before any of the sleeps is over.\nEach goroutine takes at minimum 2KB of stack, plus any stack/heap it allocates. So the numbers can escalate to the megabytes very easily. This would explain your OOM.\nIf we want to make OOMs impossible, we could limit one hot reload at a time (e.g. via a sync.Mutex). I don't see why multiple hot reloads at a time would be useful, anyway. Subsequent requests could either be queued or simply error with \"hot reload already in progress\".\nNote that if there really is a memory leak, this won't solve it. I can see two possibilities for it:\n\nThe sleeps and the GC keep the memory in use for a limited amount of time (is the memory reclaimed in, say, an hour? five hours?)\nThere really is a goroutine leak and the memory is in use forever\n\nYou didn't specify in the original report, so I'm not sure which it is.. One way to discern which of the two types of leaks it is would be to measure how many reloads it takes to OOM in under a minute (like your mentioned 2,600, rounded up to 3,000 just to be sure) and do them instead over a longer period of time, like every 10s.\nThis would take much longer, around 8h. Then at the end we would see whether it OOM'd and how much memory is in use.. > I would like to clean this up if possible, it's not an ideal situation and more of a kludge.\nIt's racy, so I agree that we have to clean it up. Right now, it's unlikely yet possible that two hot reloads start at the same time, which could have all sorts of consequences including goroutine leaks. We need one of the following:\n\nA lock around reloadScheduled\nA single goroutine handling hot reloads, receiving requests via a channel\n\nI would very much prefer the latter. It's easier to write/maintain and it will be a lot easier to handle throttling of hot reloads. Simply put, if the reloader goroutine is already busy reloading, another reload can't possibly start. And we can limit the amount of reloads per minute/hour too. I assume both of these things would be OK to maintain \"you can't constantly reload\".\nIf this sounds fine by you, I'll create a separate issue and assign to myself for 2.4 - in my opinion it's important enough. Hard to tell if it's the cause of this particular issue, though.. > Go for it, if we can get rid of this dumb timer it will be so much better.\nAwesome :)\n\nBut try to cover this functionality with tests.\n\nIsn't that https://github.com/TykTechnologies/tyk/pull/465? If it's not exactly the same thing, it looks related and should be merged first.. We should try this again on 2.3.x once https://github.com/TykTechnologies/tyk/pull/548 is merged.\nIf it's still not solved, also worth trying to reproduce on master as there have been other potential fixes.. Fix is merged in both 2.3 and master.. I haven't - it seems to use its own loop logic. I'll look around and open an issue if I think it's racey or fragile.. Had a proper look at this. The loop is:\nfunc RPCReloadLoop(RPCKey string) {\n        for {\n                RPCListener.CheckForReload(config.SlaveOptions.RPCKey)\n        }\n}\nWhich may end up calling:\nif reload.(bool) {\n        // Do the reload!\n        log.Warning(\"[RPC STORE] Received Reload instruction!\")\n        go signalGroupReload()\n        //go ReloadURLStructure()\n}\nThis logic seems OK, as it uses no globals and it uses a group reload, which under the hood is a buch of regular reloads which are handled properly.\nMy only concerns:\n\nWhy is this a busy loop? Don't we want to limit it somewhat to not waste CPU, like the regular reload worker?\nWhy is there a commented out ReloadURLStructure() in there?. Also funny that RPCReloadLoop doesn't actually use its RPCKey argument, instead using the global one from the config. Probably harmless since that's the same value it gets passed, but will send a small PR to fix it.. I believe this was fixed when #506 was fixed. @lonelycode @buger have we seen any more reload leaks in 2.3.3/2.3.4?\n\nMy comments on https://github.com/TykTechnologies/tyk/issues/496#issuecomment-283093180 are still valid, but I don't think it could lead to a leak. If we'd like to clean that up a little, I can open a separate issue to track those changes.. Should we open a new issue about that and target for 2.4? Or is it somewhat severe and it should go in a 2.3 bugfix?. I assume this JSVM leak is still related to hot reloads, right? As in, it doesn't show at all if there are no reloads?. Thanks - will get back with findings in the next couple of days.. Running tyk at master with the default config, only swapping enable_jsvm to true, and throwing endless reloads at it (verified it does reload the js VM) does not increase memory usage over time. It does slightly by a couple dozen MBs, but the GC catches up in a few seconds and it goes back down. Left it running for a couple of minutes to no noticeable increase in memory usage.\nAm I doing anything wrong? Perhaps I should actually add a js middleware or run requests through it?\nAnother thought is that this leak could be caused because the old VM keeps running. We don't keep any pointers to the old VM as far as I can tell, but it could be that it doesn't get garbage collected because it's still running in an http request goroutine.\nFor example, say I write a js middleware that just sleeps forever. I assume that a request going through it would either never reply, or time out and give an error response. Either way, the js VM will keep on running. We do nothing to stop it, right now.\nOtto provides a way to kill the VM: https://godoc.org/github.com/robertkrimen/otto#hdr-Halting_Problem I haven't been able to reproduce the leak so I'm not sure if this would be the fix, but it could be.\nI can submit a PR to kill the previous Otto VM when starting up a new one as part of a hot reload. The only question is: is that safe? If the old router and old Otto VM are still processing a request, this could lead to killing it. Do we want to wait until they're done doing all their work or until a timeout?. @ilijabojanovic if you've played with js middleware before, perhaps you can reproduce this memory leak.\n@matiasinsaurralde any ideas, since you wrote most of this code?. My bad - thought it was part of coprocess :)\nYou're probably referencing to this, right? https://github.com/robertkrimen/otto/issues/71\nI hadn't noticed the Copy(), thanks for the input. So perhaps I do need to throw requests at a js middleware to trigger the leak. If the issue seems like an upstream Otto bug, I'll update that issue.. By the way @matiasinsaurralde, what you said in that issue - memory keeps growing on each request - you didn't do any reloads to reproduce the leak, right?. Okay, given that I couldn't reproduce anything with just reloads, my chips are on the cause being either Copy() or that we never kill the copied VMs if they never finish (both related to requests, not reloads).\nThanks for your help!. I've done another version of the test I did above - which was throwing endless reloads on a Tyk with the JSVM on - but this time also with an endpoint that has a js pre middleware that just sets a header, and hitting that too.\nIt has been running for over 20m now, counting around a thousand requests and a few hundred reloads. Memory usage is still stable at 37-38MB, with no leak to be seen.\nSo I think the original post by Martin about reloads with near-zero timeouts was simply a race that was leaving goroutines hanging and was fixed in #506.\nAs to the JSVM leaks that Martin mentioned later in the thread and Matias said he encountered too, I haven't been able to reproduce them either. Perhaps they have been fixed somehow too, I'm not sure. In any case, there is still a potential leak when it comes to JSVM copies not stopping by themselves which we must kill, as I outlined above.\nI'll prepare a pull request killing stalled JSVM copies which we can include in 2.3.5. Unless someone can reproduce a leak on master or 2.3.4 with reloads and/or the JSVM, I think we should close or postpone this (once the PR mentioned is merged) and revisit if one of us or a customer encounters a leak again.. > I'll prepare a pull request killing stalled JSVM copies which we can include in 2.3.5.\nDone and merged.\nIf we encounter more leaks after these fixes, be it related to reloads or the JSVM, please open separate issues.. Reopening for the cherry-pick.. (found when looking at duplicated code). Ah, right, makes sense. Thanks.. > Worth noticing that this change should be done Dashboard, Pump and Sink projects\nWould it not be easier to open separate issues? This one will be closed as soon as it's done in the gateway.. This should be done in a way that makes it easy to add paths to the list to search for. For example, we might want to add ~/.config/tyk/tyk.conf in the future.. @pawmart did you follow @james-tyk's suggestion? Are you still having any issues?. @lonelycode @buger it just occurred to me - all sorts of API endpoint changes should be done in such a single goroutine. This would also affect loadApps, for example. Do we ever want the muxer to be modified concurrently by two goroutines? I think not.\nIn any case, step 1 is reloads.. Yep :) This will take forever and it's tedious work, though. But definitely worth it for our own sanity.. After this, the only foo_test.go files without foo.go are:\n$ for f in *_test.go; do test -f ${f//_test/} || echo $f; done\nextended_method_versioning_test.go\ngateway_test.go\nmiddleware_example_test.go\nmultiauth_test.go\nOnly the first stands out, but I don't know where to put it. @lonelycode should we move it anywhere, or leave it be?. > Because we used to have a different structure that handled these, they are part of the \"extended\" set, but we can actually just get rid of the old ones, they are truly legacy and need decommissioning.\nGet rid of what, exactly?. If we do this, let's make the configurable func take []byte. The fact that we use strings everywhere internally shouldn't leak into this API.. Even better, let's make it accept any https://golang.org/pkg/hash/#Hash implementation..  Make hash function configurable. Could the commit message or the code mention why this is necessary?\nAlso, I assume this also affects master? Or it doesn't because we now return []*ApiSpec instead of *[]*ApiSpec?. We generally don't use PRs in milestones, we use the issues they fix/refer, so removing.. > So basically, when it experience error it fallback to last cached value, which looks sane.\nWhere do you get that from? This just returns an empty list.\n. @buger this is why I'm asking for more details as to why this fixes it.\nIn any case, we will be doubly safe in 2.4 since it's no longer a pointer in master.. Having the tests in master sounds like a good idea.. Your changes look fine, but I would squash the two commits. Your commit is partly just reverting all of martin's changes.. I don't think so. Golint still has hundreds of warnings, and a lot of them are not critical - missing docs, names that could be improved, etc.. You mean flush and use a specific database, instead of flushing everything?. We're not using a database that I could see. We could do either of:\n\nUse a database name for both production and the tests\nKeep the default database for production, but use a specific one for the tests\n\nOr keep things as they are. The only inconvenient now is that it might stomp data when running the tests.\ncc @lonelycode . SGTM, will update the PR.. @buger done and rebased, PTAL. No problem, code coverage is more important than unwanted logs in the tests.\nThe changes look good, but the commit message and PR title are off. This is just a new test, not a fix.. There are a few more external requests, but they're not straightforward to change. Will do them in separate PRs.. I looked at this last week for a somewhat related issue - a race. Calls to Connect are not controlled at all, so the code is racy.\nI did not post a fix because the obvious fix of adding a mutex of some sort could be tricky - it could lead to GetKey blocking all the time or for really long amounts of time.\nA change that would fix this bug but not the race would be simpler - we would have to limit the retries to a limited amount (three, for example) and have it wait between attempts. Note that it would still be really racy, but it can't be worse than what it is now. In fact the chances of races would probably be lower since there would be fewer reconnection attempts.\n@buger @lonelycode thoughts on this fix to backport to 2.3? The race fix likely doesn't need backporting. . Okay, will have a PR soon.. I've tried to reproduce this with a test using a tcp server, but no luck. Basically, the singletons are only ever set to non-nil pointers, so the logic that fires the reconnects (GetRelevantClusterReference(r.IsCache) == nil) will never be true as soon as we've set up the cluster for the first time.\nWe set either of the singleton pointers to this, which can't be nil:\ncluster := rediscluster.NewRedisCluster(seed_redii, poolConf, false)\nreturn &cluster\nrediscluster never errors when creating the cluster, as it does the actual connections in the background.\nSo I don't think our reconnect code is the cause for all those connections. It could be rediscluster internally trying to open more connections, but then it would be a bug in its reconnect code, not ours.\n@lonelycode thoughts?. Regarding pub/sub, our current code was broken somewhat. See https://github.com/TykTechnologies/tyk/pull/544/commits/a1fb2db6b694bdb8d3ce3ccaecd0f9e3bcd6cef8. Perhaps related.. Potential fix shipped in 2.3.3 and released, moving to 2.3.4 in case we have any more info or we're able to reproduce.. Another potential bugfix in 2.3.4. Kicking forward to 2.4, where we'll hopefully replace the buggy rediscluster library.. Not replacing just yet, and this hasn't been an issue as of late. Moving to 2.5.. Also note that this removes tail calls, which can be nothing but trouble.. Also a nice coverage bump as this repeated code isn't being tested (I can't even make it run in a test).. > All the storage handlers share the same Redis pool and use singletons.\nI haven't looked at this deeply, but you pointed me towards the reconnect logic - and that only touches the singletons.\n\nThere are no places in code where singletons can be set to nil, which means all the reconnect logic does nothing and can be safely removed. To be precise, reconnecting still handled but inside redigocluster and redigo.\n\nYes.\n\nIf we talking about #520 bug itself, I do not see the way how our code can cause them, so it is probably inside redigocluster. Make sense to check if we need to update our fork.\n\nCould be somewhere else in our redis-handling code, but likely in redigocluster, yes. Especially since we're behind on upstream changes and @lonelycode made changes that noone else is using besides tyk. So it's likely that it has obscure bugs like this one.\n\nWorth noticing that I tried simulating Redis failure, like stopping it after it was initialized, single and multiple nodes: GetKey always returned proper error, without looping.\n\nI also failed to reproduce the looping. It could be that the looping is due to a race condition, though. Have you tried running your tests with -race? Although it's likely that it will panic due to a data race before it's able to reproduce anything.. @buger is there anything else I should do or comment on?. reping @buger this is for 2.3.3. Note that we haven't found the cause of the reconnect stuff, so there can't really be a fix for it.\n@lonelycode mentioned getting rid of the tail calls for 2.3.3, which is what this PR is doing. It's a good first step until we can reproduce the bug.. Leaving open because I still want to replace github.com/lonelycode/go-uuid/uuid with github.com/satori/go.uuid.. We probably want @lonelycode's input on whether this is something we want to do or not. Chances are this feature has been requested before.. Actually, I'm probably wrong as I've never used mutual TLS before, but isn't this a dup of https://github.com/TykTechnologies/tyk/issues/357?. None; we were using HEAD as of mid november, I assume that's when @matiasinsaurralde's coprocess stuff went in.\nThe bump in time is of around 15 days.. Sure, you can do that. I'm not sure what your question is.. I can't - this is why I'm doing this PR now and not a week before the 2.4 release.\nIn any case, using a stable version is better than using a random HEAD.. > Oh, this ProcessRequest so big\nWould help if you ignored whitespace - a lot of the changed lines are just indentation. This can be git diff -w, but I think github supports it too.. @buger I don't see how that could be the cause. This is about multiple route handle registrations for \"/\" on the main router. Whether or not the port/socket is available would make Listen fail, which is a different thing.. 2.3.3 is already out, so moving to 2.3.4.. @matiasinsaurralde did you have the chance to look into this? waiting on your opinion since you were the last to modify the router setup code.. @buger sounds like a good choice. If this panic is reported more, we can always reassess for 2.3.5 and do a separate fix for the 2.3 branch if necessary.. Perhaps the intent was to have exactly one watch loop per store. In that case, we would need two bools or another mechanism to ensure it properly.. To clarify - the two calls are in loadApps, which can be executed any number of times.. > 2 separate keepalive checks per engine\nI assume you mean one per engine?\n\nand KeepaliveRunning should be variable of RPCStorageHandler object.\n\nThat could also be a way to fix it. My guess is that we used to have only one, so a global bool did the trick (minus the race).. Ah, right, forgot about the regexes.\n\nSetting it to 2.4.0 probably should be good at this stage.\n\nI don't like it for the same reason that I don't like 2.3.2 - once 2.4.0 is actually released, there will be no way to discern people running master older than 2.4.0 from people actually running 2.4.0.\nDo we have to use numbers in the regexes? What about 2.4.HEAD?. @buger are those the only ones? What about regexes in other repos, could they break with this version here?\nThis could be useful in our other open-source repos like pump, where people can just build master.. Okay, let's wait for @lonelycode then.. Another, less intrusive option would be to name it 2.3.99. But that's not as descriptive and warning-y as 2.4.HEAD.. What about 2.3.99 then? I can't think of a better number.. Done.. Good point, that still fixes the issue and won't break anything.\nWe should have a list of things to fix once we break the API, perhaps in 3.0 or once we define apidef v1. Perhaps TODOs, like TODO(apidef): ...?. I want to update the patch so that it keeps the two keys in place, to not break backwards compat while fixing the issue. Is that not an option?. Yeah, that's not possible in an easy way.\nSince this is not high priority, I'm dropping it and adding it to the v3 to-do list.. Rolled back the POST changes as we have a test for it, and even though it's a bit silly some users might depend on it.. GitHub loses old commits in a PR, so I don't think I can retrieve them easily.\nIn any case, it just forbade POST /foo just like PUT /. Both make little sense, as POST is for something new and PUT is for something that already exists. But the former is more widely used and we had a test for /foo, so I preferred to be careful and keep it that way in case any users depend on this edge case being supported.. Reping @lonelycode @buger. If we see a ton of events, do we...\n\nQueue until a static limit, discarding any that don't fit\nQueue until a static limit, make the caller block for any that don't fit\nQueue all of them (potentially running out of memory and crashing)\n\nIMO the right choice is the first, but I'm wondering if this is a valid design choice. In other words, if it's okay to lose events under a lot of stress.. In a way, what we do now is the last option, in the form of goroutines that wait to execute. If we see a very large amount of events in a very short amount of time, we'll fire tons of goroutines and we'll bring tyk to a crawl at best, or make it OOM at worst.. Okay, fuck, forgot about the coprocess tests.. @buger some tests were timing out, so I've set the reload interval to 0 (instead of 10s) in the tests.. Hanging again. Investigating.... @buger green and ready, PTAL. @lonelycode @buger I was unable to reproduce an escalating number of redis connections. I wrote a test doing one of each:\n\nSet up a DRL and send notifications every 50ms, verifying that they get sent and received\nSet up a health check and poll it every 50ms, verifying the returned error\n\nThen, I would monitor the amount of connections with redis-cli client list under the following scenarios:\n\nredis works normally\nredis is restarted a bunch of times\nredis is stopped for a long time and brought back up (down for long enough so that the gateway fails to reconnect at least once)\n\nUnder none of those cases did the number of tyk redis connections go above 2-3.\nI say we backport this to 2.3 as a potential fix (we can't do much else unless we're able to reproduce or get a crash log) and also say that all of this will get much better soon as we'll swap out the redis driver for something much saner and more stable (for 2.4, maybe?).. @mattfarina to clarify, we support Linux, not just Ubuntu - so any distro that doesn't ship an ancient kernel (see the minimum that Go itself requires) should also do.. @mattfarina see https://github.com/TykTechnologies/tyk-gateway-docker/issues/7.\nOn top of that, using an image like Debian would probably reduce size a bit.. @mattfarina I'm going to close this now, but feel free to reopen or reach out to us if you have any more questions.. Do we have any sort of coprocess plugins in Go right now, or is it all Python/Lua/js?. Also worth noting that we can't add this for another 5 months at least, until 1.9 is out and we can drop 1.7 support.\nAnd support for them in 1.8 is only available in Linux. But since we don't plan on extending support to *BSD, Mac or Windows anytime soon, that should not be a problem.. Different things as far as I can see - both would run Go code, but that repo is using grpc, while this is about native Go plugins.. While this is a great idea, I worry about stability. Middleware and coprocess plugins are clear, people can write them for 2.3 and they will work in 2.4 and 2.5 and so on.\nIf we make many of the public funcs/methods configurable, that means we have to keep their signatures and functionalities stable - otherwise, any Go 1.8 plugins that people wrote would no longer work.\nWhat about abstracting away chunks of code with interfaces, and making those replaceable with a Go plugin? As a silly example, if the logger was behind an interface, that would be a candidate. As long as we don't modify the interface, we won't break backwards compatibility.. Ah, yes, forgot to link.. > Looks like that Github webhook hanged\nWhat do you mean?\n\nActually when backporting, and you have no new functionality, you can skip description and just link to original PR.\n\nIf you mean the PR body, not the commit message - sure, I'll do that from now on.. @buger green again :). Those check that the slice is nil. This is unrelated.\nYou could argue that they should check if the slice is empty, but I have't looked at when getApiSpecs returns an empty and nil slice versus an empty non-nil slice.\n(to clarify, empty and nil is var a []foo or a := []foo{}, empty and non-nil is a := make([]foo, 0)). @buger really, our code should not make distinctions. For example, back in the day the compiler wasn't very clever and []foo{} was non-nil - now it is.\nIn the future, it might get even cleverer and avoid more allocations. If our funcs have to differentiate between a nil response and an empty response, it should be with ([]foo, error) as return values, not playing with nil vs non-nil.\nOn top of being more robust, it's also more readable and understandable.. I somehow fucked 1.7, need to poke around a bit.. @buger not sure what the 1.7 failure was, but I've rebased and fired it multiple times and can't reproduce the flake.. To clarify - the existing event_timeout is not about retries, it's about the time to wait between triggering the same webhook.\n\nFailed request = non HTTP 200 response.\n\nDo we want to be that strict? What about 202 or 304?\nFrustratingly, there is no spec around this. But reading a popular site for RESTful webhooks (http://resthooks.org/docs/retries/), it seems to imply that we should only retry on 4XX, 5XX and timeouts.\n\nAmount of retries and period between retries should be configurable per webhook.\n\nHow about retry_count and retry_interval, defaulting to 3 and 2s?\ncc @lonelycode \n. @buger fixed. Actually, since you already approved the changes and the rebase is green, I'll self-merge.. Approved, rebased and green - self-merging.. For the curious, lowercasing funcs in the package doesn't seem to affect the output binary. This is likely because this is a main package, so the Go compiler knows exported names can't really be used elsewhere and treats them like unexported ones (with regards to inlining, etc).. @lonelycode rebased. How do I mark the requested changes as done? Is it only you that can do that?. And of course, build is broken.. @buger I hit https://github.com/TykTechnologies/tyk/issues/588 here, but I re-ran the CI build and lost the log (damn you, Travis).\nPTAL. Anything blocking this?. @buger it's very likely when I added the ticker to control it from the tests. The fix I pushed was another test being unreliable and firing a reload when it shouldn't, which meant we were one tick behind.\nThis is likely another issue like that.\nDo we want to use the bug label for test bugs, not actual production code bugs?. Unless what you mean is \"let's use the bug label in case this is an actual production code bug\".. @lonelycode note that this touches the log call I modified recently to use r.RemoteAddr. I don't see how that log call could ever fire or why it's useful, as it's from an error to get an IP address that we never use.. > When SplitHostPort() fails, which admittedly is unlikely, but it would be abnormal to fail, and in the interest of exposing abnormal behaviour, I'd like an error message there to cover the scenario.\nLet me rephrase this - what we pass is r.RemoteAddr, which net/http says will be a valid addr+port in the very same format. Unless we have messed with RemoteAddr (hopefully not), this would only fire if Go's standard library is buggy.\n\nThe IP address is used, it is used to modify the X-Forward-For header\n\nSorry, where? We only get the header - we don't set it nor modify it. Really, all we were doing there is the old version of GetIPFromRequest.. As you wish.. @buger rebased, PTAL . You can't add start() to TestMain like that, as it also calls reloadLoop. If you do, you must move it out of start.. Also, could you split up the fixes in separate commits? Otherwise, if any of the independent changes needs reverting, it would be much harder. It's also easier to see what code changes are from what fix.. Oh, forgot an important point - having fixes as individual commits will also enable backporting into 2.3. At least a couple of these we want to backport, I think.. I have to run now, but I'll review this tomorrow morning.. @buger PTAL, this is somewhat urgent. @buger rebased. @davegarvey does this affect just the dashboard, or both dashboard and gateway? (would assume the latter, but just to be sure). Something to note is that this is only reproducible with api definitions received from a dashboard (on-prem), not from files (community). This is likely why we didn't catch this with our current unit tests.. @buger's PR had tests, so perhaps they failed to cover certain scenarios?\n@ilijabojanovic is the issue the exact same as before?. Also note that I haven't changed any of the code regarding .String() and strings.Replace to keep this PR smaller. Both libs use UUID v4 and both libs have the same String() implementation.. This is because String() is just hex with some dashes in between. It's easier to just do hex of the whole thing.\nhttps://github.com/nu7hatch/gouuid/blob/master/uuid.go#L171\nhttps://github.com/satori/go.uuid/blob/master/uuid.go#L197. I can do this simplification in a separate PR if that helps, but I don't see what you mean about the length.. Actually, this was my intention all along:\n\nAlso note that I haven't changed any of the code regarding .String() and strings.Replace to keep this PR smaller.\n\nI guess I got mixed up while posting it.. @buger undid strings.Replace bit. Hmm, only one of the three base64 calls actually used that. This is confusing.\nI guess we could use it everywhere, but that will sure change behaviour. It's also odd that we first convert to hex and then to base64. I would assume the hex step is redundant.. Nothing to do - this is on hold until the security releases are out.. I've removed all of the refactoring, so now it's only swapping the libs. @buger PTAL. I realise this is a bit of a mindfuck at the moment - it was tricky to do too - but I think this is important and should simplify things going forward. Keeping our own forks is not sustainable and adds quite a lot of complexity.\nAnd, as said above, keeping our own forks doesn't really help us in any way.. Nothing to do - this is on hold until the security releases are out.. Confirming that the only changes we ever did to all of those libs was just replace foo/* with TykTechnologies/* in the imports.\nRebased on master. @buger PTAL. Also, I found this by chance while looking into https://github.com/TykTechnologies/tyk/issues/613 for 2.3.4. But since this is also a 2.3.4 thing, I figured why not.. Seems not to be our problem: https://github.com/docopt/docopt.go/issues/37\ndocopt.go is also somewhat abandoned, with no commits for over a year. Let's look at this again in a few months. If it's still abandoned, switching to a better flag parsing library (read: non-buggy) might be a good option.. Doesn't look good - another half year and the library is still dead, including that bug. We should definitely switch to another for 2.5.. @joshblakeley is replacing docopt with kingpin, so this will be fixed as part of that.. Note: I had written a \"test\" for this, like:\nfunc TestDRLManagementNode(t *testing.T) {\n        config.ManagementNode = true\n        defer func() {\n                config.ManagementNode = false\n        }()\n        DRLManager.Ready = false\n        startDRL()\n        if DRLManager.Ready {\n                t.Fatal(\"Expected DRL to not be set up\")\n        }\n}\nBut on one hand, this test is of little use (all it tests is a conditional, really) and it can break other tests that depend on the DRL. And if we make the test re-enable the DRL after it's done, it will leak a goroutine since startRateLimitNotifications will never stop.\nSo I opted to not include the test.. LGTM, please squash. The failure looks like a coveralls 504, so not our problem.\nEdit: I can't bypass the failure, so I've restarted the job.. An option makes sense - one that would tell whether or not to ignore X-Forwarded-For when using IP whitelists.\nKeeping it on makes sense not only as a default to not break backwards compatibility, but also in cases where users really want to use a whitelist and control the proxy, e.g. if tyk is behind nginx. In those cases, if they trust their proxy and it always sets this header, it does work as intended.\nBut if tyk isn't behind a proxy at all, it should be off.\nPerhaps this should be a \"is tyk running behind a proxy?\" option. Because using x-forwarded-for in any other scenario is equally wrong - it's a user fooling the gateway about whether or not it's running behind a proxy.. Keep in mind that if middlewares are covered by the 2.x backwards compatibility rule, removing existing fields should hold off until 3.0.. When this is done, let's do https://github.com/TykTechnologies/tyk/issues/623 too and get rid of the headers map.. Regression, marking as such.. Also note that this might end up being a dashboard issue, as in an incorrect use of the gateway API. But it's likely just a gateway regression.. Ah, I am probably to blame for this since I've been replacing non-nil slices and maps with nil ones in early returns. @buger mind if I take this over and look into it on Monday?. @buger how exactly are you reproducing the crash? With the dashboard UI, or with an http request on the gateway alone? I haven't been able to reproduce it with curl.\nAlso nothing seems obviously wrong in the code pointed to by the panic trace.. I followed @kohrVid's steps via the dashboard master on gateway master and wasn't able to reproduce the crash either.\n@buger any more details? or perhaps you'd like to take this back from me, since you were able to reproduce it?. To clarify, adding the key seems to work as per the logs:\nINFO auth-mgr: Reset quota for key. inbound-key=****4efd key=quota-58c95339e1b83206f2ee68cb87ffee9e3ace464b678b34fc75574efd\nINFO api: Generated new key: (****4efd) api_id=-- key=****4efd org_id=58c95339e1b83206f2ee68cb path=-- server_name=system status=ok user_id=system user_ip=::1\n(local and throwaway, ignore the actual ids). I'm running both binaries manually with mongo and redis. Both dashboard and gateway from empty configs.. So it must be something in how the two are set up in the develop env then, likely some config setting. Assigning back to @buger since he's already hit gold.. Maybe it's some sort of broken gateway state, or a bug that appears somewhat randomly when starting up the gateway.. Thanks for the update, @kohrVid. @buger was once able to reproduce the same crash though, which is a bit weird. If either of you encounter it again, please reopen this issue.. If this was confusing to one of our devs, perhaps this \"api id is not a filter\" should be in the docs?. 1.9 won't be out with enough time for 2.4, so marking for 2.5.. I'm not sure I understand what you mean - this is replacing a sleep with a blocking call. I don't think I'd be touching any signal code.\nOr do you mean we should also use the graceful shutdown in hot reloads?. On one hand apologies for breaking master. On the other, I'm so glad this was spotted and we no longer depend on default cases :). This is likely some test firing one of these events that used to fall into the default warning but now trigger a reload, throwing off the manual reload ticker.\nLet me poke around a bit once I'm done with the dashboard PR and get back to you.. @buger should be working now, PTAL. Ilija's OK should still be fine as there is no logic change in the non-test code.. Assuming this is not high-priority and adding to 2.4.. 2.3.4 is a security release that we said should be cherry-picked by tomorrow. I don't think we should delay it further for a non-security bugfix. Perhaps 2.3.5?. What's with the large amount of conflicts?. I believe the current code is correct. As you can see in the godoc https://godoc.org/github.com/patrickmn/go-cache#pkg-constants:\n// For use with functions that take an expiration time. Equivalent to\n// passing in the same expiration duration as was given to New() or\n// NewFrom() when the cache was created (e.g. 5 minutes.)\nDefaultExpiration time.Duration = 0\n\nSo passing an expiration of 0 uses the expiration passed to New, which already uses the gateway config option:\nexpiry := 120\nif globalConf.ServiceDiscovery.DefaultCacheTimeout > 0 {\n        expiry = globalConf.ServiceDiscovery.DefaultCacheTimeout\n}\nServiceCache = cache.New(time.Duration(expiry)*time.Second, 15*time.Second)\nDid you find this bug in practice, or was this something that you found when reading the code?. Friendly ping @etsatsina. Since there hasn't been a reply, I'll assume this was a misunderstanding of the code as I explained above. @etsatsina if you think I'm wrong, feel free to re-open this issue with details. Thanks.. This might sound silly, but wouldn't it be more appropriate to use a middleware (be it JS plugin, coprocess, etc) to do complex logic like this? Even if we added gtf and regexes, there would still be plenty of use cases that the body transform wouldn't cover.. I just tried to reproduce this using only the body transform middleware. Even when copying the user's stuff exactly as they posted it, it still works for me:\n```\n=== RUN   TestTransformNonAscii\n{\n    \"Jyv\u00e4skyl\u00e4\": \"127.0.0.1\",\n    \"Hyvink\u00e4\u00e4\": \"127.0.0.2\"\n}\n```\nSo either this bug was fixed somehow (we don't know what version the user was running), or the bug is somewhere other than the middleware transform. Or perhaps this was somehow fixed in a Go version.\nWe haven't touched the vendored github.com/clbanning/mxj recently, but I'm not sure if it was always vendored.. @lhbotha are you certain it's the body transform? I assume you are because of the screenshots you pasted of the endpoint designer, and because you said the bug disappears if you remove the body transform.\nDid you try the latest Tyk versions, namely 2.3.5 and 1.3.5 of the gateway and dashboard?\nCan you give any more information on the API definition you're using? Are you using any other form of middleware or plugin with it?\nThank you!. Friendly ping @lhbotha - do you have any more information you could share with us?\n@ilijabojanovic will try to reproduce this for our upcoming 2.4 major release, but so far we haven't been able to reproduce it.. Are you positive it was a UI issue? It could be a backend issue that I wasn't able to reproduce.. Thanks for confirming - one part of the codebase less to suspect. Will look at the backend again.. Yeah, what I've come to see is that what the FE sends to the BE is not utf-8:\n$ base64 -d <<<PG5hbWVzPgogICAgICAgPG5hbWU+Snl25HNreWzkPC9uYW1lPgogICAgICAgPG5hbWU+SHl2aW5r5OQ8L25hbWU+CjwvbmFtZXM+ | file -\n/dev/stdin: ISO-8859 text\nOver to @lghiur again, for now :). So the good news is that this is a frontend issue and only affects the endpoint designer. The gateway should be able to handle non-ascii inputs in the body transform just fine - I checked with a unit test.\nSo for those wondering about a fix, for 2.3.X you can simply test your body transform template on the endpoint designer while skipping non-ascii characters in the input - they'll work when you actually configure the template with the gateway.\nWe'll include a fix in the endpoint designer for the upcoming major release.. @lonelycode I understand the dashboard also needs a fix for this - has a separate issue been open for it, or should we keep this one open?. Bump @matiasinsaurralde . > Go 1.8\nHave you tried reproducing the crash with Go 1.7.5? Tyk 2.3.x official binaries are built with Go 1.7.x, so just to confirm that's not the issue.. @penhauer-xiao have you tried the latest gateway release, 2.3.8?. Current naming is a bit confusing :) If you want to modify the existing field, target to 3.0.. You mean version the middleware interface separately from the main gateway versioning? That could let us do these changes faster, but we'd need to keep support for older versions of the interface too, adding complexity.\nShould we then keep support for older versions of the interface once 3.0 is out?. How should the modifications be? Appending underscores at the end until no collisions are found?. Or something like <original-path>-<short-uuid>? I'm thinking that keeping the original path somewhere would make it more intuitive for the user.. Do we know for sure that <original-path>-<tag> will be unique, or are you saying that we should try that first before short UUIDs?. After a crash found by @lghiur, @buger figured out that this can lead to crashes because we end up with an APISpec that hasn't been initialized, i.e. has a nil store and causes a nil pointer panic.\nMoving up to 2.3.6.. Reopening for the backport.. Cherry-picked.. bump @kohrVid . Superseded by #965.. Also note that I split the tiny fix into a separate commit, since we don't want to (nor could we) backport the test to stable.. What's the severity of this, then? Should we aim to release with the bugfix releases in two weeks, or leave for the major releases a couple of months away?\nNot knowing much about policies, this seems bad enough to fix in the upcoming bugfix.. Thanks for opening the issue. I agree that this isn't pressing and shouldn't delay 2.4. At the same time, we don't want to stick with redigocluster for long. Some issues like #520 could be caused by either of these not-very-common libs.. Reopening for the cherry-pick.. Changes themselves look fine, but it would help if you explained (in the commit message) why using the global and not the local value caused a bug.. > which internally handle default values logic.\nUnless it was just a broken default value that wasn't being used properly?. Did you try rebasing? Somehow the initial commits have been duplicated, and this PR also includes commits from master (no idea how that could have happened).\nOtherwise, perhaps squash into a single commit?. Most of the scenarios that @buger explained (except --conf, that's more like an integration test) are already covered by the unit tests, so hopefully it should all be OK.. Rebased after a few dozen commits and some minor conflicts.. Okay, I give up on coveralls actually doing its job.. I assume the uptime tests go away if you restart the gateway?. bump @ilijabojanovic could you confirm that the api definition was indeed deleted?. Does this qualify for a security release? That's only a debug log.\nIn any case, the patch is simple.. @ilijabojanovic when you're testing this, please check that we still have just one of the gateways do the host checks. So, for example if you have three gateways, only one should be doing them.\nEdit: re @lonelycode's comment above, there already is a randomized UUID via HostCheckerManager.Id, so no need to do another ID in each HostData (hopefully).. If it's one of us opening issues, let's use Do you want to request a feature or report a bug? as a label directly to avoid duplicate work.. Also, this code was very probably harmless but could still be a worthy candidate for 2.3.x.. We depend quite heavily on either context package for stuff like session info, so a lot of things would break if I screw it up. Should be easy to test.. Unfortunately, this is impossible right now because of how we're doing HTTP middlewares.\ngorilla/context and context work a bit differently in how the former uses global storage, and the latter uses local storage. In Gorilla, you do:\ncontext.Set(r, Key, val)\n[...]\nval := context.Get(r, Key)\n[...]\ncontext.Clear(r)\nNote that the Clear line must exist, otherwise the globally stored context will be a memory leak.\nOn the other hand, std's context is like:\nr = r.WithContext(context.WithValue(r.Context(), Key, val)))\n[...]\nval := r.Context().Value(Key)\nNote that we no longer have to clean up globals. However, WithContext returns a modified *http.Request, one with a new layer of context.Context with what we need.\nUnfortunately, the way we do middlewares right now, *http.Request isn't passed from one middleware to the next. So it's impossible to have this locally-stored context instead of a global one, unless we first refactor middlewares.\nTo summarise, our middlewares right now are in the form of:\nfunc (m *SomeMiddleware) ProcessRequest(w http.ResponseWriter, r *http.Request) (error, int) {\n    // do work\n    return nil, 200\n}\nWhen they should be:\nfunc (m *SomeMiddleware) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    // do work\n    m.Next.ServeHTTP(w, r)\n}\nNote that the second version can pass a modified *http.Request along very easily. This is the very structure of middlewares that pressly/chi uses. A very simple example:\nhttps://github.com/pressly/chi/blob/35ec20b432d9c9d57c5da99623ebffd172433da5/middleware/request_id.go#L63. Pushing back a milestone since this is blocked by other refactors. @buger this is a big point in favor of moving to something like chi, in my opinion. Not pressing, but should happen at some point.. @matiasinsaurralde was talking about Go plugins as middlewares and how gorilla/context would complicate things for them to be able to modify request context values.\nI had another crack at this and found a way to do it without changing the middleware interfaces nor using reflect tricks. Moving back to 2.4, and PR incoming very soon.. Re v1 vs v4, I asked Martin about this a couple of weeks ago and that's what he said. So he approves of the switch.\nI can't remove the vendored lib yet because another outdated, vendored lib depends on it. Will do it later.. @buger analytics uses v4 only directly, so if anything this should help with consistency.\nThe differences with each UUID version is not in the format, length or anything else. It's just in the sources of randomness. So there should be no conflicts. Almost everyone uses v4, as that's the only one that's really just a random number.\nSee https://en.wikipedia.org/wiki/Universally_unique_identifier#Versions. Ah, tested coprocess-lua but forgot about coprocess-python :(. Also, the fuckup probably happened on a platform where symlinks are not a thing, like Windows. We should make sure it doesn't happen again.. bump @matiasinsaurralde . Thanks!. @buger we probably want to move this to 2.3.6. Also, for this first fix I'll hard-code the timeout to something like 5s. If we want to make it configurable, we should do that later to not drag the extra code and design into the bugfix backport.. Also, the coverage bump is because all this js stuff had near zero coverage. To have another nice bump, we should add a test that modifies the response somehow (a header, etc) and checks it did work. But that's for another PR.. You probably want to swap the author of the commit to be you instead of me :) I forgot to do that.. Not really, but don't want to be confused later on. Just fixed it, will do another code review pass.. Back to one commit, squashed and rebased :). I broke mergeability of this with a merged PR of mine, so I've rebased and fixed conflicts.. More conflicts, this time in config.go - fixed.. Rebased once more.. I was also confused by the original issue - I thought it was about setting up the gateway to listen on HTTPS with an insecure cert.\nCould this PR still be useful, separately?. Removed from the milestone since I assume we won't backport this.\nShould we wait until QA tests this before merging?. Also, I didn't add tests here on purpose - I can't test all of this because none of these funcs are self-contained or small enough to just test the context values easily.\nI'll add proper tests once I factor out the session stuff into separate funcs (e.g. to deal with SessionData uniformly) but I can't do that as long as we mix Get and GetOk.. Typo in the \"bump version\" commit message. We should do that once the dq branch is merged, as this one seems to depend on that.. Sure - let's get the dq one merged first. I'll hold off reviewing this one for now.. This one is getting a bit out of control with the conflicts, so I'll do a squash+rebase on monday. @lonelycode do you want to keep any history? Can I do a single commit like the dq branch?. > I think it can be just query string param instead of new url\nSure. Perhaps ?block=true, defaulting to false.. Also thinking that it would make sense for the endpoint to block by default or always. But not sure if we can do that while keeping backwards compatibility. The current endpoint is always async and it's already shipped in 2.3.x.. > seems more like what you would expect\nI agree, but the old reload code was completely async (it just fired a few goroutines and returned 200) so I don't want to break backwards compatibility in 2.4. Unless that is fine by you?\n\nWhat would be great is somehow seeing a group status of when each node last reloaded so I can confirm that a whole cluster is up to date.\n\nBroke this off into its own issue, since I was writing a wall of text :). Also, a way to test this:\n\nSet up an API with a whitelist, e.g. 1.2.3.4\nSend it a request with a remote address 1.2.3.4:80\nSend it a request with a remote address 5.6.7.8:80 and X-Forwarded-For: 1.2.3.4\nSend it a request with a remote address 5.6.7.8:80 and X-Forwarded-For: 1.2.3.4:80\n\nAll three should go through. The last case was what a client reported as not working.. Backported.. Note: Part of my screw-up was because of the confusing name user_ip. I assume we're OK with having a list in there, and addresses (e.g. ports, domains) instead of just IPs.. Also note that this means that all handlers should be set up in either loadApps or loadAPIEndpoints. I looked at the code and that seems to be true. The only exception is the /debug/pprof/... stuff, but that wasn't being filtered by hostname before either.. Also, @ilijabojanovic when testing this, be sure to test both before and after a reload. The code that sets up the routers is different, but hostnames should work as expected in both cases.. Would this be the same thing as a \"request ID\"?\nWould this be used by us, by users, or both?. @ilijabojanovic have you seen the test added in the PR? https://github.com/TykTechnologies/tyk/pull/715/files. Meant to just comment, not reopen.. Actually, while you're at it, perhaps fix the rest of the strings.Replace(x, y, -1) calls nearby.. Maybe - I don't know the nature of what this code is supposed to do very well, so I kept the suggestion a bit generic :). First match sounds good then. I still think we should be consistent in the other Replace calls if possible, but it's up to someone who knows the code well like @lonelycode.. My context refactor introduced a couple of conflicts, so I took the liberty to rebase and fix them. I assume we're waiting on QA for this?. I agree on reload IDs - I don't want to use times because they introduce too much flakiness. What if times aren't in sync? What if two reloads happened in the same second? Do we use the time when the HTTP GET was received, or when the pub/sub message was sent? etc.\n\nWe keep data for an hour.\n\nI was thinking more along the lines of keeping the last N group reload IDs. That way it's a lot easier to know that we won't be using tons of memory if group reloads get spammed. And for users that won't spam it, keeping e.g. the last 50 IDs will probably mean way more than the last hour.. This isn't urgent and I've got enough stuff to do for 2.4, so pushing back to 2.5 for now.. I completely forgot about reloads that aren't queued... need to fix that and test it.. I've tried two approaches, but so far not happy with any. Not as easy as it might sound.\n\nIf we use a global lock, the reload worker will need to do regular polling, wasting time and CPU\nIf we use a single channel like now, there is no way (that I can think of) to \"attach\" to the queued channel without a race\n\nNeed to think more about the design.. @lonelycode that's the same that we have right now with func handleURLReload(fn func()). A callback func is basically the same, async-wise, than a channel send.\nThat would still leave us with the problem that this would notify goroutines that queued a job, but not the ones that didn't queue one.. I'm not sure I understand what you mean :) Explaining these things on text is hard.\nIn any case, I think I came up with a way to do it with the same worker+channel setup - currently testing it out.. I spent most of the day yesterday playing with non-polling solutions. I did come to one that worked with just one channel (still have it on disk), but it had major disadvantages over this one:\n\nThe endpoint was not testable, as the test could not \"peek\" into the queue like it does now by just grabbing the lock\nTwice the amount of code, and fairly complex for something that should be simple\n\nThe solution I've just uploaded is just a global struct with a sync.Mutex. It doesn't have those two issues, but it does function differently:\n\nThe reload goroutine will poll for work every second, wasting a tiny bit of CPU\nSince we use a polling mechanism, doing a single hot reload might now take 0-1s to start as opposed to ~0s\n\nI assume neither of those are a problem. After all, hot reloads slept for a number of seconds in 2.3.x :)\nOne alternative could be to have the endpoint block only when a hot reload starts because of it, returning 200. If the endpoint was used again and a reload was already queued, it would return a non-200 status code immediately, without blocking. But I feel like this approach leaks internal details and could be confusing in gateways with multiple users firing reloads separately.. Also, if anyone has an idea on how to do it better, please speak up. Martin proposed one above, but I honestly didn't understand it.\nThe idea is to make all this work without polling. To make things clearer, in your proposed solutions please clarify how many worker goroutines you would use and what they would do (mine uses 1, the reload goroutine that polls for a queued reload).\nWe can always swap the implementation later on, since the HTTP API would be the same.. I'll give two goroutines a shot, thanks! This isn't pressing and I'm a bit bored of this so I'll get back to it after the weekend.. @lonelycode you were absolutely correct, two goroutines is the way to go. I've gone ahead and done that in a second commit, to better separate what each of the two commits does. It seems to work well, and it's actulaly not complicated.\nNo extra tests are needed to check that duplicate reload requests still block, as TestHotReloadMany already checks that - see the second commit message.\nAs for QA, it's not particularly easy to test this right now because reloads are executed at most every second. If it were changed to, say, one minute, then it would be far more obvious when reloads are ignored because one is already queued. I believe the unit tests cover these scenarios well enough.. Rebased due to conflicts. Any takers for a code review?. Rebased once more.. (Martin approved in a code review in France next to me). I know doing work in JS is ugly, as is encoding and decoding to base64 twice for each body. But it's the only way I could get it to work reliably without breaking backwards compatibility.\nSome alternative solutions:\n\nOnly do this round-tripping to base64 if the body is not UTF8 to save some work (at the cost of some more code complexity)\nIf the body is not UTF8, make IgnoreBody default to true (body won't be overwritten by js by default)\nTell users to set IgnoreBody to true if an endpoint may take binary bodies\n\nI didn't do the first because I believe JS plugins are already quite costly. Adding this work-around for non-UTF in JSON is probably a drop in the bucket. If we're concerned about performance of these (I think not because then users should use coprocess or Go plugins), we could benchmark and see if skipping base64 would be worth the effort.. Awesome. The added test has ascii, unicode and binary, so we should be fully backwards compatible.\n@ilijabojanovic over to you, no hurry :)\nTo reproduce the original issue, simply have an API set up with a js plugin and send binary bodies (with non-utf8 bytes) through it. Before this, non-utf8 chars should be replaced. After, the body should be left intact. The added test does basically this, but in a more unit-test way.. I thought about it, but I preferred not to in case they function slightly differently to my implementations. Naming them btoa and atob could also mean that users might think using those funcs is officially supported and backwards compatible in 2.4 and beyond.\nAre you positive on those two points?. And of course, there's the fact that b64enc is a much better name than atob :). Do we? As long as we don't document them, I'd assume we don't officially support them. I would hide the funcs from user code if I knew how, but our current JS setup doesn't allow for that (I think).. Ah, sure.. To clarify - if anyone wants to look into atob and btoa, we can reuse those names if we're 100% sure it behaves the same in all situations (e.g. decoding invalid base64).\nWe could always leave it for later, aliasing atob and btoa to b64enc and b64dec.. Ah, good point - I vote for keeping my names then.. Rebased once more.. This branch was ages behind master again, so I rebased and fixed the tests due to conflicts.. :champagne: :tada: . Yes, but unfortunately the middleware code is tightly coupled to APISpec, which is tightly coupled to basically everything. So that will take months, at least.\nIf we ever move these to middleware/, we could get rid of the prefix altogether. For now, making the prefix shorter makes our lives easier.. We're done with all the bugfix releases (for now), so I'll try to get this merged ASAP.. On the plus side, I had a quick look around and it seems to be the last field of its kind. UserData is an empty interface too, but that can be a string or a SessionState.. Actually, this was probably because sometimes we assign map[string]string to it, not just map[string]interface{}. But that's even worse, because it can lead to panics due to type mismatches.. This had been bugging me for months, and it's something that will lead to endless backporting pain, so I think it's important to have in 2.4.\nThere is more work to do, so I think I'll still be able to remove another 200 lines from api.go. But this patch is big enough as it is.. Agreed on 3. That's what I meant by \"added at the beginning of a plugin JS file\".\nAlso, coincidentally in https://github.com/TykTechnologies/tyk/pull/721 I'm adding newly exposed base64 funcs. Maybe we should make then \"official\". Or we can just leave them as is, undocumented, and we don't have to worry about supporting them and backwards compat.. @nickReyn because he believes he found an issue - see https://github.com/TykTechnologies/tyk/pull/1097. I replied there.. We will include this in the release notes, not the docs - closing.. I don't understand - it's the gateway that randomly assigns request IDs when it receives a new request. How could two requests have the same ID?. If this is custom IDs, should this not be done via a middleware/plugin? Or are you suggesting that we add a readily available middleware to make it really easy?. Damn you, travis.. @buger note that I ended up changing all paths, not just all but the first. This is because the current code fills a map with hashes first, and only checks for it later and concurrently. With this mechanism it would be tricky to leave the first unmodified - it would require extra code.\nI don't think we care much either way, especially because this is something the user should fix as soon as possible.. Also, it might not be obvious but the panic found by @lghiur should also be fixed by this. This is because we used to skip API specs that had conflicting paths, and now we don't. It's the API specs that we skip that may be left uninitialized and have weird behaviour.. Fair enough, I'll update the patch. I was trying to go for the smallest diff to help with backporting - not sure how big it will get with these changes.\nI assume that what you mean by Mongo ID is just the same APIID. I don't see any other ID field or anything related to Mongo.\nNote that loadApps already sorts the APIs. It's a bit funny because it sorts them first by host and then by listen path, so I'm fairly sure the former is useless.\nWhy do we sort by listen path? There are no comments and this is an old commit by @lonelycode with a vague commit message.\nDo we want to entirely swap the sorting to APIID? Or do we want to first sort by APIID, look for duplicates, then sort by listen path for the rest of loadApps?. > If we don't have longest-first, we end up with a shorter route capturing the traffic for another route\nGood point, I'll keep that there then. But sorting by host does not work like you expect, as the sorting by path is not stable. I'm not sure why we need to sort by host first - we don't seem to need it, otherwise stuff would be broken already.\n\nWe should use api_id (not id), but since this is an arbitrary string in CE file based mode we can't guarantee that it will be of any specific length.\n\nWhat @buger was suggesting is a way to be consistent about which API will get to keep the duplicate path. I agree that we might chose the wrong one if we sort by APIID - for example if the files use numbers and 123 comes before 2. But I don't know what else we could use that isn't over-complicating things.\nThere's always the current state of this PR, which doesn't keep any of the original paths. I still think it's an OK solution given how we want the users to fix the conflict as soon as possible.\n\nIt might actually be better to just use a counter.\n\nAll of the solutions need counters to remember which duplicate is the first. What do you mean here?. @buger now if an API was already loaded and its listen path wasn't modified in the last reload, it won't get its path modified. PTAL\nI tried to cover all possible scenarios in the test. The change in loadApps is rather small.. Just to clarify, the postfix is the APIID, not a number starting from 1. This is to make the postfixes stable across different scenarios.\n@buger could you approve the changes on here, to clarify that this PR is just waiting for QA?. Reopening for cherry-pick.. (we don't reopen for cherry-picks, my bad). The whole point of loadApps is that it's called sequentially, yes. If it was ran concurrently, plenty of other things would break first. For example, the way we use and then overwrite ApiSpecRegister. That would be a race panic too.. Also note that such a change was already approved by Martin in the issue.. Note that I left out the tests because they heavily depended on stuff that's in master but not in 2.3. So this will need confirming by QA that the backport didn't break the fix.\nThere were just minor conflicts, so I hope that won't be the case.. Err, fuck, why did I close this?. Reping @buger, looks like I closed it by mistake (perhaps I deleted the branch forgetting what it was). Is this the right fix? Looks like more of a workaround to me.\nLGTM if there is no better way to fix it, though.. Please add \"Fixes #749.\" to the end of the commit message and I'll merge.. @matiasinsaurralde by the way, I just realised that you patched a method that has a godoc saying HandleMiddlewareCache isn't used by Python. Is the godoc wrong, or did you patch some code that should never run?. bump @matiasinsaurralde ^. nice - could you send a PR updating it? :). Err, isn't this a dup of https://github.com/TykTechnologies/tyk/issues/749?. Assuming it is a dup.. @buger tests are fixed, FYI. Also, if you have better names, please speak up.. @lonelycode @matiasinsaurralde btw, I just realised that 1666 is only checked, but never set in our codebase. Do we want to remove this magic code? It seems like it has never been used either.. The underlying issue is that the global host checker does work in the background, but we make it do work forcefully too. This may end up in us receiving two event callbacks, if the machine is slow enough to let the global checker work through its sleeps.\nWe should either not run the global loop, or not force it to do the work we want ourselves. Not an easy decision; the former means we don't test the real code as much, and the latter means we have to refactor the sleep logic to not have the test take in the order of 5-15s.\nI'm trying the latter at the moment, figuring out how to make it fast.. :/ I always use the desktop version on my phone and zoom around, because the mobile one is so crippled and awful.... Note that I'm no fan of adding an extra return value to IsRequestValid. But I saw no other way to do this without re-doing the GetVersionData and IsThisAPIVersionExpired calls.. Note that IsRequestValid uses results from GetVersionData elsewhere, such as versionPaths, so that wouldn't work as you described.\nA simpler option that just occured to me is abusing the meta interface{} return value. It's already used only once for a *apidef.EndpointMethodMeta. But only if the status was StatusRedirectFlowByReply. So in the StatusOk* ones, we can just have it be *time.Time.\nI realise this is also not particularly pretty either, but there isn't much we can do now without refactoring IsRequestValid. Right now it acts as a filter for all this data, so we must get it through somehow. I can leave in a TODO and we can tackle this separately at a later time.. @buger done and TODO added. Very similar thing happened (and was fixed) in the JS plugins: https://github.com/TykTechnologies/tyk/issues/351\n@matiasinsaurralde I believe we already discussed this one when investigating the JS one - you can likely just use bytes instead of string for the bodies in the protobuf.. Aprreciated!. Well, it is not a priority until we encounter any that can be proven wrong. I opened this issue precisely because doing an exhaustive check would take some time, as there is quite a bit of code and a few libraries involved.\nIf you do find any status codes that are wrong, or would like to contribute in any way, please feel free to just say so. Otherwise, there isn't any update at the moment.. If you do find any status codes that are wrong, and can describe the scenario here, we can fix them :). Well, if you mean the one coming from the line I gave above, it is already fixed in master (which is the upcoming 2.4). Otherwise, I'm not sure what expired token error you mean in particular.. Wait, wasn't mine already backported in https://github.com/TykTechnologies/tyk/pull/756? What happened here?. Also, the ReturnOverrides commit is duplicated?. Perhaps we should even add a warning on startup if it's enabled, given how problematic it is.. Also note that I removed some config methods and types as they're not actually used at all in their ProcessRequest counterparts.. The decrease in code coverage is sort of expected, as there are dozens of covered lines of code that have been deduplicated.. Err, why? This doesn't change how the software works at all.. I'm slightly uneasy about using mainRouter in the tests, but it works and I see no other best way to test the overall, main router including all the routes and sub-routers.. Also note that I did realise there is a lot of copy-pasting with the auth header stuff, but I want to take care of that in another commit and also deduplicate stuff along with it. Wanted to keep this PR small.. Note that misusing an endpoint will now be a 404 instead of a 400. This is by design, as the route will no longer match unless both the path and the method match the filters.\nI think this is an okay tradeoff to make. After all, this is common practice and these errors aren't common.\nI found no way to keep the old behaviour while still making proper use of gorilla. Perhaps we could have sub-routers for each endpoint, defaulting to a \"method unsupported\" if the method filter didn't match, but we'd be back to extra code for each endpoint again.. I don't understand. What endpoint or line do you mean? And what problem, exactly?. Yes - but the TODO is not about why we have to get both working. The TODO is about me not getting gorilla to do this with a single line. I have to add both routes manually and duplicate the rest of the line. Otherwise, only one of the two versions works.. To clarify, this TODO is in case we figure out how to do it with gorilla in the future, or to look at it again if we ever swap the HTTP router library.. I got confused with your first comment because I hadn't realised the duplication was already in place, and I thought I was introducing it here. Even then, I think the TODO should be there since we want to clean this up eventually.. The only change is that using the wrong methods will now be a 404 instead of a 405. Some examples:\n\nPOST /tyk/health/\nGET /tyk/keys/create\nDELETE /tyk/reload. Of course, existing endpoints should keep on working. I assumed that was always done as part of regression testing.. I'm going to re-do this with our own method filtering middleware, keeping our current 405 status codes.. @buger remind me what the old rate limiter is again - was it RedisRolling or Sentinel? I understand that NonTransactional is the new and recommended one.. And SessionLimiter.ForwardMessage also has a fallback in-memory rate limiter. I'm a bit confused.. More deduplication to follow, including authorization headers and JSON marshaling.. @penhauer-xiao any specific reason why? Also note that these two libraries are vastly different. docopt just handles usage printing and options, while cobra is a CLI app library and has many more features, adding complexity.. Note that I agree that docopt is not particularly idiomatic in Go, but at the moment we're trying to focus on 2.4 features and fixes. We can't be refactoring the codebase forever. We might replace it at some point in the future.. @ilijabojanovic were you able to test this?. I also tested this manually end-to-end with an API definition that had a silly JS middleware that did nothing, and hammering the endpoint with curl. Having main.go do something like:\n\ngo func() {\n    for {\n        println(runtime.NumGoroutine())\n        time.Sleep(time.Second)\n    }\n}()\nBefore the fix, this number would steadily increase past the initial 40-80 number. With the fix, it stays around those values.. Hmm, it seems like leaktest is flakey on Travis due to the tests starting goroutines elsewhere.. I've removed the test for now.. Oh, this is because of the headers PR. Will fix.. @buger PTAL. Related to #778, but not exactly the same as Lua uses JSON instead of Protobuf.. Please note how the reverse proxy code changed. Before, new *http.Handler pointers meant that the context values would get implicitly removed, as they would be different keys in the global map.\nNow, when we do a shallow copy, the local context gets copied too. So we have to manually overwrite it to avoid carrying over all the context values.. Rebased to fix conflicts.. @matiasinsaurralde merged, so let me know how it works with the Go plugins.. Also, I was thinking that we should do something similar with the pub/sub handler - we should have an interface for it.. Sounds good. No reason to keep it hidden in a build tag.. What Go version are you on? Master builds fine on 1.7 and later, as enforced by CI.. You say master builds fine on 1.8, so I really don't know what the issue is here.\nWhether or not a library we use broke backwards compatibility is also irrelevant, as we vendor all dependencies.\nClosing this, as I see nothing to fix.. @buger now that we have config_data tests, I've rebased on master to be extra sure that this change is safe.. @buger as promised earlier this morning, a better version of #796.. I had this saved on disk to send after the HTTP methods pull request, but couldn't send until now due to conflicts.\nAs with the other one, no behaviour changes.. I assume you mean 2.4? This is a regression in master, not stable (thankfully).. done ^. I understand this is a regression only in master, i.e. this doesn't happen on 2.3.x.. @ilijabojanovic please test my PR above - I believe it was simply a config issue, i.e. your template couldn't be loaded.\nBut Tyk at master doesn't error properly, so the template is let through even if it hasn't been loaded. That can cause a panic on a request later on.\nWith the PR, the gateway should give you a useful error. Note that even if the template_path doesn't exist or fails to load, a warning will be shown and it will fall back to templates/default_webhook.json.. There are instances in the gateway where we read the entire request's body. One such example is JS plugins, since the interface requires passing the body as a string. Similar situations happen for coprocess plugins (Python, etc) and body transform middlewares.\nCould you share your API definition details? Perhaps disabling one of those features would be enough to keep Tyk from reading the entire body.. Could you try setting \"do_not_track\": true? Analytics is another case where the body is copied.. I don't think this is configurable via the dashboard at the moment.\nAnalytics copies the entire response's body (when I said \"request\" earlier, I meant response), so I'm afraid I don't see a workaround for you in the current version of Tyk.\nWe'll look into this as part of an upcoming release. Hopefully there's a way to avoid keeping the entire response (and/or request) body in memory unless strictly necessary.. No updates yet, no. As said, I don't think there's a workaround for the stable version so there's not much we can do in the short term. A fix couldn't make it into stable as it would touch too many components and have a rather high risk of breaking stuff.\nIf we have a patch for 2.4 or 2.5, we'll be sure to ask you to try it out :). @ilijabojanovic just to clarify, if you use sequential requests to the gateway instead of N parallel ones, this issue does not show up?. I found this while researching how we read and copy entire request and response bodies.\nThis doesn't fix any issue in particular, but it's low hanging fruit and an easy win.. Fix done, only the documentation remains.. (it never existed nor worked for the JSVM, so this is a new feature for that middleware). @ilijabojanovic please confirm if this PR (which includes the other race fixes) fixes #825 in your tests.\nI'm 99% sure this was the last race causing that. But there could be another one somewhere.. Also, I forgot to mention - -race is happy with the host checker and load balancer code after these two PRs. This is why I said I'm fairly confident that this should fix it.. Darn. Will keep on looking. @ilijabojanovic does this extra change help a little like the other PR's changes, or does it have zero effect?\nNevertheless, this is another fix that we should include in 2.3.7.. You have better results in 830 than in 823?. This is unexpected - I'll have a second pass at this patch.. @buger PTAL\n@ilijabojanovic please test again. @ilijabojanovic I suspected this yesterday, see #836. Please comment there confirming my suspicion.\n@buger please review and merge - all 2.3.7 patches are ready.. (assigning to Martin since it was his TODO). Ah, I'll add a comment instead then.. @buger done, PTAL. Speaking of which, do we have tests of any kind for this? We don't seem to have unit tests in this repo. @buger @ilijabojanovic . Ah, unfortunately the APIs are slightly different. autocert does not have Manager methods to marshal and unmarshal the internal state into a string.. I believe the right fix is to supply a Manager.Cache backed by Redis, instead of using Watch in combination with Marshal and Unmarshal. To confirm my suspicion, I've sent https://groups.google.com/forum/#!topic/golang-nuts/LHEuEUHWnGI.\nIn any case, this switch is less trivial than I thought and the library we currently use isn't bringing any trouble. Moving back to 2.5.. @buger as you said once, Travis overwrites the build logs if you re-start it. >:( Good thing I copied the relevant part.. Something to note too is that the test sometimes takes really long:\n$ gt -v -run TestGetAPISpecsRPCSuccess -count 5\n=== RUN   TestGetAPISpecsRPCSuccess\n--- PASS: TestGetAPISpecsRPCSuccess (0.01s)\n=== RUN   TestGetAPISpecsRPCSuccess\n--- PASS: TestGetAPISpecsRPCSuccess (1.02s)\n=== RUN   TestGetAPISpecsRPCSuccess\n--- PASS: TestGetAPISpecsRPCSuccess (0.01s)\n=== RUN   TestGetAPISpecsRPCSuccess\n--- PASS: TestGetAPISpecsRPCSuccess (1.02s)\n=== RUN   TestGetAPISpecsRPCSuccess\n--- PASS: TestGetAPISpecsRPCSuccess (0.01s)\nGiven how Travis is slower, perhaps it's hitting some sort of timeout with either the RPC server or client.. Note that no tests run in parallel. And what I showed above is running only one of the two.. I had a quick go at using :0, but it doesn't work because we start the server asynchronously, and the GRPC code doesn't expose the final port it will be running on (that I could find).\nI think this is related to gorpc alone, and not TYK_GW_LISTENPORT (but that should be fixed too), since as I showed above it's wonky even if used on its own with go test -run ... -count N.\nSince gorpc starts and stops the server asynchronously, perhaps it's related to how we can't know for sure if the server is up or down by the time we have to use it in the test.. Yes, but when you use :0 it should get replaced with whatever random, available port it selected. It just keeps on being :0, even if I sleep for a long time. I suspect gorpc doesn't expose the final port it got from the TCP listen on :0.. Maybe we should select a really high, random port ourselves and hope for the best :)\nI just tried that (random port between 30k and 60k) but some test runs still take ~1s instead of ~0s. I wonder if it would fix the flake, though.. This is getting worse - it's bit me three times in the past week on Travis.. Well, it just happened on 1.8.3 again now, thanks to our new panic:\n=== RUN   TestGetAPISpecsRPCSuccess\n--- FAIL: TestGetAPISpecsRPCSuccess (0.00s)\npanic: gorpc.Server: [:9090]. Cannot listen to: [listen tcp :9090: bind: address already in use] [recovered]\n    panic: gorpc.Server: [:9090]. Cannot listen to: [listen tcp :9090: bind: address already in use]\ngoroutine 696 [running]:\ntesting.tRunner.func1(0xc42006d380)\n    /home/travis/.gimme/versions/go1.8.3.linux.amd64/src/testing/testing.go:622 +0x29d\npanic(0xcc6e40, 0xc4204b9290)\n    /home/travis/.gimme/versions/go1.8.3.linux.amd64/src/runtime/panic.go:489 +0x2cf\ngithub.com/TykTechnologies/tyk.startRPCMock(0xc42072af48, 0xdd20a8)\n    /home/travis/gopath/src/github.com/TykTechnologies/tyk/api_definition_test.go:325 +0x1fb\ngithub.com/TykTechnologies/tyk.TestGetAPISpecsRPCSuccess(0xc42006d380)\n    /home/travis/gopath/src/github.com/TykTechnologies/tyk/api_definition_test.go:375 +0xe6\ntesting.tRunner(0xc42006d380, 0xe64d20)\n    /home/travis/.gimme/versions/go1.8.3.linux.amd64/src/testing/testing.go:657 +0x96\ncreated by testing.(*T).Run\n    /home/travis/.gimme/versions/go1.8.3.linux.amd64/src/testing/testing.go:697 +0x2ca\nexit status 2\nFAIL    github.com/TykTechnologies/tyk  0.509s\ngo test errored. Confirmed by @ilijabojanovic.\n@buger thoughts on backporting this to 2.3.x? The patch would be simple. We could include it in 2.3.7 or 2.3.8.. Should we include any details from the hosts? For instance, if hosts are down with a 403, it might be useful for the client to know that. Or is hiding this from the user fine, since the gateway operator still has access to the details?. Cool, will work on a patch then. I'll let either of you decide if we should promote this to 2.3.7/2.3.8.. Upon closer inspection, this will need some non-trivial refactoring to \"bubble up\" the error. So backporting would be a pain in the arse.\nSince this is not a regression nor a critical bugfix, I'd say let's leave it for 2.4.. I'll revert that part and keep the current behavior then.. @buger PTAL - I've joined the two routes instead.. You're talking about the JSVM, correct? Could you please clarify that in the title and/or description?. Examples of JS plugins taking 2 and 3 parameters are in plugins_test.go, see the two const js = ... lines.. @buger flaky RPC again, now green. Also, I went for rawlog instead of rawprint because the output still goes to the log output, which is not always stdout/stderr.. Have you had a look at the gateway logs? Especially when you use the API or trigger a hot reload.. If it's a custom event, how is it fired? By a plugin/middleware/coprocess?. We could also do this globally for all JS code, similar to the discussion in https://github.com/TykTechnologies/tyk/issues/739.\nIn other words, a JS file that can be loaded once and whose funcs can be called by all JS VMs (Otto), be it from JS plugins or from virtual endpoints.. Now green at last :). Would this info only contain start-up status? I assume for each of redis/dashboard/RPC, we would have a \"connecting\", \"connected\" or \"error\" status - the last one potentially with extra information.. Also, I tested this manually with @ilijabojanovic's reproducer:\n<Order>\n<complete>true</complete>\n<id>5</id>\n<petId>0</petId>\n<quantity>0</quantity>\n<shipDate>2017-07-03T08:21:06.026Z</shipDate>\n<status>placed</status>\n</Order>. Also, the url rewriter alone is not the cause - I could not reproduce the issue with a unit test of it, and the reproducer logs show that the URL rewriter ended up with the correct URL. But it's the RetainHost stuff that gets the reverse proxy to then add the same path again. I don't know why we have that logic there. I need to talk to @buger or @lonelycode to figure out why it was needed in the first place.. I thought about it, but I really don't know. The file that that PR is touching seems unrelated to this bug, as far as I've been able to tell. Maybe we should ask Martin to have a look at the two, since he wrote most of the code.. > Are there any changes we can use somehow, even potentially?\nWell, some of the backported commits here are fixes, so they'll probably be useful. I'm not sure what you mean by that.\n\nAlso User-Agent line looks supricious, will it still be proxied?\n\nIt will be proxied only if the original request had one. This just prevents the reverse proxy from adding Go's user-agent if none was set, as net/http does by default. That's why I said it updates the user-agent bug (but doesn't fix it - these lines will need changing to fix it).. The drop in coverage is probably because testHttp used to do more in its calls of initialiseSystem. But if we want to test initialiseSystem properly, we should do it separately in its own test.. @buger PTAL\nI ran both go test -race and go test -tags coprocess -race with large counts locally and hit no races. I'm fairly confident we don't have any in master with the current test coverage.\nOf course there can still be some flakiness - if that happens, we can take care of it as it would likely be an actual bug.. Typo? :). I was ready to point that out ;). Also, the simpler logic should help with figuring out the right fix for the RetainHost stuff.. -race flake, reported above and restarted the build.. Fixed.. Commit by commit. The original commits also reverted each other like this.\nI preferred to not squash to make it easier for us to know what was backported in the future.\nWill fix conflicts when I'm back on my laptop.. Conflicts resolved.. I could not reproduce, not with a unit test nor a web browser. Did your request URL path have a trailing slash, like /tyk/apis/1/?. I meant /tyk/cache/1/ by the way - I guess that was a typo in your original issue.. That's not a valid endpoint, at least not in the gateway @ilijabojanovic. Any pointers?. @ilijabojanovic please re-run the cache test with this fix. @ilijabojanovic please run the tests again with this fix. Also, the regexes fucked with the markdown formatting here - check the plaintext commit message instead.. @buger this is what I was talking to you about yesterday, when I said I could simplify config_data handling quite a lot.\nNote the object format change in the JS code. Other options include:\n\nManually re-do the boxing of the object as {config_data: {foo: bar}}\nAdding it at the end to support both old and new ways, like {{foo: bar}, config_data: {foo: bar}}\n\nI'd rather keep it the way it is now, though. Not sure if it's best to change this (while documenting the change) in 2.3.7 or 2.4. As of 2.3.6 neither is documented, so we could do it in 2.3.7 as the \"documented way\", or change the official behavior in 2.4.. Went with the first option of re-boxing the JSON object for backwards compatibility. Left a TODO for 3.0 or later.. @matiasinsaurralde I didn't know you were going to do that. Should I close this?. @matiasinsaurralde said that the coprocess tag will disappear, so this will be done without the extra machinery.. @matiasinsaurralde are you going to finish this soon? This touches quite a lot of files, so conflicts are going to be a bit of a problem.. bump @matiasinsaurralde . friendly ping @matiasinsaurralde - we want to freeze for the release soon, so you should get this finished the sooner the better.. Too late for 2.4.. I don't see a feature request - this looks more like a question. Have you seen the community forum? That's where questions should go.. Closing in favor of https://community.tyk.io/t/oidc-configuration/1732.. What's the root problem here? Does a user want to use different header names, such as ones that mention their product/company name instead of Tyk?. Thanks, will look into it when I'm back.. Worth noting that I wasn't able to reproduce the flake. It likely happened on Travis because those public machines are very busy and the tests don't get as much CPU time as on my laptop, thus the timings can vary a lot more.. Bump @buger?. The title is too broad and confusing. HTTPS scheme support where?. Copy paste mistake :) thanks for noticing!. friendly ping @buger :). To clarify - the bug was introduced when backporting this feature to stable. We overlooked the situation with the pointer to the map.. This bug only affects stable, and it was merged. GitHub won't close unless there's a merge in master, but there won't be one. Closing manually.. @ilijabojanovic found that this PR doesn't actually fix the issue - closing.. This is surprising - our unit tests never set this bson ID.. I just tried to reproduce this on both 2.3.7 and master following these steps:\n\nWrite apps/app_sample.json (content below)\nStart gateway\nOpen browser to http://localhost:8080/test/ (it works)\n\nAPI Definition:\n{\n    \"api_id\": \"1\",\n    \"org_id\": \"default\",\n    \"definition\": {\n        \"location\": \"header\",\n        \"key\": \"version\"\n    },\n    \"use_keyless\": true,\n    \"version_data\": {\n        \"not_versioned\": true,\n        \"versions\": {\"Default\": {\"name\": \"Default\"}}\n    },\n    \"proxy\": {\n        \"listen_path\": \"/test/\",\n        \"target_url\": \"http://httpbin.org\",\n        \"strip_listen_path\": true\n    }\n}\n@marians could you please check if restarting the gateway is any better than issuing a reload? What about writing the file to disk and restarting the gateway, instead of inserting the API definition via the gateway's own API?. I just tried again, this time even installing httpie and strictly following the instructions.\nThis was on 2.3.7, with the default config as written by tyk --conf=tyk.conf when that file doesn't exist, and with apps/ empty.\nNote that you do get a Version information not found, but that's a 403, not a 404.\nAlso note that reloads aren't blocking, and the gateway limits the amount of reloads - as of 2.3.7, that's one reload every ten seconds. If multiple reloads are issued, a single one gets queued and the rest are ignored.\nSo have you tried waiting for 10 seconds after you issue the reload? I too got a 404 in a script that immediately pinged the API after issuing a reload. But once the script was finished and I pinged it again a few seconds later, it was already up.\nSee https://github.com/TykTechnologies/tyk/pull/717 too - that could be helpful. Also note that the upcoming release, 2.4, lowers the throttling of reloads from 10s to 1s.. Since I wasn't able to reproduce, and it's been a week, I'll move to 2.4 under the assumption that this was a reload issue and not an API definition issue.. Without more information or feedback, I'm going to have to close this assuming that it was a reload issue. @marians if you think I'm wrong, please re-open the issue with details. Thanks.. @c1784497 when you say Add meta data key:value pair, exactly what do you mean? How did you add it?\nCould you share your API definition?. Please note that there are two issues here - I'm not convinced that the regex error and the interface panic are directly related.\nIn any case, I've found the cause of the panic.\nThe good news is that this is fixed in master, in a way. In stable, MetaData is a map[string]interface{}, but in master it's a map[string]string.\n@c1784497 I assume you put in there something like \"meta_data\": {\"contact\": 0}. Is that correct?\nThat would explain why it was float64 instead of string - that's what encoding/json decodes a number to interface{} as.\n@buger this leads to a question - should we support just strings, or any type? In other words, should we support \"contact\": 0 too, or just \"contact\": \"0\"?\nIn favor of doing it is that nothing other than a string ever worked. So we do know for a fact that noone relies on it.\nAnother thing in favor of it is that these are used in strings, like headers. Not all JSON types can be stringified easily. What about objects? Not even numbers are safe - if they're floating point, which all JSON numbers are, the string might be different (e.g. missing zeros, rounding, etc).\nOne point against only supporting strings is that the docs seem to say otherwise: This field is a string key/value map that can store any kind of information about the underlying identity of a session https://tyk.io/docs/concepts/session-meta-data/\nWhen I read that, any kind of information says any type to me. We should clarify that values can only be strings, if we want to enforce this.. I forgot to add - I clearly think we should only support strings here. It makes the JSON config easier, it makes the docs simpler and it makes the code less tricky. And I see no reason to support other types like numbers and objects.. As to the regex error, this is a regex compiled directly from your API definition. So I can't help you further unless you provide your entire API definition. But it seems like the issue is there, unless there's a bug in the code that I'm missing.. Friendly ping @c1784497 - could you confirm what meta_data JSON object were you using?\nAnd also see my comment above about the regex error, which I believe is unrelated and due to an issue in your API definition.. After some discussion, we've agreed to just make the code work as the docs describe - at least, for 2.3.8. The docs say string key/value map, so only strings are allowed.\nIn other words, use \"0\" instead of 0.\nThese values are only to be used in headers, and headers are strings, so any other type makes little sense.\nI'll submit a patch for 2.3.8 to avoid the panic, though.. Merged.. I'm not sure I understand the bug. Could you provide complete steps to reproduce it, including the API definition and what requests were made to the gateway?. So just to be clear, do you want both /someendpoint and /someEndpoint to work and either doesn't (when you declare the two), or do you just want one of them to work and it's wonky?. You mean as well, or instead? If we remove both, then that option would do nothing at all. These are its only two uses.. (we figured it out privately in chat). Merged.. @buger once this is merged, I'll do another PR adding a regression test on master too.. I forgot to add; @lonelycode was suggesting that the gateway should in some way tell the user what version was selected. Otherwise, the API user might not have a way to know what version they're using.\nOne way to accomplish this would be via a X-Tyk-* header. For example, when a default version is set up like in the config above and the gateway falls back to it , it could set X-Tyk-Default-Version: v2.. > Could we just say if they leave the default version unset, it defaults to the latest version of the API?\nNot in 2.x. That would be breaking backwards incompatibility. I belive right now it picks the first version, not the last.\nHowever, we could add a way to specify the last (the latest), such as \"default_version\": \"latest\". Of course, if \"latest\" actually existed as a version, it wouldn't use that instead.\nThere's always the option of doing what you propose in 3.0, but that would mean waiting until 3.0 to provide any way to do this. Which I think is not a good plan.. Wow, go vet -tags foo is broken if you add -v. RC bug uncovered? :). Yup, release blocker bug in 1.9 found: https://github.com/golang/go/issues/21188. We had (and fixed) a similar issue before: https://github.com/TykTechnologies/tyk/issues/855\nI didn't want to refactor all this code in the stable release, so instead I did a smaller fix. It appears like it wasn't generic enough - I can see how it wouldn't work if the old and new paths only partially overlap.\n2.3.8 is packed with quite a few important fixes already, so I'm not sure if we can get to this before 2.4. I'll see how we are on time on Monday.. You're right - this auth middleware is missing the code to fire the event. Should be a fairly easy fix.. Happy to review a patch!\nWe currently have no tests that run an entire auth middleware and check that they sent an event. However, mw_hmac_test.go does have tests that set up an http middleware chain and run a request through the HMAC middleware in various scenarios.\nIt should be possible to add a check that EventAuthFailure was sent if and only if the auth failed.. You don't need to mock AuthFailed - what it does is fire an event. That event goes to whatever event handler an API spec (the internal structure for an API definition plus extra info) has registered.\nA good example is this, from the host checker tests: https://github.com/TykTechnologies/tyk/blob/master/host_checker_test.go#L88\nBasically, you want a test that has an API spec with an EventAuthFailure handler, and then use it in a HMAC middleware and trigger certain types of failures - and verify that you got the event for each one of them.\nI realise this isn't straightforward. If you don't have the time to work on a test, or if you give up at some point, I can do the test and keep your authorship of the fix itself. But of course, if you're willing to do both, I won't stand in the way :). Hi @othane!\nThis patch missed 2.3.8 just by a couple of weeks. However, a couple of important issues have come up and we're going to do 2.3.9 soon. Since this is a small patch and an easy win, we've included it in the release.\nI can't give an ETA, but for sure it will be shipped much before 2.4.. To clarify - I already did this change in master because the goroutines seemed pointless. I fixed the leak there by chance.\nI verified the leak by adding a periodic print of the length of the global context map. Before the fix, hammering the gateway resulted in it growing at the pace of 100 elements a second.\nAfter the fix, it stayed under a handful of elements, the number of concurrent requests I was sending it.. Merged.. The other PR, #758, called runtime.LockOSThread() in a very clear new goroutine. This one, however, is not a clear new goroutine, nor does it call UnlockOSThread.\nHow do you know that you're not locking the main goroutine - or another long-lived goroutine - to the OS thread? Have you looked into this?. Also, doesn't this actually fix https://github.com/TykTechnologies/tyk/issues/969, the new issue?. We spoke privately, and we agreed that it would be best to separate the python GIL initialization work into its own, short-lived goroutine - which can then use LockOSThread. That way, it's easy to prove that we're not locking anything else to the OS thread.. Sounds good - I'm mostly concerned about regressions, given how this code is subtle and it even took us two tries to fix it fully. As long as the test makes it into 2.4, we're good :). @buger PTAL, the CI failure was a flake (https://github.com/TykTechnologies/tyk/issues/987).. This is sort of expected, as Go's net/http canonicalizes all headers when setting and getting them.\n@matiasinsaurralde this is why I was mentioning that we should have used setter and getter funcs too - otherwise req.Headers[\"foo\"] and req.Headers[\"Foo\"] aren't the same, when they should be.\n@bitsofinfo I'm not sure if we can fix this inconsistency while staying backwards compatible. In the meantime, I believe you can adapt your code to this behavior. In particular, always use Capitalized-Strings as your header names and it should work fine.. @bitsofinfo indeed they should be case insensitive - as said above, I think this was an unintended design error. Would like to hear @matiasinsaurralde's opinions before we milestone this.. is this fixing https://github.com/TykTechnologies/tyk/issues/974?\nAlso, don't we want this on master too?. I believe @buger proposed this internally already, as an extension to config_data.. Note https://github.com/TykTechnologies/tyk/issues/509 - we should plan ahead for a future where Tyk's hash function is not limited to murmur3.\nIn that scenario, we should probably make the high-level \"hash\" function available in the JSVM, saying that it's the same that Tyk itself uses at the moment, but without ensuring that it's always murmur3.\nUnless murmur3 is particularly useful in JS for some reason?. Found on Travis CI on an unrelated change. Not linking because the log will be overwritten.. > which will sort by both params\nThis is the same as making the second sort stable. But my main point here is why did we ever need sorting by hostname in the first place. I can't see a reason why it would be useful.. Yes, of course - but how is the sorting relevant at all. As said, the hostname matching should be an exact match, not a prefix match.. Can be easily spotted: https://github.com/TykTechnologies/tyk/commits/release-2.3\nShould be an easy fix - assigning to @buger since he broke it. Yep, this is the same fix that we did back in January in the master branch.. Though, I wonder, does this matter? I thoght we were building 2.3.X with Go 1.7.X for the official binaries. Bumping to 1.8 for a bugfix release seems unnecessary.. I'm a bit confused by this fix. Why is log.RawFormatter and log.GetRaw necessary?\nThe reason behind the breakage is this regression:\ndiff\n-               io.WriteString(j.Log.Out, call.Argument(0).String())\n-               j.Log.Out.Write([]byte(\"\\n\"))\n+               rawLog.Print(call.Argument(0).String() + \"\\n\")\nYou've made the JSVM use a global, but I avoided that on purpose because it was racy. You're just lucky enough that nothing else uses rawLog just yet - but once more stuff starts using it, data races will pop up.\nAnd, of course, this bit of code in the test doesn't use buf anymore, which means the ouptut goes to the terminal:\nvar buf bytes.Buffer\njsvm := JSVM{}\njsvm.Init()\njsvm.Log = logrus.New()\njsvm.Log.Out = &buf. > Regarding tests output, I will push a fix which uses local RawLog variable, same as Log one, so it will write to the buffer in tests.\nWhat about the races? As long as this tests modifies the global loggers, it's bound to be racy sooner or later.. @bitsofinfo given that this is an enhancement, it doesn't automatically qualify for a bugfix (patch) release. We will try to include this with 2.4, which is the upcoming major release.\nOf course, if that can't wait, you're free to work on a fix and try it out by building from source - it shouldn't be too complicated. And you could also open a pull request to upstream the fix back to this repo.\nHope this helps.. ping @buger. You were able to write the tests - awesome :) will be reviewing this now.. Thanks again!. 2.3.8 is going out any moment now, and it includes many important fixes. We've been testing it for a bit already though, so this change isn't critical enough to warrant delaying the release.\nIt will for sure be included in 2.4, which should come out in the next month or two.. Please use reactions like thumbs up instead of ading +1 comments - the latter will just send notifications to everyone and make the thread longer to no benefit.. Thanks for the report - will look into this straight away.\nCould you provide your gateway config and the API definition you're using?. Okay, so the issue here is simpler than I thought.\nThe cause is the regex ?wsdl - it's not a valid regex. If you try this with Tyk built from master, it will error on startup with:\npanic: regexp: Compile(`?wsdl`): error parsing regexp: missing argument to repetition operator: `?`\n\nIn other words, you probably want \\?wsdl.\nThe reason why 2.3.x panics with a more confusing message is because the stable version sometimes doesn't check for errors in user-provided regexes. The upcoming 2.4 version does, hence the immediate crash with a proper error message.\nI'm going to close this, as this is an issue in the API definition and the confusing panic has been addressed in the upcoming 2.4. Thanks!. @bitsofinfo this was an oversight in our own code - and I believe the fix has already been merged for the .3.8 releases.. In https://github.com/TykTechnologies/tyk/releases/tag/v2.3.8, you can see it under the dashboard changelog: Fix API spec validation for URL containing dot . symbol.. @bitsofinfo thanks for the quick report :). @lonelycode a few TODOs remain:\n\nHow do I merge IsInactive? True if any of them are true, false if any of them are false, whatever the first policy has, whatever the last policy has?\nShould coprocess.SessionState be updated exactly like the internal struct, or in a different way?\nIn the JWT code, now only the first policy is used. Is that correct, or should it use all policies somehow?. Also, I kept the merging of ACL since it's fairly simple, and not much work on top of the work that is already being done. I doubt that merging a few maps will be a noticeable amount of work on top of everything else that is being done.. @matiasinsaurralde yes, but the question is whether just adding the new field is enough. Note that the new field deprecates the old one, so I was wondering if something else would be better, like removing the old field. I don't know to what extent we're keeping backwards compatibility in the coprocess stuff.. @matiasinsaurralde please ensure that I did everything correctly with coprocess. I struggled to update the bindings so I improved the docs a little bit.\n\nOtherwise, this should be ready for a review now.. The priority here was unblocking Laurentiu, which is why I didn't include tests at first. I can work on them later this week.. @buger see the added tests, they cover all possible combinations and errors. I've also kept all changes in separate commits to simplify review and the history.\nDon't squash-merge, as this would all make for one huge commit.. He's missing the dashboard bit, since it has a thin layer for this stuff that needs updating. Working on that now.. (that was a rather complicated rebase, nothing interesting to see). We were looking into this with @ilijabojanovic early last week, and we got sidetracked by support and the more important regressions. Getting back to it now - I was asking him for more info last.. I've touched this code before, should be simple enough.. (note that X-Real-IP won't work just yet, that'd be #1019). @buger we decided to try again today, under the assumption that it was buddy being flaky yesterday. so still ongoing.. Thanks for testing!. (found this while working on the other IP stuff PR, hence the reviewers). @buger this is very similar to your fix for stable, but smaller and having in mind other cleanups that happened in master since.. Note that we probably could refactor this to avoid the silly http server for internal use. But for now, this isn't too much added complexity and does the job. Once we have the test, if we have time, we can rework it.. Yeah, I forgot to run the coprocess tests as usual :). @buger now green. This is a dumb question, but I assume this doesn't happen if you have 2 but deactivate 1? What if you have 2 and deactivate both?. Found the fix to this by chance, so assigning to self.. Also, this regression was introduced by me in this refactor: d5401d913c4c45e90d362be05cbcba2f7e433138\nThe func used to receive the object and return it too, and I removed the return. But this one slipped past me (and we had no tests).. Thanks, will have another look.. Huh, I just hit an out-of-memory crash. At least the original issue is fixed.. @ilijabojanovic you have an issue in your config - you want \"transform_response\": [, as \"transform\" is a path transform, not a response one. With that fix, it works fine here.\nNevertheless, the setup you had made Tyk crash in a bad way. Please open a separate issue about it.. (also, yes the names are quite confusing - it's probably an artifact of the order in which these features were introduced). Please squash-merge, there are quite a few fixup commits. @buger we already merged the PR, so this should be closed I think (or at least kept in 2.4 so we add the docs for it).  JSVM middleware plugins that act on the response object. Oh, and of course, please fix the conflicts :). The current default build of Go has no special build nor runtime dependencies besides just Go and the Go vendored libraries. So yes, we definitely don't want to depend on libjq by default.\nWe have a similar situation with our use of Python and Lua via CGO, which depend on the python and lua libraries to be installed at both build and run time too. For those, we use a coprocess build tag. I would prefer to not add more build tags. Perhaps we could merge all of these CGO and dynamic linking dependencies into a single build tag, and call it something like extradeps or extended.\nI'll leave that call for @buger and @matiasinsaurralde.\nRegarding the library fork, could you point us at the pull request that has yet to be merged with your fixes?. Also see the CI failure, which is because of the missing library. We install other stuff on CI already, for example for Python.\nAs said before, we need to make a decision on the build tags before merging this. We can't have the default build mode depend on an exotic library to be installed in the system.. As explained in the forums, this is a dup of #938 and the bug was fixed in 2.3.8. Please update to the latest version.. (this works fine on stable). This is indeed a gateway regression of some sort. The underlying issue was that on stable, if we failed to update a key, we silently returned 200, while on master, we return a 500.\nstable:\naddUpdateErr := doAddOrUpdate(keyName, newSession, suppress_reset)\nif addUpdateErr != nil {\n        success = false\n        responseMessage = createError(\"Failed to create key, ensure security settings are correct.\")\n}\n(note how code isn't set, so it remains at the default 200; success = false doesn't set the code either)\nmaster:\nif err := doAddOrUpdate(keyName, &newSession, suppressReset); err != nil {\n        return apiError(\"Failed to create key, ensure security settings are correct.\"), 500\n}\nTo make this more obvious, the actual cause of the error is seen on both stable and master:\nERROR api: Could not add key for this API ID, API doesn't exist. api_id=22ad7a2b8b194ba374a389e1e3682c95 key=638fdf169f7342f140612b7b6b01b99a org_id= path=-- server_name=system user_id=system user_ip=--\nWhat causes the error is that the key is attached to an ApiID that isn't known by the gateway, i.e. that isn't in the global apisByID map. I'm not exactly sure why this would happen. Perhaps because the Dashboard stores the api definitions on its own and the gateway doesn't have them?\nEither way, this seems like lousy coding in stable that we fixed in master without realising. And it seems to me like the error is real and should not be ignored. @buger thoughts?. This is a separate issue - please file a new issue in this repo.. This was a configuration issue; master isn't broken.. If I remember correctly, @matiasinsaurralde raised this following a user's request. Matias, you should describe this feature to the user, at least until we have proper documentation for it in place.\n(do we have documentation for it now? should we ticket that up?). I don't like it either, but I don't see the problem with reverting back to stable behavior on master as a temporary measure.. You're technically right, which is why I opened the issue above. But in practice, stable works and this is a separate issue, so I was simply trying to unblock the other, larger issue.\nI'm going to close this for now. I'll look at the regression again, but I'm not sure when we're going to be able to unblock multiple policies.. Nope. See:\n// Serve starts rpc server and blocks until it is stopped.\nfunc (s *Server) Serve() error {\n        if err := s.Start(); err != nil {\n                return err\n        }\n        s.stopWg.Wait()\n        return nil\n}. @buger here is take two. Now that it uses a random port, I'd be extremely surprised if it still errored the same. But I won't say \"won't happen again\" because this is the third time I've fixed this issue.. @ilijabojanovic does this happen after you trigger a reload? do you have any api definitions loaded in the gateway?. See above - have you tried doing a reload before the first key generation request?\nWhat about waiting for one minute before doing the first call, in case the issue is that we're not waiting for Redis to be ready?. This is working as intended, sort of. The thing is that this was an automated test, trying to generate a key and using it immediately after the API had been created. A reload had been triggered, but not a blocking one.\nHence, the reload may not be done when the request comes in - which is the case here - and the request fails in a funny way.\nThe fix is to use a blocking reload as introduced in master, i.e. /tyk/reload?block=true. Adding a one-second sleep also worked, but that's a bit hacky.. It's a bit silly that the script takes a host and not an address. We could make it accept both localhost and localhost:3000, so that you may optionally give the port too.. It's true that the flag is ignored since last december, and it's not clear why. I'll send a patch.. Sounds like the right fix is to have the gateway create the dir if it doesn't exist - then we don't need to worry about shipping empty directories.. Silly me, this is a dup of #987 because the branch was too old.. This could help with a panic test flake that @excieve found on Buddy.. (steps to reproduce/test are right there in the commit message). Before this change:\n$ go test -run TestListener -v -count 50\n=== RUN   TestListener\n--- PASS: TestListener (0.36s)\n=== RUN   TestListener\n--- PASS: TestListener (0.29s)\n=== RUN   TestListener\n--- PASS: TestListener (0.27s)\n=== RUN   TestListener\n--- PASS: TestListener (0.28s)\n=== RUN   TestListener\n--- PASS: TestListener (0.28s)\n=== RUN   TestListener\n--- PASS: TestListener (0.27s)\n=== RUN   TestListener\n--- PASS: TestListener (0.27s)\n=== RUN   TestListener\n2017/09/05 16:17:57 http: Accept error: accept tcp [::]:37363: accept4: too many open files; retrying in 5ms\n2017/09/05 16:17:57 http: Accept error: accept tcp [::]:37363: accept4: too many open files; retrying in 10ms\n2017/09/05 16:17:57 http: Accept error: accept tcp [::]:37363: accept4: too many open files; retrying in 20ms\n2017/09/05 16:17:57 http: Accept error: accept tcp [::]:37363: accept4: too many open files; retrying in 40ms\n2017/09/05 16:17:57 http: Accept error: accept tcp [::]:37363: accept4: too many open files; retrying in 80ms\n2017/09/05 16:17:58 http: Accept error: accept tcp [::]:37363: accept4: too many open files; retrying in 160ms. @buger this will greatly help with support queries too, as these errors are completely ignored at the moment, leading to weird crashes/errors when a request comes in.. Would be good if we could get @ilijabojanovic to run his end-to-end test suite on this PR, just in case.. I agree with @buger - not sure this is the right fix (without having reproduced the issue and tested this fix, though).\nThe cleanup is nice, however. This should be merged even if it's not a bugfix, as long as it doesn't break override_defaults.. Also, answering @lonelycode's question on whether this could break the hot reloads code - I doubt it would. That code sits on top of this, so I would be surprised. And it has decent tests too.. I just realised that this is patch is against stable - so my comment about the cleanup still being desirable would apply if this was done in master, obviously.. (made the PR an \"updates\" instead of \"fixes\" since other things need doing). Also note that removing the field from the config is fine; the JSON parser doesn't error on unknown fields.. I'm a bit surprised by this, since we seemed to agree on option 3 - Hide this stuff as in step 2, and tell user embed all needed functions right into the middleware.\nTrying to keep backwards compatibility is a good idea, but I'm not sure that this would be enough. If people just upgrade, js/tyk.js would also include our core JS stuff - potentially with old code, given that they'd keep the same file if they modified it.\nSo the old code could be a problem. But even if it's the same core Tyk code, we would be loading it twice. We would have to ensure that it won't break anything.\nThat's why I was going with the route of telling people to just load their global code from each of the JS files. After all, there is no global state available, so having a global JS file is even unintuitive. Whatever we do, there's no way to keep full backwards compatibility, as it will require some degree of action from the users.. > Having an old code in Tyk.js is not a problem if we first load tyk.js and after our internal code: it still will use newest code.\nThat is still assuming many things - that the overwrite will be clean and that, for example, the user's code didn't depend on the core code at all.\nI propose then that we keep the option, and tell people to only keep their custom code in js/tyk.js when upgrading to 2.4. I don't think that's backwards incompatible - we have required config/setup changes in major releases before, and I don't think it's a lot to ask.\nI'd still load our core first, because otherwise it would be impossible to use it in js/tyk.js, potentially breaking people's code.. @buger done, added test. once this is merged, the docs will need updating and the release notes will have to tell people to either remove tyk_js_path from the config if they didn't add any code, or to just keep their own code in the file if they do (removing the old TykJS stuff).. I just realised that the release scripts mention the file - will update them too.. Rebased.. @ilijabojanovic this went under my radar somehow, sorry.\nIn any case, this is sort of expected, given the error:\ntyk-gateway_1    | time=\"Oct  3 10:39:02\" level=error msg=\"Could not load user's TykJS: open ./js/tyk.js: no such file or directory\"\nIt's true that we could somehow avoid the crash, but it would be a nasty error when loading the API definition one way or another. The root of the problem is that you're pointing the path to a file that does not exist.\nYou could argue that I should make the error bubble up better, but that would be a major refactor of how APIs are loaded. At the moment, errors are not handled at all and most of these issues are let through.. ping @ilijabojanovic - have you seen my comment above?. fixed, thanks. I've never liked this func, and finally got to redoing it.\nNote that this brings it back to almost the same as net/http/httputil's, from which this one forked. But it's slightly different:\nfunc singleJoiningSlash(a, b string) string {\n        aslash := strings.HasSuffix(a, \"/\")\n        bslash := strings.HasPrefix(b, \"/\")\n        switch {\n        case aslash && bslash:\n                return a + b[1:]\n        case !aslash && !bslash:\n                return a + \"/\" + b\n        }\n        return a + b\n}\nIn other words, in httputil's, foo// + //bar results in foo///bar while in ours it results in foo/bar. We deduplicate all slashes, they just deduplicate one.. The httptest thing seems like a release blocker to me, but otherwise this looks okay to me - you probably want another set of eyes as well, like Leon's.. Also, I just noticed no tests? I realise that a plugin test would be a nightmare, but you could decouple the plugin loading stuff from the actual important code and test that part.. I don't think the latest comments from yesterday were addressed - and remember to remove the tunny vendor copy. > Which ones in particular? Some I won't fix (like the context).\nThe markdown formatting ones :). bump @matiasinsaurralde . @ilijabojanovic please re-test the skipclean fix on this backport, just in case I messed it up with the conflicts. Fixed. I wouldn't call this a leak. A leak is something that slowly fills up memory and never frees it. This crashes the gateway in mere seconds (at least on my laptop), as memory fills up incredibly fast.\n@ilijabojanovic have you tried stable? what happens there?. cool, thanks. This seems to be a bug in the mxj package. mxj.NewMapXmlReader takes forever and crashes the runtime, while mxj.NewMapXml (i.e. reading the whole body into memory first ourselves) just errors instantly.. Well, I understood this isn't to be merged. I seem to remember that @lonelycode did this as an exercise to prove that it can be split, and to get ideas of what chunks would be easiest to do in master first.\n@lonelycode is that correct? what chunks of code did you see that would be easy to do for 2.5, or even 2.4?. Storage is somewhat doable at the moment, with the exception of the RPC one which pulls in some unrelated stuff. Pulling out the interface alone and always using the interface would already be a big load off apispec.. @buger fixed. I had a look, and this is the only thing blocking splitting the storage stuff into a sub-package.. Is this PR pulling in all the swagger stuff by mistake?. Otherwise looks good - glad to see you coding again :). Actually, @buger has a point - it's only ever used as a set. A map is faster than a slice for that purpose, but I doubt it would be a problem in practice (headers are rarely numerous). And if we are worried about performance, we can always construct the map internally ourselves.. I know, and I agree - my point was that he might have gone for maps for performance reasons. And I'm saying that the same can be accomplished by converting the list to a map when loading the API.. Note that what hosts are included in the load balancer is only determined by the host checker at the moment. Is that not enough? I worry that we would be overcomplicating something that's fairly simple at the moment. Unless this is a common user request?\nAttempting a different upstream seems closer to the current behavior. How would we limit this? We don't want it to try all possible upstreams, as that wouldn't scale at all with the total number of upstreams. Should we limit it to a certain configurable number? What should the default be?. I think there are two different proposals here - one is trying different upstreams if the selected one is perceived as down, and another is making the load balancer aware of down upstreams by using them instead of (or as well as) using the periodic host checker.\nThey would both use similar information, but the features and outcomes are different.\nI think the first is worth exploring, as it seems generally useful. It seems like the design wouldn't be as simple as it would originally seem, though - we should avoid the shortcut that is buffering all requests all the time.\nThe second one I would still think not, but given that Cloud doesn't have the host checker, it might be. I'm 50/50 on it. @buger, @lonelycode, thoughts?. This is sort of expected, because we decode the JSON and then use the value directly in the template.\nDo we always want to keep JSON input as JSON, and XML input as XML? If so, then the fix for this is simple.. @pastaman-lg please see the pull request above. In 2.4, you should use the following template:\n{ \"newField\": {{.myField | jsonMarshal}} }\n\njsonMarshal will convert foo\"bar into \"foo\\\"bar\", so it will do what you're after.. Not yet merged.. Commit reverted, as we need a better way to not break backwards compat.. Nice find!. You've added a dump file - please remove it.. Also, I'm not sure I understand how this fix works. In the old code, we would use resp.StatusCode if and only if err == nil. And I'm fairly sure that Client.Do will only return nil responses when there is an error.\nAre you certain you were running master? Could you show the panic message?. Please add debug prints like:\nfmt.Println(resp)\nfmt.Println(err)\nfmt.Println(resp.StatusCode)\nUnfortunately the compiler doesn't use column numbers yet, so it's hard to tell exactly what in that line failed.. This is really weird. And err is not nil?. Hang on, I misread. The issue is that we use resp in the body, not in the condition. You are absolutely right.. Remove the dump file (an extra commit is fine) and I'll merge :). You also undid your other changes :). Note that I squashed all your commits into one and used a better title than \"devenv fix\". You should try to do those things in the future. But it can always be fixed when merging on the github UI as I did, so it's not a big problem.\nFor the commits, you can probably find some guide by googling around. Most of the time, you'll want git commit --amend to update the last commit instead of creating a new one.. I have never seen logging levels be put in stdout and stderr. And I'm fairly sure the general practice is to show logs in stderr, as they are messages and not actual program output.\nWhy would different output files be helpful? If you want to filter them, you can fairly easily do it with a program parsing line by line.. Perhaps I'm missing something, but I still don't understand why you think stderr is just for errors. It has been used for all kinds of logging messages for a long time. Tyk needs to provide output in some modes, such as when importing APIs from swagger or when linting a configuration file (the last one is in the works), so we absolutely can't have the log messages be mixed with those.\nMoreover, we have at least four logging levels - debug, info, warn and error. We would get into an endless discussion of where each one of them belongs.\n\nChanging info to stdout is a simple change, and getting back to current behavior can be easily be achieved\n\nNote that this would break many user's programs and setups. A change being simple to implement doesn't mean it's simple for users to adapt or upgrade to.\nAs said before, the logs are formatted in a way that is easy to parse (however, I notice now that they're pretty-formatted even if you pipe its output like tyk | cat, will file an issue). It would be fairly trivial to write a program to filter by the logging level. And it would have none of the problems described above.\nHope this helps.. Actually, I forgot to pipe the logs properly. If you do it with |&, you do get the easily-parseable output:\n$ tyk |& cat\ntime=\"Sep 28 09:25:59\" level=info msg=\"PIDFile location set to: /var/run/tyk-gateway.pid\"\ntime=\"Sep 28 09:25:59\" level=info msg=\"Initialising Tyk REST API Endpoints\"\ntime=\"Sep 28 09:25:59\" level=info msg=\"--> Standard listener (http)\"\n[...]. I still don't think this is worthwhile - particularly given that anything can be done by parsing the log output. Feel free to reopen if you have answers to my comment above, or anything to add in favor of the change.. By the way, your git email address is linked to another github account - @AhmetS. I would suggest using one username consistenly, as otherwise it's going to make things confusing for everyone.. this is blocking @ilijabojanovic from sending me a profile for the gateway leak, so somewhat high priority :). Perhaps, but I didn't given how they're different things - Tyk Admin API and pprof endpoints. That func also sets up a hostname and sub-path, neither of which would apply. I'd rather not mix the two, personally.. Ah, I see. Sure.. Done, and added a small test.. ping @buger - also note that the user agrees with my approach in the original issue. Well, that is true, but it's always been like that - including on 2.3. What were you trying to do?. Oh, actually not. It used to be an initialising method, and now it's a constructor. Seems like a regression that we didn't catch because it has no tests.. Should also be a nice coverage bump, since this file had zero coverage.. @MangoMM as said, feel free to work on this issue and ping me if you need assistance.. I think the two of you have a point. I agree that from the gateway point of view, base64 is ugly and confusing. But I have to agree with Martin that we can't change all of this now (wink wink 3.0?), and we should not halt a new feature that simply continues the current practice.\nIf we want to redesign this at any point like 3.0, porting 4 models will be about as easy as porting 5.. You should re-open the issue too.\nNote that some of these changes can be re-used in the better PR that I hope you'll work on :) sorry that you have to revert your first contribution, but you picked a seemingly easy yet complicated issue.. Let me suggest adding a loglevel or log_level one instead. That way, we cover the possibility of setting other log levels, not just debug and info (the latter being the default).\nIt would take the same values that TYK_LOGLEVEL can.. @buger this is what I meant in the review of your auth code the other day.. Also, are you really using Tyk 2.2? The current version is 2.3.9.. 2.2 is no longer supported, so bug reports are only accepted on the current major release, 2.3.\nIn any case, it seems like Tyk uses any number that's 0 or negative as \"no expiry\". Usually this is only -1, but 0 will also work. Like @lonelycode, I don't see the point of supporting a key that expires immediately. Perhaps a clarification in the docs would be enough.. Good. Since I see that some parts of the code only treat -1 differently, let's keep it at that. It also makes little sense to also allow 0 and -2 to mean the same.. > Add additionalProperties: true to the root and all nested object to enable typo validation.\nSee the commit message:\n\nThe schema originates from an old version we had in anotherrepo, so it is missing some fields. That will be improved in the future, when we disallow additional (unknown) fields.. Also, I forgot to vendor.. > Got it. As the first draft looks neat, but I would still prefer having all the possible fields we have in configuration within this PR, and typo check enabled by default. Because this is one of the most common errors.\n\nWell, fighting gojsonschema to get the very basics to work took all the morning already, so I would rather do this step by step. It's up to you whether to review small PRs with single commits or one big PR with many commits at once.\nI thought about making the schema available, but I don't know what the best way would be. go-bindata is a beast, so I would rather avoid it unless we really need it. We could always expose it as a Go name, making it available to other Go code via imports.. Okay, I'll just keep on adding commits here then.\n\nAlso, have you tries automatically generating schema from GO type https://github.com/alecthomas/jsonschema ? Looks nice and using \"definitions\", like it does, may simplify schema.\n\nYes - we already talked about this library, but we discarded it because it doesn't let you specify anything more than what encoding/json can already do. No custom types, no dependencies, etc. So whatever we do, we have to maintain the schema separately.. @buger over to you - I'd say this PR is big enough to warrant a merge. The schema is complete now.. Also, the reason I did the schema mostly manually is because the tools do a rather poor job. For example, they use definitions for all the config sub-types. This makes the schema jump around definitions all the time, when in reality it only makes sense for StorageOptionsConf, to not duplicate it.. done.. @ilijabojanovic the Monitor error should now be fixed (there is a test too). Please test again.. I also rebased on master and added log_level to the schema as per @joshblakeley's recently merged change.. @MangoMM @joshblakeley since @buger will be gone for a bit still, perhaps you would want to review this code? The changes that Leon didn't review are the last commit. All the other commits were modified only for the rebase and for adding log_level to the schema.\nIf you could review the rest, it would help me get this merged faster.\nOf course, feel free to review everything if you wish :). > however, due to the map[string]interface{} type not being compatible with any protobuf3 field, that object can't be passed to CoProccess plugins.\nCould you elaborate why protobuf3 can't work with that type?\nIf what you need for protobuf3 is concrete types like map[string]string, what I would then do for coprocess middlewares is take ConfigData as map[string]interface{}, and filter the values which are just string, feeding only the resulting map[string]string to protobuf.\nThen, we could document that ConfigData can have any values when using Javascript, but only string values when using coprocess, as everything else will not be passed on. This would remove the need to add an extra field, and would remove the need for users to duplicate the data if they want to use both JS and Coprocess middleware.. > It's a much easier solution to conform to a map[string]string since that translates fine in all the languages.\nSounds good.\n\nThough I'm concerned about the performance hit requests might take to check every field in the configdata for type assertion.\n\nIf this operation depends on just APIDefinition.ConfigData, you could work it out once when loading the API into memory, and reuse the map[string]string for each request. You could add the field in APISpec, and call it something like coprocessConfigData, with a comment explaining why it's necessary and why it's a different type.\nI wouldn't lose too much time on this, though. Where you added the code, there already are a bunch of allocations and other non-trivial work, besides the whole protobuf shenanigan. Looping over a small map and doing reflect operations on the values is likely not going to be a significant addition. Can't harm to cache this part though, so feel free.\n\nNesting is the original issue with the protobuf.\n\nAgh, you're right. How about going one level higher? Putting it at object.SpecConfigData, an extra map[string]string. You might need to update the protobuf definitions and the bindings for this. See coprocess/proto/, in particular update_bindings.sh.\nThe other option is, like you say, to assume no namespace clashes. It's always an option to document this, telling the user that it's up to them to not create clashes with other keys they will need. But this complexity seems avoidable to me (if my solution above, or any other, would work).. @javi830810 I believe rich plugins and coprocess are the same thing. What I'm not sure of is what this change would cover - would it be just gRPC, or also Python and Lua? I'm not familiar enough with the coprocess codebase to know. @matiasinsaurralde will likely know.. Ahmet and I have discussed this offline - I'm not convinced this is the right fix. It could also silently break someone's setup.. Also, reviewing this commit by commit will probably be the easiest.. Thank you both!. > It also looks like the actual start of this trace is missing, it would give us the entry point of the failure.\nFriendly ping @hustshawn - could you check if this is the entire trace that you got?. Still missing info - closing.. Ping @MangoMM @joshblakeley?. Thanks for reporting!\nWe noticed this too a while ago, and there already are a couple of internal issues open about it (where the dashboard code lives). I'm going to close this one in favor of the others. Until the fix is released, this is a off-by-one error so it should be easy to work around. . @ilijabojanovic ready to test (moved the issue to the right column in the project too). > Maybe don't need to check if log_level is not \"\" as that doesn't matter to the logic.\nYes, please remove that check.. GH decided to duplicate the larger comment for some god damned reason.. ping about including the bad string? https://github.com/TykTechnologies/tyk/pull/1220#discussion_r144324562. @matiasinsaurralde you need to fix CI (and probably run gofmt too). I assume you'll do the same fix in master for 2.4.. Hi @jaschweder! Thanks for contributing.\nI'm afraid that the current spelling isn't incorrect however, as it's the British spelling of the word. Both are valid in broad English terms, and we tend to prefer British spellings since most of the team is European.\nThanks again and have a good day!. Done in https://github.com/TykTechnologies/tyk/pull/1218.. Fixed by https://github.com/TykTechnologies/tyk/pull/1229.. These were approved and tested for 2.3.10, and the changes look the same and still fine. Merging.. Also, use \"Fixes #n\" to actually close the issue once merged.. @buger @matiasinsaurralde I assume this must go into 2.4 too - has it been taken care of?. bump, anyone?. Proof:\n```\n $ go test\nPASS\nok      github.com/TykTechnologies/tyk  2.799s\n $ TYK_GW_STORAGE_HOST=redis go test\npanic: could not connect to redis: dial tcp: lookup redis on 194.168.4.100:53: no such host\ngoroutine 1 [running]:\ngithub.com/TykTechnologies/tyk.TestMain(0xc4202c6fc0)\n        /home/mvdan/go/src/github.com/TykTechnologies/tyk/gateway_test.go:143 +0x3bb\nmain.main()\n        b001/_testmain.go:342 +0x156\nexit status 2\nFAIL    github.com/TykTechnologies/tyk  0.038s\n```. > Looks good. Do you think we really need addFormats function? gojsonschema.FormatCheckers is the singleton anyway, so maybe just call gojsonschema.FormatCheckers.Add inside init function, or similar?\nSure it's a singleton, but the point is to avoid that really long expression multiple times. I could have avoided the parameter, but why not make it a bit more modular. I thought about init, but I would rather not touch the global gojsonschema unless we're actually running the linter. Using init could make us run into fun global conflicts with other uses of gojsonschema within the gateway binary.. @joshblakeley would be useful for everyone if you asked for reviews once you're happy with the PR and CI is green - otherwise you have to ping us again once everything is good :). They're different libraries at core - kingpin is just a version of flag with more features, while cobra is an entire framework to write command-line tools and is much, much heavier.\nWe only use cobra in the cli project that I know, while we use flag packages (mostly docopt) in every other project.. There must be a way for arguments to still work - otherwise kingpin would be useless. We can look into this tomorrow if you'd like. Making it a flag wouldn't be the end of the world, but I'd rather not accomodate our behavior to the limitations (if any) of a lib.. @joshblakeley is this ready? not sure what you did to get the coverage to decrease so much - we could look into it together later.. Still looks OK, and no more conflicts or data races. Ready to test.. I understand this changes from one new transport per request, to one new transport per spec. This seems fine.\nI don't understand how the pooling works and why it requires a common transport, though. Where have you read that? I can see no such mention on net/http.. Ah yes, it does mention \"connection caching\" instead of \"pooling\". As long as this is tested to work fine, works for me :). @buger are we waiting for QA, or can this be merged?. @jacyo just to confirm - do the exact same steps work on 2.3.10?. @jacyo I see what you mean - the goagain library does indeed need updating with its reflect code.\nCan reproduce on Go tip. However, note that that line only needs fixing on Go 1.9 and later. On 1.8, which is what version we'll build Tyk 2.4 with, the old line works fine.\nThe \"address already in use\" error is still there, though.. The main underlying issue here is that the goagain library has been unmaintained for close than three years, to the point that it's broken on the current Go release. We should probably look at alternatives for 2.5 and later, unless we want to maintain the code ourselves.. Confirming as a regression somewhere in 2.3, as this works fine on 2.3.2 on Go 1.8.. I have narrowed this down to 26043b483494588f8bce609b0f26ea7db39456ed by @matiasinsaurralde.\nFor example, the reason why we get the \"address already in use\" error is because of these added lines, which mean that we no longer use a random port for the child:\nif listenPort == 0 {\n        listenPort = config.ListenPort\n}\nBut even if I get rid of that, other stuff is still broken. For example, the child no longer kills the parent properly. All of this works fine right before Matias' commit.. Another bit of useful info - SIGUSR2 works fine with Go 1.8 on Tyk right before that commit, as well as Tyk on any stable version (such as 2.3.12).. @buger we should make it clear (or at least keep it in mind) that this feature is broken in 2.4, in case any users depend on it and are surprised by the upgrade.. No. It is broken since one of the earliest 2.4 commits, from back in January, that I linked above. That commit was never backported into 2.3. All 2.3 versions are fine, and 2.4 up until that commit is also fine.. @matiasinsaurralde is already working on stuff very close to this (and the handlers seem to work for him), and I hadn't started this, so passing it on.. If this was indeed on stable (since Hybrid runs 2.3.x), my recent sort order changes like 177758fe93fb8bc78ad8ba0632fdb4400beb722a cannot be a cause since they were never backported to stable.\nStill looking at this, but at least we can rule that out.. I have also written a test to check that the sorting by path works with tricky listen paths in semi-random initial orders, and it passes fine on master.. @ewah you might be onto something - thanks for helping us debug the issue.\nI had been looking at the host matchers before, as I knew they were done in a bit of a weird way. Usually, the host routers would sit at the highest level, meaning that we would have one host route per host and not one per endpoint. It's the same idea that you're proposing with re-using the host routes, but perhaps a bit cleaner and easier to understand.. @ewah you were absolutely correct - the hosts are to blame. With three hosts and six listen paths on each (18 APIs in total) loaded in a semi-random order, it ends up with only 1/4 of APIs being accessible.. I assume this would optional and configurable via either the API definition or the gateway config file.. I would also do it per-API, I think.\nCareful with changing the default behavior in 2.x. Still possible to do so as long as it's well documented and for good reason, but in general we can only make breaking changes in 3.0.. Doing all possible permutations in every test run is a bad idea IMHO. It limits the number of APIs we can work with, and it means the test will take O(n!). It's simply too overkill and would waste time and CPU.\nHowever, something I could do (which I planned to do, but ran out of time today) is generate a long list and shuffle it. That way, you could get similar results by doing go test -run=ThisTest -count=1000, the test itself would still be fast, and Travis would still catch probabilistic issues over time (much like it finds race bugs, even though you can run the test suite many times without running into them).. I should be able to, yes. Thanks for the heads up.. I mostly re-wrote the test and now I'm working on a fix too, so I'm going to open a new PR.. Did you do this against release-2.3 on purpose? I thought we wouldn't do another 2.3.x release.. You're right that this fix does not cover regexes. However, as far as I can tell, we don't officially support regexes there - our docs don't mention regexes anywhere.\nI don't know how we could possibly support all regexes here. The router doesn't backtrack - as soon as one Host() subrouter matches, it doesn't try the other host sub-routers. We could document that we support regexes with the current approach, as long as they never overlap - if they do, stuff will break as before.. Ah, I see your point about consistency. Yes, at the moment the host subrouter creation order is not deterministic.\nDoing it just by length won't do, as different strings with the same length would still be sorted arbitrarily. I'm thinking of doing first length then alphabetical, or just alphabetical.\nThe only reason to do first length and then alphabetical is that it may help more often than not with regexes.. Done - ended up using both length and chars, in decreasing order.\n@buger PTAL. The issue was still in the backlog, so I've moved it to ready to test.. @asoorm please rebase - we need to merge this in for 2.4. Also, there may be another way to get rid of the circular dependency.. Duplicate of https://github.com/TykTechnologies/tyk/issues/629.. @marksou this is the second developer (not even user) that gets confused by this - we should make it clear in the docs, if it isn't already.. @jacyo please try this branch if you have a few minutes, to confirm that it fixes the bug for you. Remember that you'll need Go 1.8 for it to work (or 1.9 or later, as long as you fix the reflection line like you did before).. I cannot reproduce this. Before the API is created, both without and with extra chars are 404. After the API is created, both are 200.\nI even added tests for this, which pass:\n```\ndiff --git a/gateway_test.go b/gateway_test.go\nindex 752269da..7fe4162d 100644\n--- a/gateway_test.go\n+++ b/gateway_test.go\n@@ -919,8 +919,10 @@ func TestListener(t *testing.T) {\n        {method: \"POST\", path: \"/tyk/apis\", body: sampleAPI, adminAuth: true, code: 200},\n        // API definitions not reloaded yet\n        {method: \"GET\", path: \"/sample\", code: 404},\n+       {method: \"GET\", path: \"/samplefoo\", code: 404},\n        {method: \"GET\", path: \"/tyk/reload/?block=true\", adminAuth: true, code: 200},\n        {method: \"GET\", path: \"/sample\", code: 200},\n+       {method: \"GET\", path: \"/samplefoo\", code: 200},\n    }\n// have all needed reload ticks ready\n\n```\nPlease provide an API definition and the curl commands to reproduce it. Does it reproduce when the API is keyless?. The problem was that the request was going to a different API, thus the 403.. Note that all the tests taking 10s versus the original 3s isn't that bad, but the mutual TLS stuff requiring 7s alone is very worrying.\nIf the tests really take this long by design, they should be shipped when go test -short is used.. If every component of the gateway had tests taking ten seconds, the test suite would take minutes :)\nI would hope that there are ways to speed it up, such as generating less certificates (e.g. reusing them) or doing some stuff in parallel.. bump @buger . This is another one of my TODO items that I had in my backlog for 2.5.. Nice fix! You should fix CI, though.. Ah, I see this is the one causing https://github.com/TykTechnologies/tyk/issues/1305.\nThe problem is that, to read apisByID, you need to grab the apisMu lock. This should fix at least some of the data races there.. Maybe - but that would usually have to wait until 1.10 is out, since we support the last two major releases (1.8 and 1.9 now). For now, I'd say just use the lock.\nAlso worth noting that sync.Map is for read and write heavy cases within the map. In our case, we only ever read from the map - the lock is to protect the map pointer, not the elements within the map or actions done on the map. And reloads don't happen too often, so I wouldn't be surprised if sync.Map made our code a bit slower (and harder to read given all the interface{}s).. > sometimes don't unlock with using defer which could potentially lead to problems\nTrue, but I believe it was deliberate in this case, to avoid holding onto the lock for longer than necessary.\n\nwe do defer unlock but then do have some logic in the same function after that point which holds mutex longer then needed\n\nOpposite end of the coin :) In the example you gave, it doesn't do any substantial amount of work after the loop is done - all it does is log something and return. I don't think it is worth changing that one.\nIt's true that we could simplify some of the code with helpers - we already do that with getting a single API from the map, and we could do something similar with ranging with a lock.. I wouldn't rush the switch to 1.9/1.10, as that will mean that 2.4 and master will be further apart than necessary - and we will likely have quite a bit of bugfix backporting to do in the coming weeks :). Note that TestListener broke - not sure why it would, but there seems to be a regression somewhere. That test starts with 0 apis, inserts one, issues a reload, and checks that the new API is reachable (a 200 response).. This should now be rebased, since we fixed the races in master separately. I suspect that half of the changes in this PR are now unnecessary. Apologies for all this inconvenience.. To clarify on why I think the extra locks aren't needed - I ran the whole test suite with the race detector hundreds of times after my fixes in master, and I saw no more data races.. Perhaps these are all simply because of the PR above.. Not because of the PR - being fixed in #1313.. Yes - it still works, as long as go test -v is used (just like before). This is because the testing package does not use the log package.. @jacyo what is the commit that you think fixed this issue?. I agree that globals and locks are bad, but this isn't a refactor - it's a race fix. It's the smallest and least intrusive one, because we need this fixed fast and backported to 2.4.. I think that upstream_, _name and _override are all redundant. I'd go for cache_control_ttl_header, as it's immediately obvious that it's related to the setting just above it.. I'll leave it to @buger to decide whether or not to have QA in this.. No, because mw_redis_cache only ever uses SuccessHandler. The rest of the changes were correct, and all the copies are done in the same way.. The race seems unrelated - likely another one of the same races that @dencoded was finding.. > sleep between requests using some jitter and fail after some number of retries\nThat would still leave the test being flakey. What if you wait for a total of 5 seconds, but redis took 6 to take effect?\n\nread cached key from redis directly as part of test-code to wait until it cached/not cached\n\nThis is essentially the same - you still need a timeout to wait for the write to actually happen.\nI'm not sure what the problem is with this approach. I can see that it's a bit verbose, but there's no other way to know exactly when the gateway does the redis write (or decides not to do a redis write at all).. See discussion on slack. They do nothing, as they would only download but everything is already on disk since all deps are vendored.. (also explained in the commit, let me know if you'd like my commits to be more verbose). Perhaps request a label here, like enhancement or bug?. I think this should be further up, especially before the steps to reproduce.. If they're opening a PR, this is already done, isn't it?. \"in the documentation\". These will change over time. Perhaps we should just tell them to run util/ci-test.sh?. You are correct, apologies.. Oh, then perhaps also remind them to not branch from a stale master.. \"the latest\"\nApologies for insisting, but this will be read many times :). Agreed, will undo. This does change functionality somewhat, as empty strings will be treated differently.. @lonelycode done, PTAL. Why not? The tools we run use stdout and stderr, so it doesn't make much of a difference. This was for consistency with fatal, mainly.. It depends - I usually only use stdout for useful output, so not log messages even if they are not errors :) Otherwise, pipes would be of little use.\nTravis doesn't treat the text differently either, see https://travis-ci.org/TykTechnologies/tyk/jobs/193369280#L304\nI don't see a clear winner, so I went with this for consistency.. This line is redundant, negate the if and remove this.. A couple? What's the second?. unstable?. Replace caps with bold text. I would add -u here.. If this is for people not used to Go, recommend install instead of build. Otherwise any tiny change will take dozens of seconds to compile.. With what tool? What commands to run?. This isn't about binaries. This is about incremental compilation. This is why I rarely ever use build. The tricky command is build, not install :). If we're to add docs about vendoring, we should at least mention what tool we use. Otherwise I would remove this section.. That's because you did the clone yourself and used the .git at the end.. > But trick caching during running install indeed nice, make sense try it with our dev environment project.\nI don't understand this sentence at all, sorry.\nI still think we should not encourage the use of go build. Newbies will end up rebuilding all the dependencies from scratch every single time, wondering why build times are so ridiculously slow.. I'm not particularly happy with the example. I'm fairly sure we don't use git clone to add dependencies. This method does not support updating existing deps and will break with nested dependencies.. I've only seen go build being the default when people don't fully understand that it doesn't do incremental builds.\nhttps://twitter.com/davecheney/status/700099491655909376\nhttps://twitter.com/davecheney/status/697171533215576064\nI still don't see why using go install by default is wrong. If any users are bothered by the cached object files or the binaries in $GOPATH/bin, they can just use build instead of install. Fast builds are definitely more important.. Done. This made for a manual rebase, though.. > having spaces around arithmetic operations is kinda required\ngofmt reigns here, so I don't think this matters.\n\nAnd in this case brackets are ok as well\n\nSince spaces are not used, operator precedence is obvious from the style. I don't think parentheses here improve readability at all.. You're pulling in an older version of tykcommon here, reintroducing a bug.. This is my fault though, because I too forgot to update this file when updating tykcommon.. I tried this first, but it doesn't work at all. I forgot to mention why in the commit, will update.. @buger done, see the new commit message. This doesn't apply to Go at all, because capitalized means exported.\nThere isn't a consensus about uppercase vs camelcase for constants, but ingeneral people use camelcase too.. I was driven by use, not by names. The two bits of code aren't related at all, and the file handler_proxy seemed unnecessary.\nMoreover, this code hasn't been touched in a long while, so I doubt this structure will be useful in the future.. I've never seen a style for constants in Go, and uppercase/underscores are often seen as bad style. Not a big fan of prefixes either, as it will make the names longer.\nWhy do we need to know whether something is a constant, exactly? Knowing whether a name is exported is useful, but in general I don't care whether something is a var or a const. If I need to modify it, it's for a particular reason and the compiler will yell at me anyway. Knowing it was a constant beforehand wouldn't have improved things.. @lonelycode note that what you're referring to is grouping similar things by name. This applies to vars, consts, funcs, whatever it is. It doesn't tell you anything about the names being consts.. The former method was flawed. They enabled it, but didn't disable it. Any tests after those two would have it enabled, while the rest would have it disabled. Having it consistently on is much better.\nOn top of that, such setting of global variables will break even worse when we use parallel tests.\nThe easy fix is to not fiddle with globals in tests unless we have to. And if we have to, that test can't be parallel and must clean after itself.\nIn any case, no tests seem to break. We can ask Martin to be sure if you'd like.. Yeah, my bad for not mentioning it in the commit message. Let me update it.. done.. What do you mean? This is the correct way to handle errors in TestMain.. Why are you passing these as arguments?. If the condition isn't met, or this line doesn't execute for any other reason, the main goroutine will block forever. The test will use up all of the timeout. Whatever your purpose here is, there has to be a better way to do it.. Since you're always listening, you always have to send (if you want to use a channel).. I'd say otherwise - this wastes everyone's time. The test should fail as soon as possible, instead of hitting the timeout on purpose (which by default is 10m).. Having such a tiny timeout will make the test racy and it will fail under -race, so please don't do that.\n\nAny suggestion?\n\nYes, always send on the channel. Either true or false.. There definitely is a true or false here. This is the wrong way to write tests. This is a version of testing time.Sleep with a slightly larger timeout. Of course it will work 99.99% of the times when you run the test, but that's besides the point. The test takes longer than needed and it's flakey.\nAnd as said above, any test using a timeout to work around introduced races will make https://github.com/TykTechnologies/tyk/issues/363 impossible.. The way Matias wrote it now should be fine, as long as the internals aren't broken and the event never fires. As long as there is no sleep/after that will break -race, I'm happy.. extra spaces?. Sure thing.. done.. It's added in geoIPLookup already.. Why the for? Should we receive more than once?. Could you add a comment, perhaps a TODO if you don't understand why multiple messages are sometimes received?. Sorry, what? If you're asking me why I'm using multiple Error calls, this is what the code did. I'm not touching any of the code, just moving it.\nThis particular anti-pattern is everywhere in both prod and test code, so I'd like to tackle it separately.. Yeah, since there are hundreds of these. Fixing a few won't do much.. have these be a defer right after start, for readability and consistency (it will survive if a test exits early).. Read the comment :)\nI agree that that would be better, but it would need refactoring so that the tests won't fail. Right now some depend on the url being static.. These two things are what I was talking about on slack and in the original issue.\nThis PR is not about changing or fixing the logic, it's about deduplicating it. I simply rewrote the recursive call into a for loop. Which makes the broken logic more obvious too.. Yeah. You may call it premature optimization, but it can't hurt. The default value is 0.. It's common practice to do it if the amount of inserts on a slice or map is known at compile-time. You can argue that if it's not a hot path it's not worth the time, but in this case the time is already invested :). You mean Fatal, which can't be run from a separate goroutine. I need to log the error, mark the test as failed, and make the main goroutine stop, which is what this does.. It's checked against 403 just below. This is redundant.. Oh, okay. Better have that explicitly listed here, in any case.. Even if this ip is always empty string?\nI can have it be \"user_ip\": \"\", if that is still useful.. Same key user_ip?. Done.. See my comment above and the discussion below.. > If it bind on separate port, it not works\n\"If it binds on a separate port, it doesn't work.\". These two blocks are identical copies. Dedup in a func?. My only nit with this is that you have to mentally keep track of what each bool means. Perhaps using keyed vaues would help. If you think that's overkill for just the two bools, leaving it as-is sounds fine too.. set these back in a defer right after you change them - this way, it won't break if the test exits early (even if it doesn't yet - it will be future-proof). AppPath is already set to a temp dir in TestMain. Why are these two lines necessary?. Please indent with tabs like the rest of raw JSONs. I'd instead empty the directory. Or, if you want to nuke it entirely, at least don't ignore errors.. gofmt?. You could instead do:\n``\nnewVal := 1\nif count, found := h.sampleCache.Get(failedHost.ID); found {\n    newVal = count.(int) + 1\n}. What if theSet` above happens to run after the one here? Do we really need to fire the two goroutines, ever?\n(I know this is not your code and it's not modified in this PR, but still). Ha! The comment was right, the code was wrong :). Perhaps I'm blind, but what is making :16500 up and :16501 down?. Oh duh, this is the port I used for the test http server that replaced httpbin.\nI suggest you use these constants:\ntestHttpListen = \"127.0.0.1:16500\"\ntestHttpAny  = \"http://\" + testHttpListen\nOtherwise it's not obvious from reading just this code, and it's also fragile since it will break if the port ever changes.. Sorry, I don't understand. In my opinion reusing the constants is better in every way.. vetshadow was suggesting these? IMO these changes should not be made. It makes these pieces of code depend on err being declared previously in the block.. This will panic if it's not a bool type, e.g. if it's actually just nil. Are you 100% certain that it will always be of bool type? Have you tried to get it to crash by using weird parameters like --create-api=foo?. please indent with tabs for consistency. Bump. I suspect all the ./ bits are redundant?. Is this right? Are we always going to be using master? What about stable releases?. By which I mean, we probably want to vendor instead.. type is redundant. switch x := ... and then you can simply use x in each type case. negate, continue and unindent the rest of the block. negate, do the single statement QuotaHandler.TagDelete(k) + continue and unindent the rest of the block. Why is this necessary? If we're waiting for something to be ready, I'd rather use a proper synchronization method.. if foo { return true }; return false -> return foo. if foo { return true }; return false -> return foo. if foo { return true }; return false -> return foo. Why did we go from !foo to foo == false here?. And in a few more places, actually.. Can be merged into the line above, i.e. else if ... {. unexport?. unexport?. unexport?. unexport?. Because the tests would fail without them - it's explained in its commit message. To simplify the logic of what runs and what doesn't regarding the config code in go test, now loadConfig isn't ran at all. And the last thing it does is set these up.. I agree that it's not ideal, but changing how the default config is done won't work. Note that these settings are applied after the config file is read, not before. Perhaps a method like ensureConfigSanity to do these last-step tweaks in both prod and test.. ^ to clarify, what I mean is that I can do these changes on this PR if you want.. done, PTAL. done and rebased. I mean this sleep is either useless or hiding a concurrency bug, like in our old hot reload code. What does it do?. Instead of\nswitch v.(type) {\ncase string:\n    _ = v.(string)\ndo\nswitch x := v.(type) {\ncase string:\n    _ = x. SGTM, then if this gets merged before 2.4 we need to remember to pin/vendor before the release. return time.Now.... both branches do the same? Perhaps collapse them. we ignore the error here?. You can get rid of this if and just use continue in all the skip = true lines.. typo in skipping. Continuing discussion from the original PR:\n\nIIRC it makes sure that the flusher and the CDRT notifier has time to initialise and do it's thing. There are two systems working in tandem here, one is a batch writer and the other is a distributed in-memory merge, the two are eventually consistent.\nThis function is only called at startup, so this pause is ok.\n\nI realise that it's not hugely important as far as start-up time goes, but this can be racy and bite us in the future really easily. Is there no way to wait for exactly what we're after, not just an arbitrary amount of time?. ack. nit: topic += .... I take it we should enforce QuotaRenewal to always be int64, and somewhere in the code we do float64 instead by mistake?. You could just do:\nif !f || time.Now().After(expT) || s.IsExpired() {\n    QuotaHandler.TagDelete(k)\n    continue\n}. these are not reset, so they modify the global config for the rest of the tests. You should either set them globally, or set back to the original values in this test via a defer.. What does param do here, exactly? . Oh, this is likely JSON then. It should consistently be float64 here, so you should be able to use a one-liner.\nAlso see https://golang.org/pkg/encoding/json/#Decoder.UseNumber. (to clarify - this is because in the JSON spec all numbers are float64, and if Go is just given a map instead of a struct, it defaults to float64 for compatibility). cid doesn't seem as descriptive on its own as others like remote_addr. Perhaps corr_id? Or perhaps name it something like \"request id\"?. Remove the debug prints please, or merge them into the t.Fatal calls. Same as below. Note the old if err == nil at the top, that is now if err != nil. We were using a non-error early return, which was weird. We now use a regular error early return. So this is no longer the \"there was an error\" branch, this is the \"all went ok\" branch.\nThis is perhaps confusing because both have a spec.ServiceRefreshInProgress = false before the return.. I prefer Get for consistency. Also \"is do not track\" seems like the wrong sentence, since the argument is a request. Perhaps \"has do not track\". But I still prefer get for consistency with the rest of the funcs like it.. Without the comment, or without the comment and panic?\nI can't ensure it easily right now. I guess I could statically, but I would need to write up a tool to do static analysis and check all the possible types for the interface parameter. I've been playing with guru for a while now, but I can't get it to work properly - it seems to think the possible types are three, so it's clearly wrong.\nA far easier option is to have this panic for a little bit and see if any of us run into a panic, which I would quickly fix. Is that a problem?. Proven statically and removed, PTAL. Same as the original val, just an interface value. It's quite common as a single-char name, like i and s.. The < 2 is also ported from the original code. It's the count of API specs with said hash. So 1 means no dups.. What does 666 mean here?. Ah, I see we have 1666 also - we should use constants for these to make them more obvious, like return nil, mwStatusRespond. I'll ticket that up to do once this is merged.. You can use a nil body. rogue empty line?. Something is buggy somewhere... forget I said anything for now :). Are you certain a lock for writing only is enough? What if there's a read while you're writing with the lock grabbed?. Any reason why this is exported?. Same as my other Mutex question - certain that locking only on writes is enough?. Also, if you undo the unexport the diff will get smaller as you don't have to modify all the names below. You're absolutely right, I'm a dumbass.. Fixed.. From the doc:\n\nRead reads up to len(p) bytes into p. It returns the number of bytes read (0 <= n <= len(p)) and any error encountered.\n\nSo you could get n, err == 4, nil for example.\nI believe you want io.ReadFull, which will make sure n == 8, even if multiple Read calls are necessary:\n\nReadFull reads exactly len(buf) bytes from r into buf.. If you make this an embedded field, you could avoid defining ListenAddr and Close and just use Addr and Close from net.Listener.. So this sends register, the length as a byte, and the ID itself? I assume the first two are so that we can change this \"protocol\" in the future more easily.. same ReadFull comment as above. I'm not sure if the ReadFull thing applies here because you're only reading one byte, but you might as well do it out of consistency.. Also, you don't actually check that the string here is? It would also be more readable if you didn't hard-code the number 8 here, like:\n\nconst want = \"register\"\nhandshake := make([]byte, len(want))\n[...]. Also, this is perhaps a bit silly, but I would add something like:\nif len(RPCClientSingletonConnectionID) > 255 {\n    panic(\"RPCClientSingletonConnectionID is too long\")\n}\nThe silent overflow is a bit scary, even if we're sure that we won't touch this very often.. Exactly - if the client wrote less, you want to error, not accept it :). You're right, removed this bit and simplified the commit message.. You can override methods from an embedded field - that's exactly what embedding is for. But you're right, I assumed the two interfaces were the same.. It's unsigned, so it will just go back to 0.\nI the number of bits was small and the list was very long, this could mean that we wouldn't get to all the elements. But given that it's 32 bits and lists will rarely ever go beyond the dozens, it's fine.\nFor what it's worth, the existing implementation also has overflows. But with this one it's more obvious and more predictable, as the number is always unsigned and 32 bits.. I know this was like this before, but could this not be foo && bar || etc instead of [[ $(foo) ]] && bar || etc?. This code seems repetitive - perhaps we should use a loop instead. Again, I realise this was like that before, so just a suggestion :). I love you.. I looked into the same before - it's used in multiple places. This one was removed from master too, as there is no interface type here. The new code is:\nval, ok := session.MetaData[contextKey]\nif ok {\n        newpath = strings.Replace(newpath, v[0],\n                url.QueryEscape(valToStr(val)), -1)\n}\nNote that valToStr does nothing for strings, and the same applies to the deleted chunk of code.. You probably want to make pythonInitDone an error channel, so that the error can be returned or otherwise handled.. Is there a reason to make this a global?\nIf this is to reuse the channel allocation, are we sure it won't be used more than once concurrently?. Err, I see that you are actually returning it, but by writing to the parent's error variable instead. This is a bit unintuitive, and will break easily with data races if we ever touch this code. Better to explicitly pass the error via the channel, returning nil if there was no error.. Why do we need both runtime.LockOSThread and this? Is this an improvement that's unrelated to the fix?. nit, but you could do:\nARCHTGZDIRS=(\n    [i386]=$SOURCEBINPATH/build/i386/tgz/tyk.linux.i386-$VERSION\n    [amd64]=$SOURCEBINPATH/build/amd64/tgz/tyk.linux.amd64-$VERSION\n    [arm64]=$SOURCEBINPATH/build/arm/tgz/tyk.linux.arm64-$VERSION\n). This will make for some really complex diffs - perhaps do one --config-files foo per line?\nAlso, given that the flag name is in plural, could you not specify the flag only once at the start, or use something like a comma-separated list? (just wondering, hoping that you don't have to repeat it over and over). Perhaps invert the test here and exit early, to unindent the rest of the code.. If anyone wonders, I tried using *string but it made the table-based tests impossible - you can't do &\"foo\".. these two comments probably need clarification now, i.e. that one is used in log and the other in rawlog. You could simplify the logic here by having waitTimeout return whether the waitgroup finished or timed out. In the former case, it's the same as if eventAuthFailState was set to true.\nSo you can get rid of the bool, and use if !waitTimedOut(&eventWG, 20*time.Millisecond) { ... below.. this looks like it's missing gofmt. this doesn't need exporting. Do you need the two return values? StatusCode is also part of the response copy.. This can also be unexported. all values > 300 are != 0, so the first half can go.\nAlso, if you meant to do this for all error status codes, you probably want >= 400. Otherwise, I'm not sure why the > 300 was chosen.. Use the new named constant instead of 666, to make this clearer. Also, this confuses me. All values > 300 are discarded above, and here only < 300 are handled. Why do we treat 300, StatusMultipleChoices, differently?. This func never errors. Either remove the return value, or actually pass on errors like the one from io.Copy.. I still don't understand why we treat 300 differently from other 3xx codes here. Don't you mean < 300, to capture all 2xx and 1xx codes?. My point was simply about the 3xx inconsistency, but your point seems correct too. @lonelycode?. How so? Not all configs have flags, and not all flags have configs. For example, the log level doesn't have a config option - and they're fairly similar flags.. bump. @buger actually, I think this is the fix for https://github.com/TykTechnologies/tyk/issues/1041 (by pure chance - I found this broken code, and remembered that issue after fixing it). sure seems like it - updated issue.. I'd call this mainHandler to clarify that it's always linked to mainRouter.\nAlso, please use the godoc format as in mainHandler's only purpose is.... Cleaning. I'd make this use a temporary AppPath directory instead - we already do this in other tests. It's the best way to ensure that nothing else is in the dir, and that even if we panic, we won't leave anything behind. And you can delete with a single os.RemoveAll call.. Check for an error here, just in case.. Unmarshal into spec.APIDefinition, just in case. I wonder how this ever worked properly before this change.. sampleAPI is an APIDefinition, not an APISpec. One is embedded into the other, so in practice it's probably fine, but it could cause issues if any field names ever conflict or if the JSON string ever includes fields directly from APISpec.\nSo I'm saying that you should do json.Unmarshal([]byte(sampleAPI), spec.APIDefinition), to make sure none of those are possible.. This is now fixed and they're vendored - remove?. filepath.Join. filepath.Join. this global name throws me off a bit - reading its declaration, I have no idea what it's for.. Replace these three lines with\np, err := ...\nif err != nil {. A func that errors but may also exit? (here and below). What's the point of this line if you discard the cancel func?. e is a bit too short to know what it is. I thought we vendored them?. All the errors have an error: prefix, that can be removed. This looks like bad formatting, even github highlights the % chars in red. Have you come up with the Get/Set interface? If so, why not make it type-safe, like:\nfunc (c *v2Config) Ctx() *context.Context { return c.ctx }\n(or just exporting the fields, which is even easier). I thought we would rely on our vendored copies - otherwise plenty of things can go wrong, e.g. if those libs ever have any breaking changes\nFor example, we could tell people to use our vendor/ as their GOPATH. changeMe that says do not edit? :). Are we sure that using httptest outside of a test is safe?. I suggest making these files .go files again, but with a +build ignore so that:\n\nthey don't break the regular build\ntools like gofmt and goimports still fix them. There's an example on how to do it here: https://golang.org/pkg/go/build/#hdr-Build_Constraints. whenever you use * you should quote it, otherwise the format gets fucked up. I think for a single line, a single ` is enough?. Related to the question below on the Get/Set interface - why is a context in the mix? We don't seem to make any use of it. And it seems unnecessary for getter/setters.. I understand plugin_build is just a guide. Is this going to move to the docs?. These two notes seem to contradict each other a bit.. Yes - also because http.DefaultClient may be modified by something else, e.g. a badly written library.. I've had a look and it seems like context isn't used there at all. Are we going to make use of it? If not, I'd leave it out of the API.. So if we're using the grpc proxy, we're buffering the entire response? That seems pretty bad to me. If someone wishes to use a grpc API that writes tons of data or writes data incrementally or over time, this won't work at all.\n\nI assume you did this because you only have ServeHTTP to use from grpc. We should be calling that directly with the user's ResponseWriter, instead of reading the whole response into memory first like this.\nNote that this is different from what RoundTrip does - that one does the request, but it doesn't buffer the entire response body into memory.. one too many ` this time I think. If you indent something with four spaces or more, it's already a blockquote - no need for the quotes. We can leave things as is, but it's going to be a bit limited with the buffering. I guess we can address that if it ever becomes a concern.. I'd do the opposite, as runtime is way more commonly Go's rather than GRPC's. Just skip the test entirely at start, it will be faster and we won't require it to error for no reason.. You don't need the output, use Run. Wait, a two-line script? This would be trivial to do in a exec.Cmd. You can specify a different dir with cmd.Dir and the args can be passed as you'd expect.. Ah, good point.. you moved the vendor copy from Jeffail to jeffail, so update this too. This isn't run in a shell, so remove the quotes around dummy (otherwise you really are using 'dummy' with quotes as the build tag). No - this sets the default. We no longer ship or have js/tyk.js, so this needs to go. If a user wants to use global JS code, they need to set the config option to whatever path they like.. I would use net/http.CanonicalHeaderKey here. Unless we need lowercase for a reason in particular?\nIn fact, the map is already using CanonicalHeaderKey internally, so you don't need to convert it at all.. This is a bit pedantic, but this test is incorrect - you're checking for three matches, not for all three strings above. If you got \"x-tag-me-1\" three times, the test would still pass.\nA better, easier way to do it would be a remaining := map[string]bool{...} and then deleting from the map as you iterate, erroring at the end if there map is not empty.. Whatever we go for - canonical keys or lowercase keys - we should error if the user gives us a TagHeaders that contains keys that don't comply to the format. Or convert them ourselves.. You could simplify this test by just having the version definition in each of these strings, like:\nversion: `{\n\"name\": \"Default\",\n\"use_extended_paths\": true,\n\"global_headers_remove\": [ \"X-Random-Header\" ]\n}`\nThe rest is always the same, so you can just use a text/template.Template to put it together.. zero values (\"\", false) don't need to be put in each case. Use http.NewRequest instead (if it needs a full URL, just use http://test). Use json.NewDecoder(r.Body).Decode and drop the ReadAll. nit: use := here. do if !x { return errors.New(...) } to simplify the flow and unindent the other code.. You can also do the same here, to unindent all the rest.. If the options are empty, remove it, the type and the code to decode it.. As before, use r.Body directly.. Actually, the other two comments apply here as well, as there is some degree of copy-pasting.. We changed things a bit in master, so this should be without the pointer now.. This func is purely jq.NewJQ - just remove the func and use that instead.. Call this something in plural like urlSpecs. define EnabledForSpec instead. same as above, and you can either remove the log or move it into the mw's EnabledForSpec. just a thought - perhaps we should simply use len(spec.ClientCertificates) > 0. Since you're using make, you might as well init the caps to len(config.Global.HttpServerOptions.Certificates). I believe log.Fatal will exit the program. You either want Error and continue, or just Fatal.. for name, cert :=. break and unindent the rest. nit: don't call time.Now() multiple times (what if the program executes reeeeeally slowly?). Don't hard-code the defaults please, save and restore them instead. (this already bit us once with the apps/ one). Why is the replace necessary?. I would avoid spaces in the names, and use camelcase instead like WithoutCerts to be consistent with the parent test names. ?. <3 the small interface. please use sha256.Size * 2 for clarity. Actually, use if hex.DecodedLen(value) != sha256.Size and you can get rid of the comment, as it's obvious. Replace with _, err := hex.DecodeString(value); return err == nil\n(perhaps a bit slower, but much simpler and self-explanatory). please unexport. nit, but block can be defined inside the loop. Is a warning good for when nothing went wrong? Maybe Info?. unexport?. ?. Sounds good - was just a thought.. Sure, but I was just thrown off by your explicit setting of 0 as the capacity. If you don't care about performance, you can omit it or use []tls.Certificate{} and map[string]*tls.Certificate{}.. Then all of them are wrong :) all these should use EnabledForSpec, as per the interface contract.\nThis was probably done this way because the contract wasn't used properly before, which I fixed recently. Feel free to leave it like this though, as it won't be the only one to fix.. You can simplify this by just doing this logic in the for i, spec := range specs loop. All you would need is:\nif !spec.Active {\n            log.WithFields(logrus.Fields{\n                \"prefix\":   \"main\",\n                \"api_name\": spec.Name,\n                \"domain\":   spec.Domain,\n            }).Info(\"Skipping Inactive.\")\n                        loadList[i] = &ChainObject{Skip: true}\n            continue\n        }. nit: please space this, like {\"active\": true}. please undo this change. I'd prefer skipSpec, as otherwise it's hard to tell what true is used for without looking at the code. Added to my ever growing list of stuff to clean up ;). Why not allow this to be a file path too, like we do with others?\nIf you're only going to allow a base64 string, you can use []byte as a type and encoding/json already uses base64 implicitly.. ?. please don't say that this is a base64-encoded schema :) this should be in plaintext, and encoded as part of the test to simplify the code and help readability/maintainability.. I would honestly not log this, as this should be transparent to the user (and the message itself is internal).. I would just use an empty string directly in the call, given how it's not important.. no need for a var if it's used exactly once and doesn't help readability. nit: you can do this in a single line, like:\ndefer func() { foo = bar }(). I don't know what you mean. This field is only written once when loading the spec. And it is read any number of times later. There is no possibility for a data race here.\n\nAlthough, looking into this made me realise that this field is useless, as we only use it like a regular variable. So I'll simply make it one.. Err, scratch that, it is used, I just misused grep horribly.\nMy point above still stands. If you can reason the existance of a race, feel free to open an issue (with a race detector error, preferrably). But I don't see the point of making this PR bigger, as it is an unrelated change/fix.. We agree to disagree :) I simply don't like the name CamelCase/With_many_underscores, it seems unnecessary to mix the two styles.. did you delete this on purpose?. same as before. This field is never used. It can be removed, as well as the mapstructure stuff that decodes into it, and the type that defines ResponseTransformJQOptions.. The json decoder can't (or rather shouldn't) do the closing as it receives an io.Reader, not an io.ReadCloser.. This probably needs nesting in a sub-object, such as ConfigData. Otherwise, if you put \"APIID\": \"foo\" in the API definition, you'll overwrite the real APIID field.. Put the comment on its own line above to avoid one really long line. Why the vars?. whoops.. (fixed now). ?. It's not about github - I just wrap to 72 chars as a general rule. Perhaps not necessary here, but I'm consistent and it's automated.. I meant consistency with myself :) Perhaps a linter would be a good idea, if it was restricted to godocs. I don't think there is a tool for that.. Josh is right. In --debug, we don't set it to InfoLevel if the flag isn't set, so this is consistent.. I'd say this is a bit silly, given how it will only do something if the debug level is debug. Remove? Or just move it to the \"debug\" case.. However, you want to error if the config has something that is none of these, \"\", nor \"info\". You could do:\nswitch strings.ToLower(config.Global.LogLevel) {\ncase \"\", \"info\":\n    // default, do nothing\ncase \"error\":\n    log.Level = logrus.ErrorLevel\ncase \"warn\":\n    log.Level = logrus.WarnLevel\ncase \"debug\":\n    log.Level = logrus.DebugLevel\ndefault:\n    log.WithFields(...).Fatal(\"invalid log level in the config bla bla bla\")\n }\nOtherwise, setting \"log_level\": \"verbose\" or \"log_level\": \"debgu\" and such could cause confusion.. On second thought, I'd say just remove. If you set the debug log level, you'll see tons of debug logs anyway.. typo, and please space like // foo. or info. also include the string, like Fatalf(\"Invalid log level %q ...\", level)\nyou can reuse the var like:\nlevel := strings.ToLower(config.Global.LogLevel)\nswitch level { ... }. Because %q will double-quote the string (see https://golang.org/pkg/fmt/)\nSo then, for confusing\" instead of invalid log level    confusing\", expected ... you'll get invalid log level \"   confusing\\\"\", expected..... In practice both would work ok as I don't think anyone would put weird chars here. But we might as well make the fatal message more foolproof.. I would honestly go for tabs, but this is a war I don't want to get into. We use four spaces for JSONs everywhere (not just the gateway), so if we wanted to change it, it would need to be a consistent change. So not the time and place, I'm afraid.. Ah, very well seen.. done - it's 1 now.. is this on purpose? are you sure it's safe to remove?. We had an actual leak here as there were only two frees before, correct?. You should deduplicate these two, like if opt != false || opt != \"\" {. Note that you want tyk lint, not tyk --lint.\nIf kingpin doesn't handle this, you should use something like flag.Args() (the kingpin version of that).. Could you share the warning? This is likely a bug.. You're absolutely right - need to investigate further. This will likely be a go vet bug report :). On second thought, I'm retarded and vet is right.\nopt != false || opt != \"\" is always true, because opt == false && opt == \"\" can never happen. Not sure what you wanted to do with this logic, but it's different from the old one.. The default config has this as empty, and we handle empty as default (redis), hence the possible value here.. I wouldn't worry about nits at all, as this patch will be completely different once ported to master :)\nAnd yes, this is an interface.. This is a bit unnecessary.. This one too - you're writing a dozen lines of test for a single line of trivial code.\nIf you want to be sure that the middleware works, don't unit test every single part of it. Unit test the complex bits like you do below, and then do a full end-to-end test. Should be easy with httptest and loading a custom spec.. I would make this be just if subrouter == nil { - otherwise, we could be missing yet another subrouter == nil case.\nAnd if we did forget about a separate case, I'd rather have an incorrect warning logged than a crash.. I think this name is a tad confusing - you're getting the length of the api list (map), not the length of one api spec. Perhaps getNumApis, or apiSpecsLen?. What constant are you talking about? \"GET\", \"/sample\", or 200?\nAll three of them are short, so I'm not sure that named constants are necessary. net/http itself is full of \"GET\" literals, for example. The constants there are defined for consistency more than for usefulness.. Also worth noting that a typo in any of these literals would result in a test failure or panic, so I'm not too worried about the mistakes we could make either.. Well, this is what happens if you use a global. All the other api operations obtain a read lock. If we only use the lock for writes, it's absolutely useless.. I don't understand why this is needed - the tests don't run in parallel.. Also don't understand why these mutexes are needed. Do you have a race report that points directoy to the routers?. Perhaps undo these changes, as well as getApiSpecs. There is no change of behaviour that I see, and you're adding more code.. I also saw a race related to the JSVM, but it was because of the lack of a lock on apiSpecs. I'm fairly sure that a lock here isn't necessary. Do you have a race report on master that points directly here?. unused func.. Nit, but I'd keep the constants as they were - next to each other. They're very closely related, so it's useful.. Sure, but you could still have it there under upstreamCacheTTLHeaderDefault or something similar.. Sure - but with this PR, the middleware does not run all the time. It only runs if caching is enabled.\nAnd when it's enabled but only for some cases, the cases that end up not having the caching run the middleware for very little time. They are discarded very early on in ProcessRequest.\nI think it is best if we just keep it simple, as we have clearly fucked it up once already. And the even more complex logic would still have edge cases. For example, what if caching is enabled, but CacheAllSafeRequests is false and there are no cached extended paths? I'm not that sure that the middleware should be removed entirely in such a case.\nOr, to put it another way, what would EnableCache even be for, if we didn't rely on it here?. To clarify - I also started tweaking the current heuristic, instead of just reducing it to the one bool field. But after thinking about it a little bit, I realised it was silly and overly complex.. ",
    "peterhurford": "I see that the version number is now at the top-left of the dashboard. Nice!. :+1: We've encountered this. ",
    "saaqibz": "Hi Martin,\nI'm using the tyk dropbox application so it's not really all that straightforward to change the tyk_analytics file. I found a workaround where I'll just use the listen_path, but I'll investigate later to see if I can make the change that you mentioned.\nWhat I was really hoping is that the listen_path field in the dashboard would be editable as the text field suggests that you can update it and click update. This feature used to work before but for some reason it stopped working after the most recent update. When I have time to play around a bit I'll get back to you about the adjustment to the tyk analytics conf file.\n. You're the best Martin. :) Thanks a ton!\nOn Sun, Jul 5, 2015 at 12:59 PM, Martin Buhr notifications@github.com\nwrote:\n\nI've pushed an update - Dashboard 0.9.5.2 to our releases page and our\ndocker repository that addresses the problem. LIsten path should now be\neditable without resorting to switching off API default safety.\nYou may need to wait a while for the docker hub container to build and\nupdate though. But you should be able to just docker pull -u to update it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lonelycode/tyk/issues/75#issuecomment-118644306.\n\n\nS. Alexander Zaman\n-Sent from my Droid\n. ",
    "adrien-f": "Thanks for the quick reply, I'll watch out for any changes then !\n. ",
    "krzysztofantczak": "Well, since i'm just starting with tyk, i can only tell if it works or not - can't give much details yet - i think. Thanks for binaries! ;-)\n. ",
    "r-kozak": "Thank you for answer!\n. ",
    "4lyn": "Great\nThanks\n2015-09-02 11:00 GMT+02:00 Martin Buhr notifications@github.com:\n\nClosed #91 https://github.com/lonelycode/tyk/issues/91.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lonelycode/tyk/issues/91#event-398684553.\n. \n",
    "james4e": "My installation had the same issue. I changed to  \"mongo_url\": \"mongodb://127.0.0.1/tyk_analytics\". It works.\n. ",
    "emonik": "My Setup had the same issue, I changed the config to 127.0.0.1 instead of localhost ... & it worked\n. ",
    "lomori": "+1\n. 4) I followed the setup instructions. If the domain name is \"forced\" there then that's what I got. Have you tried that with the latest version of TYK? In any case. how can make it more generic?\n. Yes, some light, finally I can access the dashboard outside my VM...\n. ",
    "hsen-dev": "+1\n. ",
    "czerwina": "Oauth2 support would bd a game changer. I'd love to help but not a golang programmer. Would someone be willing to make a beta version with all the flows turned on? I assume this uses redis for token storage?\n. Cool - thanks for the update\n. ",
    "allenmoatallen": "Do you have plans for the Client Credential flow?\n. Based on the list looks like it would be the next to be looked at given that you said Implicit and Auth are already supported. That's good news. If I knew GO I would try to contribute but I think it is a bit beyond my skill.\n. ",
    "gtrias": "Thank you for the explanation. I think could be great if the documentation would explain how to use the Tyk OAuth2 Flow, i.e I didn't know I had to put Basic Auth header with client_id:secret keys..\n. Yeahh! I've changed the python calls on setup.sh to python2 and now it works like charm.\nThanks a lot :)\n. ",
    "nazarhussain": "@lonelycode I am trying this curl request: \nbash\n  curl -X POST http://company.cloud.tyk.io/api/oauth/token/ \\\n    --header \"Authorization: Basic md5_of_client_id:client_secret\" \\\n    --data \"grant_type=password\" \\\n    --data \"username=username\" \\\n    --data \"password=password\"\nIts giving me the error: \njson\n{\"error\":\"invalid_request\",\"error_description\":\"The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed.\"}\nI had enabled \"Password Access Type\", as per your comment on https://github.com/TykTechnologies/tyk/issues/93#issuecomment-140101815 it seems perfect but not working for me. \nCan you please highlight what's wrong in it? \n. Yes you are right. It was mistake by me. I corrected it and it is working fine. \nbash\ncurl -X POST http://company.cloud.tyk.io/api/oauth/token/ \\\n    --header \"Authorization: Basic base64_of_client_id:client_secret\" \\\n    --data \"grant_type=password\" \\\n    --data \"username=username\" \\\n    --data \"password=password\"\nOne thing I noticed further is I use url http://company.cloud.tyk.io/api/oauth/token/ it works fine. If I remove trailing slash and use http://company.cloud.tyk.io/api/oauth/token it gave Requested endpoint is forbidden. Why should it be like this? \n. @lonelycode Sorry to make this issue as discussion board. But I am working on a scenario and need to implement it. \nWith password flow, is it possible that tyk add a header entries into request for all tags and meta data associated to authenticated key(username/password) before passing to my backend api? \n. I would look forward to get this change in next release so I can update my installation to use it. When it is expected the next release? \n. Initially I refactored tyk own OAuthClient structure to support multiple URIs. Later I noticed that feature in osin and I used it. \n. Coming this PR in favour to https://github.com/TykTechnologies/tyk/pull/286\n. @lonelycode The tests are failing against develop branch. Can you see the issue. I only see following error in the travis. \n```\ngopkg.in/gemnasium/logrus-graylog-hook.v2\n../../../gopkg.in/gemnasium/logrus-graylog-hook.v2/graylog_hook.go:87: too few values in struct initialiser\n```\n. Related to this feature we also have to make changes in Tyk Dashboard. So for multiple urls we show textbox instead of text input field for oAuth clients. \nAlso updating multiple URLs is a frequent use case, so we need to gave a feature there to update existing oAuth clients as well. How an I contribute in it? \n. Even if oauth_redirect_uri_separator is not set, we still can develop the feature for updating the oath client and also change text field to textbox. Since even right now long urls does not fit into that text field. \n. @lonelycode Thanks for merging it. What's the plan for next release that includes this feature. \n. Done. Build passed. \n. ",
    "ashee": "Any chance OAuth 2 client_credentials can be implemented? I need something like - https://dev.twitter.com/oauth/application-only or http://docs.apigee.com/api-services/content/oauth-20-client-credentials-grant-type\n. CentOS 7.2 - nothing under /var/log\nsh\n[ashee@ip-172-20-36-31 apps]$ ls /var/log\nanaconda        cloud-init-output.log  dmesg.old         maillog-20160327   monit.log        secure-20160320   tallylog\naudit           cron                   httpd             messages           nginx            secure-20160327   tomcat\nboot.log        cron-20160313          lastlog           messages-20160313  ppp              spooler           tuned\nbtmp            cron-20160320          maillog           messages-20160320  redis            spooler-20160313  wtmp\nchrony          cron-20160327          maillog-20160313  messages-20160327  secure           spooler-20160320  yum.log\ncloud-init.log  dmesg                  maillog-20160320  mongodb            secure-20160313  spooler-20160327\n. Using journalctl to see logs - how do I change log level to debug? \nsh\n[ashee@ip-172-20-36-31 apps]$ sudo journalctl -u tyk-gateway -f\n[sudo] password for ashee:\n-- Logs begin at Sat 2016-03-26 22:25:07 UTC. --\nMar 28 15:19:05 ip-172-20-36-31.us-west-2.compute.internal tyk[538]: time=\"2016-03-28T15:19:05Z\" level=info msg=\"----> Checking security policy: Open\"\nMar 28 15:19:05 ip-172-20-36-31.us-west-2.compute.internal tyk[538]: time=\"2016-03-28T15:19:05Z\" level=info msg=\"--> Loading API: pype\"\nMar 28 15:19:05 ip-172-20-36-31.us-west-2.compute.internal tyk[538]: time=\"2016-03-28T15:19:05Z\" level=info msg=\"----> Tracking: (no host)\"\nMar 28 15:19:05 ip-172-20-36-31.us-west-2.compute.internal tyk[538]: time=\"2016-03-28T15:19:05Z\" level=info msg=\"----> Checking security policy: Open\"\nMar 28 15:19:05 ip-172-20-36-31.us-west-2.compute.internal tyk[538]: time=\"2016-03-28T15:19:05Z\" level=info msg=\"--> Loading API: p\"\nMar 28 15:19:05 ip-172-20-36-31.us-west-2.compute.internal tyk[538]: time=\"2016-03-28T15:19:05Z\" level=info msg=\"----> Tracking: (no host)\"\nMar 28 15:19:05 ip-172-20-36-31.us-west-2.compute.internal tyk[538]: time=\"2016-03-28T15:19:05Z\" level=info msg=\"----> Checking security policy: Open\"\nMar 28 15:19:05 ip-172-20-36-31.us-west-2.compute.internal tyk[538]: time=\"2016-03-28T15:19:05Z\" level=info msg=\"Loading uptime tests...\"\nMar 28 15:19:05 ip-172-20-36-31.us-west-2.compute.internal tyk[538]: time=\"2016-03-28T15:19:05Z\" level=info msg=\"Loaded 0 policies \"\nMar 28 15:19:05 ip-172-20-36-31.us-west-2.compute.internal tyk[538]: time=\"2016-03-28T15:19:05Z\" level=info msg=\"API reload complete\"\n. In RHEL/CentOS 7, tyk-gateway is launched by systemd. That would require editing the service unit file - is there another way? \n``` sh\n[ashee@ip-172-20-36-31 ~]$ sudo vim /etc/systemd/system/multi-user.target.wants/tyk-gateway.service\n[Unit]\nDescription=Tyk API Gateway\n[Service]\nType=simple\nUser=root\nGroup=root\nExecStart=/opt/tyk-gateway/tyk --conf=/opt/tyk-gateway/tyk.conf --debug\nRestart=always\n[Install]\nWantedBy=multi-user.target\n```\n. Any chance I can suppress all the logs coming from the periodic polling? \nsh\nDEBU[3015] [HOST CHECK MANAGER] Purging uptime analytics\nDEBU[3015] Getting from: tyk-uptime-analytics\nDEBU[3015] Getting raw key set: tyk-uptime-analytics\nDEBU[3015] keyName is: tyk-uptime-analytics\nDEBU[3015] Input key was: host-checker:tyk-uptime-analytics\nDEBU[3015] Fixed keyname is: host-checker:tyk-uptime-analytics\nDEBU[3015] Getting raw key set: tyk-system-analytics\nDEBU[3015] keyName is: tyk-system-analytics\nDEBU[3015] Input key was: analytics-tyk-system-analytics\nDEBU[3015] Fixed keyname is: analytics-tyk-system-analytics\nDEBU[3015] Analytics returned: [[] 0]\nDEBU[3015] Unpacked vals: []\nDEBU[3015] Analytics returned: [[] 0]\nDEBU[3015] Unpacked vals: []\n. Ok - thanks. I am troubleshooting why the api that I imported from apiary blueprint is not working. I keep getting 404 not found. The ones I have created manually works. Any pointers? \n. Pardon me - I am new to tyk. Can you please show me how to do a hot reload? \n. Ah found it - https://tyk.io/v1.9/rest-api/hot-reload/\n. ",
    "ibondare": "+1 - I don't see any useful information on supporting the client credentials flow in the latest release. . Thanks! Perhaps I am overlooking in it, but where exactly do I provision the client_id and client_secret for my API consumers? . Got it. Thank you! Perhaps the documentation could be improved a bit? Specifically, once I have the client_id and client_secret, what is the target URL for my API consumers to obtain OAuth tokens? Assuming that my API is exposed by the Tyk proxy at http://localhost:8080/widgets/, is it http://localhost:8080/widgets/oauth/token, or something else?. Had anyone else out there got the client credentials flow documented? I must be the slowest person on here :) Looking at the Golang example, I am starting to question whether or not OAuth 2 client credentials flow works out of the box at all. The example creates a Tyk session, is aware of the policy ID. I want my API consumers to obtain OAuth tokens with no extra code on the backend, given that the API consumer is in a possession of a valid, Tyk-generated cilent_id and client_secret value. So far, I see no way to do that. It's a showstopper for me.\nP.S. lonleycode - I appreciate your willingness to help, and your timelines, very much.\n. Thank you, that helped a bit, but I see that your test passes an Authorization header with a Basic value set in it. What's that for? My Tyk gateway rejects the request to /widgets/oauth/token with \n{\n    \"error\": \"Authorization field missing\"\n}\nwithout the header. Again, in the client credentials flow, what's the point of the Authorization header? I am confused...\nAny further info on it? Thanks.. Thanks! Got it. It would be worth while to document how you guys handle that at some point... The code in your test does both - the form encoded client_id and client_secret, and then the header (thanks for the explanation). Looking at that, people will assume that either form works, but only the Authorization header does...\n. ",
    "nchapon": "Hello, I am blocked with client_credentials flow !\nWhen I try to get an access token I have a 403 : \n{\n  \"error\": \"Requested endpoint is forbidden\"\n}\nMy query with my API /catalog\ncurl -i -X POST \\\n--url http://localhost:8080/catalog/oauth/token/ \\\n--data \"client_id=c51666e49bc34be96bc0142e5d34fcc6\" \\\n--data \"client_secret=MTBhZGNmZTMtZGQzOC00NjBmLTU1MzEtZjZhMzA5OGQzMDU0\" \\\n--data  \"grant_type=client_credentials\"\nAny suggestions ?\nThanks\n. ",
    "yoanisgil": "Great. It will be nice if we could support at least the two latest versions. Will look into it. I am not a big fan of using latest so I will update and make that more explicit.\n. Thanks @lonelycode ! I will take a t look and let you know. For now I have a use case where I need this transformation in a query string parameter but I do have another one which requires adding an Authorization header to the proxified request. I will keep in you the loop.\n. @lonelycode  when I go here: \nhttps://tyk.io/v1.8/plugins/plugin-overview/\nand click on Tyk JavaScript API\u201d section I get a page saying the The page you are looking for cannot be found.  Any ideas?\n. According to the definition documentation here:\nhttps://tyk.io/v1.8/plugins/middleware-scripting/\na custom middleware must be added to the API definition but I am not sure how to do so given that I've created my API through the portal. When I look into the gateway container I do not see any file containing my API definition.\n. Ok,\nSo I found out how to configure a middleware for an definition which has been stored in the mongo database. However I haven't an issue getting this custom middleware actually working, it looks like this:\n``` js\n// ---- Sample middleware creation by end-user -----\nvar sampleMiddleware = new TykJS.TykMiddleware.NewMiddleware({});\nsampleMiddleware.NewProcessRequest(function(request, session) {\n    //log(JSON.stringify(request));\n    //log(JSON.stringify(session.meta_data));\n    //request.AddParams[\"api_key\"] = session.meta_data['ho_apikey'];\n    return sampleMiddleware.ReturnData(request, session.meta_data);\n});\n// Ensure init with a post-declaration log message\nlog(\"Sample middleware initialised\");\n```\nbut this yields an error:\ntime=\"2015-09-25T17:47:27Z\" level=debug msg=\"SessionState: {0 59 60 60 0 3600 1445723247 3599 2520000 map[ff6a98aef61d4dfc41264b9ff0b01c0e:{HasOffers ff6a98aef61d4dfc41264b9ff0b01c0e [v1] []}] 56046649b12afc0001000001  {} false  false 5605511fb12afc0001000006 0 {[]} map[tyk_developer_id:56055845b12afc000100000e tyk_key_request_fields:map[] tyk_user_fields:map[]] [default]}\" \ntime=\"2015-09-25T17:47:27Z\" level=debug msg=\"[STORE] SET Raw key is: 56046649b12afc0001000001f6e8f698124e4e267a6ea66fba80fa6b\" \ntime=\"2015-09-25T17:47:27Z\" level=debug msg=\"No allowed URLS\" \ntime=\"2015-09-25T17:47:27Z\" level=debug msg=\"Input key was: apikey-066031b5\" \ntime=\"2015-09-25T17:47:27Z\" level=debug msg=\"[STORE] Setting key: apikey-066031b5\" \ntime=\"2015-09-25T17:47:27Z\" level=debug msg=\"Rewriter started, stat was: \" \ntime=\"2015-09-25T17:47:27Z\" level=debug msg=\"Input key was: apikey-066031b5\" \ntime=\"2015-09-25T17:47:27Z\" level=error msg=\"Failed to decode middleware request data on return from VM: json: cannot unmarshal object into Go value of type string\" \ntime=\"2015-09-25T17:47:27Z\" level=debug msg=\"{\\\"Request\\\":{\\\"AddParams\\\":{},\\\"Body\\\":\\\"\\\",\\\"DeleteHeaders\\\":[],\\\"DeleteParams\\\":[],\\\"Headers\\\":{},\\\"SetHeaders\\\":{},\\\"URL\\\":\\\"/ff6a98aef61d4dfc41264b9ff0b01c0e/\\\"},\\\"SessionMeta\\\":{\\\"tyk_developer_id\\\":\\\"56055845b12afc000100000e\\\",\\\"tyk_key_request_fields\\\":{},\\\"tyk_user_fields\\\":{}}}\"\nany ideas?\n. Turns out the issue was with this two metadata fields:\n- tyk_key_request_fields\":{}\n- tyk_user_fields:{}\nwhich are present by default ;) but they cannot be unmarshalled into JSON given that SessionMeta is a map[string]string:\nhttps://github.com/lonelycode/tyk/blob/master/plugins.go#L31\n. This is how I ended up implementing the middlewares:\nhttps://gist.github.com/yoanisgil/869f131a3d5aa97816db\nhttps://gist.github.com/yoanisgil/6f58179989303f21e1c1\nSince I was using tyk with docker/compose I had to updated the API definition in mongodb:\n``` bash\n$ docker exec -ti tykquickstart_tyk_mongo_1 /bin/bash\nroot@mongo:/# mongo\nMongoDB shell version: 3.0.6\nconnecting to: test\nServer has startup warnings: \n2015-09-25T20:55:58.640+0000 I CONTROL  [initandlisten] \n2015-09-25T20:55:58.640+0000 I CONTROL  [initandlisten]  WARNING: /sys/kernel/mm/transparent_hugepage/defrag is 'always'.\n2015-09-25T20:55:58.640+0000 I CONTROL  [initandlisten]         We suggest setting it to 'never'\n2015-09-25T20:55:58.640+0000 I CONTROL  [initandlisten] \n\nuse tyk_analytics;\nswitched to db tyk_analytics\ndb.tyk_apis.update({\"name\": \"Has Offers\"}, {$set: {\"custom_middleware\":{\"pre\":[],\"post\":[{\"name\": \"hasOffersMiddleware\", \"path\": \"middleware/hasoffers.js\", \"require_session\": true}],\"response\":[]}}})\n```\n. Yeah it was a bit of a pain but luckily the code was there so eventually I ended up figuring everything out. Can you send me a link to those lines of code explaining that undocumented behaviour. Once the files are in place do I need to restart Tyk? \n\nBTW once of the issues I had most trouble with was the fact that the name of the middleware needs to match the name of the variables in the JS file .... \nBests,\nYoanis\n. Ok. I will take a look but it did not look like there's a UX/UI flow in the portal which lets you do that. Is that correct?\n. @lonelycode that's precisely what I wanted to avoid (i.e a developer having to manage multiple keys that represent different groups). Say I have two API:\n- Weather API (which uses a third-party weather API)\n- Customer Service API (which is an in-house API)\nWouldn't it be a nice to have if developers could just create an API group or application, say \"My Cool Application\" and have the APIs described above to be part of such application and consume them using the same API key? I think the users would benefit from a simplified workflow, not to mention that there won't be the need for a human to plumb all the stuff required through the creation of policies, etc (because it would be automated at subscription time).\nI think it's an idea worth looking into it since it adds a higher level of abstraction which favours API composition and re-use. If you think it's a good idea I will be more than happy helping to implement this ;)\nBests,\nYoanis.\n. @lonelycode is this available for Docker? I kinda need a similar feature, not urgent though, and I could give it a try.\n. Maybe I'm late to the discussion but I took a shortcut and configured a reverse proxy in front of the Dashboard/Gateway. The admin looks like this:\n```\nserver {\n    listen   443;\nssl    on;\nssl_certificate /etc/ssl/certs/domain-bundle.crt;\nssl_certificate_key /etc/ssl/private/domain-private.key;\n\nserver_domain dashboard-server;\n\nlocation / {\n    proxy_pass http://tyk_dashboard:3000;\n}\n\n}\n```\nand this is the config for  the gateway:\n```\nserver {\n    listen   443;\nssl    on;\nssl_certificate /etc/ssl/certs/domain-bundle.crt;\nssl_certificate_key /etc/ssl/private/domain-private.key;\n\nserver_name gateway-server;\n\nlocation / {\n    proxy_pass http://gateway:8080;\n    proxy_set_header Host            $host;\n    proxy_set_header X-Forwarded-For $remote_addr;\n}\n\n}\n```\nthe reverse proxy is also running on a container. I'm using this setup for our staging environment and it seems to do the job ;)\n. @senj \nYes, these are wildcard certificates. So for instance if you own mydomain.com for which you also have wildcard certificates, the configuration will look like this:\n```\nserver {\n    listen   443;\nssl    on;\nssl_certificate /etc/ssl/certs/mydomain.com-bundle.crt;\nssl_certificate_key /etc/ssl/private/mydomain.com-private.key;\n\nserver_domain admin.mydomain.com;\n\nlocation / {\n    proxy_pass http://tyk_dashboard:3000;\n}\n\n}\nserver {\n    listen   443;\nssl    on;\nssl_certificate /etc/ssl/certs/mydomain.com-bundle.crt;\nssl_certificate_key /etc/ssl/private/mydomain.com-private.key;\n\nserver_name gateway.mydomain.com;\n\nlocation / {\n    proxy_pass http://gateway:8080;\n    proxy_set_header Host            $host;\n    proxy_set_header X-Forwarded-For $remote_addr;\n}\n\n}\n```\nYou're not forced to use wildcard certificates, as they also cost a little more money, as long as they are valid for the domains declared Nginx's directive server_name. As for proxy_pass and proxy_header notice they are only preset for the gateway configuration, which is the one responsible for forwarding API calls. The reason I went for this is because I'm using the domain listen option when defining my API(s). I guess you can just remove those instructions if you're just using the listen paths option. \nAnyhow this is just my 2 cents on the subject.I find it a bit more easier to deal with and as you said you gain a lot by having Nginx taking care of performing SSL termination, cache, logging and all the cool stuff it comes with ;).\n. @senj \nIf you configure your gateway like this:\n```\nserver {\n    listen   443;\nssl    on;\nssl_certificate /etc/ssl/certs/mydomain.com-bundle.crt;\nssl_certificate_key /etc/ssl/private/mydomain.com-private.key;\n\nserver_name gateway.mydomain.com;\n\nlocation / {\n    proxy_pass http://gateway:8080;\n    proxy_set_header Host            $host;\n    proxy_set_header X-Forwarded-For $remote_addr;\n}\n\n}\n```\nthen you should be able to see at https://gateway.mydomain.com/portal/ (do not forget the trailing slash ;)).\n@lonelycode is this setup something you would recommend for production? One of the reasons I like this is because I'd love to have Tyk deploying in production using Docker. With the addition of multi host networking and the aid of Compose  I believe it should be quite easy to get Tyk up and running in production. What do you think?\n. Yes. But make sure you followed the instructions here:\nhttps://tyk.io/v1.9/setup/docker/\nespecially the part where you replace localhost by ambassador_1;)\n. Weird .. @lonelycode any ideas? I followed the docker setup and everything worked as expected. Did you try starting over from scratch?\n. @senj it looks to me like one of the containers is not running. What does your config looks like? On which container do you see the error?\n. @JosephEarl the only problem I see with that is that users will be forced to use Docker >= 1.10 (which is quite recent BTW). Anyhow that might not be a concern on a development environment, but yet seems a bit restrictive. I still don't see what went wrong with @senj 's setup though it will be nice if we could reproduce his use case.\n. I think that might work. However it stills bug me why 1.9 won't work for @senj ...\n. ",
    "JnMik": "Yup that page could definitely answer my needs, if I could make it work aha.\nI generated an api key from the Developer Portal - Api Catalogue.\nI runned a dozen of successful curls with that key, but the admin panel doesn't \nshow any hits for that usage.\nI think the stats are supposed to be instant like they are in the \"Endpoint popularity\" right ? \nSo I must have something not working on my end..\nAn idea what it might be ? \n. Hmm the API use Auth Token and the curls look like this :\ncurl  --header \"authorization: 55e9af64c4545d0001000001af5e6a8f6ad940986caea4b7b8358060\" \"http://dk1.jmcyr.dev.lan:8080/mailing/1.0/ping\"\nresponse : {\"status\":\"OK\"}\n. The API is set to use the auth token yes.\nhttp://screencast.com/t/3WMAEirVEr\nhttp://screencast.com/t/bTu5HA7J\nThe activity by key is also increasing : \nhttp://screencast.com/t/1I2KAWr4dxs\n. Hmm I just leave the office, but I'll give you more intel on this on tuesday for sure :)\n. Awesome, I'll check this out :)\nHave a good weekend ! \n. Yeah we need this as well. \nI did a workaround like this for the moment, but i'm bypassing the Built-in versioning feature : http://screencast.com/t/aeGF3Frree6\n. @senj\nproxy_set_header Host $host; tell the reverse-proxy to forward the client \"Header: host\" to the backend server\ngateway-server and dashboard-server are only hostnames that Yoanis use on his machine, they are proxied to tyk_dashboard:3000 and gateway:8000 respectively.\n. ",
    "geoand": "Thanks for the update!\nI'll check back soon :)\n. Awesome! Thanks!\n. Thanks for the heads up!\nI am updating the Docker Images and will check ASAP\n. Works like a charm!\nThanks once again!\n. ",
    "AlexGiovanentti": "Would your proposed solution pass-through the chunks of data as they are received or wait till the end of the stream?\nCase Study:\nWe have an endpoint that uses Transfer-Encoding: chunked; to continuously send chunks of data with updates on any changes to the price of a stock. The stream does not have a deterministic end. The expected api gateway behavior would be to pass through the chunks of data as they are received from the upstream server.\nWhen visiting this endpoint through a browser like chrome the chunks of data are rendered as they are received.\nWhen visiting this endpoint in the same manner but through the gateway the browser waits and eventually displays a 504 Gateway Time-out nginx/1.9.4.\nWe experience this before and after the proposed change to the tyk.conf property close_connections.\n. I can provide a streaming endpoint. Would you have a public email I can send this information to? Or you can email me at alex@alexgiovannetti.com and I can reply with the info.\n. I deployed 1.8.3.2 and set the flush_interval setting: 1\nhowever when I hit a streaming endpoint through Tyk now it spins for a little while and then alerts with the following error:\nChome: ERR_INCOMPLETE_CHUNKED_ENCODING\nFiddler: 210 Transfer-Encoding: Chunked response did not terminate with a proper zero-size chunk\nIs there anything else I need to set or update besides the flush_interval setting?\n. I set close_connections to false and the issue still persists\n. I reverted close_connections from false to true, same results.\nI have also emailed you some test endpoints and their results\nThe following is the tyk.conf from the tyk_gateway docker container\n{\n    \"listen_port\": 8080,\n    \"secret\": \"352d20ee67be67f6340b4c0605b044b7\",\n    \"template_path\": \"./templates\",\n    \"tyk_js_path\": \"./js/tyk.js\",\n    \"middleware_path\": \"./middleware\",\n    \"use_db_app_configs\": true,\n    \"app_path\": \"./apps/\",\n    \"storage\": {\n        \"type\": \"redis\",\n        \"host\": \"redis\",\n        \"port\": 6379,\n        \"username\": \"\",\n        \"password\": \"\",\n        \"database\": 0,\n        \"optimisation_max_idle\": 100\n    },\n    \"enable_analytics\": true,\n    \"analytics_config\": {\n        \"type\": \"mongo\",\n        \"csv_dir\": \"/tmp\",\n        \"mongo_url\": \"mongodb://mongo:27017/tyk_analytics\",\n        \"mongo_db_name\": \"tyk_analytics\",\n        \"mongo_collection\": \"tyk_analytics\",\n        \"purge_delay\": 10,\n        \"ignored_ips\": []\n    },\n    \"health_check\": {\n        \"enable_health_checks\": true,\n        \"health_check_value_timeouts\": 60\n    },\n    \"optimisations_use_async_session_write\": true,\n    \"allow_master_keys\": false,\n    \"policies\": {\n        \"policy_source\": \"mongo\",\n        \"policy_record_name\": \"tyk_policies\"\n    },\n    \"hash_keys\": true,\n    \"close_connections\": true,\n    \"http_server_options\": {\n        \"flush_interval\": 1\n    }\n}\n. Hi Martin, got it working. Thank you for your time on this issue!\n. ",
    "johnjelinek": "@lonelycode: I've got:\n\"close_connections\": false,\n  \"http_server_options\": {\n    \"flush_interval\": 1\n  }\nin the tyk.conf and chunked streams don't seem to be working for me. How can I troubleshoot?\n. nvm, I forgot to add --compressed to curl. My bad.\n. I believe they are linked to the same policy.\nOn Dec 9, 2015 3:01 PM, \"Martin Buhr\" notifications@github.com wrote:\n\nNote to self: add validation.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/TykTechnologies/tyk/issues/146#issuecomment-163390700\n.\n. I dunno, I thought it would work.\n. There another challenge. If I have only 2 policies and 2 APIs, I have to create a 3rd policy in order to switch them because of the change selection. I can't select none and if I select the same as the other API then the problem persists where only 1 catalogue loads.\n\n\u2014\nSent from Mailbox\nOn Wed, Dec 9, 2015 at 3:23 PM, Martin Buhr notifications@github.com\nwrote:\n\nThat'll be it - generate a new policy and link it to the first API Catalogue entry, save it, and editing will work again.\nWill leave this open as we should handle this gracefully :-)\nWhy is the same policy set up for the two different API entries?\nReply to this email directly or view it on GitHub:\nhttps://github.com/TykTechnologies/tyk/issues/146#issuecomment-163395696\n. My preference is to only have the tyk gateway (via docker) without the dashboard. Right now, the main parts that interest me are load balancing, service discovery, and proxying. I want to use tyk as a component to my overall application and don't have much use for additional users or other management/analytics (yet). I don't mind having a dependency on redis or mongo, but I don't need the portal.\n\nSo, I need to use the advanced api in order to programmatically add APIs into tyk?\n. even this tyk.conf still relies on mongo.\n{\n  \"listen_port\": 8080,\n  \"secret\": \"352d20ee67be67f6340b4c0605b044b7\",\n  \"template_path\": \"/opt/tyk-gateway/templates\",\n  \"tyk_js_path\": \"/opt/tyk-gateway/js/tyk.js\",\n  \"middleware_path\": \"/opt/tyk-gateway/middleware\",\n  \"use_db_app_configs\": false,\n  \"app_path\": \"/opt/tyk-gateway/apps/\",\n  \"storage\": {\n    \"type\": \"redis\",\n    \"host\": \"redis\",\n    \"port\": 6379,\n    \"username\": \"\",\n    \"password\": \"\",\n    \"database\": 0,\n    \"optimisation_max_idle\": 100\n  },\n  \"enable_analytics\": false,\n  \"analytics_config\": {\n    \"type\": \"csv\",\n    \"csv_dir\": \"/tmp\",\n    \"purge_delay\": 10,\n    \"ignored_ips\": []\n  },\n  \"health_check\": {\n    \"enable_health_checks\": true,\n    \"health_check_value_timeouts\": 60\n  },\n  \"optimisations_use_async_session_write\": true,\n  \"allow_master_keys\": false,\n  \"policies\": {\n    \"policy_source\": \"mongo\",\n    \"policy_record_name\": \"tyk_policies\"\n  },\n  \"hash_keys\": true,\n  \"close_connections\": false,\n  \"http_server_options\": {\n    \"flush_interval\": 1\n  }\n}\ntyk_gateway_1 | time=\"2015-12-16T19:30:35Z\" level=error msg=\"Mongo connection failed:no reachable servers\"\ntyk_gateway_1 | time=\"2015-12-16T19:30:47Z\" level=error msg=\"Mongo connection failed:no reachable servers\"\ntyk_gateway_1 | time=\"2015-12-16T19:30:58Z\" level=error msg=\"Mongo connection failed:no reachable servers\"\ntyk_gateway_1 | time=\"2015-12-16T19:31:10Z\" level=error msg=\"Mongo connection failed:no reachable servers\"\ntyk_gateway_1 | time=\"2015-12-16T19:31:21Z\" level=error msg=\"Mongo connection failed:no reachable servers\"\nHow do I prevent tyk gateway from searching for mongo? (btw do you have an irc / slack / gitter channel?)\n. nvm, I think it's because I had policies.policy_source = \"mongo\".\n. All is well now with file-based, thanks!\n. ",
    "manjeshpv": "In browerser I'm getting a cors issue\n\noptions Request header field Authorization is not allowed by Access-Control-Allow-Headers in preflight response.\nI tried to add header in tyk -> System Management -> Apis -> Edit -> Advanced Options\n\n. @lonelycode Thank you for response, My Issues Solved. I tried so much permutation and combination with headers in tyk advanced options and my code. Now everything working fine. \n1. My issues is specifically with OPTIONS method. I enabled all required CORS headers in my code(.htaccess and PHP).\n2. No issues with header\n3. Thanks for explaining what is options passthrough.\n\nBut if I disable passthrough and update \n\nBelow error will come\n\nI read some articles about preflight requests. But I'm not able to understand why  OPTIONS PASSTHROUGH . Please give me any link of the documentation. Its not found in https://cloud.tyk.io/docs/api-management/advanced-options/\n. @lonelycode : Thank you so much for you interest on my questions, No issues if you open app in teambnw[.dot]com This is demo app or POC for micro services Architecture(Learning). \nTyk cloud is responding because I enabled passthrough.\nAs per my code show below. My angularjs client or browser want \n1. Access-Control-Allow-Headers: Authorization, Content-Type\nAuthorization for Login Enabled in client\nContent-Type is for swagger(in developer portal)\n2. Same origin\nphp\n header('Access-Control-Allow-Headers: Authorization, Content-Type');\nif(array_key_exists(\"HTTP_ORIGIN\",$_SERVER)) {\n                $ref = $_SERVER[\"HTTP_ORIGIN\"];\n                header(\"Access-Control-Allow-Origin: $ref\");\n            }\nQuestion 1: But I don't know, How to send response headers for OPTIONS request in Advanced Options -> CORS. If possible, tell me how to return same origin as per the request(shown in above php code)\nQuestion 2: Please send me any articles about how to setup service discovery with etcd and  load balancer. I able to setup service discovery. But not able to to load balancing.\njs\n{\n    \"node\" : {\n        \"value\" : \"http://teambnw.com/beatlebuddyapi\"\n    },\n    \"target_list\" : [\"http://mobile.teambnw.com/beatlebuddyapi\", \"http://teambnw.com/beatlebuddyapi\"]\n}\n\nWith above setting 502 Bad Gateway Error\n. ",
    "senj": "I wonder if a policy can really grant access to and manage multiple APIs.\nThe dashboard states on key creation: \nAll keys can be assigned to a policy, a policy determines the rate limits and quota assigned to a key. Policies override manual settings. so no word about access rights.\nIt's also impossible to create a key without access rights (is there a setting i missed?)\nFailed to create key, keys must have at least one Access Rights record set.\n. Any update on this?. Ok that was great thank you!\nBut I think I have a real proxy-problem now\nhttp: proxy error: dial tcp 54.175.222.246:80: i/o timeout\"\nIf I access the ip directly via browser, it works.\n. Ok I changed names of dashboard and gateway and the first error got solved.\nDo I have to change the other names too? There is no nameing in docker-compose.yml (I'm using the quickstart one)\nI tried accessing the address from within gateway and ambassador container (which one do I have to use?) but in both cases: connection timeout.\nThis is a good hint.. if I set proxy ENV inside the container i get Could not resolve proxy. That's a step forward(?)\n. Ah, I change API definition with ambassador_1, but my container was named compose_ambassador_1\n. Yes this is what I've done.\nIf I curl from within the gateway container to tyk itself (127.0.0.1:3000) it works\nIf I curl from within the gateway container to \"my raw api\" (google.de), I'll get a timeout (there was a problem proxying the request).\nIf I set ENV for http_proxy/https_proxy (although tyk won't work with those proxy settings) I recieve curl: (5) Could not resolve proxy: url of my proxy\n\n. Ok thank you for your help so this seems to be a firewall problem. I'll ping back if I got it solved. Thank you very much.\n. Ok, nice!\nThanks.\n. great, thank you\n. I'm seeing the same issue when trying to request a key.\n. Great work, will try this tomorrow, thanks for sharing. \n. As we also want an http cache in front of the gateway this seems to be a viable solution.\nCan you please explain\nserver_domain dashboard-server;\nwhat is dashboard-server / gateway-server?\nIs domain-bundle a wildcard certificate / on which CN / are they in the trusted store?\nDoes this \nproxy_set_header Host $host;\ninfluences the routing at the gateway? i want to use path based routing.\nThanks ..\n. roger that. it's nice to have some more info on this topic now.\n. Thanks for you configs, I got it working now! Just adding the portal configs\n```\n server_name portal.mydomain.net;\nlocation /portal-assets/ {\n    proxy_pass http://mydomain:3000/portal-assets/;\n    proxy_pass_request_headers      on;\n}\n\nlocation / {\n    proxy_pass http://mydomain:8080/portal/;\n    proxy_pass_request_headers      on;\n    # proxy_set_header Host            $host;\n    # proxy_set_header X-Forwarded-For $remote_addr;\n}\n\n```\n. So you mean I don't have to proxy to /portal, /portal-assets etc, because the tyk gateway will handle this for me\n. If I try this I always get an empty page (200 OK) and the logs say\nhttp: proxy error: dial tcp 172.17.0.10:3001: getsockopt: connection refused\nbut only for /portal/, my other APIs are working.\nIf I connect to \nhttp://ambassador_1:3001/56b9f656bc9bfb0001000001/portal/\nand replace ambassador_1 with my host, it also works.\nMaybe my \"command\" in my docker-compose is wrong? but all the -name parameters match my containers.\n. After reading a lot of docker documentation, especially about networking, I think it's the best to remove the ambassador pattern completly and use user defined networks.\nAs I understood, this will remove the static (or legacy as the docs call it) linking completly and I can assign each container it's own IP address as lonelycode proposed (although it is a local one).\nBecause I also want to have multiple gateways in my dev environment (one for each developer) it is cleaner to separate each gateway in it's own network.\nIt seems there were a lot of network related changes on 1.9 / 1.10 so there is no need for ambassador anymore. I hope I can figure this out tomorrow.\n. @JosephEarl any update on this?\nI'm on 1.10 now and all the components are running, but I don't know what I should enter for\n- tyk_api_config => host. I tried it with my gateway alias, but if I try to create a key he can't find the value I enter there.\n- and in the API definition's target URLs at tyk dashboard.\nI use the new -link feature so I can connect the components via alias (this works for redis_host) and put everything in my custom bridge-based network. E.g.:\n```\n  dashboard:\n    image: tykio/tyk-dashboard:latest\n    links:\n     - redis:redis\n     - mongo:mongo\n     - gateway:gateway\n    ports:\n     - \"3001:3000\"\n    volumes:\n     - ./tyk_analytics.conf:/opt/tyk-dashboard/tyk_analytics.conf\n    networks:\n     - compose2\n```\nI wonder who calls who at that point when I try to create a new API Key.\nFailed to save new session object to Tyk: Could not create key for this API ID, API doesn't exist.\n. Ok thank you, DNS is an idea.\n. Mh ok but I don't mix it. This is my setup (auto-generated by importing swagger.json).:\n\n. The problem is I don't reach the swagger UI via tyk.\nI know it's a special case because we use the accept header for versioning.\nIt works if I request the swagger url with Accept: application/vnd.sth.v1+json and it would work if I create versions for \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8\" etc. what a browser sends as accept header.\nThe API is not accessed directly via browser so the accept-header approach is fine but in this case, documentations are normally accessed via browser.\nSome wildcard in the version header would also be OK so i can accept \"text/html \" or just \"\".\nEdit: you know what, I remembered the portal also has swagger integration. Will use this.\n. ",
    "excavador": "Good workaround, but it's obviously bug and should be fixed (otherwise server can be crashed by some user input)\n. Oh, thank you very much, now I got your point.\n. ",
    "dustinrc": "No problem. Sorry I missed it there, glad it was done!\n. Yes, confirmed. Thanks!\n. Re-opening because the website is down again.\n. ",
    "alexzorin": "Sounds good, I hope to get a bit better acquainted with Tyk in a couple of weeks and to take a crack at it.\n. ",
    "joshbenner": "I'm looking for a workflow that lets us maintain API definitions in source control and deploy them with simple, repeatable steps, while also having the advantages of dashboard. Is there a different direction I should sniff in?\n. ",
    "dave-kennedy": "Thanks but I figured it out. I have two passwords - one for cloud.tyk.io and one for admin.cloud.tyk.io, which was confusing me.\n. ",
    "abeMedia": ":+1:\n. I guessed as much... Not to worry.\nPS.: Thanks for my tyk swag! :)\n. Breaking tyk up into libraries also brings it a little closer to being able to wrap it within a binary as mentioned in #308 \nIdeally I think the main package should be very small, using internal library for most operations. This not only makes it easier to understand the code but also makes it more pluggable.. Could be specified as jsonschema and validated with a library like https://github.com/xeipuuv/gojsonschema. ",
    "joshuajabbour": "Personally, I'd argue that there shouldn't even be a password template variable. Echoing back passwords is bad practice, and providing that facility to users leads to questions about other security decisions (in my opinion).  I mean, passwords should be a one-way transaction. Send it to the server (securely), then it's hashed and gone. (On that note, by \"recovery\" I hope you mean \"reset\".)\n. I'm sorry, I did not mean to cast aspersions. I was trying to explain what goes through my mind when I receive my password via email; it does make me question security. I am glad you take it seriously.\n. :+1: \n. ",
    "azare": "I'm glad I saw this, I had seen where the apikey's are encrypted at rest and assumed passwords were one way encrypted too. I'm currently evaluating Tyk and if passwords are not encrypted unfortunately that's a deal breaker for us because of our security requirements. \nPlease fix this!\n. @lonelycode Thanks for confirming that all passwords are encrypted at rest and only in clear form for that short during the initial registration.\n. ",
    "jaggerwang": "API Definition\n\n. tyk.conf\n{\n    \"listen_port\": 8080,\n    \"secret\": \"352d20ee67be67f6340b4c0605b044b7\",\n    \"template_path\": \"./templates\",\n    \"tyk_js_path\": \"./js/tyk.js\",\n    \"middleware_path\": \"./middleware\",\n    \"policies\": {\n        \"policy_source\": \"\",\n        \"policy_record_name\": \"\"\n    },\n    \"use_db_app_configs\": true,\n    \"db_app_conf_options\": {\n        \"node_is_segmented\": false,\n        \"tags\": null\n    },\n    \"app_path\": \"./apps/\",\n    \"storage\": {\n        \"type\": \"redis\",\n        \"host\": \"localhost\",\n        \"port\": 6379,\n        \"hosts\": null,\n        \"username\": \"\",\n        \"password\": \"\",\n        \"database\": 0,\n        \"optimisation_max_idle\": 100,\n        \"optimisation_max_active\": 0,\n        \"enable_cluster\": false\n    },\n    \"enable_analytics\": true,\n    \"analytics_config\": {\n        \"type\": \"mongo\",\n        \"csv_dir\": \"/tmp\",\n        \"mongo_url\": \"mongodb://127.0.0.1/tyk_analytics\",\n        \"mongo_db_name\": \"tyk_analytics\",\n        \"mongo_collection\": \"tyk_analytics\",\n        \"purge_delay\": 0,\n        \"ignored_ips\": []\n    },\n    \"health_check\": {\n        \"enable_health_checks\": true,\n        \"health_check_value_timeouts\": 60\n    },\n    \"optimisations_use_async_session_write\": false,\n    \"allow_master_keys\": false,\n    \"hash_keys\": false,\n    \"suppress_redis_signal_reload\": false,\n    \"suppress_default_org_store\": false,\n    \"sentry_code\": \"\",\n    \"use_sentry\": false,\n    \"enforce_org_data_age\": false,\n    \"enforce_org_quotas\": false,\n    \"experimental_process_org_off_thread\": false,\n    \"Monitor\": {\n        \"enable_trigger_monitors\": false,\n        \"configuration\": {\n            \"method\": \"\",\n            \"target_path\": \"\",\n            \"template_path\": \"\",\n            \"header_map\": null,\n            \"event_timeout\": 0\n        },\n        \"global_trigger_limit\": 0,\n        \"monitor_user_keys\": false,\n        \"monitor_org_keys\": false\n    },\n    \"oauth_refresh_token_expire\": 0,\n    \"slave_options\": {\n        \"use_rpc\": false,\n        \"connection_string\": \"\",\n        \"rpc_key\": \"\",\n        \"api_key\": \"\",\n        \"enable_rpc_cache\": false\n    },\n    \"disable_virtual_path_blobs\": false,\n    \"http_server_options\": {\n        \"override_defaults\": false,\n        \"read_timeout\": 0,\n        \"write_timeout\": 0,\n        \"use_ssl\": false,\n        \"certificates\": null,\n        \"server_name\": \"\",\n        \"min_version\": 0,\n        \"flush_interval\": 0\n    },\n    \"service_discovery\": {\n        \"default_cache_timeout\": 0\n    },\n    \"close_connections\": false,\n    \"auth_override\": {\n        \"force_auth_provider\": false,\n        \"auth_provider\": {\n            \"name\": \"\",\n            \"storage_engine\": \"\",\n            \"meta\": null\n        },\n        \"force_session_provider\": false,\n        \"session_provider\": {\n            \"name\": \"\",\n            \"storage_engine\": \"\",\n            \"meta\": null\n        }\n    }\n}\n. tyk_analytics.conf\n{\n    \"listen_port\": 8081,\n    \"tyk_api_config\": {\n        \"Host\": \"http://localhost\",\n        \"Port\": \"8080\",\n        \"Secret\": \"352d20ee67be67f6340b4c0605b044b7\"\n    },\n    \"mongo_url\": \"mongodb://127.0.0.1/tyk_analytics\",\n    \"page_size\": 10,\n    \"admin_secret\": \"xiaoduo\",\n    \"redis_port\": 6379,\n    \"redis_host\": \"localhost\",\n    \"redis_password\": \"\",\n    \"force_api_defaults\": true,\n    \"notify_on_change\": true,\n    \"license_owner\": \"Xiaoduo\",\n    \"hash_keys\": true\n}\n. I only edit Apis tab in dashboard, others as default.\n. \n\n\n. It appears again, just used a few hours and tens of requests. I'm using Debian 8.2.\n. After change purge_delay to 10, it seems ok.\n. ",
    "NikolayMurha": "Hello. We have the same issue.\nTyk target url: localhost:8082:\nlocation / {\n    try_files $uri @tyk;\n  }\n  location @tyk {\n      proxy_pass http://openapi_tyk;\n      proxy_set_header Host $host;\n  }\nHeaders in application:\nHTTP_VERSION: HTTP/1.1\n HTTP_HOST: localhost:8082\n HTTP_USER_AGENT: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko)\n. ",
    "fkasper": "Any updates on this? I think this might be related to this issue:\nFound out that even the pre-middleware cannot detect the host header:\njs\ninfo msg=\"[JSVM] [LOG]: {\\\"AddParams\\\":{},\\\"Body\\\":\\\"\\\",\\\"DeleteHeaders\\\":[],\\\"DeleteParams\\\":[],\\\"Headers\\\":{\\\"Accept\\\":[\\\"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\\\"],\\\"Accept-Encoding\\\":[\\\"gzip, deflate, sdch\\\"],\\\"Accept-Language\\\":[\\\"en-US,en;q=0.8\\\"],\\\"Cache-Control\\\":[\\\"no-cache\\\"],\\\"Connection\\\":[\\\"keep-alive\\\"],\\\"Pragma\\\":[\\\"no-cache\\\"],\\\"Upgrade-Insecure-Requests\\\":[\\\"1\\\"],\\\"User-Agent\\\":[\\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 Safari/537.36\\\"]},\\\"SetHeaders\\\":{},\\\"URL\\\":\\\"/\\\"}\"\nRunning v1.9.1.1 gateway only. Everything works except this header. No nginx or reverse proxy in front of it.\n. Did some debugging as well:\nClient:\ncommand curl -H 'Host: easytofind.example.com' http://myactualdomain\nOrigin:\n```\nRequest:\nGET / HTTP/1.1.\nHost: internalxxxx.c.internal:3000.\nUser-Agent: curl/7.43.0.\nAccept: /.\nCache-Control: max-age=43200.\nX-Forwarded-For: MY-IP.\nAccept-Encoding: gzip.\nResponse:\nHTTP/1.1 200 OK.\nDate: Fri, 22 Jan 2016 10:01:16 GMT.\nConnection: close.\nX-Frame-Options: SAMEORIGIN.\nX-XSS-Protection: 1; mode=block.\nX-Content-Type-Options: nosniff.\nContent-Type: text/html; charset=utf-8.\nETag: W/\"fae259156ef55a4acc9a33851db95206\".\nCache-Control: max-age=0, private, must-revalidate.\nX-Request-Id: 711a1df5-098d-4bd5-875b-a34fbe6cbff9.\nX-Runtime: 0.005484.\nVary: Origin.\nTransfer-Encoding: chunked.\n```\nDiscovery is done via ETCD.\nConfig(using the tutorial generator for this one):\njson\n{\n  \"name\": \"Test API\",\n  \"slug\": \"test-api\",\n  \"api_id\": \"1\",\n  \"org_id\": \"53ac07777cbb8c2d53000002\",\n  \"use_keyless\": true,\n  \"use_oauth2\": false,\n  \"oauth_meta\": {\n    \"allowed_access_types\": null,\n    \"allowed_authorize_types\": null,\n    \"auth_login_redirect\": \"\"\n  },\n  \"auth\": {\n    \"use_param\": false,\n    \"use_cookie\": false\n  },\n  \"use_basic_auth\": false,\n  \"enable_jwt\": false,\n  \"jwt_signing_method\": \"\",\n  \"notifications\": {\n    \"shared_secret\": \"\",\n    \"oauth_on_keychange_url\": \"\"\n  },\n  \"enable_signature_checking\": false,\n  \"hmac_allowed_clock_skew\": 0,\n  \"definition\": {\n    \"location\": \"header\",\n    \"key\": \"x-api-version\"\n  },\n  \"version_data\": {\n    \"not_versioned\": true,\n    \"versions\": {\n      \"Default\": {\n        \"name\": \"Default\",\n        \"expires\": \"\",\n        \"paths\": {\n          \"ignored\": null,\n          \"white_list\": null,\n          \"black_list\": null\n        },\n        \"use_extended_paths\": true,\n        \"extended_paths\": {\n          \"ignored\": null,\n          \"white_list\": null,\n          \"black_list\": null,\n          \"cache\": null,\n          \"transform\": null,\n          \"transform_response\": null,\n          \"transform_headers\": null,\n          \"transform_response_headers\": null,\n          \"hard_timeouts\": null,\n          \"circuit_breakers\": null,\n          \"url_rewrites\": null,\n          \"virtual\": null,\n          \"size_limits\": null\n        },\n        \"global_headers\": null,\n        \"global_headers_remove\": null,\n        \"global_size_limit\": 0\n      }\n    }\n  },\n  \"uptime_tests\": {\n    \"check_list\": null,\n    \"config\": {\n      \"expire_utime_after\": 0,\n      \"service_discovery\": {\n        \"use_discovery_service\": false,\n        \"query_endpoint\": \"\",\n        \"use_nested_query\": false,\n        \"parent_data_path\": \"\",\n        \"data_path\": \"\",\n        \"port_data_path\": \"\",\n        \"use_target_list\": false,\n        \"cache_timeout\": 0,\n        \"endpoint_returns_list\": false\n      },\n      \"recheck_wait\": 0\n    }\n  },\n  \"proxy\": {\n    \"listen_path\": \"/\",\n    \"target_url\": \"http://httpbin.org/\",\n    \"strip_listen_path\": true,\n    \"enable_load_balancing\": false,\n    \"target_list\": null,\n    \"check_host_against_uptime_tests\": false,\n    \"service_discovery\": {\n      \"use_discovery_service\": true,\n      \"query_endpoint\": \"http://127.0.0.1:4001/v2/keys/root\",\n      \"use_nested_query\": false,\n      \"parent_data_path\": \"\",\n      \"data_path\": \"node.value\",\n      \"port_data_path\": \"\",\n      \"use_target_list\": false,\n      \"cache_timeout\": 10,\n      \"endpoint_returns_list\": false\n    }\n  },\n  \"custom_middleware\": {\n    \"pre\": null,\n    \"post\": null,\n    \"response\": null\n  },\n  \"cache_options\": {\n    \"cache_timeout\": 0,\n    \"enable_cache\": false,\n    \"cache_all_safe_requests\": false,\n    \"enable_upstream_cache_control\": false\n  },\n  \"session_lifetime\": 3600,\n  \"active\": true,\n  \"auth_provider\": {\n    \"name\": \"\",\n    \"storage_engine\": \"\",\n    \"meta\": null\n  },\n  \"session_provider\": {\n    \"name\": \"\",\n    \"storage_engine\": \"\",\n    \"meta\": null\n  },\n  \"event_handlers\": {\n    \"events\": null\n  },\n  \"enable_batch_request_support\": false,\n  \"enable_ip_whitelisting\": false,\n  \"allowed_ips\": null,\n  \"dont_set_quota_on_create\": false,\n  \"expire_analytics_after\": 0,\n  \"response_processors\": null,\n  \"CORS\": {\n    \"enable\": false,\n    \"allowed_origins\": null,\n    \"allowed_methods\": null,\n    \"allowed_headers\": null,\n    \"exposed_headers\": null,\n    \"allow_credentials\": false,\n    \"max_age\": 0,\n    \"options_passthrough\": false,\n    \"debug\": false\n  },\n  \"domain\": \"\",\n  \"do_not_track\": false,\n  \"tags\": null\n}\n. ",
    "jesucarr": "Thanks for the quick answer. Yes, both options worked. I opted for 2. since it's simpler and it means less hops and less requests to the api.\nI guess this would be a very common use case and it would be worth to add to the docs.\n. I'm using the Docker install, and I don't have the RPC ID, only the Dashboard API key.\nIs there any way to create the related Developer from the REST API? and is there any way to get the Developer from the Activity By Key?\n. I see. I completely missed the Advanced API. Now everything makes much more sense. Thanks!\n. Yes I'm using a policy. But in the dashboard it says that \"Tags can also be applied at a key level\". So I would expect that if I add tags to the key, the policy would respect that key, and add the new keys from the policy. Is there any reason not to behave like this?\n. I understand you don't want to extend the array in real time, and I agree. \nI think the idea of a secondary field is good. Maybe you can have keyTags, and policyTags. This way analytics/middleware can use both or just one of them as needed.\n. ",
    "krsand": "Hi jesucarr , It would be really helpful if you describe Tyk CORS setting a bit  here.\nThanks!\n. ",
    "tandonraghav": "Thanks..Yeah adding meta data solved the issue.\n. Thanks for your quick reply.\nCan you please elaborate like if I want to use /v1/** then where do I need to put the tag for this?\nI tried using advanced Option but that is not working.\n. Sorry but still it is not working.\nTarget Url- http://localhost:8080/test-v1/v1/accounts/\nListen Path- /v1/test/accounts/\nVersion Management:-\nKey Name- v1\nAdvanced Options:-\nTags - v1 (Added this tag for this API)\nThen I am hitting the Url as :- http://localhost/v1/test/accounts/{id}\nResponse is:-\n{\nerror: \"Version information not found\"\n}\n. Thanks...worked this way!!!\n. Hello,\nI am having issue with 'strip_listen_path'. I want listen_path to be as part of upstream request. How can i modify this parameter from dashboad. I modified directly in Mongo but again updating from dashboard is setting back to true.\nThis is causing issue with Versioning as Api version shows some wierd versionsing as \"http:\".\nSetup details:-\nRest Service Url- localhost:8080/API-name/v1/resource\nApache Http Server:-(localhost)\nProxy /    tyk:port\nTyk Setup:-\nTarget Url:- http://localhost:8080/\nListenPath /API-name/\nVersion tag : - v1(First URL param)\nNow I am hitting localhost/listen_path/v1/resource\nBut the API-name is not in the upstream request and the url is only /v1/resource\nOverall design is \nApache HTTP server-> Tyk - > Apache Http Server (used to rooute to different tomcat based on version)-> Tomcat\n. When is the next version release?\nOn 18 Nov 2015 00:47, \"Martin Buhr\" notifications@github.com wrote:\n\nThere's an issue with path-based versioning where the analytics aren't\nrecorded properly. It has been fixed in develop so will be fine in the next\nversion.\nAs for modiying listen path - just change it in the tyk_analytics.conf\nfile:\n{\n...\n    \"hide_listen_path\": false,\n...\n}\nThen restart the dashboard, it should be editable (might need to refresh\nbrowser)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lonelycode/tyk/issues/134#issuecomment-157475556.\n. Really cool..but we are planning to deploy it in production, so need to\nknow.\u263a\nOn 18 Nov 2015 00:50, \"Martin Buhr\" notifications@github.com wrote:\nWhen it is ready ;-)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lonelycode/tyk/issues/134#issuecomment-157476430.\n. Ok..thanks...\nOn 18 Nov 2015 00:55, \"Martin Buhr\" notifications@github.com wrote:\nI'd suggest not using the path-based versioning then - we have no release\ndate that we can publish. It's close though.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lonelycode/tyk/issues/134#issuecomment-157477755.\n. Added \"hide_listen_path\": false\"  in tyk_analytics.conf , restarted the dashboard but still \"strip_listen_path\":true in tyk_apis.\nlisten_path is not getting appended in the upstream request.\n. I am not using nginx rather i have tyk behind apache http server.\nSo, what exactly do u mean? Is there no way I can change the strip_listen_path true/false in mongo?\nIn this case I need to put http://localhost:8080/API-name in Target Url.\nI thought this is causing issue with Analytics Using Path based versioning and giving me version as \"http\"\n. ok...rather than doing this in Apache I can use target url to include listen_path also. Will there be any issue if i use target url as http://localhost:8080/API-name and listen_path as /API-name.\nJust want to confirm that this approach is fine?\n. Yeah thats what I am doing, everything is working fine if I place listen_path in target url.\nThanks for clarifying all my doubts and for your time.\n. I am closing this issue. If you can give the option of \"strip_listen_path\":true/false through dashboard that will be good.\n. I didnt got ur comment. I changed the force_api_defults:false in tyk_analytics, but then too it is setting \"strip_listen_path\" : true, Can you please explain a bit more.\n. @lonelycode hey can you please tell me your take on this one..\n. 1. Analytics based on per key usage (Endpoint usage/key)\n2. Having method level filters.\n   that's ok...please try to consider this in your path.. :)\n. But it is not expiring instantly and expiring after a day. Even in dashboard I can see Expires:Never (--).\nWhat does this mean then?\n. yes i am able to use it for a day, but then it gets deleted suddenly.\nThis has happened for 2 times, my all keys are deleted.\n. ok...i will set to -1 and then let you know if still the issue persists.\n. Hey,\nThis is so frustating now, happening on a consistent basis, my keys are\ngetting purged after certain time.\nHow can i debug this issue. Please help as i am very close to release.\n\nThe request for key creation is:-\n{\n    \"allowance\": 999,\n    \"rate\": 1000,\n    \"per\": 60,\n    \"expires\": -1,\n    \"quota_max\": -1,\n    \"quota_renews\": -1,\n    \"quota_remaining\": 0,\n    \"quota_renewal_rate\": 0,\n    \"access_rights\": {\n        \"41d73ffbd3e641d15d5da26810572271\": {\n            \"api_name\": \"charge_api\",\n            \"api_id\": \"41d73ffbd3e641d15d5da26810572271\",\n   \"versions\": [\"v1\"]\n}\n},\n\"org_id\": \"\"\n}\nIs there some purge setting in redis/mongo which is creating this issue?\nOn Fri, Nov 20, 2015 at 12:02 PM, Martin Buhr notifications@github.com\nwrote:\n\nHmmm, that is a little odd - so the reason dashboard is saying never is\nbecause it can't match your value to one of the presets (or it might just\nbe a select bug, I think it's having trouble converting the value to a date)\nThe expiry is meant to be an epoch value, so if it's 0 the key is expired\n(sometime in 1970), so it's weird that you can use it.\nHowever Tyk does not delete keys instantly, it expires then first (returns\nan error to the user) but then drops they key from memory some time after.\nJust in case you want to edit or change the key.\nWhich explains while it exists for a day... Although it should be expired\nin software terms, not existence terms. Try setting -1, or a UNIX epoch\nvalue in the future.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lonelycode/tyk/issues/136#issuecomment-158294847.\n. No. I didnt restarted, but why that will be an issue?\nPlease let me know if u need any other config.\n\nOn Mon, Nov 23, 2015 at 10:01 PM, Martin Buhr notifications@github.com\nwrote:\n\nAre you restarting redis?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lonelycode/tyk/issues/136#issuecomment-158988011.\n. this is what is my api_def in mongo:-\n\n{ \"_id\" : ObjectId(\"564a47fac871bb49a5000001\"), \"name\" : \"charge_api\",\n\"slug\" : \"charge_api\", \"api_id\" : \"41d73ffbd3e641d15d5da26810572271\",\n\"org_id\" : \"\", \"use_keyless\" : false, \"use_oauth2\" : false, \"oauth_meta\" :\n{ \"allowed_access_types\" : [ ], \"allowed_authorize_types\" : [ ],\n\"auth_login_redirect\" : \"\" }, \"auth\" : { \"use_param\" : false, \"use_cookie\"\n: false, \"auth_header_name\" : \"key\" }, \"use_basic_auth\" : false,\n\"notifications\" : { \"shared_secret\" : \"\", \"oauth_on_keychange_url\" : \"\" },\n\"enable_signature_checking\" : false, \"hmac_allowed_clock_skew\" : -1,\n\"definition\" : { \"location\" : \"url\", \"key\" : \"x-api-version\" },\n\"version_data\" : { \"not_versioned\" : false, \"versions\" : { \"djI=\" : {\n\"name\" : \"djI=\", \"expires\" : \"\", \"paths\" : { \"ignored\" : [ ], \"white_list\"\n: [ ], \"black_list\" : [ ] }, \"use_extended_paths\" : true, \"extended_paths\"\n: { \"ignored\" : [ ], \"white_list\" : [ ], \"black_list\" : [ ], \"cache\" : [ ],\n\"transform\" : [ ], \"transform_response\" : [ ], \"transform_headers\" : [ ],\n\"transform_response_headers\" : [ ], \"hard_timeouts\" : [ ],\n\"circuit_breakers\" : [ ], \"url_rewrites\" : [ ], \"virtual\" : [ ] } }, \"djE=\"\n: { \"name\" : \"djE=\", \"expires\" : \"\", \"paths\" : { \"ignored\" : [ ],\n\"white_list\" : [ ], \"black_list\" : [ ] }, \"use_extended_paths\" : true,\n\"extended_paths\" : { \"ignored\" : [ ], \"white_list\" : [ ], \"black_list\" : [\n], \"cache\" : [ ], \"transform\" : [ ], \"transform_response\" : [ ],\n\"transform_headers\" : [ ], \"transform_response_headers\" : [ ],\n\"hard_timeouts\" : [ ], \"circuit_breakers\" : [ ], \"url_rewrites\" : [ ],\n\"virtual\" : [ ] } } } }, \"proxy\" : { \"listen_path\" : \"/charge_api/\",\n\"target_url\" : \"http://localhost:8091/charge_api\", \"strip_listen_path\" :\ntrue, \"enable_load_balancing\" : false, \"target_list\" : [ ],\n\"service_discovery\" : { \"use_discovery_service\" : false, \"query_endpoint\" :\n\"\", \"use_nested_query\" : false, \"parent_data_path\" : \"\", \"data_path\" :\n\"hostname\", \"port_data_path\" : \"port\", \"use_target_list\" : false,\n\"cache_timeout\" : NumberLong(60), \"endpoint_returns_list\" : false } },\n\"custom_middleware\" : { \"pre\" : [ ], \"post\" : [ ], \"response\" : [ ] },\n\"cache_options\" : { \"cache_timeout\" : NumberLong(60), \"enable_cache\" :\nfalse, \"cache_all_safe_requests\" : false, \"enable_upstream_cache_control\" :\nfalse }, \"session_lifetime\" : NumberLong(0), \"active\" : true,\n\"auth_provider\" : { \"name\" : \"\", \"storage_engine\" : \"\", \"meta\" : {  } },\n\"session_provider\" : { \"name\" : \"\", \"storage_engine\" : \"\", \"meta\" : null },\n\"event_handlers\" : { \"events\" : {  } }, \"enable_batch_request_support\" :\nfalse, \"enable_ip_whitelisting\" : false, \"allowed_ips\" : [ ],\n\"dont_set_quota_on_create\" : false, \"expire_analytics_after\" :\nNumberLong(0), \"response_processors\" : [ ], \"CORS\" : { \"enable\" : false,\n\"allowed_origins\" : [ ], \"allowed_methods\" : [ ], \"allowed_headers\" : [ ],\n\"exposed_headers\" : [ ], \"allow_credentials\" : false, \"max_age\" : 24,\n\"options_passthrough\" : false, \"debug\" : false }, \"tags\" : [ ],\n\"hook_references\" : [ ] }\nMy API's are not deleted and they are still in ACTIVE state.\nIs that to do something with Redis eviction policy/purge?\nOn Mon, Nov 23, 2015 at 10:09 PM, Martin Buhr notifications@github.com\nwrote:\n\nIn your API definition have you set \"session_lifetime\" to anything other\nthan 0?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lonelycode/tyk/issues/136#issuecomment-158990302.\n. Does that definition looks good to you?\nAlso , I can create keys by both PUT/POST request, I hope that is not\ncausing the issue.\n\nOn Mon, Nov 23, 2015 at 10:15 PM, Raghav Tandon tandonraghavs@gmail.com\nwrote:\n\nthis is what is my api_def in mongo:-\n{ \"_id\" : ObjectId(\"564a47fac871bb49a5000001\"), \"name\" : \"charge_api\",\n\"slug\" : \"charge_api\", \"api_id\" : \"41d73ffbd3e641d15d5da26810572271\",\n\"org_id\" : \"\", \"use_keyless\" : false, \"use_oauth2\" : false, \"oauth_meta\" :\n{ \"allowed_access_types\" : [ ], \"allowed_authorize_types\" : [ ],\n\"auth_login_redirect\" : \"\" }, \"auth\" : { \"use_param\" : false, \"use_cookie\"\n: false, \"auth_header_name\" : \"key\" }, \"use_basic_auth\" : false,\n\"notifications\" : { \"shared_secret\" : \"\", \"oauth_on_keychange_url\" : \"\" },\n\"enable_signature_checking\" : false, \"hmac_allowed_clock_skew\" : -1,\n\"definition\" : { \"location\" : \"url\", \"key\" : \"x-api-version\" },\n\"version_data\" : { \"not_versioned\" : false, \"versions\" : { \"djI=\" : {\n\"name\" : \"djI=\", \"expires\" : \"\", \"paths\" : { \"ignored\" : [ ], \"white_list\"\n: [ ], \"black_list\" : [ ] }, \"use_extended_paths\" : true, \"extended_paths\"\n: { \"ignored\" : [ ], \"white_list\" : [ ], \"black_list\" : [ ], \"cache\" : [ ],\n\"transform\" : [ ], \"transform_response\" : [ ], \"transform_headers\" : [ ],\n\"transform_response_headers\" : [ ], \"hard_timeouts\" : [ ],\n\"circuit_breakers\" : [ ], \"url_rewrites\" : [ ], \"virtual\" : [ ] } }, \"djE=\"\n: { \"name\" : \"djE=\", \"expires\" : \"\", \"paths\" : { \"ignored\" : [ ],\n\"white_list\" : [ ], \"black_list\" : [ ] }, \"use_extended_paths\" : true,\n\"extended_paths\" : { \"ignored\" : [ ], \"white_list\" : [ ], \"black_list\" : [\n], \"cache\" : [ ], \"transform\" : [ ], \"transform_response\" : [ ],\n\"transform_headers\" : [ ], \"transform_response_headers\" : [ ],\n\"hard_timeouts\" : [ ], \"circuit_breakers\" : [ ], \"url_rewrites\" : [ ],\n\"virtual\" : [ ] } } } }, \"proxy\" : { \"listen_path\" : \"/charge_api/\",\n\"target_url\" : \"http://localhost:8091/charge_api\", \"strip_listen_path\" :\ntrue, \"enable_load_balancing\" : false, \"target_list\" : [ ],\n\"service_discovery\" : { \"use_discovery_service\" : false, \"query_endpoint\" :\n\"\", \"use_nested_query\" : false, \"parent_data_path\" : \"\", \"data_path\" :\n\"hostname\", \"port_data_path\" : \"port\", \"use_target_list\" : false,\n\"cache_timeout\" : NumberLong(60), \"endpoint_returns_list\" : false } },\n\"custom_middleware\" : { \"pre\" : [ ], \"post\" : [ ], \"response\" : [ ] },\n\"cache_options\" : { \"cache_timeout\" : NumberLong(60), \"enable_cache\" :\nfalse, \"cache_all_safe_requests\" : false, \"enable_upstream_cache_control\" :\nfalse }, \"session_lifetime\" : NumberLong(0), \"active\" : true,\n\"auth_provider\" : { \"name\" : \"\", \"storage_engine\" : \"\", \"meta\" : {  } },\n\"session_provider\" : { \"name\" : \"\", \"storage_engine\" : \"\", \"meta\" : null },\n\"event_handlers\" : { \"events\" : {  } }, \"enable_batch_request_support\" :\nfalse, \"enable_ip_whitelisting\" : false, \"allowed_ips\" : [ ],\n\"dont_set_quota_on_create\" : false, \"expire_analytics_after\" :\nNumberLong(0), \"response_processors\" : [ ], \"CORS\" : { \"enable\" : false,\n\"allowed_origins\" : [ ], \"allowed_methods\" : [ ], \"allowed_headers\" : [ ],\n\"exposed_headers\" : [ ], \"allow_credentials\" : false, \"max_age\" : 24,\n\"options_passthrough\" : false, \"debug\" : false }, \"tags\" : [ ],\n\"hook_references\" : [ ] }\nMy API's are not deleted and they are still in ACTIVE state.\nIs that to do something with Redis eviction policy/purge?\nOn Mon, Nov 23, 2015 at 10:09 PM, Martin Buhr notifications@github.com\nwrote:\n\nIn your API definition have you set \"session_lifetime\" to anything other\nthan 0?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lonelycode/tyk/issues/136#issuecomment-158990302.\n. Sure,\nTyk.conf\n\n\n{\n  \"listen_port\": _,\n  \"secret\": \"XXXX\",\n  \"template_path\": \"/etc/tyk/templates\",\n  \"tyk_js_path\": \"/etc/tyk/js/tyk.js\",\n  \"use_db_app_configs\": true,\n  \"app_path\": \"/etc/tyk/apps\",\n  \"middleware_path\": \"/etc/tyk/middleware\",\n  \"storage\": {\n    \"type\": \"redis\",\n    \"host\": \"localhost\",\n    \"port\": 6379,\n    \"username\": \"*_\",\n    \"password\": \"*\",\n    \"database\": 0,\n    \"optimisation_max_idle\": 500\n  },\n  \"enable_analytics\": true,\n  \"analytics_config\": {\n        \"type\": \"mongo\",\n        \"csv_dir\": \"/tmp\",\n        \"mongo_url\": \"mongodb://localhost/tyk_analytics\",\n        \"mongo_db_name\": \"tyk_analytics\",\n        \"mongo_collection\": \"tyk_analytics\",\n        \"purge_delay\": 10\n},\n  \"health_check\": {\n    \"enable_health_checks\": true,\n    \"health_check_value_timeouts\": 60\n  },\n  \"optimisations_use_async_session_write\": true,\n  \"allow_master_keys\": false,\n  \"policies\": {\n    \"policy_source\": \"mongo\",\n    \"policy_record_name\": \"tyk_policies\"\n    },\n  \"hash_keys\": false,\n  \"suppress_redis_signal_reload\": false\n}\nI am new to redis so I just went with default settings.\nDo I need to do something to make it persistent for life time?\nOn Mon, Nov 23, 2015 at 10:46 PM, Martin Buhr notifications@github.com\nwrote:\n\nWell, if you were restarting redis - you might have been losing data on\nthe restart unless you explicitly save the data\nIf you had session lifetime set to larger than 0, then the session cache\nwould expire all keys after x seconds, but it's 0 in your conf, so that's\nnot it.\nYou've set the expire on the key to -1, so that will stop it from dropping\nthe key after a forced expiry (in fact I don't think it drops them at all).\nWhen you POST it creates a key using your custom key name, if you PUT it\nupdates a key (under the hood it's the same SET operation).\nLets take a look at your tyk.conf file.\nAlso, how have you set up redis?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lonelycode/tyk/issues/136#issuecomment-159000118.\n. Right i just went with the default settings, its better i go through redis.\nBut what exactly you are looking in redis setup? Its all default configs.\nOn 23 Nov 2015 23:15, \"Martin Buhr\" notifications@github.com wrote:\nPotentially - by default Redis will lose everything stored in it if the\nprocess restarts.\nTo make it persistent you need to set the appendonly option in the conf\nfile (Google it) - though this could adversely affect disk space on the\ninstance, so it needs to be managed.\nAlternatively you need an active backup so it never goes down (master\nslave).\nThough you did say that the instance or process isn't restarting... So it\nshouldn't be that.\nI'm assuming you just installed Redis on a box somewhere and left the\ndefaults? Can you tell me more about the Redis setup?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lonelycode/tyk/issues/136#issuecomment-159008740.\n. Thanks fr ur time...will go through that...\nOn 24 Nov 2015 00:54, \"Martin Buhr\" notifications@github.com wrote:\nThis is the topic you want:\nhttp://redis.io/topics/persistence\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/lonelycode/tyk/issues/136#issuecomment-159035954.\n. This is resolved, just some redis config.\n. No that was actually the redis eviction policy...making it persistent made\nit work...now the keys wont get deleted...\nOn 10 Mar 2016 19:39, \"senj\" notifications@github.com wrote:\n@tandonraghav https://github.com/tandonraghav can you explaine a bit\nwhat you changed please?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/TykTechnologies/tyk/issues/136#issuecomment-194860779\n.\n. Alternatively, if you must use apache, you will need to proxy/rewrite:\n- /api/ to http://localhost:3000/\n- /portal-assets/ to http://localhost:3000/\n- / to http://localhost:3000/{YOUR-ORG-ID}/portal/\n\nThe problem is if i do / to http://localhost:3000 http://localhost:3000\nthen only it works as apache is not aware of /login and other stuff.\nSo, is there a prefix which you use so that all the urls are routed to\nlocalhost:3000 without using the Root?\nOn Tue, Dec 8, 2015 at 7:43 PM, Martin Buhr notifications@github.com\nwrote:\n\nThere's a better way to do this, you can proxy the dashboard using Tyk\nitself :-)\nBasically - since Tyk Gateway can handle domain management, you can set up\nTyk to proxy the HTTP requests just like NginX or Apache does, we've made\nit bootstrappable with an API call, to set up the proxy configurations,\nsimply run:\ncurl -d \"domain=\"{PORTAL-DOMAIN}\"\" -H\n\"admin-auth:{ADVANCED-ADMIN-API-SECRET}\"\nhttp://YOUR-DASHBOARD-INSTANCE:3000/admin/organisations/{YOUR-ORG-ID}/generate-portals\nIn a terminal\nHere:\n- PORTAL-DOMAIN must be a standard domain form, no protocol or\n  slashes, so e.g. www.my-portal.com.\n- ADVANCED-ADMIN-API-SECRET Must be the admin_secret value of your\n  tyk_analytics.conf file\n- YOUR-DASHBOARD-INSTANCE probably localhost, given you can't access\n  from outside. If you've set a dashboard domain in the tyk_analytics.conf\n  file, then you'll need to disable tyk Dashboard host management as you'll\n  be using Tyk Gateway as domain manager\n- YOUR-ORG-ID is the value under \"System Management\" -> \"Users\" ->\n  Your user -> \"RPC Credentials, basically the organisation ID for all of\n  your APIs and the portal you are building\nThis command will create three APIs in your dashboard, they will reverse\nproxy from Tyk Gateway (which I assume you have running on port 80) to your\ndashboard and assets for you, binding to your preferred domain name,\nhowever this command assumes that the Tyk Dashboard instance is on\nlocalhost.\nThese APIs have some special properties - they have a do_not_track\nsetting so they don't mess with your analytics, and they also are marked as\na \"site\" so they appear greyed out (they are still editable though).\nThis is what we do in the docker instance where everything is on the same\nhost and want it all to work over port 80.\nAlternatively, if you must use apache, you will need to proxy/rewrite:\n- /api/ to http://localhost:3000/\n- /portal-assets/ to http://localhost:3000/\n- / to http://localhost:3000/{YOUR-ORG-ID}/portal/\nThis will proxy the ROOT of the domain that apache is managing to be\nthe portal, if you want it elsewhere, change the last proxy rewrite to\nsomething else\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/TykTechnologies/tyk/issues/145#issuecomment-162892491\n.\n. I have proxy in apache as /dashboard http://localhost:3000/\n\nthen do I need to change in tyk_analytics.conf\n\"host_config\" : {\n        \"override_hostname\": \"localhost\",\n        \"disable_org_slug_prefix\": true,\n        \"enable_host_names\": true,\n        \"hostname\": \"dashboard\",\n        \"portal_domains\": {},\n        \"portal_root_path\": \"/portal\"\n    },\nI am sure i am missing something here, but not able to make it work.\nMy requirement is when I hit http://localhost/dashboard it should go to Tyk\ndashboard.\nOn Tue, Dec 8, 2015 at 10:47 PM, Martin Buhr notifications@github.com\nwrote:\n\nAh I see. You still want the dashboard to work on port 80 too. My\nsuggestion would be to have the dashboard work on a different hostname\nthen, so you set up Apache to proxy everything to hostname A to the\ndashboard, and hostname B to the portal using the above rewrites.\nYou need to split it out somehow, you can't have the portal on the same\nhostname as the dashboard. In our docker config we bind the dashboard to\ntyk_dashboard.tyk_dashboard.local and the dashboard to a separate host name.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/TykTechnologies/tyk/issues/145#issuecomment-162949855\n.\n. Ok.. I got it, Virtual hosts are working using Apache...Thanks for your\nreply. If you can just clear the doubt of Role of override_hostname and\nhostname that would be great.\n\n\"host_config\" : {\n        \"override_hostname\": \"localhost\",\n        \"disable_org_slug_prefix\": true,\n        \"enable_host_names\": true,\n        \"hostname\": \"dashboard\",\n        \"portal_domains\": {},\n        \"portal_root_path\": \"/portal\"\n    },\nOn Tue, Dec 8, 2015 at 11:35 PM, Raghav Tandon tandonraghavs@gmail.com\nwrote:\n\nI have proxy in apache as /dashboard http://localhost:3000/\nthen do I need to change in tyk_analytics.conf\n\"host_config\" : {\n        \"override_hostname\": \"localhost\",\n        \"disable_org_slug_prefix\": true,\n        \"enable_host_names\": true,\n        \"hostname\": \"dashboard\",\n        \"portal_domains\": {},\n        \"portal_root_path\": \"/portal\"\n    },\nI am sure i am missing something here, but not able to make it work.\nMy requirement is when I hit http://localhost/dashboard it should go to\nTyk dashboard.\nOn Tue, Dec 8, 2015 at 10:47 PM, Martin Buhr notifications@github.com\nwrote:\n\nAh I see. You still want the dashboard to work on port 80 too. My\nsuggestion would be to have the dashboard work on a different hostname\nthen, so you set up Apache to proxy everything to hostname A to the\ndashboard, and hostname B to the portal using the above rewrites.\nYou need to split it out somehow, you can't have the portal on the same\nhostname as the dashboard. In our docker config we bind the dashboard to\ntyk_dashboard.tyk_dashboard.local and the dashboard to a separate host name.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/TykTechnologies/tyk/issues/145#issuecomment-162949855\n.\n. Got it..Thanks for your help. Your responsiveness is commendable.\n\n\nOn Wed, Dec 9, 2015 at 12:10 AM, Martin Buhr notifications@github.com\nwrote:\n\nOverride_hostname will basically just force Tyk Dashboard to assume what\nthe Tyk Gateway hostname is when it uses it in the GUI (it's purely\naesthetic)\nHostname is the hostname the the dashboard binds to, it's extremely strict.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/TykTechnologies/tyk/issues/145#issuecomment-162975026\n.\n. Hey, Just wanted to check, do you have any security settings to block or revoke user access when the password is entered wrong multiple times in tyk-dashboard?\n. Actually that would be good.\nOn 13 Dec 2015 18:54, \"Martin Buhr\" notifications@github.com wrote:\nNo, not yet. but good idea.\nWant to open a feature request?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/TykTechnologies/tyk/issues/145#issuecomment-164258063\n.\n. Hey,\nI was able to do path based routing in previous version after creating two apis with urls as:-\nListen Path /test/v1 - Authorized (key)\nListen Path /test/v1/notify - Open Keyless\n\nBut now in v1.9 I am not able to do that it keeps on expecting 'Authorization field missing'\nDo you have any parameter to enable that??\n. Hey Martin,\nCan you please let me know whats the issue. As I tested on earlier release and it was working but suddenly in new release its not working?\n. Oh no but this will cause a problem as all the keys are attached to particular API ID , deleting and adding again the API in different order will make those keys non working. \nBut this was working in previous release, so I assume this is changed in 1.9. \nWhat do you mean by fixed hostname on one? is this an alternate?\n. So, what do you this is good, should i put all the endpoints as APIs? As this will give me more control over authorization. As of now I have only the base url as API.\n. I tried adding custom domain as 'localhost' as i dont have any other domain name.\nI am not getting this second solution of adding sort_by, is it a mongo level config or tyk level?\n. Do you mean adding entry in /etc/hosts and then configuring that in custom domain. I cannot do that in production.\nPlease give me the second approach sort_by.. And yes it is working smoothly in previous release and now i am stuck.\nTried adding sort_by 1/2/3/4..., keyless as 1 and closed as 2/3/4 but still same issue, also every time I update from dashboard the changes are over written.\nTested by restarting gateway.\nDont you think this requirement is generic to change authentication mechanisms for different endpoints on same base URL or to add exceptions??\n. I am using the latest version of dashboard, and by overridden sort_by means the dashboard is overwriting the value to 0 again, \nQuestion How to set this value from Advanced options, not able to see that , is it hook??\nUsing endpoint designer i was able to ignore the Endpoint but I wanted to have it whitelisted also, which mean only specific IP's hitting that url, but as I make it whitelist the other paths stop working giving 403 error.\nMy config:-\nListen Path /test/v1 - Authorized (key)  - target http://localhost:3625/test/v1 - No domain\nListen Path /test/v1/notify - Open Keyless - - target http://localhost:3625/test/v1/notify - localhost (custom domain)\non hitting http://localhost:/test/v1/notifications - still giving authorization field missing.\nAnswer I am creating a seperate API as i want the analytics and whitelisting for that.\n. Yes both are same domain...actually localhost...but ordering how can i\nmaintain in tyk?\nOn 16 Dec 2015 00:56, \"Martin Buhr\" notifications@github.com wrote:\n\nAre they on the same domain? It could be an ordering issue\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/TykTechnologies/tyk/issues/155#issuecomment-164864204\n.\n. \n",
    "talibsiddique": "@tandonraghav  what exactly you did to resolve this  issue, I am also facing the same issue even if setting keys PERSIS or EXPIRY for 100yrs it get deleted automatically after some time.. ",
    "mnv104": "Thanks for the reply. Much appreciated. Right now, I am just playing around with basic things before deploying this in production. I will tone down some of the aggressive defaults in production.\nThis is the output from the curl command you requested,\ncurl -H \"Origin: http://example.com\" -H \"Access-Control-Request-Method: POST\" -H \"Access-Control-Request-Headers: X-Requested-With\" -X OPTIONS --verbose \"http://testorg.tyk.docker:8888/aolCourseSearch/?jsonIndent=1&type=search&ctype=12415&lat=12.79&long=77.51&center_list=1\"\n- Hostname was NOT found in DNS cache\n-   Trying 127.0.0.1...\n- Connected to testorg.tyk.docker (127.0.0.1) port 8888 (#0)\n\nOPTIONS /aolCourseSearch/?jsonIndent=1&type=search&ctype=12415&lat=12.79&long=77.51&center_list=1 HTTP/1.1\nUser-Agent: curl/7.38.0\nHost: testorg.tyk.docker:8888\nAccept: /\nOrigin: http://example.com\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: X-Requested-With\n< HTTP/1.1 200 OK\n  < Date: Tue, 01 Dec 2015 01:11:03 GMT\n  < Content-Type: text/plain; charset=utf-8\n  < Content-Length: 0\n  < Connection: keep-alive\n  < Vary: Origin\n  < Vary: Access-Control-Request-Method\n  < Vary: Access-Control-Request-Headers\n  < \n- Connection #0 to host testorg.tyk.docker left intact\n\nI don't see the Access-Control-Allow-Origin header that the browser is expecting in the response as part of the OPTIONS request..... The response header above matches with what I see in the browser as well.\nand I am also attaching the browser network and console tab output.\n\n\nThis is the basic html code that drives the ajax request\nhtml\n\n\n\n\n$( document ).ready(function() {\n  var request = $.ajax({\n            url: \"http://testorg.tyk.docker:8888/aolCourseSearch/?jsonIndent=1&type=search&ctype=12415&lat=12.79&long=77.51&center_list=1\",\n            headers: {\"authorization\": \"5655163c1dc22b0001000001c1c5915e754e434662d370c341dcbe92\"},\n            }).done(function( data ) {\n            console.log(\"done\");\n            }).fail( function(xhr, textStatus, errorThrown) {\n            alert(xhr.responseText);\n            alert(textStatus);\n            }); \n});\n\n\n\n\n\n\nPlease let me know if I missed something basic here.\nthanks again for the guidance!\nMurali\n. The curl output in my previous post appears to be misformatted,\nHostname was NOT found in DNS cache\nTrying 127.0.0.1...\n Connected to testorg.tyk.docker (127.0.0.1) port 8888 (#0)\n OPTIONS /aolCourseSearch/?jsonIndent=1&type=search&ctype=12415&lat=12.79&long=77.51&center_list=1 HTTP/1.1\n User-Agent: curl/7.38.0\n Host: testorg.tyk.docker:8888\n Accept: /\n Origin: http://example.com\n Access-Control-Request-Method: POST\n Access-Control-Request-Headers: X-Requested-With\nHTTP/1.1 200 OK\n Date: Tue, 01 Dec 2015 01:25:10 GMT\n Content-Type: text/plain; charset=utf-8\n Content-Length: 0\n Connection: keep-alive\n Vary: Origin\n Vary: Access-Control-Request-Method\n Vary: Access-Control-Request-Headers\nConnection #0 to host testorg.tyk.docker left intact\n. ",
    "wen96": "I had exactly the same issue and adding 'Accept' and 'Authorization' headers in CORS config solve it. \nThanks Martin.\n. ",
    "allan-simon": "actually it seems most of the forms have this problem,  one has to manually scroll up,  and check the block on the top right to see what's up.\n. awesome, thank you. firefox 42 on ubuntu \n. great, thanks for the reactivity :) \n. ",
    "kangaroozal": "Awesome! thank you so much for the rapid response! \n. ",
    "ajohnstone": "Sorry, should have been clearer I've updated the original ticket, as I wrote the ticket in a rush.\n. ",
    "Klaboe": "@lonelycode : Two things: \nIs there a reason why one should not be able to have the same policy on two different API-entries in the Catalogue? I mean it is plausible to have multiple APIs that will have the same access rights and rate-limits... But have different documentations? \nAlso: If i have two API-entries in my Catalogue that share the same policy; trying to edit the second one will put me in editing mode for the first one....\nThis seems like bug in the dashboard?\n. I see, but i still think it would be nice to have the option to have the same one over multiple APIs :)\nA \"workaround\" (which in this case is \"dont screw up\") is all good, but is it going to be fixed? I mean, it was reported a year++ ago.\n. ",
    "polds": "ah.. huh. Yeah that worked.\nStrange I had spun up a Vagrant version of Tyk this morning and it didn't exhibit this bug. Thanks :)\n. Yep that worked, thank you.\n. Just a thought:\nA pipe dream of mine would be to logically group parameterized APIs together, so we could see if something like a \"profile\" endpoint is being called more than anything else. But because every endpoint has a user id in it it's hard to gather that info. \nI'll look at the page size in the conf file. Thanks.\n. ",
    "carnageX": "Yep, the dashboard is indeed running.  \nIt should be running on 3000. \nHere's part of my tyk_analytics.conf file\n{\n    \"listen_port\": 3000,\n    \"tyk_api_config\": {\n        \"Host\": \"http://localhost\",\n        \"Port\": \"8080\",\n        \"Secret\": \"352d20ee67be67f6340b4c0605b044b7\"\n    },\n    \"mongo_url\": \"mongodb://localhost/tyk_analytics\",\n    \"page_size\": 10,\n    \"admin_secret\": \"12345\",\n    \"redis_port\": 6379,\n    \"redis_host\": \"localhost\",\n    \"redis_password\": \"\",\n    \"force_api_defaults\": false,\n    \"notify_on_change\": true,\n    \"license_owner\": \"Your Name\",\n    \"hash_keys\": true,\n    \"email_backend\": {},\n    \"hide_listen_path\": false,\n. Yes, I'm running it in a VM.  However I can't even get to it via localhost on the VM itself. \nI assume I ran the setup properly...the only instructions I saw was the set that I previously posted (https://tyk.io/v1.9/setup/install-tyk-ubuntu/).  \nThis is what my tyk-dashboard.log file looks like:\n^[[31mERRO^[[0m[0253] Mongo connection failed (retrying):no reachable servers\n^[[34mINFO^[[0m[0000] Using /opt/tyk-dashboard/tyk_analytics.conf for configuration\n^[[31mERRO^[[0m[0011] Mongo connection failed (retrying):no reachable servers\n^[[31mERRO^[[0m[0023] Mongo connection failed (retrying):no reachable servers\n^[[31mERRO^[[0m[0034] Mongo connection failed (retrying):no reachable servers\n^[[31mERRO^[[0m[0046] Mongo connection failed (retrying):no reachable servers\n^[[31mERRO^[[0m[0057] Mongo connection failed (retrying):no reachable servers\n^[[31mERRO^[[0m[0069] Mongo connection failed (retrying):no reachable servers\n^[[31mERRO^[[0m[0080] Mongo connection failed (retrying):no reachable servers\n^[[31mERRO^[[0m[0092] Mongo connection failed (retrying):no reachable servers\n^[[31mERRO^[[0m[0103] Mongo connection failed (retrying):no reachable servers\n^[[31mERRO^[[0m[0115] Mongo connection failed (retrying):no reachable servers\n^[[31mERRO^[[0m[0126] Mongo connection failed (retrying):no reachable servers\n^[[31mERRO^[[0m[0138] Mongo connection failed (retrying):no reachable servers\n^[[31mERRO^[[0m[0150] Mongo connection failed (retrying):no reachable servers\n^[[31mERRO^[[0m[0161] Mongo connection failed (retrying):no reachable servers\n^[[31mERRO^[[0m[0173] Mongo connection failed (retrying):no reachable servers\n^[[31mERRO^[[0m[0184] Mongo connection failed (retrying):no reachable servers\n^[[31mERRO^[[0m[0196] Mongo connection failed (retrying):no reachable servers\n^[[31mERRO^[[0m[0207] Mongo connection failed (retrying):no reachable servers\n^[[31mERRO^[[0m[0219] Mongo connection failed (retrying):no reachable servers\n^[[31mERRO^[[0m[0230] Mongo connection failed (retrying):no reachable servers\n^[[31mERRO^[[0m[0242] Mongo connection failed (retrying):no reachable servers\n. When I ran\nsudo service mongod status \nit said it was: stop/waiting\nTried starting it with\nsudo service mongod start\nIt said: start/running\nBut when I check the status again, it just goes back to stop/waiting \nEdit: I checked to see if Mongod was even listening...and it's not (figured that since the service wasn't running).\nTried running sudo mongod to start it... and I get this:\n2015-12-10T01:55:18.767-0600 I STORAGE  [initandlisten] exception in initAndListen: 29 Data directory /data/db not found., terminating\n2015-12-10T01:55:18.768-0600 I CONTROL  [initandlisten] dbexit:  rc: 100\n. I don't imagine I installed the wrong version, unless the documentation is incorrect?  Possible that the install didn't work...but I tried on 2 different VM's of Ubuntu (both v14 and v15).  \nI'll try creating the directories - found some things on SO that I may try.  \nI'm hosting the VM in VirtualBox on a PC in my home to test out Tyk - nothing really special about it. \nThanks for the help so far! \n. Just checked, and the disk is only 50%  used up; 2.9GB used, with currently allocated of 5.8GB (up to 8GB, will grow dynamically from VirtualBox).  So I wouldn't think it's that...unless Mongo requires a larger DB? \nI could look into Vagrant - but was wanting to demo this for a possible solution to use at my workplace - and not sure how well Vagrant would go over with the server people - I'm sure I'll have enough trouble trying to convince them to spin up a Linux box if we choose to go with Tyk ;). \nI don't remember seeing any error messages while installing Mongo - everything had gone smoothly with no errors (at least reported through SSH / terminal) while going through the instructions.  \nI ran across this post on SO: http://stackoverflow.com/questions/7948789/mongodb-mongod-complains-that-there-is-no-data-db-folder\nTried creating the folder manually and setting the permissions, and now here's what I get:\ncarnagex@Swordfish:/$ sudo mongod\n2015-12-10T04:36:17.098-0600 I JOURNAL  [initandlisten] journal dir=/data/db/journal\n2015-12-10T04:36:17.099-0600 I JOURNAL  [initandlisten] recover : no journal files present, no recovery needed\n2015-12-10T04:36:17.099-0600 I JOURNAL  [initandlisten]\n2015-12-10T04:36:17.099-0600 E JOURNAL  [initandlisten] Insufficient free space for journal files\n2015-12-10T04:36:17.099-0600 I JOURNAL  [initandlisten] Please make at least 3379MB available in /data/db/journal or use --smallfiles\n2015-12-10T04:36:17.099-0600 I JOURNAL  [initandlisten]\n2015-12-10T04:36:17.099-0600 I STORAGE  [initandlisten] exception in initAndListen: 15926 Insufficient free space for journals, terminating\n2015-12-10T04:36:17.099-0600 I CONTROL  [initandlisten] now exiting\n2015-12-10T04:36:17.099-0600 I NETWORK  [initandlisten] shutdown: going to close listening sockets...\n2015-12-10T04:36:17.099-0600 I NETWORK  [initandlisten] removing socket file: /tmp/mongodb-27017.sock\n2015-12-10T04:36:17.103-0600 I NETWORK  [initandlisten] shutdown: going to flush diaglog...\n2015-12-10T04:36:17.103-0600 I NETWORK  [initandlisten] shutdown: going to close sockets...\n2015-12-10T04:36:17.103-0600 I STORAGE  [initandlisten] shutdown: waiting for fs preallocator...\n2015-12-10T04:36:17.103-0600 I STORAGE  [initandlisten] shutdown: final commit...\n2015-12-10T04:36:17.103-0600 I STORAGE  [initandlisten] shutdown: closing all files...\n2015-12-10T04:36:17.103-0600 I STORAGE  [initandlisten] closeAllFiles() finished\n2015-12-10T04:36:17.103-0600 I CONTROL  [initandlisten] dbexit:  rc: 100\nEdit:\nSo it seems I don't have enough space after all - I suppose I could try enabling the smallFiles parameter? Since I'm just setting this up for a demo. \n. Great!  Using the --smallfiles flag when starting mongodb worked.  Thanks for all the help! \n. ",
    "nilstgmd": "Hey @lonelycode , thanks for the fast support. Finally, after removing everything done before and use docker-compose, I was able to also access the dashboard.\nHowever, the setup.sh didn't run completely successful.\n$ ./setup.sh 192.168.99.100 tyk_dashboard.tyk_dashboard.docker \nDetected a Docker VM...\nDocker host address explicitly set.\nUsing 192.168.99.100 as Tyk host address.\nDocker portal domain address explicitly set.\nUsing tyk_dashboard.tyk_dashboard.docker as Tyk host address.\ntr: Illegal byte sequence\nCreating Organisation\nORGID: 5669b09e9ee2920001000001\nAdding new user\nUSER AUTH: User object validation failed.\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nKeyError: 'users'\nNEW ID:\nSetting password\nSetting up the portal domain\n{\"Status\":\"OK\",\"Message\":\"Org updated\",\"Meta\":null}\nDONE\n====\nLogin at http://192.168.99.100:3000/\nUser: @test.com\nPass: test123\nAfter executing the user/org creation manually, I was able to login.\n. Could be. Anyway, thanks for the support.\n. ",
    "sousmangoosta": "Hey @lonelycode,\nI have same issue since upgrade from 1.7.3 to 2.2.0.\nDo you see some changes related ?\nThx\n. ",
    "adrien-candiotti": "That would be great :)\nA webhook to reupdate it automatically would be cool too but that's a bit too much to ask haha :P \n. ",
    "gwshaw": "We did this in our current gateway and found a lot of user confusion. We decided that if they have a valid api key then we distinguish between 404 (a route that does not exist) and 403 (you don't have permission for that route). That deal with the \"discover\" issue and aids the user. For our case, we want to make it easy for people to use the APIs and are not trying to hide anything, only monitor access and usage by the key.. \ud83d\udc4d  We base our pipeline development off Swagger. As devs add/change endpoints, they update the Swagger for the service and then build routing and deploy that through the CI pipeline. CI uploads and deploys the changes through gateway APIs (we are using Apigee right now) and the changes go live.. - Headers are a bit more cumbersome to use and are not part of our current APIs.\n- We have >150 endpoints so rewriting is not an option and costs significant performance.\n- Looking at the source, I see now that we could move the query param into a header in middleware to pass it into the auth part of the system because this happens before the caching middleware.\n- I suggest that a better growth path for Tyk, as mentioned in other issues here, is plugins. One possibility would be to eliminate the option for api token in a param and add a performant plugin for end-users to add to remove the api token from the query params and put it in the desired header. Having struggled with the Tyk documentation, one large advantage of this approach is the encapsulation and ability to document it well in one place. Growing around this way with best-practice plug-ins give end users many good examples of how to grow the system themselves. Having ability without sufficient examples of how to use it is not that useful.. ",
    "ilijabojanovic": "Verified @buger approved for merge . @mvdan yes, my mistake . @buger @mvdan I can't reproduce issue on testing and staging environment. This is Gateway enhancement. I agree with @mvdan @lonelycode proposals. i will try to summarize feature request.\nSummary:\nBuild Gateway tool for configuration lint checking.\nv1: Check the config against a schema to make sure no basic errors have been made. \nCommand should prevent gateway start with bad configuration file. During config parse if we have error we should throw readable error message in console and stop Gateway startup. \nTask list:\n- [ ] Create tyk-lint subcommand \n- [ ] Command should execute during gateway setup or any changes on configuration file\n- [ ] After configuration check we should have output message e.g \"Configuration loaded\"\n- [ ] If we have some errors during configuration parse we should have output message e.g \"Configuration check failed\"\nTest checklist:\n- [ ] Test Gateway installation with valid configuration file\n- [ ] Test Gateway installation with invalid configuration file\n- [ ] Install Gateway with valid configuration and modify configuration with valid configuration\n- [ ] Install Gateway with valid configuration and modify configuration with invalid configuration\n- [ ] Upgrade Gateway with valid configuration and modify configuration with invalid configuration. @lonelycode @mvdan idea of my summary comment is to give example how we should define feature, since we must avoid comments driven development :). @lonelycode @buger @lghiur @nickReyn \nIf we start gateway in http mode without ssl enabled, we should Hide Certificates section on dashboard?. Verified and ready for merge. @buger should we add this in some milestone? . @buger This is feature request? If is please add label and milestone. @buger thanks for clarification . @buger verified and approved for merge . @lonelycode ok, also i already planned to start collecting those data since it will be good to have track of results for future releases. Verified and looks good on release-2.3 branch. Verified @buger approved for merge. @buger verified and approved for merge. @buger Issue is visible again on current master branch. @buger @mvdan i just tested latest master. So issue is still visible. Seems is related to hot reload. Since when i create api definition over dashboard and try to get that api i have 404, but when i manually trigger gateway hot-reload api working fine. @buger approved for merge and also https://github.com/TykTechnologies/tyk/issues/606 is fixed . @buger 404 issue is fixed, approved for merge . I've tired versioned and standard apis. In both cases traffic was send to host which is down. In log i . have error:\ntyk-gateway_1    | time=\"Mar 24 21:57:30\" level=debug msg=\"[HOST CHECKER] Checking: http://asdajkjkj.org/http://asdajkjkj.org/\"\ntyk-gateway_1    | time=\"Mar 24 21:57:30\" level=debug msg=\"[HOST CHECKER] Checking: http://httpbin.orghttp://httpbin.org\"\ntyk-gateway_1    | time=\"Mar 24 21:57:30\" level=debug msg=\"[HOST CHECKER] [HOST WARNING]: http://asdajkjkj.org/\"\ntyk-gateway_1    | time=\"Mar 24 21:57:30\" level=debug msg=\"Recording uptime stat\"\ntyk-gateway_1    | time=\"Mar 24 21:57:30\" level=debug msg=\"Pushing to raw key list: tyk-uptime-analytics\"\ntyk-gateway_1    | time=\"Mar 24 21:57:30\" level=debug msg=\"Input key was: host-checker:tyk-uptime-analytics\"\ntyk-gateway_1    | time=\"Mar 24 21:57:30\" level=debug msg=\"Appending to fixed key list: host-checker:tyk-uptime-analytics\"\ntyk-gateway_1    | time=\"Mar 24 21:57:30\" level=debug msg=\"Input key was: host-checker:tyk-uptime-analytics\"\ntyk-gateway_1    | time=\"Mar 24 21:57:30\" level=debug msg=\"Update key: PollerCheckerInstance:asdajkjkj.org\"\ntyk-gateway_1    | time=\"Mar 24 21:57:30\" level=debug msg=\"[STORE] SET Raw key is: PollerCheckerInstance:asdajkjkj.org\"\ntyk-gateway_1    | time=\"Mar 24 21:57:30\" level=debug msg=\"Input key was: host-checker:PollerCheckerInstance:asdajkjkj.org\"\ntyk-gateway_1    | time=\"Mar 24 21:57:30\" level=debug msg=\"[STORE] Setting key: host-checker:PollerCheckerInstance:asdajkjkj.org\"\ntyk-gateway_1    | time=\"Mar 24 21:57:30\" level=debug msg=\"Input key was: host-checker:PollerCheckerInstance:asdajkjkj.org\"\ntyk-gateway_1    | time=\"Mar 24 21:57:30\" level=debug msg=\"Input key was: host-checker:PollerCheckerInstance:asdajkjkj.org\"\ntyk-gateway_1    | time=\"Mar 24 21:57:30\" level=warning msg=\"[HOST CHECKER MANAGER] Host is DOWN: http://asdajkjkj.org/\"\ntyk-gateway_1    | time=\"Mar 24 21:57:30\" level=debug msg=\"EVENT FIRED: HostDown\"\nAnalytics recording well this events:\nhttps://screencast.com/t/D4BBKeBv\nHere is my testing definition:\n{\n    \"id\": \"58d596270599ed0264bc3e51\",\n    \"name\": \"test\",\n    \"slug\": \"test\",\n    \"api_id\": \"d95b97454dab4f714c6ef41937126dbd\",\n    \"org_id\": \"58d595da0599ed0264bc3e4d\",\n    \"use_keyless\": false,\n    \"use_oauth2\": false,\n    \"use_openid\": false,\n    \"openid_options\": {\n        \"providers\": [],\n        \"segregate_by_client\": false\n    },\n    \"oauth_meta\": {\n        \"allowed_access_types\": [],\n        \"allowed_authorize_types\": [],\n        \"auth_login_redirect\": \"\"\n    },\n    \"auth\": {\n        \"use_param\": true,\n        \"param_name\": \"auth\",\n        \"use_cookie\": false,\n        \"cookie_name\": \"\",\n        \"auth_header_name\": \"Authorization\"\n    },\n    \"use_basic_auth\": false,\n    \"enable_jwt\": false,\n    \"use_standard_auth\": true,\n    \"enable_coprocess_auth\": false,\n    \"jwt_signing_method\": \"\",\n    \"jwt_source\": \"\",\n    \"jwt_identity_base_field\": \"\",\n    \"jwt_client_base_field\": \"\",\n    \"jwt_policy_field_name\": \"\",\n    \"notifications\": {\n        \"shared_secret\": \"\",\n        \"oauth_on_keychange_url\": \"\"\n    },\n    \"enable_signature_checking\": false,\n    \"hmac_allowed_clock_skew\": -1,\n    \"base_identity_provided_by\": \"\",\n    \"definition\": {\n        \"location\": \"header\",\n        \"key\": \"x-api-version\"\n    },\n    \"version_data\": {\n        \"not_versioned\": true,\n        \"versions\": {\n            \"Default\": {\n                \"name\": \"Default\",\n                \"expires\": \"\",\n                \"paths\": {\n                    \"ignored\": [],\n                    \"white_list\": [],\n                    \"black_list\": []\n                },\n                \"use_extended_paths\": true,\n                \"extended_paths\": {},\n                \"global_headers\": {},\n                \"global_headers_remove\": [],\n                \"global_size_limit\": 0,\n                \"override_target\": \"\"\n            }\n        }\n    },\n    \"uptime_tests\": {\n        \"check_list\": [\n            {\n                \"url\": \"http://asdajkjkj.org/\",\n                \"method\": \"GET\",\n                \"headers\": {},\n                \"body\": \"\"\n            },\n            {\n                \"url\": \"http://httpbin.org\",\n                \"method\": \"GET\",\n                \"headers\": {},\n                \"body\": \"\"\n            }\n        ],\n        \"config\": {\n            \"expire_utime_after\": 0,\n            \"service_discovery\": {\n                \"use_discovery_service\": false,\n                \"query_endpoint\": \"\",\n                \"use_nested_query\": false,\n                \"parent_data_path\": \"\",\n                \"data_path\": \"\",\n                \"port_data_path\": \"\",\n                \"target_path\": \"\",\n                \"use_target_list\": false,\n                \"cache_timeout\": 60,\n                \"endpoint_returns_list\": false\n            },\n            \"recheck_wait\": 0\n        }\n    },\n    \"proxy\": {\n        \"preserve_host_header\": false,\n        \"listen_path\": \"/test/\",\n        \"target_url\": \"\",\n        \"strip_listen_path\": true,\n        \"enable_load_balancing\": true,\n        \"target_list\": [\n            \"http://httpbin.org/\",\n            \"http://asdajkjkj.org/\"\n        ],\n        \"check_host_against_uptime_tests\": true,\n        \"service_discovery\": {\n            \"use_discovery_service\": false,\n            \"query_endpoint\": \"\",\n            \"use_nested_query\": false,\n            \"parent_data_path\": \"\",\n            \"data_path\": \"hostname\",\n            \"port_data_path\": \"port\",\n            \"target_path\": \"/api-slug\",\n            \"use_target_list\": false,\n            \"cache_timeout\": 60,\n            \"endpoint_returns_list\": false\n        }\n    },\n    \"disable_rate_limit\": false,\n    \"disable_quota\": false,\n    \"custom_middleware\": {\n        \"pre\": [],\n        \"post\": [],\n        \"post_key_auth\": [],\n        \"auth_check\": {\n            \"name\": \"\",\n            \"path\": \"\",\n            \"require_session\": false\n        },\n        \"response\": [],\n        \"driver\": \"\",\n        \"id_extractor\": {\n            \"extract_from\": \"\",\n            \"extract_with\": \"\",\n            \"extractor_config\": {}\n        }\n    },\n    \"custom_middleware_bundle\": \"\",\n    \"cache_options\": {\n        \"cache_timeout\": 60,\n        \"enable_cache\": true,\n        \"cache_all_safe_requests\": false,\n        \"cache_response_codes\": [],\n        \"enable_upstream_cache_control\": false\n    },\n    \"session_lifetime\": 0,\n    \"active\": true,\n    \"auth_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"session_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": null\n    },\n    \"event_handlers\": {\n        \"events\": {}\n    },\n    \"enable_batch_request_support\": false,\n    \"enable_ip_whitelisting\": false,\n    \"allowed_ips\": [],\n    \"dont_set_quota_on_create\": false,\n    \"expire_analytics_after\": 0,\n    \"response_processors\": [],\n    \"CORS\": {\n        \"enable\": false,\n        \"allowed_origins\": [],\n        \"allowed_methods\": [],\n        \"allowed_headers\": [],\n        \"exposed_headers\": [],\n        \"allow_credentials\": false,\n        \"max_age\": 24,\n        \"options_passthrough\": false,\n        \"debug\": false\n    },\n    \"domain\": \"\",\n    \"do_not_track\": false,\n    \"tags\": [],\n    \"enable_context_vars\": false\n}. I fixed my api definition few minutes after i added comment. (i put wrong file in comment). I investigated more and played with different configs on my local on-prem version and doceker-develop-env.. This seems config issue. \nIssue is always visible with this configuration in tyk gateway (those are default parameters)\n\"uptime_tests\": {\n    \"disable\": false,\n    \"config\": {\n      \"enable_uptime_analytics\": true,\n      \"failure_trigger_sample_size\": 3,\n      \"time_wait\": 300,\n      \"checker_pool_size\": 50\n    }\nIssue is not visible with this configuration:\n\"uptime_tests\": {\n    \"disable\": false,\n    \"config\": {\n      \"enable_uptime_analytics\": true,\n      \"failure_trigger_sample_size\": 1,\n      \"time_wait\": 2,\n      \"checker_pool_size\": 50\n    }\nI am 99% sure if they change those parameters everything will work fine. Also @buger please try to test with this configuration.\n\"failure_trigger_sample_size\": 1,\nLOG:\n[Mar 25 02:02:42]  WARN host-check-mgr: [HOST CHECKER MANAGER] Host is DOWN: http://opopasd.org\n[Mar 25 02:02:45]  WARN host-check-mgr: [HOST CHECKER MANAGER] Host is DOWN: http://opopasd.org\n[Mar 25 02:02:47]  WARN host-check-mgr: [HOST CHECKER MANAGER] Host is DOWN: http://opopasd.org\n[Mar 25 02:02:49]  WARN host-check-mgr: [HOST CHECKER MANAGER] Host is DOWN: http://opopasd.org\n[Mar 25 02:02:52]  WARN host-check-mgr: [HOST CHECKER MANAGER] Host is DOWN: http://opopasd.org\n[Mar 25 02:02:54]  WARN host-check-mgr: [HOST CHECKER MANAGER] Host is DOWN: http://opopasd.org\n[Mar 25 02:02:56]  WARN host-check-mgr: [HOST CHECKER MANAGER] Host is DOWN: http://opopasd.org\n[Mar 25 02:02:58]  WARN host-check-mgr: [HOST CHECKER MANAGER] Host is DOWN: http://opopasd.org\n[Mar 25 02:03:01]  WARN host-check-mgr: [HOST CHECKER MANAGER] Host is DOWN: http://opopasd.org\n[Mar 25 02:03:03]  WARN host-check-mgr: [HOST CHECKER MANAGER] Host is DOWN: http://opopasd.org\n[Mar 25 02:03:05]  WARN host-check-mgr: [HOST CHECKER MANAGER] Host is DOWN: http://opopasd.org\n[Mar 25 02:03:08]  WARN host-check-mgr: [HOST CHECKER MANAGER] Host is DOWN: http://opopasd.org\n[Mar 25 02:03:10]  WARN host-check-mgr: [HOST CHECKER MANAGER] Host is DOWN: http://opopasd.org\n[Mar 25 02:03:12]  WARN host-check-mgr: [HOST CHECKER MANAGER] Host is DOWN: http://opopasd.org\n\"failure_trigger_sample_size\": 3,\nLOG:\n[Mar 25 02:04:29]  INFO host-check-mgr: Starting Poller\n[Mar 25 02:04:36]  WARN host-check-mgr: [HOST CHECKER MANAGER] Host is DOWN: http://opopasd.org\n[Mar 25 02:04:42] ERROR proxy: http: proxy error: dial tcp: lookup opopasd.org on 192.168.1.1:53: no such host api_id=d61100957bc0486554d6b724c0211fe4 org_id=58ca7a870fe78101ab417cd0 server_name=opopasd.org user_id=*e03b user_ip=192.168.1.43 user_name=\n[Mar 25 02:04:42] ERROR gateway: request error: Upstream host lookup failed api_id=d61100957bc0486554d6b724c0211fe4 org_id=58ca7a870fe78101ab417cd0 path=/ server_name= user_id= user_ip=192.168.1.43\n[Mar 25 02:04:43]  WARN host-check-mgr: [HOST CHECKER MANAGER] Host is DOWN: http://opopasd.org\n[Mar 25 02:04:47] ERROR proxy: http: proxy error: dial tcp: lookup opopasd.org on 192.168.1.1:53: no such host api_id=d61100957bc0486554d6b724c0211fe4 org_id=58ca7a870fe78101ab417cd0 server_name=opopasd.org user_id=e03b user_ip=192.168.1.43 user_name=\n[Mar 25 02:04:47] ERROR gateway: request error: Upstream host lookup failed api_id=d61100957bc0486554d6b724c0211fe4 org_id=58ca7a870fe78101ab417cd0 path=/ server_name= user_id= user_ip=192.168.1.43\n[Mar 25 02:04:49] ERROR proxy: http: proxy error: dial tcp: lookup opopasd.org on 192.168.1.1:53: no such host api_id=d61100957bc0486554d6b724c0211fe4 org_id=58ca7a870fe78101ab417cd0 server_name=opopasd.org user_id=*e03b user_ip=192.168.1.43 user_name=\n[Mar 25 02:04:49] ERROR gateway: request error: Upstream host lookup failed api_id=d61100957bc0486554d6b724c0211fe4 org_id=58ca7a870fe78101ab417cd0 path=/ server_name= user_id= user_ip=192.168.1.43\n[Mar 25 02:04:50]  WARN host-check-mgr: [HOST CHECKER MANAGER] Host is DOWN: http://opopasd.org\n[Mar 25 02:04:57]  WARN host-check-mgr: [HOST CHECKER MANAGER] Host is DOWN: http://opopasd.org\n[Mar 25 02:05:00] ERROR proxy: http: proxy error: dial tcp: lookup opopasd.org on 192.168.1.1:53: no such host api_id=d61100957bc0486554d6b724c0211fe4 org_id=58ca7a870fe78101ab417cd0 server_name=opopasd.org user_id=e03b user_ip=192.168.1.43 user_name=\n[Mar 25 02:05:00] ERROR gateway: request error: Upstream host lookup failed api_id=d61100957bc0486554d6b724c0211fe4 org_id=58ca7a870fe78101ab417cd0 path=/ server_name= user_id= user_ip=192.168.1.43\n[Mar 25 02:05:04]  WARN host-check-mgr: [HOST CHECKER MANAGER] Host is DOWN: http://opopasd.org. @mvdan i was able to reproduce this issue over Dashboard. This is UI issue for @lghiur, since issue is input form on dashboard designer page.\nReproduction video:\nhttps://screencast.com/t/OneODYnLWI. @mvdan yes, its related to encoding/decoding strings in Dashboard UI \nhttps://github.com/angular-ui/ui-router/issues/421. Fixed on 1.4 release . @buger approved :D. @buger Verified and approved for merge. Verified and approved for merge @buger . @mvdan Uptime tests are still active after gateway restart.. @mvdan @lonelycode On latest master i was not able to reproduce this issue. . tested with two gateways working as expected, approved for merge @buger . During testing this PR i found issue.\nReproduction steps:\n1. Add new option in tyk gateway configuration (proxy_ssl_insecure_skip_verify:true)\n2. Create new api definition with target url which have self signed cert \n3. Over post-man try to get api definition \nIn console we have this error:\n ```\ntyk-gateway_1    | time=\"May  8 21:03:45\" level=debug msg=\"Outbound Request: https://self-signed.badssl.com/\"\ntyk-gateway_1    | time=\"May  8 21:03:45\" level=error msg=\"http: proxy error: x509: certificate signed by unknown authority\" api_id=c9b6fa404f164d4267723eb8237e8fb2 org_id=5910d6c5714d08026acfafe2 server_name=self-signed.badssl.com user_id= user_ip=172.18.0.1 user_name=\n[23:04] \ntyk-gateway_1    | time=\u201cMay  8 21:03:45\u201d level=debug msg=\u201cOutbound Request: https://self-signed.badssl.com/\u201d\ntyk-gateway_1    | time=\u201cMay  8 21:03:45\u201d level=error msg=\u201chttp: proxy error: x509: certificate signed by unknown authority\u201d api_id=c9b6fa404f164d4267723eb8237e8fb2 org_id=5910d6c5714d08026acfafe2 server_name=self-signed.badssl.com user_id= user_ip=172.18.0.1 user_name=\n```\nHere is api definition:\n{\n    \"id\": \"5910d6f3714d08026acfafe6\",\n    \"name\": \"test\",\n    \"slug\": \"test\",\n    \"api_id\": \"c9b6fa404f164d4267723eb8237e8fb2\",\n    \"org_id\": \"5910d6c5714d08026acfafe2\",\n    \"use_keyless\": true,\n    \"use_oauth2\": false,\n    \"use_openid\": false,\n    \"openid_options\": {\n        \"providers\": [],\n        \"segregate_by_client\": false\n    },\n    \"oauth_meta\": {\n        \"allowed_access_types\": [],\n        \"allowed_authorize_types\": [],\n        \"auth_login_redirect\": \"\"\n    },\n    \"auth\": {\n        \"use_param\": false,\n        \"param_name\": \"\",\n        \"use_cookie\": false,\n        \"cookie_name\": \"\",\n        \"auth_header_name\": \"\"\n    },\n    \"use_basic_auth\": false,\n    \"enable_jwt\": false,\n    \"use_standard_auth\": false,\n    \"enable_coprocess_auth\": false,\n    \"jwt_signing_method\": \"\",\n    \"jwt_source\": \"\",\n    \"jwt_identity_base_field\": \"\",\n    \"jwt_client_base_field\": \"\",\n    \"jwt_policy_field_name\": \"\",\n    \"notifications\": {\n        \"shared_secret\": \"\",\n        \"oauth_on_keychange_url\": \"\"\n    },\n    \"enable_signature_checking\": false,\n    \"hmac_allowed_clock_skew\": -1,\n    \"base_identity_provided_by\": \"\",\n    \"definition\": {\n        \"location\": \"header\",\n        \"key\": \"x-api-version\"\n    },\n    \"version_data\": {\n        \"not_versioned\": true,\n        \"versions\": {\n            \"Default\": {\n                \"name\": \"Default\",\n                \"expires\": \"\",\n                \"paths\": {\n                    \"ignored\": [],\n                    \"white_list\": [],\n                    \"black_list\": []\n                },\n                \"use_extended_paths\": true,\n                \"extended_paths\": {},\n                \"global_headers\": {},\n                \"global_headers_remove\": [],\n                \"global_size_limit\": 0,\n                \"override_target\": \"\"\n            }\n        }\n    },\n    \"uptime_tests\": {\n        \"check_list\": [],\n        \"config\": {\n            \"expire_utime_after\": 0,\n            \"service_discovery\": {\n                \"use_discovery_service\": false,\n                \"query_endpoint\": \"\",\n                \"use_nested_query\": false,\n                \"parent_data_path\": \"\",\n                \"data_path\": \"\",\n                \"port_data_path\": \"\",\n                \"target_path\": \"\",\n                \"use_target_list\": false,\n                \"cache_timeout\": 60,\n                \"endpoint_returns_list\": false\n            },\n            \"recheck_wait\": 0\n        }\n    },\n    \"proxy\": {\n        \"preserve_host_header\": false,\n        \"listen_path\": \"/test/\",\n        \"target_url\": \"https://self-signed.badssl.com/\",\n        \"strip_listen_path\": true,\n        \"enable_load_balancing\": false,\n        \"target_list\": [],\n        \"check_host_against_uptime_tests\": false,\n        \"service_discovery\": {\n            \"use_discovery_service\": false,\n            \"query_endpoint\": \"\",\n            \"use_nested_query\": false,\n            \"parent_data_path\": \"\",\n            \"data_path\": \"hostname\",\n            \"port_data_path\": \"port\",\n            \"target_path\": \"/api-slug\",\n            \"use_target_list\": false,\n            \"cache_timeout\": 60,\n            \"endpoint_returns_list\": false\n        }\n    },\n    \"disable_rate_limit\": false,\n    \"disable_quota\": false,\n    \"custom_middleware\": {\n        \"pre\": [],\n        \"post\": [],\n        \"post_key_auth\": [],\n        \"auth_check\": {\n            \"name\": \"\",\n            \"path\": \"\",\n            \"require_session\": false\n        },\n        \"response\": [],\n        \"driver\": \"\",\n        \"id_extractor\": {\n            \"extract_from\": \"\",\n            \"extract_with\": \"\",\n            \"extractor_config\": {}\n        }\n    },\n    \"custom_middleware_bundle\": \"\",\n    \"cache_options\": {\n        \"cache_timeout\": 60,\n        \"enable_cache\": true,\n        \"cache_all_safe_requests\": false,\n        \"cache_response_codes\": [],\n        \"enable_upstream_cache_control\": false\n    },\n    \"session_lifetime\": 0,\n    \"active\": true,\n    \"auth_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"session_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": null\n    },\n    \"event_handlers\": {\n        \"events\": {}\n    },\n    \"enable_batch_request_support\": false,\n    \"enable_ip_whitelisting\": false,\n    \"allowed_ips\": [],\n    \"dont_set_quota_on_create\": false,\n    \"expire_analytics_after\": 0,\n    \"response_processors\": [],\n    \"CORS\": {\n        \"enable\": false,\n        \"allowed_origins\": [],\n        \"allowed_methods\": [],\n        \"allowed_headers\": [],\n        \"exposed_headers\": [],\n        \"allow_credentials\": false,\n        \"max_age\": 24,\n        \"options_passthrough\": false,\n        \"debug\": false\n    },\n    \"domain\": \"\",\n    \"do_not_track\": false,\n    \"tags\": [],\n    \"enable_context_vars\": false\n}\nNote: This issue is visible on protected and non-proteceted api definitions. @buger \nNo i mean generate proxy request e.g. http://{gateway}/{api_definition}. I tested this PR with bad certs found on this site:\nhttps://badssl.com/\nEverything working as expected. @buger approved for merge. @lonelycode @buger I need some documentation or example in order to test this :). @buger @mvdan \nTested on on-prem, hybrid and mdcb. Also i tested on prem with group of gateways. Looking good. @buger approved for merge. @nickReyn @mvdan responded, on all tasks where i found some issues am moving them back to in progress since they are not finished . Verified and approved for merge @buger . @buger i can confirm that system working fine with this fix, but i am not capable for in-deep testing. Looking good. Verified and approved for merge. @buger approved for merge. @mvdan Yes, this is only visible on master. 2.3.X releases are ok!. @mvdan yes. @mvdan @buger after few testing cycles, behavior is same. We are still sending traffic to downed host.. @mvdan i have better results in tests with this PR https://github.com/TykTechnologies/tyk/pull/823 vs https://github.com/TykTechnologies/tyk/pull/830. @mvdan am typing results....\n200 parallel connections on gateway:\nPR 830 - 50 requests sent to downed host\nPR 823 - 20 requests sent to downed host\nThose results are average.... @buger  @mvdan Issue is fixed, but i found other issue....\nWhen both hosts are down gateway send traffic to both downed hosts, same situation is with api definitions which have one upstream host. Host checker triggers event for Host Down but still sending traffic on downed host(s).... @buger approved for merge. @buger approved for merge . Related to:\nhttps://community.tyk.io/t/url-rewriting-path-duplication-in-target/1706/\nhttps://community.tyk.io/t/url-rewrite-with-full-url-doubles-path/1638/. @buger approved for merge. @mvdan i made huge mistake. This issue is for tyk-analytics repo. This issue can be reproduced over dashboard api. . @mvdan i made huge mistake. This issue is for tyk-analytics repo. This issue can be reproduced over dashboard api. . @mvdan fixed\n@buger approved for merge. @mvdan fixed\n@buger approved for merge. @buger approved for merge. I need to reopen this issue since fix is on visible on staging cloud:\nHere is example:\nhttps://tyk-qa-test-org.cloudv2.tyk.io/portal/apis/598a38a8082a9500010f23c7/documentation/\nValidator is still red and we don't have domain in url:\nhttps://online.swagger.io/validator/debug?url=/portal/apis/598a38a8082a9500010f23c7/documentation/raw\nAlso i tried to update new swagger doc, still same.\nhttps://screencast.com/t/IE7arpezUH. Here is updated url:\nhttps://tyk-qa-test-org.cloudv2.tyk.io/portal/apis/598a3b811ea6180001fc0f73/documentation/. @ConsM yes, seems latest changes are not on dashboard staging cloud. \n@buger could you deploy dashboard again on staging cloud?. Verified and fixed on staging-cloud. @buger approved for merge . @buger approved for merge. @buger approved for merge. I will update auto tests . @bitsofinfo This is fixed in 2.3.10 release . @mvdan @lghiur \nBranches:\nGateway: PR/1016\nDashboard API: PR/397\nDashboard UI: PR/138\nReproduction steps:\n1. Create API definition\n2. Create Policy\n3. Attach policy on portal\n4. Register new developer over portal and request key\nActual:\nWhen developer got key that key doesn't have properties from policy enabled for portal. Rate and Quota are not enabled for that key\nPolicy:\n{\n    \"_id\" : ObjectId(\"59c0cf3148e7d101d7e80185\"),\n    \"org_id\" : \"59bfa529dfd25101d2b88ef2\",\n    \"rate\" : 4000.0,\n    \"per\" : 60.0,\n    \"quota_max\" : NumberLong(-1),\n    \"quota_renewal_rate\" : NumberLong(3600),\n    \"access_rights\" : {\n        \"d23d337a6a2f4f455eab146191dc9ea7\" : {\n            \"apiname\" : \"test\",\n            \"apiid\" : \"d23d337a6a2f4f455eab146191dc9ea7\",\n            \"versions\" : [ \n                \"Default\"\n            ],\n            \"allowed_urls\" : []\n        }\n    },\n    \"hmac_enabled\" : false,\n    \"active\" : true,\n    \"name\" : \"polisa\",\n    \"is_inactive\" : false,\n    \"date_created\" : Date(-62135596800000),\n    \"tags\" : [],\n    \"key_expires_in\" : NumberLong(21600),\n    \"partitions\" : {\n        \"quota\" : false,\n        \"rate_limit\" : false,\n        \"acl\" : false\n    },\n    \"last_updated\" : \"1505808178\"\n}\nDeveloper key:\n{\n    \"last_check\": 0,\n    \"allowance\": 0,\n    \"rate\": 0,\n    \"per\": 0,\n    \"expires\": 1505829836,\n    \"quota_max\": 0,\n    \"quota_renews\": 1505808236,\n    \"quota_remaining\": 0,\n    \"quota_renewal_rate\": 0,\n    \"access_rights\": {\n        \"d23d337a6a2f4f455eab146191dc9ea7\": {\n            \"api_name\": \"test\",\n            \"api_id\": \"d23d337a6a2f4f455eab146191dc9ea7\",\n            \"versions\": [\"Default\"],\n            \"allowed_urls\": []\n        }\n    },\n    \"org_id\": \"59bfa529dfd25101d2b88ef2\",\n    \"oauth_client_id\": \"\",\n    \"oauth_keys\": null,\n    \"basic_auth_data\": {\n        \"password\": \"\",\n        \"hash_type\": \"\"\n    },\n    \"jwt_data\": {\n        \"secret\": \"\"\n    },\n    \"hmac_enabled\": false,\n    \"hmac_string\": \"\",\n    \"is_inactive\": false,\n    \"apply_policy_id\": \"59c0cf3148e7d101d7e80185\",\n    \"apply_policies\": null,\n    \"data_expires\": 0,\n    \"monitor\": {\n        \"trigger_limits\": null\n    },\n    \"enable_detail_recording\": false,\n    \"meta_data\": {\n        \"tyk_developer_id\": \"59c0cf6948e7d101d7e80186\",\n        \"tyk_key_request_fields\": {},\n        \"tyk_user_fields\": {}\n    },\n    \"tags\": null,\n    \"alias\": \"dev@test.com\",\n    \"last_updated\": \"1505808236\",\n    \"id_extractor_deadline\": 0,\n    \"session_lifetime\": 0\n}\n. Branches:\nGateway: PR/1016\nDashboard API: PR/397\nDashboard UI: PR/138\nReproduction steps:\n\nCreate api definition \nCreate one policy and select created api definition\nCreate second policy and select created api defitnion \nCreate key and select first and second policy \nGenerate some traffic over created key\nEdit both polices and enable \"Deny acess\"\n\nActual:\nWhen we disable access to keys over polices, keys is still active. \nPolicy one\n{\n    \"_id\" : ObjectId(\"59c0d69548e7d101d7e80188\"),\n    \"org_id\" : \"59bfa529dfd25101d2b88ef2\",\n    \"rate\" : 2998.0,\n    \"per\" : 60.0,\n    \"quota_max\" : NumberLong(-1),\n    \"quota_renewal_rate\" : NumberLong(3600),\n    \"access_rights\" : {\n        \"af08a80fc22449695878dbded2558274\" : {\n            \"apiname\" : \"test-api\",\n            \"apiid\" : \"af08a80fc22449695878dbded2558274\",\n            \"versions\" : [ \n                \"Default\"\n            ],\n            \"allowed_urls\" : []\n        }\n    },\n    \"hmac_enabled\" : false,\n    \"active\" : true,\n    \"name\" : \"policy1\",\n    \"is_inactive\" : true,\n    \"date_created\" : Date(-62135596800000),\n    \"tags\" : [],\n    \"key_expires_in\" : NumberLong(21600),\n    \"partitions\" : {\n        \"quota\" : false,\n        \"rate_limit\" : false,\n        \"acl\" : false\n    },\n    \"last_updated\" : \"1505810225\"\n}\nPolicy two:\n{\n    \"_id\" : ObjectId(\"59c0d6ae48e7d101d7e80189\"),\n    \"org_id\" : \"59bfa529dfd25101d2b88ef2\",\n    \"rate\" : 3000.0,\n    \"per\" : 60.0,\n    \"quota_max\" : NumberLong(-1),\n    \"quota_renewal_rate\" : NumberLong(21600),\n    \"access_rights\" : {\n        \"af08a80fc22449695878dbded2558274\" : {\n            \"apiname\" : \"test-api\",\n            \"apiid\" : \"af08a80fc22449695878dbded2558274\",\n            \"versions\" : [ \n                \"Default\"\n            ],\n            \"allowed_urls\" : []\n        }\n    },\n    \"hmac_enabled\" : false,\n    \"active\" : true,\n    \"name\" : \"policy2\",\n    \"is_inactive\" : true,\n    \"date_created\" : Date(-62135596800000),\n    \"tags\" : [],\n    \"key_expires_in\" : NumberLong(21600),\n    \"partitions\" : {\n        \"quota\" : true,\n        \"rate_limit\" : true,\n        \"acl\" : false\n    },\n    \"last_updated\" : \"1505810181\"\n}. @buger approved for merge. @buger approved for merge. Original TASK:\nhttps://github.com/TykTechnologies/tyk-analytics/issues/309. \u001b[36mtyk-gateway_1  |\u001b[0m time=\"Sep  4 13:45:42\" level=debug msg=\"Health Checker initialised.\" \n\u001b[36mtyk-gateway_1  |\u001b[0m time=\"Sep  4 13:45:42\" level=warning msg=\"The Health Checker is deprecated and we do no longer recommend its use.\" \n@buger approved for merge. @buger approved for merge. Verified . Branch: Master\nrev:  d83299a758a5f28f789111b676ff4248f23dd60a\nI can still reproduce this issue.\nHere is testing api definition:\n{\n    \"id\": \"59ba8291b44d9901d3cd66bb\",\n    \"name\": \"test3\",\n    \"slug\": \"test3\",\n    \"api_id\": \"c5635579fc1b4e3e56db777e03ff0e3f\",\n    \"org_id\": \"59ba58daf1c5e702d237b293\",\n    \"use_keyless\": true,\n    \"use_oauth2\": false,\n    \"use_openid\": false,\n    \"openid_options\": {\n        \"providers\": [],\n        \"segregate_by_client\": false\n    },\n    \"oauth_meta\": {\n        \"allowed_access_types\": [],\n        \"allowed_authorize_types\": [],\n        \"auth_login_redirect\": \"\"\n    },\n    \"auth\": {\n        \"use_param\": false,\n        \"param_name\": \"\",\n        \"use_cookie\": false,\n        \"cookie_name\": \"\",\n        \"auth_header_name\": \"\"\n    },\n    \"use_basic_auth\": false,\n    \"enable_jwt\": false,\n    \"use_standard_auth\": false,\n    \"enable_coprocess_auth\": false,\n    \"jwt_signing_method\": \"\",\n    \"jwt_source\": \"\",\n    \"jwt_identity_base_field\": \"\",\n    \"jwt_client_base_field\": \"\",\n    \"jwt_policy_field_name\": \"\",\n    \"notifications\": {\n        \"shared_secret\": \"\",\n        \"oauth_on_keychange_url\": \"\"\n    },\n    \"enable_signature_checking\": false,\n    \"hmac_allowed_clock_skew\": -1,\n    \"base_identity_provided_by\": \"\",\n    \"definition\": {\n        \"location\": \"header\",\n        \"key\": \"x-api-version\"\n    },\n    \"version_data\": {\n        \"not_versioned\": true,\n        \"versions\": {\n            \"Default\": {\n                \"name\": \"Default\",\n                \"expires\": \"\",\n                \"paths\": {\n                    \"ignored\": [],\n                    \"white_list\": [],\n                    \"black_list\": []\n                },\n                \"use_extended_paths\": true,\n                \"extended_paths\": {\n                    \"transform\": [\n                        {\n                            \"template_data\": {\n                                \"input_type\": \"xml\",\n                                \"template_mode\": \"blob\",\n                                \"enable_session\": false,\n                                \"template_source\": \"ewogICAge3tyYW5nZSAkeCwgJHMgOj0gLnNlcnZlcnMuc2VydmVyfX0gICAgInt7JHMuc2VydmVyTmFtZX19IjogInt7JHMuc2VydmVySVB9fSJ7e2lmIG5vdCAkeH19LHt7ZW5kfX0KICAgIHt7ZW5kfX0KICAgIH0=\"\n                            },\n                            \"path\": \"/ip\",\n                            \"method\": \"GET\"\n                        }\n                    ]\n                },\n                \"global_headers\": {},\n                \"global_headers_remove\": [],\n                \"global_size_limit\": 0,\n                \"override_target\": \"\"\n            }\n        }\n    },\n    \"uptime_tests\": {\n        \"check_list\": [],\n        \"config\": {\n            \"expire_utime_after\": 0,\n            \"service_discovery\": {\n                \"use_discovery_service\": false,\n                \"query_endpoint\": \"\",\n                \"use_nested_query\": false,\n                \"parent_data_path\": \"\",\n                \"data_path\": \"\",\n                \"port_data_path\": \"\",\n                \"target_path\": \"\",\n                \"use_target_list\": false,\n                \"cache_timeout\": 60,\n                \"endpoint_returns_list\": false\n            },\n            \"recheck_wait\": 0\n        }\n    },\n    \"proxy\": {\n        \"preserve_host_header\": false,\n        \"listen_path\": \"/test3/\",\n        \"target_url\": \"http://httpbin.org/\",\n        \"strip_listen_path\": true,\n        \"enable_load_balancing\": false,\n        \"target_list\": [],\n        \"check_host_against_uptime_tests\": false,\n        \"service_discovery\": {\n            \"use_discovery_service\": false,\n            \"query_endpoint\": \"\",\n            \"use_nested_query\": false,\n            \"parent_data_path\": \"\",\n            \"data_path\": \"hostname\",\n            \"port_data_path\": \"port\",\n            \"target_path\": \"/api-slug\",\n            \"use_target_list\": false,\n            \"cache_timeout\": 60,\n            \"endpoint_returns_list\": false\n        }\n    },\n    \"disable_rate_limit\": false,\n    \"disable_quota\": false,\n    \"custom_middleware\": {\n        \"pre\": [],\n        \"post\": [],\n        \"post_key_auth\": [],\n        \"auth_check\": {\n            \"name\": \"\",\n            \"path\": \"\",\n            \"require_session\": false\n        },\n        \"response\": [],\n        \"driver\": \"\",\n        \"id_extractor\": {\n            \"extract_from\": \"\",\n            \"extract_with\": \"\",\n            \"extractor_config\": {}\n        }\n    },\n    \"custom_middleware_bundle\": \"\",\n    \"cache_options\": {\n        \"cache_timeout\": 60,\n        \"enable_cache\": true,\n        \"cache_all_safe_requests\": false,\n        \"cache_response_codes\": [],\n        \"enable_upstream_cache_control\": false\n    },\n    \"session_lifetime\": 0,\n    \"active\": true,\n    \"auth_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"session_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": null\n    },\n    \"event_handlers\": {\n        \"events\": {}\n    },\n    \"enable_batch_request_support\": false,\n    \"enable_ip_whitelisting\": false,\n    \"allowed_ips\": [],\n    \"dont_set_quota_on_create\": false,\n    \"expire_analytics_after\": 0,\n    \"response_processors\": [],\n    \"CORS\": {\n        \"enable\": false,\n        \"allowed_origins\": [],\n        \"allowed_methods\": [],\n        \"allowed_headers\": [],\n        \"exposed_headers\": [],\n        \"allow_credentials\": false,\n        \"max_age\": 24,\n        \"options_passthrough\": false,\n        \"debug\": false\n    },\n    \"domain\": \"\",\n    \"do_not_track\": false,\n    \"tags\": [],\n    \"enable_context_vars\": false,\n    \"config_data\": {}\n}\nTrigger GET call to /ip endpoint \nGateway will crash without panic. In log i just have this:\ntyk-gateway_1    | /develop/start/entrypoint.sh: line 22:   518 Killed                  ./tyk --conf=/develop/confs/tyk.conf --debug --httpprofile\ncompose_tyk-gateway_1 exited with code 137. @mvdan @lonelycode Response transform working fine after this fix. I will open separate task for Request transform. @mvdan I have similar or maybe related issue with this task.\nIssue is visible only over dashboard api not visible on UI.\nGateway branch: Master\nDashboard branch: Refactoring\nVersion: On-prem\nReproduction steps:\n1. Create token protected api over dashboard api\n2. Create key request for that api over api and trigger request \nActual:\nDashboard api returns this response:\n{\"Status\":\"Error\",\"Message\":\"Failed to save new session object to Tyk: Failed to create key: Post http://tyk-gateway:8181/tyk/keys/create: EOF\",\"Meta\":null}\nIn gateway console we have this:\n\u001b[36mtyk-gateway_1    |\u001b[0m time=\"Sep  2 16:17:07\" level=debug msg=\"Inbound redis event received\" \n\u001b[36mtyk-gateway_1    |\u001b[0m time=\"Sep  2 16:17:07\" level=debug msg=\"Inbound redis event received\" \n\u001b[36mtyk-gateway_1    |\u001b[0m time=\"Sep  2 16:17:07\" level=info msg=\"Reloading endpoints\" \n\u001b[36mtyk-gateway_1    |\u001b[0m time=\"Sep  2 16:17:07\" level=info msg=\"Reload queued\" \n\u001b[36mtyk-gateway_1    |\u001b[0m time=\"Sep  2 16:17:07\" level=info msg=\"Initiating reload\" \n\u001b[36mtyk-gateway_1    |\u001b[0m time=\"Sep  2 16:17:07\" level=info msg=\"Loading policies\" \n\u001b[36mtyk-gateway_1    |\u001b[0m time=\"Sep  2 16:17:07\" level=info msg=\"Using Policies from Dashboard Service\" \n\u001b[36mtyk-gateway_1    |\u001b[0m time=\"Sep  2 16:17:07\" level=info msg=\"Mutex lock acquired... calling\" \n\u001b[36mtyk-gateway_1    |\u001b[0m time=\"Sep  2 16:17:07\" level=info msg=\"Calling dashboard service for policy list\" \n\u001b[36mtyk-gateway_1    |\u001b[0m time=\"Sep  2 16:17:07\" level=debug msg=\"Loading Policies Finished: Nonce Set: NDJmMmYwMjctNTc2Zi00NzY4LTUwZDktYTUzZmRlNWUyOTRiMTI5ZjJkOTI1NTQ1NDMxNjUyODk2YzEzYTk2OThmZjI=\" \n\u001b[36mtyk-gateway_1    |\u001b[0m time=\"Sep  2 16:17:07\" level=info msg=\"Processing policy list\" \n\u001b[36mtyk-gateway_1    |\u001b[0m time=\"Sep  2 16:17:07\" level=debug msg=\"Calling: http://tyk-dashboard:3000/system/apis\" \n\u001b[36mtyk-gateway_1    |\u001b[0m time=\"Sep  2 16:17:07\" level=debug msg=\"Using: NodeID: 42f2f027-576f-4768-50d9-a53fde5e294b\" \n\u001b[36mtyk-gateway_1    |\u001b[0m time=\"Sep  2 16:17:07\" level=info msg=\"Reset quota for key.\" inbound-key=\"****c335\" key=quota-bb69b66e \n\u001b[36mtyk-gateway_1    |\u001b[0m 2017/09/02 16:17:07 http: panic serving 172.18.0.6:50938: runtime error: invalid memory address or nil pointer dereference\n\u001b[36mtyk-gateway_1    |\u001b[0m goroutine 755 [running]:\n\u001b[36mtyk-gateway_1    |\u001b[0m net/http.(*conn).serve.func1(0xc42050c640)\n\u001b[36mtyk-gateway_1    |\u001b[0m     /usr/local/go/src/net/http/server.go:1721 +0xd0\n\u001b[36mtyk-gateway_1    |\u001b[0m panic(0xc864c0, 0x131fd30)\n\u001b[36mtyk-gateway_1    |\u001b[0m     /usr/local/go/src/runtime/panic.go:489 +0x2cf\n\u001b[36mtyk-gateway_1    |\u001b[0m main.(*DefaultSessionManager).ResetQuota(0x13467d0, 0xc4205e8e00, 0x38, 0xc42070adc0)\n\u001b[36mtyk-gateway_1    |\u001b[0m     /develop/go/src/github.com/TykTechnologies/tyk/auth_manager.go:101 +0x471\n\u001b[36mtyk-gateway_1    |\u001b[0m main.createKeyHandler(0x126e760, 0xc42025c380, 0xc4204e4800)\n\u001b[36mtyk-gateway_1    |\u001b[0m     /develop/go/src/github.com/TykTechnologies/tyk/api.go:925 +0x29dc\n\u001b[36mtyk-gateway_1    |\u001b[0m main.allowMethods.func1(0x126e760, 0xc42025c380, 0xc4204e4800)\n\u001b[36mtyk-gateway_1    |\u001b[0m     /develop/go/src/github.com/TykTechnologies/tyk/api.go:62 +0x172\n\u001b[36mtyk-gateway_1    |\u001b[0m net/http.HandlerFunc.ServeHTTP(0xc4204fe060, 0x126e760, 0xc42025c380, 0xc4204e4800)\n\u001b[36mtyk-gateway_1    |\u001b[0m     /usr/local/go/src/net/http/server.go:1942 +0x44\n\u001b[36mtyk-gateway_1    |\u001b[0m github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux.(*Router).ServeHTTP(0xc420288050, 0x126e760, 0xc42025c380, 0xc4204e4800)\n\u001b[36mtyk-gateway_1    |\u001b[0m     /develop/go/src/github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux/mux.go:114 +0x10c\n\u001b[36mtyk-gateway_1    |\u001b[0m main.InstrumentationMW.func1(0x126e760, 0xc42025c380, 0xc4204e4600)\n\u001b[36mtyk-gateway_1    |\u001b[0m     /develop/go/src/github.com/TykTechnologies/tyk/instrumentation_handlers.go:51 +0xab\n\u001b[36mtyk-gateway_1    |\u001b[0m net/http.HandlerFunc.ServeHTTP(0xc4204d9900, 0x126e760, 0xc42025c380, 0xc4204e4600)\n\u001b[36mtyk-gateway_1    |\u001b[0m     /usr/local/go/src/net/http/server.go:1942 +0x44\n\u001b[36mtyk-gateway_1    |\u001b[0m main.checkIsAPIOwner.func1(0x126e760, 0xc42025c380, 0xc4204e4600)\n\u001b[36mtyk-gateway_1    |\u001b[0m     /develop/go/src/github.com/TykTechnologies/tyk/main.go:345 +0x1ef\n\u001b[36mtyk-gateway_1    |\u001b[0m net/http.HandlerFunc.ServeHTTP(0xc4204d9920, 0x126e760, 0xc42025c380, 0xc4204e4600)\n\u001b[36mtyk-gateway_1    |\u001b[0m     /usr/local/go/src/net/http/server.go:1942 +0x44\n\u001b[36mtyk-gateway_1    |\u001b[0m net/http.StripPrefix.func1(0x126e760, 0xc42025c380, 0xc4204e4600)\n\u001b[36mtyk-gateway_1    |\u001b[0m     /usr/local/go/src/net/http/server.go:1977 +0xcf\n\u001b[36mtyk-gateway_1    |\u001b[0m net/http.HandlerFunc.ServeHTTP(0xc4204d7800, 0x126e760, 0xc42025c380, 0xc4204e4600)\n\u001b[36mtyk-gateway_1    |\u001b[0m     /usr/local/go/src/net/http/server.go:1942 +0x44\n\u001b[36mtyk-gateway_1    |\u001b[0m github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux.(*Router).ServeHTTP(0xc420228c80, 0x126e760, 0xc42025c380, 0xc4204e4600)\n\u001b[36mtyk-gateway_1    |\u001b[0m     /develop/go/src/github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux/mux.go:114 +0x10c\n\u001b[36mtyk-gateway_1    |\u001b[0m net/http.(*ServeMux).ServeHTTP(0xc4202eb440, 0x126e760, 0xc42025c380, 0xc4204e4400)\n\u001b[36mtyk-gateway_1    |\u001b[0m     /usr/local/go/src/net/http/server.go:2238 +0x130\n\u001b[36mtyk-gateway_1    |\u001b[0m net/http.serverHandler.ServeHTTP(0xc4201ec630, 0x126e760, 0xc42025c380, 0xc4204e4400)\n\u001b[36mtyk-gateway_1    |\u001b[0m     /usr/local/go/src/net/http/server.go:2568 +0x92\n\u001b[36mtyk-gateway_1    |\u001b[0m net/http.(*conn).serve(0xc42050c640, 0x126f560, 0xc4205e8ac0)\n\u001b[36mtyk-gateway_1    |\u001b[0m     /usr/local/go/src/net/http/server.go:1825 +0x612\n\u001b[36mtyk-gateway_1    |\u001b[0m created by net/http.(*Server).Serve\n\u001b[36mtyk-gateway_1    |\u001b[0m     /usr/local/go/src/net/http/server.go:2668 +0x2ce\n\u001b[36mtyk-gateway_1    |\u001b[0m time=\"Sep  2 16:17:07\" level=debug msg=\"INITIALISING EVENT HANDLERS\" \n\u001b[36mtyk-gateway_1    |\u001b[0m time=\"Sep  2 16:17:07\" level=debug msg=\"Checking for transform paths...\". @mvdan Done\nhttps://github.com/TykTechnologies/tyk/issues/1063. Verified on Refactoring. @mvdan Yes i have only one api def loaded on gateway and this happening only first key generation request.  If i trigger same call again gateway will generate and return key in response. . @mvdan yes, since reload is triggered after we add api def. I will try to reload twice before i submit request for key. Released. @buger verified . @buger approved tests are green, and quick checking looking good . @buger @mvdan \nI found one issue during testing this PR:\nEnv: On-prem\nReproduction steps:\n1. Leave \"tyk_js_path\": \"./js/tyk.js\" in gateway configuration\n2. Over dashboard import api definition which have virtual path\nActual:\nGateway panics and shutdowns\n```\ntyk-gateway_1    | time=\"Oct  3 10:39:02\" level=error msg=\"Could not load user's TykJS: open ./js/tyk.js: no such file or directory\"\ntyk-gateway_1    | time=\"Oct  3 10:39:02\" level=debug msg=\"INITIALISING EVENT HANDLERS\"\ntyk-gateway_1    | time=\"Oct  3 10:39:02\" level=debug msg=\"Checking for transform paths...\"\ntyk-gateway_1    | time=\"Oct  3 10:39:02\" level=debug msg=\"Checking for transform paths...\"\ntyk-gateway_1    | time=\"Oct  3 10:39:02\" level=debug msg=\"Loading JS blob\"\ntyk-gateway_1    | panic: runtime error: invalid memory address or nil pointer dereference\ntyk-gateway_1    | [signal SIGSEGV: segmentation violation code=0x1 addr=0x8 pc=0xb67fc4]\ntyk-gateway_1    |\ntyk-gateway_1    | goroutine 223 [running]:\ntyk-gateway_1    | main.preLoadVirtualMetaCode(0xc420748b98, 0xc4207a6370)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/mw_virtual_endpoint.go:76 +0x2b4\ntyk-gateway_1    | main.APIDefinitionLoader.compileVirtualPathspathSpec(0xc4203171e0, 0x2, 0x4, 0xc, 0xc4207a6300, 0x0, 0x0, 0x0)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/api_definition.go:672 +0x18f\ntyk-gateway_1    | main.APIDefinitionLoader.getExtendedPathSpecs(0xc420217990, 0x7, 0x0, 0x0, 0x13731b8, 0x0, 0x0, 0x13731b8, 0x0, 0x0, ...)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/api_definition.go:722 +0x454\ntyk-gateway_1    | main.APIDefinitionLoader.MakeSpec(0xc420318000, 0xc42070f7e0)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/api_definition.go:193 +0xb1c\ntyk-gateway_1    | main.APIDefinitionLoader.FromDashboardService(0xc420767890, 0x25, 0xc4201db1a0, 0x20, 0x0, 0x0, 0x0)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/api_definition.go:286 +0x927\ntyk-gateway_1    | main.getAPISpecs(0x4c257e, 0x3b, 0x40)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/main.go:194 +0x647\ntyk-gateway_1    | main.doReload()\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/main.go:554 +0x3c\ntyk-gateway_1    | main.reloadLoop(0xc420588c60)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/main.go:604 +0x102\ntyk-gateway_1    | created by main.start\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/main.go:1081 +0x180\ntyk-dashboard_1  | time=\"Oct  3 10:39:02\" level=debug msg=\"Sending notification{NoticeDashboardZeroConf {\\\"DashboardConfig\\\":{\\\"Hostname\\\":\\\"www.tyk-test.com:8181\\\",\\\"Port\\\":3000,\\\"UseTLS\\\":false},\\\"TimeStamp\\\":1507027142} }\"\ncompose_tyk-gateway_1 exited with code 2\n```\nNOTE:\nThis issue is not visible when we remove \"tyk_js_path\": \"./js/tyk.js\" from configuration \nHere is testing gateway configuration\n{\n    \"listen_address\": \"\",\n    \"listen_port\": 8181,\n    \"secret\": \"352d20ee67be67f6340b4c0605b044b7\",\n    \"node_secret\": \"352d20ee67be67f6340b4c0605b044b7\",\n    \"template_path\": \"./templates\",\n    \"tyk_js_path\": \"./js/tyk.js\",\n    \"middleware_path\": \"./middleware\",\n    \"policies\": {\n        \"policy_source\": \"service\",\n        \"policy_connection_string\": \"http://tyk-dashboard:3000\",\n        \"policy_record_name\": \"tyk_policies\",\n        \"allow_explicit_policy_id\": true\n    },\n    \"use_db_app_configs\": true,\n    \"db_app_conf_options\": {\n        \"connection_string\": \"http://tyk-dashboard:3000\",\n        \"node_is_segmented\": false,\n        \"tags\": [\"test\"]\n    },\n    \"disable_dashboard_zeroconf\": false,\n    \"app_path\": \"./test_apps/\",\n    \"storage\": {\n        \"type\": \"redis\",\n        \"host\": \"\",\n        \"port\": 0,\n        \"hosts\": {\n            \"tyk-redis\": \"6379\"\n        },\n        \"username\": \"\",\n        \"password\": \"\",\n        \"database\": 0,\n        \"optimisation_max_idle\": 3000,\n        \"optimisation_max_active\": 5000,\n        \"enable_cluster\": false\n    },\n    \"enable_separate_cache_store\": false,\n    \"cache_storage\": {\n        \"type\": \"redis\",\n        \"host\": \"\",\n        \"port\": 0,\n        \"hosts\": {\n            \"localhost\": \"6379\"\n        },\n        \"username\": \"\",\n        \"password\": \"\",\n        \"database\": 0,\n        \"optimisation_max_idle\": 3000,\n        \"optimisation_max_active\": 5000,\n        \"enable_cluster\": false\n    },\n       \"enable_analytics\": true,\n    \"analytics_config\": {\n        \"type\": \"mongo\",\n        \"ignored_ips\": [],\n        \"enable_detailed_recording\": true,\n        \"enable_geo_ip\": true,\n        \"geo_ip_db_path\": \"./GeoLite2-City.mmdb\",\n        \"normalise_urls\": {\n            \"enabled\": true,\n            \"normalise_uuids\": true,\n            \"normalise_numbers\": true,\n            \"custom_patterns\": []\n        }\n    },\n    \"health_check\": {\n        \"enable_health_checks\": false,\n        \"health_check_value_timeouts\": 0\n    },\n    \"enable_detailed_recording\": false,\n    \"optimisations_use_async_session_write\": true,\n    \"allow_master_keys\": false,\n    \"hash_keys\": true,\n    \"suppress_redis_signal_reload\": false,\n    \"suppress_default_org_store\": false,\n    \"use_redis_log\": true,\n    \"sentry_code\": \"\",\n    \"use_sentry\": false,\n    \"use_syslog\": true,\n    \"use_graylog\": false,\n    \"use_logstash\": false,\n    \"graylog_network_addr\": \"\",\n    \"logstash_network_addr\": \"\",\n    \"syslog_transport\": \"UDP\",\n    \"logstash_transport\": \"\",\n    \"syslog_network_addr\": \"192.168.1.50\",\n    \"enforce_org_data_age\": true,\n    \"enforce_org_data_detail_logging\": false,\n    \"enforce_org_quotas\": true,\n    \"experimental_process_org_off_thread\": true,\n    \"enable_non_transactional_rate_limiter\": true,\n    \"enable_sentinel_rate_limiter\": false,\n    \"management_node\": false,\n    \"Monitor\": {\n        \"enable_trigger_monitors\": false,\n        \"configuration\": {\n            \"method\": \"\",\n            \"target_path\": \"\",\n            \"template_path\": \"\",\n            \"header_map\": null,\n            \"event_timeout\": 0\n        },\n        \"global_trigger_limit\": 0,\n        \"monitor_user_keys\": false,\n        \"monitor_org_keys\": false\n    },\n    \"oauth_refresh_token_expire\": 0,\n    \"oauth_token_expire\": 0,\n    \"oauth_redirect_uri_separator\": \";\",\n     \"slave_options\": {\n        \"use_rpc\": false,\n        \"connection_string\": \"\",\n        \"rpc_key\": \"\",\n        \"api_key\": \"\",\n        \"enable_rpc_cache\": false,\n        \"bind_to_slugs\": false,\n        \"disable_keyspace_sync\": false,\n        \"group_id\": \"\"\n    },\n    \"disable_virtual_path_blobs\": false,\n    \"local_session_cache\": {\n        \"disable_cached_session_state\": true,\n        \"cached_session_timeout\": 0,\n        \"cached_session_eviction\": 0\n    },\n    \"http_server_options\": {\n        \"skip_url_cleaning\": true,\n        \"override_defaults\": true,\n        \"read_timeout\": 0,\n        \"write_timeout\": 0,\n        \"use_ssl\": false,\n        \"use_ssl_le\": false,\n        \"enable_websockets\": true,\n        \"certificates\": [],\n        \"server_name\": \"\",\n        \"min_version\": 0,\n        \"flush_interval\": 0\n    },\n    \"service_discovery\": {\n        \"default_cache_timeout\": 0\n    },\n    \"close_connections\": true,\n    \"auth_override\": {\n        \"force_auth_provider\": false,\n        \"auth_provider\": {\n            \"name\": \"\",\n            \"storage_engine\": \"\",\n            \"meta\": null\n        },\n        \"force_session_provider\": false,\n        \"session_provider\": {\n            \"name\": \"\",\n            \"storage_engine\": \"\",\n            \"meta\": null\n        }\n    },\n    \"uptime_tests\": {\n        \"disable\": false,\n        \"config\": {\n            \"failure_trigger_sample_size\": 1,\n            \"time_wait\": 2,\n            \"checker_pool_size\": 50,\n            \"enable_uptime_analytics\": true\n        }\n    },\n    \"hostname\": \"\",\n    \"enable_api_segregation\": false,\n    \"control_api_hostname\": \"\",\n    \"enable_custom_domains\": true,\n    \"enable_jsvm\": true,\n    \"enable_coprocess\": false,\n    \"hide_generator_header\": false,\n    \"event_handlers\": {\n        \"events\": {}\n    },\n    \"event_trigers_defunct\": {},\n    \"pid_file_location\": \"./tyk-gateway.pid\",\n    \"allow_insecure_configs\": true,\n    \"public_key_path\": \"/home/tyk/go/src/github.com/lonelycode/tyk-cloud-config-v2/keys/public.pem\",\n    \"close_idle_connections\": false,\n    \"allow_remote_config\": true,\n    \"enable_bundle_downloader\": false\n}\nHere is testing api definition:\n{\n    \"id\": \"59b84a07840e2a01cc414f27\",\n    \"name\": \"test\",\n    \"slug\": \"test\",\n    \"api_id\": \"6a7a99485dc845dc52ba58e43275b2ac\",\n    \"org_id\": \"59b849ee840e2a01cc414f23\",\n    \"use_keyless\": true,\n    \"use_oauth2\": false,\n    \"use_openid\": false,\n    \"openid_options\": {\n        \"providers\": [],\n        \"segregate_by_client\": false\n    },\n    \"oauth_meta\": {\n        \"allowed_access_types\": [],\n        \"allowed_authorize_types\": [],\n        \"auth_login_redirect\": \"\"\n    },\n    \"auth\": {\n        \"use_param\": false,\n        \"param_name\": \"\",\n        \"use_cookie\": false,\n        \"cookie_name\": \"\",\n        \"auth_header_name\": \"\"\n    },\n    \"use_basic_auth\": false,\n    \"enable_jwt\": false,\n    \"use_standard_auth\": false,\n    \"enable_coprocess_auth\": false,\n    \"jwt_signing_method\": \"\",\n    \"jwt_source\": \"\",\n    \"jwt_identity_base_field\": \"\",\n    \"jwt_client_base_field\": \"\",\n    \"jwt_policy_field_name\": \"\",\n    \"notifications\": {\n        \"shared_secret\": \"\",\n        \"oauth_on_keychange_url\": \"\"\n    },\n    \"enable_signature_checking\": false,\n    \"hmac_allowed_clock_skew\": -1,\n    \"base_identity_provided_by\": \"\",\n    \"definition\": {\n        \"location\": \"header\",\n        \"key\": \"x-api-version\"\n    },\n    \"version_data\": {\n        \"not_versioned\": true,\n        \"versions\": {\n            \"Default\": {\n                \"name\": \"Default\",\n                \"expires\": \"\",\n                \"paths\": {\n                    \"ignored\": [],\n                    \"white_list\": [],\n                    \"black_list\": []\n                },\n                \"use_extended_paths\": true,\n                \"extended_paths\": {\n                    \"virtual\": [\n                        {\n                            \"response_function_name\": \"testVirtData\",\n                            \"function_source_type\": \"blob\",\n                            \"function_source_uri\": \"ZnVuY3Rpb24gdGVzdFZpcnREYXRhKHJlcXVlc3QsIHNlc3Npb24sIGNvbmZpZykgewogICAgdmFyIHJlc3AgPSB7CiAgICAgICAgQm9keTogcmVxdWVzdC5Cb2R5ICsgIiBhZGRlZCBib2R5IiwgCiAgICAgICAgSGVhZGVyczogewogICAgICAgICAgICAiZGF0YS1mb28iOiBjb25maWcuY29uZmlnX2RhdGEuZm9vCiAgICAgICAgfSwKICAgICAgICBDb2RlOiAyMDIKICAgIH0KICAgIHJldHVybiBUeWtKc1Jlc3BvbnNlKHJlc3AsIHNlc3Npb24ubWV0YV9kYXRhKSAgIAp9\",\n                            \"path\": \"/ilija2\",\n                            \"method\": \"POST\",\n                            \"use_session\": false\n                        },\n                        {\n                            \"response_function_name\": \"batchTest\",\n                            \"function_source_type\": \"blob\",\n                            \"function_source_uri\": \"ZnVuY3Rpb24gYmF0Y2hUZXN0IChyZXF1ZXN0LCBzZXNzaW9uLCBjb25maWcpIHsKICAgICAgICAvLyBTZXQgdXAgYSByZXNwb25zZSBvYmplY3QKICAgICAgICB2YXIgcmVzcG9uc2UgPSB7CiAgICAgICAgICAgIEJvZHk6ICIiCiAgICAgICAgICAgIEhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICJ0ZXN0IjogInZpcnR1YWwtaGVhZGVyLTEiLAogICAgICAgICAgICAgICAgInRlc3QtMiI6ICJ2aXJ0dWFsLWhlYWRlci0yIiwKICAgICAgICAgICAgICAgICJjb250ZW50LXR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgQ29kZTogMjAwCiAgICAgICAgfQogICAgCiAgICAgICAgLy8gQmF0Y2ggcmVxdWVzdAogICAgICAgIHZhciBiYXRjaCA9IHsKICAgICAgICAgICAgInJlcXVlc3RzIjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJtZXRob2QiOiAiR0VUIiwKICAgICAgICAgICAgICAgICAgICAiaGVhZGVycyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgIngtdHlrLXRlc3QiOiAiMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ4LXR5ay12ZXJzaW9uIjogIjEuMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhdXRob3JpemF0aW9uIjogIjFkYmM4M2I5YzQzMTY0OWQ3Njk4ZmFhOTc5N2UyOTAwZiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJib2R5IjogIiIsCiAgICAgICAgICAgICAgICAgICAgInJlbGF0aXZlX3VybCI6ICJodHRwOi8vaHR0cGJpbi5vcmcvaGVhZGVycyIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJHRVQiLAogICAgICAgICAgICAgICAgICAgICJoZWFkZXJzIjoge30sCiAgICAgICAgICAgICAgICAgICAgImJvZHkiOiAiIiwKICAgICAgICAgICAgICAgICAgICAicmVsYXRpdmVfdXJsIjogImh0dHA6Ly9odHRwYmluLm9yZy91c2VyLWFnZW50IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAic3VwcHJlc3NfcGFyYWxsZWxfZXhlY3V0aW9uIjogZmFsc2UKICAgICAgICB9CiAgICAKICAgICAgICBsb2coIltWaXJ0dWFsIFRlc3RdIE1ha2luZyBVcHN0cmVhbSBCYXRjaCBSZXF1ZXN0IikKICAgICAgICB2YXIgbmV3Qm9keSA9IFR5a0JhdGNoUmVxdWVzdChKU09OLnN0cmluZ2lmeShiYXRjaCkpCiAgICAKICAgICAgICAvLyBXZSBrbm93IHRoYXQgdGhlIHJlcXVlc3RzIHJldHVybiBKU09OIGluIHRoZWlyIGJvZHksIGxldHMgZmxhdHRlbiBpdAogICAgICAgIHZhciBhc0pTID0gSlNPTi5wYXJzZShuZXdCb2R5KQogICAgICAgIGZvciAodmFyIGkgaW4gYXNKUykgewogICAgICAgICAgICBhc0pTW2ldLmJvZHkgPSBKU09OLnBhcnNlKGFzSlNbaV0uYm9keSkKICAgICAgICB9CiAgICAKICAgICAgICAvLyBXZSBuZWVkIHRvIHNlbmQgYSBzdHJpbmcgb2JqZWN0IGJhY2sgdG8gVHlrIHRvIGVtYmVkIGluIHRoZSByZXNwb25zZQogICAgICAgIHJlc3BvbnNlLkJvZHkgPSBKU09OLnN0cmluZ2lmeShhc0pTKQogICAgCiAgICAgICAgcmV0dXJuIFR5a0pzUmVzcG9uc2UocmVzcG9uc2UsIHNlc3Npb24ubWV0YV9kYXRhKQogICAgCiAgICB9CiAgICBsb2coIkJhdGNoIFRlc3QgaW5pdGlhbGlzZWQiKQ==\",\n                            \"path\": \"/ilija\",\n                            \"method\": \"GET\",\n                            \"use_session\": false\n                        }\n                    ]\n                },\n                \"global_headers\": {},\n                \"global_headers_remove\": [],\n                \"global_size_limit\": 0,\n                \"override_target\": \"\"\n            }\n        }\n    },\n    \"uptime_tests\": {\n        \"check_list\": [],\n        \"config\": {\n            \"expire_utime_after\": 0,\n            \"service_discovery\": {\n                \"use_discovery_service\": false,\n                \"query_endpoint\": \"\",\n                \"use_nested_query\": false,\n                \"parent_data_path\": \"\",\n                \"data_path\": \"\",\n                \"port_data_path\": \"\",\n                \"target_path\": \"\",\n                \"use_target_list\": false,\n                \"cache_timeout\": 60,\n                \"endpoint_returns_list\": false\n            },\n            \"recheck_wait\": 0\n        }\n    },\n    \"proxy\": {\n        \"preserve_host_header\": false,\n        \"listen_path\": \"/test/\",\n        \"target_url\": \"http://httpbin.org/\",\n        \"strip_listen_path\": true,\n        \"enable_load_balancing\": false,\n        \"target_list\": [],\n        \"check_host_against_uptime_tests\": false,\n        \"service_discovery\": {\n            \"use_discovery_service\": false,\n            \"query_endpoint\": \"\",\n            \"use_nested_query\": false,\n            \"parent_data_path\": \"\",\n            \"data_path\": \"hostname\",\n            \"port_data_path\": \"port\",\n            \"target_path\": \"/api-slug\",\n            \"use_target_list\": false,\n            \"cache_timeout\": 60,\n            \"endpoint_returns_list\": false\n        }\n    },\n    \"disable_rate_limit\": false,\n    \"disable_quota\": false,\n    \"custom_middleware\": {\n        \"pre\": [],\n        \"post\": [],\n        \"post_key_auth\": [],\n        \"auth_check\": {\n            \"name\": \"\",\n            \"path\": \"\",\n            \"require_session\": false\n        },\n        \"response\": [],\n        \"driver\": \"\",\n        \"id_extractor\": {\n            \"extract_from\": \"\",\n            \"extract_with\": \"\",\n            \"extractor_config\": {}\n        }\n    },\n    \"custom_middleware_bundle\": \"\",\n    \"cache_options\": {\n        \"cache_timeout\": 60,\n        \"enable_cache\": true,\n        \"cache_all_safe_requests\": false,\n        \"cache_response_codes\": [],\n        \"enable_upstream_cache_control\": false\n    },\n    \"session_lifetime\": 0,\n    \"active\": true,\n    \"auth_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"session_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": null\n    },\n    \"event_handlers\": {\n        \"events\": {}\n    },\n    \"enable_batch_request_support\": true,\n    \"enable_ip_whitelisting\": false,\n    \"allowed_ips\": [],\n    \"dont_set_quota_on_create\": false,\n    \"expire_analytics_after\": 0,\n    \"response_processors\": [],\n    \"CORS\": {\n        \"enable\": false,\n        \"allowed_origins\": [],\n        \"allowed_methods\": [],\n        \"allowed_headers\": [],\n        \"exposed_headers\": [],\n        \"allow_credentials\": false,\n        \"max_age\": 24,\n        \"options_passthrough\": false,\n        \"debug\": false\n    },\n    \"domain\": \"\",\n    \"do_not_track\": false,\n    \"tags\": [],\n    \"enable_context_vars\": false,\n    \"config_data\": {\n        \"foo\": \"bar\"\n    }\n}. @mvdan yes, @buger approved for merge. @buger approved for merge. @mvdan issue is not visible on current stable. When i trigger call to transformed endpoint, gateway starts to eat memory and crash when consumes all memory. . During testing this PR i found issue:\nENV: On-prem\nDashboard branch: TykTechnologies/tyk-analytics#453\nGateway branch: Master\nWhen we set rate limit on api level and update rate limit after some time, old limit is applied on api def. Rate limit changes are visible only when we restart gateway, on gateway reload gateway does not propagate new rate limit values. . @mvdan approved for merge. Verified . Verified. @mvdan please add this support to dashboard BE\nhttps://www.screencast.com/t/UHXatVKz7. @buger @mvdan approved for 2.4 merge. During testing PR i found this:\nWhen i execute ./tyk lint, we have this error in in output \nroot@89fe999d29d3:/develop/go/src/github.com/TykTechnologies/tyk# ./tyk lint\nissues found in tyk.conf:\nMonitor: Additional property Monitor is not allowed. @buger approved for merge. @lonelycode @mvdan approved for merge . Fixed and verified on 2.3.10 release. @mvdan approved, please merge on relase-2.3 branch. Released. Verified @mvdan please merge on release-2.3 branch. Associated pr: \nhttps://github.com/TykTechnologies/tyk/pull/1230. Verified . @buger approved for merge . Verified. Verified @lonelycode we also should merge this on 2.4 release.. Verified . @buger @matiasinsaurralde During testing this PR i found this issue.\nWhen i start gateway, bundles are loaded and when i call that api definition, gateway crash and reloads. Here is api def and log \n{\n    \"id\": \"5a1f010ec143f806e4febb80\",\n    \"name\": \"basic\",\n    \"slug\": \"basic\",\n    \"api_id\": \"8a0fec931ed34f146bfa68e23c8234f8\",\n    \"org_id\": \"58e274620fe7810a0e889ab9\",\n    \"use_keyless\": true,\n    \"use_oauth2\": false,\n    \"use_openid\": false,\n    \"openid_options\": {\n        \"providers\": [],\n        \"segregate_by_client\": false\n    },\n    \"oauth_meta\": {\n        \"allowed_access_types\": [],\n        \"allowed_authorize_types\": [],\n        \"auth_login_redirect\": \"\"\n    },\n    \"auth\": {\n        \"use_param\": false,\n        \"param_name\": \"\",\n        \"use_cookie\": false,\n        \"cookie_name\": \"\",\n        \"auth_header_name\": \"\",\n        \"use_certificate\": false\n    },\n    \"use_basic_auth\": false,\n    \"use_mutual_tls_auth\": false,\n    \"client_certificates\": null,\n    \"upstream_certificates\": {},\n    \"enable_jwt\": false,\n    \"use_standard_auth\": false,\n    \"enable_coprocess_auth\": false,\n    \"jwt_signing_method\": \"\",\n    \"jwt_source\": \"\",\n    \"jwt_identity_base_field\": \"\",\n    \"jwt_client_base_field\": \"\",\n    \"jwt_policy_field_name\": \"\",\n    \"notifications\": {\n        \"shared_secret\": \"\",\n        \"oauth_on_keychange_url\": \"\"\n    },\n    \"enable_signature_checking\": false,\n    \"hmac_allowed_clock_skew\": -1,\n    \"base_identity_provided_by\": \"\",\n    \"definition\": {\n        \"location\": \"header\",\n        \"key\": \"x-api-version\"\n    },\n    \"version_data\": {\n        \"not_versioned\": true,\n        \"versions\": {\n            \"Default\": {\n                \"name\": \"Default\",\n                \"expires\": \"\",\n                \"paths\": {\n                    \"ignored\": [],\n                    \"white_list\": [],\n                    \"black_list\": []\n                },\n                \"use_extended_paths\": true,\n                \"extended_paths\": {\n                    \"transform_headers\": [\n                        {\n                            \"delete_headers\": [],\n                            \"add_headers\": {\n                                \"qa\": \"dodao\"\n                            },\n                            \"path\": \"/ip\",\n                            \"method\": \"GET\",\n                            \"act_on\": false\n                        }\n                    ],\n                    \"transform_response_headers\": [\n                        {\n                            \"delete_headers\": [],\n                            \"add_headers\": {\n                                \"qa\": \"vratio\"\n                            },\n                            \"path\": \"/ip\",\n                            \"method\": \"GET\",\n                            \"act_on\": false\n                        }\n                    ]\n                },\n                \"global_headers\": {},\n                \"global_headers_remove\": [],\n                \"global_size_limit\": 0,\n                \"override_target\": \"\"\n            }\n        }\n    },\n    \"uptime_tests\": {\n        \"check_list\": [],\n        \"config\": {\n            \"expire_utime_after\": 0,\n            \"service_discovery\": {\n                \"use_discovery_service\": false,\n                \"query_endpoint\": \"\",\n                \"use_nested_query\": false,\n                \"parent_data_path\": \"\",\n                \"data_path\": \"\",\n                \"port_data_path\": \"\",\n                \"target_path\": \"\",\n                \"use_target_list\": false,\n                \"cache_timeout\": 60,\n                \"endpoint_returns_list\": false\n            },\n            \"recheck_wait\": 0\n        }\n    },\n    \"proxy\": {\n        \"preserve_host_header\": false,\n        \"listen_path\": \"/basic/\",\n        \"target_url\": \"http://httpbin.org/\",\n        \"strip_listen_path\": true,\n        \"enable_load_balancing\": false,\n        \"target_list\": [],\n        \"check_host_against_uptime_tests\": false,\n        \"service_discovery\": {\n            \"use_discovery_service\": false,\n            \"query_endpoint\": \"\",\n            \"use_nested_query\": false,\n            \"parent_data_path\": \"\",\n            \"data_path\": \"hostname\",\n            \"port_data_path\": \"port\",\n            \"target_path\": \"/api-slug\",\n            \"use_target_list\": false,\n            \"cache_timeout\": 60,\n            \"endpoint_returns_list\": false\n        }\n    },\n    \"disable_rate_limit\": false,\n    \"disable_quota\": false,\n    \"custom_middleware\": {\n        \"pre\": [],\n        \"post\": [],\n        \"post_key_auth\": [],\n        \"auth_check\": {\n            \"name\": \"\",\n            \"path\": \"\",\n            \"require_session\": false\n        },\n        \"response\": [],\n        \"driver\": \"\",\n        \"id_extractor\": {\n            \"extract_from\": \"\",\n            \"extract_with\": \"\",\n            \"extractor_config\": {}\n        }\n    },\n    \"custom_middleware_bundle\": \"bundle2.zip\",\n    \"cache_options\": {\n        \"cache_timeout\": 60,\n        \"enable_cache\": true,\n        \"cache_all_safe_requests\": true,\n        \"cache_response_codes\": [\n            200\n        ],\n        \"enable_upstream_cache_control\": false\n    },\n    \"session_lifetime\": 0,\n    \"active\": true,\n    \"auth_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"session_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": null\n    },\n    \"event_handlers\": {\n        \"events\": {}\n    },\n    \"enable_batch_request_support\": false,\n    \"enable_ip_whitelisting\": false,\n    \"allowed_ips\": [],\n    \"dont_set_quota_on_create\": false,\n    \"expire_analytics_after\": 0,\n    \"response_processors\": [\n        {\n            \"name\": \"header_injector\",\n            \"options\": {}\n        }\n    ],\n    \"CORS\": {\n        \"enable\": false,\n        \"allowed_origins\": [],\n        \"allowed_methods\": [],\n        \"allowed_headers\": [],\n        \"exposed_headers\": [],\n        \"allow_credentials\": false,\n        \"max_age\": 24,\n        \"options_passthrough\": false,\n        \"debug\": false\n    },\n    \"domain\": \"\",\n    \"do_not_track\": false,\n    \"tags\": [],\n    \"enable_context_vars\": false,\n    \"config_data\": {},\n    \"tag_headers\": null,\n    \"global_rate_limit\": {\n        \"rate\": 0,\n        \"per\": 0\n    },\n    \"strip_auth_data\": false\n}\nLOG:\n```\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mpython:\u001b[0m Setting PYTHONPATH to 'coprocess/python:coprocess/python/proto:/opt/tyk-gateway/middleware/bundles'\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mpython:\u001b[0m Initializing interpreter, Py_Initialize()\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mhost-check-mgr:\u001b[0m Starting Poller\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mpython:\u001b[0m Initializing dispatcher\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Setting up analytics normaliser\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m PIDFile location set to: ./tyk-gateway.pid\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Initialising Tyk REST API Endpoints\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m --> Standard listener (http)\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Setting up Server\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Registering node.\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mdashboard:\u001b[0m Node registered \u001b[32mid\u001b[0m=59d6986b-e88f-41eb-69b5-1043ffa4006d\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Initialising distributed rate limiter\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m Starting gateway rate limiter notifications...\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Detected 10 APIs\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API configurations.\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Tracking hostname \u001b[32mapi_name\u001b[0m=ilija-novi \u001b[32mdomain\u001b[0m=(no host)\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Tracking hostname \u001b[32mapi_name\u001b[0m=endpoint \u001b[32mdomain\u001b[0m=(no host)\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Tracking hostname \u001b[32mapi_name\u001b[0m=new_api \u001b[32mdomain\u001b[0m=(no host)\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Tracking hostname \u001b[32mapi_name\u001b[0m=test_qa \u001b[32mdomain\u001b[0m=(no host)\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Tracking hostname \u001b[32mapi_name\u001b[0m=basic3 \u001b[32mdomain\u001b[0m=(no host)\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Tracking hostname \u001b[32mapi_name\u001b[0m=opetja \u001b[32mdomain\u001b[0m=(no host)\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Tracking hostname \u001b[32mapi_name\u001b[0m=basic2 \u001b[32mdomain\u001b[0m=(no host)\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Tracking hostname \u001b[32mapi_name\u001b[0m=basic \u001b[32mdomain\u001b[0m=(no host)\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Tracking hostname \u001b[32mapi_name\u001b[0m=qaqa \u001b[32mdomain\u001b[0m=(no host)\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Tracking hostname \u001b[32mapi_name\u001b[0m=Swagger Petstore \u001b[32mdomain\u001b[0m=(no host)\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API \u001b[32mapi_name\u001b[0m=Swagger Petstore\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API \u001b[32mapi_name\u001b[0m=ilija-novi\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API \u001b[32mapi_name\u001b[0m=endpoint\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API \u001b[32mapi_name\u001b[0m=new_api\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API \u001b[32mapi_name\u001b[0m=test_qa\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API \u001b[32mapi_name\u001b[0m=basic3\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API \u001b[32mapi_name\u001b[0m=opetja\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API \u001b[32mapi_name\u001b[0m=basic2\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API \u001b[32mapi_name\u001b[0m=basic\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API \u001b[32mapi_name\u001b[0m=qaqa\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Checking security policy: Open \u001b[32mapi_name\u001b[0m=Swagger Petstore\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mgateway:\u001b[0m Loaded: Swagger Petstore \u001b[32mapi_id\u001b[0m=727f9cf112c1498e508e1e07fbe9b6ba \u001b[32morg_id\u001b[0m=58e274620fe7810a0e889ab9 \u001b[32mserver_name\u001b[0m=-- \u001b[32muser_id\u001b[0m=-- \u001b[32muser_ip\u001b[0m=--\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Checking security policy: Open \u001b[32mapi_name\u001b[0m=ilija-novi\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mgateway:\u001b[0m Loaded: ilija-novi \u001b[32mapi_id\u001b[0m=25c39a285d824bd37b48ed62097b53dc \u001b[32morg_id\u001b[0m=58e274620fe7810a0e889ab9 \u001b[32mserver_name\u001b[0m=-- \u001b[32muser_id\u001b[0m=-- \u001b[32muser_ip\u001b[0m=--\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Checking security policy: Token \u001b[32mapi_name\u001b[0m=endpoint\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mgateway:\u001b[0m Loaded: endpoint \u001b[32mapi_id\u001b[0m=fa0b1f11b8d54b6d40b7ee24113fd46c \u001b[32morg_id\u001b[0m=58e274620fe7810a0e889ab9 \u001b[32mserver_name\u001b[0m=-- \u001b[32muser_id\u001b[0m=-- \u001b[32muser_ip\u001b[0m=--\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Checking security policy: Token \u001b[32mapi_name\u001b[0m=new_api\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mgateway:\u001b[0m Loaded: new_api \u001b[32mapi_id\u001b[0m=0206e0bddead4cb441a9f67c7a565ef8 \u001b[32morg_id\u001b[0m=58e274620fe7810a0e889ab9 \u001b[32mserver_name\u001b[0m=-- \u001b[32muser_id\u001b[0m=-- \u001b[32muser_ip\u001b[0m=--\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Checking security policy: Open \u001b[32mapi_name\u001b[0m=test_qa\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mgateway:\u001b[0m Loaded: test_qa \u001b[32mapi_id\u001b[0m=e7b2afac993945d17d5d0c24203c7138 \u001b[32morg_id\u001b[0m=58e274620fe7810a0e889ab9 \u001b[32mserver_name\u001b[0m=-- \u001b[32muser_id\u001b[0m=-- \u001b[32muser_ip\u001b[0m=--\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading existing bundle: bundle3.zip\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m ----> Loading bundle: bundle3.zip\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m ----> Using bundle: bundle3.zip\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Checking security policy: Open \u001b[32mapi_name\u001b[0m=basic3\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mgateway:\u001b[0m Loaded: basic3 \u001b[32mapi_id\u001b[0m=519e5404ab114e6358c8a4e51495676f \u001b[32morg_id\u001b[0m=58e274620fe7810a0e889ab9 \u001b[32mserver_name\u001b[0m=-- \u001b[32muser_id\u001b[0m=-- \u001b[32muser_ip\u001b[0m=--\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Checking security policy: Token \u001b[32mapi_name\u001b[0m=opetja\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mgateway:\u001b[0m Loaded: opetja \u001b[32mapi_id\u001b[0m=5617bf1076384b4447c9746c2ea9caa0 \u001b[32morg_id\u001b[0m=58e274620fe7810a0e889ab9 \u001b[32mserver_name\u001b[0m=-- \u001b[32muser_id\u001b[0m=-- \u001b[32muser_ip\u001b[0m=--\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mpython:\u001b[0m Loading module: '519e5404ab114e6358c8a4e51495676f_b01ff46af78a3739c28c09bbd3e64164'\n1\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[31mERROR\u001b[0m \u001b[36mpython:\u001b[0m Middleware initialization error:  'module' object has no attribute 'module_from_spec'\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading existing bundle: healthcheckdev44.zip\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m ----> Loading bundle: healthcheckdev44.zip\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m ----> Using bundle: healthcheckdev44.zip\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Checking security policy: OpenID \u001b[32mapi_name\u001b[0m=basic2\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mgateway:\u001b[0m Loaded: basic2 \u001b[32mapi_id\u001b[0m=904527c08713414b67d3144b5a64e051 \u001b[32morg_id\u001b[0m=58e274620fe7810a0e889ab9 \u001b[32mserver_name\u001b[0m=-- \u001b[32muser_id\u001b[0m=-- \u001b[32muser_ip\u001b[0m=--\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading existing bundle: bundle2.zip\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m ----> Loading bundle: bundle2.zip\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m ----> Using bundle: bundle2.zip\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Checking security policy: Token \u001b[32mapi_name\u001b[0m=qaqa\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mgateway:\u001b[0m Loaded: qaqa \u001b[32mapi_id\u001b[0m=0dc13e6e9a4d4ca6726b9bda39bf0e15 \u001b[32morg_id\u001b[0m=58e274620fe7810a0e889ab9 \u001b[32mserver_name\u001b[0m=-- \u001b[32muser_id\u001b[0m=-- \u001b[32muser_ip\u001b[0m=--\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mpython:\u001b[0m Loading module: '904527c08713414b67d3144b5a64e051_9adf873bf773df0b2f94f140404fafa6'\n1\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[31mERROR\u001b[0m \u001b[36mpython:\u001b[0m Middleware initialization error:  'module' object has no attribute 'module_from_spec'\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Checking security policy: Open \u001b[32mapi_name\u001b[0m=basic\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mgateway:\u001b[0m Loaded: basic \u001b[32mapi_id\u001b[0m=8a0fec931ed34f146bfa68e23c8234f8 \u001b[32morg_id\u001b[0m=58e274620fe7810a0e889ab9 \u001b[32mserver_name\u001b[0m=-- \u001b[32muser_id\u001b[0m=-- \u001b[32muser_ip\u001b[0m=--\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Processed and listening on: /ilija-novi/{rest:.}\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Processed and listening on: /endpoint/{rest:.}\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Processed and listening on: /new_api/{rest:.}\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Processed and listening on: /test_qa/{rest:.}\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Processed and listening on: /basic3/{rest:.}\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Processed and listening on: /opetja/{rest:.}\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Processed and listening on: /basic2/{rest:.}\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Processed and listening on: /basic/{rest:.}\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Processed and listening on: /qaqa/{rest:.}\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Processed and listening on: /v2{rest:.}\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mhost-check-mgr:\u001b[0m Loading uptime tests...\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Initialised API Definitions\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading policies\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Using Policies from Dashboard Service\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mpolicy:\u001b[0m Mutex lock acquired... calling\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mpolicy:\u001b[0m Calling dashboard service for policy list\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mpython:\u001b[0m Loading module: '8a0fec931ed34f146bfa68e23c8234f8_b61666d57cf634a12b430703b323c84b'\n1\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[31mERROR\u001b[0m \u001b[36mpython:\u001b[0m Middleware initialization error:  'module' object has no attribute 'module_from_spec'\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mpolicy:\u001b[0m Processing policy list\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Policies found (3 total):\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m  - 59145332c143f801a188ec33\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m  - 5913a7ef0fe781093e182bb6\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m  - 5a1d5a18c143f802d5b1b02b\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Gateway started (v2.4.99)\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m --> Listening on address: (open interface)\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m --> Listening on port: 8080\n\u001b[90m[Dec 26 11:56:30]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m --> PID: 2371\n\u001b[90m[Dec 26 11:56:31]\u001b[0m \u001b[33m WARN\u001b[0m \u001b[36mpub-sub:\u001b[0m Insecure configuration detected (allowing)!\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[31mERROR\u001b[0m \u001b[36mpython:\u001b[0m Can't dispatch, error:  Hook is not defined: MyPreMiddleware\nfatal error: unexpected signal during runtime execution\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x8 pc=0x7f8c7dbec6e0]\nruntime stack:\nruntime.throw(0xe028fd, 0x2a)\n    /usr/local/go/src/runtime/panic.go:596 +0x95\nruntime.sigpanic()\n    /usr/local/go/src/runtime/signal_unix.go:274 +0x2db\ngoroutine 8850 [syscall, locked to thread]:\nruntime.cgocall(0xc094c0, 0xc420c91700, 0x60000a10205f8000)\n    /usr/local/go/src/runtime/cgocall.go:131 +0xe2 fp=0xc420c916d0 sp=0xc420c91690\nmain._Cfunc_Python_DispatchHook(0x7f8c60000a10, 0x0)\n    github.com/TykTechnologies/tyk/_obj/_cgo_gotypes.go:91 +0x4a fp=0xc420c91700 sp=0xc420c916d0\nmain.(PythonDispatcher).Dispatch.func1(0x7f8c60000a10, 0x7f8c60000a10)\n    /src/github.com/TykTechnologies/tyk/coprocess_python.go:198 +0x60 fp=0xc420c91738 sp=0xc420c91700\nmain.(PythonDispatcher).Dispatch(0xc42052b120, 0x7f8c60000a10, 0x7f8c600008c0)\n    /src/github.com/TykTechnologies/tyk/coprocess_python.go:198 +0x2b fp=0xc420c91758 sp=0xc420c91738\nmain.(CoProcessor).Dispatch(0xc420ec58f0, 0xc42109bfc0, 0xc42109bfc0, 0x2, 0xc420847b00)\n    /src/github.com/TykTechnologies/tyk/coprocess_native.go:49 +0xf2 fp=0xc420c91800 sp=0xc420c91758\nmain.(CoProcessMiddleware).ProcessRequest(0xc4202cd3c0, 0x1537e00, 0xc4200c9880, 0xc42000b700, 0x0, 0x0, 0x1c, 0xc42083f6e0, 0x7f8c7e213000)\n    /src/github.com/TykTechnologies/tyk/coprocess.go:239 +0x311 fp=0xc420c91a10 sp=0xc420c91800\nmain.createMiddleware.func1.1(0x1537e00, 0xc4200c9880, 0xc42000b700)\n    /src/github.com/TykTechnologies/tyk/middleware.go:74 +0x5f9 fp=0xc420c91b78 sp=0xc420c91a10\nnet/http.HandlerFunc.ServeHTTP(0xc4202cd600, 0x1537e00, 0xc4200c9880, 0xc42000b700)\n    /usr/local/go/src/net/http/server.go:1942 +0x44 fp=0xc420c91ba0 sp=0xc420c91b78\ngithub.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux.(Router).ServeHTTP(0xc420011310, 0x1537e00, 0xc4200c9880, 0xc42000b700)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux/mux.go:114 +0x10c fp=0xc420c91ca0 sp=0xc420c91ba0\nmain.mainHandler.ServeHTTP(0x1537e00, 0xc4200c9880, 0xc42000a800)\n    /src/github.com/TykTechnologies/tyk/main.go:1234 +0x4b fp=0xc420c91cd0 sp=0xc420c91ca0\nmain.(mainHandler).ServeHTTP(0x160b678, 0x1537e00, 0xc4200c9880, 0xc42000a800)\n    :705 +0x63 fp=0xc420c91d10 sp=0xc420c91cd0\nnet/http.serverHandler.ServeHTTP(0xc42034c790, 0x1537e00, 0xc4200c9880, 0xc42000a800)\n    /usr/local/go/src/net/http/server.go:2568 +0x92 fp=0xc420c91d58 sp=0xc420c91d10\nnet/http.(conn).serve(0xc4211660a0, 0x1538c00, 0xc42105e980)\n    /usr/local/go/src/net/http/server.go:1825 +0x612 fp=0xc420c91fc8 sp=0xc420c91d58\nruntime.goexit()\n    /usr/local/go/src/runtime/asm_amd64.s:2197 +0x1 fp=0xc420c91fd0 sp=0xc420c91fc8\ncreated by net/http.(Server).Serve\n    /usr/local/go/src/net/http/server.go:2668 +0x2ce\ngoroutine 1 [chan receive, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/goagain.Wait(0x1537c00, 0xc42000e450, 0x0, 0x0, 0x152b980)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/goagain/goagain.go:210 +0x19f\nmain.main()\n    /src/github.com/TykTechnologies/tyk/main.go:1039 +0x52c\ngoroutine 17 [syscall, 4 minutes, locked to thread]:\nruntime.goexit()\n    /usr/local/go/src/runtime/asm_amd64.s:2197 +0x1\ngoroutine 6 [syscall, 4 minutes]:\nos/signal.signal_recv(0x70d5bb)\n    /usr/local/go/src/runtime/sigqueue.go:116 +0x104\nos/signal.loop()\n    /usr/local/go/src/os/signal/signal_unix.go:22 +0x22\ncreated by os/signal.init.1\n    /usr/local/go/src/os/signal/signal_unix.go:28 +0x41\ngoroutine 8 [select]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/pmylund/go-cache.(*janitor).Run(0xc4204ea0d0, 0xc4204c6d00)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/pmylund/go-cache/cache.go:1037 +0x171\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/pmylund/go-cache.runJanitor\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/pmylund/go-cache/cache.go:1056 +0x8d\ngoroutine 9 [select, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/pmylund/go-cache.(*janitor).Run(0xc4204ea0e0, 0xc4204c6d40)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/pmylund/go-cache/cache.go:1037 +0x171\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/pmylund/go-cache.runJanitor\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/pmylund/go-cache/cache.go:1056 +0x8d\ngoroutine 10 [select]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/pmylund/go-cache.(*janitor).Run(0xc4204ea150, 0xc4204c6e00)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/pmylund/go-cache/cache.go:1037 +0x171\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/pmylund/go-cache.runJanitor\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/pmylund/go-cache/cache.go:1056 +0x8d\ngoroutine 11 [sleep]:\ntime.Sleep(0x2540be400)\n    /usr/local/go/src/runtime/time.go:59 +0xf9\nmain.(HostCheckerManager).CheckActivePollerLoop(0x15ed060)\n    /src/github.com/TykTechnologies/tyk/host_checker_manager.go:117 +0x7f\ncreated by main.(HostCheckerManager).Start\n    /src/github.com/TykTechnologies/tyk/host_checker_manager.go:85 +0x52\ngoroutine 81 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4202663f0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 49 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420239ce0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 80 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4202663c0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 79 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266390)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 78 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266330)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 77 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266300)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 76 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4202662d0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 75 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4202662a0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 74 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266270)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 73 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266210)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 72 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4202661e0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 71 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4202661b0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 70 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266180)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 69 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266120)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 68 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4202660f0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 67 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4202660c0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 66 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266090)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 65 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266060)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 64 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266000)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 63 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420239fb0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 62 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420239f80)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 61 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420239f50)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 60 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420239f20)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 59 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420239ef0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 58 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420239ec0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 57 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420239e90)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 56 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420239e60)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 55 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420239e30)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 54 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420239e00)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 53 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420239dd0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 52 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420239da0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 51 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420239d40)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 50 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420239d10)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 82 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266420)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 83 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266450)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 84 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266480)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 85 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4202664b0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 86 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4202664e0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 87 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266540)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 88 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266570)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 89 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4202665d0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 90 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266600)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 91 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266630)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 92 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266660)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 93 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266690)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 94 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4202666c0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 95 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4202666f0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 96 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266720)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 97 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266750)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 98 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266780)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 99 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4202667b0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 100 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266810)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 101 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266840)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 102 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266870)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 103 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4202668a0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 104 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4202668d0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 105 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266900)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 106 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266930)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 107 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266960)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 108 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266990)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 109 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4202669c0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 110 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4202669f0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 111 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266a20)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 112 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266a50)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 113 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266ab0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 114 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266ae0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 115 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266b10)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 116 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266b40)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 117 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266b70)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 118 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266ba0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 119 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266bd0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 120 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266c00)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 121 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266c30)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 122 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266c60)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 123 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266c90)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 124 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266cf0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 125 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266d20)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 126 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266d50)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 127 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266d80)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 128 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266db0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 129 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266de0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 130 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266e10)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 131 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266e40)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 132 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266e70)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 133 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266ea0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 134 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266ed0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 135 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266f30)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 136 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266f60)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 137 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266f90)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 138 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420266fc0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 139 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420267020)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 140 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420267050)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 141 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420267080)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 142 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4202670e0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 143 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420267110)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 144 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420267140)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 145 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420267170)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 146 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4202671d0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 147 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420267200)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 148 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420267230)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 304 [chan receive, 4 minutes]:\nmain.reloadLoop(0xc4201d2660)\n    /src/github.com/TykTechnologies/tyk/main.go:619 +0x6f\ncreated by main.start\n    /src/github.com/TykTechnologies/tyk/main.go:1133 +0x180\ngoroutine 250 [select]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/pmylund/go-cache.(*janitor).Run(0xc420212930, 0xc420044c00)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/pmylund/go-cache/cache.go:1037 +0x171\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/pmylund/go-cache.runJanitor\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/pmylund/go-cache/cache.go:1056 +0x8d\ngoroutine 253 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527770)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 252 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527740)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 251 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527710)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 254 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4205277a0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 305 [select, 4 minutes]:\nmain.reloadQueueLoop()\n    /src/github.com/TykTechnologies/tyk/main.go:638 +0x3d9\ncreated by main.start\n    /src/github.com/TykTechnologies/tyk/main.go:1134 +0x198\ngoroutine 444 [sleep]:\ntime.Sleep(0x77359400)\n    /usr/local/go/src/runtime/time.go:59 +0xf9\nmain.(*HTTPDashboardHandler).StartBeating(0xc420250410, 0x1, 0xc4201d44e0)\n    /src/github.com/TykTechnologies/tyk/dashboard_register.go:130 +0xa5\ncreated by main.handleDashboardRegistration\n    /src/github.com/TykTechnologies/tyk/main.go:1211 +0x309\ngoroutine 445 [chan receive]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/drl.(Cache).startCleanupTimer.func1(0xc4201d31a0, 0xc4205147b0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/drl/ttlcache.go:85 +0x45\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/drl.(Cache).startCleanupTimer\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/drl/ttlcache.go:89 +0x6b\ngoroutine 446 [sleep]:\ntime.Sleep(0x12a05f200)\n    /usr/local/go/src/runtime/time.go:59 +0xf9\ngithub.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/drl.(DRL).Init.func1(0xc420250c30)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/drl/drl.go:41 +0x6c\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/drl.(DRL).Init\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/drl/drl.go:43 +0xc4\ngoroutine 447 [sleep]:\ntime.Sleep(0x77359400)\n    /usr/local/go/src/runtime/time.go:59 +0xf9\nmain.startRateLimitNotifications.func1(0x2)\n    /src/github.com/TykTechnologies/tyk/distributed_rate_limiter.go:38 +0xc8\ncreated by main.startRateLimitNotifications\n    /src/github.com/TykTechnologies/tyk/distributed_rate_limiter.go:40 +0x4d\ngoroutine 487 [IO wait]:\nnet.runtime_pollWait(0x7f8c7e1cd088, 0x72, 0xa)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc42042de28, 0x72, 0x1530c80, 0x1529828)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc42042de28, 0xc4204be000, 0x1000)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc42042ddc0, 0xc4204be000, 0x1000, 0x1000, 0x0, 0x1530c80, 0x1529828)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc42000e480, 0xc4204be000, 0x1000, 0x1000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\nnet/http.(persistConn).Read(0xc4202ded80, 0xc4204be000, 0x1000, 0x1000, 0x4, 0x458510, 0xc4201d3e60)\n    /usr/local/go/src/net/http/transport.go:1316 +0x14b\nbufio.(Reader).fill(0xc4201d3ce0)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).Peek(0xc4201d3ce0, 0x1, 0xc420531be5, 0x1, 0x0, 0xc420f6f380, 0x0)\n    /usr/local/go/src/bufio/bufio.go:129 +0x67\nnet/http.(persistConn).readLoop(0xc4202ded80)\n    /usr/local/go/src/net/http/transport.go:1474 +0x196\ncreated by net/http.(*Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1117 +0xa35\ngoroutine 488 [select]:\nnet/http.(persistConn).writeLoop(0xc4202ded80)\n    /usr/local/go/src/net/http/transport.go:1704 +0x43a\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1118 +0xa5a\ngoroutine 303 [IO wait]:\nnet.runtime_pollWait(0x7f8c7e1cd2c8, 0x72, 0x4)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420398308, 0x72, 0x1530c80, 0x1529828)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420398308, 0xc420348000, 0x1000)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc4203982a0, 0xc420348000, 0x1000, 0x1000, 0x0, 0x1530c80, 0x1529828)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc42000e6e0, 0xc420348000, 0x1000, 0x1000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\nbufio.(Reader).fill(0xc420051d40)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadSlice(0xc420051d40, 0x411a0a, 0xc9b640, 0xc420cac0d0, 0xc4201dd9d0, 0xc420cac0d0, 0xc4201ddae0)\n    /usr/local/go/src/bufio/bufio.go:338 +0xbb\ngithub.com/TykTechnologies/tyk/vendor/github.com/garyburd/redigo/redis.(conn).readLine(0xc4202c6960, 0x0, 0x0, 0x3, 0xc420014050, 0xc42083ef00)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/garyburd/redigo/redis/conn.go:341 +0x49\ngithub.com/TykTechnologies/tyk/vendor/github.com/garyburd/redigo/redis.(conn).readReply(0xc4202c6960, 0x1, 0x0, 0x0, 0x0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/garyburd/redigo/redis/conn.go:414 +0x43\ngithub.com/TykTechnologies/tyk/vendor/github.com/garyburd/redigo/redis.(conn).Receive(0xc4202c6960, 0xc420bc3600, 0x76, 0xdf5dcf, 0x1c)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/garyburd/redigo/redis/conn.go:497 +0x3c\ngithub.com/TykTechnologies/tyk/vendor/github.com/garyburd/redigo/redis.(pooledConnection).Receive(0xc42052a2e0, 0x1c, 0x0, 0xc420847050, 0x2)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/garyburd/redigo/redis/pool.go:387 +0x34\ngithub.com/TykTechnologies/tyk/vendor/github.com/garyburd/redigo/redis.PubSubConn.Receive(0x153b000, 0xc42052a2e0, 0xd1d480, 0xc420847080)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/garyburd/redigo/redis/pubsub.go:106 +0x4c\ngithub.com/TykTechnologies/tyk/storage.RedisCluster.StartPubSubHandler(0x0, 0x0, 0x0, 0xdf3a80, 0x19, 0xe69eb8, 0xc4201b6f00, 0x0)\n    /src/github.com/TykTechnologies/tyk/storage/redis_cluster.go:428 +0x20b\nmain.startPubSubLoop()\n    /src/github.com/TykTechnologies/tyk/redis_signals.go:51 +0x8a\ncreated by main.start\n    /src/github.com/TykTechnologies/tyk/main.go:1113 +0x4db\ngoroutine 281 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527cb0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 280 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527c80)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 279 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527c50)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 278 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527c20)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 277 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527bf0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 276 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527bc0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 275 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527b90)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 274 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527b60)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 273 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527b30)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 272 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527b00)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 271 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527ad0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 270 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527aa0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 269 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527a70)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 268 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527a40)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 267 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527a10)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 266 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4205279e0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 265 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4205279b0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 264 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527980)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 263 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527950)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 262 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527920)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 261 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4205278f0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 260 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4205278c0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 259 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527890)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 258 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527860)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 257 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527830)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 256 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527800)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 255 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc4205277d0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 282 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527ce0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 283 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527d10)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 284 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527d40)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 285 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527d70)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 286 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527da0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 287 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527dd0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 288 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527e00)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 289 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527e30)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 290 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527e60)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 291 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527e90)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 292 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527ec0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 293 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527ef0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 294 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527f20)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 295 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527f50)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 296 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527f80)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 297 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420527fb0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 298 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc42053a000)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 299 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc42053a030)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 300 [chan send, 4 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc42053a060)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:51 +0x8b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 301 [sleep]:\ntime.Sleep(0x1a13b8600)\n    /usr/local/go/src/runtime/time.go:59 +0xf9\nmain.(HostUptimeChecker).HostCheckLoop(0xc420509e80)\n    /src/github.com/TykTechnologies/tyk/host_checker.go:98 +0x3ea\ncreated by main.(HostUptimeChecker).Start\n    /src/github.com/TykTechnologies/tyk/host_checker.go:237 +0xe1\ngoroutine 302 [select, 4 minutes]:\nmain.(HostUptimeChecker).HostReporter(0xc420509e80)\n    /src/github.com/TykTechnologies/tyk/host_checker.go:106 +0x749\ncreated by main.(HostUptimeChecker).Start\n    /src/github.com/TykTechnologies/tyk/host_checker.go:239 +0x187\ngoroutine 499 [IO wait, 4 minutes]:\nnet.runtime_pollWait(0x7f8c7e1ccf08, 0x72, 0x1530c80)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420450378, 0x72, 0x1529828, 0xc420d6faa0)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420450378, 0xffffffffffffffff, 0x0)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).accept(0xc420450310, 0x0, 0x152e780, 0xc420d6faa0)\n    /usr/local/go/src/net/fd_unix.go:430 +0x1e5\nnet.(TCPListener).accept(0xc420d28a28, 0xc420ed2ba0, 0xcd4540, 0x15036c0)\n    /usr/local/go/src/net/tcpsock_posix.go:136 +0x2e\nnet.(TCPListener).Accept(0xc420d28a28, 0xc420ed2b70, 0xcd4540, 0x15036c0, 0xd57840)\n    /usr/local/go/src/net/tcpsock.go:228 +0x49\nnet/http.(Server).Serve(0xc420249080, 0x1537c00, 0xc420d28a28, 0x0, 0x0)\n    /usr/local/go/src/net/http/server.go:2643 +0x228\nmain.TykNewSingleHostReverseProxy.func1.2(0xc420249080, 0x1537c00, 0xc420d28a28)\n    /src/github.com/TykTechnologies/tyk/reverse_proxy.go:177 +0x3f\ncreated by main.TykNewSingleHostReverseProxy.func1\n    /src/github.com/TykTechnologies/tyk/reverse_proxy.go:178 +0x186\ngoroutine 878 [IO wait]:\nnet.runtime_pollWait(0x7f8c7e1cd208, 0x72, 0x1530c80)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc42042d958, 0x72, 0x1529828, 0xc42083f340)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc42042d958, 0xffffffffffffffff, 0x0)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).accept(0xc42042d8f0, 0x0, 0x152e780, 0xc42083f340)\n    /usr/local/go/src/net/fd_unix.go:430 +0x1e5\nnet.(TCPListener).accept(0xc42000e450, 0xc42002ce90, 0x6c10de, 0x45abb0)\n    /usr/local/go/src/net/tcpsock_posix.go:136 +0x2e\nnet.(TCPListener).Accept(0xc42000e450, 0xe6a0e8, 0xc4211660a0, 0x1538cc0, 0xc4211dae10)\n    /usr/local/go/src/net/tcpsock.go:228 +0x49\nnet/http.(Server).Serve(0xc42034c790, 0x1537c00, 0xc42000e450, 0x0, 0x0)\n    /usr/local/go/src/net/http/server.go:2643 +0x228\nnet/http.Serve(0x1537c00, 0xc42000e450, 0x1530280, 0x160b678, 0x5, 0xc420619930)\n    /usr/local/go/src/net/http/server.go:2307 +0x78\ncreated by main.listen\n    /src/github.com/TykTechnologies/tyk/main.go:1306 +0x1238\ngoroutine 8851 [IO wait]:\nnet.runtime_pollWait(0x7f8c7e1cce48, 0x72, 0xd)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc4204e33a8, 0x72, 0x1530c80, 0x1529828)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc4204e33a8, 0xc42105e9d1, 0x1)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc4204e3340, 0xc42105e9d1, 0x1, 0x1, 0x0, 0x1530c80, 0x1529828)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc420d28670, 0xc42105e9d1, 0x1, 0x1, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\nnet/http.(connReader).backgroundRead(0xc42105e9c0)\n    /usr/local/go/src/net/http/server.go:656 +0x58\ncreated by net/http.(connReader).startBackgroundRead\n    /usr/local/go/src/net/http/server.go:652 +0xdf\ngoroutine 879 [select, 4 minutes, locked to thread]:\nruntime.gopark(0xe6a710, 0x0, 0xddf0a7, 0x6, 0x18, 0x2)\n    /usr/local/go/src/runtime/proc.go:271 +0x13a\nruntime.selectgoImpl(0xc4211d7f50, 0x0, 0x18)\n    /usr/local/go/src/runtime/select.go:423 +0x1364\nruntime.selectgo(0xc4211d7f50)\n    /usr/local/go/src/runtime/select.go:238 +0x1c\nruntime.ensureSigM.func1()\n    /usr/local/go/src/runtime/signal_unix.go:434 +0x2dd\nruntime.goexit()\n    /usr/local/go/src/runtime/asm_amd64.s:2197 +0x1\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mpython:\u001b[0m Setting PYTHONPATH to 'coprocess/python:coprocess/python/proto:/opt/tyk-gateway/middleware/bundles'\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mpython:\u001b[0m Initializing interpreter, Py_Initialize()\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mpython:\u001b[0m Initializing dispatcher\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Setting up analytics normaliser\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m PIDFile location set to: ./tyk-gateway.pid\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Initialising Tyk REST API Endpoints\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m --> Standard listener (http)\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Setting up Server\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Registering node.\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mdashboard:\u001b[0m Node registered \u001b[32mid\u001b[0m=776404ab-37a3-47b0-6d4f-97188b6bfa97\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Initialising distributed rate limiter\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m Starting gateway rate limiter notifications...\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Detected 10 APIs\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API configurations.\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Tracking hostname \u001b[32mapi_name\u001b[0m=ilija-novi \u001b[32mdomain\u001b[0m=(no host)\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Tracking hostname \u001b[32mapi_name\u001b[0m=endpoint \u001b[32mdomain\u001b[0m=(no host)\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Tracking hostname \u001b[32mapi_name\u001b[0m=new_api \u001b[32mdomain\u001b[0m=(no host)\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Tracking hostname \u001b[32mapi_name\u001b[0m=test_qa \u001b[32mdomain\u001b[0m=(no host)\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Tracking hostname \u001b[32mapi_name\u001b[0m=basic3 \u001b[32mdomain\u001b[0m=(no host)\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Tracking hostname \u001b[32mapi_name\u001b[0m=opetja \u001b[32mdomain\u001b[0m=(no host)\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Tracking hostname \u001b[32mapi_name\u001b[0m=basic2 \u001b[32mdomain\u001b[0m=(no host)\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Tracking hostname \u001b[32mapi_name\u001b[0m=basic \u001b[32mdomain\u001b[0m=(no host)\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Tracking hostname \u001b[32mapi_name\u001b[0m=qaqa \u001b[32mdomain\u001b[0m=(no host)\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Tracking hostname \u001b[32mapi_name\u001b[0m=Swagger Petstore \u001b[32mdomain\u001b[0m=(no host)\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API \u001b[32mapi_name\u001b[0m=Swagger Petstore\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API \u001b[32mapi_name\u001b[0m=ilija-novi\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API \u001b[32mapi_name\u001b[0m=endpoint\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API \u001b[32mapi_name\u001b[0m=new_api\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API \u001b[32mapi_name\u001b[0m=test_qa\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API \u001b[32mapi_name\u001b[0m=basic3\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API \u001b[32mapi_name\u001b[0m=opetja\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API \u001b[32mapi_name\u001b[0m=basic2\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API \u001b[32mapi_name\u001b[0m=basic\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading API \u001b[32mapi_name\u001b[0m=qaqa\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Checking security policy: Open \u001b[32mapi_name\u001b[0m=Swagger Petstore\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mgateway:\u001b[0m Loaded: Swagger Petstore \u001b[32mapi_id\u001b[0m=727f9cf112c1498e508e1e07fbe9b6ba \u001b[32morg_id\u001b[0m=58e274620fe7810a0e889ab9 \u001b[32mserver_name\u001b[0m=-- \u001b[32muser_id\u001b[0m=-- \u001b[32muser_ip\u001b[0m=--\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Checking security policy: Open \u001b[32mapi_name\u001b[0m=ilija-novi\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mgateway:\u001b[0m Loaded: ilija-novi \u001b[32mapi_id\u001b[0m=25c39a285d824bd37b48ed62097b53dc \u001b[32morg_id\u001b[0m=58e274620fe7810a0e889ab9 \u001b[32mserver_name\u001b[0m=-- \u001b[32muser_id\u001b[0m=-- \u001b[32muser_ip\u001b[0m=--\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Checking security policy: Token \u001b[32mapi_name\u001b[0m=endpoint\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mgateway:\u001b[0m Loaded: endpoint \u001b[32mapi_id\u001b[0m=fa0b1f11b8d54b6d40b7ee24113fd46c \u001b[32morg_id\u001b[0m=58e274620fe7810a0e889ab9 \u001b[32mserver_name\u001b[0m=-- \u001b[32muser_id\u001b[0m=-- \u001b[32muser_ip\u001b[0m=--\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Checking security policy: Token \u001b[32mapi_name\u001b[0m=new_api\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mgateway:\u001b[0m Loaded: new_api \u001b[32mapi_id\u001b[0m=0206e0bddead4cb441a9f67c7a565ef8 \u001b[32morg_id\u001b[0m=58e274620fe7810a0e889ab9 \u001b[32mserver_name\u001b[0m=-- \u001b[32muser_id\u001b[0m=-- \u001b[32muser_ip\u001b[0m=--\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Checking security policy: Open \u001b[32mapi_name\u001b[0m=test_qa\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mgateway:\u001b[0m Loaded: test_qa \u001b[32mapi_id\u001b[0m=e7b2afac993945d17d5d0c24203c7138 \u001b[32morg_id\u001b[0m=58e274620fe7810a0e889ab9 \u001b[32mserver_name\u001b[0m=-- \u001b[32muser_id\u001b[0m=-- \u001b[32muser_ip\u001b[0m=--\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading existing bundle: bundle3.zip\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m ----> Loading bundle: bundle3.zip\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m ----> Using bundle: bundle3.zip\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Checking security policy: Open \u001b[32mapi_name\u001b[0m=basic3\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mgateway:\u001b[0m Loaded: basic3 \u001b[32mapi_id\u001b[0m=519e5404ab114e6358c8a4e51495676f \u001b[32morg_id\u001b[0m=58e274620fe7810a0e889ab9 \u001b[32mserver_name\u001b[0m=-- \u001b[32muser_id\u001b[0m=-- \u001b[32muser_ip\u001b[0m=--\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Checking security policy: Token \u001b[32mapi_name\u001b[0m=opetja\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mgateway:\u001b[0m Loaded: opetja \u001b[32mapi_id\u001b[0m=5617bf1076384b4447c9746c2ea9caa0 \u001b[32morg_id\u001b[0m=58e274620fe7810a0e889ab9 \u001b[32mserver_name\u001b[0m=-- \u001b[32muser_id\u001b[0m=-- \u001b[32muser_ip\u001b[0m=--\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mpython:\u001b[0m Loading module: '519e5404ab114e6358c8a4e51495676f_b01ff46af78a3739c28c09bbd3e64164'\n1\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[31mERROR\u001b[0m \u001b[36mpython:\u001b[0m Middleware initialization error:  'module' object has no attribute 'module_from_spec'\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading existing bundle: healthcheckdev44.zip\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m ----> Loading bundle: healthcheckdev44.zip\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m ----> Using bundle: healthcheckdev44.zip\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Checking security policy: OpenID \u001b[32mapi_name\u001b[0m=basic2\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mgateway:\u001b[0m Loaded: basic2 \u001b[32mapi_id\u001b[0m=904527c08713414b67d3144b5a64e051 \u001b[32morg_id\u001b[0m=58e274620fe7810a0e889ab9 \u001b[32mserver_name\u001b[0m=-- \u001b[32muser_id\u001b[0m=-- \u001b[32muser_ip\u001b[0m=--\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading existing bundle: bundle2.zip\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m ----> Loading bundle: bundle2.zip\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m ----> Using bundle: bundle2.zip\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Checking security policy: Token \u001b[32mapi_name\u001b[0m=qaqa\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mgateway:\u001b[0m Loaded: qaqa \u001b[32mapi_id\u001b[0m=0dc13e6e9a4d4ca6726b9bda39bf0e15 \u001b[32morg_id\u001b[0m=58e274620fe7810a0e889ab9 \u001b[32mserver_name\u001b[0m=-- \u001b[32muser_id\u001b[0m=-- \u001b[32muser_ip\u001b[0m=--\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mpython:\u001b[0m Loading module: '904527c08713414b67d3144b5a64e051_9adf873bf773df0b2f94f140404fafa6'\n1\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[31mERROR\u001b[0m \u001b[36mpython:\u001b[0m Middleware initialization error:  'module' object has no attribute 'module_from_spec'\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Checking security policy: Open \u001b[32mapi_name\u001b[0m=basic\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mgateway:\u001b[0m Loaded: basic \u001b[32mapi_id\u001b[0m=8a0fec931ed34f146bfa68e23c8234f8 \u001b[32morg_id\u001b[0m=58e274620fe7810a0e889ab9 \u001b[32mserver_name\u001b[0m=-- \u001b[32muser_id\u001b[0m=-- \u001b[32muser_ip\u001b[0m=--\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Processed and listening on: /ilija-novi/{rest:.}\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Processed and listening on: /endpoint/{rest:.}\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Processed and listening on: /new_api/{rest:.}\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Processed and listening on: /test_qa/{rest:.}\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Processed and listening on: /basic3/{rest:.}\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Processed and listening on: /opetja/{rest:.}\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Processed and listening on: /basic2/{rest:.}\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Processed and listening on: /basic/{rest:.}\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Processed and listening on: /qaqa/{rest:.}\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Processed and listening on: /v2{rest:.}\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mhost-check-mgr:\u001b[0m Loading uptime tests...\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Initialised API Definitions\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Loading policies\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Using Policies from Dashboard Service\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mpolicy:\u001b[0m Mutex lock acquired... calling\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mpolicy:\u001b[0m Calling dashboard service for policy list\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mpython:\u001b[0m Loading module: '8a0fec931ed34f146bfa68e23c8234f8_b61666d57cf634a12b430703b323c84b'\n1\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[31mERROR\u001b[0m \u001b[36mpython:\u001b[0m Middleware initialization error:  'module' object has no attribute 'module_from_spec'\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mpolicy:\u001b[0m Processing policy list\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Policies found (3 total):\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m  - 59145332c143f801a188ec33\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m  - 5913a7ef0fe781093e182bb6\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m  - 5a1d5a18c143f802d5b1b02b\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m Gateway started (v2.4.99)\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m --> Listening on address: (open interface)\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m --> Listening on port: 8080\n\u001b[90m[Dec 26 12:01:28]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mmain:\u001b[0m --> PID: 2383\n\u001b[90m[Dec 26 12:01:29]\u001b[0m \u001b[33m WARN\u001b[0m \u001b[36mpub-sub:\u001b[0m Insecure configuration detected (allowing)!\n\u001b[90m[Dec 26 12:01:38]\u001b[0m \u001b[32m INFO\u001b[0m \u001b[36mhost-check-mgr:\u001b[0m Starting Poller\n2017/12/26 12:02:02 terminated\n\u001b[90m[Dec 26 12:02:02]\u001b[0m \u001b[32m INFO\u001b[0m Stop signal received.\n\u001b[90m[Dec 26 12:02:02]\u001b[0m \u001b[32m INFO\u001b[0m Stopping heartbeat...\n\u001b[90m[Dec 26 12:02:02]\u001b[0m \u001b[32m INFO\u001b[0m Stopped Heartbeat\n\u001b[90m[Dec 26 12:02:04]\u001b[0m \u001b[32m INFO\u001b[0m Terminating.\n```. @matiasinsaurralde \nI we tested again this pr. i tested gw with python3.4, python3.5 and python3.6. On all versions i have same issue when i have bundle attached on api.\nHere is error what i see in gateway console when i trigger call to api.\ntyk-gateway_1          | time=\"Mar  2 15:06:59\" level=debug msg=\"CoProcess Request, HookType: Pre\"\ntyk-gateway_1          | 2018/03/02 15:06:59 http: panic serving 172.18.0.1:38102: runtime error: invalid memory address or nil pointer dereference\ntyk-gateway_1          | goroutine 151808 [running]:\ntyk-gateway_1          | net/http.(*conn).serve.func1(0xc420481720)\ntyk-gateway_1          |    /usr/local/go/src/net/http/server.go:1697 +0xd0\ntyk-gateway_1          | panic(0xc99860, 0x14fd490)\ntyk-gateway_1          |    /usr/local/go/src/runtime/panic.go:491 +0x283\ntyk-gateway_1          | main.(*CoProcessor).Dispatch(0xc4209e1990, 0xc42051ec40, 0xc42051ec40, 0x2, 0xc420710ce8)\ntyk-gateway_1          |    /develop/go/src/github.com/TykTechnologies/tyk/coprocess_native.go:49 +0xdc\ntyk-gateway_1          | main.(*CoProcessMiddleware).ProcessRequest(0xc420232440, 0x15322e0, 0xc4200f82a0, 0xc42019ae00, 0x0, 0x0, 0x1c, 0xc4200126c0, 0xc4208d61e0)\ntyk-gateway_1          |    /develop/go/src/github.com/TykTechnologies/tyk/coprocess.go:239 +0x26e\ntyk-gateway_1          | main.createMiddleware.func1.1(0x15322e0, 0xc4200f82a0, 0xc42019ae00)\ntyk-gateway_1          |    /develop/go/src/github.com/TykTechnologies/tyk/middleware.go:74 +0x593\ntyk-gateway_1          | net/http.HandlerFunc.ServeHTTP(0xc420233780, 0x15322e0, 0xc4200f82a0, 0xc42019ae00)\ntyk-gateway_1          |    /usr/local/go/src/net/http/server.go:1918 +0x44\ntyk-gateway_1          | github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux.(*Router).ServeHTTP(0xc4200788c0, 0x15322e0, 0xc4200f82a0, 0xc42019ae00)\ntyk-gateway_1          |    /develop/go/src/github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux/mux.go:114 +0xdc\ntyk-gateway_1          | main.mainHandler.ServeHTTP(0x15322e0, 0xc4200f82a0, 0xc42019ac00)\ntyk-gateway_1          |    /develop/go/src/github.com/TykTechnologies/tyk/main.go:1234 +0x4b\ntyk-gateway_1          | main.(*mainHandler).ServeHTTP(0x16108d8, 0x15322e0, 0xc4200f82a0, 0xc42019ac00)\ntyk-gateway_1          |    <autogenerated>:1 +0x52\ntyk-gateway_1          | net/http.serverHandler.ServeHTTP(0xc4206cc000, 0x15322e0, 0xc4200f82a0, 0xc42019ac00)\ntyk-gateway_1          |    /usr/local/go/src/net/http/server.go:2619 +0xb4\ntyk-gateway_1          | net/http.(*conn).serve(0xc420481720, 0x15330e0, 0xc42051ea40)\ntyk-gateway_1          |    /usr/local/go/src/net/http/server.go:1801 +0x71d\ntyk-gateway_1          | created by net/http.(*Server).Serve\ntyk-gateway_1          |    /usr/local/go/src/net/http/server.go:2720 +0x288\ntyk-gateway_1          | time=\"Mar  2 15:07:00\" level=debug msg=\"Heartbeat Finished: Nonce Set: MTZiM2UwYmQtNjZjOC00ZWNjLTUxYjYtODY4ODg4NzU1ODk3NDM3ZjBmNWM4M2YzNDQ2ODUyMzgzNmIwODZkZDhjNDI=\"\ntyk-gateway_1          | time=\"Mar  2 15:07:00\" level=debug msg=\"Sending notification{NoticeGatewayDRLNotification {\\\"HostName\\\":\\\"8ca73a7a69ab\\\",\\\"ID\\\":\\\"16b3e0bd-66c8-4ecc-51b6-868888755897\\\",\\\"LoadPerSec\\\":1,\\\"Percentage\\\":0,\\\"TagHash\\\":\\\"test\\\"} }\"\ntyk-gateway_1          | time=\"Mar  2 15:07:00\" level=debug msg=\"Received DRL data: {8ca73a7a69ab 16b3e0bd-66c8-4ecc-51b6-868888755897 1 0 test}\"\ntyk-gateway_1          | time=\"Mar  2 15:07:00\" level=debug msg=\"[Active Nodes]: 1 [Token Bucket Value]: 100 [Current Load p/s]:\nIn attach you have testing bundle.\nbundle2.zip\n. @buger @matiasinsaurralde I checked this PR with all bundles that i have, all working as expected. When we merge this i will do new round of testing. So far all looking good. This issue has been resolved with latest pump release. @buger Yes, i can't reproduce this issue anymore on production. Now tracking working as expected. @buger @matiasinsaurralde \nENV: On-prem\nBranch: Master\nDuring testing with steps from description i was not able to verify this issue. When i tigger call to api with bundle i see panics in log:\n[Dec 27 23:55:04] DEBUG coprocess: CoProcess Request, HookType: Pre\n2017/12/27 23:55:04 http: panic serving 127.0.0.1:54712: runtime error: invalid memory address or nil pointer dereference\ngoroutine 10081 [running]:\nnet/http.(*conn).serve.func1(0xc420694960)\n    /usr/local/go/src/net/http/server.go:1721 +0xd0\npanic(0x4934900, 0x5062bd0)\n    /usr/local/go/src/runtime/panic.go:489 +0x2cf\nmain.(*CoProcessor).Dispatch(0xc4205fb920, 0xc420a263c0, 0xc420a263c0, 0x2, 0xc420b71aa0)\n    /Users/ilijabojanovic/work/src/github.com/TykTechnologies/tyk/coprocess_native.go:49 +0xe3\nmain.(*CoProcessMiddleware).ProcessRequest(0xc420ae5d40, 0x4faf920, 0xc4202e40e0, 0xc42000b300, 0x0, 0x0, 0x1c, 0xc420b97b60, 0x62004b0)\n    /Users/ilijabojanovic/work/src/github.com/TykTechnologies/tyk/coprocess.go:246 +0x311\nmain.createMiddleware.func1.1(0x4faf920, 0xc4202e40e0, 0xc42000b300)\n    /Users/ilijabojanovic/work/src/github.com/TykTechnologies/tyk/middleware.go:74 +0x5f9\nnet/http.HandlerFunc.ServeHTTP(0xc420aca080, 0x4faf920, 0xc4202e40e0, 0xc42000b300)\n    /usr/local/go/src/net/http/server.go:1942 +0x44\ngithub.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux.(*Router).ServeHTTP(0xc420309540, 0x4faf920, 0xc4202e40e0, 0xc42000b300)\n    /Users/ilijabojanovic/work/src/github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux/mux.go:114 +0x10c\nmain.mainHandler.ServeHTTP(0x4faf920, 0xc4202e40e0, 0xc42000b100)\n    /Users/ilijabojanovic/work/src/github.com/TykTechnologies/tyk/main.go:1281 +0x4b\nmain.(*mainHandler).ServeHTTP(0x50aa6f0, 0x4faf920, 0xc4202e40e0, 0xc42000b100)\n    <autogenerated>:740 +0x63\nnet/http.serverHandler.ServeHTTP(0xc42027e0b0, 0x4faf920, 0xc4202e40e0, 0xc42000b100)\n    /usr/local/go/src/net/http/server.go:2568 +0x92\nnet/http.(*conn).serve(0xc420694960, 0x4fb0820, 0xc420a26140)\n    /usr/local/go/src/net/http/server.go:1825 +0x612\ncreated by net/http.(*Server).Serve\n    /usr/local/go/src/net/http/server.go:2668 +0x2ce\nGateway always reload after this error. @buger \ngo build -tags 'coprocess python' && ./tyk --conf=./tyk_local.conf --debug --httpprofile. @matiasinsaurralde Yes i had similar issue as in #1260 . During test this change i found few issues:\nWhen we create key and attach that key to old policy (e.g created on 1.4.X or 1.3.X) all sections are locked for editing other words they are enforced by default.\nIf we create new policy and after that try to attach new key to new policy everything looking good.\nHere is video:\nhttps://screencast.com/t/pSjDbFLoANf\nNote: QA is new policy, novapolisa is old policy . Verified . Verified @buger please merge in to release-1.7 branch. Verified . Verified and fixed. Verified . Verified . Verified . @LinuxUser3 \nError for validation is expected.\nIf you enable API Catalogue is login-only for Swagger validator will always show error, because json validation doesn't work for protected Api Catalogue.. Verified @buger please merge in release-2.7 and master branches. @buger @lghiur \nUI part is ok now, but GW still panics\ntyk-gateway_1    | time=\"Jan 30 19:27:19\" level=info msg=\"Detected 1 APIs\"\ntyk-gateway_1    | time=\"Jan 30 19:27:19\" level=info msg=\"Loading API configurations.\"\ntyk-gateway_1    | time=\"Jan 30 19:27:19\" level=debug msg=\"Storage Engine already initialised...\"\ntyk-gateway_1    | time=\"Jan 30 19:27:19\" level=info msg=\"Tracking hostname\" api_name=test domain=\"{fqdn:(my.domain.com|(api|test-api|gggateway).my.otherdomain.com)}\"\ntyk-gateway_1    | time=\"Jan 30 19:27:19\" level=info msg=\"Sub-router created for domain\" domain=\"{fqdn:(my.domain.com|(api|test-api|gggateway).my.otherdomain.com)}\"\ntyk-gateway_1    | panic: route {fqdn:(my.domain.com|(api|test-api|gggateway).my.otherdomain.com)} contains capture groups in its regexp. Only non-capturing groups are accepted: e.g. (?:pattern) instead of (pattern)\ntyk-gateway_1    |\ntyk-gateway_1    | goroutine 1 [running]:\ntyk-gateway_1    | github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux.newRouteRegexp(0xc4203a2500, 0x42, 0x1, 0xc420895614, 0x60020895638, 0x20)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux/regexp.go:115 +0x11e9\ntyk-gateway_1    | github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux.(*Route).addRegexpMatcher(0xc4201fc1b0, 0xc4203a2500, 0x42, 0x1, 0xc42064d520, 0xc4201fc1b0)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux/route.go:185 +0xd0\ntyk-gateway_1    | github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux.(*Route).Host(0xc4201fc1b0, 0xc4203a2500, 0x42, 0x2)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux/route.go:289 +0x4f\ntyk-gateway_1    | github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux.(*Router).Host(0xc42063cc00, 0xc4203a2500, 0x42, 0x1)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux/mux.go:282 +0xc8\ntyk-gateway_1    | github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux.(*Route).Subrouter(...)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/api_loader.go:600\ntyk-gateway_1    | main.loadApps(0xc4201a62f0, 0x1, 0x1, 0xc42063cc00)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/api_loader.go:600 +0x8e9\ntyk-gateway_1    | main.loadGlobalApps(0xc42063cc00)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/api_loader.go:528 +0xf2\ntyk-gateway_1    | main.listen(0x167e3c0, 0xc420582238, 0x0, 0x0, 0x1671540, 0xc42003c060)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/main.go:1329 +0xe04\ntyk-gateway_1    | main.main()\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/main.go:1102 +0x488. Verified . Verified . This issue isn't not visible on release-2.7 branch. @buger approved for merge . Fixed and verified . Not issue . Verified . @buger @LuanvP \nI we tested this PR and i still see issues.\nIf i enable modify headers on:\nheaders endpoint, add/remove request/response headers working as expected\nif i enable modify headers on:\n/headers endpoint, add/remove request working fine, but add/remove response headers don't working at all\n@buger also url-rewrite + modify headers working with when we add endpoints without backslash \nhttps://github.com/TykTechnologies/tyk/issues/1524\n. @buger Verified and approved for merge. @buger approved for merge . @letzya @buger @excieve \nI can reproduce this issue on all stable versions from 2.4.0 to current version. I didn't tried this on 2.3.X versions. \nHere is testing definition \n{\n    \"id\": \"5a9ebd1555c18f000183f004\",\n    \"name\": \"ilija9\",\n    \"slug\": \"ilija9\",\n    \"api_id\": \"bc9cf71f3a234f116acfdf05f1ce6c5c\",\n    \"org_id\": \"5935d76307f81b0001c7c1a0\",\n    \"use_keyless\": true,\n    \"use_oauth2\": false,\n    \"use_openid\": false,\n    \"openid_options\": {\n        \"providers\": [],\n        \"segregate_by_client\": false\n    },\n    \"oauth_meta\": {\n        \"allowed_access_types\": [],\n        \"allowed_authorize_types\": [],\n        \"auth_login_redirect\": \"\"\n    },\n    \"auth\": {\n        \"use_param\": false,\n        \"param_name\": \"\",\n        \"use_cookie\": false,\n        \"cookie_name\": \"\",\n        \"auth_header_name\": \"\",\n        \"use_certificate\": false\n    },\n    \"use_basic_auth\": false,\n    \"use_mutual_tls_auth\": false,\n    \"client_certificates\": [],\n    \"upstream_certificates\": {},\n    \"enable_jwt\": false,\n    \"use_standard_auth\": false,\n    \"enable_coprocess_auth\": false,\n    \"jwt_signing_method\": \"\",\n    \"jwt_source\": \"\",\n    \"jwt_identity_base_field\": \"\",\n    \"jwt_client_base_field\": \"\",\n    \"jwt_policy_field_name\": \"\",\n    \"notifications\": {\n        \"shared_secret\": \"\",\n        \"oauth_on_keychange_url\": \"\"\n    },\n    \"enable_signature_checking\": false,\n    \"hmac_allowed_clock_skew\": -1,\n    \"base_identity_provided_by\": \"\",\n    \"definition\": {\n        \"location\": \"header\",\n        \"key\": \"x-api-version\"\n    },\n    \"version_data\": {\n        \"not_versioned\": true,\n        \"default_version\": \"\",\n        \"versions\": {\n            \"Default\": {\n                \"name\": \"Default\",\n                \"expires\": \"\",\n                \"paths\": {\n                    \"ignored\": [],\n                    \"white_list\": [],\n                    \"black_list\": []\n                },\n                \"use_extended_paths\": true,\n                \"extended_paths\": {\n                    \"transform_headers\": [\n                        {\n                            \"delete_headers\": [\n                                \"User-Agent\"\n                            ],\n                            \"add_headers\": {\n                                \"add\": \"request\"\n                            },\n                            \"path\": \"/ip\",\n                            \"method\": \"GET\",\n                            \"act_on\": false\n                        }\n                    ],\n                    \"transform_response_headers\": [\n                        {\n                            \"delete_headers\": [\n                                \"X-Powered-By\"\n                            ],\n                            \"add_headers\": {\n                                \"add\": \"response\"\n                            },\n                            \"path\": \"/ip\",\n                            \"method\": \"GET\",\n                            \"act_on\": false\n                        }\n                    ],\n                    \"url_rewrites\": [\n                        {\n                            \"path\": \"/ip\",\n                            \"method\": \"GET\",\n                            \"match_pattern\": \"/ip\",\n                            \"rewrite_to\": \"/headers\",\n                            \"triggers\": []\n                        }\n                    ]\n                },\n                \"global_headers\": {},\n                \"global_headers_remove\": [],\n                \"global_size_limit\": 0,\n                \"override_target\": \"\"\n            }\n        }\n    },\n    \"uptime_tests\": {\n        \"check_list\": [],\n        \"config\": {\n            \"expire_utime_after\": 0,\n            \"service_discovery\": {\n                \"use_discovery_service\": false,\n                \"query_endpoint\": \"\",\n                \"use_nested_query\": false,\n                \"parent_data_path\": \"\",\n                \"data_path\": \"\",\n                \"port_data_path\": \"\",\n                \"target_path\": \"\",\n                \"use_target_list\": false,\n                \"cache_timeout\": 60,\n                \"endpoint_returns_list\": false\n            },\n            \"recheck_wait\": 0\n        }\n    },\n    \"proxy\": {\n        \"preserve_host_header\": false,\n        \"listen_path\": \"/bc9cf71f3a234f116acfdf05f1ce6c5c/\",\n        \"target_url\": \"http://httpbin.org/\",\n        \"strip_listen_path\": true,\n        \"enable_load_balancing\": false,\n        \"target_list\": [],\n        \"check_host_against_uptime_tests\": false,\n        \"service_discovery\": {\n            \"use_discovery_service\": false,\n            \"query_endpoint\": \"\",\n            \"use_nested_query\": false,\n            \"parent_data_path\": \"\",\n            \"data_path\": \"\",\n            \"port_data_path\": \"\",\n            \"target_path\": \"\",\n            \"use_target_list\": false,\n            \"cache_timeout\": 0,\n            \"endpoint_returns_list\": false\n        }\n    },\n    \"disable_rate_limit\": false,\n    \"disable_quota\": false,\n    \"custom_middleware\": {\n        \"pre\": [],\n        \"post\": [],\n        \"post_key_auth\": [],\n        \"auth_check\": {\n            \"name\": \"\",\n            \"path\": \"\",\n            \"require_session\": false\n        },\n        \"response\": [],\n        \"driver\": \"\",\n        \"id_extractor\": {\n            \"extract_from\": \"\",\n            \"extract_with\": \"\",\n            \"extractor_config\": {}\n        }\n    },\n    \"custom_middleware_bundle\": \"\",\n    \"cache_options\": {\n        \"cache_timeout\": 60,\n        \"enable_cache\": true,\n        \"cache_all_safe_requests\": false,\n        \"cache_response_codes\": [],\n        \"enable_upstream_cache_control\": false,\n        \"cache_control_ttl_header\": \"\"\n    },\n    \"session_lifetime\": 0,\n    \"active\": true,\n    \"auth_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"session_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"event_handlers\": {\n        \"events\": {}\n    },\n    \"enable_batch_request_support\": false,\n    \"enable_ip_whitelisting\": false,\n    \"allowed_ips\": [],\n    \"dont_set_quota_on_create\": false,\n    \"expire_analytics_after\": 0,\n    \"response_processors\": [\n        {\n            \"name\": \"header_injector\",\n            \"options\": {}\n        }\n    ],\n    \"CORS\": {\n        \"enable\": false,\n        \"allowed_origins\": [],\n        \"allowed_methods\": [],\n        \"allowed_headers\": [],\n        \"exposed_headers\": [],\n        \"allow_credentials\": false,\n        \"max_age\": 24,\n        \"options_passthrough\": false,\n        \"debug\": false\n    },\n    \"domain\": \"\",\n    \"do_not_track\": false,\n    \"tags\": [],\n    \"enable_context_vars\": false,\n    \"config_data\": {},\n    \"tag_headers\": [],\n    \"global_rate_limit\": {\n        \"rate\": 0,\n        \"per\": 0\n    },\n    \"strip_auth_data\": false\n}\n@excieve @buger also i noticed one thing, on cloud if we enable modify headers plugin and enable add/remove response headers that doesn't work. This plugin working fine on Hybrid and on-prem installations.\n . Also here is work around for this issue:\n{\n    \"id\": \"5a9ebd1555c18f000183f004\",\n    \"name\": \"ilija9\",\n    \"slug\": \"ilija9\",\n    \"api_id\": \"bc9cf71f3a234f116acfdf05f1ce6c5c\",\n    \"org_id\": \"5935d76307f81b0001c7c1a0\",\n    \"use_keyless\": true,\n    \"use_oauth2\": false,\n    \"use_openid\": false,\n    \"openid_options\": {\n        \"providers\": [],\n        \"segregate_by_client\": false\n    },\n    \"oauth_meta\": {\n        \"allowed_access_types\": [],\n        \"allowed_authorize_types\": [],\n        \"auth_login_redirect\": \"\"\n    },\n    \"auth\": {\n        \"use_param\": false,\n        \"param_name\": \"\",\n        \"use_cookie\": false,\n        \"cookie_name\": \"\",\n        \"auth_header_name\": \"\",\n        \"use_certificate\": false\n    },\n    \"use_basic_auth\": false,\n    \"use_mutual_tls_auth\": false,\n    \"client_certificates\": [],\n    \"upstream_certificates\": {},\n    \"enable_jwt\": false,\n    \"use_standard_auth\": false,\n    \"enable_coprocess_auth\": false,\n    \"jwt_signing_method\": \"\",\n    \"jwt_source\": \"\",\n    \"jwt_identity_base_field\": \"\",\n    \"jwt_client_base_field\": \"\",\n    \"jwt_policy_field_name\": \"\",\n    \"notifications\": {\n        \"shared_secret\": \"\",\n        \"oauth_on_keychange_url\": \"\"\n    },\n    \"enable_signature_checking\": false,\n    \"hmac_allowed_clock_skew\": -1,\n    \"base_identity_provided_by\": \"\",\n    \"definition\": {\n        \"location\": \"header\",\n        \"key\": \"x-api-version\"\n    },\n    \"version_data\": {\n        \"not_versioned\": true,\n        \"default_version\": \"\",\n        \"versions\": {\n            \"Default\": {\n                \"name\": \"Default\",\n                \"expires\": \"\",\n                \"paths\": {\n                    \"ignored\": [],\n                    \"white_list\": [],\n                    \"black_list\": []\n                },\n                \"use_extended_paths\": true,\n                \"extended_paths\": {\n                    \"transform_headers\": [\n                        {\n                            \"delete_headers\": [\n                                \"postman-token\",\n                                \"User-Agent\"\n                            ],\n                            \"add_headers\": {\n                                \"ADD\": \"request\"\n                            },\n                            \"path\": \"/headers\",\n                            \"method\": \"GET\",\n                            \"act_on\": false\n                        },\n                        {\n                            \"delete_headers\": [\n                                \"User-Agent\"\n                            ],\n                            \"add_headers\": {\n                                \"add\": \"request\"\n                            },\n                            \"path\": \"/ip\",\n                            \"method\": \"GET\",\n                            \"act_on\": false\n                        }\n                    ],\n                    \"transform_response_headers\": [\n                        {\n                            \"delete_headers\": [\n                                \"X-Powered-By\"\n                            ],\n                            \"add_headers\": {\n                                \"add\": \"response\"\n                            },\n                            \"path\": \"/headers\",\n                            \"method\": \"GET\",\n                            \"act_on\": false\n                        },\n                        {\n                            \"delete_headers\": [\n                                \"X-Powered-By\"\n                            ],\n                            \"add_headers\": {\n                                \"add\": \"response\"\n                            },\n                            \"path\": \"/ip\",\n                            \"method\": \"GET\",\n                            \"act_on\": false\n                        }\n                    ],\n                    \"url_rewrites\": [\n                        {\n                            \"path\": \"/ip\",\n                            \"method\": \"GET\",\n                            \"match_pattern\": \"/ip\",\n                            \"rewrite_to\": \"/headers\",\n                            \"triggers\": []\n                        }\n                    ]\n                },\n                \"global_headers\": {},\n                \"global_headers_remove\": [],\n                \"global_size_limit\": 0,\n                \"override_target\": \"\"\n            }\n        }\n    },\n    \"uptime_tests\": {\n        \"check_list\": [],\n        \"config\": {\n            \"expire_utime_after\": 0,\n            \"service_discovery\": {\n                \"use_discovery_service\": false,\n                \"query_endpoint\": \"\",\n                \"use_nested_query\": false,\n                \"parent_data_path\": \"\",\n                \"data_path\": \"\",\n                \"port_data_path\": \"\",\n                \"target_path\": \"\",\n                \"use_target_list\": false,\n                \"cache_timeout\": 60,\n                \"endpoint_returns_list\": false\n            },\n            \"recheck_wait\": 0\n        }\n    },\n    \"proxy\": {\n        \"preserve_host_header\": false,\n        \"listen_path\": \"/bc9cf71f3a234f116acfdf05f1ce6c5c/\",\n        \"target_url\": \"http://httpbin.org/\",\n        \"strip_listen_path\": true,\n        \"enable_load_balancing\": false,\n        \"target_list\": [],\n        \"check_host_against_uptime_tests\": false,\n        \"service_discovery\": {\n            \"use_discovery_service\": false,\n            \"query_endpoint\": \"\",\n            \"use_nested_query\": false,\n            \"parent_data_path\": \"\",\n            \"data_path\": \"\",\n            \"port_data_path\": \"\",\n            \"target_path\": \"\",\n            \"use_target_list\": false,\n            \"cache_timeout\": 0,\n            \"endpoint_returns_list\": false\n        }\n    },\n    \"disable_rate_limit\": false,\n    \"disable_quota\": false,\n    \"custom_middleware\": {\n        \"pre\": [],\n        \"post\": [],\n        \"post_key_auth\": [],\n        \"auth_check\": {\n            \"name\": \"\",\n            \"path\": \"\",\n            \"require_session\": false\n        },\n        \"response\": [],\n        \"driver\": \"\",\n        \"id_extractor\": {\n            \"extract_from\": \"\",\n            \"extract_with\": \"\",\n            \"extractor_config\": {}\n        }\n    },\n    \"custom_middleware_bundle\": \"\",\n    \"cache_options\": {\n        \"cache_timeout\": 60,\n        \"enable_cache\": true,\n        \"cache_all_safe_requests\": false,\n        \"cache_response_codes\": [],\n        \"enable_upstream_cache_control\": false,\n        \"cache_control_ttl_header\": \"\"\n    },\n    \"session_lifetime\": 0,\n    \"active\": true,\n    \"auth_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"session_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"event_handlers\": {\n        \"events\": {}\n    },\n    \"enable_batch_request_support\": false,\n    \"enable_ip_whitelisting\": false,\n    \"allowed_ips\": [],\n    \"dont_set_quota_on_create\": false,\n    \"expire_analytics_after\": 0,\n    \"response_processors\": [\n        {\n            \"name\": \"header_injector\",\n            \"options\": {}\n        }\n    ],\n    \"CORS\": {\n        \"enable\": false,\n        \"allowed_origins\": [],\n        \"allowed_methods\": [],\n        \"allowed_headers\": [],\n        \"exposed_headers\": [],\n        \"allow_credentials\": false,\n        \"max_age\": 24,\n        \"options_passthrough\": false,\n        \"debug\": false\n    },\n    \"domain\": \"\",\n    \"do_not_track\": false,\n    \"tags\": [],\n    \"enable_context_vars\": false,\n    \"config_data\": {},\n    \"tag_headers\": [],\n    \"global_rate_limit\": {\n        \"rate\": 0,\n        \"per\": 0\n    },\n    \"strip_auth_data\": false\n}\nIf we enable modify headers on endpoint which is same in rewrite url, gateway returns response headers. Verified and fixed in:\nhttps://github.com/TykTechnologies/tyk/pull/1515. @LuanvP @letzya i we just check again master, all working fine for me on endpoints with/without backslash  . @letzya any update?. @joshblakeley this issue is still visible for me on latest master. No group or tags in config. . Verified on mdcb and hybrid environments . Verified . @bitsofinfo This bug should be fixed in gateway 2.5.3 version\nhttps://github.com/TykTechnologies/tyk/releases/tag/v2.5.3. @LuanvP Do you have partitioned policy ? Please try with enforced access rights. @LuanvP That is currently expected, let me discuss again with @lonelycode . In past release we changed UI for tokens attached to policy. E.g if you don't have anything selected for partitions on policy page, we will not enforce anything to tokens after we update policy e.g add new api definition.. @LuanvP this is on master or stable?. Verified . Verified . Verified . \n. Verified . @buger Approved for merge . Verified . Verified . Not issue. Verified . Verified . Verified . @buger approved for merge . Verified . Verified. @buger approved for merge, please review code. Verified @buger please merge on master and release-2.7 branch . bundle-auth.zip\n. Verified and approved for merge @buger . Verified . Verified . @buger please merge both PR's release-2.7 branch. @asoorm yes. From this morning all finished PR's going in to 2.7.2 @buger .. @buger @matiasinsaurralde \nOn latest master: 04972c3735a35a35a69db76caf8a0c6bad0a5616\nI still see errors with base64 decoding\n[Aug 24 16:53:01]  INFO jsvm-logmsg: Virtual Test running type=log-msg\n[Aug 24 16:53:01]  INFO jsvm-logmsg: full JWT: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c type=log-msg\n[Aug 24 16:53:01]  INFO jsvm-logmsg: header: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 type=log-msg\n[Aug 24 16:53:01]  INFO jsvm-logmsg: payload: eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ type=log-msg\n[Aug 24 16:53:01]  INFO jsvm-logmsg: signature: SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c type=log-msg\n[Aug 24 16:53:01] ERROR jsvm: Failed to base64 decode: illegal base64 data at input byte 34\n[Aug 24 16:53:01]  INFO jsvm-logmsg: headerDecoded: {\"alg\":\"HS256\",\"typ\":\"JWT\"} type=log-msg\n[Aug 24 16:53:01]  INFO jsvm-logmsg: payloadDecoded: {\"sub\":\"1234567890\",\"name\":\"John Doe\",\"iat\":1516239022} type=log-msg\n[Aug 24 16:53:01]  INFO jsvm-logmsg: signatureDecoded: undefined type=log-msg\n. @buger i we sent him data over slack DM few days ago :) \n@matiasinsaurralde i we used same example from task . Verified . @buger @asoorm We need to update api schema too. @buger approved for merge, please merge in to release-2.7 and master branch. @aftershockdan Hi, could you please share yours tyk_analytics.conf file?. @aftershockdan for some reason dashboard locates gateway on this address:\n10.28.14.30:80 without protocol.\nif you are using env variables gateway host must have protocol e.g http://10.28.14.30 or http://tyk-gateway. Verified @buger please merge in to release-2.7 branch and master. Verified @buger please merge to master and release-2.7 branchs. Verified @buger please merge on master and release-2.7. Verified . @buger approved for merge. Please merge this in to master and release-2.7 branches . Verified @buger please merge in to release-2.7 branch. Verified @buger please merge this in to release-2.7 branch. Hi @danielmartins thanks for raising issue.\nCould you paste here yours tyk_analytics configuration?. @danielmartins \nSeems you have CE (community edition) settings for polices in tyk.conf file.\nYou should change \n\"policies\": {\n        \"policy_source\": \"service\",\n        \"policy_connection_string\": \"DASHBOARD_URL,\n        \"policy_record_name\": \"tyk_policies\",\n        \"allow_explicit_policy_id\": false\n    }. @buger approved for merge, please merge in to master and release-2.7 branch . @buger verified. please merge in to release-2.7 and master. @buger please merge this in to master and release-2.7 branch. Verified . @buger approved for merge. @buger issue is still visible n release-2.7 branch.\nHere is testing api-def\njson\n{\n    \"id\": \"5c2df1a7cce9f30cdfa34418\",\n    \"name\": \"basic\",\n    \"slug\": \"basic\",\n    \"api_id\": \"c914dc985bdf45524e37972409f3dead\",\n    \"org_id\": \"5c2df0c0cce9f30c9930598b\",\n    \"use_keyless\": false,\n    \"use_oauth2\": false,\n    \"use_openid\": false,\n    \"openid_options\": {\n        \"providers\": [],\n        \"segregate_by_client\": false\n    },\n    \"oauth_meta\": {\n        \"allowed_access_types\": [],\n        \"allowed_authorize_types\": [],\n        \"auth_login_redirect\": \"\"\n    },\n    \"auth\": {\n        \"use_param\": false,\n        \"param_name\": \"\",\n        \"use_cookie\": false,\n        \"cookie_name\": \"\",\n        \"auth_header_name\": \"Authorization\",\n        \"use_certificate\": false\n    },\n    \"use_basic_auth\": false,\n    \"basic_auth\": {\n        \"disable_caching\": false,\n        \"cache_ttl\": 0\n    },\n    \"use_mutual_tls_auth\": false,\n    \"client_certificates\": [],\n    \"upstream_certificates\": {},\n    \"pinned_public_keys\": {},\n    \"enable_jwt\": false,\n    \"use_standard_auth\": true,\n    \"enable_coprocess_auth\": false,\n    \"jwt_signing_method\": \"\",\n    \"jwt_source\": \"\",\n    \"jwt_identity_base_field\": \"\",\n    \"jwt_client_base_field\": \"\",\n    \"jwt_policy_field_name\": \"\",\n    \"jwt_disable_issued_at_validation\": false,\n    \"jwt_disable_expires_at_validation\": false,\n    \"jwt_disable_not_before_validation\": false,\n    \"jwt_skip_kid\": false,\n    \"notifications\": {\n        \"shared_secret\": \"\",\n        \"oauth_on_keychange_url\": \"\"\n    },\n    \"enable_signature_checking\": false,\n    \"hmac_allowed_clock_skew\": -1,\n    \"base_identity_provided_by\": \"\",\n    \"definition\": {\n        \"location\": \"header\",\n        \"key\": \"x-api-version\",\n        \"strip_path\": false\n    },\n    \"version_data\": {\n        \"not_versioned\": true,\n        \"default_version\": \"\",\n        \"versions\": {\n            \"Default\": {\n                \"name\": \"Default\",\n                \"expires\": \"\",\n                \"paths\": {\n                    \"ignored\": [],\n                    \"white_list\": [],\n                    \"black_list\": []\n                },\n                \"use_extended_paths\": true,\n                \"extended_paths\": {\n                    \"white_list\": [\n                        {\n                            \"path\": \"/accounts/{accountId}\",\n                            \"method_actions\": {\n                                \"GET\": {\n                                    \"action\": \"no_action\",\n                                    \"code\": 200,\n                                    \"data\": \"\",\n                                    \"headers\": {}\n                                }\n                            }\n                        }\n                    ]\n                },\n                \"global_headers\": {},\n                \"global_headers_remove\": [],\n                \"global_size_limit\": 0,\n                \"override_target\": \"\"\n            }\n        }\n    },\n    \"uptime_tests\": {\n        \"check_list\": [],\n        \"config\": {\n            \"expire_utime_after\": 0,\n            \"service_discovery\": {\n                \"use_discovery_service\": false,\n                \"query_endpoint\": \"\",\n                \"use_nested_query\": false,\n                \"parent_data_path\": \"\",\n                \"data_path\": \"\",\n                \"port_data_path\": \"\",\n                \"target_path\": \"\",\n                \"use_target_list\": false,\n                \"cache_timeout\": 60,\n                \"endpoint_returns_list\": false\n            },\n            \"recheck_wait\": 0\n        }\n    },\n    \"proxy\": {\n        \"preserve_host_header\": false,\n        \"listen_path\": \"/basic/\",\n        \"target_url\": \"http://192.168.1.6:3333/\",\n        \"strip_listen_path\": true,\n        \"enable_load_balancing\": false,\n        \"target_list\": [],\n        \"check_host_against_uptime_tests\": false,\n        \"service_discovery\": {\n            \"use_discovery_service\": false,\n            \"query_endpoint\": \"\",\n            \"use_nested_query\": false,\n            \"parent_data_path\": \"\",\n            \"data_path\": \"\",\n            \"port_data_path\": \"\",\n            \"target_path\": \"\",\n            \"use_target_list\": false,\n            \"cache_timeout\": 0,\n            \"endpoint_returns_list\": false\n        },\n        \"transport\": {\n            \"ssl_ciphers\": [],\n            \"ssl_min_version\": 0,\n            \"proxy_url\": \"\"\n        }\n    },\n    \"disable_rate_limit\": false,\n    \"disable_quota\": false,\n    \"custom_middleware\": {\n        \"pre\": [],\n        \"post\": [],\n        \"post_key_auth\": [],\n        \"auth_check\": {\n            \"name\": \"\",\n            \"path\": \"\",\n            \"require_session\": false\n        },\n        \"response\": [],\n        \"driver\": \"\",\n        \"id_extractor\": {\n            \"extract_from\": \"\",\n            \"extract_with\": \"\",\n            \"extractor_config\": {}\n        }\n    },\n    \"custom_middleware_bundle\": \"\",\n    \"cache_options\": {\n        \"cache_timeout\": 60,\n        \"enable_cache\": true,\n        \"cache_all_safe_requests\": false,\n        \"cache_response_codes\": [],\n        \"enable_upstream_cache_control\": false,\n        \"cache_control_ttl_header\": \"\"\n    },\n    \"session_lifetime\": 0,\n    \"active\": true,\n    \"auth_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"session_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"event_handlers\": {\n        \"events\": {}\n    },\n    \"enable_batch_request_support\": false,\n    \"enable_ip_whitelisting\": false,\n    \"allowed_ips\": [],\n    \"enable_ip_blacklisting\": false,\n    \"blacklisted_ips\": [],\n    \"dont_set_quota_on_create\": false,\n    \"expire_analytics_after\": 0,\n    \"response_processors\": [],\n    \"CORS\": {\n        \"enable\": false,\n        \"allowed_origins\": [],\n        \"allowed_methods\": [],\n        \"allowed_headers\": [],\n        \"exposed_headers\": [],\n        \"allow_credentials\": false,\n        \"max_age\": 24,\n        \"options_passthrough\": false,\n        \"debug\": false\n    },\n    \"domain\": \"\",\n    \"do_not_track\": false,\n    \"tags\": [],\n    \"enable_context_vars\": false,\n    \"config_data\": {},\n    \"tag_headers\": [],\n    \"global_rate_limit\": {\n        \"rate\": 0,\n        \"per\": 0\n    },\n    \"strip_auth_data\": false\n}\nReproduction steps:\n1. Import api definition \n2. Trigger GET call to {gateway_url}//basic/accounts/3/paymentPlans\nActual:\nWe are getting 200 response and content\nExpected:\nWe should got 403 status code for this endpoint. Verified . When we start gw in on-prem mode, in log we have this warn:\n[Oct 30 11:07:38]  WARN dashboard is down? Heartbeat non-200 response\n[Oct 30 11:07:40]  WARN dashboard is down? Heartbeat non-200 response\n[Oct 30 11:07:42]  WARN dashboard is down? Heartbeat non-200 response\n[Oct 30 11:07:44]  WARN dashboard is down? Heartbeat non-200 response. @ConsM @lghiur bump. Verified . @rajali Hi, thanks for reporting this issue. We are aware of this issue and we will fix this issue in next patch release. Verified . Verified . Verified on 2.8 branch. @dencoded After @letzya reported this issue i was able to reproduce issue for several minutes. \nWhen i disabled key access on policy page, key sill worked on gateway\nThis is what i saw in console:\n[Nov 14 15:50:26] ERROR policy not found: \u201c5bd82d719b7d7c0a17eece3d\u201d\n[Nov 14 15:50:26]  INFO Attempted access from expired key. key=5bd82c299b7d7c0873b203f1f6586e20d06b4e94a3c4e1e9218c6d2b origin=127.0.0.1 path=/api/ip \nBut i was able to reproduce only once, i we tried on 2.7, 2.8, 2.6 but without luck. I am still trying to reproduce this if i found steps i will provide here\n. Verified . Verified . @dencoded i am reopening this\nIssue with warnings is still visible on for tokens attached to basic auth\n[Dec  3 18:27:10]  WARN Incorrect key expiry setting detected, correcting\n[Dec  3 18:27:11]  WARN Incorrect key expiry setting detected, correcting\nReproduction steps:\n1. Enable mumur64 hash in config\n2. Create api and protect api with basic auth\n3. On Keys page create basic auth user\n4. Trigger call to api protected with basic auth. Verified . Verified . Verified . Verified . Verified . Verified. Verified. Verified . See comment in https://github.com/TykTechnologies/tyk-analytics/issues/976. @buger please merge this in to release-2.7 branch. @letzya @buger i can't reproduce this issue on release-2.7, master and current cloud. @buger i was able to reproduce this issue. here is testing api def. I was able to reproduce issue on on-prem env\n{\n    \"id\": \"5c3f6a959b7d7c0d65587b7f\",\n    \"name\": \"post with get\",\n    \"slug\": \"post-with-get\",\n    \"api_id\": \"ae97cde007814fdb4f540d5df026ded2\",\n    \"org_id\": \"5c3ce615cce9f31469372c2a\",\n    \"use_keyless\": true,\n    \"use_oauth2\": false,\n    \"use_openid\": false,\n    \"openid_options\": {\n        \"providers\": [],\n        \"segregate_by_client\": false\n    },\n    \"oauth_meta\": {\n        \"allowed_access_types\": [],\n        \"allowed_authorize_types\": [],\n        \"auth_login_redirect\": \"\"\n    },\n    \"auth\": {\n        \"use_param\": false,\n        \"param_name\": \"\",\n        \"use_cookie\": false,\n        \"cookie_name\": \"\",\n        \"auth_header_name\": \"\",\n        \"use_certificate\": false\n    },\n    \"use_basic_auth\": false,\n    \"basic_auth\": {\n        \"disable_caching\": false,\n        \"cache_ttl\": 0\n    },\n    \"use_mutual_tls_auth\": false,\n    \"client_certificates\": [],\n    \"upstream_certificates\": {},\n    \"pinned_public_keys\": {},\n    \"enable_jwt\": false,\n    \"use_standard_auth\": false,\n    \"enable_coprocess_auth\": false,\n    \"jwt_signing_method\": \"\",\n    \"jwt_source\": \"\",\n    \"jwt_identity_base_field\": \"\",\n    \"jwt_client_base_field\": \"\",\n    \"jwt_policy_field_name\": \"\",\n    \"jwt_issued_at_validation_skew\": 0,\n    \"jwt_expires_at_validation_skew\": 0,\n    \"jwt_not_before_validation_skew\": 0,\n    \"jwt_skip_kid\": false,\n    \"jwt_scope_to_policy_mapping\": {},\n    \"jwt_scope_claim_name\": \"\",\n    \"notifications\": {\n        \"shared_secret\": \"\",\n        \"oauth_on_keychange_url\": \"\"\n    },\n    \"enable_signature_checking\": false,\n    \"hmac_allowed_clock_skew\": -1,\n    \"base_identity_provided_by\": \"\",\n    \"definition\": {\n        \"location\": \"header\",\n        \"key\": \"x-api-version\",\n        \"strip_path\": false\n    },\n    \"version_data\": {\n        \"not_versioned\": true,\n        \"default_version\": \"\",\n        \"versions\": {\n            \"Default\": {\n                \"name\": \"Default\",\n                \"expires\": \"\",\n                \"paths\": {\n                    \"ignored\": [],\n                    \"white_list\": [],\n                    \"black_list\": []\n                },\n                \"use_extended_paths\": true,\n                \"extended_paths\": {\n                    \"transform_response\": [\n                        {\n                            \"template_data\": {\n                                \"input_type\": \"json\",\n                                \"template_mode\": \"blob\",\n                                \"enable_session\": false,\n                                \"template_source\": \"ewogICJ2YWx1ZTEiOiAie3sudmFsdWUyfX0iLAogICJ2YWx1ZTIiOiAie3sudmFsdWUxfX0iLAogICJ0cmFuc2Zvcm1lZF9saXN0IjogWwogICAge3tyYW5nZSAkaW5kZXgsICRlbGVtZW50IDo9IC52YWx1ZV9saXN0fX0KICAgICAgICB7e2lmICRpbmRleH19CiAgICAgICAgLCAie3skZWxlbWVudH19IgogICAgICAgIHt7ZWxzZX19CiAgICAgICAgICAie3skZWxlbWVudH19IgogICAgICAgIHt7ZW5kfX0KICAgIHt7ZW5kfX0KICBdCn0=\"\n                            },\n                            \"path\": \"post\",\n                            \"method\": \"GET\"\n                        }\n                    ],\n                    \"method_transforms\": [\n                        {\n                            \"path\": \"post\",\n                            \"method\": \"GET\",\n                            \"to_method\": \"POST\"\n                        }\n                    ]\n                },\n                \"global_headers\": {},\n                \"global_headers_remove\": [],\n                \"global_size_limit\": 0,\n                \"override_target\": \"\"\n            }\n        }\n    },\n    \"uptime_tests\": {\n        \"check_list\": [],\n        \"config\": {\n            \"expire_utime_after\": 0,\n            \"service_discovery\": {\n                \"use_discovery_service\": false,\n                \"query_endpoint\": \"\",\n                \"use_nested_query\": false,\n                \"parent_data_path\": \"\",\n                \"data_path\": \"\",\n                \"port_data_path\": \"\",\n                \"target_path\": \"\",\n                \"use_target_list\": false,\n                \"cache_timeout\": 60,\n                \"endpoint_returns_list\": false\n            },\n            \"recheck_wait\": 0\n        }\n    },\n    \"proxy\": {\n        \"preserve_host_header\": false,\n        \"listen_path\": \"/post-with-get/\",\n        \"target_url\": \"http://httpbin.org/\",\n        \"disable_strip_prefix\": false,\n        \"strip_listen_path\": true,\n        \"enable_load_balancing\": false,\n        \"target_list\": [],\n        \"check_host_against_uptime_tests\": false,\n        \"service_discovery\": {\n            \"use_discovery_service\": false,\n            \"query_endpoint\": \"\",\n            \"use_nested_query\": false,\n            \"parent_data_path\": \"\",\n            \"data_path\": \"\",\n            \"port_data_path\": \"\",\n            \"target_path\": \"\",\n            \"use_target_list\": false,\n            \"cache_timeout\": 0,\n            \"endpoint_returns_list\": false\n        },\n        \"transport\": {\n            \"ssl_insecure_skip_verify\": false,\n            \"ssl_ciphers\": [],\n            \"ssl_min_version\": 0,\n            \"proxy_url\": \"\"\n        }\n    },\n    \"disable_rate_limit\": false,\n    \"disable_quota\": false,\n    \"custom_middleware\": {\n        \"pre\": [],\n        \"post\": [],\n        \"post_key_auth\": [],\n        \"auth_check\": {\n            \"name\": \"\",\n            \"path\": \"\",\n            \"require_session\": false\n        },\n        \"response\": [],\n        \"driver\": \"\",\n        \"id_extractor\": {\n            \"extract_from\": \"\",\n            \"extract_with\": \"\",\n            \"extractor_config\": {}\n        }\n    },\n    \"custom_middleware_bundle\": \"\",\n    \"cache_options\": {\n        \"cache_timeout\": 60,\n        \"enable_cache\": true,\n        \"cache_all_safe_requests\": false,\n        \"cache_response_codes\": [],\n        \"enable_upstream_cache_control\": false,\n        \"cache_control_ttl_header\": \"\"\n    },\n    \"session_lifetime\": 0,\n    \"active\": true,\n    \"auth_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"session_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"event_handlers\": {\n        \"events\": {}\n    },\n    \"enable_batch_request_support\": false,\n    \"enable_ip_whitelisting\": false,\n    \"allowed_ips\": [],\n    \"enable_ip_blacklisting\": false,\n    \"blacklisted_ips\": [],\n    \"dont_set_quota_on_create\": false,\n    \"expire_analytics_after\": 0,\n    \"response_processors\": [\n        {\n            \"name\": \"response_body_transform\",\n            \"options\": {}\n        }\n    ],\n    \"CORS\": {\n        \"enable\": false,\n        \"allowed_origins\": [],\n        \"allowed_methods\": [],\n        \"allowed_headers\": [],\n        \"exposed_headers\": [],\n        \"allow_credentials\": false,\n        \"max_age\": 24,\n        \"options_passthrough\": false,\n        \"debug\": false\n    },\n    \"domain\": \"\",\n    \"do_not_track\": false,\n    \"tags\": [],\n    \"enable_context_vars\": false,\n    \"config_data\": {},\n    \"tag_headers\": [],\n    \"global_rate_limit\": {\n        \"rate\": 0,\n        \"per\": 0\n    },\n    \"strip_auth_data\": false\n}\nSteps:\n1. Import api def over dashboard\n2. Trigger GET call to {gateway_url}/post-with-get/post \n3. Trigger GET call to {gateway_url}/post-with-get/ip\nActual:\nFor IP endpoint gateway will apply method transform\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>405 Method Not Allowed</title>\n<h1>Method Not Allowed</h1>\n<p>The method is not allowed for the requested URL.</p> . @buger approved for merge. @buger approved for merge. @buger verified and approved for merge. @buger approved. Verified . @davegarvey could you please attach video or api definition. I am not able to reproduce this issue on 1.7.4 version . @andrewscode Hi, we are not able to reproduce issue with attached api definition.  Could you please attach yours tyk configuration?\nAlso when we trigger GET call to {gateway_url)/test/test/two we are getting google page in response . @andrewscode thank you for feedback, we are still investigating yours issue, since we where not able to reproduce. . @andrewscode in yours api definition we have this:\n\"listen_path\": \"/test\", that means gateway listen on {gateway_url}/test and endpoint which you wish to rewrite is {gateway_url}/{listen_path}/test/two which give us {gateway_url}/test/test/two. @andrewscode when we fixed this bug https://github.com/TykTechnologies/tyk/issues/2067 that change introduced breaking on yours api definitions. . @andrewscode yes, since endpoint url rewrite plugin works per api definition, there is no need to add listen_path in url rewrite for matching.. Verified . Verified . @buger approved for merge. Verified . @buger Issue is on httpbin. For some reason few days ago they don't accept custom headers with _ in key. Issue is fixed and included in release 1.7.6. Verified . @buger please merge this in release-2.8 branch. @buger Ouath token in cliend_id list are hashed now, but active tokens are still visible:\nhttps://screencast.com/t/I5kjPiZRP2. Verified . ",
    "ax-nathan": "+1 that having strip_listen_path=false as the default is counterintuitive and probably costing you adoption as it provides immediate frustration.\n. ",
    "ScottGuymer": "+1 I immediately struggled with this when testing tyk out for the first time.\nOther than this im super impressed with the OOTB functionality. \n. When is this released?\n. ",
    "veger": "It is alright to close the issue, thanks. Tyk gateway (and dashboard) installed as Ubuntu package. Version 1.9.1.1 (and 0.9.7.2 for dashboard)\n. The body response transform also happens before the rewrite? As this transform needs to be executed after a response is received, and thus a rewrite is already done..? (I am quite new to golang, so I am not yet able to check the code at such detail level)\n. Basically, I would expect to define an endpoint and have everything matching that one in a (sort of) session. So independent of modifications to the request, body or other data.\nIs it possibility to change/fix Tyk in such a way? Or should I keep using my/the current work around?\n. The reason of the wobbly (golang panic/expection?) is clear, but I would assume that inbound data is checked for validity and reported back when this is not the case. In this situation the response could be identical to the response of the API not being available (as this is basically the case).\nI just wanted to report the issue, so you know its existence. For me it is not an issue as I tend/try to use correct ids... ;)\n. We were wondering about this too... But didn't have time to take a better look at it since I wrote this report.\nThank you very much for your effort in adding the required changes, we will certainly take a look at it soon and fix our servers.\n. No idea, we are not able to update to the to Tyk 2.x.... Time & money (for Dashboard) at our side, and we are not too happy with the product (stability, insights/logging, features, documentation). ",
    "msheldonfl": "Will give that a shot and let you know how it goes.  I must have missed that in the documentation.\n. Doesn't seem to be working.  It answers if I put in the literal {id} but not with any string in that place.  \nHere's my api definition:\n```\n{\n  \"api_model\": {\n},\n  \"api_definition\": {\n    \"id\": \"5666dd02c98a1217f3000002\",\n    \"name\": \"Test API\",\n    \"slug\": \"test-api\",\n    \"api_id\": \"de4a68d6f5784302749abbe33ed213c6\",\n    \"org_id\": \"5666dccec98a1217f3000001\",\n    \"use_keyless\": true,\n    \"use_oauth2\": false,\n    \"oauth_meta\": {\n      \"allowed_access_types\": [\n  ],\n  \"allowed_authorize_types\": [\n\n  ],\n  \"auth_login_redirect\": \"\"\n},\n\"auth\": {\n  \"use_param\": false,\n  \"use_cookie\": false,\n  \"auth_header_name\": \"\"\n},\n\"use_basic_auth\": false,\n\"enable_jwt\": false,\n\"jwt_signing_method\": \"\",\n\"notifications\": {\n  \"shared_secret\": \"\",\n  \"oauth_on_keychange_url\": \"\"\n},\n\"enable_signature_checking\": false,\n\"hmac_allowed_clock_skew\": -1,\n\"definition\": {\n  \"location\": \"header\",\n  \"key\": \"x-api-version\"\n},\n\"version_data\": {\n  \"not_versioned\": true,\n  \"versions\": {\n    \"Default\": {\n      \"name\": \"Default\",\n      \"expires\": \"\",\n      \"paths\": {\n        \"ignored\": [\n\n        ],\n        \"white_list\": [\n\n        ],\n        \"black_list\": [\n\n        ]\n      },\n      \"use_extended_paths\": true,\n      \"extended_paths\": {\n        \"ignored\": [\n\n        ],\n        \"white_list\": [\n\n        ],\n        \"black_list\": [\n\n        ],\n        \"cache\": [\n\n        ],\n        \"transform\": [\n\n        ],\n        \"transform_response\": [\n\n        ],\n        \"transform_headers\": [\n\n        ],\n        \"transform_response_headers\": [\n\n        ],\n        \"hard_timeouts\": [\n\n        ],\n        \"circuit_breakers\": [\n\n        ],\n        \"url_rewrites\": [\n\n        ],\n        \"virtual\": [\n\n        ],\n        \"size_limits\": [\n\n        ]\n      },\n      \"global_headers\": {\n\n      },\n      \"global_headers_remove\": [\n\n      ],\n      \"global_size_limit\": 0\n    }\n  }\n},\n\"uptime_tests\": {\n  \"check_list\": [\n\n  ],\n  \"config\": {\n    \"expire_utime_after\": 0,\n    \"service_discovery\": {\n      \"use_discovery_service\": false,\n      \"query_endpoint\": \"\",\n      \"use_nested_query\": false,\n      \"parent_data_path\": \"\",\n      \"data_path\": \"\",\n      \"port_data_path\": \"\",\n      \"use_target_list\": false,\n      \"cache_timeout\": 60,\n      \"endpoint_returns_list\": false\n    },\n    \"recheck_wait\": 0\n  }\n},\n\"proxy\": {\n  \"listen_path\": \"\\/test-api\\/{id}\\/test\\/\",\n  \"target_url\": \"http:\\/\\/httpbin.org\\/\",\n  \"strip_listen_path\": true,\n  \"enable_load_balancing\": false,\n  \"target_list\": [\n\n  ],\n  \"check_host_against_uptime_tests\": false,\n  \"service_discovery\": {\n    \"use_discovery_service\": false,\n    \"query_endpoint\": \"\",\n    \"use_nested_query\": false,\n    \"parent_data_path\": \"\",\n    \"data_path\": \"hostname\",\n    \"port_data_path\": \"port\",\n    \"use_target_list\": false,\n    \"cache_timeout\": 60,\n    \"endpoint_returns_list\": false\n  }\n},\n\"custom_middleware\": {\n  \"pre\": [\n\n  ],\n  \"post\": [\n\n  ],\n  \"response\": [\n\n  ]\n},\n\"cache_options\": {\n  \"cache_timeout\": 60,\n  \"enable_cache\": true,\n  \"cache_all_safe_requests\": false,\n  \"enable_upstream_cache_control\": false\n},\n\"session_lifetime\": 0,\n\"active\": true,\n\"auth_provider\": {\n  \"name\": \"\",\n  \"storage_engine\": \"\",\n  \"meta\": {\n\n  }\n},\n\"session_provider\": {\n  \"name\": \"\",\n  \"storage_engine\": \"\",\n  \"meta\": null\n},\n\"event_handlers\": {\n  \"events\": {\n\n  }\n},\n\"enable_batch_request_support\": false,\n\"enable_ip_whitelisting\": false,\n\"allowed_ips\": [\n\n],\n\"dont_set_quota_on_create\": false,\n\"expire_analytics_after\": 0,\n\"response_processors\": [\n\n],\n\"CORS\": {\n  \"enable\": false,\n  \"allowed_origins\": [\n\n  ],\n  \"allowed_methods\": [\n\n  ],\n  \"allowed_headers\": [\n\n  ],\n  \"exposed_headers\": [\n\n  ],\n  \"allow_credentials\": false,\n  \"max_age\": 24,\n  \"options_passthrough\": false,\n  \"debug\": false\n},\n\"domain\": \"\",\n\"do_not_track\": false,\n\"tags\": [\n\n]\n\n},\n  \"hook_references\": [\n],\n  \"is_site\": false,\n  \"sort_by\": 0\n}\n```\n. ",
    "lflorit": "Hello, I would like very much to do what msheldonfl is describing here. Would you elaborate on the regex solution? I don't understand how you can map the 2 paths to 2 APIs\n/organisation/{id}/resource1/ -> API1\n/organisation/{id}/resource2/ -> API2\nThank you. Yes but this means we have to manage the API configs elsewhere, not a big task but it has to be done.... ",
    "ChGui": "Yes, this parameter is set to true. \nCan I change it through the dashboard? Or Should I use the REST api?\nFor information, if I set /ws-test in listen path, I have now //api/... in errors entry points. :)\n. I've tried several things, but except if I set listen_path to /, I always have curious pathes in case of error.\nWhat I want to do is to listen /ws-test/ and redirect to http://ip:port/ws-test\nWith strip_listen_path:\n- listen path set to /ws-test/ and target url to http://ip:port/ws-test\n- endpoints=/ws-test/api/device/TEST for success and /api/device/TEST for errors\nWithout strip_listen_path:\n- listen path set to /ws-test/ and target url to http://ip:port.\n- endpoints=/ws-test/api/device/TEST for success and //ws-test/api/device/TEST for errors\n. At this time, I was testing several API Management products. So no, I didn't succeed to do what I wanted and didn't play with Tyk since that time.\nSo you can close it if you think now it is working but I really think that there was a potential problem last year.. ",
    "iwat": "Sure.\n. Seems like I have to wait for the next major version while applying a workaround by separating API definition for each version.\n. If that's so, what is the proper way to add new API definition to a cluster of Tyk(s) programmatically?\n. Thank you very much, it seems to be what I was looking for.\nBy the way, could you please provide a URL on how can I have that \"Authorization\" header?\n. For an unknown reason, an access key of generated user from setup.sh (Docker) was not working. Resetting or creating a new user can solve the problem.\n. By the way, is it better if the gateway returns error on POST /tyk/apis/ when 'use_db_app_config' is true?\n. ",
    "angusonesky": "Hi @lonelycode ,  I will use the community in the future.  Seems the problem fixed.  \nSteps to fix\nvagrant@precise64:/opt/tyk-dashboard$ sudo service tyk-gateway start\ntyk-gateway start/running, process 36\nvagrant@precise64:/opt/tyk-dashboard$ sudo service tyk-gateway status\ntyk-gateway stop/waiting\nbut gateway seem can't be started.  this is part of log.\n```\nsudo tail -f tyk-gateway.log\nINFO[0000] Hostname set:\npanic: open /etc/tyk/templates/error.json: no such file or directory\n...\ngoroutine 8 [runnable]:\nmain.(HostCheckerManager).CheckActivePollerLoop(0x10dfd60)\n    /home/tyk/go/src/github.com/lonelycode/tyk/host_checker_manager.go:92\ncreated by main.(HostCheckerManager).Start\n    /home/tyk/go/src/github.com/lonelycode/tyk/host_checker_manager.go:81 +0x3f\n``\n1. update the/etc/hosts/with127.0.0.1       my-awesome-portal.comboth INSIDE and OUTSIDE the vagrant\n2.sudo /opt/tyk-dashboard/install/setup.shdomain=my-awesome-portal.com3. restart both gateway and dashboard service\n4.sudo /opt/tyk-dashboard/install/bootstrap.sh my-awesome-portal.com`\n5. goto http:// my-awesome-portal.com:3000 and login using bootstrap user+pass\n\n. ",
    "dlord": "I setup my Tyk instance to proxy requests to http://gurujsonrpc.appspot.com/guru, for testing purposes. I am sending a JSON-RPC request.\nData:\n{ \"method\" : \"guru.test\", \"params\" : [ \"Guru\" ], \"id\" : 123 }\nThis is the sample python code I use to generate the JWT:\n```\nimport hmac, hashlib, base64, urllib, urllib2\nsecret = \"mysharedsecret\"\nheader = base64.b64encode(\"\"\"\n{\n  \"kid\": \"56a8bd44da435300010000015f5ed77440d145466ddd221f56f51c6c\",\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n\"\"\").decode()\npayload = base64.b64encode(\"\"\"{ \"sub\": \"56a8bd44da435300010000015f5ed77440d145466ddd221f56f51c6c\", \"method\" : \"guru.test\", \"params\" : [ \"Guru\" ], \"id\" : 123 }\"\"\").decode()\nmessage = header + \".\" + payload\nsignature = base64.b64encode(hmac.new(secret, message, hashlib.sha256).digest()).decode()\nprint(header + \".\" + payload + \".\" + signature)\n```\nNotice that I have to add both kid and sub for this to work.\nOutput JWT:\nCnsKICAia2lkIjogIjU2YThiZDQ0ZGE0MzUzMDAwMTAwMDAwMTVmNWVkNzc0NDBkMTQ1NDY2ZGRkMjIxZjU2ZjUxYzZjIiwKICAiYWxnIjogIkhTMjU2IiwKICAidHlwIjogIkpXVCIKfQo=.eyAic3ViIjogIjU2YThiZDQ0ZGE0MzUzMDAwMTAwMDAwMTVmNWVkNzc0NDBkMTQ1NDY2ZGRkMjIxZjU2ZjUxYzZjIiwgIm1ldGhvZCIgOiAiZ3VydS50ZXN0IiwgInBhcmFtcyIgOiBbICJHdXJ1IiBdLCAiaWQiIDogMTIzIH0=.g1Eow1g5pu5VtU3Izbt2g0H6MZYTNftrdWBRcDgl7zc=\nTest request using curl:\ncurl -v -H \"Authorization: $(python jwttest.py)\" -H \"Content-Type: application/json-rpc\" -d '{ \"method\" : \"guru.test\", \"params\" : [ \"Guru\" ], \"id\" : 123 }' \"http://tyk.docker/guru-test-api/\"\n. Thank you for pointing that out. After looking at the encoding in detail, it turns out that you need to perform a URL-safe base64 encoding. You can do this in python using base64.urlsafe_b64encode() instead of the usual base64.b64encode()\nThanks to that, it validates the token properly.\nThe resulting python code is as follows:\n```\nimport hmac, hashlib, base64, urllib, urllib2\nsecret = \"mysharedsecret\"\nheader = base64.urlsafe_b64encode(\"\"\"\n{\n  \"kid\": \"56a8bd44da435300010000015f5ed77440d145466ddd221f56f51c6c\",\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n\"\"\").decode()\npayload = base64.urlsafe_b64encode(\"\"\"{ \"method\" : \"guru.test\", \"params\" : [ \"Guru\" ], \"id\" : 123 }\"\"\").decode()\nmessage = header + \".\" + payload\nsignature = base64.urlsafe_b64encode(hmac.new(secret, message, hashlib.sha256).digest()).decode()\nprint(header + \".\" + payload + \".\" + signature)\n```\n. ",
    "matiasinsaurralde": "Cool, thanks!\n. Hi, I'm trying to run Tyk 2 with docker/tyk_quickstart, I've replaced the license & I'm getting this error:\n```\ndocker-compose up -d\nUnsupported config option for services service: 'tyk_mongo'\n```\nAny clue? I thought Mongo wasn't used anymore\nThanks!\n. @lonelycode \ndocker-compose version: 1.3.1\nCPython version: 2.7.10\nOpenSSL version: OpenSSL 1.0.2d 9 Jul 2015\nI've updated Docker:\n```\nClient:\n Version:      1.11.1\n API version:  1.23\n Go version:   go1.5.4\n Git commit:   5604cbe\n Built:        Tue Apr 26 23:38:55 2016\n OS/Arch:      linux/amd64\nServer:\n Version:      1.11.1\n API version:  1.23\n Go version:   go1.5.4\n Git commit:   5604cbe\n Built:        Tue Apr 26 23:38:55 2016\n OS/Arch:      linux/amd64\n``\n. I think we can abandon this, theFlushInterval` thing was already solved.. Can you share your API configuration, is it file-based?\n. 1. When you perform a standard Tyk Community Edition setup, you only need Redis, check this guide.\n2. Have you read about Tyk-Pump? It could be useful for what you're trying to achieve, please read here. Also, there's a sample showing ElasticSearch pump setup.\nRegards!\n. Hi Ben, I think that if you update openid2go it will be fine:\ngo get github.com/TykTechnologies/openid2go\n. go get -u!\n. Hi Ryan, detailed request logging is not available in Tyk Cloud, you may find more about this here.\n. @ryanwalls Sure, thanks for the suggestion!\n. Hi, when does this error occur?\n. Hi, which Go version are you using, and what command are you using to build Tyk?\n. Are you using an updated version of the repo?\n. Hi, these files are ignored by the Go compiler, because they use a special build tag.\nThis error could happen if the build tags are not set, can you run head coprocess_python_api.c and share the output?\nI'm not able to reproduce this issue, tested it with Go 1.7 (darwin/amd64) and Go 1.6.2 (linux/amd64).\nHave you tried building without glide? Not sure if it affects the build process.\n. Ah, it's a symbolic link, so can you run head coprocess/python/tyk/gateway.c and share the output again?\nThe compiler should ignore it, when no build tag is set, e.g. go build.\n. I suggest checking this thread, or this one.\nPerhaps a GOROOT pointing to a wrong place?\n. Hi, have you updated all these packages using go get -u?\nWhen do you get these errors, is it when building develop?\n. Hi, as an administrator, you may change/reset passwords from the \"System Management\" / \"Users\" page!. Looks good, can you target develop?\nThank you!. Looks good! \ud83d\udc4d . I think that organizing everything in separate packages is very interesting, if we do it at some point we should also consider the idea of having a \"pluggable\" Tyk gateway.. @mvdan Yes, we should find a place for the coprocess files in the root as well.. It should be ok, the coprocess code essentially exposes a middleware, so if you're planning to have a directory for middlewares, it would make more sense to move it right there.\nCreateCoProcessMiddleware is called when the middleware chain is prepared, and after this the standard Tyk middleware calls are made (like ProcessRequest), as part of CoProcessMiddleware.. Also, separating this part of the code will make it easier to write the tests we're missing for Python, Lua builds.. \ud83d\udc46 \nI think the templates should be editable and accessible just like the main configuration files.. coprocess_python uses getBundlePaths, it's part of coprocess_bundle. I put it there because it might get called from other language integrations. To build it try: \ngo build -tags 'coprocess python'. Yes, the test fail for me / locally (just ran it), with the build tags of course!. getBundlePaths is used but not present in the tests, it's a small helper function that was added when we switched from the standard middleware path to bundle paths (in the path, rich plugins were loaded from the standard middleware path).\nI suggest adding a test for it, and not removing that part of the code, as it's clearly not unused code.. Sounds interesting, the CP builds are tested in a very basic way (and I think this is ok for now, we test the core functionality, and object passing, etc.). An extensive test will require having Python libs, Lua libs, etc. in the test environment, and then test the Python modules, a lot of stuff!. > Sounds interesting, the CP builds are tested in a very basic way (and I think this is ok for now, we test the core functionality, and object passing, etc.). An extensive test will require having Python libs, Lua libs, etc. in the test environment, and then test the Python modules, a lot of stuff!\n@mvdan See this, for example: https://github.com/TykTechnologies/tyk/blob/master/coprocess/python/dispatcher.py. @lonelycode Sure!. @lonelycode It's ok!. @lonelycode There was a plan to remove Redis, right? This is related!. I think it's a very specific option (and perhaps that's why it's disabled by default in mux).. @lonelycode Sure!. \ud83d\udc4d . Thanks \ud83c\udf7e . > If the commit message includes \"Fixes #n\", the issue will be automatically closed when the commit is merged. Unless I misunderstand and this doesn't actually fix it?\nUpdated. @mvdan I will check this with Go 1.8. I thought the previous commits were removed, so this is the actual change we need, I've been able to reproduce this error, and have just tried the steps described by @lonelycode, can you check?. @lonelycode I was able to reproduce the issue (APIs not being loaded after reload), and after rewriting this part of listen it works fine.\n@buger Will add the instructions now.. @mvdan Updated!. Test instructions\nBy default the control API will be exposed in the same IP/port the gateway is using. For example, to list the APIs:\ncurl -H 'x-tyk-authorization: 352d20ee67be67f6340b4c0605b044b7' http://localhost:8080/tyk/apis/\nTo configure a separate control API port you may set the control_api_port field in tyk.conf. If you set it to 7777, you may try this command:\ncurl -H 'x-tyk-authorization: 352d20ee67be67f6340b4c0605b044b7' http://localhost:7777/tyk/apis/\nIt shouldn't be available in the gateway port anymore!. @leon Updated!. I'm getting:\n[Feb  2 17:52:15]  INFO api: Group reload accepted. status=ok\n[Feb  2 17:52:15] ERROR Error trying to set value:\n[Feb  2 17:52:15] ERROR ERR unknown command 'publish'\n[Feb  2 17:52:15] ERROR Could not send notification\nDon't we have Redis on the testing environment?\nI know about miniredis but seems it doesn't support pubsub?. @mvdan Just saw this: https://github.com/alicebob/miniredis/issues/1. It was rebased but wasn't able to reproduce it last Friday, seems like some\nof the pubsub messages just get lost.\nOn Mon, Feb 13, 2017 at 12:38 PM Daniel Mart\u00ed notifications@github.com\nwrote:\n\nreping @matiasinsaurralde https://github.com/matiasinsaurralde please\nrebase and fix the timeout issue\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/TykTechnologies/tyk/pull/465#issuecomment-279350714,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AABOjqS5P83FL-W_FdFbVJ21VH4LpNnrks5rcDK5gaJpZM4L1YNy\n.\n. @mvdan Passed \ud83c\udf86 . @leon In the second rebase, it just started to work, so I think it's related to @mvdan changes, on loadApps, etc.. @buger That makes sense!. We could continue using Redis and prepare a fix to support pubsub on miniredis, even if it's limited.. This package might be useful and looks newer than dnscache, it modifies the DefaultResolver: https://github.com/benburkert/dns/blob/master/init/init.go. @mvdan I didn't write the JS plugin support \ud83d\ude22 \nI've seen some memory issues in the Otto repo, perhaps you've seen them already.. @mvdan JS support through Otto came first, I wrote the CP based on the JS middleware structure.\n\nYes, it's that issue! I haven't tried to reproduce it. I've found it on the Otto repo a long time ago but there was no Tyk related bug report back then.\n. @mvdan They reference different maps (middleware cache and module cache) that might be used in different ways in the future, even if they're currently loaded in the same way. The middleware cache keeps Lua code provided the users, while the module cache is code provided by Tyk that isn't expected to change over time.. This was an idea for a small enhancement, we could cover this on #1260 as this PR also modifies some of the rich plugins related Go code, what do you think?. Hi, can you provide more information about how you're testing it and how's your Tyk setup?. @buger Sure!. Makes sense!. @mvdan Haven't been able to reproduce this, @buger told me he has some tests that indicate issues with the router, they might be helpful for me.. @buger Right. Hi @mattfarina, the Python version is specified in the docs.\nAlso there's an alternative init script for the Python build, so you should use tyk-gateway-python instead of tyk-gateway (like service tyk-gateway-python start).\nThe binary is linked to Python 3.4, we may have to switch to the PY_LIMITED to support higher versions in case issues come up.\nBest.. Ubuntu is recommended as we did a lot of tests with it.\nYou may build the Protocol Buffers library, it will enhance the performance. The Python module uses a pure-Python version by default.. @mvdan At the moment you can write a plugin using any language that supports Protocol Buffers / gRPC, including Go, pretty similar to this.. @mvdan is right, the above sample uses the current plugin architecture, so it's a gRPC server written in Go that implements the dispatcher service.\nI did an experiment with actual Go plugins months ago, but we were discussing the idea of using them as part of the middleware chain directly (not using/loading them using our current architecture: bundles, etc.).. You can remove these lines, they were used by the msgpack binding generator, but we're using Protocol Buffers so it's ok.. @chenjh880730 Not possible at the moment. We do have long term plans for alternative storage support.. @mvdan @buger I tried to reproduce it on Friday and no luck!. I'm running the binaries manually!. I will be checking this today!. @buger Looks simple, will have it on my list. Updated!. @ilijabojanovic \nThe configuration wasn't loaded/ready yet when setting TykDefaultTransport, moving this to GetDefaultTransport fixed it.\nSetting proxy_ssl_insecure_skip_verify to true will ignore invalid certificates for the TLS connection to upstream APIs, this is a global setting inside tyk.conf.\nThe other option that's covered by this PR is ssl_insecure_skip_verify, which is inside http_server_options, this involves the HTTP listener: loading an invalid certificate to Tyk itself!. @ilijabojanovic Nice, that website is very useful. What about strings.TrimPrefix(path, listenPath)?. Makes sense, I think there's a plan to move the middleware to separate directories as well, right?. It's the simplest solution, we need to ensure that this gets called from\nthe main thread, so the GIL locks correctly. The GIL itself is a big\nlimitation for the Python support, but it's something we have to deal with.\nOn Tue, May 23, 2017 at 5:10 AM Daniel Mart\u00ed notifications@github.com\nwrote:\n\nIs this the right fix? Looks like more of a workaround to me.\nLGTM if there is no better way to fix it, though.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/TykTechnologies/tyk/pull/758#issuecomment-303338699,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AABOjsz-UJbz5GhcDTJ7GbQkPcAk-Xceks5r8qKigaJpZM4Ni5KU\n.\n. @mvdan Updated!. See #761, could be related to recent changes in the API loader. I've found that forcing it to run in the main thread fixes the issue. Also if multiple bundles are loaded concurrently, we can't really call HandleMiddlewareCache in the same way, so we need to lock the GIL.\nAlso this.. @mvdan Modified. @mvdan That was an old comment!. @mvdan Just updated the tests, let's wait for #764 to replace the integers with constants.\nI'm also extending the rest of the CP tests, trying to enhance them, will be a separate PR.. I'm not very familiar with the virtual endpoint feature. Yes, basically it's possible to take control of the request flow and return a custom body.\nThere is an existing feature to add headers from the CP middleware, but it's for request headers (before they hit the upstream API). The funcionality covered by this PR is specific to the response object, and the headers that are specified here are received by the client.\nIt affects all the plugins and will work as long as you're using the latest definitions and/or bindings provided by us.. These names look fine to me!. It would be useful to have a gRPC-Go plugin tutorial for now, based on this request.. There's a DispatchEvent call in the RPC service definition, and a similar method for native middleware, both expect a JSON argument, let me see if I can come up with a sample.. @leon that solution looks good!. We'll probably tackle this in a different way (the CP tests) after #911 and some test modifications. @mvdan let's keep it open for now, just wanted to reference it. That's right!. About this PR: I suggest merging #1260 first, those tweaks are more important. Then we check this one.. Hi @coatezy, I've been testing this and looks good, the approach is similar to the JSVM implementation. Mutating a string makes sense in this case, no dicts needed!. @buger Sure!. Hi @bitsofinfo, the JSVM middleware is completely separate from the rich plugins architecture (which is used by the ID extractor), we have a plan to unify it so that we can avoid duplicate code.\nAs we've noted in the forum, it's possible to implement similar logic using ReturnOverrides and other hook types.. Hi @bitsofinfo, we'll discuss this with the team.\nThanks for the suggestion.. @mvdan yes, I wrote the wrong ID, it's actually 969.. I've been heavily testing this and came up with some enhancements like using the thread state API. This approach gives me zero crashes on Tyk initializations and reloads, finally!\nTo avoid refactoring all the CP logic I added some signaling inside the initialization of the Python driver (as suggested by @mvdan), so that we can return CoProcessInit after the cgo calls are done.\nWould be great if somebody could test this up, the original issue occurs intermittently when you load more than one Python plugin bundle.. Updated!. @mvdan I think that to test this you need the full scenario, multiple bundles, etc. So I suggest using this in its current status and add tests on my refactoring branch (which I would update with this patch as well).. I've been able to reproduce this, the main issue is that the LoadJSPathsexpects the path to be set.\nWhen a JS manifest is prepared and a bundle is generated, the manifest looks like this:\njson\n{\n  \"file_list\": [\n    \"myMiddleware1.js\",\n    \"myMiddleware2.js\"\n  ],\n  \"custom_middleware\": {\n    \"pre\": [\n      {\n        \"name\": \"myMiddleware1\"\n      },\n      {\n        \"name\": \"myMiddleware2\"\n      }\n    ],\n    \"driver\": \"otto\",\n  },\n  \"checksum\": \"\",\n  \"signature\": \"\"\n}\nWhen LoadJSPaths iterates it doesn't get the paths to the actual files and it breaks. I will send a patch soon.\nAs a workaround for users that are getting this error, they should append the path in their manifest files:\njson\n{\n  \"file_list\": [\n    \"myMiddleware1.js\",\n    \"myMiddleware2.js\"\n  ],\n  \"custom_middleware\": {\n    \"pre\": [\n      {\n        \"name\": \"myMiddleware1\",\n        \"path\": \"myMiddleware1.js\"\n      },\n      {\n        \"name\": \"myMiddleware2\",\n        \"path\": \"myMiddleware2.js\"\n      }\n    ],\n    \"driver\": \"otto\",\n  },\n  \"checksum\": \"\",\n  \"signature\": \"\"\n}\nThis looks like a repetitive thing, however it's important to note that the plugin loader doesn't access file_list, and file_list is just used by the CLI tool, this is why the path is needed inside the custom_middleware block. I don't think the user should manually write the manifest in this way but we should ensure the path gets injected on runtime.. Hi, do you already have a middleware/bundles directory?. We should update the protocol definition and update the bindings!. Looks like it was fixed for JSVM too, by Martin. I think we don't have any samples for this \ud83d\ude2e . Hi, are you using the packaged version of Tyk?\nIf that's the case run:\nmkdir /opt/tyk-gateway/middleware/bundles. Thanks, we've created an issue here #1068.. Hi, I will add tests for this. SkipClean is ignored even before a hot reload, so I'm not sure if the code suggested by @leon is enough.\nTo debug this I modified mux to print every time its ServeHTTP call was called, when sending a URL with double-slashes, mux wasn't being called and the redirect was automatically triggered (ignoring the configuration flag), this redirect was triggered by the ServeMux.. I've been testing this again and I can confirm that it doesn't break on reloads, also:\n- This patch only changes the behavior when using OverrideDefaults.\n\nThe scenario is:\n- User enables OverrideDefaults\n- User sets skip_url_cleaning to true.\nThe URL cleanup is still done all the time, after the gateway starts, the original issue isn't related to reloads at all.\nRemoving DefaultServeMux doesn't fix the issue, but removing the ServeMux code completely works fine, even after reloads.\nI suggest trying this patch with the standard scenario I've mentioned here and in the issue, then running something like:\n$ curl http://localhost:8080/test-api/http://abc.com\nIt's hard to add tests because we only call initialiseSystem for tests, couldn't come up with a good solution for abstracting this part (we don't have any tests for the OverrideDefaults flags in general).. As I mentioned before, to debug this I've added a call to the mux ServeHTTP method, we expect this to be called in all the scenarios because it would react to the SkipClean flag, however its ServeHTTP method isn't called when sending a \"dirty\" URL, the ServeMux triggers the redirect before it.. Hi, can you try using this flag?\nCOMPOSE_CONVERT_WINDOWS_PATHS=1 docker-compose up -d\nBest.. Hi, thanks, sounds like a very useful enhancement!. The current approach looks good. gRPC, Python and Lua plugins use the handler in coprocess.go, except JSVM.. Hi @javi830810, thanks for this report. We'll issue a fix for this, the impact isn't severe as a dispatcher initialization error means that isn't not possible to use the Python build at all and the user will need to fix the issue and start the process again.. We don't have any report, can you share more details on memory improvements / issues?\nBest. Thanks for the suggestions @javi830810, we'll analyze them in the following days.. Just a quick note: if #1260 gets merged, this won't be necessary at all.. To test this:\n- Configure Tyk to enable Python support, add your server URL & and set the Python path:\njson\n{\n  \"enable_bundle_downloader\": true,\n  \"bundle_base_url\": \"http://localhost/\",\n  \"coprocess_options\": {\n    \"enable_coprocess\": true,\n    \"python_path_prefix\": \"/opt/tyk-gateway\"\n  }\n}\n- Create a protected API with these settings:\njson\n{\n  \"use_keyless\": false,\n  \"enable_coprocess_auth\": true,\n  \"custom_middleware_bundle\": \"bundle-v1.zip\"\n}\n- Start Tyk and hit your test API:\n$ curl localhost:8080/test-api/\nYou should get 403 and a log line from Python: \"Bundle v1: auth middleware is called\".\n\nNow update your API definition to use the \"bundle-v2.zip\":\njson\n{\n  \"use_keyless\": true,\n  \"enable_coprocess_auth\": true,\n  \"custom_middleware_bundle\": \"bundle-v2.zip\"\n}\nTrigger a hot reload:\n$ curl http://localhost:8080/tyk/reload/ -H 'x-tyk-authorization: 352d20ee67be67f6340b4c0605b044b7'\nYou should see \"Bundle v2: loaded\" in the Tyk log.\nNow send a request to the API again, you should get 403 and also \"Bundle v2: auth middleware is called\" in the log.\n\nI've attached two ready-to-use bundles, you can serve them using your own web server:\nbundle-v2.zip\nbundle-v1.zip\n. @buger I think it's ready to be tested, I can confirm that also event handlers are working with this, next week I will look at #1269. Also #1280 might be included with this change, as an enhancement.\nI don't think we will rebase this as we want to overwrite the two conflicting Python files (part of the refactor).. @ilijabojanovic I've been trying this out under several platforms (and different Python versions), seems to be an incompatibility issue between 3.4 and 3.5, when using importlib.\nCan you provide more information about your Python environment? I'm working on a workaround at the moment, have found related issues like this one.. > @ilijabojanovic I've been trying this out under several platforms (and different Python versions), seems to be an incompatibility issue between 3.4 and 3.5, when using importlib.\n@buger need to clarify this info \u261d\ufe0f . @ilijabojanovic I've pushed a fix that avoids calling module_from_spec (and uses imp instead), have tried it under Python 3.4.3 / Linux with different scenarios (bundles with colliding hook names, bundles that load additional modules, etc.). Using newer versions seems to work fine as well (tried Python 3.5 / OS X).. Interesting, it will be useful for #1260 as I plan to adapt those changes to support event handlers.. Yes, it\u2019s on my list today\nEl El jue, 23 de nov. de 2017 a las 11:56, Leonid Bugaev \nnotifications@github.com escribi\u00f3:\n\n@matiasinsaurralde https://github.com/matiasinsaurralde pls go back to\nthis issue\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/TykTechnologies/tyk/issues/1269#issuecomment-346638917,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AABOjnlPdAzIW4o8NAi6-nOZUnIQwHUOks5s5YeDgaJpZM4QVGRa\n.\n. I've been investigating this issue again. I see that we have a config.Global.EventHandlers field, this is loaded from tyk.conf and has the same type as the event handlers block we use for API definitions (apidef.EventHandlerMetaConfig):\ngo\n    EventHandlers                     apidef.EventHandlerMetaConfig         `json:\"event_handlers\"`\n    EventTriggers                     map[apidef.TykEvent][]TykEventHandler `json:\"event_trigers_defunct\"`\n    PIDFileLocation                   string                                `json:\"pid_file_location\"`\nHowever I don't see any references to config.Global.EventHandlers, this means we never load these \"global\" events.\nIn the other side, event handlers seem to be working fine when attached to API definitions.\nI don't see any reference to \"global\" event handlers in our  docs, was this feature available in the past? I'm investigating previous versions at the moment to see if we broke it somehow, perhaps after configuration tweaks?. I've realized that the original issue was about JSVM event handlers, I can confirm that they stopped working after 2.3.\nTo reproduce:\n- Modify tyk.conf with \"enable_jsvm\": true\n- Setup a protected API\n- Add event handlers to it:\njson\n\"event_handlers\": {\n    \"events\": {\n        \"AuthFailure\": [\n                {\n                    \"handler_name\":\"eh_dynamic_handler\",\n                    \"handler_meta\": {\n                        \"name\": \"sampleHandler\",\n                        \"path\": \"event_handlers/sample_handler.js\"\n                    }\n                }\n            ]\n    }\n}\n- Create event_handlers/sample_handler.js with the following contents:\njs\nvar sampleHandler = new TykJS.TykEventHandlers.NewEventHandler({});\nlog(\"sampleHandler is loaded\")\nsampleHandler.NewHandler(function(event, context) {\n    log(\"sampleHandler is called\")\n    return\n});\n- Start the gateway, you will see the event handler code is loaded correctly:\nINFO jsvm: Loading JS File: event_handlers/sample/sample_event_handler.js\nINFO jsvm-logmsg: sampleHandler is loaded type=log-msg\n- Send a request to the API triggering a failed authentication:\ncurl http://localhost:8080/quickstart/headers -H 'Authorization: badtoken'\n- The authentication will trigger an AuthFailure event but the JS handler won't be called\n\nI can confirm that JSVMEventHandler.HandleEvent is called with the right parameters (the event message):\nJSVMEventHandler.HandleEvent:  {AuthFailure {{Auth Failure R0VUIC9xdWlja3N0YXJ0Mi9oZWFkZXJzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6ODA4MA0KVXNlci1BZ2VudDogY3VybC83LjU2LjENCkFjY2VwdDogKi8qDQpBdXRob3JpemF0aW9uOiAxMjM0NQ0KDQo=} /quickstart/headers ::1 12345} 2018-05-10 16:24:18.258555696 -0400 -04}\nThen sampleHandler.DoProcessEvent is called and the JSVM reports that it's not defined.. #1693 should fix this.. @ilijabojanovic I've been trying to reproduce this with my test bundle, can you share yours?. Bump @ilijabojanovic, or is it the same as #1260?. @ilijabojanovic You can test this again, following the steps we did last time with #1260.. We discussed this last year, would you be able to help on creating a static build for this?\nI agree with all the points, I think that we should also look forward to use the minimal API, our glue code is very small so switching to the minimal API shouldn't be an issue, I can take that myself.\nTrying the minimal API solution seems to be easier and then we can decide about this.. Just finished testing our current code with the minimal API under Linux, it doesn't break so we won't require any major code changes in the glue code.\nAbout Cython: we used it because it was an easier way of adding cffi calls.. We could drop the Cython generated code, it's mainly used to attach it to some of the gateway functions like TykGetKey, TykSetKey, etc., without writing this glue code in a more complex way.. That's right, it would be great if you can see how to do the static build, I can collaborate on tweaking the Tyk API calls.\nBefore Cython I've tried FFI and it worked fine but it was easy to have something like this: https://github.com/TykTechnologies/tyk/blob/master/coprocess/python/tyk/gateway.pyx. @altaurog We're considering this for an upcoming release.\nYou may find the updated Python instructions here.. An update on this: I'm developing a package that tackles the issue described in this ticket by loading Python dynamically using libdl. Currently the code is available here, I've started to work on this a few weeks ago and I'm tweaking the binding generation mechanisms so that we avoid writing code for every CPython API call we require (wrapping a single call requires writing a few lines of C and Go code, the gateway uses around 20 different calls).\nThe impact on the gateway will be as follows:\n- Most of the cgo code will be removed from the gateway repository.\n- The binary will not be linked to libpython3.4 anymore.\n- We'll use the python-config tool to discover the Python library that's available in a given system, during runtime (have found that this is pretty standard, in any case I'm looking forward to extend the package tests to more distros to see how it behaves, at the moment I've tested different Ubuntu/Debian versions with different Python versions under each one, got positive results).\nI'm pretty close to testing the gateway integration.. The issue happened because the backport didn't use the full module path (which the previous fix expects to use). I've introduced module_path which will make it work again, however colliding function names and related issues aren't handled by this issue and is the reason why I started to work on #1260.\nWe should look forward to have #1260 fully compatible with all the bundle scenarios and introduce it whenever it's possible.. Thanks, looks good, I will give it a try tomorrow. @buger That's right, using the limited API is a better choice for compatibility with other versions.. There's an ongoing PR that adds support for newer versions: https://github.com/xeipuuv/gojsonschema/pull/180. > Regarding IdExtractorDeadline, which is required to make id extractor work, there is no placed in the code which set this value anywhere. So I assume this value should come from the plugin, but it does not mention anywhere. In fact, this value is just an ID extractor session timeout.\nDo you think we should introduce a default value here (could be part of a different ticket)?. I've updated my Protocol Buffers setup to make sure that we're using the latest stable version, so the bindings have been generated using grpcio-1.8.3 (installed via pip) and protobuf-3.5.1.\nprotoc returns the following:\n$ protoc --version\nlibprotoc 3.5.1\nI have also updated the instructions and the script that we use to generate the bindings to explicitly use Python 3 (previously it could mess things up if you ran the Python generator using \"python\" instead of \"python3\").\nI will push the second PR that extends our definitions in a few minutes but would like to get this merged first so that we can rebase the other PR.. Thanks. Updated!. @excieve right, should we change it? Do we support IPv6? \ud83d\ude04 . Can you confirm that this occur when running the automated tests? Which parameters are you using?. Thanks @zeldal, @bilalyasar, @maaydin, this is very useful for us.. @buger Changed to Fatal. I've tried this yesterday and can confirm what's described in the analytics issue.. Sample output when implementing import as a subcommand, see #1738:\n```\n% ./tyk import blueprint.json --blueprint --create-api --org-id=123 --upstream-target=\"http://widgets.com/api/\"\n% ./tyk import -h\nusage: tyk import [] []\nImports a BluePrint/Swagger file\nFlags:\n  -h, --help                 Show context-sensitive help (also try --help-long and --help-man).\n      --version              Show application version.\n      --swagger              Use Swagger mode\n      --blueprint            Use BluePrint mode\n      --create-api           Creates a new API definition from the blueprint\n      --org-id=ORG-ID        assign the API Definition to this org_id (required with create-api\n      --upstream-target=URL  set the upstream target for the definition\n      --as-mock              creates the API as a mock based on example fields\n      --for-api=PATH         adds blueprint to existing API Definition as version\n      --as-version=VERSION   the version number to use when inserting\nArgs:\n  []  e.g. blueprint.json, swagger.json, etc.\n`start` command output, this is set as the default command so that you can pass the flags directly (like in the current version), you can use `tyk start --port=8888` and also `tyk --port=8888`, etc.\n% ./tyk start -h\nusage: tyk start []\nStarts the Tyk Gateway\nFlags:\n  -h, --help                Show context-sensitive help (also try --help-long and --help-man).\n      --version             Show application version.\n      --conf=FILE           load a named configuration file\n      --port=PORT           listen on PORT (overrides config file)\n      --memprofile          generate a memory profile\n      --cpuprofile          generate a cpu profile\n      --blockprofile        generate a block profile\n      --mutexprofile        generate a mutex profile\n      --httpprofile         expose runtime profiling data via HTTP\n      --debug               enable debug mode\n      --log-intrumentation  output intrumentation output to stdout\n`lint` command output:\n% ./tyk lint -h\nusage: tyk lint\nRuns a linter on Tyk configuration file\nFlags:\n  -h, --help     Show context-sensitive help (also try --help-long and --help-man).\n      --version  Show application version.\nAnd when running `tyk -h`, we could adjust this to display standard gateway flags, the commands view looks good:\n% ./tyk -h\nusage: tyk []  [ ...]\nTyk Gateway\nFlags:\n  -h, --help     Show context-sensitive help (also try --help-long and --help-man).\n      --version  Show application version.\nCommands:\n  help [...]\n    Show help.\nstart* []\n    Starts the Tyk Gateway\nlint\n    Runs a linter on Tyk configuration file\nimport []\n    Imports a BluePrint/Swagger file\n. Should we close this?. LGTM. To reproduce this I've used all the settings available in `tyk-mf.zip` (#1472)\n1) Copy `policies` and `apps` contained in the ZIP file to the gateway directories.\n2) Make sure `local_session_cache.disable_cached_session_state` in `tyk.conf` is set to false.\n3) Prepare a key that involves two test policies (save this as `key.json`):json\n{\n  \"last_check\": 0,\n  \"allowance\": 10000,\n  \"rate\": 10000,\n  \"per\": 60,\n  \"expires\": 0,\n  \"quota_max\": -1,\n  \"quota_renews\": 1592628238,\n  \"quota_remaining\": 0,\n  \"quota_renewal_rate\": 60,\n  \"access_rights\": {\n    \"lookup-service\": {\n      \"api_name\": \"Lookup Service\",\n      \"api_id\": \"lookup-service\",\n      \"versions\": [\n        \"Default\"\n      ],\n      \"allowed_urls\": []\n    }\n  },\n  \"org_id\": \"593e0f794ea461315091f482\",\n  \"oauth_client_id\": \"\",\n  \"oauth_keys\": null,\n  \"basic_auth_data\": {\n    \"password\": \"\",\n    \"hash_type\": \"\"\n  },\n  \"jwt_data\": {\n    \"secret\": \"\"\n  },\n  \"hmac_enabled\": false,\n  \"hmac_string\": \"\",\n  \"is_inactive\": false,\n  \"apply_policies\": [\"member\", \"member-dev\"],\n  \"data_expires\": 0,\n  \"monitor\": {\n    \"trigger_limits\": null\n  },\n  \"meta_data\": {},\n  \"tags\": [\n    \"tag\"\n  ],\n  \"alias\": \"test@test.com\",\n  \"last_updated\": \"1492628178\",\n  \"id_extractor_deadline\": 0,\n  \"session_lifetime\": 0\n}\n4) Create the key and copy the generated token:\n$ curl -H 'x-tyk-authorization: 352d20ee67be67f6340b4c0605b044b7' -X POST \"http://localhost:8080/tyk/keys/create\" --data @key.json\n5) Try a single request using the generated token to make sure everything is ok:\n$ curl http://localhost:8080/lookups/ -H 'Authorization: 593e0f794ea461315091f4826ad35bfc1d4041e0ab7a98bd21f8821f'\n6) Send a few concurrent requests:\n$ hey -n 30 -c 10 -H \"Authorization: 593e0f794ea461315091f4826ad35bfc1d4041e0ab7a98bd21f8821f\" http://localhost:8080/lookups/\nI've used different parameters like:\n$ hey -n 100 -c 50 -H \"Authorization: 593e0f794ea461315091f4826ad35bfc1d4041e0ab7a98bd21f8821f\" http://localhost:8080/lookups/\nIf you use the unpatched version, expect the gateway to crash as soon as you start sending requests.\n[tyk-mf.zip](https://github.com/TykTechnologies/tyk/files/1765954/tyk-mf.zip)\n. Hi, can you share your `tyk_analytics.conf`?. Any steps to reproduce this?. Thanks for the suggestion @bitsofinfo . Follow up here: https://github.com/TykTechnologies/tyk-docs/pull/348. Hi @robertogyn19, I will investigate this.\nObrigado!. Currently investigating this, seems related to #1250, have been able to reproduce it.. LGTM, haven't checked the issue with the tests yet. Tests look ok now however there are some (new) code conflicts. Fixed. Sounds like an interesting feature, would it be helpful to use the `Proxy` field, from `http.Transport`? See [here](https://golang.org/pkg/net/http/#Transport).. This is a very small change, to test this, set this into your `tyk.conf` and use the standard Tyk build (the one we get from `go build -tags 'coprocess grpc'`:json\n     \"coprocess_options\": {\n        \"enable_coprocess\": true,\n        \"coprocess_grpc_server\": \"\"\n    },\n```\nWithout the patch you should see the recurring dialer errors.. Just fixed conflicts on this PR. > using smaller keys results in faster reads makes sense. but in example provided above, we are not using smaller keys, but smaller values at the given key.\nRight, sorry for the confusion, the idea is to use PB for the reasons you've mentioned.. For reference, this branch modifies the session manager to use PB, I've tested it under a few scenarios and seems to work fine: https://github.com/matiasinsaurralde/tyk/tree/protobuf-sessions. @dencoded good suggestion. @dencoded I have refactored it a bit in order to re-use the decoded structure.\nWill create another PR applying a similar change to other extractors, this is just for regex.. @buger would like to merge #1695 first. Rebased this with #1695 changes, benchcmp output looks like this, running with go test -benchmem -run=^$ . -bench ^BenchmarkRegexExtractor$ -benchtime=10s:\n```\n% benchcmp old new\nbenchmark                                  old ns/op     new ns/op     delta\nBenchmarkRegexExtractor/HeaderSource-8     185811        141028        -24.10%\nBenchmarkRegexExtractor/BodySource-8       180877        2369          -98.69%\nBenchmarkRegexExtractor/FormSource-8       191935        150725        -21.47%\nbenchmark                                  old allocs     new allocs     delta\nBenchmarkRegexExtractor/HeaderSource-8     117            51             -56.41%\nBenchmarkRegexExtractor/BodySource-8       124            18             -85.48%\nBenchmarkRegexExtractor/FormSource-8       145            79             -45.52%\nbenchmark                                  old bytes     new bytes     delta\nBenchmarkRegexExtractor/HeaderSource-8     48704         5206          -89.31%\nBenchmarkRegexExtractor/BodySource-8       52981         1569          -97.04%\nBenchmarkRegexExtractor/FormSource-8       55096         11597         -78.95%\n. @dencoded Broke the tests during the rebase, these are the actual results (not bad):\n% benchcmp old new\nbenchmark                                  old ns/op     new ns/op     delta\nBenchmarkRegexExtractor/HeaderSource-8     177926        144125        -19.00%\nBenchmarkRegexExtractor/BodySource-8       178634        143564        -19.63%\nBenchmarkRegexExtractor/FormSource-8       187320        150011        -19.92%\nbenchmark                                  old allocs     new allocs     delta\nBenchmarkRegexExtractor/HeaderSource-8     122            57             -53.28%\nBenchmarkRegexExtractor/BodySource-8       129            66             -48.84%\nBenchmarkRegexExtractor/FormSource-8       150            85             -43.33%\nbenchmark                                  old bytes     new bytes     delta\nBenchmarkRegexExtractor/HeaderSource-8     48942         5446          -88.87%\nBenchmarkRegexExtractor/BodySource-8       53216         9786          -81.61%\nBenchmarkRegexExtractor/FormSource-8       55331         11836         -78.61%\n. Updated `benchcmp` output:\n% benchcmp old new\nbenchmark                                  old ns/op     new ns/op     delta\nBenchmarkValueExtractor/HeaderSource-8     166926        138358        -17.11%\nBenchmarkValueExtractor/FormSource-8       158143        147839        -6.52%\nBenchmarkXPathExtractor/HeaderSource-8     170273        155811        -8.49%\nBenchmarkXPathExtractor/BodySource-8       160786        163189        +1.49%\nBenchmarkXPathExtractor/FormSource-8       172766        184679        +6.90%\nbenchmark                                  old allocs     new allocs     delta\nBenchmarkValueExtractor/HeaderSource-8     72             55             -23.61%\nBenchmarkValueExtractor/FormSource-8       100            83             -17.00%\nBenchmarkXPathExtractor/HeaderSource-8     107            113            +5.61%\nBenchmarkXPathExtractor/BodySource-8       114            120            +5.26%\nBenchmarkXPathExtractor/FormSource-8       140            146            +4.29%\nbenchmark                                  old bytes     new bytes     delta\nBenchmarkValueExtractor/HeaderSource-8     5886          5250          -10.81%\nBenchmarkValueExtractor/FormSource-8       12272         11639         -5.16%\nBenchmarkXPathExtractor/HeaderSource-8     10125         10028         -0.96%\nBenchmarkXPathExtractor/BodySource-8       14435         14339         -0.67%\nBenchmarkXPathExtractor/FormSource-8       17031         16936         -0.56%\n. I've found a related issue here, at some point we refactored the API definition code in order to avoid pointers when loading `URLSpec` data structures, see [here](https://github.com/TykTechnologies/tyk/commit/c2f80ff6bac2f2c7c92c559be3ae02a452a5c882#diff-e174c6f6100dfee8c74de8323d464e36). This assumed all `URLSpec` access was read only, which isn't the case for the optimization that's described here:\nWhile trying to optimize the URL rewriter middleware I noticed it wasn't possible to pre-compile the regular expression and store it as part of `URLRewriteMeta`, in [`mw_url_rewriter.go`](https://github.com/TykTechnologies/tyk/blob/master/mw_url_rewrite.go) we use the following condition:go\n    if meta.MatchRegexp == nil {\n        var err error\n        meta.MatchRegexp, err = regexp.Compile(meta.MatchPattern)\n        if err != nil {\n            return path, fmt.Errorf(\"URLRewrite regexp error %s\", meta.MatchPattern)\n        }\n    }\nThis is called every single time and the compiled regular expression isn't persisted (as we expect). To fix this it would make sense to use `[]*URLSpec` again and refactor the functions that use it, mainly `APISpec.Version`, `CheckSpecMatchesStatus`, `MakeSpec`. I've did this and the code seems to work as expected, looking for suggestions anyway.. I've modified the rewriter benchmark a bit, otherwise it wasn't possible to see the impact of #1672, basically it will iterate through `testRewriterData` and send the same request twice (caching would take place in the second request):\n% benchcmp master_bench new_bench\nbenchmark               old ns/op     new ns/op     delta\nBenchmarkRewriter-8     537011        544739        +1.44%\n. In addition to #1664 I've been tracing the versioning-related calls, if you have an API with a few extended paths, these are the main functions that get called over and over, perhaps it's possible to optimize something here (fewer calls? we already keep the versioning data in the request context):\n- RequestValid is called from github.com/TykTechnologies/tyk.(VersionCheck).ProcessRequest\n- Version is called from github.com/TykTechnologies/tyk.(APISpec).RequestValid\n- URLAllowedAndIgnored is called from github.com/TykTechnologies/tyk.(APISpec).RequestValid\n- Version is called from github.com/TykTechnologies/tyk.(TransformHeaders).ProcessRequest\n- CheckSpecMatchesStatus is called from github.com/TykTechnologies/tyk.(TransformHeaders).ProcessRequest\n- Version is called from github.com/TykTechnologies/tyk.(URLRewriteMiddleware).ProcessRequest\n- CheckSpecMatchesStatus is called from github.com/TykTechnologies/tyk.(URLRewriteMiddleware).ProcessRequest\n- Version is called from github.com/TykTechnologies/tyk.(ReverseProxy).CheckHeaderInRemoveList\n- CheckSpecMatchesStatus is called from github.com/TykTechnologies/tyk.(*ReverseProxy).CheckHeaderInRemoveList\nAlso `reverse_proxy.go` calls `Version` three different times as part of `WrappedServeHTTP`, it should be possible to refactor the helper functions (`CheckHardTimeoutEnforced`, etc.) in order to avoid these extra calls.\nI've shared #1677 to include `DoMockReply` in our tests/benchmarks.. Any feedback on this is appreciated, not sure it will affect other existing functionality, tests look ok. `benchcmp` output (will refactor the benchmark on a different PR)\n% benchcmp old new\nbenchmark               old ns/op     new ns/op     delta\nBenchmarkRewriter-8     197470        173320        -12.23%\nbenchmark               old allocs     new allocs     delta\nBenchmarkRewriter-8     501            501            +0.00%\nbenchmark               old bytes     new bytes     delta\nBenchmarkRewriter-8     378877        378876        -0.00%\n. Found this: https://grpc.io/2017/08/22/grpc-go-perf-improvements.html. Sure, did some quick tests with `hey` while testing #1623 using the latest gRPC package and they looked positive. Will work on it.. Yes, `master` is stable, we could also use the last release tag. I'm looking at this using `sys.exc_info()` on the dispatcher. The `get` tweak is ok, I'm investigating what happens with the `hook_table` during the tests, this is the flow:\ndispatch_hook \nfind_hook  api1 MyAuthHook\nhook_table  {'api1': {'MyAuthHook': }}\ndispatch_hook \nfind_hook  api1 MyAuthHook\nhook_table  {'api1': {'MyAuthHook': }}\ndispatch_hook \nfind_hook  api2 MyAuthHook\nhook_table  {'api1': {'MyAuthHook': }, 'api2': {'MyAuthHook': }}\ndispatch_hook \nfind_hook  api3 MyAuthHook\nhook_table  {'api1': {'MyAuthHook': }, 'api3': {'MyAuthHook': }, 'api2': {'MyAuthHook': }}\nMyAuthHook3 is called\ndispatch_hook \nfind_hook  api3 MyAuthHook\nhook_table  {'api1': {'MyAuthHook': }, 'api3': {'MyAuthHook': }, 'api2': {'MyAuthHook': }}\nMyAuthHook3 is called\ndispatch_hook \nfind_hook  test MyAuthHook\nhook_table  {}\n. @dencoded Thanks. I've added some performance improvements in the last commit:\n% benchcmp old new\nbenchmark                 old ns/op     new ns/op     delta\nBenchmarkVersioning-8     1567342       1480519       -5.54%\nbenchmark                 old allocs     new allocs     delta\nBenchmarkVersioning-8     1570           1570           +0.00%\nbenchmark                 old bytes     new bytes     delta\nBenchmarkVersioning-8     210759        210794        +0.02%\n. I've simplified this and added the patch from #1693, have also found the reason why global event handlers aren't working anymore (#1678).. @dencoded Thanks, have found the issue after adding the patch from #1693, will work on a fix. Have fixed the issue, tweaked the log handler in order to accept an alternative `logrus.Logger`, by default it will take the standard logger, when running tests we use a custom one to capture the output (something we do in the JSVM tests). Basically removed dup code that caused a race when accessing the buffer from this custom logger.\nNote that we use the event system in `event_handler_webhooks_test.go`, in this scenario it's ok to keep using the standard logger (so we can't force the custom logger for the whole event system code), the proposed solution also takes care of this.. Also, tried to use these [test hooks](https://github.com/sirupsen/logrus#testing) but the current solution looked simpler.. Looks good!. Great, would like to test this in addition to the versioning enhancements I'm working on. I'm still testing this, have found that my whitelist cache code was making things slower, currently `BenchmarkDefaultVersion` is around 8% faster than `master` but `GetVersionFromRequest` calls can be improved.. Updated!. @buger Thanks, it's not possible to use with JSVM yet but should be possible adding some of these lines: https://github.com/TykTechnologies/tyk/blob/master/coprocess.go#L238-L256\nWould be good to unify this code a bit!. Seems like `BenchmarkMultiSession_BA_Standard_OK` is impacted by the new murmur calls?. See #1704 . Hi, which Python version are you using?. Are you running the Ubuntu version? Please share the output of this command, would be useful to diagnose the issue:\nldd /opt/tyk-gateway/tyk-python\n. Can you share the full gateway output and the gateway version you're running?\nThanks. Try using these settings in your `tyk.conf`:json\n  \"coprocess_options\": {\n    \"enable_coprocess\": true,\n    \"python_path_prefix\": \"/opt/tyk-gateway\"\n  },\n. The log should print \"python: Initializing dispatcher\" if the Python setup is ok, did you install the required Python modules?. Have been investigating this and seems the issue occurs with PB so it's also present on gRPC plugins, this is what an object looks like in the file attachment scenario:\nhook_type:Pre hook_name:\"MyPreHook\" request: headers: headers: headers: headers: headers: headers: headers: headers: headers: headers: body:\"------WebKitFormBoundarypBuX5LJ0CTLCkV3g\\r\\nContent-Disposition: form-data; name=\\\"file\\\"\\r\\n\\r\\nabc\\r\\n------WebKitFormBoundarypBuX5LJ0CTLCkV3g\\r\\nContent-Disposition: form-data; name=\\\"f\\\"; filename=\\\"bundle1.zip\\\"\\r\\nContent-Type: application/zip\\r\\n\\r\\nPK\\003\\004\\024\\000\\010\\000\\010\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\r\\000\\000\\000middleware.pytP\\313N\\3040\\014\\274\\373+\\254riQU\\211\\353\\236\\340\\004\\227\\275\\361\\003\\246qw\\2436qp\\034\\255\\362\\367(\\373@\\260\\202[2c\\317x&\\251\\217\\326w\\037%\\272\\215\\237v\\030\\274s\\033\\237HyJ\\025}\\306M\\310\\261\\353\\006\\200\\007\\T\\002N\\350C\\0225\\014u\\026\\307\\360\\373\\007\\367\\2023m\\233\\217\\207+\\337\\rpyL\\211u\\021\\r/\\305\\216\\375\\000p\\226\\266\\272N\\216gQ2\\321|\\363y\\274\\220\\0072>Q\\275\\241\\357u}\\275\\\"\\224\\333&\\300\\363\\233\\310\\n\\216\\027\\334\\327\\246\\273\\377\\316\\322+\\177\\026\\3166b\\346\\234\\275\\304\\021\\003\\03392\\0321'\\236\\207\\035 \\\"\\336\\037O\\305\\216?i}\\264<\\347>\\332\\374\\237Y\\032\\241lE#\\376o\\013_\\001\\000\\000\\377\\377PK\\007\\010\\302\\276Fl\\320\\000\\000\\000y\\001\\000\\000PK\\003\\004\\024\\000\\010\\000\\010\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\t\\000\\000\\000mycode.py(\\312\\314+\\321PJ\\315K\\311I5\\264R\\310\\255L\\316OI\\325+\\250T\\310,V\\310\\311OLIMQ\\322\\344\\342JIMS(H-J\\313/\\312u,-\\311\\320\\320\\264\\342RPPP\\300\\251[\\007Y5\\310\\250\\344\\304\\234\\034\\260Qm\\211\\305\\305\\200\\000\\000\\000\\377\\377PK\\007\\010p\\250\\023\\014W\\000\\000\\000y\\000\\000\\000PK\\003\\004\\024\\000\\010\\000\\010\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\r\\000\\000\\000manifest.jsonD\\220Mn\\353 \\024\\205\\367r\\306\\350)/\\266+\\325\\263. +\\210\\\"\\204\\341\\022\\243\\240\\3744E\\221\\367^\\021\\327\\315\\210\\303\\205\\357;\\210\\007\\264\\261\\304\\255I\\031\\343\\031\\213Q\\312\\322]D\\372\\027\\030\\226*\\275z\\346\\013\\203,)\\373\\205\\277\\356| \\264\\345|a\\010\\276)\\\\\\261v\\313\\374F\\225\\213\\222\\347}\\3302\\2273\\311[\\343\\234X\\010#N\\365\\243\\344\\371\\364R2\\004\\321\\030\\200!\\322g1\\221x\\242\\224\\214w\\030\\265\\260\\211\\326v\\220\\202w\\211v\\265\\212\\346\\213\\\"F\\204\\232g\\357\\300\\024\\247\\357\\034\\205\\314>\\266\\272\\337\\r\\327\\321/\\233|\\237\\334\\315^\\367\\007p\\351\\2356\\327\\315\\276\\256\\014\\317W\\247\\322\\310N\\365\\252\\357\\325 \\373N\\374\\327\\244\\246\\367\\343Q\\352\\303\\244\\206\\256\\037\\246\\303\\033\\030\\222\\271:\\221K\\373\\030`\\375\\t\\000\\000\\377\\377PK\\007\\010v\\261um\\344\\000\\000\\000b\\001\\000\\000PK\\001\\002\\024\\000\\024\\000\\010\\000\\010\\000\\000\\000\\000\\000\\302\\276Fl\\320\\000\\000\\000y\\001\\000\\000\\r\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000middleware.pyPK\\001\\002\\024\\000\\024\\000\\010\\000\\010\\000\\000\\000\\000\\000p\\250\\023\\014W\\000\\000\\000y\\000\\000\\000\\t\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\013\\001\\000\\000mycode.pyPK\\001\\002\\024\\000\\024\\000\\010\\000\\010\\000\\000\\000\\000\\000v\\261um\\344\\000\\000\\000b\\001\\000\\000\\r\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\231\\001\\000\\000manifest.jsonPK\\005\\006\\000\\000\\000\\000\\003\\000\\003\\000\\255\\000\\000\\000\\270\\002\\000\\000\\000\\000\\r\\n------WebKitFormBoundarypBuX5LJ0CTLCkV3g--\\r\\n\" url:\"/quickstart/v1/post\" return_overrides: method:\"POST\" request_uri:\"/quickstart/v1/post\" proto:\"HTTP/1.1\" > spec: spec: spec: \n```\nThe flow is as follows:\na) Tyk receives the HTTP request and calls the custom middleware (e.g. a pre hook)\nb) The custom middleware builds up the coprocess.MiniRequestObject, request body is copied and stored in the body field as a string (we do string(bodyBuffer)).\nc) The custom middleware calls the dispatcher (in-memory Python dispatcher or remote gRPC server), passing the marshaled PB object.\nd) The dispatcher receives and unmarshals the PB object and the hook is called.\ne) The hook returns and the dispatcher marshals the PB object back.\nThe flow fails in the second step and this is the error: proto: invalid UTF-8 string.\nSome workarounds I'm thinking of:\n- Add a new field to the request object, using bytes type (e.g. body_bytes), detect when a request contains form data and store it there, non-breaking as it will involve an additional field.\n- Replace the current body field to use byes, this is a breaking change.\n. Have updated this with additional error checks, also modified some of the C.free calls. Have removed TestCase (now using http.Get/http.Post directly)  from the benchmarks:\ngoos: darwin\ngoarch: amd64\npkg: github.com/TykTechnologies/tyk\nBenchmarkGRPCDispatch/Pre_Hook_with_SetHeaders-8               50000         20316 ns/op        2474 B/op         43 allocs/op. @buger we could but we would need to do it everytime the bindings are re-generated and for the different languages? Also some people might be generating their own bindings. I've refactored this and included a test that sends multipart data and a normal JSON request, the approach is as follows:\n- When building the object we check if the data is valid UTF8 (using the unicode package), if it's valid we store a stringified version in object.body. Previously this was the standard behavior for all scenarios and the reason of the panics we had.\n- If the data isn't valid UTF8, we store it as bytes using object.raw_body (this is a new field so that we don't break existing code).. @buger Cool, will tweak it!. Updated, raw_body is always populated now. Added gRPC tests and implemented a helper for dispatcher errors. @buger Previously the importer was invoked with a flag (\"tyk --import-swagger\" or \"tyk --import-blueprint\"), now \"import\" is a subcommand, the syntax for all the import parameters remains the same:\nPreviously:\ntyk --import-blueprint=blueprint.json --create-api --org-id=<id> --upstream-target=\"http://widgets.com/api/\"\ntyk --import-swagger=swaggerfile --create-api --org-id=<id> --upstream-target=\"http://widgets.com/api/\"\nNow:\ntyk import blueprint.json --blueprint --create-api --org-id=<id> --upstream-target=\"http://widgets.com/api/\"\ntyk import swaggerfile --swagger --create-api --org-id=<id> --upstream-target=\"http://widgets.com/api/\"\nThe linter remains the same:\ntyk lint\nIn terms of code it's much easier to introduce new commands now by using the structure created here, the help messages also improve (see #1492), testing commands too.. I have integrated the bundler from tyk-cli too, but will use a different PR for that:\ntyk-cli bundle build\nturns into\ntyk bundle build. @leon sorry!. @buger @dencoded thanks for the reviews\nThere's a small tweak I will do today, basically when you type tyk -h you don't get the help output from the default command (tyk start -h does), would be good to enhance this.. I've tried this patch but seems to be very hacky:\n// Parse parses the command-line arguments.\n func Parse() {\n-       kingpin.MustParse(app.Parse(os.Args[1:]))\n+       args := os.Args[1:]\n+       if len(args) >= 1 {\n+               fmt.Println(\"arg = \", args[0])\n+               if args[0] == \"-h\" || args[0] == \"--help\" {\n+                       args[0] = \"start\"\n+                       args = append(args, \"-h\")\n+               }\n+       }\n+       kingpin.MustParse(app.Parse(args))\n }\nAnd subcommands are omitted:\n```\ntyk start -h\nusage: tyk start []\nStarts the Tyk Gateway\nFlags:\n  -h, --help                Show context-sensitive help (also try --help-long and --help-man).\n      --version             Show application version.\n      --conf=FILE           load a named configuration file\n      --port=PORT           listen on PORT (overrides config file)\n      --memprofile          generate a memory profile\n      --cpuprofile          generate a cpu profile\n      --blockprofile        generate a block profile\n      --mutexprofile        generate a mutex profile\n      --httpprofile         expose runtime profiling data via HTTP\n      --debug               enable debug mode\n      --log-intrumentation  output intrumentation output to stdout\nWithout the patch is as follows, what do you think about using this?\ntyk -h\nusage: tyk []  [ ...]\nTyk Gateway\nFlags:\n  -h, --help     Show context-sensitive help (also try --help-long and --help-man).\n      --version  Show application version.\nCommands:\n  help [...]\n    Show help.\nstart* []\n    Starts the Tyk Gateway\nlint\n    Runs a linter on Tyk configuration file\nimport [] []\n    Imports a BluePrint/Swagger file\nThis is my favorite one (`--help-long`, we could also set this as default!):\ntyk --help-long\nusage: tyk []  [ ...]\nTyk Gateway\nFlags:\n  -h, --help                Show context-sensitive help (also try --help-long and --help-man).\n      --version             Show application version.\n      --conf=FILE           load a named configuration file\n      --port=PORT           listen on PORT (overrides config file)\n      --memprofile          generate a memory profile\n      --cpuprofile          generate a cpu profile\n      --blockprofile        generate a block profile\n      --mutexprofile        generate a mutex profile\n      --httpprofile         expose runtime profiling data via HTTP\n      --debug               enable debug mode\n      --log-intrumentation  output intrumentation output to stdout\nCommands:\n  help [...]\n    Show help.\nstart []\n    Starts the Tyk Gateway\n--conf=FILE           load a named configuration file\n--port=PORT           listen on PORT (overrides config file)\n--memprofile          generate a memory profile\n--cpuprofile          generate a cpu profile\n--blockprofile        generate a block profile\n--mutexprofile        generate a mutex profile\n--httpprofile         expose runtime profiling data via HTTP\n--debug               enable debug mode\n--log-intrumentation  output intrumentation output to stdout\n\nlint\n    Runs a linter on Tyk configuration file\nimport [] []\n    Imports a BluePrint/Swagger file\n--swagger              Use Swagger mode\n--blueprint            Use BluePrint mode\n--create-api           Creates a new API definition from the blueprint\n--org-id=ORG-ID        assign the API Definition to this org_id (required with create-api\n--upstream-target=URL  set the upstream target for the definition\n--as-mock              creates the API as a mock based on example fields\n--for-api=PATH         adds blueprint to existing API Definition as version\n--as-version=VERSION   the version number to use when inserting\n\nSubcommands:\ntyk import -h\nusage: tyk import [] []\nImports a BluePrint/Swagger file\nFlags:\n  -h, --help                 Show context-sensitive help (also try --help-long and --help-man).\n      --version              Show application version.\n      --swagger              Use Swagger mode\n      --blueprint            Use BluePrint mode\n      --create-api           Creates a new API definition from the blueprint\n      --org-id=ORG-ID        assign the API Definition to this org_id (required with create-api\n      --upstream-target=URL  set the upstream target for the definition\n      --as-mock              creates the API as a mock based on example fields\n      --for-api=PATH         adds blueprint to existing API Definition as version\n      --as-version=VERSION   the version number to use when inserting\nArgs:\n  []  e.g. blueprint.json, swagger.json, etc.\n```\n```\ntyk lint -h\nusage: tyk lint\nRuns a linter on Tyk configuration file\nFlags:\n  -h, --help     Show context-sensitive help (also try --help-long and --help-man).\n      --version  Show application version.\n. Just rebased this to include changes from `master` like `disable_regexp_cache`, `regexp_cache_expire` and other linter additions. Note that the linter has a different location on this PR, it was moved from `lint` in the root directory to `cmd/lint`.\n@asoorm I've dropped the hack initial idea because it wouldn't display information about other commands, so I'm +1 on showing  `help-long` instead, this includes every command with its possible flags (see above). Waiting for more feedback to decide:\nInitial hack idea (missing the other commands):\n% ./tyk -h\nusage: tyk []\nStarts the Tyk Gateway\nFlags:\n  -h, --help                Show context-sensitive help (also try --help-long and --help-man).\n      --version             Show application version.\n      --conf=FILE           load a named configuration file\n      --port=PORT           listen on PORT (overrides config file)\n      --memprofile          generate a memory profile\n      --cpuprofile          generate a cpu profile\n      --blockprofile        generate a block profile\n      --mutexprofile        generate a mutex profile\n      --httpprofile         expose runtime profiling data via HTTP\n      --debug               enable debug mode\n      --log-intrumentation  output intrumentation output to stdout\nUsing `help-long` as default:\n% ./tyk -h\nusage: tyk []  [ ...]\nTyk Gateway\nFlags:\n  -h, --help                Show context-sensitive help (also try --help-long and --help-man).\n      --version             Show application version.\n      --conf=FILE           load a named configuration file\n      --port=PORT           listen on PORT (overrides config file)\n      --memprofile          generate a memory profile\n      --cpuprofile          generate a cpu profile\n      --blockprofile        generate a block profile\n      --mutexprofile        generate a mutex profile\n      --httpprofile         expose runtime profiling data via HTTP\n      --debug               enable debug mode\n      --log-intrumentation  output intrumentation output to stdout\nCommands:\n  help [...]\n    Show help.\nstart []\n    Starts the Tyk Gateway\n--conf=FILE           load a named configuration file\n--port=PORT           listen on PORT (overrides config file)\n--memprofile          generate a memory profile\n--cpuprofile          generate a cpu profile\n--blockprofile        generate a block profile\n--mutexprofile        generate a mutex profile\n--httpprofile         expose runtime profiling data via HTTP\n--debug               enable debug mode\n--log-intrumentation  output intrumentation output to stdout\n\nlint\n    Runs a linter on Tyk configuration file\nimport [] []\n    Imports a BluePrint/Swagger file\n--swagger              Use Swagger mode\n--blueprint            Use BluePrint mode\n--create-api           Creates a new API definition from the blueprint\n--org-id=ORG-ID        assign the API Definition to this org_id (required with create-api\n--upstream-target=URL  set the upstream target for the definition\n--as-mock              creates the API as a mock based on example fields\n--for-api=PATH         adds blueprint to existing API Definition as version\n--as-version=VERSION   the version number to use when inserting\n\n``. @buger That's already possible. Previously we had ametadatafield in thecoprocess.Objectdata structure, this was amap[string]string, the flow was like this:\n- Request arrives, if there's metadata present we add it tocoprocess.Object.Metadata(and try to stringify all the values).\n- The hook gets called and metadata is accessed throughcoprocess.Object.\nUsingcoprocess.Object` was a workaround as we weren't sure about the metadata usage in this context.\nThis PR modifies coprocess.SessionState to use a map[string]string metadata field, this makes more sense (our original data structure uses map[string]interface{}).\nIf the request contains metadata, we copy all the elements and stringify all the values, this is fine for common structures like {\"my_field:\" \"my_value\", \"another_field\": 10}, in case a nested value is detected, it gets stored as a JSON-encoded string. Example:\njson\n{\"my_field\": \"my_value\", \"dashboard_data\": {\"developer_id\":123}}\nAccessing session.my_field will return my_value (raw string).\nAccessing session.dashboard_data will return {\"developer_id\":123} (JSON-encoded string).\nThe session object access was wrapped in the our Python bindings and I've adjusted them so that it doesn't break the current usage.\nFor gRPC users that need/use metadata, they would have to adjust their code to access session.Metadata instead of object.Metadata.\n. I've found a fix to keep compatibility with non-Python plugins, Python is already compatible (as mentioned above).. Previously I've mentioned that users would need to change their middleware to use session.Metadata instead of object.Metadata (the latter was created as a workaround and session.Metadata was only a string (you will find this in the Proto definition string metadata). The last commit allows code that still uses object.Metadata to work.\nThe whole PR drops the usage of object.Metadata and uses session.Metadata in the correct way, additionally dealing with the issue we've found with nested data structures.. Sure, will extend the gRPC tests for this in particular, Python tests already cover this (they were broken before the compatibility fix).. Python tests were failing before, that's the reason for the compatibility commit (the user isn't required to change his code and we handle this transparently). gRPC isn't failing because we don't have any test using metadata in there, needs to be extended with the old approach and the new one, both auth hooks.. Yes, we could add some test values similar to the ones set by the dashboard. Looks good and agree with Leon's comments, will rebase #1690 with this after the merge to see if more improvements show up. Have rebased this and also added tests to cover errors and a simple Python bundle build scenario \ud83d\udc4d . Also removed the server subcommand references, it will be a different PR. Finally fixed this, besides the race that was happening randomly (not related to this PR), there was an issue with the kingpin command test \ud83d\udc4d . Hi, can you run netstat -ln | grep 5555 and see if your gRPC server shows up?\nPlease also include the output of this command:\ncurl -v http://127.0.0.1:5555. Thanks, did you generate the JS bindings on your own? Please also share your tyk.conf.. Thanks, your configuration looks ok, this issue might be related to the NodeJS gRPC module or the bindings as we haven't had similar issues with other languages.\nPlease also provide the NodeJS version and your package.json file, the version we tried for the tutorial was 1.6.0.. Would this be a CLI subcommand? That would be great. I haven't been able to reproduce this with latest master, can you check again?\nThere were some recent changes like #1747, might be related.. After #1747 these two implementations work on my side:\npython\nfrom tyk.decorators import *\nfrom gateway import TykGateway as tyk\nprint(\"loaded\")\n@Hook\ndef MyAuthMiddleware(request, session, metadata, spec):\n    print(\"auth called\")\n    auth_header = request.get_header('Authorization')\n    tyk.log(\"auth header is {0}\".format(auth_header), \"info\")\n    if auth_header == '47a0c79c427728b3df4af62b9228c8ae':\n        session.rate = 1000.0\n        session.per = 1.0\n        session.metadata[\"token\"] = \"47a0c79c427728b3df4af62b9228c8ae\"\n    return request, session, metadata\nAlso:\npython\nfrom tyk.decorators import *\nfrom gateway import TykGateway as tyk\nprint(\"loaded\")\n@Hook\ndef MyAuthMiddleware(request, session, metadata, spec):\n    print(\"auth called\")\n    auth_header = request.get_header('Authorization')\n    tyk.log(\"auth header is {0}\".format(auth_header), \"info\")\n    if auth_header == '47a0c79c427728b3df4af62b9228c8ae':\n        session.rate = 1000.0\n        session.per = 1.0\n        metadata[\"token\"] = \"47a0c79c427728b3df4af62b9228c8ae\"\n    return request, session, metadata. @buger I'm using Python 3.5, currently debugging this on different versions. Probably related to the protobuf pip package as you said.. Seems that MergeFrom behaves differently across versions and there's a sort of incompatibility between the version we use to generate the bindings and the runtime version (for tests, CI, etc.), in some versions we would get no attribute MergeFrom, etc. I've found that it's simpler to pass it over to the hooks in this way, with the expected behavior.\nTests work fine locally (go test -tags 'coprocess python), the reason for the CI fail looks related to the gRPC rollback?. Can you share your tyk.conf?\n. @altaurog python_path_prefix should be inside coprocess_options, the log line should be more specific (will change this).\nThe error you're getting is related to the protobuf Python module you're using. Can you share the version?\n$ pip3 show protobuf\nAlso your Python version:\n$ python -V\nThanks!. @altaurog Good\nThis will be helpful for debugging the issue as well: were you building Tyk using the current master?\nThanks!. Just added tests, included a few ones that deal with the encoded/decoded JWT payload we were experimenting with \ud83d\udc4d . Can you share the JS code you're using to test this?. I've been able to reproduce this issue, at least in my test box the issue is caused by the version of the protobuf Python module and it works fine using Python 3.3, 3.4 or 3.5.\nWe should make sure that we're using the latest stable version:\nroot@tyk-test-1:~/go/src/github.com/TykTechnologies/tyk# pip3 show protobuf\nName: protobuf\nVersion: 3.6.0\nSummary: Protocol Buffers\nHome-page: https://developers.google.com/protocol-buffers/\nAuthor: None\nAuthor-email: None\nLicense: 3-Clause BSD License\nLocation: /usr/local/lib/python3.5/dist-packages\nRequires: setuptools, six\nRequired-by:. Can you provide a more detailed sample scenario?\nHave you checked our caching documentation?. Can you share the manifest file you're using to build this bundle?\nThanks. @bitsofinfo Thanks, this will be useful for testing our patch. @ilijabojanovic I've updated this to keep compatibility with gRPC/Python plugins, would be good if you can try it out.. The ID extractor has a XPath functionality that's able to extract credentials from this type of request bodies (only a single expression), however this is more complex because of the JSVM limitations. Mentioning this in case its interface is useful.. Hi, thanks for the feedback.\nAlso we suggest using the setup script, explained here.. Updated. Tests are ok now!. Fix here: https://github.com/TykTechnologies/tyk/pull/1888. Some suggestions for testing this (and the PR) from the command line, to test multipart uploads, assuming there's a binary file called data:\ncurl http://localhost:8080/api-with-plugin/post -F \"myfile=@data\" \ncurl http://localhost:8080/api-without-plugin/post -F \"myfile=@data\"\nTo test application/x-www-form-urlencoded attachments:\ncurl http://localhost:8080/api-with-plugin/post -X POST --data-binary @data\ncurl http://localhost:8080/api-without-plugin/post -X POST --data-binary @data. A note on #1911: we need to decide when to use raw_body versus body. With the patch raw_body will be used to reconstruct the request object, always.\nThe user could have different use cases:\na) The request arrives and the custom middleware modifies the body field.\nb) The request arrives and the custom middleware modifies the raw_body field.\nWe could introduce a condition like this:\ngo\n        // If the body field is empty, then use raw_body:\n    if object.Request.Body == \"\" && len(object.Request.Body) == 0 {\n        r.ContentLength = int64(len(object.Request.RawBody))\n        r.Body = ioutil.NopCloser(bytes.NewReader(object.Request.RawBody))\n    } else {\n        r.ContentLength = int64(len(object.Request.Body))\n        r.Body = ioutil.NopCloser(strings.NewReader(object.Request.Body))\n    }. Can you attach your API definition as a file?. @Sanpetch Thanks, just checked it. You should append http:// or https:// before the IP address.. Looks like a vendoring issue to me, related to golang.org/x/text/language.. We should also check the latest otto changes, I've updated the vendored version in my local branch and seems there's some new stuff, mostly bugfixes:\ndiff --git a/vendor/vendor.json b/vendor/vendor.json\nindex 9f5b84a5..d8bdd32c 100644\n--- a/vendor/vendor.json\n+++ b/vendor/vendor.json\n@@ -437,10 +437,10 @@\n                {\n-                       \"checksumSHA1\": \"ZSYig6eYkc34ELHl6O5gRtJvr6o=\",\n+                       \"checksumSHA1\": \"WdorbyEJiNbjIOiQzM4TLb/XA7Q=\",\n                        \"path\": \"github.com/robertkrimen/otto\",\n-                       \"revision\": \"fc2eb1bbf1c5c462313c810bb02dc93cd964aebe\",\n-                       \"revisionTime\": \"2017-07-21T19:43:36Z\"\n+                       \"revision\": \"15f95af6e78dcd2030d8195a138bd88d4f403546\",\n+                       \"revisionTime\": \"2018-06-17T13:11:54Z\"\n                },. Looks good, seems the timeout issue is fixed now!. I've fixed the CI.. @buger Note that the field has the repeated keyword, so it's actually an array of []byte:\njs\nrepeated bytes raw_certificates = 15;\nI agree that having certificate meta as a serialized JSON string will be simpler.. Updated with above changes and tests!. To test this we should use require_client_cert in the custom middleware block:\njson\n{\n  \"file_list\": [\n  ],\n  \"custom_middleware\": {\n    \"pre\": [\n      {\n        \"name\": \"PreHook\",\n        \"require_client_cert\": true\n      }\n    ],\n    \"driver\": \"grpc\"\n  }\n}\nBy default, require_client_cert is set to false so the certificate fields aren't populated.. I will rebase this (we updated the PB bindings recently) and add JSVM support, should be possible!. Just a note, to reproduce this context vars should be enabled in the API settings.. Hi, there's a related community forum post here.. @buger Fixed \ud83d\udc4d . We should also evaluate packages (go-xsd?) that are purely written in Go (go-libxml2 will introduce a libxml2 link/requirement). Last time I checked this was around 3 years ago and couldn't find a good replacement.. Stripping the listen path in api_definition.go seems to fix it but might break the behavior for some users:\ngo\n// URLAllowedAndIgnored checks if a url is allowed and ignored.\nfunc (a *APISpec) URLAllowedAndIgnored(r *http.Request, rxPaths []URLSpec, whiteListStatus bool) (RequestStatus, interface{}) {\n    path := strings.Replace(r.URL.Path, a.APIDefinition.Proxy.ListenPath, \"\", -1)\n    // Check if ignored\n    for _, v := range rxPaths {\n        if !v.Spec.MatchString(path) {\n            continue\n        }. Yes, seems related. That check is right before this one!. Updated. Yes, just saw it on CI. We need to make sure that NoticeGroupReload is published after the signal is triggered.. If for any reason this message doesn't arrive, it's ok to hit the timeout and report it as an error (like Travis is reporting now).. Any suggestion?. We may receive other messages/notifications (this is what I've observed in my local environment, by using redis-cli monitor), so we can't expect that the first message will be the one we're looking for.. I've added a comment, this seems to be the first test to involve pubsub, so when writing tests in the future, this could make it easier to run multiple tests that produce/consume notifications.. No, it doesn't panic, it expects an argument:\n% ./tyk --create-api=foo\n--create-api must not have an argument\nUsage:\n        tyk [options]\n% ./tyk --create-api foo\nUsage:\n        tyk [options]\n. A nil body panics \ud83d\ude2e . We were already using PyEval_ReleaseLock but this is the proper/better way of using it, and this replaces the lock operations.. This is only used internally, it could be set to \"x\" and would still work.. @lonelycode This line will enforce middleware.py, it's useful to avoid collisions with other package/file names and it's also required to use the alternative importlib loader function that I've added in middleware.py, if the user loads a bundle that doesn't have middleware.py a Python error will show up (won't panic). All our samples use middleware.py.. In case you think this is too strict for a patch, I could try to modify the code again to \"scan\" all the Python files and load the appropriate one -the one containing the hooks-, just like the previous functionality.. @mvdan I've updated it with a func that performs both operations:C.free and runtime.UnlockOSThread.. That's right, this is the missing one.. Event handlers are a separate thing, this doesn't cover them yet.. Yes, otherwise import fails because the key isn't found in sys.modules.. Thanks, looks better. The Dispatcher class looks mostly the same, theBetaDispatcher changed a bit, I will investigate this (shouldn't affect).. @dencoded Agree!. We can simplify this:\nif policies, err := parsePoliciesFromRPC(listAsString); err != nil {\n        log.WithFields(logrus.Fields{\n            \"prefix\": \"policy\",\n        }).Error(\"Failed decode: \", err)\n        return nil\n    } else {\n        return policies\n    }\nAnd use:\nif policies, err := parsePoliciesFromRPC(listAsString); err != nil {\n        log.WithFields(logrus.Fields{\n            \"prefix\": \"policy\",\n        }).Error(\"Failed decode: \", err)\n        return nil\n    }\n    return policies. Makes sense. perhaps use contextIP?. http.MethodGet. Perhaps EnableIPBlacklisting?. Updated. perhaps use http.StatusOK?. yes, when using it as e.cfg I get this runtime error result must be addressable (a pointer). https://github.com/mitchellh/mapstructure/blob/master/mapstructure.go#L194. \ud83d\udc4d . URLRewrite was changed, so the & isn't required.\nWithout this patch this is the behavior:\nSending request for the first time:\nmeta.MatchRegexp = 0xc4204ada88\nmeta.MatchRegexp is nil, calling regexp.Compile\nSending the same request again:\nmeta.MatchRegexp = 0xc42049ea88\nmeta.MatchRegexp is nil, calling regexp.Compile\nUsing the patch:\nSending request for the first time:\nmeta.MatchRegexp = 0xc4203a8478\nmeta.MatchRegexp is nil, calling regexp.Compile\nSending the same request again:\nmeta.MatchRegexp = 0xc4203a8478. Perhaps add passwordBytes := []byte(password) and avoid subsequent []byte() calls?. Think we can remove this additional block and return earlier when found is false.. Should it be defer d.channelsMu.Unlock()?. We could default to otto here and simplify the if block:\nmwDriver := apidef.OttoDriver\nif config.Global().JSVM == \"goja\" {\n  mwDriver = apidef.GojaDriver\n} . ",
    "dividinglimits": "Suggestion: Use HTTP Status code 429 (Too Many Requests) \nSource: https://tools.ietf.org/html/rfc6585#section-4 \nNot sure what you mean by \"response can still be successful\". \n. What am I missing here @lonelycode? The reporter mentions using \"for_plan\" in the request, but that's not defined within the API context document found at https://tyk.io/docs/tyk-api-gateway-v-2-0/api-management/api-definition-objects/ \n. ",
    "mheiber": "What is the \"advanced API\"?. @kohrVid yes, @lonelycode 's suggestion was helpful, it's OK to close the issue.\nThank you!. @lonelycode thanks for this information\u2014can you advise on where I can see what these updates are regarding plugins? Is there a repo for docs with a v2.3 branch?. ",
    "dwijnand": "Thanks.\n. ",
    "Randita": "Ok, thanks for the reply ! We'll give it a shot :)\n. ",
    "nvuppala": "We do also need to support optional headers for hmac,\n. ",
    "unki2aut": "Thx for the fast reply, but this is really important for us if we want to use tyk for our production system. :smile: \nAs we build the docker image ourselves, in which branch can we get this fix?\n. ",
    "prasadus92": "Thank you.\n. ",
    "yepher": "Just incase it can help here is the Mandrill migration to SparkPost guide and this Slack channel is available if you need help with the migration.\nWe give 100,000 emails/month for free.\n. ",
    "ivaningrooves": "It took me a while to find out what flow we use. We use ThinkTecture Identity server v2 as ID and auth provider. I believe we use the flow below:\n(2,3,4 are handled by Id. server)\n1. Browser performs request to Api\n2. No (or invalid) Cookie present and no \"Bearer\" in the Authorization header -> redirect to auth provider login page.\n3. Enter credentials and submit.\n4. If successful login -> load a page that automatically POSTs a hidden form back to the Api containing encrypted claims (permissions).\n5. Api decrypts claims and sets up a secure Cookie session.\nTyk could deal with this much like the OAuth middleware? How about this?\n1. Browser performs request to Tyk (e.g. mytyk.io/myapi)\n2. The WSFed middleware checks for the Authorization and/or Cookie header -> redirect to auth provider login page if necessary.\n3. The middleware checks for a receiving POST as result from a successful login -> decrypt and set Authorizaion and/or set or inject Cookie headers, redirect to mytyk.io/myapi\nThe Authorization and/or Cookie headers contain the Token and claims. The Id. server will have to perform a POST to /tyk/keys/{{access_token}} to create the token when login is successful. Then the middleware could decrypt and update the permissions for the key.\nDoes this make sense to you? Is a middleware the proper way to implement this?\n. Thanks Martin, I will look into the TIB and see how easy I can extend it\nwith our flow. I was told our case is widely used in .NET land. You might\nwant to add a link to the TIB under the 'Custom Tokens' section in the\ndocs? Cheers, --Ivan\n\nIvan\nOn Mon, Mar 21, 2016 at 10:31 AM, Martin Buhr notifications@github.com\nwrote:\n\nYou could do this with Golang middleware, but I don't feel this is a\ngeneric enough flow to warrant something to be added to Tyk itself unless\nit handled the federation flow for a bunch of other providers.\nHowever, there is a project we recently released called the Tyk Identity\nBroker, which is easy to extend with plugable identity providers and is\ndesigned for stuff like this. It would be easier to modify than Tyk itself\nand there's less risk in forming and managing your customisations.\nIt would be easier to extend the TIB with the flow that you describe as it\nwill take care of bridging the gap between Tyk and your IDM by generating\ntokens in exactly the mode you describe.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/TykTechnologies/tyk/issues/206#issuecomment-199391047\n. I hope you don't mind me asking another question regarding the described flow. Our current API's expect the encrypted Cookie which contains the token as well as permissions (claims). I can see how the TIB proxies different ID providers and makes use of Tyk's oauth mechanism but how would I go about this Cookie? Can Tyk ignore the Cookie and maybe verify an additional Authorization header? ..and have the TIB set the Cookie initially?\n. I believe my biggest problem in this is the encrypted Cookie. Yes, the TIB plugin can deal with it but the APIs we currently use depend on the Cookie (and only use the Cookie) I still would have to modify Tyk to be able to decrypt the cookie (and verify it) to determine the 'key'. What are your thoughts?\n\nEdit: I forgot to mention our APIs use both the encrypted Cookie as well as the Authorization header. I guess this could currently be configured in Tyk by adding every API twice but it might be a use case to be able to define multiple ways (e.g. querystring param and/or header) ?\n. Hah I agree :-) \nWould you consider merging a secure-cookie-support pull request with support for multiple types of authentication? Supporting secure cookies should be a handy feature (see: http://www.gorillatoolkit.org/pkg/securecookie) as well as being able to verify tokens in a multiple of header, query param and cookie.\nMaybe instead of having the UseCookie and UseParam flags have string values for CookieName and ParamName? I could add the Cookie keys there as well? The Auth struct would become something like this:\nAuth struct {\n  AuthHeaderName       string\n  CookieName           string\n  CookieHashKey        []byte\n  CookieBlockKey       []byte\n  ParamName            string\n}\nI could keep the bools for backwards compatibility? The middleware would check the bools first, then the names and last the AuthHeaderName. In pseudo:\n```\nauthValue := Headers.Get(config.AuthHeaderName)\nparamName := config.ParamName\nif config.UseParam || paramName != \"\" {\n  authValue =  FormValue(paramName || config.AuthHeaderName)\n}\ncookieName = config.CookieName\nif config.UseCookie || cookieName != \"\" {\n  // decrypt if keys are set\n  // etc.\n}\n```\nWhat do you think? Would this impact performance too much?\n. I realize this requires changes in the dashboard as well, which is proprietary. I have made some changes already but it is kind of hard for me to test without a UI and I am reluctant to add unit tests without some assurance you would actually merge this in. Here are the changes, let me know what you think. https://github.com/ivaningrooves/tyk/commit/eb2244ddf637fba04b9f451c9d4f2234133464a7\nPS. I don't mind making the changes to the UI as well but I guess you want to keep that in your house.\n. Thanks Martin, I will look into file-based configs and add some tests.\n. Thank you, this did the trick:\ngo get -u github.com/lonelycode/redigocluster/rediscluster\n. Obviously this build fails since tykcommon has not been updated yet.\n. Thanks! Are you planning on adding UI for this to the dashboard?\n. Awesome, thanks a lot!\n. ",
    "philipbjorge": "3 was what I was missing which makes sense...\nThere'd be no way to pull that key out of Redis without the org_id in the key.\nThanks\n. Alright, that's not a terrible deployment step and we'll live with it :).\nIs middleware supported at all on the tyk cloud offering?\nRelated, there's a typo in the docs -- -------- pst/ should be post.\n. Confirmed that this does work after logging out.\nThanks\n. @lonelycode -- No code written, just trying to understand how Tyk can handle our usecase. Does Tyk handle our usecase?\n\nthe machinery needed to make this work would inevitably also integrate ACL and rate limits at org level if you don't approach it correctly.\n\nAs long as you only applied quotas, you wouldn't need to be concerned with ACL/rate limits correct? As I understand it, the quota values are the only thing that the org quota middleware is concerned with?\n\nYou could do this manually in the middleware itself instead of using the built in policy handling, it would be the only way to not introduce spurious Redis round trips.\n\nSo have a hard-coded list of quotas I'd like to enforce?\n\nIt might be easier to just track an orgs quota level and manage the keys manually.\n\nCan you expand on this?\n. OK, so I believe I am following you on the org policy object stuff -- Basically, you would prefer an implementation that doesn't try and shoehorn session policies into being used for org policies. That makes sense.\nIt also sounds like the way for us to support our usecase today is to do the following:\n- When a client is upgraded/downgraded from our administration portal we should make the request to Tyk with an updated organization policy\nDoes that sound correct/feasible?\n. ",
    "taliesins": "@philipbjorge perhaps we could use https://github.com/tylerb/graceful as an alternative?. ",
    "Dimitri-UNHCR": "How do I get this?\nI am in Windows 10 PRO x64\n. $ echo $DOCKER_HOST\ntcp://192.168.99.100:2376\nDo I have to use this address in my hosts file for www.tyk-portal-test.com?\nI.e. 192.168.99.100 www.tyk-portal-test.com?\n. Thanks a lot! It worked!\n. ",
    "krlicmuhamed": "If I may ask, what's the minimum memory required? Redis uses ~200 MB of memory at 1 Million keys according to this article. I will (hopefully) not use memory extensive tasks and not many users will access this gateway also some lag or delayed response from raspberry pi is acceptable. Or in other words, how much does tyk-gateway require memory - use redis - etc..? Raspberry Pi device has 1 GB of available memory, which I think is just about enough for my non-memory-extensive tasks.\n. ",
    "byrnedo": "Thanks!\n. I had tried changing the cname in the gui, but I keep getting \"Domain name is invalid, please enter a valid domain name\" in the response. The domain I tried is \"portal.local.sendify.se\".\nI think I tried adding it in mongo too but it didn't seem to work. I'll have to try that again.\nEDIT: yeah, I just checked and my org looks like this ever since I manually updated it in mongo (not via api)\n{\n\"_id\" : ObjectId(\"56f3e529fb9231000a000001\"),\n\"owner_name\" : \"Default Org.\",\n\"owner_slug\" : \"default\",\n\"cname_enabled\" : true,\n\"cname\" : \"portal.local.sendify.se\",\nwhen I go to that url, I just end up at the dashboard, not the portal, perhaps my nginx proxy in front is screwing things up? It seems to work find when accessing apis registered in tyk.\n. It's running on 3000 in the container, but it's being proxied from via port 443. When you say \"Domains are port bound\" do you mean that the value for hostname in the conf would need to be <somedomain>:3000 in that case?\n. I found this thread on the community portal which is really the same thing\nhttps://community.tyk.io/t/portal-and-subdomain/530/10.\nSorry for the duplicate.\nI've settled for using tyk to proxy the resources for the portal. I have a\nvery convenient setup with nginx just now and am a little too lazy to mod\nit to make room for the templating needed for proxying directly from it\nbased on org id. Or maybe I will, have a bit of time this weekend :)\nOn 24 March 2016 at 22:16, Martin Buhr notifications@github.com wrote:\n\nNo, sorry didn't mean to confuse, if you set a standard hostname Tyk will\nlisten on hostname:port automatically depending on the port you set in the\nconfiguration.\nSo if it's on 3000, then setting a hostname of www.mydomain.com will only\nwork on www.mydonain.com:3000 and that includes the portal.\nAlso pay attention to the portal root setting, everything will 404 except\nthe portal root.\nThe best thing to do might be to look at how the QuickStart handles\nthings, although it's a bit special in that it reverse proxies the portal\nvia The gateway so everything can be available on port 80.\nHowever, if you are running behind NGinX, why bother with Tyk domain\nhandling? Switch it off and have NGinX do the rewrites for you.\nTake a look in the Tyk-analytics installation folder in the container,\nthere is a host manager folder which has a bunch of templates for various\nTyk routing configurations that demonstrate how the rewrites work for\nsingle site and subdomain based setups.\nthe host manager is a legacy service we used to bundle to manage domain\nrouting so it's probably your best source of info for NGinX.\nI think having Tyk try to bind to a domain and nginx do it you'll just\nend up confusing things. It might work, but it's two things to synchronise.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/TykTechnologies/tyk/issues/225#issuecomment-201023397\n. I guess we can close this issue. Thanks for all the info.\n. No, not manually. I see that in the js script on the page that it has the url as so: \n\n```\nvar url = window.location.search.match(/url=([^&]+)/);\n        if (url && url.length > 1) {\n            url = decodeURIComponent(url[1]);\n        } else {\n        url = \"\\/portal\\/apis/56fa50d0e3db830009000001/documentation/raw\";\n\n\n    }\n\n```\nIt's hardly the backslashes?\n. I only noticed it once I had a slow connection to my server, usually the docs pagers are a tad slow but usable, this time it took quite a while. I ran json lint on the payload and it was fine too.\n. Ok, can do. \nJust fyi, trying the 'mailgun' email provider with 0.9.7.2 gave me this:\n```\nime=\"2016-03-31T08:44:40Z\" level=warning msg=\"USING SORT: approved\" \ntime=\"2016-03-31T08:44:43Z\" level=warning msg=\"USING SORT: approved\" \ntime=\"2016-03-31T08:44:46Z\" level=warning msg=\"Destroying existing key: 8195e2b4\" \ntime=\"2016-03-31T08:44:46Z\" level=warning msg=\"Deleting HASHED key\" \ntime=\"2016-03-31T08:44:46Z\" level=warning msg=\"&{DELETE http://tyk-gateway.service.consul:8080/tyk/keys/8195e2b4?api_id=7b393528bfca4549506b7083657d76e8&hashed=1 HTTP/1.1 1 1 map[X-Tyk-Authorization:[hImj4S27MlcVH+2u0S8riQwQ5rIao5QKbEV0C2MLJ04]]  0 [] false tyk-gateway.service.consul:8080 map[] map[]  map[]    }\" \npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x28 pc=0x471cb3]\ngoroutine 174 [running]:\nmain.NotifyUserByEmailOfKeyRequestSuccess(0xc82008b040, 0xc8202f8580, 0x38, 0x0, 0x0)\n    /home/tyk/go/src/github.com/lonelycode/tyk-analytics/PortalEmailMethods.go:60 +0x363\ncreated by main.KeyRequestHelper.NotifyParties\n    /home/tyk/go/src/github.com/lonelycode/tyk-analytics/PortalKeyRequestHandler.go:102 +0x2ec\ngoroutine 1 [IO wait]:\n```\n. Thanks for the info, will close this.\n. I just went via the gui.\nFilled out email/pass and then create.\nYeah, I can visit my portal and all, it is the same installation\nexperiencing\nhttps://community.tyk.io/t/developers-api-key-not-honoring-associated-policies/657/20\nthough.\nOn 27 April 2016 at 16:15, Martin Buhr notifications@github.com wrote:\n\nHow did you create the developer? Also, did you have a fully functioning\nportal in place?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/TykTechnologies/tyk/issues/249#issuecomment-215097338\n. Anything in particular I should look at in mongo to check?\nFrom tyk_analytics_users collection ( the access key is changed )\n\n{ \"_id\" : ObjectId(\"56f3e529ca6272c7bb342554\"), \"firstname\" : \"Donal\", \"lastname\" : \"Byrne\", \"emailaddress\" : \"donal@xxx\", \"password\" : \"$2a$1blahablahblah\", \"orgid\" : \"56f3e529fb9231000a000001\", \"active\" : true, \"accesskey\" : \"bd5d58514944a5434eb20be4d324011a\" }\n. Ok great, so just a case of using that $tyk_meta.tyk_developer_id directly in the header value in the dashboard?\n. Worked fine, thanks again!\n. ",
    "carlosjgp": "The documentation about this field is still missing on the website :(\nhttps://tyk.io/docs/configure/tyk-dashboard-configuration-options/\nSuch an important field should be well documented. I've raised a PR. ",
    "previ": "Oops, sorry! :-)\n. ",
    "plazmist": "sorry guys, but the original question was about logs path. Two years passed, but I still can find logs only in /var/log/messages for RHEL. No separate folders of files.. ",
    "magnusja": "Ms-MBP-2:ansible mep$ docker version\nClient:\n Version:      1.10.3\n API version:  1.22\n Go version:   go1.5.3\n Git commit:   20f81dd\n Built:        Thu Mar 10 21:49:11 2016\n OS/Arch:      darwin/amd64\nServer:\n Version:      1.10.3\n API version:  1.22\n Go version:   go1.5.3\n Git commit:   20f81dd\n Built:        Thu Mar 10 21:49:11 2016\n OS/Arch:      linux/amd64\n. I am using boot2docker with virtualbox via docker toolbox / quickstart terminal\nMs-MBP-2:ansible mep$ docker info\nContainers: 4\n Running: 2\n Paused: 0\n Stopped: 2\nImages: 3\nServer Version: 1.10.3\nStorage Driver: aufs\n Root Dir: /mnt/sda1/var/lib/docker/aufs\n Backing Filesystem: extfs\n Dirs: 60\n Dirperm1 Supported: true\nExecution Driver: native-0.2\nLogging Driver: json-file\nPlugins: \n Volume: local\n Network: bridge null host\nKernel Version: 4.1.19-boot2docker\nOperating System: Boot2Docker 1.10.3 (TCL 6.4.1); master : 625117e - Thu Mar 10 22:09:02 UTC 2016\nOSType: linux\nArchitecture: x86_64\nCPUs: 1\nTotal Memory: 996.1 MiB\nName: default\nID: XRLZ:5GFM:RFDH:P5Q2:ISZN:JQ5T:ZB6A:FVOK:A62Y:O56C:RV3Y:AOHG\nDebug mode (server): true\n File Descriptors: 28\n Goroutines: 42\n System Time: 2016-04-04T15:40:24.183203551Z\n EventsListeners: 0\n Init SHA1: \n Init Path: /usr/local/bin/docker\n Docker Root Dir: /mnt/sda1/var/lib/docker\nUsername: mjdev\nRegistry: https://index.docker.io/v1/\nLabels:\n provider=virtualbox\n. Sure:\nMs-MBP-2:infrastructure mep$ cd tyk_quickstart/\ntotal 32\ndrwxr-xr-x  13 mep  staff   442B Apr  4 15:56 .git/\n-rw-r--r--   1 mep  staff   2.0K Apr  4 15:56 README.md\n-rw-r--r--   1 mep  staff   931B Apr  4 15:56 docker-compose-pre-1.9.yml\n-rw-r--r--   1 mep  staff   1.1K Apr  4 16:45 docker-compose.yml\n-rw-r--r--   1 mep  staff   792B Apr  4 15:56 pump.conf\n-rwxr-xr-x   1 mep  staff   6.7K Apr  4 15:56 setup.sh\n-rw-r--r--   1 mep  staff   1.5K Apr  4 15:56 tyk.conf\n-rw-r--r--   1 mep  staff   2.5K Apr  4 16:37 tyk_analytics.conf\nI also tried removing the volume mount for the dashboard in the compose file with no luck.\n. @lonelycode Had a look at it, and my VM has access to /Users.\nThis is a really strange error, I tried commenting the volumes section out and sometime it throws the same error and sometimes it works.\n. ",
    "creamer": "Thank you. :+1: \n. ",
    "dhjf": "Alright - I will try to make that work. Thanks!\n. I had to upgrade to v2.0, but now it works like a charm :+1: \n. ",
    "madsj": "Thanks for the fast reply. I can also see that you also have updated the api documentation.\nSo just it clarify are there any possibilities for admin-auth to list users per organisation?\nI would like to create a script that are able to find a specific user by his name and then afterwards use this users access_key in the authorization header.\n. I will have a try. Thanks for the fast reply\n. ",
    "bboozzoo": "Why not, seems like an easy fix.\n. ",
    "penhauer-xiao": "The latest docker version is v1.11; for it\uff0c Just setup.sh, it's related to docker version. thanks\n. switch to docker version 1.10 form version 1.11, it is ok, thanks\n. I have been test from chrome, it show : {\"status\":\"error\",\"error\":\"Forbidden\"}\n\nAnd from tyk_dashboard docker, I test it by command: curl http://10.200.152.96:8080/tyk/keys/create, it return as bleow:\n{\"status\":\"error\",\"error\":\"Forbidden\"}  \nso to prove that docker networking is good.\n. I have check log from tyk_gateway container, I judge not seem to have any relevant log output, I log level is debug,  as bleow:\ntime=\"Apr 20 17:46:48\" level=debug msg=\"Input key was: host-checker:PollerActiveInstanceID\" \ntime=\"Apr 20 17:46:48\" level=debug msg=\"Input key was: host-checker:PollerActiveInstanceID\" \ntime=\"Apr 20 17:46:58\" level=debug msg=\"[STORE] Getting WAS: PollerActiveInstanceID\" \ntime=\"Apr 20 17:46:58\" level=debug msg=\"Input key was: host-checker:PollerActiveInstanceID\" \ntime=\"Apr 20 17:46:58\" level=debug msg=\"[STORE] Getting: host-checker:PollerActiveInstanceID\" \ntime=\"Apr 20 17:46:58\" level=debug msg=\"Input key was: host-checker:PollerActiveInstanceID\" \ntime=\"Apr 20 17:46:58\" level=debug msg=\"Primary instance set, I am master\" \ntime=\"Apr 20 17:46:58\" level=debug msg=\"[STORE] SET Raw key is: PollerActiveInstanceID\" \ntime=\"Apr 20 17:46:58\" level=debug msg=\"Input key was: host-checker:PollerActiveInstanceID\" \ntime=\"Apr 20 17:46:58\" level=debug msg=\"[STORE] Setting key: host-checker:PollerActiveInstanceID\" \ntime=\"Apr 20 17:46:58\" level=debug msg=\"Input key was: host-checker:PollerActiveInstanceID\" \ntime=\"Apr 20 17:46:58\" level=debug msg=\"Input key was: host-checker:PollerActiveInstanceID\" \n. Ok, I have been retest it,  After when I create api name is aaa-api, the log as bleow:\ntime=\"Apr 20 17:57:51\" level=info msg=\"Connection dropped, connecting..\" \ntime=\"Apr 20 17:57:51\" level=warning msg=\"Cache purging is no longer part of Tyk Gateway, please use Tyk-Pump.\" \ntime=\"Apr 20 17:57:51\" level=info msg=\"Starting Poller\" \ntime=\"Apr 20 17:57:51\" level=info msg=\"Setting up Server\" \ntime=\"Apr 20 17:57:51\" level=info msg=\"--> Standard listener (http)\" \ntime=\"Apr 20 17:57:51\" level=info msg=\"Loading API Specification from /opt/tyk-gateway/apps/app_sample.json\" \ntime=\"Apr 20 17:57:51\" level=info msg=\"Detected 1 APIs\" \ntime=\"Apr 20 17:57:51\" level=info msg=\"--> Loading API: Tyk Test API\" \ntime=\"Apr 20 17:57:51\" level=info msg=\"----> Tracking: (no host)\" \ntime=\"Apr 20 17:57:51\" level=info msg=\"----> Checking security policy: Token\" \ntime=\"Apr 20 17:57:51\" level=info msg=\"Loading uptime tests...\" \ntime=\"Apr 20 17:57:52\" level=error msg=\"Failed to decode body: json: cannot unmarshal string into Go value of type []main.Policy\" \ntime=\"Apr 20 17:57:52\" level=info msg=\"Gateway started (v2.0.0.0)\" \ntime=\"Apr 20 17:57:52\" level=info msg=\"--> Listening on port: 8080\" \ntime=\"Apr 20 17:58:10\" level=info msg=\"Reloading endpoints\" \ntime=\"Apr 20 17:58:10\" level=info msg=\"Reloading endpoints\" \ntime=\"Apr 20 17:58:10\" level=info msg=\"Reloading endpoints\" \ntime=\"Apr 20 17:58:20\" level=error msg=\"Failed to decode body: json: cannot unmarshal string into Go value of type []main.Policy\" \ntime=\"Apr 20 17:58:20\" level=info msg=\"Loading API Specification from /opt/tyk-gateway/apps/app_sample.json\" \ntime=\"Apr 20 17:58:20\" level=info msg=\"Detected 1 APIs\" \ntime=\"Apr 20 17:58:20\" level=info msg=\"--> Loading API: Tyk Test API\" \ntime=\"Apr 20 17:58:20\" level=info msg=\"----> Tracking: (no host)\" \ntime=\"Apr 20 17:58:20\" level=info msg=\"----> Checking security policy: Token\" \ntime=\"Apr 20 17:58:20\" level=info msg=\"Loading uptime tests...\" \ntime=\"Apr 20 17:58:20\" level=info msg=\"API reload complete\" \ntime=\"Apr 20 17:58:41\" level=info msg=\"Reloading endpoints\" \n. ohh, thanks,  but another error when Add keys, the new log as bleow:\ntime=\"Apr 20 17:58:51\" level=error msg=\"Failed to decode body: json: cannot unmarshal string into Go value of type []main.Policy\" \ntime=\"Apr 20 17:58:51\" level=info msg=\"Loading API Specification from /opt/tyk-gateway/apps/app_sample.json\" \ntime=\"Apr 20 17:58:51\" level=info msg=\"Detected 1 APIs\" \ntime=\"Apr 20 17:58:51\" level=info msg=\"--> Loading API: Tyk Test API\" \ntime=\"Apr 20 17:58:51\" level=info msg=\"----> Tracking: (no host)\" \ntime=\"Apr 20 17:58:51\" level=info msg=\"----> Checking security policy: Token\" \ntime=\"Apr 20 17:58:51\" level=info msg=\"Loading uptime tests...\" \ntime=\"Apr 20 17:58:51\" level=info msg=\"API reload complete\" \ntime=\"Apr 20 18:01:29\" level=info msg=\"Reset quota for key.\" inbound-key=5717c3323841c900010000013b9d872f88934b826d64c9b763aa8adf key=quota-6dca4fd4 \n2016/04/20 18:01:29 http: panic serving 10.0.2.2:61863: runtime error: invalid memory address or nil pointer dereference\ngoroutine 60 [running]:\nnet/http.(_conn).serve.func1(0xc820542680)\n    /usr/local/go/src/net/http/server.go:1389 +0xc1\npanic(0xc55920, 0xc820010090)\n    /usr/local/go/src/runtime/panic.go:426 +0x4e9\nmain.createKeyHandler(0x7feb61656ff8, 0xc8200720d0, 0xc8203680e0)\n    /home/tyk/go/src/github.com/lonelycode/tyk/api.go:1316 +0x141b\nmain.CheckIsAPIOwner.func1(0x7feb61656ff8, 0xc8200720d0, 0xc8203680e0)\n    /home/tyk/go/src/github.com/lonelycode/tyk/middleware_api_security_handler.go:24 +0xe1\nnet/http.HandlerFunc.ServeHTTP(0xc820438550, 0x7feb61656ff8, 0xc8200720d0, 0xc8203680e0)\n    /usr/local/go/src/net/http/server.go:1618 +0x3a\ngithub.com/gorilla/mux.(_Router).ServeHTTP(0xc820335c20, 0x7feb61656ff8, 0xc8200720d0, 0xc8203680e0)\n    /home/tyk/go/src/github.com/gorilla/mux/mux.go:98 +0x29e\nnet/http.(_ServeMux).ServeHTTP(0xc82056c630, 0x7feb61656ff8, 0xc8200720d0, 0xc8203680e0)\n    /usr/local/go/src/net/http/server.go:1910 +0x17d\nnet/http.serverHandler.ServeHTTP(0xc8200a3780, 0x7feb61656ff8, 0xc8200720d0, 0xc8203680e0)\n    /usr/local/go/src/net/http/server.go:2081 +0x19e\nnet/http.(_conn).serve(0xc820542680)\n    /usr/local/go/src/net/http/server.go:1472 +0xf2e\ncreated by net/http.(*Server).Serve\n    /usr/local/go/src/net/http/server.go:2137 +0x44e\n. All config is default from tyk_quickstart docker :)\n. Ok,  I  download the  tyk_quickstart docker, the I have been modify it form db, then retest it,  the log as bleow:\ntime=\"Apr 20 18:12:39\" level=info msg=\"Connection dropped, connecting..\" \ntime=\"Apr 20 18:12:39\" level=warning msg=\"Cache purging is no longer part of Tyk Gateway, please use Tyk-Pump.\" \ntime=\"Apr 20 18:12:39\" level=info msg=\"Starting Poller\" \ntime=\"Apr 20 18:12:39\" level=info msg=\"Setting up Server\" \ntime=\"Apr 20 18:12:39\" level=info msg=\"--> Standard listener (http)\" \ntime=\"Apr 20 18:12:39\" level=info msg=\"Loading API Specification from /opt/tyk-gateway/apps/app_sample.json\" \ntime=\"Apr 20 18:12:39\" level=info msg=\"Detected 1 APIs\" \ntime=\"Apr 20 18:12:39\" level=info msg=\"--> Loading API: Tyk Test API\" \ntime=\"Apr 20 18:12:39\" level=info msg=\"----> Tracking: (no host)\" \ntime=\"Apr 20 18:12:39\" level=info msg=\"----> Checking security policy: Token\" \ntime=\"Apr 20 18:12:39\" level=info msg=\"Loading uptime tests...\" \ntime=\"Apr 20 18:12:39\" level=error msg=\"Failed to decode body: json: cannot unmarshal string into Go value of type []main.Policy\" \ntime=\"Apr 20 18:12:39\" level=info msg=\"Gateway started (v2.0.0.0)\" \ntime=\"Apr 20 18:12:39\" level=info msg=\"--> Listening on port: 8080\" \ntime=\"Apr 20 18:13:34\" level=info msg=\"Reloading endpoints\" \ntime=\"Apr 20 18:13:34\" level=info msg=\"Reloading endpoints\" \ntime=\"Apr 20 18:13:34\" level=info msg=\"Reloading endpoints\" \ntime=\"Apr 20 18:13:44\" level=error msg=\"Failed to decode body: json: cannot unmarshal string into Go value of type []main.Policy\" \ntime=\"Apr 20 18:13:44\" level=info msg=\"Loading API Specification from /opt/tyk-gateway/apps/app_sample.json\" \ntime=\"Apr 20 18:13:44\" level=info msg=\"Detected 1 APIs\" \ntime=\"Apr 20 18:13:44\" level=info msg=\"--> Loading API: Tyk Test API\" \ntime=\"Apr 20 18:13:44\" level=info msg=\"----> Tracking: (no host)\" \ntime=\"Apr 20 18:13:44\" level=info msg=\"----> Checking security policy: Token\" \ntime=\"Apr 20 18:13:44\" level=info msg=\"Loading uptime tests...\" \ntime=\"Apr 20 18:13:44\" level=info msg=\"API reload complete\" \ntime=\"Apr 20 18:14:02\" level=info msg=\"Reloading endpoints\" \ntime=\"Apr 20 18:14:12\" level=error msg=\"Failed to decode body: json: cannot unmarshal string into Go value of type []main.Policy\" \ntime=\"Apr 20 18:14:12\" level=info msg=\"Loading API Specification from /opt/tyk-gateway/apps/app_sample.json\" \ntime=\"Apr 20 18:14:12\" level=info msg=\"Detected 1 APIs\" \ntime=\"Apr 20 18:14:12\" level=info msg=\"--> Loading API: Tyk Test API\" \ntime=\"Apr 20 18:14:12\" level=info msg=\"----> Tracking: (no host)\" \ntime=\"Apr 20 18:14:12\" level=info msg=\"----> Checking security policy: Token\" \ntime=\"Apr 20 18:14:12\" level=info msg=\"Loading uptime tests...\" \ntime=\"Apr 20 18:14:12\" level=info msg=\"API reload complete\" \ntime=\"Apr 20 18:14:32\" level=info msg=\"Reset quota for key.\" inbound-key=5717c6cecd5e5f0001000001ddd70435742a470a440a66bf0205febe key=quota-540d4200 \n2016/04/20 18:14:32 http: panic serving 10.0.2.2:62318: runtime error: invalid memory address or nil pointer dereference\ngoroutine 114 [running]:\nnet/http.(_conn).serve.func1(0xc82055c000)\n    /usr/local/go/src/net/http/server.go:1389 +0xc1\npanic(0xc55920, 0xc820010090)\n    /usr/local/go/src/runtime/panic.go:426 +0x4e9\nmain.createKeyHandler(0x7fd7be97fe68, 0xc82006a0d0, 0xc820346a80)\n    /home/tyk/go/src/github.com/lonelycode/tyk/api.go:1316 +0x141b\nmain.CheckIsAPIOwner.func1(0x7fd7be97fe68, 0xc82006a0d0, 0xc820346a80)\n    /home/tyk/go/src/github.com/lonelycode/tyk/middleware_api_security_handler.go:24 +0xe1\nnet/http.HandlerFunc.ServeHTTP(0xc8202c0970, 0x7fd7be97fe68, 0xc82006a0d0, 0xc820346a80)\n    /usr/local/go/src/net/http/server.go:1618 +0x3a\ngithub.com/gorilla/mux.(_Router).ServeHTTP(0xc820245860, 0x7fd7be97fe68, 0xc82006a0d0, 0xc820346a80)\n    /home/tyk/go/src/github.com/gorilla/mux/mux.go:98 +0x29e\nnet/http.(_ServeMux).ServeHTTP(0xc8202a4a80, 0x7fd7be97fe68, 0xc82006a0d0, 0xc820346a80)\n    /usr/local/go/src/net/http/server.go:1910 +0x17d\nnet/http.serverHandler.ServeHTTP(0xc8201e4580, 0x7fd7be97fe68, 0xc82006a0d0, 0xc820346a80)\n    /usr/local/go/src/net/http/server.go:2081 +0x19e\nnet/http.(_conn).serve(0xc82055c000)\n    /usr/local/go/src/net/http/server.go:1472 +0xf2e\ncreated by net/http.(*Server).Serve\n    /usr/local/go/src/net/http/server.go:2137 +0x44e\n. sorry,  I have been redownload, and clear it, and retest, it is ok,  thanks :) :) :) \n. thanks very much\n. I have seen this problem, each time after several operations are repeated successfully. I continue to focus on this issue.\n. Thanks all, I know the reason, when adding a new API, DGateway cluster to complete 10 seconds to complete, if 10 seconds to create the key about this API,  it will have this problem.. I think to wait for 10 seconds is too long, each time to add or modify an API, you need to slowly read the seconds until 10; wait 10 seconds before you can edit the Policy, to just add the new API.. ok, thanks\n. From tyk gateway source code:\nlog.Debug(\"keyName is: \", keyName)\nnow := time.Now()\nlog.Debug(\"Now is:\", now)\n...\nZADD.Cmd = \"ZADD\"\nZADD.Args = []interface{}{keyName, now.UnixNano(), strconv.Itoa(int(now.UnixNano()))}\nFrom tyk gateway source code to see, if time is 09:00:01 at node1, and the other node2 time is 09:00:10, If I set per 1 second rate limits is 10000,How can you ensure the cluster environment tyk gateway correct speed limit?\n. Ok, thanks, may be use ntpd service to solve it.\n. To Add Key  From dashboard,  it occur this panic;  And I review this code from github as below,  I think thisAPISpec is nil, so this painc have been occur.\nerr := thisSessionManager.UpdateSession(newKey, newSession, thisAPISpec.SessionLifetime)\n. I see,  It have been fixed.    but not dispach a new release v2.3, the new release version is Patch v2.2.0.4 , :)\nerr := thisSessionManager.UpdateSession(newKey, newSession, -1)\n. The same issues, in Go 1.7.3  and Go1.6.2  \n$git:(develop) go build  \ncan't load package: package github.com/TykTechnologies/tyk: C source files not allowed when not using cgo or SWIG: coprocess_python_api.c sds.c\n. @matiasinsaurralde  The  same issues on today by follow command :)\n$ git clone -b develop https://github.com/TykTechnologies/tyk.git\n$ cd tyk\n$ glide init\n$  glide update\n$ go build\ncan't load package: package github.com/TykTechnologies/tyk: C source files not allowed when not using cgo or SWIG: coprocess_python_api.c sds.c\n. @matiasinsaurralde\n$git:(develop) head coprocess_python_api.c\ncoprocess/python/tyk/gateway.c\nWithout use glide,  the same issues,  So what build tags to set ? \n. @matiasinsaurralde  The output as below:\n$ head coprocess/python/tyk/gateway.c\n// +build coprocess\n// +build python\n/* Generated by Cython 0.24.1 */\n/* BEGIN: Cython Metadata\n{\n    \"distutils\": {\n        \"depends\": []\n    },\n. @matiasinsaurralde   I am sure the GOROOT is right,  The latest GOROOT match with Go1.7.3\n. :)  This issue can't sink\n. @lonelycode \nThe same issues, in Go 1.7.3 and Go1.6.2\n$git:(develop) go build\ncan't load package: package github.com/TykTechnologies/tyk: C source files not allowed when not using cgo or SWIG: coprocess_python_api.c sds.c\n. For this issues, may be sink forever and always.  :) \n. I have been update the most up-to-date version of the Tyk repo,  it is ok, thanks. . I have check you code,  may be package leakybucket.Storage  have issue.  :) \n. OK, Thanks @lonelycode \n. I know, Q&A will use the community forum for questions.\nOK, you answer is very nice, i see.\n. @lonelycode \nOh, this question for  community forum as also, I know\nYou mean that the Listen Path is the same case, Custom Domain (do not include 'http: //' or 'https: //') can be filled differently for different users (different organizations)\n. Thanks very much @lonelycode , I first try\n. @lonelycode \nThe same issue as following when the domains are different. :)\n`[Oct 28 18:03:01] ERROR main: Duplicate listen path found, skipping. API ID:\naff8ccba9cf511e6a0fe080027b4ee30\n[Oct 28 18:03:01]  WARN main: ----> Skipped!  `\n. I know, I must to config enable_custom_domains is true  :)\n. @james-tyk\nOK\n. Sorry, I have been forgot, Thanks @james-tyk, I will post this topic to the community.tyk.io.\n. @matiasinsaurralde    Yes,   This version is develop,  I have bee check, Tyk code is too old for package lonelycode/logrus-graylog-hook\n. @matiasinsaurralde  The package Jose  and logrus  have been update, so the Tyk couldn't compile. \n. @buger  Glide a cache; do not worry about each download, people cooperation, it is too great, is currently I used the best tool; others tyk cloning down, just glide install, ok; believe me.. @buger  When using the glide version management tool, You do not need to upload the vendor directory, The vender directory is too large.. Great, I also feel the current tyk rate limit is too single, IP rate limiting and API rate limiting are particularly good features;   my own branch has implemented the API rate limiting feature and is validating it.. @lonelycode  Okay, I'm sure everything is ok and share it again.. I through the dashboard to create a key. if apiSpec != nil   //  From this line of code speculation that the API was successfully loaded by the gateway\nThe code as below: \napiSpec := GetSpecForApi(apiId)\nif apiSpec != nil {   \n    checkAndApplyTrialPeriod(newKey, apiId, &newSession)\n    // If we have enabled HMAC checking for keys, we need to generate a secret for the client to use\n    if !apiSpec.DontSetQuotasOnCreate {\n        // Reset quota by default\n        apiSpec.SessionManager.ResetQuota(newKey, newSession)\n        newSession.QuotaRenews = time.Now().Unix() + newSession.QuotaRenewalRate\n}\n. This panic is reported from the http package. @mvdan   For  Go 1.7.5,  the tyk version 2.3.3  has the same issue.. @lonelycode,  the file auth_manager.go,  as below: \n```package main\nimport (\n    \"encoding/base64\"\n    \"encoding/json\"\n    \"strings\"\n    \"time\"\n\"github.com/nu7hatch/gouuid\"\n\n\"github.com/TykTechnologies/logrus\"\n\n)\n// AuthorisationHandler is used to validate a session key,\n// implementing IsKeyAuthorised() to validate if a key exists or\n// is valid in any way (e.g. cryptographic signing etc.). Returns\n// a SessionState object (deserialised JSON)\ntype AuthorisationHandler interface {\n    Init(StorageHandler)\n    IsKeyAuthorised(string) (SessionState, bool)\n    IsKeyExpired(*SessionState) bool\n}\n// SessionHandler handles all update/create/access session functions and deals exclusively with\n// SessionState objects, not identity\ntype SessionHandler interface {\n    Init(store StorageHandler)\n    UpdateSession(keyName string, session SessionState, resetTTLTo int64) error\n    RemoveSession(keyName string)\n    GetSessionDetail(keyName string) (SessionState, bool)\n    GetSessions(filter string) []string\n    GetStore() StorageHandler\n    ResetQuota(string, SessionState)\n}\n// DefaultAuthorisationManager implements AuthorisationHandler,\n// requires a StorageHandler to interact with key store\ntype DefaultAuthorisationManager struct {\n    Store StorageHandler\n}\ntype DefaultSessionManager struct {\n    Store StorageHandler\n}\nfunc (b *DefaultAuthorisationManager) Init(store StorageHandler) {\n    b.Store = store\n    b.Store.Connect()\n}\n// IsKeyAuthorised checks if key exists and can be read into a SessionState object\nfunc (b *DefaultAuthorisationManager) IsKeyAuthorised(keyName string) (SessionState, bool) {\n    jsonKeyVal, err := b.Store.GetKey(keyName)\n    var newSession SessionState\n    if err != nil {\n        log.WithFields(logrus.Fields{\n            \"prefix\":      \"auth-mgr\",\n            \"inbound-key\": ObfuscateKeyString(keyName),\n            \"err\":         err,\n        }).Warning(\"Key not found in storage engine\")\n        return newSession, false\n    }\nif err := json.Unmarshal([]byte(jsonKeyVal), &newSession); err != nil {\n    log.Error(\"Couldn't unmarshal session object: \", err)\n    return newSession, false\n}\n\nnewSession.SetFirstSeenHash()\nreturn newSession, true\n\n}\n// IsKeyExpired checks if a key has expired, if the value of SessionState.Expires is 0, it will be ignored\nfunc (b DefaultAuthorisationManager) IsKeyExpired(newSession SessionState) bool {\n    if newSession.Expires >= 1 {\n        return time.Now().After(time.Unix(newSession.Expires, 0))\n    }\n    return false\n}\nfunc (b *DefaultSessionManager) Init(store StorageHandler) {\n    b.Store = store\n    b.Store.Connect()\n}\nfunc (b *DefaultSessionManager) GetStore() StorageHandler {\n    return b.Store\n}\nfunc (b *DefaultSessionManager) ResetQuota(keyName string, session SessionState) {\nrawKey := QuotaKeyPrefix + publicHash(keyName)\nlog.WithFields(logrus.Fields{\n    \"prefix\":      \"auth-mgr\",\n    \"inbound-key\": ObfuscateKeyString(keyName),\n    \"key\":         rawKey,\n}).Info(\"Reset quota for key.\")\n\nrateLimiterSentinelKey := RateLimitKeyPrefix + publicHash(keyName) + \".BLOCKED\"\n// Clear the rate limiter\ngo b.Store.DeleteRawKey(rateLimiterSentinelKey)\n// Fix the raw key\ngo b.Store.DeleteRawKey(rawKey)\n//go b.Store.SetKey(rawKey, \"0\", session.QuotaRenewalRate)\n\n}\n// UpdateSession updates the session state in the storage engine\nfunc (b *DefaultSessionManager) UpdateSession(keyName string, session SessionState, resetTTLTo int64) error {\n    if !session.HasChanged() {\n        log.Debug(\"Session has not changed, not updating\")\n        return nil\n    }\nv, _ := json.Marshal(session)\n\n// Keep the TTL\nif config.UseAsyncSessionWrite {\n    go b.Store.SetKey(keyName, string(v), resetTTLTo)\n    return nil\n}\nreturn b.Store.SetKey(keyName, string(v), resetTTLTo)\n\n}\nfunc (b *DefaultSessionManager) RemoveSession(keyName string) {\n    b.Store.DeleteKey(keyName)\n}\n// GetSessionDetail returns the session detail using the storage engine (either in memory or Redis)\nfunc (b *DefaultSessionManager) GetSessionDetail(keyName string) (SessionState, bool) {\n    jsonKeyVal, err := b.Store.GetKey(keyName)\n    var session SessionState\n    if err != nil {\n        log.WithFields(logrus.Fields{\n            \"prefix\":      \"auth-mgr\",\n            \"inbound-key\": ObfuscateKeyString(keyName),\n            \"err\":         err,\n        }).Debug(\"Could not get session detail, key not found\")\n        return session, false\n    }\nif err := json.Unmarshal([]byte(jsonKeyVal), &session); err != nil {\n    log.Error(\"Couldn't unmarshal session object (may be cache miss): \", err)\n    return session, false\n}\n\nsession.SetFirstSeenHash()\n\nreturn session, true\n\n}\n// GetSessions returns all sessions in the key store that match a filter key (a prefix)\nfunc (b *DefaultSessionManager) GetSessions(filter string) []string {\n    return b.Store.GetKeys(filter)\n}\ntype DefaultKeyGenerator struct {\n}\n// GenerateAuthKey is a utility function for generating new auth keys. Returns the storage key name and the actual key\nfunc (b *DefaultKeyGenerator) GenerateAuthKey(OrgID string) string {\n    u5, _ := uuid.NewV4()\n    cleanSting := strings.Replace(u5.String(), \"-\", \"\", -1)\n    newAuthKey := expandKey(OrgID, cleanSting)\nreturn newAuthKey\n\n}\n// GenerateHMACSecret is a utility function for generating new auth keys. Returns the storage key name and the actual key\nfunc (b *DefaultKeyGenerator) GenerateHMACSecret() string {\n    u5, _ := uuid.NewV4()\n    cleanSting := strings.Replace(u5.String(), \"-\", \"\", -1)\n    newSecret := base64.StdEncoding.EncodeToString([]byte(cleanSting))\nreturn newSecret\n\n}\n```. @lonelycode   No,  I can't to modify it.. @lonelycode \nYes, I have just only compiling tyk code and causing this error.\nI haven't tried the tyk packages version from github release. . @mvdan  No, I still use the old release version.. @mvdan   I agree with your opinion. I think it's complicated.. I see, thanks. @mvdan . @mvdan  Master builds fine on Go 1.8.3 . The author has replied:  https://github.com/rs/cors/issues/36#issuecomment-309226291. @joshblakeley  Is there support for the token bucket limiter algorithm?. @joshblakeley  Thanks . ",
    "kjaskiewiczz": "I would suggest two possible solutions:\n1. Modify HeaderInjector response processor and change its name to HeaderTransorm (leave \"header_injector\" pointing to new HeaderTransform for backward compatibility).\n2. Add new response processor - \"header_transform\": HeaderTransform{}.\nIn both cases HeaderTransform need to be able to modify header fields (like changing paths in Link and Location headers) according to its configuration (options).\nI could send pull request with one of this solutions implemented, but I need to know which one is preferable.\n. https://github.com/TykTechnologies/tyk/pull/255\nPull request was merged, so this issue could be closed, I think.\n. ",
    "NadaBen": "is the dashboard will be integrated in a bundle, how to do that ? \n. I want to develop a dashboard for the admin of my api and an other for users, i do not know if can add tyk dashboard with symfony to realize that \n. so, can i let tyk api gateway manage my actual api ?\n. Okey Thank you \n. ",
    "alexforever86": "I think gateway and dashboard is not able to communicate with each other or with MongoDB or redis elasticache. \nDashboard logs:\n```\ntime=\"Jun  6 10:55:35\" level=info msg=\"Using /opt/tyk-dashboard/tyk_analytics.conf for configuration\" \ntime=\"Jun  6 10:55:35\" level=info msg=\"Creating new Redis connection pool\" \ntime=\"Jun  6 10:55:35\" level=info msg=\"Creating new Redis connection pool\" \ntime=\"Jun  6 10:55:35\" level=info msg=\"Creating new Redis connection pool\" \ntime=\"Jun  6 10:55:35\" level=info msg=\"Creating new Redis connection pool\" \ntime=\"Jun  6 10:55:35\" level=info msg=\"Adding available nodes...\" \ntime=\"Jun  6 10:55:35\" level=info msg=\"Tyk Analytics Dashboard 1.1.0.0\" \ntime=\"Jun  6 10:55:35\" level=info msg=\"Copyright Martin Buhr 2016\" \ntime=\"Jun  6 10:55:35\" level=info msg=\"https://www.tyk.io\" \ntime=\"Jun  6 10:55:35\" level=info msg=\"Listening on port: 3000\" \ntime=\"Jun  6 10:55:35\" level=info msg=\"Loading routes...\" \ntime=\"Jun  6 10:55:35\" level=info msg=\"Registering nodes...\" \ntime=\"Jun  6 10:55:35\" level=info msg=\"Creating new Redis connection pool\" \ntime=\"Jun  6 10:55:35\" level=info msg=\"Adding available nodes...\" \ntime=\"Jun  6 10:55:35\" level=info msg=\"Socket server started\" \ntime=\"Jun  6 10:55:35\" level=info msg=\"--> Standard listener (http)\" \ntime=\"Jun  6 10:55:38\" level=error msg=\"Failure in org lookup\" \ntime=\"Jun  6 10:55:38\" level=error msg=\"not found\" \ntime=\"Jun  6 10:57:07\" level=error msg=\"Nonce failed! Node:d1680fa1-12db-4f7a-57e4-d6e41c5b417f Nonce was:ZDE2ODBmYTEtMTJkYi00ZjdhLTU3ZTQtZDZlNDFjNWI0MTdmOGQzY2YwYTBlYjEzNDgwMTZjNGUyOGMyNjE4ODAxZDk= Should be: ZDE2ODBmYTEtMTJkYi00ZjdhLTU3ZTQtZDZlNDFjNWI0MTdmNmQ1OTgwMWY5YjU1NDkzZTQ2NWVjNjhjNTU4ZDkwZmU=\" \ntime=\"Jun  6 11:11:44\" level=error msg=\"Failure in org lookup\" \ntime=\"Jun  6 11:11:44\" level=error msg=\"not found\" \ntime=\"Jun  6 11:14:32\" level=error msg=\"Failure in org lookup\" \ntime=\"Jun  6 11:14:32\" level=error msg=\"not found\" \ntime=\"Jun  6 11:14:32\" level=error msg=\"Failure in org lookup\" \ntime=\"Jun  6 11:14:32\" level=error msg=\"not found\" \ntime=\"Jun  6 11:14:32\" level=error msg=\"Couldn't retrieve organisation!\" \ntime=\"Jun  6 11:14:32\" level=error msg=\"Failed tp update register!\" \ntime=\"Jun  6 11:15:06\" level=warning msg=\"Failed to retrieve object: not found\" \ntime=\"Jun  6 11:15:38\" level=warning msg=\"User pasword is empty! Please reset!\" \ntime=\"Jun  6 11:15:38\" level=info msg=\"New user session created\" \ntime=\"Jun  6 11:15:42\" level=info msg=\"Sending notification{ApiUpdated d30297bb4510474856ade1274859dad6}\" \ntime=\"Jun  6 11:15:42\" level=info msg=\"Sending notification{ApiUpdated c12f1adf0cdf46cc69c41d3b000bb715}\" \ntime=\"Jun  6 11:15:42\" level=info msg=\"Sending notification{ApiUpdated d11a08c74e13409d43b0cbe8e5f2d2c5}\" \ntime=\"Jun  6 11:17:14\" level=info msg=\"New user session created\" \ntime=\"Jun  6 11:17:37\" level=info msg=\"Sending notification{ApiUpdated 17fc4124d60742bb63b37affd25f8e76}\" \ntime=\"Jun  6 11:17:47\" level=error msg=\"Something went wrong, couldn't get Api list\" \ntime=\"Jun  6 11:17:47\" level=error msg=\"read tcp 172.17.0.2:34882->1.1.1.1:27017: read: connection reset by peer\" \ntime=\"Jun  6 11:17:47\" level=info msg=\"Attempting to reconnect\" \ntime=\"Jun  6 11:18:07\" level=error msg=\"No nodes available\" \ntime=\"Jun  6 11:18:12\" level=error msg=\"No nodes available\" \ntime=\"Jun  6 11:18:17\" level=error msg=\"No nodes available\" \ntime=\"Jun  6 11:18:22\" level=error msg=\"No nodes available\" \ntime=\"Jun  6 11:18:27\" level=error msg=\"No nodes available\" \ntime=\"Jun  6 11:18:32\" level=error msg=\"No nodes available\" \ntime=\"Jun  6 11:18:37\" level=error msg=\"No nodes available\" \ntime=\"Jun  6 11:18:42\" level=error msg=\"No nodes available\" \ntime=\"Jun  6 11:18:47\" level=error msg=\"No nodes available\" \ntime=\"Jun  6 11:18:52\" level=error msg=\"No nodes available\" \ntime=\"Jun  6 11:18:57\" level=error msg=\"No nodes available\" \ntime=\"Jun  6 11:19:02\" level=error msg=\"No nodes available\" \ntime=\"Jun  6 11:19:07\" level=error msg=\"No nodes available\" \ntime=\"Jun  6 11:19:12\" level=error msg=\"No nodes available\" \ntime=\"Jun  6 11:19:17\" level=error msg=\"No nodes available\" \ntime=\"Jun  6 11:19:22\" level=error msg=\"No nodes available\" \ntime=\"Jun  6 11:19:27\" level=error msg=\"No nodes available\" \ntime=\"Jun  6 11:34:32\" level=error msg=\"Failed to create key: Post http://1.1.1.1:3001/tyk/keys/create: EOF\" \ntime=\"Jun  6 11:34:32\" level=warning msg=\"Failed create:Failed to create key: Post http://1.1.1.1:3001/tyk/keys/create: EOF\" \ntime=\"Jun  6 11:34:32\" level=error msg=\"Failed to save new session object to Tyk: Failed to create key: Post http://1.1.1.1:3001/tyk/keys/create: EOF\" \n```\n. Gateway logs: \ntime=\"Jun  6 10:57:07\" level=info msg=\"Connection dropped, connecting..\" \ntime=\"Jun  6 10:57:07\" level=warning msg=\"Cache purging is no longer part of Tyk Gateway, please use Tyk-Pump.\" \ntime=\"Jun  6 10:57:07\" level=info msg=\"Starting Poller\" \ntime=\"Jun  6 10:57:07\" level=info msg=\"Setting up Server\" \ntime=\"Jun  6 10:57:07\" level=info msg=\"--> Standard listener (http)\" \ntime=\"Jun  6 10:57:07\" level=info msg=\"Registering node.\" \ntime=\"Jun  6 10:57:07\" level=info msg=\"Node registered\" id=d1680fa1-12db-4f7a-57e4-d6e41c5b417f \ntime=\"Jun  6 10:57:07\" level=info msg=\"Starting heartbeat.\" \ntime=\"Jun  6 10:57:07\" level=info msg=\"Detected 0 APIs\" \ntime=\"Jun  6 10:57:07\" level=info msg=\"Loading uptime tests...\" \ntime=\"Jun  6 10:57:07\" level=error msg=\"Failed to decode body: json: cannot unmarshal string into Go value of type []main.DBPolicy\" \ntime=\"Jun  6 10:57:07\" level=info msg=\"Gateway started (v2.1.0.2)\" \ntime=\"Jun  6 10:57:07\" level=info msg=\"--> Listening on port: 8080\" \ntime=\"Jun  6 11:15:42\" level=info msg=\"Reloading endpoints\" \ntime=\"Jun  6 11:15:42\" level=info msg=\"Initiating reload\" \ntime=\"Jun  6 11:15:42\" level=info msg=\"Reloading endpoints\" \ntime=\"Jun  6 11:15:42\" level=info msg=\"Reloading endpoints\" \ntime=\"Jun  6 11:15:52\" level=info msg=\"Detected 4 APIs\" \ntime=\"Jun  6 11:15:52\" level=info msg=\"--> Loading API: Portal Assets\" \ntime=\"Jun  6 11:15:52\" level=info msg=\"----> Tracking: store-prod-agent-elb-665374692.ap-northeast-1.elb.amazonaws.com\" \ntime=\"Jun  6 11:15:52\" level=info msg=\"----> Checking security policy: Open\" \ntime=\"Jun  6 11:15:52\" level=info msg=\"--> Loading API: Portal API\" \ntime=\"Jun  6 11:15:52\" level=info msg=\"----> Tracking: store-prod-agent-elb-665374692.ap-northeast-1.elb.amazonaws.com\" \ntime=\"Jun  6 11:15:52\" level=info msg=\"----> Checking security policy: Open\" \ntime=\"Jun  6 11:15:52\" level=info msg=\"--> Loading API: Portal\" \ntime=\"Jun  6 11:15:52\" level=info msg=\"----> Tracking: store-prod-agent-elb-665374692.ap-northeast-1.elb.amazonaws.com\" \ntime=\"Jun  6 11:15:52\" level=info msg=\"----> Checking security policy: Open\" \ntime=\"Jun  6 11:15:52\" level=info msg=\"--> Loading API: test api\" \ntime=\"Jun  6 11:15:52\" level=info msg=\"----> Tracking: (no host)\" \ntime=\"Jun  6 11:15:52\" level=info msg=\"----> Checking security policy: Token\" \ntime=\"Jun  6 11:15:52\" level=info msg=\"Loading uptime tests...\" \ntime=\"Jun  6 11:15:52\" level=info msg=\"API reload complete\" \ntime=\"Jun  6 11:17:37\" level=info msg=\"Reloading endpoints\" \ntime=\"Jun  6 11:17:37\" level=info msg=\"Initiating reload\" \ntime=\"Jun  6 11:17:47\" level=error msg=\"Failed to decode body: json: cannot unmarshal string into Go value of type []main.ResponseStruct\" \ntime=\"Jun  6 11:17:47\" level=info msg=\"--> Retrying in 20s\" \ntime=\"Jun  6 11:18:07\" level=warning msg=\"Reloader timed out! Removing sentinel\" \ntime=\"Jun  6 11:18:07\" level=info msg=\"Registering node.\" \ntime=\"Jun  6 11:18:07\" level=error msg=\"Failed to register node, retrying in 5s\" \ntime=\"Jun  6 11:18:12\" level=error msg=\"Failed to register node, retrying in 5s\" \ntime=\"Jun  6 11:18:17\" level=error msg=\"Failed to register node, retrying in 5s\" \ntime=\"Jun  6 11:33:18\" level=warning msg=\"Key not found in storage engine\" err=\"Key not found\" inbound-key=null \ntime=\"Jun  6 11:33:18\" level=info msg=\"Attempted access with non-existent key.\" key=null origin=172.17.0.1 path=\"/test-api/get\" \n2016/06/06 11:34:25 http: panic serving 10.0.2.140:42502: runtime error: invalid memory address or nil pointer dereference\ngoroutine 241 [running]:\nnet/http.(*conn).serve.func1(0xc820206480)\n    /usr/local/go/src/net/http/server.go:1389 +0xc1\npanic(0xc90e00, 0xc8200120c0)\n    /usr/local/go/src/runtime/panic.go:426 +0x4e9\nmain.createKeyHandler(0x7f28867eb5d8, 0xc82012eb60, 0xc82038b180)\n    /home/tyk/go/src/github.com/lonelycode/tyk/api.go:1315 +0x141b\nmain.CheckIsAPIOwner.func1(0x7f28867eb5d8, 0xc82012eb60, 0xc82038b180)\n    /home/tyk/go/src/github.com/lonelycode/tyk/middleware_api_security_handler.go:24 +0xe1\nnet/http.HandlerFunc.ServeHTTP(0xc8200fccd0, 0x7f28867eb5d8, 0xc82012eb60, 0xc82038b180)\n    /usr/local/go/src/net/http/server.go:1618 +0x3a\ngithub.com/gorilla/mux.(*Router).ServeHTTP(0xc8203085a0, 0x7f28867eb5d8, 0xc82012eb60, 0xc82038b180)\n    /home/tyk/go/src/github.com/gorilla/mux/mux.go:98 +0x29e\nnet/http.(*ServeMux).ServeHTTP(0xc8204d5170, 0x7f28867eb5d8, 0xc82012eb60, 0xc82038b180)\n    /usr/local/go/src/net/http/server.go:1910 +0x17d\nnet/http.serverHandler.ServeHTTP(0xc8203c4300, 0x7f28867eb5d8, 0xc82012eb60, 0xc82038b180)\n    /usr/local/go/src/net/http/server.go:2081 +0x19e\nnet/http.(*conn).serve(0xc820206480)\n    /usr/local/go/src/net/http/server.go:1472 +0xf2e\ncreated by net/http.(*Server).Serve\n    /usr/local/go/src/net/http/server.go:2137 +0x44e\ntime=\"Jun  6 11:34:28\" level=error msg=\"Failed to register node, retrying in 5s\" \ntime=\"Jun  6 11:34:29\" level=info msg=\"Reset quota for key.\" inbound-key=57555b59e15737000100000354bfd8f0a41747854b9c2ab7722f3bf7 key=quota-5d45d082\n. @lonelycode, it would be great if you could take a look at this. \n. @lonelycode \nCreated the Key for a simple API just created.\nThe gateway and dashboard instances are docker containers in a cluster and I checked connection between gateway and dashboard from each of the containers. \nThere is only 1 instance of gateway. But, I have been re-installing Tyk components multiple times. \nIf you meant admin user by super user, yes, I created the API, token etc as a super user. Could you please elaborate on \"you get wierd behaviour if you create things as a super user, they are for monitoring only.\"\nAlso, I have been trying to understand the errors. \nFrom Dashboard log\n1) What does \"Nonce failed! Node:d1680fa1-12db-4f7a-57e4-d6e41c5b417f Nonce was:ZDE....= Should be: ZDE2O.........kwZmU=\" means?\n2) \ntime=\"Jun  6 11:34:32\" level=error msg=\"Failed to create key: Post http://1.1.1.1:3001/tyk/keys/create: EOF\" \ntime=\"Jun  6 11:34:32\" level=warning msg=\"Failed create:Failed to create key: Post http://1.1.1.1:3001/tyk/keys/create: EOF\" \ntime=\"Jun  6 11:34:32\" level=error msg=\"Failed to save new session object to Tyk: Failed to create key: Post http://1.1.1.1:3001/tyk/keys/create: EOF\"\nDoes this mean any communication issues (b/w dashboard & gateway or b\\w dashboard & mongodb/redis)?\n3) In log, \"Registering nodes...\" , means dashboard node is registered. And later \"No nodes available\" means something happened to the the registered node. Does this mean connectivity issue between dashboard and gateway?\n- From gateway log*\n  4) Initial error log from gateway is msg=\"Failed to decode body: json: cannot unmarshal string into Go value of type []main.DBPolicy\". What could be the reason for this?\n5) Does error http: panic serving 10.0.2.140:42502: runtime error: invalid memory address or nil pointer dereference means a connectivity issue with redis?\nAlso, I have another queries. Please give a quick response. \n- We are using MongoDB for storing analytical data only. right? So, can we run Tyk without MongoDB?\n@lonelycode  Appreciate very much for your help\n. By the way, I created the user under an organisation using the initial script in repo. So, I guess it wasn't a super user.\n. Just adding...\nKey creation succeeded once. No idea, how it happened. Following error were shown in UI for the rest of the tries.\nFailed to save new session object to Tyk: Failed to create key: Post http://1.1.1.1:3001/tyk/keys/create: EOF\nAnd this caused because of an error in gateway while handling the request (Post http://1.1.1.1:3001/tyk/keys/create) from dashboard\nSee the gateway log.\n```\ntime=\"Jun  6 15:16:40\" level=info msg=\"Reset quota for key.\" inbound-key=57555b59e1573700010000032199403b060a471179a28396187d8a87 key=quota-ad22e073 \n2016/06/06 15:16:40 http: panic serving 10.0.2.138:40934: runtime error: invalid memory address or nil pointer dereference\ngoroutine 258 [running]:\nnet/http.(conn).serve.func1(0xc820312a00)\n    /usr/local/go/src/net/http/server.go:1389 +0xc1\npanic(0xc90e00, 0xc8200120c0)\n    /usr/local/go/src/runtime/panic.go:426 +0x4e9\nmain.createKeyHandler(0x7f3197583a28, 0xc82006a270, 0xc8202f02a0)\n    /home/tyk/go/src/github.com/lonelycode/tyk/api.go:1315 +0x141b\nmain.CheckIsAPIOwner.func1(0x7f3197583a28, 0xc82006a270, 0xc8202f02a0)\n    /home/tyk/go/src/github.com/lonelycode/tyk/middleware_api_security_handler.go:24 +0xe1\nnet/http.HandlerFunc.ServeHTTP(0xc8202c3100, 0x7f3197583a28, 0xc82006a270, 0xc8202f02a0)\n    /usr/local/go/src/net/http/server.go:1618 +0x3a\ngithub.com/gorilla/mux.(Router).ServeHTTP(0xc82023cf00, 0x7f3197583a28, 0xc82006a270, 0xc8202f02a0)\n    /home/tyk/go/src/github.com/gorilla/mux/mux.go:98 +0x29e\nnet/http.(ServeMux).ServeHTTP(0xc82057d800, 0x7f3197583a28, 0xc82006a270, 0xc8202f02a0)\n    /usr/local/go/src/net/http/server.go:1910 +0x17d\nnet/http.serverHandler.ServeHTTP(0xc8202f2380, 0x7f3197583a28, 0xc82006a270, 0xc8202f02a0)\n    /usr/local/go/src/net/http/server.go:2081 +0x19e\nnet/http.(conn).serve(0xc820312a00)\n    /usr/local/go/src/net/http/server.go:1472 +0xf2e\ncreated by net/http.(*Server).Serve\n    /usr/local/go/src/net/http/server.go:2137 +0x44e\n``\n. @roryblucky For me, it was an issue related to Tyk setup in DC/OS. I fixed this with runningsudo sysctl -w net.netfilter.nf_conntrack_tcp_be_liberal=1` on my CoreOS machine.\n. @roryblucky The core reason was that my gateway wasn't able to communicate with the dashboard. You need to see if this is the case with you as well. Trying pinging your dashboard from within your gateway container and vice versa.\n. ",
    "roryblucky": "I met same error with alexraju. From my side, the api-gateway and dashboard  are on the same machine. I followed the official docs to install them. Any ideas?\n@lonelycode it would be great if you could take a look at this\n. @alexraju Thanks for you help,but it seems not wok for me. :(\nMy env is  ubuntu 14.04 LTS on Azure cloud\n. @alexraju @james-tyk The weird thing is the dash and api gateway are on the same machine, and the urls are 127.0.0.1:3000 127.0.0.1:8080, I am confused that why they cannot see each other??\nthank for your remind, I will post the questions to the community later if we cannot fix it. :0\n. ",
    "james-tyk": "Hi @roryblucky \nYou will likely find the answer here: https://community.tyk.io/search?q=Failed%20to%20create%20key\nTypically this is because, as @alexraju suggested, the gateway and dash can't see each other.\nFor support/queries, I'd suggest using community.tyk.io, its free, there is a large and very smart community present and the Tyk team get involved too.\nWe try to keep Github for bugs, etc.\nThanks\nJames@tyk.io\n. Hi @onimusa81 - you can get support and advice on tyk from the community at https://community.tyk.io/\nWe like to keep Github as the place for contributing to the project or reporting bugs. For everything else we have the community forums and the documentation at tyk.io\nHope that helps.\n. Just a note @ChristianCiach - Tyk dashboard is free for a single-gateway deployment, even for commercial use in production, so you can use the dashboard as part of your evaluation if you wish. . Thanks @ChristianCiach - we'll look at updating that in the docs! \nWould you be able to drop me an email on James@tyk.io with a couple of details about your use-case, etc, so we can log your details and ensure we provide good service in the future?\nAlso, we offer a range of options for larger/commercial deployments, including licences for managing multi-gateway deployments and support SLA services. \nI'd be happy to provide details of those for your reference at the same time.\nJames@tyk.io. Hi\nThis looks like a configuration issue - first post questions in community.tyk.io so you can work with people to troubleshoot and establish whether its a configuration issue or a bug.\nIf a bug is identified, then use github, but otherwise community.tyk.io is the place to start\nThanks\nJames\n. Hi\nAs a support request, this should be posted to community.tyk.io - we try to keep Github for engineering topics.\nPlease post it there and someone will get back to you.\n. Hi, thanks for posting.\nThe docker quickstart doesn't reflect an \"in production\" deployment. Its offered as a way to quickly deploy Tyk and get a feel for the software and uses various workarounds to make the quickstart simple, but these workarounds are at the expense of performance and scaling.  Our benchmarks can easily be met by following the guidance in this tutorial: https://tyk.io/tyk-documentation/deploy-tyk-premise-production/\nFor quick guidance on getting Tyk deployed with Docker and at scale you can reach out to the Tyk team and users via community.tyk.io\nIf its a commercial POC, you could also drop a line to info@tyk.io and ask for some pre-sales support from the Tyk solutions architects and engineers.. @mattfarina\nPython is only needed if you are rolling your own python middleware plugin\nFor some more info on available tyk packages : https://tyk.io/get-tyk-on-premise/\n. Hi - please visit https://community.tyk.io/ and post your query there. Or search the forum for a potential answer from other users.\nJames. Hi @Preravana - this ticket is about adding encryption to key notifications.  \nTyk (in docker) can send notifications, you can find details for that in the documentation here : https://tyk.io/docs/publish/portal-events-notifications/\nPlease note that support queries, should be directed to community.tyk.io or via your paid support account, our Github presence is for feature requests / bug reports, not tech support.. ",
    "yasseur1007": "I know that keys are already prefixed but as i said i want to add a custom prefix in addition to the tyk prefix. imagine you have two different tyks, we don't want them to use the same keys.\n. Exactly:\nI use kubernetes for microservices. Each micro service is on a POD.\nOn the same POD we want to embed a little Tyk (for responsability concern and migrations /rollbacks of configs etc...)\nThe problem is that we have to much services and since tyk do not allow custom key prefix we have to dedicate a hole redis db for each tyk.\nBut if you think this is not a good idea to embed a little tyk with each services tell me.\n. For my implementation, Each tyk has to be completely isolated. Each services has the responsibility on itself and not more.\nSo, I don't know... if i authenticate using the same JWT on the two tyks will it have a conflict on redis keys?\n. > Hummm sorry it wasn't a good example because in my case we have to auth for each service  independently. (The secret is different)\nIn fact i don't know all redis keys used by tyk but yes on the JWT we inject policy claim that may be the same between each services. But that behaves not the same way on each service.\n. ",
    "susanlie": "i hope the @lonelycode dan help me \ud83d\ude04 \n. thx for the respon, i have googling, but i have not found any solution, and i have configured from the first step, every step succesfully, except step to create a key, and just give me message 'failed'\n. how to check the misconfigured on my dashboard? because i have follow the instruction from the first, and everything is fine.\n. i have follow the instruction, everything is fine\ndevelopers-MacBook-Pro:tyk_quickstart developer$ curl -H \"Authorization: null\" http://192.168.99.100:8080/test-api/get\n{\n    \"error\": \"Key not authorised\"\n}developers-MacBook-Pro:tyk_quickstart developer$ curl -H \"Authorization: null\" ttp://192.168.99.100/test-api/get\n{\n    \"error\": \"Key not authorised\"\n}\nand the next step is create a \"Key\"\n. i have run on docker quickstart terminal, \ndocker is configured to use the default machine with IP 192.168.99.100\nFor help getting started, check out the docs at https://docs.docker.com\ndevelopers-MacBook-Pro:~ developer$ cd kalibataCamp/belajarTykIo/tyk_quickstart/\ndevelopers-MacBook-Pro:tyk_quickstart developer$ docker-compose up -d --force-recreate\nRecreating tykquickstart_tyk_mongo_1\nRecreating tykquickstart_tyk_redis_1\nRecreating tykquickstart_tyk_dashboard_1\nRecreating tykquickstart_tyk_gateway_1\nRecreating tykquickstart_tyk_pump_1\ndevelopers-MacBook-Pro:tyk_quickstart developer$ ./setup.sh\nDetected a Docker VM...\nUsing 192.168.99.100 as Tyk host address.\nIf this is wrong, please specify the instance IP address (e.g. ./setup.sh 192.168.1.1)\nCreating Organisation\nORG ID: 5768edaf44e2370001000001\nAdding new user\nUSER AUTH: 634e328e259840185f4f4559235126eb\nUSER ID: 5768edaf5aab11b58453795e\nSetting password\nSetting up the portal domain\nSetting up the Portal catalogue\nSetting target URL for Portal APIs\nCreating the Portal Home page\nDONE\nLogin at http://192.168.99.100:3000/\nUsername: test10522@test.com\nPassword: test123\nPortal: http://www.tyk-portal-test.com/portal/\n. ",
    "chlab": "Fair enough, makes sense :)\n. ",
    "kburdett": "I'm not sure what you mean by file based, but I've been configuring it through the Dashboard HTTP API.\nHere's the definition according to the Dashboard's REST API:\njson\n{\n  \"api_model\": {},\n  \"api_definition\": {\n    \"id\": \"5764679a031e6e19f6000014\",\n    \"name\": \"Vortex Report API\",\n    \"slug\": \"vortex-api-report\",\n    \"api_id\": \"87488b24c59d494477361a656eaff978\",\n    \"org_id\": \"5761aa18031e6e191f000001\",\n    \"use_keyless\": false,\n    \"use_oauth2\": false,\n    \"use_openid\": false,\n    \"openid_options\": {\n      \"providers\": [],\n      \"segregate_by_client\": false\n    },\n    \"oauth_meta\": {\n      \"allowed_access_types\": [],\n      \"allowed_authorize_types\": [],\n      \"auth_login_redirect\": \"\"\n    },\n    \"auth\": {\n      \"use_param\": false,\n      \"param_name\": \"\",\n      \"use_cookie\": false,\n      \"cookie_name\": \"\",\n      \"auth_header_name\": \"Authorization\"\n    },\n    \"use_basic_auth\": false,\n    \"enable_jwt\": true,\n    \"jwt_signing_method\": \"rsa\",\n    \"jwt_source\": \"censored\",\n    \"jwt_identity_base_field\": \"sub\",\n    \"jwt_client_base_field\": \"\",\n    \"jwt_policy_field_name\": \"pol\",\n    \"notifications\": {\n      \"shared_secret\": \"\",\n      \"oauth_on_keychange_url\": \"\"\n    },\n    \"enable_signature_checking\": false,\n    \"hmac_allowed_clock_skew\": -1,\n    \"definition\": {\n      \"location\": \"header\",\n      \"key\": \"x-api-version\"\n    },\n    \"version_data\": {\n      \"not_versioned\": true,\n      \"versions\": {\n        \"Default\": {\n          \"name\": \"Default\",\n          \"expires\": \"\",\n          \"paths\": {\n            \"ignored\": [],\n            \"white_list\": [],\n            \"black_list\": []\n          },\n          \"use_extended_paths\": true,\n          \"extended_paths\": {\n            \"ignored\": [],\n            \"white_list\": [],\n            \"black_list\": [],\n            \"cache\": [],\n            \"transform\": [],\n            \"transform_response\": [],\n            \"transform_headers\": [],\n            \"transform_response_headers\": [],\n            \"hard_timeouts\": [],\n            \"circuit_breakers\": [],\n            \"url_rewrites\": [],\n            \"virtual\": [],\n            \"size_limits\": []\n          },\n          \"global_headers\": {},\n          \"global_headers_remove\": [],\n          \"global_size_limit\": 0,\n          \"override_target\": \"\"\n        }\n      }\n    },\n    \"uptime_tests\": {\n      \"check_list\": [],\n      \"config\": {\n        \"expire_utime_after\": 0,\n        \"service_discovery\": {\n          \"use_discovery_service\": false,\n          \"query_endpoint\": \"\",\n          \"use_nested_query\": false,\n          \"parent_data_path\": \"\",\n          \"data_path\": \"\",\n          \"port_data_path\": \"\",\n          \"target_path\": \"\",\n          \"use_target_list\": false,\n          \"cache_timeout\": 0,\n          \"endpoint_returns_list\": false\n        },\n        \"recheck_wait\": 0\n      }\n    },\n    \"proxy\": {\n      \"preserve_host_header\": false,\n      \"listen_path\": \"/report\",\n      \"target_url\": \"\",\n      \"strip_listen_path\": false,\n      \"enable_load_balancing\": true,\n      \"target_list\": [],\n      \"check_host_against_uptime_tests\": false,\n      \"service_discovery\": {\n        \"use_discovery_service\": true,\n        \"query_endpoint\": \"http://127.0.0.1:8500/v1/catalog/service/vortex-api-report\",\n        \"use_nested_query\": false,\n        \"parent_data_path\": \"\",\n        \"data_path\": \"ServiceAddress\",\n        \"port_data_path\": \"ServicePort\",\n        \"target_path\": \"\",\n        \"use_target_list\": true,\n        \"cache_timeout\": 60,\n        \"endpoint_returns_list\": true\n      }\n    },\n    \"custom_middleware\": {\n      \"pre\": [],\n      \"post\": [],\n      \"response\": []\n    },\n    \"cache_options\": {\n      \"cache_timeout\": 60,\n      \"enable_cache\": true,\n      \"cache_all_safe_requests\": false,\n      \"cache_response_codes\": [],\n      \"enable_upstream_cache_control\": false\n    },\n    \"session_lifetime\": 0,\n    \"active\": true,\n    \"auth_provider\": {\n      \"name\": \"\",\n      \"storage_engine\": \"\",\n      \"meta\": {}\n    },\n    \"session_provider\": {\n      \"name\": \"\",\n      \"storage_engine\": \"\",\n      \"meta\": null\n    },\n    \"event_handlers\": {\n      \"events\": {}\n    },\n    \"enable_batch_request_support\": false,\n    \"enable_ip_whitelisting\": false,\n    \"allowed_ips\": [],\n    \"dont_set_quota_on_create\": false,\n    \"expire_analytics_after\": 0,\n    \"response_processors\": [],\n    \"CORS\": {\n      \"enable\": false,\n      \"allowed_origins\": [],\n      \"allowed_methods\": [],\n      \"allowed_headers\": [],\n      \"exposed_headers\": [],\n      \"allow_credentials\": false,\n      \"max_age\": 0,\n      \"options_passthrough\": false,\n      \"debug\": false\n    },\n    \"domain\": \"\",\n    \"do_not_track\": true,\n    \"tags\": []\n  },\n  \"hook_references\": [],\n  \"is_site\": false,\n  \"sort_by\": 0\n}\n. I also failed to mention: I am using RS256 for my JWT signature, in case that makes a difference.\n. @lonelycode I am running Tyk behind a Citrix Netscaler appliance. To eliminate it as a variable, I re-tested the issue by calling the gateway directly by IP. I am able to reproduce the issue without any proxies in between.\nFor the sake of comparison, I also tested a valid JWT token with a path that Tyk would not be able to route. I received a 404, as expected, both through the Netscaler appliance and directly against the gateway. I don't think anything is eating the HTTP error codes.\n. @lonelycode I tested this again this morning and it is now returning the expected error codes. Per our email conversation on an unrelated issue, I had changed the do_not_track field. I reverted it to true and was able to produce the issue again. I toggled it a couple of times to confirm and got reliable results.\nSo...\nWhen do_not_track is false, the gateway returns 403 for missing JWT token.\nWhen do_not_track is true, the gateway returns 200 for missing JWT token.\nThis behavior is curious, and may warrant more investigation. However, it's not really an issue for me as I intend to track all authenticated APIs.\n. ",
    "sje397": "No problem - it was small...and tests fail. But atm if you just checkout and build master, it fails.\n. No worries at all. Thanks for building Tyk! :)\n. ",
    "krystalcode": "Thank you for the response, these docs seem to be what I was looking for!\n. ",
    "viklas": "Awesome...love your work Martin! I'll grab the latest version and confirm that my crap code is no longer breaking your awesome app.\n. Can confirm, fix seems to have stabilised it. Can't seem to crash it now. I'll re-open the issue if I run into the same problem again. Thanks again for being so responsive!\n. ",
    "wonderslug": "OK cool,\nThe https://our-keycloak-url/auth/realms/adfs/.well-known/openid-configuration is \njson\n{\n  \"issuer\": \"https://our-keycloak-url/auth/realms/adfs\",\n  \"authorization_endpoint\": \"https://our-keycloak-url/auth/realms/adfs/protocol/openid-connect/auth\",\n  \"token_endpoint\": \"https://our-keycloak-url/auth/realms/adfs/protocol/openid-connect/token\",\n  \"token_introspection_endpoint\": \"https://our-keycloak-url/auth/realms/adfs/protocol/openid-connect/token/introspect\",\n  \"userinfo_endpoint\": \"https://our-keycloak-url/auth/realms/adfs/protocol/openid-connect/userinfo\",\n  \"end_session_endpoint\": \"https://our-keycloak-url/auth/realms/adfs/protocol/openid-connect/logout\",\n  \"jwks_uri\": \"https://our-keycloak-url/auth/realms/adfs/protocol/openid-connect/certs\",\n  \"grant_types_supported\": [\n    \"authorization_code\",\n    \"implicit\",\n    \"refresh_token\",\n    \"password\",\n    \"client_credentials\"\n  ],\n  \"response_types_supported\": [\n    \"code\",\n    \"none\",\n    \"id_token\",\n    \"token\",\n    \"id_token token\",\n    \"code id_token\",\n    \"code token\",\n    \"code id_token token\"\n  ],\n  \"subject_types_supported\": [\n    \"public\"\n  ],\n  \"id_token_signing_alg_values_supported\": [\n    \"RS256\"\n  ],\n  \"response_modes_supported\": [\n    \"query\",\n    \"fragment\",\n    \"form_post\"\n  ],\n  \"registration_endpoint\": \"https://our-keycloak-url/auth/realms/adfs/clients-registrations/openid-connect\"\n}\nand the JWKS is like this\njson\n{\n  \"keys\": [\n    {\n      \"kid\": \"pB0hjCKD-DW-b5edo5iV-Qviy5FCcAaTRJFUo59p5xg\",\n      \"kty\": \"RSA\",\n      \"alg\": \"RS256\",\n      \"use\": \"sig\",\n      \"n\": \"rc5r5-2RC2HqZ8cSTPL4wwCv7-BOrJp4gU3CsFkeZD05pSMO-t3SisUnmtswWOzK6CDjRncC46uo8993-h7VKm2Paiiu5oRpLqhZnZxBSFgTm0GTdvVxoFWHtLTLmqdKN_O9cOXiGaH6dfj_ykvgwuE2OYg9hciREqa7gJ6ijY1EuWYCdeh52-TnsKJEElYs4LmqyIw5NaaH80PwQAq2--LUNWCjfE6TIUqyng3jFbrYAqwJNm-T9GmdvQhmERXsW5iPxBlFHxLnPmg2dBlZvx_UsG64CrZ51yl4SMsSUUqrVxnR58XF7GisG7kjlpiZ05LzL59K5PbEUts4-olmEQ\",\n      \"e\": \"AQAB\"\n    }\n  ]\n}\n. ",
    "ChristianCiach": "I can't get this to work with Keycloak, too. \nThe log says this:\ntime=\"Jun 27 15:38:28\" level=warning msg=\"JWT Invalid: Validation error. Jwt token validation failed.\" \ntime=\"Jun 27 15:38:28\" level=warning msg=\"Attempted access with invalid key.\" key=\"[JWT]\" \ntime=\"Jun 27 15:38:28\" level=error msg=\"request error: Key not authorised\" api_id=1 org_id= path=\"/test-api/version\" server_name=\"http://apigate.local:10082/\" user_id= user_ip=127.0.0.1\nThis is the id_token:\neyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJOVnJoc2NYb3JDbVFzTnk3TTNwdmFTSmtWUVVYXzljcXVJc0tmVzJpSzNnIn0.eyJqdGkiOiI5NzA0Y2YzMi0wODBmLTRjM2YtYjQ2YS1mYTQ4OTY3MTdkOTYiLCJleHAiOjE0OTg1NjIxNzIsIm5iZiI6MCwiaWF0IjoxNDk4NTYxODcyLCJpc3MiOiJodHRwOi8vbG9naW4uaHViLmRldmVsb3BtZW50LmVtcy9hdXRoL3JlYWxtcy92a3Rlc3QiLCJhdWQiOiJhcGktZ2F0ZXdheSIsInN1YiI6Ijg0ZmRjNDUyLWNkNzItNDZiMC04YWU3LTVkYjZiOWVhODJmNiIsInR5cCI6IklEIiwiYXpwIjoiYXBpLWdhdGV3YXkiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiJlZjdhM2U1MC0xZTdlLTQ2ZDgtYWE4Yi03MDBkOGNmNDBlNTIiLCJhY3IiOiIxIiwibmFtZSI6IkNocmlzdGlhbiBDaWFjaCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNocmlzdGlhbmMiLCJnaXZlbl9uYW1lIjoiQ2hyaXN0aWFuIiwiZmFtaWx5X25hbWUiOiJDaWFjaCIsImVtYWlsIjoiY2hyaXN0aWFuLmNpYWNoQGVuZXJneW1ldGVvLmRlIn0.KlKk81JiRn2INluMQk6CQ_wN9_pzL85AKwa2lDpN_ifjdfVCC_UUR69Rz39f1t7JkYm1AEbiavo8TOADftzxSsJ8a-ygPotmQp7IwrC6jB9KKLlMpudtdBYb-LfgqCfAuYDh74typNinOgXwbyJApugiOHkz95ndv2yJV4WZC8Qv5xvXvNZobceUXjyd3vSQrtJjr02vwuEhiyfpEhD-t6NTNNCYjUWjPYiaDpL-20Pm_mdPoDTtG429UQFN3eqm7_gdUB2w4Plor0r7rK3nJrWIRTI7W2qr_Ym6gx_Okb5IflYm9R-0m2xpfcvo53lTxEwXrh14ws0xeNDepIlHAQ\nThe JWKS returned by Keycloak is this (pretty printed for your convenience):\n{\n  \"keys\": [\n    {\n      \"kid\": \"NVrhscXorCmQsNy7M3pvaSJkVQUX_9cquIsKfW2iK3g\",\n      \"kty\": \"RSA\",\n      \"alg\": \"RS256\",\n      \"use\": \"sig\",\n      \"n\": \"23E1vt5aJwFvEnyJl2AW2z8GhwJwwrWntm2hdQkB4JYkz8pwz3zNxlJBU5EhAsI5C2pYeeEwCIhjt2MfxcsokMT1NioFzzGd2PzslrFmddbtDGitiYjqXupWcNd2qy2Rgw_O33flspXjifraAklDaoLzDDVyEUdrCJ7SB1HfxsuDsvuZINR6jRowPut-e-r0nif57ry_xQZ5SZq9ShKfZd7KbIijLb_LHgAXgU3E4Tb9R43gIpD2282RionIWiBmUXKeThQVVOgsooVDhnmyCLtHNq2FQ2K0FczF5sUyN3ufpdr1dfrhkzv560BlkGzBljpeh8uAsZs0IazAsek1-Q\",\n      \"e\": \"AQAB\"\n    }\n  ]\n}\nI know that the token is valid. I can validate it just fine with my own java application. I am happy to provide additional information if you need them.\nMy Tyk-Gateway version is v2.3.6.. Is there a chance that the fix gets backported to the 2.3 branch? I am currently evaluating multiple API gateways for my organization and OpenID Connect is a must have. If I can't get this to work with Tyk in the near future I am forced to use another gateway.. Of course, here you go:\n{\n      \"name\": \"emsys-api\",\n      \"api_id\": \"1\",\n      \"use_openid\": true,\n      \"openid_options\": {\n        \"providers\": [\n          {\n            \"issuer\": \"http://login.hub.development.ems/auth/realms/vktest\",\n            \"client_ids\": {\n              \"YXBpLWdhdGV3YXk=\": \"default\"\n            }\n          }\n        ],\n    \"segregate_by_client\": false\n      },\n      \"version_data\": {\n          \"not_versioned\": true,\n          \"versions\": {\n              \"Default\": {\n                  \"name\": \"Default\",\n                  \"use_extended_paths\": true\n              }\n          }\n      },\n      \"proxy\": {\n          \"listen_path\": \"/test-api/\",\n          \"target_url\": \"http://apigate.local:10082/\",\n          \"strip_listen_path\": true\n      },\n      \"active\": true\n}\n. Yes, I am using Tyk without the dashboard for my evaluation. We may upgrade to an edition with dashboards if I can get this to work. \nAlso, I have defined a policy called \"default\". I am not at work right now, but I will show you my policy file in about an hour. Thanks for your help this far! . @james-tyk \nThanks, I know :) Thing is, the Tyk-Gateway would be deployed and configured automatically via Ansible, so it must at least work without the dashboard. We would use the dashboard primarily for monitoring and emergency configuration changes, like revoking accesses. . @buger \nThis is my policies.json:\n{\n        \"default\": {\n                \"rate\": 1000,\n                \"per\": 1,\n                \"quota_max\": 100,\n                \"quota_renewal_rate\": 60,\n                \"access_rights\": {\n                        \"41433797848f41a558c1573d3e55a410\": {\n                                \"api_name\": \"emsys-api\",\n                                \"api_id\": \"1\",\n                                \"versions\": [\n                                        \"Default\"\n                                ]\n                        }\n                },\n                \"hmac_enabled\": false\n        }\n}\nWhen I make a request these are the request and response headers:\n10:28:55.036[27ms][total 27ms] Status: 403[Forbidden]\nGET http://apigate.local:8080/test-api/version Load Flags[LOAD_BACKGROUND  LOAD_BYPASS_LOCAL_CACHE_IF_BUSY ] Gr\u00f6\u00dfe des Inhalts[37] Mime Type[application/json]\n   Request Header:\n      Host[apigate.local:8080]\n      User-Agent[Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:54.0) Gecko/20100101 Firefox/54.0]\n      Accept[*/*]\n      Accept-Language[en-US,en;q=0.5]\n      Accept-Encoding[gzip, deflate]\n      Authorization[Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJOVnJoc2NYb3JDbVFzTnk3TTNwdmFTSmtWUVVYXzljcXVJc0tmVzJpSzNnIn0.eyJqdGkiOiI5NzA0Y2YzMi0wODBmLTRjM2YtYjQ2YS1mYTQ4OTY3MTdkOTYiLCJleHAiOjE0OTg1NjIxNzIsIm5iZiI6MCwiaWF0IjoxNDk4NTYxODcyLCJpc3MiOiJodHRwOi8vbG9naW4uaHViLmRldmVsb3BtZW50LmVtcy9hdXRoL3JlYWxtcy92a3Rlc3QiLCJhdWQiOiJhcGktZ2F0ZXdheSIsInN1YiI6Ijg0ZmRjNDUyLWNkNzItNDZiMC04YWU3LTVkYjZiOWVhODJmNiIsInR5cCI6IklEIiwiYXpwIjoiYXBpLWdhdGV3YXkiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiJlZjdhM2U1MC0xZTdlLTQ2ZDgtYWE4Yi03MDBkOGNmNDBlNTIiLCJhY3IiOiIxIiwibmFtZSI6IkNocmlzdGlhbiBDaWFjaCIsInByZWZlcnJlZF91c2VybmFtZSI6ImNocmlzdGlhbmMiLCJnaXZlbl9uYW1lIjoiQ2hyaXN0aWFuIiwiZmFtaWx5X25hbWUiOiJDaWFjaCIsImVtYWlsIjoiY2hyaXN0aWFuLmNpYWNoQGVuZXJneW1ldGVvLmRlIn0.KlKk81JiRn2INluMQk6CQ_wN9_pzL85AKwa2lDpN_ifjdfVCC_UUR69Rz39f1t7JkYm1AEbiavo8TOADftzxSsJ8a-ygPotmQp7IwrC6jB9KKLlMpudtdBYb-LfgqCfAuYDh74typNinOgXwbyJApugiOHkz95ndv2yJV4WZC8Qv5xvXvNZobceUXjyd3vSQrtJjr02vwuEhiyfpEhD-t6NTNNCYjUWjPYiaDpL-20Pm_mdPoDTtG429UQFN3eqm7_gdUB2w4Plor0r7rK3nJrWIRTI7W2qr_Ym6gx_Okb5IflYm9R-0m2xpfcvo53lTxEwXrh14ws0xeNDepIlHAQ]\n      Connection[keep-alive]\n   Response Header:\n      Connection[close]\n      Content-Type[application/json]\n      X-Generator[tyk.io]\n      Date[Wed, 28 Jun 2017 08:28:55 GMT]\n      Content-Length[37]\nAs you can see, I get a \"403 - forbidden\". The response body is this:\n{\n    \"error\": \"Key not authorised\"\n}\nIn the meantime I will try the JWT-plugin for Tyk. As I understand, the only difference for the API consumers is that they need to send the \"access_token\" instead of the \"id_token\" in their requests.. By the way: The quickness of your responses is amazing!. Thank you, it seems to work using the api-id as the access-right-key. Although, stating the api-id twice seems redundant and confusing.\nI wish the logging would be clearer about the cause of the problems. When a request uses an expired id_token, tyk just logs \"JWT Invalid: Validation error. Jwt token validation failed.\", too. This makes debugging very hard if our customers ask as why their request to our API doesn't work.. Also, I kind of hoped that Tyk would include some information from the id_token as additional headers to the upstream request, like the username for example. Currently the upstream service needs to parse the id_token by itself. I've hoped to avoid adding upstream logic like this by using an API gateway.. To add to my last message: I just see that this may be already possible using dynamic request header modifications. I will investigate this.... Thank you for your help this far. I guess this ticket is solved and can be closed.\nUnfortunately, neither the TykJWTSessionID nor the ClientID is useful for the downstream service. I need at least the preferred_username. I will try to figure this out.. Your documentation says this:\n\nIn order to make OIDC Access tokens meaningful in analytics data, Tyk will also set na ALias for the itnernal token so the user can be easily identified in analytics. The OIDC Alias will always be the ClientID + User ID provided by the IDP. This can then be queried separately by\n\nI feel like the crucial part is missing :). Thanks, you will hear back from me in a few minutes.. Wow, this is exactly what I am looking for! Using Keycloak as the IDP I am able to inject any attribute (like the username) as a claim into the id_token. I will try this right away!. I can't get this to work :(\nThis is my api.json:\n{\n      \"name\": \"emsys-api\",\n      \"api_id\": \"1\",\n      \"use_openid\": true,\n      \"openid_options\": {\n        \"providers\": [\n          {\n            \"issuer\": \"http://login.hub.development.ems/auth/realms/vktest\",\n            \"client_ids\": {\n              \"YXBpLWdhdGV3YXk=\": \"default\"\n            }\n          }\n    ],\n    \"segregate_by_client\": false\n      },\n      \"version_data\": {\n          \"not_versioned\": true,\n          \"versions\": {\n              \"Default\": {\n                 \"name\": \"Default\",\n                 \"use_extended_paths\": true,\n                 \"global_headers\": {\n                      \"X-Name\": \"$jwt_claims_name\"\n                 }\n              }\n          }\n      },\n      \"proxy\": {\n          \"listen_path\": \"/test-api/\",\n          \"target_url\": \"http://apigate.local:10082/\",\n          \"strip_listen_path\": true\n      },\n      \"active\": true\n}\nThe header reaching the service is this:\nX-Name: $jwt_claims_name\nThe decoded JWT is this:\n```\n{\n  \"jti\": \"6b4afa91-db51-4fd8-b062-111421b39799\",\n  \"exp\": 1498646175,\n  \"nbf\": 0,\n  \"iat\": 1498645875,\n  \"iss\": \"http://login.hub.development.ems/auth/realms/vktest\",\n  \"aud\": \"api-gateway\",\n  \"sub\": \"84fdc452-cd72-46b0-8ae7-5db6b9ea82f6\",\n  \"typ\": \"ID\",\n  \"azp\": \"api-gateway\",\n  \"auth_time\": 0,\n  \"session_state\": \"5f6723c3-379f-4d32-9a65-ce5761fcaf24\",\n  \"acr\": \"1\",\n  \"name\": \"Christian Ciach\",\n  \"preferred_username\": \"christianc\",\n  \"given_name\": \"Christian\",\n  \"family_name\": \"Ciach\",\n  \"email\": \"christian.ciach@censored.de\"\n}\n```\nI will try this using the JWT auth method.. I feel so close, yet so far away...\nLog says:\ntime=\"Jun 28 14:22:18\" level=warning msg=\"Session Meta Data not found for key in map: jwt_claims_name\"\nApi def:\n```\n{\n      \"name\": \"emsys-api\",\n      \"api_id\": \"1\",\n      \"enable_context_vars\": true,\n      \"use_openid\": true,\n      \"openid_options\": {\n        \"providers\": [\n          {\n            \"issuer\": \"http://login.hub.development.ems/auth/realms/vktest\",\n            \"client_ids\": {\n              \"YXBpLWdhdGV3YXk=\": \"default\"\n            }\n          }\n    ],\n    \"segregate_by_client\": false\n      },\n      \"version_data\": {\n          \"not_versioned\": true,\n          \"versions\": {\n              \"Default\": {\n                 \"name\": \"Default\",\n                 \"use_extended_paths\": true,\n                 \"global_headers\": {\n                    \"X-Name\": \"$tyk_meta.jwt_claims_name\"\n                 }\n              }\n          }\n      },\n      \"proxy\": {\n          \"listen_path\": \"/test-api/\",\n          \"target_url\": \"http://apigate.local:10082/\",\n          \"strip_listen_path\": true\n      },\n      \"active\": true\n}\n```\n. The meta_data inside Redis is just this:\n\"meta_data\": {\n    \"ClientID\": \"api-gateway\",\n    \"TykJWTSessionID\": \"d5eee4348fcb63184b1baef96e6eb55f\"\n  },\nI also tried to add \"enable_context_vars\": true,\" to the object \"version_data -> versions -> Default\" inside the api definition, but no success.. I will create a thread at https://community.tyk.io/ for this. Sorry for hijacking this github-issue so far.\nBeing a software developer myself, I am absolutely guilty of missing/incomplete documention myself, so you have my sympathies in this regard :) I think this discussion was fruitful for both of us this far.. Yeah, I was this far myself (by doing RTFM), but still:\ntime=\"Jun 28 14:37:35\" level=warning msg=\"Context Data not found for key in map: jwt_claim_name\"\nI am reading the go-code right now (I am not a go programmer, but I can read it) so I will figure this out. I will present my solution here for the poor souls finding this issue through Google.. I am stupid: The prefix is jwt_claims_, not jwt_claim_. It's working perfectly!\nThis is my working api definition:\n{\n      \"name\": \"emsys-api\",\n      \"api_id\": \"1\",\n      \"enable_context_vars\": true,\n      \"use_openid\": true,\n      \"openid_options\": {\n        \"providers\": [\n          {\n            \"issuer\": \"http://login.hub.development.ems/auth/realms/vktest\",\n            \"client_ids\": {\n              \"YXBpLWdhdGV3YXk=\": \"default\"\n            }\n          }\n    ],\n    \"segregate_by_client\": false\n      },\n      \"version_data\": {\n          \"not_versioned\": true,\n          \"versions\": {\n              \"Default\": {\n                 \"name\": \"Default\",\n                 \"use_extended_paths\": true,\n                 \"enable_context_vars\": true,\n                 \"global_headers\": {\n                    \"X-Claim-Name\": \"$tyk_context.jwt_claims_name\"\n                 }\n              }\n          }\n      },\n      \"proxy\": {\n          \"listen_path\": \"/test-api/\",\n          \"target_url\": \"http://apigate.local:10082/\",\n          \"strip_listen_path\": true\n      },\n      \"active\": true\n}\nNow I will figure out if the JWT auth method is maybe a better match for my use cases. The auth methods seem to be very similar, but our customers may be more familiar with sending access_token instead of id_token to access APIs. One way or the other, Tyk seems to be suitable for our needs. Thank you so much for all your help!. Sorry, wrong project.\nEdit: I am stupid. I mistaked this ticket for my tyk-pump ticket. Reopened!. ",
    "lmlynik": "Thanks @lonelycode for the rapid response.\n\nVirtual Paths are interpreted at least once by the gateway when the API Definition is loaded into memory (in order to pre-warm the script for faster execution). So you could add an init method to the first Virtual Path to be loaded (longest first) and call it outside of the method to setup any kinds of globals for that virtual path. IIRC Virtual Paths for a single API share an ECMAScript environment, so globals / services could be shared.\n\nIs there a way to dynamically register our internal endpoints to Tyk and have the virtual endpoints read that data.\nI was thinking even of introducing a virtual endpoint which would register a service globally in the ECMAScript environment, but as you mentioned the scripts are parsed just once during startup.\nIs there any way to the virtual endpoint js code to read from some dynamic datasource?\n. Yes, @kohrVid , we can close this. ",
    "xagaba": "I can confirm that after updating to the latest version 2.4.x the problem goes away. Yes we are using a custom middleware to update the session.expires time\nevery call.\nvar refreshJobs = new TykJS.TykMiddleware.NewMiddleware({});\nrefreshJobs.NewProcessRequest(function(request, session) {\n    if (session.expires > 0){\n        session.expires = ((Date.now() / 1000) | 0) + 1800;\n        TykSetKeyData(request.Headers[\"Authjobs\"], JSON.stringify(session),\n1);\n    }\n    return refreshJobs.ReturnData(request);\n});\nlog(\"refreshJobs POST middleware initialised\");\nI hope this can help !. ",
    "ryanwalls": "Chrome Version 52.0.2743.116 (64-bit)\nOS X 10.11.6 (15G31)\n. I'm using Auth0 to generate JWTs.  \nHere are my claims\n{\n  \"iss\": \"https://3dsim.auth0.com/\",\n  \"sub\": \"PV2AvGcMjOFErV6QposKnfrUdt8yPuHI@clients\",\n  \"aud\": \"https://workflow-qa.3dsim.com\",\n  \"exp\": 1474728993,\n  \"iat\": 1474642593,\n  \"scope\": \"write:workflows read:workflows\"\n}\nThe sub has not changed.  I could delete the client in Auth0 and create a new one to get a new sub...  not ideal though as I'll have to update client id's and secrets in a few places.\n. That makes sense.  I still feel this is a bug.  This was several hours to track down what was happening.  Seems like at a minimum Tyk could throw a warning/error if someone tries to add a new client id/policy combination that already has an existing internal representation.\n. What you are explaining doesn't seem to apply to the new client credentials flow for auth0.  Which is what I'm using.  \nIn this flow, there is only one client, that authenticates as itself.  These are the claims:\n{\n  \"iss\": \"https://3dsim.auth0.com/\",\n  \"sub\": \"PV2AvGcMjOFErV6QposKnfrUdt8yPuHI@clients\",\n  \"aud\": \"https://workflow-qa.3dsim.com\",\n  \"exp\": 1474728993,\n  \"iat\": 1474642593,\n  \"scope\": \"write:workflows read:workflows\"\n}\nNote that the sub is really a \"client id\".  The aud is just the api to use.  So once the internal representation is set in tyk (based on the sub), then a new policy will never be used unless I delete the underlying representation or delete the Auth0 client.  \nIn the user flow, this makes sense though.  Each sub would be a different user.  As in this example claim:\n{\n  \"iss\": \"https://3dsim.auth0.com/\",\n  \"sub\": \"auth0|57da6d5d22fd54ba32c7ab9e\",\n  \"aud\": \"xK8mAP7LbZpcDuOsCIJ3sacHELEuJ4RV\",\n  \"exp\": 1474681825,\n  \"iat\": 1474645825\n}\nSo yeah, new users would get the new policy.  \nSo perhaps I should create a new issue for supporting client credential flow?\n. Still feel even for the user flow that a warning could pop up when you change the policy for a client.  Could say something like \"Existing users detected for this client.  These users will continue to use the old policy.\"\n. Started a community discussion as well, in case that would be a better place to discuss.  https://community.tyk.io/t/support-auth0-client-credentials-flow/1037\nWould be nice to track the issue through github as well... but understand every org has a different flow for issues. :)\n. @lonelycode Got it.  Makes sense.  Feel free to close this issue then and I'll just track the forum discussion.\n. @matiasinsaurralde Thanks.  Makes sense.\n. @matiasinsaurralde Might want to disable that view in tyk cloud and/or put some help text above those boxes.  Would save issues like this. :)\n. @mvdan Any updates on this?  We are using some libraries that are verifying authentication (auth0) and it only works with 401s.  . @mvdan Thanks.  Yeah, we'll just hack the client side to work with 403s.. @mvdan The main one is that expired tokens should ideally return 401s instead of 403s.  Currently when I send an expired token it returns a 403 from Tyk.. @mvdan How do I know when 2.4 is released for Tyk Cloud customers?. ",
    "awishformore": "I experience the same issue. Any updates?. Thank you for the update. Could you qualify soon? ;). ",
    "bnlcr": "Hi Matias!\nUnfortunately this does not work, I get the same error.\n. Indeed go get -u github.com/TykTechnologies/openid2go/openid did the trick, thx! \n. ",
    "mhraba": "@ryanwalls Hi Ryan, sorry for kicking the dead horse - but is detailed request/response logging on your roadmap for Tyk Cloud? I just checked your trello board and couldn't find that specific topic.. ",
    "kamoljan": "@lonelycode \nIt is a hybrid setup.\nWe don't have https in our target, only http.\nWe are not getting any logs from TyK gateways during this timeout.\nAny idea?\nk\n. @lonelycode \nOk, we are targeting directly TyK gateways without ALB(ELB).\nIt looks like TyK gateway (docker) runs 80 % very fast but, 20% request very slow...\nMaybe we are getting too many concurrent connections?\nWhat is a TyK gateway default limitation (number open connections, concurrent connections, memory, CPU, etc)?\n. @lonelycode looks like it was this issue https://github.com/microservices-today/IaC-dcos/issues/118 related to CoreOS iptables. After dropping CoreOS iptables it works perfectly fine.\nThank you very much for your prompt responses!\n. ",
    "pikamar": "Our problem was due to an invalid host name according to RFC952, we had underscores in our test server URL. It seems that Internet Explorer silently drops the session cookie on redirect over https if the URL does not conform to RFC952. When using dashes instead of underscores, everything worked as expected.\n. ",
    "bityardigans": "I seem to not be able to find this particular endpoint; calls to it result in a 404...we are running the current version and everything else seems to work...am I missing something?\n. That is a great question. I thought so but looking at the packagecloud repo now we are not so sure. Let me have our ops guy do an update and I will let you know.\n. Confirmed- we are on 2.2.0.28\n. I am- but that appears to be cached as well? Basically we lost an elastic IP today and had to reallocate; it thru tyk for a loop and now we cannot seem to get out of the intermittent 404s- the underlying api's tyk is pointing to are working fine we just keep getting served up 404s randomly when it didn't happen prior until the elastic IP snafu. \nI still cannot hit the endpoint; i get a {\"status\":\"error\",\"error\":\"Forbidden\"} OR a 404, basically alternating every few hits. I am passing the x-tyk-authorization header w/ the api key...is this the only way to clear the cache?\n. So we do not see the header; Its just very bizarre and it all started when amazon deleted an assigned elastic IP for some idiotic reason. We are starting to suspect the whole install may have somehow gotten fubar, specifically the elastic load balancer we use to route traffic. Ill keep you posted- you have been exceptionally helpful by the way ;)\n. SUCCESS! totally the ELBs fault. Thanks again...\n. it is- and it is working with the first one we set up; ie added to the first set of api's. Flash forward a couple of months and we wanted to change our dev test process to use a gateway as well and decided to just clone the existing apis, change their custom domain and where they proxy to expecting it to work. Opening the cloned api's shows the correct custom domain; tyk just constantly returns a 404 to the new domain :(. Restarting the service fixed it. Awesome- thanks again ;). ",
    "minicats": "I am truncate  \"582929e980f54d08b8000001df0a5b48d06a4cd973c8d2f2f9724902\"\nGood.\ncurl -X GET -H \"Authorization: 582929e980f54d08b8000001df0a5b48d06a4cd973c8d2f2f9724902\"\n{\n    \"error\": \"Key not authorised\"\n}\nnew make key : 582929e980f54d08b80000012c8915265359488cb74fabdd\n1. Good\ncurl -X GET -H \"Authorization: 582929e980f54d08b8000001df0a5b48d06a4cd973c8d2f2f9724902\" http://localhost:8080/ttt/test2/\n   {\"a\":\"aaaa\"}\n2. Invalid token is allowed\ncurl -X GET -H \"Authorization: 582929e980f54d08b8000001df0a5b48d06a4cd973c8d2f2f9724902abc\" http://localhost:8080/ttt/test2/\n   {\"a\":\"aaaa\"}. ",
    "zetaab": "ok, base branch is now develop. ",
    "laruel": "I checked V2.2.04 and  added code to api_definition_manager.go\ncompiled\n```\nfunc (a APISpec) getVersionFromRequest(r http.Request) string {\n        if a.APIDefinition.VersionDefinition.Location == \"header\" {\n                versionHeaderVal := r.Header.Get(a.APIDefinition.VersionDefinition.Key)\n                if versionHeaderVal != \"\" {\n                        return versionHeaderVal\n                }else{\n\n                    log.Info(\"request host:\",r.Host)\n                    if strings.Contains(r.Host,\"xkemi\") || strings.Contains(r.Host,\"10.170.139.240\"){\n                            return \"V1.6.3\"\n                    }\n\n\n            }\n\n            return \"\"\n\n    }\n\n```. Thanks. ",
    "JayCeeJr": "I am able to change the user's password, But ideally I would like the user's to manage their own passwords.. ",
    "dkoston": "Ah, good call. This is actually using passthroufh and our app is to blame. Thanks for the quickl reply Martin.. ",
    "nickReyn": " Configuration linter.  Fix binary and UTF-8 support in JSVM.  Multiple policies per token.  API-level (global) rate limits.  Client Certificate Authentication support. We're planning to release this in v2.6 in the next 6-8 weeks. Thanks for the patience and the great suggestion \ud83d\udc4d . @matiasinsaurralde what's the status of this please?.  As a user I should be able to define routing rules based on a combination of header, query param, content and path components. To all following this ticket in the community, what do you think of this as the UI for advanced routing? Anything you would do differently?\nEssentially you can add Triggers to your url rewrites where you can define match params. In the Match type dropdown there would be:\n- Header matches\n- Query string variable/value matches\n- Path part matches, i.e. components of the path itself\n- Session meta data values (edit)\n- Payload matches\n\n@bitsofinfo @willks . Thanks @bitsofinfo really good point.\nTake a look at the revised flow. We're thinking that this will be an extra plugin accessed from the Endpoint designer, and follow the rough flow below.\nLet me know your thoughts \nhttps://www.figma.com/proto/JJXxlc0Cr7yKaHgAYWSx2kRR/Routing-rules?scaling=contain&node-id=49%3A18.  Advanced URL Re-write.  As a user I should be able to apply more complex logic to my body transforms.  As a user I should be able to tag api versions.  When detailed recording is switched on, the body data that gets recorded should be sanitised of any sensitive information. @excieve poke - what's the status on this :). @ilijabojanovic any reason you moved this back to in progress? Trying to figure out what is needed for this issue. Cool, thanks \ud83d\udc4d  sorry was reviewing quickly while on planning call and didn't see the PR.  Deprecate Health check API.  Allow to specify custom analytics tags using headers.  Add a way to define a default API version for when none is requested. @mvdan This came up at the event last night. They asked if you don't specify a version, can it just use the latest version.\nInstead of having the error come up regarding the below:\n\nIf default_version is not set or left as an empty string, the current behavior is kept.\n\nCould we just say if they leave the default version unset, it defaults to the latest version of the API?.  Add a way to define a default API version for when none is requested. We've got a feature lined up for v1.6 dashboard which allows you to edit the raw API def in the API Designer - should solve your issues here \ud83d\udc4d . @bitsofinfo v2.5 will be released this week :pray:.  Extend analytics logs in Dashboard to provide a way to identify which gateway wrote which log entry.  Ability to update swagger documentation on dashboard without deleting first.  Dashboard: Allow portal developers to register multiple times with a single catalogue..  Documentation: Guides on hardware requirements for running MongoDB.  Documentation: Recommended On-premise server configs.  Allow auto/manual key approval to be defined per catalogue, rather than per portal..  Access-level groups for dashboard users \ud83d\udd11.  Mapping my organisation's access-level groups to Dashboard access-level groups.  Support for OpenAPI v3.  Setup a global rate limit on an API. Solved by #356 .  Endpoint-level (global) rate limits.  Setup a rate limit per client (IP address).  Add a new middleware hook that supports trapping request and response.  Provide HTTP Method (GET/POST/PUT,etc.) to tyk python middleware. @lonelycode @buger @lghiur I've sketched out the below for how I see this could work. Can you guys take a look and feedback thoughts pls.\n\nIn terms of how a user get's to this, i see a few options. Number 1 is my preferred. \n\n\nWe add a button close to the Match pattern field, something like Triggers which opens a modal with the above in. This is my preferred option because the UI of the endpoint designer is already very complex, and adding more might just add complexity when we could split this functionality into a diff UI element. e.g.\n\n\n\nWe add this UI to underneath the Match pattern and Rewrite to fields. However, as i said above, this just adds more complexity to an already very complex UI piece.\n\n\nI'm not sure if there are different fields that need to show up if a user selects one of the other Match types, can you advise please? e.g. \n\nHeader matches\nQuery string variable/value matches\nPath part matches, i.e. components of the path itself\nSession meta data values (edit)\nPayload matches\n\n. Round two of this based on feedback from @lghiur and @buger.\nThis will be another plugin on the Endpoint designer, because it's too complex to create it as an extension of the current URL rewrites functionality, as discussed with Leon.\nCheck out a simple flow here: https://www.figma.com/proto/JJXxlc0Cr7yKaHgAYWSx2kRR/Routing-rules?scaling=contain&node-id=49%3A18&redirected=1\n@lonelycode . @buger @lghiur  and I had some slack convos about this and decided it's not ideal to have another plugin for this. I propose we have it as a separate section below the standard url rewrites which is activated on checkbox, labelled \"Enable advanced url rewrites\".\nThe flow is here: https://www.figma.com/proto/JJXxlc0Cr7yKaHgAYWSx2kRR/Routing-rules?scaling=contain&node-id=86%3A2.  Customize dashboard notifications starting port via config file. That sounds good. I guess by encrypted I was referring to that if some intercepted/saw the email, they couldn't find out the key. \nI will follow up and ask for clarification with the client this idea came from.. Your solution @buger sounds good, as long as when they are redirected to the portal they are required to login first.\nHMAC secret would also need to be shown, not just the key.  Add organisation details to dashboard header. @buger can we discuss this please, if it has any ux implication? . @lonelycode @buger\nOk cool. I'm still a bit in the dark on where the user has the touchpoint here. Is it a backend journey or is there some UI journey in the Dashboard? There is the body transform section in the Endpoint designer, is it that?\n\nmake sure the user knows they can use JQ notation to do stuff\n\nI'm guessing this means in the documentation, if it's a backend only journey? If there is a UI element I guess we can list the languages/syntax that we support above the code editors, like below?\n\n.  Add support for JQ Transforms.  Add way to validate inbound JSON objects with JSON Schema.  JWT: Regenerate internal token if policy claim different.  JWT: Set a default policy ID if policy claim not set.  Dashboard: Custom token support.  OAuth two-tier clientID lookup.  Dashboard as ClientID secondary back end.  Dashboard-backed OAuth Client storage.  Dashboard as auth back-end.  UI: Enable the addition of pre, auth, postauth and post-proc middleware script links. Thanks for this. We have this on our roadmap as part of ongoing improvements to the dashboard. Keep an eye on the next few dashboard releases \ud83d\udc4d . Closing this as search was released as part of v1.5 . More advanced search and sorting options to come in v1.6.. hey @bitsofinfo we're going to be releasing a feature in the API designer UI which enables you to edit the raw api definition, which should solve this issue, and also address issues you have raised before about exposing more API def options in the UI.\nAiming for 2.6 release for this.. @buger @lghiur can we discuss the UX/UI impact of this please?. This release: backend and Dashboard API, next release (2.7) can do front-end. @lghiur No FE task for this that I know of. And I don't think Ui has been defined. Sorry about that, never got round to looking at it. Suggest we move FE to 2.7 as I have commercials priority this week. Unless you want to take a look @ViolaMarku ?. \n. @buger no we do not have a ticket for it that i'm aware of, we can create one.\nc) we have this in under 2.7 milestone which should cover the above - https://github.com/TykTechnologies/tyk/issues/1556 (@bitsofinfo pls add more to the ticket if not). http://support.tyk.io/a/tickets/1518. @buger to follow up. Sounds good. I prefer option 3, because if we are disabling fields, we need to tell the user why.\nA line of text under the field like \"This value is being overwritten by the (Policy name here) policy\" could suffice?. Or if that's too complex, \"This value is being overwritten by an attached policy\" ?. @lghiur what do you think of:\n\nSounds good. I prefer option 3, because if we are disabling fields, we need to tell the user why.\nA line of text under the field like \"This value is being overwritten by the (Policy name here) policy\" could suffice?\n. Looks good dude. As discussed offline, just to make the fields look a bit more obvious they are disabled. E.g. make the text in them grey or smth.  Python plugin enhancements. Is this related to https://github.com/TykTechnologies/product/issues/6 and https://github.com/TykTechnologies/tyk/issues/1277?. Duplicate of https://github.com/TykTechnologies/tyk/issues/1057. Should be fine now - let us know if any issues \ud83d\udc4d . Thanks - yes searching functionality is very basic MVP at the mo. Will look to improve this functionality ASAP. @asoorm can you investigate whether it's possible to solve this using Mongo text search? :). Suggest we add it to the top of the page, using same style as on the policy page. @lghiur . @lghiur seems we have this data in the object on this page - so UI only work?. dupe of https://github.com/TykTechnologies/tyk/issues/1435. \n",
    "joshblakeley": "I'll be taking this on so would be good to have a chat @mvdan at some point next week over requirements and best approach to take.. Fixed by https://github.com/TykTechnologies/tyk/pull/1529. Closing here as this feature already exists in gateway and dashboard, new issue opened in pump #51 for pump implementation. This has not been a problem in our testing. What Tyk version are you running?. Looks like it could be a good enhancement - and cheap to implement. I'll see if I can slip it into a patch if it tests ok.. I was looking at this today and I think this is really the starting point for a more overarching compatibility with GraphQL, happy to leave this for now but will keep researching around it and having a play in a branch with the way it will work when I have time.. Renaming issue as next step is to expose request context as described by leon\n@matiasinsaurralde customer would like request IP available in plugins so would be good to get request context being exposed in plugins . @lonelycode I've got an open PR for this which should be done soon. See TykTechnologies/tyk#1340 on GH. here's what I was getting:\ntyk-gateway_1    | panic: runtime error: invalid memory address or nil pointer dereference\ntyk-gateway_1    | [signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0xb115cc]\ntyk-gateway_1    |\ntyk-gateway_1    | goroutine 1 [running]:\ntyk-gateway_1    | main.(*HTTPDashboardHandler).Register(0xc42025a870, 0x0, 0x0)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/dashboard_register.go:84 +0x10c\ntyk-gateway_1    | main.handleDashboardRegistration()\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/main.go:1154 +0x1fa\ntyk-gateway_1    | main.listen(0x127c520, 0xc420166020, 0x0, 0x0, 0x12708a0, 0xc4200160a0)\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/main.go:1202 +0x31b\ntyk-gateway_1    | main.main()\ntyk-gateway_1    |  /develop/go/src/github.com/TykTechnologies/tyk/main.go:967 +0x1fd\ncompose_tyk-gateway_1 exited with code 2\n. The resp object is printing as nil so calling resp.StatusCode caused the panic.. Error is \"Get http://tyk-dashboard:3000/register/node: dial tcp 172.19.0.6:3000: getsockopt: connection refused\". ah, yes. I undid them while i did that debugging. (Idiot). Thanks Dan, appreciated!. Good idea @mvdan . It looks good to me from what I can see and there's nothing obviously puzzling.. Nice cheap way to cleanup a few lines. This is not a bug. The reason the api-id is in the request just to identify the back-end to query.\nThis is somewhat non-intuitive and we will change our docs to help clarify.. Maybe don't need to check if log_level is not \"\" as that doesn't matter to the logic.. whoops\n. Ignore this i've got some conflicts I need to sort out first.\n. Arghhhh why has so much changed?\n. Still fixing up some small parts.\n. Agreed! I'll attempt to be less noisy. @mvdan how opposed are you to having lint as a flag. I've been getting some weird behaviour when trying to use it as an argument.. Glad to go through it together, it really should have been an easy modification but it adversely affects the behaviour of the command_mode.go flow\n. Yep if we can sort that out then it's ready to go.. We are near the end of testing currently so hopefully next week.. Happy new year @TimMcCauley I was a little optimistic last time wrt release schedule apologies for that. \nFor 2.8 January should happen - i'm just fresh back in the office so i'll check back in this week for you when i know more for certain.. Hi Tim!\nWe are looking at about a month to go for 2.8 i think- we had to rearrange some priorities to get certain features into the release. Sorry I cant be more specific than that and thanks for your patience!. We are past code freeze for 2.8 as of last week so it's all going through QA now. \n. Implemented in 2.6. Hi, You are missing your connection strings in db_apps_config and your policy_connection_string which should both be http://my.company.com:3000. Although I notice you are using localhost in other locations so most likely http://localhost:3000\n. I would also change the \"hostname\" parameter in analytics config to be blank and also check your spelling as you misspelt localhost in your message and maybe also did in the configuration.\n. @buger this is a blocker for me at the moment I think for #1340 . @dencoded  @buger There is a race failure in 1.9. I don't want to go sticking mutex in the code for the sake of the test in order to fix so wondering how to go about sorting this?. Ok great i'll do it like that then.. Currently blocked by #1383 \nAlthough the race does not occur in master I can't see why it should only happen in this branch. Will keep looking however.. Test now follows framework @buger has laid out.. @ilijabojanovic ready for testing if @buger thinks all is ok\n. Will get a fix pushed. SGTM. Issue caused by rw to config.global\n. Yep no more occurences. Thanks @buger will see where I get\nHave slightly altered some imports in main  too as goimports was being annoying and removing them on save.. Will do!\nThanks, i'm very happy with what i've done today.. Makes sense, thanks.\n. You killed the linter, i'll fix\n. See root comment. If doReload is called then it falls back to how it behaved before and the endpoint is reinitialised in api_loader I think. I just tested and it is always there after adding api and reloading too. So I think this covers the fix.. Re-going over this and the specs today\n. Closing this in favor of a redo now I know what im talking about more.. @buger me and @asoorm struggling to think through this one. https://github.com/TykTechnologies/tyk/pull/1515 fixed this. The reason we have the ssoSession@ssoSession.com in logs is because that is the default when there is no email set.\nWould we rather have a blank placeholder?\n. Ok i'll leave it to her :). Maybe just warn that no email is set?. Sorry i don't know as much as you do - is the email important for the sso functionality we have?\n. Any improvements on this @buger ?. Test improved and ready for review @buger . If aim is just to differentiate between http and https we can check if request.TLS == nil and pass on that information. I think that is more reliable than hoping the url scheme is actually populated.\nFor most request the Go http package will not populate most of the URL fields in the request as per RFC 7230, Section 5.3 . Even in virtual endpoint I couldn't get it to be non blank so will try other approach and apply it to all possibilities.. That is what I used. Although not obvious, if you add the query params at the end of the domain field they should get added correctly to the request when using TykMakeHttpRequest. Not able to reproduce this locally @ilijabojanovic is this still an issue for you?\nReload in slave successful when I delete API, do you have any particular things like group ID's or segmentation that could affect it?\nI'm on master.. I've gone through a bunch of passwords and cant get one to fail yet. Can you share the bad hashes you are seeing in your session objects.\nNot sure how it will help but curious\n. I tried with daves org ID but it still always works for me still. Would anyone truly need unlimited connections? They still have the option to pass it a ridiculously large number should they wish to.. The approach for this either requires havign an additional middleware specifically for JWE as the current JWT library does not extend to token encryption.\nAnother option is to redesign the existing JWT middleware around another library such as https://github.com/square/go-jose which encompasses both specs. However, caution should be made to ensure this does not break back compatibility with existing tokens.. Changes made in #1680 increase performance here 20-30%. \nBenchmarkTagHeaders-4       2000000           816 ns/op         384 B/op         15 allocs/op\nPASS\nI can't see anywhere to improve this benchmark further\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 240ms, 8.14% of 2950ms total\n      flat  flat%   sum%        cum   cum%\n     140ms  4.75%  4.75%      140ms  4.75%  strings.ToLower\n     100ms  3.39%  8.14%      240ms  8.14%  github.com/TykTechnologies/tyk.tagHeaders\n         0     0%  8.14%      240ms  8.14%  github.com/TykTechnologies/tyk.BenchmarkTagHeaders\n         0     0%  8.14%      240ms  8.14%  testing.(*B).launch\n         0     0%  8.14%      240ms  8.14%  testing.(*B).runN\nI don't think there is any alternative to using strings.ToLower() at the moment.. Benchmark:\nBenchmarkApiReload-4         300           4087457 ns/op         1789779 B/op      23911 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.23s, 2.28% of 10.10s total\nShowing top 10 nodes out of 129\n      flat  flat%   sum%        cum   cum%\n     0.04s   0.4%   0.4%      0.41s  4.06%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto/parser.(*_parser).parseLogicalAndExpression\n     0.03s   0.3%  0.69%      0.03s   0.3%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto/parser.(*_parser).read\n     0.03s   0.3%  0.99%      0.05s   0.5%  regexp.(*machine).onepass\n     0.02s   0.2%  1.19%      0.02s   0.2%  bytes.(*Buffer).WriteByte\n     0.02s   0.2%  1.39%      0.13s  1.29%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto/parser.(*_parser).parseArgumentList\n     0.02s   0.2%  1.58%      0.41s  4.06%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto/parser.(*_parser).parseAssignmentExpression\n     0.02s   0.2%  1.78%      0.41s  4.06%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto/parser.(*_parser).parseMultiplicativeExpression\n     0.02s   0.2%  1.98%      0.41s  4.06%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto/parser.(*_parser).parseShiftExpression\n     0.02s   0.2%  2.18%      0.03s   0.3%  regexp.makeOnePass.func1\n     0.01s 0.099%  2.28%      0.02s   0.2%  encoding/json.(*ptrEncoder).(encoding/json.encode)-fm\nMemprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 13.01MB, 15.24% of 85.34MB total\nShowing top 10 nodes out of 14\n      flat  flat%   sum%        cum   cum%\n   12.01MB 14.07% 14.07%    12.01MB 14.07%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto._newContext\n       1MB  1.17% 15.24%        1MB  1.17%  github.com/TykTechnologies/tyk.APIDefinitionLoader.ParseDefinition\n         0     0% 15.24%    12.01MB 14.07%  github.com/TykTechnologies/tyk.(*JSVM).Init\n         0     0% 15.24%    13.01MB 15.24%  github.com/TykTechnologies/tyk.APIDefinitionLoader.FromDir\n         0     0% 15.24%    12.01MB 14.07%  github.com/TykTechnologies/tyk.APIDefinitionLoader.MakeSpec\n         0     0% 15.24%    13.01MB 15.24%  github.com/TykTechnologies/tyk.BenchmarkApiReload\n         0     0% 15.24%    13.01MB 15.24%  github.com/TykTechnologies/tyk.buildAndLoadAPI\n         0     0% 15.24%    13.01MB 15.24%  github.com/TykTechnologies/tyk.doReload\n         0     0% 15.24%    13.01MB 15.24%  github.com/TykTechnologies/tyk.loadAPI\n         0     0% 15.24%    13.01MB 15.24%  github.com/TykTechnologies/tyk.syncAPISpecs\nBlockprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 1.22s, 8.98% of 13.58s total\nDropped 12 nodes (cum <= 0.07s)\n      flat  flat%   sum%        cum   cum%\n     1.22s  8.98%  8.98%      1.22s  8.98%  sync.(*Mutex).Lock\n         0     0%  8.98%      0.02s  0.14%  github.com/TykTechnologies/tyk.(*APISpec).Init\n         0     0%  8.98%      0.02s  0.12%  github.com/TykTechnologies/tyk.(*DefaultAuthorisationManager).Init\n         0     0%  8.98%      0.02s  0.16%  github.com/TykTechnologies/tyk.loadApps.func3\n         0     0%  8.98%      0.02s  0.16%  github.com/TykTechnologies/tyk.processSpec\n         0     0%  8.98%      1.20s  8.82%  github.com/TykTechnologies/tyk.reloadSimulation\n         0     0%  8.98%      0.02s  0.14%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/tyk/storage.(*RedisCluster).Connect\n         0     0%  8.98%      0.02s  0.16%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/tyk/storage.RedisCluster.Connect\n         0     0%  8.98%      1.22s  8.98%  sync.(*RWMutex).Lock. Benchmark:\nBenchmarkMultiSession_BA_Standard_OK-4               500           2855848 ns/op           94612 B/op        555 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 80ms, 9.52% of 840ms total\nShowing top 10 nodes out of 71\n      flat  flat%   sum%        cum   cum%\n      40ms  4.76%  4.76%       40ms  4.76%  context.(*valueCtx).Value\n      10ms  1.19%  5.95%       10ms  1.19%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto/parser.(*_parser).parseCaseStatement\n      10ms  1.19%  7.14%       20ms  2.38%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto/parser.(*_parser).parseLogicalAndExpression\n      10ms  1.19%  8.33%       10ms  1.19%  net/http.validMethod\n      10ms  1.19%  9.52%       10ms  1.19%  strconv.fmtF\n         0     0%  9.52%       10ms  1.19%  encoding/json.(*encodeState).marshal\n         0     0%  9.52%       10ms  1.19%  encoding/json.(*encodeState).reflectValue\n         0     0%  9.52%       10ms  1.19%  encoding/json.(*ptrEncoder).(encoding/json.encode)-fm\n         0     0%  9.52%       10ms  1.19%  encoding/json.(*ptrEncoder).encode\n         0     0%  9.52%       10ms  1.19%  encoding/json.(*structEncoder).(encoding/json.encode)-fm\nMemprofile: nothing to show.\nBlockprofile: nothing to show.. Benchmark:\nBenchmarkBearerTokenAuthKeySession-4        1000           2882102 ns/op           81040 B/op        428 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 110ms, 14.10% of 780ms total\nShowing top 10 nodes out of 22\n      flat  flat%   sum%        cum   cum%\n      30ms  3.85%  3.85%       40ms  5.13%  context.(*valueCtx).Value\n      20ms  2.56%  6.41%       40ms  5.13%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1.1\n      10ms  1.28%  7.69%       10ms  1.28%  context.(*emptyCtx).Value\n      10ms  1.28%  8.97%       10ms  1.28%  net.(*TCPConn).Read\n      10ms  1.28% 10.26%       10ms  1.28%  sync.(*Pool).pin\n      10ms  1.28% 11.54%       10ms  1.28%  sync.(*RWMutex).RLock\n      10ms  1.28% 12.82%       10ms  1.28%  sync.(*WaitGroup).Add\n      10ms  1.28% 14.10%       10ms  1.28%  vendor/golang_org/x/net/lex/httplex.ValidHeaderFieldValue\n         0     0% 14.10%       10ms  1.28%  github.com/TykTechnologies/tyk.(*KeyExpired).ProcessRequest\n         0     0% 14.10%       10ms  1.28%  github.com/TykTechnologies/tyk.BenchmarkBearerTokenAuthKeySession\nMemprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 80ms, 10.26% of 780ms total\nShowing top 10 nodes out of 19\n      flat  flat%   sum%        cum   cum%\n      30ms  3.85%  3.85%       30ms  3.85%  context.(*valueCtx).Value\n      10ms  1.28%  5.13%       10ms  1.28%  github.com/TykTechnologies/tyk.createMiddleware.func1.1\n      10ms  1.28%  6.41%       10ms  1.28%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1.1\n      10ms  1.28%  7.69%       10ms  1.28%  github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(*WorkPool).SendWork\n      10ms  1.28%  8.97%       10ms  1.28%  net/http.(*persistConn).readLoop\n      10ms  1.28% 10.26%       10ms  1.28%  regexp.(*machine).onepass\n         0     0% 10.26%       10ms  1.28%  github.com/TykTechnologies/tyk.(*RedisAnalyticsHandler).RecordHit\n         0     0% 10.26%       10ms  1.28%  github.com/TykTechnologies/tyk.BenchmarkBearerTokenAuthKeySession\n         0     0% 10.26%       10ms  1.28%  github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux.(*Route).Match\n         0     0% 10.26%       10ms  1.28%  github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux.(*Router).Match\nBlockprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.25s, 14.62% of 1.71s total\nShowing top 10 nodes out of 33\n      flat  flat%   sum%        cum   cum%\n     0.12s  7.02%  7.02%      0.17s  9.94%  context.(*valueCtx).Value\n     0.05s  2.92%  9.94%      0.05s  2.92%  context.(*emptyCtx).Value\n     0.03s  1.75% 11.70%      0.03s  1.75%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1.1\n     0.01s  0.58% 12.28%      0.01s  0.58%  context.(*valueCtx).Done\n     0.01s  0.58% 12.87%      0.01s  0.58%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/tyk/storage.HashKey\n     0.01s  0.58% 13.45%      0.01s  0.58%  net.(*TCPConn).Read\n     0.01s  0.58% 14.04%      0.01s  0.58%  net/http.(*persistConn).readLoop\n     0.01s  0.58% 14.62%      0.01s  0.58%  reflect.implements\n         0     0% 14.62%      0.01s  0.58%  github.com/TykTechnologies/tyk.(*DefaultSessionManager).UpdateSession\n         0     0% 14.62%      0.01s  0.58%  github.com/TykTechnologies/tyk.(*RateLimitAndQuotaCheck).ProcessRequest. Benchmark:\nBenchmarkMultiAuthBackwardsCompatibleSession-4              1000           2293089 ns/op           82240 B/op        432 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.22s, 10.38% of 2.12s total\nShowing top 10 nodes out of 101\n      flat  flat%   sum%        cum   cum%\n     0.11s  5.19%  5.19%      0.12s  5.66%  context.(*valueCtx).Value\n     0.03s  1.42%  6.60%      0.03s  1.42%  net.(*TCPConn).Read\n     0.01s  0.47%  7.08%      0.01s  0.47%  context.(*emptyCtx).Value\n     0.01s  0.47%  7.55%      0.01s  0.47%  context.(*valueCtx).Done\n     0.01s  0.47%  8.02%      0.01s  0.47%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1.1\n     0.01s  0.47%  8.49%      0.01s  0.47%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto/parser.(*_parser).scanString\n     0.01s  0.47%  8.96%      0.03s  1.42%  net/http.(*persistConn).writeLoop\n     0.01s  0.47%  9.43%      0.01s  0.47%  net/url.(*URL).RequestURI\n     0.01s  0.47%  9.91%      0.01s  0.47%  reflect.Value.Field\n     0.01s  0.47% 10.38%      0.01s  0.47%  reflect.name.name\nMemprofile: nothing to show.\nBlockprofile: nothing to show.\n. Cpuprofile results for this benchmark show that getting the value out of the context is really slow.\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 5.07s, 71.41% of 7.10s total\nDropped 6 nodes (cum <= 0.04s)\nShowing top 10 nodes out of 17\n      flat  flat%   sum%        cum   cum%\n     3.73s 52.54% 52.54%      3.90s 54.93%  context.(*valueCtx).Value\n     0.48s  6.76% 59.30%      0.48s  6.76%  net/http.readCookies\n     0.43s  6.06% 65.35%      0.43s  6.06%  net/http.(*Request).WithContext\n     0.17s  2.39% 67.75%      0.17s  2.39%  context.(*emptyCtx).Value\n     0.12s  1.69% 69.44%      0.12s  1.69%  net.SplitHostPort.func1 (inline)\n     0.08s  1.13% 70.56%      0.08s  1.13%  context.WithValue\n     0.05s   0.7% 71.27%      0.05s   0.7%  github.com/TykTechnologies/tyk.copyRequest\n     0.01s  0.14% 71.41%      1.22s 17.18%  github.com/TykTechnologies/tyk.(*MiddlewareContextVars).ProcessRequest\n         0     0% 71.41%      1.22s 17.18%  github.com/TykTechnologies/tyk.BenchmarkMiddlewareContextVars_ProcessRequest_cookies\n         0     0% 71.41%      0.51s  7.18%  github.com/TykTechnologies/tyk.ctxSetData. Benchmark:\nBenchmarkHMACAuthSessionPass-4              1000           1796885 ns/op           80962 B/op        430 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.14s, 10.45% of 1.34s total\nShowing top 10 nodes out of 44\n      flat  flat%   sum%        cum   cum%\n     0.08s  5.97%  5.97%      0.08s  5.97%  context.(*valueCtx).Value\n     0.01s  0.75%  6.72%      0.01s  0.75%  github.com/TykTechnologies/tyk/vendor/github.com/garyburd/redigo/redis.(*conn).writeArg\n     0.01s  0.75%  7.46%      0.01s  0.75%  github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(*WorkPool).SendWork\n     0.01s  0.75%  8.21%      0.01s  0.75%  net.(*TCPConn).Read\n     0.01s  0.75%  8.96%      0.01s  0.75%  net/http.(*htmlSig).match\n     0.01s  0.75%  9.70%      0.01s  0.75%  net/http.(*persistConn).roundTrip\n     0.01s  0.75% 10.45%      0.01s  0.75%  net/textproto.validHeaderFieldByte\n         0     0% 10.45%      0.01s  0.75%  bufio.(*Writer).Flush\n         0     0% 10.45%      0.01s  0.75%  github.com/TykTechnologies/tyk.(*DefaultSessionManager).UpdateSession\n         0     0% 10.45%      0.01s  0.75%  github.com/TykTechnologies/tyk.(*HMACMiddleware).ProcessRequest\nMemprofile: nothing to show.\nBlockprofile: nothing to show.. Benchmark:\nBenchmarkHMACAuthSessionPassWithHeaderField-4               1000           2022545 ns/op           82201 B/op        455 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.21s, 14.38% of 1.46s total\nShowing top 10 nodes out of 33\n      flat  flat%   sum%        cum   cum%\n     0.11s  7.53%  7.53%      0.15s 10.27%  context.(*valueCtx).Value\n     0.04s  2.74% 10.27%      0.04s  2.74%  context.(*emptyCtx).Value\n     0.02s  1.37% 11.64%      0.02s  1.37%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1.1\n     0.01s  0.68% 12.33%      0.01s  0.68%  github.com/TykTechnologies/tyk.(*VersionCheck).Base\n     0.01s  0.68% 13.01%      0.01s  0.68%  github.com/TykTechnologies/tyk.firstVals\n     0.01s  0.68% 13.70%      0.01s  0.68%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.(*RedisHandle).GetRedisConn\n     0.01s  0.68% 14.38%      0.01s  0.68%  net/http.Header.sortedKeyValues\n         0     0% 14.38%      0.01s  0.68%  bufio.(*Writer).Flush\n         0     0% 14.38%      0.01s  0.68%  github.com/TykTechnologies/tyk.(*DefaultSessionManager).UpdateSession\n         0     0% 14.38%      0.01s  0.68%  github.com/TykTechnologies/tyk.(*HMACMiddleware).ProcessRequest\nMemprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 1026.03kB, 66.69% of 1538.53kB total\nShowing top 10 nodes out of 32\n      flat  flat%   sum%        cum   cum%\n     514kB 33.41% 33.41%      514kB 33.41%  bufio.NewWriterSize (inline)\n  512.03kB 33.28% 66.69%   512.03kB 33.28%  reflect.(*rtype).ptrTo\n         0     0% 66.69%      514kB 33.41%  bufio.NewWriter\n         0     0% 66.69%   512.03kB 33.28%  encoding/json.(*encodeState).marshal\n         0     0% 66.69%   512.03kB 33.28%  encoding/json.(*encodeState).reflectValue\n         0     0% 66.69%   512.03kB 33.28%  encoding/json.Marshal\n         0     0% 66.69%   512.03kB 33.28%  encoding/json.newPtrEncoder\n         0     0% 66.69%   512.03kB 33.28%  encoding/json.newStructEncoder\n         0     0% 66.69%   512.03kB 33.28%  encoding/json.newTypeEncoder\n         0     0% 66.69%   512.03kB 33.28%  encoding/json.typeEncoder\nBlockprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 58.79ms, 0.056% of 105250.05ms total\nDropped 24 nodes (cum <= 526.25ms)\n      flat  flat%   sum%        cum   cum%\n   54.32ms 0.052% 0.052%    54.32ms 0.052%  sync.(*WaitGroup).Wait\n    4.46ms 0.0042% 0.056%     4.46ms 0.0042%  sync.(*Cond).Wait\n         0     0% 0.056%    54.32ms 0.052%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1\n         0     0% 0.056%     4.46ms 0.0042%  net/http.(*conn).serve\n         0     0% 0.056%     4.46ms 0.0042%  net/http.(*connReader).abortPendingRead\n         0     0% 0.056%     4.46ms 0.0042%  net/http.(*response).finishRequest\n. Benchmark:\nBenchmarkIPMiddlewarePass-4       100000             17194 ns/op           26834 B/op         95 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.15s, 4.63% of 3.24s total\nShowing top 10 nodes out of 45\n      flat  flat%   sum%        cum   cum%\n     0.02s  0.62%  0.62%      0.11s  3.40%  github.com/TykTechnologies/tyk.testReq\n     0.02s  0.62%  1.23%      0.02s  0.62%  net.parseIPv4\n     0.02s  0.62%  1.85%      0.04s  1.23%  net/http.(*transferWriter).WriteBody\n     0.02s  0.62%  2.47%      0.09s  2.78%  net/http.readRequest\n     0.02s  0.62%  3.09%      0.02s  0.62%  strings.HasPrefix (inline)\n     0.01s  0.31%  3.40%      0.01s  0.31%  bytes.(*Buffer).grow\n     0.01s  0.31%  3.70%      0.01s  0.31%  encoding/base64.(*Encoding).Encode\n     0.01s  0.31%  4.01%      0.01s  0.31%  fmt.(*buffer).WriteString (inline)\n     0.01s  0.31%  4.32%      0.08s  2.47%  github.com/TykTechnologies/tyk.AuthFailed\n     0.01s  0.31%  4.63%      0.01s  0.31%  net.IP.String\nmemprofile: nothing to show\nblockprofile: nothing to show\n. Benchmark:\nBenchmarkJWTSessionHMAC-4           1000           2467926 ns/op          110089 B/op        770 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.14s, 6.73% of 2.08s total\nShowing top 10 nodes out of 125\n      flat  flat%   sum%        cum   cum%\n     0.02s  0.96%  0.96%      0.02s  0.96%  bufio.(*Reader).fill\n     0.02s  0.96%  1.92%      0.02s  0.96%  encoding/json.(*encodeState).string\n     0.02s  0.96%  2.88%      0.07s  3.37%  github.com/TykTechnologies/tyk.createMiddleware.func1.1\n     0.02s  0.96%  3.85%      0.02s  0.96%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1.1\n     0.01s  0.48%  4.33%      0.01s  0.48%  github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(*WorkPool).SendWork\n     0.01s  0.48%  4.81%      0.01s  0.48%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto/parser.(*_parser).parseLogicalAndExpression\n     0.01s  0.48%  5.29%      0.01s  0.48%  github.com/TykTechnologies/tyk/vendor/gopkg.in/vmihailenco/msgpack%2ev2.encodeStructValue\n     0.01s  0.48%  5.77%      0.01s  0.48%  net.(*TCPConn).Read\n     0.01s  0.48%  6.25%      0.02s  0.96%  net/http.(*persistConn).readLoop\n     0.01s  0.48%  6.73%      0.01s  0.48%  net/textproto.MIMEHeader.Get\nmemprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 512.05kB, 25.00% of 2048.31kB total\nShowing top 10 nodes out of 13\n      flat  flat%   sum%        cum   cum%\n  512.05kB 25.00% 25.00%   512.05kB 25.00%  net/http.(*persistConn).roundTrip\n         0     0% 25.00%   512.05kB 25.00%  github.com/TykTechnologies/tyk.(*DummyProxyHandler).ServeHTTP\n         0     0% 25.00%   512.05kB 25.00%  github.com/TykTechnologies/tyk.(*ReverseProxy).ServeHTTP\n         0     0% 25.00%   512.05kB 25.00%  github.com/TykTechnologies/tyk.(*ReverseProxy).WrappedServeHTTP\n         0     0% 25.00%   512.05kB 25.00%  github.com/TykTechnologies/tyk.(*SuccessHandler).ServeHTTP\n         0     0% 25.00%   512.05kB 25.00%  github.com/TykTechnologies/tyk.(*mainHandler).ServeHTTP\n         0     0% 25.00%   512.05kB 25.00%  github.com/TykTechnologies/tyk.createMiddleware.func1.1\n         0     0% 25.00%   512.05kB 25.00%  github.com/TykTechnologies/tyk.mainHandler.ServeHTTP\n         0     0% 25.00%   512.05kB 25.00%  github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux.(*Router).ServeHTTP\n         0     0% 25.00%   512.05kB 25.00%  net/http.(*Transport).RoundTrip\nblockprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.13s, 0.073% of 178.91s total\nDropped 44 nodes (cum <= 0.89s)\n      flat  flat%   sum%        cum   cum%\n     0.10s 0.056% 0.056%      0.10s 0.056%  sync.(*WaitGroup).Wait\n     0.02s 0.011% 0.067%      0.02s 0.011%  sync.(*Mutex).Lock\n     0.01s 0.0057% 0.073%      0.01s 0.0057%  sync.(*Cond).Wait\n         0     0% 0.073%      0.02s 0.011%  github.com/TykTechnologies/tyk.reloadSimulation\n         0     0% 0.073%      0.10s 0.056%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1\n         0     0% 0.073%      0.01s 0.0058%  net/http.(*conn).serve\n         0     0% 0.073%      0.01s 0.0057%  net/http.(*connReader).abortPendingRead\n         0     0% 0.073%      0.01s 0.0057%  net/http.(*response).finishRequest\n         0     0% 0.073%      0.02s 0.011%  sync.(*RWMutex).Lock. Benchmark:\nBenchmarkJWTSessionRSA-4             500           2344871 ns/op          148497 B/op       1030 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 30ms, 3.45% of 870ms total\nShowing top 10 nodes out of 40\n      flat  flat%   sum%        cum   cum%\n      10ms  1.15%  1.15%       10ms  1.15%  bytes.(*Buffer).WriteString\n      10ms  1.15%  2.30%       10ms  1.15%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1.1\n      10ms  1.15%  3.45%       10ms  1.15%  strconv.Quote\n         0     0%  3.45%       10ms  1.15%  encoding/json.(*Decoder).Decode\n         0     0%  3.45%       10ms  1.15%  encoding/json.(*decodeState).object\n         0     0%  3.45%       10ms  1.15%  encoding/json.(*decodeState).unmarshal\n         0     0%  3.45%       10ms  1.15%  encoding/json.(*decodeState).value\n         0     0%  3.45%       10ms  1.15%  encoding/json.(*encodeState).marshal\n         0     0%  3.45%       10ms  1.15%  encoding/json.(*encodeState).reflectValue\n         0     0%  3.45%       10ms  1.15%  encoding/json.(*ptrEncoder).(encoding/json.encode)-fm\nmemprofile: nothing to show\nblockprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 43.73ms, 0.075% of 57973.57ms total\nDropped 25 nodes (cum <= 289.87ms)\n      flat  flat%   sum%        cum   cum%\n   26.09ms 0.045% 0.045%    26.09ms 0.045%  sync.(*WaitGroup).Wait\n   14.38ms 0.025%  0.07%    14.38ms 0.025%  sync.(*Mutex).Lock\n    3.27ms 0.0056% 0.075%     3.27ms 0.0056%  sync.(*Cond).Wait\n         0     0% 0.075%    14.35ms 0.025%  github.com/TykTechnologies/tyk.reloadSimulation\n         0     0% 0.075%    26.09ms 0.045%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1\n         0     0% 0.075%     3.29ms 0.0057%  net/http.(*conn).serve\n         0     0% 0.075%     3.27ms 0.0056%  net/http.(*connReader).abortPendingRead\n         0     0% 0.075%     3.27ms 0.0056%  net/http.(*response).finishRequest\n         0     0% 0.075%    14.35ms 0.025%  sync.(*RWMutex).Lock. Benchmark\nBenchmarkJWTSessionRSABearer-4              1000           1965649 ns/op          140934 B/op        847 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 70ms, 7.95% of 880ms total\nShowing top 10 nodes out of 72\n      flat  flat%   sum%        cum   cum%\n      10ms  1.14%  1.14%       10ms  1.14%  encoding/json.(*decodeState).value\n      10ms  1.14%  2.27%       10ms  1.14%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1.1\n      10ms  1.14%  3.41%       10ms  1.14%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/tyk/storage.HashKey\n      10ms  1.14%  4.55%       10ms  1.14%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto/parser.(*_parser).parseEqualityExpression\n      10ms  1.14%  5.68%       10ms  1.14%  math/big.addMulVVW\n      10ms  1.14%  6.82%       10ms  1.14%  net/textproto.validHeaderFieldByte\n      10ms  1.14%  7.95%       10ms  1.14%  net/url.(*URL).String\n         0     0%  7.95%       10ms  1.14%  crypto/rsa.VerifyPKCS1v15\n         0     0%  7.95%       10ms  1.14%  crypto/rsa.encrypt\n         0     0%  7.95%       10ms  1.14%  encoding/json.(*decodeState).object\nmemprofile: nothing to show\nBlockprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 87.29ms, 0.062% of 140548.56ms total\nDropped 25 nodes (cum <= 702.74ms)\n      flat  flat%   sum%        cum   cum%\n   66.27ms 0.047% 0.047%    66.27ms 0.047%  sync.(*WaitGroup).Wait\n   13.89ms 0.0099% 0.057%    13.89ms 0.0099%  sync.(*Mutex).Lock\n    7.13ms 0.0051% 0.062%     7.13ms 0.0051%  sync.(*Cond).Wait\n         0     0% 0.062%    13.59ms 0.0097%  github.com/TykTechnologies/tyk.reloadSimulation\n         0     0% 0.062%    66.27ms 0.047%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1\n         0     0% 0.062%     7.28ms 0.0052%  net/http.(*conn).serve\n         0     0% 0.062%     7.13ms 0.0051%  net/http.(*connReader).abortPendingRead\n         0     0% 0.062%     7.13ms 0.0051%  net/http.(*response).finishRequest\n         0     0% 0.062%    13.59ms 0.0097%  sync.(*RWMutex).Lock. Benchmark:\nBenchmarkJWTSessionRSAWithRawSourceOnWithClientID-4         1000           1627569 ns/op          131313 B/op        871 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.19s, 8.56% of 2.22s total\nShowing top 10 nodes out of 75\n      flat  flat%   sum%        cum   cum%\n     0.05s  2.25%  2.25%      0.05s  2.25%  math/big.addMulVVW\n     0.04s  1.80%  4.05%      0.06s  2.70%  math/big.nat.divLarge\n     0.03s  1.35%  5.41%      0.03s  1.35%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1.1\n     0.01s  0.45%  5.86%      0.01s  0.45%  bytes.(*Buffer).WriteByte\n     0.01s  0.45%  6.31%      0.01s  0.45%  context.Background\n     0.01s  0.45%  6.76%      0.01s  0.45%  crypto/sha512.New\n     0.01s  0.45%  7.21%      0.01s  0.45%  encoding/json.(*decodeState).literalStore\n     0.01s  0.45%  7.66%      0.01s  0.45%  github.com/TykTechnologies/tyk.(*DefaultSessionManager).Store\n     0.01s  0.45%  8.11%      0.01s  0.45%  github.com/TykTechnologies/tyk.(*ReverseProxy).WrappedServeHTTP.func1\n     0.01s  0.45%  8.56%      0.01s  0.45%  github.com/TykTechnologies/tyk.requestIPHops\nMemprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 1026.21kB, 40.05% of 2562.42kB total\nShowing top 10 nodes out of 31\n      flat  flat%   sum%        cum   cum%\n     514kB 20.06% 20.06%      514kB 20.06%  bufio.NewReaderSize (inline)\n  512.20kB 19.99% 40.05%   512.20kB 19.99%  reflect.newName\n         0     0% 40.05%      514kB 20.06%  bufio.NewReader\n         0     0% 40.05%   512.20kB 19.99%  encoding/json.(*encodeState).marshal\n         0     0% 40.05%   512.20kB 19.99%  encoding/json.(*encodeState).reflectValue\n         0     0% 40.05%   512.20kB 19.99%  encoding/json.Marshal\n         0     0% 40.05%   512.20kB 19.99%  encoding/json.newPtrEncoder\n         0     0% 40.05%   512.20kB 19.99%  encoding/json.newStructEncoder\n         0     0% 40.05%   512.20kB 19.99%  encoding/json.newTypeEncoder\n         0     0% 40.05%   512.20kB 19.99%  encoding/json.typeEncoder\nBlockprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 86.50ms, 0.065% of 133607.60ms total\nDropped 30 nodes (cum <= 668.04ms)\n      flat  flat%   sum%        cum   cum%\n   61.71ms 0.046% 0.046%    61.71ms 0.046%  sync.(*WaitGroup).Wait\n   15.34ms 0.011% 0.058%    15.34ms 0.011%  sync.(*Mutex).Lock\n    9.44ms 0.0071% 0.065%     9.44ms 0.0071%  sync.(*Cond).Wait\n         0     0% 0.065%    15.14ms 0.011%  github.com/TykTechnologies/tyk.reloadSimulation\n         0     0% 0.065%    61.71ms 0.046%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1\n         0     0% 0.065%     9.64ms 0.0072%  net/http.(*conn).serve\n         0     0% 0.065%     9.44ms 0.0071%  net/http.(*connReader).abortPendingRead\n         0     0% 0.065%     9.44ms 0.0071%  net/http.(*response).finishRequest\n         0     0% 0.065%    15.14ms 0.011%  sync.(*RWMutex).Lock. benchmark:\nBenchmarkJWTSessionRSAWithRawSource-4               1000           1570452 ns/op          125562 B/op        854 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.15s, 6.76% of 2.22s total\nShowing top 10 nodes out of 107\n      flat  flat%   sum%        cum   cum%\n     0.05s  2.25%  2.25%      0.05s  2.25%  math/big.mulAddVWW\n     0.02s   0.9%  3.15%      0.03s  1.35%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1.1\n     0.01s  0.45%  3.60%      0.01s  0.45%  crypto/x509.getPublicKeyAlgorithmFromOID\n     0.01s  0.45%  4.05%      0.01s  0.45%  fmt.(*pp).printArg\n     0.01s  0.45%  4.50%      0.01s  0.45%  github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(*WorkPool).SendWork\n     0.01s  0.45%  4.95%      0.01s  0.45%  github.com/TykTechnologies/tyk/vendor/gopkg.in/vmihailenco/msgpack%2ev2.(*Encoder).EncodeUint64\n     0.01s  0.45%  5.41%      0.02s   0.9%  github.com/TykTechnologies/tyk/vendor/gopkg.in/vmihailenco/msgpack%2ev2._getEncoder\n     0.01s  0.45%  5.86%      0.06s  2.70%  math/big.nat.divLarge\n     0.01s  0.45%  6.31%      0.01s  0.45%  math/big.nat.setBytes\n     0.01s  0.45%  6.76%      0.01s  0.45%  net.(*TCPConn).Read\nMemprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 520.04kB, 7.24% of 7185.66kB total\nShowing top 10 nodes out of 16\n      flat  flat%   sum%        cum   cum%\n  520.04kB  7.24%  7.24%   520.04kB  7.24%  encoding/json.typeFields\n         0     0%  7.24%   520.04kB  7.24%  encoding/json.(*encodeState).marshal\n         0     0%  7.24%   520.04kB  7.24%  encoding/json.(*encodeState).reflectValue\n         0     0%  7.24%   520.04kB  7.24%  encoding/json.Marshal\n         0     0%  7.24%   520.04kB  7.24%  encoding/json.cachedTypeFields\n         0     0%  7.24%   520.04kB  7.24%  encoding/json.newPtrEncoder\n         0     0%  7.24%   520.04kB  7.24%  encoding/json.newStructEncoder\n         0     0%  7.24%   520.04kB  7.24%  encoding/json.newTypeEncoder\n         0     0%  7.24%   520.04kB  7.24%  encoding/json.typeEncoder\n         0     0%  7.24%   520.04kB  7.24%  encoding/json.valueEncoder\nBlockprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 86570.92us, 0.068% of 128215584.63us total\nDropped 27 nodes (cum <= 641077.92us)\n      flat  flat%   sum%        cum   cum%\n64915.10us 0.051% 0.051% 64915.10us 0.051%  sync.(*WaitGroup).Wait\n13357.35us  0.01% 0.061% 13357.35us  0.01%  sync.(*Mutex).Lock\n 8295.35us 0.0065% 0.068%  8295.35us 0.0065%  sync.(*Cond).Wait\n    3.13us 2.4e-06% 0.068% 13126.11us  0.01%  sync.(*RWMutex).Lock\n         0     0% 0.068% 13126.11us  0.01%  github.com/TykTechnologies/tyk.reloadSimulation\n         0     0% 0.068% 64915.10us 0.051%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1\n         0     0% 0.068%  8402.90us 0.0066%  net/http.(*conn).serve\n         0     0% 0.068%  8295.35us 0.0065%  net/http.(*connReader).abortPendingRead\n         0     0% 0.068%  8295.35us 0.0065%  net/http.(*response).finishRequest. Benchmark:\nBenchmarkJWTSessionRSAWithJWK-4             1000           1690543 ns/op          125827 B/op        859 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.14s, 6.45% of 2.17s total\nShowing top 10 nodes out of 75\n      flat  flat%   sum%        cum   cum%\n     0.05s  2.30%  2.30%      0.07s  3.23%  math/big.nat.divLarge\n     0.01s  0.46%  2.76%      0.01s  0.46%  bytes.(*Buffer).WriteString\n     0.01s  0.46%  3.23%      0.01s  0.46%  crypto/sha512.(*digest).checkSum\n     0.01s  0.46%  3.69%      0.01s  0.46%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/tyk/test.NewRequest\n     0.01s  0.46%  4.15%      0.01s  0.46%  io.copyBuffer\n     0.01s  0.46%  4.61%      0.01s  0.46%  math/big.addMulVVW\n     0.01s  0.46%  5.07%      0.01s  0.46%  math/big.mulAddVWW\n     0.01s  0.46%  5.53%      0.01s  0.46%  math/big.subVV\n     0.01s  0.46%  5.99%      0.01s  0.46%  net.(*TCPConn).Read\n     0.01s  0.46%  6.45%      0.01s  0.46%  net/http.(*noBody).Read\nMemprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 514kB, 9.12% of 5635.20kB total\nShowing top 10 nodes out of 25\n      flat  flat%   sum%        cum   cum%\n     514kB  9.12%  9.12%      514kB  9.12%  bufio.NewReaderSize (inline)\n         0     0%  9.12%      514kB  9.12%  bufio.NewReader (inline)\n         0     0%  9.12%      514kB  9.12%  github.com/TykTechnologies/tyk.(*DefaultSessionManager).UpdateSession\n         0     0%  9.12%      514kB  9.12%  github.com/TykTechnologies/tyk.(*JWTMiddleware).ProcessRequest\n         0     0%  9.12%      514kB  9.12%  github.com/TykTechnologies/tyk.(*JWTMiddleware).processCentralisedJWT\n         0     0%  9.12%      514kB  9.12%  github.com/TykTechnologies/tyk.(*mainHandler).ServeHTTP\n         0     0%  9.12%      514kB  9.12%  github.com/TykTechnologies/tyk.BaseMiddleware.ApplyPolicies\n         0     0%  9.12%      514kB  9.12%  github.com/TykTechnologies/tyk.BaseMiddleware.CheckSessionAndIdentityForValidKey\n         0     0%  9.12%      514kB  9.12%  github.com/TykTechnologies/tyk.createMiddleware.func1.1\n         0     0%  9.12%      514kB  9.12%  github.com/TykTechnologies/tyk.mainHandler.ServeHTTP\nBlockprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 64.69ms, 0.074% of 87196.28ms total\nDropped 29 nodes (cum <= 435.98ms)\n      flat  flat%   sum%        cum   cum%\n   44.23ms 0.051% 0.051%    44.23ms 0.051%  sync.(*WaitGroup).Wait\n   14.68ms 0.017% 0.068%    14.68ms 0.017%  sync.(*Mutex).Lock\n    5.79ms 0.0066% 0.074%     5.79ms 0.0066%  sync.(*Cond).Wait\n         0     0% 0.074%    14.36ms 0.016%  github.com/TykTechnologies/tyk.reloadSimulation\n         0     0% 0.074%    44.23ms 0.051%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1\n         0     0% 0.074%     5.93ms 0.0068%  net/http.(*conn).serve\n         0     0% 0.074%     5.79ms 0.0066%  net/http.(*connReader).abortPendingRead\n         0     0% 0.074%     5.79ms 0.0066%  net/http.(*response).finishRequest\n         0     0% 0.074%    14.36ms 0.016%  sync.(*RWMutex).Lock. Benchmark:\nBenchmarkJWTSessionRSAWithEncodedJWK-4              1000           1634673 ns/op          125988 B/op        863 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.11s, 6.92% of 1.59s total\nShowing top 10 nodes out of 98\n      flat  flat%   sum%        cum   cum%\n     0.02s  1.26%  1.26%      0.02s  1.26%  github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(*WorkPool).SendWork\n     0.01s  0.63%  1.89%      0.01s  0.63%  bytes.(*Buffer).WriteString\n     0.01s  0.63%  2.52%      0.02s  1.26%  crypto/rsa.VerifyPKCS1v15\n     0.01s  0.63%  3.14%      0.01s  0.63%  fmt.(*fmt).fmt_sbx\n     0.01s  0.63%  3.77%      0.01s  0.63%  github.com/TykTechnologies/tyk.reloadSimulation\n     0.01s  0.63%  4.40%      0.02s  1.26%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto/parser.(*_parser).(github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto/parser.parseShiftExpression)-fm\n     0.01s  0.63%  5.03%      0.02s  1.26%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto/parser.(*_parser).parseRelationalExpression\n     0.01s  0.63%  5.66%      0.02s  1.26%  github.com/TykTechnologies/tyk/vendor/gopkg.in/vmihailenco/msgpack%2ev2.encodeStructValue\n     0.01s  0.63%  6.29%      0.01s  0.63%  math/big.addMulVVW\n     0.01s  0.63%  6.92%      0.01s  0.63%  net.(*TCPConn).Read\nmemprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 514kB, 9.12% of 5635.20kB total\nShowing top 10 nodes out of 25\n      flat  flat%   sum%        cum   cum%\n     514kB  9.12%  9.12%      514kB  9.12%  bufio.NewReaderSize (inline)\n         0     0%  9.12%      514kB  9.12%  bufio.NewReader (inline)\n         0     0%  9.12%      514kB  9.12%  github.com/TykTechnologies/tyk.(*DefaultSessionManager).UpdateSession\n         0     0%  9.12%      514kB  9.12%  github.com/TykTechnologies/tyk.(*JWTMiddleware).ProcessRequest\n         0     0%  9.12%      514kB  9.12%  github.com/TykTechnologies/tyk.(*JWTMiddleware).processCentralisedJWT\n         0     0%  9.12%      514kB  9.12%  github.com/TykTechnologies/tyk.(*mainHandler).ServeHTTP\n         0     0%  9.12%      514kB  9.12%  github.com/TykTechnologies/tyk.BaseMiddleware.ApplyPolicies\n         0     0%  9.12%      514kB  9.12%  github.com/TykTechnologies/tyk.BaseMiddleware.CheckSessionAndIdentityForValidKey\n         0     0%  9.12%      514kB  9.12%  github.com/TykTechnologies/tyk.createMiddleware.func1.1\n         0     0%  9.12%      514kB  9.12%  github.com/TykTechnologies/tyk.mainHandler.ServeHTTP\nBlockprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 64.69ms, 0.074% of 87196.28ms total\nDropped 29 nodes (cum <= 435.98ms)\n      flat  flat%   sum%        cum   cum%\n   44.23ms 0.051% 0.051%    44.23ms 0.051%  sync.(*WaitGroup).Wait\n   14.68ms 0.017% 0.068%    14.68ms 0.017%  sync.(*Mutex).Lock\n    5.79ms 0.0066% 0.074%     5.79ms 0.0066%  sync.(*Cond).Wait\n         0     0% 0.074%    14.36ms 0.016%  github.com/TykTechnologies/tyk.reloadSimulation\n         0     0% 0.074%    44.23ms 0.051%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1\n         0     0% 0.074%     5.93ms 0.0068%  net/http.(*conn).serve\n         0     0% 0.074%     5.79ms 0.0066%  net/http.(*connReader).abortPendingRead\n         0     0% 0.074%     5.79ms 0.0066%  net/http.(*response).finishRequest\n         0     0% 0.074%    14.36ms 0.016%  sync.(*RWMutex).Lock. Benchmark:\nBenchmarkProcessRequestLiveQuotaLimit-4              500           2103578 ns/op          100483 B/op        821 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 70ms, 9.59% of 730ms total\nShowing top 10 nodes out of 92\n      flat  flat%   sum%        cum   cum%\n      20ms  2.74%  2.74%       20ms  2.74%  net.(*TCPConn).Read\n      10ms  1.37%  4.11%       10ms  1.37%  bytes.(*Buffer).WriteString\n      10ms  1.37%  5.48%       10ms  1.37%  encoding/json.state1\n      10ms  1.37%  6.85%       10ms  1.37%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto/parser.(*_parser).parseAdditiveExpression\n      10ms  1.37%  8.22%       10ms  1.37%  reflect.Value.SetInt\n      10ms  1.37%  9.59%       10ms  1.37%  reflect.name.name\n         0     0%  9.59%       10ms  1.37%  bufio.(*Reader).Peek\n         0     0%  9.59%       10ms  1.37%  bufio.(*Reader).fill\n         0     0%  9.59%       10ms  1.37%  encoding/json.(*decodeState).literal\n         0     0%  9.59%       10ms  1.37%  encoding/json.(*decodeState).literalStore\nMemprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 1026.88kB, 24.72% of 4154.79kB total\nShowing top 10 nodes out of 30\n      flat  flat%   sum%        cum   cum%\n     514kB 12.37% 12.37%      514kB 12.37%  regexp.(*bitState).reset\n  512.88kB 12.34% 24.72%   512.88kB 12.34%  github.com/TykTechnologies/tyk/vendor/gopkg.in/vmihailenco/msgpack%2ev2.newFields (inline)\n         0     0% 24.72%   512.88kB 12.34%  github.com/TykTechnologies/tyk.(*DefaultSessionManager).SessionDetail\n         0     0% 24.72%   512.88kB 12.34%  github.com/TykTechnologies/tyk.(*OrganizationMonitor).ProcessRequest\n         0     0% 24.72%   512.88kB 12.34%  github.com/TykTechnologies/tyk.(*OrganizationMonitor).ProcessRequestLive\n         0     0% 24.72%  1026.88kB 24.72%  github.com/TykTechnologies/tyk.(*mainHandler).ServeHTTP\n         0     0% 24.72%   512.88kB 12.34%  github.com/TykTechnologies/tyk.BaseMiddleware.OrgSession\n         0     0% 24.72%   512.88kB 12.34%  github.com/TykTechnologies/tyk.createMiddleware.func1.1\n         0     0% 24.72%  1026.88kB 24.72%  github.com/TykTechnologies/tyk.mainHandler.ServeHTTP\n         0     0% 24.72%   512.88kB 12.34%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/tyk/user.(*SessionState).Hash\nBlockprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 47.36ms, 0.08% of 59022.41ms total\nDropped 24 nodes (cum <= 295.11ms)\n      flat  flat%   sum%        cum   cum%\n   32.13ms 0.054% 0.054%    32.13ms 0.054%  sync.(*WaitGroup).Wait\n   12.54ms 0.021% 0.076%    12.54ms 0.021%  sync.(*Mutex).Lock\n    2.70ms 0.0046%  0.08%     2.70ms 0.0046%  sync.(*Cond).Wait\n         0     0%  0.08%    12.42ms 0.021%  github.com/TykTechnologies/tyk.reloadSimulation\n         0     0%  0.08%    32.13ms 0.054%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1\n         0     0%  0.08%     2.73ms 0.0046%  net/http.(*conn).serve\n         0     0%  0.08%     2.70ms 0.0046%  net/http.(*connReader).abortPendingRead\n         0     0%  0.08%     2.70ms 0.0046%  net/http.(*response).finishRequest\n         0     0%  0.08%    12.42ms 0.021%  sync.(*RWMutex).Lock. Benchmark:\nBenchmarkProcessRequestOffThreadQuotaLimit-4        1000           1382624 ns/op           91852 B/op        638 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.10s, 5.52% of 1.81s total\nShowing top 10 nodes out of 121\n      flat  flat%   sum%        cum   cum%\n     0.01s  0.55%  0.55%      0.01s  0.55%  encoding/json.(*decodeState).literal\n     0.01s  0.55%  1.10%      0.03s  1.66%  encoding/json.(*decodeState).object\n     0.01s  0.55%  1.66%      0.01s  0.55%  encoding/json.(*reflectWithString).resolve\n     0.01s  0.55%  2.21%      0.01s  0.55%  encoding/json.stateInString\n     0.01s  0.55%  2.76%      0.02s  1.10%  github.com/TykTechnologies/tyk.(*ReverseProxy).WrappedServeHTTP\n     0.01s  0.55%  3.31%      0.07s  3.87%  github.com/TykTechnologies/tyk.createMiddleware.func1.1\n     0.01s  0.55%  3.87%      0.01s  0.55%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/tyk/config.Global (inline)\n     0.01s  0.55%  4.42%      0.01s  0.55%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/tyk/storage.RedisCluster.IncrememntWithExpire\n     0.01s  0.55%  4.97%      0.01s  0.55%  github.com/TykTechnologies/tyk/vendor/github.com/garyburd/redigo/redis.parseInt\n     0.01s  0.55%  5.52%      0.03s  1.66%  github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(*workerWrapper).Loop\nMemprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 512.17kB, 14.19% of 3610.49kB total\nShowing top 10 nodes out of 14\n      flat  flat%   sum%        cum   cum%\n  512.17kB 14.19% 14.19%   512.17kB 14.19%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto._newContext\n         0     0% 14.19%   512.17kB 14.19%  github.com/TykTechnologies/tyk.(*JSVM).Init\n         0     0% 14.19%   512.17kB 14.19%  github.com/TykTechnologies/tyk.APIDefinitionLoader.FromDir\n         0     0% 14.19%   512.17kB 14.19%  github.com/TykTechnologies/tyk.APIDefinitionLoader.MakeSpec\n         0     0% 14.19%   512.17kB 14.19%  github.com/TykTechnologies/tyk.BenchmarkProcessRequestOffThreadQuotaLimit\n         0     0% 14.19%   512.17kB 14.19%  github.com/TykTechnologies/tyk.buildAndLoadAPI\n         0     0% 14.19%   512.17kB 14.19%  github.com/TykTechnologies/tyk.doReload\n         0     0% 14.19%   512.17kB 14.19%  github.com/TykTechnologies/tyk.loadAPI\n         0     0% 14.19%   512.17kB 14.19%  github.com/TykTechnologies/tyk.syncAPISpecs\n         0     0% 14.19%   512.17kB 14.19%  github.com/TykTechnologies/tyk.testPrepareProcessRequestQuotaLimit\nBlockprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 122.37ms, 0.17% of 71415.76ms total\nDropped 35 nodes (cum <= 357.08ms)\nShowing top 10 nodes out of 11\n      flat  flat%   sum%        cum   cum%\n  105.31ms  0.15%  0.15%   105.31ms  0.15%  sync.(*WaitGroup).Wait\n    9.37ms 0.013%  0.16%     9.37ms 0.013%  sync.(*Mutex).Lock\n    7.69ms 0.011%  0.17%     7.69ms 0.011%  sync.(*Cond).Wait\n         0     0%  0.17%     7.53ms 0.011%  github.com/TykTechnologies/tyk.reloadSimulation\n         0     0%  0.17%   105.31ms  0.15%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1\n         0     0%  0.17%     7.76ms 0.011%  net/http.(*conn).serve\n         0     0%  0.17%     7.69ms 0.011%  net/http.(*connReader).abortPendingRead\n         0     0%  0.17%     1.61ms 0.0023%  net/http.(*connReader).backgroundRead\n         0     0%  0.17%     1.61ms 0.0023%  net/http.(*connReader).lock\n         0     0%  0.17%     7.69ms 0.011%  net/http.(*response).finishRequest. Benchmark:\nBenchmarkProcessRequestLiveRedisRollingLimiter-4             500           2292790 ns/op          120744 B/op       1339 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 100ms, 12.82% of 780ms total\nShowing top 10 nodes out of 102\n      flat  flat%   sum%        cum   cum%\n      10ms  1.28%  1.28%       10ms  1.28%  bytes.(*Buffer).tryGrowByReslice\n      10ms  1.28%  2.56%       10ms  1.28%  encoding/json.(*decodeState).object\n      10ms  1.28%  3.85%       10ms  1.28%  github.com/TykTechnologies/tyk.syncPolicies\n      10ms  1.28%  5.13%       20ms  2.56%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1.1\n      10ms  1.28%  6.41%       10ms  1.28%  github.com/TykTechnologies/tyk/vendor/github.com/garyburd/redigo/redis.(*conn).readReply\n      10ms  1.28%  7.69%       10ms  1.28%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto/parser.(*_parser).parseEqualityExpression\n      10ms  1.28%  8.97%       10ms  1.28%  net.(*TCPConn).SetReadDeadline\n      10ms  1.28% 10.26%       10ms  1.28%  net/http.(*Transport).getIdleConn\n      10ms  1.28% 11.54%       10ms  1.28%  strconv.ParseInt\n      10ms  1.28% 12.82%       10ms  1.28%  sync.(*RWMutex).RLock\nMemprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 3072.71kB, 85.71% of 3584.88kB total\nShowing top 10 nodes out of 23\n      flat  flat%   sum%        cum   cum%\n 2048.69kB 57.15% 57.15%  2048.69kB 57.15%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto._newContext\n  512.02kB 14.28% 71.43%   512.02kB 14.28%  encoding/json.fillField\n  512.01kB 14.28% 85.71%  1024.02kB 28.57%  encoding/json.newStructEncoder\n         0     0% 85.71%  1024.02kB 28.57%  encoding/json.(*encodeState).marshal\n         0     0% 85.71%  1024.02kB 28.57%  encoding/json.(*encodeState).reflectValue\n         0     0% 85.71%  1024.02kB 28.57%  encoding/json.Marshal\n         0     0% 85.71%   512.02kB 14.28%  encoding/json.cachedTypeFields\n         0     0% 85.71%  1024.02kB 28.57%  encoding/json.newPtrEncoder\n         0     0% 85.71%  1024.02kB 28.57%  encoding/json.newTypeEncoder\n         0     0% 85.71%  1024.02kB 28.57%  encoding/json.typeEncoder\nBlockprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 44.59ms, 0.077% of 57900.15ms total\nDropped 36 nodes (cum <= 289.50ms)\n      flat  flat%   sum%        cum   cum%\n   33.01ms 0.057% 0.057%    33.01ms 0.057%  sync.(*WaitGroup).Wait\n    8.38ms 0.014% 0.071%     8.38ms 0.014%  sync.(*Mutex).Lock\n    3.21ms 0.0055% 0.077%     3.21ms 0.0055%  sync.(*Cond).Wait\n         0     0% 0.077%     8.32ms 0.014%  github.com/TykTechnologies/tyk.reloadSimulation\n         0     0% 0.077%    33.01ms 0.057%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1\n         0     0% 0.077%     3.23ms 0.0056%  net/http.(*conn).serve\n         0     0% 0.077%     3.21ms 0.0055%  net/http.(*connReader).abortPendingRead\n         0     0% 0.077%     3.21ms 0.0055%  net/http.(*response).finishRequest\n         0     0% 0.077%     8.32ms 0.014%  sync.(*RWMutex).Lock. Benchmark:\nBenchmarkProcessRequestOffThreadRedisRollingLimiter-4               1000           1487561 ns/op          129212 B/op       1577 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.10s, 7.41% of 1.35s total\nShowing top 10 nodes out of 87\n      flat  flat%   sum%        cum   cum%\n     0.01s  0.74%  0.74%      0.01s  0.74%  bytes.(*Buffer).WriteByte\n     0.01s  0.74%  1.48%      0.01s  0.74%  github.com/TykTechnologies/tyk.reloadSimulation\n     0.01s  0.74%  2.22%      0.01s  0.74%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1.1\n     0.01s  0.74%  2.96%      0.01s  0.74%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto/parser.(*_parser).expect\n     0.01s  0.74%  3.70%      0.02s  1.48%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto/parser.(*_parser).parseMultiplicativeExpression\n     0.01s  0.74%  4.44%      0.01s  0.74%  net.(*TCPConn).Read\n     0.01s  0.74%  5.19%      0.01s  0.74%  net/http.Header.get\n     0.01s  0.74%  5.93%      0.01s  0.74%  net/http.fixLength\n     0.01s  0.74%  6.67%      0.02s  1.48%  net/textproto.CanonicalMIMEHeaderKey\n     0.01s  0.74%  7.41%      0.01s  0.74%  net/textproto.canonicalMIMEHeaderKey\nMemprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 512.05kB, 20.00% of 2560.27kB total\n      flat  flat%   sum%        cum   cum%\n  512.05kB 20.00% 20.00%   512.05kB 20.00%  github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(*workerWrapper).Open\n         0     0% 20.00%   512.05kB 20.00%  github.com/TykTechnologies/tyk.(*HostCheckerManager).CheckActivePollerLoop\n         0     0% 20.00%   512.05kB 20.00%  github.com/TykTechnologies/tyk.(*HostCheckerManager).StartPoller\n         0     0% 20.00%   512.05kB 20.00%  github.com/TykTechnologies/tyk.(*HostUptimeChecker).Init\n         0     0% 20.00%   512.05kB 20.00%  github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(*WorkPool).Open\nBlockprofile: \n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 137.80ms, 0.18% of 77581.25ms total\nDropped 36 nodes (cum <= 387.91ms)\nShowing top 10 nodes out of 11\n      flat  flat%   sum%        cum   cum%\n  120.71ms  0.16%  0.16%   120.71ms  0.16%  sync.(*WaitGroup).Wait\n    9.46ms 0.012%  0.17%     9.46ms 0.012%  sync.(*Cond).Wait\n    7.63ms 0.0098%  0.18%     7.63ms 0.0098%  sync.(*Mutex).Lock\n         0     0%  0.18%     6.72ms 0.0087%  github.com/TykTechnologies/tyk.reloadSimulation\n         0     0%  0.18%   120.71ms  0.16%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1\n         0     0%  0.18%     9.48ms 0.012%  net/http.(*conn).serve\n         0     0%  0.18%     9.46ms 0.012%  net/http.(*connReader).abortPendingRead\n         0     0%  0.18%     0.83ms 0.0011%  net/http.(*connReader).backgroundRead\n         0     0%  0.18%     0.83ms 0.0011%  net/http.(*connReader).lock\n         0     0%  0.18%     9.46ms 0.012%  net/http.(*response).finishRequest. Benchmark:\nBenchmarkStripAuth_stripFromHeaders-4             200000              8265 ns/op            2800 B/op         66 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 720ms, 39.56% of 1820ms total\nShowing top 10 nodes out of 34\n      flat  flat%   sum%        cum   cum%\n     150ms  8.24%  8.24%      150ms  8.24%  sync.(*Mutex).Unlock\n     120ms  6.59% 14.84%      120ms  6.59%  sync.(*Mutex).Lock\n     110ms  6.04% 20.88%      550ms 30.22%  github.com/TykTechnologies/tyk.randStringBytes\n      70ms  3.85% 24.73%      850ms 46.70%  github.com/TykTechnologies/tyk.BenchmarkStripAuth_stripFromHeaders\n      60ms  3.30% 28.02%      390ms 21.43%  math/rand.(*Rand).Int31n\n      50ms  2.75% 30.77%       50ms  2.75%  math/rand.(*rngSource).Uint64 (inline)\n      50ms  2.75% 33.52%       50ms  2.75%  net/textproto.validHeaderFieldByte (inline)\n      40ms  2.20% 35.71%      100ms  5.49%  net/textproto.CanonicalMIMEHeaderKey\n      40ms  2.20% 37.91%       60ms  3.30%  net/url.unescape\n      30ms  1.65% 39.56%      420ms 23.08%  math/rand.(*Rand).Intn\nmemprofile: nothing to show.\nblockprofile: nothing to show.. Benchmark:\nBenchmarkStripAuth_stripFromParams-4       50000             35457 ns/op           14161 B/op        220 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.42s, 16.67% of 2.52s total\nShowing top 10 nodes out of 51\n      flat  flat%   sum%        cum   cum%\n     0.11s  4.37%  4.37%      0.18s  7.14%  net/url.escape\n     0.07s  2.78%  7.14%      0.07s  2.78%  net/url.shouldEscape\n     0.07s  2.78%  9.92%      0.07s  2.78%  net/url.unescape\n     0.05s  1.98% 11.90%      0.10s  3.97%  net/url.QueryUnescape\n     0.02s  0.79% 12.70%      0.65s 25.79%  github.com/TykTechnologies/tyk.BenchmarkStripAuth_stripFromParams\n     0.02s  0.79% 13.49%      0.02s  0.79%  math/rand.(*rngSource).Uint64 (inline)\n     0.02s  0.79% 14.29%      0.02s  0.79%  net/http.isNotToken\n     0.02s  0.79% 15.08%      0.15s  5.95%  net/url.parseQuery\n     0.02s  0.79% 15.87%      0.02s  0.79%  sync.(*Mutex).Lock\n     0.02s  0.79% 16.67%      0.02s  0.79%  sync.(*Mutex).Unlock\nMemprofile: nothing to show.\nBlockprofile: nothing to show.\n```\n```. benchmark:\nBenchmarkTransformNonAscii-4      100000             14620 ns/op           11061 B/op         98 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.16s, 7.62% of 2.10s total\nShowing top 10 nodes out of 58\n      flat  flat%   sum%        cum   cum%\n     0.05s  2.38%  2.38%      0.05s  2.38%  unicode/utf8.DecodeRune\n     0.02s  0.95%  3.33%      0.02s  0.95%  bytes.(*Reader).ReadByte\n     0.02s  0.95%  4.29%      0.02s  0.95%  net/http.readTransfer\n     0.01s  0.48%  4.76%      0.01s  0.48%  bufio.(*Reader).Peek\n     0.01s  0.48%  5.24%      0.01s  0.48%  bytes.(*Buffer).WriteByte\n     0.01s  0.48%  5.71%      0.01s  0.48%  bytes.(*Buffer).grow\n     0.01s  0.48%  6.19%      0.03s  1.43%  encoding/xml.(*Decoder).getc\n     0.01s  0.48%  6.67%      0.13s  6.19%  encoding/xml.(*Decoder).rawToken\n     0.01s  0.48%  7.14%      0.08s  3.81%  encoding/xml.(*Decoder).text\n     0.01s  0.48%  7.62%      0.01s  0.48%  encoding/xml.(*Decoder).translate\nMemprofile: nothing to show.\nBlockprofile: nothing to show.. Benchmark:\nBenchmarkTransformJSONMarshal-4           100000             15452 ns/op           11509 B/op        101 allocs/op\nCpuprofile:\npprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.11s, 4.85% of 2.27s total\nShowing top 10 nodes out of 55\n      flat  flat%   sum%        cum   cum%\n     0.02s  0.88%  0.88%      0.07s  3.08%  text/template.(*state).evalCall\n     0.01s  0.44%  1.32%      0.01s  0.44%  bytes.(*Buffer).Write\n     0.01s  0.44%  1.76%      0.01s  0.44%  bytes.(*Reader).ReadByte\n     0.01s  0.44%  2.20%      0.05s  2.20%  encoding/xml.(*Decoder).Token\n     0.01s  0.44%  2.64%      0.02s  0.88%  encoding/xml.(*Decoder).name\n     0.01s  0.44%  3.08%      0.01s  0.44%  encoding/xml.(*Decoder).pop (inline)\n     0.01s  0.44%  3.52%      0.06s  2.64%  github.com/TykTechnologies/tyk/vendor/github.com/clbanning/mxj.xmlToMapParser\n     0.01s  0.44%  3.96%      0.01s  0.44%  net/http.Header.Del\n     0.01s  0.44%  4.41%      0.03s  1.32%  net/http.readRequest\n     0.01s  0.44%  4.85%      0.04s  1.76%  net/http/httptest.NewRequest\nMemprofile: nothing to show.\nBlockprofile: nothing to show.. Benchmark:\nBenchmarkValidateJSONSchema-4                500           2367463 ns/op          293039 B/op       2664 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.10s, 6.71% of 1.49s total\nShowing top 10 nodes out of 104\n      flat  flat%   sum%        cum   cum%\n     0.01s  0.67%  0.67%      0.01s  0.67%  bufio.(*Reader).Read\n     0.01s  0.67%  1.34%      0.01s  0.67%  bytes.(*Buffer).WriteString\n     0.01s  0.67%  2.01%      0.01s  0.67%  bytes.makeSlice\n     0.01s  0.67%  2.68%      0.01s  0.67%  encoding/json.(*decodeState).arrayInterface\n     0.01s  0.67%  3.36%      0.02s  1.34%  encoding/json.(*decodeState).unmarshal\n     0.01s  0.67%  4.03%      0.01s  0.67%  encoding/json.valueEncoder\n     0.01s  0.67%  4.70%      0.01s  0.67%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/logrus.(*Logger).Debug\n     0.01s  0.67%  5.37%      0.01s  0.67%  github.com/TykTechnologies/tyk/vendor/github.com/garyburd/redigo/redis.(*activeConn).Close\n     0.01s  0.67%  6.04%      0.01s  0.67%  github.com/TykTechnologies/tyk/vendor/github.com/oschwald/maxminddb-golang.uintFromBytes\n     0.01s  0.67%  6.71%      0.01s  0.67%  io.CopyN\nMemprofile nothing to show.\nBlockprofile nothing to show.\n. Benchmark:\nBenchmarkVirtualEndpoint-4          2000            906994 ns/op           71025 B/op        407 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.10s, 4.59% of 2.18s total\nShowing top 10 nodes out of 106\n      flat  flat%   sum%        cum   cum%\n     0.01s  0.46%  0.46%      0.01s  0.46%  bytes.(*Buffer).Write\n     0.01s  0.46%  0.92%      0.01s  0.46%  encoding/base64.(*Encoding).decode64\n     0.01s  0.46%  1.38%      0.01s  0.46%  github.com/TykTechnologies/tyk.(*AnalyticsRecord).NormalisePath\n     0.01s  0.46%  1.83%      0.01s  0.46%  github.com/TykTechnologies/tyk.(*JSVM).Init\n     0.01s  0.46%  2.29%      0.01s  0.46%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1.1\n     0.01s  0.46%  2.75%      0.01s  0.46%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/tyk/storage.RedisCluster.singleton\n     0.01s  0.46%  3.21%      0.01s  0.46%  github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(*WorkPool).SendWork\n     0.01s  0.46%  3.67%      0.01s  0.46%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto/parser.(*_parser).parseBitwiseOrExpression\n     0.01s  0.46%  4.13%      0.01s  0.46%  net.(*TCPConn).Read\n     0.01s  0.46%  4.59%      0.01s  0.46%  net.last\nMemprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 512.88kB, 19.97% of 2567.89kB total\nShowing top 10 nodes out of 16\n      flat  flat%   sum%        cum   cum%\n  512.88kB 19.97% 19.97%   512.88kB 19.97%  encoding/json.typeFields\n         0     0% 19.97%   512.88kB 19.97%  encoding/json.(*encodeState).marshal\n         0     0% 19.97%   512.88kB 19.97%  encoding/json.(*encodeState).reflectValue\n         0     0% 19.97%   512.88kB 19.97%  encoding/json.Marshal\n         0     0% 19.97%   512.88kB 19.97%  encoding/json.cachedTypeFields\n         0     0% 19.97%   512.88kB 19.97%  encoding/json.newPtrEncoder\n         0     0% 19.97%   512.88kB 19.97%  encoding/json.newStructEncoder\n         0     0% 19.97%   512.88kB 19.97%  encoding/json.newTypeEncoder\n         0     0% 19.97%   512.88kB 19.97%  encoding/json.typeEncoder\n         0     0% 19.97%   512.88kB 19.97%  encoding/json.valueEncoder\nBlockprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.11s, 0.08% of 137.90s total\nDropped 23 nodes (cum <= 0.69s)\n      flat  flat%   sum%        cum   cum%\n     0.08s 0.057% 0.057%      0.08s 0.057%  sync.(*WaitGroup).Wait\n     0.02s 0.014% 0.071%      0.02s 0.014%  sync.(*Mutex).Lock\n     0.01s 0.0086%  0.08%      0.01s 0.0086%  sync.(*Cond).Wait\n         0     0%  0.08%      0.02s 0.014%  github.com/TykTechnologies/tyk.reloadSimulation\n         0     0%  0.08%      0.08s 0.057%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1\n         0     0%  0.08%      0.01s 0.0086%  net/http.(*conn).serve\n         0     0%  0.08%      0.01s 0.0086%  net/http.(*connReader).abortPendingRead\n         0     0%  0.08%      0.01s 0.0086%  net/http.(*response).finishRequest\n         0     0%  0.08%      0.02s 0.014%  sync.(*RWMutex).Lock. Benchmark:\nBenchmarkApplyPolicies-4           10000            108664 ns/op          254138 B/op        305 allocs/op\nCpuprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.06s, 3.00% of 2s total\nShowing top 10 nodes out of 23\n      flat  flat%   sum%        cum   cum%\n     0.01s   0.5%   0.5%      0.01s   0.5%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/tyk/config.Global (inline)\n     0.01s   0.5%  1.00%      0.02s  1.00%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/tyk/user.(*SessionState).Lifetime\n     0.01s   0.5%  1.50%      0.04s  2.00%  github.com/TykTechnologies/tyk/vendor/github.com/x-cray/logrus-prefixed-formatter.(*TextFormatter).Format\n     0.01s   0.5%  2.00%      0.01s   0.5%  regexp.(*bitState).reset\n     0.01s   0.5%  2.50%      0.01s   0.5%  regexp.progMachine\n     0.01s   0.5%  3.00%      0.01s   0.5%  regexp/syntax.(*Regexp).Simplify\n         0     0%  3.00%      0.06s  3.00%  github.com/TykTechnologies/tyk.BaseMiddleware.ApplyPolicies\n         0     0%  3.00%      0.06s  3.00%  github.com/TykTechnologies/tyk.BenchmarkApplyPolicies\n         0     0%  3.00%      0.04s  2.00%  github.com/TykTechnologies/tyk/vendor/github.com/Sirupsen/logrus.(*Entry).Error\n         0     0%  3.00%      0.04s  2.00%  github.com/TykTechnologies/tyk/vendor/github.com/Sirupsen/logrus.(*Logger).Error\nNothing to show for memprofile.\nBlockprofile:\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.42ms, 0.039% of 1063.01ms total\n      flat  flat%   sum%        cum   cum%\n    0.40ms 0.038% 0.038%     0.40ms 0.038%  sync.(*RWMutex).RLock\n    0.01ms 0.0013% 0.039%     0.01ms 0.0013%  sync.(*RWMutex).Lock\n         0     0% 0.039%     0.40ms 0.038%  github.com/TykTechnologies/tyk.BaseMiddleware.ApplyPolicies\n         0     0% 0.039%     0.40ms 0.038%  github.com/TykTechnologies/tyk.BenchmarkApplyPolicies\n         0     0% 0.039%     0.01ms 0.0013%  github.com/TykTechnologies/tyk.reloadSimulation\n         0     0% 0.039%     0.40ms 0.038%  testing.(*B).launch\n         0     0% 0.039%     0.40ms 0.038%  testing.(*B).runN. Test benchmark\nBenchmarkResponseHeaderInjection-4           500           2704675 ns/op          397211 B/op       2432 allocs/op\nCpuprofile\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.08s, 4.60% of 1.74s total\nShowing top 10 nodes out of 71\n      flat  flat%   sum%        cum   cum%\n     0.01s  0.57%  0.57%      0.01s  0.57%  bufio.(*Writer).WriteString\n     0.01s  0.57%  1.15%      0.03s  1.72%  github.com/TykTechnologies/tyk.(*APISpec).CheckSpecMatchesStatus\n     0.01s  0.57%  1.72%      0.01s  0.57%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/tyk/request.RealIP\n     0.01s  0.57%  2.30%      0.01s  0.57%  github.com/TykTechnologies/tyk/vendor/github.com/robertkrimen/otto/parser.(*_parser).parseBitwiseExclusiveOrExpression\n     0.01s  0.57%  2.87%      0.01s  0.57%  github.com/TykTechnologies/tyk/vendor/gopkg.in/vmihailenco/msgpack%2ev2.(*Encoder).write2\n     0.01s  0.57%  3.45%      0.01s  0.57%  regexp.(*bitState).reset\n     0.01s  0.57%  4.02%      0.01s  0.57%  regexp.(*machine).tryBacktrack\n     0.01s  0.57%  4.60%      0.01s  0.57%  vendor/golang_org/x/net/lex/httplex.ValidHeaderFieldValue\n         0     0%  4.60%      0.01s  0.57%  github.com/TykTechnologies/tyk.(*DummyProxyHandler).ServeHTTP\n         0     0%  4.60%      0.01s  0.57%  github.com/TykTechnologies/tyk.(*HeaderInjector).HandleResponse\nMemprofile\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 514kB, 11.10% of 4629.09kB total\nShowing top 10 nodes out of 17\n      flat  flat%   sum%        cum   cum%\n     514kB 11.10% 11.10%      514kB 11.10%  bufio.NewWriterSize (inline)\n         0     0% 11.10%      514kB 11.10%  bufio.NewWriter (inline)\n         0     0% 11.10%      514kB 11.10%  github.com/TykTechnologies/tyk.(*RedisAnalyticsHandler).RecordHit.func1\n         0     0% 11.10%      514kB 11.10%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.(*RedisCluster).Do\n         0     0% 11.10%      514kB 11.10%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.(*RedisCluster).SendClusterCommand\n         0     0% 11.10%      514kB 11.10%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.(*RedisCluster).handleSingleMode\n         0     0% 11.10%      514kB 11.10%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.(*RedisHandle).Do\n         0     0% 11.10%      514kB 11.10%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.(*RedisHandle).GetRedisConn\n         0     0% 11.10%      514kB 11.10%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.NewRedisHandle.func1\n         0     0% 11.10%      514kB 11.10%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/tyk/storage.(*RedisCluster).AppendToSet\nBlock profile\n(pprof) top\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 172.06ms, 0.22% of 77204.89ms total\nDropped 40 nodes (cum <= 386.02ms)\nShowing top 10 nodes out of 11\n      flat  flat%   sum%        cum   cum%\n  131.10ms  0.17%  0.17%   131.10ms  0.17%  sync.(*WaitGroup).Wait\n   24.32ms 0.032%   0.2%    24.32ms 0.032%  sync.(*Cond).Wait\n   16.64ms 0.022%  0.22%    16.64ms 0.022%  sync.(*Mutex).Lock\n         0     0%  0.22%    13.68ms 0.018%  github.com/TykTechnologies/tyk.reloadSimulation\n         0     0%  0.22%   131.10ms  0.17%  github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/redigocluster/rediscluster.ConcurrentMap.Iter.func1\n         0     0%  0.22%    24.96ms 0.032%  net/http.(*conn).serve\n         0     0%  0.22%    24.32ms 0.032%  net/http.(*connReader).abortPendingRead\n         0     0%  0.22%     1.46ms 0.0019%  net/http.(*connReader).backgroundRead\n         0     0%  0.22%     1.46ms 0.0019%  net/http.(*connReader).lock\n         0     0%  0.22%    24.32ms 0.032%  net/http.(*response).finishRequest. IMO nothing to improve here at this time, let me know if any of you disagree.\nBenchmarkCopyRequestResponse-4            100000             14424 ns/op           35584 B/op         76 allocs/op\nActive filters:\n   ignore=runtime|syscall\nShowing nodes accounting for 0.03s, 0.95% of 3.17s total\n      flat  flat%   sum%        cum   cum%\n     0.02s  0.63%  0.63%      0.02s  0.63%  github.com/TykTechnologies/tyk.copyRequest\n     0.01s  0.32%  0.95%      0.01s  0.32%  github.com/TykTechnologies/tyk.copyResponse\n         0     0%  0.95%      0.03s  0.95%  github.com/TykTechnologies/tyk.BenchmarkCopyRequestResponse\n         0     0%  0.95%      0.03s  0.95%  testing.(*B).launch\n         0     0%  0.95%      0.03s  0.95%  testing.(*B).runN. So this change is super small... \n@buger @dencoded  For MW where a similar change needs to be made should that be a new ticket each time or should i just exand this one with other changes?. Ok will try that. \n. ```\nbenchmark                                                   old ns/op     new ns/op     delta\nBenchmarkURLReplacer-4                                      14164         14388         +1.58%\nBenchmarkTagHeaders-4                                       1263          809           -35.95%\nBenchmarkDefaultVersion-4                                   1497296       1498034       +0.05%\nBenchmarkApiReload-4                                        4120261       4204786       +2.05%\nBenchmarkMultiSession_BA_Standard_OK-4                      1417533       1831204       +29.18%\nBenchmarkBearerTokenAuthKeySession-4                        1516428       1537190       +1.37%\nBenchmarkMultiAuthBackwardsCompatibleSession-4              1559793       1537316       -1.44%\nBenchmarkBasicAuth-4                                        134240485     134034371     -0.15%\nBenchmarkContextVarsMiddleware-4                            1314566       1303267       -0.86%\nBenchmarkMiddlewareContextVars_ProcessRequest_cookies-4     228473        240776        +5.38%\nBenchmarkHMACAuthSessionPass-4                              1307875       1311953       +0.31%\nBenchmarkHMACAuthSessionPassWithHeaderField-4               1324638       1317227       -0.56%\nBenchmarkIPBlacklistMiddleware-4                            27253         30617         +12.34%\nBenchmarkIPMiddlewarePass-4                                 17405         17182         -1.28%\nBenchmarkJWTSessionHMAC-4                                   638267        624363        -2.18%\nBenchmarkJWTSessionRSA-4                                    806323        764824        -5.15%\nBenchmarkJWTSessionRSABearer-4                              789780        763499        -3.33%\nBenchmarkJWTSessionRSAWithRawSourceOnWithClientID-4         703032        709992        +0.99%\nBenchmarkJWTSessionRSAWithRawSource-4                       663589        667970        +0.66%\nBenchmarkJWTSessionRSAWithJWK-4                             672989        670970        -0.30%\nBenchmarkJWTSessionRSAWithEncodedJWK-4                      665829        682345        +2.48%\nBenchmarkProcessRequestLiveQuotaLimit-4                     590197        552551        -6.38%\nBenchmarkProcessRequestOffThreadQuotaLimit-4                481112        464043        -3.55%\nBenchmarkProcessRequestLiveRedisRollingLimiter-4            835427        811060        -2.92%\nBenchmarkProcessRequestOffThreadRedisRollingLimiter-4       597603        589735        -1.32%\nBenchmarkStripAuth_stripFromHeaders-4                       7542          7564          +0.29%\nBenchmarkStripAuth_stripFromParams-4                        35052         35823         +2.20%\nBenchmarkTransformNonAscii-4                                14642         14700         +0.40%\nBenchmarkTransformJSONMarshal-4                             15125         15487         +2.39%\nBenchmarkRewriter-4                                         284003        292416        +2.96%\nBenchmarkValidateJSONSchema-4                               1711539       1747710       +2.11%\nBenchmarkVersioning-4                                       1739161       1887525       +8.53%\nBenchmarkVirtualEndpoint-4                                  355171        371716        +4.66%\nBenchmarkApplyPolicies-4                                    23440         23324         -0.49%\nBenchmarkResponseHeaderInjection-4                          2170868       2199569       +1.32%\nBenchmarkCopyRequestResponse-4                              15648         15370         -1.78%\nBenchmarkRealIP_RemoteAddr-4                                136           137           +0.74%\nBenchmarkRealIP_ForwardedFor-4                              127           127           +0.00%\nBenchmarkRealIP_RealIP-4                                    95.7          96.2          +0.52%\nBenchmarkRealIP_Context-4                                   12.6          12.7          +0.79%\nbenchmark                                                   old allocs     new allocs     delta\nBenchmarkURLReplacer-4                                      44             44             +0.00%\nBenchmarkTagHeaders-4                                       21             15             -28.57%\nBenchmarkDefaultVersion-4                                   1795           1780           -0.84%\nBenchmarkApiReload-4                                        23908          23908          +0.00%\nBenchmarkMultiSession_BA_Standard_OK-4                      467            455            -2.57%\nBenchmarkBearerTokenAuthKeySession-4                        388            386            -0.52%\nBenchmarkMultiAuthBackwardsCompatibleSession-4              393            390            -0.76%\nBenchmarkBasicAuth-4                                        26009          25981          -0.11%\nBenchmarkContextVarsMiddleware-4                            2007           2007           +0.00%\nBenchmarkMiddlewareContextVars_ProcessRequest_cookies-4     28             28             +0.00%\nBenchmarkHMACAuthSessionPass-4                              392            390            -0.51%\nBenchmarkHMACAuthSessionPassWithHeaderField-4               417            414            -0.72%\nBenchmarkIPBlacklistMiddleware-4                            148            148            +0.00%\nBenchmarkIPMiddlewarePass-4                                 94             94             +0.00%\nBenchmarkJWTSessionHMAC-4                                   710            706            -0.56%\nBenchmarkJWTSessionRSA-4                                    785            781            -0.51%\nBenchmarkJWTSessionRSABearer-4                              787            783            -0.51%\nBenchmarkJWTSessionRSAWithRawSourceOnWithClientID-4         809            806            -0.37%\nBenchmarkJWTSessionRSAWithRawSource-4                       793            790            -0.38%\nBenchmarkJWTSessionRSAWithJWK-4                             797            794            -0.38%\nBenchmarkJWTSessionRSAWithEncodedJWK-4                      801            798            -0.37%\nBenchmarkProcessRequestLiveQuotaLimit-4                     574            571            -0.52%\nBenchmarkProcessRequestOffThreadQuotaLimit-4                536            533            -0.56%\nBenchmarkProcessRequestLiveRedisRollingLimiter-4            2269           2290           +0.93%\nBenchmarkProcessRequestOffThreadRedisRollingLimiter-4       2558           2563           +0.20%\nBenchmarkStripAuth_stripFromHeaders-4                       66             66             +0.00%\nBenchmarkStripAuth_stripFromParams-4                        220            220            +0.00%\nBenchmarkTransformNonAscii-4                                98             98             +0.00%\nBenchmarkTransformJSONMarshal-4                             101            101            +0.00%\nBenchmarkRewriter-4                                         858            858            +0.00%\nBenchmarkValidateJSONSchema-4                               2601           2585           -0.62%\nBenchmarkVersioning-4                                       2736           2717           -0.69%\nBenchmarkVirtualEndpoint-4                                  383            416            +8.62%\nBenchmarkApplyPolicies-4                                    102            102            +0.00%\nBenchmarkResponseHeaderInjection-4                          2804           2805           +0.04%\nBenchmarkCopyRequestResponse-4                              76             76             +0.00%\nBenchmarkRealIP_RemoteAddr-4                                1              1              +0.00%\nBenchmarkRealIP_ForwardedFor-4                              1              1              +0.00%\nBenchmarkRealIP_RealIP-4                                    1              1              +0.00%\nBenchmarkRealIP_Context-4                                   0              0              +0.00%\nbenchmark                                                   old bytes     new bytes     delta\nBenchmarkURLReplacer-4                                      849           849           +0.00%\nBenchmarkTagHeaders-4                                       480           384           -20.00%\nBenchmarkDefaultVersion-4                                   262743        249703        -4.96%\nBenchmarkApiReload-4                                        1789661       1789630       -0.00%\nBenchmarkMultiSession_BA_Standard_OK-4                      99250         90335         -8.98%\nBenchmarkBearerTokenAuthKeySession-4                        85236         79489         -6.74%\nBenchmarkMultiAuthBackwardsCompatibleSession-4              86392         80645         -6.65%\nBenchmarkBasicAuth-4                                        1354929       1338726       -1.20%\nBenchmarkContextVarsMiddleware-4                            308001        308056        +0.02%\nBenchmarkMiddlewareContextVars_ProcessRequest_cookies-4     2389          2389          +0.00%\nBenchmarkHMACAuthSessionPass-4                              85207         79580         -6.60%\nBenchmarkHMACAuthSessionPassWithHeaderField-4               86499         80910         -6.46%\nBenchmarkIPBlacklistMiddleware-4                            32246         32249         +0.01%\nBenchmarkIPMiddlewarePass-4                                 26697         26698         +0.00%\nBenchmarkJWTSessionHMAC-4                                   115648        107141        -7.36%\nBenchmarkJWTSessionRSA-4                                    154777        136651        -11.71%\nBenchmarkJWTSessionRSABearer-4                              156045        137849        -11.66%\nBenchmarkJWTSessionRSAWithRawSourceOnWithClientID-4         137253        128294        -6.53%\nBenchmarkJWTSessionRSAWithRawSource-4                       129327        122547        -5.24%\nBenchmarkJWTSessionRSAWithJWK-4                             129373        122596        -5.24%\nBenchmarkJWTSessionRSAWithEncodedJWK-4                      129550        122763        -5.24%\nBenchmarkProcessRequestLiveQuotaLimit-4                     92447         88599         -4.16%\nBenchmarkProcessRequestOffThreadQuotaLimit-4                90763         86810         -4.36%\nBenchmarkProcessRequestLiveRedisRollingLimiter-4            160444        157239        -2.00%\nBenchmarkProcessRequestOffThreadRedisRollingLimiter-4       171922        168274        -2.12%\nBenchmarkStripAuth_stripFromHeaders-4                       2800          2800          +0.00%\nBenchmarkStripAuth_stripFromParams-4                        14161         14161         +0.00%\nBenchmarkTransformNonAscii-4                                11058         11058         +0.00%\nBenchmarkTransformJSONMarshal-4                             11506         11506         +0.00%\nBenchmarkRewriter-4                                         717567        717567        +0.00%\nBenchmarkValidateJSONSchema-4                               290195        289923        -0.09%\nBenchmarkVersioning-4                                       246852        237072        -3.96%\nBenchmarkVirtualEndpoint-4                                  70767         72269         +2.12%\nBenchmarkApplyPolicies-4                                    12581         12582         +0.01%\nBenchmarkResponseHeaderInjection-4                          645475        645555        +0.01%\nBenchmarkCopyRequestResponse-4                              35584         35584         +0.00%\nBenchmarkRealIP_RemoteAddr-4                                16            16            +0.00%\nBenchmarkRealIP_ForwardedFor-4                              16            16            +0.00%\nBenchmarkRealIP_RealIP-4                                    16            16            +0.00%\nBenchmarkRealIP_Context-4                                   0             0             +0.00%\n```\nUsing benchcmp on this branch(new) compared with master(old) - i've started expanding out the replacements to other places in the code where I can.. Ok @dencoded  thanks for the pointers - i'll do just that!. @buger i did earlier today see #1687 \nNumbers on my machine went from ~4500ns/op to ~3300 ns/op\n. Thanks @dencoded will improve tomorrow. Wow that is huge. The change here is very naive. \n1. This could break back compatibility of someone relies on the outputted code.\n2. Could make it configurable - but is this too small to bother?\n3. Although all these returns say unauthorised, which would warrant a 401 according to the OID RFC, i'm not completely sure how they mirror the underlying OIC libs errors.. Hi we have our own in house graphics wizardess who does all the fantastic designs you see at www.tyk.io\nThank you for the offer and good luck with your projects!\nJosh @ Tyk. I think you made this in error when forking.. Love the idea, I'll look into it.. Closing in favour of #1749 . Do we want a test for this?. CI will fix itself if you repush i think . Currently panics on gateway shutdown so have that to fix still.\nUpdate: no shutdown panic anymore but leaving comment here incase it crops up again.. Yes, will do and update top comment.. ```\nbenchmark                                                   old ns/op     new ns/op     delta\nBenchmarkURLReplacer-4                                      1558          1589          +1.99%\nBenchmarkTagHeaders-4                                       817           819           +0.24%\nBenchmarkDefaultVersion-4                                   1064771       1093007       +2.65%\nBenchmarkGetVersionFromRequest/Header_location-4            482137        459508        -4.69%\nBenchmarkGetVersionFromRequest/URL_param_location-4         458418        456370        -0.45%\nBenchmarkGetVersionFromRequest/URL_location-4               459188        463693        +0.98%\nBenchmarkApiReload-4                                        3948803       4107164       +4.01%\nBenchmarkValueExtractor/HeaderSource-4                      620281        656742        +5.88%\nBenchmarkValueExtractor/FormSource-4                        671565        660416        -1.66%\nBenchmarkRegexExtractor/HeaderSource-4                      634194        663528        +4.63%\nBenchmarkRegexExtractor/BodySource-4                        553221        604820        +9.33%\nBenchmarkRegexExtractor/FormSource-4                        625323        689967        +10.34%\nBenchmarkXPathExtractor/HeaderSource-4                      720379        706684        -1.90%\nBenchmarkXPathExtractor/BodySource-4                        720888        694420        -3.67%\nBenchmarkXPathExtractor/FormSource-4                        578117        695444        +20.29%\nBenchmarkInitGenericEventHandlers-4                         703           703           +0.00%\nBenchmarkMultiSession_BA_Standard_OK-4                      1730595       1927234       +11.36%\nBenchmarkBearerTokenAuthKeySession-4                        1638861       1964912       +19.89%\nBenchmarkMultiAuthBackwardsCompatibleSession-4              1794075       1918844       +6.95%\nBenchmarkBasicAuth-4                                        134236255     133807972     -0.32%\nBenchmarkContextVarsMiddleware-4                            1244750       1239212       -0.44%\nBenchmarkMiddlewareContextVars_ProcessRequest_cookies-4     236467        240262        +1.60%\nBenchmarkHMACAuthSessionPass-4                              1274908       1267094       -0.61%\nBenchmarkHMACAuthSessionPassWithHeaderField-4               1209695       1199873       -0.81%\nBenchmarkIPBlacklistMiddleware-4                            25786         25999         +0.83%\nBenchmarkIPMiddlewarePass-4                                 16842         16903         +0.36%\nBenchmarkJWTSessionHMAC-4                                   360199        351308        -2.47%\nBenchmarkJWTSessionRSA-4                                    460825        452648        -1.77%\nBenchmarkJWTSessionRSABearer-4                              457821        455720        -0.46%\nBenchmarkJWTSessionRSAWithRawSourceOnWithClientID-4         494911        476905        -3.64%\nBenchmarkJWTSessionRSAWithRawSource-4                       487164        463405        -4.88%\nBenchmarkJWTSessionRSAWithJWK-4                             492495        463193        -5.95%\nBenchmarkJWTSessionRSAWithEncodedJWK-4                      456223        461279        +1.11%\nBenchmarkProcessRequestLiveQuotaLimit-4                     1658338       1868746       +12.69%\nBenchmarkProcessRequestOffThreadQuotaLimit-4                1361758       1245086       -8.57%\nBenchmarkProcessRequestLiveRedisRollingLimiter-4            1480984       1368393       -7.60%\nBenchmarkProcessRequestOffThreadRedisRollingLimiter-4       1301096       1296460       -0.36%\nBenchmarkStripAuth_stripFromHeaders-4                       7660          7585          -0.98%\nBenchmarkStripAuth_stripFromParams-4                        35010         34868         -0.41%\nBenchmarkTransformNonAscii-4                                14345         14529         +1.28%\nBenchmarkTransformJSONMarshal-4                             15210         15456         +1.62%\nBenchmarkRewriter-4                                         31763         32094         +1.04%\nBenchmarkValidateJSONSchema-4                               3519864       3466755       -1.51%\nBenchmarkVersioning-4                                       4547555       4435786       -2.46%\nBenchmarkVirtualEndpoint-4                                  1147857       1074119       -6.42%\nBenchmarkApplyPolicies-4                                    22216         22664         +2.02%\nBenchmarkResponseHeaderInjection-4                          3969715       3818353       -3.81%\nBenchmarkRequestIPHops-4                                    399           394           -1.25%\nBenchmarkWrappedServeHTTP-4                                 127415        125208        -1.73%\nBenchmarkCopyRequestResponse-4                              14770         14182         -3.98%\nBenchmarkRegExpCompile-4                                    115           119           +3.48%\nBenchmarkRegExpCompilePOSIX-4                               115           116           +0.87%\nBenchmarkRegExpMustCompile-4                                116           118           +1.72%\nBenchmarkRegExpMustCompilePOSIX-4                           116           117           +0.86%\nBenchmarkRegExpMatchString-4                                201           201           +0.00%\nBenchmarkRegExpMatch-4                                      206           207           +0.49%\nBenchmarkRegExpString-4                                     0.86          0.85          -1.16%\nBenchmarkRegexpReplaceAllString-4                           83.6          83.7          +0.12%\nBenchmarkRegexpReplaceAllLiteralString-4                    83.9          84.7          +0.95%\nBenchmarkRegexpReplaceAllStringFunc-4                       187           186           -0.53%\nBenchmarkRegexpFindAllString-4                              110           111           +0.91%\nBenchmarkRegexpFindAllStringSubmatch-4                      110           111           +0.91%\nBenchmarkRealIP_RemoteAddr-4                                136           137           +0.74%\nBenchmarkRealIP_ForwardedFor-4                              127           127           +0.00%\nBenchmarkRealIP_RealIP-4                                    96.3          95.1          -1.25%\nBenchmarkRealIP_Context-4                                   12.9          11.8          -8.53%\nBenchmarkHash-4                                             3543          3547          +0.11%\nbenchmark                                                   old allocs     new allocs     delta\nBenchmarkURLReplacer-4                                      12             12             +0.00%\nBenchmarkTagHeaders-4                                       15             15             +0.00%\nBenchmarkDefaultVersion-4                                   1410           1314           -6.81%\nBenchmarkGetVersionFromRequest/Header_location-4            544            544            +0.00%\nBenchmarkGetVersionFromRequest/URL_param_location-4         528            528            +0.00%\nBenchmarkGetVersionFromRequest/URL_location-4               509            509            +0.00%\nBenchmarkApiReload-4                                        23903          23903          +0.00%\nBenchmarkValueExtractor/HeaderSource-4                      75             75             +0.00%\nBenchmarkValueExtractor/FormSource-4                        102            102            +0.00%\nBenchmarkRegexExtractor/HeaderSource-4                      77             77             +0.00%\nBenchmarkRegexExtractor/BodySource-4                        86             87             +1.16%\nBenchmarkRegexExtractor/FormSource-4                        104            104            +0.00%\nBenchmarkXPathExtractor/HeaderSource-4                      133            133            +0.00%\nBenchmarkXPathExtractor/BodySource-4                        141            141            +0.00%\nBenchmarkXPathExtractor/FormSource-4                        165            165            +0.00%\nBenchmarkInitGenericEventHandlers-4                         8              8              +0.00%\nBenchmarkMultiSession_BA_Standard_OK-4                      468            468            +0.00%\nBenchmarkBearerTokenAuthKeySession-4                        421            422            +0.24%\nBenchmarkMultiAuthBackwardsCompatibleSession-4              428            428            +0.00%\nBenchmarkBasicAuth-4                                        19901          19895          -0.03%\nBenchmarkContextVarsMiddleware-4                            1710           1709           -0.06%\nBenchmarkMiddlewareContextVars_ProcessRequest_cookies-4     28             28             +0.00%\nBenchmarkHMACAuthSessionPass-4                              255            255            +0.00%\nBenchmarkHMACAuthSessionPassWithHeaderField-4               274            273            -0.36%\nBenchmarkIPBlacklistMiddleware-4                            152            152            +0.00%\nBenchmarkIPMiddlewarePass-4                                 95             95             +0.00%\nBenchmarkJWTSessionHMAC-4                                   512            512            +0.00%\nBenchmarkJWTSessionRSA-4                                    614            614            +0.00%\nBenchmarkJWTSessionRSABearer-4                              616            616            +0.00%\nBenchmarkJWTSessionRSAWithRawSourceOnWithClientID-4         636            636            +0.00%\nBenchmarkJWTSessionRSAWithRawSource-4                       626            626            +0.00%\nBenchmarkJWTSessionRSAWithJWK-4                             629            629            +0.00%\nBenchmarkJWTSessionRSAWithEncodedJWK-4                      634            634            +0.00%\nBenchmarkProcessRequestLiveQuotaLimit-4                     589            590            +0.17%\nBenchmarkProcessRequestOffThreadQuotaLimit-4                592            591            -0.17%\nBenchmarkProcessRequestLiveRedisRollingLimiter-4            1474           1521           +3.19%\nBenchmarkProcessRequestOffThreadRedisRollingLimiter-4       1543           1553           +0.65%\nBenchmarkStripAuth_stripFromHeaders-4                       66             66             +0.00%\nBenchmarkStripAuth_stripFromParams-4                        220            220            +0.00%\nBenchmarkTransformNonAscii-4                                98             98             +0.00%\nBenchmarkTransformJSONMarshal-4                             101            101            +0.00%\nBenchmarkRewriter-4                                         238            238            +0.00%\nBenchmarkValidateJSONSchema-4                               2672           2430           -9.06%\nBenchmarkVersioning-4                                       2626           2625           -0.04%\nBenchmarkVirtualEndpoint-4                                  464            464            +0.00%\nBenchmarkApplyPolicies-4                                    102            102            +0.00%\nBenchmarkResponseHeaderInjection-4                          2490           2248           -9.72%\nBenchmarkRequestIPHops-4                                    4              4              +0.00%\nBenchmarkWrappedServeHTTP-4                                 144            144            +0.00%\nBenchmarkCopyRequestResponse-4                              76             76             +0.00%\nBenchmarkRegExpCompile-4                                    2              2              +0.00%\nBenchmarkRegExpCompilePOSIX-4                               2              2              +0.00%\nBenchmarkRegExpMustCompile-4                                2              2              +0.00%\nBenchmarkRegExpMustCompilePOSIX-4                           2              2              +0.00%\nBenchmarkRegExpMatchString-4                                3              3              +0.00%\nBenchmarkRegExpMatch-4                                      3              3              +0.00%\nBenchmarkRegExpString-4                                     0              0              +0.00%\nBenchmarkRegexpReplaceAllString-4                           1              1              +0.00%\nBenchmarkRegexpReplaceAllLiteralString-4                    1              1              +0.00%\nBenchmarkRegexpReplaceAllStringFunc-4                       2              2              +0.00%\nBenchmarkRegexpFindAllString-4                              2              2              +0.00%\nBenchmarkRegexpFindAllStringSubmatch-4                      2              2              +0.00%\nBenchmarkRealIP_RemoteAddr-4                                1              1              +0.00%\nBenchmarkRealIP_ForwardedFor-4                              1              1              +0.00%\nBenchmarkRealIP_RealIP-4                                    1              1              +0.00%\nBenchmarkRealIP_Context-4                                   0              0              +0.00%\nBenchmarkHash-4                                             10             10             +0.00%\nbenchmark                                                   old bytes     new bytes     delta\nBenchmarkURLReplacer-4                                      1088          1088          +0.00%\nBenchmarkTagHeaders-4                                       384           384           +0.00%\nBenchmarkDefaultVersion-4                                   199657        193743        -2.96%\nBenchmarkGetVersionFromRequest/Header_location-4            85429         85410         -0.02%\nBenchmarkGetVersionFromRequest/URL_param_location-4         85065         85042         -0.03%\nBenchmarkGetVersionFromRequest/URL_location-4               82377         82352         -0.03%\nBenchmarkApiReload-4                                        1788971       1788977       +0.00%\nBenchmarkValueExtractor/HeaderSource-4                      5659          5666          +0.12%\nBenchmarkValueExtractor/FormSource-4                        11763         11762         -0.01%\nBenchmarkRegexExtractor/HeaderSource-4                      5702          5698          -0.07%\nBenchmarkRegexExtractor/BodySource-4                        10139         10148         +0.09%\nBenchmarkRegexExtractor/FormSource-4                        11794         11799         +0.04%\nBenchmarkXPathExtractor/HeaderSource-4                      10472         10470         -0.02%\nBenchmarkXPathExtractor/BodySource-4                        14891         14891         +0.00%\nBenchmarkXPathExtractor/FormSource-4                        17072         17081         +0.05%\nBenchmarkInitGenericEventHandlers-4                         528           528           +0.00%\nBenchmarkMultiSession_BA_Standard_OK-4                      79027         79042         +0.02%\nBenchmarkBearerTokenAuthKeySession-4                        74552         74619         +0.09%\nBenchmarkMultiAuthBackwardsCompatibleSession-4              76278         76264         -0.02%\nBenchmarkBasicAuth-4                                        1040143       1039650       -0.05%\nBenchmarkContextVarsMiddleware-4                            281031        280881        -0.05%\nBenchmarkMiddlewareContextVars_ProcessRequest_cookies-4     2401          2401          +0.00%\nBenchmarkHMACAuthSessionPass-4                              49571         49460         -0.22%\nBenchmarkHMACAuthSessionPassWithHeaderField-4               49203         49106         -0.20%\nBenchmarkIPBlacklistMiddleware-4                            32312         32309         -0.01%\nBenchmarkIPMiddlewarePass-4                                 26709         26708         -0.00%\nBenchmarkJWTSessionHMAC-4                                   80361         80348         -0.02%\nBenchmarkJWTSessionRSA-4                                    102385        102386        +0.00%\nBenchmarkJWTSessionRSABearer-4                              103586        103591        +0.00%\nBenchmarkJWTSessionRSAWithRawSourceOnWithClientID-4         104424        104420        -0.00%\nBenchmarkJWTSessionRSAWithRawSource-4                       101847        101827        -0.02%\nBenchmarkJWTSessionRSAWithJWK-4                             100824        100814        -0.01%\nBenchmarkJWTSessionRSAWithEncodedJWK-4                      101044        101039        -0.00%\nBenchmarkProcessRequestLiveQuotaLimit-4                     84135         84171         +0.04%\nBenchmarkProcessRequestOffThreadQuotaLimit-4                84152         84106         -0.05%\nBenchmarkProcessRequestLiveRedisRollingLimiter-4            115604        117429        +1.58%\nBenchmarkProcessRequestOffThreadRedisRollingLimiter-4       118319        118721        +0.34%\nBenchmarkStripAuth_stripFromHeaders-4                       2800          2800          +0.00%\nBenchmarkStripAuth_stripFromParams-4                        14162         14162         +0.00%\nBenchmarkTransformNonAscii-4                                11059         11059         +0.00%\nBenchmarkTransformJSONMarshal-4                             11507         11507         +0.00%\nBenchmarkRewriter-4                                         45597         45597         +0.00%\nBenchmarkValidateJSONSchema-4                               280151        269032        -3.97%\nBenchmarkVersioning-4                                       268537        268541        +0.00%\nBenchmarkVirtualEndpoint-4                                  71799         71805         +0.01%\nBenchmarkApplyPolicies-4                                    12582         12582         +0.00%\nBenchmarkResponseHeaderInjection-4                          385162        373856        -2.94%\nBenchmarkRequestIPHops-4                                    432           432           +0.00%\nBenchmarkWrappedServeHTTP-4                                 48389         48389         +0.00%\nBenchmarkCopyRequestResponse-4                              35585         35585         +0.00%\nBenchmarkRegExpCompile-4                                    176           176           +0.00%\nBenchmarkRegExpCompilePOSIX-4                               176           176           +0.00%\nBenchmarkRegExpMustCompile-4                                176           176           +0.00%\nBenchmarkRegExpMustCompilePOSIX-4                           176           176           +0.00%\nBenchmarkRegExpMatchString-4                                192           192           +0.00%\nBenchmarkRegExpMatch-4                                      192           192           +0.00%\nBenchmarkRegExpString-4                                     0             0             +0.00%\nBenchmarkRegexpReplaceAllString-4                           16            16            +0.00%\nBenchmarkRegexpReplaceAllLiteralString-4                    16            16            +0.00%\nBenchmarkRegexpReplaceAllStringFunc-4                       48            48            +0.00%\nBenchmarkRegexpFindAllString-4                              34            34            +0.00%\nBenchmarkRegexpFindAllStringSubmatch-4                      34            34            +0.00%\nBenchmarkRealIP_RemoteAddr-4                                16            16            +0.00%\nBenchmarkRealIP_ForwardedFor-4                              16            16            +0.00%\nBenchmarkRealIP_RealIP-4                                    16            16            +0.00%\nBenchmarkRealIP_Context-4                                   0             0             +0.00%\nBenchmarkHash-4                                             1360          1360          +0.00%\n```. It's ready for further review i just get a strange unit test failure im trying to work out at the moment.\nThere are possible unintended consequences in the test stack as the test that fails should not be affected by this code at all.. @buger I fixed CI but in a very hacky way - basically the test that used the sentinel rate limiter would fail its cases unless i added some extra lines and played with the test case order. It's very flaky.\nThat test has nothing to do with my code changes but there must be something on the memory level affecting it i think.. Ok will do so in future!. @dencoded bump for review\n. @dencoded bump\n. Easy to fix - currently if there are no tags in a policy to apply we set the tags in the session to nil which we should not do.. No problem - if you want to talk to us at all about your use case with Tyk then pop us an email at info@tyk.io\ncheers\nJosh. @matiasinsaurralde @marksou is there a docs improvement to make off the back of this?. Is this with preserve_host_header set to true in the api definition?. Thanks, I think the fix is quite straightforward so will schedule it for a bugfix release soon hopefully.. I just wrote the identical thing - do you want to push a PR? . No problem.. I think we can do this quite simply and make it configurable - so if something like allow_SSL_renegotiation is true we change the enumeration before first connection and it will be allowed.\nThe Go team really don't like allowing it from what i've read.. That won't work as there is no implementation for it in Tyk as of yet. What should work in the meantime is setting proxy_close_connections to true in tyk.conf. Ok no problem. Yes that is expected with that change - it will very likely be included in our first 2.7 patch.. Closing as not an issue.. https://github.com/TykTechnologies/tyk/pull/1542\nThis was fixed here however the issue is that currently there is no UI element to enable versionDefinition.StripPath to be true and is also undocumented so user has no way of intuitively making the feature work.\nThe change here just means that the stripping of the version from the path is a property inherited from the API definition.. Happy to close this but it would be great to get the UI done/ some interim documentation of the feature as it stands.. That does make sense actually - and means we could scale back the changes here and simplify. I'll try it and see.\n. @buger this is the implementation without mdcb changes. Hi it looks like there is a little more setup to do for the connection string to the DB as the cosmosDB instance is behind your azure account - see their docs here:\nhttps://docs.microsoft.com/en-us/azure/cosmos-db/connect-mongodb-account#GetCustomConnection. Its based on a leaky bucket algorithm.. No we just implement leaky bucked for our distributed rate limiter currently.. Hi @pikeas \nAll valid points which we will fix - thanks for the feedback.\nYou're also right about the linter, that definitely was not the behaviour of the config linter before, so i'll look into that as well.\nThe Gateway is an open source project so please open any issues you feel are valid!\n. I can't reproduce the panic when template path is omitted - we populate it with the default value if the field is empty or missing.\n@pikeas what do you think is a friendlier term than unmarshal? :)\n. We have the tyk lint command in the gateway which can validate the config against a schema. It would be good to have a similar functionality in the the dashboard. I'll add it to our backlog.\nThanks, Josh. It shouldnt be hard to initiate the linter via an env var passed to the container if need be - so thats an option.. Good spot! Thanks for raising the issue.. Hi The quickstart has been deprecated and the page you found is just an old cached page and is not in our docs anymore.\nPlease use the docker demo instead here: https://github.com/TykTechnologies/tyk-pro-docker-demo. Thanks, we obviously missed that!. Depending on what you want to get spun up either use the readme on the docker pro demo for an all on one machine quick setup. Or we have our normal docker installation docs which is assuming a more prod-like setup https://tyk.io/docs/get-started/with-tyk-on-premise/installation/docker/. Hi\n2.4 is more than two versions back so we wont patch it - if you can move to a newer version of the gateway then that would be the best course of action.\nThanks. @buger confirmed as enough for frontend to have working endpoint popularity functions by @lghiur - can you plz review\n. We are back to just apiid again as using api name wouldnt be good due to it being possible to change over time - meaning records could become out of date with old names.. That sounds good to me. Not sure why we didnt think about that at this point. I'll close this and open pump PR.. Just in url rewrites and headers - will add change for context\n. context and meta now left empty if no key match. @dencoded Change here was causing panic in purger in slaved gateways due to reflect bug deep in msgpack. Described at bottom of https://github.com/TykTechnologies/tyk-sink/issues/26\nFixed by copying struct into rpc package and instantiating directly instead of using cast into interface{} \nSee https://github.com/TykTechnologies/tyk/pull/1974 for details\nWe should condider moving analytics.go into its own package also i think.. See #1946\nLeon had me look into this last week. @ConsM has date format that is sent in the version.expires field from frontend changed recently? . @matiasinsaurralde would appreciate you looking over the plugin side of things - test all pass locally but are a bit flaky on ci still. Yep i just broke it now when vendoring - it was a different issue before related to a timeout or hang. I'll fix vendoring then ping you again \ud83d\udc4d . @matiasinsaurralde PTAL. I'll see where I can squeeze it down. Exactly see issue here:\nhttps://github.com/bshuster-repo/logrus-logstash-hook/issues/48. Hi, this will be better dealt with over at our community forum Tyk Community Forum\nThanks!. Hi, what service are you querying? i.e. consul, ETCD?\n. Thanks, what was the dashboard bug? Could you open an issue for that or let me know exact error that was occurring and i'll open one.. can you share the api definition your are using. From what I can tell, the default case is already handled when the logger is initialised by logger.get() when creating the log var where it will always default to info level.. why %q and not %s in this case?. Easily fixed I think. I did have it like that but it fails go vet as a \"suspect or\". When I run go vet:\nmain.go:778: suspect or: opt != false || opt != \"\"\nexit status 1. But obviously it should work fine in this case.\n. I've fixed it with some type assertion now. Will do. Theres some debugging output i've left in there too so will clean that up too.. Good spot\n. I can't actually remember at this point. Will check when retesting after changes.. Excellent, I was struggling to see how to do a better test like this. Thanks.. So should we have options for header, url-param and to disable?. Im not quite sure what the VirtualMeta has to do with this as thats related to virtual paths?. Doing it like this for now so relevant part of apidef would be configurable as:\n\"version_data\": {\n    \"not_versioned\": false,\n    \"default_version\": \"v2\",\n    \"versions\": {\n        \"v1\": {\"name\": \"v1\", ...},\n        \"v2\": {\"name\": \"v2\", ...}\n    }\n    \"DefaultLocation\": \"header\"\n}\nSo can add a header configurably if user wants to\n. Worked it out nvm. Got it, that makes much more sense than what i was doing, cheers.. config.Global.VersionHeader is just a boolean flag for whether the header should be added or not. \n. I just intended it to be on-or-off depending on whether the user wanted to expose their configuration. If you think having it be a configurable string is better I can make that change easily.. Should be EnableCaching ?. Actually looking at rest of code i think the bson and json tags need changing to disable_caching. What is a sensible default for this?. Using 1000 as default. This is just the same as what we did in existing implementation. When we call the setRawKey method to update Redis it expects the key to be prefixed probably because this is what we do on hashed key creation for that keyID.. I did move some but then stuck it back again so i've just messed that up a bit - i'll fix.\n. Makes sense, yep.. We can do that since GetRawKey is just sitting there doing nothing at the moment - however this function is more specific in that it will always look for keys with the apikey prefix. The thinking with configurability is that it wont disrupt existing flows for users with JWT.. If you think thats the way to go i'll make this default behaviour then.. ...and any other policy partitions set. i like that better, yes - i was unsure on naming\n. This line isnt neccessary if it's off by default. remove debug line here. I would use tlsConfig.NextProtos = append(tlsConfig.NextProtos, []string{\"h2\"}, to avoid the extra import in main package.\n. ",
    "davegarvey": "Will this work for JWTs too?. This would be a custom header e.g. x-api-expires. The value of which is the datetime of the API expiry.. I'm not aware of a naming scheme, but I think it's best to include tyk in there as you suggest, so x-tyk-api-expires.. I did wonder about the strictness of 200 and agree that it should be 4/5xx codes and timeouts.\nAgree with your suggested parameter names and defaults.. The functionality should be driven by the Gateway API, since Gateways issue tokens it seems sensible to have them also recycle them. The functionality would be good to provide via the Dashboard client too.. I think the implications for implementing this are quite large as it affects how APIs are loaded and probably how nodes register with a dashboard. It appears that the dashboard needs to define which APIs are available on a per-gateway basis, rather than being configured from the gateway side.. Sounds good!. Same as #604 ?. \n. I've found that behaviour changes between page reloads.\nUsing this URL https://tyk.cloud.tyk.io/portal/apis/5a6fd654ded3fc000134e0b9/documentation/, I had the following results:\n\ndoc loads, validator valid\ndoc loads, validator error\ndoc doesn\u2019t load, \u2018failed to load spec\u2019 message\n404, \u2018api catalogue not found\u2019\n\nFor 1-3, I think this relies on whether the request for the raw asset (e.g. https://tyk.cloud.tyk.io/portal/apis/5a6fd654ded3fc000134e0b9/documentation/raw) succeeds. For 1, both the portal page and validator received the asset ok, For 2, the portal gets the asset ok, but validator doesn't, hence error. For 3, portal doesn't get asset.\nI'm not sure what causes scenario 4, but perhaps it's linked to whatever is causing raw to occasionally 404.. @buger it's for the request. Having gone back to look at this, I can confirm it is working ok. I misconfigured something!. I think this may also be affecting the password access type for OAuth 2.0.. Some examples of working/not working creds:\n| Username        | Password           | B64  | Works? |\n| ------------- |-------------| ----- | ----- |\n| basicusername | basicpassword | YmFzaWN1c2VybmFtZTpiYXNpY3Bhc3N3b3Jk | Yes |\n| spaghetti | bolognese |c3BhZ2hldHRpOmJvbG9nbmVzZQ== | No |\n| daveg123 | daveg123 | ZGF2ZWcxMjM6ZGF2ZWcxMjM= | Yes |\n| heyyouguys | truffle | aGV5eW91Z3V5czp0cnVmZmxl | No |. In the log I get  \n[May  3 11:52:34]  INFO Attempted access with existing user but failed password check. key=<hidden> origin=10.0.2.2 path=/basic-auth/get. It appears that the hashed password stored in the session object (data.basic_auth_data.password) is incorrect. This coincides with the log files which state that it's the password mismatch which caused the reject.\nI checked this by creating a new basic user key, then using the Dashboard API to get the session object. I then attempted to verify the key at https://bcrypt-generator.com/, but it failed. It also failed when trying to use it to access the API.. Created a user on cloud:\nUsername abcdefgh\nPassword 12345678\nHash $2a$10$9OqDAyOPKCzJYwC3AEnt7.Q1f3WFzwUx12v9Pq0E9JZiyPQlCGtR6. 580defdbe1d21e0001c67e5c. I can't get this to fail now - I've made a bunch of new basic keys and they all worked. I also recreated the spaghetti bolognese key and it now works ok too.. For future reference, I can replicate on my local 1.5.2/2.5.2 install.. Interested to know whether folks think this should be configured on an API basis or gateway basis.\nFeels like per-API would be better as user's may not want all of the APIs to be served over HTTPS.. Though you're right, this could be done downstream at the load balancer or other network appliance, I've seen quite a few pieces of software which implement this sort of functionality, and I guess they do it for ease of administration - though this is in the context of a webserver.\nAgree that the use case is likely limited to APIs accessed through web browsers.. I can confirm this too.\nI added a body transform to both request and response, and also a method transform to POST.\nAPI definition\n{\n    \"id\": \"5c12263b843a500001544dea\",\n    \"name\": \"Demo\",\n    \"slug\": \"demo\",\n    \"api_id\": \"0bf080892a9b47a4796bc0add27dfbe2\",\n    \"org_id\": \"580defdbe1d21e0001c67e5c\",\n    \"use_keyless\": true,\n    \"use_oauth2\": false,\n    \"use_openid\": false,\n    \"openid_options\": {\n        \"providers\": [],\n        \"segregate_by_client\": false\n    },\n    \"oauth_meta\": {\n        \"allowed_access_types\": [],\n        \"allowed_authorize_types\": [],\n        \"auth_login_redirect\": \"\"\n    },\n    \"auth\": {\n        \"use_param\": false,\n        \"param_name\": \"\",\n        \"use_cookie\": false,\n        \"cookie_name\": \"\",\n        \"auth_header_name\": \"Authorization\",\n        \"use_certificate\": false\n    },\n    \"use_basic_auth\": false,\n    \"basic_auth\": {\n        \"disable_caching\": false,\n        \"cache_ttl\": 0\n    },\n    \"use_mutual_tls_auth\": false,\n    \"client_certificates\": [],\n    \"upstream_certificates\": {},\n    \"pinned_public_keys\": {},\n    \"enable_jwt\": false,\n    \"use_standard_auth\": false,\n    \"enable_coprocess_auth\": false,\n    \"jwt_signing_method\": \"\",\n    \"jwt_source\": \"\",\n    \"jwt_identity_base_field\": \"\",\n    \"jwt_client_base_field\": \"\",\n    \"jwt_policy_field_name\": \"\",\n    \"jwt_disable_issued_at_validation\": false,\n    \"jwt_disable_expires_at_validation\": false,\n    \"jwt_disable_not_before_validation\": false,\n    \"jwt_skip_kid\": false,\n    \"notifications\": {\n        \"shared_secret\": \"\",\n        \"oauth_on_keychange_url\": \"\"\n    },\n    \"enable_signature_checking\": false,\n    \"hmac_allowed_clock_skew\": -1,\n    \"base_identity_provided_by\": \"\",\n    \"definition\": {\n        \"location\": \"header\",\n        \"key\": \"x-api-version\",\n        \"strip_path\": false\n    },\n    \"version_data\": {\n        \"not_versioned\": true,\n        \"default_version\": \"\",\n        \"versions\": {\n            \"Default\": {\n                \"name\": \"Default\",\n                \"expires\": \"\",\n                \"paths\": {\n                    \"ignored\": [],\n                    \"white_list\": [],\n                    \"black_list\": []\n                },\n                \"use_extended_paths\": true,\n                \"extended_paths\": {\n                    \"transform\": [\n                        {\n                            \"template_data\": {\n                                \"input_type\": \"json\",\n                                \"template_mode\": \"blob\",\n                                \"enable_session\": false,\n                                \"template_source\": \"ewogICAgInRyYW5zZm9ybWVkIjoie3suaGVsbG99fSIKfQ==\"\n                            },\n                            \"path\": \"post\",\n                            \"method\": \"GET\"\n                        }\n                    ],\n                    \"transform_response\": [\n                        {\n                            \"template_data\": {\n                                \"input_type\": \"json\",\n                                \"template_mode\": \"blob\",\n                                \"enable_session\": false,\n                                \"template_source\": \"ewogICAgInRyYW5zZm9ybWVkIjoie3suZGF0YX19Igp9\"\n                            },\n                            \"path\": \"post\",\n                            \"method\": \"GET\"\n                        }\n                    ],\n                    \"method_transforms\": [\n                        {\n                            \"path\": \"post\",\n                            \"method\": \"GET\",\n                            \"to_method\": \"POST\"\n                        }\n                    ]\n                },\n                \"global_headers\": {},\n                \"global_headers_remove\": [],\n                \"global_size_limit\": 0,\n                \"override_target\": \"\"\n            }\n        }\n    },\n    \"uptime_tests\": {\n        \"check_list\": [],\n        \"config\": {\n            \"expire_utime_after\": 0,\n            \"service_discovery\": {\n                \"use_discovery_service\": false,\n                \"query_endpoint\": \"\",\n                \"use_nested_query\": false,\n                \"parent_data_path\": \"\",\n                \"data_path\": \"\",\n                \"port_data_path\": \"\",\n                \"target_path\": \"\",\n                \"use_target_list\": false,\n                \"cache_timeout\": 60,\n                \"endpoint_returns_list\": false\n            },\n            \"recheck_wait\": 0\n        }\n    },\n    \"proxy\": {\n        \"preserve_host_header\": false,\n        \"listen_path\": \"/0bf080892a9b47a4796bc0add27dfbe2/\",\n        \"target_url\": \"http://httpbin.org/\",\n        \"strip_listen_path\": true,\n        \"enable_load_balancing\": false,\n        \"target_list\": [],\n        \"check_host_against_uptime_tests\": false,\n        \"service_discovery\": {\n            \"use_discovery_service\": false,\n            \"query_endpoint\": \"\",\n            \"use_nested_query\": false,\n            \"parent_data_path\": \"\",\n            \"data_path\": \"\",\n            \"port_data_path\": \"\",\n            \"target_path\": \"\",\n            \"use_target_list\": false,\n            \"cache_timeout\": 0,\n            \"endpoint_returns_list\": false\n        },\n        \"transport\": {\n            \"ssl_ciphers\": [],\n            \"ssl_min_version\": 0,\n            \"proxy_url\": \"\"\n        }\n    },\n    \"disable_rate_limit\": false,\n    \"disable_quota\": false,\n    \"custom_middleware\": {\n        \"pre\": [],\n        \"post\": [],\n        \"post_key_auth\": [],\n        \"auth_check\": {\n            \"name\": \"\",\n            \"path\": \"\",\n            \"require_session\": false\n        },\n        \"response\": [],\n        \"driver\": \"\",\n        \"id_extractor\": {\n            \"extract_from\": \"\",\n            \"extract_with\": \"\",\n            \"extractor_config\": {}\n        }\n    },\n    \"custom_middleware_bundle\": \"\",\n    \"cache_options\": {\n        \"cache_timeout\": 60,\n        \"enable_cache\": true,\n        \"cache_all_safe_requests\": false,\n        \"cache_response_codes\": [],\n        \"enable_upstream_cache_control\": false,\n        \"cache_control_ttl_header\": \"\"\n    },\n    \"session_lifetime\": 0,\n    \"active\": true,\n    \"auth_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"session_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"event_handlers\": {\n        \"events\": {}\n    },\n    \"enable_batch_request_support\": false,\n    \"enable_ip_whitelisting\": false,\n    \"allowed_ips\": [],\n    \"enable_ip_blacklisting\": false,\n    \"blacklisted_ips\": [],\n    \"dont_set_quota_on_create\": false,\n    \"expire_analytics_after\": 0,\n    \"response_processors\": [\n        {\n            \"name\": \"response_body_transform\",\n            \"options\": {}\n        }\n    ],\n    \"CORS\": {\n        \"enable\": false,\n        \"allowed_origins\": [],\n        \"allowed_methods\": [],\n        \"allowed_headers\": [],\n        \"exposed_headers\": [],\n        \"allow_credentials\": false,\n        \"max_age\": 24,\n        \"options_passthrough\": false,\n        \"debug\": false\n    },\n    \"domain\": \"\",\n    \"do_not_track\": false,\n    \"tags\": [],\n    \"enable_context_vars\": false,\n    \"config_data\": {},\n    \"tag_headers\": [],\n    \"global_rate_limit\": {\n        \"rate\": 0,\n        \"per\": 0\n    },\n    \"strip_auth_data\": false\n}\n\nCurl\ncurl -X GET \\\nhttps://tyk.cloud.tyk.io/demo/post \\\n-H 'Content-Type: application/json' \\\n-H 'Postman-Token: 5064fd6a-a047-4ce9-8dd8-24d5e1129780' \\\n-H 'cache-control: no-cache' \\\n-d '{ \"hello\":\"world\" }'\n\nResponse\n{\n    \"args\": {},\n    \"data\": \"{\\n    \\\"transformed\\\":\\\"world\\\"\\n}\",\n    \"files\": {},\n    \"form\": {},\n    \"headers\": {\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"Cache-Control\": \"no-cache\",\n        \"Connection\": \"close\",\n        \"Content-Length\": \"29\",\n        \"Content-Type\": \"application/json\",\n        \"Host\": \"httpbin.org\",\n        \"Postman-Token\": \"e956e83f-6266-4b7d-a952-2a72246aaace\",\n        \"User-Agent\": \"PostmanRuntime/7.4.0\",\n        \"X-Amzn-Trace-Id\": \"Root=1-5c3fdb71-2dd24064d71ba8694388b317\",\n        \"X-Scheme\": \"https\"\n    },\n    \"json\": {\n        \"transformed\": \"world\"\n    },\n    \"origin\": \"115.42.172.138, 115.42.172.138, 172.30.2.211, 172.30.2.248, 52.71.254.156\",\n    \"url\": \"http://httpbin.org/post\"\n}\n\nConclusion\nI can see that the method transform worked (GET -> POST) and the data transformed (\"hello\":\"world\" -> \"transformed\":\"world\"), but the response does not transform as expected (large JSON response -> \"transformed\":\"{\"transformed\":\"world\"}\").\nIf the method transform is removed and the API definition is updated to target the POST method of the /post path then both transforms are activated as expected.. Apologies, should have provided first time around:\n{\n    \"id\": \"5c47d3133465b40001a4d3f1\",\n    \"name\": \"Versioned API\",\n    \"slug\": \"versioned-api\",\n    \"api_id\": \"787362a7531a4e5b7a33537298f79616\",\n    \"org_id\": \"580defdbe1d21e0001c67e5c\",\n    \"use_keyless\": true,\n    \"use_oauth2\": false,\n    \"use_openid\": false,\n    \"openid_options\": {\n        \"providers\": [],\n        \"segregate_by_client\": false\n    },\n    \"oauth_meta\": {\n        \"allowed_access_types\": [],\n        \"allowed_authorize_types\": [],\n        \"auth_login_redirect\": \"\"\n    },\n    \"auth\": {\n        \"use_param\": false,\n        \"param_name\": \"\",\n        \"use_cookie\": false,\n        \"cookie_name\": \"\",\n        \"auth_header_name\": \"Authorization\",\n        \"use_certificate\": false\n    },\n    \"use_basic_auth\": false,\n    \"basic_auth\": {\n        \"disable_caching\": false,\n        \"cache_ttl\": 0\n    },\n    \"use_mutual_tls_auth\": false,\n    \"client_certificates\": [],\n    \"upstream_certificates\": {},\n    \"pinned_public_keys\": {},\n    \"enable_jwt\": false,\n    \"use_standard_auth\": false,\n    \"enable_coprocess_auth\": false,\n    \"jwt_signing_method\": \"\",\n    \"jwt_source\": \"\",\n    \"jwt_identity_base_field\": \"\",\n    \"jwt_client_base_field\": \"\",\n    \"jwt_policy_field_name\": \"\",\n    \"jwt_issued_at_validation_skew\": 0,\n    \"jwt_expires_at_validation_skew\": 0,\n    \"jwt_not_before_validation_skew\": 0,\n    \"jwt_skip_kid\": false,\n    \"notifications\": {\n        \"shared_secret\": \"\",\n        \"oauth_on_keychange_url\": \"\"\n    },\n    \"enable_signature_checking\": false,\n    \"hmac_allowed_clock_skew\": -1,\n    \"hmac_allowed_algorithms\": [],\n    \"base_identity_provided_by\": \"\",\n    \"definition\": {\n        \"location\": \"header\",\n        \"key\": \"x-api-version\",\n        \"strip_path\": false\n    },\n    \"version_data\": {\n        \"not_versioned\": false,\n        \"default_version\": \"default\",\n        \"versions\": {\n            \"2\": {\n                \"name\": \"2\",\n                \"expires\": \"\",\n                \"paths\": {\n                    \"ignored\": [],\n                    \"white_list\": [],\n                    \"black_list\": []\n                },\n                \"use_extended_paths\": true,\n                \"extended_paths\": {},\n                \"global_headers\": {},\n                \"global_headers_remove\": [],\n                \"global_size_limit\": 0,\n                \"override_target\": \"\"\n            },\n            \"Default\": {\n                \"name\": \"Default\",\n                \"expires\": \"\",\n                \"paths\": {\n                    \"ignored\": [],\n                    \"white_list\": [],\n                    \"black_list\": []\n                },\n                \"use_extended_paths\": true,\n                \"extended_paths\": {},\n                \"global_headers\": {},\n                \"global_headers_remove\": [],\n                \"global_size_limit\": 0,\n                \"override_target\": \"\"\n            }\n        }\n    },\n    \"uptime_tests\": {\n        \"check_list\": [],\n        \"config\": {\n            \"expire_utime_after\": 0,\n            \"service_discovery\": {\n                \"use_discovery_service\": false,\n                \"query_endpoint\": \"\",\n                \"use_nested_query\": false,\n                \"parent_data_path\": \"\",\n                \"data_path\": \"\",\n                \"port_data_path\": \"\",\n                \"target_path\": \"\",\n                \"use_target_list\": false,\n                \"cache_timeout\": 60,\n                \"endpoint_returns_list\": false\n            },\n            \"recheck_wait\": 0\n        }\n    },\n    \"proxy\": {\n        \"preserve_host_header\": false,\n        \"listen_path\": \"/787362a7531a4e5b7a33537298f79616/\",\n        \"target_url\": \"http://httpbin.org/\",\n        \"disable_strip_slash\": false,\n        \"strip_listen_path\": true,\n        \"enable_load_balancing\": false,\n        \"target_list\": [],\n        \"check_host_against_uptime_tests\": false,\n        \"service_discovery\": {\n            \"use_discovery_service\": false,\n            \"query_endpoint\": \"\",\n            \"use_nested_query\": false,\n            \"parent_data_path\": \"\",\n            \"data_path\": \"\",\n            \"port_data_path\": \"\",\n            \"target_path\": \"\",\n            \"use_target_list\": false,\n            \"cache_timeout\": 0,\n            \"endpoint_returns_list\": false\n        },\n        \"transport\": {\n            \"ssl_ciphers\": [],\n            \"ssl_min_version\": 0,\n            \"proxy_url\": \"\"\n        }\n    },\n    \"disable_rate_limit\": false,\n    \"disable_quota\": false,\n    \"custom_middleware\": {\n        \"pre\": [],\n        \"post\": [],\n        \"post_key_auth\": [],\n        \"auth_check\": {\n            \"name\": \"\",\n            \"path\": \"\",\n            \"require_session\": false\n        },\n        \"response\": [],\n        \"driver\": \"\",\n        \"id_extractor\": {\n            \"extract_from\": \"\",\n            \"extract_with\": \"\",\n            \"extractor_config\": {}\n        }\n    },\n    \"custom_middleware_bundle\": \"\",\n    \"cache_options\": {\n        \"cache_timeout\": 60,\n        \"enable_cache\": true,\n        \"cache_all_safe_requests\": false,\n        \"cache_response_codes\": [],\n        \"enable_upstream_cache_control\": false,\n        \"cache_control_ttl_header\": \"\"\n    },\n    \"session_lifetime\": 0,\n    \"active\": true,\n    \"auth_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"session_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"event_handlers\": {\n        \"events\": {}\n    },\n    \"enable_batch_request_support\": false,\n    \"enable_ip_whitelisting\": false,\n    \"allowed_ips\": [],\n    \"enable_ip_blacklisting\": false,\n    \"blacklisted_ips\": [],\n    \"dont_set_quota_on_create\": false,\n    \"expire_analytics_after\": 0,\n    \"response_processors\": [],\n    \"CORS\": {\n        \"enable\": false,\n        \"allowed_origins\": [],\n        \"allowed_methods\": [],\n        \"allowed_headers\": [],\n        \"exposed_headers\": [],\n        \"allow_credentials\": false,\n        \"max_age\": 24,\n        \"options_passthrough\": false,\n        \"debug\": false\n    },\n    \"domain\": \"\",\n    \"do_not_track\": false,\n    \"tags\": [],\n    \"enable_context_vars\": false,\n    \"config_data\": {},\n    \"tag_headers\": [],\n    \"global_rate_limit\": {\n        \"rate\": 0,\n        \"per\": 0\n    },\n    \"strip_auth_data\": false\n}. Recording:\n\n\n. Have updated original comment to include hyphen issues on the same topic.. I found some more info on this:\n\nThis is expected. Per the HTTP/1.1 specification, the Proxy-Authenticate and Proxy-Authorization headers are defined as \"hop-by-hop\" headers. Per section 13.5.1:\nHop-by-hop headers, which are meaningful only for a single transport-level connection, and are not stored by caches or forwarded by proxies.\nBecause of this, pre-processing of the request will strip these headers and they will not be available during service processing policies.. proxy-authorization is expected to be removed as it is a 'hop-by-hop' header which is only valid for a single connection.. \n",
    "lghiur": "This is still work in progress, but I want to ask for your opinion on the UI changes I'm thinking to do for this issue and also the data that are sent to the server:\nI have transformed the apply_policy_id key to apply_policies, and it's an array of values now:\n{\n    \"last_check\": 0,\n    \"allowance\": 1000,\n    \"rate\": 1000,\n    \"per\": 60,\n    \"expires\": 1500646501,\n    \"quota_max\": -1,\n    \"quota_renews\": 1500646507,\n    \"quota_remaining\": -1,\n    \"quota_renewal_rate\": 3600,\n    \"access_rights\": {\n        \"81ee8208e9a14bab72f796437eceb814\": {\n            \"api_name\": \"test\",\n            \"api_id\": \"81ee8208e9a14bab72f796437eceb814\",\n            \"versions\": [\"Default\"],\n            \"allowed_urls\": []\n        },\n        \"c48ef437cc86468c65b85c61e3b8208b\": {\n            \"api_name\": \"ddd\",\n            \"api_id\": \"c48ef437cc86468c65b85c61e3b8208b\",\n            \"versions\": [\"Default\"],\n            \"allowed_urls\": []\n        }\n    },\n    \"apply_policies\": [\n      \"59672779fa4387000129507d\",\n      \"53222349fa4387004324324e\",\n      \"543534s9fa4387004324324d\"\n    ],\n    \"tags\": [],\n    \"jwt_data\": {\n        \"secret\": \"\"\n    },\n    \"meta_data\": {},\n    \"alias\": \"\"\n}\nIn the UI we will replace the dropdown with a List component, and also I've added a warning message that shows all the partition conflicts between policies:\n\n@lonelycode @buger are you ok with these changes?\nNOTE: Please ignore the text messages, as we might need @marksou help on this one :). @ilijabojanovic I don't think that is the problem. For decoding the output I use the js function \"atob\" which should work ok, but the response I get from the server (from the test request http://localhost:3000/api/designer/test) looks like this:\n{\n    \"Type\": \"xml\",\n    \"Template\": \"ewp7e3JhbmdlICR4LCAkcyA6PSAuc2VydmVycy5zZXJ2ZXJ9fQoie3skcy5zZXJ2ZXJOYW1lfX0iOiAie3skcy5zZXJ2ZXJJUH19Igp7e2lmIG5vdCAkeH19LHt7ZW5kfX0Ke3tlbmR9fQp9\",\n    \"Input\": \"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPHNlcnZlcnMgdmVyc2lvbj0iMSI+CiAgICA8c2VydmVyPgogICAgICAgIDxzZXJ2ZXJOYW1lPiBKeXbkc2t5bOQ8L3NlcnZlck5hbWU+CiAgICAgICAgPHNlcnZlcklQPjEyNy4wLjAuMTwvc2VydmVySVA+CiAgICA8L3NlcnZlcj4KICAgIDxzZXJ2ZXI+CiAgICAgICAgPHNlcnZlck5hbWU+dGVzdDI8L3NlcnZlck5hbWU+CiAgICAgICAgPHNlcnZlcklQPjEyNy4wLjAuMjwvc2VydmVySVA+CiAgICA8L3NlcnZlcj4KPC9zZXJ2ZXJzPg==\",\n    \"Output\": \"ewoKfQ==\"\n}\nNow if you try in the console this like of code:\nvar a = window.atob('ewoKfQ=='); a;\nyou will see that the string is the one in the output textarea \"{ }\".\nNow I don't to throw this to the backend side so I will discuss with @mvdan about this to see how we can solve it.. This is being fixed for v1.4 of the dashboard. The PR is here https://github.com/TykTechnologies/tyk-analytics-ui/pull/129. Define a list of header in Apis designer (Advanced Options), name of section TBD. \nThe data will sit in the root of api_definition object.. @lonelycode I would like to add that this bug is reproducible on master branch of tyk-analytics-ui (current version of the code on stable too). Here is the object that is being sent on PUT request:\n{\n    \"last_check\": 0,\n    \"allowance\": 1000,\n    \"rate\": 1000,\n    \"per\": 60,\n    \"expires\": 1504246367,\n    \"quota_max\": -1,\n    \"quota_renews\": 1506834795,\n    \"quota_remaining\": -1,\n    \"quota_renewal_rate\": 2592000,\n    \"access_rights\": {\n        \"01ff8eb249634fe06f8eb710425d158a\": {\n            \"api_name\": \"new api\",\n            \"api_id\": \"01ff8eb249634fe06f8eb710425d158a\",\n            \"versions\": [\"Default\"],\n            \"allowed_urls\": null\n        }\n    },\n    \"org_id\": \"59a6adbd86341f0485c93507\",\n    \"oauth_client_id\": \"\",\n    \"basic_auth_data\": {\n        \"password\": \"\",\n        \"hash_type\": \"\"\n    },\n    \"jwt_data\": {\n        \"secret\": \"\"\n    },\n    \"hmac_enabled\": false,\n    \"hmac_string\": \"\",\n    \"is_inactive\": false,\n    \"apply_policy_id\": \"\",\n    \"data_expires\": 0,\n    \"monitor\": {\n        \"trigger_limits\": null\n    },\n    \"meta_data\": {},\n    \"tags\": [],\n    \"alias\": \"\",\n    \"last_updated\": \"1504242778\"\n}. @mvdan @buger  with this change, updating keys data works again . @buger I personally don't need this change, but if this doesn't work then we can't release multiple policies issue as @ilijabojanovic won't be able to test it. This is the main concern. \nOtherwise @mvdan s changes on multiple policies are working from my perspective.. @buger @lonelycode I'm discussing about the UX with @nickReyn @ViolaMarku  already, but can you please enable the dashboard api for this functionality, or let me know where will these data sit in the existing Dashboard API responses (I'm assuming in the api designer object at api_definition.versions_data.versions.{versionName}.extended_paths.url_rewrites[index]). Thanks!. @lonelycode @buger \nI'm getting some errors when trying to build this branch\ngithub.com/TykTechnologies/tyk\n./mw_url_rewrite.go:33: meta.Triggers undefined (type *apidef.URLRewriteMeta has no field or method Triggers)\n./mw_url_rewrite.go:42: meta.Triggers undefined (type *apidef.URLRewriteMeta has no field or method Triggers)\n./mw_url_rewrite.go:45: undefined: apidef.Any\n./mw_url_rewrite.go:229: path.Triggers undefined (type apidef.URLRewriteMeta has no field or method Triggers)\n./mw_url_rewrite.go:292: undefined: apidef.StringRegexMap\n./mw_url_rewrite.go:322: undefined: apidef.StringRegexMap\n./mw_url_rewrite.go:352: undefined: apidef.StringRegexMap\n./mw_url_rewrite.go:380: undefined: apidef.StringRegexMap\n./mw_url_rewrite.go:410: undefined: apidef.StringRegexMap\n. @dencoded @nickReyn @buger is there any FE task opened for this? How the FE change should look exactly?. @buger what's the release number we would like this for? 1.5?. @nickReyn what do you think about this?\n\n. @davegarvey you are right, I can see the same behaviors on page reload. Will keep investigating.. @LinuxUser3 I have tried the steps u described and apparently it works for my example. As I mentioned above we will keep investigating though. \nMy example:\nhttps://tykqa.cloud.tyk.io/portal/apis/5a6ffeeaded3fc000134e0c8/documentation/. @nililee Thank you for raising this issues, we'll take a look into it. \nAlso, can u share with us your api definition? that would help us debug the problem. . I have just raised a PR with a fix on this, will keep u posted when this will be released. \nThank you for raising up this issue.. @letzya this is working for me, I can't reproduce it doing the steps u described. Please let me know if you still see it. @ilijabojanovic can u take a look too?. My bad, @ConsM explained me the bug and I see it now. @buger this bug can be reproduced when editing a key. If we add a new tag on an existing key the BE doesn't save it. Will assign to a BE dev. @dencoded @buger can we add a validation on the server side too? At the moment it's hard to catch this error (it is displayed just in the terminal) but no browser console or server error at this point.. Can we integrate this somehow with analyitics? So we can maybe highlight it on the charts?. Hi @tokingHong, thanks for raising this up, a fix has been found and it will go out in the next patch release (ETA 2-3 weeks). ",
    "tumluliu": "very glad to see there is new progress on this issue. nice job @lghiur \nlooking forward to having this feature in the next release because it's sooo necessary. \nonly with this feature, it's able to define the matrix policies. sorry that I have to upvote this feature by myself again because more and more of our OpenRouteService users are complaining about this unclear, unchangeable \"Key not authorised\" message when their requests are rejected by our custom tyk plugin. \nOpenRouteService is really looking forward to seeing this issue be resolved soon. BIG THANKS!. thanks a lot for your reply! @buger \nI totally agree with you because I have checked that part of the source code before. I think it should be very easy as well. But @lonelycode thought it was not that easy because there would be some \"backward compatibility\" problem. He mentioned that in the tyk support ticket (No. 1116) I opened. . thanks a lot for the lighting quick response, Kos!. ",
    "steve-jansen": "@buger Do you envision Tyk verifying the the client cert against any Certificate Revocation List (CRL) or Online Certificate Status Protocol (OCSP) listed in the cert?  \nHere's an example from the google.com server cert:\n\nThink of revocation as a killswitch for an otherwise valid cert: a device has been compromised, an employee has left a company, etc.\nThis may be a non-issue with your intended use case if you assume authorization would be revoked elsewhere in the Tyk control plane.   Nevertheless, you may want to highlight if CRL/OCSP isn't honored.  This part of x509 is often overlooked in early implementations, so figured I'd help to highlight it early in your design process.. ",
    "ammaskartik": "Dont mind attempting the fix, looking at the middleware code, looks like the setContextVars are only set if the session doesnt exist, which makes sense on the issue. Should be a simple fix, good for my first one =). Also, we are kinda blocked by this issue, and would rather not do a workaround.. submitted new pull request: https://github.com/TykTechnologies/tyk/pull/413. Looks like @lonelycode merged my pull request and your team is pushing for release v2.3.2, this is great and very much appreciated. . @lonelycode whats your policy on closing issues, etc... Only after released?. @buger that makes perfect sense. \nThanks.. ",
    "catdevnull": "Thanks for your work on this. Looking forward to it in the next version.. Personally I'd say default to Tyk/x.x.x (where x.x.x is the gateway version) as the User Agent string if the default isn't set.\nThe default Go user agent string potentially causes confusion downstream, a Tyk specific one would be much more obvious to identify in downstream Web Application Firewalls and the like.. ",
    "mftaha": "Non-issue. Yes! could it be something in my configuration? or API JSON definition?. ",
    "asoorm": "\n[x] Gateway Update https://github.com/TykTechnologies/tyk/pull/1542\n[x] Dashboard API Update\n[ ] Dashboard UI Update\n[ ] Docs. @buger @dencoded @matiasinsaurralde @lonelycode \n\nProposal:\n\nHonour DNS TTL by default.\nAbility to disable DNS caching explicitly\nAbility to explicitly override cache ttl\n\n{\n  ...\n  \"dns\": {\n    \"disable_cache\": bool,                  <----- default false / nil\n    \"ttl_override_seconds\": int,            <----- default 0\n  }\n}\n| Config  | Output |\n| ------------- | ------------- |\n| dns object not set  | respect DNS TTL |\n| dns.disable_cache: false | respect DNS TTL |\n| dns.disable_cache: true | Disable Caching |\n| dns.ttl_override_seconds: 5 | Cache for 5s (assuming disable_cache is nil/false) |\nQuestions:\n\nAny thoughts on above\nShould this config be in tyk.conf (gateway) / api def (per service)?\n. @NicciCz - Useful to hear your thoughts on this?. I think adding sprig is simply case of modifying \n\nhttps://github.com/TykTechnologies/tyk/blob/master/api_definition.go#L514-L526\n```\nfunc (a APIDefinitionLoader) loadFileTemplate(path string) (*template.Template, error) {\n    log.Debug(\"-- Loading template: \", path)\n    return apiTemplate.New(\"\").Funcs(sprig.TxtFuncMap()).ParseFiles(path)\n}\nfunc (a APIDefinitionLoader) loadBlobTemplate(blob string) (*template.Template, error) {\n    log.Debug(\"-- Loading blob\")\n    uDec, err := base64.StdEncoding.DecodeString(blob)\n    if err != nil {\n        return nil, err\n    }\n    return apiTemplate.New(\"\").Funcs(sprig.TxtFuncMap()).Parse(string(uDec))\n}\n```\nTemplate\n{{ \"I Am Henry VIII\" | replace \" \" \"-\" }}\nOutput\nI-Am-Henry-VIII. http://masterminds.github.io/sprig/os.html\nWe should not be exposing env vars - maybe we can offer subset of the lib or only TYK_MW_ prefixed env vars?. @buger @ConsM  Started working on this issue & have a PR #1199 of what I I think solves the issue, or maybe just solves a different issue of duplicated CORS headers. Having said this, I am still a little unclear of expected logic & expected outputs given certain inputs.\ne.g. Is the following logic correct?\nGIVEN:\n* I send an OPTIONS request\nWHEN:\n Request Token is expired or is invalid\n and OPTIONS passthrough is true\nTHEN\n* Gateway should proxy OPTIONS request to upstream target. @buger @ConsM I need further clarification on this task as I cannot recreate issue. I need an API definition with the actual request that was made, response received, and expected response.. I am trying to recreate the issue and am unable to do so... Any help with a request, response and an expected response would be very helpful.\nIn Tyk - I have an expired Token. I enable CORS and OptionsPassthrough.\nExample POST Request:\n```\n$ curl -X POST https://tyk-gateway.dev:8080/httpbin/post -H 'Authorization: 5a71abbe1df0e6269034f06ae78866af6d8741c9b04d272fbe4a98a2' -k -v\n\nPOST /httpbin/post HTTP/1.1\nHost: tyk-gateway.dev:8080\nUser-Agent: curl/7.54.0\nAccept: /\nAuthorization: 5a71abbe1df0e6269034f06ae78866af6d8741c9b04d272fbe4a98a2\n< HTTP/1.1 401 Unauthorized\n< Content-Type: application/json\n< Vary: Origin\n< Date: Wed, 28 Feb 2018 13:14:22 GMT\n< Content-Length: 48\n<\n{\n    \"error\": \"Key has expired, please renew\"\n}\n```\n\nI send an options request to that same endpoint\n```\n$ curl -X OPTIONS https://tyk-gateway.dev:8080/httpbin/post -H 'Authorization: 5a71abbe1df0e6269034f06ae78866af6d8741c9b04d272fbe4a98a2' -k -v\n\nOPTIONS /httpbin/post HTTP/1.1\nHost: tyk-gateway.dev:8080\nUser-Agent: curl/7.54.0\nAccept: /\nAuthorization: 5a71abbe1df0e6269034f06ae78866af6d8741c9b04d272fbe4a98a2\n< HTTP/1.1 200 OK\n< Access-Control-Allow-Credentials: true\n< Access-Control-Allow-Methods: GET, POST, PUT, DELETE, PATCH, OPTIONS\n< Access-Control-Allow-Origin: *\n< Access-Control-Max-Age: 3600\n< Allow: POST, OPTIONS\n< Connection: close\n< Content-Length: 0\n< Content-Type: text/html; charset=utf-8\n< Date: Wed, 28 Feb 2018 13:15:53 GMT\n< Server: meinheld/0.6.1\n< Vary: Origin\n< Vary: Access-Control-Request-Method\n< Vary: Access-Control-Request-Headers\n< Via: 1.1 vegur\n< X-Powered-By: Flask\n< X-Processed-Time: 0\n< X-Ratelimit-Limit: 0\n< X-Ratelimit-Remaining: 0\n< X-Ratelimit-Reset: 0\n<\n``. This ticket seems to be an incorrect description of the actual issue. Closing in favour of: https://github.com/TykTechnologies/tyk/issues/1506. What are thoughts about setting env var prefixed withTYK_CONTEXT_`?\n\nWe could potentially expose the entire context vars + env vars within Tyk context - and then make accessible via function?\ne.g. Rough example var ctx = TykGetContext();\nctx: {\n   env: {\n      ENV_KEY1: ENV_VAL1,\n      ENV_KEY2: ENV_VAL2\n   },\n   ... // other context vars\n}\nPoss even better - we may be able to add context to request object so even grpc plugins will have access to it.. My thoughts are that it would work like this:\ndocker run -itd --rm --name gateway -e TYK_CONTEXT_VAR1=value1 tykio/tyk-gateway:latest. I was thinking in terms of security perspective not to expose everything - as will not always be run inside a docker container.. https://github.com/prometheus/statsd_exporter is the most sensible solution IMO.\nPrometheus gets metrics via pull, and does not support push. Meaning Prometheus will need to know the endpoint of each node in the cluster (whether that be gateway/pump or any other microservice).\nFurthermore, via the pull model, the gateways will need to be able to prepare the data for prometheus when it queries the API. In terms of performance, the gateways should be spending CPU cycles for processing requests, not for log aggregation.\nAll microservices can push via udp the analytics to the statsd exporter - and now, Prometheus only needs to know and scrape from the endpoint of the exporter(s), rather than every service. Nicely de-coupled.. Possibility that I have mistranslated the customer problem. Customer is currently using cloud solution. And uptime tests not available for cloud. \nIf one of the LB upstream targets returns for example a 500 or 404 error, instead of returning the error back, customer was looking for the ability to loop over the other upstream endpoints and temporarily take the failing endpoints out of the LB (0% circuit breaker?).. There may be scenarios where adding LB outside of Tyk may not be feasible / possible. Further, using LB with health-checks say every 60s, means that there could be a potential 60s period where the service is down, and the LB doesn't yet know about it.\nHaving option for Tyk to retry another upstream target in the hope of a +ve response 2nd time round could be a nice value-add. Obviously constraints such as number of retries, or response codes received from target to trigger the retry would need further discussion or ability to configure.\nIf you think is worth exploring, I can add to Trello roadmap.. I think I have managed to recreate this issue:\nInactive API\ncurl -X POST \\\n  http://localhost:8080/tyk/apis/ \\\n  -H 'cache-control: no-cache' \\\n  -H 'x-tyk-authorization: 352d20ee67be67f6340b4c0605b044b7' \\\n  -d '{\n    \"name\": \"Inactive\",\n    \"slug\": \"inactive-api\",\n    \"api_id\": \"inactive-api\",\n    \"org_id\": \"53ac07777cbb8c2d53000002\",\n    \"use_keyless\": true,\n    \"definition\": {\n        \"location\": \"header\",\n        \"key\": \"x-api-version\"\n    },\n    \"version_data\": {\n        \"not_versioned\": true,\n        \"versions\": {\n            \"Default\": {\n                \"name\": \"Default\",\n                \"use_extended_paths\": true\n            }\n        }\n    },\n    \"proxy\": {\n        \"listen_path\": \"/inactive-api/\",\n        \"target_url\": \"http://httpbin.org/\",\n        \"strip_listen_path\": true\n    },\n    \"active\": false,\n    \"domain\": \"\"\n }'\nActive API\ncurl -X POST \\\n  http://localhost:8080/tyk/apis/ \\\n  -H 'cache-control: no-cache' \\\n  -H 'x-tyk-authorization: 352d20ee67be67f6340b4c0605b044b7' \\\n  -d '{\n    \"name\": \"Active Api\",\n    \"slug\": \"active-api\",\n    \"api_id\": \"active-api\",\n    \"org_id\": \"53ac07777cbb8c2d53000002\",\n    \"use_keyless\": true,\n    \"definition\": {\n        \"location\": \"header\",\n        \"key\": \"x-api-version\"\n    },\n    \"version_data\": {\n        \"not_versioned\": true,\n        \"versions\": {\n            \"Default\": {\n                \"name\": \"Default\",\n                \"use_extended_paths\": true\n            }\n        }\n    },\n    \"proxy\": {\n        \"listen_path\": \"/active-api/\",\n        \"target_url\": \"http://httpbin.org/\",\n        \"strip_listen_path\": true\n    },\n    \"active\": true,\n    \"domain\": \"\"\n }'\nAfter a hot reload:\n[Sep 28 20:42:50]  INFO main: Processed and listening on: /inactive-api/{rest:.*}\n[Sep 28 20:42:50]  INFO main: Processed and listening on: /active-api/{rest:.*}\nAnd a curl to http://localhost:8080/inactive-api/ returns the httpbin page.. Think we can close this ticket.\n\n. I think in API definition it would make sense. strip_auth: true, strip_auth: false. \nFrom dashboard perspective, It would be good to have a checkbox option when setting up auth saying strip auth with default on. I think that this should be configurable at API level.. @mvdan Done. I don't know if above panic message is a red-herring or not... but in your storage config, could you add the \"use_ssl\": true field?\n\"storage\": {\n       \"type\": \"redis\",\n       \"host\" : \"somehost.redis.cache.windows.net\",\n       \"port\" : 6380,\n       \"username\": \"\",\n       \"database\": 0,\n       \"use_ssl\": true\n}. I cannot reproduce:\nCorrect\n$ curl -X GET https://ahmet-1.cloud.tyk.io/api1/ -I\nHTTP/1.1 401 Unauthorized\nContent-Type: application/json\nDate: Mon, 20 Nov 2017 16:13:43 GMT\nContent-Length: 46\nConnection: keep-alive\nNot found for all other combinations:\n$ curl -X GET https://ahmet-1.cloud.tyk.io/api1ss -I\nHTTP/1.1 404 Not Found\nContent-Type: text/plain; charset=utf-8\nDate: Mon, 20 Nov 2017 16:13:31 GMT\nX-Content-Type-Options: nosniff\nContent-Length: 19\nConnection: keep-alive\nahmet@Ahmets-MBP ~ $ curl -X GET https://ahmet-1.cloud.tyk.io/api1 -I\nHTTP/1.1 404 Not Found\nContent-Type: text/plain; charset=utf-8\nDate: Mon, 20 Nov 2017 16:13:36 GMT\nX-Content-Type-Options: nosniff\nContent-Length: 19\nConnection: keep-alive\n$ curl -X GET https://ahmet-1.cloud.tyk.io/api1ss/ -I\nHTTP/1.1 404 Not Found\nContent-Type: text/plain; charset=utf-8\nDate: Mon, 20 Nov 2017 16:13:48 GMT\nX-Content-Type-Options: nosniff\nContent-Length: 19\nConnection: keep-alive. @buger @mvdan I dont like the name upstream_cache_control_ttl_header. What do you think if I rename to cache_ttl_header_name or expires_header_name_override?. @mvdan - I've changed the header name to cache_control_ttl_header. Ready for review & merge again.. I think @mvdan PR is fine for time being and should be merged, because it solves the problem and unblocks @joshblakeley .\nI think we should create new ticket to clean up and implement @dencoded suggestion about mocks so that we don't need to rely on 3rd party service availability & eventual consistency during unit tests.\nI don't like the forced delay logic - this just reduces chances of race rather than resolving it. @buger @dencoded - Are we ok to merge / send to @ilijabojanovic for test? I am struggling with dashboard component testing given that it relies on api definition within this repo.. We are a bit limited with golang libs http://json-schema.org/implementations.html#validator-go .\nI see that there is now a new lib https://github.com/santhosh-tekuri/jsonschema (untested by us) which supports draft6 but nothing yet for draft7. Any thoughts @buger @lonelycode ?. And to track progress: https://github.com/xeipuuv/gojsonschema/issues/178. @buger @joshblakeley - I think this is great idea. but I think it's worth doing some planning before we go ahead implementing array of ciphers. I don't know if below comment is relevant or not... and I'm far from expert on tls... but thought I would pipe in just in case it is.\nOpenSSL has standard way of listing ciphers. e.g. : separated list with optional +, - and ! modifiers. They also have aliases.\nhttps://www.openssl.org/docs/man1.0.2/apps/ciphers.html\nWe could build PoC in-line with standard way of doing things (e.g. whitelist in the openssl standard form), then add functionality further down the line if required?\nSome more resources for review.\nhttps://httpd.apache.org/docs/2.4/mod/mod_ssl.html#sslciphersuite\nhttp://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_ciphers\nhttps://wiki.mozilla.org/Security/Server_Side_TLS\nI can just imagine the next requirement/feature request would be to use Strong Diffie-Hellman Group & perfect forward secrecy via ECDHE instead of RSA key exchange. Assuming supported at the moment, but wanted to bring up to make sure.. If we have a list e.g. a whitelist of acceptable ciphers. Then a new cipher is used. Wouldn't this mean that it wouldn't be accepted? Doesn't that mean that the api owner will need to constantly keep on-top of the cipher suite?. Ok, cool - just wanted to check. But I think as part of this feature - we need to document supported ciphers.. I get same panic. Investigating now. A few thoughts:\nWhen an API has more than a pre-defined limit of active connections, new requests are placed on a FIFO queue.\nOnce the number of active connections has dropped below the limit, the queue is drained by allowing the requests in the queue to process.\nThe queue has a capacity and each request in the queue is assigned a timeout. In the event that the number of requests in the queue exceeds the capacity, or a request is in the queue for more than the assigned timeout, the request is cancelled and a Service Unavailable response is returned.\nTyk currently has the concept of quotas and rate limits. These are hard limits in that going over this usage will return a rate limit exceeded error.\nAs a means to protect the upstream service from becoming overloaded, but also reduce the number of \"unsuccessful requests\" an API owner may wish to configure a throttle within Tyk's API configuration.\nAs such, an API definition must be configurable by:\n\nNumber of concurrent / active connections to that endpoint/service\nBacklog queue size\nQueue Request TTL\n\nSee: https://godoc.org/github.com/go-chi/chi/middleware#Throttle\nSee: https://godoc.org/github.com/go-chi/chi/middleware#ThrottleBacklog. A few suggestions - and is up for discussion:\n\n\nRename example files to something like: example.tyk.ce.conf and example.tyk.pro.conf. Could even add a config for example.tyk.hybrid.conf.\n\n\nRemove all configs which do not relate to the deployment. Tyk CE is headless. So we should just delete all dashboard related fields from the config as it does not apply and adds confusion. e.g.\n\n\n...\n\"use_db_app_configs\": false,\n\"db_app_conf_options\": {\n  \"connection_string\": \"\",\n  \"node_is_segmented\": false,\n  \"tags\": null\n},\n\"disable_dashboard_zeroconf\": false,\n...\n\nEnsure sensible defaults, and turn off performance degrading configs in example configurations. But if we want an entire complete example, we could have an example.tyk.full.conf where everything would be turned on.. LGTM. @buger Nice. \n\nSeparate commit / PR? Mutual TLS cert support is a feature. This IMO is a bug. cool - will work on today. I think you could take a look at Service Discovery & also Uptime Tests.\nUptime tests can flag if a host is down and, if the internal Load Balancer is in use, that host can be removed from the list throughout the period that the host is down. https://tyk.io/docs/ensure-high-availability/uptime-tests/\nThe service discovery can also be used to auto-configure the load balancer target list.  https://tyk.io/docs/ensure-high-availability/service-discovery/. I can think of a few strategies if we decide to implement this... Some will require tracking of number of currently active connections to each host.\n\n\nKeep a list and send traffic to the host which has least number of requests at that given moment in time.\n\n\nPotentially a lower overhead soln such as randomly selecting x% of hosts from the pool, then LB to the least loaded.\n\n\nmoving avg response time based LB\n\n\nThese are probably quite a naive approaches - and I would probably want to run some tests to see what happens and how system would react under different scenarios.. This is a dashboard issue.\nAt the moment, we map domains with port.\n```\nfunc getMatchPath(hostname string) string {\n    portStr := \u201c\u201d\n    if AnalyticsConfig.ListenPort != 80 && AnalyticsConfig.ListenPort != 443 {\n        portStr = \u201c:\u201d + strconv.Itoa(AnalyticsConfig.ListenPort)\n    }\nhName := hostname + portStr\nreturn hName\n\n}\n```\nPreviously this was required because we used the internal go router. Now we are using gorilla mux, we should be able to amend to only use hostname.\nCurrently, in order to view the developer portal when using a custom domain, the port needs to be included in the request to the portal.\nCurrent:\ncurl -X GET https://portal.dev -H 'Host: 'portal.dev:3000'\nDesired:\ncurl -X GET https://portal.dev -H 'Host: 'portal.dev'. Just a quick update - A patch has been created, has gone through QA and merged into dashboard.\nWe anticipate a deployment with the fix next week.. I'm not certain we can change this without breaking backwards compatibility. Any thoughts?. If you could send an API definition or a gist of an API definition, redacting sensitive info, it may help us to debug the issue.. This is strange - I've imported your api definition, replacing a few nulls with empty array or objects where appropriate. Then I've changed auth method to Auth Token for speed - and setup the upstream to be http://httpbin.org/get\nhttps://gist.github.com/asoorm/859f3a95b6b89de3b318c8bc79a5cf34\nWhen I create a key for the API and send a request to cloud gateway - it proxies the request without issue.\ncurl --request GET \\\n  --url https://GATEWAY_ADDRESS/example_api/ \\\n  --header 'Authorization: AUTH_TOKEN'\nI get the following response from httpbin\n< HTTP/1.1 200 OK\n< Access-Control-Allow-Credentials: true\n< Access-Control-Allow-Origin: *\n< Content-Type: application/json\n< Date: Tue, 20 Mar 2018 20:57:46 GMT\n< Server: meinheld/0.6.1\n< Via: 1.1 vegur\n< X-Powered-By: Flask\n< X-Processed-Time: 0\n< X-Ratelimit-Limit: -1\n< X-Ratelimit-Remaining: -1\n< X-Ratelimit-Reset: 1521577590\n< Content-Length: 511\n< Connection: keep-alive\n<\n{\n  \"args\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Accept-Encoding\": \"gzip\",\n    \"Authorization\": \"AUTH_TOKEN\",\n    \"Connection\": \"close\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"curl/7.54.0\",\n    \"X-Scheme\": \"https\"\n  },\n  \"origin\": \"IP1, IP2, IP3...\",\n  \"url\": \"http://httpbin.org/get\"\n}. You need to supply an auth header name in your API Definition.\n\"auth\": {\n        \"auth_header_name\": \"Authorization\"\n    },\nAs an aside, x-tyk-authorization is a header reserved for controlling Tyk, rather than to use as auth header for your own APIs. with the above snippet, you should be able to send an API request as follows:\ncurl -H \"Content-Type: application/json\" -H \"Authorization: 1\" http://xxxxxx:8080/calculator/bmi-5\nSee the following gist for an example api definition: https://gist.github.com/asoorm/3c1b493465b31447b3a6602988b0d7d3. Did you fix the API definition and reload / hot-reload the gateway?. The response: {\"key\": \"62\",\"status\": \"ok\",\"action\": \"added\"} indicates that you have created a key, or are using the keys endpoint rather than creating an API.\nCheck this video tutorial on the basics of getting up and running with Tyk Gateway: https://www.youtube.com/watch?v=YFU2HLeT0HY&t\nIf you don't want to hot reload, you could just store your API definition in the apps directory, and gateway will load it when you start.. PR submitted for early feedback please. Present implementation: If a POST request is sent with a body, we get an error. But if body is empty, then it works as expected.\n2018/03/20 10:44:51 http: multiple response.WriteHeader calls\nNeed to investigate this.. Good point - my bad. Just thinking out loud here - will we need to support proxy auth?\nhttps://tools.ietf.org/html/rfc7235#section-3.2\nhttps://tools.ietf.org/html/rfc7235#section-4.3\nhttps://tools.ietf.org/html/rfc7235#section-4.4. Nice. This is weird... Is working for me\n$ curl localhost:8080/3ed56c12ee844e986857c51402fe2019/get -H \"Authorization: Basic c3BhZ2hldHRpOmJvbG9nbmVzZQ==\"\n{\n  \"args\": {},\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Accept-Encoding\": \"gzip\",\n    \"Authorization\": \"Basic c3BhZ2hldHRpOmJvbG9nbmVzZQ==\",\n    \"Connection\": \"close\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"curl/7.54.0\"\n  },\n  \"origin\": \"::1, 82.71.60.185\",\n  \"url\": \"http://httpbin.org/get\"\n}. \n. This issue should have been fixed already. https://github.com/TykTechnologies/tyk/issues/1547. I have no idea. but I guess that we could allow -1 to be set if unlimited was required?. @buger the point is that keeping it 0 by default will override the hardcoded 100. Which means a change for existing user's installations. Are we happy with this?\n. @buger Removed the -1 / unlimited functionality. 0 means unlimited now.. i think would work better if the TYK_CONTEXT_SOMETHING env var was set on host OS, then make that env var accessible via $tyk_context.env_SOMETHING. using smaller keys results in faster reads makes sense. but in example provided above, we are not using smaller keys, but smaller values at the given key.\nSo the performance increase is more likely due to faster deserialisation of PB msg, and smaller payload being sent from redis to Tyk.\nFew other considerations\n\nA tool for development / debug purposes to read / deserialize the pb msg.\nPB / JSON to be configurable, allowing users to select between the two\nSo that non-destructive, pb encoded values should have different redis key prefix in comparison to json encoded values. e.g. apikey-pb-XXXX\nSome method of migrating between json-encoded & pb-encoded values.. At present, Tyk only sends {{ .Message }} to the errors template which maps to \"title\": \"{{ .Message }}\",. \n\nI am currently looking into the ability to expose extra fields - something like as {{ .Type }}, and {{ .Errors }} - allowing for more configurable response body.\ne.g. \n// APIError is generic error object returned if there is something wrong with the request\ntype APIError struct {\n    Message string\n    Type string\n    Errors interface{}\n}\n. @matiasinsaurralde have you looked at: https://github.com/gogo/protobuf. @dencoded PTAL. If you could also double check my implementation of hasher - that would be great.. Benchmark comparison where BenchmarkBasicAuth has been filtered for only valid passwords.\n```\nbenchmark                old ns/op     new ns/op     delta\nBenchmarkBasicAuth-4     66563979      364075        -99.45%\nbenchmark                old allocs     new allocs     delta\nBenchmarkBasicAuth-4     9702           451            -95.35%\nbenchmark                old bytes     new bytes     delta\nBenchmarkBasicAuth-4     510019        72023         -85.88%\n```. I'm not 100% happy with this fix. It feels like it could be a patch-up of another problem elsewhere.\nAny advice on the right fix, or if you are happy with this PR would be much appreciated.\n. @buger I don't think that the body gets read twice. If it was, then the copyResponse fix simply would not work. example:\nCode:\n```\npackage main\nimport (\n    \"bytes\"\n    \"io\"\n    \"log\"\n    \"net/http\"\n    \"os\"\n)\nfunc main() {\nres, err := http.Get(\"http://httpbin.org/xml\")\nif err != nil {\n    log.Fatalf(\"unable to create new request: %v\", err)\n}\n\nlog.Println(\"oldRes - START\")\nio.Copy(os.Stdout, res.Body)\nlog.Println(\"oldRes - END\")\n\nnewRes := copyResponse(res)\n\nlog.Println(\"newRes - START\")\nio.Copy(os.Stdout, newRes.Body)\nlog.Println(\"newRes - END\")\n\n}\nfunc copyResponse(r http.Response) http.Response {\n    r2 := *r\n    if r.Body != nil {\n        r.Body, r2.Body = copyBody(r.Body)\n    }\n    return &r2\n}\nfunc copyBody(body io.ReadCloser) (b1, b2 io.ReadCloser) {\n    if nc, ok := body.(nopCloser); ok {\n        buf := (nc.Reader.(bytes.Buffer))\n        return body, nopCloser{&buf}\n    }\n    defer body.Close()\nvar buf1, buf2 bytes.Buffer\nio.Copy(&buf1, body)\nbuf2 = buf1\nreturn nopCloser{&buf1}, nopCloser{&buf2}\n\n}\n// nopCloser is just like ioutil's, but here to let us fetch the\n// underlying io.Reader.\ntype nopCloser struct {\n    io.Reader\n}\nfunc (nopCloser) Close() error { return nil }\n```\nOutput:\n```\n$ go19 run main.go \n2018/05/18 13:37:39 oldRes - START\n<?xml version='1.0' encoding='us-ascii'?>\n  A SAMPLE set of slides  \n\n<!-- TITLE SLIDE -->\n<slide type=\"all\">\n  <title>Wake up to WonderWidgets!</title>\n</slide>\n\n<!-- OVERVIEW -->\n<slide type=\"all\">\n    <title>Overview</title>\n    <item>Why <em>WonderWidgets</em> are great</item>\n    <item/>\n    <item>Who <em>buys</em> WonderWidgets</item>\n</slide>\n\n2018/05/18 13:37:39 oldRes - END\n2018/05/18 13:37:39 newRes - START\n2018/05/18 13:37:39 newRes - END\n``\n. To be honest, I don't understand why the fix works either. Need help please.. @dencoded thanks for help on this. PR modified to useioutil.ReadAllrather thancopyResponse. Ready for re-review.. @buger JSON is not affected. It looks like the problem is withmxj.NewMapXmlReader, because it cannot work withReadCloser`. That' why I only read the bytes for XML rather than everything.\n@dencoded looked at possibility of upgrading mxj, but there are quite a few changes to the lib which we have not tested yet. So for purposes of this PR - this is the backwards compatible bugfix until we have opportunity to consider replacing/upgrading mxj.\nRegarding request body transforms, we already call body, _ := ioutil.ReadAll(r.Body). So should not be an issue.. @buger Ok to close this issue?\n. I think is a small hack given the increased UX. \nnot having tyk -h and having to do tyk start -h may not be too intuitive.\nMaybe a comment to explain the hack?\n. Thank you for reporting this. We will fix the docs / the dashboard.\nIn the meantime, you may specify log level by setting an environment variable when you start the dashboard service TYK_LOGLEVEL=debug.. @ch0wnag3 Ticket for dashboard created internally and PR fix is in process of being reviewed.. @lonelycode - In other words - Apply rate limits per API, per policy. So I am user X, with Policy Y. Policy Y states that API(1) has 10 rps and API(2) has 20 rps. And that is applied at the token level. \nSo instead of creating a token bucket to catch all, you create a token+policy+api bucket combo and feed that instead of feeding a general bucket.. @dencoded Initial ticket has morphed a bit as has been edited. This is the specific customer request: https://github.com/TykTechnologies/tyk/issues/1783#issuecomment-404192006. I think I may have poorly specified the problem. Or forgot to include the key issue.\nBecause the ignore lists do not just affect auth. From my understanding, I cannot perform a body transform or header injection or use any other middleware on an ignored path.. This will be available via our dashboard in our Tyk Dashboard 1.7 release. We are in the process of QA and hope to be packaging & releasing within the next few weeks.. Closing because released already. @bitsofinfo thanks for reporting - https://github.com/TykTechnologies/tyk-docs/pull/474/files?w=1. Thinking about this, mock response should run entire mw chain, but run short circuiting upstream but actually also run response mw.\nWe are also looking to implement a tracer, and it will be useful to be able to debug with mock responses.. Hi - You should be able to use the standard MongoDB connection string format:\nmongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\nor \nmongodb://db1.example.net:27017,db2.example.net:2500/?replicaSet=test\nhttps://docs.mongodb.com/manual/reference/connection-string/#standard-connection-string-format\nDoes the above not work for you?. @dencoded PTAL. @dencoded This is separate issue. https://github.com/TykTechnologies/tyk/issues/1820. @jamietanna looks like the fix has already been merged into gateway 2.7.2.\nhttps://github.com/TykTechnologies/tyk/pull/1809/files\nWhat version of the gateway are you running?\n. @ilijabojanovic for 2.7.2?. Quick question, are you using https://github.com/TykTechnologies/tyk-pro-docker-demo? Your log output looks like a docker-compose. It would be useful to see this (with sensitive info redacted) to assist debugging the issue.\nSeparately - it looks like there is an issue with the gateway too tyk_gateway_1    | sed: cannot rename /opt/tyk-gateway/sedMT6xfQ: Device or resource busy and this could be because sed doesn't play well with mounted volumes due to changing of inode.. Actually - the logs you have shown us are dashboard logs. but env vars you have set are for the gateway.\n| json key | env var |\n|-----|-----|\n| redis_port | TYK_DB_REDISPORT |\n| redis_host | TYK_DB_REDISHOST |\n| redis_password | TYK_DB_REDISPASSWORD |\nhttps://tyk.io/docs/configure/dashboard-env-variables/\nTry setting these also so that the dashboard will also be able to communicate with the same redis as the gateway.. Excellent news. Thanks for the update.. Thank you for your feedback. I think a docs update with clearer guidance on how to harden Tyk for production would be useful.\nFor example, the following config settings are available:\ncontrol_api_hostname The hostname to bind the admin control API.\ncontrol_api_port Allowing you to have the admin api listen on a separate port to general API traffic, and hide it behind firewall if required.\nMeaning that you do not have to expose the admin api at all.. @afrizalchen @altaurog The Control API supports MTLS already. https://tyk.io/docs/security/tls-and-ssl/mutual-tls/#gateway this feature works when control api is on it's own port/domain.\nIf you need to introduce IP whitelisting, blacklisting, other security for the control api, you could always configure Tyk to proxy to itself.. @buger have been waiting for UI component in order to prepare documentation. At the moment, this feature should be available via dashboard raw api definition and setting strip_path to true inside api_definition.definition.\n\"definition\": {\n      \"location\": \"url\",\n      \"key\": \"version\",\n      \"strip_path\": true\n    }. @dencoded It seems that the problem is with Python Version. Running CI with Python 3.5 seems to work in travis.yml\naddons:\n  apt:\n    sources:\n    - sourceline: 'ppa:opencpu/jq'\n    packages:\n    - python3.5\n    - python3-pip\n    - libluajit-5.1-dev\n    - libjq-dev\n. @dencoded @matiasinsaurralde If this works - would prefer to find out what is causing the problem and fixing it, rather than just setting python version to 3.5. Interesting, I may be wrong, but believe is still valid. 1.720256e+06 is just scientific notation for 1720256.\nDespite this, I need to check why it is converting after 7 digits. 999999 is fine, but 1000000 converts to scientific notation. This could just be a browser / ui issue.\nRegarding your 2nd issue - this means that whatever your upstream returned from that endpoint, it doesn't contain a count object. so it indicates you may be hitting the wrong path.. @buger as MVP - The ALL methods or * is good solution. But this means we will not be able to exclude specific http verbs.\ne.g. if I wanted to blacklist all non GET requests to a specific path.\nI know that this can be achieved at policy level, but it may be useful to do at the api definition level.. Hi there, instead of using the bundle downloader - would you be able to put the bundle manifest directly into the API definition? Wondering if this would work for you?\ne.g. for pre-hook as an example, in API definition add this object into custom_middleware.pre array:\n\"pre\": [\n        {\n          \"name\": \"somePreMiddleware\",\n          \"path\": \"middleware/somePreMiddleware.js\",\n          \"require_session\": false\n        }\n      ]. my understanding is that 2.7.1 release is scheduled for next week and will be a patch-release. I think it's a bit late in day to include this feature request for next week.\nHave you thought about signing the bundle with a private key where the signature can be verified? or is it just that the manifest itself needs to be secured entirely?. Can I just confirm requirements please because I wasn't certain that S3 supported Basic Auth natively\ne.g. are you using something like http://www.s3auth.com?\nif I send normal curl it comes back unauthorized:\ncurl http://maven.s3auth.com/ -I\nHTTP/1.1 401 Unauthorized\nWWW-Authenticate: Basic realm=\"maven.s3auth.com\"\nContent-Type: text/plain\nContent-Length: 0\nIf i send basic auth it allows me through:\ncurl http://s3auth:s3auth@maven.s3auth.com/ -I\nHTTP/1.1 200 OK\nDate: Fri, 03 Aug 2018 12:23:54 +0000\nLast-Modified: Mon, 15 May 2017 10:07:12 UTC\nAge: 0\nServer: relay.s3auth.com, 1.0-SNAPSHOT/15b9be8 built on ${maven.build.timestamp}\nX-S3auth-Time: 1\nContent-Type: text/plain\nContent-Length: 0\nSo here's the question - assuming the above functionality is what you require... when you set the bundle_base_url, you are not able to include the credentials as part of the URL?. @bitsofinfo Let me know how you get on.. @buger @letzya Bump. This looks awesome -  I'm just thinking about edge-case. Many users don't use listen-path, but rather have each API listen on custom domain.\nSo rather than curl http://gateway:8080/httpbin/get, they would do curl -H 'Host: httpbin' http://gateway:8080/get\nIf the gateway / api-definition is configured in this way, how would our looping logic support this? As well as query string param for method, maybe we should also add optional query string param for host?\nFinally - there is a chance of collision of query string params... maybe we should rename method query_string param to tyk_method, and if we decide to support host we could call tyk_host?. I agree. Unmarshal is not a friendly term.\nSimply \u201cmalformed config file\u201d or \u201cyour Json config is invalid\u201d or \u201ccannot parse json config\u201d messages are more friendly.. @danielmartins From what I can see - I think I agree with @ilijabojanovic in that you have used a Tyk Community Edition configuration file. The CE config file is designed to be run headless (without dashboard).\nFor example, you are also missing:\n\"use_db_app_configs\": true,\n  \"db_app_conf_options\": {\n    \"connection_string\": \"DASHBOARD_URL\",\n    \"node_is_segmented\": false,\n    \"tags\": []\n  },\nI would recommend that you take a look at:\nhttps://tyk.io/docs/get-started/with-tyk-on-premise/installation/ for instruction on how to install the open source gateway with the api management dashboard.\nMore specifically - https://tyk.io/docs/get-started/with-tyk-on-premise/installation/on-ubuntu/gateway/#a-name-configure-tyk-gateway-with-dashboard-a-configure-tyk-gateway-with-dashboard should ensure that your gateway is configured properly to speak with the dashboard service.. I feel like this is could be achieved at the load balancer level rather than the gateway level.\nI think http should be deprecated and turned off with appropriate error code rather than redirect to https.\nMachine to Machine - APIs (machine clients) are not like browsers in that they may not be configured or able to follow redirects. \nWeb Browser - If the resource is accessed by browser, then HSTS would handle the redirect on client's behalf.\nSome clients - if they are configured to follow redirects change the request method - e.g. POST to GET \nhttps://tools.ietf.org/html/rfc2616#section-10.3.2\n\nNote: When automatically redirecting a POST request after\nreceiving a 301 status code, some existing HTTP/1.0 user agents\nwill erroneously change it into a GET request.\n\nIf we decide to implement this feature, maybe use a 308 Moved Permanently? https://tools.ietf.org/html/rfc7538#section-3 rather than standard 301 which guarantees that the HTTP method is not changed on redirect?. Could you give a little more detail please? I'm a little confused about what exactly you require.. You need to change the target URL \"target_url\": \"xx.xxx.xx.xx\", to something like http://httpbin.org.\nThe gateway will listen on the listen_path which you have as abc in your example e.g. as per your example: http://gateway_url/abc/get which would proxy to http://httpbin.org/get.. Change the target URL to include the port? \"target_url\": \"http://httpbin.org:8080\"?. Can you curl your service directly?\nhttps://youtu.be/YFU2HLeT0HY?t=6m\nShort 15m video which should help you. It looks like you are not recording analytics.\n...\n \"enable_analytics\": false,\n...\nshould be set to true, and you need to deploy tyk-pump to pull analytics out of Redis, and pump them to your own data-sink such as mongodb for viewing in the dashboard:\nhttps://tyk.io/docs/concepts/tyk-components/pump/\nhttps://tyk.io/docs/get-started/with-tyk-on-premise/installation/on-ubuntu/analytics-pump/\nIf you require recording of request & response body (not recommended for production), add \"enable_detailed_recording\": true to the analytics_config object.\n\"analytics_config\": {\n        \"enable_detailed_recording\": true,\n        \"type\": \"mongo\",\n        \"csv_dir\": \"/tmp\",\n        \"mongo_url\": \"\",\n        \"mongo_db_name\": \"\",\n        \"mongo_collection\": \"\",\n        \"purge_delay\": -1,\n        \"ignored_ips\": []\n    },. I think that the fix is fine, but given that it is exactly same as my PR https://github.com/TykTechnologies/tyk/pull/1952 - better for @buger @dencoded @matiasinsaurralde to review. @dencoded PTAL. Closing in favour of: https://github.com/TykTechnologies/tyk/pull/1946/files. Approved - but please squash those commits. Could you confirm what your home_dir value is set to in your dashboard configs?\nIt should be something like: \"home_dir\": \"/opt/tyk-dashboard\", or if you are configuring via environment variables: TYK_DB_HOMEDIR=/opt/tyk-dashboard.\nIf this is not present, I think it defaults to root / to look for the schemas directory - hence the error: /./schemas/user.json: no such file or directory.. https://tyk.io/docs/configure/tyk-dashboard-configuration-options/\n\nhome_dir: The path to the home directory of Tyk Dashboard, this must be set in order for Portal templates and other files to be loadable. By default this is /opt/tyk-dashboard/.. I was able to reproduce this issue on both 2.7.1 & current master. Looks like it is httpbin stripping this header\n\ncurl -X GET http://httpbin.org/headers -H 'Proxy-Authorization: 1'\n{\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Connection\": \"close\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"curl/7.61.0\"\n  }\n}. well spotted!\n. nit. necessary to split the line for an extra couple of characters over length to be displayed in gh window? https://github.com/golang/go/wiki/CodeReviewComments#line-length. If we are doing that, then would be good to build into some kind of linter as pattern is not followed everywhere by everyone so no consistency?. I would consider having a default in your switch case for unsupported log levels.. New standards (since nodeJS) are to indent json files with 2 spaces.. Yep - Was just an fyi rather than an issue.. Shouldn't this return a non-zero exit code too?. return a.Spec.StripAuthData. nit\n```\nif m.Spec.StripAuthData {\n    m.StripAuth(r, mSpec)\n}\nreturn nil, 200\n```\nAlso, does ProcessRequest function implement an interface and that's why we are also returning an error?. but is no longer a constant. We set the default to \"x-tyk-cache-action-set\" and change it if header name has been changed.. @dencoded - Agree with status code changes and have implemented these.\nThe reason I have not logged before returning error is that IMO it's bad practice to log the error before returning. It's up to the caller of ProcessRequest to do the logging if it needs to. Open to thoughts on this.. Check tests. Provides a , separated list.. @dencoded nice - suggestions on implementation / examples of where done before please?\nE.g. create internal cache within application? Use Redis?\nFinally - would you classify as significant for added complexity vs limited perf gain possibly only when schema is massive?\nhttps://gist.github.com/asoorm/5ed9996cda838a7a05ee557b4ca077af\n$ go test --bench . -benchmem\nBenchmarkBase64DecodeString-4            1000000              1781 ns/op             992 B/op          2 allocs/op\n--- BENCH: BenchmarkBase64DecodeString-4\n        b64_test.go:19: decode len 516\n        b64_test.go:19: decode len 516\n        b64_test.go:19: decode len 516\n        b64_test.go:19: decode len 516\nBenchmarkBase64DecodeString2-4              5000            250250 ns/op          147456 B/op          2 allocs/op\n--- BENCH: BenchmarkBase64DecodeString2-4\n        b64_test.go:27: decode len 81376\n        b64_test.go:27: decode len 81376\n        b64_test.go:27: decode len 81376\nPASS\nok      github.com/TykTechnologies/tyk/perftest 3.088s. I like this idea - but I think for consistency, we keep same as rest of api_definition.go. Will create separate GH refactor issue for avoiding slice re-allocation.. anything we can do about this?? Looks like javascript. not really sure how this works... but if conn.Err != nil, can you safely call conn.Close?. Only checks that is Empty string or not draft-v4. because the schema itself supports versioning. unless I misunderstood? http://json-schema.org/latest/json-schema-core.html#rfc.section.7\n. good spot.. I kept in same format as EnableIpWhiteListing. Because at the point this has been injected - it's from the middleware, and not the upstream. So at this stage, the request has not yet been proxied and we are about to return an error to the user.. So the circuit breaker I am not sure is required. because we are calling Tyk itself but this time, as a pre-flight request.\n. That's why it's called loopback. because the gw calls it's own API. The reasoning for this is because the OPTIONS request needs to go through the exact same MW chain as the original pre-flight request would have done before so that we get the same request to the same upstream endpoint.\ne.g. there may be MW in place which re-writes the target.. Thanks, will look into. Can just use log.WithField(\"prefix\", \"coprocess\").Error(err). This is for me to test locally that my cache is working as expected.. Yeah - I think i messed that up... good spot\n. looks like you are using spaces rather than tabs.. same here. We want caching to be enabled by default - so a user needs to disable caching explicitly. This looks like a bug: shouldn't it be something like: log.Debugf(\"Found User Id: %s\", userId). no need to fmt.Sprint - just set the msg to a string. What I meant was, what is wrong with: message := \"user id was not found in claims\". Typo? ECDSASing -> ECDSASign. Typo? ECDSASing -> ECDSASign. don't know specifics of implementation, but should we panic here? any better way of gracefully dealing with issue? could we simply fail the test?. dont need to commit these. these should not be committed to repo. It's been a habit that I've had for many years - I think it looks neater. Is not just js... PEP-8, PSR-2 etc.\nAlso for golang, because { is in-line with function, unlike k&r style, it looks clearer in my opinion.. we need to call doBcrypt 3 times in the function. If you look at previous way was implemented, all of content from the function literal was being repeated many times. I didn't want to create pointer receiver function on the struct, because this is the only place that it is used.\nI didn't want to place as separate pointer receiver, as is not used elsewhere.\nAlso, it makes the business logic bit of the code much easier to read & understand.. We pretty much do. but if we did this, then hasher & doBcrypt function would need to be declared eariler, and would make no difference?. Will look into. Will look into. will look into. nop - because if not in cache, or hash doesn't match from cache, then it fails-over to bcrypt as src of truth. doBcrypt also populates the cache if cache enabled. not related - was a checkout of another branch\n. updated. If user password changes, then we could get a cache hit - but an invalid password.\nWe call the doBrcyptWithCache function to re-set the cache with latest password.. good opportunity to change 503 to const http.StatusServiceUnavailable. This could be a default, and allow override via config file / env var?. @buger @joshblakeley \nShould this be configurable? If JWT contains an expiry - surely we should just use the JWT's expiry without looking at the Policy expiry?. I think - because JWT is not generated by Tyk, rather by a 3rd party - that the type assertion here should check validity otherwise the gateway will panic.. Agree with concept of not disrupting flows - but the existing logic is currently bugged IMO - this is supposed to resolve the issue, not give user option to resolve the issue.. That's why I tagged @buger for his opinion\n. would be nice to use http status code constants.. Default should be http.StatusUnauthorized.\nBecause if signature fails, we do not believe the user is who they say that they are - even if they have correct auth token.. ",
    "evityuk": "By using a dns record's ttl from dns lookup call(see a line#33), we can omit storing additional configurations(both per api and global) on gateway side. \nShould we add that functionality with this issue or with the next one(and deprecate current configs) ? \nCurrent implementation store cache values globally and doesn't stored on per api basis. \n@lonelycode  @buger  . > also, as a general note - could you squash all that long list of commits?\nIt can be merged by github PR merge&stash functionality, which merges all commits into single one. \nShould I merge it manually?. Fixed in this https://github.com/TykTechnologies/redigocluster/pull/4/files\nLook like duplicate of this epic https://github.com/TykTechnologies/product/issues/188 .\nPlease track this issue for details. 29984086768d9d417ec85294c7d9ec0bfcaeed24\nfixed. Are there any swagger doc updates required?. As a side-effect you now allows to create a hashed key from scratch. \nThis is no problem, but makes sense to document it\n. Does it make sense to group isHashed&keyName to separate viewModel like structure: \n\ntype KeyInfo struct { keyName string isHashed string }\n\nin order to reduce the number of function params?. https://github.com/TykTechnologies/tyk/blob/352f98c566ff3fde2d919dbb797e337890cad9eb/api.go#L662 \nWhen hashed is set explicitly to false(eg: ?hashed=false) then currently the value will be considered as set to true. \nDoes it makes sense to support(considering other apis and their treatment of boolean query params) or is it by design?. @buger @dencoded @asoorm FYI\nPlease be aware of current simplified first ip lookup. \nDepending on number of ips in dns configs of end users and number of load it can be improved by round robin lookup with for old servers without keep-alive support.. It's required for unit tests. Please see this line for details - https://github.com/TykTechnologies/tyk/blob/feature/issue-495-Cache_DNS/reverse_proxy_test.go#L215 \nThough, I's a bad idea and I'll refactor it to Get/Set usage in a while. fixed 9fcb10959f7cc76e9815decfb07594a752631b22. By convention nilable DnsCache(cacheStorage) is used to check if the cache was initialized: \nThere's a time frame before the manager initializes it's cache(and therefore has an empty DnsCache), so in order to have ability to detect \"not yet initialized cache\" I use nil value cache. \n. My fault, hadn't get acquainted with this style. Fixed 765f86f77c2d5b5d1c013df2ca9455716b9241d7\nPS: also misinterpreted neighbor event_handler as the correct style :). Makes sense to optimize this part by:\n1. moving storage.HashKey(sessionKey) out of loop(see line#366)\n\n[optional]moving apply quota logic to separate helper func in order to unify handling of sessionKey-quota & access-rights-quota with next pseudo-go-code \ngo\nfunc applyQuota(quotaHandle interface{ ApplyQuota(int64) (int64, ?error) { \n    this.QuotaRemaining = ... // lines[371;377]\n    return this.QuotaRemaining, errorIfAny\n  } }, quotaStorageKey) error {\nvar usedQuota = ... //step1: get quotaFromStorage\nquotaHandle.AppyQuota(usedQuota) //step2: apply quota and return error\n}. Can you re-use already initialized session-key hash from line #337 ?. 1. Isn't the changing of global policy from global policiesByID map will mutate policy default value for the next request, is it?\nShouldn't there be default values for limitQuotaRemaining & limitQuotaRenews? It seems it can override current(which is default if I'm correct) values for policy. Or is it for synchronization with values fetched from redis before inside this block?\n\n@buger FYI\nFeel free to confirm or disprove. Reviewed. fixed 59c494e7175d0bdc4a8c2921e57036ae91e0255c. Fixed in cfa049a6ae9913e2e37595c927653b60a54ea53e. fixed in 2b38da5bf8eefb07a8d3b2d054944da0bada7ca0. The reason for this caching is the high dns query-rate for old servers that don't support keep-alived connections. \nAlso under the hood net#DefaultResolver is already checks for ip address-like hostname and returns them, without call to default dns server. \n. But occasionally there's a bug here with ipv4/ipv6 false positive caching, which I'll try to resolve... . Yes, it's just an alias. I've just encapsulated a resolve call for the case, when resolving logic will be more complex(eg: if ipv6 addresses will require some handling, etc)\n . I've thought, that WithFields arguments are just for adding the context for log message(as they're write at the beginning of log entry) and not the message's body, aren't they?\nAnd here I've try to omit context and fulfill(or better to say to reference-in-the-message-body) the message of log entry. \nAlso in past I've get familiar with searching such messages from Splunk using current format. \nShould I change it as you mentioned?. But also makes sense as to add it to DnsCacheManager::doCachedDial level in order to not to rely on core implementation, doesn't it?. Sounds right, but randomized MIGHT be balanced(nor it may not be) :) \nI've raised an issue regarding round robin on response array, but didn't get a response. \nShould I create a separate issue for that in order to simplify current implementation?\n . Agree, but \nmake sense to leave it, as it may be necessary to store some additional metadata with each dns record. eg: in case if dns caching will be configured on api level, then somewhere it may be usefull:\n1. to store the ttl(passed from api spec) as metadata in order to log debug info(though it's also stored on pmylund/go-cache level) \n2. to save per api \"is-round-robin-enabled-flag\" in order to determine in DnsCacheManager what item to return.\nAlso current cache is global, so 2 apis can prolong each other cache records, which isn't bad. . fixed in 2b38da5bf8eefb07a8d3b2d054944da0bada7ca0. It's used within reverse_proxy_test.go in order to reset cache state after test passed. \nFixed comment in 62dbfb28d0f64a742d71a219a74fe69fa74950e3. it can be used also outside of tests. Will reserve it for future usage if that isn't a problem.. fixed in a99c2a1b8f3b527d1c38e7c238e3d5f1184d0930. This function is also used in tests(see this test for details) and was the reason of test launch failure due to concurrent read from host_checker_manager.go(see raw logs of this travisCI build for details). . See this PR into https://github.com/TykTechnologies/redigocluster for fix\n@dencoded . They share the same suffix part - storage.HashKey(sessionKey), which can be initialized at the beginning once.. this is errorable fix \"due-to-angry-compiler errors.\nfixed in this c6b8ff63fddc6d28e601b172f7124a8371a0edab commit.\nthough some methods(which require storage.Handler arguments) are need to receive storage.RedisCluster as storage.Handler is the declared type of receivers method used for *storage.Handler \"covariate replacement\" . fixed in ffd6160262146fa76b1c9b8ddc9a76a9b85544c2. I treat error related to cache lookup as \"logical-warnings\" in the gateway proxying pipeline. The further call to d.DialContext will do another lookup with outer-provided address and in case of failure the request will fail.. fixed in 26a2f9125fcdc5fd4b0229554cd07f2c0e8b3a65. net.SplitHostPort simply fails when address without port passed, enhanced current implementation here 26a2f9125fcdc5fd4b0229554cd07f2c0e8b3a65\nUPDATE:\ndue to go's net package convention, address passed to DialContext always MUST contain host&port parts as it's (validated)[https://golang.org/src/net/ipsock.go?s=2940:4721#L248] inside DialContext func. Updated implementation & unit tests in e15a3aa3f041757580dfced75dc93a68f56b38ec. fixed in 26a2f9125fcdc5fd4b0229554cd07f2c0e8b3a65. fixed in 9e4c0c3bf7527ab7d265f25cedd89140fc452ad8. there could be cases, when cache will be reenabled after the call to dnsCacheManager.WrapDialer so preventing a wrap is incorrect and therefore it should be made always, but checked \"at runtime\". 1. because hard-coding it on package level doesn't allow it to be changed\n2. because some customers may require faster cache update(eg: due to more dynamic/often changed dns records) and therefore will need to remove this items from cache with the similar rate as TTL and by changing this value in configuration.. Why? \nWe'll break the balancer logic in that case. \nIn our case we'll always get a cached list and the connection will be established with the 1st list item/ip until cache for that record will expire and next dns server query return probably list with reordered elements. . fixed in 7f332e6a861e73fc8eb846e0e9aadd5f96fc724e. fixed in 7f332e6a861e73fc8eb846e0e9aadd5f96fc724e. @dencoded How about to allow to fail current dialer DialContext and simply to delegate the dialing to d.DialContext, which can eventually be successful. \nAdd it in in 7f332e6a861e73fc8eb846e0e9aadd5f96fc724e. fixed in 7f332e6a861e73fc8eb846e0e9aadd5f96fc724e. >it looks like it is just alias for net.LookupHost\nYes, exactly. But adding a method with self explaining name will help to understand net.LookupHost much quicker as in this context(DnsCacheStorage struct) net.LookupHost isn't obvious at glance.. fixed in 7f332e6. fixed in 7f332e6. So, the suggestion is: \na) to use cached ip only if there' exist 1 item for CNAME record and for >1' case - fallback to native dial usingnet.Dialer#DialContext(...address), which will [dialSerial](https://golang.org/src/net/dial.go#L406)\nb)add a tyk's round robin on cached ips if we want to archieve a balancing on cached records(and therefore not to hit 1st only from list)\nc) none of the above?. Yes, 2 calls are by design in order to provide additionalHA` of dns lookup as here we aren't limited by any timeouts(anyway if we're than that will be a rare case). There's a doc for this value, which we can improve or add more information in order to explain the purpose of this parameter:\ndns_cache.check_interval\nValid range: [-1;18446744073709551615]\nUnits: seconds\nDefault value: `0`\nThis setting allows to specify interval in seconds of expired records purging.\nSetting this value to `-1` prevents checks from being executed and therefore dns cache records from being removed.\nBut as exposing this value to configuration can be harmful, I've removed it from there and from docs. \nrelated commit - ed314a2894a5617e72fdd80971a45565dec91ec4. So are you suggesting to remove this extension point(by this I mean the ability to detect cache on/off in runtime) in order to make the code performant?\nHow about extensibility over performance or readability over performance? Is the performance the only and the main think to consider here?\nHow about the fact, that reverse_proxy.go requires some high-level code refactorings and updates firstly and then(secondly) updates regarding microoptimizations?\n@dencoded FYI. if len(ips) > 1 {\n  return safeDial(address, \"\")\n}\nThe problem with this approach is that it deny any caching as round robin requires direct requests to dns server. . But this PR is created to fix caching for some servers, which doesn't support keep-alive or do support it(@buger FYI) and close/decide to close it when tyk is initiating such connection or after it sends response to tyk. \nHere's the original issue for details: \nIn the case when upstream does not support keep-alive connections, DNS query will be made on each HTTP request, which makes the huge load on DNS server.\n. >not sure I follow here, what do you mean by CNAME? when we resolve hostname to addr we receive back IP, we don't know was it CNAME or A\nSorry, by this \n\nto use cached ip only if there' exist 1 item for CNAME record\n\nI meant \"to use cached ip only if there exist 1 ip after recursive dns resolution chain finishes\".. yeah, I've fixed it in this commit - 2dae7488979dcd54c6cd38f7fd26037d990905af .\nNow rand is lazyly initialized with the first access to randomStrategy handler. Current seed should be enought for the require level of randomness. . >I am a big fan of early returns like\n+1, :) \nLeft a check in order to prevent memory allocation for cases, when other strategies will be involved. \nWith requirements change it can removed though. \nCommit - b1aae61dc18bc7ec25ad0946c5adc341811ffb9d. @dencoded I think you missed some point:\n\nthat would guarantee that go or cgo (whatever set to be used) is making choice which\n\nIt won't, because it will have a list with 1 ip and this is the only ip which will be used for connection establishment(in other words - no additional dns request would take place). See sources: LookupIPAddr is called before connecting\n@buger FYI. ",
    "pawmart": "Installation is done via tykquickstart docker compose and setup.sh script. Everything is running locally on my Mac Book Pro machine.\nI have noticed, problem goes away when I target my proxy via 'localhost' instead of local domain name.\n/etc/hosts having 127.0.0.1 tyk-proxy.local\nSo, this is some sort of DNS resolution problem.. ",
    "bitsofinfo": "+1. We have the need in URL rewrites to simply match on anything in the full URI + query params. \nhttps://community.tyk.io/t/endpoint-query-string/1907/6. @peloncano @ewah. @nickReyn looks ok but wouldn't you need an ANY | ALL for the match behavior across MULTIPLE of those match conditions\ni.e \nqueryString[regex:.*] AND header[regex:Content-Type:xxdx]\nqueryString[regex:.*] OR header[regex:Content-Type:xxdx]\nThe UI is not clear on how this would work the way that match condition is presented, seems like it should be declared 1x on its own, and NOT \"per each row\"\n. yes read all that, but out of the box since docker 1.12+ \"swarm mode\" is the default clustering mech in docker https://docs.docker.com/engine/swarm/\nBy default all this information is stored in the swarm managers themselves and accessible via the services/networks/tasks APIs in docker. This is where the info is (not consul, etcd etc)\nlike this for example: https://github.com/bitsofinfo/hazelcast-docker-swarm-discovery-spi. good point yes, we could just have a static route that points to a LB that fronts all swarm nodes and it would do the same thing. any thoughts on this?. Will this be added at some point?. That would be great, but what about real os level environment vars that are defined (for example) on container start (such as via docker w -e var1=val1). Would those be accessible via this method? . But why limit to only those prefixed with TYK_CONTEXT_ ?. true, yeah as long as we can set it via an -e syntax (and not have to mess w/ tyk config file), then I can live w/ the prefix. Sounds good. @mvdan just want to confirm that this will support a fully nested/typed JSON element for config_data meaning complex object keys, ints, booleans, strings etc.. Any thoughts on this? Without this it makes for a lot of repetitive declarations when multiple verbs are allowed on certain endpoints. Any thoughts on when this could go into a release or where we should look to do a PR?. Note - if https://github.com/TykTechnologies/tyk/issues/1453 becomes workable/fixed, then this (albiet nice to have) would not be necessary.. Would be awesome if a fix could get in asap! thanks for looking at it. Can this please get into 2.3.8? Really need it. Still getting the duplication of $2. TYK_LOGLEVEL should be set where, as an ENV var for the docker container? for the gateway?. docker inspect shows\n\"Env\": [\n                \"TYK_LOGLEVEL=debug\",\n                \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n                \"PROTOVERSION=3.2.0\",\n                \"TYKVERSION=2.3.7\",\n                \"TYKLANG=\",\n                \"TYKLISTENPORT=8080\",\n                \"TYKSECRET=XXXXX\"\n            ],. Actually cancel, that, nothing more int he logs, the request goes to the backend its just that its wrong and duplicated. /_count/_count and I get a 404 as expected... but it should be _count only. Awesome, thanks guys. I'd be good with that! Right now I'm having to chain communication through multiple middleware steps in the \"PRE\" section via custom headers I am injecting on the request to convey state of the processing flow.. Note, this is possible via: https://github.com/TykTechnologies/tyk/issues/1517. yes not a huge deal but more of an annoyance. These should be case insensitive. @mvdan fyi, writing/reading headers in ALL_CAPS makes no difference, tyk still camel cases everything and you must force fetch camel-cased. Correct, but I've got a bunch of admins that are not developers who don't know/do REST! :). in addition to this: https://github.com/TykTechnologies/tyk/issues/961. I just have a scenario where I would like to \na) hash fast (embedding a hash func in JS is super slow compared to being able to access go's crypt libs)\nb) hash in the same method as however Tyk is doing so if enabled. can this please be fixed, constant useless noise in logs. Confirmed the workaround of listing the paths fixes it. . Note this error still exists: Couldn't create bundle directory: mkdir middleware/bundles/c9bd7307806b495c7a5971c72087f75f-my-bundle.zip\nI still need to manually go into the gateway and create that bundles directory.... No, we have to manually create it in order for the downloading to work. Is this fixed now? should this be closed via some commit int 2.3.10?. For more context, I need this because due to the inability to do versioning w/ my URIs I need to port to Tyk: https://github.com/TykTechnologies/tyk/issues/995\nMy goal is to whitelist certain URLs and HTTP methods, trying to do it this way doesn't fit my need (I could if I could use Tyks versioning, but can't do to #995): https://community.tyk.io/t/api-endpoint-designer-whitelisting-issue/1829/7?u=bitsofinfo\nSo I'd just like to write a middleware plugin where I can do my own http method restrictions.. Any ideas when this might be incorporated?. Host header? . For more context: https://community.tyk.io/t/api-endpoint-designer-whitelisting-issue/1829/7?u=bitsofinfo. K, then I'd suggest another flag arg to the TykMakeHttpRequest component to toggle this. Yes, however in the meantime, is there any other workaround to make this work?\n(i.e. despite @paltryeffort's addition of that cert per what @lonelycode suggested, the JSVM code we have still results in the original post's error mentioned at the top). this isn't going to work, the backends are more containers behind a LB, and the names of things are dynamic. When can this support for TykMakeHttpRequest to obey this be released in a patch?. Any update on when this might make it in?. +1\nBut also make it configurable for a subset of multiple API_IDs, like a grouping....but not necessarily blanket \"all\" coverage. below (with this conf, a GET to http://localhost:8080/my/endpoint/1.0?wsdl dumps that stack in the gateway logs)\ntyk.conf\n{\n    \"listen_port\": 8080,\n    \"secret\": \"352d20ee67be67f6340b4c0605b044b7\",\n    \"node_secret\": \"352d20ee67be67f6340b4c0605b044b7\",\n    \"template_path\": \"/opt/tyk-gateway/templates\",\n    \"tyk_js_path\": \"/opt/tyk-gateway/js/tyk.js\",\n    \"middleware_path\": \"/opt/tyk-gateway/middleware\",\n    \"use_db_app_configs\": true,\n    \"enable_custom_domains\": true,\n    \"db_app_conf_options\": {\n        \"connection_string\": \"http://tyk_dashboard:3000\",\n        \"node_is_segmented\": false,\n        \"tags\": [\"test2\"]\n    },\n    \"app_path\": \"/opt/tyk-gateway/apps/\",\n    \"storage\": {\n        \"type\": \"redis\",\n        \"host\": \"redis\",\n        \"port\": 6379,\n        \"username\": \"\",\n        \"password\": \"\",\n        \"database\": 0,\n        \"optimisation_max_idle\": 100\n    },\n    \"enable_jsvm\": true,\n    \"enable_analytics\": true,\n    \"analytics_config\": {\n        \"type\": \"mongo\",\n        \"csv_dir\": \"/tmp\",\n        \"mongo_url\": \"\",\n        \"mongo_db_name\": \"\",\n        \"mongo_collection\": \"\",\n        \"purge_delay\": -1,\n        \"ignored_ips\": []\n    },\n    \"health_check\": {\n        \"enable_health_checks\": true,\n        \"health_check_value_timeouts\": 60\n    },\n    \"optimisations_use_async_session_write\": true,\n    \"enable_non_transactional_rate_limiter\": true,\n    \"enable_sentinel_rate_limiter\": false,\n    \"allow_master_keys\": false,\n    \"policies\": {\n        \"policy_source\": \"service\",\n        \"policy_connection_string\": \"http://tyk_dashboard:3000\",\n        \"policy_record_name\": \"tyk_policies\"\n    },\n    \"hash_keys\": true,\n    \"close_connections\": true,\n    \"allow_insecure_configs\": true,\n     \"coprocess_options\": {\n        \"enable_coprocess\": true,\n        \"coprocess_grpc_server\": \"\"\n    },\n    \"enable_bundle_downloader\": true,\n    \"bundle_base_url\": \"http://192.168.3.189:8888/tyk/\",\n    \"global_session_lifetime\": 100,\n    \"force_global_session_lifetime\": false,\n    \"max_idle_connections_per_host\": 100,\n    \"local_session_cache\" : {\n          \"disable_cached_session_state\": true\n     },\n    \"proxy_ssl_insecure_skip_verify\":true\n}\nAPI conf\n{\n    \"id\": \"5994915c2d9623000150e269\",\n    \"name\": \"/my/endpoint/1.0\",\n    \"slug\": \"my/endpoint/10\",\n    \"api_id\": \"7ebc2adfd4e846656a6df67ed76209ab\",\n    \"org_id\": \"599490f92d962300014ef549\",\n    \"use_keyless\": false,\n    \"use_oauth2\": false,\n    \"use_openid\": false,\n    \"openid_options\": {\n        \"providers\": [],\n        \"segregate_by_client\": false\n    },\n    \"oauth_meta\": {\n        \"allowed_access_types\": [],\n        \"allowed_authorize_types\": [],\n        \"auth_login_redirect\": \"\"\n    },\n    \"auth\": {\n        \"use_param\": false,\n        \"param_name\": \"\",\n        \"use_cookie\": false,\n        \"cookie_name\": \"\",\n        \"auth_header_name\": \"x-internal-authorization\"\n    },\n    \"use_basic_auth\": false,\n    \"enable_jwt\": false,\n    \"use_standard_auth\": true,\n    \"enable_coprocess_auth\": false,\n    \"jwt_signing_method\": \"\",\n    \"jwt_source\": \"\",\n    \"jwt_identity_base_field\": \"\",\n    \"jwt_client_base_field\": \"\",\n    \"jwt_policy_field_name\": \"\",\n    \"notifications\": {\n        \"shared_secret\": \"\",\n        \"oauth_on_keychange_url\": \"\"\n    },\n    \"enable_signature_checking\": false,\n    \"hmac_allowed_clock_skew\": -1,\n    \"base_identity_provided_by\": \"\",\n    \"definition\": {\n        \"location\": \"header\",\n        \"key\": \"x-api-version\"\n    },\n    \"version_data\": {\n        \"not_versioned\": true,\n        \"versions\": {\n            \"Default\": {\n                \"name\": \"Default\",\n                \"expires\": \"\",\n                \"paths\": {\n                    \"ignored\": [],\n                    \"white_list\": [],\n                    \"black_list\": []\n                },\n                \"use_extended_paths\": true,\n                \"extended_paths\": {\n                    \"white_list\": [\n                        {\n                            \"path\": \"?wsdl\",\n                            \"method_actions\": {\n                                \"GET\": {\n                                    \"action\": \"no_action\",\n                                    \"code\": 200,\n                                    \"data\": \"\",\n                                    \"headers\": {}\n                                }\n                            }\n                        },\n                        {\n                            \"path\": \"/.*\",\n                            \"method_actions\": {\n                                \"POST\": {\n                                    \"action\": \"no_action\",\n                                    \"code\": 200,\n                                    \"data\": \"\",\n                                    \"headers\": {}\n                                }\n                            }\n                        }\n                    ]\n                },\n                \"global_headers\": {},\n                \"global_headers_remove\": [],\n                \"global_size_limit\": 0,\n                \"override_target\": \"\"\n            }\n        }\n    },\n    \"uptime_tests\": {\n        \"check_list\": [],\n        \"config\": {\n            \"expire_utime_after\": 0,\n            \"service_discovery\": {\n                \"use_discovery_service\": false,\n                \"query_endpoint\": \"\",\n                \"use_nested_query\": false,\n                \"parent_data_path\": \"\",\n                \"data_path\": \"\",\n                \"port_data_path\": \"\",\n                \"target_path\": \"\",\n                \"use_target_list\": false,\n                \"cache_timeout\": 60,\n                \"endpoint_returns_list\": false\n            },\n            \"recheck_wait\": 0\n        }\n    },\n    \"proxy\": {\n        \"preserve_host_header\": false,\n        \"listen_path\": \"/my/endpoint/1.0\",\n        \"target_url\": \"http://192.168.0.230:9080/my/service\",\n        \"strip_listen_path\": true,\n        \"enable_load_balancing\": false,\n        \"target_list\": [],\n        \"check_host_against_uptime_tests\": false,\n        \"service_discovery\": {\n            \"use_discovery_service\": false,\n            \"query_endpoint\": \"\",\n            \"use_nested_query\": false,\n            \"parent_data_path\": \"\",\n            \"data_path\": \"hostname\",\n            \"port_data_path\": \"port\",\n            \"target_path\": \"/api-slug\",\n            \"use_target_list\": false,\n            \"cache_timeout\": 60,\n            \"endpoint_returns_list\": false\n        }\n    },\n    \"disable_rate_limit\": false,\n    \"disable_quota\": false,\n    \"custom_middleware\": {\n        \"pre\": [],\n        \"post\": [],\n        \"post_key_auth\": [],\n        \"auth_check\": {\n            \"name\": \"\",\n            \"path\": \"\",\n            \"require_session\": false\n        },\n        \"response\": [],\n        \"driver\": \"\",\n        \"id_extractor\": {\n            \"extract_from\": \"\",\n            \"extract_with\": \"\",\n            \"extractor_config\": {}\n        }\n    },\n    \"custom_middleware_bundle\": \"my-bundle.zip\",\n    \"cache_options\": {\n        \"cache_timeout\": 60,\n        \"enable_cache\": true,\n        \"cache_all_safe_requests\": false,\n        \"cache_response_codes\": [],\n        \"enable_upstream_cache_control\": false\n    },\n    \"session_lifetime\": 0,\n    \"active\": true,\n    \"auth_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"session_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": null\n    },\n    \"event_handlers\": {\n        \"events\": {}\n    },\n    \"enable_batch_request_support\": false,\n    \"enable_ip_whitelisting\": false,\n    \"allowed_ips\": [],\n    \"dont_set_quota_on_create\": false,\n    \"expire_analytics_after\": 0,\n    \"response_processors\": [],\n    \"CORS\": {\n        \"enable\": false,\n        \"allowed_origins\": [],\n        \"allowed_methods\": [],\n        \"allowed_headers\": [],\n        \"exposed_headers\": [],\n        \"allow_credentials\": false,\n        \"max_age\": 24,\n        \"options_passthrough\": false,\n        \"debug\": false\n    },\n    \"domain\": \"\",\n    \"do_not_track\": false,\n    \"tags\": [],\n    \"enable_context_vars\": false,\n    \"config_data\": {\n    }\n}\n. So is this restriction for a particular reason or side effect of an underlying lib?. K, was looking in the release notes and didn't see this linked. Just pulled the 1.3.8/2.3.8, running a hybrid container and still seeing the '.' being stripped from the slugs. We are logged into the tyk.io dashboard for our hybrid test account and seeing this still being stripped.\ni.e. we put in for slug test/15.7/dog update and saves slug of test/157/dog. cloud is fixed, thanks!\n. Please merge! :). duh, late night :). It appears this support was added? in #1042, the docs however don't see to reflect it. \nhttps://tyk.io/docs/customise-tyk/plugins/javascript-middleware/middleware-scripting-guide/\n. #1556. continued: \n```\ngoroutine 1537 [IO wait, 2 minutes]:\nnet.runtime_pollWait(0x7f1a5dceeb30, 0x72, 0x2f)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420409728, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420409728, 0xc420aec000, 0x2000)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc4204096c0, 0xc420aec000, 0x2000, 0x2000, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc4201241d8, 0xc420aec000, 0x2000, 0x2000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc4209a8030, 0x7f1a5dce0a58, 0xc4201241d8, 0x5, 0xc4201241d8, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209b8700, 0xe9a817, 0xc4209b8820, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209b8700, 0xc42122a000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc42033a0a0, 0xc42122a000, 0x10000, 0x10000, 0x0, 0xc420d75b20, 0xc420d75ac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc420a94960)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc420a94960, 0xc42067ca58, 0xcf9300, 0xc42067ca58)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc420a56600, 0xc9b7c0, 0xc447965c68)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc420a56600)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc420a56600, 0xc42126a000, 0x10000, 0x10000, 0xc420d75c00, 0x40292e, 0xc420d75c38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc420a949c0, 0xc4208a40f0, 0x1, 0x9, 0x0, 0xc420d75ca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc420a949c0, 0xc4208a40f0, 0x1, 0x9, 0x1, 0xc420d75d80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc420a949c0, 0xc4208a40f0, 0x1, 0x9, 0xc4205da680, 0x3, 0x11)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc420a949c0, 0xc4208a40f0, 0x9, 0x9, 0xc420d75dc8, 0x42b09e, 0xc400000008, 0xc4209a4880)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420696280, 0xc420d75dd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420696280, 0xe9a800, 0xc420696280)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420696280, 0xc9b900, 0xc42067ca50, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420696280, 0xc9b900, 0xc42067ca50, 0x1414760, 0x1516543)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc42033a100, 0xc9b900, 0xc42067ca50, 0x1516543, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209b8700, 0xc42067c840, 0xc4208a4068, 0xc420a948a0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1536 [select, 2 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientWriter(0xc420612000, 0x7f1a5d4a5e60, 0xc4209b8700, 0xc42067c840, 0xc4208a4068, 0xc420a94780, 0xc420a94840)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:613 +0x8bb\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:560 +0x213\ngoroutine 253973 [chan receive, 5713 minutes]:\nmain.loadApps.func2(0xc425556060, 0xc435876780, 0x1e, 0x1e)\n    /src/github.com/TykTechnologies/tyk/api_loader.go:656 +0x4e\ncreated by main.loadApps\n    /src/github.com/TykTechnologies/tyk/api_loader.go:659 +0x562\ngoroutine 1623 [IO wait]:\nnet.runtime_pollWait(0x7f1a5e522620, 0x72, 0x12)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420409098, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420409098, 0xc4209b7800, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc420409030, 0xc4209b7800, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc42013e340, 0xc4209b7800, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc420609410, 0x7f1a5dce0a58, 0xc42013e340, 0x5, 0xc42013e340, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209ba700, 0xe9a817, 0xc4209ba820, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209ba700, 0xc42224a000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc420b9a060, 0xc42224a000, 0x10000, 0x10000, 0x0, 0xc420561b20, 0xc420561ac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc420a94de0)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc420a94de0, 0xc42067c638, 0xcf9300, 0xc42067c638)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc420a4a000, 0xc9b7c0, 0xc4320eab68)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc420a4a000)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc420a4a000, 0xc42227c000, 0x10000, 0x10000, 0xc420561c00, 0x40292e, 0xc420561c38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc420a94e40, 0xc4206b0060, 0x1, 0x9, 0x0, 0xc420561ca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc420a94e40, 0xc4206b0060, 0x1, 0x9, 0x1, 0xc420561d80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc420a94e40, 0xc4206b0060, 0x1, 0x9, 0xc4205db380, 0x3, 0x12)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc420a94e40, 0xc4206b0060, 0x9, 0x9, 0xc420561dc8, 0x42b09e, 0xc400000008, 0xc420b51680)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420696c80, 0xc420561dd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420696c80, 0xe9a800, 0xc420696c80)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420696c80, 0xc9b900, 0xc42067c630, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420696c80, 0xc9b900, 0xc42067c630, 0x1414760, 0x5caf7b)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc420b9a080, 0xc9b900, 0xc42067c630, 0x5caf7b, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209ba700, 0xc42067c330, 0xc4206b0030, 0xc420a94d80)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1183 [select, 5735 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection(0xc420612000, 0x133a8e0, 0xc4209b4e00)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:565 +0x7cb\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandler(0xc420612000)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:528 +0x224\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*Client).Start\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:154 +0x181\ngoroutine 1184 [select, 5735 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection(0xc420612000, 0x133a8e0, 0xc4209d6700)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:565 +0x7cb\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandler(0xc420612000)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:528 +0x224\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*Client).Start\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:154 +0x181\ngoroutine 1185 [select, 5735 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection(0xc420612000, 0x133a8e0, 0xc4209fa000)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:565 +0x7cb\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandler(0xc420612000)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:528 +0x224\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*Client).Start\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:154 +0x181\ngoroutine 1132 [chan send]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Loop(0xc420294b70)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:61 +0x1b6\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny.(workerWrapper).Open\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/jeffail/tunny/worker.go:80 +0x122\ngoroutine 1186 [select, 5735 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection(0xc420612000, 0x133a8e0, 0xc4209f2380)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:565 +0x7cb\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandler(0xc420612000)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:528 +0x224\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*Client).Start\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:154 +0x181\ngoroutine 1676 [IO wait, 2 minutes]:\nnet.runtime_pollWait(0x7f1a5dcee170, 0x72, 0x3c)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420051798, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420051798, 0xc420a05400, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc420051730, 0xc420a05400, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc4209ae058, 0xc420a05400, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc420937950, 0x7f1a5dce0a58, 0xc4209ae058, 0x5, 0xc4209ae058, 0xc42cf897f0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209d7c00, 0xe9a817, 0xc4209d7d20, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209d7c00, 0xc425074000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc420317b00, 0xc425074000, 0x10000, 0x10000, 0x0, 0xc42cf89b20, 0xc42cf89ac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc420655080)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc420655080, 0xc420bb1ec8, 0xcf9300, 0xc420bb1ec8)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc425094000, 0xc9b7c0, 0xc4520970f0)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc425094000)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc425094000, 0xc425164000, 0x10000, 0x10000, 0xc42cf89c00, 0x40292e, 0xc42cf89c38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc4206551a0, 0xc4208de7b0, 0x1, 0x9, 0x0, 0xc42cf89ca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc4206551a0, 0xc4208de7b0, 0x1, 0x9, 0x1, 0xc42cf89d80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc4206551a0, 0xc4208de7b0, 0x1, 0x9, 0xc4205e4000, 0x3, 0x10)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc4206551a0, 0xc4208de7b0, 0x9, 0x9, 0xc42cf89dc8, 0x42b09e, 0xc400000008, 0xc42092f9c0)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420925c80, 0xc42cf89dd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420925c80, 0xe9a800, 0xc420925c80)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420925c80, 0xc9b900, 0xc420bb1ec0, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420925c80, 0xc9b900, 0xc420bb1ec0, 0x1414760, 0x2546c154a)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc420317b20, 0xc9b900, 0xc420bb1ec0, 0x2546c154a, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209d7c00, 0xc420bb1dd0, 0xc4208de780, 0xc420655020)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1644 [IO wait, 2 minutes]:\nnet.runtime_pollWait(0x7f1a5dcee3b0, 0x72, 0x39)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420051728, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420051728, 0xc4209c9c00, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc4200516c0, 0xc4209c9c00, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc42000e378, 0xc4209c9c00, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc4209a8780, 0x7f1a5dce0a58, 0xc42000e378, 0x5, 0xc42000e378, 0xc42b1357f0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209b5180, 0xe9a817, 0xc4209b52a0, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209b5180, 0xc42505c000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc420324ec0, 0xc42505c000, 0x10000, 0x10000, 0x0, 0xc42b135b20, 0xc42b135ac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc420657380)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc420657380, 0xc42068b958, 0xcf9300, 0xc42068b958)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc423e3ec00, 0xc9b7c0, 0xc44cce7008)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc423e3ec00)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc423e3ec00, 0xc425084000, 0x10000, 0x10000, 0xc42b135c00, 0x40292e, 0xc42b135c38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc4206573e0, 0xc4208da660, 0x1, 0x9, 0x0, 0xc42b135ca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc4206573e0, 0xc4208da660, 0x1, 0x9, 0x1, 0xc42b135d80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc4206573e0, 0xc4208da660, 0x1, 0x9, 0xc4205e41a0, 0x3, 0x11)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc4206573e0, 0xc4208da660, 0x9, 0x9, 0xc42b135dc8, 0x42b09e, 0xc400000008, 0xc4209a4740)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420c9d680, 0xc42b135dd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420c9d680, 0xe9a800, 0xc420c9d680)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420c9d680, 0xc9b900, 0xc42068b950, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420c9d680, 0xc9b900, 0xc42068b950, 0x1414760, 0x588a1c)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc420324f20, 0xc9b900, 0xc42068b950, 0x588a1c, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209b5180, 0xc42068b740, 0xc4208da630, 0xc4206572c0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1164 [select, 5735 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection(0xc420612000, 0x133a8e0, 0xc4209fa380)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:565 +0x7cb\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandler(0xc420612000)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:528 +0x224\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*Client).Start\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:154 +0x181\ngoroutine 3075 [sleep]:\ntime.Sleep(0x2540be400)\n    /usr/local/go/src/runtime/time.go:59 +0xf9\nmain.RPCKeepAliveCheck(0xc428e0a0c0)\n    /src/github.com/TykTechnologies/tyk/rpc_storage_handler.go:108 +0x26d\nmain.StartRPCKeepaliveWatcher.func1(0xc428e0a0c0)\n    /src/github.com/TykTechnologies/tyk/main.go:1032 +0x1e7\ncreated by main.StartRPCKeepaliveWatcher\n    /src/github.com/TykTechnologies/tyk/main.go:1048 +0x54\ngoroutine 32491817 [select, 1782 minutes]:\nnet/http.(persistConn).writeLoop(0xc43c507d40)\n    /usr/local/go/src/net/http/transport.go:1704 +0x43a\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1118 +0xa5a\ngoroutine 1660 [select]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientWriter(0xc420612000, 0x7f1a5d4a5e60, 0xc4209fa380, 0xc420670f00, 0xc4206b0738, 0xc4205479e0, 0xc420547a40)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:613 +0x8bb\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:560 +0x213\ngoroutine 281800 [select, 5711 minutes]:\nnet/http.(persistConn).writeLoop(0xc4375987e0)\n    /usr/local/go/src/net/http/transport.go:1704 +0x43a\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1118 +0xa5a\ngoroutine 780 [chan send, 5735 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/redigocluster/rediscluster.ConcurrentMap.Iter.func1.1(0xc42014a540, 0xc420454200, 0xc4202d8b20)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/redigocluster/rediscluster/concurrent_map.go:175 +0x10b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/redigocluster/rediscluster.ConcurrentMap.Iter.func1\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/redigocluster/rediscluster/concurrent_map.go:179 +0x9d\ngoroutine 1182 [select, 5735 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection(0xc420612000, 0x133a8e0, 0xc4209d6000)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:565 +0x7cb\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandler(0xc420612000)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:528 +0x224\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*Client).Start\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:154 +0x181\ngoroutine 7578 [select, 2 minutes]:\nnet/http.(persistConn).writeLoop(0xc42987ad80)\n    /usr/local/go/src/net/http/transport.go:1704 +0x43a\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1118 +0xa5a\ngoroutine 2989 [select, 5735 minutes]:\nnet/http.(persistConn).readLoop(0xc428eca7e0)\n    /usr/local/go/src/net/http/transport.go:1599 +0x9ec\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1117 +0xa35\ngoroutine 659 [chan send, 5735 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/redigocluster/rediscluster.ConcurrentMap.Iter.func1.1(0xc4204001e0, 0xc420306150, 0xc420459240)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/redigocluster/rediscluster/concurrent_map.go:175 +0x10b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/redigocluster/rediscluster.ConcurrentMap.Iter.func1\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/redigocluster/rediscluster/concurrent_map.go:179 +0x9d\ngoroutine 11797849 [select]:\nnet/http.(persistConn).writeLoop(0xc43c0330e0)\n    /usr/local/go/src/net/http/transport.go:1704 +0x43a\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1118 +0xa5a\ngoroutine 3056 [select, 5735 minutes, locked to thread]:\nruntime.gopark(0xe9a7c0, 0x0, 0xe11d56, 0x6, 0x18, 0x2)\n    /usr/local/go/src/runtime/proc.go:271 +0x13a\nruntime.selectgoImpl(0xc420248750, 0x0, 0x18)\n    /usr/local/go/src/runtime/select.go:423 +0x1364\nruntime.selectgo(0xc420248750)\n    /usr/local/go/src/runtime/select.go:238 +0x1c\nruntime.ensureSigM.func1()\n    /usr/local/go/src/runtime/signal_unix.go:434 +0x2dd\nruntime.goexit()\n    /usr/local/go/src/runtime/asm_amd64.s:2197 +0x1\ngoroutine 1610 [runnable]:\nfmt.(pp).printArg(0xc452bf0900, 0xcc8880, 0xc435408488, 0x64)\n    /usr/local/go/src/fmt/print.go:604 +0xa37\nfmt.(pp).doPrintf(0xc452bf0900, 0xe42b77, 0x55, 0xc42106d9f0, 0x4, 0x4)\n    /usr/local/go/src/fmt/print.go:998 +0x11e7\nfmt.Sprintf(0xe42b77, 0x55, 0xc42106d9f0, 0x4, 0x4, 0xc459f467b0, 0x29)\n    /usr/local/go/src/fmt/print.go:196 +0x6a\ngithub.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/drl.(DRL).Report(0xc42055fbc0, 0xc435408460, 0xc)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/TykTechnologies/drl/drl.go:160 +0x1b9\nmain.OnServerStatusReceivedHandler(0xc453337400, 0x77)\n    /src/github.com/TykTechnologies/tyk/distributed_rate_limiter.go:93 +0x492\nmain.HandleRedisMsg(0xc4368af700, 0x19, 0xc44e513520, 0xcd, 0xcd)\n    /src/github.com/TykTechnologies/tyk/redis_signals.go:77 +0x347\nmain.(RedisClusterStorageManager).StartPubSubHandler(0xc424a38fb8, 0xe26a5a, 0x19, 0xe99e70, 0xc420454200, 0xffffffffffffffff)\n    /src/github.com/TykTechnologies/tyk/redis_cluster_handler.go:542 +0x36c\nmain.StartPubSubLoop()\n    /src/github.com/TykTechnologies/tyk/redis_signals.go:21 +0x94\ncreated by main.start\n    /src/github.com/TykTechnologies/tyk/main.go:1213 +0x3db\ngoroutine 1609 [chan receive, 5735 minutes]:\nmain.(RPCStorageHandler).checkDisconnect(0xc42055e1e0)\n    /src/github.com/TykTechnologies/tyk/rpc_storage_handler.go:143 +0x52\ncreated by main.(RPCStorageHandler).Connect\n    /src/github.com/TykTechnologies/tyk/rpc_storage_handler.go:233 +0x2e5\ngoroutine 1638 [IO wait]:\nnet.runtime_pollWait(0x7f1a5dcedf30, 0x72, 0x3f)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc4200518e8, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc4200518e8, 0xc420d28000, 0x2000)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc420051880, 0xc420d28000, 0x2000, 0x2000, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc42013e390, 0xc420d28000, 0x2000, 0x2000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc42086a030, 0x7f1a5dce0a58, 0xc42013e390, 0x5, 0xc42013e390, 0xc42d0ad7f0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209bb500, 0xe9a817, 0xc4209bb620, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209bb500, 0xc424006000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc4203247a0, 0xc424006000, 0x10000, 0x10000, 0x0, 0xc42d0adb20, 0xc42d0adac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc420656660)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc420656660, 0xc42068b178, 0xcf9300, 0xc42068b178)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc423e3b300, 0xc9b7c0, 0xc431d32a08)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc423e3b300)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc423e3b300, 0xc424110000, 0x10000, 0x10000, 0xc42d0adc00, 0x40292e, 0xc42d0adc38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc4206566c0, 0xc4208da440, 0x1, 0x9, 0x0, 0xc42d0adca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc4206566c0, 0xc4208da440, 0x1, 0x9, 0x1, 0xc42d0add80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc4206566c0, 0xc4208da440, 0x1, 0x9, 0xc4205fa4e0, 0x3, 0x14)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc4206566c0, 0xc4208da440, 0x9, 0x9, 0xc42d0addc8, 0x42b09e, 0xc400000008, 0xc420972c80)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420697a80, 0xc42d0addd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420697a80, 0xe9a800, 0xc420697a80)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420697a80, 0xc9b900, 0xc42068b170, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420697a80, 0xc9b900, 0xc42068b170, 0x1414760, 0x25471075b)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc4203247c0, 0xc9b900, 0xc42068b170, 0x25471075b, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209bb500, 0xc42068af60, 0xc4208da418, 0xc420656540)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 638 [chan send, 5735 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/redigocluster/rediscluster.ConcurrentMap.Iter.func1.1(0xc4204001e0, 0xc420306150, 0xc420458e60)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/redigocluster/rediscluster/concurrent_map.go:175 +0x10b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/redigocluster/rediscluster.ConcurrentMap.Iter.func1\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/redigocluster/rediscluster/concurrent_map.go:179 +0x9d\ngoroutine 1576 [IO wait]:\nnet.runtime_pollWait(0x7f1a5dcecdf0, 0x72, 0x2c)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420228e68, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420228e68, 0xc4209b7000, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc420228e00, 0xc4209b7000, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc42013e338, 0xc4209b7000, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc420609320, 0x7f1a5dce0a58, 0xc42013e338, 0x5, 0xc42013e338, 0xc42ab5d7f0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209ba380, 0xe9a817, 0xc4209ba4a0, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209ba380, 0xc421dde000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc4203160c0, 0xc421dde000, 0x10000, 0x10000, 0x0, 0xc42ab5db20, 0xc42ab5dac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc42055e6c0)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc42055e6c0, 0xc420bb0248, 0xcf9300, 0xc420bb0248)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc420da9300, 0xc9b7c0, 0xc44c89ccc0)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc420da9300)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc420da9300, 0xc421dee000, 0x10000, 0x10000, 0xc42ab5dc00, 0x40292e, 0xc42ab5dc38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc42055e720, 0xc4208de0b0, 0x1, 0x9, 0x0, 0xc42ab5dca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc42055e720, 0xc4208de0b0, 0x1, 0x9, 0x1, 0xc42ab5dd80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc42055e720, 0xc4208de0b0, 0x1, 0x9, 0xc4205fb040, 0x3, 0x15)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc42055e720, 0xc4208de0b0, 0x9, 0x9, 0xc42ab5ddc8, 0x42b09e, 0xc400000008, 0xc420972700)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420c9c100, 0xc42ab5ddd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420c9c100, 0xe9a800, 0xc420c9c100)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420c9c100, 0xc9b900, 0xc420bb0240, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420c9c100, 0xc9b900, 0xc420bb0240, 0x1414760, 0x953d63)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc420316100, 0xc9b900, 0xc420bb0240, 0x953d63, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209ba380, 0xc420bb0120, 0xc4208de070, 0xc42055e5a0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1634 [IO wait, 2 minutes]:\nnet.runtime_pollWait(0x7f1a5dcecf70, 0x72, 0x2a)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420228d88, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420228d88, 0xc4209f0c00, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc420228d20, 0xc4209f0c00, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc4209ae030, 0xc4209f0c00, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc4209374a0, 0x7f1a5dce0a58, 0xc4209ae030, 0x5, 0xc4209ae030, 0xc42bcf37f0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209d6a80, 0xe9a817, 0xc4209d6ba0, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209d6a80, 0xc422f62000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc420317020, 0xc422f62000, 0x10000, 0x10000, 0x0, 0xc42bcf3b20, 0xc42bcf3ac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc42092c2a0)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc42092c2a0, 0xc420bb0ed8, 0xcf9300, 0xc420bb0ed8)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc422aab300, 0xc9b7c0, 0xc44cce7060)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc422aab300)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc422aab300, 0xc422f7a000, 0x10000, 0x10000, 0xc42bcf3c00, 0x40292e, 0xc42bcf3c38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc42091a060, 0xc4208de430, 0x1, 0x9, 0x0, 0xc42bcf3ca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc42091a060, 0xc4208de430, 0x1, 0x9, 0x1, 0xc42bcf3d80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc42091a060, 0xc4208de430, 0x1, 0x9, 0xc4205fb1e0, 0x3, 0x10)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc42091a060, 0xc4208de430, 0x9, 0x9, 0xc42bcf3dc8, 0x42b09e, 0xc400000008, 0xc42092f4c0)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420c9cf00, 0xc42bcf3dd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420c9cf00, 0xe9a800, 0xc420c9cf00)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420c9cf00, 0xc9b900, 0xc420bb0ed0, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420c9cf00, 0xc9b900, 0xc420bb0ed0, 0x1414760, 0x254acbcb6)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc420317040, 0xc9b900, 0xc420bb0ed0, 0x254acbcb6, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209d6a80, 0xc420bb0e10, 0xc4208de408, 0xc42092c1e0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1640 [IO wait]:\nnet.runtime_pollWait(0x7f1a5dced0f0, 0x72, 0x28)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420228d18, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420228d18, 0xc4209e7800, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc420228cb0, 0xc4209e7800, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc42013e3b8, 0xc4209e7800, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc420609bf0, 0x7f1a5dce0a58, 0xc42013e3b8, 0x5, 0xc42013e3b8, 0xc42b24d7f0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209f2380, 0xe9a817, 0xc4209f24a0, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209f2380, 0xc4242fe000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc4203248e0, 0xc4242fe000, 0x10000, 0x10000, 0x0, 0xc42b24db20, 0xc42b24dac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc420656960)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc420656960, 0xc42068b2f8, 0xcf9300, 0xc42068b2f8)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc423e3c600, 0xc9b7c0, 0xc431d322e8)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc423e3c600)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc423e3c600, 0xc4243c8000, 0x10000, 0x10000, 0xc42b24dc00, 0x40292e, 0xc42b24dc38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc420656a20, 0xc4208da4d0, 0x1, 0x9, 0x0, 0xc42b24dca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc420656a20, 0xc4208da4d0, 0x1, 0x9, 0x1, 0xc42b24dd80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc420656a20, 0xc4208da4d0, 0x1, 0x9, 0xc4205fb380, 0x3, 0xf)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc420656a20, 0xc4208da4d0, 0x9, 0x9, 0xc42b24ddc8, 0x42b09e, 0xc400000008, 0xc420973080)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420c9c280, 0xc42b24ddd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420c9c280, 0xe9a800, 0xc420c9c280)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420c9c280, 0xc9b900, 0xc42068b2f0, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420c9c280, 0xc9b900, 0xc42068b2f0, 0x1414760, 0x9eedf3)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc420324940, 0xc9b900, 0xc42068b2f0, 0x9eedf3, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209f2380, 0xc42068b230, 0xc4208da4a0, 0xc420656900)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1646 [IO wait, 2 minutes]:\nnet.runtime_pollWait(0x7f1a5dced270, 0x72, 0x26)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420228c38, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420228c38, 0xc420724000, 0x2000)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc420228bd0, 0xc420724000, 0x2000, 0x2000, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc4209ae068, 0xc420724000, 0x2000, 0x2000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc420929980, 0x7f1a5dce0a58, 0xc4209ae068, 0x5, 0xc4209ae068, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc420a0c380, 0xe9a817, 0xc420a0c4a0, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc420a0c380, 0xc421052000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc4203166e0, 0xc421052000, 0x10000, 0x10000, 0x0, 0xc420a19b20, 0xc420a19ac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc42055f0e0)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc42055f0e0, 0xc42067d0b8, 0xcf9300, 0xc42067d0b8)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc425095300, 0xc9b7c0, 0xc455faf2a8)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc425095300)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc425095300, 0xc42533a000, 0x10000, 0x10000, 0xc420a19c00, 0x40292e, 0xc420a19c38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc42055f140, 0xc4208de330, 0x1, 0x9, 0x0, 0xc420a19ca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc42055f140, 0xc4208de330, 0x1, 0x9, 0x1, 0xc420a19d80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc42055f140, 0xc4208de330, 0x1, 0x9, 0xc4205fb520, 0x3, 0x16)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc42055f140, 0xc4208de330, 0x9, 0x9, 0xc420a19dc8, 0x42b09e, 0xc400000008, 0xc42092fbc0)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420990d80, 0xc420a19dd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420990d80, 0xe9a800, 0xc420990d80)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420990d80, 0xc9b900, 0xc42067d0b0, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420990d80, 0xc9b900, 0xc42067d0b0, 0x1414760, 0x52b579)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc420316720, 0xc9b900, 0xc42067d0b0, 0x52b579, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc420a0c380, 0xc42067ce40, 0xc4208de260, 0xc42055ef60)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1567 [select, 2 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientWriter(0xc420612000, 0x7f1a5d4a5e60, 0xc42007ce00, 0xc42067c3c0, 0xc4208a4218, 0xc420a95a40, 0xc420a95b00)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:613 +0x8bb\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:560 +0x213\ngoroutine 1607 [select, 2 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientWriter(0xc420612000, 0x7f1a5d4a5e60, 0xc4209b8380, 0xc42068ad80, 0xc4208da218, 0xc420828e40, 0xc420828ea0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:613 +0x8bb\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:560 +0x213\ngoroutine 1578 [IO wait]:\nnet.runtime_pollWait(0x7f1a5dced3f0, 0x72, 0x24)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420228bc8, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420228bc8, 0xc4209b0400, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc420228b60, 0xc4209b0400, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc4209ae000, 0xc4209b0400, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc420936f90, 0x7f1a5dce0a58, 0xc4209ae000, 0x5, 0xc4209ae000, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4203c3880, 0xe9a817, 0xc4203c39a0, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4203c3880, 0xc422108000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc420316220, 0xc422108000, 0x10000, 0x10000, 0x0, 0xc429da7b20, 0xc429da7ac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc42055eb40)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc42055eb40, 0xc420bb03f8, 0xcf9300, 0xc420bb03f8)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc420daa600, 0xc9b7c0, 0xc44c89ccb8)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc420daa600)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc420daa600, 0xc422118000, 0x10000, 0x10000, 0xc429da7c00, 0x40292e, 0xc429da7c38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc42055eba0, 0xc4208de120, 0x1, 0x9, 0x0, 0xc429da7ca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc42055eba0, 0xc4208de120, 0x1, 0x9, 0x1, 0xc429da7d80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc42055eba0, 0xc4208de120, 0x1, 0x9, 0xc4205fba00, 0x3, 0x15)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc42055eba0, 0xc4208de120, 0x9, 0x9, 0xc429da7dc8, 0x42b09e, 0xc400000008, 0xc42092ec80)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420c9c380, 0xc429da7dd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420c9c380, 0xe9a800, 0xc420c9c380)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420c9c380, 0xc9b900, 0xc420bb03f0, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420c9c380, 0xc9b900, 0xc420bb03f0, 0x1414760, 0xa68e5e)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc420316280, 0xc9b900, 0xc420bb03f0, 0xa68e5e, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4203c3880, 0xc420bb0330, 0xc4208de0d8, 0xc42055eae0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 955 [chan send, 5735 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/redigocluster/rediscluster.ConcurrentMap.Iter.func1.1(0xc4204001e0, 0xc420306150, 0xc420308bc0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/redigocluster/rediscluster/concurrent_map.go:175 +0x10b\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/redigocluster/rediscluster.ConcurrentMap.Iter.func1\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/redigocluster/rediscluster/concurrent_map.go:179 +0x9d\ngoroutine 1608 [IO wait, 2 minutes]:\nnet.runtime_pollWait(0x7f1a5dced570, 0x72, 0x22)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420228b58, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420228b58, 0xc4209c6c00, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc420228af0, 0xc4209c6c00, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc4201241d0, 0xc4209c6c00, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc4209a2a20, 0x7f1a5dce0a58, 0xc4201241d0, 0x5, 0xc4201241d0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209b8380, 0xe9a817, 0xc4209b84a0, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209b8380, 0xc421b36000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc420316e40, 0xc421b36000, 0x10000, 0x10000, 0x0, 0xc428ea1b20, 0xc428ea1ac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc420828fc0)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc420828fc0, 0xc42068a1e8, 0xcf9300, 0xc42068a1e8)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc420ea2c00, 0xc9b7c0, 0xc45a9b9da0)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc420ea2c00)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc420ea2c00, 0xc421b46000, 0x10000, 0x10000, 0xc428ea1c00, 0x40292e, 0xc428ea1c38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc420828060, 0xc4208da000, 0x1, 0x9, 0x0, 0xc428ea1ca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc420828060, 0xc4208da000, 0x1, 0x9, 0x1, 0xc428ea1d80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc420828060, 0xc4208da000, 0x1, 0x9, 0xc4205fbd40, 0x3, 0x13)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc420828060, 0xc4208da000, 0x9, 0x9, 0xc428ea1dc8, 0x42b09e, 0xc400000008, 0xc43c8768c0)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420990000, 0xc428ea1dd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420990000, 0xe9a800, 0xc420990000)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420990000, 0xc9b900, 0xc42068a1e0, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420990000, 0xc9b900, 0xc42068a1e0, 0x1414760, 0x130673c)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc420324020, 0xc9b900, 0xc42068a1e0, 0x130673c, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209b8380, 0xc42068ad80, 0xc4208da218, 0xc420828f00)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1580 [IO wait]:\nnet.runtime_pollWait(0x7f1a5dced6f0, 0x72, 0x20)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420228ae8, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420228ae8, 0xc4209d2800, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc420228a80, 0xc4209d2800, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc42013e378, 0xc4209d2800, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc420609650, 0x7f1a5dce0a58, 0xc42013e378, 0x5, 0xc42013e378, 0xc42d1037f0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209bae00, 0xe9a817, 0xc4209baf20, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209bae00, 0xc422458000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc4203164e0, 0xc422458000, 0x10000, 0x10000, 0x0, 0xc42d103b20, 0xc42d103ac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc42055f3e0)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc42055f3e0, 0xc420bb0758, 0xcf9300, 0xc420bb0758)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc420dab900, 0xc9b7c0, 0xc42960b038)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc420dab900)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc420dab900, 0xc422470000, 0x10000, 0x10000, 0xc42d103c00, 0x40292e, 0xc42d103c38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc42055f440, 0xc4208de1f0, 0x1, 0x9, 0x0, 0xc42d103ca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc42055f440, 0xc4208de1f0, 0x1, 0x9, 0x1, 0xc42d103d80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc42055f440, 0xc4208de1f0, 0x1, 0x9, 0xc4205fc000, 0x3, 0x18)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc42055f440, 0xc4208de1f0, 0x9, 0x9, 0xc42d103dc8, 0x42b09e, 0xc400000008, 0xc420972a80)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420c9c780, 0xc42d103dd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420c9c780, 0xe9a800, 0xc420c9c780)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420c9c780, 0xc9b900, 0xc420bb0750, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420c9c780, 0xc9b900, 0xc420bb0750, 0x1414760, 0x2548488e7)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc420316500, 0xc9b900, 0xc420bb0750, 0x2548488e7, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209bae00, 0xc420bb0690, 0xc4208de1b0, 0xc42055f2c0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1665 [IO wait]:\nnet.runtime_pollWait(0x7f1a5dced870, 0x72, 0x1e)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420228a78, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420228a78, 0xc420a04c00, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc420228a10, 0xc420a04c00, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc4209ae050, 0xc420a04c00, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc420937860, 0x7f1a5dce0a58, 0xc4209ae050, 0x5, 0xc4209ae050, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209d7880, 0xe9a817, 0xc4209d79a0, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209d7880, 0xc424948000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc42033b600, 0xc424948000, 0x10000, 0x10000, 0x0, 0xc429469b20, 0xc429469ac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc4209406c0)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc4209406c0, 0xc420671778, 0xcf9300, 0xc420671778)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc423c84c00, 0xc9b7c0, 0xc4510bdb28)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc423c84c00)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc423c84c00, 0xc424a12000, 0x10000, 0x10000, 0xc429469c00, 0x40292e, 0xc429469c38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc420940720, 0xc4206b08a0, 0x1, 0x9, 0x0, 0xc429469ca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc420940720, 0xc4206b08a0, 0x1, 0x9, 0x1, 0xc429469d80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc420940720, 0xc4206b08a0, 0x1, 0x9, 0xc4205fc1a0, 0x3, 0x18)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc420940720, 0xc4206b08a0, 0x9, 0x9, 0xc429469dc8, 0x42b09e, 0xc400000008, 0xc42092f8c0)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc42007f400, 0xc429469dd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc42007f400, 0xe9a800, 0xc42007f400)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc42007f400, 0xc9b900, 0xc420671770, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc42007f400, 0xc9b900, 0xc420671770, 0x1414760, 0x812123)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc42033b620, 0xc9b900, 0xc420671770, 0x812123, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209d7880, 0xc4206716b0, 0xc4206b0878, 0xc420940660)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1663 [IO wait, 2 minutes]:\nnet.runtime_pollWait(0x7f1a5dced9f0, 0x72, 0x1c)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420228a08, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420228a08, 0xc420a08000, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc4202289a0, 0xc420a08000, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc42013e410, 0xc420a08000, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc420a060c0, 0x7f1a5dce0a58, 0xc42013e410, 0x5, 0xc42013e410, 0xc42a3537f0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209f3500, 0xe9a817, 0xc4209f3620, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209f3500, 0xc42449a000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc42033b400, 0xc42449a000, 0x10000, 0x10000, 0x0, 0xc42a353b20, 0xc42a353ac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc420940180)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc420940180, 0xc420671388, 0xcf9300, 0xc420671388)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc423c83900, 0xc9b7c0, 0xc444193c08)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc423c83900)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc423c83900, 0xc4244b2000, 0x10000, 0x10000, 0xc42a353c00, 0x40292e, 0xc42a353c38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc4209402a0, 0xc4206b0820, 0x1, 0x9, 0x0, 0xc42a353ca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc4209402a0, 0xc4206b0820, 0x1, 0x9, 0x1, 0xc42a353d80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc4209402a0, 0xc4206b0820, 0x1, 0x9, 0xc4205fc340, 0x3, 0x1c)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc4209402a0, 0xc4206b0820, 0x9, 0x9, 0xc42a353dc8, 0x42b09e, 0xc400000008, 0xc420973580)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420991e00, 0xc42a353dd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420991e00, 0xe9a800, 0xc420991e00)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420991e00, 0xc9b900, 0xc420671380, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420991e00, 0xc9b900, 0xc420671380, 0x1414760, 0x25462bc9e)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc42033b420, 0xc9b900, 0xc420671380, 0x25462bc9e, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209f3500, 0xc4206712c0, 0xc4206b07c0, 0xc420940120)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1629 [IO wait]:\nnet.runtime_pollWait(0x7f1a5dcedab0, 0x72, 0x1b)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420228998, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420228998, 0xc4209c8400, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc420228930, 0xc4209c8400, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc42000e360, 0xc4209c8400, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc4209a84b0, 0x7f1a5dce0a58, 0xc42000e360, 0x5, 0xc42000e360, 0xc42d4d57f0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209b4700, 0xe9a817, 0xc4209b4820, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209b4700, 0xc422b00000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc420b9a480, 0xc422b00000, 0x10000, 0x10000, 0x0, 0xc42d4d5b20, 0xc42d4d5ac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc42014aa80)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc42014aa80, 0xc42067da18, 0xcf9300, 0xc42067da18)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc420a4d900, 0xc9b7c0, 0xc43bee1730)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc420a4d900)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc420a4d900, 0xc422b18000, 0x10000, 0x10000, 0xc42d4d5c00, 0x40292e, 0xc42d4d5c38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc42014aae0, 0xc4206b0200, 0x1, 0x9, 0x0, 0xc42d4d5ca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc42014aae0, 0xc4206b0200, 0x1, 0x9, 0x1, 0xc42d4d5d80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc42014aae0, 0xc4206b0200, 0x1, 0x9, 0xc4205fc4e0, 0x3, 0x17)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc42014aae0, 0xc4206b0200, 0x9, 0x9, 0xc42d4d5dc8, 0x42b09e, 0xc400000008, 0xc4209a4440)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc42007ea00, 0xc42d4d5dd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc42007ea00, 0xe9a800, 0xc42007ea00)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc42007ea00, 0xc9b900, 0xc42067da10, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc42007ea00, 0xc9b900, 0xc42067da10, 0x1414760, 0x254adeb74)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc420b9a4a0, 0xc9b900, 0xc42067da10, 0x254adeb74, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209b4700, 0xc42067d800, 0xc4206b01d0, 0xc42014aa20)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1675 [select, 2 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientWriter(0xc420612000, 0x7f1a5d4a5e60, 0xc4209d7c00, 0xc420bb1dd0, 0xc4208de780, 0xc420654ea0, 0xc420654fc0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:613 +0x8bb\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:560 +0x213\ngoroutine 1589 [select]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientWriter(0xc420612000, 0x7f1a5d4a5e60, 0xc4209baa80, 0xc420bb10e0, 0xc4208de360, 0xc42055ecc0, 0xc42055ed20)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:613 +0x8bb\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:560 +0x213\ngoroutine 1645 [select, 2 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientWriter(0xc420612000, 0x7f1a5d4a5e60, 0xc420a0c380, 0xc42067ce40, 0xc4208de260, 0xc42055e000, 0xc42055e7e0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:613 +0x8bb\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:560 +0x213\ngoroutine 1573 [select]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientWriter(0xc420612000, 0x7f1a5d4a5e60, 0xc42007c700, 0xc420bf9680, 0xc4208da3d0, 0xc4208297a0, 0xc420829800)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:613 +0x8bb\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:560 +0x213\ngoroutine 1635 [select]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientWriter(0xc420612000, 0x7f1a5d4a5e60, 0xc4209f2000, 0xc42068ac00, 0xc4208da270, 0xc420656000, 0xc4206560c0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:613 +0x8bb\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:560 +0x213\ngoroutine 1597 [select]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientWriter(0xc420612000, 0x7f1a5d4a5e60, 0xc4209bb180, 0xc42068ae40, 0xc4208da370, 0xc4208299e0, 0xc420829a40)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:613 +0x8bb\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:560 +0x213\ngoroutine 1583 [select]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientWriter(0xc420612000, 0x7f1a5d4a5e60, 0xc4209d6380, 0xc420bb0bd0, 0xc4208de350, 0xc42055fc20, 0xc42055fc80)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:613 +0x8bb\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:560 +0x213\ngoroutine 1532 [select, 2 minutes]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientWriter(0xc420612000, 0x7f1a5d4a5e60, 0xc4209b4a80, 0xc42067c060, 0xc4208a4008, 0xc420a94000, 0xc420a94060)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:613 +0x8bb\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:560 +0x213\ngoroutine 1664 [select]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientWriter(0xc420612000, 0x7f1a5d4a5e60, 0xc4209d7880, 0xc4206716b0, 0xc4206b0878, 0xc4209404e0, 0xc420940540)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:613 +0x8bb\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:560 +0x213\ngoroutine 1591 [select]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientWriter(0xc420612000, 0x7f1a5d4a5e60, 0xc4203c3c00, 0xc420bb00c0, 0xc4208de020, 0xc42055e060, 0xc42055e120)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:613 +0x8bb\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:560 +0x213\ngoroutine 1626 [select]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientWriter(0xc420612000, 0x7f1a5d4a5e60, 0xc4209b8e00, 0xc42067d710, 0xc4206b0180, 0xc42014a780, 0xc42014a7e0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:613 +0x8bb\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:560 +0x213\ngoroutine 32491816 [select, 1782 minutes]:\nnet/http.(persistConn).readLoop(0xc43c507d40)\n    /usr/local/go/src/net/http/transport.go:1599 +0x9ec\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1117 +0xa35\ngoroutine 1657 [IO wait]:\nnet.runtime_pollWait(0x7f1a5dced330, 0x72, 0x25)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420409488, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420409488, 0xc420c76000, 0x2000)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc420409420, 0xc420c76000, 0x2000, 0x2000, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc42013e3c8, 0xc420c76000, 0x2000, 0x2000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc4203951d0, 0x7f1a5dce0a58, 0xc42013e3c8, 0x5, 0xc42013e3c8, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209f2700, 0xe9a817, 0xc4209f2820, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209f2700, 0xc423c70000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc42033af00, 0xc423c70000, 0x10000, 0x10000, 0x0, 0xc42d4d7b20, 0xc42d4d7ac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc4205465a0)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc4205465a0, 0xc420670878, 0xcf9300, 0xc420670878)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc423c80000, 0xc9b7c0, 0xc4371f7788)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc423c80000)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc423c80000, 0xc423c9e000, 0x10000, 0x10000, 0xc42d4d7c00, 0x40292e, 0xc42d4d7c38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc420546600, 0xc4206b05c0, 0x1, 0x9, 0x0, 0xc42d4d7ca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc420546600, 0xc4206b05c0, 0x1, 0x9, 0x1, 0xc42d4d7d80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc420546600, 0xc4206b05c0, 0x1, 0x9, 0xc420992000, 0x3, 0x1a)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc420546600, 0xc4206b05c0, 0x9, 0x9, 0xc42d4d7dc8, 0x42b09e, 0xc400000008, 0xc420973180)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420991600, 0xc42d4d7dd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420991600, 0xe9a800, 0xc420991600)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420991600, 0xc9b900, 0xc420670870, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420991600, 0xc9b900, 0xc420670870, 0x1414760, 0x5214ec)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc42033af40, 0xc9b900, 0xc420670870, 0x5214ec, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209f2700, 0xc420670780, 0xc4206b0598, 0xc420546540)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1598 [IO wait]:\nnet.runtime_pollWait(0x7f1a5dced4b0, 0x72, 0x23)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420409418, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420409418, 0xc420c96000, 0x2000)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc4204093b0, 0xc420c96000, 0x2000, 0x2000, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc42013e380, 0xc420c96000, 0x2000, 0x2000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc42044efc0, 0x7f1a5dce0a58, 0xc42013e380, 0x5, 0xc42013e380, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209bb180, 0xe9a817, 0xc4209bb2a0, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209bb180, 0xc4230f0000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc4203244e0, 0xc4230f0000, 0x10000, 0x10000, 0x0, 0xc42dc6db20, 0xc42dc6dac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc420829b00)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc420829b00, 0xc420bb02a8, 0xcf9300, 0xc420bb02a8)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc420cb6600, 0xc9b7c0, 0xc43bee1fa8)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc420cb6600)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc420cb6600, 0xc4231b2000, 0x10000, 0x10000, 0xc42dc6dc00, 0x40292e, 0xc42dc6dc38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc420a955c0, 0xc4208de000, 0x1, 0x9, 0x0, 0xc42dc6dca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc420a955c0, 0xc4208de000, 0x1, 0x9, 0x1, 0xc42dc6dd80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc420a955c0, 0xc4208de000, 0x1, 0x9, 0xc4209921a0, 0x3, 0x16)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc420a955c0, 0xc4208de000, 0x9, 0x9, 0xc42dc6ddc8, 0x42b09e, 0xc400000008, 0xc420972f00)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420924500, 0xc42dc6ddd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420924500, 0xe9a800, 0xc420924500)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420924500, 0xc9b900, 0xc420bb02a0, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420924500, 0xc9b900, 0xc420bb02a0, 0x1414760, 0x55b516)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc420316000, 0xc9b900, 0xc420bb02a0, 0x55b516, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209bb180, 0xc42068ae40, 0xc4208da370, 0xc420829aa0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1602 [IO wait]:\nnet.runtime_pollWait(0x7f1a5dced630, 0x72, 0x21)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc4204093a8, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc4204093a8, 0xc447d52000, 0x4000)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc420409340, 0xc447d52000, 0x4000, 0x4000, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc4201241c0, 0xc447d52000, 0x4000, 0x4000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc420bf83f0, 0x7f1a5dce0a58, 0xc4201241c0, 0x5, 0xc4201241c0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209b8000, 0xe9a817, 0xc4209b8120, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209b8000, 0xc420d84000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc420316a60, 0xc420d84000, 0x10000, 0x10000, 0x0, 0xc42d159b20, 0xc42d159ac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc420828600)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc420828600, 0xc42068a968, 0xcf9300, 0xc42068a968)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc420e9f300, 0xc9b7c0, 0xc43193f828)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc420e9f300)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc420e9f300, 0xc42121a000, 0x10000, 0x10000, 0xc42d159c00, 0x40292e, 0xc42d159c38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc420828660, 0xc4208da060, 0x1, 0x9, 0x0, 0xc42d159ca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc420828660, 0xc4208da060, 0x1, 0x9, 0x1, 0xc42d159d80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc420828660, 0xc4208da060, 0x1, 0x9, 0xc420992340, 0x3, 0xe)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc420828660, 0xc4208da060, 0x9, 0x9, 0xc42d159dc8, 0x42b09e, 0xc400000008, 0xc42013c080)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420990400, 0xc42d159dd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420990400, 0xe9a800, 0xc420990400)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420990400, 0xc9b900, 0xc42068a960, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420990400, 0xc9b900, 0xc42068a960, 0x1414760, 0x4ba084)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc420316ac0, 0xc9b900, 0xc42068a960, 0x4ba084, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209b8000, 0xc42068a750, 0xc4208da030, 0xc420828540)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1627 [IO wait]:\nnet.runtime_pollWait(0x7f1a5dced7b0, 0x72, 0x1f)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420409338, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420409338, 0xc4209d4400, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc4204092d0, 0xc4209d4400, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc4201241e8, 0xc4209d4400, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc4209a2cf0, 0x7f1a5dce0a58, 0xc4201241e8, 0x5, 0xc4201241e8, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209b8e00, 0xe9a817, 0xc4209b8f20, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209b8e00, 0xc422ad8000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc420b9a440, 0xc422ad8000, 0x10000, 0x10000, 0x0, 0xc42a351b20, 0xc42a351ac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc42014a8a0)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc42014a8a0, 0xc42067d7d8, 0xcf9300, 0xc42067d7d8)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc420a4c600, 0xc9b7c0, 0xc42c3b3380)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc420a4c600)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc420a4c600, 0xc422af0000, 0x10000, 0x10000, 0xc42a351c00, 0x40292e, 0xc42a351c38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc42014a900, 0xc4206b01c0, 0x1, 0x9, 0x0, 0xc42a351ca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc42014a900, 0xc4206b01c0, 0x1, 0x9, 0x1, 0xc42a351d80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc42014a900, 0xc4206b01c0, 0x1, 0x9, 0xc4209924e0, 0x3, 0x1e)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc42014a900, 0xc4206b01c0, 0x9, 0x9, 0xc42a351dc8, 0x42b09e, 0xc400000008, 0xc42099cdc0)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc42007e900, 0xc42a351dd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc42007e900, 0xe9a800, 0xc42007e900)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc42007e900, 0xc9b900, 0xc42067d7d0, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc42007e900, 0xc9b900, 0xc42067d7d0, 0x1414760, 0x872f33)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc420b9a460, 0xc9b900, 0xc42067d7d0, 0x872f33, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209b8e00, 0xc42067d710, 0xc4206b0180, 0xc42014a840)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1600 [IO wait]:\nnet.runtime_pollWait(0x7f1a5dced930, 0x72, 0x1d)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc4204092c8, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc4204092c8, 0xc4209e6800, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc420409260, 0xc4209e6800, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc42013e3a0, 0xc4209e6800, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc420609a10, 0x7f1a5dce0a58, 0xc42013e3a0, 0x5, 0xc42013e3a0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209bbc00, 0xe9a817, 0xc4209bbd20, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209bbc00, 0xc4233e8000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc420316d20, 0xc4233e8000, 0x10000, 0x10000, 0x0, 0xc420a1db20, 0xc420a1dac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc420829da0)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc420829da0, 0xc420bb1088, 0xcf9300, 0xc420bb1088)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc420cb7900, 0xc9b7c0, 0xc43bee1748)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc420cb7900)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc420cb7900, 0xc423440000, 0x10000, 0x10000, 0xc420a1dc00, 0x40292e, 0xc420a1dc38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc420829e00, 0xc4208de4b0, 0x1, 0x9, 0x0, 0xc420a1dca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc420829e00, 0xc4208de4b0, 0x1, 0x9, 0x1, 0xc420a1dd80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc420829e00, 0xc4208de4b0, 0x1, 0x9, 0xc420992680, 0x3, 0x1d)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc420829e00, 0xc4208de4b0, 0x9, 0x9, 0xc420a1ddc8, 0x42b09e, 0xc400000008, 0xc420972e80)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420924780, 0xc420a1ddd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420924780, 0xe9a800, 0xc420924780)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420924780, 0xc9b900, 0xc420bb1080, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420924780, 0xc9b900, 0xc420bb1080, 0x1414760, 0x5b57b7)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc420316d80, 0xc9b900, 0xc420bb1080, 0x5b57b7, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209bbc00, 0xc420bb0fc0, 0xc4208de480, 0xc420829d40)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1584 [IO wait]:\nnet.runtime_pollWait(0x7f1a5dcedb70, 0x72, 0x1a)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420409258, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420409258, 0xc4209b1c00, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc4204091f0, 0xc4209b1c00, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc4209ae020, 0xc4209b1c00, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc4209372c0, 0x7f1a5dce0a58, 0xc4209ae020, 0x5, 0xc4209ae020, 0xc4286c57f0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209d6380, 0xe9a817, 0xc4209d64a0, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209d6380, 0xc422a9a000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc420316a00, 0xc422a9a000, 0x10000, 0x10000, 0x0, 0xc4286c5b20, 0xc4286c5ac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc42055fd40)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc42055fd40, 0xc420bb0cc8, 0xcf9300, 0xc420bb0cc8)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc422aaa000, 0xc9b7c0, 0xc428e4d818)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc422aaa000)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc422aaa000, 0xc422ab8000, 0x10000, 0x10000, 0xc4286c5c00, 0x40292e, 0xc4286c5c38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc42055fda0, 0xc4208de3c0, 0x1, 0x9, 0x0, 0xc4286c5ca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc42055fda0, 0xc4208de3c0, 0x1, 0x9, 0x1, 0xc4286c5d80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc42055fda0, 0xc4208de3c0, 0x1, 0x9, 0xc420992820, 0x3, 0x12)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc42055fda0, 0xc4208de3c0, 0x9, 0x9, 0xc4286c5dc8, 0x42b09e, 0xc400000008, 0xc42092f2c0)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420c9cc80, 0xc4286c5dd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420c9cc80, 0xe9a800, 0xc420c9cc80)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420c9cc80, 0xc9b900, 0xc420bb0cc0, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420c9cc80, 0xc9b900, 0xc420bb0cc0, 0x1414760, 0x5885d0)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc420316a40, 0xc9b900, 0xc420bb0cc0, 0x5885d0, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209d6380, 0xc420bb0bd0, 0xc4208de350, 0xc42055fce0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1604 [IO wait, 2 minutes]:\nnet.runtime_pollWait(0x7f1a5e5221a0, 0x72, 0x19)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420228848, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420228848, 0xc4209b6000, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc4202287e0, 0xc4209b6000, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc42013e318, 0xc4209b6000, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc420609140, 0x7f1a5dce0a58, 0xc42013e318, 0x5, 0xc42013e318, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc42007d500, 0xe9a817, 0xc42007d620, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc42007d500, 0xc42123a000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc420316b00, 0xc42123a000, 0x10000, 0x10000, 0x0, 0xc428e5fb20, 0xc428e5fac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc420828900)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc420828900, 0xc42068aa58, 0xcf9300, 0xc42068aa58)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc420ea0600, 0xc9b7c0, 0xc45558ada8)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc420ea0600)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc420ea0600, 0xc42125a000, 0x10000, 0x10000, 0xc428e5fc00, 0x40292e, 0xc428e5fc38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc420828960, 0xc4208da0a0, 0x1, 0x9, 0x0, 0xc428e5fca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc420828960, 0xc4208da0a0, 0x1, 0x9, 0x1, 0xc428e5fd80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc420828960, 0xc4208da0a0, 0x1, 0x9, 0xc4209929c0, 0x3, 0x11)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc420828960, 0xc4208da0a0, 0x9, 0x9, 0xc428e5fdc8, 0x42b09e, 0xc400000008, 0xc420972680)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420990480, 0xc428e5fdd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420990480, 0xe9a800, 0xc420990480)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420990480, 0xc9b900, 0xc42068aa50, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420990480, 0xc9b900, 0xc42068aa50, 0x1414760, 0x891207)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc420316b20, 0xc9b900, 0xc42068aa50, 0x891207, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc42007d500, 0xc42068a990, 0xc4208da038, 0xc420828840)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1621 [IO wait]:\nnet.runtime_pollWait(0x7f1a5e522560, 0x72, 0x15)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420409108, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420409108, 0xc4209b6800, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc4204090a0, 0xc4209b6800, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc42013e328, 0xc4209b6800, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc420609230, 0x7f1a5dce0a58, 0xc42013e328, 0x5, 0xc42013e328, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209ba000, 0xe9a817, 0xc4209ba120, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209ba000, 0xc42189e000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc42033aba0, 0xc42189e000, 0x10000, 0x10000, 0x0, 0xc42af4fb20, 0xc42af4fac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc420a95740)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc420a95740, 0xc42067d4a8, 0xcf9300, 0xc42067d4a8)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc420a58c00, 0xc9b7c0, 0xc4320eaba0)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc420a58c00)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc420a58c00, 0xc4218ae000, 0x10000, 0x10000, 0xc42af4fc00, 0x40292e, 0xc42af4fc38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc420a95ce0, 0xc4208a47b0, 0x1, 0x9, 0x0, 0xc42af4fca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc420a95ce0, 0xc4208a47b0, 0x1, 0x9, 0x1, 0xc42af4fd80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc420a95ce0, 0xc4208a47b0, 0x1, 0x9, 0xc420992d00, 0x3, 0x10)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc420a95ce0, 0xc4208a47b0, 0x9, 0x9, 0xc42af4fdc8, 0x42b09e, 0xc400000008, 0xc420972600)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420697380, 0xc42af4fdd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420697380, 0xe9a800, 0xc420697380)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420697380, 0xc9b900, 0xc42067d4a0, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420697380, 0xc9b900, 0xc42067d4a0, 0x1414760, 0x1e26703)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc42033abe0, 0xc9b900, 0xc42067d4a0, 0x1e26703, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209ba000, 0xc42067d380, 0xc4208a4788, 0xc420a956e0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 1622 [select]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientWriter(0xc420612000, 0x7f1a5d4a5e60, 0xc4209ba700, 0xc42067c330, 0xc4206b0030, 0xc420a94cc0, 0xc420a94d20)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:613 +0x8bb\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:560 +0x213\ngoroutine 1619 [IO wait, 2 minutes]:\nnet.runtime_pollWait(0x7f1a5e522860, 0x72, 0x10)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc420409028, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc420409028, 0xc42005dc00, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc420408fc0, 0xc42005dc00, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc42000e358, 0xc42005dc00, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc4209a83c0, 0x7f1a5dce0a58, 0xc42000e358, 0x5, 0xc42000e358, 0xc428ea77f0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc4209b4380, 0xe9a817, 0xc4209b44a0, 0x196)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc4209b4380, 0xc421688000, 0x10000, 0x10000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(readerCounter).Read(0xc42033aa60, 0xc421688000, 0x10000, 0x10000, 0x0, 0xc428ea7b20, 0xc428ea7ac0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/conn_stats.go:118 +0x55\nbufio.(Reader).fill(0xc420a95500)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).ReadByte(0xc420a95500, 0xc42067d2c8, 0xcf9300, 0xc42067d2c8)\n    /usr/local/go/src/bufio/bufio.go:239 +0x5b\ncompress/flate.(decompressor).moreBits(0xc420a57900, 0xc9b7c0, 0xc45a9b9da8)\n    /usr/local/go/src/compress/flate/inflate.go:693 +0x37\ncompress/flate.(decompressor).nextBlock(0xc420a57900)\n    /usr/local/go/src/compress/flate/inflate.go:302 +0x39\ncompress/flate.(decompressor).Read(0xc420a57900, 0xc421698000, 0x10000, 0x10000, 0xc428ea7c00, 0x40292e, 0xc428ea7c38)\n    /usr/local/go/src/compress/flate/inflate.go:346 +0x66\nbufio.(Reader).Read(0xc420a95560, 0xc4208a4750, 0x1, 0x9, 0x0, 0xc428ea7ca8, 0x42ba3f)\n    /usr/local/go/src/bufio/bufio.go:213 +0x312\nio.ReadAtLeast(0x13301e0, 0xc420a95560, 0xc4208a4750, 0x1, 0x9, 0x1, 0xc428ea7d80, 0x42b766, 0x0)\n    /usr/local/go/src/io/io.go:307 +0xa9\nio.ReadFull(0x13301e0, 0xc420a95560, 0xc4208a4750, 0x1, 0x9, 0xc420993040, 0x3, 0x13)\n    /usr/local/go/src/io/io.go:325 +0x58\nencoding/gob.decodeUintReader(0x13301e0, 0xc420a95560, 0xc4208a4750, 0x9, 0x9, 0xc428ea7dc8, 0x42b09e, 0xc400000008, 0xc4209a4340)\n    /usr/local/go/src/encoding/gob/decode.go:119 +0x63\nencoding/gob.(Decoder).recvMessage(0xc420696e80, 0xc428ea7dd8)\n    /usr/local/go/src/encoding/gob/decoder.go:76 +0x57\nencoding/gob.(Decoder).decodeTypeSequence(0xc420696e80, 0xe9a800, 0xc420696e80)\n    /usr/local/go/src/encoding/gob/decoder.go:140 +0x167\nencoding/gob.(Decoder).DecodeValue(0xc420696e80, 0xc9b900, 0xc42067d2c0, 0x16, 0x0, 0x0)\n    /usr/local/go/src/encoding/gob/decoder.go:208 +0xe8\nencoding/gob.(Decoder).Decode(0xc420696e80, 0xc9b900, 0xc42067d2c0, 0x1414760, 0x7199fc)\n    /usr/local/go/src/encoding/gob/decoder.go:185 +0x16d\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(*messageDecoder).Decode(0xc42033aa80, 0xc9b900, 0xc42067d2c0, 0x7199fc, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/encoding.go:100 +0x42\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientReader(0xc420612000, 0x7f1a5d4a5e88, 0xc4209b4380, 0xc42067d200, 0xc4208a4720, 0xc420a954a0)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:683 +0x13e\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.clientHandleConnection\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/client.go:563 +0x2ba\ngoroutine 241803 [select, 5714 minutes]:\nnet/http.(persistConn).writeLoop(0xc4305fc360)\n    /usr/local/go/src/net/http/transport.go:1704 +0x43a\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1118 +0xa5a\ngoroutine 299978 [select, 5709 minutes]:\nnet/http.(persistConn).readLoop(0xc42f6bb8c0)\n    /usr/local/go/src/net/http/transport.go:1599 +0x9ec\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1117 +0xa35\ngoroutine 299979 [select, 5709 minutes]:\nnet/http.(persistConn).writeLoop(0xc42f6bb8c0)\n    /usr/local/go/src/net/http/transport.go:1704 +0x43a\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1118 +0xa5a\ngoroutine 33235461 [select, 465 minutes]:\nnet/http.(persistConn).writeLoop(0xc43c7dc360)\n    /usr/local/go/src/net/http/transport.go:1704 +0x43a\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1118 +0xa5a\ngoroutine 33589453 [chan receive, 491 minutes]:\nmain.loadApps.func2(0xc43ac1c540, 0xc42778d400, 0x1f, 0x1f)\n    /src/github.com/TykTechnologies/tyk/api_loader.go:656 +0x4e\ncreated by main.loadApps\n    /src/github.com/TykTechnologies/tyk/api_loader.go:659 +0x562\ngoroutine 33589485 [select, 491 minutes]:\nnet/http.(persistConn).writeLoop(0xc448da3e60)\n    /usr/local/go/src/net/http/transport.go:1704 +0x43a\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1118 +0xa5a\ngoroutine 241797 [chan receive, 5714 minutes]:\nmain.loadApps.func2(0xc42e0c7740, 0xc42acd7c20, 0x1e, 0x1e)\n    /src/github.com/TykTechnologies/tyk/api_loader.go:656 +0x4e\ncreated by main.loadApps\n    /src/github.com/TykTechnologies/tyk/api_loader.go:659 +0x562\ngoroutine 281799 [select, 5711 minutes]:\nnet/http.(persistConn).readLoop(0xc4375987e0)\n    /usr/local/go/src/net/http/transport.go:1599 +0x9ec\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1117 +0xa35\ngoroutine 3055 [IO wait]:\nnet.runtime_pollWait(0x7f1a5e522f20, 0x72, 0x1335be0)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc4201fa3e8, 0x72, 0x132e778, 0xc434b82740)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc4201fa3e8, 0xffffffffffffffff, 0x0)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).accept(0xc4201fa380, 0x0, 0x1333920, 0xc434b82740)\n    /usr/local/go/src/net/fd_unix.go:430 +0x1e5\nnet.(TCPListener).accept(0xc42000e008, 0xc459f17980, 0xcf9420, 0xc428f1ae88)\n    /usr/local/go/src/net/tcpsock_posix.go:136 +0x2e\nnet.(TCPListener).Accept(0xc42000e008, 0x4351eb, 0xc428f1ae90, 0x69a05e, 0x457de0)\n    /usr/local/go/src/net/tcpsock.go:228 +0x49\ncrypto/tls.(listener).Accept(0xc420346560, 0xe9a1a0, 0xc459f17900, 0x133dc20, 0xc4298dae70)\n    /usr/local/go/src/crypto/tls/tls.go:52 +0x37\nnet/http.(*Server).Serve(0xc429547340, 0x133a920, 0xc420346560, 0x0, 0x0)\n    /usr/local/go/src/net/http/server.go:2643 +0x228\nnet/http.Serve(0x133a920, 0xc420346560, 0x13351e0, 0x14329f0, 0x5, 0x0)\n    /usr/local/go/src/net/http/server.go:2307 +0x78\ncreated by main.listen\n    /src/github.com/TykTechnologies/tyk/main.go:1404 +0xa6d\ngoroutine 34006934 [select]:\nnet/http.(persistConn).writeLoop(0xc452a83b00)\n    /usr/local/go/src/net/http/transport.go:1704 +0x43a\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1118 +0xa5a\ngoroutine 33589459 [select, 491 minutes]:\nnet/http.(persistConn).writeLoop(0xc43ee8ca20)\n    /usr/local/go/src/net/http/transport.go:1704 +0x43a\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1118 +0xa5a\ngoroutine 26759 [select, 5733 minutes]:\nnet/http.(persistConn).writeLoop(0xc420b94c60)\n    /usr/local/go/src/net/http/transport.go:1704 +0x43a\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1118 +0xa5a\ngoroutine 26758 [select, 5733 minutes]:\nnet/http.(persistConn).readLoop(0xc420b94c60)\n    /usr/local/go/src/net/http/transport.go:1599 +0x9ec\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1117 +0xa35\ngoroutine 32474562 [chan receive, 1803 minutes]:\nmain.loadApps.func2(0xc43f68c600, 0xc439f33c00, 0x1f, 0x1f)\n    /src/github.com/TykTechnologies/tyk/api_loader.go:656 +0x4e\ncreated by main.loadApps\n    /src/github.com/TykTechnologies/tyk/api_loader.go:659 +0x562\ngoroutine 27053 [chan receive, 5733 minutes]:\nmain.loadApps.func2(0xc42b362660, 0xc42958f700, 0x1f, 0x1f)\n    /src/github.com/TykTechnologies/tyk/api_loader.go:656 +0x4e\ncreated by main.loadApps\n    /src/github.com/TykTechnologies/tyk/api_loader.go:659 +0x562\ngoroutine 33236047 [select, 906 minutes]:\nnet/http.(persistConn).writeLoop(0xc43bff47e0)\n    /usr/local/go/src/net/http/transport.go:1704 +0x43a\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1118 +0xa5a\ngoroutine 33589603 [chan receive, 491 minutes]:\nmain.loadApps.func2(0xc44a3fda40, 0xc444140300, 0x1f, 0x1f)\n    /src/github.com/TykTechnologies/tyk/api_loader.go:656 +0x4e\ncreated by main.loadApps\n    /src/github.com/TykTechnologies/tyk/api_loader.go:659 +0x562\ngoroutine 281836 [chan receive, 5711 minutes]:\nmain.loadApps.func2(0xc435a6f9e0, 0xc438f93300, 0x1f, 0x1f)\n    /src/github.com/TykTechnologies/tyk/api_loader.go:656 +0x4e\ncreated by main.loadApps\n    /src/github.com/TykTechnologies/tyk/api_loader.go:659 +0x562\ngoroutine 33591407 [chan receive, 489 minutes]:\nmain.loadApps.func2(0xc44c0a4780, 0xc44be23300, 0x1f, 0x1f)\n    /src/github.com/TykTechnologies/tyk/api_loader.go:656 +0x4e\ncreated by main.loadApps\n    /src/github.com/TykTechnologies/tyk/api_loader.go:659 +0x562\ngoroutine 33591371 [select, 489 minutes]:\nnet/http.(persistConn).writeLoop(0xc44c4ae6c0)\n    /usr/local/go/src/net/http/transport.go:1704 +0x43a\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1118 +0xa5a\ngoroutine 33235460 [IO wait, 465 minutes]:\nnet.runtime_pollWait(0x7f1a5412fb68, 0x72, 0x56)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc438f91d48, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc438f91d48, 0xc432cda800, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc438f91ce0, 0xc432cda800, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc437d4b200, 0xc432cda800, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc43294a360, 0x7f1a5dce0a58, 0xc437d4b200, 0x5, 0xc437d4b200, 0x28)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc44050b500, 0xe9a817, 0xc44050b620, 0x457680)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).Read(0xc44050b500, 0xc4404bd000, 0x1000, 0x1000, 0x0, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1134 +0x11d\nnet/http.(persistConn).Read(0xc43c7dc360, 0xc4404bd000, 0x1000, 0x1000, 0x5, 0x455740, 0xc4387e2c60)\n    /usr/local/go/src/net/http/transport.go:1316 +0x14b\nbufio.(Reader).fill(0xc43feb3da0)\n    /usr/local/go/src/bufio/bufio.go:97 +0x117\nbufio.(Reader).Peek(0xc43feb3da0, 0x1, 0xc447727be5, 0x1, 0x0, 0xc44172eae0, 0x0)\n    /usr/local/go/src/bufio/bufio.go:129 +0x67\nnet/http.(persistConn).readLoop(0xc43c7dc360)\n    /usr/local/go/src/net/http/transport.go:1474 +0x196\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1117 +0xa35\ngoroutine 32474526 [select, 1803 minutes]:\nnet/http.(persistConn).writeLoop(0xc4372b58c0)\n    /usr/local/go/src/net/http/transport.go:1704 +0x43a\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1118 +0xa5a\ngoroutine 33591149 [select, 489 minutes]:\nnet/http.(persistConn).writeLoop(0xc4481207e0)\n    /usr/local/go/src/net/http/transport.go:1704 +0x43a\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1118 +0xa5a\ngoroutine 34007819 [IO wait]:\nnet.runtime_pollWait(0x7f1a5412faa8, 0x72, 0x4e)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc42f5607d8, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc42f5607d8, 0xc452a5d400, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc42f560770, 0xc452a5d400, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc4510bdb30, 0xc452a5d400, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc45a374750, 0x7f1a5dce0a58, 0xc4510bdb30, 0x5, 0xc4510bdb30, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc44a7b3c00, 0xc447ab0116, 0xc42094ac2c, 0x410eb2)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).readHandshake(0xc44a7b3c00, 0xc42aae8972, 0x410eb2, 0x4467c8, 0xd)\n    /usr/local/go/src/crypto/tls/conn.go:943 +0x8d\ncrypto/tls.(serverHandshakeState).readClientHello(0xc42094ac00, 0xc42094abf0, 0x13, 0x5)\n    /usr/local/go/src/crypto/tls/handshake_server.go:116 +0x4e\ncrypto/tls.(Conn).serverHandshake(0xc44a7b3c00, 0xe9a8e8, 0xc44a7b3d20)\n    /usr/local/go/src/crypto/tls/handshake_server.go:48 +0xc4\ncrypto/tls.(Conn).Handshake(0xc44a7b3c00, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1309 +0x2db\nnet/http.(conn).serve(0xc44a78ba40, 0x133dc20, 0xc4298dae70)\n    /usr/local/go/src/net/http/server.go:1737 +0x121\ncreated by net/http.(Server).Serve\n    /usr/local/go/src/net/http/server.go:2668 +0x2ce\ngoroutine 34007850 [sleep]:\ntime.Sleep(0x3b9aca00)\n    /usr/local/go/src/runtime/time.go:59 +0xf9\ngithub.com/TykTechnologies/tyk/vendor/github.com/paulbellamy/ratecounter.(RateCounter).scheduleDecrement(0xc4202d57c0, 0x1)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/paulbellamy/ratecounter/ratecounter.go:29 +0x2f\ncreated by github.com/TykTechnologies/tyk/vendor/github.com/paulbellamy/ratecounter.(RateCounter).Incr\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/paulbellamy/ratecounter/ratecounter.go:25 +0x63\ngoroutine 33589458 [select, 491 minutes]:\nnet/http.(persistConn).readLoop(0xc43ee8ca20)\n    /usr/local/go/src/net/http/transport.go:1599 +0x9ec\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1117 +0xa35\ngoroutine 32491815 [chan receive, 1782 minutes]:\nmain.loadApps.func2(0xc43960c6c0, 0xc445ccfd00, 0x1f, 0x1f)\n    /src/github.com/TykTechnologies/tyk/api_loader.go:656 +0x4e\ncreated by main.loadApps\n    /src/github.com/TykTechnologies/tyk/api_loader.go:659 +0x562\ngoroutine 33589484 [select, 491 minutes]:\nnet/http.(persistConn).readLoop(0xc448da3e60)\n    /usr/local/go/src/net/http/transport.go:1599 +0x9ec\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1117 +0xa35\ngoroutine 33996580 [select]:\nnet/http.(persistConn).writeLoop(0xc4566b5200)\n    /usr/local/go/src/net/http/transport.go:1704 +0x43a\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1118 +0xa5a\ngoroutine 32964656 [IO wait, 1201 minutes]:\nnet.runtime_pollWait(0x7f1a4ffaf940, 0x72, 0x4b)\n    /usr/local/go/src/runtime/netpoll.go:164 +0x59\nnet.(pollDesc).wait(0xc435c3a538, 0x72, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_poll_runtime.go:75 +0x38\nnet.(pollDesc).waitRead(0xc435c3a538, 0xc4405a4800, 0x400)\n    /usr/local/go/src/net/fd_poll_runtime.go:80 +0x34\nnet.(netFD).Read(0xc435c3a4d0, 0xc4405a4800, 0x400, 0x400, 0x0, 0x1335be0, 0x132e778)\n    /usr/local/go/src/net/fd_unix.go:250 +0x1b7\nnet.(conn).Read(0xc42cdfacc8, 0xc4405a4800, 0x400, 0x400, 0x0, 0x0, 0x0)\n    /usr/local/go/src/net/net.go:181 +0x70\ncrypto/tls.(block).readFromUntil(0xc43bd6d590, 0x7f1a5dce0a58, 0xc42cdfacc8, 0x5, 0xc42cdfacc8, 0x100)\n    /usr/local/go/src/crypto/tls/conn.go:488 +0x98\ncrypto/tls.(Conn).readRecord(0xc420b69c00, 0xc42af51716, 0x59dc20, 0xc435c3a4d0)\n    /usr/local/go/src/crypto/tls/conn.go:590 +0xc4\ncrypto/tls.(Conn).readHandshake(0xc420b69c00, 0x783, 0x0, 0x0, 0x4)\n    /usr/local/go/src/crypto/tls/conn.go:943 +0x8d\ncrypto/tls.(serverHandshakeState).doFullHandshake(0xc42af51c00, 0xc42097cb00, 0x0)\n    /usr/local/go/src/crypto/tls/handshake_server.go:454 +0x5be\ncrypto/tls.(Conn).serverHandshake(0xc420b69c00, 0xe9a8e8, 0xc420b69d20)\n    /usr/local/go/src/crypto/tls/handshake_server.go:85 +0x325\ncrypto/tls.(Conn).Handshake(0xc420b69c00, 0x0, 0x0)\n    /usr/local/go/src/crypto/tls/conn.go:1309 +0x2db\nnet/http.(conn).serve(0xc4393d4780, 0x133dc20, 0xc4298dae70)\n    /usr/local/go/src/net/http/server.go:1737 +0x121\ncreated by net/http.(Server).Serve\n    /usr/local/go/src/net/http/server.go:2668 +0x2ce\ngoroutine 33591370 [select, 489 minutes]:\nnet/http.(persistConn).readLoop(0xc44c4ae6c0)\n    /usr/local/go/src/net/http/transport.go:1599 +0x9ec\ncreated by net/http.(Transport).dialConn\n    /usr/local/go/src/net/http/transport.go:1117 +0xa35\n```. I was just made aware of this ticket, the key things I'd like to see are:\na) When in log browser, under gateway metadata -> tags. The \"key-XXXX\" listed there should be linked to a view of the attached session. Any \"tags\" in the session attached to that key should be listed there as well. (under gateway metadata -> tags) and ideally the alias of that key\nb) Under \"key management\" I should be able to paste in the XXXX hashed portion of the \"key-XXXX\" referenced in log-browser, actually find it and see information attached to that key (session info, aliases, tags etc)\nc) In activity by key, the search listing lists the hash + alias (great!), when I click into the graph view for activity, there is not alias presented. This details screen should show all session details attached to that key as well as the activity data.\n. So for (A) - in log-browser I am not seeing any of the session tags attached to a key listed under \"gateway metadata --> tags\". @buger, using dashboard 1.6, now if I take a hashed key that I see in the dashboard (1.6) from \"activity by key\", then go to \"Keys\" and put the hash into the search field, check the \"this is a hashed key\" and still get the error \"Could not retrieve key detail\" and \"key doesn't exist\". just realizing this is contingent on the gateways also being 2.6, we've yet to upgrade them. Was trying this via the hybrid dashboard. This is definitely an issue for us as well. We'd like to start leveraging Azure's redis offering but are stuck w/ an on premise cluster until this can be made possible. Tried manually changing it myself 2.5 and 1.5 getting:\nPulling tyk_dashboard (tykio/tyk-dashboard:v1.5.0)...\nERROR: manifest for tykio/tyk-dashboard:v1.5.0 not found\nNot pushed to dockerhub yet?. Any possibility simple \"AND\" support could be added when specifying multiple keywords, phrase support etc?. yeah it is, @lonelycode gave us this pointer (regex in the domain field) as a way to do what we needed a while back\nLet me try the change suggested. Also to clarify this is not affecting us in prod, just a local dev thing as I test 2.5 prior to any upgrades. @buger that works (non-capture groups), gw does not die\nhowever the dashboard client side validation error is still there: Please enter a valid hostname value. @buger we still see this when trying to start a 2.5.1 gateway against a hybrid account w/ pre-existing definitions containing this custom domain regex syntax. We have yet to update all defs w/ non-matching groups . Is the panic scheduled to be fixed in an upcoming patch?. Reason being is that we need to do some upgrade to tyk 2.5.x gateways but we can't.\nWhen we bring up 2.5.1 gateways they die because of this panic, due to the regex in the custom domain for our api defs, which was legitimate prior to 2.5 (we are currently running gateways 2.3.13)\nLikewise we cannot edit that custom domain field in our hybrid dashboard, and even if we could, due to that JS validation error it won't accept it\nWe can't export and reimport the api-defs because that would cause a service interruption between the delete and re-export (have to export/delete then re-import cause there is no ability to edit the domain the ui)\nSo we are sort of at a standstill waiting for all this to be resolved. Chicken before the egg..... Where? its not editable in the cloud dashboard when logged into hybrid, just shown statically (in grey) at the top. \nAlso don't see it on advanced options etc.\nWhen I run the docker compose quick start setup locally, that dashboard version exposes it\n\n. Yes we set it via the dashboard API (long prior to 1.5.x) which requires us to export the api def, delete the api def (causes a production outage) then re-import it with the domain attribute adjusted. We can no longer use that procedure as we are now in production. \nThe question is, why is the edibility of that field in the dashboard hidden. Agreed, however our DevOps guys are juggling several things and are just using the Dashboard at this point to manage these (not the apis).. Verified this works, thanks!. related: https://github.com/TykTechnologies/tyk/issues/1453. any update on this?. related: https://github.com/TykTechnologies/tyk/issues/1453. thx!. fine w/ that, just need a reliable indicator of the scheme tls or no tls\n. No problem, just want to ensure this is tracked somewhere or documented, because I'm about to leverage this as a \"feature\", and would need to know if that behavior changes :). https://community.tyk.io/t/tykmakehttprequest-and-url-params/1008/8. FYI works with TykBatchRequest.. #1256 . Note #1256 still does not seem to solve this, I take a hashed key that I see in the dashboard (1.6) from \"activity by key\", then go to \"Keys\" and put the hash into the search field, check the \"this is a hashed key\" and still get the error \"Could not retrieve key detail\" and \"key doesn't exist\". Any update on this? major pain. Any thoughts on what this would be?. Any thoughts on when we could see this? . I'm confused, so this is already functionality that is enabled? or no (per the assignment)\n. pretty much like this, there are several diff ones, but they are all similar to this \njs\n{\n      \"file_list\": [\n        \"step1.js\",\n        \"step2.js\",\n        \"step3.js\",\n        \"step4.js\"\n      ],\n      \"custom_middleware\": {\n        \"pre\": [\n          {\"name\": \"step1\", \"path\":\"step1.js\"},\n          {\"name\": \"step2\", \"path\":\"step2.js\"},\n          {\"name\": \"step3\", \"path\":\"step3.js\"},\n          {\"name\": \"step4\", \"path\":\"step4.js\"}\n        ],\n        \"post\": [],\n        \"driver\": \"otto\"\n      },\n      \"checksum\": \"\",\n      \"signature\": \"\"\n}. any eta on this?. could this be sneaked into 2.7.1 please :). sure, but our bundles are separate from our docker images, we need them to remain agnostic of them, the files need to come from somewhere and we don't want to bake the plugin js files into the container images\n. manifest and code cannot be anonymously available. yes, just too complicated, i need the actual endpoint secured, not a proxy (storing on s3 bucket w/ ba protection). If the above works, then no need necessary, will need to try it. FYI i get APIs disappearing only on nodes that emit this log message: \n\"Failed decode: unexpected end of JSON input\"\nI.e please check if not only zero apis returned, but what if the APIs are returned but the JSON is invalid . I'll turn on debug logging, however my point is this was a drop-in gateway upgrade. Nothing else changed. 2.7.6 fails, 2.6.4 works. time=\"Feb 28 16:13:10\" level=debug msg=\"Running: common\"\n.....\ntime=\"Feb 28 16:13:10\" level=debug msg=\"JSVM middleware execution took: (ns) 3627083\"\ntime=\"Feb 28 16:13:10\" level=debug msg=\"Running: hostEval\"\n.....\ntime=\"Feb 28 16:13:10\" level=info msg=\"hostEval 2019-2-28-16-13-10-691-20319 - traceid: none - https://my-tyk-gw/my/1.1/api/token - setting request.header: X-My-Proxytourl: https://someotherhost:8888/some/path\" type=log-msg\ntime=\"Feb 28 16:13:10\" level=debug msg=\"JSVM middleware execution took: (ns) 3695384\"\ntime=\"Feb 28 16:13:10\" level=debug msg=\"Started proxy\"\ntime=\"Feb 28 16:13:10\" level=debug msg=\"Stripping: /my/1.1/api/token\"\ntime=\"Feb 28 16:13:10\" level=debug msg=\"Upstream Path is: \"\ntime=\"Feb 28 16:13:10\" level=debug msg=\"UPSTREAM REQUEST URL: \"\ntime=\"Feb 28 16:13:10\" level=debug msg=\"Outbound Request: https://nothing.fqdn.that.wontbe.used:8888\"\ntime=\"Feb 28 16:13:10\" level=debug msg=\"Received DRL data: {xxxx solo-xxxx-8c53-4bbe-a400-xxxx 1 0 }\"\ntime=\"Feb 28 16:13:10\" level=debug msg=\"[Active Nodes]: 15 [Token Bucket Value]: 1100 [Current Load p/s]: 2 [Current Load]: 0.000000\"\ntime=\"Feb 28 16:13:10\" level=debug msg=\"Received DRL data: {xxxxx solo-xxxx-e9b4-4e5a-9dc8-xxxx 1 0 }\"\ntime=\"Feb 28 16:13:10\" level=debug msg=\"[Active Nodes]: 13 [Token Bucket Value]: 1100 [Current Load p/s]: 2 [Current Load]: 0.000000\"\ntime=\"Feb 28 16:13:10\" level=debug msg=\"Received DRL data: {xxxx solo-xxxx-4e29-4de8-93b0-xxxx 1 0 }\"\ntime=\"Feb 28 16:13:10\" level=debug msg=\"[Active Nodes]: 12 [Token Bucket Value]: 1100 [Current Load p/s]: 2 [Current Load]: 0.000000\"\ntime=\"Feb 28 16:13:10\" level=error msg=\"http: proxy error: dial tcp: lookup nothing.fqdn.that.wontbe.used:8888 on 127.0.0.11:53: no such host\" api_id=xxxx org_id=xxxx server_name=nothing.fqdn.that.wontbe.used:8888 user_id=-- user_ip=\"10.255.6.220, 10.0.0.72\" user_name=\ntime=\"Feb 28 16:13:10\" level=debug msg=\"Sending notification{gateway-log {\\\"api_id\\\":\\\"xxxxx\\\",\\\"level\\\":\\\"error\\\",\\\"msg\\\":\\\"http: proxy error: dial tcp: lookup nothing.fqdn.that.wontbe.used:8888 on 127.0.0.11:53: no such host\\\",\\\"org_id\\\":\\\"xxxxx\\\",\\\"prefix\\\":\\\"proxy\\\",\\\"server_name\\\":\\\"nothing.fqdn.that.wontbe.used:8888\\\",\\\"time\\\":\\\"2019-02-28T16:13:10Z\\\",\\\"user_id\\\":\\\"--\\\",\\\"user_ip\\\":\\\"10.255.6.220, 10.0.0.72\\\",\\\"user_name\\\":\\\"\\\"}\\n xxxxx 2019-02-28 16:13:10.919439072 +0000 UTC m=+447.323603042}\"\ntime=\"Feb 28 16:13:10\" level=debug msg=\"ISO Code: \". applying headers runs through a function like this (works fine w/ tyk 2.6.4)\n```js\nfunction applyRequestHeaders(request,headersToApply,headersToDelete) {\nvar updatedHeaders = {};\n\nif (request && request.Headers) {\n    for (var headerName in request.Headers) {\n        var rawHeaderArrVal = request.Headers[headerName];\n        if (rawHeaderArrVal && rawHeaderArrVal.length > 0) {\n            updatedHeaders[headerName] = (rawHeaderArrVal[0].trim());\n        }\n    }\n}\n\nif (request && request.SetHeaders) {\n    for (var headerName in request.SetHeaders) {\n        var rawHeaderVal = request.SetHeaders[headerName];\n        updatedHeaders[headerName] = rawHeaderVal;\n    }\n}\n\nif (headersToApply && headersToApply != null) {\n    for (var headerName in headersToApply) {\n        updatedHeaders[headerName] = headersToApply[headerName].trim();\n    }\n}\n\nif (headersToDelete && headersToDelete != null) {\n    for (var headerName in headersToDelete) {\n        delete updatedHeaders[headerName];\n        request.DeleteHeaders = [ headerName ]\n    }\n}\n\n// Note this is telling Tyk KV pairs to set on the Headers field\n// if it exists and not in this list it will remain.\nrequest.SetHeaders = updatedHeaders;\n\n}\n```\ncalled like:\n```js\n...\napplyRequestHeaders(request,JSON.parse(\"{\\\"\" +headerName1 +\"\\\":\\\"\"+ header1value.trim() + \"\\\",\" +\n                                        \"\\\"\" +headerName2  +\"\\\":\\\"\"+ header2value.trim()   + \"\\\",\" +\n                                        \"\\\"\" +proxyToUrlHeaderName +\"\\\":\\\"\"+ proxy_to_url.trim()   + \"\\\"}\"));\n...\n```. @furkansenharputlu did you try setting the headers via that function?. So I've noticed that some of our other APIs that use this same plugin/urlrewrite mechanism work on 2.7.6\nAfter looking into the differences I've narrowed it down to this:\nIf the API def defines its whitelist/urlrewrites like this, things WORK OK in 2.7.6 (JSVM header is set/proxies to backend OK:\njson\n                    \"url_rewrites\": [\n                        {\n                            \"path\": \"/.*\",\n                            \"method\": \"GET\",\n                            \"match_pattern\": \"/.*\",\n                            \"rewrite_to\": \"$tyk_context.headers_X_My_Proxytourl\",\n                            \"triggers\": [],\n                            \"MatchRegexp\": null\n                        },\n                        {\n                            \"path\": \"/.*\",\n                            \"method\": \"POST\",\n                            \"match_pattern\": \"/.*\",\n                            \"rewrite_to\": \"$tyk_context.headers_X_My_Proxytourl\",\n                            \"triggers\": [],\n                            \"MatchRegexp\": null\n                        }\n                    ]\nIf the API def defines its whitelist/urlrewrites like this, things FAIL in 2.7.6 (header is still set is JSVM but its gone by the time tyk does the urlrewrite:\njson\n                    \"url_rewrites\": [\n                        {\n                            \"path\": \"/my/\\\\d.\\\\d/api/token\",\n                            \"method\": \"GET\",\n                            \"match_pattern\": \"/my/\\\\d.\\\\d/api/token\",\n                            \"rewrite_to\": \"$tyk_context.headers_X_My_Proxytourl\",\n                            \"triggers\": [],\n                            \"MatchRegexp\": null\n                        },\n                        {\n                            \"path\": \"/my/\\\\d.\\\\d/api/token\",\n                            \"method\": \"POST\",\n                            \"match_pattern\": \"/my/\\\\d.\\\\d/api/token\",\n                            \"rewrite_to\": \"$tyk_context.headers_X_My_Proxytourl\",\n                            \"triggers\": [],\n                            \"MatchRegexp\": null\n                        }\n                    ]\nThis also fails:\njson\n                    \"url_rewrites\": [\n                        {\n                            \"path\": \"/my/1.0/api/token\",\n                            \"method\": \"GET\",\n                            \"match_pattern\": \"/my/\\\\d.\\\\d/api/token\",\n                            \"rewrite_to\": \"$tyk_context.headers_X_My_Proxytourl\",\n                            \"triggers\": [],\n                            \"MatchRegexp\": null\n                        },\n                        {\n                            \"path\": \"/my/1.0/api/token\",\n                            \"method\": \"POST\",\n                            \"match_pattern\": \"/my/\\\\d.\\\\d/api/token\",\n                            \"rewrite_to\": \"$tyk_context.headers_X_My_Proxytourl\",\n                            \"triggers\": [],\n                            \"MatchRegexp\": null\n                        }\n                    ]\nIf I just set the path/match_pattern back to /.* then it works. I'm changing nothing else other than those two properties of the url-rewriter\n. i'm going to move this over to the support channel . I see a PR... any thoughts when this could get out into a release @buger ?. i guess I'm a bit confused now. If this PR is included a release... we are going to have to change.... what  exactly?. Understood however I have the following questions:\n1) It sounds like upgrading to 2.7.x is not going to be possible with existing API defs as currently defined and working with 2.6.4. IF I did want to migrate those API defs to 2.7.x what changes need to be made to the API defs to work in 2.7.x?\n2) Otherwise: If I wait until 2.8.x is released (with this PR included), what changes will have to be made to my API defs to work w/ 2.8.x?. > Regarding way to adopt existing apis, you just need to exclude listen path from your urls when you url paths in API definition.\nCan you please explain? I don't follow this. So for 2.7.x we need to exclude listen path from what property/section specifically in an API def? \n. Ok so for 2.7.x \"as-is\" any of these url-rewriters would would have to be replaced with / or /.* \nFor 2.8.x (assuming this is \"fixed\") they can go back to the /my/\\\\d.\\\\d/oauth/token format...\ncorrect?. For anyone else coming across this problem, the issue is that the paths and/or match_pattern in scope of anything under endpoint designer (i.e. whitelists/urlrewrites) are intended to be relative from the slug... not inclusive of the slug.. The plugins don't mutate the body, the only thing they do at most is add/mutate headers.. @adelowo moving this back to support ticket. ",
    "bbl232": "Also seeing this panic in 2.3.4 on container start. The strange thing is that I'm running the same docker image in two places with the same config and one is fine while the other one is seeing this error.. For what it's worth: restarting the dashboard put things in a good state again... somehow.. ",
    "jmleoni": "\ud83d\udc4d . ",
    "mattfarina": "@matiasinsaurralde Thanks.\nThe docs appear to assume an environment like ubuntu. And, if I look at the tyk gateway docker image it notes ubuntu. That seems heavy for a docker image. Is ubuntu needed or just python 3.4?\nAside from python 3.4 are there other requirements?. @mvdan I'm more looking at running this in a container and trying to figure out the minimum requirements for a container image. If I can avoid passing around large images I would like to do so.. ",
    "QuduSEC": "@buger, @lonelycode I asked about this at the support.tyk.io #799 But support for some reason, did not respond.\nSupports caching with tokens and without, is really very important. I think the problem can be solved in two ways:\n\nImplement support schemes, by analogy with nginx.\nAdd support for exception named query parameters. For example: exclude access _token. @lonelycode, we have already discussed this issue on the support.tyk.io. Please make the option to activate/disable the sanitization process. For example, in our company it is very important to see all HTTP query params, but Tyk removes this data. We can delete such data ourselves when parsing logs, for example in logstash.. \n",
    "BlackTurtle123": "I still have a 404/Not found on all api calls.\nWhat should I do?. latest version.\nClean install.\nOn the forum my ticket is open for over 2 week or something.. ",
    "a-wakeel": "@buger i still have the same issue, does that mean i have some problem in configurations or the bug is still here?. @joshblakeley i had that issue in containerized version but with manual on ubuntu, this issue has been resolved.. In addition to that i'm also getting this error before hitting the api:\nlevel=error msg=\"can't initialize a dispatcher\". Its python 3.4.8. Yeah running it on ubuntu 16.04 and here is the output of the command:\nlinux-vdso.so.1 =>  (0x00007ffc0918a000)\n    libpython3.4m.so.1.0 => /usr/lib/x86_64-linux-gnu/libpython3.4m.so.1.0 (0x00007f47a866a000)\n    libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f47a844d000)\n    libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f47a8083000)\n    libexpat.so.1 => /lib/x86_64-linux-gnu/libexpat.so.1 (0x00007f47a7e5a000)\n    libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007f47a7c40000)\n    libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f47a7a3c000)\n    libutil.so.1 => /lib/x86_64-linux-gnu/libutil.so.1 (0x00007f47a7839000)\n    libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f47a7530000)\n    /lib64/ld-linux-x86-64.so.2 (0x00007f47a8c3e000). Gateway Version: v2.6.1 (for both tyk and tyk-python)\nGateway logs after restarting the gateway:\n11:23:48 ubuntu.gluu.info systemd[1]: Stopping Tyk API Gateway (Python Support)...\n\u0645\u0653\u06cc 18 11:23:48 ubuntu.gluu.info tyk-python[18448]: 2018/05/18 11:23:48 terminated\n\u0645\u0653\u06cc 18 11:23:48 ubuntu.gluu.info tyk-python[18448]: time=\"May 18 11:23:48\" level=info msg=\"Stop signal received.\"\n\u0645\u0653\u06cc 18 11:23:48 ubuntu.gluu.info tyk-python[18448]: time=\"May 18 11:23:48\" level=info msg=\"Stopping heartbeat...\"\n\u0645\u0653\u06cc 18 11:23:50 ubuntu.gluu.info tyk-python[18448]: time=\"May 18 11:23:50\" level=info msg=\"Stopped Heartbeat\"\n\u0645\u0653\u06cc 18 11:23:50 ubuntu.gluu.info tyk-python[18448]: time=\"May 18 11:23:50\" level=info msg=Terminating.\n\u0645\u0653\u06cc 18 11:23:51 ubuntu.gluu.info systemd[1]: Stopped Tyk API Gateway (Python Support).\n\u0645\u0653\u06cc 18 11:23:51 ubuntu.gluu.info systemd[1]: Started Tyk API Gateway (Python Support).\n\u0645\u0653\u06cc 18 11:23:51 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:23:51\" level=info msg=\"Setting PYTHONPATH to 'coprocess/python:middleware/python:event_handlers:coprocess/python/proto:/opt/tyk-gateway/middleware/bundles/3c21b603380a496576f472074a03a4c7-bundle.zip:/opt/tyk-gateway/middleware/bundles/901b111584574f607e90366d37b98e19-bundle.zip:/opt/tyk-gateway/middleware/bundles/b3b9554bd37c4ce94c07d9cdb1d23f86-bundle.zip:/opt/tyk-gateway/middleware/bundles/fe4ff54e5a6b4906647e3a7ff25be8ae-bundle.zip'\"\n\u0645\u0653\u06cc 18 11:23:51 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:23:51\" level=info msg=\"Initializing interpreter, Py_Initialize()\"\n\u0645\u0653\u06cc 18 11:23:51 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:23:51\" level=error msg=\"can't initialize a dispatcher\"\n\u0645\u0653\u06cc 18 11:23:51 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:23:51\" level=info msg=\"Setting up analytics normaliser\"\n\u0645\u0653\u06cc 18 11:23:51 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:23:51\" level=info msg=\"PIDFile location set to: ./tyk-gateway.pid\"\n\u0645\u0653\u06cc 18 11:23:51 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:23:51\" level=info msg=\"Initialising Tyk REST API Endpoints\"\n\u0645\u0653\u06cc 18 11:23:51 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:23:51\" level=warning msg=\"File descriptor limit 1024 too low for production use. Min 80000 recommended.\\n\\tThis could have a significant negative impact on performance.\\n\\tPlease refer to https://tyk.io/docs/deploy-tyk-premise-production/#file-handles for further guidance.\"\n\u0645\u0653\u06cc 18 11:23:51 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:23:51\" level=info msg=\"Redis connection pools are ready after number of retires\" currRetry=0\n\u0645\u0653\u06cc 18 11:23:51 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:23:51\" level=info msg=\"Redis connection pools are ready\"\n\u0645\u0653\u06cc 18 11:23:51 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:23:51\" level=info msg=\"--> Standard listener (http)\" port=\":8080\"\n\u0645\u0653\u06cc 18 11:23:51 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:23:51\" level=info msg=\"Setting up Server\"\n\u0645\u0653\u06cc 18 11:23:51 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:23:51\" level=info msg=\"Waiting for zeroconf signal...\"\n\u0645\u0653\u06cc 18 11:23:52 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:23:52\" level=warning msg=\"Insecure configuration detected (allowing)!\"\n\u0645\u0653\u06cc 18 11:23:52 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:23:52\" level=info msg=\"Hostname set with dashboard zeroconf signal\"\n\u0645\u0653\u06cc 18 11:23:52 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:23:52\" level=info msg=\"Registering node.\"\n\u0645\u0653\u06cc 18 11:23:52 ubuntu.gluu.info tyk-analytics[15858]: time=\"May 18 11:23:52\" level=error msg=\"No nodes available\"\n\u0645\u0653\u06cc 18 11:23:52 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:23:52\" level=error msg=\"Response failed with code 404; retrying in 5s\"\n\u0645\u0653\u06cc 18 11:23:57 ubuntu.gluu.info tyk-analytics[15858]: time=\"May 18 11:23:57\" level=error msg=\"No nodes available\"\n\u0645\u0653\u06cc 18 11:23:57 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:23:57\" level=error msg=\"Response failed with code 404; retrying in 5s\"\n\u0645\u0653\u06cc 18 11:24:01 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:01\" level=info msg=\"Starting Poller\"\n\u0645\u0653\u06cc 18 11:24:02 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:02\" level=info msg=\"Node registered\" id=be99bf0d-e4e3-4bb7-456d-021aeed99bfe\n\u0645\u0653\u06cc 18 11:24:02 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:02\" level=info msg=\"Gateway started (v2.6.1)\"\n\u0645\u0653\u06cc 18 11:24:02 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:02\" level=info msg=\"Initialising distributed rate limiter\"\n\u0645\u0653\u06cc 18 11:24:02 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:02\" level=info msg=\"--> Listening on address: (open interface)\"\n\u0645\u0653\u06cc 18 11:24:02 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:02\" level=info msg=\"--> Listening on port: 8080\"\n\u0645\u0653\u06cc 18 11:24:02 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:02\" level=info msg=\"--> PID: 18470\"\n\u0645\u0653\u06cc 18 11:24:02 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:02\" level=info msg=\"Loading policies\"\n\u0645\u0653\u06cc 18 11:24:02 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:02\" level=info msg=\"Using Policies from Dashboard Service\"\n\u0645\u0653\u06cc 18 11:24:02 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:02\" level=info msg=\"Mutex lock acquired... calling\"\n\u0645\u0653\u06cc 18 11:24:02 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:02\" level=info msg=\"Calling dashboard service for policy list\"\n\u0645\u0653\u06cc 18 11:24:02 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:02\" level=info msg=\"Starting gateway rate limiter notifications...\"\n\u0645\u0653\u06cc 18 11:24:02 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:02\" level=info msg=\"Processing policy list\"\n\u0645\u0653\u06cc 18 11:24:02 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:02\" level=info msg=\"Policies found (1 total):\"\n\u0645\u0653\u06cc 18 11:24:02 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:02\" level=info msg=\" - 5af4160ee224475e6a42f879\"\n\u0645\u0653\u06cc 18 11:24:03 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:03\" level=info msg=\"Detected 2 APIs\"\n\u0645\u0653\u06cc 18 11:24:03 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:03\" level=info msg=\"Preparing new router\"\n\u0645\u0653\u06cc 18 11:24:03 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:03\" level=info msg=\"Initialising Tyk REST API Endpoints\"\n\u0645\u0653\u06cc 18 11:24:03 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:03\" level=info msg=\"Loading API configurations.\"\n\u0645\u0653\u06cc 18 11:24:03 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:03\" level=info msg=\"Tracking hostname\" api_name=test domain=\"(no host)\"\n\u0645\u0653\u06cc 18 11:24:03 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:03\" level=info msg=\"Tracking hostname\" api_name=xyz domain=\"(no host)\"\n\u0645\u0653\u06cc 18 11:24:03 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:03\" level=info msg=\"Loading API\" api_name=xyz\n\u0645\u0653\u06cc 18 11:24:03 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:03\" level=info msg=\"Loading API\" api_name=test\n\u0645\u0653\u06cc 18 11:24:03 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:03\" level=info msg=\"Loading existing bundle: bundle.zip\"\n\u0645\u0653\u06cc 18 11:24:03 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:03\" level=info msg=\"----> Loading bundle: bundle.zip\"\n\u0645\u0653\u06cc 18 11:24:03 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:03\" level=info msg=\"----> Using bundle: bundle.zip\"\n\u0645\u0653\u06cc 18 11:24:03 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:03\" level=info msg=\"Checking security policy: Open\" api_name=xyz\n\u0645\u0653\u06cc 18 11:24:03 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:03\" level=info msg=\"Loaded: xyz\" api_id=dae0e07e01444c1562d67de846526fab org_id=5af1910be224471d7ccae5f7 server_name=-- user_id=-- user_ip=--\n\u0645\u0653\u06cc 18 11:24:03 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:03\" level=info msg=\"Checking security policy: Open\" api_name=test\n\u0645\u0653\u06cc 18 11:24:03 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:03\" level=info msg=\"Loaded: test\" api_id=3c21b603380a496576f472074a03a4c7 org_id=5af1910be224471d7ccae5f7 server_name=-- user_id=-- user_ip=--\n\u0645\u0653\u06cc 18 11:24:03 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:03\" level=info msg=\"Processed and listening on: /test/{rest:.*}\"\n\u0645\u0653\u06cc 18 11:24:03 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:03\" level=info msg=\"Processed and listening on: /xyz/{rest:.*}\"\n\u0645\u0653\u06cc 18 11:24:03 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:03\" level=info msg=\"Loading uptime tests...\"\n\u0645\u0653\u06cc 18 11:24:03 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:03\" level=info msg=\"Initialised API Definitions\"\n\u0645\u0653\u06cc 18 11:24:03 ubuntu.gluu.info tyk-python[18470]: time=\"May 18 11:24:03\" level=info msg=\"API reload complete\"\n\u0645\u0653\u06cc 18 11:24:05 ubuntu.gluu.info tyk-analytics[15858]: time=\"May 18 11:24:05\" level=info msg=\"Sending config request for node: be99bf0d-e4e3-4bb7-456d-021aeed99bfe-ubuntu.gluu.info\"\n\u0645\u0653\u06cc 18 11:24:05 ubuntu.gluu.info tyk-analytics[15858]: time=\"May 18 11:24:05\" level=info msg=\"Got configuration for nodeID: be99bf0d-e4e3-4bb7-456d-021aeed99bfe|ubuntu.gluu.info\"\nLogs after hitting the api:\n11:24:58 ubuntu.gluu.info tyk-python[18470]: 2018/05/18 11:24:58 http: panic serving [::1]:57656: runtime error: invalid memory address or nil pointer dereference\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]: goroutine 6457 [running]:\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]: net/http.(*conn).serve.func1(0xc420b26320)\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]:         /usr/local/go/src/net/http/server.go:1697 +0xd0\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]: panic(0xd6a1e0, 0x16ac600)\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]:         /usr/local/go/src/runtime/panic.go:491 +0x283\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]: main.(*CoProcessor).Dispatch(0xc420b19908, 0xc420a86cc0, 0xc420a86cc0, 0x2, 0xc420b5a3e8)\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]:         /src/github.com/TykTechnologies/tyk/coprocess_native.go:49 +0xdc\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]: main.(*CoProcessMiddleware).ProcessRequest(0xc420a60000, 0x16e1e60, 0xc420b5e000, 0xc4205e7500, 0x0, 0x0, 0x1c, 0x7f55471447f8, 0x0)\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]:         /src/github.com/TykTechnologies/tyk/coprocess.go:263 +0x26e\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]: main.createMiddleware.func1.1(0x16e1e60, 0xc420b5e000, 0xc4205e7500)\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]:         /src/github.com/TykTechnologies/tyk/middleware.go:84 +0x5a3\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]: net/http.HandlerFunc.ServeHTTP(0xc420a60200, 0x16e1e60, 0xc420b5e000, 0xc4205e7500)\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]:         /usr/local/go/src/net/http/server.go:1918 +0x44\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]: github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux.(*Router).ServeHTTP(0xc420867980, 0x16e1e60, 0xc420b5e000, 0xc4205e7500)\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]:         /src/github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux/mux.go:150 +0xed\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]: main.mainHandler.ServeHTTP(0x16e1e60, 0xc420b5e000, 0xc420b44100)\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]:         /src/github.com/TykTechnologies/tyk/main.go:1161 +0x73\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]: main.(*mainHandler).ServeHTTP(0x17c3220, 0x16e1e60, 0xc420b5e000, 0xc420b44100)\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]:         <autogenerated>:1 +0x52\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]: net/http.serverHandler.ServeHTTP(0xc4205fc0d0, 0x16e1e60, 0xc420b5e000, 0xc420b44100)\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]:         /usr/local/go/src/net/http/server.go:2619 +0xb4\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]: net/http.(*conn).serve(0xc420b26320, 0x16e2e20, 0xc420879f40)\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]:         /usr/local/go/src/net/http/server.go:1801 +0x71d\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]: created by net/http.(*Server).Serve\n\u0645\u0653\u06cc 18 11:24:58 ubuntu.gluu.info tyk-python[18470]:         /usr/local/go/src/net/http/server.go:2720 +0x288. getting same error after making those changes. are you talking about protobuf and grpcio? Yes i have them installed. Is there any other requirements?. The problem was resolved by reinstalling the gateway from start. ",
    "ossvn": "I have this problem too, after adding the API in the dashboard (with custom domain).\nThen I try with postman, it returned 404.. Hello @buger \nYup, I'm sure I'm calling with the right domain (I pointed my domain in Cloudflare to the VPS's IP).\nI also tried the request with different types, none of them are going to work:\n\nIP:3000/endpoint\nIP:8080/endpoint\ndomain:3000/endpoint\ndomain:8080/endpoint\n\nAlso, after setting the CNAM for the portal, I followed the instruction to set up the portal in admin, but when I go to the domain:3000/portal, 404 error shows.\nnot sure what's happening!. I will test tomorrow and report for you.\nFor the question, API without the domain, still not work as well. That's weird.\nI will keep you updated!. ",
    "csyllac": "Hi - to add more detail to this, it is a bug - but when it was described on the forum there was some confusion about the actual steps to cause it.\nThe actual issue:\nChanging policies in the JWT is not properly handled by tyk if the SUB (identity) has already established a valid session.\nTo reproduce:\n- create a policy file with two policies, 'a' and 'b'\n- create JWT with sub '1' and policy 'a'\n- make valid request using that JWT - which will pass\n- create a second JWT with sub '1' and policy 'b'\n- make a request, and tyk will still enforce policy 'a', not policy 'b''\n- create a third JWT with sub '1' and policy 'c' (which does not exist in the policy file)\n- make a request and tyk will still enforce policy 'a' even though 'c' does not exist at all\nAccording to the documentation, \" the policy will be applied the first time the token is seen and then modified if the policy changes in the claim\".\nWhat actually happens is that tyk keeps applying the policy of the first successful request instead of detecting that the policy has changed and applying the new policy (or failing if the new policy does not exist).\nIf the first request is made with a JWT that contains a non-existent policy tyk returns 403 correctly.\nThis was tested with tyk 2.3.3 CE.. ",
    "silentfishwm": "Yes I suppose an option would be preferred, so that we have a choice. \nBut from my viewpoint, it makes little sense for API publishers to enable IP whitelisting if they allow arbitrary proxies - the IP whitelisting doesn't put effective restriction anyway and its name \"IP whitelisting\" is somewhat misleading.\nTherefore, my humble opinion is, IP whitelisting is an extreme access control which should't be used along with arbitrary proxies at all. If both proxies and IP restrictions are necessary, then a practical approach would be whitelisting the proxy IPs.\nTried to remove the header using \" Modify headers\" middleware, but seems like it couldn't be removed.... ",
    "kcq": "Whitelisting allowed proxies could be a bit brittle (because it relies on hard coded IP addresses, which might be hard to control in dynamic cloud environments), but it's a nice advanced feature. The standard way should be based on the number of proxies you trust. TrustProxy = 0 would mean that you don't trust any XFF data. TrustProxy = 1 would mean you trust the last proxy in the chain, etc.. ",
    "chenjh880730": "can i change redis to any other k/v storage \uff1flike zookeeper \uff1f consul ?. ",
    "JasonSheedy": "Awesome guys. Thanks for fixing this.. ",
    "nebolsin": "Looks like there's syntax error in virtual endpoint example from Tyk documentation page (also appears in changelog).\n@mftaha try adding comma after Body: \"THIS IS A  VIRTUAL RESPONSE\" line.. @nezorflame thanks for pushing this forward \ud83d\udc4d . ",
    "willks": "I voted for this feature as we are migrating from another gateway that had this functionality.. We require this as well. We have a use-case for doing some auth logic based on GET/POST/PUT requests. I realise it's silly to have this in middleware, but unfortunately we are accessing legacy systems that are no longer being actively developed.\nAs a workaround, I tried manipulating headers and injecting a new header \"X-TYK-METHOD\" using endpoint designer, but the injected values aren't reflected in the middleware request.. ",
    "joesaby": "+1 for this. \nBody transformations are pretty powerful. I would have liked allowing of handling complex remappings. Also the power of deep inspection of Headers to allow constructing body header would be useful. \nEg: I get a 5xx error, but i want to transform the error response to a custom error response but maintain the response code. . ",
    "lhbotha": "Hi,\nI have the following versions installed:\ntyk-dashboard 1.3.2 amd64\ntyk-gateway 2.3.3 amd64\nBr,\nLouis. ",
    "Pinpin31": "We try to do a body transform like that with plugin body transform :\n{\"url\":\"https://original_url/1535719117-daff25c796e29855b2ae8df7194cbe2b2753739f-attestation.pdf\"}\nto \n{\"url\":\"https://other_url/1535719117-daff25c796e29855b2ae8df7194cbe2b2753739f-attestation.pdf\"}\nI think that a search/replace functions would be great to do that.\nIs this possible to add functions from gtf library ? https://github.com/leekchan/gtf\n. Yes replace from gtf is a strip function; \nSprig seems better : http://masterminds.github.io/sprig/ ?\nI see another issue #640 with the same request.. Yes the same thing that is possible in endpoint designer per path but globally per api. It's actually possible in definition model (json file for gateway) : https://tyk.io/docs/control-limit-traffic/request-size-limits/#max-request-size-with-api\nBut I didn't find the parameter through the dashboard.\nThanks\n. Great.\nThanks. Version Tyk dashboard 2.5.1 correct this problem.\nI think you could close this issue.\nThanks. @joshblakeley \nYes we schedule to the 2.7 version for this instance. We have anothers instances already migrate in 2.7.\n@buger \nGood point. The tyk startup log complain on file tyk.js :\ntime=\"Sep 18 15:54:21\" level=error msg=\"Could not load user's TykJS: open /opt/tyk-gateway/js/tyk.js: no such file or directory\"\nWhere is this file on standard installation ?\n. Ok this works with an empty file :\ntouch /opt/tyk-gateway/js/tyk.js\nThanks. Good idea :+1: . I made an issue with the same problem to search keys #1285 . ",
    "excieve": "@nickReyn Haven't touched this yet. Can prioritise if that's needed rather sooner, along with others related to packaging.. Addressed in https://github.com/TykTechnologies/tyk/pull/1330. As well as in other components.. Addressed in https://github.com/TykTechnologies/tyk/pull/1330. As well as in other components.. I think this should be re-prioritised and divided into two features:\n - readiness health check, which can be mostly as it currently is\n - liveness health check, which should be more advanced\nReadiness check should be fast and respond with success as soon as the application fully starts, liveness check should return error on critical components failure. This maps to k8s readinessProbe and livenessProbe, where the former influences basic ability to accept traffic (critical for quick scaling and restarts) and the latter hints about whether the service is not healthy while already running and should be restarted. See k8s docs on the subject for more details.\nBoth should optionally be serving on a port different from the main router so that in case main is running with https, health-checks can still serve on http. This helps to avoid a situation where under heavy load restarts (due to inability to reach the port within timeout) create an even worse situation.. @mvdan Re commits: it's pretty much rewritten now so should be fine to just squash I think.\n@buger There's nothing really different in the release branch so this shouldn't be a problem. When done \u2014 I'll just amend the pipelines accordingly.\nI'll also check out other parts' build scripts a bit later.. @mvdan Is there anything left to do before merging this?. @mvdan This was a suggestion by @buger to use the latest 1.8.x on staging pipelines.. @mvdan @buger Deployed it on staging and it appears to work fine now.. @dragon28 Manually changing the distro release to trusty or precise in /etc/apt/sources.list.d/tyk_tyk-dashboard.list (and other tyk repos) should work just fine until we add a package specifically for it. We don't really depend on anything distro-specific in these packages.. @matiasinsaurralde FYI, what do you think?. @matiasinsaurralde Cython-generated code is what currently breaks it for me as it uses C API outside of the stable subset a lot. If there's a way to sanely drop it and use limited API all around \u2014 it should probably be better than embedding. This would enable us to set Python 3.2+ in package dependencies, build with whatever version we like and forget about it.\nPlease let me know which path you think is better to follow. I can work on static embedding next week.. @matiasinsaurralde Do I understand correctly that there are basically two ways to replace the Cython-generated module: using CFFI or a writing a C module by hand?\nThis glue code doesn't seem to do much indeed so it might be easy enough to actually just do the latter. I can look into it if you have other things to do.. @buger There will be build scripts changes in this repo for this purpose so I think let it stay open for now.. Thanks, the fix is coming up with packaging updates.. This will be fixed when #1330 lands and gets released. For now, forcing reinstall should bring the init scripts back.. Hmm, tests timeout on 1.9 doesn't seem to be related to this.. Thanks for your report @shiva2991. The packaged binaries are currently built against Python 3.4, which may be binary incompatible with 3.5. There are currently three options around it:\n 1) using our docker images, which come with vetted components\n 2) installing Python 3.4, along with protobuf and grpcio using pip for this distribution\n 3) compiling Tyk gateway from sources against 3.5\nWe're also working on a better support for various versions of Python in #1283.. @matiasinsaurralde So that's the Py_LIMITED_API approach to #1283. I've tested it somewhat and it works! But more testing and cleanup is needed (will do next week). Please take a look.. So, while this works in terms of being compiled for limited API set, there's a problem with properly linking it to libpython. PEP-384 recommend linking against libpython3.so in this case, which appears to be a tiny library that does runtime dynamic linking to the actual libpython3.x.so. There are two problems with this:\n * It appears not every disto packages it, e.g. I couldn't find it on Ubuntu 16.04.\n * It doesn't seem to work with embedding \u2014 fails on linking stage, requires symbols from the actual libpython. I think it was meant to be used with extensions rather than to invoke the interpreter itself.\nWe could probably do some dirty tricks with symlinking the actual library and it should work but that won't do well in the packages. I'll see if statically linking concrete libpython would still allow us to use system Python's stdlib and site/dist-packages.\nI'll also check if maybe my distro's Python package is funky re libpython.so and compile it manually, it could be distributed then.. Right, so this won't work well unfortunately. At least I don't see a clean way to dynamically link libpython3.\nFirst, libpython3 wrapper can't be linked from an executable as it does runtime dlopen of the concrete libpython3.x. This only works with other dynamic libs (e.g Python extensions). It could possibly work if we move the Python coprocess stuff to a separate package an build it with something like -buildmode=shared, link it against generic libpython3 and then link tyk executable to it.\nThis, however, brings us to the second issue \u2014 distros vary in how they package libpython. So far I've seen two ways:\n * RedHat distros (Fedora, CentOS, EL) would properly package the generic libpython3.so.\n * Debian-based (including Ubuntu) would not do that and instead only provide concrete libpython3.5m.so, etc.\nI believe some others might do the SONAME trick and let concrete libs be runtime linked by execs compiled against other versions.\nAnyway, that's where the plan with linking against the generic lib in some way falls flat. Unless there are any ideas, I'm going to proceed with compiling in libpython3.x statically (this works fine) and packaging the stdlib along with it.\nThe handcrafted C module is still going to be useful I think \u2014 it's got a lot less cruft than the Cython thing and I think it might be fixing a memleak that Cython would happily ignore.. @buger Our direct dependencies (protobuf and grpcio) can be packaged straight into the stdlib we'd distribute.\nThings get more difficult with packages installed by the users. We'll need to provide a way for them to install into our custom PYTHONHOME. There are several ways to do it, e.g:\n * provide a pip in the distribution that's configured for it and document it for the users, this is pretty similar to what virtualenv does, in fact it might be possible to just use virtualenv for this\n * integrate it into the bundling so that the tyk-cli command would read the plugin dependencies metadata and install them directly into the bundle (and working out the PYTHONPATH for them) thus allowing various versions of the same dependencies in different bundles\nThe latter is probably more user-friendly.. This, of course, would not work with existing installations. I wonder if there's a way to provide some compatibility plan for the time being. E.g. statically compiling Python 3.4 and defaulting to its system PYTHONHOME. Then deprecating this in some later release and compiling for a more recent Python.. @buger Yes, this is still useful \u2014 I think it fixes a memleak in the glue module at the very least.\nRe compatibility... it's complicated. Compiling for limited API is supposed to make you compatible with any 3.2+ runtime. However, it seems to only have substantial effect when you're making an extension rather than embedding an interpreter as we do (either by dynamically linking libpythonx.y or statically).\nIn theory, it should still make the executable more compatible across the runtimes but it does not at all mean dynamic linking compatibility because distros can pack libpython is lots of various ways (as I explained in comments above).\nPlan B might mean we'd have to link against libpython3.4 for CentOS6/Debian Jessie derived packages and against libpython3.5 for CentOS7/Debian Stretch packages, which currently covers the supported range of distros. This is of course doable and is mostly a building/packaging concern: separate build steps, different packages. Good thing it's just two cases at the moment but we'll need to keep that updated.. I also have a terrible hack in mind to experiment with \ud83d\udc7f There's a tool named patchelf that can change some records of executables, including so names of dependencies. This can be done during package installation/upgrade by detecting the system's python libs. This way we wouldn't have to recompile/relink for different distros, provided we're compatible and tested.. @buger \n\nIf we build this separate packages, can we ensure that each system will automatically get own packages? Does package cloud supports it?\n\nOf course. I'll just need to make changes to the build/push scripts so that they end up in corresponding distro/version repository.\n\nAlso can you update this PR to latest master, to resolve conflicts, so we can merge it.\n\nSure.. I've resolved conflicts and manually tested with a simple plugin.. This is for 2.5 branch only as it diverges from master a bit on the packaging stuff. Will do the same for master a bit later, along with ownership changes.. I wonder if 0.0.0.0:0 would do the same with IPv4?. I just recalled why everything has been forced to IPv4: IPv6 being disabled in docker in certain environments. Although, since it works on dashboard and pump I suppose it's fine to keep IPv6 \u2014 perhaps those issues have been resolved by now.. Oh, and I believe Go 1.9 can dynamically choose v4 when v6 isn't available. Since we're compiling this for 1.9 now it should be fine.. I just realised there can be another bug: imagine the gateway has just started and there are two simultaneous requests to the same API (or different APIs of the same org) \u2014 A and B:\n 1. Both A and B acquire a read lock and pass the critical section with ok=false because the channel doesn't exist yet\n 2. Both reach the !ok block and e.g. A acquires the write lock, while B is blocked\n 3. A creates the channel and writes to the map, launches the sentinel goroutine, then releases the lock\n 4. B unknowing that the channel (map record and sentinel) already exist does (3) again\nResult: there are two channels and sentinels, while only the one created by B would be eventually used for reading.\nThe impact of this doesn't sound significant but still creates an \"orphan\" goroutine that listens on channel that is written to just once (by A). This means we either need the whole read-then-write block to be locked for r/w (which means readers will be blocked on every request) or add another map key existence check inside the write block. I need some advice on this.. @buger Will do in this one.\nThe thing I'm worried about with a simple r/w mutex is that middlewares are executed on the request goroutine and this particular middleware runs on pretty much any request. While I understand there's nothing computationally heavy going on there (especially in this small block), it means a request to any API will always block all the other requests to any other APIs, which can harm throughput under high load causing contention.\nThat said, if it's not really a concern for this block or there's a way to mitigate it (e.g. by disabling this middleware with an option \u2014 I'm not sure it's really needed on on-prem for instance) I'm happy to go with a simpler solution.. In fact, I just recalled there is an option to enable/disable off-thread org processing so that should cover it in case of performance issues with a simple mutex. I'll update this PR accordingly. Also I think we should keep it disabled it by default in our config templates as by default on-prem installations don't even have org sessions and on-thread implementation proceeds immediately in this case unlike the off-thread so I'll make this change too if there are no objections.. @buger Updated.. There are several confusing things. The option itself switches the\non-thread and off-thread org processing. Both update the org session state\nif it exists. Also on-thread returns earlier if there is no org session. It\nso happens that only the off-thread actually checks the org quota though.\nThat's why it needs to be enabled on the cloud. I'm not sure why is this\nand this needs a closer look in the context of quotas but both\nimplementations update the session.\n19 \u043b\u044e\u0442. 2018 \u0440. 18:19 \"Leonid Bugaev\" notifications@github.com \u043f\u0438\u0448\u0435:\n\nSo, I'm right that this option has an extremely confusing name, and in\nfact should be named smth \"enable_org_sessions\"?\nAsking that if you going switch it to false by default, we need to ensure\nthat documentation explicitly says that in multi-org environment it should\nbe turned on, right?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/TykTechnologies/tyk/pull/1474#issuecomment-366740225,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABBvyUSWWwiSIJH8FY26t9eQFFBYqk2Yks5tWZ8JgaJpZM4SEaYO\n.\n. @buger In this case I'd argue we should exit from the middleware soon as on-thread one does to avoid unnecessary locking and goroutines. Currently off-thread MW launches a bunch of goroutines even if org has no session, then checks for this in one of these goroutines. So it doesn't avoid all this even if there's no session.\n\nAlso differences in code paths between the two implementations need to be properly looked at. E.g. off-thread one doesn't go through the rate limiter, instead directly checking the quota, while the on-thread goes through the rate limiter, ignores its messages, listens for the quota message but actually disables quota check for some reason. Then, there's a separate MW that actually does the rate limiting so there's no real reason to go through it here.\nSo off-thread one seems to be the way to go indeed but needs some work to make sure we don't cause potential contention without a reason.. @buger Could you please merge this into master and 2.6 branch so that I could build the test packages?. Hi @hustshawn, this message looks like an issue with docker container. Could you please share which docker image are you using and how are you starting the container?. @hustshawn Thanks! The tyk-gateway image's entrypoint currently edits the conf file, which can cause issues when it's mounted as a volume. I've submitted a PR to workaround this: https://github.com/TykTechnologies/tyk-gateway-docker/pull/15. Already tested this on unstable build pipeline to create tyk-gateway-python36 packages.. FYI: Previously RPM packages also included the DEB package inside it so now it's about half in size :). Makes sense! Will look into it.. From the fpm man page:\n--config-files CONFIG_FILES   Mark a file in the package as being a config file. This uses 'conffiles' in debs and %config in rpm. If you have multiple files to mark as configuration files, specify this flag multiple times.  If argument is directory all files inside it will be recursively marked as config files.\nOne definition per line is fine by me \u2014 will do.. \ud83d\udc4d . \ud83d\udc4d . Repetition could be avoided here:\n.py\nbundle = self.find_bundle(bundle_id)\nif not bundle:\n    bundle = TykMiddleware(bundle_id)\n    self.bundles.append(bundle)\nself.update_hook_table(with_bundle=bundle). Should these be commented out?. Hmm, this doesn't look right \u2014 the_hooks is a list according to line 78. Unless it becomes a dict on 80, in which case line 78 should be changed to the_hooks = {} to avoid confusion.. Nitpicking but it can be more concise:\n.py\nhook = hooks.get(hook_name)\nif hook:\n    return hook.middleware, hook. Is this needed?. This might be fixing a memleak btw.. As a note on mutex vs sync.Map, although in this case the map is append-only and hence kind of works of the latter, some benchmarks show that it only performs better during very high read contention over 4-8+ real cores. In other cases it significantly looses to the mutex-based maps. At the same time sync.Map looses type-safety so I decided against this premature optimisation and I'm not sure it fits orgActiveMap either (it's not at all append-only as the sentinel goroutine writes at the same keys all the time).. Thanks for the suggestion but I think this needs explicit locking control (see another comment on the PR).. ",
    "drpebcak": "@mvdan I could change the other instances of strings.Replace() , but I'm not sure if any of those are in scope for the issue I am trying to fix here.\nI think strings.Replace() is still the right answer, as long as we are trimming just that first instance. To @lonelycode's point, we can't say for sure that there isn't another proxy downstream, but we can say that tyk is only going to match against the first instance of listen path when it decides how to route - it makes sense then that only the first instance would be eligible for removal.. Interestingly enough, I'm not using any of those things.\nMy api definition is super basic - https://gist.github.com/drpebcak/50b3d1e1fcbcfd88e31605528b5d9b68\nWith this configuration, I'm seeing logged entries from tyk that show requests being munged as they pass through tyk...\nhttp://my-tyk-gateway.com/sites/sites/1234 is being sent through to the backend as http://example.com:8080/api1234. And for completeness sake, I am using version 2.3.4 of the gateway, and (if it matters) version 1.3.4 of the dashboard.. Hey,\nThat's actually the path for my target url (only the domain was changed).\nIf I curl without the trailing slash it 404s, because my listen path in tyk is configured with the trailing slash. If I change my config so the listen path is /example_api without that slash, visiting http://example.com/example_api  302s to /api/ still.. @buger yeah it does look like that. This behavior is new since the upgrade I did to tyk. Is there a workaround or something I can do to get around this?. Hey, thanks for the suggestion. I just set those options in my gateway config, but the same thing is happening.. @buger any more ideas on this?. @asoorm  here you go: https://gist.github.com/drpebcak/6bcf113ac02205818d6f0f569a0f3f64. I think the main difference here is that when hitting my api, directly, it will redirect http://example-api.example-api.rancher.internal:8080/api to http://example-api.example-api.rancher.internal:8080/api/ (note the trailing slash). It looks like tyk is not sending requests with the trailing slash like it used to, even though it's in my target_url.\nIt works ok for httpbin because they don't redirect to the trailing slash (in their case, it actually doesn't work at all with a trailing slash).. @buger any more ideas or fixes for this one?. Thanks!. ",
    "jfranx": "That makes sense. Each API needs to be selected before sending by the dashboard. \nThe bright side is that the dashboard has this information available. It needs to load the API definitions and match the tag with the node identifier.\nMaybe there's even a better approach, match tyk-gateway identifiers with organisation objects.\nThen you can send only the API's belonging to an organisation to a gateway of choice. This provides a very acceptable level of separation. On the gateway side you would not even need tags, they could still be available for whoever wants to use them but it'd not have to be required for sharding.\nI'm aware that what I'm asking isn't a small feature but it would be a huge security benefit.\n. ",
    "marians": "Stripe also has a good implementation of this concept with some advanced guarantees. They obviously need it to prevent undesired multiple financial transactions through retries. The key term is idempotency.\nSee https://stripe.com/docs/api?lang=curl#idempotent_requests\nIf this is what the original requester intended, I add my +1 for the feature request! We are currently implementing this on a per-endpoint basis and would love to offload this to the gateway.. @buger Is that jsonschema available somewhere?\nA bit of background: I am currently evaluating. Our workflow would most likely be git-based, so that our API definitions would live in JSON files in a repository. I don't see a use currently for the Dashboard. Requiring the dashboard to submit some more or less static API definitions doesn't seem the right way to me.. Thanks for the schema Gist. Any plans to make that live in an open repository?. Thanks for your quick responses, here and in the other issues.. ",
    "rhuiser": "This is exactly what I meant opening this CR.\nBest -- Robin \nSent from my iPhone\n\nOn 24 Jul 2017, at 16:37, Marian Steinbach notifications@github.com wrote:\nStripe also has a good implementation of this concept with some advanced guarantees. They obviously need it to prevent undesired multiple financial transactions through retries. The key term is idempotency.\nSee https://stripe.com/docs/api?lang=curl#idempotent_requests\nIf this is what the original requester intended, I add my +1 for the feature request! We are currently implementing this on a per-endpoint basis and would love to offload this to the gateway.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "letzya": "@asoorm Can you please update what's the status of this bug? thanks . Another client's request. At the moment they have statsD between Prometheus and Tyk but would prefer to have it OOTB.. \nPer @lonelycode: That should be handled in TIB, so add it to the product backlog.. Fixed already. https://github.com/TykTechnologies/tyk/blob/3aa2858d0699f3f4908c489f5123de5dedceb4a7/mw_jwt.go#L438. Happens only with this api, will check again.. Ahmet, Dan has already checked it and I replied 2 hours ago that it happens only with a specific api i.e. I will check again. . Can't reproduce but it is happening on one of my apis. Maybe tomorrow we can have a look together?. @mvdan I think it's because I named my api as 'api2'.. @buger doesn't that make this ticket unnecessary ?. It's from the same source and meeting and what they want is to see what are the rate limits and quotas of a certain key. That ticket is another related aspect.  The fact is that they want the key to get updated after a policy gets changed. If updating a policy would be reflected in the key (during policy update) or needs to be triggered with a click of a button it doesn't matter but it would  allow for this ticket to show the correct information in case we will show the policy's values on the key's page.. Happens also with access_token generated by oauth/token endpoint:\nToken with 1,2 or 3 chars gives incorrect response:\n\nyaara@Yaara's Mac ~ $ curl  https://letz2.cloud.tyk.io/oauth2.0-api/ -H 'authorization: bearer ddd'\n{\n    \"error\": \"Access to this API has been disallowed\"\n}. Hi @mikarintala\nUnfortunatly it's not possible for the time being.\nIf you check the code of TIB which is open source, you'll see that it makes use of Dashboard Admin API calls (secret is in the tib.conf), and since you can't had admin access to the dashboard on the cloud (which is managed by us) you won't be able to achieve that at the moment unless you go on-prem. If you have an on-prem we have a step-by-step guide (soon to be a blog post as well) to implement that with Okta as an IdP. @mikarintala ,\nI have checked and although this isn\u2019t a standard Tyk cloud service, it might be possible to create a custom package for you. Please can you send your contact details to info@tyk.io to discuss?\n. Regardless to the buggy code, ff it's blank we set it to ssoSession@ssoSession.com. Do you @joshblakeley had another suggestion?\n@buger Actully, once it's working, maybe we should return an error?. Another client had asked for this feature\n. Put as Priority: Low since it's working as it is (though it can make our users' lives easier and less error prone). What about other response codes?  they would just be blocked?\nFor instance:\n - When rate limit exceeded\n - When global rate limit exceeded 429\n - When quota exceeded\n - When access denided\n - Access to this API has been disallowed\n - Key has expired, please renew 401\n\nSorry, haven't thoroughly checked, this is off the top of my head. @matiasinsaurralde can you please have a look?. Sorry, but don't think it's  working.\n1. create api\n2. add endpoint and tick modify header.\n3. set 'ip'  as the endpoint add header on the response(x-tyk-new 123)\n4. Confirm you can see the header\n5. Add url rewrite(http://httpbin.org/xml for instance)\n6. Test and see that header dissapears\n(I think it hasn't disappeared  on the first try). Ok, will check. Maybe my env was not up to date with the fix.. https://github.com/TykTechnologies/tyk/issues/1834 that's the one. We were asked to start with pinning with subjectPublicKeyInfo\nhttps://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning. pinset- If more than one certificate or public key is acceptable, then the program holds a pinset . Per @asoorm have copied from the main issue:\nWhat about other response codes? they would just be blocked?\nFor instance:\nWhen rate limit exceeded\nWhen global rate limit exceeded 429\nWhen quota exceeded\nWhen access denided\nAccess to this API has been disallowed\nKey has expired, please renew 401\n\nSorry, haven't thoroughly checked, this is off the top of my head. Can another solution be to check the sub and pol field in case the kid was not found in the cache or redis?. If you have a number in the \u201caud\u201d does it work?. @furkansenharputlu \nso the bug is in saving the key - add tag and open again from the \u201ckey screen\u201d\nit\u2019s because the policy overrides the key.. @buger - please review. thanks. @dencoded Have replied all your comment and checked in the changes. I think there were 2 comments I have answered you without making code change.. Have fully tested the feature.\n1. Tested centralised JWT - \n - With default claim 'sub'  - request pass - GOOD\n - With changing it to 'subject' (anything different from 'sub') - request pass - GOOD\n - Setting 'kid' in the header does not make a difference\n2. Individual JWT secrets - \n - \"jwt_skip_check_kid_as_id\": false \n    - The token (created a key and put my public key in it) in 'kid' - request pass - GOOD\n    - The token in 'sub' and 'kid' has another value - request fails - GOOD\n -\"jwt_skip_check_kid_as_id\": true\n   -  The token in 'kid' - request fails - GOOD\n   -  The token in 'sub' - request pass - GOOD\n   -  The token in 'subject', api definition expect 'subject' claim - request pass - GOOD\n. @buger will resolve the conflicts once you know when you can merge.. https://github.com/TykTechnologies/tyk/commit/1a08535917dbcb1f1a8c8c41431df19f43772113. @buger did you move it to OA? can we close this?. Per @buger question - Can you confirm it's still an issue with OIDC?. @buger It potentially could be useful for troubleshooting (when you can't change your jwt).. Ok, will remove it.. @buger Removed.. @buger Important PR for a client.. @buger please review. thanks. @lonelycode . Output from \"Improving On prem Installation\" meeting 19June2018\n- [ ] Write cli for bootstrap script\n   - [ ] Interactive mode and non-interactive with flags\n   - [ ] No more multiple orgs in this flow. Check for orgs \n         - If there's no org create org as usual and exit in case of an error. \n         - If there is org in mongo - ask the user if he wants to drop the db or exit. We should check if it also happens with batch request /tyk/batch/. So this will be defined on policy def, right?. @johncrocker About the documentation - that link shows REST api call to an endpoint on a Tyk Gateway, while the call you saw on the browser is to the dashboard which manage all the apis and trigger api call /tyk/cache/ on the gateway.. Since it's 502 could you confirm that the gateway define in the field tyk_api_config, in tyk_analytics.conf  is running?. My thoughts exactly! If we do the same for uptime tests will it actually implement this feature? (Or I'm missing something?). plus add link to an FAQ page in the docs. @buger Could be nice to add here response time of that sample against an expected_resp_time, then we can raise an event of degradation in service if it's longer and back-in-service it's <= expected_resp_time.. https://github.com/TykTechnologies/tyk/issues/2063\n. Good idea:) It\u2019s been this way since forever. . and also update TIB to use this endpoint. Why to set it and then test to overwrite it. Better to test and set once.. If IP and path are independent of the request then it makes sense to add them the function signature but if they are always part of it then why not then why did you add them (they can be set locally in the function, unless I misunderstood the purpose). \ud83d\udc4d. \ud83d\udc4d. Ok. Thank you. Should we print cashed keys? (even in debug mode)?. This method is checking if there was a configured claim and if not fall back to  'sub'.. of course. will check what had happened . Didnt want to repeat the text (then if you need to change it you do it once. maybe I should have added const.\nconst message := fmt.Sprint(\"user id was not found in claims\"). yep! changed it to that. Before I had some variable... We can but I'll have to add checks in all the tests to verify spec and token, since there weren't any before and I haven't added it myself. . Yes, thanks, buger had mentioned that on the main thread . Sorry, dont understand the comment. As the code does, https://github.com/TykTechnologies/tyk/blob/3aa02f94a98846dc68e7259c5c3a331f086fb560/mw_jwt.go#L450 I will just default to HMAC.. Actually seemed trivial to me. But if I want it on all my apis, because my jwts always contain kid (that I'm using for something else or cannot control it) then this way I can make sure it's always ON. I will not need to keep on setting it every time or worse - will forget to do that and then the jwt will fail and I'll have to update all my apis. \nAlso the case of using kid for something else would probably be always applied to all my apis since I'm using the same IdP and same rules.. fixed. ok. Added TestJWTRSAIdInClaimsWithBaseField, TestJWTRSAIdInClaimsWithoutBaseField.\n. ok. Yes. Have you seen my detailed answer? can't see it here any longer.. Have fixed it.. Is this related? or just testing?. Better set it as a Const map\nAdd small test\n. Since this code handles client certificates for mutual tls and server certificates - Can we add comments for it. Something along these lines:\n261: // Dynamically add API specific certificates for the server authentication\n278: // Add certificate for Client authentication for the relevant domain\n250: // Add certificate for Client authentication for ControlAPI. Dosignature_header_key and signature_key refer to the same config field?. Dont we need an end-to-end test with session check as well? The code that pulls the shared secret from the session_meta_key should be tested. . @buger . ",
    "artemus717": "Yes, i want to define every parameter in the request, then Illegal request will not be forwarded to backend servers .\nFor example, i define an id param as a long data type, when a request with ?id=test will be forbidden.\nI want to build a waf with modsecurity in front of api gateway to filter illegal request first, and api gateway as a second protection. Glad to hear that. Is there anything i can help ?. We want to define request input parameter information and restrict them.\n\nparam order\nparam name\nparam location .eg query, header, parameter path\ntype .eg long, string \nif is required \ndefault value\ndescription\nenumeration to filter input\nmin and max value of value\n. \n",
    "whizz": "Here is the API definition\n{\n    \"id\": \"5808b72f69381f2114000001\",\n    \"name\": \"myapi\",\n    \"slug\": \"myapi\",\n    \"api_id\": \"2feafc635c514ed16046113fdf9abe18\",\n    \"org_id\": \"5800e79669381f3e71000001\",\n    \"use_keyless\": false,\n    \"use_oauth2\": false,\n    \"use_openid\": false,\n    \"openid_options\": {\n        \"providers\": [],\n        \"segregate_by_client\": false\n    },\n    \"oauth_meta\": {\n        \"allowed_access_types\": [],\n        \"allowed_authorize_types\": [],\n        \"auth_login_redirect\": \"\"\n    },\n    \"auth\": {\n        \"use_param\": false,\n        \"param_name\": \"\",\n        \"use_cookie\": false,\n        \"cookie_name\": \"\",\n        \"auth_header_name\": \"Authorization\"\n    },\n    \"use_basic_auth\": false,\n    \"enable_jwt\": false,\n    \"use_standard_auth\": false,\n    \"enable_coprocess_auth\": false,\n    \"jwt_signing_method\": \"\",\n    \"jwt_source\": \"\",\n    \"jwt_identity_base_field\": \"\",\n    \"jwt_client_base_field\": \"\",\n    \"jwt_policy_field_name\": \"\",\n    \"notifications\": {\n        \"shared_secret\": \"\",\n        \"oauth_on_keychange_url\": \"\"\n    },\n    \"enable_signature_checking\": false,\n    \"hmac_allowed_clock_skew\": -1,\n    \"base_identity_provided_by\": \"\",\n    \"definition\": {\n        \"location\": \"header\",\n        \"key\": \"x-api-version\"\n    },\n    \"version_data\": {\n        \"not_versioned\": true,\n        \"versions\": {\n            \"Default\": {\n                \"name\": \"Default\",\n                \"expires\": \"\",\n                \"paths\": {\n                    \"ignored\": [],\n                    \"white_list\": [],\n                    \"black_list\": []\n                },\n                \"use_extended_paths\": true,\n                \"extended_paths\": {},\n                \"global_headers\": {},\n                \"global_headers_remove\": [],\n                \"global_size_limit\": 0,\n                \"override_target\": \"\"\n            }\n        }\n    },\n    \"uptime_tests\": {\n        \"check_list\": [],\n        \"config\": {\n            \"expire_utime_after\": 0,\n            \"service_discovery\": {\n                \"use_discovery_service\": false,\n                \"query_endpoint\": \"\",\n                \"use_nested_query\": false,\n                \"parent_data_path\": \"\",\n                \"data_path\": \"\",\n                \"port_data_path\": \"\",\n                \"target_path\": \"\",\n                \"use_target_list\": false,\n                \"cache_timeout\": 60,\n                \"endpoint_returns_list\": false\n            },\n            \"recheck_wait\": 0\n        }\n    },\n    \"proxy\": {\n        \"preserve_host_header\": false,\n        \"listen_path\": \"/myapi/\",\n        \"target_url\": \"\",\n        \"strip_listen_path\": true,\n        \"enable_load_balancing\": false,\n        \"target_list\": [],\n        \"check_host_against_uptime_tests\": false,\n        \"service_discovery\": {\n            \"use_discovery_service\": true,\n            \"query_endpoint\": \"http://consulserver:8500/v1/health/service/myapi-api?passing\",\n            \"use_nested_query\": false,\n            \"parent_data_path\": \"\",\n            \"data_path\": \"Node.Address\",\n            \"port_data_path\": \"Service.Port\",\n            \"target_path\": \"\",\n            \"use_target_list\": false,\n            \"cache_timeout\": 60,\n            \"endpoint_returns_list\": true\n        }\n    },\n    \"disable_rate_limit\": false,\n    \"disable_quota\": false,\n    \"custom_middleware\": {\n        \"pre\": [],\n        \"post\": [],\n        \"post_key_auth\": null,\n        \"auth_check\": {\n            \"name\": \"\",\n            \"path\": \"\",\n            \"require_session\": false\n        },\n        \"response\": [],\n        \"driver\": \"\",\n        \"id_extractor\": {\n            \"extract_from\": \"\",\n            \"extract_with\": \"\",\n            \"extractor_config\": null\n        }\n    },\n    \"custom_middleware_bundle\": \"\",\n    \"cache_options\": {\n        \"cache_timeout\": 60,\n        \"enable_cache\": false,\n        \"cache_all_safe_requests\": false,\n        \"cache_response_codes\": [],\n        \"enable_upstream_cache_control\": false\n    },\n    \"session_lifetime\": 0,\n    \"active\": true,\n    \"auth_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"session_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": null\n    },\n    \"event_handlers\": {\n        \"events\": {}\n    },\n    \"enable_batch_request_support\": false,\n    \"enable_ip_whitelisting\": false,\n    \"allowed_ips\": [],\n    \"dont_set_quota_on_create\": false,\n    \"expire_analytics_after\": 0,\n    \"response_processors\": [],\n    \"CORS\": {\n        \"enable\": false,\n        \"allowed_origins\": [],\n        \"allowed_methods\": [],\n        \"allowed_headers\": [],\n        \"exposed_headers\": [],\n        \"allow_credentials\": false,\n        \"max_age\": 24,\n        \"options_passthrough\": false,\n        \"debug\": false\n    },\n    \"domain\": \"\",\n    \"do_not_track\": false,\n    \"tags\": [],\n    \"enable_context_vars\": false\n}. Is it possible to set this thru dashboard somehow? I do not see it anywhere in the API definition and do not have any experience with the dashboard API. Could you maybe provide a curl command to upload the new definition from JSON file?\nAlso, this will completely disable the API statistics, right? That is not exactly what we want.. I updated the definition thru dashboard API, do_not_track is set to true, but no effect on the streaming. It still does not work.. Any news on this issue? The last suggestion did not fix it. Thanks for any updates.. ",
    "maxencehenneron": "Bump, the letsencrypt package is now broken and certificate issuance isn't working anymore. Also, the build seems to fail because I added accept_lets_encrypt_tos, why is the linter not recognizing my newly-created field?. It's a legal requirement. Let's Encrypt wants the user to explicitly agree their TOS. We could override it and force it to be true but it would leave you  legally reliable I guess.. . Any information about NoticeGatewayLENotification ? Is it used somewhere in your dashboard? It's currently blocking any progress and Let's encrypt is needed in my few projets to deliver SSL certificates. ",
    "RajeshKumar1990": "This is what i found from  tyk-gateway.stderr \ntime=\"Jul  3 06:12:56\" level=error msg=\" --> Response was: {\\\"Status\\\":\\\"Error\\\",\\\"Message\\\":\\\"No nodes available\\\",\\\"Meta\\\":null}\\n\" \ntime=\"Jul  3 06:13:00\" level=error msg=\"Failed to register node, retrying in 5s\" \ntime=\"Jul  3 06:13:00\" level=error msg=\" --> Response was: {\\\"Status\\\":\\\"Error\\\",\\\"Message\\\":\\\"No nodes available\\\",\\\"Meta\\\":null}\\n\" \ntime=\"Jul  3 06:13:01\" level=error msg=\"Failed to register node, retrying in 5s\" \ntime=\"Jul  3 06:13:01\" level=error msg=\" --> Response was: {\\\"Status\\\":\\\"Error\\\",\\\"Message\\\":\\\"No nodes available\\\",\\\"Meta\\\":null}\\n\" \ntime=\"Jul  3 06:13:05\" level=error msg=\"Failed to register node, retrying in 5s\" \ntime=\"Jul  3 06:13:05\" level=error msg=\" --> Response was: {\\\"Status\\\":\\\"Error\\\",\\\"Message\\\":\\\"No nodes available\\\",\\\"Meta\\\":null}\\n\"\nThis is found in tyk-dashboard.stderr\ntime=\"Jul  3 06:15:06\" level=error msg=\"No nodes available\" \ntime=\"Jul  3 06:15:10\" level=error msg=\"No nodes available\" \ntime=\"Jul  3 06:15:11\" level=error msg=\"No nodes available\" \ntime=\"Jul  3 06:15:15\" level=error msg=\"No nodes available\" \ntime=\"Jul  3 06:15:16\" level=error msg=\"No nodes available\" \ntime=\"Jul  3 06:15:20\" level=error msg=\"No nodes available\" \ntime=\"Jul  3 06:15:21\" level=error msg=\"No nodes available\"\nMay i know why it says no nodes available.. ",
    "altaurog": "I am not sure what in the spec requires that individual services should perform validation as opposed to an API gateway, but I have seen arguments that access tokens should be preferred over id tokens for apis.  In any case, as far as I can tell, the openid middleware should work with any jwt containing an iss and aud claim.\nFWIW, we are using this with okta and it works.  I just set issuer to the contents of iss claim and client_ids keys to the base64 encoding of the aud claim.\nBut looking at the example auth0 access token in above-linked article, I see they have an array as the aud claim, so yeah, I guess that is variation that might be tricky to deal with.  At the very least, you would need to extend either the format of the client_ids configuration or its interpretation.. This looks really promising, but I gather it isn\u2019t ready for prime time?  I am running debian stretch with my own build of python3.6 installed and I would like to build tyk.  I plan to deploy it in a docker container, so of course I could just build it in a separate container as well, but latest python is preferred.  Is the python readme up-to-date?  It would be great to get some specific, up-to-date instructions.. @matiasinsaurralde thanks.  It seems to have built master successfully.  I will test over the next few days.. Still not able to get it running.  I reported the error I\u2019m getting in #1804.. I\u2019m getting 401 Unauthorized on /hello, and the following message in the logs:\n[Jul 12 21:41:50]  WARN openid: JWT Invalid: Validation error. The 'Authorization' header was not found or was empty.\n[Jul 12 21:41:50]  WARN openid: Attempted access with invalid key. key=[JWT]\nWe are using openid for auth on all our APIs.  Does that automatically apply to this endpoint also?\nhere\u2019s my tyk.conf:\njson\n{\n  \"listen_port\": 8180,\n  \"secret\": \"TYK_SECRET\",\n  \"app_path\": \"apps/\",\n  \"template_path\": \"templates/\",\n  \"middleware_path\": \"middleware/\",\n  \"enable_jsvm\": true,\n  \"python_path_prefix\": \"/opt/tyk-gateway\",\n  \"enable_custom_domains\": true,\n  \"control_api_hostname\": \"tyk.example.com\",\n  \"hash_keys\": true,\n  \"close_connections\": true,\n  \"storage\": {\n    \"type\": \"redis\",\n    \"host\": \"localhost\",\n    \"port\": 6379,\n    \"username\": \"\",\n    \"password\": \"\",\n    \"database\": 0,\n    \"optimisation_max_idle\": 100\n  },\n  \"policies\": {\n    \"policy_source\": \"file\",\n    \"policy_record_name\": \"policies/policies.json\"\n  },\n  \"health_check\": {\n    \"enable_health_checks\": false\n  }\n}. @asoorm thanks!  This works well for me.  Perhaps json encoding any non-string values would be a good general solution which would eliminate such edge cases.. Sure!  I am not sure why it doesn\u2019t pick up \"python_path_prefix\", but it\u2019s the same as $PWD and it seems to have found what it needed.\njson\n{\n  \"listen_port\": 8180,\n  \"secret\": \"verysecret\",\n  \"template_path\": \"templates/\",\n  \"middleware_path\": \"middleware/\",\n  \"app_path\": \"apps/\",\n  \"coprocess_options\": {\n    \"enable_coprocess\": true\n  },\n  \"python_path_prefix\": \"/opt/tyk-gateway\",\n  \"enable_bundle_downloader\": true,\n  \"bundle_base_url\": \"http://localhost:8081/\",\n  \"storage\": {\n    \"type\": \"redis\",\n    \"host\": \"localhost\",\n    \"port\": 6379,\n    \"username\": \"\",\n    \"password\": \"\",\n    \"database\": 0,\n    \"optimisation_max_idle\": 100\n  },\n  \"policies\": {\n    \"policy_source\": \"file\",\n    \"policy_record_name\": \"policies/policies.json\"\n  },\n  \"health_check\": {\n    \"enable_health_checks\": false\n  }\n}. \"python_path_prefix\" isn\u2019t mentioned in the documentation at all, as far as I can tell.  \"coprocess_options\" isn\u2019t listed on the Tyk Gateway Configuration Options page either.\nAs you can see in the Dockerfile, I built protobuf according to the instructions to which you referred me, although I suppose I could also try just pip install protobuf.\n```\n$ sudo docker run --rm -it tyk-python:test-1 python3 -m pip show protobuf\nName: protobuf\nVersion: 3.1.0\nSummary: Protocol Buffers\nHome-page: https://developers.google.com/protocol-buffers/\nAuthor: protobuf@googlegroups.com\nAuthor-email: protobuf@googlegroups.com\nLicense: New BSD License\nLocation: /usr/local/lib/python3.4/dist-packages\nRequires: six, setuptools\nRequired-by: \n$ sudo docker run --rm -it tyk-python:test-1 python3 -V\nPython 3.4.3\nI hope this is useful!. In the meantime, I realized we can do pretty much all we need with the javascript middleware, so we\u2019ll be moving forward with that.. @matiasinsaurralde essentially yes.  Here\u2019s the build part of the Dockerfile:\nRUN /usr/lib/go-1.9/bin/go get -d github.com/TykTechnologies/tyk\nRUN cd /root/go/src/github.com/TykTechnologies/tyk \\\n  && git fetch https://github.com/asoorm/tyk.git 1801-support-slice-interface-valToString \\\n  && git checkout -b 1801-support-slice-interface-valToString FETCH_HEAD \\\n  && /usr/lib/go-1.9/bin/go get \\\n  && /usr/lib/go-1.9/bin/go build -tags 'coprocess python'\n. @joshblakeley yes, for the same reason, but setting it to `false` doesn\u2019t affect the above behavior (that would be a bit of a gotcha IMO).. Actually, it looks like this is due to [the behavior of the underling `net/http` lib](https://github.com/golang/go/issues/7682). This fixed it for me:\ndiff --git a/mw_js_plugin.go b/mw_js_plugin.go\nindex 422468f5..1d0529be 100644\n--- a/mw_js_plugin.go\n+++ b/mw_js_plugin.go\n@@ -491,7 +491,11 @@ func (j *JSVM) LoadTykJSApi() {\n                }\n            for k, v := range hro.Headers {\n\n\nr.Header.Set(k, v)\nif strings.ToLower(k) == \"host\" {\nr.Host = v\n} else {\nr.Header.Set(k, v)\n}\n                }\n                r.Close = true\n``. Better you do it.  I just needed to get this done, or I would have had to devise some complex workarounds.. Anyways, you probably want to include a test, etc.. okay, thanks @buger, I will try to check soon. @buger what version?  It doesn\u2019t look to me likebool` is supported on master:\nhttps://github.com/TykTechnologies/tyk/blob/master/mw_url_rewrite.go#L228. \n",
    "hustshawn": "Also I believe the issue is not from the JSON url itself, even if I replaced it with a AWS S3 url where I put the json on a bucket, it still not available.. @lonelycode Hi Martin, thanks for your prompt response, here below is the related log \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Reloading endpoints\" \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Reload queued\" \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Initiating reload\" \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Loading policies\" \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Using Policies from Dashboard Service\" \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Mutex lock acquired... calling\" \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Calling dashboard service for policy list\" \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Processing policy list\" \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Detected 4 APIs\" \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Preparing new router\" \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Initialising Tyk REST API Endpoints\" \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Loading API configurations.\" \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Tracking hostname\" api_name=\"Portal Assets\" domain=www.tyk-portal-test.com \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Tracking hostname\" api_name=\"Portal API\" domain=www.tyk-portal-test.com \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Tracking hostname\" api_name=Portal domain=www.tyk-portal-test.com \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Tracking hostname\" api_name=test domain=\"(no host)\" \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Loading API\" api_name=\"Portal Assets\" \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Checking security policy: Open\" api_name=\"Portal Assets\" \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Loading API\" api_name=test \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Checking security policy: JWT\" api_name=test \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Loading API\" api_name=\"Portal API\" \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Checking security policy: Open\" api_name=\"Portal API\" \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Loading API\" api_name=Portal \ntyk_gateway_1    | time=\"Jul 12 01:28:24\" level=info msg=\"Checking security policy: Open\" api_name=Portal \ntyk_gateway_1    | time=\"Jul 12 01:28:25\" level=info msg=\"Processed and listening on: /portal-assets/{rest:.*}\" \ntyk_gateway_1    | time=\"Jul 12 01:28:25\" level=info msg=\"Processed and listening on: /portal-api/{rest:.*}\" \ntyk_gateway_1    | time=\"Jul 12 01:28:25\" level=info msg=\"Processed and listening on: /portal/{rest:.*}\" \ntyk_gateway_1    | time=\"Jul 12 01:28:25\" level=info msg=\"Processed and listening on: /test/{rest:.*}\" \ntyk_gateway_1    | time=\"Jul 12 01:28:25\" level=info msg=\"Loading uptime tests...\" \ntyk_gateway_1    | time=\"Jul 12 01:28:25\" level=info msg=\"Initialised API Definitions\" \ntyk_gateway_1    | time=\"Jul 12 01:28:25\" level=info msg=\"API reload complete\" \ntyk_gateway_1    | time=\"Jul 12 01:28:25\" level=info msg=\"Initiating coprocess reload\" \ntyk_gateway_1    | time=\"Jul 12 01:28:30\" level=info msg=\"Attempted access with malformed header, no JWT auth header found.\" origin=172.19.0.1 path=\"/test/\" \ntyk_gateway_1    | time=\"Jul 12 01:28:30\" level=error msg=\"request error: Authorization field missing\" api_id=935d29069370443965b636c341133ca3 org_id=59657afa9d08a50001bce1e0 path=\"/\" server_name=\"http://httpbin.org/\" user_id= user_ip=172.19.0.1 \nopenresty_1   | 172.18.0.1 - - [12/Jul/2017:01:28:30 +0000] \"GET /test/ HTTP/1.1\" 400 46 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36\" \"-\"\ntyk_pump_1       | time=\"Jul 12 01:28:31\" level=info msg=\"Purging 1 records\" \ntyk_gateway_1    | time=\"Jul 12 01:28:42\" level=error msg=\"Failed to deccode JWT to RSA type\" \ntyk_gateway_1    | time=\"Jul 12 01:28:42\" level=info msg=\"Attempted JWT access with non-existent key.\" origin=172.19.0.1 path=\"/test/\" \ntyk_gateway_1    | time=\"Jul 12 01:28:42\" level=error msg=\"JWT validation error: Invalid Key: Key must be PEM encoded PKCS1 or PKCS8 private key\" origin=172.19.0.1 path=\"/test/\" \ntyk_gateway_1    | time=\"Jul 12 01:28:42\" level=error msg=\"request error: Key not authorized\" api_id=935d29069370443965b636c341133ca3 org_id=59657afa9d08a50001bce1e0 path=\"/\" server_name=\"http://httpbin.org/\" user_id= user_ip=172.19.0.1. @lonelycode Yes, I think you are right. But may I know how you configure the JWK URL? You mentioned via a API, is it that from the table 'tyk_apis' of mongodb? If not, could you please tell me the right ways? Thanks.. @lonelycode Now the response become \n{\n  \"error\": \"This API version does not seem to exist\"\n}\nand here is the log.\ntyk_gateway_1    | time=\"Jul 12 02:56:55\" level=error msg=\"request error: This API version does not seem to exist\" api_id=935d29069370443965b636c341133ca3 org_id=59657afa9d08a50001bce1e0 path=\"/\" server_name=\"http://httpbin.org/\" user_id= user_ip=172.19.0.1 \nopenresty_1   | 172.18.0.1 - - [12/Jul/2017:02:56:55 +0000] \"GET /test/ HTTP/1.1\" 403 87 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36\" \"-\"\ntyk_pump_1       | time=\"Jul 12 02:56:56\" level=info msg=\"Purging 1 records\"\nBTW, the public key I encoded is different with what you specified before, please see below.\nshawn@Mac:rsa $cat public.pem\n-----BEGIN PUBLIC KEY-----\nMFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAJ4AhQ6FGspvMAnBmclAzydVB35i/MJe\nDq+OB5di7YLy3VcH66MJ0NSnEy/s55hgcQQ+IozJK4UTyAyGwRGVxn8CAwEAAQ==\n-----END PUBLIC KEY-----\nshawn@Mac:rsa $cat public.pem | base64\nLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBSjRBaFE2RkdzcHZNQW5CbWNsQXp5ZFZCMzVpL01KZQpEcStPQjVkaTdZTHkzVmNINjZNSjBOU25FeS9zNTVoZ2NRUStJb3pKSzRVVHlBeUd3UkdWeG44Q0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo=. @lonelycode After further investigation, the above error are not in our scope, may be a bug itself since it resumed after I re-launched all the instance containers.\nAnyway, I still got the error log\ntyk_pump_1       | time=\"Jul 12 06:54:38\" level=info msg=\"Purging 1 records\" \ntyk_gateway_1    | time=\"Jul 12 06:54:41\" level=error msg=\"Failed to deccode JWT to RSA type\" \ntyk_gateway_1    | time=\"Jul 12 06:54:41\" level=info msg=\"Attempted JWT access with non-existent key.\" origin=172.19.0.1 path=\"/test/\" \ntyk_gateway_1    | time=\"Jul 12 06:54:41\" level=error msg=\"JWT validation error: Invalid Key: Key must be PEM encoded PKCS1 or PKCS8 private key\" origin=172.19.0.1 path=\"/test/\" \ntyk_gateway_1    | time=\"Jul 12 06:54:41\" level=error msg=\"request error: Key not authorized\" api_id=ef55a8721f2b4743649c41fc7a1f4d5b org_id=5965a72872b54c000157b43f path=\"/\" server_name=\"http://httpbin.org/\" user_id= user_ip=172.19.0.1\nI am just wondering what is lying behind if I just put the JWK URL to the jwt_source field ?\nand if it was configured via dashboard, it will be transformed into a blob; if I directly configure it from db, make this key as jwt_source: \"https://my-internal-server.com/idp_jwks.json\", I will still get above error log.\nAny tips for me so that I can debug where the problem is?. OK. And the question moved to forum https://community.tyk.io/t/oidc-configuration-with-jwk/1732. . It seems that when defined in a camel case endpoint, the defined path would be exclude outside of the whitelist, that's should be what Requested endpoint is forbidden mean.. @mvdan  Thanks for your reply, and please refer to such API endpoint definition snippets.\n...\n    \"version_data\": {\n        \"not_versioned\": true,\n        \"versions\": {\n            \"Default\": {\n                \"name\": \"Default\",\n                \"expires\": \"\",\n                \"paths\": {\n                    \"ignored\": [],\n                    \"white_list\": [],\n                    \"black_list\": []\n                },\n                \"use_extended_paths\": true,\n                \"extended_paths\": {\n                    \"white_list\": [\n                        {\n                            \"path\": \"someEndpoint\",\n                            \"method_actions\": {\n                                \"GET\": {\n                                    \"action\": \"reply\",\n                                    \"code\": 200,\n                                    \"data\": \"[\\n    {\\n        \\\"clientCode\\\": \\\"i8619515\\\",\\n        \\\"cashBalanceItemJsons\\\": [\\n            {\\n                \\\"currency\\\": \\\"USD\\\",\\n                \\\"balance\\\": 10000000,\\n                \\\"pending\\\": 2000000,\\n                \\\"available\\\": 8000000\\n            },\\n            {\\n                \\\"currency\\\": \\\"HKD\\\",\\n                \\\"balance\\\": 50000000,\\n                \\\"pending\\\": 0,\\n                \\\"available\\\": 50000000\\n            }\\n        ]\\n    }\\n]\",\n                                    \"headers\": {}\n                                }\n                            }\n                        },\n                        {\n                            \"path\": \"someendpoint\",\n                            \"method_actions\": {\n                                \"GET\": {\n                                    \"action\": \"reply\",\n                                    \"code\": 200,\n                                    \"data\": \"[\\n    {\\n        \\\"clientCode\\\": \\\"i8619515\\\",\\n        \\\"cashBalanceItemJsons\\\": [\\n            {\\n                \\\"currency\\\": \\\"USD\\\",\\n                \\\"balance\\\": 10000000,\\n                \\\"pending\\\": 2000000,\\n                \\\"available\\\": 8000000\\n            },\\n            {\\n                \\\"currency\\\": \\\"HKD\\\",\\n                \\\"balance\\\": 50000000,\\n                \\\"pending\\\": 0,\\n                \\\"available\\\": 50000000\\n            }\\n        ]\\n    }\\n]\",\n                                    \"headers\": {}\n                                }\n                            }\n                        }\n                    ]\n                },\n                \"global_headers\": {},\n                \"global_headers_remove\": [],\n                \"global_size_limit\": 0,\n                \"override_target\": \"\"\n            }\n        }\n    },\n...\nBasically, I wanna get the mock response from  /someEndpoint , but it seems I can only define the name as /someendpoint and it may work. Otherwise i will get the previous mentioned 403 response.. @mvdan I want the mock response of /someEndpoint work.. @lonelycode Yes, it really works as what you described.  But I also find the non-mock APIs are case sensitive.  it looks wired that for mocks are non-case-sensitive, while those none mock APIs are not.\nIs it possible to uniform both of them to case sensitive?. @lonelycode Yes. Thanks.. @buger My configuration is like below:\n\"global_headers\": {\n                    \"X-Custom-Header\": \"$jwt_claims_sth\",\n                    \"X-Custom-Token\": \"$token\"\n                },\n...\n...\n    \"enable_context_vars\": true,\nBelow are the headers that passed to the upstream:\n{\"host\": \"10.0.1.145:8088\", \"user-agent\": \"python-requests/2.18.1\", \"accept\": \"*/*\", \"accept-encoding\": \"gzip, deflate\", \"authorization\": \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImlwaG9uZTcifQ.eyJpc3MiOiJodHRwOi8vMTAuMC4xLjE0NS8iLCJzdWIiOiIwIiwiaWF0IjoxNDk4ODM4NDAwLCJleHAiOjE4MTQzNzEyMDAsInN0aCI6InNvbWUgc3RyaW5nIiwiYXVkIjoiaXBob25lNyJ9.BqYn2oPVfIVgMCW7vxWAPtBeSADp2KifU-j1GGmFh-SjB1XVuUp9zd25-S-fKkSb0TngJq2Dtq8yhRg39DLnLqTwdWAm0aH8T0A1kvzlF6RcPtYog2IqiZmcL1EU0NJCZKhK34UeG3qNVchmsK30Ud7i0hEBAw35wJMPLCqiPGNNBeLxqrpJUsvxcQcy_7xmb08SVqlzxNH16E2RgzGomWpVzPeE2SVPcNXLt9bBphCEb-4sqxkcgRZ6LZge8QmkSS2Tl-GRGkE8gRnESfKsoeOeCrwOOwM5VfBvbgQfGFhc1SWNkvn7poJrFlo9EVZnwMvPGUfn6Lu8C748KqRkMQ\", \"x-custom-header\": \"$jwt_claims_sth\", \"x-custom-token\": \"$token\", \"x-forwarded-for\": \"172.19.0.1\"}. @buger ya, it's my typo. Please close this issue. . Just find if I put the kid in JWT payload, the auth passed. \nIt is quite annoying that such kind of behavior changed in blackbox. It should have had a reason or announcement to tell it works in previous version but current release not.. Do you mean if I use the dashboard, the file configured policy would not work?. @nikitinsm  Agree with you, currently all non-authorised behavior in Tyk is 403, it's quite confusing.. when this feature would be released ?\n. Since the token and behind key config have no problem. Is there any possible reason related to redis ? What the mechanism / process flow is?. It can also be reproduced with Tyk Cloud. As you can see from below code and logs, first one I generate a token and used it to call the API in Tyk Cloud API gateway, which I already configured the authentication. It will get 403 status.\n```\npython gen_token.py -env=uat -private_key=keys/private.pem  -client_id=i12345678 --test-api  -v\n[INFO] - Access Token: \nBearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImkxMjM0NTY3OCJ9.eyJpc3MiOiJodHRwOi8vaWRwLXVhdC5pZnVuZC5jb20uaGsvIiwic3ViIjoiaTEyMzQ1Njc4IiwiaWF0IjoxNTIxNzA5NTE1LCJleHAiOjE1MjY4OTM1MTUsImF1ZCI6ImIyYiJ9.BiH0b_oLzWIqvMF8F2xfPDXwnBIqCiqtjzw3XzCjklHdXScN27m1gm2k3tK9hPEpNpEWknJUe8CneXBmalvnDOKqN0W8FyR5ats9wkAnrsto5NLeVPAWwhBlH_brsIkck5seCyAmp3rmTqKWNvEbfv8D1K1LX_Pd4u4FtJG3fI4Lb_BkhFz48sbTRP4rB0J7YgDoX6FCoiffAecR5aurLo7kLEz9dgD8irGG3a2VMh1cH0cPaEDyLQocY7D711_BtFiw_oEFGpUZ2c1MVB1nkBqCI6HHFpXI7ElWYZzXogz5vCWEZD39Z0H9H_tH6M8jOZ05A0uiEDnW1iIM-DkVvw\n[INFO] - Requesting API to test token: https://lion-finance-hk.cloud.tyk.io/test/\n[DEBUG] - Elapsed: 1.0\n[INFO] - Status code: 403, Response: {\n    \"error\": \"Key not authorised\"\n}\n[DEBUG] - Request headers: {'User-Agent': 'python-requests/2.18.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': '/', 'Connection': 'keep-alive', 'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImkxMjM0NTY3OCJ9.eyJpc3MiOiJodHRwOi8vaWRwLXVhdC5pZnVuZC5jb20uaGsvIiwic3ViIjoiaTEyMzQ1Njc4IiwiaWF0IjoxNTIxNzA5NTE1LCJleHAiOjE1MjY4OTM1MTUsImF1ZCI6ImIyYiJ9.BiH0b_oLzWIqvMF8F2xfPDXwnBIqCiqtjzw3XzCjklHdXScN27m1gm2k3tK9hPEpNpEWknJUe8CneXBmalvnDOKqN0W8FyR5ats9wkAnrsto5NLeVPAWwhBlH_brsIkck5seCyAmp3rmTqKWNvEbfv8D1K1LX_Pd4u4FtJG3fI4Lb_BkhFz48sbTRP4rB0J7YgDoX6FCoiffAecR5aurLo7kLEz9dgD8irGG3a2VMh1cH0cPaEDyLQocY7D711_BtFiw_oEFGpUZ2c1MVB1nkBqCI6HHFpXI7ElWYZzXogz5vCWEZD39Z0H9H_tH6M8jOZ05A0uiEDnW1iIM-DkVvw'}\nHowever, when I use python requests to call the API with same token, it can pass the authentication.\nroot@b6028f0accfe:/workdir/utils# python\nPython 3.6.1 (default, Jul  8 2017, 05:00:20) \n[GCC 4.9.2] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport requests\nurl = 'https://lion-finance-hk.cloud.tyk.io/test/'\nheaders = {\"Authorization\": \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImkxMjM0NTY3OCJ9.eyJpc3MiOiJodHRwOi8vaWRwLXVhdC5pZnVuZC5jb20uaGsvIiwic3ViIjoiaTEyMzQ1Njc4IiwiaWF0IjoxNTIxNzA5NTE1LCJleHAiOjE1MjY4OTM1MTUsImF1ZCI6ImIyYiJ9.BiH0b_oLzWIqvMF8F2xfPDXwnBIqCiqtjzw3XzCjklHdXScN27m1gm2k3tK9hPEpNpEWknJUe8CneXBmalvnDOKqN0W8FyR5ats9wkAnrsto5NLeVPAWwhBlH_brsIkck5seCyAmp3rmTqKWNvEbfv8D1K1LX_Pd4u4FtJG3fI4Lb_BkhFz48sbTRP4rB0J7YgDoX6FCoiffAecR5aurLo7kLEz9dgD8irGG3a2VMh1cH0cPaEDyLQocY7D711_BtFiw_oEFGpUZ2c1MVB1nkBqCI6HHFpXI7ElWYZzXogz5vCWEZD39Z0H9H_tH6M8jOZ05A0uiEDnW1iIM-DkVvw\"}\nr = requests.get(url, headers=headers)\nprint(r.status_code)\n200\n```\n\n\n\n@lonelycode  @buger any idea about this ?. @buger Thanks. one more thing I noticed, as long as the token was valid ok, it will always pass in the future.. It feels like the token must be activated some way, and then workable. quite hard to understand what's going on underground. . @buger  I do not quite understand what you mean sub same to what, in this case it same with kid. But sub should not be a matter that affect the token is valid or not.\nBTW. we used OIDC, so it's not like JWT method, and Tyk will extract sub by default.. @buger I have referred the issue to  https://github.com/emanoelxavier/openid2go . Hope someone in openid2go community can head out.. @buger Totally agree. The current error message is a bit confusing and may not realising what part is wrong.. The problem is if I use FLUSHALL cleared the redis, the effect of the key still exist, but cannot find the key.. I tried to log the captured IP and request headers in the ipRateLimiter JS code, \nlog(thisIP)\n        log(JSON.stringify(request.Headers))\nand can see the log output, it looks like the JS file would run when request comes in, but the rate limiter / added Key to redis does not work.\ntyk_gateway_1    | time=\"Apr 19 02:38:56\" level=info msg=\"Processed and listening on: /test3/{rest:.*}\" \ntyk_gateway_1    | time=\"Apr 19 02:38:56\" level=info msg=\"Loading uptime tests...\" \ntyk_gateway_1    | time=\"Apr 19 02:38:56\" level=info msg=\"Initialised API Definitions\" \ntyk_gateway_1    | time=\"Apr 19 02:38:56\" level=info msg=\"API reload complete\" \ntyk_gateway_1    | time=\"Apr 19 02:38:59\" level=info msg=\"IP / Headers:\" type=log-msg \ntyk_gateway_1    | time=\"Apr 19 02:38:59\" level=info msg=172.20.0.1 type=log-msg \ntyk_gateway_1    | time=\"Apr 19 02:38:59\" level=info msg=\"{\\\"Accept\\\":[\\\"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\\\"],\\\"Accept-Encoding\\\":[\\\"gzip, deflate, br\\\"],\\\"Accept-Language\\\":[\\\"zh-CN,zh;q=0.9,en;q=0.8\\\"],\\\"Cache-Control\\\":[\\\"max-age=0\\\"],\\\"Connection\\\":[\\\"close\\\"],\\\"Cookie\\\":[\\\"csrf_token=RcR6cybvI0UlnQBcN4K4kaiVciLfbqj7RRcsnyRIXX8=; _gauges_unique_year=1; _gauges_unique=1; PHPSESSID=44n204cp1bu8tje2gj901675m3; io=O0Kv1xQ6FKckvae-AAAA; _gauges_unique_day=1; _gauges_unique_month=1; authorisation=e4e2f169-41e5-47ab-59a2-2c9fc3f8609f; _gauges_unique_hour=1\\\"],\\\"Dnt\\\":[\\\"1\\\"],\\\"Host\\\":[\\\"localhost\\\"],\\\"Upgrade-Insecure-Requests\\\":[\\\"1\\\"],\\\"User-Agent\\\":[\\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36\\\"],\\\"X-Real-Ip\\\":[\\\"172.20.0.1\\\"]}\" type=log-msg \ntyk_gateway_1    | time=\"Apr 19 02:38:59\" level=info msg=\"Key added or updated.\" api_id=-- expires=0 key=\"****.0.1\" org_id=596c7df74c0b330001610671 path=-- server_name=system user_id=system user_ip=-- \ntyk_dashboard_1  | time=\"Apr 19 02:38:59\" level=info msg=\"Sending config request for node: 61dcbb98-408a-44b4-70a1-54dc02815f10-91bcfac3dbee\" \ntyk_dashboard_1  | time=\"Apr 19 02:38:59\" level=info msg=\"Got configuration for nodeID: 61dcbb98-408a-44b4-70a1-54dc02815f10|91bcfac3dbee\" \nlang_adapter_1   | 172.20.0.1 - - [19/Apr/2018:02:39:00 +0000] \"GET /test3/ HTTP/1.1\" 200 4463 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36\" \"-\"\n@buger Any idea about this?. After some painful trial and error, just find the blog post proposed IP based rate limiting only applies for using Auth Token as authentication method, and use the auth key header as x-tyk-authorization only. \nIf my API use some other authentication method, eg. JWT, I naturally consider using your Multiple Auth Mechnism, which means use both JWT and auth, the auth only for rate limiting.\nHowever, it looks like it does not support for now.\nAny other alternative way to achieve this?\n. @asoorm It works. Thank you.. Hi @asoorm , a further problem is, I set the mongoDB connection in my dashboard config file, and the dashboard is running file, can load and write configs into the Mongo. However, the tyk_gateway is not able to load the api definitions from the the MongoDB. As your Doc indicates, the tyk_gateway will load configs via tyk_dashboard. But actually the gateway itself does not work.\nin tyk.conf\n...\n    \"use_db_app_configs\": true,\n    \"db_app_conf_options\": {\n        \"connection_string\": \"http://tyk_dashboard:3000\",\n        \"node_is_segmented\": false,\n        \"tags\": [\"test2\"]\n    },\n  ...\nin tyk_analytics.conf,\n...\n    \"mongo_url\": \"mongodb://mongohost1:27017,mongohost2:27018\uff0cmongohost3:27019/tyk_analytics\",\n...\nWhere I got below logs in tyk_gateway\nAttaching to ifundtyk_tyk_gateway_1\ntyk_gateway_1    | sed: cannot rename /opt/tyk-gateway/sedtY3Cuu: Device or resource busy\ntyk_gateway_1    | sed: cannot rename /opt/tyk-gateway/sedFNNUFx: Device or resource busy\nBased on my previous experience, this kind of  log normally occurs whenever it cannot get configs from mongo, that is why I suspect the tyk_gateway is not able to load configs right.\nAny ideas about this?. Hi @excieve , I am using docker-compose to bring up all components. \nHere is the docker-compose.yml\n```\nversion: '2'\nservices:\n    tyk_dashboard:\n        image: tykio/tyk-dashboard:v1.6.2\n        restart: always\n        ports:\n            - \"3000:3000\"\n            - \"5000:5000\"\n        volumes:\n            - ./tyk_analytics.conf:/opt/tyk-dashboard/tyk_analytics.conf\n        extra_hosts:\n            - \"redis:10.8.3.228\"\n        networks:\n            - gateway\n    tyk_pump:\n        image: tykio/tyk-pump-docker-pub:latest\n        restart: always\n        networks:\n            - gateway\n        extra_hosts:\n            - \"redis:10.8.3.228\"\n        volumes:\n            - ./pump.conf:/opt/tyk-pump/pump.conf\n    tyk_gateway:\n        image: tykio/tyk-gateway:v2.6.2\n        restart: always\n        expose:\n            - \"8080\"\n        ports:\n            - \"8080:8080\"\n        extra_hosts:\n            - \"redis:10.8.3.228\"\n        volumes:\n            - ./tyk.conf:/opt/tyk-gateway/tyk.conf\n            - ./middleware:/opt/tyk-gateway/middleware\n        networks:\n            - gateway\nnetworks:\n    gateway:\n```\n. Thank you very much @excieve .Looking forward to the updated release.. Hi @asoorm , thanks for your prompt suggestion.\n\nFor the tyk_gateway_1 | sed: cannot rename /opt/tyk-gateway/sedMT6xfQ sed issue, I think it's already in your fix schedule, as mentioned in this issue\nYes. I am using docker-compose, please see the docker-compose.yml here\n```\nversion: '2'\n\nservices:\n    tyk_dashboard:\n        image: tykio/tyk-dashboard:latest\n        restart: always\n        ports:\n            - \"3000:3000\"\n            - \"5000:5000\"\n        volumes:\n            - ./tyk_analytics.conf:/opt/tyk-dashboard/tyk_analytics.conf\n        env_file: .env\n        networks:\n            - gateway\n    tyk_pump:\n        image: tykio/tyk-pump-docker-pub:latest\n        restart: always\n        networks:\n            - gateway\n        env_file: .env\n        volumes:\n            - ./pump.conf:/opt/tyk-pump/pump.conf\n    tyk_gateway:\n        # image: tykio/tyk-gateway:v2.3.8\n        image: tykio/tyk-gateway:latest\n        restart: always\n        expose:\n            - \"8080\"\n        ports:\n            - \"8080:8080\"\n        env_file: .env\n        volumes:\n            - ./tyk.conf:/opt/tyk-gateway/tyk.conf\n            - ./middleware:/opt/tyk-gateway/middleware\n        networks:\n            - gateway\nnetworks:\n    gateway:\n3. Before using environment variables `TYK_GW_`,  I  used the settings in  `tyk.conf` is\n    \"storage\": {\n        \"type\": \"redis\",\n        \"host\": \"redis\",\n        \"port\": 6379,\n        \"username\": \"\",\n        \"password\": \"\",\n        \"database\": 0,\n        \"optimisation_max_idle\": 100\n    },\nand in `tyk_analytics.conf` is\n    \"redis_port\": 6379,\n    \"redis_host\": \"redis\",\n    \"redis_password\": \"\",\n    \"enable_cluster\": false,\nwhere in the `docker-compose.yml` , I added a `extra_hosts` field, to enable the `redis` be resolved\n     extra_hosts:\n            - \"redis:10.8.3.228\"\nand it works fine.. I also tried add below sets for variables,\nTYK_GW_STORAGE_TYPE=redis\nTYK_GW_STORAGE_HOST=10.8.3.228\nTYK_GW_STORAGE_PORT=6379\nTYK_DB_REDISHOST=10.8.3.228\nTYK_DB_REDISPORT=6379\nit still not working, and the logs like below\ntyk_dashboard_1  | time=\"Jul 11 08:31:59\" level=info msg=\"Creating new Redis connection pool\" \ntyk_gateway_1    | sed: cannot rename /opt/tyk-gateway/sedzqbIPf: Device or resource busy\ntyk_pump_1       | time=\"Jul 11 08:32:00\" level=info msg=\"## Tyk Analytics Pump, v0.5.1 ##\" \ntyk_gateway_1    | sed: cannot rename /opt/tyk-gateway/sedoH8vcg: Device or resource busy\ntyk_pump_1       | time=\"Jul 11 08:32:00\" level=info msg=\"-- No max batch size set, defaulting to 10MB\" \ntyk_pump_1       | time=\"Jul 11 08:32:00\" level=info msg=\"-- No max document size set, defaulting to 10MB\" \ntyk_dashboard_1  | time=\"Jul 11 08:40:47\" level=info msg=\"Creating new Redis connection pool\" \ntyk_gateway_1    | time=\"Jul 11 08:40:48\" level=info msg=\"PIDFile location set to: /var/run/tyk-gateway.pid\" \ntyk_gateway_1    | time=\"Jul 11 08:40:48\" level=info msg=\"Initialising Tyk REST API Endpoints\" \n```\n. @asoorm My fault.  The connection issue is due to my firewall. can close the issue now. Thanks.. @matiasinsaurralde Got it. Thank you.. ",
    "coatezy": "Hi @matiasinsaurralde,\nThanks for taking the time to test and review the PR. \ud83d\ude04 \nShould I also submit an accompanying PR to the docs repo documenting the rewrite functionality?. @buger @matiasinsaurralde Thanks guys! \ud83d\ude04 . ",
    "othane": "Cool, thanks for the quick response !! ... I am not much of a Go developer, but I will try my hand at a PR in the next few days. I have something I think basically works now, but I need to brush up on my unit testing in Go :). Hi mvdan, thanks for the advice.\nI have the simple part ready to go I think (https://github.com/othane/tyk/commit/efe83a26e0aca891b6017a3640aeb58685d692e3)\nI have tested this with fmt.Printf statements and it seems to work, but I think I am a bit out of my depth with mocking the AuthFailed call in go to ensure it is fired when the tests fail. Do you have any advice?\nI didn't want to submit a PR until I have some unit tests.. Cool thanks for the support. I will try to do a test in the next couple of days as you suggest but if I don't get there I'll sing out for some help thanks. It is a nice change for me to do some GO, but I just need to find time :). Awsome ... Thanks for the update \ud83d\ude00. Cool, thanks for the help, it was nice to play with Go :) \nAny idea which release this is likely be in and when that release is likely to go out?. good point :) ... I have updated the PR ... thanks :+1: . ",
    "dijitali": "This sounds great for the Tyk Analytics data and I think the idea of using the Tyk Pump to Prometheus was mentioned here:\nhttps://community.tyk.io/t/monitoring-tyk-pump-with-prometheus/1856\nHowever for non-analytics data (like those currently output in Statsd or New Relic format) it would be seem more logical for them to be available in Prometheus format from that Tyk service directly as an additional instrumentation output type?  \nA workaround at the moment would be to use the StatsD to Prometheus metrics exporter but this seems a bit convoluted.. Prometheus identifies current gateway/pump/dashboard pods via kubernetes label selectors in the service discovery config.\nThe statsd_exporter documentation seems to indicate that, although it is possible, it's not recommended to be used as a direct transport from StatsD to Prometheus.  Since Tyk already supports two other metric outputs (one of which is a closed-source, commercial tool), Prometheus support doesn't seem illogical.  Especially given that it's a suggested best practice for an application operating in Kubernetes:\n\nMake your application easy to monitor\nLike logging, monitoring is an integral part of application management. A popular option in the Kubernetes community for monitoring is Prometheus, a system that can automatically discover the pods and services it has to monitor.\n\nPrometheus support seems to be a common feature for most applications that operate in a Kubernetes environment: Ambassador and Kong API Gateways seem of offer this sort of functionality natively or via a plugin.\nWith regards to performance: there will be a CPU/memory penalty from any sort of metrics functionality, Prometheus, StatsD or otherwise.  However it shouldn't have an impact unless I choose to use that type of monitoring?\nI appreciate Prometheus support is mainly relevant for Kubernetes-hosted implementations and that may not be the current aim of this project.  I'm just suggesting this as feedback for how the Tyk product might be improved.. ",
    "paltryeffort": "Doing a curl in the container without certificate I get:\ncurl: (60) SSL certificate problem: self signed certificate\nAfter adding the certificate to the container I get:\ncurl: (51) SSL: certificate subject name 'something' does not match target host name 'myserver'\nTykMakeHttpRequest doesn't seem to work with that. Is there any workaround for that?\n. Hello,\nI tried redis over TLS using tykio/tyk-hybrid-docker:v2.6.2 but I can't get it to work. I couldn't find any special option in the documentation so I just use the standard config:\n\"storage\": {\n        \"type\": \"redis\",\n        \"host\" : \"somehost.redis.cache.windows.net\",\n        \"port\" : 6380,\n        \"username\": \"\",\n        \"database\": 0,\n        ...\nWhen using \"log_level\": \"debug\" I get the following:\n```\ntime=\"Jun 25 14:47:39\" level=debug msg=\"Setting up analytics DB connection\" \ntime=\"Jun 25 14:47:39\" level=debug msg=\"Connecting to redis cluster\" \ntime=\"Jun 25 14:47:39\" level=debug msg=\"Creating new Redis connection pool\" \ntime=\"Jun 25 14:47:39\" level=info msg=\"Connection dropped, reconnecting...\" \ntime=\"Jun 25 14:49:05\" level=debug msg=\"Using RPC cache purge\" \ntime=\"Jun 25 14:49:05\" level=debug msg=\"Storage Engine already initialised...\" \ntime=\"Jun 25 14:49:05\" level=debug msg=\"[STORE] Getting WAS: PollerActiveInstanceID\" \ntime=\"Jun 25 14:49:05\" level=debug msg=\"[STORE] Getting: host-checker:PollerActiveInstanceID\" \ntime=\"Jun 25 14:49:05\" level=debug msg=\"Notifier will not work in hybrid mode\" \ntime=\"Jun 25 14:49:05\" level=debug msg=\"Storage Engine already initialised...\" \ntime=\"Jun 25 14:49:05\" level=debug msg=\"Storage Engine already initialised...\" \ntime=\"Jun 25 14:49:05\" level=debug msg=\"Timeout set to: 10\" \ntime=\"Jun 25 14:49:05\" level=debug msg=\"Checking URL: http://cloud.tyk.io/1337/tyk/webhook\" \ntime=\"Jun 25 14:49:05\" level=info msg=\"Setting up analytics normaliser\" \ntime=\"Jun 25 14:49:05\" level=debug msg=\"Redis log hook active\" \ntime=\"Jun 25 14:49:05\" level=info msg=\"PIDFile location set to: ./tyk-gateway.pid\" \npanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x9f9da6]\ngoroutine 133 [running]:\ngithub.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc.(DispatcherClient).Call(0x0, 0xe96fa1, 0x4, 0x0, 0x0, 0x203a6c6562614c20, 0x206e6769536f5722, 0x230a22616e696843, 0x3a6c616972655320)\n    /src/github.com/TykTechnologies/tyk/vendor/github.com/lonelycode/gorpc/dispatcher.go:446 +0x26\nmain.(RPCPurger).PurgeCache(0xc4202e8fc8)\n    /src/github.com/TykTechnologies/tyk/rpc_analytics_purger.go:45 +0x69\nmain.RPCPurger.PurgeLoop(0x14d9d00, 0xc4202898a0, 0xc42005b0e0)\n    /src/github.com/TykTechnologies/tyk/rpc_analytics_purger.go:39 +0x42\ncreated by main.setupGlobals.func2\n    /src/github.com/TykTechnologies/tyk/main.go:178 +0xb8\n```\nIt says \"connecting to redis\" cluster although it's not a cluster. It hangs about a minute until it prints the rest.\n. ",
    "nfedyk": "+1 we can benefit from this. ",
    "bmudda": "+1. +1. ",
    "danilobreda": "Thanks lonelycode... sorry for my my late comment. I will update my dashboard and gateway to the latest version.\nI dont know if i need to close the issue or not, its only a recommendation for that kind of error, i think you get it. . ",
    "klyr": "Hi @buger,\nAre you missing some more documentation ? Do you have any comments or idea, in order to improve it, or make it useful to integrate into Tyk ?\nJust to ping you :). @mvdan: Thank you very much for the code review, I'm new to Go, so, still learning. I just rebased on top of master.\n@buger: Regarding go-jq, I use my own fork because the library was missing a few error checks, so I added them. The pull request is pending... This library was one of the most simple, that is the reason of this choice, but it can of course be changed by something else.\nRegarding the fact that it uses CGO, I totally agree, it's a weak point, I won't argue against this :) I can even say that it will make your build/check/CI workflow a little bit more complex, as it needs to have libjq development files installed, and libjq becomes a requirement at runtime. Maybe it's possible to make it a conditional option at build time ?\nAnyway, I will refine it.\nThanks.. @mvdan: Here is the, old, pull request: https://github.com/mgood/go-jq/pull/3\nI can switch to another library, but at the end, it will still be a wrapper to the C library.\nAnother solution can be to use a native Go implementation of JQ like this one https://github.com/savaki/jq, but the problem is that this implementation has only a subset of features of JQ.. @buger:  I'm working on new modifications (WIP) on an alternate branch (https://github.com/klyr/tyk/tree/jq-transform-no-dep). Removing the dependency of go-jq, and putting what is relevant into tyk directly.\nMoreover, now, instead of returning a coma-separated json value (the body and the output headers) only one json object is required to be returned, of the following form:\njson\n{\n  \"body\": THE_TRANSFORMED_BODY,\n  \"output_headers\": {\"header1_name\": \"header1_value\", ...},\n  \"output_vars\": {\"var1_name\": \"var1_value\", ...}\n}\nAlso fixed a race condition by using a mutex to allow only one goroutine at a time to use a JQ context.\nI'll update the code in regards to your comments.. @buger : The new changes are on a new branch, you can see the diff on https://github.com/TykTechnologies/tyk/compare/TykTechnologies:master...klyr:jq-transform-no-dep\nDo you prefer that I do a pull request ?. Having the following flags seems to work, but I don't find it very clean ...\n// #cgo LDFLAGS: /home/XXX/libs/libjq.a /home/XXX/jq/modules/oniguruma/src/.libs/libonig.a -lm\n. Unfortunately I'm not able to link the jq library statically.\nI tried various combination of linking flags without success\nMoreover, the jq library needs the libm which needs the same version of the Glibc on the destination host, for example:\n$ ldd ./tyk\n./tyk: /lib64/libm.so.6: version `GLIBC_2.23' not found (required by ./tyk)\n\nI'm tempted to say that it's a bad idea to statically link this library because it create too many constraints on the destination host.\nBut I understand it's also a problem to make this library a requirement during the installation.\nDo you have other ideas that I can explore ? . The 2 flags you mentioned are libtools flags, their role is to use the '-static' flag and to rewrite libraries names to fullpath.\nMoreover, -static tries to link everything statically even libc.\nThe best I can have in jq.go is (only compatible with GNU ld):\n// #cgo LDFLAGS: -l:libjq.a -l:libonig.a -lm\n\nand  compile the whole thing with:\ngovendor build -tags 'coprocess python'\n\nAnd if the jq and oniguruma libraries are not in default path, prepend the command with for example:\nCGO_LDFLAGS=\"-L /home/.../jq/.libs -L /home/.../ jq/modules/oniguruma/src/.libs\"\n\nSo at the end, libjq and libonig are linked statically, but libm, as libc, are linked dynamically.. The first element is the actual transformed body transformed by JQ.\nIf the JQ filter provides a second element (another JSON object) with specific \"output_headers\" and/or \"output_vars\" object, it will be given back to tyk in order to update he headers of the tyk query/reponse, or feed the context vars.\nFor example, let's take the following jq filter:\n{mynewfield: .data}\n\nit will return a JSON object with only the data field.\nNow, if the filter is:\n{mynewfield: .data}, {output_headers: {x_name: .name}, output_vars: {age: .userAge}}\n\nit will add the x_name header to the http query or response, and add the age variable to the context vars, which will be available with the $tyk_context.jq_output_var_age in url rewrites for example.\nThinking of it, I now think that the output_headers is useless, and that the output_vars mechanism can be used to add specific HTTP headers (if the modify_headers middleware is context vars aware).\n. Yes, it's a use case we can have. I understand it's very specific to our usecase.\nFor example, we can imagine having a \"deviceID\" field inside the JSON body, that we want to put as a X-DEVICE-ID http header for the upstream server.. This is a way to give metadata (like the headers or the request context) other than the body itself, to the jq filter.\nSo instead of just giving the actual body to the jq filter, Tyk gives the body, inside a 3 elements array, along with the requestContext and the response headers.\nThat is why, the jq filter have to begin with . as [$reqContext, $resHeaders, $body] in order to assign each element of the array to a variable that we can further use in the jq filter.\nI agree it's a trick, and I found no other way to do it at the moment.. Yes, \"+\" means merge.\nRegarding your idea, yes, we can do that as well. But at the end, it's the same idea, except that instead of an array (an maybe a cryptic syntax to do variable assignment), it's a object.\nI'll update my code, to use an object instead of an array, it will make things easier to understand.\nGood idea !. I don't understand what I need to do here. If you are asking, I guess it's because I shouldn't have. I thought the json decoder was doing the close(). ",
    "raoulbillard": "I runned that and it work well, but in the future i hope that's may be fix. . ",
    "ELE3E": "To me it would seem logical to link api catalogues to existing API definitions, so that the catalogue is aware of all of the setttings you've entered there, like versions, slug definition, etc.\nIn fact, in my API setup required me to add a swagger definition with (in my case) an endpoint only at the root and put a slug in that is stripped upstream.\nIn the API Catalogue i had to add my slug to the endpoint, otherwise it wouldn't compose the right url. If I would have put the slug in the basePath, it would compose the url with a forward slash at the end (which doesn't work, should it work?)\nIn the case that the API definition is linked (optionally maybe) to the API definition, this could be just added to the url instead of having to customize the swagger defnition just for the documentations page.\nI think it would be fair to allow for uploading an updated definition for newer versions.\nThis actually links a bit with #1083 . I see your point. In that case you would compose a larger swagger definition to gather all of these micro services?\nLinking is also not necessary, but at least should allow updates. Documentation of older versions should stil be possible while they have not expired yet.. ",
    "danp3d": "@buger - Thanks mate.\nCommited a few changes to ensure the rule is also applied to path configurations.\nI'm not overly familiar with path configs (only ever used it in very basic scenarios) but I believe I'm covering what's needed in there.\nCheers!. @buger Sorry man, past few days have been seriously crazy.\nI'm starting on the changes now - I'll let you guys know if I end up running out of time here.\nThanks!. Right-o, if you guys wanna take over from here that would be awesome.\nI'm already using this in production BTW (been running for about a week now), and no signs of issues so far :+1:.. Yeah, I'm struggling a little bit with this one.\nI wanted to keep consistent with other similar methods which are all called Check<...>.\nBut something like CheckHeaderInRemoveList means it will have to be negated in most cases (ie if !CheckHeaderInRemoveList...) which some people are a bit uncomfortable with (I personally have no problems with that).\nI'm committing it as CheckHeaderInRemoveList, but name suggestions here are very welcome :smile: . ",
    "manuelbcd": "Hi @matiasinsaurralde thanks for your response.  Yes already tried in two different laptops with windows7\n```\nERROR: for tyk_pump  Cannot start service tyk_pump: oci runtime error: container_linux.go:262: starting container process caused \"process_linux.go:339: container\ninit caused \\\"rootfs_linux.go:57: mounting \\\\\"/c/docker/tyk_quickstart/pump.conf\\\\\" to rootfs \\\\\"/mnt/sda1/var/lib/docker/aufs/mnt/0d2eff975d16b71bc80\n756b6334fff23fc7055573ef815778fa55f41329f68a6\\\\\" at \\\\\"/mnt/sda1/var/lib/docker/aufs/mnt/0d2eff975d16b71bc80756b6334fff23fc7055573ef815778fa55f41329f68a6/opt/ty\nk-pump/pump.conf\\\\\" caused \\\\\"not a directory\\\\\"\\\"\"\n: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type\nERROR: Encountered errors while bringing up the project.\n```. ",
    "pastaman-lg": "@mvdan awesome, thanks for quick turnaround!. ",
    "chasebish": "How can I add this feature to my APIs?. ",
    "preethi-ravichandran": "Hi, I am using Tyk on-premise using Docker. Here, keys are not even sent to email. But in cloud version, Keys are automatically sent to email, once requests to key have made. Is there any solution for this?. ",
    "csbogdan": "The only reason why splitting this makes sense for me is for centralized logging purposes, where we use different transformations and cleanup policies for different types of logs.\nI'm not using tyk for long enough to know yet all types of log messages, so I can't argue on the  messages versus program output statement. However, looking at provided service file by tyk and how there's a clear intent to use two distinct logging streams, it seems there might be a plan to actually use stdout for something. In this case, it makes total sense to only use stderr for its intended purposes.\nChanging info to stdout is a simple change, and getting back to current behavior can be easily be achieved with > /path/to/stderr_file 2>&1 at startup.\nCheers.. Just wanted to point out that this is in fact a security issue, not exactly a feature request. Stripping auth data from backends calls should\u2019ve been default behavior, and only then adding the option to not remove them could\u2019ve been considered a feature request, on api level.. Hello. The email, or some unique way to identify the user, is important for audit purposes really. That's where this request comes from.. ",
    "jacyo": "The NewMultiTargetProxy always return nil on master branch. yes, reload tyk.conf. \nIn pkg goagain, function net.FileListener return fcntl: bad file descriptor.\nIn setEnvs,  fd = uintptr(v.FieldByName(\"sysfd\").Int()) is not right.. Ubuntu16.04, AMD64, no docker.\nOperation is as follows:\ngo install -tags 'coprocess grpc' github.com/TykTechnologies/tyk\n./bin/tyk --conf=/root/tyk/tyk.conf --httpprofile &> /root/tyk/tyk.log &\nkill -SIGUSR2 4957\nLog:\n2017/11/06 00:47:19 goagain.go:215: user defined signal 2\n2017/11/06 00:47:19 goagain.go:130: spawned child 4965\ntime=\"Nov  6 00:47:19\" level=info msg=\"--> Using clustered mode\"\ntime=\"Nov  6 00:47:19\" level=info msg=\"Setting up analytics normaliser\"\ntime=\"Nov  6 00:47:19\" level=info msg=\"PIDFile location set to: /root/tyk-10.30/tyk.pid\"\ntime=\"Nov  6 00:47:19\" level=info msg=\"Initialising Tyk REST API Endpoints\"\ntime=\"Nov  6 00:47:19\" level=info msg=\"--> Standard listener (http)\"\ntime=\"Nov  6 00:47:19\" level=fatal msg=\"Error starting listener: listen tcp :8888: bind: address already in use\"\n. yes, don't work on 2.3.10.. notice, I change to fd = uintptr(v.FieldByName(\"pfd\").FieldByName(\"Sysfd\").Int()) in goagain.go. github.com/spaolacci/murmur3\nThe package need to be updated.. It's difficult to keep compatibility with old keys.\n. ",
    "ArturoSerrano": "The issue is that protobuf3 doesn't have a value that directly translates to the go object of map[string]interface{}. The closest that we can generate is using the Any value in protobuf. Unfortunately, this doesn't create the required object in Go, but rather a *Any which will require using reflection and an intermediate type to assign values to it. Additionally, even if we did an intermediate to resolve the field, we would need to implement the same for the other languages that the protobuf is responsible for. It's a much easier solution to conform to a map[string]string since that translates fine in all the languages.\nI like the idea of filtering out from the ConfigData object instead of adding another field. Though I'm concerned about the performance hit requests might take to check every field in the configdata for type assertion. I'll look into it and see if Go can do this gracefully.\nNesting is the original issue with the protobuf. map[string]string only supports one layer of key/values. I think it would be rare that someone would duplicate other config keys inside the ConfigData field. We could add additional filtering to prevent APIID or OrgID (The 2 defaults inserted into Spec) but then that would add a precedent to filter for any other future fields.\n. I have now changed it from using a new field to parsing out the first layer of Config Data and writing it to the Spec field.  Go had an easy way to do this, so it seems like a better solution.\n@mvdan please review and let me know if I can make further improvements. @mvdan Rich Plugins and Coprocess are the same thing.  This change would cover all plugins under the coprocess, so gRPC, Python and Lua.  Javascript is unaffected by this.. @mvdan @matiasinsaurralde Hey guys, just wanted to know if any further work is required for this PR? I believe the solution we have come up with provides useful features.  thanks. @buger Hey,  I think that's an interesting idea.  However, it would require the middleware to continuously parse string to json for every request.  I'm open to investigating it, will hopefully get a chance to look into it over the next couple of days\n. Hi, sure I can elaborate on the issues with protobuf3.\n1) The issue is that protobuf3 doesn't have a value that directly translates to the go object of map[string]interface{}.  The closest that we can generate is using the Any value in protobuf.  Unfortunately, this doesn't create the required object in Go, but rather a *Any which will require using reflection and an intermediate type to assign values to it.  Additionally, even if we did an intermediate to resolve the field, we would need to implement the same for the other languages that the protobuf is responsible for.  It's a much easier solution to conform to a map[string]string since that translates fine in all the languages.\n2) I like the idea of filtering out from the ConfigData object instead of adding another field.  Though I'm concerned about the performance hit requests might take to check every field in the configdata for type assertion.  I'll look into it and see if Go can do this gracefully.\n3) Nesting is the original issue with the protobuf.  map[string]string only supports one layer of key/values.  I think it would be rare that someone would duplicate other config keys inside the ConfigData field.  We could add additional filtering to prevent APIID or OrgID (The 2 defaults inserted into Spec) but then that would add a precedent to filter for any other future fields.\nI will now work on the suggested approach of using ConfigData and only applying first-level objects.  . ",
    "javi830810": "Just wanted to throw out there that a functionality like this it's pretty much needed for Rich Plugins, currently there's no way to provide data from the API spec into the Plugins.. Hi, we're investigating a leak in Python middlewares, we're reading code, running Performance tests, etc...\nOne of the few things we've noticed is the absence of usage for PY_DECREF, when creating objects in CPython, like here:\nhttps://github.com/TykTechnologies/tyk/blob/master/coprocess_python.go#L127-L155\nAny reason for that? We've seen lots of improvements in memory by decreasing references there. Also, do you guys have any confirmation for a Memory Leak regarding Python Middlewares?\nWe can reproduce the leak easily. \n. Below is attached a config (tyk.conf+middleware) where you can easily reproduce the leak, just hit it with ~ 50 user for about 4 minutes (around 70k requests) you'll see how it goes from around 20 mbs to about 200mbs.\nClarify: This tyk.conf is production ready, with all the bells and whistles, disabled_health checks etc...\nWe might be switching gears to GRPC because of this leak. \nleak-config.zip\nPS: Thanks for attending to this matias, really this is a lot\nPS2: This is tyk 2.3.8, with tyk 2.3.10 is worse. @buger The leak is confirmed even after those changes. In fact those changes (dismissing the fact that @matiasinsaurralde added one extra C.free), were already there, just missing the defer.\nI was able to narrow the leak to the very method the Python hook is dispatched. \nI carefully analyzed line by line what's happenning in there, and the result is the code below. Which includes fixes like:\n\nChanging PyTuple_Pack for PyBuild because of some people mentioning reference count increasing weirdly with PyTuple_Pack.\nAdding PyDecref for those objects that were created in here and not needed elsewhere.\n\nNote1: The code below still leaks...but less (like 5mb less per 5000 requests according to our testing)\nNote2: The code belongs to coprocess_python.go\nNote3: We totally abandoned Python Middlewares at this point, we changed our whole Middleware base into GRPC.\nI hope this helps the community\n```\nstatic struct CoProcessMessage Python_DispatchHook(struct CoProcessMessage object) {\n    struct CoProcessMessage outputObject = malloc(sizeof outputObject);\nif (object->p_data == NULL) {\n    return outputObject;\n}\n\ngilState = PyGILState_Ensure();\n\nPyObject *oldRequestPy = PyBytes_FromStringAndSize(object->p_data, object->length);\nPyObject *hookResult = PyObject_CallFunction( dispatcher_hook, \"(O)\" , oldRequestPy );\n\nif( hookResult == NULL ) {\n    PyErr_Print();\n            Py_XDECREF(oldRequestPy);\n    return outputObject;\n}\n\nPyObject *newRequestPy = PyTuple_GetItem(hookResult, 0);\nchar *requestString = PyBytes_AsString(newRequestPy);\nPyObject *requestLengthPy = PyTuple_GetItem(hookResult, 1);\nlong requestLength = PyLong_AsLong(requestLengthPy);\n\noutputObject->p_data = requestString;\noutputObject->length = requestLength;\n\nPy_XDECREF(oldRequestPy);\n\nPyGILState_Release(gilState);\nreturn outputObject;\n\n}\n```\n. ",
    "Rouzz": "Hi, I came by the same issue.\nAny info on when it will become available ?\nMy only hope so far is for each method of the API to add some kind of 'X-HTTP-method' header that will allow the middleware to process requests based on HTTP methods. I use the Endpoint Designer for that.\nThat's the only way I could think of in the meantime :). ",
    "ft-george-toader": "app.js change line 9097 to PortalPages.get({p:$scope.current_page},\nPlease fix asap.\nThank you!. ",
    "peloncano": "+1 the UI needs to be consistent across the dashboard letting the user know that the JSON was invalid, similar to the way it is done in Advanced Options -> Config Data.\n\n. ",
    "dragon28": "Hello @buger and @excieve \nThank you for replying and providing support.\nIt help a lot with the solution which provided by you guys :+1: \nThanks again. ",
    "nextmetaphor": "When key hashing is enabled, for the gateway API, it would be great if...\n\n\n/tyk/keys/create [POST] also returned the key hash\n\n\n/tyk/keys/{access_token} [GET] could also accept the key hash if the hashed boolean parameter is set, as is currently supported for the DELETE method. This obviously wouldn't return the key value itself, but would be used to examine what access a key has access to, rate limits, policies etc from the hash of the key\n\n\n/tyk/keys/ [GET] would return the key hash for all keys\n\n\n/tyk/keys/ [GET] with a string policy_id parameter would return all hashed keys associated with the specified policy\n\n\n/tyk/keys/ [GET] with a string api_id parameter would return all hashed keys associated with the specified api\n\n\nThis functionality would also be replicated on the dashboard API.\nIn essence the above allows an administrator of the gateway, who doesn't know (or need to know) the actual key itself, to ensure that the current keys are auditable, and can be removed if required.. Having unique API names is particularly important when setting up policies: if duplicate API names are used then it makes it almost impossible to understand which API a policy is referencing, as it is the API name field (and not the underlying api_id)  that is displayed in the dashboard.\nIf duplicate API names are permitted, it may be worth showing both fields (name and api_id) in the dashboard to help differentiate here.. ",
    "ewah": "The error happens in api_loader.go around // Handle custom domains.\nSo quickly I've made a gorilla mux script simulating stuff.   \n```\npackage main\nimport (\"fmt\"; \"net/http\"; \"github.com/gorilla/mux\")\nfunc helloCatchAll(w http.ResponseWriter, r http.Request) { fmt.Fprintf(w, \"hello CatchAll\\n\") }\nfunc helloRoot(w http.ResponseWriter, r http.Request) { fmt.Fprintf(w, \"hello Root\\n\") }\nfunc helloHello(w http.ResponseWriter, r http.Request) { fmt.Fprintf(w, \"hello Hello\\n\") }\nfunc helloWorld(w http.ResponseWriter, r http.Request) { fmt.Fprintf(w, \"hello World\\n\") }\nfunc main() {\n  r := mux.NewRouter()\n// as per api_loader.go:loadApps around line 555\n  // concurrency says these can happen at any order\n  s1 := r.Host(\"{fqdn:abc.xyz}\").Subrouter() // for '/hello-world'\n  s2 := r.Host(\"{fqdn:abc.xyz}\").Subrouter() // for '/hello'\n  s3 := r.Host(\"{fqdn:abc.xyz}\").Subrouter() // for '/'\n// as per api_loader.go:loadApps around line 582\n  // these happen properly in descending order\n  s1.HandleFunc(\"/hello-world{rest:.}\", helloWorld)\n  s2.HandleFunc(\"/hello{rest:.}\", helloHello)\n  s3.HandleFunc(\"/{rest:.}\", helloRoot)\n  r.HandleFunc(\"/{rest:.}\", helloCatchAll)\nerr := http.ListenAndServe(\":6000\", r)\n  print(err)\n}\n```\nSending GET /hello-world/ HTTP/1.1\\nHost: abc.xyz\\n\\n returns properly  hello World\nbut because s1, s2, and s3 get created concurrently in api_loader execution can just as easily look like. \ns2 := r.Host(\"{fqdn:abc.xyz}\").Subrouter() // for '/hello'\n  s1 := r.Host(\"{fqdn:abc.xyz}\").Subrouter() // for '/hello-world'\n  s3 := r.Host(\"{fqdn:abc.xyz}\").Subrouter() // for '/'\nSending GET /hello-world/ HTTP/1.1\\nHost: abc.xyz\\n\\n returns incorrectly  hello Hello\nIt seems that the muxer is iterating through an array of matchers (Subrouters and other stuff) in the order created.  (github.com/gorilla/mux/route.go: func (r Route) Subrouter() Router {...}`)\nThe solution will likely be, something like, looping through specs and create a map of Domain to Subrouter so they can be reused.\n. re. my comment in #1271, would you be able to add custom domains into this test?. This solves our issues.\nJust one note because Host can be domain regex-es does it need to resort based on Domain length to normalize it even more... \nie. something like\nHost(\"{fqdn:abc.(?:(dev.)?).com}\").Subrouter()\nHost(\"{fqdn:abc.(?:.*.?)com}\").Subrouter()\nThe first should always load before the second. \n. @mvdan I'd be happy just doing a sort of length on Domain (regex or not)... it might not be 100% accurate -- but it is 100% consistent. . ",
    "TimMcCauley": "Another important reason for this feature is because different endpoints may point to services that consume different levels of resources, computationally speaking. I would like to be able to sell different amounts of requests per api endpoint for a specific plan, similarly to mapzen's rate limits.\nFree: 2500 requests per day for API1, 1000 requests per day for API2;\nPaid: 5000 requests per day for API1, 2000 requests per day for API2;\n. @buger correct, that's what I mean, thanks.. @nickReyn any thrilling updates for this issue? Thanks . Superb, thanks @buger . @buger just a quick question, do you have an ETA for 2.8 ? Thanks a bunch . Greetings @joshblakeley happy new year - sorry for being so annoying - do you think January is feasible for this update or do you expect it a little later?. Hey @joshblakeley - please don't kill me for asking but are there any updates by any chance? \ud83e\udd47 . Hey @joshblakeley sorry for asking again ;) we have multiple API services which are ready for release but need this beautiful tyk feature first; to this end: are there any news by any chance? Cheers mate. Josh, thank you.. @joshblakeley one last quick question: are there any docs we can use for this update in order for us to prepare our frontend/dashboard code considering the 2.8 changes (our API dashboard currently reads the historic quota information from the tyk API which I guess will now be \"extended\" as one policy can have many APIs with different quotas)? Thank you a bunch. \ud83d\udc4d  perfect and extremely handy. Thanks @ConsM @buger. ",
    "nezorflame": "I think https://github.com/TykTechnologies/tyk/pull/1352 solves this.. Will work on that.. @buger still I'd suggest that these refactored parts need to be reviewed as well. Maybe in another pull request?. @buger I see, maybe they won't be needed anymore then.\nWill try only with the NewRelic stuff.. @buger finished. @buger added requested changes.. @buger anything else to fix/check?. @buger for coprocess plugins.\nWe register hooks, and use RequestURI in a function like this:\n```go\nfunc (f Flow) ExtractData(ctx coprocess.Context, object coprocess.Object) (coprocess.Object, error) {\n    // do some work\n    originalURI := object.Metadata[\"RequestURI\"]\n    // do some work with originalURI\n    level.Debug(f.logger).Log(\n        \"msg\", \"extracted request information\",\n        \"uri\", originalURI,\n        \"env\", env,\n        \"version\", version,\n        \"phone\", phone,\n        \"action\", action,\n        \"key\", token,\n        \"verify\", verify,\n    )\n    // do some other work\n}. Any news on this?. @buger awesome! Could you please @ me when this PR arrives? We'd want to be ready to implement it as soon as it arrives.. Fixed bug when web transactions weren't sent into NewRelic. OK, can be done.. Yes, will change it.. Agree.. Yes, we use this in our flow. We need the original unmodified URI to verify signature.\nIf it's possible, it would be nice to leave this as it is.. ",
    "dencoded": "@mvdan I see, thx for pointing out. maybe, if we are on Go 1.9.x it is time to switch to https://golang.org/pkg/sync/#Map ?. we could wrap actions with API-definitions stored in sync.Map in some simple API so readability won't be compromised, but I think breaking comparability with 1.8-1.9 is a show stopper anyways.\nalso, not in scope of this issue but somewhat related to using locks -  I've noticed that we :\n- sometimes don't unlock with using defer https://github.com/TykTechnologies/tyk/blob/release-2.4/host_checker_manager.go#L547 which could potentially lead to problems\n- we do defer unlock but then do have some logic in the same function after that point https://github.com/TykTechnologies/tyk/blob/release-2.4/api.go#L155  which holds mutex longer then needed. well, yeah - it is not doing any big amount of work, however, thinking about the future - this cycle has three different function calls so we have to keep an eye them and make sure they won't be changed to do some blocking I/O or extra work.\nI think we might benefit from introducing some walker function like https://golang.org/pkg/sync/#Map.Range when we need to iterate over elements and unlock right after all iterations done.  . @mvdan I've merged in your changes and removed some of mine, also I've fixed tests so I guess it is ready for review. @mvdan I understand your point - running master might not produce any races, or might if you unlucky enough and run it hundreds + 1 time :)\nI've added all those changes just to have test -race passed for my branch, no more no less. also, just realized that maybe I should not have been using go test -race ./... as it picks tests and does race detection from the main package too. is it good or bad?. I think we can just close this one as needed changes were already merged in in https://github.com/TykTechnologies/tyk/pull/1334\naccording to races, using atomics.* or alternatives - we can submit PRs as races appear addressing in every case data race detector output. @buger according getTLSConfigForClient and access to global apiSpecs - these changes look similar to ones I pushed to my branch yesterday https://github.com/TykTechnologies/tyk/pull/1304/commits/1a924dee652cf4e8f88662ccd2edf57957fb4bee (which is still failing). So changes in this brunch look Ok to me.\nSpeaking in general - I don't like idea about sharing API spec via global, especially, like you said, we we access them with in every incoming request. @mvdan sorry for delay. LGTM postfactum, code reads clearer for sure.. @buger @mvdan please take a look. I think suggested changes solves the problem. We write to cache storage in async-way and if we need to wait for the moment when those changes actually made to cache - this instrumentation will allow this. \nI have a couple of concerns though. It is code needed just to sync tests with actual cache storage implementation which is part of the real app. Another concern - I think it is normal behaviour if we do request assuming it will be cached asynchronously, and then do another one but it is still not in cache.\nI's suggest two options (which I believe simpler, maybe too simple):\n\nsleep between requests using some jitter and fail after some number of retries (if requests wasn't cached/not cached as expected)\nor after http-request - read cached key from redis directly as part of test-code to wait until it cached/not cached, to make sure it is there and then test that next request was retrieved from cache (using existing logic around returned request ID)  . The main problem with that approach I see is that we are making code more testable but It brings extra-complexity and chunks of code gateway wouldn't need when running without tests.\n\nIf we want to invest some time to make our code more testable I'd vote for:\n\ndon't relay on cache storage availability/presence in tests (at least particularly in this case)\nin test code inject in RedisCacheMiddleware's CacheStore the mock instead of real redis\nprovide mock's expectations for methods' calls, functions' params and returns for deferent situation to test how gateway interacts with cache storage and reacts to various replies/errors from cache storage\n\nOr if we don't want mess up with this now use sleeps/speak to redis directly leaving the gateway code base unchanged. Just to follow up - I've looked at code and found a potential problem there. I will provide fix asap.. Hey @dikderoy \nThanks again for reporting about this problem and for your patience. I pushed PR (see above) which I believe should fix this problem.. not in this PR but related to added changes - I think this comment is not up to date as I see from code we support header, url-param and url 1st part. @joshblakeley I'd do the same we did last time - open issue with data race output and fix it in master, then rebase this branch on master.\nSpeaking of data races - I think there are still 3-4 places where we have them, it is just hard to catch because of intermittent nature of them.. ok, I will add some simple test for reverse proxy to websocket. @buger I've added test for reverse proxying to websocket upstream as requested, please take a look. hm race again, I will look into it. @buger I will check. @buger at 1st look I wasn't able to replicate this issue.\nalso, \"skip_url_cleaning\": true just switches of usage of logic https://golang.org/src/path/path.go?s=2075:2105#L64 which removes from path extra /, . and .., it doesn't do any kind of URL encoding for incoming request or transforming URI segments if I understand right.\nI would ask @paolo-rodeghiero for some details:\n- full tyk config and API spec for that path - to have some idea what middlewares are involved\n- make sure nothing seats in the middle of tyk-gateway and SFCC-upstream\n. @paolo-rodeghiero thanks for providing more details and your API definition - it helped to localize the issue. I was able to replicate this problem so there is no need to ask your client for any secret client IDs disclosure.\nI've already submitted PR for this issue.. hm, I think I know what is going on, I will provide PR shortly. @lonelycode yes, I am/was looking at it. still need to figure out the idea behind it. @buger I've fixed tests you added - there were a little typo in test data. also, I've added some logic to make use of URL.RawPath:\n- strip listen path from RawPath when it is needed as we use its value to direct request to upstream\n- some times URL.RawPath can be empty after parsing incoming requests' URL\nplus added more tests for combinations of strip_listen_path and skip_target_path_escaping\nso, things left:\n- bring back test coverage (it is -0.5% now)\n- add special case when one of Path segments has URL like /abc/http://test.com, we need somehow to analyze URL, split in segments with respect to possible URLs in them (split by / won't work) and apply to each segments PathEscape. ok, working on tests to use new test instrumentation. @buger unfortunately, our RedisCluster.Connect() always returns true, nevertheless Redis is alive or not, so that made me thinking that we need to go deeper to rediscluster.RedisCluster method calls. if you think it is too over complicated, we can change https://github.com/TykTechnologies/tyk/pull/1451/files#diff-0a5b7f37e1eee3672b24bd43a12acee6R50 to use set/get dummy key, I think it should work as SetKey and GetKey calls will return error. I mean the SetKey and GetKey should return error (I see some reconnection logic with infinite loop). if they don't we will have to fall back to rediscluster.RedisCluster API calls. @buger  I was about to change it to use set/get key as you suggested as I realized that ensureConnection() is actually not ensuring connection for real and won't block SetKey operation.\nlets maybe change it so func IsConnected() bool will operate only in terms of type RedisCluster struct methods?\nok, I will change retries and cache cluster case. \ud83d\udc4d \nmy bad (autocomplete screwed stuff) . @buger yep, we need to test it carefully. also, I am still not sure about RPCStorageHandler - there are method stubs there at the moment. Seems like these kind of API calls can be sent only via dashboard API to management gateway or directly to management gateway (not to slave), so I guess we are good.\nAccording to token expiration - looks like we already have it configurable via config and there is no way to get 0 there, correct me if I am missing something.\nInitially it gets set here https://github.com/TykTechnologies/tyk/blob/master/vendor/github.com/lonelycode/osin/authorize.go#L213 which I believe have initial hardcoded value 3600\nThen it gets overwritten with value (if set) from config.Global.OauthTokenExpire here https://github.com/TykTechnologies/tyk/pull/1465/files#diff-2264b1a6175f98974544452eae683529R619\nI didn't touch this peace btw.. @buger PTAL - I've added:\n- new config key oauth_token_expired_retain_period to specify retain period for expired tokens stored in redis sorted sets\n- test for new endpoint GET /oauth/clients/{apiID}/{keyName}/tokens\n- added changes to make api ID optional in POST /oauth/clients/create  - these changes make endpoint more generic, if we provide API ID it works the same it was before, if we don't provide API ID it uses policy's access rights and enumerates APIs from there setting the same newly created oauth-client\nI've tested it with case when we have requested oauth-client for some policy ID which contains several APIs - after request got approved we can get tokens for any API from that policy using the same oauth client credentials . @buger I've submitted changes in tests. please note a couple of changes in instrumentation:\n- (s *tykTestServer) Do(tc test.TestCase) (*http.Response, error) is not following redirects anymore (useful to tests 3XX replies)\n- (s *tykTestServer) Run(t *testing.T, testCases ...test.TestCase) (*http.Response, error) - uses copy of response for asserts and returns unclosed original response to be read in test logic if needed. @buger @matiasinsaurralde while doing testing/debugging I confirmed that in case of empty path for tracked endpoint:\n\nit doesn't panic anymore\nwe send analytics record with Path: \"/\" to storage. one more thing for documenting:\nadded new config value \"enable_hashed_keys_listing\" with \"false\" by default\n\nthis config value controls access to GET /keys when keys are hashed.\n- so, if \"hash_keys\":true and \"enable_hashed_keys_listing\":false then GET /keys will return 404 with explanation why\n- if \"hash_keys\":true and \"enable_hashed_keys_listing\":true then GET /keys will return 200 with list of hashes. What the point about custom upstream with timeout for each request?\nAdding time out won't guarantee the same latency for every request as there will be still some code in play. I think current one with minimal latency is good one as we wanna benchmark our tyke code like how performant stuff before and after reverse-proxy to upstream.\nMy 1st idea was to eliminate touching upstream for benchmarks but I decided to leave it as we have some non trivial logic in reverse proxy.. @buger \ud83d\udc4d . @buger @asoorm I've created this ticket https://github.com/TykTechnologies/product/issues/94. @buger some comments to my latest commits:\n- quota tests cover case when rate limit was not set and we can still process traffic\n- I had to increase go test timeout to 40 sec because I added more sleeps in tests\n- races where in a couple of spots:\n  1. setting request's context in go-routine which was read in middle-wares\n  2. we change global.Config in tests and read it in code under test at the same time so race was there - this is actually common (but intermittent) problem in other our tests\n- fixed one bug in OrganizationMonitor mw for off-thread processing mode - orgActiveMap.Store was never called. @LuanvP @buger @ilijabojanovic after looking at last merges I believe this issue was fixed in fix provided for https://github.com/TykTechnologies/tyk/issues/1559. Also, submitted PR https://github.com/TykTechnologies/tyk/pull/1572 with one more change not directly connected for this issue. I like the idea to support both yaml or json. However, would be interesting to see how our config would look like in yaml just to make sure it won't look too crazy.. also, while looking at performance I found that \"max_idle_connections_per_host\" doesn't have any default value so if it is not set explicitly in tyk.conf it will get http Transport's default value which is 2\nalso, we have that comment in https://github.com/TykTechnologies/tyk/blob/v2.6.1/reverse_proxy.go#L315 // default is 100 which is not true, we don't set any default value (except pre-built docker images) - that was confusing to me while looking at code\nso my suggestions are:\n\ndocument \"max_idle_connections_per_host\" and its benefits in docs and particularly in https://tyk.io/docs/deploy-tyk-premise-production/\nadd max_idle_conns_per_host to out tyk.conf.example \ndon't set MaxIdleConns at all, leave it to be infinite, it won't grow to more than max_idle_conns_per_host * upstreamHostsNumber anyways\nset MaxIdleConnsPerHost to 100 explicitly if it wasn't set in config via max_idle_conns_per_host\n. @buger no problem! will do shortly. @buger done!. It works fine without node registration as it it skips that step (registering node) and just runs DRL with 1 current node with default NodeID=solo-.... @asoorm  @joshblakeley my 5 cents - having it as hardcoded 100 was definitely a problem\n\nhowever, If we allow users to configure this I think it needs to correlate with \"max_idle_connections_per_host\" - i.e it doesn't make any sense to have in config \"max_idle_connections\": 100 and  \"max_idle_connections_per_host\": 500 because max_idle_connections regulate max of idle connections across all upstream hosts and any particular upstream host won't get required 500. This sounds like a user's responsibility to watch this stuff but we can do at least message in log and mentioning that in docs.\nalso, I believe we need to have default value as infinite (0) because if existing users leave tyk.conf unchanged (and many of them will) or new users won't pay attention to docs - they will still have idle connections pool capacity 100 as default which is almost equal to have it hardcoded.\naccording to concerns about unlimited connections - max_idle_connections set as infinite actually doesn't mean infinite idle connection pool. if I understand right that pool will have no more than number_of_upstream_hosts * max_idle_connections_per_host.\nalso, set is as infinite by default makes possible to add more upstream hosts without being restricted by overall number of idle connections. my comment about unlimited as default was according to option we change in this PR - \"max_idle_connections\". I believe we shouldn't do 100 as default as it is almost equal to have it hardcoded to 100 as it was before (unless users change it to big number or -1).. most of the changes are just reusing existing unit-tests code to run benchmarks. also, added two new profiling flags to tyk:\n- --blockprofile - when tyk exits it will generate and flush to disk block-profile with name tyk.blockprof\n- --mutexprofile - when tyk exits it will generate and flush to disk mutex-profile with name tyk.mutexprof\nuseful when you don't want to enable http/pprof (or tyk is irresponsive to http calls) but want to see what was going on with blocking. ok, now I need to solve conflicts here as well. relates to https://github.com/TykTechnologies/tyk/issues/1640. benchcmp results looks cool!. @matiasinsaurralde it still looks cool. avoid doing compile is cool. I was also thinking about creating some kind of internal service/wrapper arround regexp functions where we can cache results of all match/find/submatch like operations and avoid doing them every time, say some map[string]bool where key is just regexp+tested_string\nsay we have 100 requests per sec of endpoint calls GET /abcxyz and it matches regexp abc.* - it is not efficient to do 100 regexp.Match call per sec knowing the result is the same - it does lots of CPU and memory allocations under the hood. maybe this kind of caching is already done on package \"regexp\" level, needs to be proved 1st if we wanna go with that approach.. looks ok to me but need to fix CI. I was debugging this problem too (thanks for hint about event handlers in tyk.conf) - the problem is that afterConfSetup creates event handlers with storage and that code does connection to redis while config is not set 1st time (which screws up redis connection because of its singleton nature) - note we do config.SetGlobal(globalConf) right after call afterConfSetup.\ntbh, I'd just remove code which is making redis connection from handler initialization code here: https://github.com/TykTechnologies/tyk/blob/v2.6.1/event_handler_webhooks.go#L70. looks OK but there is some data race in CI. Thats a pretty minor change but it could contribute to other code performance improvement, where this function is used. However if you compare benchmarks for some MW this improvement might be \"diluted\" as this function could be a small fraction of lots of logic running under the MW's hood.\nSo, for that kind of changes I would create dedicated benchmark to do more granular performance analysis - i.e. create benchmark for func (s *SessionState) Hash() string to prove that this piece of code is faster now (past benchcmp output) as Leon suggested. This function is actually doing two heavy things - user session state encoding and jungling with string so I think it is worth to have bench mark for it anyways (say we switch from message pack to something else and it becomes x5 time faster!). I guess we need to decide - if items here need to have expiration or not, I feel like we don't need expiration. I'd apply some LRU logic instead of expiration, to avoid keeping unused items for a long time but it seemed to be over-engineering. So, I made assumption that being memory bound is OK in that case. The chunk of code we are optimizing here is pretty small and we need to do minimal overhead, I mean those -88% can easily turn into -30% or less  if we add a couple of lines of code.\nI was thinking about go-cache we use but I don't very like it because:\n\nit is source of gettimeofday sys-calls even if items are supposed to be without expiration\nanother concern is efficiency of it, Its main purpose in our code is to avoid network I/O to Redis and it beats it easily as network roundtrip will be always slower than access in-app memory. however, here we are trying to avoid CPU intensive operations and code which helps to do that should be efficient enough, we can end up tuning go-cache instead of our code\n\nit stores interface{} which means we have to do type assertion every time we have cache-hit with Get. @buger added changes:\n\n\nto use go-cache with expiration\n\nnew config key disable_regexp_cache to disable regexp cache (default false)\nnew config key regexp_cache_expire to set ttl for regexp cache items (default is 60 seconds, if set to 0 it will be forced still to 60 seconds)\n\nBenchmark results look good:\n```\nbenchmark                  old ns/op     new ns/op     delta\nBenchmarkURLReplacer-8     18891         1852          -90.20%\nbenchmark                  old allocs     new allocs     delta\nBenchmarkURLReplacer-8     44             12             -72.73%\nbenchmark                  old bytes     new bytes     delta\nBenchmarkURLReplacer-8     848           1088          +28.30%\n```\nBefore:\ngoos: darwin\ngoarch: amd64\npkg: github.com/TykTechnologies/tyk\nBenchmarkURLReplacer-8        500000         18891 ns/op         848 B/op         44 allocs/op\nAfter:\ngoos: darwin\ngoarch: amd64\npkg: github.com/TykTechnologies/tyk\nBenchmarkURLReplacer-8       5000000          1852 ns/op        1088 B/op         12 allocs/op\n. @buger also, added guards for:\n\ncache item key size is up to 1024 chars (I am not too worried about this one as Go's hash-function applied to map keys is pretty efficient, but still good to restrict)\ncache item value size is up to 2048 chars - this one is for methods which return string as result\n\nI suggest we will follow the same tactic when switch more regexp's methods to cached version. . just noticed old vs. new version is now x10 throughput improvement (used to be x6), I think it is result of rebase on master which is cool. @buger I've changed more places to use this package.\nbenchcmp of this branch vs. master:\n```\nbenchmark                                                   old ns/op     new ns/op     delta\nBenchmarkURLReplacer-8                                      17637         1869          -89.40%\nBenchmarkTagHeaders-8                                       953           945           -0.84%\nBenchmarkDefaultVersion-8                                   1143315       1094309       -4.29%\nBenchmarkGetVersionFromRequest/Header_location-8            502427        504809        +0.47%\nBenchmarkGetVersionFromRequest/URL_param_location-8         478343        488246        +2.07%\nBenchmarkGetVersionFromRequest/URL_location-8               470380        486483        +3.42%\nBenchmarkApiReload-8                                        3582607       3482962       -2.78%\nBenchmarkValueExtractor/HeaderSource-8                      121317        127691        +5.25%\nBenchmarkValueExtractor/FormSource-8                        132757        134276        +1.14%\nBenchmarkRegexExtractor/HeaderSource-8                      126821        123369        -2.72%\nBenchmarkRegexExtractor/BodySource-8                        129054        126180        -2.23%\nBenchmarkRegexExtractor/FormSource-8                        135812        131541        -3.14%\nBenchmarkXPathExtractor/HeaderSource-8                      141782        143546        +1.24%\nBenchmarkXPathExtractor/BodySource-8                        140991        139986        -0.71%\nBenchmarkXPathExtractor/FormSource-8                        149560        150459        +0.60%\nBenchmarkInitGenericEventHandlers-8                         748           757           +1.20%\nBenchmarkMultiSession_BA_Standard_OK-8                      1526833       1536099       +0.61%\nBenchmarkBearerTokenAuthKeySession-8                        1824252       1330428       -27.07%\nBenchmarkMultiAuthBackwardsCompatibleSession-8              1835469       1352967       -26.29%\nBenchmarkBasicAuth-8                                        166257872     157838347     -5.06%\nBenchmarkContextVarsMiddleware-8                            1503570       1329565       -11.57%\nBenchmarkMiddlewareContextVars_ProcessRequest_cookies-8     182296        139072        -23.71%\nBenchmarkHMACAuthSessionPass-8                              1345033       1269627       -5.61%\nBenchmarkHMACAuthSessionPassWithHeaderField-8               1399417       1366927       -2.32%\nBenchmarkIPBlacklistMiddleware-8                            30217         28084         -7.06%\nBenchmarkIPMiddlewarePass-8                                 22054         17438         -20.93%\nBenchmarkJWTSessionHMAC-8                                   413662        387747        -6.26%\nBenchmarkJWTSessionRSA-8                                    500462        496211        -0.85%\nBenchmarkJWTSessionRSABearer-8                              503045        500754        -0.46%\nBenchmarkJWTSessionRSAWithRawSourceOnWithClientID-8         511657        503926        -1.51%\nBenchmarkJWTSessionRSAWithRawSource-8                       508989        510455        +0.29%\nBenchmarkJWTSessionRSAWithJWK-8                             503634        509010        +1.07%\nBenchmarkJWTSessionRSAWithEncodedJWK-8                      503104        500626        -0.49%\nBenchmarkProcessRequestLiveQuotaLimit-8                     609915        603677        -1.02%\nBenchmarkProcessRequestOffThreadQuotaLimit-8                455028        455834        +0.18%\nBenchmarkProcessRequestLiveRedisRollingLimiter-8            892327        898661        +0.71%\nBenchmarkProcessRequestOffThreadRedisRollingLimiter-8       747129        734995        -1.62%\nBenchmarkStripAuth_stripFromHeaders-8                       8861          8642          -2.47%\nBenchmarkStripAuth_stripFromParams-8                        39694         40192         +1.25%\nBenchmarkTransformNonAscii-8                                15730         15390         -2.16%\nBenchmarkTransformJSONMarshal-8                             17040         16552         -2.86%\nBenchmarkRewriter-8                                         57391         33428         -41.75%\nBenchmarkValidateJSONSchema-8                               1856091       1801405       -2.95%\nBenchmarkVersioning-8                                       2214420       2045423       -7.63%\nBenchmarkVirtualEndpoint-8                                  370865        352968        -4.83%\nBenchmarkApplyPolicies-8                                    27679         26821         -3.10%\nBenchmarkResponseHeaderInjection-8                          2049338       2046038       -0.16%\nBenchmarkRequestIPHops-8                                    449           409           -8.91%\nBenchmarkWrappedServeHTTP-8                                 215458        142900        -33.68%\nBenchmarkCopyRequestResponse-8                              20595         14475         -29.72%\nbenchmark                                                   old allocs     new allocs     delta\nBenchmarkURLReplacer-8                                      44             12             -72.73%\nBenchmarkTagHeaders-8                                       15             15             +0.00%\nBenchmarkDefaultVersion-8                                   1637           1641           +0.24%\nBenchmarkGetVersionFromRequest/Header_location-8            655            678            +3.51%\nBenchmarkGetVersionFromRequest/URL_param_location-8         639            642            +0.47%\nBenchmarkGetVersionFromRequest/URL_location-8               628            631            +0.48%\nBenchmarkApiReload-8                                        23903          23900          -0.01%\nBenchmarkValueExtractor/HeaderSource-8                      50             50             +0.00%\nBenchmarkValueExtractor/FormSource-8                        77             77             +0.00%\nBenchmarkRegexExtractor/HeaderSource-8                      52             52             +0.00%\nBenchmarkRegexExtractor/BodySource-8                        62             62             +0.00%\nBenchmarkRegexExtractor/FormSource-8                        79             79             +0.00%\nBenchmarkXPathExtractor/HeaderSource-8                      108            108            +0.00%\nBenchmarkXPathExtractor/BodySource-8                        116            116            +0.00%\nBenchmarkXPathExtractor/FormSource-8                        140            140            +0.00%\nBenchmarkMultiSession_BA_Standard_OK-8                      498            498            +0.00%\nBenchmarkBearerTokenAuthKeySession-8                        441            451            +2.27%\nBenchmarkMultiAuthBackwardsCompatibleSession-8              446            456            +2.24%\nBenchmarkBasicAuth-8                                        20077          20062          -0.07%\nBenchmarkContextVarsMiddleware-8                            1951           1938           -0.67%\nBenchmarkMiddlewareContextVars_ProcessRequest_cookies-8     28             28             +0.00%\nBenchmarkHMACAuthSessionPass-8                              294            296            +0.68%\nBenchmarkHMACAuthSessionPassWithHeaderField-8               320            324            +1.25%\nBenchmarkIPBlacklistMiddleware-8                            152            152            +0.00%\nBenchmarkIPMiddlewarePass-8                                 95             95             +0.00%\nBenchmarkJWTSessionHMAC-8                                   595            571            -4.03%\nBenchmarkJWTSessionRSA-8                                    673            673            +0.00%\nBenchmarkJWTSessionRSABearer-8                              705            675            -4.26%\nBenchmarkJWTSessionRSAWithRawSourceOnWithClientID-8         724            726            +0.28%\nBenchmarkJWTSessionRSAWithRawSource-8                       713            685            -3.93%\nBenchmarkJWTSessionRSAWithJWK-8                             717            688            -4.04%\nBenchmarkJWTSessionRSAWithEncodedJWK-8                      691            693            +0.29%\nBenchmarkProcessRequestLiveQuotaLimit-8                     556            556            +0.00%\nBenchmarkProcessRequestOffThreadQuotaLimit-8                527            527            +0.00%\nBenchmarkProcessRequestLiveRedisRollingLimiter-8            2120           2116           -0.19%\nBenchmarkProcessRequestOffThreadRedisRollingLimiter-8       2303           2306           +0.13%\nBenchmarkStripAuth_stripFromHeaders-8                       66             66             +0.00%\nBenchmarkStripAuth_stripFromParams-8                        220            220            +0.00%\nBenchmarkTransformNonAscii-8                                98             98             +0.00%\nBenchmarkTransformJSONMarshal-8                             101            101            +0.00%\nBenchmarkRewriter-8                                         269            238            -11.52%\nBenchmarkValidateJSONSchema-8                               2528           2535           +0.28%\nBenchmarkVersioning-8                                       3177           2863           -9.88%\nBenchmarkVirtualEndpoint-8                                  372            374            +0.54%\nBenchmarkApplyPolicies-8                                    102            102            +0.00%\nBenchmarkResponseHeaderInjection-8                          2507           2541           +1.36%\nBenchmarkRequestIPHops-8                                    4              4              +0.00%\nBenchmarkWrappedServeHTTP-8                                 144            144            +0.00%\nBenchmarkCopyRequestResponse-8                              76             76             +0.00%\nbenchmark                                                   old bytes     new bytes     delta\nBenchmarkURLReplacer-8                                      849           1088          +28.15%\nBenchmarkTagHeaders-8                                       384           384           +0.00%\nBenchmarkDefaultVersion-8                                   221743        221674        -0.03%\nBenchmarkGetVersionFromRequest/Header_location-8            96381         97048         +0.69%\nBenchmarkGetVersionFromRequest/URL_param_location-8         96075         96051         -0.02%\nBenchmarkGetVersionFromRequest/URL_location-8               93329         93341         +0.01%\nBenchmarkApiReload-8                                        1788893       1788776       -0.01%\nBenchmarkValueExtractor/HeaderSource-8                      4569          4570          +0.02%\nBenchmarkValueExtractor/FormSource-8                        10666         10667         +0.01%\nBenchmarkRegexExtractor/HeaderSource-8                      4766          4603          -3.42%\nBenchmarkRegexExtractor/BodySource-8                        9214          9058          -1.69%\nBenchmarkRegexExtractor/FormSource-8                        10861         10705         -1.44%\nBenchmarkXPathExtractor/HeaderSource-8                      9376          9374          -0.02%\nBenchmarkXPathExtractor/BodySource-8                        13795         13795         +0.00%\nBenchmarkXPathExtractor/FormSource-8                        15987         15988         +0.01%\nBenchmarkMultiSession_BA_Standard_OK-8                      83051         83048         -0.00%\nBenchmarkBearerTokenAuthKeySession-8                        78279         78572         +0.37%\nBenchmarkMultiAuthBackwardsCompatibleSession-8              79935         80210         +0.34%\nBenchmarkBasicAuth-8                                        1059877       1060672       +0.08%\nBenchmarkContextVarsMiddleware-8                            304452        301282        -1.04%\nBenchmarkMiddlewareContextVars_ProcessRequest_cookies-8     2388          2386          -0.08%\nBenchmarkHMACAuthSessionPass-8                              47899         48513         +1.28%\nBenchmarkHMACAuthSessionPassWithHeaderField-8               50738         51814         +2.12%\nBenchmarkIPBlacklistMiddleware-8                            32346         32343         -0.01%\nBenchmarkIPMiddlewarePass-8                                 26735         26733         -0.01%\nBenchmarkJWTSessionHMAC-8                                   86744         85665         -1.24%\nBenchmarkJWTSessionRSA-8                                    107749        107752        +0.00%\nBenchmarkJWTSessionRSABearer-8                              110276        108996        -1.16%\nBenchmarkJWTSessionRSAWithRawSourceOnWithClientID-8         110075        111178        +1.00%\nBenchmarkJWTSessionRSAWithRawSource-8                       107400        107232        -0.16%\nBenchmarkJWTSessionRSAWithJWK-8                             107470        106200        -1.18%\nBenchmarkJWTSessionRSAWithEncodedJWK-8                      106325        106413        +0.08%\nBenchmarkProcessRequestLiveQuotaLimit-8                     85039         85029         -0.01%\nBenchmarkProcessRequestOffThreadQuotaLimit-8                83721         83715         -0.01%\nBenchmarkProcessRequestLiveRedisRollingLimiter-8            144093        143924        -0.12%\nBenchmarkProcessRequestOffThreadRedisRollingLimiter-8       151441        151546        +0.07%\nBenchmarkStripAuth_stripFromHeaders-8                       2800          2800          +0.00%\nBenchmarkStripAuth_stripFromParams-8                        14161         14161         +0.00%\nBenchmarkTransformNonAscii-8                                11060         11060         +0.00%\nBenchmarkTransformJSONMarshal-8                             11508         11508         +0.00%\nBenchmarkRewriter-8                                         49940         45599         -8.69%\nBenchmarkValidateJSONSchema-8                               287704        287562        -0.05%\nBenchmarkVersioning-8                                       304356        291761        -4.14%\nBenchmarkVirtualEndpoint-8                                  70101         70095         -0.01%\nBenchmarkApplyPolicies-8                                    12585         12584         -0.01%\nBenchmarkResponseHeaderInjection-8                          399937        398744        -0.30%\nBenchmarkRequestIPHops-8                                    432           432           +0.00%\nBenchmarkWrappedServeHTTP-8                                 48308         48295         -0.03%\nBenchmarkCopyRequestResponse-8                              35584         35584         +0.00%\n``. @buger bothregexp.MatchStringandregexp.Regexp.MatchStringare already cached. according to api_definition.go - it should be covered as we switchedURLSpec.Spec` to cached version https://github.com/TykTechnologies/tyk/pull/1689/files#diff-e174c6f6100dfee8c74de8323d464e36R97\nI see some test coverage reduction - forgot that I added a couple of new cached methods, I will push one more change with tests for them. @buger I've removed import alias \"tykregexp\" as you suggested, also test coverage is back . to normal now.\nI think it is ready to merge.. left some comments, also it needs to be rebased on master. @asoorm bump. @asoorm looks pretty cool. @buger @matiasinsaurralde  I've been looking into this problem as well. I don't think it is because now we calculate murmur for real. If I run it standalone - benchcmp shows pretty descent results:\n```\nbenchmark                                  old ns/op     new ns/op     delta\nBenchmarkMultiSession_BA_Standard_OK-8     5586111       4095055       -26.69%\nbenchmark                                  old allocs     new allocs     delta\nBenchmarkMultiSession_BA_Standard_OK-8     428            284            -33.64%\nbenchmark                                  old bytes     new bytes     delta\nBenchmarkMultiSession_BA_Standard_OK-8     83567         27588         -66.99%\n```\nI think that problem connected with fact that now we don't touch the session if it is not changed and the way we create session in our tests - I feel like tests influence each other. I will push a fix shortly.. confirmed that with these changes our rate/quota limiter blocks BenchmarkMultiSession_BA_Standard_OK from running fast, it returns error Error: Quota exceeded errCode: 403 for all (except 1st 10 calls) and gives most of work to ErrorHandler which has lots of ops inside.\nif we look at:\nfunc createMultiAuthKeyAuthSession() *user.SessionState {\n    session := new(user.SessionState)\n    session.Rate = 100.0\n    session.Allowance = session.Rate\n    session.LastCheck = time.Now().Unix()\n    session.Per = 1.0\n    session.QuotaRenewalRate = 300 // 5 minutes\n    session.QuotaRenews = time.Now().Unix()\n    session.QuotaRemaining = 900\n    session.QuotaMax = 10\n    session.AccessRights = map[string]user.AccessDefinition{\"55\": {APIName: \"Tyk Multi Key Test\", APIID: \"55\", Versions: []string{\"default\"}}}\n    return session\n}\nwe see session.QuotaMax = 10 and session.QuotaRenewalRate = 300 // 5 minutes - it stops BenchmarkMultiSession_BA_Standard_OK from normal run for sure (just ten request for 5 minutes while benchmark is doing several Ks per run). however, on master this benchmark runs normally.\nI think we need to understand why this benchmark works OK on master - looks like it just ignores quota set for session.. @buger  I've added a couple of changes - BenchmarkMultiSession_BA_Standard_OK (and some other) look better now:\n```\nbenchmark                                                   old ns/op     new ns/op     delta\nBenchmarkURLReplacer-8                                      19036         18703         -1.75%\nBenchmarkTagHeaders-8                                       975           962           -1.33%\nBenchmarkDefaultVersion-8                                   1518035       1101265       -27.45%\nBenchmarkGetVersionFromRequest/Header_location-8            534965        498511        -6.81%\nBenchmarkGetVersionFromRequest/URL_param_location-8         501352        490345        -2.20%\nBenchmarkGetVersionFromRequest/URL_location-8               501976        472858        -5.80%\nBenchmarkApiReload-8                                        3811360       3497692       -8.23%\nBenchmarkValueExtractor/HeaderSource-8                      125998        126157        +0.13%\nBenchmarkValueExtractor/FormSource-8                        138120        139929        +1.31%\nBenchmarkRegexExtractor/HeaderSource-8                      132173        158059        +19.58%\nBenchmarkRegexExtractor/BodySource-8                        134681        142991        +6.17%\nBenchmarkRegexExtractor/FormSource-8                        145787        160229        +9.91%\nBenchmarkXPathExtractor/HeaderSource-8                      151543        160926        +6.19%\nBenchmarkXPathExtractor/BodySource-8                        153866        163758        +6.43%\nBenchmarkXPathExtractor/FormSource-8                        164672        160720        -2.40%\nBenchmarkInitGenericEventHandlers-8                         808           742           -8.17%\nBenchmarkMultiSession_BA_Standard_OK-8                      1591845       1539256       -3.30%\nBenchmarkBearerTokenAuthKeySession-8                        1828327       1430046       -21.78%\nBenchmarkMultiAuthBackwardsCompatibleSession-8              1852510       1940279       +4.74%\nBenchmarkBasicAuth-8                                        164595920     162841104     -1.07%\nBenchmarkContextVarsMiddleware-8                            1393747       1418655       +1.79%\nBenchmarkMiddlewareContextVars_ProcessRequest_cookies-8     149227        139889        -6.26%\nBenchmarkHMACAuthSessionPass-8                              1601564       1340059       -16.33%\nBenchmarkHMACAuthSessionPassWithHeaderField-8               1566401       1364649       -12.88%\nBenchmarkIPBlacklistMiddleware-8                            28209         28077         -0.47%\nBenchmarkIPMiddlewarePass-8                                 18202         18189         -0.07%\nBenchmarkJWTSessionHMAC-8                                   681418        393608        -42.24%\nBenchmarkJWTSessionRSA-8                                    814621        515433        -36.73%\nBenchmarkJWTSessionRSABearer-8                              807150        502191        -37.78%\nBenchmarkJWTSessionRSAWithRawSourceOnWithClientID-8         747932        523018        -30.07%\nBenchmarkJWTSessionRSAWithRawSource-8                       740298        505002        -31.78%\nBenchmarkJWTSessionRSAWithJWK-8                             726428        557022        -23.32%\nBenchmarkJWTSessionRSAWithEncodedJWK-8                      731198        514025        -29.70%\nBenchmarkProcessRequestLiveQuotaLimit-8                     636951        664417        +4.31%\nBenchmarkProcessRequestOffThreadQuotaLimit-8                473423        463918        -2.01%\nBenchmarkProcessRequestLiveRedisRollingLimiter-8            985372        914559        -7.19%\nBenchmarkProcessRequestOffThreadRedisRollingLimiter-8       780984        756432        -3.14%\nBenchmarkStripAuth_stripFromHeaders-8                       9003          9260          +2.85%\nBenchmarkStripAuth_stripFromParams-8                        41911         39982         -4.60%\nBenchmarkTransformNonAscii-8                                16314         15879         -2.67%\nBenchmarkTransformJSONMarshal-8                             17156         16961         -1.14%\nBenchmarkRewriter-8                                         58368         56902         -2.51%\nBenchmarkValidateJSONSchema-8                               1866378       1811239       -2.95%\nBenchmarkVersioning-8                                       2383908       2082370       -12.65%\nBenchmarkVirtualEndpoint-8                                  369881        356590        -3.59%\nBenchmarkApplyPolicies-8                                    27422         26838         -2.13%\nBenchmarkResponseHeaderInjection-8                          2160559       2123354       -1.72%\nBenchmarkCopyRequestResponse-8                              15688         15603         -0.54%\nbenchmark                                                   old allocs     new allocs     delta\nBenchmarkURLReplacer-8                                      44             44             +0.00%\nBenchmarkTagHeaders-8                                       15             15             +0.00%\nBenchmarkDefaultVersion-8                                   1724           1637           -5.05%\nBenchmarkGetVersionFromRequest/Header_location-8            676            655            -3.11%\nBenchmarkGetVersionFromRequest/URL_param_location-8         639            639            +0.00%\nBenchmarkGetVersionFromRequest/URL_location-8               628            628            +0.00%\nBenchmarkApiReload-8                                        23907          23907          +0.00%\nBenchmarkValueExtractor/HeaderSource-8                      50             50             +0.00%\nBenchmarkValueExtractor/FormSource-8                        77             77             +0.00%\nBenchmarkRegexExtractor/HeaderSource-8                      52             52             +0.00%\nBenchmarkRegexExtractor/BodySource-8                        62             62             +0.00%\nBenchmarkRegexExtractor/FormSource-8                        79             79             +0.00%\nBenchmarkXPathExtractor/HeaderSource-8                      108            108            +0.00%\nBenchmarkXPathExtractor/BodySource-8                        116            116            +0.00%\nBenchmarkXPathExtractor/FormSource-8                        140            140            +0.00%\nBenchmarkMultiSession_BA_Standard_OK-8                      464            498            +7.33%\nBenchmarkBearerTokenAuthKeySession-8                        387            451            +16.54%\nBenchmarkMultiAuthBackwardsCompatibleSession-8              391            446            +14.07%\nBenchmarkBasicAuth-8                                        20134          20077          -0.28%\nBenchmarkContextVarsMiddleware-8                            1950           1950           +0.00%\nBenchmarkMiddlewareContextVars_ProcessRequest_cookies-8     28             28             +0.00%\nBenchmarkHMACAuthSessionPass-8                              390            294            -24.62%\nBenchmarkHMACAuthSessionPassWithHeaderField-8               415            321            -22.65%\nBenchmarkIPBlacklistMiddleware-8                            152            152            +0.00%\nBenchmarkIPMiddlewarePass-8                                 95             95             +0.00%\nBenchmarkJWTSessionHMAC-8                                   677            571            -15.66%\nBenchmarkJWTSessionRSA-8                                    753            703            -6.64%\nBenchmarkJWTSessionRSABearer-8                              755            705            -6.62%\nBenchmarkJWTSessionRSAWithRawSourceOnWithClientID-8         778            724            -6.94%\nBenchmarkJWTSessionRSAWithRawSource-8                       762            713            -6.43%\nBenchmarkJWTSessionRSAWithJWK-8                             766            717            -6.40%\nBenchmarkJWTSessionRSAWithEncodedJWK-8                      770            691            -10.26%\nBenchmarkProcessRequestLiveQuotaLimit-8                     543            556            +2.39%\nBenchmarkProcessRequestOffThreadQuotaLimit-8                514            527            +2.53%\nBenchmarkProcessRequestLiveRedisRollingLimiter-8            2038           2094           +2.75%\nBenchmarkProcessRequestOffThreadRedisRollingLimiter-8       2265           2282           +0.75%\nBenchmarkStripAuth_stripFromHeaders-8                       66             66             +0.00%\nBenchmarkStripAuth_stripFromParams-8                        220            220            +0.00%\nBenchmarkTransformNonAscii-8                                98             98             +0.00%\nBenchmarkTransformJSONMarshal-8                             101            101            +0.00%\nBenchmarkRewriter-8                                         269            269            +0.00%\nBenchmarkValidateJSONSchema-8                               2529           2528           -0.04%\nBenchmarkVersioning-8                                       2927           2860           -2.29%\nBenchmarkVirtualEndpoint-8                                  372            372            +0.00%\nBenchmarkApplyPolicies-8                                    102            102            +0.00%\nBenchmarkResponseHeaderInjection-8                          2508           2507           -0.04%\nBenchmarkCopyRequestResponse-8                              76             76             +0.00%\nbenchmark                                                   old bytes     new bytes     delta\nBenchmarkURLReplacer-8                                      849           849           +0.00%\nBenchmarkTagHeaders-8                                       384           384           +0.00%\nBenchmarkDefaultVersion-8                                   247505        221578        -10.48%\nBenchmarkGetVersionFromRequest/Header_location-8            97335         96386         -0.97%\nBenchmarkGetVersionFromRequest/URL_param_location-8         96091         96091         +0.00%\nBenchmarkGetVersionFromRequest/URL_location-8               93366         93333         -0.04%\nBenchmarkApiReload-8                                        1789676       1789639       -0.00%\nBenchmarkValueExtractor/HeaderSource-8                      4569          4569          +0.00%\nBenchmarkValueExtractor/FormSource-8                        10666         10666         +0.00%\nBenchmarkRegexExtractor/HeaderSource-8                      4765          4767          +0.04%\nBenchmarkRegexExtractor/BodySource-8                        9213          9214          +0.01%\nBenchmarkRegexExtractor/FormSource-8                        10862         10863         +0.01%\nBenchmarkXPathExtractor/HeaderSource-8                      9375          9375          +0.00%\nBenchmarkXPathExtractor/BodySource-8                        13794         13794         +0.00%\nBenchmarkXPathExtractor/FormSource-8                        15986         15987         +0.01%\nBenchmarkMultiSession_BA_Standard_OK-8                      90385         83059         -8.11%\nBenchmarkBearerTokenAuthKeySession-8                        79254         78572         -0.86%\nBenchmarkMultiAuthBackwardsCompatibleSession-8              80415         79938         -0.59%\nBenchmarkBasicAuth-8                                        1080680       1062460       -1.69%\nBenchmarkContextVarsMiddleware-8                            304276        304263        -0.00%\nBenchmarkMiddlewareContextVars_ProcessRequest_cookies-8     2387          2386          -0.04%\nBenchmarkHMACAuthSessionPass-8                              79461         47584         -40.12%\nBenchmarkHMACAuthSessionPassWithHeaderField-8               80786         50704         -37.24%\nBenchmarkIPBlacklistMiddleware-8                            32338         32345         +0.02%\nBenchmarkIPMiddlewarePass-8                                 26734         26734         +0.00%\nBenchmarkJWTSessionHMAC-8                                   105775        85673         -19.00%\nBenchmarkJWTSessionRSA-8                                    135419        109102        -19.43%\nBenchmarkJWTSessionRSABearer-8                              136594        110307        -19.24%\nBenchmarkJWTSessionRSAWithRawSourceOnWithClientID-8         127023        110085        -13.33%\nBenchmarkJWTSessionRSAWithRawSource-8                       121301        107421        -11.44%\nBenchmarkJWTSessionRSAWithJWK-8                             121338        107486        -11.42%\nBenchmarkJWTSessionRSAWithEncodedJWK-8                      121509        106313        -12.51%\nBenchmarkProcessRequestLiveQuotaLimit-8                     87202         85057         -2.46%\nBenchmarkProcessRequestOffThreadQuotaLimit-8                85880         83687         -2.55%\nBenchmarkProcessRequestLiveRedisRollingLimiter-8            147363        143126        -2.88%\nBenchmarkProcessRequestOffThreadRedisRollingLimiter-8       156260        150689        -3.57%\nBenchmarkStripAuth_stripFromHeaders-8                       2800          2800          +0.00%\nBenchmarkStripAuth_stripFromParams-8                        14161         14161         +0.00%\nBenchmarkTransformNonAscii-8                                11060         11060         +0.00%\nBenchmarkTransformJSONMarshal-8                             11508         11508         +0.00%\nBenchmarkRewriter-8                                         49940         49940         +0.00%\nBenchmarkValidateJSONSchema-8                               287817        287775        -0.01%\nBenchmarkVersioning-8                                       312095        292117        -6.40%\nBenchmarkVirtualEndpoint-8                                  70094         70096         +0.00%\nBenchmarkApplyPolicies-8                                    12585         12585         +0.00%\nBenchmarkResponseHeaderInjection-8                          400072        400007        -0.02%\nBenchmarkCopyRequestResponse-8                              35584         35584         +0.00%\n```\nif it looks OK - lets merge it and use as a baseline for further performance improvements. @buger @asoorm I've been looking into this issue as well. I found the problem is that xml parser can't work with ReadCloser when it actually is net/http's bodyEOFSignal - it is always producing EOF unless it is already seen.\nAlso, I've noticed that our  VersionCheck MW for mocked endpoints producing Chunked reply without providing finalizing chunk properly, so connection stays open and xml parser bumps into EOF at some point. As potential fix we could add final chunk in response:\ndiff --git a/mw_version_check.go b/mw_version_check.go\nindex f444d59..6dc791f 100644\n--- a/mw_version_check.go\n+++ b/mw_version_check.go\n@@ -26,7 +26,7 @@ func (v *VersionCheck) Name() string {\n func (v *VersionCheck) DoMockReply(w http.ResponseWriter, meta interface{}) {\n        // Reply with some alternate data\n        emeta := meta.(*apidef.EndpointMethodMeta)\n-       responseMessage := []byte(emeta.Data)\n+       responseMessage := []byte(emeta.Data + \"\\r\\n0\\r\\n\\r\\n\")\n        for header, value := range emeta.Headers {\n                w.Header().Add(header, value)\n        }\nAs another fix - in func (h *ResponseTransformMiddleware) HandleResponse we can read whole body 1st and then parse like we do in TransformMiddleware:\nrespBody, err := ioutil.ReadAll(r.Body)\n...\ndefer respBody.Close()\n...\nbodyData, err = mxj.NewMapXml(body)\n... . @buger afaik Go transport produces chunked response automatically as long as Content-Length header is not set (we are not setting it here, we could as we know the whole body size in advance). However, I think  you are right about Go handling of chunked response as part of \"http\" - it doesn't require any additional chars in data.\nI think my find with \\r\\n connected somehow with nature of Go's xml parser. I.e. if we add just this:\ndiff --git a/mw_version_check.go b/mw_version_check.go\nindex f444d59..f9d7852 100644\n--- a/mw_version_check.go\n+++ b/mw_version_check.go\n@@ -26,7 +26,7 @@ func (v *VersionCheck) Name() string {\n func (v *VersionCheck) DoMockReply(w http.ResponseWriter, meta interface{}) {\n        // Reply with some alternate data\n        emeta := meta.(*apidef.EndpointMethodMeta)\n-       responseMessage := []byte(emeta.Data)\n+       responseMessage := []byte(emeta.Data + \"\\r\\n\")\n        for header, value := range emeta.Headers {\n                w.Header().Add(header, value)\n        } \nThe scenario @asoorm was testing works without any errors.\nI think 2nd option ioutil.ReadAll(r.Body) +  mxj.NewMapXml(body)  is better as well. mxj.NewMapXmlReader reads stream using ByteReader wrapped around Reader which reads by 1 byte (forcing buffer with size 1), I expect it is not super fast anyways.. also we should probably re-vendor github.com/clbanning/mxj as it contains some optimizations and fixes (our version is about one year old). \ud83d\udc4d for response body transformation fix (maybe worth to mention in docs that for arrays people should use Go's template function index)\nAccording to request body transformation - I think we have a special case here not covered before, also we don't want to break existing functionality. We could introduce new key in the map for rhis special case, say:\n\nif incoming data was json hash-map we can can keep things as is\nif incoming data was json array - this is special case, we still keep bodyData as map[string]interface{} but put read json array into new field bodyData[\"array\"] - this will need to be documented of course\n\n. @buger I think key creation is fine. my concern was that we constantly do generateTokenand pack it into base64 encoded json, in many places - i.e. here https://github.com/TykTechnologies/tyk/pull/1753/files#diff-f0cc9b9790a59495abbf821c26cc986dR228 and then we do reverse operation here https://github.com/TykTechnologies/tyk/pull/1753/files#diff-4c166b743d95629a9ab37eb6fe3df22aR305 right away (if key hashing is enabled). @joshblakeley LGTM with some minor comments. I've been looking into this problem as well and come up with some thoughts, mostly matching what was mentioned by @lonelycode. However, I thought there should be simpler solution, probably I am missing something while saying that solution is simpler.\nSome summary about things we have at the moment.\nWe are limiting number of requests on two levels:\n1. Organization session quota\n2. API key (aka key session) quota\nBoth levels use the same implementation from SessionLimiter method RedisQuotaExceeded\nWe use Redis as a centralized storage for all quota-counters so in case of several gateways serving traffic quota will be counted correctly (unless Redis is available).\nProblem.\nRedisQuotaExceeded implementation calls store.IncrememntWithExpire (we have typo in that method btw) which leads to hit storage with INCR and if it was the first request for current quota renewal interval - it also calls EXPIRE providing quota renewal as expiration interval.\nAs to key format in Redis - it uses QuotaKeyPrefix + keySession.KeyHash() so it tracks quotas per keys (API key sessions or org sessions) just fine.\nAll this makes sense and works fine but has performance problems:\na) it hits Redis to increment counter for every single request with API key containing quota\nb) if organization limiter is enabled and has quota - it hits Redis to increment counter for every request no matter which key used in that request (quota limiting for organizations has been added recently)\nc) in case of RPC setup - it does RPC call for every request to increment session quota counters - for both cases a) or b)\na) or b) itself produce storm of calls to Redis and introduce lots of network traffic, basically Tyk gateway gets bounded by performance of Redis and network capacity. Also, I think it degrades Redis connections pool in case of high throughput to API with key containing quota.\nc) makes Tyk gateway to be network bounded and also can lead to degradation of RPC backend because of storm of calls.\nSolution.\nWe give users a choice (via config values):\n\nUse current implementation as a fine grained control over quotas and declaring that for high throughput it won\u2019t scale well. However, in case of RPC setup and leaving current implementation as is - performance still needs to be addressed.\n\nOr\n\nUse new implementation which doesn't hit Redis per request (more scalable) but has less precision in quota limiting, i.e. if key has quota 1000 requests you might get passed through 1005 requests in the given renewal interval before gateway starts responding with 429.\n\nI think that choice can be a compromise between control and performance - users will decide depending on their use cases.\nAs to new implementation - I'd suggest that flow:\n\n\nLeave logic in RedisQuotaExceeded as is with exception to part where we update counter in Redis (call to store.IncrememntWithExpire).\n\n\nIf config is set to use current implementation then just use current implementation as a short path in logic. \n\n\nIf config set to use new implementation we will have new logic in play.\n\n\nFor new logic I suggest:\n\n\nIn storage implement new method IncrementByWithExpire(key string, incBy int64, expire int64) int64 which does inside INCRBY Redis-operation for the given key incrementing by incBy, if returned result is equal to incBy that means new renewal interval started so in that case we also set expiration with command EXPIRE \n\n\nImplement the same method IncrementByWithExpire(key string, incBy int64, expire int64) in RPCStorageHandler with call to RPC server and implement IncrementByWithExpire on RPC server side as well.\n\n\nDo some kind of cycle as new requests arrive to MW:\n\n\nif aggregation period is done - do current_total = IncrementByWithExpire(key, local_counter, renewal) to overwrite current_total from central storage. Reset local_counter to 0 and start new aggregation period.\n\n\nif current_total >= key quota then start responding with 429 and keep local_counter as 0 (don't increment)\n\n\nif current_total < key quota then increment current_total by 1 and increment local_counter by 1,  respond with 200\n\n\nThat approach probably sounds confusing so I've got a branch to illustrate idea: https://github.com/TykTechnologies/tyk/commit/a4dabee64596bbdc31cdc65737a2427bc6a21ec6\nDownsides of this approach:\n- if aggregation period ends by the time when new renewal period started (key in redis expired or re-added by other gateway) - we will increment current renewal period with number from previous renewal period\n- gateway is living in ideal world during the aggregation period thinking that quota is not exceeded, however key quota can be already exceeded for the key by other gateways by the end of aggregation period of this gateway - as a solution, any gateways should issue special notification when some key's quota is exceeded, so all others will stop counting and start replying with 429 with no increment by end of aggregation period\n- in case of RPC we will have some unpredicted network latency which can be a problem. say we have key with quota 100 and renewal rate 1 second, we set config to have aggregation period to be 100ms so key quota counters will call RPC to send local increments and update total from central Redis every 100ms synchronously, what if RPC latency takes 150ms?\n  . Just a couple of clarifying notes:\n\n\nmy thoughts about degradation of RPC backend wasn't valid 100% because we don't do RPC for IncrememntWithExpire, I was confused by code https://github.com/TykTechnologies/tyk/blob/master/api_loader.go#L187 which seats there but not used and we never recommended to change storage_engine to rpc on API spec level\n\n\nsuggested approach assumes method store.IncrementByWithExpire to be available via RPC dfor MDCB setup (with all concerns about it I mentioned before). @lonelycode you are right, this conversation relates to other approach - I needed to update here to clarify that we are exploring new approach. \ud83d\udc4d for change, worth to do the same for endpoints set in addOAuthHandlers, addBatchEndpoint, also endpoints /debug/pprof/* and /hello. ok, I think I know what is going on, working on this at the moment. @glfp PR is submitted for review just now, you should see this fix in next patch release (if everything goes well and it gets merged). Just some thoughts to clarify what needs to be done. We need to be able to specify rate limit and quotas on three levels:\n\n\nPer Policy (we have that piece now)\n\nPer API included in policy's access rights\nPer path for any API from policy's access rights list\n\nAs I understand that would be on a single policy level without having to create several policies and attaching them to a key.\nAnother thing - we will likely need some validation rules in place, i.e.:\n- rate limits on API level can't be bigger than rate limit on policy level (if specified)\n- rate limit on path-level can't be bigger than rate limit on API level if specified\n- sum of quotas on API level should be no more than quota specified on policy level\n- sum of quotas on path level should be no more than quota specified on API level\nAs to quota counters and leaky bucket rate limiter keys - I think creating special keys should work. I.e. we can extend key format to be key_hash:policy_id:api_id:path\nAlso, when we count requests we need to accumulate on all specified levels and check in direction from high level to lower one:\n- key_hash:policy_id\n- key_hash:policy_id:api_id\n- key_hash:policy_id:api_id:path\nI.e. we have policy with rate limit 1000 rps and that policy provides access to api1 and api2. Say we want to specify rate per API. We could do for api1 800 rps and for api2 300rps which both are under policy rate 1000rps but if we have traffic simultaneously to both APIs they could hit 1100 rps (800+300). Also api1 has rate limit for /path_abc\nIn case of request to api1/path_abc the order of checks \"is it time to reply with 429\" would be\n- check policy key_hash:policy_id counter (as other APIs from access rights might exceeded it already)\n- check key_hash:policy_id:api1 counter (as requests from other paths might already exceeded it already)\n- check key_hash:policy_id:api1:/path_abc counter\nAlso one more change discussed here:\n4. Introduce concept of meta-policy which is policy containing group of other policies. \nI feel like this is too much for one ticket, should we create another ticket for meta-policy change? @buger @asoorm what do you think?. @buger yep, title for this issue and underlaying conversation are a little confusing (I read mostly conversation).\nanother concern - having that this issue flagged as \"customer request\" but it is not easy to understand what was that \"customer request\". simple description of user flow in terms of UI in dash board would be helpful.\naccording to policy structure - looks like every policy in addition to quota and rate limit will have to be associated with (optionally):\n- quota and rate limit per API from access rights list\n- quota and rate limit per path for any API from access rights list\nwhere do you propose to store those things?\nFor multiple policies per key - all policies assigned to the given key should be partitioned and constrain one of rate, quota or acl - every of those three should be provided no more than one of those several policies assigned.\nTbh I had hard time to understand this concept from our UI and docs until I looked into code. I assume new quotas and rate limits per API and per path will have the same logic (can be specified in partitioned (policies only)? Or no? Assuming that both things we want to add (rate and quota for APIs and API paths) belong logically to ACL - how do we  specify different things in partitioned policies if ACL can be checked only in one of partitioned policies?\nAlso, the problem I see is that partitioned policies were added initially to allow control on key level and on policy level at the same time (but overwrite only some limits on policy level), it sounds logical as key and policy have the same things to control - rate, quota or acl. Right now we are adding more stuff to policy like quota and rates for API and API path. If key doesn't have those things does it mean that quota and rates for API and API paths can't be part of partitioned logic?\nAs to key format find the deepest match (Global -> API -> Path), and just use this value - will it make session rate limit or quota \"jumpy\" back and forth? Say the same key provides access to /path1 with 3rps and to /path2 with 3000rps, then we get requests to /path2 (say request number 1000 for that second) and then to /path1 (request number 2 for that second). What is going to happen with value for rate on key session? What are we going to send to leaky bucket associated with that key session?\nAccording to separate counter, and do not intersect with upper rate limits or quotas - it doesn't make sense to me as a potential user. If I have set rate limit for some API as 100rps I cannot understand how some paths under that API can have say x10 bigger rate. What the point to limit rate on API level then? What traffic are we limiting on API level?\nhuh, lots of question but we need to have answers before moving forward.\n. @asoorm ok, I see. do you have any ideas about design:\n\nimplement each of rate/quota limiting level on separate policies with applying then those several policies to key and how it is (or should it?) feet to our existing logic around partitioned policies (ACL can be specified/forced only in partitioned policy in case of attaching several policies to key)\nvs\nbeing able to specify all rate/quota limiting levels on one policy level\n. The problem is that mock response logic is implemented as special case in VersionCheck middleware which runs much earlier then auth-layer middle-wares.\n\nI see two options how to fix it:\n\n\nImplement mock responses as dedicated middle-ware (not a special case in VersionCheck middleware logic) and put this new middle-ware right after auth middle-ware\n\n\nleave mocked responses as part of VersionCheck middleware logic and manually run auth logic. . @asoorm looks good to me but CI errored. @buger bump. LGTM\njust need to sort out data race in CI. wait, there was a data race :). @buger \nI've added changes to make \"Per API\" independent from other partition checkboxes (no acl partition required like it was mentioned before). Also, \"Per API\" can be set only without partition checkboxes or partition checkboxes can be set if \"Per API\" is unset.\n\n\nSwitching on \"Per API\" allows user to create policy with quota/rate limits on API (acl-item) level. It is possible to specify quota/rate limit for API explicitly or leave it blank and it will be populated from policy fields.\nIt is possible to assign several policies for key with quota/rate limit on API level only if all policies have \"Per API\" set to true. Also it is not allowed to assign several policies to key where some have \"Per API\" set and some have partitions set.\nAnother constraint - if you assign several policies to a key any API can be in only one policy. Having two policies with the same API in ACL is not allowed.\nWhen \"Per API\" is not set to true - we have the legacy logic in play for policies or partitioned policies assigned to key.\nAll those points should be covered by unit tests.. implementation looks OK to except name of endpoint - I am thinking /trace vs. /debug. I feels like it returns more debug like info (what would appear in log if we do a real API call).. Here are some sequence diagrams to show channel communication flow.\nAPI traffic request processing, getting new quota chunk:\n\nRefund processing, send refund request from gateway A:\n\nRefund processing, handle refund request on some gateway B:\n\n. cancelled by https://github.com/TykTechnologies/tyk/pull/1923. @joshblakeley moving analytics.go sounds good to me but it is not easy (tried it as part of this change and it didn't work at 1st). closed in a favor of https://github.com/TykTechnologies/tyk-analytics/issues/976. @ConsM @lancehunt looks like UI logic switched to RFC3339 date format (at least for that field).\nRight now we use 2006-01-02 15:04 template which doesn't allow to parse date as 2018-10-31T23:00:00.000Z. Can you roll back change if it is possible?. @lonelycode looks like it broke hot reload tests. @buger @dskoval left some comments which I believe need to be addressed . @letzya unfortunately, I wasn't able to replicate this issue.\non both master and v2.7.2, after repeating your scenario I receive reply:\n< HTTP/1.1 403 Forbidden\n< Content-Type: application/json\n< Date: Mon, 19 Nov 2018 21:15:01 GMT\n< Content-Length: 48\n< \n{\n    \"error\": \"Key is inactive, please renew\"\n}\nlog entry in tyk looks like: msg=\"Attempted access from inactive key.\"\nI see two options:\n1. maybe, there were some other steps in your scenario, so I'd appreciate if you provide more details\n2. make sure in your environment tyk gets correctly reloaded after policy update. this should be fixed by https://github.com/TykTechnologies/tyk/pull/1995. ok, I will double check. as a side note - we should probably do the same for msgpack in analytics records (if omitempty is supported by version we use at the moment). Agree that it is tricky code, unfortunately I couldn't find better way to do a fix as the place when source Body buffer gets reset to len 0 is inside Go's standard library code.\nAccording to empty empty RawResponse - I think this is because we don't pass response copy for cache hits here https://github.com/TykTechnologies/tyk/blob/master/mw_redis_cache.go#L266\nI didn't change that peace and it looks like a legacy thing.. @buger after looking again at code history I am pretty sure we have introduced problem with EOF from cache and empty RawResponse here: https://github.com/TykTechnologies/tyk/pull/1778\nso might worth to revise that merged PR and come up with better fix. I will look into that PR changes with potentially another fix. @buger PTAL. it worked for me in dashboard - tried to find two different BA-keys (created for different BA apis).\nthe problem here that our gateway logic uses API-id just to get session storage, then it can find any key as they are prefixed with \"apikey-\" (no API id in prefix). I think dashboard picks latest added API ID to do call and relays on that weird legacy behaviour.\nSo nothing really changed except it works with hashing algo. There is one problem though - if passed API ID is not BA - it is not gonna work. This condition https://github.com/TykTechnologies/tyk/pull/2018/files#diff-651a84f8ad6a38c1f7ccdf63f2692410R328 makes sense only dashboard is sending right API ID, maybe we should remove spec.UseBasicAuth part from there.\nThe question is how would dashboard know the right API ID? Looks like asking for right API ID in this case is something extra as gateway's API already support key retrieval without API ID - in endpoint GET /tyk/keys/{keyName}?api_id={apiID} query string param api_id can be omitted and then our logic falls back to FallbackKeySesionManager https://github.com/TykTechnologies/tyk/pull/2018/files#diff-651a84f8ad6a38c1f7ccdf63f2692410R323 \n. makes sense to me. just to mention  - we also need OrgID to generate right token and get key from storage. I guess the assumption with this approach would be that dashboard would be still passing key as OrgID + username and ?username=true, then we can extract OrgID from that value (it has fixed length) and generate right storage key. @buger I've added boolean parameter username  to endpoints:\n- GET /tyk/keys/{keyName}\n- PUT /tyk/keys/{keyName}\n- DELETE /tyk/keys/{keyName}\nusername=true triggers to form correct key token with respect to current hash algo\nPOST /tyk/keys stays the same as we have everything to generate right key in request payload. also, as a general note - could you squash all that long list of commits?. @evityuk I've left some new comments about logic which I believe need to be addressed and a couple of code styling. @evityuk replied to comments, might need to have inputs from other reviewers. @buger PTAL\n\nI've changed Go-plugin signature to func(http.ResponseWriter, *http.Request) as suggested. I wanted to reuse standard type http.HandlerFunc but type casting from loaded symbol didn't like it so ended up just with func(http.ResponseWriter, *http.Request)\nadded new package \"github.com/TykTechnologies/tyk/ctx\" to be used by Go-plugin developers (for auth) with exported functions as for now:\nfunc GetAuthToken(r *http.Request) string\nfunc GetSession(r *http.Request) *user.SessionState\nfunc SetSession(r *http.Request, s *user.SessionState, token string, scheduleUpdate bool) (go plugin MW forces to schedule session update if Go-plugin called SetSession but with scheduleUpdate=false)\n\nso the simple Go-plugin with hit counters could be:\n```\npackage main\nimport (\n    \"encoding/json\"\n    \"net/http\"\n    \"sync\"\n\"github.com/TykTechnologies/tyk/ctx\"\n\"github.com/TykTechnologies/tyk/log\"\n\"github.com/TykTechnologies/tyk/user\"\n\n)\nvar logger = log.Get()\n// plugin exported functionality\nfunc MyProcessRequest(rw http.ResponseWriter, r *http.Request) {\n    endPoint := r.Method + \" \" + r.URL.Path\n    logger.Info(\"Custom middleware, new hit:\", endPoint)\nhitCounter := recordHit(endPoint)\nlogger.Debug(\"New hit counter value:\", hitCounter)\n\nif hitCounter > 100 {\n    logger.Warning(\"Hit counter to high\")\n}\n\nreply := myReply{\n    Session:    ctx.GetSession(r),\n    Endpoint:   endPoint,\n    HitCounter: hitCounter,\n}\n\njsonData, err := json.Marshal(reply)\nif err != nil {\n    logger.Error(err.Error())\n    rw.WriteHeader(http.StatusInternalServerError)\n    return\n}\n\nrw.Header().Set(\"Content-Type\", \"application/json\")\nrw.WriteHeader(http.StatusOK)\nrw.Write(jsonData)\n\n}\n// called once plugin is loaded, this is where we put all initialization work for plugin\n// i.e. setting exported functions, setting up connection pool to storage and etc.\nfunc init() {\n    hitCounter = make(map[string]uint64)\n}\n// plugin internal state and implementation\nvar (\n    hitCounter   map[string]uint64\n    hitCounterMu sync.Mutex\n)\nfunc recordHit(endpoint string) uint64 {\n    hitCounterMu.Lock()\n    defer hitCounterMu.Unlock()\n    hitCounter[endpoint]++\n    return hitCounter[endpoint]\n}\ntype myReply struct {\n    Session    *user.SessionState json:\"session\"\n    Endpoint   string             json:\"endpoint\"\n    HitCounter uint64             json:\"hit_counter\"\n}\n```\nAlso, I will rebase/resolve conflicts with another commit push.. also added more changes for https://github.com/TykTechnologies/tyk/issues/2094. @buger actually these changes are not required for TykTechnologies/tyk-analytics#1046\nHowever, I believe these changes extend analytics for future use.\nAlso, I've added change to set session alias to developer email who owns oauth-client app (as we do it for regular API keys)\n. ok, I will rename it. somewhat to mention, when it comes to standard string-values I would prefer to use already defined constants vs typing them (source of errors), like for http-verbs defined in net/http we have MethodGet. no worries, the test code is totally fine. I meant that for http-verbs like GET (and yeah - response codes like 200) we have predefined constants in net/http which we could use - http.MethodGet and http.StatusOK. @buger @mvdan \nI wander if we can benefit from using sync.atomic's Value and copy-on-write approach showed here: https://golang.org/pkg/sync/atomic/#example_Value_readMostly ?\nAlso, kind of related to that comment - I was considering that approach https://golang.org/pkg/sync/atomic/#example_Value_config  for re-loading api definitions and use them to serve requests. \ud83d\udc4d I think with these changes we eliminate a big confusion as it was not clear that we are \"hiding\" global apiSpecs by declaring local var. if we discard these changes, i.e.:\n```\ndiff --git a/main.go b/main.go\nindex 1a88571..35dfff4 100644\n--- a/main.go\n+++ b/main.go\n@@ -183,7 +183,7 @@ func setupGlobals() {\n    // Set up global JSVM\n    if config.Global.EnableJSVM {\n\n\ninitGlobalEventsJSVM(nil)\nGlobalEventsJSVM.Init(nil)\n        }if config.Global.CoProcessOptions.EnableCoProcess {\n\n@@ -662,7 +662,7 @@ func doReload() {\n// Reset the JSVM\nif config.Global.EnableJSVM {\n\n\ninitGlobalEventsJSVM(nil)\n\nGlobalEventsJSVM.Init(nil)\n    }\nlog.WithFields(logrus.Fields{\ndiff --git a/rpc_backup_handlers.go b/rpc_backup_handlers.go\nindex 8ebea5e..3b34a1d 100644\n--- a/rpc_backup_handlers.go\n+++ b/rpc_backup_handlers.go\n@@ -92,7 +92,7 @@ func doLoadWithBackup(specs []*APISpec) {\n}\n// Reset the JSVM\n-       initGlobalEventsJSVM(nil)\n+       GlobalEventsJSVM.Init(nil)\nlog.Warning(\"[RPC Backup] --> Initialised JSVM\")\nresetMainRouter()\nwe get this data race:\ngo test -race ./...\n==================\nWARNING: DATA RACE\nWrite at 0x00000253b3f0 by goroutine 360:\n  github.com/TykTechnologies/tyk.(*JSVM).Init()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/mw_js_plugin.go:322 +0x365\n  github.com/TykTechnologies/tyk.setupGlobals()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/main.go:186 +0xe48\n  github.com/TykTechnologies/tyk.testHttp()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:840 +0xd85\n  github.com/TykTechnologies/tyk.TestListener()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:948 +0xf4\n  testing.tRunner()\n      /usr/local/go/src/testing/testing.go:746 +0x16c\n\n\n\n\nPrevious write at 0x00000253b3f0 by goroutine 189:\n  github.com/TykTechnologies/tyk.(*JSVM).Init()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/mw_js_plugin.go:322 +0x365\n  github.com/TykTechnologies/tyk.doReload()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/main.go:665 +0x46e\n  github.com/TykTechnologies/tyk.reloadLoop()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/main.go:704 +0xe2\nGoroutine 360 (running) created at:\n  testing.(T).Run()\n      /usr/local/go/src/testing/testing.go:789 +0x568\n  testing.runTests.func1()\n      /usr/local/go/src/testing/testing.go:1004 +0xa7\n  testing.tRunner()\n      /usr/local/go/src/testing/testing.go:746 +0x16c\n  testing.runTests()\n      /usr/local/go/src/testing/testing.go:1002 +0x521\n  testing.(M).Run()\n      /usr/local/go/src/testing/testing.go:921 +0x206\n  github.com/TykTechnologies/tyk.TestMain()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:192 +0x4d5\n  main.main()\n      github.com/TykTechnologies/tyk/_test/_testmain.go:368 +0x1cd\nGoroutine 189 (running) created at:\n  github.com/TykTechnologies/tyk.TestMain()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:169 +0x494\n  main.main()\n      github.com/TykTechnologies/tyk/_test/_testmain.go:368 +0x1cd\n==================\n==================\nWARNING: DATA RACE\nWrite at 0x00000253b3f8 by goroutine 360:\n  github.com/TykTechnologies/tyk.(*JSVM).Init()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/mw_js_plugin.go:323 +0x393\n  github.com/TykTechnologies/tyk.setupGlobals()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/main.go:186 +0xe48\n  github.com/TykTechnologies/tyk.testHttp()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:840 +0xd85\n  github.com/TykTechnologies/tyk.TestListener()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:948 +0xf4\n  testing.tRunner()\n      /usr/local/go/src/testing/testing.go:746 +0x16c\nPrevious write at 0x00000253b3f8 by goroutine 189:\n  [failed to restore the stack]\nGoroutine 360 (running) created at:\n  testing.(T).Run()\n      /usr/local/go/src/testing/testing.go:789 +0x568\n  testing.runTests.func1()\n      /usr/local/go/src/testing/testing.go:1004 +0xa7\n  testing.tRunner()\n      /usr/local/go/src/testing/testing.go:746 +0x16c\n  testing.runTests()\n      /usr/local/go/src/testing/testing.go:1002 +0x521\n  testing.(M).Run()\n      /usr/local/go/src/testing/testing.go:921 +0x206\n  github.com/TykTechnologies/tyk.TestMain()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:192 +0x4d5\n  main.main()\n      github.com/TykTechnologies/tyk/_test/_testmain.go:368 +0x1cd\nGoroutine 189 (running) created at:\n  github.com/TykTechnologies/tyk.TestMain()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:169 +0x494\n  main.main()\n      github.com/TykTechnologies/tyk/_test/_testmain.go:368 +0x1cd\n==================\n==================\nWARNING: DATA RACE\nWrite at 0x00000253b400 by goroutine 360:\n  github.com/TykTechnologies/tyk.(*JSVM).Init()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/mw_js_plugin.go:324 +0x3d5\n  github.com/TykTechnologies/tyk.setupGlobals()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/main.go:186 +0xe48\n  github.com/TykTechnologies/tyk.testHttp()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:840 +0xd85\n  github.com/TykTechnologies/tyk.TestListener()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:948 +0xf4\n  testing.tRunner()\n      /usr/local/go/src/testing/testing.go:746 +0x16c\nPrevious write at 0x00000253b400 by goroutine 189:\n  [failed to restore the stack]\nGoroutine 360 (running) created at:\n  testing.(T).Run()\n      /usr/local/go/src/testing/testing.go:789 +0x568\n  testing.runTests.func1()\n      /usr/local/go/src/testing/testing.go:1004 +0xa7\n  testing.tRunner()\n      /usr/local/go/src/testing/testing.go:746 +0x16c\n  testing.runTests()\n      /usr/local/go/src/testing/testing.go:1002 +0x521\n  testing.(M).Run()\n      /usr/local/go/src/testing/testing.go:921 +0x206\n  github.com/TykTechnologies/tyk.TestMain()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:192 +0x4d5\n  main.main()\n      github.com/TykTechnologies/tyk/_test/_testmain.go:368 +0x1cd\nGoroutine 189 (running) created at:\n  github.com/TykTechnologies/tyk.TestMain()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:169 +0x494\n  main.main()\n      github.com/TykTechnologies/tyk/_test/_testmain.go:368 +0x1cd\n==================\n--- FAIL: TestListener (0.56s)\n    testing.go:699: race detected during execution of test\nFAIL\nFAIL    github.com/TykTechnologies/tyk  28.405s\n?       github.com/TykTechnologies/tyk/apidef   [no test files]\nok      github.com/TykTechnologies/tyk/apidef/importer  1.047s\nok      github.com/TykTechnologies/tyk/certs    6.588s\nok      github.com/TykTechnologies/tyk/config   1.071s\n?       github.com/TykTechnologies/tyk/coprocess    [no test files]\nok      github.com/TykTechnologies/tyk/lint 1.168s\n?       github.com/TykTechnologies/tyk/log  [no test files]\n?       github.com/TykTechnologies/tyk/storage  [no test files]\n?       github.com/TykTechnologies/tyk/user [no test files]\n. these mutexes were added because of races \ni.e. if we remove all changes introduced to lock operations with `mainRouter`:\ndiff --git a/api_loader.go b/api_loader.go\nindex aab0b59..fd41b41 100644\n--- a/api_loader.go\n+++ b/api_loader.go\n@@ -6,7 +6,6 @@ import (\n    \"net/url\"\n    \"sort\"\n    \"strings\"\n-   \"sync\"\n    \"sync/atomic\"\n\"github.com/Sirupsen/logrus\"\n\n@@ -524,13 +523,11 @@ func loadGlobalApps() {\n    // we need to make a full copy of the slice, as loadApps will\n    // use in-place to sort the apis.\n    specs := getApiSpecs()\n-   loadApps(specs, mainRouter, &mainRouterMu)\n+   loadApps(specs, mainRouter)\n }\n// Create the individual API (app) specs based on live configurations and assign middleware\n-func loadApps(specs []APISpec, muxer mux.Router, muxerMu sync.Mutex) {\n-   muxerMu.Lock()\n-   defer muxerMu.Unlock()\n+func loadApps(specs []APISpec, muxer *mux.Router) {\nhostname := config.Global.HostName\nif hostname != \"\" {\n\ndiff --git a/api_test.go b/api_test.go\nindex ee2aca0..7b482ea 100644\n--- a/api_test.go\n+++ b/api_test.go\n@@ -40,7 +40,7 @@ const apiTestDef = `{\nfunc loadSampleAPI(t testing.T, def string) {\n    spec := createSpecTest(t, def)\n-   loadApps([]APISpec{spec}, discardMuxer, &discardMuxerMu)\n+   loadApps([]*APISpec{spec}, discardMuxer)\n }\ntype testAPIDefinition struct {\n@@ -161,7 +161,7 @@ func TestApiHandlerPostDupPath(t testing.T) {\n    apisMu.Lock()\n    apisByID = make(map[string]APISpec)\n    apisMu.Unlock()\n-   loadApps(specs(), discardMuxer, &discardMuxerMu)\n+   loadApps(specs(), discardMuxer)\ns2 = getApiSpec(\"2\")\nif want, got := \"/v1-2\", s2.Proxy.ListenPath; want != got {\n\n@@ -177,9 +177,9 @@ func TestApiHandlerPostDupPath(t testing.T) {\n    apisMu.Lock()\n    apisByID = make(map[string]APISpec)\n    apisMu.Unlock()\n-   loadApps(specs()[1:], discardMuxer, &discardMuxerMu)\n-   loadApps(specs(), discardMuxer, &discardMuxerMu)\n-   loadApps(specs(), discardMuxer, &discardMuxerMu)\n+   loadApps(specs()[1:], discardMuxer)\n+   loadApps(specs(), discardMuxer)\n+   loadApps(specs(), discardMuxer)\ns2 = getApiSpec(\"2\")\nif want, got := \"/v1-2\", s2.Proxy.ListenPath; want != got {\n\n@@ -195,8 +195,8 @@ func TestApiHandlerPostDupPath(t testing.T) {\n    apisMu.Lock()\n    apisByID = make(map[string]APISpec)\n    apisMu.Unlock()\n-   loadApps(specs(), discardMuxer, &discardMuxerMu)\n-   loadApps(specs(), discardMuxer, &discardMuxerMu)\n+   loadApps(specs(), discardMuxer)\n+   loadApps(specs(), discardMuxer)\ns2 = getApiSpec(\"2\")\nif want, got := \"/v1-2\", s2.Proxy.ListenPath; want != got {\n\n@@ -670,9 +670,8 @@ func BenchmarkApiReload(b *testing.B) {\n    b.ResetTimer()\n    for i := 0; i < b.N; i++ {\n        newMuxes := mux.NewRouter()\n-       var newMuxesMu sync.Mutex\n-       loadAPIEndpoints(newMuxes, &newMuxesMu)\n-       loadApps(specs, newMuxes, &newMuxesMu)\n+       loadAPIEndpoints(newMuxes)\n+       loadApps(specs, newMuxes)\n    }\n }\n@@ -747,8 +746,7 @@ func TestApiLoaderLongestPathFirst(t *testing.T) {\n    apisMu.Unlock()\nmu := mux.NewRouter()\n\n\nvar muMutex sync.Mutex\nloadApps(specs, mu, &muMutex)\n\nloadApps(specs, mu)\nfor hp := range inputs {\n    rec := httptest.NewRecorder()\ndiff --git a/cert_test.go b/cert_test.go\nindex d4becc1..9f5d339 100644\n--- a/cert_test.go\n+++ b/cert_test.go\n@@ -271,7 +271,7 @@ func TestGatewayControlAPIMutualTLS(t testing.T) {\n    ln, _ := generateListener(0)\n    baseURL := \"https://\" + strings.Replace(ln.Addr().String(), \"[::]\", \"127.0.0.1\", -1)\n    listen(ln, nil, nil)\n-       loadAPIEndpoints(mainRouter, &mainRouterMu)\n+       loadAPIEndpoints(mainRouter)\n    defer func() {\n        ln.Close()\n        config.Global.HttpServerOptions.SSLCertificates = nil\ndiff --git a/gateway_test.go b/gateway_test.go\nindex 84d2a93..4e21f07 100644\n--- a/gateway_test.go\n+++ b/gateway_test.go\n@@ -161,7 +161,7 @@ func TestMain(m testing.M) {\nafterConfSetup(&config.Global)\ninitialiseSystem(nil)\n// Small part of start()\n-   loadAPIEndpoints(mainRouter, &mainRouterMu)\n+   loadAPIEndpoints(mainRouter)\nif analytics.GeoIPDB == nil {\n    panic(\"GeoIPDB was not initialized\")\n}\n@@ -841,7 +841,7 @@ func testHttp(t *testing.T, tests []tykHttpTest, separateControlPort bool) {\n    // This is emulate calling start()\n    // But this lines is the only thing needed for this tests\n    if config.Global.ControlAPIPort == 0 {\n-           loadAPIEndpoints(mainRouter, &mainRouterMu)\n+           loadAPIEndpoints(mainRouter)\n    }\nif m.goagain {\n\ndiff --git a/main.go b/main.go\nindex 1a88571..a0c4cc6 100644\n--- a/main.go\n+++ b/main.go\n@@ -70,8 +70,7 @@ var (\npoliciesMu   sync.RWMutex\npoliciesByID = map[string]user.Policy{}\n\n\nmainRouter   *mux.Router\n\nmainRouterMu sync.Mutex\n\nmainRouter *mux.Router\ncontrolRouter   mux.Router\ncontrolRouterMu sync.Mutex\n@@ -101,12 +100,6 @@ func initGlobalEventsJSVM(spec APISpec) {\nGlobalEventsJSVM.Init(spec)\n }\n\n\n-func resetMainRouter() {\n-   mainRouterMu.Lock()\n-   defer mainRouterMu.Unlock()\n-   mainRouter = mux.NewRouter()\n-}\n-\n func resetControlRouter() {\n    controlRouterMu.Lock()\n    defer controlRouterMu.Unlock()\n@@ -144,7 +137,8 @@ func apiSpecsLen() int {\n// Create all globals and init connection handlers\n func setupGlobals() {\n-   resetMainRouter()\n+   mainRouter = mux.NewRouter()\n+\n    resetControlRouter()\nif config.Global.EnableAnalytics && config.Global.Storage.Type != \"redis\" {\n\n@@ -368,9 +362,7 @@ func controlAPICheckClientCertificate(certLevel string, next http.Handler) http.\n }\n// Set up default Tyk control API endpoints - these are global, so need to be added first\n-func loadAPIEndpoints(muxer mux.Router, muxerMu sync.Mutex) {\n-   muxerMu.Lock()\n-   defer muxerMu.Unlock()\n+func loadAPIEndpoints(muxer *mux.Router) {\nhostname := config.Global.HostName\nif config.Global.ControlAPIHostname != \"\" {\n\n@@ -668,13 +660,13 @@ func doReload() {\n    log.WithFields(logrus.Fields{\n        \"prefix\": \"main\",\n    }).Info(\"Preparing new router\")\n-   resetMainRouter()\n+   mainRouter = mux.NewRouter()\n    if config.Global.HttpServerOptions.OverrideDefaults {\n        mainRouter.SkipClean(config.Global.HttpServerOptions.SkipURLCleaning)\n    }\nif config.Global.ControlAPIPort == 0 {\n\n\nloadAPIEndpoints(mainRouter, &mainRouterMu)\n\nloadAPIEndpoints(mainRouter)\n    }\nloadGlobalApps()\n@@ -1206,7 +1198,7 @@ func start(arguments map[string]interface{}) {\n    DefaultQuotaStore.Init(getGlobalStorageHandler(\"orgkey.\", false))\n}\nif config.Global.ControlAPIPort == 0 {\n-       loadAPIEndpoints(mainRouter, &mainRouterMu)\n+       loadAPIEndpoints(mainRouter)\n}\n// Start listening for reload messages\n@@ -1356,7 +1348,7 @@ func listen(l, controlListener net.Listener, err error) {\n        }\n    if config.Global.ControlAPIPort > 0 {\n\n\nloadAPIEndpoints(controlRouter, &controlRouterMu)\nloadAPIEndpoints(controlRouter)\n        }\n    }\n\n\n\n@@ -1432,7 +1424,7 @@ func listen(l, controlListener net.Listener, err error) {\n            }\n        if config.Global.ControlAPIPort > 0 {\n\n\nloadAPIEndpoints(controlRouter, &controlRouterMu)\nloadAPIEndpoints(controlRouter)\n            }    if config.Global.UseDBAppConfigs {\n\ndiff --git a/mw_version_check_test.go b/mw_version_check_test.go\nindex 0e59091..ca7fc4f 100644\n--- a/mw_version_check_test.go\n+++ b/mw_version_check_test.go\n@@ -7,7 +7,7 @@ import (\n\n\nfunc TestVersionMwExpiresHeader(t testing.T) {\n    spec := createSpecTest(t, nonExpiringDef)\n-   loadApps([]APISpec{spec}, discardMuxer, &discardMuxerMu)\n+   loadApps([]*APISpec{spec}, discardMuxer)\nsession := createNonThrottledSession()\nspec.SessionManager.UpdateSession(\"1234xyz\", session, 60)\n\ndiff --git a/oauth_manager_test.go b/oauth_manager_test.go\nindex 95a5ab1..9d7938e 100644\n--- a/oauth_manager_test.go\n+++ b/oauth_manager_test.go\n@@ -74,7 +74,7 @@ const oauthDefinition = `{\nfunc getOAuthChain(spec APISpec, muxer mux.Router, muxerMu *sync.Mutex) {\n    // Ensure all the correct ahndlers are in place\n-   loadAPIEndpoints(muxer, muxerMu)\n+   loadAPIEndpoints(muxer)\n    manager := addOAuthHandlers(spec, muxer)\n// add a test client\n\n@@ -437,7 +437,7 @@ func TestOAuthAPIRefreshInvalidate(t *testing.T) {\n    tokenData := getToken(t)\nspec := createSpecTest(t, oauthDefinition)\n\n\nloadApps([]*APISpec{spec}, discardMuxer, &discardMuxerMu)\nloadApps([]*APISpec{spec}, discardMuxer)\n    testMuxer := mux.NewRouter()\n    var testMuxerMu sync.Mutex\n\ndiff --git a/rpc_backup_handlers.go b/rpc_backup_handlers.go\nindex 8ebea5e..b9f8ca5 100644\n--- a/rpc_backup_handlers.go\n+++ b/rpc_backup_handlers.go\n@@ -15,6 +15,7 @@ import (\n    \"sync/atomic\"\n\"github.com/Sirupsen/logrus\"\n\n\n\"github.com/gorilla/mux\"\n )\n\nconst RPCKeyPrefix = \"rpc:\"\n@@ -95,16 +96,16 @@ func doLoadWithBackup(specs []*APISpec) {\n    initGlobalEventsJSVM(nil)\n    log.Warning(\"[RPC Backup] --> Initialised JSVM\")\n\nresetMainRouter()\n\nmainRouter = mux.NewRouter()\nlog.Warning(\"[RPC Backup] --> Set up routers\")\nlog.Warning(\"[RPC Backup] --> Loading endpoints\")\n\n\nloadAPIEndpoints(mainRouter, &mainRouterMu)\n\n\nloadAPIEndpoints(mainRouter)\nlog.Warning(\"[RPC Backup] --> Loading APIs\")\ncurrSpecs := getApiSpecs()\n-   loadApps(currSpecs, mainRouter, &mainRouterMu)\n+   loadApps(currSpecs, mainRouter)\nlog.Warning(\"[RPC Backup] --> API Load Done\")\nnewServeMux := http.NewServeMux()\nwe get these races:\ngo test -race ./...\n==================\nWARNING: DATA RACE\nWrite at 0x000002537f00 by goroutine 189:\n  github.com/TykTechnologies/tyk.doReload()\n  /Users/test/go/src/github.com/TykTechnologies/tyk/main.go:663 +0x2cd\n  github.com/TykTechnologies/tyk.reloadLoop()\n  /Users/test/go/src/github.com/TykTechnologies/tyk/main.go:696 +0xe2\n\n\nPrevious write at 0x000002537f00 by goroutine 353:\n  github.com/TykTechnologies/tyk.setupGlobals()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/main.go:140 +0x13f\n  github.com/TykTechnologies/tyk.testHttp()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:840 +0xd85\n  github.com/TykTechnologies/tyk.TestListener()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:948 +0xf4\n  testing.tRunner()\n      /usr/local/go/src/testing/testing.go:746 +0x16c\nGoroutine 189 (running) created at:\n  github.com/TykTechnologies/tyk.TestMain()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:169 +0x488\n  main.main()\n      github.com/TykTechnologies/tyk/_test/_testmain.go:368 +0x1cd\nGoroutine 353 (running) created at:\n  testing.(T).Run()\n      /usr/local/go/src/testing/testing.go:789 +0x568\n  testing.runTests.func1()\n      /usr/local/go/src/testing/testing.go:1004 +0xa7\n  testing.tRunner()\n      /usr/local/go/src/testing/testing.go:746 +0x16c\n  testing.runTests()\n      /usr/local/go/src/testing/testing.go:1002 +0x521\n  testing.(M).Run()\n      /usr/local/go/src/testing/testing.go:921 +0x206\n  github.com/TykTechnologies/tyk.TestMain()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:192 +0x4c9\n  main.main()\n      github.com/TykTechnologies/tyk/_test/_testmain.go:368 +0x1cd\n==================\n==================\nWARNING: DATA RACE\nRead at 0x00000253d908 by goroutine 189:\n  github.com/TykTechnologies/tyk.doReload()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/main.go:664 +0x2f7\n  github.com/TykTechnologies/tyk.reloadLoop()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/main.go:696 +0xe2\nPrevious write at 0x00000253d908 by goroutine 353:\n  github.com/TykTechnologies/tyk.testHttp()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:819 +0xb92\n  github.com/TykTechnologies/tyk.TestListener()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:948 +0xf4\n  testing.tRunner()\n      /usr/local/go/src/testing/testing.go:746 +0x16c\nGoroutine 189 (running) created at:\n  github.com/TykTechnologies/tyk.TestMain()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:169 +0x488\n  main.main()\n      github.com/TykTechnologies/tyk/_test/_testmain.go:368 +0x1cd\nGoroutine 353 (running) created at:\n  testing.(T).Run()\n      /usr/local/go/src/testing/testing.go:789 +0x568\n  testing.runTests.func1()\n      /usr/local/go/src/testing/testing.go:1004 +0xa7\n  testing.tRunner()\n      /usr/local/go/src/testing/testing.go:746 +0x16c\n  testing.runTests()\n      /usr/local/go/src/testing/testing.go:1002 +0x521\n  testing.(M).Run()\n      /usr/local/go/src/testing/testing.go:921 +0x206\n  github.com/TykTechnologies/tyk.TestMain()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:192 +0x4c9\n  main.main()\n      github.com/TykTechnologies/tyk/_test/_testmain.go:368 +0x1cd\n==================\n==================\nWARNING: DATA RACE\nRead at 0x00000253da40 by goroutine 189:\n  github.com/TykTechnologies/tyk.doReload()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/main.go:668 +0x316\n  github.com/TykTechnologies/tyk.reloadLoop()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/main.go:696 +0xe2\nPrevious write at 0x00000253da40 by goroutine 353:\n  github.com/TykTechnologies/tyk.testHttp()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:816 +0xf5e\n  github.com/TykTechnologies/tyk.TestListener()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:948 +0xf4\n  testing.tRunner()\n      /usr/local/go/src/testing/testing.go:746 +0x16c\nGoroutine 189 (running) created at:\n  github.com/TykTechnologies/tyk.TestMain()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:169 +0x488\n  main.main()\n      github.com/TykTechnologies/tyk/_test/_testmain.go:368 +0x1cd\nGoroutine 353 (running) created at:\n  testing.(T).Run()\n      /usr/local/go/src/testing/testing.go:789 +0x568\n  testing.runTests.func1()\n      /usr/local/go/src/testing/testing.go:1004 +0xa7\n  testing.tRunner()\n      /usr/local/go/src/testing/testing.go:746 +0x16c\n  testing.runTests()\n      /usr/local/go/src/testing/testing.go:1002 +0x521\n  testing.(M).Run()\n      /usr/local/go/src/testing/testing.go:921 +0x206\n  github.com/TykTechnologies/tyk.TestMain()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:192 +0x4c9\n  main.main()\n      github.com/TykTechnologies/tyk/_test/_testmain.go:368 +0x1cd\n==================\n==================\nWARNING: DATA RACE\nRead at 0x00c425a436a0 by goroutine 353:\n  github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux.(*Router).PathPrefix()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux/mux.go:213 +0x194\n  github.com/TykTechnologies/tyk.loadAPIEndpoints()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/main.go:373 +0x1b1\n  github.com/TykTechnologies/tyk.testHttp()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:844 +0xec6\n  github.com/TykTechnologies/tyk.TestListener()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:948 +0xf4\n  testing.tRunner()\n      /usr/local/go/src/testing/testing.go:746 +0x16c\nPrevious write at 0x00c425a436a0 by goroutine 189:\n  github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux.(*Router).HandleFunc()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux/mux.go:213 +0x220\n  github.com/TykTechnologies/tyk.loadApps()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/api_loader.go:637 +0x1663\n  github.com/TykTechnologies/tyk.loadGlobalApps()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/api_loader.go:526 +0x8e\n  github.com/TykTechnologies/tyk.doReload()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/main.go:672 +0x32b\n  github.com/TykTechnologies/tyk.reloadLoop()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/main.go:696 +0xe2\nGoroutine 353 (running) created at:\n  testing.(T).Run()\n      /usr/local/go/src/testing/testing.go:789 +0x568\n  testing.runTests.func1()\n      /usr/local/go/src/testing/testing.go:1004 +0xa7\n  testing.tRunner()\n      /usr/local/go/src/testing/testing.go:746 +0x16c\n  testing.runTests()\n      /usr/local/go/src/testing/testing.go:1002 +0x521\n  testing.(M).Run()\n      /usr/local/go/src/testing/testing.go:921 +0x206\n  github.com/TykTechnologies/tyk.TestMain()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:192 +0x4c9\n  main.main()\n      github.com/TykTechnologies/tyk/_test/_testmain.go:368 +0x1cd\nGoroutine 189 (running) created at:\n  github.com/TykTechnologies/tyk.TestMain()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:169 +0x488\n  main.main()\n      github.com/TykTechnologies/tyk/_test/_testmain.go:368 +0x1cd\n==================\n==================\nWARNING: DATA RACE\nRead at 0x00c420a33f58 by goroutine 353:\n  runtime.growslice()\n      /usr/local/go/src/runtime/slice.go:82 +0x0\n  github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux.(*Router).PathPrefix()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux/mux.go:213 +0x300\n  github.com/TykTechnologies/tyk.loadAPIEndpoints()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/main.go:373 +0x1b1\n  github.com/TykTechnologies/tyk.testHttp()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:844 +0xec6\n  github.com/TykTechnologies/tyk.TestListener()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:948 +0xf4\n  testing.tRunner()\n      /usr/local/go/src/testing/testing.go:746 +0x16c\nPrevious write at 0x00c420a33f58 by goroutine 189:\n  github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux.(*Router).HandleFunc()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/vendor/github.com/gorilla/mux/mux.go:213 +0x1ee\n  github.com/TykTechnologies/tyk.loadApps()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/api_loader.go:637 +0x1663\n  github.com/TykTechnologies/tyk.loadGlobalApps()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/api_loader.go:526 +0x8e\n  github.com/TykTechnologies/tyk.doReload()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/main.go:672 +0x32b\n  github.com/TykTechnologies/tyk.reloadLoop()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/main.go:696 +0xe2\nGoroutine 353 (running) created at:\n  testing.(T).Run()\n      /usr/local/go/src/testing/testing.go:789 +0x568\n  testing.runTests.func1()\n      /usr/local/go/src/testing/testing.go:1004 +0xa7\n  testing.tRunner()\n      /usr/local/go/src/testing/testing.go:746 +0x16c\n  testing.runTests()\n      /usr/local/go/src/testing/testing.go:1002 +0x521\n  testing.(M).Run()\n      /usr/local/go/src/testing/testing.go:921 +0x206\n  github.com/TykTechnologies/tyk.TestMain()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:192 +0x4c9\n  main.main()\n      github.com/TykTechnologies/tyk/_test/_testmain.go:368 +0x1cd\nGoroutine 189 (running) created at:\n  github.com/TykTechnologies/tyk.TestMain()\n      /Users/test/go/src/github.com/TykTechnologies/tyk/gateway_test.go:169 +0x488\n  main.main()\n      github.com/TykTechnologies/tyk/_test/_testmain.go:368 +0x1cd\n==================\n--- FAIL: TestListener (0.63s)\n    testing.go:699: race detected during execution of test\nFAIL\nFAIL    github.com/TykTechnologies/tyk  26.294s\n?       github.com/TykTechnologies/tyk/apidef   [no test files]\nok      github.com/TykTechnologies/tyk/apidef/importer  1.041s\nok      github.com/TykTechnologies/tyk/certs    5.526s\nok      github.com/TykTechnologies/tyk/config   1.091s\n?       github.com/TykTechnologies/tyk/coprocess    [no test files]\nok      github.com/TykTechnologies/tyk/lint 1.173s\n?       github.com/TykTechnologies/tyk/log  [no test files]\n?       github.com/TykTechnologies/tyk/storage  [no test files]\n?       github.com/TykTechnologies/tyk/user [no test files]\n```\nThe same problems if we don't lock access to controlRouter.... semantically I would just do return r.Context().Value(VersionDefault) != nil. I see string value X-Tyk-Default-Version repeated several times, might worth to introduce a constant for it. might worth to check if ctxGetVersionInfo(r) returns nil, looking at implementation it can. I see from code that assumption is that we always set VersionInfo in context, if we ever miss it - we hit into nil pointer panic. it is not needed as zero value is already nil, I think I added it just looking at \" = nil\" assignment in  https://github.com/TykTechnologies/tyk/pull/1342/files#diff-da06648202ab00313675c5150a92bffeL524. To avoid slice re-allocation I think we could use urlSpec := make([]URLSpec, len(paths)) and then do for index, pathVal .. urlSpec[index] = newSpec. mmeta and meta - it is probably better to use variables with more different names (than one-letter difference - source of potential bugs). I would count it as 500 reply as something might happen on communication level and retry of the same request seems to be a valid situation. also, might worth to do safe type assert meta, ok := meta.(*apidef.ValidatePathMeta) to avoid panics. I know it  is unlikely but still... this seems to be not a problem with incoming requests as something is not right with API spec setup on our end. I mean it is probably not a 400. again, I think it could be not a 400 as incoming request seems to be fine. might worth to log err so we will be able to explain to customer why it was 400. I think errStr will contain in this case the latest element from result.Errors(), if we want to show all errors we should provide something like comma-separated list. I'd prefer to see in test the actual schema instead of base64, you can encode it when put value here. might worth to cache schemaBytes as this might be too expensive to decode the same bas64 encoded string with every incoming through this middleware request . why introduce new code which will be subject of refactoring later? I mean we can refactor existing code as separated task for sure, but new changes - why not to do them better at the very beginning (if we believe they are better). this is related to loading/decoding of json schema. I feel like validating/parsing and loading of schema is the task for schema-loading process, we don't need to do this when processing every request inside a middleware. I feel like decoding/loading json-schema is an operation which needs to be done when we load/reload API spec definition, so we can put loaded/ready to use json-schema in some additional field and use it. maybe need to keep .bak one, have no idea what can generate it though. this is unsafe type assertion but I couldn't imagine situation when it would store something else (it is websocket request and p.TykAPISpec.HTTPTransport is already set). I think this change is not gonna work as req.URL.RawPath contains at this point full initial request URI - listen path + the rest of the path. another note - req.URL.RawPath is going to have query string (if any) ?abc=xyz and RequestURI() is adding query string here to result of escape-call again: https://golang.org/src/net/url/url.go#L994\nif I understand right - we will have get passed to upstream result of req.URL.Opaque + \"?\" + u.RawQuery with ?abc=xyz doubled.. ok, lets scratch my comment about query string - it is not included to RawPath\nI still see issue with setting req.URL.Opaque = req.URL.RawPath as it contains at this point initial request path (incoming to gateway) and leads to sending it to upstream as is.\nthe changes https://github.com/TykTechnologies/tyk/commit/a7a2a04107400cc7f1b60fce81b2ae945d11bd04 @lonelycode submitted should address this issue as we remove listen path, and replace in requests URL with object (result of parsing striped URI). \ud83d\udc4d . it is maybe too early to say in log that API reload complete (until we don't swap mainRouter with new value) . I got too excited with my 4K monitor. I will try to reformat it a little bit. @asoorm it comes to https://github.com/TykTechnologies/tyk/blob/master/vendor/github.com/lonelycode/redigocluster/rediscluster/redishandle.go#L58\nwhich calls https://github.com/TykTechnologies/tyk/blob/master/vendor/github.com/garyburd/redigo/redis/pool.go#L157 \nas they say:\n// Get gets a connection. The application must close the returned connection.\n// This method always returns a valid connection so that applications can defer\n// error handling to the first use of the connection. If there is an error\n// getting an underlying connection, then the connection Err, Do, Send, Flush\n// and Receive methods return that error.\nso we close it. how about json-tag for this field? we need some name declared so it will be easier to document. also, formatting - make sure you use go fmt. I'd add default timeout as a constant to avoid adding more \"magic\" numbers in code. sorry, just realized that I had to scroll a lot to the right to see json:\"jsvm_timeout\" :) is it formatting issue?. we had a conversation about sync.Map a while ago, it was added for good reason but breaks backward comparability with older versions of Go.\naccording to change: if we wrap mutex and protected map into struct - I think it is a good chance to add to this struct Get and Set methods (with all lock/defers inside them) to simplify code and prevent (at least logically) from using mutexes/maps directly. just realized it might worth to invest a little bit more time and re-implement tests using our new test-instrumentation. thats true, looks like I missed it. I was experimenting with UpdateSession and then decided to leave it as is because it is used a lot. I will push a fix for it. ok, I will work on this. snake_case for var names looks weird in Go. one more snake_case spotted. and one more snake. we could eliminate a couple of extra ops if move contextData := ctxGetData(r) inside this if. also could get rid of a couple of ops if we move if session := ctxGetSession(r); ... inside this if. seems like extra check as iteration over empty map will be no operation as well. we need to add placeholder into format string - this one was caught by my IDE :). it was set to false, false so k.sessionlimiter.ForwardMessage was doing basically nothing when it is not in ExperimentalProcessOrgOffThread mode. I am not sure we need this cast as c.Value is already a string. I think using ctxGetData(req) would simplify code in this test and avoid type asserts in if statements below (hard to read for me). how would we know that this http.StatusForbidden caused by one of our middlewares, not from actual upstream?\nI think if it is reply from upstream we don't need to do anything as it was resposibility of upstream to set CORS headers and they might already there.\nalso, how about other HTTP 4XX which can be set by other our middlewares?\n. connection leak, we should do defer corsRes.Body.Close(). this needs to have some kind of circuit breaker or at least time out for client to avoid waiting for upstream when it is down (if we don't it could cause bump in gateway latency). I'd add corsClient as field of middleware and change loopbackCORS to be method of middleware so we won't re-create http.Client within every call of loopbackCORS and benefit from keep-alived connection. might worth to cache the reply with using as key Origin received from browser to improve latency and avoid bombing upstream with OPTIONS for the same origin every time we error . we need to make sure that response wasn't already sent to browser at this point. setting headers on http.ResponseWriter when response already sent won't take any affect. my understanding is that this depends on order of middlewares. it is not super clear for me that  the request has not yet been proxied. oh, I though we were going to send OPTIONS to upstream directly. it seems to me that calling GW itself again is an extra step (but it should work). I'd add timeout to request anyways. ok, got it. according to original pre-flight request - some browsers don't send pre-flight requests for all ajax calls, so original OPTIONS one might never happened. I don't think it would cause any issues in this case, just wanted to mention it.. I am still not sure about this loopback round trip business, as looks like all we want to do is just to hit the code placed a couple of lines above here: https://github.com/TykTechnologies/tyk/pull/1550/files#diff-4c166b743d95629a9ab37eb6fe3df22aR86\nwhy not just to prepare OPTIONS request like we do anyways and response writer (we can probably use httptest recoder) and then call h.ServeHTTP(optionsRecorder, optionsRequest) to make it go through all underlaying middle-wares down to upstream?. I've tried different approaches including this one but it introduces data races.\nI think the problem is that by the time we change global.Config in deferred function - there are still some go-routines running and reading config (like ones launched in ProcessRequestOffThread()). yeah, I saw it, just thinking about how feasible would be to introduce new locks in middleware code just because config is being changed in tests. how often do we expect config to be change during gateway run?\nI feel like those locks are extra as we change config structure by changing file and restarting actual GW-process\n. yeah, build is failing because of that change. I need to investigate why it became capitalized. seems like taking address of nil pointer here, we don't need to take address anyways as e.cfg is already pointer. I mean you probably  wanted to do\nif e.cfg == nil {\n  config := &RegexExtractorConfig{}\n  if err := mapstructure.Decode(e.Config.ExtractorConfig, config) {\n  ...\n  }\n  e.cfg = config\n.... need to enable memory allocations with b.ReportAllocs(). might worth to create session with some data instead of zero-value struct. need to save result into variable out of scope to avoid compiler optimizations. I think hasher.Sum([]byte(password)) will give you the same password,\nneed to be\nhasher := New32()\nhasher.Write(password)\nhasher.Sum32()\nk.cache.Set(hashedPassword, string(hasher.Sum(nil)), cacheDuration). this code looks weird to me\n- why do we have the same key JWTSkipCheckKidAsId on global config and spec level? (feature request?)\n- if we need to change API spec with some value it is better to do it only once at API reload time. This is not a godoc style comment, needs to have function name in it and explaining what function does/returns.\nI think moved comment was more comment about internal implementation - how function extracts id from passed token.. extra explicitly const type declaration, string is always string - no need to clarify for compiler\nletzya: Have removed it.. better to do shorter if tykId, idFound = token.Header[KID].(string); idFound { if we don't need vars after if. I suppose we don't need these variables any more as \"pass-through\" logic was removed/changed below . json tag and struct field names don't match - looks confusing. returning more values from func needs to be on purpose, we return true, nil or false, err (in case of errors), so why do we need this bool?. should it be if err != nil?. we also have situation here  to return right away\nif found {\n    return userID, nil\n}. we could reduce number of type asserts storing token.Claims.(jwt.MapClaims) in variable and use after. just a general comment about readability - i am kind of worried about expressions containing several asserts and access to map key, hard to read.\nalso, current code should work, but found is not like real sign that sub was found in claims - it is more it was found in claims and it was a string. I'd still follow logrus' convention to do log.WithField(\"userId\", userId).Debug(\"Found User Id\") as its API was done specifically to remove this formatted outputs.. extra var declaration. again I feel like it needs to be if err != nil {. Sing -> Sign. you introduced constant RSASign could you please switch the rest of code to use it?. getSecretFromToken? it is not necessary to be used to verify signature. maybe also log error here: log.WithError(err).Error(\"Failed to decode JWT to RSA type\") so we have more context in log. I think it is better to use constants like http.StatusForbidden for magic http-codes, easier to read and reduces number of bugs caused by typos. I am confused why do we need this new funcs and not to use just names createJWTSession and createJWTSessionWithRSA - I think they qualify to be type of JwtCreator. case when getUserIdFromClaim if falling back to SUB is not covered by tests. since we change config here - we should not forget to do defer resetTestConfig() in all tests where this function is being called (to bring config to initial state). but it doesn't give you option to make sure it is always OFF for all your apis - thats confusing for me as well. is this change something left from debugging?. \ud83d\udc4d . I think this can be done as earlier return at the beginning of func. as a general comment - from where do these \"JS-style\" empty lines after func name come? (some lint?). one confusing thing - shouldn't this be skipped if cacheEnabled is true?. what the purpose of this function literal? the reason I am asking - I don't see it passed anywhere as param or any closure to outer-scoped variables. we could do bcrypt and return here right away. I think to retrieved current calculated hash in form of []byte it needs to be hasher.Sum(nil) . I think you forgot to calculate hash with:\nhasher.Write(passwordBytes)\nhasher.Sum32()\nhasher methods are confusing. I think this needs to be cachedPass.(string) != string(hasher.Sum(nil))\nhasher.Sum doesn't calculate hash, it returns current state of hash (which needs to be calculated with method hasher.Sum earlier) with passed bytes appended to result. well I never seen that in Go code and it is not part of gofmt, from other point of view gofmt doesn't remove those empty lines. I think it should be OK as json un-marshalling does map[string]interface{} or []interface{} if not strict type provided.\nIt can also be done using type assertion:\nif tmpVal, ok := tempBody.([]interface{}); ok {\n        fmt.Println(\"got array: []interface{}\", tmpVal)\n    } else if tmpVal, ok := tempBody.(map[string]interface{}); ok {\n        fmt.Println(\"got object: map[string]interface{}\", tmpVal)\n    } else {\n        fmt.Println(\"Got something else\", tmpVal)\n    }\nalso, I think any of those three have about the same performance. Thats true, current design assumes high traffic. but with low throughput like you said one request every 199ms - data will stale here for long time. We can add for that special case logic to send data to redis anyways if last time we sent data was more than 1 sec ago. . we are passing pointers to channel, once record sent GC can pick and free it. also, I made that default buffer size too big with assumption that pool workers will process faster than sender sends to channel. if we receive much more and block on writing to channel I think think effect will be close to situation when we we try to schedule lots of go-routines. I was thinking about adaptable worker pool size, i.e. if sender can't send to channel for too long (which means channel is not read too fast) it could ask analytics to increase pool of workers. this sounds interesting but we have reidis on other end and redis connection pool with fixed size - it can get slow just because of redis (thats why I started thinking about sending records via pipelines). Also, according to redis - starting from 2.4 we can provide to RPUSH more then one value, we can benefit from that as well.. I am bad in naming things, will come up with better name. \ud83d\udc4d . how about hiding TrimPrefix-logic inside generateToken helper? so calling part won't have to remember to do this. we could also do .WithError(err).WithFields so error will appear as special error-field in log entry. it is not efficient to get canonical string rep of UUID and then remove dashes right away using string search/replace operation, maybe it is OK as long as we don't issue tons of tokens per sec\n. I think it is a little bit of extra work here - we are allocating an instance of hash (which is runtime sys-call and takes extra memory for a bit) just to test if token needs to have a default hash algo, then we ignore allocated space which give some extra work for GC. I am not sure compiler can optimize this.\nalso I like more readable form if _, err := hashFunction(hashAlgorithm); err != nil. might worth to use string concatenation instead of Sprintf here. might worth to have constants for this values and expose them as public from storage package. method HashStr is heavily used when key hashing enabled, correct me if I am wrong - we always do base64.StdEncoding.EncodeToString when we generateToken from key, org ID and then have to do base64.StdEncoding.DecodeString right away to get from storage or update from storage. this base64 encoding/decoding seems to be extra work to me. also, we could introduce token as not just string but 1st class citizen in our code base as a struct, so we could put here in its fields hash algo name, Hasher func for later use in case we need to hash it (and do hash only once if it is not laready done), json and and base64 encoded  representation  of this token as fields as well. I think we need to have that channel buffered with buffer size specified in config. is continue missed here?. I'd read key prefix at Init() time and store it in one of the fields, then use here to eliminate one function call. we need to catch and log error here. we need to catch and log error here as well. we need to catch and log marshalling error here, continue if it was errored. here probably would be better to use range cycle instead of select as we don't have to read from several channels, i.e.:\nfor u := range b.updateChan {\n    ....\n} \ncycle will exit automatically once channel is closed. spaces in in-line comments after //. I am bad at naming but I feel like it could be just sessionUpdate (not meta). we need catch, log error here and return if it was error . we could eliminate this field if we pass just keyName (we know here if prefix needs to be added). there will be also two pools of workers (spec.SessionManager and spec.OrgSessionManager) running per each API spec started here https://github.com/TykTechnologies/tyk/blob/v2.6.2/api_loader.go#L188 so we need to stop them as well before exit. Maybe just go through all loaded specs and stop pools. we do  only DefaultQuotaStore.RemoveSession so why does it need pool?\nI am not even sure if DefaultQuotaStore is needed any more, I wasn't able to find its usage, might worth to double check if it is populated in Redis by some 3d party. how about logging error here as we don't check returned bool in calling parts. it is unlikely to get error here but ignoring it could lead to corrupted data in storage. looks like we don't need this field any more https://github.com/TykTechnologies/tyk/pull/1770/files#diff-48bee4488d3d533801a48f81a4de665fR49\nand initializing part here: https://github.com/TykTechnologies/tyk/pull/1770/files#diff-48bee4488d3d533801a48f81a4de665fR88. I think we also need to update session in cache if !config.Global().LocalSessionCache.DisableCacheSessionState. this extra file got in into commit. looks like with current implementation we do this call per each middleware added to chain and it is middleware \"scoped\" - each middleware processes request, schedules session to be updated via ctxSetSession if needed and then it calls here  UpdateRequestSession which does actual  Redis call and calls ctxDisableSessionUpdate - so next middleware will have to schedule it again if session update needed.\nwhen I read 1st idea I though we pass request through all middle-wares and we call update session only once at the very end, which sounds like some special new middleware at the very top of chain (even maybe before cors) which just updates session if it was scheduled for request. when I was working on UpdateSession I found that we don't sent to session cache pointers, it is one of results of SessionManager.SessionDetail, CheckSessionAndIdentityForValidKey or AuthManager.KeyAuthorised which all returns just structs. it probably was done on purpose to avoid side effects of storing pointers and update cache explicitly (I think pointers eliminate updating cache items atomically). \ud83d\udc4d . maybe Warning as it requires special attention. password is already []byte. we don't need to do hasher.Sum32() as it is done inside hasher.Sum(nil). this can be done as constant instead of calculating it every time. supposed to use passwordBytes?. we don't need this hasher.Sum32() as it is done as part of hasher.Sum(nil). if it is in cache and doesn't match provided password why not to do just bcrypt.CompareHashAndPassword(hashBytes, passwordBytes) directly? (and eliminate one function call)  I mean there is no way doBcryptWithCache can put anything in cache at this point . if user password changed wouldn't compareHashAndPassword be called with new hash and new password? I mean in case of new password session.BasicAuthData.Password will contain new bcrypt-hash and there is no way to get cache hit. I think new password situation won't reach this piece of logic, if I am not missing anything here.. looks like an extra type assertion here, better to use range x. would be better to do tmpSlice := make([]string, 0, len(x)) to avoid slice re-allocations. WithField needs to be used with some meaningful field name. how about using constant for 50. the same question about using constant for 1000. for u := range b.updateChan. we don't need to do this when for-range is used to read from channel. log.WithError(err).Error(\"Error marshalling session for async session update\") would be more informative. why do we change passed instance of SessionUpdate here?. logrus offers api for outputting errors as a special field log.WithError(err).Error(\"Error updating hashed key\"). the same note about log.WithError(err)..... being fan of earlier return I would do\nif atomic.LoadUint32(&b.shouldStop) == 1 {\n    return\n}\n... // stop logic. two if hashed in a row looks a little confusing. maybe word size is missing in constants names. if atomic.LoadUint32(&b.shouldStop) == 0 seems to be an extra if as at this point we know that it is not 1 and other possible value is only 0.. good point, defer for sure. I think this change will eliminate keep-alived connections and increase latency for tyk->dashboard requests which seems to be not what we want to do.\nI think that bug might be here below: https://github.com/TykTechnologies/tyk/pull/1952/files#diff-eca768c13a66fc0ccb769e695e73f949R174\nWe do defer resp.Body.Close() only if it was reply 200, for other 3XX, 4XX, 5XX replies we don't do it and introduce connection leak in clients pool of connections.\n. could you also add caching logic for FindStringSubmatch in tyk/regexp?. the same thing for FindAllStringSubmatch we need to add caching logic for this function in tyk/regexp so we won't spend time on RX with the same params. ah, right. this one is already cached. match[1:] looks a little suspicious - what if regex didn't have any groups? in worst case I would expect panic with index bound of range, in best case - call to function with no-op inside as match[1:] would give empty slice. I've noticed logic like:\nmatch := mr.FindStringSubmatch(v)\nif len(match) > 0 {\n    kn := buildTriggerKey(triggernum, mv, i)\n    contextData[kn] = match[0]\n    addGroupsToContextData(&contextData, kn, match[1:])\nrepeated in several places, might worth to move it to function if possible. you don't need to pass map as pointer as maps (and slices) are passed by reference. \ud83d\udc4d . this is tricky one - slices are different because they have len and cap in addition to pointer to underlaying array with elements, so when we pass it to function it receives new \"descriptor\" of slice but original pointer to elements.\nif we do append inside function we have to return slice and re-assign result on calling side, otherwise calling part will hold slice-descriptor with appended elements but old len and cap (thats why Println outputs only one element). you can find more info about that situation here https://golang.org/doc/effective_go.html#slices\nChanging elements would work if your slice is pre-allocated, i.e.:\nhttps://play.golang.org/p/ZoK7WLz_Xtw\nThat's actually how all functions like func Read(slice []interface{}) (int, error) reading data into passed slice without any explicit pointers.\nBut my comment was about maps, they work differently.. json:\"allowed_urls,omitempty\". json:\"session_lifetime,omitempty\". I think this one is not needed. do you mean more attribute \"org_id\" in addition to \"username=true\" ?. just something draw my attention - here we possibly had the same spec passed to go-routine because for-cycle vars are being shared between iterations. usually this trick with passing cycle variable as a parameter to the anonymous go-routine helps but in this case spec is pointer, so I wasn't sure. agree it was not safe  . this package naming encourages to use snake case in the client code and considered to be not the best, more info here: https://golang.org/doc/effective_go.html#package-names. not clear why we do not prepare here usable DnsCacheManager instantiating DnsCache field instead of nil, that I guess purpose of these constructor-like functions. might need to move it to private field as looks like it is pure implementation. I think we miss here return nil, err as looks like that would be actual DNS-error (if any). just thinking about readability - we can split address with using net.SplitHostPort and use host and port vars for logic below. might worth to add one more short path to check if address already contains IP address (in some cases upstream might be specified by IP for host name) and return right away return d.DialContext(ctx, network, address)\nThis would make it slightly faster and we won't cache items like key,value->IP,IP. if we always use ips[0] why to store list of IPs in cache? (instead of 1st value) . seems like we break here idea behind DNS load balancing (multiple IPs). if we reach this function - when new connection is about to do dial-call - that means we need to hit actual DNS because it will give us IP list with different order so connection will be load-balanced to another IP behind that domain name. Probably the right solution would be - don't cache DNS calls if resolver returns list of IPs per domain name. also, I think here we need to analyze actual result of d.DialContext before returning.\nThe errors might happen if that IP is gone for what ever reason but gateway will be trying to dial to it unless item expires, so will be outage cause by us.\nSo, if d.DialContext returns error we might need to remove item from DNS cache to cause actual DNS request to repopulate it next time.. following logrus-convention it might better to do (so debug message context will appear as message fields):\nlogger.WithFields(logrus.Fields{\n  \"key\": key,\n  \"addrs\": result.addrs,\n}.Debug(\"Dns record was populated from cache\"). a little confusing the purpose of this struct, would be equal to use just type DnsCacheItem []string or store in cache just string (see my comment about always using 1st element from addrs list above) . generally we don't add to main code things like this - code pieces needed to run unit-tests. just to make sure I follow idea (a little confused by var name) - nonExpiredItems will include all times currently in cache, even expired ones. what is purpose of this function? it looks like it is just alias for net.LookupHost. also, map[string]cache.Item type can be omitted as we assign value in var declaration . seems like this is a good place to call dc.Get(key) to re-use logic. comment is missing explaining purpose of interface. comment is missing explaining purpose of type. comment is missing explaining purpose of func. comment is missing explaining purpose of func. comment is missing explaining purpose of func. comment is missing explaining purpose of func. this would also stop DNS caching, just wanted to clarify is this function to clear cache or clear and stop caching? maybe just lack of Godoc comments. need explanation - why pointers are eliminated here?. might worth to rename config key to dns_cache as dns is more general term. it is not clear from that code what we are protecting with this mutex. looks like this is protection code to protect some date in rediscluster package. why not to add this protection inside rediscluster package and then revendor it here in tyk?. as a general note - locking mutex, even read-locking with RLock, do some network I/O which might take ages and then unlock mutex - I feel like it is not right, this is not what mutexes for. this looks confusing - how about all other methods where we do r.singleton().Do, there is no any mutex there. if I understand right we have only one call to this function - when tyk process gets started. There would be only one currentMu.Lock() ever, not clear why do we need it at this place. I'd look into other approach tbh. quotaKey (to store quota on session level) and var limQuotaKey here (to store quota on session ACL level) - those keys have different format. looks like we are both replying to already merged PR :)\neventually there is lots of room to refactor here, the biggest piece I see is eliminating somehow repeated logic to populate usedQuota starting at \nline https://github.com/TykTechnologies/tyk/pull/2048/files#diff-651a84f8ad6a38c1f7ccdf63f2692410R342\nand\nline https://github.com/TykTechnologies/tyk/pull/2048/files#diff-651a84f8ad6a38c1f7ccdf63f2692410R366. better to use logger.WithError(err).WithFields.(... a little confusing the purpose of this struct, would be equal to use just type DnsCacheItem []string or store in cache just string. lets don't add to main code things like this - code pieces needed to run unit-tests. following logrus-convention it might better to do (so debug message context will appear as message fields):\nlogger.WithFields(logrus.Fields{\n  \"hostName\": hostName,\n  \"addrs\": item.addrs,\n}.Debug(\"Dns record was populated from cache\"). what is purpose of this function? it looks like it is just alias for net.LookupHost. better to move 3600 and 60 to constants. seems like in situation when we know for sure that DNS cache is disabled (in config) we don't want to wrap Dialer as it introduces extra closure and some logic inside dnsCacheManager to be run. how about DNS replies when order of IPs is always different? probably we should skip it with code like this:\nif len(ips) > 1 {\n  return safeDial(address, \"\")\n}. looks like FetchItem returns error when net.LookupHost failed, also ips here will be nil.\nI think we have valid reason to do return nil, err. actually just string might not work in case we want to know that this domain has several IPs and build some logic on top of it, i.e. always do real DNS request foor those hostnames in cache. Looks likeCheckInterval value regulates how often in-app cache will be wiping out expired items (for memory usage purposes). Why do we have to care about it on tyk.conf level?. might simplify startResultChannel <- mockServer.ActivateAndServe(). might simplify here without select: err := <-startResultChannel. yes, I get that CheckInterval is added here in config because hard-coding doesn't allow it to be changed.\nmy question was why we want to have it configured. if you look up code by cache.New you will see that we use in-app caching a lot and none of those have cleanup interval as config value.\nCustomers will be asking why do they need to configure this, I don't see any reasonable answer tbh because it is something which controls in-app memory management and doesn't influence items expiration. That might introduce some noise in support.\n. in our case we'll always get a cached list and the connection will be established with the 1st list item/ip until cache for that record will expire - that is my concern. With this implementation - no matter how DNS reply shuffles IPs we will be always bombing the last known/cached IP until it expires in cache. Why **probably** list with reordered elements. I think it is not probably, it is more likely as several A-records in DNS reply is the implementation of round robin on DNS level. net.LookupHost direct call looks OK to me, it does what it says in name and nothing else. as to resolveDNSRecord - my 1st thought was that it might does some logic inside specific to different types of DNS records (as it suggest in name) but it doesn't do anything specific to DNS-record. I would be ok to leave it here as is  but this is just extra function call with extra memory allocation. Thus code will likely be changed to direct call to net.LookupHost with next performance optimization.. I wasn't able to find those cases in code (when cache will be re-enabled). Looks like we enable DNS cache at gateway process start up time and it comes from tyk.conf which gets read again only when we start (or restart) process.\nWe've spent a while recently on performance optimization. This wrapper is adding extra ops and allocations every time we connect/reconnect to upstream and I think we can easily eliminate it and use standard net.Dialer when DNS cache is disabled.. that would be doubled call to lookup hostname:\n1st inside FetchItem and failed (because FetchItem returned error)\n2nd inside safeDial because standard DialContext will try to resolve the same address FetchItem was trying and failed. if you think about HA - that might not be the best place to do it, here we have some high level logic. Why not to do N retires in resolveDNSRecord say with some jitter then? (it could be a good reason to do it as a function). not sure I follow here, what do you mean by CNAME? when we resolve hostname to addr we receive back IP, we don't know was it CNAME or A. what is the difference between random and pick_first then?. seeding it every time with len(ips) would make ips[rand.Intn(len(ips))] to return the same IP every time.\nalso, rand.Seed this is something you want to do only once as it is global seed on rand package level.. ah right, I meant difference between \"pick_first\" and \"no_cache\".\nI see here that our cache logic is still influences the choice of which IP to pick. Go DNS strategy depends on env var GODEBUG=netdns=. There probably won't be any Go resolver in place.\n. I think I need to clarify:\nI mean if we leave multiple IPs entries in cache - it will do real resolve only once to put it in cache then if item from cache is multi-IPs we do return safeDial(address, \"\") - that would guarantee that go or cgo (whatever set to be used) is making choice which IP to pick.\nalso, in this case we caching, but caching (with TTL) only that fact that given host has multiple IPs. sorry for being picky, somewhat about code styling - I am a big fan of early returns like:\n```\nfunc (m *DnsCacheManager) getRandomIp(ips []string) (string, error) {\n    if m.strategy != config.RandomStrategy {\n            return ....\n         }\n    // other logic\n    .....\n\n}\n``\nalso testingm.strategyfor value  in funcgetRandomIpand calling this func only whenm.strategy == config.RandomStrategy` looks la little awkward to me, but not big deal.. @buger tbh I am OK with this implementation\njust wanted to mention that it is no_cache but still pick_first at the same time, discarding system dealer logic for multiple IPs. if we are Ok with this let's leave it.. @evityuk my point was that for multiple IPs we need to call net.Dial passing address (not IP) and it will do LookupIPAddr inside applying its system/default logic\ninstead of:\ndoing call net.Dial with 1st IP picked by us and eliminating any logic inside standard net.Dial. why is it GetClientTokens(updatedClient.ClientID, 1) - that would return only 1st page of tokens to be wiped away. however, we still need to cleanup all tokens per client in case of policy change. Here we are changing logic behind already public endpoint https://tyk.io/docs/tyk-rest-api/oauth-key-management/#retrieve-all-current-tokens-for-specified-oauth-client which I believe some of Tyk users already started using.\nI think it might be better:\n1. to provide a way here to retrieve all tokens and optional pagination so we won't break existing functionality\n2. to add new endpoint for paginated tokens as clients will likely need pagination info to build a ruler\nI'd vote for 2nd as it provides backward compatibility and gives more tooling to build pagination UI. if we decide to go with new format for paginated reply - might worth to send back pagination info suitable for UIs, i.e.:\n{\n  \"pagination\": {\n     \"page_num\": 1,\n     \"page_total\": 129,\n     \"page_size\": 10\n   },\n   \"tokens\": [\n      ...\n    ]\n}. if it is a global param for all paginated data  - name is OK, if it is specific to oauth tokens pagination I'd prefer something like oauth_tokens_per_page. I think it is better move default value 10 to constant, to eliminate \"magic\" numbers in code base. I'd prefer new method leaving existing one as is retrieving all tokens from redis, something like GetClientTokensPaginated. I am fine with this implementation but in case when we have many tokens  - I do have concerns because here we still pull over network all elements (note how we do \"+inf\")\nMight worth to consider taking advantage of sorted set - being able to move \"window\" easily using items score. Say we do r.store.GetSortedSetRange(key, startScore, endScore) where by default endScore is startScore plus some range like one day and then we go like this until we fill the page of required size.\nWe could also count number of elements in sorted set with ZCOUNT initial_start_score +inf to get number of possible pages\nIn that case client would need to receive next_start_with and provide it for next page (instead of page number), next_start_with is just some value with encoded in it startScore + token which are last used endScore + token on previous page. If we do so we will know from where to move \"window\" in our sorted set for next page.\nIt might sound not trivial.. just thinking about reducing network I/O and offloading Redis. plugin code might do call ctx.SetSession with passing scheduleUpdate=false so we are forcing it there. we can remove this logic assuming developer of plugin will do update session properly. ",
    "amifeanyi": "Ok @joshblakeley thanks a lot, let me update and try again.. @joshblakeley I have made the changes, restarted the dashboard and the gateway, same \"unable to connect\". I tried both http://locahost:3000 and http://my.company.com:3000.. @joshblakeley Finally I was able to bring the dashboard up, what I did was to change the \nhost config hostname and override_hostname to localhost on the tyk_analytics.conf. \nThen on the tyk.conf I changed db_app_conf_options;\nconnection_string and policy; policy_connection_string to http://my.company.com:3000.\nThe dashboard came up on http://public-ip:3000 and dev portal on http://my.company.com:3000.\nTest API I added when viewed from the API designer shows http://localhost/test  instead of http://my.company.com/test or http://public-ip/test.\nWhen I send request to any of this url http://my.company.com/test or http://public-ip/test through postman I will not get any response.\n. I am new to Tyk, I will appreciate if there is any step by step guide on Adding API and calling the API using any http client to receive response. I have been following the official doc on the Tyk site so far.\nI will appreciate any assistance. Thanks!. ",
    "dikderoy": "Is there any way to make websockets work without the fix? or are they rendered completely broken?\nI have tried to arrange same without nginx and on tyk 2.3.13 and it also does not work (same error). maybe there is something wrong with the config/definition?. I've checked the fix (in 2.4.2) - initially websocket connection is working, but as soon as you drop \"first\" connection, it stops working, and you cannot create new ws-connection without restarting tyk_gateway.\ntyk gateway produces 500 Internal Server Error on ws.open() with following logs:\ntyk_gateway_1    | time=\"Dec 22 15:57:10\" level=error msg=\"Hijack error: http: connection has been hijacked\" origin=172.18.0.18 path=\"/workspaces/default/chat\"\ntyk_gateway_1    | time=\"Dec 22 15:57:10\" level=error msg=\"http: proxy error: http: connection has been hijacked\" api_id=b7c7ce1ff3f449357eb28312a6fe8fe7 org_id=5a2b3da0bdf125000143add4 server_name=\"ws_api:8080\" user_id=\"****b567\" user_ip=172.18.0.18 user_name=\"someuser (platform)\". I would've considered this a CRITICAL and a DoS vulnerability for WS-endpoints - cause any attempt to perform HTTP connection on WS endpoint on TykGateway is effectively renders endpoint DEAD. no other WS connections could be established after doing this until TykGateway process is restarted. At least fix this \"dead until restart\" problem please.. Any updates?. ",
    "philsturgeon": "Hey there! I\u2019m really excited about this, but Draft v04 is fairly outdated. Is there a plan to add support for more recent versions of the spec? Seeing as they declare the Schema in the file, it should be easy enough.. For what it\u2019s worth I\u2019d agree with releasing draft 04 support now and following up with newer later. \ud83d\ude2c\n--\nPhil Sturgeon\n@philsturgeon\n\nOn Feb 21, 2018, at 15:49, Martin Buhr notifications@github.com wrote:\nI would suggest we go live with what we do have support for so as not to delay the feature and then update the library for a later release in a different issue, since it is also used elsewhere it will have a wider testing surface so will need more time to integrate.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Awesome! The package I mentioned to convert OpenAPI Schema Objects to JSON Schema Objects is https://github.com/mikunn/openapi-schema-to-json-schema. \n",
    "ryoung-mbo": "I figured it was an edge case. We do have other work-arounds (specifically, we set up a different API definition just for our one app to use batch) but I didn't know about the one you suggested. We'll look into it!\nI was going to suggest that the code above could include a check for a custom domain before assuming it's a control API.. ",
    "hellojukay": "@ConsM \nshll\nCONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                              NAMES\nbada91f1ec0d        tykio/tyk-dashboard   \"/opt/tyk-dashboard/t\"   13 minutes ago      Up 13 minutes       0.0.0.0:3000->3000/tcp, 5000/tcp   tyk_dashboard\nda708ab5b54f        tutum/mongodb         \"/run.sh\"                About an hour ago   Up About an hour    27017/tcp, 28017/tcp               boring_almeida\nf4e9771e9866        tykio/tyk-gateway     \"./entrypoint.sh\"        About an hour ago   Up About an hour    0.0.0.0:8080->8080/tcp             tyk_gateway\nc0b2e4bb6f9c        redis                 \"docker-entrypoint.sh\"   About an hour ago   Up About an hour    6379/tcp                           tyk_redis. i install tyk by docker. this is the conf ,i copy from github.\njson\n{\n  \"listen_port\": 8080,\n  \"secret\": \"352d20ee67be67f6340b4c0605b044b7\",\n  \"template_path\": \"/opt/tyk-gateway/templates\",\n  \"use_db_app_configs\": false,\n  \"app_path\": \"/opt/tyk-gateway/apps\",\n  \"middleware_path\": \"/opt/tyk-gateway/middleware\",\n  \"storage\": {\n    \"type\": \"redis\",\n    \"host\": \"localhost\",\n    \"port\": 7379,\n    \"username\": \"\",\n    \"password\": \"\",\n    \"database\": 0,\n    \"optimisation_max_idle\": 2000,\n    \"optimisation_max_active\": 4000\n  },\n  \"enable_analytics\": false,\n  \"analytics_config\": {\n    \"type\": \"csv\",\n    \"pool_size\": 100,\n    \"csv_dir\": \"/tmp\",\n    \"mongo_url\": \"\",\n    \"mongo_db_name\": \"\",\n    \"mongo_collection\": \"\",\n    \"purge_delay\": -1,\n    \"ignored_ips\": [],\n    \"normalise_urls\": {\n        \"enabled\": true,\n        \"normalise_uuids\": true,\n        \"normalise_numbers\": true,\n        \"custom_patterns\": []\n    }\n  },\n  \"health_check\": {\n    \"enable_health_checks\": false,\n    \"health_check_value_timeouts\": 60\n  },\n  \"optimisations_use_async_session_write\": true,\n  \"allow_master_keys\": false,\n  \"policies\": {\n    \"policy_source\": \"file\",\n    \"policy_record_name\": \"policies\"\n    },\n  \"hash_keys\": true,\n  \"suppress_redis_signal_reload\": false,\n  \"close_connections\": true,\n  \"enable_non_transactional_rate_limiter\": true,\n  \"enable_sentinel_rate_limiter\": false,\n  \"local_session_cache\": {\n    \"disable_cached_session_state\": false\n  },\n  \"uptime_tests\": {\n    \"disable\": false,\n    \"config\": {\n      \"enable_uptime_analytics\": false,\n      \"failure_trigger_sample_size\": 2,\n      \"time_wait\": 10,\n      \"checker_pool_size\": 50\n    }\n  },\n  \"http_server_options\": {\n        \"enable_websockets\": true\n  },\n  \"hostname\": \"\",\n  \"enable_custom_domains\": true,\n  \"enable_jsvm\": true,\n  \"oauth_redirect_uri_separator\": \";\",\n  \"coprocess_options\": {\n    \"enable_coprocess\": false,\n    \"coprocess_grpc_server\": \"\"\n  },\n  \"pid_file_location\": \"./tyk-gateway.pid\",\n  \"allow_insecure_configs\": true,\n  \"public_key_path\": \"\",\n  \"close_idle_connections\": false,\n  \"allow_remote_config\": false,\n  \"enable_bundle_downloader\": true,\n  \"bundle_base_url\": \"\",\n  \"global_session_lifetime\": 100,\n  \"force_global_session_lifetime\": false,\n  \"max_idle_connections_per_host\": 100\n}. ",
    "ghost": "Thanks for your fast reply Leonid.\nI tried but no changes  - same behaviour described. Hello @buger and @dencoded ,\nbefore opening the bug I replicated it in various environment without anything in the middle.\nOn top, I replicated it on Tyk Cloud environment - https://palo-it.cloud.tyk.io/test-sfcc-promotions/\nHere attached you see the api configuration\n{\n    \"id\": \"5a3b9b4eb4a56b000132f5e6\",\n    \"name\": \"Test SFCC\",\n    \"slug\": \"test-sfcc-promotions\",\n    \"api_id\": \"23e95de6a36b4653719ad6f5a6bab1e8\",\n    \"org_id\": \"58fa1d2cb26ac9000111df50\",\n    \"use_keyless\": true,\n    \"use_oauth2\": false,\n    \"use_openid\": false,\n    \"openid_options\": {\n        \"providers\": [],\n        \"segregate_by_client\": false\n    },\n    \"oauth_meta\": {\n        \"allowed_access_types\": [],\n        \"allowed_authorize_types\": [],\n        \"auth_login_redirect\": \"\"\n    },\n    \"auth\": {\n        \"use_param\": false,\n        \"param_name\": \"\",\n        \"use_cookie\": false,\n        \"cookie_name\": \"\",\n        \"auth_header_name\": \"\",\n        \"use_certificate\": false\n    },\n    \"use_basic_auth\": false,\n    \"use_mutual_tls_auth\": false,\n    \"client_certificates\": [],\n    \"upstream_certificates\": {},\n    \"enable_jwt\": false,\n    \"use_standard_auth\": false,\n    \"enable_coprocess_auth\": false,\n    \"jwt_signing_method\": \"\",\n    \"jwt_source\": \"\",\n    \"jwt_identity_base_field\": \"\",\n    \"jwt_client_base_field\": \"\",\n    \"jwt_policy_field_name\": \"\",\n    \"notifications\": {\n        \"shared_secret\": \"\",\n        \"oauth_on_keychange_url\": \"\"\n    },\n    \"enable_signature_checking\": false,\n    \"hmac_allowed_clock_skew\": -1,\n    \"base_identity_provided_by\": \"\",\n    \"definition\": {\n        \"location\": \"header\",\n        \"key\": \"x-api-version\"\n    },\n    \"version_data\": {\n        \"not_versioned\": true,\n        \"versions\": {\n            \"Default\": {\n                \"name\": \"Default\",\n                \"expires\": \"\",\n                \"paths\": {\n                    \"ignored\": [],\n                    \"white_list\": [],\n                    \"black_list\": []\n                },\n                \"use_extended_paths\": true,\n                \"extended_paths\": {},\n                \"global_headers\": {},\n                \"global_headers_remove\": [],\n                \"global_size_limit\": 0,\n                \"override_target\": \"\"\n            }\n        }\n    },\n    \"uptime_tests\": {\n        \"check_list\": [],\n        \"config\": {\n            \"expire_utime_after\": 0,\n            \"service_discovery\": {\n                \"use_discovery_service\": false,\n                \"query_endpoint\": \"\",\n                \"use_nested_query\": false,\n                \"parent_data_path\": \"\",\n                \"data_path\": \"\",\n                \"port_data_path\": \"\",\n                \"target_path\": \"\",\n                \"use_target_list\": false,\n                \"cache_timeout\": 60,\n                \"endpoint_returns_list\": false\n            },\n            \"recheck_wait\": 0\n        }\n    },\n    \"proxy\": {\n        \"preserve_host_header\": false,\n        \"listen_path\": \"/23e95de6a36b4653719ad6f5a6bab1e8/\",\n        \"target_url\": \"https://dev11-web1-sephorasa.demandware.net/s/Sephora_FR/dw/shop/v17_8/promotions/\",\n        \"strip_listen_path\": true,\n        \"enable_load_balancing\": false,\n        \"target_list\": [],\n        \"check_host_against_uptime_tests\": false,\n        \"service_discovery\": {\n            \"use_discovery_service\": false,\n            \"query_endpoint\": \"\",\n            \"use_nested_query\": false,\n            \"parent_data_path\": \"\",\n            \"data_path\": \"\",\n            \"port_data_path\": \"\",\n            \"target_path\": \"\",\n            \"use_target_list\": false,\n            \"cache_timeout\": 0,\n            \"endpoint_returns_list\": false\n        }\n    },\n    \"disable_rate_limit\": false,\n    \"disable_quota\": false,\n    \"custom_middleware\": {\n        \"pre\": [],\n        \"post\": [],\n        \"post_key_auth\": [],\n        \"auth_check\": {\n            \"name\": \"\",\n            \"path\": \"\",\n            \"require_session\": false\n        },\n        \"response\": [],\n        \"driver\": \"\",\n        \"id_extractor\": {\n            \"extract_from\": \"\",\n            \"extract_with\": \"\",\n            \"extractor_config\": {}\n        }\n    },\n    \"custom_middleware_bundle\": \"\",\n    \"cache_options\": {\n        \"cache_timeout\": 60,\n        \"enable_cache\": true,\n        \"cache_all_safe_requests\": false,\n        \"cache_response_codes\": [],\n        \"enable_upstream_cache_control\": false\n    },\n    \"session_lifetime\": 0,\n    \"active\": true,\n    \"auth_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"session_provider\": {\n        \"name\": \"\",\n        \"storage_engine\": \"\",\n        \"meta\": {}\n    },\n    \"event_handlers\": {\n        \"events\": {}\n    },\n    \"enable_batch_request_support\": false,\n    \"enable_ip_whitelisting\": false,\n    \"allowed_ips\": [],\n    \"dont_set_quota_on_create\": false,\n    \"expire_analytics_after\": 0,\n    \"response_processors\": [],\n    \"CORS\": {\n        \"enable\": false,\n        \"allowed_origins\": [],\n        \"allowed_methods\": [],\n        \"allowed_headers\": [],\n        \"exposed_headers\": [],\n        \"allow_credentials\": false,\n        \"max_age\": 24,\n        \"options_passthrough\": false,\n        \"debug\": false\n    },\n    \"domain\": \"\",\n    \"do_not_track\": false,\n    \"tags\": [],\n    \"enable_context_vars\": false,\n    \"config_data\": {},\n    \"tag_headers\": [],\n    \"global_rate_limit\": {\n        \"rate\": 0,\n        \"per\": 0\n    },\n    \"strip_auth_data\": false\n}\nTo reproduce it, you need a SFCC client_id secret that I can't share with you here - I can provide it but only via email. I'm trying to get my client approving to have the secret disclosed to you publicly. Experimented a little replicating the request using a CURL script. It looks like the Rest API URL on this function is incorrectly coded in the dashboard. According to your documentation here \nhttps://tyk.io/docs/frequently-asked-questions/clear-api-cache/\nThe API should be DELETE http://<>/tyk/cache/5aead9afe8a1350001de2c3b/ \nWith the host being the Gateway\nNot\nDELETE http://<>/api/cache/5aead9afe8a1350001de2c3b/ \nThe URL referred to in the documentation seems to work\nPlease advise?. It also looks like there are issues around the Tyk gateway accepting the settings for the cache middleware. Even after disabling caching, we found that Tyk was persisting the cache of the API hence why we wanted to invalidate the cache!. The gateway is running as defined in the configuration file, however do I need to also check if it is running from inside the Dashboard docker container to rule out any connection issues there?. @letzya  we have altered the configuration as suggested seperatley, however we ran into lots of gateway errors in the logs and rolled the change back. . ",
    "LuanvP": "Fixed here: https://github.com/TykTechnologies/tyk-analytics/pull/604. fixed internally https://github.com/TykTechnologies/tyk-analytics/issues/589. @LinuxUser3 we're aiming for the week of the 22nd :) . @LinuxUser3 \nI've opened a ticket for this internally and we'll get back to you once we've found a solution.. separate public ticket opened for users to track, including a potential workaround: https://github.com/TykTechnologies/tyk/issues/1619. @nickReyn not quite, those issues are asking that the same policy can set different rates/quotas for different API's, whereas this one is about wanting to use multiple policies to create the same effect. Maybe we can look at merging the issues? @buger \nUse case as described by the customer request:\n1.Create 3 APIs: api1, api2, api3, each with Auth Token.\n\nCreate Policy1 with access to api1 and api2.\n\n3.Create PolicyRL with access to api3 and a rate limit (3 request/sec)\n\nCreate a token and with multi-policy apply both Policy1 and PolicyRL.\n\nCurrent behaviour:\nThe token has access and rate limiting for api3 as expected, but does not have access to api1 or api2.\nExpected behaviour:\nThe token should have access to all 3 API's, and it should be rate limited on api3 only.. Issues while testing for this was due to this issue https://github.com/TykTechnologies/tyk-analytics/issues/696\nVirtualEndpoint middleware was using same JSVM object but not checking the timeout value, unlike DynamicMiddleware. . This is mainly finished on this branch: https://github.com/TykTechnologies/tyk/pull/1601\nI've updated StringRegexMap to include both a MatchPattern and a NotMatchPattern. The Check method takes both of these into account.\nI've added tests to cover negative and mixed-logic cases, there is one test commented out which was behaving strangely and it seemed to be due to some caching behaviour in the way the tests were run (?). Copied all settings into the blank conf file generated at run, to add new fields.\nFor dashboard version, I turned off detailed recording for performance. Do we want this enabled by default? \nBoth also have experimental_process_org_off_thread enabled, do we want this also? Same for both having JSVM enabled by default.\nFinally, shall I base the tyk.example.conf on the with_dash or the self_contained example? \n@buger @asoorm @joshblakeley . Closing this and will update the files separately . @ilijabojanovic both bugs should now be fixed. Sounds like it might be related to the cause of this: https://github.com/TykTechnologies/tyk-analytics/issues/663\n. @letzya \nI just tested on-prem master and it's working for me:\n- Tried naming endpoint ip and /ip and rewriting to xml and http://httpbin.org/xml\n- In all cases I could still see the added header in response -  tyk-test: 123. @ilijabojanovic Yes with enforced access rights it works. Still a bug? Or expected behaviour?. Yup! Forgot to add to commit. Changed this for performance, do we want to enable this by default?. @buger Am I setting up the middleware correctly here? It seems like it's not getting triggered for either path\njson is same as for my test API, it should be triggered for the \"test-no-slash\" path. @buger done. @ilijabojanovic I think there's some weird caching behaviour here, if I uncomment this test it fails even though the rewrite logic is triggered.\nThe rewrite path prints as \"/change/to/me/$tyk_context.trigger-0-payload\" which comes from the previous test, and the URL stays as \"/change/to/me/ignore\"\nAny thoughts?. ",
    "LinuxUser3": "Still not working. \nIf you try this: \n{\n  \"swagger\" : \"2.0\",\n  \"info\" : {\n    \"title\" : \"hello\",\n    \"version\" : \"1.0.0\",\n    \"description\" : \"to request some information\"\n  },\n  \"schemes\" : [ \"https\" ],\n  \"paths\" : {\n    \"/\" : {\n      \"get\" : {\n        \"produces\" : [ \"application/json\" ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\"\n          }\n        }\n      }\n    }\n  },\n  \"host\" : \"this.com\",\n  \"basePath\" : \"/path\"\n}\nRegardless, if you click at \"From swagger file\" or not - Tyk Cloud still shows error message in Portal Management: \n\n. > this fix will be part of 2.5 release\nOh, that's good to hear. Thanks!\nDo you know when v2.5 will be released?. Perfect! Looking forward.. Hi! - Any update on this? . Sadly, no. I've also deleted documentation file and uploaded it. Error still exists. . Cleaning browser cash had no effect. My steps:\na) deleted documentation\nb) Closed browser \nc) Browser started, new login, uploaded documentation.\nd) verified in Portal Management: error still exists. . I have just immediately found out by chance that this issue has something to do with settings:\nProtect API Catalogue --> API Catalogue is login-only \nIf you deselect checkbox, error will disappear !\nIf you select it again, error will appear again. . I understand, but this issue is completely irritating for all participants: the creator (like me) wants to provide a valid Swagger Doc and the consumer is irritated because he suspects a non-well formatted documentation. \nThere should exists a workaround, a hint or something else.. ",
    "neterium": "This should be a high priority feature in an API gateway :) ! I personally use OpenAPI v3 Json files to both generate my API documentation and validate the incoming JSON requests, and would'nt like to use a different one to import in a gateway ^^.. Just FYI, Keycloak is an example of provider using a kid header in its generated JWT access tokens. Have to agree Buger :).\nBut if Tyk delegates the JWT generation to a 3rd party IDP (which is good practice I presume), it also has to accept that the kid header is already used to store a 3rd party identifier (which is also good practice then). Definitely a blocking issue for me :(.. ",
    "ceefour": "Agree with @jgraham0325 and @neterium . I wonder why not more people vote on this issue .. ?. ",
    "gmiragliotta": "I think this is an essentially feature to have. Why do I have to write an API in OpenAPI 2.0 if it is obsolete?. ",
    "charleswisniewski": "bump. ",
    "radup": "is this in the roadmap somewhere? as far as I know basically no API manager supports OpenAPI 3, so I wonder what is the fundamental reason behind this? are there any specifics simply way harder to support than in swagger2 or it is just that the feature is not considered important enough?. ",
    "Niko9911": "bump, would be requirement for modern documented API.. ",
    "mikarintala": "Hi!\nOur organization is primarily interested in TYK Hybrid and MFA to log in into Dashboard is pretty much a must for us.. ",
    "pete-rai": "Ordinance Survey also provide this feature on their APIs. For a standard web app, the key may well be visible inside downloaded JavaScript. Then it is open for simple, cut-n-paste theft. Keeping the key on the server only, would require some messy and redundant calls via the server. If you do add this (and hopefully you will), do add it to the developer portal API as well. . ",
    "cbrunnkvist": "https://blog.codecentric.de/en/2014/12/haproxy-http-header-rate-limiting/. ",
    "snaredla7": "We need this feature as without it there is no point in enabling LDAP authentication with Dashboard.. ",
    "maaydin": "Yes, when running automated tests in parallel. After some investigations we found that partitioned policies causes the exception, we have temporarily closed partitioned policies and everything works fine.\nLatest trace and the sample api definitions (removed some of the definitions/policies in the same pattern) attached, hope it helps you to reproduce the case:\ntyk-mf.zip\nconcurrent map iteration and map write-fatal-error.txt\n@zeldal & @bilalyasar spent some time on this issue and here their notes:\nIt seems synchronization part is missing to achieve Atomic SessionState Updates when multiple API call with same session occurs concurrently(using localsessioncache). In general, SessionState can be modified with different ApplyPolicy calls, that might cause inconsistencies without giving Concurrent Modification Errors. In our case partitioned policies are applying at https://github.com/TykTechnologies/tyk/blob/v2.5.1/middleware.go#L217, that is causing concurrent modification on Map while other routine iterating over.\nWe hope this will help further.. ",
    "ceprateek": "Hi,\nThanks for the quick response. I agree that it is optional for the client\nto provide the certificate. However, it's confusing for the client as the\nclient certificate would not  be used in above scenario.\nFurther, in case where the mutual Tls is enabled the client certificate\nwould  be asked irrespective of the starting configuration as the\nconfiguration is changed to requireAndVerify. Therefore, IMHO it should\nstart with NoClientCertificate or the default behavior should be\nconfigurable.\nOn Feb 13, 2018 8:54 PM, \"Leonid Bugaev\" notifications@github.com wrote:\nHello!\nWhile it is true that it asks for the certificate, it is optional for the\nclient to have it.\nIt should not fail, if client miss certificate.\nCan you clarify what kind of issues it cause?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/TykTechnologies/tyk/issues/1475#issuecomment-365496058,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AJ_mxXIEWFDyQjXomZ80PBXC_zpSL81Qks5tUmcQgaJpZM4SEhMF\n.\n. Can you please update the status of this bug. This prevents us from upgrading to latest versions of TYK. ",
    "nililee": "Sure, you can connect to our dashboard site at http://13.125.4.63:3000 by the account of test20798@test.com/test123.\n. I don't understand what you mean by \"Fixed and verified\". Error still raised: http://13.125.4.63:3000/#/apis/designer/5a8d1f7552274300011f6a7b.. ",
    "timlansbergen": "Hi!\nWith \"easier to use\" i was actually trying to say that it improves the user experience. \nI can give you another good example: there are some low-code platforms which are using the swagger documentation to generate the functions in an application within the platform. If there is no swagger documentation, all the functions need to be created manually.\nKind regards,\nTim. Hi Buger,\nThanks for your reply. I have tested the javascript code but it looks like it cannot load the api data. I have executed the following steps to test this:\n1. Copy catalogue.html in folder 'portal/templates/' to catalogue_new.html.\n2. Change templatename to 'cataloguePageNew' by changing the first line to : {{ define \"cataloguePageNew\" }} {{ $org_id := .OrgId}} {{ template \"header\" .}}\n3. Create a custom page template in tyk dashboard.\n4. Go to the custom page which I just created. The page is able to load but the text 'It looks like there are no APIs in the Catalogue.' is presented. I would expect the api's in here.\nIn the steps above I did not yet include your javascript code because I first want to show you that it is not able to load the api data in a custom page template. Am I missing something?\nWe are currently using Tyk dashboard 1.6.2.\nKind regards,\nTim. Hi Buger,\nIt works now. There is small bug in the code. I removed 'src=\"text/javascript\"' part in the ",
    "larsnaesbye": "Well, isn't this just based on whether the backend is available or not in a round robin scenario? Better load balancing could perhaps base the ratio of requests on a load parameter fro the backend...?. Well, I was thinking of some kind of backend load information collected and the number of requests sent to that specific backend adjusted accordingly. A heartbeat is just an up/down indicator.\nFor example, some Web Feature Service requests are quite taxing on backend processing power while taking several seconds to finish. Others are quite simple and fast.\nBalancing between backend servers could then be to send the next requests to the lesser burdened servers.. Yes, our internally developed legacy system (which I am now trying to find a suitable community-driven replacement for, e.g. Tyk) uses recent response time differences to adjust request dispatching.. Exactly what I was thinking of, @asoorm. 1 and/or 3 would be really useful for the scenarios we have here. . Here's how we do it in our system: Each node broadcasts on multicast UDP small packages of load information for every backend the node services. These packages are serialized Java POJO in our case.\nThe other nodes listen and factor it into their load balancing. It tends to work quite well, giving stable reply times.. ",
    "DaspawnW": "Hi,\nwe are using tyk-pump for it. Here is the configuration used:\nThe brackets are for ansible template rendering.\n{\n  \"analytics_storage_type\": \"redis\",\n  \"analytics_storage_config\": {\n    \"type\": \"redis\",\n    \"host\": \"redis\",\n    \"port\": 6379,\n    \"hosts\": null,\n    \"username\": \"\",\n    \"password\": \"{{ redis_password }}\",\n    \"database\": 0,\n    \"optimisation_max_idle\": 100,\n    \"optimisation_max_active\": 0,\n    \"enable_cluster\": false\n  },\n  \"purge_delay\": 10,\n  \"pumps\": {\n    \"mongo\": {\n      \"name\": \"mongo\",\n      \"meta\": {\n        \"collection_name\": \"tyk_analytics\",\n        \"mongo_url\": \"mongodb://mongodb:27017/tyk_analytics\"\n      }\n    },\n    \"mongo-pump-aggregate\": {\n      \"name\": \"mongo-pump-aggregate\",\n      \"meta\": {\n        \"mongo_url\": \"mongodb://mongodb:27017/tyk_analytics\",\n        \"use_mixed_collection\": true\n      }\n    }\n  },\n  \"uptime_pump_config\": {\n    \"collection_name\": \"tyk_uptime_analytics\",\n    \"mongo_url\": \"mongodb://mongodb:27017/tyk_analytics\"\n  },\n  \"dont_purge_uptime_data\": false\n}. ",
    "Meg4mi": "I'm facing the same issue when Tyk block the request and return a forbidden response. No CORS Headers because request never hit the upstream.. ",
    "beyerjsb": "I had the same problem, though I expected a completely different resolution:\nhttps://community.tyk.io/t/tyk-gateway-virtual-endpoint-request-headers-vs-response-headers-inconsistency/3221/6\nFor me, the headers of all request and response objects should be consistent as arrays: \nmap[string][]string - but the request object to the backend and the response object to the frontend seem to be map[string]string. This leads to the unresolvable situation that I can get \"Headers\" : { \"Set-Cookie\" : [ \"ABC=abc\", \"XYZ=xyz\" ] } in the response object from the backend, but can only say \"Headers\" : { \"Set-Cookie\" : \"ABC=abc\" } in my response object to the frontend.. ",
    "lexkong": "I try this way but still got Authorization field missing\ncurl -H \"Content-Type: application/json\" -H \"Authorization: 1\" http://localhost:8080/calclator/bmi-5\n{\n    \"error\": \"Authorization field missing\"\n}. thanks for your answer, I just create the api, found tyk return : \n{\n    \"key\": \"62\",\n    \"status\": \"ok\",\n    \"action\": \"added\"\n}\nand do nothing.\nalso why i need to reload or hot-reload the tyk?\nthanks!. thanks very much, i will learn the video and try again. ",
    "iamtour": "@buger In the same case of above, we also fail to get $tyk_context.jwt_claims_iat and $tyk_context.jwt_claims_exp, please advise, thanks. \ncloned to issue https://github.com/TykTechnologies/tyk/issues/1567. @buger the case here for iat and exp is not from the header claims, they are from payload(body) claims.. @buger You are right, I can access \"iss\" and \"aud\".. @buger  Can you help to re-open this bug and fix it?. @letzya When I give a number for \"aud\", there is error log in the console \"JWT Invalid: Validation error. Validation error. Invalid Audiences type: float64\" and response \"Key not authorised\" to the request. I try to add other number fields (\"aud2\"/\"aud3\"), neither can access their values, so I think it is caused by the number type issue just as @buger mentioned.. @letzya @buger just find two lines of error log maybe help to indicate this issue:\ntime=\"Mar 24 13:33:37\" level=error msg=\"Context variable type is not supported: float64\" \ntime=\"Mar 24 13:33:37\" level=error msg=\"Context variable type is not supported: float64\" \nOpen this issue as https://github.com/TykTechnologies/tyk/issues/1568. @buger Could it be included into 2.5.4 this week? Thanks.. ",
    "biancarosa": "Thanks for the answer @lonelycode!\nApparently the issue wasn't really the combination of the two transformations. but the fact that I was redirecting to a URL that returned me a \"Location\" header and when the http client retried the request, it retried against the actual API Url and not through the gateway.\nExample:\ncurl http://tyk.gateway:8081/my-post-api/redirect-to?url=http://httpbin.org/post -v\n\nGET /my-post-api/redirect-to?url=http://httpbin.org/post HTTP/1.1\nHost: tyk.gateway:8081\nUser-Agent: curl/7.47.0\nAccept: /\nHTTP/1.1 302 Found\nAccess-Control-Allow-Credentials: true\nAccess-Control-Allow-Origin: *\nContent-Length: 0\nContent-Type: text/html; charset=utf-8\nDate: Mon, 09 Apr 2018 20:46:15 GMT\nLocation: http://httpbin.org/post\nServer: meinheld/0.6.1\nVia: 1.1 vegur\nX-Powered-By: Flask\nX-Processed-Time: 0\nX-Ratelimit-Limit: 0\nX-Ratelimit-Remaining: 0\nX-Ratelimit-Reset: 0\nConnection: close\n\n\"method_transforms\": [\n  {\n       \"path\": \"redirect-to\",\n       \"method\": \"GET\",\n      \"to_method\": \"POST\"\n   }\n ]\nI'm gonna try the same request using JS, but apparently Postman/Insomnia clients use the Location header to make another request that doesn't hit the gateway and goes straight to httpbin/post, doing a GET request to a endpoint that only accepts POST requests.\n. ",
    "rahulnike646": "Any updates on this?. ",
    "dret": "it's great to see this! please keep me updated on implementation, if that's ok for you. i'd like to start tracking implementations so that i can push the draft towards RFC status. also, if you have any comments or feedback, please feel free to raise them here: https://github.com/dret/I-D/issues. the current draft is about to expire. i am submitting a new one this week. i am planning on linking to this issue in the implementation section of the draft. it is nothing formal (no obligation on your side), but simply a way to keep track of how and where the draft is being used. it helps with getting the draft adopted as a standard in the end. https://tools.ietf.org/html/draft-wilde-sunset-header-04#section-7. On 2018-05-07 14:42, Leonid Bugaev wrote:\n\n@asoorm https://github.com/asoorm @dret https://github.com/dret so \nbasically it is just about renaming our header, right?\n\nthat depends on how your header is defined and used. if it is defined in \nthe very same way, then it may just be a renaming exercise.\n. ",
    "znystr": "Ran into this again and figured out how to reproduce the auto Mock Response creation.\nFirst I created a new API, then went to RAW API DEFINITION to edit 3 places, adding (.) to the end of all 3:\n1) \"version_data\" -> \"versions\" -> \"Default\" -> \"extended_paths\" -> \"white_list\": [ { \"path\": \"/slug/\\d.\\d/path(.)\"\n2) \"version_data\" -> \"versions\" -> \"Default\" -> \"url_rewrites\": [ { \"path\": \"/slug/\\d.\\d/path(.)\"\n3) \"version_data\" -> \"versions\" -> \"Default\" -> \"url_rewrites\": [ { \"match_pattern\": \"/slug/\\d.\\d/path(.)\"\nAfter saving with Update, under Endpoint Designer my GET has the extra Mock Response plugin added to it.\nWhen I exported the API with Mock Response and do a diff, I notice this section got updated from:\n                            \"method_actions\": {\n                                \"GET\": {\n                                    \"action\": \"no_action\",\nto\n                            \"method_actions\": {\n                                \"GET\": {\n                                    \"action\": \"reply\",\n                                    \"code\": 200,\n(side note, \"proxy\" -> \"transport\": { \"ssl_ciphers\": null   also got updated from null to [] )\nAttaching 2 files (switched from .json to .txt), the initial one and the export I made after making my changes.\nThanks.\ntest_mock_response_init.txt\ntest_mock_response_post.txt\n. ",
    "bsingr": "This is a duplicate of #1732 and can be closed as well.. Having the same problem here. The problem didn't exist in version 2.2.0.20.\nWe wanted to upgrade from an older tyk version but now we are blocked because of that :(\n. ",
    "masacc": "Hello, any idea of when it will be fixed ?. ",
    "henres": "Can you provide the status of the fix for this error ? @buger . ",
    "leon": "@matiasinsaurralde I'm the wrong leon :). ",
    "joshuaquek": "Same issue as the one here:\nhttps://community.tyk.io/t/grpc-plugin-reload-makes-it-unaccessible/2053. ```\n$ curl -v http://127.0.0.1:5555\n About to connect() to 127.0.0.1 port 5555 (#0)\n   Trying 127.0.0.1...\n* Connected to 127.0.0.1 (127.0.0.1) port 5555 (#0)\n\nGET / HTTP/1.1\nUser-Agent: curl/7.29.0\nHost: 127.0.0.1:5555\nAccept: /\n\nConnection #0 to host 127.0.0.1 left intact\n```. Also:\n\n\n$ sudo netstat -anp | grep 5555\ntcp        0      0 127.0.0.1:36828         127.0.0.1:5555          ESTABLISHED 23781/tyk\ntcp6       0      0 127.0.0.1:5555          :::*                    LISTEN      23958/node /home/ce\ntcp6       0      0 127.0.0.1:5555          127.0.0.1:36828         ESTABLISHED 23958/node /home/ce\nunix  3      [ ]         STREAM     CONNECTED     15555    492/dbus-daemon      /run/dbus/system_bus_socket. $ cat tyk.conf\n{\n  \"listen_port\": 8080,\n  \"node_secret\": \"...\",\n  \"secret\": \"...\",\n  \"template_path\": \"/opt/tyk-gateway/templates\",\n  \"use_db_app_configs\": true,\n  \"db_app_conf_options\": {\n        \"connection_string\": \"\",\n        \"node_is_segmented\": false,\n        \"tags\": []\n  },\n  \"disable_dashboard_zeroconf\": false,\n  \"app_path\": \"/opt/tyk-gateway/apps\",\n  \"middleware_path\": \"/opt/tyk-gateway/middleware\",\n  \"storage\": {\n    \"type\": \"redis\",\n    \"host\": \"localhost\",\n    \"port\": 6379,\n    \"username\": \"\",\n    \"password\": \"\",\n    \"database\": 0,\n    \"optimisation_max_idle\": 2000,\n    \"optimisation_max_active\": 4000\n  },\n  \"enable_analytics\": true,\n  \"analytics_config\": {\n    \"type\": \"\",\n    \"ignored_ips\": [],\n    \"enable_detailed_recording\": true,\n    \"enable_geo_ip\": false,\n    \"geo_ip_db_path\": \"\",\n    \"normalise_urls\": {\n          \"enabled\": true,\n          \"normalise_uuids\": true,\n          \"normalise_numbers\": true,\n          \"custom_patterns\": []\n      }\n  },\n  \"health_check\": {\n    \"enable_health_checks\": false,\n    \"health_check_value_timeouts\": 60\n  },\n  \"optimisations_use_async_session_write\": true,\n  \"allow_master_keys\": false,\n  \"policies\": {\n    \"policy_source\": \"service\",\n    \"policy_connection_string\": \"\",\n    \"policy_record_name\": \"tyk_policies\",\n    \"allow_explicit_policy_id\": true\n  },\n  \"hash_keys\": true,\n  \"suppress_redis_signal_reload\": false,\n  \"use_redis_log\": true,\n  \"close_connections\": true,\n  \"enable_non_transactional_rate_limiter\": true,\n  \"enable_sentinel_rate_limiter\": false,\n  \"experimental_process_org_off_thread\": false,\n  \"local_session_cache\": {\n    \"disable_cached_session_state\": false\n  },\n  \"http_server_options\": {\n        \"enable_websockets\": true\n  },\n  \"uptime_tests\": {\n    \"disable\": false,\n    \"config\": {\n      \"enable_uptime_analytics\": true,\n      \"failure_trigger_sample_size\": 2,\n      \"time_wait\": 10,\n      \"checker_pool_size\": 50\n    }\n  },\n  \"hostname\": \"\",\n  \"enable_custom_domains\": true,\n  \"enable_jsvm\": true,\n  \"oauth_redirect_uri_separator\": \";\",\n  \"coprocess_options\": {\n    \"enable_coprocess\": true,\n    \"coprocess_grpc_server\": \"tcp://127.0.0.1:5555\"\n  },\n  \"pid_file_location\": \"./tyk-gateway.pid\",\n  \"allow_insecure_configs\": true,\n  \"public_key_path\": \"\",\n  \"close_idle_connections\": false,\n  \"allow_remote_config\": false,\n  \"enable_bundle_downloader\": true,\n  \"bundle_base_url\": \"http://127.0.0.1:3333/bundles\",\n  \"global_session_lifetime\": 100,\n  \"force_global_session_lifetime\": false,\n  \"max_idle_connections_per_host\": 100\n}\nI replaced secret and node_secret for privacy's sake.. My node gRPC server is running on 127.0.0.1:5555\nand the webserver hosting the bundle.zip file is hosted on 127.0.0.1:3333\n. Oh I realized that it was because of \n\"bundle_base_url\": \"http://127.0.0.1:3333/bundles\"\nIt should have been: \n\"bundle_base_url\": \"http://127.0.0.1:3333/bundles/\"\nAdded the extra slash and the errors disappeared.\nThanks.\n. ",
    "sitio": "Wow, thank you for the incredibly quick response. The env var will do well.. ",
    "glfp": "+1\nI have the same issue when using Firefox. Firefox WS call pass firstly thru a proxy (that act as authenticator), then call Tyk. Due a invalid SSL configuration of the authenticator (it use self-signed certificate), Firefox WS call fall in error and automatically try to call the same endpoint with https: so the WS endpoint in Tyk is called in https and crash.\nThis behavior occurs ever.. Hello, any news about this bug ? I'm going in production next week but I need to know if I need to block Firefox clients or not.\nThansk !\n. ",
    "maxtarasuik": "Looks awesome, I suspect this will be of more use when/if Mutual TLS works with a CA rather than individual certificates.\nThat way you can Authenticate with a CA, and Authorize users using this in a plugin (did I get your terminology right ?)\nI should add I don't think you can Authenticate with only a DN, as anyone could sign a cert with \"CN=client1,OU=MyClients,O=MongoDB-Cluster,L=Austin,ST=TX,C=US\". \n\ud83d\udc4d . ",
    "amadeus-x1": "@dencoded I see that the code changes have been already pushed to master. Can you provide an estimate of when the changes will make it to release?. ",
    "jamietanna": "Hey, I've been hit by this issue myself, would you be willing to receive a PR to resolve this?. This was using v2.7.2's docker image. Apologies for the late reply, but I still seem to be having issues reproducing this fix.\nFollowing the instructions from https://github.com/TykTechnologies/tyk-gateway-docker:\ndocker network create tyk\ndocker run -itd --rm --name redis --network tyk -p 127.0.0.1:6379:6379 redis:4.0-alpine\ndocker run -ti\n  --network tyk \\\n  --link tyk_redis \\\n  -p 8080:8080 \\\n  -v $(pwd)/tyk.standalone.conf:/opt/tyk-gateway/tyk.conf \\\n  -v $(pwd)/tyk/apps:/opt/tyk-gateway/apps \\\n  -v $(pwd)/tyk/middleware:/opt/tyk-gateway/middleware \\\n  tykio/tyk-gateway:v2.7.2\nI have amended tyk/apps/quickstart.json to add a middleware hook:\n```diff\n {\n     \"name\": \"Tyk Test API\",\n     \"api_id\": \"3\",\n     \"org_id\": \"default\",\n     \"definition\": {\n         \"location\": \"\",\n         \"key\": \"\"\n     },\n     \"use_keyless\": true,\n     \"auth\": {\n         \"auth_header_name\": \"\"\n     },\n+    \"custom_middleware\": {\n+      \"post\": [\n+        {\n+          \"name\": \"jwtMiddleware\",\n+          \"path\": \"/opt/tyk-gateway/middleware/jwtMiddleware.js\",\n+          \"require_session\": false\n+        }\n+      ]\n+    },\n     \"version_data\": {\n         \"not_versioned\": true,\n         \"versions\": {\n             \"Default\": {\n                 \"name\": \"Default\",\n                 \"expires\": \"3000-01-02 15:04\",\n                 \"use_extended_paths\": true,\n                 \"extended_paths\": {\n                     \"ignored\": [],\n                     \"white_list\": [],\n                     \"black_list\": []\n                 }\n             }\n         }\n     },\n     \"proxy\": {\n         \"listen_path\": \"/quickstart/\",\n         \"target_url\": \"http://httpbin.org/\",\n         \"strip_listen_path\": true\n     },\n     \"do_not_track\": true\n }\n```\nWith the following jwtMiddleware.js:\n```js\n// ---- Sample middleware creation by end-user -----\nlog(\"JWT middleware beginning\");\nvar jwtMiddleware = new TykJS.TykMiddleware.NewMiddleware({});\njwtMiddleware.NewProcessRequest(function(request, session) {\n    log(\"Virtual Test running\")\nvar jwt = request.Headers[\"Authorization\"][0].replace('Bearer ', '')\nlog(\"full JWT: \" + jwt)\n\n// splitting on `.` to get the header/payload/signature\nvar jwtParts = jwt.split('.')\nlog(\"header: \" + jwtParts[0])\nlog(\"payload: \" + jwtParts[1])\nlog(\"signature: \" + jwtParts[2])\n\nheaderDecoded = b64dec(jwtParts[0])\npayloadDecoded = b64dec(jwtParts[1])\nsignatureDecoded = b64dec(jwtParts[2])\n\nlog(\"headerDecoded: \" + headerDecoded)\nlog(\"payloadDecoded: \" + payloadDecoded)\nlog(\"signatureDecoded: \" + signatureDecoded)\n\nrawheaderDecoded = rawb64dec(jwtParts[0])\nrawpayloadDecoded = rawb64dec(jwtParts[1])\nrawsignatureDecoded = rawb64dec(jwtParts[2])\n\nlog(\"rawheaderDecoded: \" + rawheaderDecoded)\nlog(\"rawpayloadDecoded: \" + rawpayloadDecoded)\nlog(\"rawsignatureDecoded: \" + rawsignatureDecoded)\n\nvar responseObject = {\n    Body: JSON.stringify({header: headerDecoded, payload: payloadDecoded, signature: signatureDecoded}),\n    Header: {},\n    Code: 200\n}\n\nreturn TykJsResponse(responseObject, session.meta_data)\n\n});\n// Ensure init with a post-declaration log message\nlog(\"JWT middleware initialised\");\n```\nThis duplicates @assorm's code from above, but also calls out to rawb64dec.\nHowever, when running this, the following logs are shown from the TYK gateway:\n[Jan 20 14:52:50]  INFO jsvm-logmsg: Virtual Test running type=log-msg\n[Jan 20 14:52:50]  INFO jsvm-logmsg: full JWT: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c type=log-msg\n[Jan 20 14:52:50]  INFO jsvm-logmsg: header: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 type=log-msg\n[Jan 20 14:52:50]  INFO jsvm-logmsg: payload: eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ type=log-msg\n[Jan 20 14:52:50]  INFO jsvm-logmsg: signature: SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c type=log-msg\n[Jan 20 14:52:50] ERROR jsvm: Failed to base64 decode: illegal base64 data at input byte 72\n[Jan 20 14:52:50] ERROR jsvm: Failed to base64 decode: illegal base64 data at input byte 34\n[Jan 20 14:52:50]  INFO jsvm-logmsg: headerDecoded: {\"alg\":\"HS256\",\"typ\":\"JWT\"} type=log-msg\n[Jan 20 14:52:50]  INFO jsvm-logmsg: payloadDecoded: undefined type=log-msg\n[Jan 20 14:52:50]  INFO jsvm-logmsg: signatureDecoded: undefined type=log-msg\n[Jan 20 14:52:50] ERROR jsvm: Failed to run JS middleware: ReferenceError: 'rawb64dec' is not defined\nThis ReferenceError makes me believe that for whatever reason, the rawb64dec function isn't being initialised within the JSVM correctly.\nAny help you can provide will be greatly appreciated!\nEDIT: The tyk.standalone.conf is updated to enable the JSVM, too:\n```diff\n {\n   \"listen_port\": 8080,\n   \"secret\": \"352d20ee67be67f6340b4c0605b044b7\",\n   \"template_path\": \"/opt/tyk-gateway/templates\",\n   \"tyk_js_path\": \"/opt/tyk-gateway/js/tyk.js\",\n   \"middleware_path\": \"/opt/tyk-gateway/middleware\",\n   \"use_db_app_configs\": false,\n   \"app_path\": \"/opt/tyk-gateway/apps/\",\n   \"storage\": {\n     \"type\": \"redis\",\n     \"host\": \"redis\",\n     \"port\": 6379,\n     \"username\": \"\",\n     \"password\": \"\",\n     \"database\": 0,\n     \"optimisation_max_idle\": 2000,\n     \"optimisation_max_active\": 4000\n   },\n   \"enable_analytics\": false,\n   \"analytics_config\": {\n     \"type\": \"csv\",\n     \"csv_dir\": \"/tmp\",\n     \"mongo_url\": \"\",\n     \"mongo_db_name\": \"\",\n     \"mongo_collection\": \"\",\n     \"purge_delay\": -1,\n     \"ignored_ips\": []\n   },\n   \"health_check\": {\n     \"enable_health_checks\": true,\n     \"health_check_value_timeouts\": 60\n   },\n   \"optimisations_use_async_session_write\": true,\n   \"enable_non_transactional_rate_limiter\": true,\n   \"enable_sentinel_rate_limiter\": false,\n   \"allow_master_keys\": false,\n   \"policies\": {\n     \"policy_source\": \"file\",\n     \"policy_record_name\": \"/opt/tyk-gateway/policies/policies.json\"\n   },\n   \"hash_keys\": true,\n   \"close_connections\": false,\n   \"http_server_options\": {\n     \"enable_websockets\": true\n   },\n   \"allow_insecure_configs\": true,\n   \"coprocess_options\": {\n     \"enable_coprocess\": true,\n     \"coprocess_grpc_server\": \"\"\n   },\n   \"enable_bundle_downloader\": true,\n   \"bundle_base_url\": \"\",\n   \"global_session_lifetime\": 100,\n   \"force_global_session_lifetime\": false,\n-  \"max_idle_connections_per_host\": 500\n+  \"max_idle_connections_per_host\": 500,\n+  \"enable_jsvm\": true\n }\n```. ",
    "afrizalchen": "It seems to be fixed in https://github.com/golang/go/issues/5742 by introducing option to config.Renegotiation (RenegotiateNever, RenegotiateOnceAsClient and RenegotiateFreelyAsClient), default is RenegotiateNever.\nhttps://github.com/TykTechnologies/tyk/blob/master/reverse_proxy.go#L432 \"httpTransport\". @joshblakeley , I tried enabling proxy_close_connections. I'm still getting the same tls \"no renegotiation support\" error. I did restart the gateway :-). I've also enabled debug-logging,  however there's no additional information. Do you have other suggestion? Thanks.. @joshblakeley, apologize for putting the wrong information. What I meant is setting proxy_close_connections doesn't work for me. I was using version 2.6.2 then upgraded to 2.7.0.\nToday I checkout the source code and added transport.TLSClientConfig.Renegotiation = tls.RenegotiateFreelyAsClient to httpTransport() of reverser_proxy.go. This works.. You could consider to allow any additional authentication like:\n- IP Whitelisting\n- MTLS\nThe endpoints already support these, why not apply them to the Tyk itself.. ",
    "Davissi": "I realized that the issue was because the strip listen path checkbox was checked. Now it is able to detect the endpoint but not able to assign the value correctly\n\nThank you in advance\n. ",
    "dskoval": "Interested to work on this\nI propose following as implementation:\n- $tyk_context.trigger-{n}-payload - correspond to first match (as current implementation)\n- $tyk_context.trigger-{n}-payload-{i} - i'th regexp match (i starts from 0)\n- $tyk_context.trigger-{n}-payload-{i}-{g} - g'th capturing group for i'th regexp match (g starts from 0). @buger \nwill also try to remove some code duplication in rewrite middleware. Hi, at this very moment i'm removing repeating/unused code in cached regexp implementation.\nAt bare minimum i still have to compare benchmarks between mine and original implementation.\nIf it will look promising, should i add it to this PR, create issue for it or just create new PR?\nAsking because i'm new to GitHub and doesn't want to create mess. @buger @dencoded implemented requested changes in last commit\nhttps://github.com/TykTechnologies/tyk/pull/1973/commits/68e92f49beb9ccc4378d4fad492b1f680e601ae4. One more note:\nrewriter also replaces $tyk_meta.### with corresponding values from session metadata. If session not present it will return url with $tyk_meta.### variables in it. I think in such case all $tyk_meta.### should be replaced with empty strings too.. Sure. FindAllStringSubmatch returns slice of string slices [][]string. In every subslice first element is match and rest of elements are capturing group matches. In current implementation\nhttps://github.com/TykTechnologies/tyk/blob/5e01175e7bf9fc340b970dd236b15d28418c8072/mw_url_rewrite.go#L181-L191\nonly first element (v[0], lines 183 and 191) which is actual match is used, capturing groups simply not needed. \nBecause of that i replaced FindAllStringSubmatch with FindAllString which returns only matches.\nThough on other hand call to FindAllStringSubmatch could be left as-is and later returned capturing group could be used as key without call to https://github.com/TykTechnologies/tyk/blob/5e01175e7bf9fc340b970dd236b15d28418c8072/mw_url_rewrite.go#L183. ... and regexp benchmark results\n```\nbenchmark                                    old ns/op     new ns/op     delta\nBenchmarkRegExpCompile-4                     542           535           -1.29%\nBenchmarkRegExpCompilePOSIX-4                535           531           -0.75%\nBenchmarkRegExpMustCompile-4                 546           548           +0.37%\nBenchmarkRegExpMustCompilePOSIX-4            559           556           -0.54%\nBenchmarkRegExpMatchString-4                 903           1007          +11.52%\nBenchmarkRegExpMatch-4                       921           1040          +12.92%\nBenchmarkRegExpString-4                      2.40          2.44          +1.67%\nBenchmarkRegexpReplaceAllString-4            421           556           +32.07%\nBenchmarkRegexpReplaceAllLiteralString-4     432           460           +6.48%\nBenchmarkRegexpReplaceAllStringFunc-4        648           660           +1.85%\nBenchmarkRegexpFindAllString-4               489           603           +23.31%\nBenchmarkRegexpFindAllStringSubmatch-4       486           565           +16.26%\nBenchmarkRegexpFindStringSubmatch-4          403           451           +11.91%\nbenchmark                                    old allocs     new allocs     delta\nBenchmarkRegExpCompile-4                     2              2              +0.00%\nBenchmarkRegExpCompilePOSIX-4                2              2              +0.00%\nBenchmarkRegExpMustCompile-4                 2              2              +0.00%\nBenchmarkRegExpMustCompilePOSIX-4            2              2              +0.00%\nBenchmarkRegExpMatchString-4                 3              2              -33.33%\nBenchmarkRegExpMatch-4                       3              2              -33.33%\nBenchmarkRegExpString-4                      0              0              +0.00%\nBenchmarkRegexpReplaceAllString-4            1              0              -100.00%\nBenchmarkRegexpReplaceAllLiteralString-4     1              0              -100.00%\nBenchmarkRegexpReplaceAllStringFunc-4        2              0              -100.00%\nBenchmarkRegexpFindAllString-4               2              0              -100.00%\nBenchmarkRegexpFindAllStringSubmatch-4       2              0              -100.00%\nBenchmarkRegexpFindStringSubmatch-4          1              0              -100.00%\nbenchmark                                    old bytes     new bytes     delta\nBenchmarkRegExpCompile-4                     176           176           +0.00%\nBenchmarkRegExpCompilePOSIX-4                176           176           +0.00%\nBenchmarkRegExpMustCompile-4                 176           176           +0.00%\nBenchmarkRegExpMustCompilePOSIX-4            176           176           +0.00%\nBenchmarkRegExpMatchString-4                 192           176           -8.33%\nBenchmarkRegExpMatch-4                       192           176           -8.33%\nBenchmarkRegExpString-4                      0             0             +0.00%\nBenchmarkRegexpReplaceAllString-4            16            0             -100.00%\nBenchmarkRegexpReplaceAllLiteralString-4     16            0             -100.00%\nBenchmarkRegexpReplaceAllStringFunc-4        40            0             -100.00%\nBenchmarkRegexpFindAllString-4               34            0             -100.00%\nBenchmarkRegexpFindAllStringSubmatch-4       34            0             -100.00%\nBenchmarkRegexpFindStringSubmatch-4          32            0             -100.00%\n. URL Rewriter benchmarks\nbenchmark               old ns/op     new ns/op     delta\nBenchmarkRewriter-4     93092         94048         +1.03%\nbenchmark               old allocs     new allocs     delta\nBenchmarkRewriter-4     161            129            -19.88%\nbenchmark               old bytes     new bytes     delta\nBenchmarkRewriter-4     4678          3795          -18.88%\n```\n. Benchmarks above compare results after rewriter benchmarks fix in https://github.com/TykTechnologies/tyk/pull/1999/commits/af94f1219b07458d9d7ce7a3efd15cb56e79637f with results after optimization in https://github.com/TykTechnologies/tyk/pull/1999/commits/acb6061d459358f04c2b46cc9aeb0c78e6ea6855. PS It is possible shave off some nanoseconds by explicitly putting keybuilder back to pool before each return clause instead of deferred call pool.Put(). This will make regexps benchmark CPU performance on par with previous implementation and rewriter CPU performance even 1-2% better. But on other hand it will make code more verbose. So i'm not sure is it worth to do or not.. Agree, because of that unsafe method named UnsafeKey() and provided with comments on usage.\nCould you explain a bit your concerns about UTF-8/16 cases, please?\nIn Go strings are UTF-8 encoded. There is separate package https://golang.org/pkg/unicode/utf16/ to deal with UTF-16 characters (convert 2 bytes to rune and vice versa).\nIf you mean handling multi-byte characters, i didn't foresee any issues with it (byte slices and strings are pretty same under the hood). If you are unsure about how it will work with multibyte characters - let me know. I'll simply add/change tests to include them, it would not take much time. @buger added multi-byte characters in keyBuilder tests arguments, please check last commit. With steps provided above, trigger with \"rewrite_to\": \"tyk://api-version/headers\" would be fired. \nLooks like this will cause \"loop\" request, which would be processed again by whole middleware chain and SessionLimiter doesn't take into account is it \"loop\" request or not.. Would be able to provide fix for this issue tomorrow. \nBTW is there any way to see on which issue somebody already start to work?\nMost of the bugs immediately assigned to @buger or @dencoded - i can't believe that they work an all of them in parallel :). @buger Please, check my last comment at #2005 . This fix requires retrieving quota counter in case of loop request instead of increment it.\nI've stepped on defensive side and return that quota exceeded in case of loop request and absent quota counter.\nIf there is such legal cases exists, please let me know. @buger  Indeed, it's simpler, but looks like you missed some \"cosmetic\" stuff. Your fix doesn't return correct X-Ratelimit-Remaining header. Check GIF below, I've recorded it with your fix and api setup from #2001 \nWhat's exactly why my fix a bit more complicated\n\n. BTW, i checked code one more time and it looks like all middlewares delegate rate limit check to SessionLimiter\nhttps://github.com/TykTechnologies/tyk/blob/f8f6306e88f8db3320056ef206869a4babd95b35/mw_api_rate_limit.go#L71-L73\nhttps://github.com/TykTechnologies/tyk/blob/f8f6306e88f8db3320056ef206869a4babd95b35/mw_rate_limiting.go#L72-L74\nhttps://github.com/TykTechnologies/tyk/blob/f8f6306e88f8db3320056ef206869a4babd95b35/mw_organisation_activity.go#L87-L92\nProcessRequestOffThread and ProcessRequestLive in turn also call sessionLimiter.ForwardMessage\nSo IMO it's sessionLimiter responsibility to handle quota checks (and is it loop or not) if you want to achieve consistent behavior among all rate limiting middlewares. I'll try to explain\n\"X-Ratelimit-Remaining\" takes value from SessionState.QuotaRemaining field\nRemaining quota calculated as \nhttps://github.com/TykTechnologies/tyk/blob/4f7a4dc5ec5e04f96519ad6c20f530ac2d42c693/session_manager.go#L267-L273\nin order to set it correctly i'm just retrieving counter in case of loop request\nThough a few things puzzled me too:\nat which place QuotaRemaining initialized?\nwhy it set to max value (and remains at it) in yours implementation, though you effectively skipping all calculations in SessionLimiter?\n. Looks like it's already done\nhttps://github.com/TykTechnologies/tyk/blob/23e56e71ddfa5beb0f50a2aebe32e2ebccb3e68e/regexp/regexp.go#L402. Please, check https://github.com/TykTechnologies/tyk/pull/1973/commits/990474b4369a223c92c547d2fbc3d4d22fa58eee - Add caching logic for FindStringSubmatch in tyk/regexp. All expressions match[1:] placed inside of if len(match) > 0 { .... } blocks. \nIf regexp doesn't have any groups it will result in match having only one item and match[1:] would be an empty slice with no-op call to function addGroupsToContextData\nhttps://play.golang.org/p/-2KdJvgW8D9\n@dencoded \ni'll wrap calls addGroupsToContextData(&contextData, kn, match[1:]) into if len(match) > 1 { .... } - it doesn't affect functionality but increase readability. Hmm, for me this one looks suspicious.\nIntent of addGroupsToContextData is to modify (add items to) passed map.\nAs far as i know, in golang everything is value and passed by value (copied). Slices can look like passed by reference, because internally they holds pointer to baking array, first item index, length and capacity.\nIt can feels like they passed by reference (in case of modifying existing values), but in case of adding items they not. What's why append() returns updated slice.\nhttps://play.golang.org/p/arTxwX1w9mf\nI've checked same approach with map and it works, probably because in essence map is just a pointer to underlying structure - i don't know.\nWill remove pointers to map as requested. ",
    "komalsukhani": "@bitsofinfo It is under development.. Can I fix this?. I am interested in developing this feature. I might need some guidance.\nHow translation or alternative text will be provided for each request code?\nWill there be some input file that needs to be parsed?. I don't think so. Problem lies in storage/redis_cluster.go file. #2082 is changing api_loader.go file. Oh. I thought mutex was used just because multiple goroutines were accessing it.. ",
    "aftershockdan": "Hi @ilijabojanovic, sure the conf is as follows:\n{\n    \"listen_port\": 3000,\n    \"tyk_api_config\": {\n        \"Host\": \"http://tyk-gateway\",\n        \"Port\": \"8080\",\n        \"Secret\": \"$SECRET\"\n    },\n    \"shared_node_secret\": \"$SECRET\",\n    \"mongo_url\": \"mongodb://mongo:27017/tyk_analytics\",\n    \"license_key\": \"$KEY\",\n    \"page_size\": 10,\n    \"admin_secret\": \"$ADMIN_SECRET\",\n    \"redis_port\": 6379,\n    \"redis_host\": \"redis\",\n    \"redis_password\": \"\",\n    \"force_api_defaults\": false,\n    \"notify_on_change\": true,\n    \"license_owner\": \"NA\",\n    \"hash_keys\": true,\n    \"email_backend\": {},\n    \"hide_listen_path\": false,\n    \"use_sentry\": false,\n    \"sentry_code\": \"\",\n    \"sentry_js_code\": \"\",\n    \"show_org_id\": true,\n    \"enable_duplicate_slugs\": true,\n    \"host_config\" : {\n        \"override_hostname\": \"\",\n        \"disable_org_slug_prefix\": true,\n        \"enable_host_names\": false,\n        \"hostname\": \"\",\n        \"portal_domains\": {},\n        \"portal_root_path\": \"/portal\"\n    },\n    \"http_server_options\": {\n        \"use_ssl\": false,\n        \"certificates\": [\n            {}\n        ]\n    },\n    \"ui\": {\n        \"login_page\": {},\n        \"nav\" : {},\n        \"uptime\": {},\n        \"portal\": {},\n        \"designer\": {}\n    },\n    \"home_dir\": \"/opt/tyk-dashboard\",\n    \"enable_aggregate_lookups\": true,\n    \"aggregate_lookup_cutoff\": \"01/07/2016\"\n}\nWe also configure the dashboard using env variables as well:\n- name: TYK_DB_TYKAPI_HOST\n    value: \"$(GATEWAY_SERVICE_HOST)\"\n- name: TYK_DB_TYKAPI_PORT\n    value: \"$(GATEWAY_SERVICE_PORT)\"\n- name: TYK_DB_MONGOURL\n    value: \"mongodb://mongo-0.mongo/tyk_analytics\"\n- name: TYK_DB_REDISHOST\n    value: \"10.0.0.3\"\n- name: TYK_DB_REDISPORT\n    value: \"6379\". Ahh, ok yeah I didn't realize we needed the protocol there. I updated the env variable to:\n- name: TYK_DB_TYKAPI_HOST\n  value: \"http://$(GATEWAY_SERVICE_HOST)\"\nAnd everything works now. Thanks for the quick help!. ",
    "Sarcouy": "Right. \nI had to add : \n{\n    \"mongo_ssl_insecure_skip_verify\": true,\n    \"mongo_use_ssl\": true,\n}\nNow it works fine ! \nThank you for help ! \n. ",
    "buxingzhe": "Actually, we have tried the in-memory rate limiter, but it didn't fix the issue either.. It seems working now with in-memory rate limiter. But we deploy gateway as a cluster, does in-memory rate limiter check the rate globally? . That's great, does it work in Tyk 2.3? Currently, we use Tyk 2.3. ",
    "wlf061": "If we use DRL,  should we set the db_app_conf_options.node_is_segmented  to ture and set all nodes' db_app_conf_options.tags as the same?. ",
    "pikeas": "@matiasinsaurralde The page you linked says:\n\nYou can set up the core settings for Tyk Gateway with a single setup script, however for more involved deployments, you will want to provide your own configuration file. \n\nIn other words, the issues above are still valid.. @joshblakeley The panic happens every time with the following config file (assuming the given Redis instance is reachable):\n```\n{\n    \"storage\": {\n        \"type\": \"redis\",\n        \"host\": \"redis\",\n        \"port\": 6379\n    }\n}\n. ",
    "sybrandy": "That's not a bad idea, but then you need to make sure that executing the lint command is part of the documentation for starting up the service.  Also, I'm running on premises with the container, so executing the lint command is not something I have control over.  Unless the container is modified to execute the lint command and fail before starting the service, I feel that this won't solve the problem.  If for any reason the config file changes and the service is restarted, you may still get a ton of errors hiding the real problem.. ",
    "danielmartins": "of course @ilijabojanovic \n{\n    \"listen_port\": 3000,\n    \"tyk_api_config\": {\n        \"Host\": \"http://tyk_gateway\",\n        \"Port\": \"8080\",\n        \"Secret\": \"352d20ee67be67f6340b4c0605b044b7\"\n    },\n    \"mongo_url\": \"mongodb://mongo:27017/tyk_analytics\",\n    \"mongo_use_ssl\": false,\n    \"mongo_ssl_insecure_skip_verify\": false,\n    \"page_size\": 10,\n    \"admin_secret\": \"12345\",\n    \"shared_node_secret\": \"352d20ee67be67f6340b4c0605b044b7\",\n    \"redis_port\": 6379,\n    \"redis_host\": \"redis\",\n    \"redis_password\": \"\",\n    \"enable_cluster\": false,\n    \"redis_use_ssl\": false,\n    \"redis_ssl_insecure_skip_verify\": false,\n    \"force_api_defaults\": false,\n    \"notify_on_change\": true,\n    \"license_key\": \"\",\n    \"redis_database\": 0,\n    \"redis_hosts\": null,\n    \"hash_keys\": true,\n    \"email_backend\": {\n        \"enable_email_notifications\": false,\n        \"code\": \"\",\n        \"settings\": null,\n        \"default_from_email\": \"\",\n        \"default_from_name\": \"\",\n        \"dashboard_hostname\": \"\"\n    },\n    \"hide_listen_path\": false,\n    \"sentry_code\": \"\",\n    \"sentry_js_code\": \"\",\n    \"use_sentry\": false,\n    \"enable_master_keys\": false,\n    \"enable_duplicate_slugs\": true,\n    \"show_org_id\": true,\n    \"host_config\": {\n        \"enable_host_names\": true,\n        \"disable_org_slug_prefix\": true,\n        \"hostname\": \"dashboard.tyk.docker\",\n        \"override_hostname\": \"tyk.docker\",\n        \"portal_domains\": {},\n        \"portal_root_path\": \"/portal\",\n        \"generate_secure_paths\": false,\n        \"secure_cookies\": false,\n        \"use_strict_hostmatch\": false\n    },\n    \"http_server_options\": {\n        \"use_ssl\": false,\n        \"certificates\": [\n            {\n                \"domain_name\": \"\",\n                \"cert_file\": \"\",\n                \"key_file\": \"\"\n            }\n        ],\n        \"min_version\": 0,\n        \"ssl_ciphers\": null,\n        \"ssl_insecure_skip_verify\": false,\n        \"prefer_server_ciphers\": false\n    },\n    \"security\": {\n        \"allow_admin_reset_password\": false,\n        \"login_failure_username_limit\": 0,\n        \"login_failure_ip_limit\": 0,\n        \"login_failure_expiration\": 0,\n        \"audit_log_path\": \"\"\n    },\n    \"ui\": {\n        \"languages\": null,\n        \"hide_help\": false,\n        \"default_lang\": \"\",\n        \"login_page\": {},\n        \"nav\": {},\n        \"uptime\": {},\n        \"portal_section\": null,\n        \"designer\": {},\n        \"dont_show_admin_sockets\": false,\n        \"dont_allow_license_management\": false,\n        \"dont_allow_license_management_view\": false,\n        \"cloud\": false\n    },\n    \"home_dir\": \"/opt/tyk-dashboard\",\n    \"identity_broker\": {\n        \"enabled\": false,\n        \"host\": {\n            \"connection_string\": \"\",\n            \"secret\": \"\"\n        }\n    },\n    \"tagging_options\": {\n        \"tag_all_apis_by_org\": false\n    },\n    \"use_sharded_analytics\": false,\n    \"enable_aggregate_lookups\": true,\n    \"enable_analytics_cache\": false,\n    \"aggregate_lookup_cutoff\": \"01/07/2016\",\n    \"maintenance_mode\": false,\n    \"allow_explicit_policy_id\": false,\n    \"private_key_path\": \"\",\n    \"node_schema_path\": \"\",\n    \"oauth_redirect_uri_separator\": \"\",\n    \"statsd_connection_string\": \"\",\n    \"statsd_prefix\": \"\",\n    \"disable_parallel_sessions\": false,\n    \"dashboard_session_lifetime\": 0,\n    \"alternative_dashboard_url\": \"\",\n    \"sso_permission_defaults\": null,\n    \"sso_default_group_id\": \"\",\n    \"sso_custom_login_url\": \"\",\n    \"sso_custom_portal_login_url\": \"\",\n    \"notifications_listen_port\": 5000,\n    \"portal_session_lifetime\": 0,\n    \"enable_delete_key_by_hash\": false\n}. Hi @ilijabojanovic,\nI changed, but I got this error message on tyk-gateway log.\ntyk-gateway_1    | time=\"Sep  6 21:22:38\" level=error msg=\"Policy request login failure, Response was: {\\\"Status\\\":\\\"Error\\\",\\\"Message\\\":\\\"Authorization failed (Secret empty)\\\",\\\"Meta\\\":null}\\n\"\n. I reading the docs: https://tyk.io/docs/configure/tyk-gateway-configuration-options/#a-name-policies-a-policies.\nBut couldn't any reference to configure authorization to this connection gateway -> dashboard. \n. ",
    "Sanpetch": "In terminal :\n level=error msg=\"http: proxy error: unsupported protocol scheme \\\"\\\"\" api_id=1 org_id=default server_name= user_id= user_ip=172.17.0.1 user_name=. @asoorm And how about config port that I use \":8080\". @asoorm \nIf I include the port to \"target_url\": \"http://xx.xxx.xx.xx:8080\" the return response when I use postman is \"404 page not found\"  but I don't include to port , the return response is {\n    \"error\": \"There was a problem proxying the request\"\n}. @asoorm \nI used curl but the result are the same\n. @asoorm \nIf I include the port to \"target_url\": \"http://xx.xxx.xx.xx:8080\" the return response in terminal \nERROR main: couldn\u2019t parse target URL: parse xx.xxx.xx.xx:8080: first path segment in URL cannot contain colon . sample.zip\n@matiasinsaurralde . @matiasinsaurralde Thank you \n. ",
    "dtenenba": "Thanks. The page I \"found\" is one I got to by clicking \"Get Started\" on the main tyk.io page and then clicking the Docker icon. Please fix this link. Thanks.\n. Thanks, can you point me towards the URL for the correct docs? I am finding a number of things in the older version that seem wrong, so would like to see the current version. Thanks.. ",
    "EmielSchmeink": "Hi, sorry for the late reply. This happens on request, but when restarting the dashboard it automatically requests things from the gateway, so it gives an error. \ntyk.txt\n. ",
    "marksou": "Fixes https://support.tyk.io/a/tickets/2590. I'm assuming the docs will need updating?. @MCyprien This link has now been updated to https://tyk.io/docs/get-started/with-tyk-multi-cloud/. @MCyprien Yes, I've updated the link on the docs root page.. Hi @bitsofinfo we have updated the docs to clarify that paths, etc are relative. There are also UX changes in the Endpoint Designer going to be made to reflect this so it's clearer.. ",
    "HaraldNordgren": "Seems I'm being rate limited now in the tests. Possibly it's too much for some sub-system to run the tests for three Go versions.. ",
    "Gnouc": "cc @buger . @buger @asoorm Updated the PR, please take a look.. @buger @asoorm any updating?. ",
    "rajali": "@ilijabojanovic , is this fixed in v2.7.4?. This is still an issue, is this in the roadmap of any upcoming releases?. ",
    "flacito": "Not configuring via ENV.   I looked in tyk_analytics.conf and there is not such value.  I suppose I need it.  I copied the conf from the helps.   Should I add?. \nenvironment:\n      TYK_DB_HOMEDIR: /opt/tyk-dashboard\nIn my docker-compose file worked.  I'm up!    Is there a setting in the config JSON I can use?  (I ask not RTFM).   \n. ",
    "andrewscode": "Stack trace\ntyk-stacktrace.txt\n. This is still crashing with the latest release.     . It's important to note (after reading #2070) that the final endpoint isn't returning an empty body.  It's returning non-xml. Sure,  it's relatively the same as the previous stack trace\nstack2.txt\n. > {\n  \"api_model\": {},\n  \"api_definition\": {\n    \"api_id\": \"5e0f9b307db148d57d48399258e146f4\",\n    \"jwt_issued_at_validation_skew\": 0,\n    \"upstream_certificates\": {},\n    \"use_keyless\": true,\n    \"enable_coprocess_auth\": false,\n    \"custom_middleware\": {\n      \"pre\": [],\n      \"post\": [],\n      \"post_key_auth\": [],\n      \"auth_check\": {\n        \"name\": \"\",\n        \"path\": \"\",\n        \"require_session\": false\n      },\n      \"response\": [],\n      \"driver\": \"\",\n      \"id_extractor\": {\n        \"extract_from\": \"\",\n        \"extract_with\": \"\",\n        \"extractor_config\": {}\n      }\n    },\n    \"disable_quota\": false,\n    \"custom_middleware_bundle\": \"\",\n    \"cache_options\": {\n      \"cache_timeout\": 60,\n      \"enable_cache\": false,\n      \"cache_all_safe_requests\": false,\n      \"cache_response_codes\": [],\n      \"enable_upstream_cache_control\": false,\n      \"cache_control_ttl_header\": \"\"\n    },\n    \"enable_ip_blacklisting\": false,\n    \"tag_headers\": [],\n    \"pinned_public_keys\": {},\n    \"expire_analytics_after\": 0,\n    \"domain\": \"\",\n    \"openid_options\": {\n      \"providers\": [],\n      \"segregate_by_client\": false\n    },\n    \"active\": true,\n    \"jwt_expires_at_validation_skew\": 0,\n    \"config_data\": {},\n    \"notifications\": {\n      \"shared_secret\": \"\",\n      \"oauth_on_keychange_url\": \"\"\n    },\n    \"auth\": {\n      \"auth_header_name\": \"\",\n      \"use_certificate\": false\n    },\n    \"check_host_against_uptime_tests\": false,\n    \"auth_provider\": {\n      \"name\": \"\",\n      \"storage_engine\": \"\",\n      \"meta\": {}\n    },\n    \"blacklisted_ips\": [],\n    \"hmac_allowed_clock_skew\": -1,\n    \"dont_set_quota_on_create\": false,\n    \"uptime_tests\": {\n      \"check_list\": [],\n      \"config\": {\n        \"expire_utime_after\": 0,\n        \"service_discovery\": {\n          \"use_discovery_service\": false,\n          \"query_endpoint\": \"\",\n          \"use_nested_query\": false,\n          \"parent_data_path\": \"\",\n          \"data_path\": \"\",\n          \"cache_timeout\": 60\n        },\n        \"recheck_wait\": 0\n      }\n    },\n    \"enable_jwt\": false,\n    \"do_not_track\": false,\n    \"name\": \"Test\",\n    \"slug\": \"test\",\n    \"oauth_meta\": {\n      \"allowed_access_types\": [],\n      \"allowed_authorize_types\": [],\n      \"auth_login_redirect\": \"\"\n    },\n    \"CORS\": {\n      \"enable\": false,\n      \"max_age\": 24,\n      \"allow_credentials\": false,\n      \"exposed_headers\": [],\n      \"allowed_headers\": [],\n      \"options_passthrough\": false,\n      \"debug\": false,\n      \"allowed_origins\": [],\n      \"allowed_methods\": []\n    },\n    \"event_handlers\": {\n      \"events\": {}\n    },\n    \"proxy\": {\n      \"target_url\": \"http://www.test.com\",\n      \"endpoint_returns_list\": false,\n      \"cache_timeout\": 0,\n      \"parent_data_path\": \"\",\n      \"service_discovery\": {\n        \"endpoint_returns_list\": false,\n        \"cache_timeout\": 0,\n        \"parent_data_path\": \"\",\n        \"query_endpoint\": \"\",\n        \"use_discovery_service\": false,\n        \"target_path\": \"\",\n        \"use_target_list\": false,\n        \"use_nested_query\": false,\n        \"data_path\": \"\",\n        \"port_data_path\": \"\"\n      },\n      \"check_host_against_uptime_tests\": false,\n      \"transport\": {\n        \"ssl_ciphers\": [],\n        \"ssl_min_version\": 0,\n        \"proxy_url\": \"\"\n      },\n      \"target_list\": [],\n      \"query_endpoint\": \"\",\n      \"use_discovery_service\": false,\n      \"_sd_show_port_path\": false,\n      \"preserve_host_header\": false,\n      \"use_target_list\": false,\n      \"strip_listen_path\": false,\n      \"use_nested_query\": false,\n      \"data_path\": \"\",\n      \"port_data_path\": \"\",\n      \"enable_load_balancing\": false,\n      \"listen_path\": \"/test\",\n      \"disable_strip_slash\": false\n    },\n    \"client_certificates\": [],\n    \"use_basic_auth\": false,\n    \"version_data\": {\n      \"not_versioned\": true,\n      \"default_version\": \"\",\n      \"versions\": {\n        \"Default\": {\n          \"name\": \"Default\",\n          \"expires\": \"\",\n          \"paths\": {\n            \"ignored\": [],\n            \"white_list\": [],\n            \"black_list\": []\n          },\n          \"use_extended_paths\": true,\n          \"global_headers\": {},\n          \"global_headers_remove\": [],\n          \"global_size_limit\": 0,\n          \"override_target\": \"\",\n          \"extended_paths\": {\n            \"url_rewrites\": [\n              {\n                \"path\": \"/test/two\",\n                \"method\": \"GET\",\n                \"match_pattern\": \"/test/two\",\n                \"rewrite_to\": \"http://www.google.com\",\n                \"triggers\": [],\n                \"MatchRegexp\": null\n              }\n            ],\n            \"track_endpoints\": [\n              {\n                \"path\": \"/test/two\",\n                \"method\": \"GET\"\n              }\n            ]\n          }\n        }\n      }\n    },\n    \"use_standard_auth\": false,\n    \"session_lifetime\": 0,\n    \"hmac_allowed_algorithms\": [],\n    \"disable_rate_limit\": false,\n    \"definition\": {\n      \"location\": \"header\",\n      \"key\": \"x-api-version\",\n      \"strip_path\": false\n    },\n    \"use_oauth2\": false,\n    \"jwt_not_before_validation_skew\": 0,\n    \"allowed_ips\": [],\n    \"org_id\": \"5bf43f83335a5d43d577a82e\",\n    \"enable_ip_whitelisting\": false,\n    \"global_rate_limit\": {\n      \"rate\": 0,\n      \"per\": 0\n    },\n    \"enable_context_vars\": true,\n    \"tags\": [],\n    \"basic_auth\": {\n      \"disable_caching\": false,\n      \"cache_ttl\": 0\n    },\n    \"session_provider\": {\n      \"name\": \"\",\n      \"storage_engine\": \"\",\n      \"meta\": {}\n    },\n    \"strip_auth_data\": false,\n    \"id\": \"5c50c442335a5d3331e7490a\",\n    \"certificates\": [],\n    \"enable_signature_checking\": false,\n    \"use_openid\": false,\n    \"jwt_skip_kid\": false,\n    \"enable_batch_request_support\": false,\n    \"response_processors\": [\n      {\n        \"name\": \"header_injector\",\n        \"options\": {}\n      },\n      {\n        \"name\": \"response_body_transform\",\n        \"options\": {}\n      }\n    ],\n    \"use_mutual_tls_auth\": false\n  },\n  \"hook_references\": [],\n  \"is_site\": false,\n  \"sort_by\": 0\n}. See attached.\ntyk.zip\nWe had to downgrade back to 2.7.4 since the upgrade caused most of our API's to break.. Just upgraded to Tyk 2.7.6 and had the exact same issue with that api. To Summarize:\n2.7.4:   google.com is fetched  (correct)\n2.7.5:   test.com is fetched  (bad)\n2.7.6:   test.com is fetched  (bad)\n. Thanks,\nIs there any other information I can provide ( or do you have an api i can test)?    . > {gateway_url)/test/test/two\nJust to confirm,  that's incorrect.  You should be hitting {gateway_url}/test/two. Ok,  I can just update my api's then.    This change probably makes more sense anyway.\nThanks\n. ",
    "MCyprien": "@marksou thank for your fast answer, shouldn't the documentation root page be updated with that ?. Cool :) I will close this issue then thank you :). ",
    "fossabot": "Your license scan is passing -- congrats!\nYour badge status is now updated and ready to merge:\n. ",
    "adelowo": "Right now, the spec will be validated in CI. But in the long run, we might want to push the file \ndirectly to GitHub from Travis but for now, .utils/ci-swagger.sh can be run and the changes in the\ngateway-swagger.yaml can be committed alongside other change - CI will validate it again though.. @bitsofinfo I think this is what @buger means \n2.7 is already released and semantic versioning doesn't allow for a \nbreaking change in a patch release e.g 2.7.1. So since this is a breaking change and following semver, it will only be considered for 2.X ( 2.8 in this case) not 2.X.Y (2.7.X). @bitsofinfo I have not been able to replicate this. I cannot replicate this. Can you provide more information about the upstream server?\nI made a tiny upstream server that sets Content-Length to an arbitrary number ( say 43) but I can't replicate this. The closest thing I get is http: proxy error during body copy: unexpected EOF which is expected as the server doesn't write to the body. \n. Works for me. Not sure of how this will fit in with the config system. But I have it here right now so I could add tests and all of that.\nIf I am guided on how this will be added to the config or how it should be specified, I'd happily rework this PR. https://github.com/TykTechnologies/tyk/blob/c0dab5d1a023df456372b45795bd8936d6f369ba/api.go#L1366-L1369 was added in https://github.com/TykTechnologies/tyk/pull/2099 so might want to rethink by adding a new method that allows fetching all tokens still, or would passing a -1 as the page parameter suffix to fetch all tokens work - ideally no?. Ended up going with \nhttps://github.com/TykTechnologies/tyk/pull/2109/commits/e3d35f385c4cac231e739958344553574a93fbb2 ... That is obviously wrong which is why I left the comment about a potential new method so all tokens can be wiped out. Just like the GetClientTokensPaginated you described in https://github.com/TykTechnologies/tyk/pull/2109#discussion_r257043315. I didn't find anything related to pagination so I thought a global config value would be it. Fine to change it to the specified name if OAuth tokens are the only place pagination will be needed.. I went with GetPaginatedClientTokens. . I'd go with the 2nd option too. I'd update this PR to reflect that. Kindly take a look at https://github.com/TykTechnologies/tyk/pull/2109/commits/6b91b049204211be7df6505b4924ed57859d0525. Without this, go-swagger won't generate definitions for apiStatusMessage and the rest. Thus the swagger spec will be invalid as \"$ref\": \"#/definitions/APIDefinition\" for example won't work. \nIt is more like a way to actually trick go-swagger to generating them as definitions in the output file. ",
    "furkansenharputlu": "Hi @bitsofinfo , I tested $tyk_context.headers_* with 2.7.6, it seems working. Maybe header isn't set properly in JSVM. Can you please run your gateway in debug mode, make the request and share logs above of the error you mentioned. It should be something like the following:\n[Feb 28 16:59:01] DEBUG Stripping: /normal/\n[Feb 28 16:59:01] DEBUG Upstream Path is: furkan.com\n[Feb 28 16:59:01] DEBUG UPSTREAM REQUEST URL: furkan.com\n[Feb 28 16:59:01] DEBUG Outbound Request: https://nothing.fqdn.that.wontbe.used:8888/furkan.com\n[Feb 28 16:59:01] ERROR proxy: http: proxy error: dial tcp: lookup nothing.fqdn.that.wontbe.used: no such host api_id=8c88f72eba8648cd5baddf669d090f76 org_id=5c75441ebca82a045c7dcb98 server_name=nothing.fqdn.that.wontbe.used:8888 user_id=-- user_ip=127.0.0.1 user_name=. I want to understand whether the problem is because of JSVM or tyk_context.headers_*. Maybe something is broken in JSVM in 2.7.6.. I tested with js plugin too it worked in my local. Here is my sampleMiddleware.js:\n```js\n// Create your middleware object\nvar sampleMiddleware = new TykJS.TykMiddleware.NewMiddleware({});\n// Initialise it with your functionality by passing a closure that accepts two objects\n// into the NewProcessRequest() function:\nsampleMiddleware.NewProcessRequest(function (request, session, spec) {\nvar updatedHeaders = {};\n   updatedHeaders[\"X-My-Proxytourl\"] = \"https://www.youtube.com\";\n   request.SetHeaders = updatedHeaders;\nreturn sampleMiddleware.ReturnData(request, session.meta_data);\n\n});\n```\nurl_rewrites:\njson\n\"url_rewrites\": [\n              {\n                \"path\": \"/my/\\\\d.\\\\d/api/token\",\n                \"method\": \"GET\",\n                \"match_pattern\": \"/my/\\\\d.\\\\d/api/token\",\n                \"rewrite_to\": \"$tyk_context.headers_X_My_Proxytourl\",\n                \"triggers\": [],\n                \"MatchRegexp\": null\n              }\nIn your logs, time=\"Feb 28 16:13:10\" level=debug msg=\"UPSTREAM REQUEST URL: \" means context variable reads the header as empty. \nCan you please check what console.log(request.SetHeaders[\"X-My-Proxytourl\"]); prints before ReturnData and share the result in logs?\nAlso, if you can share the values while you are calling applyRequestHeaders I can try your exact scenario.\n. I tried it with your applyRequestHeaders method too and I couldn't reproduce the issue. I don't know maybe some other thing in your API definition can cause this.. @bitsofinfo I am closing this issue. The current behavior will stay same. You will change your API definition.. We decided to close this PR. The customer will change his API definition according to current behavior.. If s.matchRegex, err = regexp.Compile(s.MatchPattern); fails, it will be nil so doesn't it panic ?. ",
    "tokingHong": "\nCan you clarify which version of dashboard do you use?\n\nv1.7.5  and v1.7.3 has the same problom.  1.7.5 run in docker\n\n. \nconsole print. \nthis resource matters\uff1f @lghiur . @buger Can you tell me where I did wrong?\nthis is my service return\n[{\"ID\":\"055366e5-90dd-eb1f-3b0a-439b7dc4ae42\",\"Node\":\"SZ0000127\",\"Address\":\"10.124.203.14\",\"Datacenter\":\"dc1\",\"TaggedAddresses\":{\"lan\":\"10.124.203.14\",\"wan\":\"10.124.203.14\"},\"NodeMeta\":{\"consul-network-segment\":\"\"},\"ServiceKind\":\"\",\"ServiceID\":\"greeter-cbea2cee-0f65-4adb-a7a9-79b89f8ca727\",\"ServiceName\":\"greeter\",\"ServiceTags\":[\"t-789caa562a294acc2b2ec82f2a51b252ca28292950aa05040000ffff4f930768\",\"t-789caa564a2acacf4e2d52b252ca28292950aa05040000ffff364d0600\",\"t-789caa562a4e2d2a4b2d52b2522a2a4856aa05040000ffff30dd0597\",\"t-789caa562a4a4dcf2c2e29aa54b2524acecf2b2ecd51aa05040000ffff560f07c8\",\"t-789caa562a28ca2fc94fcecf51b252ca2d4d2e50aa05040000ffff46a906e2\",\"e-789cdc90b1eac2301087dfe5e6feff832e9217d0d9b57438f06729a469bdbb08227d7769ad51da0cce4e81efbe5cc277a7c02dc8d15e0083fc1fe07d4705092e116ae492314d8e332ec86e7d865ed94728b9325d9b8ea4ab4913ea0f3144ef8722d97f6ff52ba9ac62136c977df93599d5a5382dadf26b9b60db4dc62581f65d50acbbcc7c1926e1f5ffea31f9b3c68fd469617c62e3b18e9a805b727466afa06178040000ffffa215cb62\",\"v-789cca492c492d2e01040000ffff08cc028e\"],\"ServiceAddress\":\"10.124.203.14\",\"ServiceWeights\":{\"Passing\":1,\"Warning\":1},\"ServiceMeta\":{},\"ServicePort\":36786,\"ServiceEnableTagOverride\":false,\"ServiceProxyDestination\":\"\",\"ServiceProxy\":{},\"ServiceConnect\":{},\"CreateIndex\":2243,\"ModifyIndex\":2243}]\nthis is my SD config \n\"service_discovery\" : {\n            \"use_discovery_service\" : true,\n            \"query_endpoint\" : \"http://10.124.203.10:8500/v1/catalog/service/greeter\",\n            \"use_nested_query\" : false,\n            \"parent_data_path\" : \"\",\n            \"data_path\" : \"Address\",\n            \"port_data_path\" : \"ServicePort\",\n            \"endpoint_return_list\" : true,\n            \"use_target_list\" : false,\n            \"cache_timeout\" : 10,\n            \"target_path\" : \"/\"\n        }\n. > Hi, what service are you querying? i.e. consul, ETCD?\nConsul,but dashboard had a bug,I config it in database. > Thanks, what was the dashboard bug? Could you open an issue for that or let me know exact error that was occurring and i'll open one.\nI had submit a bug ,https://github.com/TykTechnologies/tyk/issues/2146\nBut I want to use consul immediately,so where is the configuration wrong?. > can you share the api definition your are using\njson\n{\n    \"_id\" : ObjectId(\"5c7643369dc45e0001aa14fc\"),\n    \"name\" : \"test #hahahhahahahahhahah\",\n    \"slug\" : \"test\",\n    \"api_id\" : \"e7f3dc325607427f43de2682e29b43e9\",\n    \"org_id\" : \"5c7636439dc45e0001aa14f6\",\n    \"use_keyless\" : true,\n    \"use_oauth2\" : false,\n    \"use_openid\" : false,\n    \"openid_options\" : {\n        \"providers\" : [],\n        \"segregate_by_client\" : false\n    },\n    \"oauth_meta\" : {\n        \"allowed_access_types\" : [],\n        \"allowed_authorize_types\" : [],\n        \"auth_login_redirect\" : \"\"\n    },\n    \"auth\" : {\n        \"use_param\" : false,\n        \"param_name\" : \"\",\n        \"use_cookie\" : false,\n        \"cookie_name\" : \"\",\n        \"auth_header_name\" : \"Authorization\",\n        \"use_certificate\" : false\n    },\n    \"use_basic_auth\" : false,\n    \"basic_auth\" : {\n        \"disable_caching\" : false,\n        \"cache_ttl\" : 0\n    },\n    \"use_mutual_tls_auth\" : false,\n    \"client_certificates\" : [],\n    \"upstream_certificates\" : {},\n    \"pinned_public_keys\" : {},\n    \"enable_jwt\" : false,\n    \"use_standard_auth\" : false,\n    \"enable_coprocess_auth\" : false,\n    \"jwt_signing_method\" : \"\",\n    \"jwt_source\" : \"\",\n    \"jwt_identit_base_field\" : \"\",\n    \"jwt_client_base_field\" : \"\",\n    \"jwt_policy_field_name\" : \"\",\n    \"jwt_issued_at_validation_skew\" : NumberLong(0),\n    \"jwt_expires_at_validation_skew\" : NumberLong(0),\n    \"jwt_not_before_validation_skew\" : NumberLong(0),\n    \"jwt_skip_kid\" : false,\n    \"notifications\" : {\n        \"shared_secret\" : \"\",\n        \"oauth_on_keychange_url\" : \"\"\n    },\n    \"enable_signature_checking\" : false,\n    \"hmac_allowed_clock_skew\" : -1.0,\n    \"hmac_allowed_algorithms\" : [],\n    \"base_identity_provided_by\" : \"\",\n    \"definition\" : {\n        \"location\" : \"header\",\n        \"key\" : \"x-api-version\",\n        \"strip_path\" : false\n    },\n    \"version_data\" : {\n        \"not_versioned\" : true,\n        \"default_version\" : \"\",\n        \"versions\" : {\n            \"RGVmYXVsdA==\" : {\n                \"name\" : \"RGVmYXVsdA==\",\n                \"expires\" : \"\",\n                \"paths\" : {\n                    \"ignored\" : [],\n                    \"white_list\" : [],\n                    \"black_list\" : []\n                },\n                \"use_extended_paths\" : true,\n                \"extended_paths\" : {\n                    \"ignored\" : [],\n                    \"white_list\" : [],\n                    \"black_list\" : [],\n                    \"cache\" : [],\n                    \"transform\" : [],\n                    \"transform_response\" : [],\n                    \"transform_jq\" : [],\n                    \"transform_jq_response\" : [],\n                    \"transform_headers\" : [],\n                    \"transform_response_headers\" : [],\n                    \"hard_timeouts\" : [],\n                    \"circuit_breakers\" : [],\n                    \"url_rewrites\" : [],\n                    \"virtual\" : [],\n                    \"size_limits\" : [],\n                    \"method_transforms\" : [],\n                    \"track_endpoints\" : [],\n                    \"do_not_track_endpoints\" : [],\n                    \"validate_json\" : []\n                },\n                \"global_headers\" : {},\n                \"global_headers_remove\" : [],\n                \"global_size_limit\" : NumberLong(0),\n                \"override_target\" : \"\"\n            }\n        }\n    },\n    \"uptime_tests\" : {\n        \"check_list\" : [],\n        \"config\" : {\n            \"expire_utime_after\" : NumberLong(0),\n            \"service_discovery\" : {\n                \"use_discovery_service\" : false,\n                \"query_endpoint\" : \"\",\n                \"use_nested_query\" : false,\n                \"parent_data_path\" : \"\",\n                \"data_path\" : \"\",\n                \"port_data_path\" : \"\",\n                \"target_path\" : \"\",\n                \"use_target_list\" : false,\n                \"cache_timeout\" : NumberLong(60),\n                \"endpoint_returns_list\" : false\n            },\n            \"recheck_wait\" : 0\n        }\n    },\n    \"proxy\" : {\n        \"preserve_host_header\" : false,\n        \"listen_path\" : \"/test\",\n        \"disable_strip_slash\" : false,\n        \"strip_listen_path\" : true,\n        \"enable_load_balancing\" : false,\n        \"target_list\" : [],\n        \"check_host_against_uptime_tests\" : false,\n        \"service_discovery\" : {\n            \"use_discovery_service\" : true,\n            \"query_endpoint\" : \"http://10.124.203.10:8500/v1/catalog/service/greeter\",\n            \"use_nested_query\" : false,\n            \"parent_data_path\" : \"\",\n            \"data_path\" : \"Address\",\n            \"port_data_path\" : \"ServicePort\",\n            \"endpoint_return_list\" : true,\n            \"use_target_list\" : false,\n            \"cache_timeout\" : 10,\n            \"target_path\" : \"/\"\n        },\n        \"transport\" : {\n            \"ssl_ciphers\" : [],\n            \"ssl_min_version\" : 0,\n            \"proxy_url\" : \"\"\n        }\n    },\n    \"disable_rate_limit\" : true,\n    \"disable_quota\" : true,\n    \"custom_middleware\" : {\n        \"pre\" : [],\n        \"post\" : [],\n        \"post_key_auth\" : [],\n        \"auth_check\" : {\n            \"name\" : \"\",\n            \"path\" : \"\",\n            \"require_session\" : false\n        },\n        \"response\" : [],\n        \"driver\" : \"\",\n        \"id_extractor\" : {\n            \"extract_from\" : \"\",\n            \"extract_with\" : \"\",\n            \"extractor_config\" : {}\n        }\n    },\n    \"custom_middleware_bundle\" : \"\",\n    \"cache_options\" : {\n        \"cache_timeout\" : NumberLong(60),\n        \"enable_cache\" : true,\n        \"cache_all_safe_requests\" : false,\n        \"cache_response_codes\" : [],\n        \"enable_upstream_cache_control\" : false,\n        \"cache_control_ttl_header\" : \"\"\n    },\n    \"session_lifetime\" : NumberLong(0),\n    \"active\" : true,\n    \"auth_provider\" : {\n        \"name\" : \"\",\n        \"storage_engine\" : \"\",\n        \"meta\" : {}\n    },\n    \"session_provider\" : {\n        \"name\" : \"\",\n        \"storage_engine\" : \"\",\n        \"meta\" : {}\n    },\n    \"event_handlers\" : {\n        \"events\" : {}\n    },\n    \"enable_batch_request_support\" : false,\n    \"enable_ip_whitelisting\" : false,\n    \"allowed_ips\" : [],\n    \"enable_ip_blacklisting\" : false,\n    \"blacklisted_ips\" : [],\n    \"dont_set_quota_on_create\" : false,\n    \"expire_analytics_after\" : NumberLong(0),\n    \"response_processors\" : [],\n    \"CORS\" : {\n        \"enable\" : false,\n        \"allowed_origins\" : [],\n        \"allowed_methods\" : [],\n        \"allowed_headers\" : [],\n        \"exposed_headers\" : [],\n        \"allow_credentials\" : false,\n        \"max_age\" : 24,\n        \"options_passthrough\" : false,\n        \"debug\" : false\n    },\n    \"domain\" : \"\",\n    \"certificates\" : [],\n    \"do_not_track\" : false,\n    \"tags\" : [],\n    \"enable_context_vars\" : false,\n    \"config_data\" : {},\n    \"tag_headers\" : [],\n    \"global_rate_limit\" : {\n        \"rate\" : 0.0,\n        \"per\" : 0.0\n    },\n    \"strip_auth_data\" : false,\n    \"hook_references\" : [],\n    \"is_site\" : false,\n    \"sort_by\" : 0\n}\n. @joshblakeley \n\n. @joshblakeley I found the problom .\"endpoint_returns_list\" /  \"endpoint_return_list\"   .\n\n. ",
    "lsjurczak": "It's better to use strconv.Itoa. Sprintf will use the package reflect, and it will allocate one more object.. "
}