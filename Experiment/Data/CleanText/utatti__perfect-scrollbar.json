{
    "utatti": "Thanks!\n. Thanks!\nBy the way, I'd be very appreciated if you change the commit title more specific.\nI think \"Update src/perfect_scrollbar.js\" is somewhat ambiguous.\nRegards.\n. I think that the pull request's title is changed but the commit message is not changed..\nAnyway, I merged it and there's no problem.\nThanks!\n. Hi!\nThanks for this patch. I'm very appreciated of your patches.\nAs I tried this, there's still some problem.\nIn browser, an element's scrollTop property have maximum value, which is outer height(height with padding) + margin-top. This is accepted to scrollLeft too(width with padding + margin-left).\nAs I tested, in some way with javascript, we can change scrollTop and scrollLeft to larger value manually, but can't do that with mouse wheel(so in our plugin, works well with manually clicking and moving the bar, but doesn't work with mouse wheel).\nSo when applying this patch, can't scroll to bottom or right fully with mouse wheel.\nAnd even though we can scroll fully with clicking and moving the bar with mouse, the scroll bar's movement looks laggy when the scroll exceed the margin in bottom or right.\nI think this problem should be solved before accepting this patch and the solution should be included in the patch.\nMy object is making this plugin work same with default scroll bar.\nSo, we should see how the default scroll bar works when the content have margin and padding.\nIf you find the solution, please let me know with new pull request. I'll look into this too.\nThanks.\nRegards.\n. I fixed a little and pulled this request as commit 35ab2f9.\nI changed 'includeMargin' option of outerWidth and outerHeight to false,\nbecause which causes problem is margin, not padding.\nSo I decided to apply this patch with padding first.\nI'll release new version with this and look into margin from now.\nThanks!\n. Hi! I'm very appreciated of your praise!\nIn fact, I'm looking into some code of mobile scrolling in other project, but recently I was kind of busy and had no time to make the patch of this.\nI'm very sorry and I'll look into this topic as soon as possible!\nRegards.\n. #6 will resolve this.\nThank you for waiting!\nI'll be very appreciated if you test #6 with your devices.\nYou can comment at #6, and I'll close this issue.\nRegards.\n. Hi!\nIn some laptop, the trackpad have the horizontal scrolling function, but I don't know there's other way to do that.\nI thought that I can scroll horizontally with clicking wheel button and moving, but in my macbook pro it doesn't work for default browser scrolling.\nAnd this is not answer to scroll with mousewheel, but you can surely just drag-and-drop the horizontal scrollbar.\nIf there's way  to do horizontal scrolling efficiently, please let me know!\nRegards.\n. Thank you! I'll merge this. If there's problem, please let me know.\n. Hi!\nI'm very sorry but I don't have plan to implement this.\nI want to keep this plugin as small as possible.\nAnd the major reason why i made this plugin is that I don't like the scrollbars that occupy the area and cover the contents (includes browser-default scrollbar).\nThus this integration is hard for me to accept.\nI'm really sorry and I'll open this issue for a while for you.\nIf you have some other nice ideas, please let me know!\nThanks.\nRegards.\n. It's cause of e.preventDefault() and i can fix this easily, I think.\nI'll look into this. Thanks!\n. The commit f2a95a1bde0fdfcc6734432fca018559151dcb0e fixed this.\nThank you for uploading this issue!\n. I didn't check that 2 perfect-scrollbars can be used in one page.\nI think it can work with\n\n$(\"#someElement1\").perfectScrollbar();\n$(\"#someElement2\").perfectScrollbar();\n\nBut I'm not sure it works well.\nThere can be some problems.\nI'll look into this as soon as possible, but I think I'll be busy for about a week or two.\nIf you can make some patch by yourself, please do it and ask a pull request.\nI'll merge it with pleasure.\nThanks!\n. moved to #11 ! Thank you @GregDThomas !\n. Hi!\nFirst of all, I'm really appreciated of your contributions!\nIt really helps me.\nI'm kind of busy at my workplace nowadays and have not enough time to look into this.\nAs I see the patch, the contents are nearly perfect.\nBut I'm really sorry but here're some requests.\nThey're not about the contents, but about code convention issues.\n1. Please divide the patch into two separated patches, like:\n   1) Add optional settings feature.\n   2) Add code examples.\n2. Change the extensions of the example html files.\n   I'd like to use .html instead of .htm.\n3. Please check indentations.\n   I'm using \"tabsize 4\" and \"expand tab to spaces\" for JavaScript sources in this project.\n   For example html files, \"tabsize 2\" is okay, but it seems that some indents are wrong in the head section.\nThank you very much again.\nRegards.\n. I pick the patch and changed them by myself.\nThank you!\n. Hi!\nFirst of all, I'm really thank you for your interests about this plugin.\nBut I'm afraid to say that it's hard to merge this request.\nI'd like to make this plugin as small as possible and allow users to customize their own css.\nIt's the design concept of perfect-scrollbar.\nSurely these patches contains some script changes, but I think that the changes are kind of different with my design concept.\nI'm afraid but I don't want to add some lines to script for additional design issues.\nRather than take this patches into main repository, I suggest that you can fork this plugin and create your own version with this changes.\nThank you very much again and I'll not close this issue for some days.\nIf you have some more opinions of this issue, please feel free to let me know.\nRegards.\n. I think both ways will cost quite much cpu utilization and it's not what I want with this plugin.\nIn fact, this plugin uses default 'scrollTop' and 'scrollLeft' properties.\nIt means, you can write your own events like this, for example:\n\n$('#test').perfectScrollbar();\n$('#test').scroll(function(e) {\n  if( $('#test').scrollTop() == 0 ) {\n    $('#test').addClass('top');\n  }\n  else {\n    $('#test').removeClass('top');\n  }\n});\n\nIn conclusion, implementing full-featured event trigger or css handling is kind of far from my goal.\nI'm very sorry and if you still want the features, please feel free to fork this project and make your own version.\nThank you.\nRegards.\n\nI updated this comment at 14:11 with test. It works now without any patch!\n. Hi, thank you for your praise!\nSorry for late response.\nI'm kind of busy nowadays in workplace and don't have enough time to look into this plugin.\nIn fact, I did not test with percentage based divs.\nI'll look into and fix this ASAP.\nRegards.\n. This may have been fixed with a recent scrolling logic change. Closed for inactivity.\n. Hi! I think it'll work but I've not tested with fixed element.\nI think if the container's position is fixed and children's are not, it' would work.\nCan you share html and css code of your nav?\nIt'll help me to find out why the problem occur.\nThanks.\n. Hi!\nPlease refer this issus: #12 \nActually, without any extra callback, you can implement this feature.\nThis plugin use browser's default scroll feature, you can just use .scroll() event and catch when the scrolling ends(scroll top + container height == content height).\nThanks!\n. Hi!\nI've not tested with big table yet.\nIn fact I'm kind of busy nowadays and have not much time to look into additional improvement of this plugin.\nI'll be very appreciated if you can make some patches for this issue.\nSurely, I'll also test this and make some improvements as soon as possible.\nThank you.\nRegards.\n. Resolved with #34\n. Hi!\nWhen I made this plugin, I decided to create the plugin that's not manipulate original elements or layout.\nSo rather than create a wrapper for multiple children, I'd rather make users themselves create the wrapper.\nCreating a wrapper automatically seems like nothing, but after some years of web service development, I noticed that the small constraint sometimes breaks the whole layout and makes the plugin useless.\nIn conclusion, I think the plugin should change original elements as little as possible.\nThis is my(and this plugin's) design concept.\nSo I mentioned about this issue in README(https://github.com/noraesae/perfect-scrollbar#requirements).\nI'm really sorry but I can't implement this feature for you. If you think you need this feature, please feel free to fork this project and make your own version.\nThank you.\nRegards.\n. Hi!\nPlease refer #10 and #11.\nIn fact, I don't want to prevent the mousewheel event bubbling, cause the default browser scroll is bubbled.\nBut there's many issues about this feature, I'll suggest this with optional parameter.\nThanks!\n. Hi!\nFirstly, thank you very much of your patch.\nBut I can't understand in which situation the bug occurs exactly.\nCould you please introduce some example codes?\nRegards.\n. Hi!\nIn conclusion, yes, in default option, ps swallows events and stop propagation.\nBut you can use optional parameter to propagate the event to parent when the element have no more space to scroll.\nPlease try it.\n\n$(\"#InnerElement\").perfectScrollbar({\n  wheelPropagation: true\n});\n\nRegards.\n. Hi!\nYou can destroy the plugin and set again whenever you want.\nUse $(\"#SomeDiv\"). perfectScrollbar('destroy'); when you need to disable it,\nand $(\"#SomeDive\").perfectScrollbar(); will enable it again.\nSorry for late response.\nThank you.\nRegards.\n. Hi!\nIt's because the plugin prevent default touchmove event to implement mobile scrolling.\nI'm really sorry but I recommend not to use the plugin where the zooming needed.\nThere can be the way to implement the feature without preventing default touchmove event, but in face I have not enough time to look into it.\nSorry again and if you make a patch and request pull, I'll be very appreciated and pull it.\nThank you.\nRegards.\n. The problem is resolved with the patch fb3b0185904a8f3e862ba96b28ec954e6d674d08.\nSorry for the late fix.\nThank you.\n. Hi!\nI'm very sorry for late response.\nI'll be very appreciated if there's more information, for example, the name and version of the browser or the device name.\nUnfortunately, I have no android device and can't test them now.\nYou can see  bindMobileTouchHandler function in the code and debug the bug.\nIf you help me to debug it, It will really save me.\nFor sure, whenever l become able to test it, I'll look into the bug.\nThank you.\nRegards.\n. May have been fixed or not an issue currently. If there's any further issue, feel free to upload again.\nClosed for inactivity.\n. Hi!\nI'm very sorry for late response.\nYou means that you're using the plugin for the container div that contains canvas and\nyou want to disable scrolling while something being drawn in the canvas?\nThen how about trying event.stopPropagation() in draw function?\nIt'll prevent the touch event from propagating to container.\nAbout doubletab event, how about finding some plugins? I found this: https://github.com/eightmedia/hammer.js\nIf you want to toggle the scrollbar with doubletab, please call $(\"#SomeDiv\").perfectScrollbar('destroy'); or $(\"#SomeDiv\").perfectScrollbar(); in doubletab event handler.\nThank you.\nRegards.\n. The mobile touch problem is resolved with the patch fb3b0185904a8f3e862ba96b28ec954e6d674d08.\nSorry for the late fix.\nThank you.\n. Hello.\nThank you for the patch. I'll gratefully merge this and it wil be included in the next version!\nRegards.\n. Hi!\nperfect-scrollbar's UI features are (nearly) fully dependent on CSS.\nYou can modify perfect-scrollbar.css file and implement what you want without changes in script file.\nSpecifically, please change the opacity of .ps-scrollbar-x and .ps-scrollbar-y.\nIt's now 0 and it's the reason why the scrollbars are invisible.\nPlease change them like below:\nopacity: 0.6;\nfilter: alpha(opacity = 60);\nThank you.\nRegards.\n. @kpturner This's an old issue. Please refer to #139 instead. Thanks.\n. @kpturner Thank you for the complement. I was about to comment on the thread as well.\n. Hi.\nI'm very sorry but I think this is out of range that this plugin should cover.\nIt should be user who choose to use jQuery plugin or CSS.\nIt's easily implemented with script:\n\nif ($.browser.webkit) {\n  $(\"#SomeDiv\").addClass('scrollbar-css'); // class to customize scrollbar\n}\nelse {\n  $(\"#SomeDiv\").perfectScrollbar();\n}\n\nThank you.\nRegards.\n. Thank you very much for your opinion, but I still think that CSS customization is up to user.\nThis plugin doen't constrain every user to use exactly same UI and any user can modify the nearly all css of the scrollbar.\nSome users may want the scrollbar to have more width and other users may want the scrollbar to be displayed all the time.\nFor sure I know that using CSS styling can reduce much CPU usage, and I don't mean CSS is bad.\nI just mean that CSS is not the range of this plugin.\nNow this plugin includes some CSS files, but it's just a good example(I think...) and users can modify them easily(and that's what i want with this plugin).\nAgain, I think that it's user who select whether use the plugin or CSS customization and this plugin should provide minimum range of support(to give user more options to select).\nI'm very sorry and really thank you for your opinion again.\nI'm also very sorry for my bad English.\nThank you.\nRegards.\n. Sounds good!\nNow there's no wrapper implemented for the scrollbars.\nI think this feature should implemented with the rail divs that contains the scrollbars and always exist, not with an option.\nThen users can draw the rails as they like. If there's no CSS, the rails will be not displayed. If there's background color, the wrappers will be displayed.\nThis way may be much easier to implement and fits well with what I want to make this plugin.\nNowadays I'm kinda busy of my work and some other projects and in fact I don't have much time to work with the plugin, but whenever possible I'll look into this.\nAnd for sure I will be really appreciated if you or somebody can contribute with this feature.\nThank you.\nRegards.\n. Finally, the commit 2222ec5e9109b1f4c4864e65602ba20055f8afc1 implement this feature!\n. Looks good!\nThank you very much for your patch.\nBy the way, could you please merge all three commits to one commit?\nIf then I'll merge this request with great pleasure.\nThank you.\nRegards.\n. Thank you!\n. Thank you very much for your interests about this plugin, but I can hardly read this thread..\nCould you please make the patch and pull-request me?\nThank you.\nRegards.\n. Here is the manual for making a pull request:\nhttps://help.github.com/articles/using-pull-requests\nWith a quick look, I've some opinions.\n1. I don't think it's reasonable that the container has padding.\n2. 'width' and 'height' properties in settings are verbose and kinda useless. I think that just making a simple wrapper div is much easier than making settings to have these size properties.\n3. I don't know what the code lines below mean. Please make a pull request.\n   /* MOD from original version: This forbid us to catch the mousedown in external functions /\n   / e.stopPropagation(); */\n4. For the rests, I'll test them with pull request.\nCould you please make a pull request except 1 and 2?\nThank you for your interests about this plugin.\nRegards.\n. For that kind of situation, there's an answer.\nDon't use perfectScrollbar() on <ul> and make the wrapper div for ul and call the function for the div.\nHTML\n<div id=\"ListWrapper\">\n  <ul>\n    <li>...</li>\n    ...\n  </ul>\n</div>\n<script>\n$(\"#ListWrapper\").perfectScrollbar();\n</script>\n. Multiple children issue is resolved with #36.\n. Hi.\nAt first it's out of size, but the scrollbar size become right when scrolled, right?\nIt means the scrollbar size is not updated after the content size is changed.\nIn this plugin, the function updating the size of scrollbars is not automatically called.\nYou should call the function manually with .perfectScrollbar('update');.\nI think that in your page, the content size is not fixed at first and it keeps changing until loading elements finished.\nCould you please try calling $(\"#SomeDiv\").perfectScrollbar('update'); after the content is fully loaded?\nIf there's any problem, feel free to let me know.\nThank you!\nRegards.\n. Thank you!\n. I reviewed and commented for each commits.\nPlease take them into account and apply them to the patch.\nThank you!\n. I think that it'll be nice to gather the ie fixes together.\nHow about make a class .ie and .ie6, .ie7, etc?\nIt'll be added with the script:\njavascript\nvar ieSupport = function (version) {\n  $this.addClass('ie');\n  $this.addClass('ie' + version);\n  if (version === 6) {\n    // blahblah....\n  }\n  // blahblah....\n};\n// ...\nvar ieMatch = navigator.userAgent.toLowerCase().match(/(msie) ([\\w.]+)/);\nif (ieMatch && ieMatch[1] === 'msie') {\n  ieSupport(parseInt(ieMatch[2], 10));\n}\nIf then, we can avoid that the useless CSS styles are applied to the modern browsers.\nWe can use the css like this:\ncss\n.ps-container.ie {\n  // some fixes\n}\nPlease take this into account.\nIf it's too time-heavy to implement this feature, just fixes some convention defects and I will implement this feature.\nThank you!\nRegards.\n. And I adopted Grunt into this project.\nPlease refer to https://github.com/noraesae/perfect-scrollbar/wiki/Contributing.\nI feel really sorry for the hard review, but as you know, it's necessary for the project maintenance.\nReally really thank you very much for your patches!\n. I manually merged the patch and linted the codes.\nInstead of adding !important, I made a patch, 7bd816e79f4cf48f9f7fe56289e1e15e95f03382.\nThank you very much!\n. Hi!\nWith a quick look, the patch looks nice.\nI reviewed the patch and I'd like to make some comments.\nFirst, please remove the lines commented with '//'.\nIt's the basic refactoring rule that the unused lines should be removed. It looks that they'll be useful someday, but They'll make the code into spaghetti someday.\nSecond, I think $this.prop('scrollHeight') and $this.prop('scrollWidth') look better with other lines.\nThank you very much for the pull request!\nPlease take the comments in account and apply them to the patch.\n. I'll merge the pull request when I'm home and have some tests with IE.\nThank you!\n. Works very well in win7 ie8!\nAnd even, this patch resolve the multiple children problem!!\nThank you very much.\n. It looks very nice.\nAbout the naming, I prefer to use just 'scrollbar' instead of 'thumb' and 'scrollbar' is now used in the codes.\nAnd I think 'size' is kind of ambiguous because typically it means both width and height.\nAlso, I think 'max' option is not needed.\nSo, I suggest the option like:\njavascript\n{\n  minScrollbarWidth: 100,\n  minScrollbarHeight: 100\n}\nIf you have some opinions, feel free to comment!\nThank you.\n. I once considered to use node to build the scripts but I think it's kinda heavy job for just a jquery plugin.\nSo I just added build script and jshint file to use.\nBut I think it's right time to add a way to build and lint the codes.\nI'm looking into this: http://gruntjs.com/\nI'll do this in this weekend with new version release.\nThank you, Greg.\n. @GregDThomas Thanks!\n. I adopted Grunt into this project.\nPlease refer https://github.com/noraesae/perfect-scrollbar/wiki/Contributing.\nThank you!\n. Sounds good! :D\n. 1. I can't automatically merge this pull request. Please rebase the branch with updated origin/master.\n2. Please make all commits into 2 commits. one is for the minLength patch itself, and the other is for the example.\n3. Please remove ',' and also lint the code with Grunt. About Grunt, please check https://github.com/noraesae/perfect-scrollbar/wiki/Contributing.\n. As @maoziliang said, this problem is resolved with the patch, but the new version is not yet released.\nI'll add the information about this issue in README.\nThank you!\n. It's right. I'll think about there's good way to do this with Grunt.\nThank you!\n. @GregDThomas Thank you! I've applied the version number fix.\nFrom now, the minified files will have version number in its name.\n. Because if it means that we should change the file every time when we release the new version and I don't want to.\nAnd having their own minifiers doesn't mean that they should use the source file which is not minified.\n. Looks good.\nBut why is there !!?\nJust (('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) look better to me.\n. I agree with the idea that the boolean value should decide whether the device supports touch event.\nAnd how about changing the name of variable into more semantic one?\nFor example, supportsTouch or isSupportingTouch.\n. In fact, the boolean value is used to decide whether use touch handler or not.\nSo I think that the flag should be changed to represent whether the device supports touch event.\nThis issue is somewhat duplicated with #42 , and please discuss about this issue there.\nThank you!\n. Hi,\nCan you please let me know about the environment you're using and the situation the problem occurs in?\nIn OS X Chrome, I can't find the case.\njavascript\n$(document).bind('mouseup.perfect-scroll', function (e) {\n  if ($scrollbarY.hasClass('in-scrolling')) {\n    $scrollbarY.removeClass('in-scrolling');\n  }\n});\nIn the source, we remove the class in document's mouseup function.\nPlease check if there's some handler that preventDefault() or stopPropagation() for mouseup event.\nAlso you can check the jQuery version.\nThank you!\n. It's nice that the problem is solved!\nThank you :D\n. Hi!\nUnfortunately, It is not possible now. I will consider to add this feature in next update.\nThe process will be updated in #47.\nThank you!\n. Could you please add some informations about the situation in which the problem occurs?\nFor example, which browser do you use?\nIn Chrome, OS X, the scroll bar doesn't disappear when the left button is being pressed and in scrolling, and it's the way I assume.\nIf possible, could you also suggest a site or source code?\n. I found the reason. In the site, view.js:202, there's this code:\njavascript\n$('article section').hover(\n  function() {\n    loadPerfectScrollBar(this);\n  },\n  function() {\n    if(supportsTouch) return;\n    $(this).removeClass('perfect-scrollbar');\n    $(this).perfectScrollbar('destroy');\n  }\n);\nBecause the code destroy the scroll bar, the scrollbar div is removed and surely not displayed.\nHow about initializing perfect-scrollbar once when loading the page instead of loading and destroying continuously?\nOr, you can avoid the problem just like this:\nCreate the function that returns current scrolling status.\njavascript\nvar isInScrolling = function () {\n  return $('article section .ps-scrollbar-y.in-scrolling').length > 0;\n};\nAnd modify the original hover function like this.\njavascript\n$('article section').hover(\n  function() {\n    if (!isInScrolling()) {\n      loadPerfectScrollBar(this);\n    }\n  },\n  function() {\n    if (!isInScrolling()) {\n      if(supportsTouch) return;\n      $(this).removeClass('perfect-scrollbar');\n      $(this).perfectScrollbar('destroy');\n    }\n  }\n);\nThank you!\n. No, I didn't mean that you're rude!\nI'm very sorry if you feel my replies aggressive.\nThank you :)\n. Closed with the commit 38a19c6aa11f147d87c1be05e3e57b03722def2c\n. I may be able to fix the problem with the suggestion from #50.\nThank you!\n. Hi!\nPersonally I think that this feature is somewhat concerned with #29.\nIf there's visible rails for the scrollbars, users can easily think that by clicking the rails, the scrollbar can be moved.\nAnyway, as I know, there's no process on implementing move-on-click feature.\nThanks.\n. The commit 1fa4f8c736becc4435ba4a9676276fc928188949 implements this feature.\n. Hi!\nFirst of all, thank you very much for your suggestion.\nI applied the new formula in the patch ab133278e412956c350157de8f2c68f263f6ed21\nand the scrollbar and scroll position works very well with any size.\nAgain, really really thank you very much.\n. I found a problem. I think I can fix it.\n. 5633da47631f6e472cdd1ec7142c88e5e93ae49c fixed the OS X problem.\n. With my macbook touchpad, horizontal scrolling works well in Windows on Firefox.\nThere's no logic difference between horizontal and vertical scrolling.\nIf anybody has the same problem, please re-open the issue.\nThank you.\n. Thanks!\n. I found the all problems.\nI'll fix it very soon.\nThank you for the report!\n. I've fixed the firefox problem just now. It was a regression error.\nBut it's not simple for the touch devices(In fact, until now the option never worked for the touch devices).\nI'm kinda busy now at work, and I'll look into them when I'm home, about 4-5 hours later.\n. The issue is moved to #60.\n. I just came back from a vacation and I'm kinda busy at work now and don't have much time to look into the plugin.\nBut I'll check this as soon as possible.\nThank you.\n. Hello, I'm very sorry for the late response.\nI think that you may use the source code like this:\n``` html\n\n\n\n  #test {\n    width: 200px;\n    height: 200px;\n    overflow: hidden;\n    margin: 100px auto;\n    position: relative;\n  }\n  \n\n\n\n\n\n\n\n  $(function () {\n    $('#test').perfectScrollbar();\n    $.ajax('test.txt', {\n      dataType: 'text',\n      success: function (text) {\n        $('#test').text(text);\n        $('#test').perfectScrollbar('update');\n      }\n    });\n  });\n  \n\n\n```\nAnd this code makes the plugin broken.\nIt's because the scrollbar elements was originally placed in the #test div, but the ajax callback do $('#test').text(text); and this makes the scrollbar elements removed.\nSo there're two suggestions.\nFirst, wrap the contents with a div and fill the contents in it. The code will be changed like below:\nhtml\n<div id='test'>\n  <div class='contents'>\n  </div>\n</div>\njavascript\n$(function () {\n  $('#test').perfectScrollbar();\n  $.ajax('test.txt', {\n    dataType: 'text',\n    success: function (text) {\n      $('#test .contents').text(text);\n      $('#test').perfectScrollbar('update');\n    }\n  });\n});\nAnd the second suggestion is to initialize the scrollbar after the contents is loaded. The code will be changed like below:\nhtml\n<div id='test'>\n</div>\n``` javascript\n$(function () {\n  $.ajax('test.txt', {\n    dataType: 'text',\n    success: function (text) {\n      $('#test').text(text);\n  $('#test').perfectScrollbar('destroy'); // for the case that there's already one\n  $('#test').perfectScrollbar();\n}\n\n});\n});\n```\nI hope this answer can be a help for you.\nThank you!\n. I just came back from a vacation and I'm kinda busy at work now and don't have much time to look into the plugin.\nBut I'll check this as soon as possible.\nThank you.\n. Hello,\nI'd like to look into the issue, but now I don't have any Windows environment, and have a hard time to fix IE bugs.\nBut I'll try to fix them asap.\n. I'm using OS X and wow, I've no idea about the information.\nThanks. It really helps.\n. Profiled as a bug, #160. Thank you guys!\n. Hi!\nI'm very sorry for the late response.\nThe scrollbar is basically tested in iPad and the feature can be tested with http://noraesae.github.com/perfect-scrollbar.\nIt'll be very helpful to look into the issue if there's any source code or site to test with.\nThanks.\n. The scrollbar works with the offsetTop, offsetLeft and content sizes.\nSurely it'll not work until the element is appended to the body.\nIt'll work after it's appended, I think, but perfectScrollbar('update'); may be needed after.\n. I uploaded a patch to apply this.\nThank you.\n. Hi, @andreu86.\nI'm very sorry for the late response.\nNow I don't have much time to look into the issue, and the problem is not fixed yet and I can't assure when the problem can be fixed.\nAll codes about handling touch event is in bindMobileTouchHandler function of the source, and the scrolling is implemented with the touch event functions. You can check it to fix the problem, but it was not that easy for me to fix it in a few hours.\nI'm very sorry again.\nThanks.\n. Moved to #242, will be merged in a while.\n. Hi, thank you for your praise.\nI think you can use the code below.\njavascript\nvar $container = $('#container')\n$container.perfectScrollbar();\n$container.scroll(function(e) {\n  if($container.scrollTop() === 0) {\n    // top\n  }\n  else if ($container.scrollTop() === $container.prop('scrollHeight') - $container.height()) {\n    // end\n  }\n});\nThanks!\n. Now it's implemented with a commit 8f53eafcc9e56177377daa7dae1369de95d9b719 .\nThank you for the opinion!\n. Seems good!\nThanks.\n. Sounds good! But how about making it optional? Conventionally, the features that is not supported by native scrollbar have been adopted with optional parameters.\nYou can find the example of the optional feature here: #48.\nAnd the min files should not be included. Please remove them from the diff.\nThank you!\n. Seems good!\nAnd for the last one, I'm very sorry but can you add an example code in 'examples' directory?\nThere're example codes for optional parameters to help people know how to use the option.\nThank you.\n. Never mind. I've added an example while refactoring the code :D\nThank you very much!\n. Hi!\nCurrently, the scrollbar is not made to work well with the margin on top or bottom.\nAnd I'm afraid I don't exactly know if it's possible to implement it without changing the source code.\nI'm very sorry and I'll update the issue when there're some ways to do it.\nThanks.\n. @aaaaahaaaaa It's been implemented. Please refer to examples/scrollbars-with-margin.html. In short, just give margin style to scrollbar rails.\nThanks!\n. I've just modified the example as you said like below and it works just fine.\ncss\n.large-margin .ps-scrollbar-y-rail {\n    margin-top: 100px;\n    margin-bottom: 100px;\n    opacity: 0.5;\n    background-color: #eee;\n}\nThe infinite scrolling maybe the different issue. Please check if there is any additional padding/margin/border set in the plugin's components. Ensuring the latest version is used may help too. If you still have the issue, please report the problem with some fiddle or example code as a separated issue.\n. Hi!\nYou can just modify the css file to display the scrollbar persistently.\nJavaScript source code have no dependency for displaying the scrollbar.\nPlease refer to the perfect-scrollbar.css and the opacity properties in the file.\nThanks!\n. Fixed in the late patches.\n. Please check if the container and content's  overflow and position styles, or if perfect-scrollbar.css is included.\nSorry for the (very very) late response.\n. Hi,\nIt's a duplicated issue with #47.\nThank you.\n. db6c0bd968a5e3d3eca8113cc74d0ccc45f989e3 fixes this.\n. The scrollbar is not well-tested for \"body\" and \"html\" element in the page, and it's not a good practice to append a custom plugin to body.\nI suggest that you can create a div that covers the entire page and apply the plugin to the div.\nThank you.\n. Hello,\nFirstly, thank you very much for the contribute.\nI think the patches need to be refactored and also I'll test it with my iPad.\nThank you.\n. 718c297ff39475a1ddeb41ef23652abdb1164780 fixes the problem.\nThanks.\n. Hello,\nThank you for your report and I think it's easy to fix this.\nBut I don't have much time to work on this nowadays.\nI'll try to fix it as soon as possible.\nThanks.\n. Hi,\nI'm very sorry for the late update.\nThis issue is resolved with the commit 9873dedab676ff642a89b428f1796181feeed249, and the patch'll be included in the next version.\nThank you very much for the report!\n. HI,\nYou can change the styles of the scrollbar with just CSS.\nThere's display:none; option in ps-scrollbar-x and ps-scrollbar-y in the CSS file.\nYou can freely change the styles and display the scrollbar as you want without any script changes.\nThank you.\n. Maybe fixed in the latest FF. Works fine.\nThanks\n. Hi,\nI looked into the codes and contents, and it looks really cool.\nI'll merge them after I check the features. I'm kinda busy nowadays and maybe it'll take some days.\nThank you very much!\n. I've tested the patch, and it works very well.\nAlso as I reviewed the codes, there's no problem at first glance.\nThank you very much!\n. Duplicated with #60. Still not fixed... Sorry.\n. Hi!\n77 implements this feature, and the patch'll be applied in the next version.\nBut I've not enough time to test with the patch nowadays.\nI'm very sorry to make you wait for a while, and I'll make a movement as soon as possible.\nThanks!\n. I think it's a little bit out of scope. Really sorry!\n. Hello, thank you for your praise.\nI'm very sorry but there's no way to disable the plugin according to the x-width responsively, and there's no plan to implement the feature yet.\nCurrently, the only way to do the thing is use the window.resize event, I think.\nI'm sorry again.\nThanks\n. Thanks!\n. Hello,\nI think there can be the problem. The update call should be called not when the page is loaded, but the plugin is initialized. And I think the update should be called internally. I'll test and fix it asap.\nThank you for the report :D\n. Hmm..\nI checked the code and it seems that the update call is properly called when the plugin is initialized.\nAnd I can't reproduce the problem you described. Can you provide me a page or a source code to see the problem?\nThey'll be really helpful for me to debug the problem.\nThank you in advance.\n. Hi,\nThe page has no problem in Chrome, but in Firefox the scrollbar doesn't show up when the page is refreshed.\nIs that the problem you means? Then now I can start to debug the problem.\n. Hmm..\nCan you provide more informations to reproduce the problem? I still cannot reproduce it as you said in my Chrome and Firefox(OS X).\nFor example, browser and its version you're using, OS, etc...\nThanks in advance.\n. It seems it's been fixed in Firefox as well, at least in Firefox 37.0a2.\n. Hi,\nThe error is simply a JavaScript exception when the object has no method named that. Please check if you loads the perfect-scrollbar script file properly and call the function for the proper jQuery object.\nWhen you think everything's right, then please provide more informations like\n- Browser, version and OS you use\n- Code snippet\n- The real site where the problem is <- this will be the most helpful information\nThanks.\n. Can you provide the code where the problem occurs?\nIt's hard to find out the reason without any code example.\nThanks in advance.\n. Fixed in 65ae4345c0d53b36329587a9906544ffa8dde3b3.\nThanks\n. Duplicated with #88. I close this.\n. Hello,\nThis looks good, I think. But could you lint the source please? There should be ';' in the end of line 189.\nI'll merge the commit with pleasure when the Travis CI build is passed.\nThanks in advance.\n. Nevermind. I merged this feature with the patch b3348b883ef5c031eb963b465ebc86bec085c8d4\nThanks.\n. This is right. Very sorry and I'll upload the patch soon.\nThanks for the report.\n. It'll be really helpful if you can send me a pull request. I can check and merge it.\n. Moved to #90.\n90 will fix this.\n. Hello,\nEach commit's diff is kinda wrong cause of tabsize problem. If the second commit is for fixing it, I think it should be amended to the first one. But nevermind, I can amend it when merging them.\nBut now I'm not sure it's okay to use $.now() to identify the plugin object. It'll be very nice if there's any api that returns the unique identifier for a specific jQuery object, but I don't have any idea yet.\nAnyway, the patch looks very good. I'll merge it after I have a little more time to think about the patch.\nThanks!\n. Hello,\nThe issue is resolved with the patch 771ed0c32f0d30b228f4aad4f68432ce2ac1ecc4.\nIt implements the function to return a unique event class name.\nBut your report and patch really helps me to do the job. Thank you very much.\n. Hello,\nThank you for the pull request, I'm very sorry but we shouldn't merge this.\nFirst, there's no reset code to set the setting value to false again when the content size is changed and becomes bigger than the container size. Also, I think that changing the settings doesn't make sense. The setting values should be fixed to the values a user set.\nBut I just created a patch inspired by your patch: db6c0bd968a5e3d3eca8113cc74d0ccc45f989e3.\nThis patch fixes the problem.\nThank you again for your help :D\n. If you want to determine the axis, you can use the mousewheel event instead. But yes, you can surely determine the direction with the scroll event, but some tricks should be used to achieve it.\nPlease check this thread: http://stackoverflow.com/questions/4326845/how-can-i-determine-the-direction-of-a-jquery-scroll-event\nThanks.\n. Hello,\nThank you for the report. As you can see in the console, the resources are not loaded properly. The resources are in the branch properly, and I guess there's something wrong in the domain setting. I reset the domain settings not to use the custom domain address for github pages. Currently it's under the adjustment and it'll work well soon.\nIf there's any problem again, please let me know.\nThanks!\n. Fixed with #252!\n. Looks good. Thanks!\n. Hello,\nI went to the link sent with email and tested it, and it works well in Chrome and Safari, but doesn't work in Firefox.\nI've googled it for a while, and found an answer that in Firefox iframe consumes the mousewheel event.\nWhen the iframe document has a same origin with the parent, you can force the event to be propagated to the parent. But when it's not, I think you may have to find another way.\nThere're some web documents I found:\nhttp://stackoverflow.com/questions/14065677/retrigger-mousewheel-events-from-iframe\nhttps://github.com/brandonaaron/jquery-mousewheel/issues/40\nThanks. \n. Merged to #210.\n. Thanks!\n. Hello,\nI'm very sorry for the late response.\nIt looks good, and can you add a document into the README file about the option please?\nWhen you add the document and upload with a pull request again, I'll merge them all at once.\nThanks!\n. I recently fixed up some commits and it makes the commit tree messed. I manually cherry-picked your patch.\nI also added the description to README.md.\nThanks!\n. Right. This should be applied!\nThanks :D\n. Hello,\nThe plugin is not well-tested with the iframe, and there can be problems when using with it.\nEspecially, the event handling for the iframe varies with the browsers, and it may cause the problem.\nI'll keep debugging with the problem, and when the problem solved, I'll let you know.\nI'm very sorry and thank you.\n. Refer to #98 for Firefox scrolling problem.\n. Merged to #210.\n. Sorry for a (very) late response here!\nShould use overflow:hidden. And I'm not sure how the tab works, but if the tab is filled with the content dynamically, you should call perfectScrollbar('update') after the content is updated.\nThanks\n. Closed for the inactivity.\n. Looks good. Thanks!\n. Sorry for a (very) late response...\nI guess it's because you update the content after the scrollbar is initialised. If you call .perfectScrollbar('update') after the content is fully loaded, it will be fixed.\nThanks\n. Hello,\nIt'll now works when the left is used for the vertical scrollbar.\nThe right style is continuously changed during scrolling horizontally, and if left style is set they'll be conflicted.\nUntil now, there's no other way to use the vertical scrollbar with left-floated.\nI'm very sorry.\nThanks.\n. Hello,\nAnd yes, the library doesn't add overflow: hidden to the container element automatically.\nAs it's written in the document, I recommend that users add it by themselves, because I don't want to add literally any CSS in the original element.\nIt can be a burden for the case you suggested. I'm very sorry.\nI'll be very happy if you can understand the plugin's very base policy.\nThanks.\n. As you can find in examples/reach-the-end-callback.html, in fact without an additional event, we can implement this. But I've got quite many requests for this feature, so someday I'll consider it.\nThanks.\n. Hello,\nThank you for the patch, but the patch removes trailing spaces.\nIn Markdown format, 2 trailing spaces mean a line break, and shouldn't be removed.\nWhen you fix them, I'll merge the patch.\n. Hello,\nThanks for the patch, but the 'version bump' commit is unnecessary.\nWhen you remove the patch from the pull request, I'll merge it with pleasure.\nThanks.\n. I think it's a kind of Chrome bug. It works well with Safari, and it also works well with Chrome when it's not on retina display. In conclusion, the bug occurs when it's retina display and Chrome in OS X.\nAnd especially, the bug may be related to transition effect of the scrollbar. When I disable -webkit-transition and transition CSS styles in .ps-scrollbar-x-rail and .ps-scrollbar-y-rail, it works well without any script change.\nI label this as a 'Bug' and will keep watching. For the instant fix, please disable the CSS styles.\nI'm sorry and thanks for the report.\n. Thanks!\nI recently fixed up some commits and it makes the commit tree messed. I manually cherry-picked your patch.\n. Hello, the reason for the previous patch is that the scrolling is abnormally fast without the delta divided with 10 in OS X Chrome. I think there're something wrong with Macbook Trackpad in jquery-mousewheel. I didn't notice that the change makes the scrolling slow in other environments. I'm sorry.\nI consider to make the plugin independent of jquery-mousewheel, but don't have much time to work it. I'll try to do it asap.\nThank you.\n. includePadding would fix this issue. Thanks.\n. Actually, it's not a node module and inappropriate to be released through npm.\nInstead of it, I highly recommend using bower, which is a front-end package management tool.\nThanks.\n. Thank you for your understanding! I'll seriously consider it.\nThanks\n. Finally it's on npm, as it's recommended by jQuery registering it as a npm package.\nSorry guys for the late update.\nCheers,\n. Profiled as a bug, #160. Thank you guys!\n. I changed some contents.\nFirst, while looking the code, I felt a little weird for wheelSpeed applied to the keyboard scrolling. I changed keyboard scrolling not to use the wheelSpeed.\nSecond, if the default wheelSpeed is changed, backward compatibility problem can occur for the users who upgrade to the upcoming version. So I reverted the patch and decide not to change the default wheelSpeed.\nThe patches will be applied soon with some tests.\nThanks.\n. Merged.\n. Hello,\nI think that the div is originally hidden and so the scrollbar size is initialized with 0.\nIf you call the update function $('...').perfectScrollbar('update'); right after the div is shown, it may display the right size of the scrollbars.\nThanks.\n. jQuery slideToggle() is an async function and if you want to do something after the element is fully toggled you should use a callback function. Just calling the update function in the next line of the statement doesn't help.\nAs you can see here: https://api.jquery.com/slideToggle/, there's a complete parameter. It's callback to do something when the toggle is completed. So, you should do like this:\njavascript\n$(\".more-list\").slideToggle(200, function () {\n  $('#scroll').perfectScrollbar('update');\n});\nThanks :D\n. I'm happy to help you.\nThanks!\n. It really makes sense.\nI've just read the document about the problem and uploaded the patch that change the strict mode for function scopes. It'll be applied in the next version.\nThank you very much for your information!\n. I'm sorry for the late response.\nFor now, there's no way to achieve this. I'm sorry. But you can refer to minScrollbarLength option and implement this by yourself. For sure, I'll also consider implementing this feature as well.\nThank you for your opinion.\n. Now implemented with maxScrollbarLength. Thanks.\n. Hi there, sorry for a late response.\nActually, perfect-scrollbar is not designed to work in focusable elements now, to prevent some issues with them. I'm very sorry but I'm not sure when it can be fixed, or whether it would be fixed in the close future, but maybe sometime.\nSorry for it, and thank you very much for your interest.\n. @MathieuLorber Actually, it's a bit different issue, and the plugin does check if the current element is focusable or not. So the problem shouldn't occur after this fix #104. I've just tested it as well, but it doesn't happen in the latest Chrome, Safari and Firefox in OS X.\nWould you please check the plugin version? If it's the latest one and still has the problem, please provide the browser information and help me reproduce the problem with some example codes in order to fix it.\nCheers\n. Thanks!\n. #131 fixed this.\nThank you for the report.\n. I've emailed you with an interesting fact I just found.\nIt's an issue with kinda private page, so I'll close the issue and communicate with email.\nThank you.\n. I'm not sure if this's still an issue, but it'll be exposed as a separated file in the next version, #277. Sorry for the late response.\nThanks,\n. You should update the scrollbar after you change the geometries of the container. Please call .perfectScrollbar('update') at the container when the geometries are updated.\nThanks\n. What means with 'on page load'?\nIf you means the page load event handler, You can simply do it like this:\njavascript\n$(function () {\n  $('some selectors').perfectScrollbar();\n});\n. I guess it's a same case as #203. Please refer to the answer of mine.\n. Correct. Thanks!\n. Yes, this patch should be applied.\nThank you!\n. 59ccf07b66064a6b062ea40eaf20b18d6f0b2d91.\nThank you guys!\n. Very sorry that there has been no update on this thread. It may have been a timing issue, so the update call should be done after the animation finished.\n. Hello, it's basically in the commit logs.\nIn the commits for releases, there're some summaries of which these releases cover. But it can be not as specific as you expect. For sure, You can just check the commits from 0.4.6 release, and the commit logs may contain enough informations for you.\nI can consider to create a filed changelog at sometime but don't have plan for now.\nThanks.\n. Hmm.. I agree with the basic concept.\nOkay, I'll consider working on this. But I'll be really happy if you can upload a pull request for me, because recently I don't have enough time to work on this and I can't be sure how it will take to implement this.\nAnyway, thank you very much for your opinion.\n. Closed for the inactivity. I'll open it when I implement the option.\nThanks\n. The plugin is not well-tested with iframe element because of the element's specialty.\nEspecially, the event handling for the iframe varies with the browsers, and it may cause the problem.\nI'll keep debugging with the problem, and when the problem solved, I'll let you know.\nI'm very sorry and thank you.\n. Merged to #210.\n. You can do this by changing the css without any script change.\nIt's a bit changed now but you can refer to the issue #27 \nThanks.\n. I'm very sorry but I don't want to have something about CSS style in the script. I think that they should be separated however the implementation is very simple. It's not about functionality, but about design pattern.\nI'm sorry again and thank you very much for your interest in my plugin.\n. Thank you for your kindness :)\n. Hi,\nSorry for the incorrect information. Actually it's nothing to do with the display css. Instead, please change every reference of opacity: 0 to opacity: 0.6.\nAlso, in the development version, The stylesheet source is changed to use scss. There's an instruction about the problem for the new source in FAQ.\nThanks.\n. @kpturner If two scrollbars should be shown differently, I think it'd be better to have different CSS styles for each container. I'll update the FAQ and add information to achieve this more easily.\nThanks!\n. @kpturner I've just updated FAQ and add some information. I also added an example code, always-visible.html, in a examples directory to help users understand how it works. I hope it could help you.\nThanks.\n. Thank you very much for your work!\nBut I'm very sorry but you should lint your code before I merge them. About linting the code, please refer to Contributing document. And I think isRtl is more suitable for the variable name than just rtl.\nI merged the README typo fix and you don't need to include it in pull request.\nThank you.\n. You can squash commits with git rebase -i command or git commit --amend.\nBtw, I just checked your patches and I think the patches make the y-axis scrollbar attached to left. We should be careful about this action, because I already have a plan to implement a left-aligned y-axis scrollbar or top-aligned x-axis scrollbar. This feature has been asked several times.\nIt may take for a while to merge this, but it'll be merged asap.\nThanks.\n. Merged with 14d253abd1003f7bf4b29480d8a545ce3501c048. Thanks!\n. Maybe similar issue with #143. Any code example or jsfiddle for this?\nThanks in advance\n. Please refer to #203.\n. Hmm.. without any code example, it's difficult for me to debug the reason.\nMaybe any website or jsfiddle to reproduce the issue?\nI'm thinking it's timing issue of calling the update function but can't be sure without any code example.\n. I checked the site and when you call the update function manually, the scroll bars appear.\njavascript\nsetTimeout(function() {\n  $('.scroller').perfectScrollbar('update');\n}, 10000);\nSo, now I'm sure that it's timing issue. I don't have much idea about Angular, but with only <perfect-scrollbar class=\"scroller\" wheel-propagation=\"false\" wheel-speed=\"10\">, it's initialised earlier than the images. Is there any callback which can be called after every image is loaded in Angular?\nOr you can just add this line though it's a little dirty way.\njavascript\n$('img').ready(function () {\n  $('.scroller').perfectScrollbar('update');\n});\nThanks.\n. Just changing the CSS cannot make the scrollbar works at left position.\nIn fact, under current implementation, there's no way to achieve it, and no plan to implement it.\nIf your container width is fixed, just change the right CSS value to place the scrollbar where you want.\nI'm so sorry but it may be implemented later.\n. It's only when you don't use x-axis scrolling. If you don't use, it's enough.\nBut if you use x-axis scrolling, they'll be conflicted because the handler will try to overwrite the right CSS.\n. Implemented with f93d8bf4da7ff4f9cfa7bc78a235ff525476c64a!\nThank you.\n. For sure. Just call $('...').perfectScrollbar('update'); when the content div is resized.\n. Fixed with e6590da884e246046a78edcabf60c3d200ef5e46.\n. Closed for the several fixes have been applied to the calculation logic, and not sure if it's still an issue.\nPlease feel free to reopen.\n. Thank you very much, but it's been a while and the plugin's structure's changed quite much so far. However, I'll really look into this when implementing middle click scrolling. So I'll close it for a while.\nCheers!\n. For sure, you can!\nPlease refer here: http://jsfiddle.net/D4rvk/2/\n. Sounds right. I'll fix this later.\nThank you!\n. Merged. Great work!\n. Thanks!\n. Hello,\nYou can refer to #27 and #139.\nThank you.\n. In my environment, the example page works well with Firefox 29.0.1 in OS X.\nCan you provide a specific page or the environment you use?\n. Good to hear that!\nThanks!\n. If you mean the speed, you can change it with an option. Concerned with velocity, I'm afraid there's still no way to change it. However, this plugin uses the value itself from the browser, and I think it's pretty out of scope to modify the value by the plugin itself.\nSorry, and thank you for your interest!\n. Recently, I've worked on the independent mouse wheel scrolling, without the help from a 3rd party module, jquery-mousewheel. I hope this could help. If you don't bother trying, pls test with it in advance here #197.\nThanks\n. Nice point, must be useful. However, nowadays I really don't have enough time to look into this plugin much. This mustn't be difficult for anybody to implement, and every PR would be welcomed.\nFor a quick workaround, you can just .perfectScrollbar('destroy') before clearing the content and .perfectScrollbar() again.\nThanks\n. Fixed with 2930041597fa5847414cef0fc63a36c3374ab9de.\nCheers,\n. Looks reasonable.\nBefore I merge this patch, could you make the patch into just one commit, and exclude the min files in your commit?\nThanks.\n. You may be able to see this everywhere using the plugin, as I heard, so you can try examples in repo.\n. Hiya,\nI'm really sorry for the inconvenience here. Because of my shortage of environment and time, the process hasn't be done quickly so far. I'll try to do it asap. Any help will be really appreciated.\nCheers,\n. Thanks for @larvanitis's suggestion, I've installed IE VM. Now this issue is the highest priority, and I'm working on it. It's kinda tricky and I'm not sure if I can fix it very quickly, but I'll do my best.\nCheers guys!\n. Okay guys, I narrowed down the reason. Please refer to the following fiddle.\nhttp://jsfiddle.net/js5hwjjt/\nAs you can see in the script, we change scrollTop and top properties at the same time. It means, the red square shouldn't blink, because both properties are updated in the same event cycle. As expected, in many major browsers such as Chrome, Safari or FF, it doesn't blink.\nBut well, in IE, it blinks, which eventually means that IE doesn't update the window completely during a JS context. It is nothing but a wrong behaviour of the browser itself.\nAnyway, to fix the issue, we should modify the whole update logic of the plugin, as IE is totally broken in such a simple example. I'm sorry to frustrate you guys, but it may take longer than I thought it would.\nCheers \ud83d\ude02\n. Actually I've once thought about it. But what if the container moves out of\nthe display? Because it's fixed position, the scrollbar will remain in the\nsame position. So I thought it wasn't a good solution and abandoned it.\nThe other thought is, as you said, remove the scrollbars from the container\nand append them just next to it, but use the other positionings to place\nthem in the same position as they currently display.\nAnyway, it looks quite obvious that to fix the IE issue, we need to rethink\nhow the scrollbar works :(\nOn Saturday, April 11, 2015, DanielApt notifications@github.com wrote:\n\nOk, so here's a solution for Issue 1: don't position the scrollbar\ninside the element.\nThat would mean that\u2014gasp\u2014we'd use fixed positioning to address it.\nI've only been testing it with mousewheel, but it's looking promising so\nfar.\n@noraesae https://github.com/noraesae have you in the past explored\nusing fixed positioning? What were your reasons for doing it / not doing it?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/noraesae/perfect-scrollbar/issues/160#issuecomment-91593570\n.\n. Wow, it looks promising. I'll definitely try it, but I may take a rest today as it's 1.30am here :crescent_moon: \nGreat work!\n. I've just tested and it looks like the best idea to resolve this issue. We may also be able to make the logic even simpler using the rect information.\n. I've actually noticed the solution before, but there are some reasons I cannot accept this way of change.\n1. It modifies the original DOM. What if there's a selector like content>h1 used in a user's code? Actually, it's not a big deal if we can inform the user to take the change into account. Nevertheless, I'm afraid I'd like to make the plugin not to modify the original DOM structure.\n2. I'd not like to use top and left positioning to scroll the element. I'd like to use the native scrollTop and scrollLeft. It's kind of the main goal of the plugin, so i'm really sorry, but I can't accept this change.\n\nHowever, I've just come up with an idea that, how about using the fixed positioning, but only for IE? Or we may be able to come up with another idea which we can just apply for IEs. I think it's too much to modify the original code base so much only to support IEs.\nAnyway, I really appreciate your work. If you have something to discuss, please feel free to tell me :+1: \n. BTW, I've merged .editorconfig. Thanks!\n. I'd like to conclude this issue as it's resolved in Edge. I guess the answers suggested in this thread are helpful to address the issue, and users can even use other plugins for old IEs. Therefore, I label this issue wontfix. You can surely discuss further and suggest other solutions, though.\n. I think the feature is added with a patch, 87bbe8a03b73f89f49b3e4af8ddfa47ff2b18cfd.\nAs I checked now with the newest version, it doesn't happen.\nWhich version are you using in your project?\n. Currently, RTL is only considered for Chrome, with this patch: f058c76.\nFor sure, I'd like to support it fully in the future, but I'm sorry but nowadays I don't have enough time to investigate RTL and implement it.\nYou may expect the feature in later releases, or I'll be very appreciated if you can contribute the feature.\nSorry again, and thank you for your interest in my plugin.\n. Hi there,\nFirst of all, sorry for the late reply.\nIn fact, it's not well tested for each of jQuery version, but the project was started with jQuery 1.x versions, so I think there would be no problem with jQuery 1.10.x.\nIf there's any problem, please let me know.\nThank you for the report. I'll fix the text in bower.json.\n. Yes, actually it's not working for the touch event. Trying to find a good solution, but I'm sorry but nowadays I can't pay much attention to this plugin because of other works.\nSorry again, and you may expect this in the later version.\nIssue closed, duplicated with #60.\n. If there's any update with any fiddle or more information, please feel free to ask me. The issue won't be closed for a while.\n. I'd like to accept the ctrl+home and ctrl+end event first, because it makes sense. And about ctrl+mousewheel, I think there's other way instead of destroying the plugin.\nCould you make this PR only for the ctrl+key feature with just ONE commit, amending a lint commit, and upload a separated PR for zooming?\nThanks.\n. I couldn't find your original repo, so I rewrote it by myself.\nThe patch's been applied, 1b1195288bab3cd49356e36568bbc00acc279180.\nThanks.\n. Similar issue with #201. It would be fixed very soon!\n. Fixed with 1a84416365a9ef1e8cc7310a4c6b732f83c6bec1. It will be released with a new version soon.\nThanks\n. Yes, as provided in the replies, you can just add !important CSS or just change the perfect-scrollbar.css file to make it.\nThanks.\n. Thanks guys.\n. I guess it's a timing issue, so calling .perfectScrollbar('update') after the content is fully loaded would fix the problem, I suppose.\nUnless, I'm afraid I need an example page or source code to check the problem.\nThanks\n. It must be a issue of CSS priority. You may need !important or change them in perfect-scrollbar.css directly.\nThanks\n. Patch merged. Thanks!\n. Merged manually to add a commit message and squash them into one commit.\nThanks!\n. Merged. Thanks!\n. Merged manually because there was a trailing space.\nThanks!\n. Duplicated with #159. Anyway, thank you very much for your support!\nYou can find the feature in the latest version soon.\n. Yes, for sure you can. Just use jQuery scrollTop and scrollLeft functions, and call .perfectScrollbar('update'); after changing scroll values.\nIf you want to make the scrollbar reach the ends, just give scrollTop with 0 or height of the content.\nThanks.\n. Pls refer to the wheelPropagation optional parameter. It would help, though it's not yet supported in touch devices.\nThanks\n. I also can feel this, but scrolling is totally dependent on the jquery-mousewheel plugin and I use the value it returns. I'm thinking on moving from the plugin to another option, but actually don't have enough time to implement it.\nSorry for the issue!\n. Will be fixed with a new mousewheel handling.\nPlease refer to #197.\nThanks.\n. There's no better way except for your way to do that.\nSorry, and thank you for your interest.\n. Please refer to #175.\nThanks.\n. Thanks!\n. There'd be no problem though it's fixed or not. Can I have an example page or source code to look into?\n. Hi,\nSorry for a late response. As you mentioned, I'm afraid it's too complexed and specific. I'd recommend you use it in your private fork. I'm very sorry I can't merge it.\nI'm sorry again and appreciated for your interest in this plugin.\nThanks.\n. You can manually call $('...').perfectScrollbar('update'); function to update the bar size and position.\nIf you want to handle the scrolling event, you also can just use the original scroll event.\nThanks!\n. 1. I'll work on this\n2. Not true. Even though it's overflow: hidden, if scrollLeft or scrollTop is changed by any reason such as JavaScript, browser find and etc, the scroll event is fired.\nThanks\n. Fixed with b3fe5d4bbf1437d0beb43152e625aa42b629936b\nThanks\n. Hi,\nIt's quite possible, but a bit tricky. Now in CSS, we handle :hover pseudo class to show the scrollbar. You can change it as you want, and should directly handle it with JavaScript. You may want to handle mousemove or scroll event of the container.\n``` javascript\nvar removeClassTimer;\n$('...').mousemove(function () {\n  var thisObj = $(this);\n  thisObj.addClass('scrolling');\n// To remove class after scrolling\n  clearTimeout(removeClassTimer);\n  removeClassTimer = setTimeout(function () { thisObj.removeClass('scrolling'); }, 500);\n});\n// OR\nvar removeClassTimer;\n$('...').scroll(function () {\n  var thisObj = $(this);\n  thisObj.addClass('scrolling');\n// To remove class after scrolling\n  clearTimeout(removeClassTimer);\n  removeClassTimer = setTimeout(function () { thisObj.removeClass('scrolling'); }, 500);\n});\n```\ncss\n/* remove this style */\n.ps-container:hover .ps-scrollbar-x-rail { ... }\n/* add this style */\n.ps-container.scrolling .ps-scrollbar-x-rail { ... }\n. For me, it works just fine. Mine is the newest, 31.0 on OS X. I tested with this page. I'm afraid the problem is because of difference in version or conflict with something.\nCould you provide more information about the problem?\n. Closed for the inactivity.\nPlease feel free to reopen.\n. Do you mean some design varieties? I'd consider making several versions of CSS.\n. Closed for the time being. I'll keep considering to add additional styles, though.\n. There's no public way to achieve it, but you can just detach the click and move event as a workaround. Just add lines like below when they're needed.\njavascript\n$('#your-container-id .ps-scrollbar-x-rail').unbind('click');\n$('#your-container-id .ps-scrollbar-y-rail').unbind('click');\n$('#your-container-id .ps-scrollbar-x').unbind('mousedown');\n$('#your-container-id .ps-scrollbar-y').unbind('mousedown');\n. Thanks!\n. Just fixed the Firefox problem you pointed out with 549fe7e6cb5cd801b494b857a639fb0f3ef1a268!\nFinally the patch is released as a stable release. Now the plugin's independent of jquery-mousewheel!\n\n. Maybe related to #98 and #210.  Basically Firefox doesn't propagate the wheel event from iframe to its container, according to this bugzilla thread. It seems that they don't have any plan to update in the near future. Now sure if the plugin should handle this as it's quite tricky to implement what a browser doesn't support natively.\nSorry for the inconvenience and the late response.\n. Now just hide rails if they're suppressed.\nThanks anyway.\n. Hi there, I will work on this and it wouldn't take so long, I suppose.\nThanks\n. Fixed with 1a84416365a9ef1e8cc7310a4c6b732f83c6bec1. It will be released with a new version soon.\nThanks\n. I just tested on Firefox 31 OS X and works fine on examples and gh-pages.\nCan you provide a more specific case to reproduce the problem?\n. Or I guess you don't include jquery-mousewheel with it. In stable releases, this plugin uses jquery-mousewheel to handle mousewheel event.\n. Recently, there's been several fixes on mousewheel. Pls check the problem with a new stable release, 0.5.1.\nMany thanks\n. What do you mean with turn on at once? The plugin is initialised when you call .perfectScrollbar(), not at the beginning of scroll.\n. I guess it's because the content size is changed after the plugin is initialised, mainly because of asynchronous load of the content.\nWhen the plugin is initialised, it tries to find the width and height of the container and decide the size of scrollbars. Whenever scrolling, it also re-decide the size. However, the plugin can't detect a change of the content(actually it can, with some non-standard way or just checking in every short duration, which will hurts performance and i don't want), so it provides .perfectScrollbar('update'); to update the size manually whenever needed.\nSo, if you can find the line where the content is filled asynchronously, just call .perfectScrollbar('update'); after it's filled.\n. If then, FAQ may help the problem.\n. Can I have some source code or an example page to test it out? It's pretty difficult to reproduce the situation only with your explain.\nThanks\n. Recently I've found a bug in the RTL support in Chrome, and fixed it. It'll be applied in the next version. If you find the problem again, please feel free to let me know.\nCheers,\n. Manually merged with 6ac02fae2be743d5ab4744d12b4b386e8af3d44e and 467cdb17ed8015e3206a95816fa09506abcf9fb7.\nThanks!\n. Cannot be merged anymore. Sorry I couldn't take care for a while.\nFor the time being, I'll close the PR. Please feel free to reopen it.\n. Hiya,\nThanks for the report and sorry for the late response. In the next refactored version, #277, $.css isn't used and is replaced with a native method, so I guess the problem will be fixed along with the change. If there's any further problem, feel free to tell me again.\nCheers,\n. Hi there,\nThank you very much for your praise to this plugin. However, I'm afraid it would be out of scope of this plugin, cause it would make the plugin a little bit complicated, I suppose. I'm really sorry but if it's needed, it would be better to make a own clone of this plugin.\nSorry, and thank you again.\n. Thanks a lot :D\n. The patch #205 is merged. If there's no more bug report for a while, I will close this issue.\n. I've just updated. Sorry!\n. Hi there,\nI've just tested out and it works fine in Firefox 32.0.2 OS X 10.10. Can you check if it works well in examples/options-suppressScrollAxis.html?\nOr pls check if the container has overflow: hidden;.\nThanks\n. Hi there,\nI'm pretty sure that it's none of OS issue. I currently have no idea, and I'll investigate about it.\nThanks.\n. Hi guys, I could reproduce the problem! Sorry for making you wait. The problem's been fixed, specifically with this path c1b40168f67557beeed44983ed307f77e2a65098.\nWith a new release, the problem won't occur.\nThanks.\n. Manually merged, 0022bd559552a01304a566454ac59d275597a9c0.\nI modified the patch a bit to use the link instead of html code, as I wouldn't want README.md to be updated every time I bump up the version. However, I appreciate a lot for the idea.\nThanks!\n. I think CDN info in GH pages is currently not needed, as we've added it in README.\nIf I include install section in GH pages, I will move all of its options together from README, maybe in the future.\nThanks anyway!\n. Hi there,\nFirst of all, thank you so much for your interest on the plugin. It really helps me to move on.\nHowever, I'm afraid there's no fixed plan to support this kind of feature. I've asked to add the similar feature to this, maybe once or twice, but I think it's a little bit out of scope of the plugin's goal, a minimum and native-like scrolling.\nI'm very sorry again, but you could always fork and modify the plugin as you want. For ever will any pull request be welcomed as well.\nSorry again, and thank you for your kindness in advance.\n. Hi there\nYou should specify position: relative; for the #content div. As I tested it out, you may also need to add the includePadding option when initialising the scrollbar, since your container has padding, like below.\njavascript\n$('#content').perfectScrollbar({wheelSpeed: 20, includePadding: true});\nYou don't need to specify wheelPropagation: false as it's false by default.\nI've checked it works well with the fixes, so I'm closing the issue. If you have any further problem, pls feel free to let me know.\nCheers\n. Thanks a lot!\n. Hi,\nImplemented with d0b97e403921de9281b2c15e95656fdc29db168d, and will be release as a new version!\n. I really appreciate your contribution! It looks perfect. I'll test it out and merge it in a while.\nCheers\n. Merged. Thanks!\n. Hi,\nActually, destroy-and-init and update do the quite same thing, except for subtle processes to initialise the plugin but nothing about positioning, so I also wonder what makes the problem. I'll appreciate if you will provide some example page or code to reproduce it.\nThanks in advance.\n. Hmm... I've just checked the fiddle and yes, it works fine. Then I think it can be a timing issue. I suggest checking if the update function is called after the content is updated.\nThe update function is called when it's being scrolled by mouse wheel. So if it's updated well when scrolling, as you mentioned, it means that update function works fine.\n. First of all, jumping to the top is caused by psc.scrollTop(0); line. Not a problem of the plugin itself. Anyway, I also see the problem. I'll look into it.\n. I found that the script included in the fiddle is quite old. I've just released a new version with some regression bug fixes, so please try it again with the new version. I also added an example which do the exactly same thing with yours, and I saw it worked fine. Please refer to it as well.\nFeel free to let me know about the result. Thanks.\n. I'm afraid I'm particularly not sure. I just guessed it was because of the problem that when updating the geometry, the remaining scrollbar affect geometry values. Following commits are all about the problem.\nc1b40168f67557beeed44983ed307f77e2a65098\nf099448e4451007f2581c4bdd36c14f279a30041\n1849e64122cc9e77eb27c6e907b44b638c1bca4b\nThe problem was once resolved, but recently there was a regression bug of it, so I fixed the bug again. Then I added the removable-list-element example, tested it out and it worked fine.\n. Hi,\nUpdating the window size doesn't directly mean the container's geometries are changed, because the container could be just an inner div, not the full-window or body-like container. Thus I would leave it as user's decision. As it can be done with one-line code as you suggested, I think it'd be better to add it when needed than to include the update in the plugin itself.\nAnyway, I really appreciate you for your interest :)\nCheers,\n. One more information which could be helpful for you:\nAbsolute positioning doesn't mean that the element position is bound to window, but to the closest ancestor element which is positioned. That's why updating the window size doesn't mean the change of the container's geometries.\nPlease refer to this document for further information about CSS positioning.\nThanks :D\n. The patch's been manually merged, e6590da884e246046a78edcabf60c3d200ef5e46.\nI found that the patch reuse the code in mobile touch handler, so I just implemented the feature in it.\nDespite modification by me, I really appreciate you for your idea.\nThanks\n. Hi,\nFirst of all, I'm very sorry for the late response. Unfortunately, I don't have any device to test this at the moment. I'm very happy to accept pull requests from developers who have different environments. If possible, please help me to make this plugin consistent in other environments.\nFor sure, when I have a change, I'll also investigate it.\nCheers,\n. I guess this should be redirected to #255.\nClosed.\n. Fixed with 65869821c1f14febf42e935aecaa3e59e16b0819.\n. Hi,\nThank you very much for the PR. However, I'd just go with > CSS selector. The problem's been just resolved with 65869821c1f14febf42e935aecaa3e59e16b0819.\nCheers,\n. Hi there,\nFirst of all, sorry for the late response.\nI modified README because the plugin started to use > selectors in CSS, which are not supported in old IEs<=8,  to fix a malfunction for nested perfect-scrollbar containers. As you can see in the commit log, the patch was uploaded on the same day as the commit you mentioned was uploaded. It was not intended to ignore this issue :sweat_smile:. I'm sorry for the unfortunate coincidence.\nI guess if > selectors in CSS are removed, it may possibly work in IE8, but I'm really not sure as it's not been tested for a long time.\nSorry again for the inconvenience.\nThank you.\n. Hi there,\nI'm very sorry but I don't have any Windows Phone device, which means no way to test it out. It will be fixed asap, but I'm really not sure when. Every contribution will be welcomed about this issue. When possible, I'll look into this as well.\nThanks for your report.\nCheers,\n. There comes a patch about MS touch devices, d6bd30f2daf677d1d56541df784654e47ab86087.\nWill close now, but feel free to reopen.\n. I actually think this is a better approach. Can you lint the source code a little bit to pass Travis CI? You can find some instructions for that here.\nThanks.\n. Cool. I'll look into it and test it out. Unless there's any problem, I'll merge it. Thanks!\n. I would say this is an awesome patch. Merged manually with 05b20f45efbd3206814b9a1eed610380f7de9436.\nThanks!\n. Thanks!\n. 7dd633596503a691d56e58826d405f771c5f5c99 fixed the problem. Thanks!\n. Sorry for that. I look over the fact that there could be no targetTouches for IE mousepointer event.\n7dd633596503a691d56e58826d405f771c5f5c99 fixed the problem.\nThanks.\n. Hi,\nCurrently there's no event like this. You may be able to compare the content size and container size to tell if the scrollbar is needed or not. I will consider adding this, but now there's no plan yet.\nThanks,\n. There's the minScrollbarLength option which specify the minimum length of scrollbar's thumbs.\nCheers,\n. Sorry for the problem. It was my mistake what caused this issue. It's patched with 967c30a5e49822235caa2fe93bb9fc5418bf6fd6 and will be fine in the next version. The next version will be released in a while.\nThanks!\n. It's a good touch. Thank you for sharing.\nCheers,\n. Thank you very much for your work, but I've also added .scss in the project today. However, I'm not a pro of SCSS, so there may be some lines to modify. Please help me to improve it with your version :)\nThanks again.\n. Thanks.\n. Hi,\nPlease change every reference of opacity: 0 to opacity: 0.6.\nAlso, in the development version, The stylesheet source is changed to use scss. There's an instruction about the problem for the new source in FAQ.\nThanks.\n. Fixed with aa92487ed397a32096e03385b6c5c1ac30e8b113.\nThanks!\n. Good to hear that! :)\n. Such a nice work. I can't appreciate you enough.\nIt's been merged manually with 931be2563595758ada9427d75edb08661a013a48.\n. Sorry for the bug label things :D\nYes, I once noticed this problem and must have been fixed with 967c30a5e49822235caa2fe93bb9fc5418bf6fd6. Can you check if you're using a version later than that commit?\nCheers,\n. Good to hear it works. Clicking the star button upon this page will increase the star count. I should admit that the number really makes me happy :)\nCheers,\n. Actually, there is an option to set this, even though it can't set the min length of scrollbar-x and -y separately. Please refer to the minScrollbarLength option in README.md.\nThanks.\n. Cause the appearance doesn't depend on the script, you can do this by simply modifying CSS. Please refer to FAQ.\nThanks.\n. It should work without each, as @mhulse said, because the plugin call the each internally. Which version are you using?\n. Closed, as it seems resolved for the time being.\nCheers,\n. I found the problem. The problem is that even though a dropdown is open, a scroll event is propagated into a container.\nThere's no way to check if a dropdown is open for a select element. I know there's a :focus selector to check if it's focused, but :focus doesn't mean that the dropdown is open, because it can be focused even though the dropdown is closed. So, I'm a bit confused about how to resolve this problem.\nAnyway, I made a quick temporary fix for only FF and IE.\n. First of all, sorry for the late response. I guess it's a timing issue of calculating the geometries of the container, but I'm not sure as the example seems not working anymore.\nIf possible, please specify the situation, or provide the example again? I'll leave the issue for a while.\nThanks.\n. Closed for the inactivity. Feel free to reopen.\n. Hmm, actually not sure how it happens, but guess that it's possible to happen. Anyway, if I can have an example to reproduce the problem, it would really help me narrow down the reason.\nAnyway, very sorry for the late response.\n. Will close for the inactivity. Please feel free to reopen.\n. #251 merged. Thank you!\n. I didn't notice int in JavaScript can cause a problem. Thanks.\n. Works like a charm.\nThank you very much!\n. scrollHeight is DOM elements' basic property and it may not have a problem. Please check the container and contents' position and overflow styles. Some code example may help me find the reason.\nThanks.\n. Closed for the inactivity.\n. The plugin structure's changed quite a lot, so the patch can't be merged. I also think that there's already a wheelPropagation option, and it's too much to add another option to disable the propagation, even though it can cover additional cases.\nSorry I couldn't take care nowadays and thank you very much for your PR.\nCheers,\n. Hiya,\nI'm afraid I've no android device and so no way to test it, but I've just tried removing the performance-critical part of the touch handler. Here is the code:\nhttps://github.com/noraesae/perfect-scrollbar/tree/simplify-touch-handler\nI'd appreciate if you test it out and check if it helps reducing the issue in the native android browser.\nCheers,\n. Closed for inactivity.\nThanks.\n. If you'd like to use it for <table> element, because table is not a proper container element, you may need to add a div wrapper. If you'd like to use it for <td>, I think you can use it as usual.\nThanks.\n. As I said, tbody and table are not typical container elements, and I can't change the fact as it's a browser behaviour. But you may find many answers to make it scroll, changing their display style. For example, this. It means, if you add display: block, you can make it work. I've added an example for table content, so if still interested, please check it out.\nCheers,\n. Hi,\nI'm afraid there's no way to do this, and there's no plan to implement this, as I think it's a little bit too much for this plugin. But anyway you can freely fork the project and implement it by yourself. I guess it wouldn't be so difficult.\nSorry for your inconvenience and thank you for your interest.\nCheers\n. Hi,\nI think this feature should be up to users. Even though detectmobilebrowsers.js could be helpful, it should also be a separated project from this plugin.\nSorry I can't include this feature in the plugin.\nThanks.\n. Super cool! Thank you very much :smile: \n. Redirected into #160. I'm really sorry for the inconvenience, but because of my shortage of environment and time, the process hasn't be very quick. I'll try to do it asap.\nCheers,\n. There's an example, reach-the-end-callback.html in examples. It hopefully helps you to solve the problem.\nThanks.\n. A working example of ul and li elements is examples/text-content.html. If there's any further issue you face, feel free to let me know.\nCheers,\n. Hmm... I'm not sure what you mean, but actually we have it with .in-scrolling. When you're dragging the scrollbar and moving the mouse out, the scrollbar should still show. I've just tested and see it works. Did I misunderstand something in your question?\n. Closed for the time being. Thanks for the suggestion, though :smile: \n. I'm not sure we should cover this problem. Losing hover effect is a browser behaviour and not a problem of the plugin logic itself. I also think it's too much hack for this little edge case. As you described, it could manually be handled by users if someone really need to fix it. However, I'm a bit reluctant to merge this to the code base.\nThanks for the reporting though!\n. It's fair enough, but the current code base uses y-scrollbar right and x-scrollbar bottom when redrawing them. I'll think about it, but I'm not sure when it could be fixed as I don't have enough time to do much job in this plugin nowadays.\nAnyway, thanks for reporting.\n. Closed for the inactivity and difficulty in implementing this. Surely any PR will be welcomed.\n. I found that in webkit browsers like Chrome or Safari, this problem doesn't occur. But I found the problem occurring in Firefox!\nIt's been fixed with b927c177ca46020a3cde462c43f15225c7fdf727.\nThank you very much :smile: \n. This is quite interesting. I've heard of the feature, but I've not yet considered to use it. If possible to work with this, it must be awesome!\nNowadays I'm quite busy with other works and don't have enough time to look into this plugin, but I'll investigate MutationObserver when available. Every contribution will be welcomed as well!\nThank you for your interest and the report :smiley: \n. Will be supported on v1. If there is any comment, please leave it on the v1 thread.\n. This is prevented by browsers because of security issue. Please refer to Same-origin policy. In short, we can't access the other document's properties in iframe from a different origin. If you have a right on the content frame, you can directly use the plugin in the content document, but if not, unfortunately there' no way to achieve this.\nThanks.\n. Fair enough. Thanks!\n. Sorry for the late response. I may consider implementing the feature in the future, as for the time being I have no much time to contribute to this plugin.\nI'll close this issue now, and will open a new issue when starting to implement this.\nThanks!\n. Hi,\nThank you for reporting the bug. Would you specify the environment with which you experienced the problem? It will really help me.\nCheers,\n. Hiya,\nI've looked into the issue a little bit and maybe this is because of a patch, e9fcc0f0. The patch fixes that the scrolling event is propagated from a select element into its parent in Firefox and IE. However, I've tested in Firefox, and see the scrolling works fine. If it's IE problem, could you specify the environment including version and preferably some fiddle as well?\nCheers,\n. Maybe similar to #311.\nClosed for the inactivity.\n. Looks brill. Thank you very much!\n. Now the commits have been merged into master. It will be done in the master branch from now.\n. 2fc41e7045c0aa424f2da406a8eff40c9183874e fixes this.\nThanks for the report.\n. Why not? React has a separated repo for Bower. jQuery has also dropped Bower. Frontend devs are moving to using npm to manage their dependencies and packages, with some help of modules like Browserify or Webpack, and I totally agree to the movement.\nI think Bower is being deprecated, and wanted to drop it like jQuery did. However, I don't want to frustrate users who are currently using Bower , so I've just separated it into a Bower repo, which works just the same as it used to do before, bower install perfect-scrollbar. I'll also update the repo with new versions for a while, in the way how React does, and users don't need to worry :)\n. No specific plan yet, but the current version is nothing but a download page with a simple demo and I think it's not so enough for a plugin page.\nIn the new Github Pages, I'd like to provide more information to use and contribute to the plugin, and advanced demos with code snippets using jsbin or jsfiddle.\nIf you're interested, feel free to give me any suggestion. If you'd like, I will create a separated issue for the GH Pages and assign you.\n. Thanks to you guys, the new version has been released!\nThe new GH page task has been moved to #292.\n. There's not yet an official way to do this. If you just want not to handle a mousewheel event, you can just unbind it with the code below.\njavascript\n$('#container').unbind('mousewheel');\n$('#container').unbind('wheel');\nThanks.\n. Hiya,\nWhoa, thank you very much for your huge suggestion. Surely I cares :smile: Actually many of them are currently in the process of modification. Here's the changes:\n- About var, for sure I know JavaScript variable hoisting. But during the long time of development, many people have added several lines of code and now it's kinda mess. That's why I'm doing refactoring work, and the code will be separated into several modules which eventually makes it easier to manage the variables. Also, I know the problem of JavaScript variable hoisting is that there could be an unwanted variable reference. But the case is prevented by linting the code currently using JSHint, ESLint later, with help of CI, so there's no way that variables is used badly.\n- Well, about caching variable, it's kinda a right point. But the project is already caching every jQuery DOM object except for window and document elements, as they are being used in no performance-critical part. And after refactoring, we won't use any jQuery object, so there's no need to cache window and document. For sure other elements will be cached in the same way as usual.\n- I'd had no idea about the object usage in .data() method! Thanks for your suggestion. However the method is also not used in the refactored version, as we don't use jQuery inside the plugin.\nSo, now does it hopefully feel a little closer to perfect? Well, even though I implied it would be perfect, we know nothing can be literally perfect and that why I spend time to make it better! If you have any further suggestion, please feel free to let me know!\nCheers,\n. If you'd like, you can look around the code here: #274. The release is not yet confirmed, as there's still some point to improve and I also have my main job and sadly no much time to contribute in this plugin. I'm doing my best, though.\n. I think the css isn't properly applied. Please check if the css file is loaded and the container div meets the requirements.\nThanks.\n. For the last two, perfect-scrollbar.css contains them, so you don't need to worry. Also for loading CSS, surely you can just copy the code.\nIf it still doesn't work, please let me know, preferably with an example page I can look into to narrow down the reason of the problem?\nThanks.\n. If your scrollbar elements are missing, it must be because they are removed when the content is refilled, likely with .html() or .empty() or something like these.\nIn the latest version, when the scrollbars are missing, there's no way to show them again, but you can manually call .perfectScrollbar('destroy') and .perfectScrollbar() again and then they'll show up.\nHowever, in the new version, which will be released soon, even if the scrollbars are missing, they'll show up again when .perfectScrollbar('update') is called.\n. I've just written down a quick fix for it, but not yet tested it out as I don't have a Window environment now. I'll test it asap possible, but if you want, please try it out with this branch:\nhttps://github.com/noraesae/perfect-scrollbar/tree/wheel-delta\nPS also checks the deltaMode property, but I don't know what's the difference. Anyway, with the fix, it seems it would work in the same way as iscroll does.\nThanks.\n. Closed for the inactivity. Anybody can reopen this issue or open new issues.\n. Hmm, I'm not sure if the logitech mouse hooks a scrollable element and do something. How about trying with a new version as you said it worked with the demo page. There's no special difference in the demo page, so the issue must be because of something other than the plugin itself.\nSorry for the late response, and thanks for reporting!\n. Will close for the inactivity. Please feel free to reopen :smile: \n. Actually they do affect in some special cases. Please refer to #201. Specifically, although they are absolute-positioned, they unfortunately affect scroll width and height and it makes the calculated values wrong in updateGeometry. I hide the scrollbar in the beginning of the method by that reason, not to affect the calculation. However, as you said, it may harm the performance hard, so I will find another way to cope with it. I'll leave this PR to track the work.\nThank you very much!\n. Hmm, it's kinda difficult to explain, though it's described in the issue #201.\nThe #201 issue was that when we scroll down til the bottom, increase a container's height and call .perfectScrollbar('update'), the scroll exceeds the bottom of the actual content and a white area is shown below because scrollbars remain in the same position as they were before updated and it makes scrollHeight larger than the content's actual height. So I just decided to hide(display: none) the scrollbars before updating, calculate with correct scrollWidth and scrollHeight, and show again.\nI'll quickly made a fiddle to explain how an absolute-positioned element affect a scrollHeight property. Give me a second :)\n. I've just written the exact case example! Please refer to the link below.\nhttp://jsfiddle.net/q1fccyzz/2/\nPlease scroll the containers to their bottom and click the reduce buttons. It clearly shows that an absolute-positioned element does affect the scrollHeight. I've also added a button which hide and show the absolute-positioned element before and after updating, and it works fine.\nWell, that's why I added the lines even though it harms performance.\nThank you very much for your help :D\n. I think it really makes sense! I will apply it in the refactoring branch, as it will be merged into the master branch as the next version.\n. I pushed the patch into the new master branch with b4a51fc. Thanks for the idea.\n. There's an includePadding option. Please refer to an updated example I've written.\nhttp://jsfiddle.net/x93gx6Lh/7/\nAnyway, I think there's no point to keep the option, so I've changed it as a default behaviour(ff5ca3d804741b4da4d0aaeb6ba856b040af3a6a). It'll be applied from the next version, and that's why it has been removed from README.md. Sorry for the inconvenience.\nThanks :)\n. Agree with the idea. Discussion shall be done in #285.\nThanks!\n. Fare enough. Thanks!\n. Would you please update README.md as well? I think we can just move the container must have an 'overflow:hidden' css style. line to the next category, included in the basic CSS.\n. Great work. Thanks!\n. Hi, the new version hasn't been released, and it can't yet be used with npm by default. You can either use an old version, or install a dev version manually with npm install noraesae/perfect-scrollbar. The new version will hopefully be released very soon.\nSorry for the inconvenience!\n. Oh, thanks anyway!\n. Hi,\nPlease add following lines to your css.\ncss\n.ps-container .ps-scrollbar-x-rail {\n  top: 3px;\n  bottom: auto; /* If using `top`, there shouldn't be a `bottom`. */\n}\nYou can also find an example for the case in examples/scrollbars-on-the-opposite-side.htm.\nCheers,\n. Hi, can you check the version of the plugin and if any padding is used for the container?\nCheers,\n. Then would you please try to use the includePadding option? It'd be used like below.\njavascript\n$(someContainer).perfectScrollbar({includePadding: true});\nIn the new version which will be released soon, it is a default behaviour, but it hadn't been applied in v0.5.8. Sorry for your inconvenience.\nCheers,\n. Thanks :D\n. Closed for the time being. May hopefully reopen in the future.\n. Fair enough. Actually I was about to do this. Thanks!\n. Hello,\nPlease check the styles of the container div. Does it have any position style? If not, please add position: relative or whatever you want. If there is and it doesn't work yet, let me know if the container div has any padding value.\nCheers,\n. Closed for inactivity.\nPlease feel free to reopen.\n. It seems that we do have a module named EventManager and it overwrite a module having the same name in ember-cli. But I think it shouldn't overwrite the original one because it is a separated CommonJS module. I assume it's a bug of how ember-cli itself handle require. As a workaround, you can rename every EventManager occurrence to something else in the source code.\nIf there's any further problem, feel free to let me know.\nCheers,\n. I'll close the issue. If you have any further problem, feel free to reopen it and ask me.\nCheers,\n. #297. Thanks!\n. Thanks!\n. Thanks guys for the helps.\n. Actually, I'm afraid there's no way to do this. However, if you don't mind modifying code by yourself, you can just comment out the following line in src/js/plugin/initialize.js.\njs\nclickRailHandler(element);\ndragScrollbarHandler(element);\n// mouseWheelHandler(element); // comment out this line\nnativeScrollHandler(element);\nselectionHandler(element);\nYou can make built files with gulp build.\nThanks.\n. Instead of merging this, I may go with a more general disable option for several events, or custom callback in which the event can be prevented. I'll work on them some time.\nAnyway, thank you very much for your interest!\n. Hello there,\nFirst of all, I'm not sure if it works fine with a html element. I'd use with a full sized div container in the case I wanted to use a full screen app. Also, you should pass an element to Ps.initialize, not a tag name, such as a value obtained by document.getElementById or something like that.\nFor iframe, I'm not sure my plugin can cover your use case as iframe is kinda a special case, but if there's any problem, you can refer to an iframe example in the examples directory.\nIf you have any further problem, feel free to ask me.\nCheers,\n. Closed for inactivity.\nPlease feel free to reopen.\n. Hi,\nFirst of all, thank you for your interest on the plugin. However, I'm afraid I'm not sure why the result should be 0 when it gets an empty string. If it's an empty string which is surely not a proper integer string, the result should naturally be NaN.\nAnyway, I'm sorry the PR can't be merged and thanks again.\nCheers,\n. Hi,\nI didn't mean that it's for \"just in case\". I meant if there is the issue you've been encountering, I'd fix the base reason that an empty string is indeed passed to the function, which shouldn't happen, rather than making it workaround.\nCan you provide a stack trace of the problem for me to narrow down the reason why an empty string is passed? I'll personally look into the issue as well.\nCheers,\n. Oh, now I see. Cause getComputedStyle gets style values even though it's not been set, I wondered why it returns an empty string. But I found that if an element is detached from the DOM tree, it returns an empty string. I'll work on this and make a patch to cover the case.\nThanks for the report.\n. 4a7f27356afb7814698c3804615f8c8d6b224f8f has been uploaded and I hope this patch fixes the problem by ensuring there are proper scrollbars in the container. The patch will be included in the next release.\nIf there's any further problem, feel free to contact me :smile: \nCheers,\n. Hello,\nActually I didn't consider the column-count cases, so it might not work well with them. For the time being I have no enough time to contribute to this plugin, so I'm not sure when to look into this issue, but I hope it's done in a while.\nThanks for reporting.\n. It's been a while there's no update for this issue and I am sorry but it may be better to close this issue here. If it is still an issue in the latest Firefox too, please upload a new issue, preferably with a fiddle to reproduce the issue.\nThanks again.\n. There's no way to update by itself. Nevertheless, update is called when a user scrolls the container, so even though we don't update, it will update the size when starting scrolling. But users can see the wrong size of scrollbars before they start scrolling. It can frustrate users, and that's why I recommend calling update manually when the content is actually updated.\nHowever, you may be able to find some jQuery plugins which can monitor the resize of an element and propagate an event when it's updated. If you use perfect-scrollbar with the plugins, it may give an answer you may want.\nThanks,\n. Yes, I've noticed it, but not yet had enough time to look into it. Very sorry guys, and any contribution will be welcomed.\n. @prashu421 You should apply .update() to the ps instances. Also, please beware that it should be called after the toggle transition is complete. I've updated the fiddle:\nhttps://jsfiddle.net/egkfxzrt/14/. In this case, the event must have been propagated into the parent from the children. if you'd like not to handle the children's scrolling events in PS, please stop the propagation of the children's scroll event. It can be done like below:\njs\nchildElement.addEventListener('wheel', function (e) {\n  e.stopPropagation();\n});\nchildElement.addEventListener('mousewheel', function (e) {\n  e.stopPropagation();\n});\nIf you have any further problem, please feel free to reopen!\nThanks. \n. Hi there,\nSorry for the late response. dc7b14d0e16378805ce138f870181a52d38b54b9 fixes the issue.\nThanks!\n. Fare enough! But would you please change the tab size to 2?\n. Oh, surely it could. Sorry!\n. It's kinda tricky to do this. You should hook a mousewheel event and handle it by your self. The basic code may be like below.\n``` js\ncontainerElement.addEventListener('mousewheel', function (e) {\n  var heightToScroll = getHeightToScroll(e); // should be implemented manually\n  var heightToScrollAtOnce = 2; // for example\nvar scrolledHeight = 0;\n  var transitionInterval = setInterval(function () { \n    containerElement.scrollTop += heightToScrollAtOnce;\n    Ps.update(containerElement);\nscrolledHeight += heightToScrollAtOnce;\nvar atBottom = /* check if it's at bottom */;\nif (scrolledHeight >= heightToScroll || atBottom) {\n  clearInterval(transitionInterval);\n}\n\n}, 30);\n});\n```\nThe code is not tested, but the basic concept may be right.\n. Will close for the inactivity. Please feel free to reopen when having further issues.\nThanks!\n. It's actually intended behaviour, because of this bug: #247.\nHowever, the native bug may have been fixed, or not, so I'll check again in a while.\n. Hmm, it makes major browsers stop working in my environment(OS X 10.10, with trackpad, in the latest Chrome, Safari and Firefox).\nMaybe something's been mistook?\n. Closed for the inactivity. Feel free to re-upload the patch.\nThanks!\n. It's fair enough and it's just been implemented with c21cfb6ed01feb741a893efe6f04259be067aaf5!\nThank you very much.\n. Using server-side preprocessors and tools is quite common practice in front-end development nowadays. Have you ever experienced with Browserify or any other module system? Any JavaScript or CSS preprocessor?\nYou're saying about jQuery plugin guidelines, but using server-side tool is nothing to do with jQuery plugin guidelines as the jQuery itself uses many server-side tools like grunt, jshint, requirejs, and even npm. If you don't see any good reason, I recommend using them hard, as they are really helpful to make the code base modular.\nAlso, in twitter you talked about procedural, but it's kind of a programming paradigm, like functional or OO, and nothing to do with nested or design. If you were describing modular design, I used Browserify to make the code modular. Browserify made by substack, an awesome JavaScript developer, is such a great tool and I really recommend trying it.\nIf you see any further problem, please upload PR which I really appreciate :smile:\nBTW, thanks for the -ms-filter thing! I'll remove them.\n. And if you're talking about require() usages in the plugin, it's not Node.js, it's Browserify. If you keep refusing looking into the server-side tools and just keep saying they're bad, well, I've no many things to do about it :laughing: \nSorry, and thanks for the opinion.\n. One last thing, it's not just a jQuery plugin anymore. It works with vanilla JS as well. All the modules such as event, DOM, etc are to make it independent from jQuery.\n. #424 looks like fixing this. I'm really sorry that it's really been a long time, but can anybody having the same problem test the PR out?\n. Hmm, actually I've not considered implementing this, as I think it's kinda too much for a scrollbar plugin. I think the feature is more adequate to sliders. However as it seems quite handy, I may consider in the future, but nowadays I have no enough time to work on this.\nI'll close the issue for the time being, and will open a new issue when implementing this.\nThanks for your interest!\n. Hi,\nInfinite scrolling is usually caused by padding, margin or absolutely positioned elements, all of which increase scrollHeight infinitely in some cases. So, you can start from checking these properties.\nIf you can't narrow down the reason, please feel free to ask me again. An example page or a fiddle which can reproduce the problem may be helpful.\nThanks :)\n. Closed for inactivity. Please feel free to reopen.\nThanks!\n. Hi,\nWhat does 'not working with textarea' mean? If you mean applying the plugin to a textarea element, I'm afraid that the scrollbars are appended to the container element, but textarea is not a valid container and cannot contains any element in itself. So even though it fortunately works in IE, it's not assured that the plugin works fine with textarea in every other browser.\nHowever, if I misunderstood and you mean another issue, please specify the case a bit more.\nThanks.\n. I doubt, but if you mean #308, please refer to it.\n. Closed for inactivity. Please feel free to reopen.\nThanks!\n. The geometry is updated when it's scrolled, but if you'd like to update before scrolling, you should manually call the update function when you need to update. In this case, maybe in the ajax callback.\njs\nPs.update(element); // In case of vanilla JS\n$(...).perfectScrollbar('update'); // jQuery\nActually, the angular version is not maintained by me, so I've no idea how to manually update in it. But as I provide the methods, there may be a way to do that in the angular version too.\nThanks.\n. Hmm, can I have an example page or a fiddle to reproduce the problem? If I can't use the inspector, it's really hard to narrow down the reason.\n. Closed for inactivity. Please feel free to reopen.\nThanks!\n. Looks quite handy. Now reviewing.\nThanks!\n. Actually, this is duplication of #303. For the PR, I rejected. However now I think it's better to move on.\nThanks!\n. You can do this with just CSS. Please add following lines in any of your CSS files.\ncss\n.ps-container > .ps-scrollbar-x-rail {\n  visibility: hidden;\n}\n.ps-container > .ps-scrollbar-y-rail {\n  visibility: hidden;\n}\nYou can surely choose which scrollbar to hide by adding only one of them.\nThanks!\n. Without the ugly !important, you can do like this:\ncss\n.ps-container > .ps-scrollbar-y-rail {\n  right: 10px;\n}\nWould it look a bit better to you?\n. I'd rather leaving it as a CSS fix, because I think that the styling should depend only on CSS. However, I will consider it as a possible configuration candidate and see if there's any further request from somebody else. If there is, I may seriously consider adding it :smile: \nThank you very much for your interest on the plugin!\n. :+1: I think it must be really handy, but may need some work. For the time being, I don't have enough time to contribute to this plugin, so I'm not sure when to work on this. Surely, every contribution from anybody will be really welcomed!\nThanks for your interest on the plugin.\n. I think I'd leave it to user implementation, as it's really simple(2 lines of code).\njs\nnew PerfectScrollbar(container);\nsetTimeout(() => container.classList.add('ps--focus'), 0);\nsetTimeout(() => container.classList.remove('ps--focus'), 750);\nI use ps--focus here for simplicity, but users can define their own class.\nI've added an example show-on-initial-load.html in the next branch.. Hi,\nYou may use it with jQuery? Can you provide some part of your code or site? It'll help me to look into the issue.\nThanks,\n. Closed for inactivity. Please feel free to reopen.\nThanks!\n. I totally agree. Will work on.\n. Maybe similar issue to #98 and #210? It seems like a Firefox-specific issue, according to this bugzilla thread. In short, Firefox doesn't propagate wheel events from an iframe to its container frame. According to previous issues, though, I guess there may be a workaround. You may be able to do like below.\njs\n// jQuery\nvar scrollbox=$(perfectScrollbar_element);\n$(iframe_element).contents().find(\"body\").bind('mousewheel', function(e, delta) {\n  var scrollTopDelta  = delta > 0 ? -40 : 40; // maybe different for browsers\n  scrollbox.scrollTop(scrollbox.scrollTop() + scrollTopDelta).perfectScrollbar('update');\n});\nThe code may be different if you don't use jQuery or jquery-mousewheel plugin, but the basic concept is propagating the iframe wheel event to its container manually.\n. Hmm interesting. Actually it works along with the original OS X direction, but I've not yet considered it as an option.\nI will think over implementing it, but I've no much time to contribute to this plugin nowadays, so not sure when to do.\nAnyway, thanks!\n. I've not considered using the plugin with flex-direction. Nowadays I'm afraid I don't have much time to work on this plugin, so it may take quite much time to get this issue addressed. Any contribution will surely be welcomed.\n. It's been a while there's no update for this issue and I am sorry but it may be better to close this issue here. If it is still an issue, please upload a new issue with a fiddle to reproduce the issue.\nThanks again.\n. I've just checked it and found it quite tricky to fix. It is needed for absolute-positioned element to show properly for the plugin. It seems that absolute positioning doesn't work well with flex-reverse.\nAny PR will be welcomed for this issue.\n. As @hellmelt suggested, mentioning it is difficult in README seems viable solution. Will close this issue, and add it to README.\n. Hi, sorry for the late response. Actually, I heard about this problem quite many times, but still nobody could suggest a fiddle or code reproducing the bug. I suppose it is occasional. I've also personally never seen this. If you can provide the fiddle, it helps me to narrow down the problem a lot.\nThanks!\n. By 6c642d8a478ce231aad98aee7f6cd541cac816d2, the plugin will return early if there's no proper instance. I'm not particularly sure it fixes this issue as well, but I've no idea if there's any other part a null-check should be added.\nIf there's further problem, please feel free to open an issue.\nThanks.\n. Hi, sorry for the late response. If we change the order of initialize and appendChild it works. It doesn't work in Safari too and it means WebKit seems to do something on DOM and make it asynchronous.\nAnyway, it works with following order.\ndocument.body.appendChild($testContainer);\nPs.initialize($testContainer);\nAs we already initialise, no update is needed. \nThanks!\n. Hmm, there may be a problem in calculating float number with IE10. I will check if there is any problem in the code. Nowadays I have got quite much work to do, so I'm not sure when I can look into this. I'll try to do asap.\nThanks for the report.\n. It's been a while and there's been some updates on calculating floating-pointed number. I think it may be better to closeclose this issue here. If it is still an issue, please upload a new issue, preferably with a fiddle to reproduce the issue.\nThanks again.\n. Merged manually as 3dbf20a5d0a7563dfbb77410e4de2d94c401f6de. Thanks!\n. Hi, sorry for the late response.\nCan I get any fiddle or example reproducing the problem? They really help me narrow down the reason.\nThanks.\n. Closed for the inactivity.\n. Sorry, I forgot it. I've just updated. Thanks.\n. As in the old versions, the update call doesn't refill the scrollbars that have been removed by .html(). Please use the latest version of the plugin.\nThanks,\n. I've just updated the fiddle with the latest version, and as you can see, it works well.\nhttp://jsfiddle.net/45ofk0zw/\nSadly, you can't use the source files uploaded on this fiddle, because they're just hosted in my mini server.\nperfect-scrollbar in cdnjs is not maintained by me. I guess somebody made it. Anyway I'll see if I can update the cdn today.\nThanks.\n. PR is uploaded here: https://github.com/cdnjs/cdnjs/pull/4657\nPlease wait till it's updated, hopefully soon :smile: \n. There seems to be a problem with mouse scrolling apparently. I'll create a separated issue.\nThanks for report.\n. You can just set the scrollTop to 0 and the update.\n``` js\n// jQuery\n$container.scrollTop(0);\n$container.perfectScrollbar('update');\n// vanilla JS\ncontainer.scrollTop = 0;\nPs.update(container);\n``\n. The plugin is not implemented to work onbody`. I recommend creating a wrapping div element. However, there seems to be a problem with mouse scrolling apparently. I'll create a separated issue.\nThanks for report.\n. Yes. As @11mb said, you should use something like the class attribute. ID should be unique in a document.\nThanks!\n. If it occurs only by chance, it may be a timing issue. How do you fill the content? Is it static? Any jsfiddle or codepen examples, or the site example will help us a lot to narrow down the reason.\n. Closed for the inactivity.\n. Hi,\nActually, the native scroll event must be triggered regardless of overflow property, which means in overflow: hidden too. The event is triggered when scrollTop or scrollLeft is updated with any user interaction including mousewheel, browser search, JavaScript, etc.\nPlease try use onscroll or addEventListener('scroll') to handler the event. I've also created a fiddle with which you can see how it works.\nhttp://jsfiddle.net/3o01oxgw/1/\nThanks!\n. Applied with db855ceca1c4cbd7751a452e525ffc0abd9cd60a. Thanks! And I've not yet merged the sizeScale feature, but if still interested, pls upload it as a seprated PR with documentation update too.\nThanks you very much! :+1: \n. First of all, sorry for the late response.\nThis issue is technically difficult to fix simply by a simple workaround. Because the plugin uses positioning to display the scrollbars everywhere, the whole logic should be changed when we'd like to remove position.\nAll I can suggest is manipulating DOM completely, such as removing the submenu from the main container and placing them dynamically, or using another subcontainer, etc.\n. Cool. Thanks!\n. I could reproduce the problem in my environment too. There seems to be a problem with mouse scrolling apparently. I'll create a separated issue.\nThanks for report.\n. 3b134d6193c91a493c46363b86458a6e5eace518 and e9024292cdfce5906f37f6da71a7521d6ac86c60 may have fixed this.\nGreat work, @DanielApt :+1: \n. Sorry for the late response. The reason it's not been merged is that it's difficult to understand a reason to scale the sizes and also I didn't have enough time to test the functionality to work properly. Also the patches may need some squeezes.\nI close this PR now, but please feel free to reopen this or open another PR if it can be updated.\n. Because of these issues, I disabled the useSelectionScroll option by default. But disabling it doesn't mean the issue is resolved. Any contribution will be welcomed!\n. Currently, the buggy selection handler is disabled by default. It may not a ultimate fix, but it may not be used anymore until a 'right' solution for the selection scrolling, so there may be no problem anymore.\n. It's kinda big as the plugin isn't a single script file and we use browserify to zip the script files. I would say it's suitable for projects using browserify. But as @ayamflow said, it may be acceptable when minified and gzip'ed.\nHowever, I admit that it's somewhat too big. There have been some reports like this, but I really don't have enough time and enthusiasm to work on it as the most of the code may need to be re-implemented. I wouldn't mind if you help us to make it smaller :smile: \nThanks for your interest!\n. Hi,\nI cannot reproduce the problem in the page you suggested. However, In my opinion you may just call Ps.update() or $(...).perfectScrollbar('update') to update the view. Please check the iframe height is also fit the size of the page too.\nIf there is further problem, please provide some working example or jsfiddle. They help me a lot to narrow down the reason.\nThanks,\n. Closed for the inactivity.\n. I forgot to publish the new version into them. I've just published. Thanks!\n. I'm afraid it's too difficult to look into the issue with such a simple and general explanation. Can you provide any example page or jsfiddle? They would help me a lot to find out the reason.\nThanks.\n. Was not sure if the person you sent the email to was me. Anyway I've got nothing. If you did, can you send me again? It may take a while to look into though.\nme@noraesae.net\nThanks\n. I think I've found the reason. The containers have padding and your page is using the old version of the plugin, so you should specify includePadding option. Please use .perfectScrollbar({includePadding: true}) instead of .perfectScrollbar().\nI've tried with console and it works well, so please tell me if it works for you too.\n. Thank you for the report. z-index may vary for each use case. Some people may need it and some people may not, so for the time being I may leave them to users.\nThank you again!\n. Thank you for your report! I've just added a null check and error-throw like this: f9f20eeb6fb33bcab08dfe4868ebcf5668177973.\nYour solution is good enough, but I thought it would be better to have an error message for debug later. But I really appreciate your report and solution upon the problem.\nThanks!\n. Fixed with f9f20eeb6fb33bcab08dfe4868ebcf5668177973. Thanks!\n. As you suggested, I just remove the line throwing an error and make it return early. Pls refer to 6c642d8a478ce231aad98aee7f6cd541cac816d2.\nThanks!\n. It must not need a callback as it's not asynchronous. You can see just sequential code working well in this fiddle.\nhttp://jsfiddle.net/fusmpgdt/1/\nIt's been tested with latest Chrome, Safari and Firefox in OS X. If your code doesn't work, it may be a different reason such as lazy loading.\nIf there is still the same problem, please upload the issue with some code examples or fiddles.\nThank you for reporting.\n. Thank you for the report! I added it in FAQ.\n. By 6c642d8a478ce231aad98aee7f6cd541cac816d2, the plugin won't process updating or destroying for empty instance.\nThank you for reporting.\n. In the next branch, I took care of possible memory leaks, mainly of event listeners and element bindings. I guess now nothing's leaked if PS instance is released.\nThanks for your reports!. The new version will be released now, so pls wait a little more :smile:\n. Great work! Thanks!\n. As you may see in the code, the following lines have been added recently and now there may be no problem.\njs\nif (!i) {\n  return;\n}\nThe new version will be released now, so pls wait a little more :smile:\n. If you mean the event a user stop scrolling, you may consider implementing the feature by setTimeout and scroll event. There's no native stopScrolling event in JavaScript. I've just written a simple jsfiddle to emulate the event with the setTimeout trick here:\nhttp://jsfiddle.net/d48bdzba/2/\nHope it helps!\n. Great to hear that :smile: \n. I've just tested examples/options-wheelPropagation.html with the latest Chrome, Safari and Firefox in OS X and it works well. Does the problem occur only in your use case or generally? Please provide the environmental information or code example if possible.\nThanks for reporting.\n. I've not yet tested for nested scrollbar and now it sounds quite likely to happen. The codepen or something like that must be extremely helpful to narrow down the reason.\nThanks!\n. In your code there was no specified stopPropagation option and it works as expected when I added the line. Please check the following codepen.\nhttp://codepen.io/anon/pen/jPXWrJ\nAnd sadly angular-perfect-scrollbar is not maintained by me and I'm afraid I have little idea about angular. If it's the problem concerns angular, please contact to its contributors.\n. I guess the problem @clementprevot may be similar to #333, in terms of the fact that it is caused by a floating point numbers. I guess the floats should be converted to int whenever needed to do so.\nThanks!\n. Hmm, I've just tested it out in my Chrome in OS X and it works well. I don't think Chrome abandons it as it's W3C Recommendation.\nPls check there is really no stopPropagation through opening an empty page and typing window.Event.prototype.stopPropagation in the console tab. I doubt it's not implemented in any version of Chrome, so please check if other libraries override it.\n. Great to hear it works! Thanks :+1: \n. As you can find in other issues, a textarea is not a normal HTML container and PS doesn't work well with textarea.\nI suggest create a outside div for the textarea, or use other plugins working in the different manner for the time being.\nThanks\n. As explained in How to use section in README, you can just load the script as usual.\nhtml\n<script src='dist/js/perfect-scrollbar.js'></script>\n<script src='dist/js/perfect-scrollbar.jquery.js'></script><!-- for jQuery -->\nAnd every example in examples are written without any help of packaging tool. You may want to start from the basic usage, then examples/options-default.html is a good point to start.\n. Hi,\nI appreciate this PR! However, I'm afraid the patch for custom CSS may be used personally, and not merged into master.\nThanks!\n. #401 may help the problem? Can anybody try the PR?\n. Thanks to the several reviews, I've just merged #401. Please feel free to open an issue when a similar problem's happening.\n. @iver56 Absolutely. Will do now!\n. Hi, you can use the usual scrollTop property of the container.\njs\ndocument.getElementById('test').scrollTop; // vanilla\n$('#test').prop('scrollTop'); // jQuery\nThanks.\n. Hmm, if there are scrollbars duplicated, the initialise method must be called twice. Can you please put console.log and ensure that the initialize method is called once? console.log may be put around the following call.\n$(...).perfectScrollbar(); // jQuery\nPs.initialize(...); // vanilla\nThanks\n. I can't find the case where it occurs in the provided page, but if the scrollbar doesn't update its geometry, it's very likely to be the timing issue of the user's code itself. Please check if any asynchronous call is used and ensure the update call is really called after the content is updated.\nIf it's confirmed that the update call is called later and there's still the issue, please provide example code (preferably jsfiddle) to reproduce the problem. It really helps us narrow down the reason of the problem.\nThanks!\n. Hmm, the code looks fine. Is it the code of the page you provided? If true, can you give me a detailed instruction to reproduce the problem in your page? I'm currently on a travel so it may take a while but I'll check it out when possible.\nThanks\n. I found the problem, and may fix it in a while. I really appreciate for your report. Please wait a little bit for the fix.\nSpecifically, it's a problem occurring when the content is updated with innerHTML, as it clears the scrollbar rails together with the original content. I've once made a patch to handle the situation, but there may be a regression error.\n. Your workaround is nice enough, but you need an extra variable to keep track of the content. The patch fixes the problem.\nHowever, I really don't recommend using innerHTML itself as it may re-initialize the scrollbar rails every time it calls the update. Creating a inner content div or using DOM operations may be the alternatives.\nAnyway, thanks!\n. I'm not sure I understand well or not. I've just tested with my iOS devices, and the direction was just fine. If you mean the scrolling with scrollbar rails, in touch devices, the content is only scrolled with touch event, not with the rails.\n. Hmm, it's currently unsupported on its own, and we need to modify the code a little bit.\n. Fantastic.\n. Closed for the inactivity. Please feel free to reopen the issue.\n. Easing effect is implemented only for touch events. As there is some desktop browsers where the easing effect is implemented by default in native level, it's not implemented for wheel or mouse interactions. By the same reason, I may not add the effect to the plugin by myself. I welcome any PR about it as an optional feature though.\nThanks!\n. Great work. Thanks!\n. target must be a jQuery object. ps.initialize is for a vanilla JS DOM object. Please use target.perfectScrollbar() instead.\nAbout further usage, please read the README carefully first.\n. Was introducted once, but there were still many people who don't want, so it became an optional feature. Please read the documentation and check 'wheelPropagation'.\nThanks.\n. I've no idea about AMDClean, but the error may be because of var ps = main; line. Literally, main is defined nowhere.\n. If it appears when starting scrolling, it's very likely to be a timing issue. Please ensure that PS' update method is called after the div is filled with content. I'm not sure which modal is being used, but there could be a callback to handle it.\n. Great news! Thanks for sharing.\n. Looks superb :thumbsup: Can you add an example too? If you're busy, I can do.\n. And I'd like to add you as a contributor of this project, thanks to your wonderful helps. Please feel free to tell me if you like it.\n. Great :smile: I added you as a collaborator too :+1: \n. From now on, please feel free to push any commit, resolve any issue and so on. I will also review the work and leave a comment.\nThanks!\n. Til now I've recommended user using the custom callback to handle the event, like this, but I think now we have a custom event interface and there's no reason not to implement that.\nI'm also not sure about the event name, but may using reach in the names looks okay?\n. Great work.\n. Sorry for the late response. The page seems changed, and I close this issue for the time being. If there is further problem, please feel free to reopen it. JSFiddle may be better for debugging too.\nThanks.\n. I've added useSelectionScroll option, the default value of which is false: 17e5f67519a0ca11ed22be064edff43bfac6452e\nI also thought it's better to be disabled by default, as not so many users may use it, but it can cause many problems.\n. Merged into #412. Thanks for the interest, guys!\n. Great job! Will release in a while.\n. Closed for inactivity. Please feel free to reopen.\n. Selection scroll is disabled by default. Please refer to #388.\nThanks for the report!\n. What do you mean by the new class?\n. Closed for the inactivity.\n. You mean scrolling with mouse click, right? I think calling stopPropagation on the scrollbar rail click event may work, but not sure. Can you please try it?\n. Good to hear it works. :+1:\n. dist is not included in the repository, because in it there are built files. You can build it by yourself with gulp, or download prebuilt files in releases. There is also dist when installed with npm.\nThanks\n. I've just test quickly and it worked well in my env. How did you install Ps? Which version of Browserify do you use?\nThanks\n. I'm sorry for the late response. It may not work well with the downloadable version. I recommend using it with npm. If you still prefer to use the static version, you may be able to consider using a whole file tree under src/js and load main.js in the directory.\nSorry that it may not satisfy your need.\n. Hi, first of all, thank you for the interest. However, I'm afraid this feature may not be supported, as I want to make this plugin work the same as the native scroll works as much as possible. It means that implementing momentum is up to the browser, not to JavaScript scripts.\nThe main reason I think like above is that some browsers and even some mouse drivers implement their own momentum function, and thus I can't be sure that our own implementation doesn't make collision with them. I also think that it will also cause performance issues due to the timers and animations. They are not cheap at all(hooking the scroll event itself is also not cheap by the way).\nI am really sorry again, and I really appreciate your suggestion. Forking the plugin and modifying it is completely free.\nThanks!\n. Thank you very much! Can anybody please test this out?\n. True! Sorry for the mistake. Will fix now.\nUpdated: Fixed and released as 0.6.10. Thanks!\n. As I understand, the divs are resized using a custom method? Then as a naive workaround, you can disable(or destroy) PS when starting to resize, and re-initialise when finishing.\nIf my understanding was wrong, could you specify the case a bit more, preferably with an example or a jsfiddle?\n. Closed for inactivity. Please feel free to reopen.\n. Not sure if this is still an issue. Any further problem?\n. I think this is a little overkill for what PS should do, because distinguishing scroll axis among containers may be difficult to implement and expensive on performance, expecially on wheel events. I'm afraid I close this issue here, but if anybody has a nice solution about this issue, please feel free to upload an issue or PR.\n. Moved to #417\n. Merged into #412. Thanks for the interest!\n. Hello,\nThere's currently no way to make a touchstart event propagate to the parent. It is to prevent the parent div scrolling at the same time when the PS container is scrolling. I'm not sure if there is a workaround to force-propagate the touchstartevent only when we need to do.\nFor inGlobalTouch, I'm also not sure as the implementation was quite old, but my guess is that it's to tell a scrolling from multi-touch gesture. For example, a user can pinch the page while putting thumb outside of the container and a finger inside the container.\nI'm sorry for the inconvenience. I welcome any contribution to make it better :smiley: \n. Now scroll propagation is supported with touch as well with the swipePropagation option. Thank you very much for your report.\n. This may not be supported officially in PS, as it's quite difficult to emulate naturally with only JS and may cause further problems. Instead of implementing this, PS will provide a new way to write PS plugin in v1, so it will be much easier for users to write their own scroll emulator.\n. Closed for inactivity. Please feel free to reopen.\n. This is likely to be a timing issue. I'm not sure the React component fills the content dynamically after componentDidMount. If it does, Ps.update should be called. Could you try calling the method in componentDidUpdate?\n. I still think that it may have been a timing issue. This can be solved by calling Ps.update when it is actually needed, or calling it ad hoc with timeout.\nI close this issue here, but please feel free to reopen it or open a new issue if having further problem.\nThanks!\n. Some what related with #408. I'm still not sure the source files should be included in the bower repo, as using the npm repo may be just enough to resolve this issue. Although the plugin is currently being uploaded on bower too, it's really a minimum effort.\nHowever, I understand that there are still many bower users asking this, so may consider in later releases. I'm sorry but please use NPM repo for the time being.\nThanks.\n. From 0.6.8, src directory will be included in the bower package too.\nThanks guys!\n. Closed for inactivity. Please feel free to reopen.\n. I guess jQuery Resizable dynamically changes the geometry of the container after it is initialized. Can you provide a fiddle or an example to reproduce the problem?\n. Sorry for the late response. Will release a new version in a while.\n. Hi,\nPlease refer to the wheelPropagation option.\nThanks!\n. I cannot see the issue now in OS X El Capitan and the latest Chrome. I used trackpad.\nhttps://www.youtube.com/watch?v=BPK12F0CO-Y\n. Closed for the inactivity.\n. Hello,\nThank you for the information, but the plugin is not a PHP package and it seems not appropriate to add it in Packagist. Please use NPM instead for JavaScript packages.\nThanks,\n. I like the idea. #433 indeed adds variable usages, and may be merged soon.\n. Closed for the inactivity.\n. gulp-autoprefixer looks nice. Can you provide a PR for it?\n. Merged. Thanks for this superb work :+1: \n. PR merged. Great work!\n. Thank you very much for the PR. It absolutely looks like a nice idea. I've left some quick reviews.\n. Related with #160, and there is no really good solution for the time being. Some workarounds are suggested in the thread, so please have a look.\nSorry that I can't help so much :(\n. I'm really sorry for the late response.\nThis is very true as it cannot tell if a wheel event is triggered by just a normal scrolling or a pinch. I'm not sure if there is a JS way to tell them. Any idea?\n. Fixed by #709 . It may be changed to if (!hovered && !focused) and set focused as it should be.\n. Will do this tonight.\n. Fixed. Thank you very much for the report :smile: \n. Will release a new version in a while, but I'm afraid not right now. I'll tell you when it's released, hopefully soon.\n. Sorry for the late response.\nI'm not sure why this happens, but at least it shouldn't because Element.getAttribute is likely to be supported by any modern browser. You can find a documentation here. I have no idea about angular, but it may concern it?\nA jsfiddle to reproduce the issue may help a lot to narrow down the reason.\n. Closed for the inactivity.\n. PR prepared :rocket: \nhttps://github.com/jsdelivr/jsdelivr/pull/10049\n. Merged. It may take some time for the JSDelivr machine will actually load the scripts, but maybe soon.\nThanks.\n. We're trying to make it independent from any specific framework. Yes, we support jQuery, but it's rather a legacy, other than support(perfect-scrollbar used to be a jQuery plugin).\nAs recommended above, there's angular-perfect-scrollbar and also angular-perfect-scrollbar-2, I've tried nor though. I'm not familiar to Angular, but there may also be a way to use vanilla JS with it.\nSorry that I cannot help so much, and thanks for your interest.\n. Sorry for the late response. There is no native way to do this. If there is any good idea to handle this, please upload a PR. Any other form of contribution will be also welcomed.\n. Now the activeness of axis can be checked by ps--active-? class in CSS. You can simply modify the display styles in perfect-scrollbar.css.\n```css\n.ps > .ps__rail-x {\n  display: none; / remove this! /\n  ...\n}\n.ps > .ps__rail-y {\n  display: none; / remove this! /\n  ...\n}\n.ps.ps--active-x > .ps__rail-x,\n.ps.ps--active-y > .ps__rail-y {\n  display: block; / remove this! /\n  ...\n}\n```. Hi, thank you for your interest and feedback on the plugin :smile: \nYes, I also think that it would be perfectly nice if it can automatically update itself when needed. But the problem is how it's done. In JavaScript, it is neither easy nor cheap to detect resizing. There is a resize event, but it is only for window. Most of the libraries do detect the change by checking the size in every interval, which I don't really want to do. It is not only expensive, but dangerous(what if the element is removed without unregistering the interval handler?).\nSo, I concluded to use the current manual update because who knows when to update the scrollbars is not the plugin, but a programmer. Only a programmer can know when is the most efficient moment to update the scrollbars, without any expensive handler and resource waste. I guess, at least for the time being, it is the best solution.\nHowever, fortunately, there are some movements to handle the issue, including #268. Currently I don't really have time to look into the issue, but it may(or may not) be helpful. I close this issue now, but if there is another effective way, please feel free to open an issue and suggest it.\nI'm really sorry that I cannot help so much for your need, and thanks again!\n. I would like to implement this feature, but with a different form of option parameter. I'll do the work in short, but anyway will merge the patch for the time being.\nThanks!\n. Oops, I found a little problem in this PR that it should be done in initialize.js, instead of the handler itself. I'll revert the patch. Sry, and thanks again!\n. It's implemented with bd7134f33dbba3073d3f7f0d4204de8edf85ae72\n. Sorry for the late response.\nIf you set all opacitys, then it should show. If it's not showing, it may be a content and script problem, rather than one of style.\nIt's really difficult to find the reason without any reproducing case. Can you provide a sample page or jsfiddle for it?\nThanks,\n. Closed for the inactivity. Please feel free to reopen, or open a new issue. Thanks!\n. Moved to #508. Thanks for the suggestion.\n. It basically supports mobile too. It's tested with iOS, Android and Windows platforms. However, because it simulates scroll event with script, there can sometimes be a problem. If there is any, please upload a detailed issue for it.\nThanks.\n. Sorry for the late response.\nIt's created by default as we choose to make suppressScrollX work like there's no need for the X scrollbar. I think your point is valid, but it may need some work. Any contribution will also be welcomed.\nThanks for the report!\n. Currently, suppressing and activating each axis share the same path. I think it's quite handy for styling, and thus I may stick to the current behaviour.\nI'm really sorry, and thanks again for your suggestion.. PS has been using top and left for its simplicity and native scroll compatibility. It will be using them in the future too. Repaints are inevitable, so the best solution will be, as Daniel suggested, using requestAnimationFrame to reduce the count. The version 1.0 release will be using requestAnimationFrame, which is still in very early stage though.\nIf performance really suffers because of repaints, my suggestion is:\n\nConsider using native scrollbar. Please keep in mind that using custom scrollbar is such a bad practice for performance.\nConsider using other custom scrollbars using CSS transform to render the content. It may be difficult to use native JS scroll interface with them though. I cannot suggest any, as I never use, but I guess there are some quality libraries.. Yes, I actually have tested it recently and found it was not true. As you said, repaint doesn't occur just by updating top or left(thank you for your report again!). I will definitely try avoiding the repaints when writing a new scroll logic.. I reproduced the issue successfully with a fiddle: https://jsfiddle.net/yy9haq6h/2/\n\nThanks a lot!\n. Ouch, it always happens. Thanks!\n. This may be an issue related with Event prototype in IE8. I'm afraid we don't accept a patch for old IE browsers.\nI really appreciate your contribution and sorry that we cannot merge this. If this issue's related even with modern browsers, please feel free to reopen.\n. Or it may concern #458? The patch has been merged, so please test it out and tell me if there's any further problem.\n. Hmm, as I know, element.style is apparently different from element.getComputedStyle. element.style just returns the element's own inline style, but element.getComputedStyle returns its final style computed by a browser.\nEven though it causes a bug in some points, it should be fixed in another way. I'm afraid I close this PR now. I'll check about the issue.\nI'm sorry, and thank you for the help.\n. Hello,\nI looked into it a little bit and found that it happens with a browser native scrollbar too.\nhttps://jsfiddle.net/gbfLazpx/30/\nIt happens in WebKit browsers like Chrome and Safari. My guess is that the size of each image is quite large(5061x3374) and the browser rendering engine just can't handle it smoothly. If it's your case, please consider using smaller images.\nIt seems like no perfect-scrollbar issue, and I close this now. Please feel free to ask further.\nThanks,\n. Just for information, I'm sure this used to work. As I remember, at that time a scroll event was fired when a text is searched even in a overflow: hidden container. I've just tried it in the fiddle, and it didn't work well. I guess there has been a browser-level update for it.\nFor the time being, I'm not sure there can be an effective workaround for this.\n. @rolandtoth 's solution is actually quite nice solution for scrolling, but as I know hiding scrollbar is only supported in webkit browsers.\n. Having overflow: hidden is by design, to emulate scrolls. Using overflow: scroll means rewriting the plugin completely. I may also not choose to use separate implementation only for webkit browsers, I'd leave it to user's choice as it can be done quite simply by checking UA in user script.\nI've added this to known Caveats.. Looks like a proper point, as even using dataset seems slower. Any other opinion?\n. Thanks!\n. Done. gulp build may be good enough.\n. Some changes look good. Here are the only things I want to keep:\n- I think CONTRIBUTING.md is not specifically for github. It's definitely okay to keep it in the root. Other famous projects such as jQuery and React are doing the same.\n- I think using \" or ' is completely up to users. W3C also supports using both. I personally prefer single quotation marks and there is no need to change it(I know there are examples written with \" though). I may change them, but only when I really should. Sorry :smile: \nOther changes are perfect. Will checkout and modify a little bit.\n. Merged manually: f20a8532ffe412d03068ca79c16f7cdfba19f206\nThanks!\n. I actually think this is valid point. I wrote edaeccebf264a5eb3317c2a25448ec3ce3082221 for this, but I should be very careful when releasing a new version. Changing the dist directory makes some CDNs not to work properly as they refers to the original min directory automatically.\nThus I will leave this issue with the TODOs until the next release.\n- [x] cdnjs\n- [x] JSDelivr\n. First of all, thank you for your praise! I'm happy to hear that PS helps others.\nFor the issue, emulating virtual scroll is not cheap at all. It is likely to have a performance issue, especially for mobile devices which do not have enough computing power like desktops. However we may see if the issue can be solved, or get better at least. Unfortunately I don't have an android device, so it may take a while. Any help or contribution will be welcomed.\nThanks.\n. Even though we address most of performance issues in PS touch scrolling, I think there are still problems in some devices. I suggest using native scroll instead of scroll emulation like PS for performance-sensitive situations like mobile, if possible.\n. First of all, thank you for the contribute.\nI think this is an issue of Prototype.js, none of PS. A library shouldn't override remove of Element.prototype, as it is already implemented in Web APIs. Also, even though one is implemented as a polyfill, parentNode should be checked before removing. You can see the documentation here. I'm afraid that I think Prototype.js should fix the issue.\nI'm sorry that I cannot merge this PR, and thanks again for your help.\n. This can be easily implemented with a timer like this example: http://jsfiddle.net/d48bdzba/2/\nBut we are very careful to accept this as a feature because using a timer is usually expensive. Surely, any help will be welcomed!\nThanks.\n. I think I close this now as the example may be helped. Any PR on this issue will be always welcomed!\n. The issue is because when the element is hidden, PS cannot calculate the geometries of scrollbar components, such as the lengths, offsets, etc. To fix the problem, you can call .perfectScrollbar('update') after the element is displayed. Here is the updated fiddle for the example:\nhttps://jsfiddle.net/gbfLazpx/71/\nThanks!\n. Hello,\nTo use with require, you should install the plugin with npm, which is installed together with node. It does not work with distributed scripts. You can install this plugin with npm like below:\nnpm install perfect-scrollbar\nYou can also find more details in the following sites:\n- https://nodejs.org\n- https://www.npmjs.com\n- http://browserify.org\nThanks!\n. I think this is actually not a PS issue, but a general implementation detail. Using fixed header for table can be implemented in several ways, such as using position: absolute, overflow: auto, etc. You can find the detailed methods with googling.\nperfect-scrollbar is just a scrollbar plugin, so it has nothing to do with the table header. If there's any further issue concerning ps or I misunderstood the problem, please feel free to reopen and tell me.\nThanks.\n. I've confirmed the issue and applied the change.\nThanks.\n. Hi, thank you for the report.\nCould you please provide a fiddle to reproduce the issue? It really helps people to dig the problem down. Writing a fiddle can easily be started with the following links.\n- perfect-scrollbar fiddle\n- perfect-scrollbar fiddle with jQuery\nThanks in advance.\n. Closed for the inactivity. Please feel free to re-open if you have further problem.\n. @kaganvmz, can you please check if @kstover's solution works? I'm not familiar with jQuery UI sortable and if the solution doesn't work, a fiddle to reproduce the issue may be needed for debugging.\n. I close this issue now. Please feel free to reopen if there is further problem.\n. Moved.. It is not supported by default now. I've created the issue #508, and let's see how we can handle this.\nThanks for the suggestion.\n. It may be because the geometry of the container changes after resizing. Please try adding the following code.\n``` js\nvar container = document.getElementById('the-container');\nwindow.addEventListener('resize', function () {\n  Ps.update(container);\n});\n// or with jQuery\n$(window).resize(function () {\n  $('#the-container').perfectScrollbar('update');\n});\n```\n. Is what you would like to do preventing wheel event or preventing only one using trackpad?\nIf it's the former, try setting handlers option to ['click-rail', 'drag-scrollbar', 'keyboard', 'touch']. If it's the latter, it is not supported now and may be a bit tricky.\n. I'm sorry. The feature is not released officially. Will release now.\n. I've just released 0.6.11 on both npm and bower. It will resolve the problem. If there is still the problem, please feel free to reopen the issue.\n. Actually, this feature is once implemented as selection for handlers option. You can test it out with {handler: ['click-rail', 'drag-scrollbar', 'keyboard', 'wheel', 'touch', 'selection]}. It is currently disabled by default as it creates more issues.\nPerfect Scrollbar basically simulates scrolling by script and it is sometimes very difficult to implement as the native scrolling works. Any contribution on this will be welcomed, including improving the selection handler or rewriting it completely.\nThanks for the report.\n. Selection scrolling will be deprecated in v1. Instead, there will be webkit method where we can just use the native scrolling with hidden native scrollbars. It's only for webkit browsers, though. For other browsers, we will provide plugin interface to write users' own scroll emulation. Sorry that I cannot help so much.\nThanks again.\n. If you need to throttle the event, please consider implementing it in each handler. You can google it with keywords like throttle or debounce in JavaScript.\n. It is not possible to use visible and hidden together for overflow-x and overflow-y. It is not a problem or bug, but a W3C spec or browser implementation. Please refer to the following links\n- CSS overflow-x: visible; and overflow-y: hidden; causing scrollbar issue\n- W3C Overflow Spec\nThanks.\n. Currently there is no easy way to do this in PS. I would suggest implementing it, as you said, by calculating offset top of the texts and setting offsetTop to it.\n. Hmm, I still think this is not to be implemented in PS. PS is just a scrollbar emulator, not about scrolling action itself. PS use the default scrollTop and scrollLeft, so you may consider using it with other scrolling libraries supporting this feature or implementing it.\nI'm really sorry that I cannot help so much. I close this issue now, but I always welcome discussion. Please feel free to leave any comment.\nThanks!\n. You can theme it with scrollbar-y-right. Please refer to custom-theme.html and custom-theme.scss in examples.\n. #### Getting a scroll position:\n``` js\ncontainer.scrollTop // scroll top\ncontainer.scrollLeft // scroll left\n// or with jquery\n$(...).scrollTop();\n$(...).scrollLeft();\n```\nScroll to given position\n``` js\ncontainer.scrollTop = 100; // scroll to 100px from the top\nPs.update(container);\n// or with jquery\n$(...).scrollTop(100);\n$(...).perfectScrollbar('update');\n```\n. I'm really sorry that I have no idea about Portugues :sweat:\nI actually translated texts with Google Translator and the issue may have been resolved?\nI close this issue now. Please feel free to reopen if there are further problems.\nObrigado!\n. Hello,\nI've just checked the fiddle and unfortunately slick carousel does not use scrollLeft to scroll the content. It uses translate3d to virtually move its content. It means, it may be difficult to use both of them together, as they use different ways for scrolling.\nSorry and thanks for your interests on this plugin!\n. Sorry for the late response. I'm not sure when this patch is needed. Can you explain a bit? Also, please don't remove trailing 2 spaces from README.md. They are for new lines.\n. I had a look again.\n\nSetting position: fixed doesn't simply fix IE problem, as PS' scrollbar logic itself depends on absolute positioning.\nHooking window's scroll event is much more performance-critical than local scroll hooking. I may not depend on it.\nI may not add extra branch for no-position case.\n\nI am really sorry but I may not accept this PR. I know that IE11 scrolling issue, but it should be solved differently.\nThanks again.. You can set scrollTop or scrollLeft with vanilla JS or use .scroll() of jQuery.\n. No, PS doesn't intentionally remove native easing. But the wheel scrolling is implemented with a custom wheel delta calculation, and it may not work well with some browsers. It is implemented in mouse-wheel.js.\nI've just checked in Chrome and Firefox in OS X and the scrolling works just fine. It could be a Windows-specific problem, but unfortunately I don't have many Windows environments(only VirtualBox). It is surely possible to test in VirtualBox, but any help from others will be super-welcomed.\nThanks for the report!\n. What @azharuniverse pointed out is different from the original issue. Absolute positioned scrolling will be removed in v1, so the issue will be resolved too.\nI close the original issue for its inactivity. It can also be resolved in v1. (I feel like I'm spamming v1, sorry about that \ud83d\ude05)\n. I don't understand the situation. Can you please provide more information, preferably a fiddle?\n. Yes, when you set scrollTop, you may need to call update.\n. You're doing right with scrollTop. We need update. About database query, I'm sorry but I cannot answer without further context. But I guess it is not concerning PS itself.\nI close this issue here. Please feel free to reopen if there is any further problem.\n. Duplicated with #507\n. It is not supported by default now. I've created the issue #508, and let's see how we can handle this.\nThanks for the suggestion.\n. This will be officially supported in v1. It's part of the v1, so please refer to v1 docs.\n- Discussion\n- Design Draft\n- Dev Branch\nHere is also a quick fiddle for who really want to know how scrollbars out of container work!\n. I don't understand the situation. Can you explain about your issue more specifically?\n. Closed for its inactivity. Please feel free to re-open if there is any further issue \ud83d\ude04 \n. minScrollbarLength will set the minimum length of scrollbar.\n. Will check now for the option. Can you please prepare a simple fiddle if possible?\n. Oh, you called .perfectScrollbar() twice. Please check here: https://jsfiddle.net/x951d155/\nCurrently options can be set only once when initializing the plugin.\n. Hello, you may have been importing the script from js/min/perfect-scrollbar.min.js or js/min/perfect-scrollbar.jquery.min.js. Now we unified the folder structure the same with css, and the min directory is removed. Now the scripts are in js/perfect-scrollbar.min.js and js/perfect-scrollbar.jquery.min.js. Sorry for the inconvenience. The following issue and commit include the content.\n- #472 \n- edaeccebf264a5eb3317c2a25448ec3ce3082221\nIf it's not because of this change, there must be something wrong. Please feel free to reopen the issue if then.\nThanks\n. I really liked the feature and I think there is no reason we do not set this as default behaviour. I actually worked on this, also with applying @DanielApt's suggestion of expanding before hovering. For the result, please check out 26852236cce8336fbdc3e975eff8871d978a2846 and examples in the master branch.\nCurrently patches are not yet synced because of GitHub issue.\n. We actually do not use z-index at all, so it must show properly. Can you provide a fiddle reproducing the problem? You can start from forking basic fiddles.\n- Vanilla JS: https://jsfiddle.net/DanielApt/xv0rrxv3/\n- jQuery: https://jsfiddle.net/DanielApt/gbfLazpx/\n. Closed for its inactivity. Please feel free to re-open.\n. Hmm, I've tested examples and it's working fine without changes in CSS. Is there any CSS or script change you have made? I understand sometimes it's difficult to find out how to reproduce an issue, but it would be really helping us to address the issue. Can you consider creating a fiddle to reproduce the problem? You can start from forking basic fiddles.\n- Vanilla JS: https://jsfiddle.net/DanielApt/xv0rrxv3/\n- jQuery: https://jsfiddle.net/DanielApt/gbfLazpx/\n. I agree that it's somewhat difficult to add custom styles, and that's why I consider it from scratch in v1. I really appreciate your comment.\nI close this issue now. Please feel free to ask us if you have further problem. Thanks!\n. It seems PS cannot calculate the height properly. It looks like a bug. Thank you for the report. Unfortunately, for the time being I don't have enough time to look into this because of my relocation for a job. I will investigate ASAP. Any contribution will be thoroughly welcomed.\nAlso, about your suggestion on alwaysVisible, I'll open a separated issue. Thanks again!\n. In v1, PS will use a new method to calculate the size of scrollbars, which works well with border-box too. It's still under the heavy development, but you can check a quick look here.\nThanks.\n. As already said, html or body is not a normal container element, so PS may not work properly. Please consider implementing it with a full-fetched div wrapping the whole body.\n. It's not to run on Node.js. It is to run on browsers. The error occurred because there is no document in Node.js. Why are you running a scrollbar plugin on Node.js?\n. I now understand your situation. A React component sometimes uses itself as a server-side renderer. PS is not designed to run in a server, so please consider disabling PS when used in the server. It can be done by wrapping with a condition to check document like below.\njs\nif (document) {\n  Ps.initialize(element);\n}\n. @ethanresnick Yes, now SSR is common in the JS community, and we should take care of this. I will absolutely accept the PR.. #650 resolves this.. This is because we use CSS to make it visible with the :hover pseudo class. It is impossible to stop propagation of :hover only by CSS. I would recommend modifying :hover to something like .hover in CSS and manually applying the class with scripts. It can be done without changing perfect-scrollbar's JS code.\n. There is no really good way to resolve the jumpy scrolling issue in IE. I would say it is absolutely an IE rendering bug concerning scrolling. Fortunately, the issue is fixed in Edge. Please check the following issue threads about the issue. #160 #435 \nEven though the threads are closed, I still welcome any contribution. If you come up with a nice idea, please feel free to let me know.\n. I have just tried and it seems working well in both iOS Safari and Google Chrome devtool. Can you explain the problem more specifically?\n. Thanks!\n. I'm not sure if it's an issue of PS or Bootstrap Dropdown. Can you provide a fiddle to reproduce the problem? You can start from forking basic fiddles.\n- Vanilla JS: https://jsfiddle.net/DanielApt/xv0rrxv3/\n- jQuery: https://jsfiddle.net/DanielApt/gbfLazpx/\n. Found the reason. It's because pointer-events: none; set by .ps-in-scrolling. It makes stopPropagation doesn't work for mouse events. It seems like it's duplicated with #547, will fix there.\n. PS may not work well with html or body. Please create a div having 100% width and height and apply PS for it. The template is doing the same thing.\nThanks.\n. First, you may not able to scroll google.com because of cross-origin limitation. If you'd like to use it for an iframe with the same origin as the container page, please refer to the iframe example and other issues. I personally don't recommend using PS for iframes though, as it's just not an appropriate container.\n. I understand. It's because the scroll event is happening in the iframe and we cannot capture the event in the container because of, as I said, cross-origin limitation. If you would like to bubble up the scroll event from iframe to container, you should manually handle scroll event and propagate it to the container frame.\n. I don't understand. Can you please explain more?\n. Because div is just a normal container element. Cross origin doesn't apply to div and also scroll event is not trapped in div. div and iframe are basically just different.\n. You can refer to my answer in this issue: https://github.com/noraesae/perfect-scrollbar/issues/327\n. Closed for the original author seems deleted. Please feel free to open an issue if there is further problem about this.\n. In v1, default CSS won't be included, as it becomes simple enough for users to build from scratch. Wide range of examples and guide to write CSS will be also provided.\nThanks for your interests and helps!\n. This will be supported by default in v1, as you can actually place scrollbars anywhere. Please refer to v1 docs for the detail.\n- Discussion\n- Design Draft\n- Development Branch\nThanks!\n. PS will have different API in v1. I really appreciate the work, but I am afraid I will adopt enable/disable after the new API is implemented.\nI am really sorry that I do not merge this.. Hello, I'm sorry for the late response.\nI'm recently busy for my personal and professional works and response sometimes becomes very late. I will reply whenever possible, so please don't spam 'any update' comments.\nAbout middle click scrolling, PS don't yet support it. IE may use scroll event for it, and that's why it works only for IE, as I guess. There is an issue related with this. I'm not sure when I can work on this, but I always welcome any contribution.\nThanks again.\n. Thank you very much for your understanding.\nI think you can implement it manually by hooking middle click, but I'm not sure it works out well. I'm afraid I cannot find a simple workaround.\n. Thanks!\n. Looks great. Thanks!\n. Thanks for the report!\n. swipePropagation seems like not working. Will investigate. It may take a while, as I recently cannot have enough time to work on PS because of other works. And when I have, I'd like to focus on implementing v1. I will try my best though. Any contribution will be welcomed too.\n. I've fixed this in the master. It'll be released as a new version later, but you can always test it by manually building from source.\nI've removed swipePropagation option itself, because it's true by default and it's exactly how native scroll works. Also touch propagation cannot be implemented without dropping the option. Now all touch events will be properly propagated.\nIf there is a new problem by this fix, please upload a separate issue. Thanks.. Sorry that it changed how SCSS was written. I think customising CSS in the current version of PS is quite difficult. I'm thinking about providing better way in v1.\nFor the workaround, the change is only a style change, so you can still just use the dist CSS of the previous version while using the new scripts. You can also just write your own CSS by modifying the source.\nThanks.\n. I'm glad you found the solution. The reason why it's not included as a feature is, as I mentioned in the previous issue, performance. There is no native way to capture scrolling stops, and we need too keep a timer being updated in every scroll event, and it's not cheap at all. I thought it's better for users to decide whether they use the event or not. It's just a few lines of code, so users may have no difficulty without any API, I think.\nAnyway, I really appreciate your interest \ud83d\ude04 \n. I've made minimal case: https://jsfiddle.net/eL7yku9e/3/\nNot sure why this happens. Will investigate.\n. Found the reason. Thanks for your report!\n. Thanks, @people-06!\nPlease refer to Events doc if further details are needed.\n. I'm afraid I'm not aware of how it works on RTL, but can't the scrollbar position be adjusted using CSS?\n. Closed for its inactivity. Please feel free to reopen if there is further information.. Duplicated with #538, swipePropagation doesn't seem working properly now. Will continue on the issue.\n. Fixed.\n. Hello, I confirmed this doesn't work properly. Unfortunately, I'm working on the next major release, which includes completely new logic, so I may not work on this. However, you can easily fix this in keyboard handler by yourself. Sorry for your inconvenience!\n. This is somewhat difficult to fix in the current design. However we will be easy to handle this case in v1 as we can literally put scrollbars anywhere, style them anyhow. Sorry that I cannot help on this, but it may be much better to implement v1 ASAP. Please wait a little. Thanks.\n. Thanks!\n. It's a nice idea, but I'm currently planning to change PS API to be simpler and better. This work may come later. But thank you very much for the suggestion \ud83d\udc4d \n. Thanks!\n. @frederikprijck Sorry. I've just published 0.6.14 containing the definition. Please try it out.\n. Hmm, weird. I'm actually not familiar with recent TS conventions. Isn't it enough to specify typing field in package.json? Doesn't TS load the type infos with just import?\n. Thank you very much for sharing the case. I also guess that there may be a way to specify the location of the .d.ts file for a module. Please feel free to leave a comment or upload a PR.\n. Here are some more detailed contents.\n- Full-stretched scrollbar customisation\n  - Geometries including width, height, padding, margin, etc.\n    - Will make scrollbar DOM simpler to make it easy to write CSS.\n  - Scrollbar mount location (even outside container!)\n    - This enables user to place scrollbars literally anywhere.\n    - This disables silver-bullet CSS style. Thus, a default CSS won't be provided(!).\n    - Wide range of example CSS will be provided for users to refer to.\n- Scroll handling\n  - PS will handle only the scroll event, no wheel, keydown, click, etc.\n    - Use requestAnimationFrame to optimise performace.\n  - For any other scroll emulation, a plugin API will be provided.\n    - PS.createEmulator(...)\n    - Each emulator must define actions for init, pause, resume, destroy events.\n    - For each event, essential information will be passed as parameters. (TBD)\n    - Don't worry, current scroll emulations will be ported and maintained as official plugins. But users can always write and release their own scroll emulations!\n- update() method\n  - Still support manual update.\n  - But MutationObserver will be used to update responsively. This will actually cover most cases where update() needs to be called now.\n- Won't use Babel, to support basic Browserify or Webpack usage.\n- Drop jQuery adaptor\n  - The new API will not look adequate with jQuery.\nNow I'm just brainstorming how to make the next release awesome. Please feel free to leave a comment and discuss!\n. Considering to use Flow. If using it, may consider Babel again as anyway the source should be bulit.\n. I've just written a design draft for PS v1. Please take a quick look if interested, and feel free to drop a comment!\nhttps://gist.github.com/noraesae/b5202b6131509a46c7e041791036ca86\n. Today I've looked into the current issues. Many of them have been marked as wont-fix because they can be resolved with v1. I somewhat feel like I spammed 'will be resolved in v1' too much \ud83d\ude05. I feel really sorry that I cannot help the issues in the current version, but nowadays I'm too busy to focus on both versions because of my professional works and other projects. Implementing v1 is also kinda slow because of them, but I promise I will do my best on it.\nThanks.\n. I can finally continue working on this again! Sorry for everyone that I haven't been on this very actively.\nI recently found that building 1.0 from scratch is hard enough. The features discussed above will remain, the goal won't change, but I am thinking about starting from modifying the current code base.. Hi,\nI am really sorry that I have not contributed on PS recently. This year, I started to work on several other projects, both personal and professional. I usually check PRs, accept them, and release a new version, but I do not really have time to resolve issues for the time being. It is not really about funding, but about priority.\nAbout 1.0, as I have mentioned in the previous comment, I may not consider rewrite the code base from the scratch and publish a new breaking release. Rather than that, it would be better to refactor and improve the current code base. So specifically said, the next release may be 0.7 or 0.8, and 1.0 is far.\nI may close this issue for the time being. I cannot promise the improvement work will be done in the close future, but will do my best. If anybody's interested, PS's always open on PRs and new contributors.\nThanks again for your interests.. Moved to Project\n. I'm working on the next major release, and in the next version, styling will be completely different. So I may keep this as it is and will fix this in the next release. Surely, I still accept PR to fix this, so please file one if you have. Sorry for your inconvenience!\n. I've fixed this. Will release new version in a while. Thanks for your report!\n. Currently, it's not supported and I am afraid it may not be supported in the close future. The original purpose of PS is to provide scroll emulation working like the native one, so actually the wheelPropagation option was not needed, as it always propagates in the native scrolling. However, many people wanted the feature and I unwillingly decided to add it. I may not make the case more complicated.\nSorry that I cannot help in this case, but you can freely fork the project and fix it for your use case. You can find the code around shouldPreventDefault in src/js/plugin/handler/mouse-wheel.js. If there is any question while modifying it, please feel free to ask me.\nThanks for your interests again.\n. It looks like a styling issue. Please check if any element or style is affecting the white space. It may be easy if any browser inspector is used. If it still looks like a PS issue even after checking it, please feel free to reopen with a fiddle or example page reproducing the issue.\n. Hmm, because PS doesn't affect on the container's DOM structure, there should be a specific element or style causing this issue. What do you mean by 'scroll suddenly'? Could you please provide a minimal example?\n. Thanks for the demo. I now understand the situation, but still cannot come up with a reason. Can you please check what actually occupies the space using the inspector?\n. Hmm, can you please check if the PS stylesheet is properly loaded? It seems like the scrollbars are not positioned and displayed properly. Also, please check if the space disappears if you remove the scrollbar rails in the inspector, using the delete key.\n. Then it's because the content or geometry of the container is updated dynamically. I still cannot tell without seeing the actual source code, but if element.perfectScrollbar('update') resolves the problem, it's highly likely to be a sync issue. Please call the update after any visual update is performed. There will be auto update feature in v1, but now update should be called manually.\n. First of all, if you're using PS in more than 200 places, please consider dropping PS for most of them. Hooking a scroll event is not cheap at all, perf experts usually recommend each page having less than one or two scroll event bounds.\nAlso, using 200 PS instances doesn't mean you should put 200 updates in the code. Try separating the PS parts into a separate module.\n. Then please ignore the first advise. You may consider modularizing the update part into a module, calling update in it, as it's how PS is designed to work.\n. If update doesn't fix the problem, update may be called before the layout is fully loaded.\nAs you already know, there is no silver bullet to fix every problem. Please consider taking a time to find out the original reason of the problem. It must be possible with a help of the inspector, because what is causing the issue must be some elements or styles(really, that's all in browser rendering). Surely, I can help investigating, but only when I have a right (and preferably minimal) example or concrete guide to reproduce the problem. Without it, I cannot do anything even though it's really a PS bug. It's simply because I don't know what's happening when your app is scrolling.\n. Sorry that I cannot help so much. If you have any further problem, please feel free to ask me.\n. Interesting. For the time being, I have no idea about the passive event handler, but I will absolutely look into this, at least before working on v1.0.\n. I've looked into the doc and found it can help PS, but seems difficult at least for the time being. Currently wheel and touch event logic is too complicated to safely apply the passive event support. I may consider using this after I finish v1 implementation and the logic becomes more straight forward.\n. I've looked into the feature. Shortly, it is difficult to use it for the time being. Using passive event prevent scrolling from being blocked by main thread, by ensuring preventDefault() is not called. However, PS uses preventDefault() in the events for checking whether and how it should scroll. It may be possible in the future by modifying the logic and removing the predicates from PS, but at least not now.\nBesides the passive event support, you can easily remove the warnings. Using passive events isn't the only solution for the problem. The warning means that scroll events are delayed because of heavy job in main threads. Thus, the problem is actually the heavy job in main threads, not the scroll events themselves. To fix it, just remove them and make the page light. If it is difficult to make them lighter but the problem still exist, please consider using native scrollbars. Keep in mind that using custom scrollbar is bad practice for performance.\nI am afraid I close this issue here. If there is any good suggestion or implementation about this issue, please reopen it or upload a PR.. Hi,\nFirst of all thank you very much for your praise.\nUsing PS in html or body is not recommended, because they are not a typical DOM element. PS is not ensured to work with them. Please consider creating a div having full width and height, or just using browsers' native scroll(global scroll hooking is a bad practice!).\n. You shouldn't set them. Rails are moving because they are inside the container, and the container scrolls. Absolute positioned elements are positioned relative to its positioned parent.\nI'm not sure what's your case, but the rails should display well without any extra styles. Can you provide a fiddle to explain your case?\n. Closed for its inactivity. Please feel free to reopen if there is further information.. This may be the CSS issue, as hiding the native scrollbar for overflow: hidden is done by the browser, not PS. Please check if the style is applied well with DevTools.\nI close this by inactivity, but if you have further question, please feel free to ask.\n. I've check the page and it may have been updated? It seems not using PS for the time being.\nUnfortunately, there is currently no way to dynamically change themes. The only way is to destroy and the initialize again. I've added an example examples/custom-theme.html, so please refer to it.\nThanks.\n. This looks like a right rail-click handling. Will work on this.\n. Fixed. Thanks!\n. Sorry for the bad English. The 'right' means 'correct'. It means it's the correct way to handle click-rail. It surely works with left click \ud83d\ude04 \n. Please add transition style like below:\ncss\n.ps-container > .ps-scrollbar-x-rail > .ps-scrollbar-x {\n  transition: .2s linear left;\n  /* maybe other vendor-prefixed transitions */\n}\n.ps-container > .ps-scrollbar-y-rail > .ps-scrollbar-y {\n  transition: .2s linear top;\n  /* maybe other vendor-prefixed transitions */\n}\nYou can freely change the duration and timing function.\n. Oh, sorry I mistook. PS don't use animation for the container scrolling. It uses plain scrollLeft and scrollTop, so the container cannot be scrolled smoothly with CSS animation or any. It may be possible with JS animation(using setInterval), but it's a big performance burden and must be quite error-prone. If it's really needed, there may be other custom scrollbars using CSS styles to emulate scroll, such as translate, or top and left.\nSorry that I cannot help so much.\n. I've fixed this with your change. However, I don't recommend using the selection handler, it can possibly cause further problem. I plan to abandon it on v1.\nAnyway, thank you very much for your help!\n. It was known bug for Firefox: #247 #311 \nHowever, it was resolved in the newest version of Firefox. I've just tested it and it works just fine in my env(Firefox 49.0 macOS). It could be OS specific problem. Can you specify your env?\nIf you need a quick work around, please revert the following change. It's the commit which removed the workaround: eb02d5ae65ea6d9ea41ab149980f375c78efcebc\n. I reverted the removal of workaround. I also added info to Caveats.. Yes, it's what swipePropagation is for. This seems like a bug. Duplicated with #538, so will continue there.\n. Hmm, a variable name in a CommonJS module shouldn't have anything to do with a filename. If it does, it's probably a config issue. Can you provide more detail?\n. Closed for the inactivity. Please feel free to reopen with more detail.\n. Did you install perfect-scrollbar with npm? I'm not sure about Angular CLI, but if it's using Browserify or Webpack internally, it should find modules installed with npm. Please check if perfect-scrollbar is installed via npm and exists in node_modules.\n. Did you add declare module 'perfect-scrollbar'; before importing it?\nIt seems like Angular2 needs TS definitions. TS definition is not provided with perfect-scrollbar, so you may declare it in typing.d.ts and then load it via declare module 'perfect-scrollbar';. I don't think there is a bug in Angular CLI or Webpack, so it may be something to do with TS.\n. Good to hear it worked. \ud83d\udc4d \n. I appreciate your contribution. However, it's actually what selection scroll does. It is disabled by default because it's really buggy and creates more bugs. I'm sorry but I decided not to emulate this kind of scroll.\nThanks again.. Oh, you are right. Sorry for my misunderstanding.\nI currently do not consider adding more scroll handler, as I think the current set is quite minimal and if another scroll is needed, the native scroll should be used. However, I will definitely take another look.. It's actually not a bug. Clicking a rail will scroll a page, like how browser native scroll works.\nhttps://jsfiddle.net/v803xtsn/11/\n. It's fixed in the next branch, with ps__child and ps__child--consume.\n\nhttps://github.com/utatti/perfect-scrollbar/blob/next/src/handlers/mouse-wheel.js#L6\nhttps://github.com/utatti/perfect-scrollbar/wiki/FAQ#scrolling-children-inside-perfect-scrollbar\n\nThanks for the report!. Actually, I do not know much about jspm. Can anybody confirm this change?\n. It seems to me that the problem is not about height, but the offset top. Please check if your container is positioned, for example with position: relative?\n. Great to hear it worked!\n. As found in other former issues, using a DOM based custom scrollbar in iframe is somewhat tricky. perfect-scrollbar is not designed to work well with non-container tags such as iframe or textarea. There is a limited case where it works and it's provided as an example. You may consider running it in a web server(gulp serve) because of iframe cross-origin.\nIf it doesn't apply well to your case, please consider using native scrollbar.\n. Sorry, it's been (really) a while! Fixed in 087964e1451d9c3ad763d9ba340dd00d9a0a04d6.. Do you mean 'default export' of ES6 modules? PS doesn't use ES6 module on purpose, so please use CommonJS compatible module system. I'm not sure how TypeScript module system works(as you said it's Angular2, I guess it's TypeScript) but it should be compatible with CommonJS somehow.\n. Thanks!\n. It's been fixed with this:\nhttps://github.com/noraesae/perfect-scrollbar/commit/4593eb9115e42046c53c8d57be50a5633e948510\nWill be published under the next release.\n. Because it's not released into npm as a new version. Will do in a while.\n. 1. The scrollbar height is not to be set by $bar.height(). Please use minScrollbarLength and maxScrollbarLength options.\n2. The ps-active-y class is not to be added manually.\n3. About the problem, it's difficult just by this snippet of code. Can you provide more details? An example page or jsfiddle will be perfect.. Closed for its inactivity. Please feel free to reopen if there is further information.. Looks like a Chrome rendering bug. For the workaround, you can force the fixed element to be rendered by GPU by putting transform: translateZ(0).\nhttps://jsfiddle.net/g7p9hdhv/3/\nHope it helps.. ps-container is no more used and also shouldn't be nested. Please use .ps__child instead.. It works with no problem in macOS Chrome. Unfortunately I do not have a Window machine. Can anybody confirm the problem?. Thanks for feedback. I close this.. Duplicated with #596. The following comment is copied from it.\n\nThis can be only done by JS, and even can be done not in perfect-scrollbar itself. You can just check if scrolling is idle for a while and then hide scrollbars with CSS.\nHowever, checking if something is idle in JS is not cheap. We eventually need to use timers, which I do not like to include in perfect-scrollbar by default.\nI am sorry I cannot accept this feature request. You can surely implement one outside perfect-scrollbar as mentioned above, or fork the project and create your own version.\n\nI am really sorry again that I cannot accept the feature request.. Thanks. I have little knowledge of jspm. Could you update it when the optionals are released?. Moved to #571. I confirmed the problem. I recently do not have enough time to contribute to perfect-scrollbar, and may take quite a while for me to fix this. This issue is related with the following file.\nhttps://github.com/noraesae/perfect-scrollbar/blob/master/src/js/plugin/handler/drag-scrollbar.js\nI hope I can see a PR concerning this. I will surely try to fix if I become idle, which I cannot be sure when.. I will work on this.. PR merged. Looks great. Thanks!. This can be only done by JS, and even can be done not in perfect-scrollbar itself. You can just check if scrolling is idle for a while and then hide scrollbars with CSS.\nHowever, checking if something is idle in JS is not cheap. We eventually need to use timers, which I do not like to include in perfect-scrollbar by default.\nI am sorry I cannot accept this feature request. You can surely implement one outside perfect-scrollbar as mentioned above, or fork the project and create your own version.\nThanks!. It may be a bug by how VMware emulates trackpad events of macOS. I assume that it is out of scope to look into VM emulation. Unfortunately I neither have a machine to test it. However I will surely accept any reasonable PR.. It is a warning, so may not become an instant problem. However, it is definitely worth looking into it. Thanks for your report.. I added this to Caveats for the time being, as it's kind of inevitable in the current code base. Nonetheless, any kind of contribution will be welcomed. Please feel free to suggest a solution or upload a pull request.. What do you mean with scroll fading?\nIf you means scroll easing, we do not specifically add additional scroll effect. If there seems to be fading, it's because the browser makes it work like that. This is intended and may not be changed.\nIf you means scrollbar fading on display/hide, it can be easily disabled by modifying CSS. Please remove transition properties from CSS.. Sounds good. I personally do not have any experience with BEM. Could you make a PR?. I've just merged the PR. Great work! \ud83d\udc4d\nThis is a breaking change, and may take some time to be actually released with a new version. Please wait a little. \ud83d\ude04 . Sounds good. Would you make a PR?. Looks nice. Thanks!. It's basically because of IE bug concerning synchronous update on scroll properties. IE renders scroll properties asynchronously, even though it's updated in sync with other styles.\nI think using CSS transform only for IE is not a way to go, as it must result in more branches in code and eventually implementation issues.\nAs I mentioned in the original issue, I may close this. This time I will add some info in README and Wiki too.. Thanks for your opinion. It sounds interesting, but I am afraid I would not add extra functionality other than ones native browsers already support. The current p-s is already quite tricky and buggy, so adding more is not an option, as I think.\nThanks again.. It should check classList, not className. However, it's fixed in the next branch.\n\nhttps://github.com/utatti/perfect-scrollbar/blob/next/src/handlers/mouse-wheel.js#L6\nhttps://github.com/utatti/perfect-scrollbar/wiki/FAQ#scrolling-children-inside-perfect-scrollbar\n\nThanks for your contribution!. Disabling axis per container is possible via suppressScrollX and suppressScrollY. Disabling axis per scroll is not possible unfortunately, and quite difficult to handle. Sorry for the inconvenience.. It may be tricky to implement this feature with JS. I may go with adding overflow-anchor: none; by default. Thanks for your report!. Sorry for the late response. Can I have a detailed page or snippet to look into? It is difficult for us to investigate the issue without 3rd-party library prepared already.. Closed for the inactivity.. You are setting left and top position, not the scrollLeft and scrollTop. PS doesn't use left or top styles. To update the position, updating scrollLeft and scrollTop is enough. Also, class names shouldn't be removed for PS to properly work.\nFor the proper usage of PS, please read its documentation.. Hmm, I think it's a valid point. Will fix this.. There is no function in JS to automatically bind something in new objects. Your example on events is not binding any listener dynamically, but it's just a technic called event delegation.\nTo bind new PS, you can simplify call again after it is added.\njs\nvar $newDiv = $(\"<div>\", {id: \"foo\", \"class\" : \"container\"});\n$newDiv.appendTo(somewhere);\n$newDiv.perfectScrollbar();\nPlease beware that jQuery support will be dropped in the next release.\nThanks.. Hello, thanks for your report.\nCan I have more information concerning initialization, preferably a code snippet? Setting wheelPropagation: false and scrollYMarginOffset: 5 may help, but I'm not sure without looking into code.. Please use perfect-scrollbar.jquery.min.js instead of perfect-scrollbar.min.js.\nhttps://jsfiddle.net/DanielApt/gbfLazpx/. @reeslo jQuery support is dropped from v1.0.. Now the main branch is next, and it's applied in c580f976e3a4ec844668a4bf351cfd64cbc47971 with minor fix to check window.scrollY.. To activate scroll X, it should have specified width where content can be overflowed. Currently the container has min-width, but no max-width or width. Currently the width is just full-content width and surely scroll will not work. It's not an issue of PS, and you can see it with commenting out PS part.. It's because the scroll event is consumed in the iframe. Please refer to the iframe example.\nhttps://github.com/noraesae/perfect-scrollbar/blob/master/examples/iframe.html. angular2-perfect-scrollbar is 3rd-party plugin, and I'm afraid I'm not familiar with Angular. Please refer to the doc and issues of angular2-perfect-scrollbar.. It's the problem of z-index. PS do not enforce any z-index, and you can freely add your own style.\ncss\n.ps__scrollbar-y-rail {\n    z-index: 1000;\n}\nI'm not sure if it's better to add a default z-index to rails.. We once had this, but it was buggy and resulted in removal. I may not add more scroll emulation further, as the current ps is tricky enough. If this kind of scroll is essential, native browser should be used. I'm really sorry for your inconvenience.. It's because you already include scrollbars in HTML, which you shouldn't.\nhttps://jsfiddle.net/xv0rrxv3/486/. You can do it with the following option:\njs\n{\n  suppressScrollY: true,\n  useBothWheelAxes: true,\n}. I've added /dist to repo. Thanks for your opinion!. Thanks for your report. This issue should be addressed. I think adding ps--scrolling-x/ps--scrolling-y on touch scrolling will be the easiest fix for this. I will work on this in a while, but anybody can jump in whenever before status:ongoing is added.. Will do this.. Actually I've noticed that scrollbars are actually displayed, as there is hover event in mobile too. It's fired on touches, so it works kinda like focus and blur. But anyway I guess there can be some devices not supporting this, so will add the scrolling class anyway.. Fixed.. I'm really sorry that the new design is not good for you, I just wanted it to look like ones in iOS. However, now the style is in a plain CSS and it's much easier to play around it!\nSorry again, and thanks for your opinion.. Please add opacity: 0 on rails in CSS.. height should be set for scroll container. It's the same for browser native scroll with overflow: auto. Also, in @minamoto19's case, overflow: hidden is not set for scroll container, but for body. For the detailed usage, please refer to README.\nIf there are other issues, please provide some code snippets.\np.s. Please do not spam '+1' with comments. Emoji reaction is recommended by GitHub.. There had been a quite list of changes and I cannot figure out which change caused the issue. Now large part of PS has been being rewritten and the new 1.0 release is coming soon. Please let me know if there is any issue on new releases.\nThanks again for your report.. There is known issue in textarea, which is basically because textarea is not a plain container element. I've added the info in Caveats.\nI'm sorry for your inconvenience, but please consider using browser native scroll for textarea.. As @kennydp mentioned, it's the problem of shouldPreventDefault in mousewheel handler. The logic itself seems fine, but I think it's a bit rigid.. The only reasons I can come up with are:\n\nDisqus feed is out of scroll container. In this case, mousewheel event itself isn't fired.\nDisqus feed is in the container, but absorbing the events. In this case, mousewheel event is stopped from bubbling into the container, maybe with stopPropagation().\n\nNow it seems suggestions above cannot be proven in the site, but please feel free to test them out and let me know about it :). Fixed in a81208a2ea72b4d903d852d1aecc40252a42c5b0. Thanks!. There was transition style issue in the built result of SCSS. It could be reproduced in macOS Safari too. Now the styles has been rewritten in plain CSS and it seems like the issue has gone.\n\nhttps://github.com/utatti/perfect-scrollbar/blob/next/css/perfect-scrollbar.css\n\nThanks again for your report.. I think it's a browser problem, concerning GPU/CPU rendering. Good to hear that it's resolved.. As described on the comment above, you can modify .ps__scrollbar-y-rail and .ps__scrollbar-x-rail. There is already an example for this.\nhttps://github.com/noraesae/perfect-scrollbar/blob/master/examples/scrollbars-on-the-opposite-side.html. I do not have experience with Magento, but the question seems like one of Magento itself, but none of perfect-scrollbar. I found a Magento documentation about custom script here:\n\nhttp://devdocs.magento.com/guides/v2.1/javascript-dev-guide/javascript/custom_js.html\n\nYou may also be able to find docs for custom CSS and user scripts too. If there is anything unclear in using Magento, please contact Magento about it.\nI'm sorry that I cannot help much about it.\nThanks,. CSS is not automatically imported for Vue. Please include it manually or by giving source file path for single-file component.. You can just modify CSS to do this.\nfyi: https://github.com/noraesae/perfect-scrollbar/blob/master/examples/scrollbars-on-the-opposite-side.html. Oh, I may have misunderstood. You're using it with position: fixed? The scrollbar is not designed to work in fixed position and currently it may not work.. Not sure what stickySectionHeaders's doing, but if it's position: relative, not fixed, it may not have any problem. yRailOffset.top = 0; shouldn't be needed.. I'm sorry for the late response here. Unfortunately it has not been reproducible in my env(macOS Chrome).\nCan you specify more about reproduction, such as reproduction step, browser version, and scroll device(e.g. trackpad, bluetooth mouse, etc)?. As described above, it's a valid CSS line and I think it's rather a Rails Asset Pipeline bug. I'm not familiar of Rails, so feel free to re-open if I was wrong.. As mentioned in the original issue, can you try setting height properly in the container div? If it does not work, please provide a fiddle to reproduce the problem. It's really hard to investigate on it without any working example or code.. I've labelled this with status:help wanted for a while. I personally do not have Surface or any Windows touch device, so it's really hard to investigate this. I would do when possible, but any help will be thoroughly appreciated. . I have no experience with Angular and in fact angular2-perfect-scrollbar is not maintained by us. All I can suggest is that scrollbar geometry should be updated manually with Ps.update(element) or $(element).perfectScrollbar('update') after route update.\n\nhttps://github.com/utatti/perfect-scrollbar/tree/master#how-to-use\n\nIf you have further question about angular2-perfect-scrollbar, please refer to its own repository.\nThanks and sorry that I cannot help much here.. It may be about RTL implementation? I've created a task issue for it #689.. It works in my mac on demo. Can you specify the env?. It seems like working well in the next branch too. Will close this.. Thanks. I will copy diff into next manually, with some minor fixes.. You can just refer to scrollTop on scroll event.. I may not add this, as I think it's not specifically related with scrollbar, but scroll itself. There are already plugins doing this, and perfect-scrollbar perhaps works with them as it uses plain scroll properties.\nIf unwilling to use other plugins, custom events provide enough functionality to handle the case. Now events are in more logical order, so this can be done without hassle.\n\nhttps://github.com/utatti/perfect-scrollbar/pull/662\nd2021933a51d4eb739c7804506250ee308976366\n\njs\ncontainer.addEventListener('ps-scroll-y', () => {\n  container.classList.add('overflow-top');\n  container.classList.add('overflow-bottom');\n});\ncontainer.addEventListener('ps-y-reach-start', () => {\n  container.classList.remove('overflow-top');\n});\ncontainer.addEventListener('ps-y-reach-end', () => {\n  container.classList.remove('overflow-bottom');\n});\nPlease beware the classes may be set properly on init manually.. Duplicated #663. It's fixed in d2021933a51d4eb739c7804506250ee308976366.. Actually I found this issue and fixed with d2021933a51d4eb739c7804506250ee308976366.\nThanks for your report!. There's no specific event for that, but you can subscribe plain scroll event and check scrollY.. If you have a container div element, .container, you can hook scroll event and check the scroll top by the following code:\n```js\nconst container = document.querySelector('.container');\ncontainer.addEventListener('scroll', () => {\n    console.log(container.scrollTop);\n});\n```. We can prevent an event from being propagated or doing default behaviour, but cannot prevent other events in the same level. That's why we cannot do anything on document click. Basically there is no easy (or even hard) way to prevent document click from being fired.\nHowever @andrewtibbetts's example seems like fixable. I will upload a fix for it.. Please refer to the wheelPropagation option.. duplicated with #653. - If you mean position: fixed for container, perfect-scrollbar works without any modification. Please beware that the container should be statically sized with width and height to be scrolled.\n- If you mean position: fixed for scrollbars, unfortunately it is not possible because of implementation issue. I suggest using browser-native scrollbar or looking into other scrollbar plugins.\nFYI: there is a bug concerning fixed positioning #657 . Thanks!. Thanks!. Sure. The patch has been released with v0.8.1.. Hello,\nThank you very much for your report. Unfortunately theme itself will be dropped in the next version. (You can see it has been dropped in the next branch) Instead, a simpler CSS will be provided to be modified easily.\nThanks again.. I've once thought it would be expensive to check, but actually it seems it isn't. Rather than adding an option, I will see if I can remove the child selector itself.. Now .ps__child itself is not needed. Thanks!. Yes, it should work out of the box now. It will be released in the next (major) release.. Resolved in the next version.\nhttps://github.com/utatti/perfect-scrollbar/blob/next/src/lib/dom.js#L13. Just use top instead of bottom here:\n\nhttps://github.com/utatti/perfect-scrollbar/blob/next/css/perfect-scrollbar.css#L21\n\nThere is an example for this case, scrollbars-on-the-opposite-side.html. The example's JS is out of date, but the part which matters is actually <style>. The current branch is under heavy construction, and I will fix examples after that.\n. This has been resolved in the different manner in the next branch.\nhttps://github.com/utatti/perfect-scrollbar/blob/next/src/lib/dom.js#L13\nThanks!. I think your point is valid, perfect-scrollbar captures touchmove event. But what do you mean with drag and drop, some kind of drag-and-drop plugins or native drag-and-drop events?. ref: https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API\nThanks. I'll look into this, it may take some time though.. To remove this error and make it passive, scroll prevention should be disabled and following options should be removed.\n\nwheelPropagation\nsuppressScrollX, suppressScrollY\n\nI'm not sure it's a right decision to remove the options to use passive event. Any thought?. I added this to Caveats for the time being, as it's kind of inevitable in the current code base. Nonetheless, any kind of contribution will be welcomed. Please feel free to suggest a solution or upload a pull request.. I can reproduce the problem in my Chrome too. I am not sure of the reason, I just guess it's a browser rendering issue concerning rendering memory. Also it seems like Chrome-specific as it's not reproducible in Safari. I've just tried toggling some CSS but no good.. It could be, but I think it's more of browser issue rather than user-level one. It works fine in Safari or Firefox. I just assume it's related with GPU memory, but not sure at all.\nI, anyway, wonder if it's resolved when there are less contents or CSS styles.. I've confirmed that RTL support doesn't work in Chrome too, because of recent rail+thumb changes.. You may have installed perfect-scrollbar from npm? The current README is one of the next branch. Please check out master\u2019s doc for released versions.\n\nThis is documentation for the next branch. To read documentation for released versions, please visit master.. I'm afraid that css dir was missing in package.json files . Fixed it and released under 1.0.1.\n\nThanks!. Fixed and released under v1.0.3. Thanks for the report!. I would say it's intended, as update() doesn't actually scroll the element, so there's no reason to fire scroll events. In the same manner, I think reach events should be fired only when it actually reaches. I think instantly firing reach-start on init is not a way to go.\nFor every programmatic/actual scroll after init, you do not need to call update() or fire events manually, as it will be automatically performed. The issue may be on init, but for the most case it's 0 so it needn't be checked. Surely in other cases you can just check scroll position.. I agree that the new way can result in code duplication. I\u2019ll see if I can add a helper.. I've added a reach property, which always watching the state of scroll reach. With this you do not need to check scroll properties manually.\nFor its usage, please refer to events.html. I've updated README too.\n\nhttps://github.com/utatti/perfect-scrollbar/blob/master/examples/events.html#L72\n\nIt will be released in the next version. I'm not sure when it comes, but maybe soon \ud83d\ude04 . The class names have been changed in the recent versions.. Thanks for the report. Let me check in a while.. I've just tested it out and it seems like working. What is your webpack config? Is there any repository where I can look into the problem?. Related issue:\n\nhttps://github.com/webpack/webpack/issues/1979\n\nIn short, webpack will use ES6 module script. \nPerfect-scrollbar provides both CommonJS and ES6 module scripts, with main and module fields in order. I thought webpack will use CJS for require and ESM for import, but I was wrong. Webpack just prioritize module.\nSo in this case, the solution may be like below:\n\nUse ES2015 module import.\nUse CommonJS, with .default:\n    const PerfectScrollbar = require('perfect-scrollbar').default;\nOverride webpack resolve config to prioritize main instead of module:\n    { resolve: { mainFields: ['main', 'module'] } }\n\nI will update README to mention about this. Thanks for your report!. Confirmed the bug. Will fix it!. It can be done by just modifying CSS. Please look into styles where ps:hover applies.\nScroll with JavaScript (el.scrollTop = x) doesn't force scrollbars to show. I've also added scrollingThreshold to configure duration of ps--scrolling-x/y classes.. PS actually worked like this before. I also agree with the idea. Will work on.. I think we actually we do not need the parameters, as using them by default seems like making sense.\nI think we can separate the task to make it default, so I'll merge this when it passes the CI.. Please exclude dist from updates. They are updated only when a new version is released.. Merged. Thanks! I'll write a follow-up patch in a while.. Uploaded a follow up. Basically the patch makes it default. As you mentioned, there are many cases where contents are dynamically changed and reach states are updated according to the change. I guess it's completely natural to update reach and fire the reach events on update() call.\nThanks again! It will be released in the next version. I'm not sure when, but it'll be soon hopefully :). Released into v1.2.0. You can just set scrollTop or scrollLeft and that\u2019s it. Please refer to README for detailed usage.. There was 'selection' scroll handler but it has been removed; https://github.com/utatti/perfect-scrollbar/commit/3c5196f34003b92c2632900c4324bfc6c35a8d87.\nIt is basically too tricky to implement this kind of scroll emulation, and it usually provides more bugs. It's mentioned in Caveats too.\n\nref: https://github.com/utatti/perfect-scrollbar/wiki/Caveats\nSome kind of scrolls are not emulated, such as select-and-drag, middle-click and search. Yes, I confirmed the problem. Will work on this.. Which version do you use? If the current master is used, they will be fired on update() when content height is smaller than container height.. I've checked v0.7.1 and yes, it's the same. It occurs when content height is smaller than container height.\n\n\nhttps://github.com/utatti/perfect-scrollbar/blob/0.7.1/src/js/plugin/update-scroll.js#L24\n\nBut in the latest version, the event won't be fired unless update() is called manually. Also, old versions are not maintained and I recommend upgrading to the latest one. ngx-perfect-scrollbar is not maintained by us, so please enquire in the repo.. Yes, it's not compatible with SSR. I would recommend disabling it on SSR.. scrollLeft is not provided by perfect-scrollbar, but by jQuery itself. Please refer to the jQuery documentation for the detail.\nAlso, please beware that PS dropped jQuery support in v1.0.. There's no way to do this for the time being. Do you have any suggestion how this should be configured?. Now I agree with @sconix. I cannot come up with a nice way to implement this in the current structure, and think it's not usual use case even in the native browser scroll. I'm afraid that I may not  implement this in PS, at least in a while. There may be some workaround for browser native scrolls, though.. Thanks!. I decided to drop Sass for the following reason:\n\nIt results in larger CSS file size\nIt results in ineffective CSS, mainly because of unneeded nestings\nIt\u2019s difficult for users to modify and build from source. With CSS, it\u2019s just copy and modify.\nIt\u2019s small enough, a single-file CSS is good enough for maintainability.\n\nI\u2019m sorry that Sass is no longer provided. Please copy the CSS and modify it directly.. @sqal's answer is the right way to do that. How to use section also describes it.. This is actually an issue. I'll look into this.. Duplicated: #689 \nRTL support was once implemented and thus there an example or some flags in code. However, it has not been maintained for a long time and does not work for the time being. The issue is tracked, but no work is ongoing too. I personally have no domain knowledge of RTL, so I'm waiting for some helps currently. Surely I'll look into it when possible.. Duplicated: #704\nIt's been fixed in the latest version. Currently it checks if PS is alive.\n\nhttps://github.com/utatti/perfect-scrollbar/blob/master/dist/perfect-scrollbar.js#L93. Hi. I\u2019m not familiar with Angular, but according to the error message, something\u2019s wrong in type definition in ngx-perfect-scrollbar. ngx-perfect-scrollbar is a separate project, which is not maintained by me. Please ask in its homepage.. Which version of PS are you using? What is your build env?\n\nFYI:\nPS provides 2 types of export, one for CommonJS and the other for ES modules:\n\nhttps://github.com/utatti/perfect-scrollbar/blob/master/dist/perfect-scrollbar.common.js\nhttps://github.com/utatti/perfect-scrollbar/blob/master/dist/perfect-scrollbar.esm.js\n\nBuild system should tell which script to use. If the error occurs, it may be a build-tool issue. The error can be workarounded with any of followings:\njs\nimport * as PerfectScrollbar from 'perfect-scrollbar';\nconst PerfectScrollbar = require('perfect-scrollbar');. Please check if perfect-scrollbar.css is correctly imported, and style requirements meet?. Hmm, if element.scrollIntoView({ behavior: 'smooth' }) fires scroll events, it should work either. Anyway, good to hear that the original issue has been resolved.. Updated. Thanks!. Please check formatting.. Hi, please run \u2018npm run format\u2019 in your env, and it will automatically format the source files. Please commit and push the diff.. Moved to #722.. Thanks!. I actually reverted this, as it breaks usual cases.. Thanks!. Please check if the container has position style and other styles are imported correctly. For detailed usage, please refer to How to use. vue-perfect-scrollbar may help, but it's not maintained by us and I've not yet tried it.\nIf there is still an issue, please provide an example page or a fiddle. Thanks!. It is possible, because you can just provide different id or a separate element itself. Here is an example where 2 scrollbars are initialized.\nhttps://github.com/utatti/perfect-scrollbar/blob/master/examples/options-wheelPropagation.html. Please refer to the useBothWheelAxes option. There is also an example for this:\n\nhttps://github.com/utatti/perfect-scrollbar/blob/master/examples/options-useBothWheelAxes.html. This will be a default behaviour in the next major version. For the discussion, please refer to #731 and #732.. Thanks!. I think this is a valid point. Rather than setting it true only in demo page, it may be better to set it as default behaviour?. I may still close this. Users may be confused when it works differently than how they see on demo page. Surely there is a source code, but I think demo better works with default behaviours. Sorry again, but please wait for #732. Thanks!. This will break the default behaviour so I guess it should be released in the next major version. Thus I'm afraid it may take a while to merge this, but will definitely do. Thanks! . I will merge this now, and update README on the next release, which will be major.. Currently it's somewhat difficult fix this very quickly. How about wrapping the content with another div?. I guess this is a CSS issue. Does each container have a proper position value?. Closed for inactivity. Please feel free to reopen.. It is how scrollbars show on macOS and I personally think it's okay, but I agree that it would be nice to have an option to style. I added ps--clicking-x and ps--clicking-y classes on dragging and you can now easily customize the case, with the following CSS.\n\n```css\n.ps--scrolling-y .ps__rail-y {\n  background-color: #eee;\n  opacity: 0.9;\n}\n.ps--scrolling-y .ps__thumb-y {\n  background-color: #999;\n  width: 11px;\n}\n```. I did delete the previous comment, not because I changed my opinion but because I misunderstood the behaviour you described.\nI do not (and never) argue that Mac is some holy design epitome of unfathomable perfection. The CSS perfect-scrollbar provides is rather an example or bootstrap, not default behaviour, and I wish users just modify it as they want. I just decided to choose macOS scrollbar behaviour for the example, because I'm a macOS user and do not own any copy of other OS to refer to.\nI'm sorry again that the behaviour does not satisfy your point of view.. After some examinations, I agree that it would be a better UX not to shrink before mouseup as you suggested. I'm sorry that I actually changed my opinion this time. Will work on this.. It's been fixed and will be released in the next version! Thanks.. @Bilge Thanks again for your feedback.\nAbout the smooth scrolling, it is impossible to implement the smooth scrolling without timer while using native scrollTop and scrollLeft. I may not implementing it with timers as it results in performance burden. There are other scrollbar libraries where CSS position or transition is used to emulate scrolls, so if smooth scrolling is needed, they are the ways to go.\n@konradjurk About required styles, the only non-optional requirement is position, which can be relative, absolute, fixed or whatever. I may let users specify it by themselves, rather than setting it as relative ad hoc.\nI'm sorry again for perfect-scrollbar not being perfect at all like everything else, not satisfying your needs. I'll work hard for the future when you may revisit :). It is not possible to capture and prevent scrolling with perfect-scrollbar, because it already captures the events to emulate scrolls. Please consider using native scrolls for parts where scroll jacking is needed.. You should call ps.update() instead of ps().. It seems they should work. Can I have an example page or fiddle online to look into? It's hard to debug without them.\n  . It\u2019s because iframe with different origin does not (and actually cannot) propagate scroll event. For iframes with the same origin, please refer to the examples.. I guess it should work without any modification. Is there a fiddle or site where I can look into the problem?. I would like if somebody familiar with RTL confirms the behaviour of this change.. @dimitarnestorov Measurement cannot always be separated into another frame because PS sometimes decides whether preventDefault or stopPropagate should be called by the result of the measurement. Is there a nice way to resolve the case?. I guess this question is about vue-cli. CSS files are provided statically or via npm, so please refer to vue-cli documentation for importing CSS files.. PS is no longer a jQuery plugin. Also the plugin site itself is currently read-only and cannot be updated anymore.. One PS instance can only have one target element, because each element usually has a separate layout. Please query elements first and then apply PS.\njs\nfor (const el of document.querySelectorAll('#a,#b,#c')) {\n    new PerfectScrollbar(el, {\n        wheelSpeed: 0.5,\n        wheelPropagation: true,\n        minScrollbarLength: 20,\n        suppressScrollY: false,\n    });\n}. I updated the code above.. You should manually keep the list of instances.\njs\nconst psInstances = [];\nfor (const el of document.querySelectorAll('#a,#b,#c')) {\n    psInstances.push(new PerfectScrollbar(el, { ... }));\n}\npsInstances.forEach(ps => ps.update());. tab sizes!\n. indent!\n. indent!\n. Use '===' instead of '=='. '==' is kinda dangerous in JavaScript.\nPlease refer http://javascript.crockford.com/code.html.\n. var style function definition should finish with semicolon.\njavascript\nvar functionName = function (...) {\n  // ...\n};\nPlease refer http://javascript.crockford.com/code.html.\n. why are these lines changed?\n. Maybe\njavascript\n})\n. })\n. theme -> Theme\n. extra newline at the end\n. no newline at the end\n. no newline at the end\n. no newline at the end\n. I guess this example theme should not be included in the built source.\n. no newline at the end\n. Please remove TODO comment here. I would consider removing these mixins, but the comment itself is redundant as there is already an issue reported. No need for further alarming.\n. tabsize=2\n. tabsize=2\n. tabsize=2 in this file\n. Oh, yes, right. I thought it was a section title :open_mouth: \nPlease keep it as it is.\n. ## typo?\n. Supporting SSR is nice, but I'm afraid I personally do not think it's a selling point of ps. Can you please revert this?. It's better not to calculate elMatches every time matches() is called. Can you revert it to a root-level variable and just add a check for Element?. ",
    "davidkethel": "Cool, no worries\n. Cool, I'll look into the behaviour of the mouse wheel. I have to admit, I made this change on a laptop with only the mouse pad, so i didn't even think of it. \n. ",
    "rajnikakadiya": "Thanks for add touch support for mobile devices. It's working fine in iPad and iPhone.\n. ",
    "GregDThomas": "If I scroll, the image moves vertically.\nIf I shift-scroll, the image moves horizontally (regardless of the presence of a vertical scrollbar).\nIs this not what you're seeing?\n. Works very smoothly on my iPhone 4S (iOS 6.1.1)\n. Whilst implementing an unrelated change, I had cause to implement three ps's on one page; it worked fine. What exactly was the problem you were seeing?\nYou can see a working example at https://github.com/GregDThomas/perfect-scrollbar/blob/master/examples/options-wheelSpeed.htm (though the actual wheelspeed won't be different unless you're using my patched version of ps).\n. Hi, no problem, will look at this as soon as I can, hopefully before the end of the week.\n. Apologies; work dragged me off to Boston at short notice (from the UK!) so never quite got around to looking at this again.\nOn a related note, have you thought about using Grunt as part of the packaging process; this should pick up the style-type issues that tripped me up here. I'm happy to make the changes myself if you're interested.\n. > Probably worth noting that I did NOT build the min stuff here - still\n\ngotta figure out how to do that.\n\nHas anyone given any thought to using node? It makes running tests and\ncreating min-ified files as simple as running a single command. I'm happy\nto do the necessary refactoring if it's considered worthwhile.\nGreg\n. > I'm looking into this: http://gruntjs.com/\nActually, that's exactly what I meant; I've got another plugin at\nhttps://github.com/GregDThomas/jquery-localtime which uses grunt - you may\nbe able to use that as a starting point.\nHTH,\nGreg\n. a) You'll need a \"clean\" target to prevent multiple copies accumulating in\nyour min folder, something like;\nclean: {\n      files: ['min']\n }\nand,\nb) You'll need to modify the \"files\" section of the min target to something\nlike ...\nfiles: {\n          'min/perfect-scrollbar-<%= pkg.version %>.min.js':\n['src/perfect-scrollbar.js'],\n          'min/perfect-scrollbar.with-mousewheel-<%= pkg.version %>.min.js': [\n            'src/perfect-scrollbar.js',\n            'src/jquery.mousewheel.js'\n          ]\n        }\nand,\nc) similarly for the minify options of the cssmin target:\nminify: {\n        expand: true,\n        cwd: 'src/',\n        src: ['perfect-scrollbar.css'],\n        dest: 'min/',\n        ext: '-<%= pkg.version %>.min.css'\n      }\nThe version is read from the perfect-scrollbar.jquery.json file.\nHTH,\nGreg\nOn 18 June 2013 07:56, Hyeonje Jun notifications@github.com wrote:\n\nIt's right. I'll think about there's good way to do this with Grunt.\nThank you!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/noraesae/perfect-scrollbar/issues/41#issuecomment-19594214\n.\n. Huh? It's already in the (distributed) source file; https://github.com/noraesae/perfect-scrollbar/blob/master/min/perfect-scrollbar-0.4.3.min.js\n. The sample file in examples/options-wheelPropagation.html works just fine for me on Firefox 22 on Windows 7. Are you running on a different platform? Have you checked the sample to make sure it's not your usage that is in error?\n. I don't know what OS you are using, but MS offer a VM download for every version of IE on Mac, Linux and Windows for testing just this sort of problem - http://www.modern.ie/en-us/virtualization-tools#downloads\n. I think you need to set\nwheelPropagation: true\nin order for this to work; however also have a look at issue #78 - though\nyou may find that earlier versions did work (try the earliest version where\nwheelPropagation was available - I'm sure it worked back then when I first\ntried it.\n\nHope this helps,\nGreg\nOn Tuesday, 19 November 2013, Justin John McCandless wrote:\n\nWhile using a touch device, if you attempt to scroll the page with your\nfinger over a perfect-scrollbar div, then the page will not scroll (only\nthe perfect scrollbar div will scroll).\nI noticed this as a problem for me because I was using a perfect scrollbar\ndiv that was almost the full size of the screen, so users weren't able to\nscroll the page at all. The perfect scrollbar div contained a list that the\nuser could add to, so this was especially confusing when the list was empty.\nIdeally the expected behavior is probably something like overflow: scroll;.\nBut, a big improvement might also be to have perfect-scrollbar disable\nitself as long as the content doesn't overflow the container.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/noraesae/perfect-scrollbar/issues/78\n.\n. \n",
    "gpluess": "Exactly! (Thanks for the quick answer! I didn't know I have to use the shift key to scroll horizontally, though.)\nIn my specific use case there won't be any vertical scrolling at all. What's the best way to achieve horizontal scrolling without using the shift key in your opinion?\n. Works very smoothly on my iOS Simulator!\n. No problem :) I may fork the project and implement the feature on my own\n. ",
    "olownia": "Set useBothWheelAxes option to true.\n. ",
    "bartrail": "Works very smoothly on my Nexus 4 with the current Chrome and Firefox versions.\nAlso runs (surprisingly) smooth on an older Galaxy S with android 2.3.3 (clean hard reset though) and the native browser.\n. ",
    "kuraga": "@noraesae +1. Are there some changes on this opinion?\n. ",
    "zscorpio": "I tried this,but It seems not work very well\nI will try to make some patch\nthx for your reply\n. ",
    "pateketrueke": "You're right!\nAfter made pull-request I realize that my \"patch\" is a bad feature that breaks your design goal, so I want to rephrase my idea behind:\nI just want to add my own css rules if the scroll reach the top, bottom, left or right side.\nWell, so the patch should fire an event or just add a css-class?\nThanks for your time.\n. Well done, just perfect.\n:+1: \n. ",
    "brandonjspencer": "In the interim you can set the wheelPropogation parameter to true so that avoid causing extra space at the bottom. It technically is still there, but if you have a long scrolling page it moves the container out of the way.\n. ",
    "nunoguerra": "Its strange because thus works: http://pastebin.com/wub6TyYE\nBut if add a img in top of  do not works...\nThe CSS of  is:\nnav{width:214px;height:100%;position:fixed;overflow:hidden;z-index:20;color:#FFF;top:0;text-align:center}\nnav img{margin:20px auto}\nmain-nav{width:auto;padding:0;position:relative}\nThanks for your help\n. ",
    "karneaud": "I'm using it...works cool\n. ",
    "chaoszcat": "It works perfectly fine for me ;)\n. ",
    "Augus": "Only add height 100% to body and html\nhtml,body {\n    height:100%;\n}\nnav {\nposition: absolute;\ntop: 0;\nbottom: 0;\nheight: 100%;\nwidth: 300px;\n\n}\n. ",
    "fantasia949": "Hi,\nI finally found this block of code causes my issue:\n$(document).bind('mousemove.perfect-scroll', function(e) {\n    if($scrollbar_y.hasClass('in-scrolling')) {\n                moveBarY(current_top, e.pageY - current_page_y); // 1\n                updateContentScrollTop(); // 2\n                e.stopPropagation();\n                e.preventDefault();\n     }\n});\nChanging that block of code to:\n$(document).bind('mousemove.perfect-scroll', function(e) {\n    if($scrollbar_y.hasClass('in-scrolling')) {\n                updateContentScrollTop(); // 2\n                moveBarY(current_top, e.pageY - current_page_y); // 1\n                e.stopPropagation();\n                e.preventDefault();\n     }\n});\nIt seems that ps works smoothly as usual for big table.\nI dont know how this change affects ps' logic. But atleast, it works well for me :)\n. +1 for this feature\nHopefully, it'll be available soon :)\n. ",
    "kpatient": "Thanks for this! Helped a lot with the twitching scrollbar-handle on my continually loading feed. Perhaps make a pull request?\n. ",
    "berndschimmer": "works perfect for me! had the same problem after loading dynamic content.\n. ",
    "deryckoe": "My bad! Fixed with an overflow: hidden. I was using overflow: scroll.\n. ",
    "Kiruwagaka": "@noraesae sadly using .perfectScrollbar('destroy'); isn't an option for me, i need to pause all my perfectscrollbars without losing the initialization parameters.\nDestroying them and starting them again would require me to know which perfectscrollbars i destroyed and how to initialize them with the correct parameters again which is not an option for me.\nI can't seem to find a way to see the parameters used in the initalization of an elements perfectscrollbar either which would be helpful, if i could get those parameters somehow i wouldn't mind destroying perfectScrollbar because i'd save the parameters beforehand for later use.\nThe best case scenario for me to be able to select all perfectScrollbar elements, save the elements with a certain property(initialization parameter) like 'suppressScrollY: false' in a variable, change 'suppressScrollY' to true, .perfectScrollbar('update') with the new option/paramenter/property do whatever else i need to do, change the 'suppressScrollY' back to what it was and update the perfectScrollbar again.. Any more info on this? This is exacly what I need.. ",
    "PaykomanVll": "i'm interested too.... ",
    "Madchen1": "Same android version \"Gingerbread android 2.3\" on my Samsung Ace.\nI'm using foundation 4 for creating responsive page. After I open my page a few divs are changed from one position to another, including those binded to perfect scrollbar. I must say there aren't getting scroll because right now content is smaller then container. \nThe thing is if I touch page and I want to scroll to bottom it wont. It looks like a page is frozen. But if i first try to move to top of the page (even if I'm currently located at top) suddenly scroll shows and everything is fine.\n. ",
    "sergiovilar": "Thank you very much!\n. ",
    "tomaziniale": "Dude, I use it, and it's awesome! works perfectly like the name!\nAlso I added a function for infinite scroll on my page, this could become a new feature if you like...\ntks a lot!\nmy sample:\n$(\"#div\").bind(\"scroll\", function () {\n            var sender = $(this);\n            if (sender[0].scrollHeight == (sender.height() + sender[0].scrollTop)) {\n                moreRecords();\n            }\n        });\n. ",
    "kpturner": "I don't think changing the opacity of .ps-scrollbar-x and .ps-scrollbar-y will work.   It has to be on .ps-scrollbar-x-rail and .ps-scrollbar-y-rail.\n. I have already commented on #139 - I just updated this just in case somebody else looks at it tried it without success (like I did).\nNice plugin by the way.\n. What if you want the scrollbar to be permanently visible in some containers and not in others.  Changing the CSS does not really lend itself to that sort of requirement does it?   It would be easier, and more intuitive, for this to be an option on the plug-in wouldn't it?\n. ",
    "mirekm": ":+1: \n. ",
    "HasanNat": "No It's not, the plugin's purpose is to provide custom scrollbar to the user, and it doesn't make sense at all to use the script while the browser support scrollbar customization by native.\nThe User shouldn't worry about what browser he is using he worries to have his custom scrollbar in all browsers he needs, it increases performance and decreases load-time and DOM manipulation :)\n. No don't be your English is excellent, and as u like that was my Opinion thank you too :) \n. ",
    "drugsmouse": "Yes. You are totally right. It's a good idea to make it always visible and depend on CSS. I'll try to implement rails div on the next week.\n. ",
    "BillyJC": "First and foremost, please accept my thanks and gratitude for having designed the very best custom scroll bar. I must have tried every other custom scroll bar code available on the internet, including one for which I purchased a license while it worked temporarily. Ultimately I had to bin it along with the others. Just as you say, your perfect scrollbar is unique in the fact that it does not affect any of the css in the rest of a web page.\nPlease know that I am already extremely happy to have found your scrollbar and I have permanently implemented it in my website. And I am happier still to see that css may soon be able to be added to your fantastic scrollbar in order to give it additional background styling.\nAll the best to you,\nBilly\n. ",
    "akshayakrsh": "Hello noraesae, super work done here. I am in the need of the 'visible rails' requirement as well, any update on the progress?\n. ",
    "maoziliang": "Ok! I merged them into a single one. This is my first time to push a request. \nThank you.\n. The history is not clear and existing so many commits. So i decide to close this request.\n. Ok, I'll correct these issues later.\n. sounds great! weekend is coming. Perhaps I can implement it.\n. This issue has been fixed by https://github.com/noraesae/perfect-scrollbar/pull/36.\n. ",
    "Zeus64": "sure, but i don't know how to do a pull request ? i m new to github and i have tortoisegit\nwhat i change :\n```\n / MOD from original version: Handle the padding /\n  / containerWidth = $this.width(); /\n  / containerHeight = $this.height(); /\n  containerWidth = $this.width() + (parseInt($this.css('paddingLeft')) || 0) + (parseInt($this.css('paddingRight')) || 0);\n  containerHeight = $this.height() + (parseInt($this.css('paddingTop')) || 0) + (parseInt($this.css('paddingBottom')) || 0);\n/ MOD from original version: permit to user to gave the with and height of container (this usefull when container don't have only ONE element /\n  / contentWidth = $content.outerWidth(false); /\n  / contentHeight = $content.outerHeight(false); /\n  if (settings.contentWidth) contentWidth = settings.contentWidth\n  else contentWidth = $content.outerWidth(false);\n  contentWidth = contentWidth + (parseInt($this.css('paddingLeft')) || 0) + (parseInt($this.css('paddingRight')) || 0);\n  if (settings.contentHeight) contentHeight = settings.contentHeight\n  else contentHeight = $content.outerHeight(false);\n  contentHeight = contentHeight + (parseInt($this.css('paddingTop')) || 0) + (parseInt($this.css('paddingBottom')) || 0);\n```\n.......\n/* MOD from original version: This forbid us to catch the mousedown in external functions */\n    /* e.stopPropagation(); */\n.......\n/* MOD from original version: The order was wrong. you can see the bug on very large content size with little viewport */\n      /* moveBarX(currentLeft, e.pageX - currentPageX); */\n      /* updateContentScrollLeft(); */          \n      updateContentScrollLeft();\n      moveBarX(currentLeft, e.pageX - currentPageX);\n........\n/* MOD from original version: The order was wrong. you can see the bug on very large content size with little viewport */\n      /* moveBarY(currentTop, e.pageY - currentPageY); */\n      /* updateContentScrollTop(); */          \n      updateContentScrollTop();\n      moveBarY(currentTop, e.pageY - currentPageY);\n.......\n. > > 1.I don't think it's reasonable that the container has padding.\nI agree, but it's depend of the situation ! in our situation, the viewport is an < UL > and the content is severals < LI >. (we are building a menu via < UL >< LI >< LI >...< UL >). And ww3 rules only allow < LI > inside < UL > so their is no other choice than adding padding to < UL >\n\n\n2 'width' and 'height' properties in settings are verbose and kinda useless. I think that just making a simple wrapper div is much easier than making settings to have these size properties.\n\n\nsame as previous, the < UL > only autorize < LI > inside no other element like div :(\n. you can see a demo of what we are trying to do at http://beta.arkadia.com/usa/_home/ go on the top menu => properties > for sale > residential > africa (for exemple) to see the scrollbar\n. {@#^{# gitub comment editor !!! everytime i click on enter to go to next line it's send the comments !\n. yes but here it's add much more verbose to the menu :( ideal menu look like :\n< ul>\n    < li>\n      < a>...< /a>\n      < ul>\n         < li>...< /li>\n          ...\n       < /ul>\n     < li>\n     < li>...< /li>\n    ...\n  < /ul>\nthis is how user build the menu, easy and simple to understand. after it's up the the menu framework to calculate the height of all the contents and gave this height to the scrollbar.\n< div padding>\n  < div scrollbarwrapper> \n    < ul>\n      < li>\n        < a>...< /a>\n        < div padding>\n          < div scrollbarwrapper> \n            < ul>\n               < li>...< /li>\n                ...\n             < /ul>\n           < /div>\n         < /div>    \n       < li>\n       < li>...< /li>\n      ...\n    < /ul>\n  < /div>\n< /div>\nmuch more verbose :(\n. ",
    "itsdrewmiller": "Probably worth noting that I did NOT build the min stuff here - still gotta figure out how to do that.\n. I used \"size\" because it represents width for the X bar and height for the\nY bar.  :-)  but yeah it does seem ambiguous about if it also impacts the\nother direction.  Maybe \"length\"?  With \"scrollbar\" that implies to me the\nwhole thing, like somehow the whole bar will only be 100px even if the\ncontainer is 400px.  I don't have a strong opinion though, and I can't\nimagine anyone actually wanting the latter feature. I agree the max seems\nlike an option that maybe is a bad feature to have.  How about just:\n{\n    minScrollbarLength: 100,\n}\nOn Thu, Jun 13, 2013 at 10:32 PM, Hyeonje Jun notifications@github.comwrote:\n\nIt looks very nice.\nAbout the naming, I prefer to use just 'scrollbar' instead of 'thumb' and\n'scrollbar' is now used in the codes.\nAnd I think 'size' is kind of ambiguous because typically it means both\nwidth and height.\nAlso, I think 'max' option is not needed.\nSo, I suggest the option like:\n{\n  minScrollbarWidth: 100,\n  minScrollbarHeight: 100}\nIf you have some opinions, feel free to comment!\nThank you.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/noraesae/perfect-scrollbar/pull/37#issuecomment-19436432\n.\n. Not sure if I am doing this right (this is like my third pull request and first one I am trying to update the code for) but I think the updates are now included in this - I corrected the spacing, missing ';' and changed the name and brought it down to only one setting. I also added an example page.\n. I just deleted my old fork and redid the work on a new one - I still suck\nat git but hopefully having just one commit makes things easier to merge.\n:-) I followed the contributing guidelines, linted everything and so on so\nhopefully there are no issues this time.\n\nOn Wed, Jul 17, 2013 at 9:23 AM, fantasia949 notifications@github.comwrote:\n\n+1 for this feature\nHopefully, it'll be available soon :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/noraesae/perfect-scrollbar/pull/37#issuecomment-21112155\n.\n. I'm going to delete the old pull request (if I can) - new one is here:\n\nhttps://github.com/noraesae/perfect-scrollbar/pull/48\nOn Wed, Jul 17, 2013 at 12:55 PM, Drew Miller drew@drewmiller.net wrote:\n\nI just deleted my old fork and redid the work on a new one - I still suck\nat git but hopefully having just one commit makes things easier to merge.\n:-) I followed the contributing guidelines, linted everything and so on so\nhopefully there are no issues this time.\nOn Wed, Jul 17, 2013 at 9:23 AM, fantasia949 notifications@github.comwrote:\n\n+1 for this feature\nHopefully, it'll be available soon :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/noraesae/perfect-scrollbar/pull/37#issuecomment-21112155\n.\n. Yep - didn't notice this but should be able to fix it.\n\n\nOn Wed, Jul 17, 2013 at 2:29 PM, manico notifications@github.com wrote:\n\nScrolling is not good now. Scrollbar reached the end but the list is not\nat the end. This setting sould also be included in other scrolling\ncalculations.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/noraesae/perfect-scrollbar/pull/48#issuecomment-21133837\n.\n. Good call, I do in fact know this but my editor at work doesn't have jslint\nor jshint installed :-)\n\nOn Thu, Jun 13, 2013 at 10:29 PM, Hyeonje Jun notifications@github.comwrote:\n\nIn src/perfect-scrollbar.js:\n\n@@ -67,13 +69,23 @@\n         $scrollbarY.css({right: scrollbarYRight - scrollLeft});\n       };\n-      var getSettingsAdjustedThumbSize = function (thumbSize) {\n-        if (settings.minThumbSize) {\n-          thumbSize = Math.max(thumbSize, settings.minThumbSize);\n-        }\n-        if (settings.maxThumbSize) {\n-          thumbSize = Math.min(thumbSize, settings.maxThumbSize);\n-        }\n-        return thumbSize;\n-      }\n\nvar style function definition should finish with semicolon.\nvar functionName = function (...) {\n  // ...};\nPlease refer http://javascript.crockford.com/code.html.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/noraesae/perfect-scrollbar/pull/37/files#r4694381\n.\n. I suspect this is my editor autotabbing to 4 instead of 2 - I'll correct\nthat.\n\nOn Thu, Jun 13, 2013 at 10:30 PM, Hyeonje Jun notifications@github.comwrote:\n\nIn src/perfect-scrollbar.js:\n\n@@ -176,8 +188,8 @@\n$(document).bind('mousemove.perfect-scroll', function (e) {\n       if ($scrollbarY.hasClass('in-scrolling')) {\n-            updateContentScrollTop();\n-            moveBarY(currentTop, e.pageY - currentPageY);\n-             updateContentScrollTop();\n\nwhat are these lines changed?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/noraesae/perfect-scrollbar/pull/37/files#r4694389\n.\n. \n",
    "ghost": "Is this change finished? Scrollbar is very small on large lists.\n. Scrolling is not good now. Scrollbar reached the end but the list is not at the end. This setting sould also be included in other scrolling calculations.\n. Hi,\nThere is no display:none; in the CSS file, but one solution i found is to use this:\n$('#divID').scrollTop(50);\n$('#divID').perfectScrollbar('update');\n$('#divID').scrollTop(0);\n$('#divID').perfectScrollbar('update');\nMy question is: Can i do this better?\n. This should be merged with the code. I'm also facing this issue. This behavior also occurs when a border is given to  x-rail or y rail just like padding.\n. Ty noraesae, your timeout method is working.\n. Thanks\nOn Fri, Feb 6, 2015 at 12:29 AM, Hyunje Alex Jun notifications@github.com\nwrote:\n\nFixed with 2930041\nhttps://github.com/noraesae/perfect-scrollbar/commit/2930041597fa5847414cef0fc63a36c3374ab9de\n.\nCheers,\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/noraesae/perfect-scrollbar/issues/158#issuecomment-73104702\n.\n. +1\n. The reason must be something else. Please provide your code in fiddle. \n. I will give you a cheap solution. Execute selector.scrollTop(0); If it didn't come even then, put this in a setTimeout with delay of 300 ms.\n. May be it can be fixed in css. \n. As there are some bugs on mobile devices i suggest you to disable PS like i did here:\nhttps://github.com/noraesae/perfect-scrollbar/issues/178\n\nOn mobile devices native scrollbar looks normal and can be supported as is without third party plugins.\n. Quick workaround. As I'm using modernizer, i used .no-touch global html class to assign scrollbar only on devices with no-touch ( probably only desktops ), and for mobile devices .touch global html class can be used to assign standart css settings without using custom scrollbar\n.touch .scrollbar {\n    overflow-x: hidden;\n    overflow-y: scroll;\n    -ms-overflow-style: -ms-autohiding-scrollbar;\n    -webkit-overflow-scrolling: touch;\n}\n. Thanks for getting back to me so quickly!\nI have applied the requirements to the div that I need to scroll. However, I'm not sure if I understand the last two requirements regarding the scrollbar's position... how do I make those changes? What selector do I use in my css to meet these requirements?\nAs for loading the css... Can I just copy the css to the bottom of my main css file? That doesn't seem to change anything.\nThanks again.\n. This issue will be reappear when u used zepto.sortable or jQuery-ui.sortabl.\n. .ps-scrollbar-x-rail { z-index:999999; }\n.ps-scrollbar-y-rail { z-index:999999; }\n. This appears to have fixed our scrolling issues with IE11 on Surface tablets. Thanks!\n. Thank you for this input.  Test bed is not quite the same.  Glad it is working for you.\n. ",
    "davidtong": "See demo: http://jsfiddle.net/davidtong/JHYJJ/1/\n. The reason of this patch is that if the container has bottom padding, the scrolling area becomes off. There are workarounds to not use this patch so I am closing this pull request for now. If you find the need to revive this patch, let me know...\n. Why not the source file? Many web projects only include source files of third-party plugins because they have their own minifiers on production.\n. but not in https://github.com/noraesae/perfect-scrollbar/blob/master/src/perfect-scrollbar.js\n. ",
    "internalsystemerror": "I agree, this fixes it for me in Google Chrome Version 27.0.1453.116 m on Windows 8 Pro using touch screen on a Lenevo X1 Carbon Touch. I would recommend the strategy of checking for feature support over particular user agents (granted ie is usually a special case). Lovely plugin!\nPing @noraesae \n. ",
    "dules1": "Hi,\nfound the problem .. it was on my side... i had \"$(document).unbind('mouseup');\" in my clickOutClose function.\nSorry for false alert, and thanks on a fast reply. \n. ",
    "Senorsen": "i think it would be better if the scroll bar do not disappear when the left button is being pressed\n. sorry for my rude report. I didn't find this problem in other case but only http://f.myqsc.com . Maybe it's this page's fault.\n. It's very nice of you to help me solve this problem. Sorry for my false alert and thanks for your great help ! \n. ",
    "zenozeng": "Sorry for my rudeness and bothing.  Thanks very much for your great help.  And perfect-scrollbar is really useful and wonderful :)\n. I am just feeling ashamed.  After all, I should check my code carefully before writing a conclusion.  I should be responsible for my code and my actions.\n. ",
    "jtomaszewski": "Note: for the meantime, you can always hide one of the scrollbars with css. (not always a perfect solution though)\n. ",
    "DelPoint": "Hm. Here is an example for \"move-on-click\" feature with slider:\nhttps://cryptocow.com/?page_id=242\nCheers.\n. ",
    "Radivarig": "On Firefox when I click middle mouse to get 4 direction scroll I only see vertical, even tho there is horizontal scrollbar on the demo image\n. ",
    "DanielApt": "Related to #389 \n. It'd be nice to not only trigger events for which axis is being scrolled, but in which direction. So we'd have events called ps-scroll-up, ps-scroll-down, etc.\nThe issue is that I can't bind to scroll event, because they don't bubble up, which is required for my scenario.\nAlso the gist doesn't work with PerfectScrollbar, as the library has changed a lot since then.\n. I've been playing around a bit. What seems to be the issue is that you are changing the scroll top, and then changing the styling. I have no idea how IE works, but I guess it performs the redrawing when scroll top changes, and freezes the rendering until that has finished, before applying other style changes.\nA solution I found is simply changing the order. First change the top styling, afterwards change the scrollTop: http://jsfiddle.net/DanielApt/uc8defz0/\nSecondly I briefly explored using CSS transform, as they use the GPU, which could address the repainting. I tried that here, but actually there's a slight shaking (not blinking) effect. http://jsfiddle.net/DanielApt/jpcqpvg9/\nI think therefore the first option works better, and is less big of a change. I have only tested the jsfiddles with IE9, and I'm not sure if this works when applied to the plugin itself.\n. Just tested this in the plugin itself. Basically I called updateGeometry() before changing the scrolltop.\nIt seems to slightly improve the behaviour in IE (especially in IE9). I'm not seeing as much flashing, but when scrolling it still makes large jumps when scrolling.\n. I have a suspicion that the jumping behaviour is a performance issue in IE, due to the many reads and writes.\nEvery time the user scrolls we read the scrollTop which causes a browser repaint. Afterwards we change the layout, which again calls a repaint.\nThis might be a useful resource to tackling the issue http://www.html5rocks.com/en/tutorials/speed/animations/. It mentions using requestAnimationFrame, which sadly would not address IE9, but it could address IE10 and IE11.\nAlso in general the above article has a few valuable lessons, and it's mostly based around scrolling performance.\n. I've had the chance to spend a bit more time on this. The problem is actually two-fold:\n1. All scrolling causes flickering of bars, especially when a large amount is scrolled.\n2. Mousewheel scrolling is in large jumps.\nI haven't yet pinpointed the cause of issue no.1, but I do know why issue no. 2 is happening.\nEach browser exposes its mousewheel scroll delta in a different way. IE's scroll delta will always be 120 or -120. What changes is how often it fires, not the value of the scroll delta itself. We'd need to normalise the scroll delta to get a more consistent scroll and smoother experience. Somebody has attempted to normalise the scroll delta in this jsbin, and a brief test showed it scrolling smoothly in IE11.\nI think Issue 1 is more important to address, as this affects more than just mousewheel scrolling, and is more noticeable.\n. Ok, so here's a solution for Issue 1: don't position the scrollbar relative to the container.\nThat would mean that\u2014gasp\u2014we'd use fixed positioning to address it. I've only been testing it with mousewheel, but it's looking promising so far. \n@noraesae have you in the past explored using fixed positioning? What were your reasons for doing it / not doing it?\n. At least there's some good news then\u2026 I've got it working with fixed positioning, and when the browser scrolls it repositions them. You can check it out on my fork https://github.com/DanielApt/perfect-scrollbar/tree/issue-1-fix\n. It works fine, until transforms are used. The use of getBoundingClientRect() does not take transform in consideration. Many people use translate3d(0,0,0) to enable GPU rendering, but that breaks the scrollbars.\nAlso because the scrollbars are now in a sense \u201cnot attached\u201d to their element anymore they sort of move-freely in the z-index space. This means that when you hover over a .ps-container you'll see many positioned elements flicker. This is because the usage of opacity forces it to be placed in a new z-index (discussion) (example).\nIn many basic projects it works fine, but the fixed positioning option does not play nicely in big scenarios. I would prefer to use jScrollPane's approach, where they wrap the content in a container.\nWhat I suggest is the following\nhtml\n<div class=\"content\">\n    Lorem ipsum dolor sit amet...\n</div>\nafter Ps.initialize()\nhtml\n<div class=\"content\">\n    <div class=\"ps-content\">\n        Lorem ipsum dolor sit amet...\n    </div>\n    <div class=\"ps-scrollbar-x-rail\">\n        <div class=\"ps-scrollbar-x\"></div>\n    </div>\n</div>\n. Just finished quite a bit of work, where the content is moved around in its own container. Still need to work on properly getting RtL and opposite side scrollbars to work. First test in IE9 show it works, and we're not seeing any flickering.\nhttps://github.com/DanielApt/perfect-scrollbar/commits/solution-2\nWill do some more testing and dev work tomorrow hopefully.\n. No worries, in that case we stick with the fixed position, we'll just have to warn about using transforms on the element or any of its parents.\nAlso I'll find a fix for the opacity flicker, probably by using rgba() instead of opacity.\n. PS: Just realised, there could also be a hybrid of the offered ideas:\nWe could move content in to .ps-content and adjust that elements scroll top. Then all positioning is still relative to the actual element, and we're still using scrollTop.\n. Not from my side\u2026 haven't had the chance to look further in to it. Not sure if @noraesae has had the chance to look in to it.\nImho they're two options:\n1. Modify the dom and put the content in a container, and scroll that.\n2. Find a solution to IE's scrolltop changing and the scrollbar's positioning happening in two paints instead of one.\nThe usage of fixed positioning doesn't work when we put it in product.\nOption 1 works, but the performance goes downhill.\nOption 2 would be nicer, and it respects the core of the library, but I've simply not found any solution to address this.\n. @martinstender I had two approaches, both with their own issues. Which one did you want to try?\nFork 1 uses fixed positioning. Buggy when elements use css transforms.\nFork 2 wraps content in .ps-container. Performance goes down hill.\nThe forks won't be able to have the compiled js files, as the /dist directory will be ignored. The easiest way to get the compiled files is to download the fork and run gulp\n. Might be worth looking at gemini scrollbar as they use a similar approach, and change the scrollTop instead of a relative positioning or transform hack.\nTesting in IE9 I don't see the jumpy behaviour.\n. Doesn't seem like a perfectScrollbar issue to me, but maybe more how your other jQuery scripts work. Could you maybe share a reproducible example?\n. Have you met all requirements?\n- the container must have a 'position' css style.\n- the container must have an 'overflow:hidden' css style.\n- the scrollbar's position must be 'absolute'.\n- the scrollbar-x must have a 'bottom' css style, and the scrollbar-y must have a 'right' css style.\nIf you have, and it still isn't working, could you maybe create an example?\n. Indeed, I have been using perfectScrollbar('update'); in this situation as well.\n. @tengu3 Please provide a pull-request. If you need help let me know.\n. Scrap that\u2026 it's up to date.\n. Happy to help with the Github Pages. What are the main things you want to achieve by renewing the Github Pages?\n. Just realised we can simply set overflow to hidden by adding that styling to the .ps-container\nWill submit a pull-request soon.\n. Agreed, will change both. Bear with me\u2026\n. I've just finished working on your requests. Hope it's ready for merging.\n. If needed I can expand on this PR's value.\n. Done.\n. @noraesae Could this please be merged?\n. Np, thanks!\n. On what device are you trying to get the fluid scrolling behaviour? Browser, or touch?\n. I've tested #424 and it works. Closing this issue now. \n. @AlessandroFlati You can indeed do something like this, and recently we've also added custom theme support. We however have not yet had any ability to only show the scrollbar upon initialisation.\nIf you did want to always see the scrollbars, feel free to check out the documentation.\n. Seems like we're still having this issue. @jigar029, which version are you using?\n. Which project are you using for angular? Is it angular-perfect-scrollbar? This project is not maintained by the owner, nor us.\nThis actually ties in with https://github.com/noraesae/perfect-scrollbar/issues/442\nCould you maybe attempt to use the most recent version of perfect-scrollbar in your project? If you could share an example where we can reproduce the bug, that would be great.\n. Thanks for keeping me posted @jigar029. As per your suggestion I'll be closing this thread.\n. Hi @oste,\nFirst of all my apologies for getting back to you so late. Here's a well overdue response: I've reviewed your work, and although I think it's great I don't believe this ties in with the vision for perfect scrollbar.\nPerfect scrollbar is trying to be as close to a native scrollbar as possible, and this behaviour is not common for native scrollbars.\nPlease don't let this dishearten you though, we have some great issues being reported which need addressing, and feel free to suggest any improvements you see fit yourself.\n. I've just been looking further in to this.\nHow do retained DOM nodes differ from detached ones? I namely can't find any detached DOM nodes.\n. Sure thing, I'll make the changes to the documentation, and I'll also add an example.\nI'm happy to be added as a contributor, thanks!\n. @noraesae Fixed the documentation and added an example.\n. Thanks @noraesae, I actually realised there could also be the need for events when the user hits the top / bottom of the chart. I was initially thinking of calling these ps-scroll-top and ps-scroll-bottom, but this wouldn't be semantic for events on the x-axis.\nAny suggestions for some better naming?\n. @zomp, good suggestion. I like calling these sides start and end. Now these events could occur both on y as well as the x axis.\nAlso start or end could imply something is starting/ending, but with the usage of the word reach this could be solved:\nBringing it all together I think we could use something like:\nps-x-reach-start, ps-x-reach-end (or ps-x-reached-start)?\n. Alright, I'll implement the events ps-x-reach-start, ps-x-reach-end, ps-y-reach-start and ps-y-reach-end\n. Just added the new events as well.\n. To be clear, do you mean that dragging the scroll track (highlighted in the below image) does not work when the browser is scrolled down?\n\n. Fixed it. Ready to be released @noraesae \n. Thanks @RS2065 for flagging. Could you share an example where this is happening, as I can't reproduce it with the info you've shared.\n. @pmtarantino Currently there has not yet been an official release with the events implemented. I'd still like to do some further testing and possible optimisation before I give the green-light for @noraesae to release.\nIs this urgent? I can generate the .min.js files if you need it soon.\n. Just sent you an email with the files.\n. @nareshkumar2110 Could you please elaborate on the issue?\n. I can try and investigate what exactly is going on. In our project we don't use perfect scrollbar when we detect a touch device. Not because of this clicking issue, but our decision was based on performance. This could be a temporary solution while we find a fix.\nWill set up a sand-box to experiment this week(end). On which device(s) are you seeing this?\n. I've tried to reproduce it, but have failed to do so. Here's my JSFiddle.\nCould you see if the issue is still happening with you? \n. Closing due to inactivity. Feel free to re-open if you're still experiencing this issue.\n. Closing, as #402 explains the issue in more detail.\n. Apologies, closed too early. Described slightly different issue related specifically to the table.\n. Could you please create a JSFiddle demonstrating this issue?\nUse these links for the CDN:\nPerfect scrollbar js\nPerfect scrollbar css\n. Could you please provide a JSFiddle demonstrating the issue? Closing it by next week if there's no response.\n. Closing due to inactivity. Feel free to re-open.\n. I can test on my IE10/11 VM. \nDon't have Edge. \nSent from my iPhone\n\nOn 15 Oct 2015, at 04:16, Jun notifications@github.com wrote:\nThank you very much! Can anybody please test this out?\n\u2014\nReply to this email directly or view it on GitHub.\n. :+1: \n. Could you please create a JSFiddle demonstrating this issue?\n\nUse these links for the CDN:\nPerfect scrollbar js\nPerfect scrollbar css\n. Could you please provide a JSFiddle demonstrating the issue? Closing it by next week if there's no response.\n. Closing due to inactivity. Feel free to re-open.\n. With me it seems to be working when using the mousewheel, keyboard arrows,\nand dragging the track.\nOn which device are you scrolling, and how?\nOn Mon, Oct 19, 2015 at 5:46 PM, Ben Sewards notifications@github.com\nwrote:\n\nSet up a jsfiddle here: http://jsfiddle.net/ndboyf6k/17/\nCustom scroll events not firing, did I set it up wrong?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/noraesae/perfect-scrollbar/issues/404.\n\n\nThis e-mail and any attachments to it are confidential and may also be\nlegally privileged. If you are not the addressee or have otherwise received\nit in error, you are on notice of its status. Please telephone or email the\nsender and delete this e-mail. If you are not the addressee, please do not\ncopy this e-mail or attachments or use it for any purposes, or disclose the\ncontents to any other person.\nFor further information about Knowsis Limited, please see our website at\nhttp://www.knows.is\n. Can't reproduce my Chrome Version 46.0.2490.80 (64-bit) with Mac OSX.\nSeems like a strange combination of factors.\nThinking about how the events work, there might be an explanation:\nPerfect scrollbar works by having multiple handlers for different types of events (e.g. scrolling with the mousewheel, or the keyboard). Normally we pick up the direction of these events and pass it to updateScroll() which changes the container's scrollTop and dispatched the custom events.\nThe only exception is the native-scroll handler which directly calls updateGeometry() instead.\nupdateGeometry() doesn't fire the custom events, and I'm guessing that this is explaining the lack of events firing.\nI'm not sure in which circumstances the nativeScrollHandler is used as opposed to the mouseWheelHandler, but I think this could be an explanation for why we are not seeing events.\n@noraesae when is nativeScrollHandler used as opposed to mouseWheelHandler?\n. @zackcote got any details to provide?\n. Closed due to inactivity. Please re-open when you have the chance to provide more details.\n. At this point there's no way to show the scrollbar, as the hiding / showing logic is done via css.\nI'd suggest to add the following style-rules\ncss\n.show-scrollbar.ps-container > .ps-scrollbar-y-rail, \n.show-scrollbar.ps-container > .ps-scrollbar-x-rail {\n   opacity: 0.6;\n}\nAnd then temporarily add the show-scrollbar class to the scroll container.\n. As of release v0.6.10 #401 has fixed. I do however understand this is still an issue in Edge and Firefox.\nI don't have a device to reproduce or tackle this bug, anyone able to contribute?\n. @zenorocha this might be as straightforward as I thought. Blocking the scrolling requires some kind of relationship between child and parent scroll components. I need to do some further delving in to to figure out the right approach.\n. If anyone has an idea how to start tackling this, I'd love to hear it.\n. @Chehow I haven't had a chance to look in to this yet. I'm still tackling a different issue first, before I'll address this issue.\nIf you want to have a look, I believe the issue would be in handler/click-rail.js.\nIf you do find anything, please let me know.\n. Thank you @pliasetski. I've addressed the bug now.\n. @jinmingyougit Yikes, sorry for the late response on our side in regards to reviewing your pull request.\nI'll set time aside to review this issue this week.\n. I've just looked a it, but I've not been able to understand what's currently not working correctly.\nCould you please explain to me the situation (based off the current master branch) you are trying to fix, and how this pull request addresses it?\nOnce I understand I can implement your work. Thanks in advance.\n. I have noticed this as well. The scrollbar is only rendered once scrolling is called.\nI'm not sure, but could you try using Ps.update(container) once the container has mounted?\n. @jmaks1 feel free to let me know if you have any issues with perfect scrollbar and webpack. We use the npm package, and it works just fine.\n. @kstover could you please create a jsfiddle? This will help us address this quicker.\n. Could you set up a jsfiddle?\n. Thank you @axelboc! I'll have a look at this soon.\n. Hi there, I've just had the chance to review your code.\nJust wanting to double check\u2026 you've named this PR Fix events not triggered when scrolling past boundaries.\nWhen testing your code, events are actually not triggered when scrolling past, instead of being triggered, as your fix would imply.\nIn which scenario would your code cause events to be triggered, which in the past were not being triggered?\n. Oh, now I understand. So you're addressing a scenario where for example an upward scroll reaches the top.\nIn my previous code we'd only receive the event that it has reached the top, but thanks to your code we'll receive both that we reached the top, as well as that there was an upwards scroll.\nLet me still double-check re. performance, as now we're going to go through the whole function, and previously we were only going through the function till we hit the first return.\n. Thanks for the great work @axelboc. To my pleasant surprise I didn't notice any performance issues.\n. Apologies for the delay. I need @noraesae to do a release.\n. I think @axelboc's suggestion is more elegant. Your logic should depend on the events that take place, and not per-se the order of the events.\n. @yasirhaleem I've not noticed any performance issues. I did notice your jsfiddle is missing position: relative\nCould you provide us with more details re. your machine and browser's set up?\n. @yasirhaleem Yes please, could you provide a video?\n. Just tested it, and can confirm the fix works.\n. Thanks for the great work @azala!\n. #433 has been merged now.\n. Could you create a jsfiddle demonstrating this issue?\n. It appears you are using the vanilla javascript file. Instead you should use the jquery adaptor. You can find this in /dist/js/perfect-scrollbar.jquery.js (after building with gulp)\nPlease re-open if you need further help.\n. On which device? And have you tested it with mobileCheck always returning true?\nThis is useful because we can determine if the issue is in mobileCheck or if it is in perfect-scrollbar\n. @rebootcode we've had a few releases which addressed some issues with touch scrolling. Could you double-check if you're still seeing issues with the latest version?\n. Will look into this PR this weekend.\n. Merged. Thank you so much @wujekbogdan, absolutely brilliant work!\n. Thank you @wujekbogdan!\n. That's strange. As on first sight I'd imagine it to work. Could you double check if this jsfiddle works? https://jsfiddle.net/xawjupf8/\n. First question would be which library you're using: perfect-scrollbar.js or perfect-scrollbar.jquery.js ?\n. So just to be clear:\n- when wheelPropogation is set to false it does not trigger events?\n- This only applies to your example, yet not to my provided jsfiddle?\nIf that's the case I'll have to understand a bit more how you're using perfect-scrollbar\n. Closing due to inactivity, feel free to re-open.\n. Could you create jsfiddle showing an error being thrown? I've not been able to reproduce the issue you're trying to fix.\nHere's my jsfiddle https://jsfiddle.net/ggvu31vz/\nI'd presume that the destroy method would hit the getId function, which would then throw an error. When testing in IE10 I however am not receiving this error.\n. @alicjakujawa Could you please submit an example with JSFiddle demonstrating the issue? \n. @tonypine could you try and create your own jsfiddle, or maybe upload a zip of your project?\nHas this bug only happened when clicking the rail, or does it also happen with mousewheel, keyboard and other handlers?\n. I believe that @tonypine's PR fixes your issue @alicjakujawa. Feel free to re-open if you're still seeing issues in IE10.\n. We do not offer a percentage value, however we do offer events which should address the scenario of when scrolling reaches the end/bottom of an element.\nIn the Events documentation you'll see the ps-y-reach-end event described. I think this will address your scenario.\n. Absolutely stellar work @zedtux, I think this will greatly increase the usage of the library.\n. Thanks @antoinegomez!\nJust double checking, perfect-scrollbar already works on iframe\nIs the scenario you're trying to address scrolling a perfect-scrollbar inside an iframe?\n. Sorry, could you expand on that?\nOn Sunday, 31 January 2016, Antoine Gomez notifications@github.com wrote:\n\nYes the ps is inside an iframe, it's works well appart from the dection of\neditable elements\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/noraesae/perfect-scrollbar/pull/447#issuecomment-177660823\n.\n\n\nThis e-mail and any attachments to it are confidential and may also be\nlegally privileged. If you are not the addressee or have otherwise received\nit in error, you are on notice of its status. Please telephone or email the\nsender and delete this e-mail. If you are not the addressee, please do not\ncopy this e-mail or attachments or use it for any purposes, or disclose the\ncontents to any other person.\nFor further information about Knowsis Limited, please see our website at\nhttp://www.knows.is\n. Sorry for the late reply. I must have missed your response. I'll review your pull-request this weekend. Hopefully we can get this merged soon!\n. @antoinegomez Apologies, I've had to do some unexpected work this weekend, and won't be able to review your work just yet. Don't worry, I hope to review it soon.\n. Great work! I've just finished testing it, and can confirm it fixes the bug. Thanks for your great work and feel free to tackle any of our other issues!\n. Thanks for the pull request @cmbertsch01 \nJust so I understand, in what scenario would this behaviour be desirable?\n. Perfect-scrollbar does not change the way that scrolling works. So getting an element to scroll in to view would work the same way you normally would achieve it. You'd have to simply change the scrollTop to the value that matches where your element is.\nI've created a quick example with jQuery demonstrating how this could work in practice: \nhttps://jsfiddle.net/hLr7oa0k/\nPlease reopen if I've misunderstood the issue, or if you need more help.\n. Here's the documentation on creating a theme for your scrollbar. Simply change $ps-rail-default-opacity to 1, either by overwriting the default, or by creating a new theme.\nAlso you might need to call $('.container').perfectScrollbar('update') in advance.\n. @merzikain By the sound of it, you are successfully destroying the scrollbar, but not re-creating it properly. To create the scrollbar you have to call$('.perscroll').perfectScrollbar({suppressScrollX:true})`.\n@thesergeev Is using the right approach, however we can double check wether we need to update or initialise perfect scrollbar.\nYou can see how I'm doing that here https://jsfiddle.net/gbfLazpx/12/\nIf you need any further help, feel free to re-open this issue.\n. Could you send me a screenshot of the current situation, and what you are suggesting?\nSent from my iPhone\n\nOn 10 Feb 2016, at 05:16, WoW-rotfl notifications@github.com wrote:\nHi, will be great if you add container rail option( rails creates exacltly inside container which selector we set and outside scrollable container ). What for? I have scrollable grid list with drag&drop sortable and scrollbar rails creates inside list container. Sometimes sortable element occurs after rails as a result we have empty space between elements. Any solutions?\n\u2014\nReply to this email directly or view it on GitHub.\n. There are plenty of reasons this could be happening, as described here.\n\nOnce I have the chance, this is something I'd like to look in to. I believe that there's a lot we can do to improve the rendering performance (and thus address the large amount of repaints). \nThings that I think will be especially useful to address this issue is to:\n- use transform instead of top and left positioning\n- wrapping the rendering logic inside a requestAnimationFrame\n. Quickly looking at your work, this looks great. Will still briefly review on Sunday before merging it. Thanks in advance.\n. Now I've had the chance to properly sit down and look at your pull request.\nI sadly don't think I can accept this pull-request. I am happy to explain my\u2014lengthy\u2014reasoning, and please correct me if my reasoning is wrong.\nIt seems that on every scroll shouldBeConsumedByChild() will be called. This function then calls findScrollParent(). The issue lies with that second function.\nIf I understand correctly, it will check if the element is either event.currentTarget or if it has an overflow matching scroll or auto. If it matches neither of these conditions, it will repeat the same operation but for its parent element.\nI think it is a rare scenario to have scrollable children within the .ps-container, which means that in most scenarios findScrollParent() will be called on all elements between event.target and event.currentTarget. findScrollParent() will repeatedly call window.getComputedStyle, which can be a performance bottleneck (as described here). It is because of this performance bottleneck that I don't think I can accept this pull-request.\nI do however agree issue #455 needs to be addressed, but here comes an alternative suggestion to address this issue:\nA similar approach to shouldBeConsumedByTextarea() could be used. Instead of checking if event.target is a textarea, we could check if it has a classname (e.g. .ps-child), and is being hovered. \nTo allow child elements to be scrolled, we could then simply check if the .ps-container has any children matching .ps-child:hover, if it does we allow .ps-child to be scrolled, otherwise we continue to scroll .ps-container\nWhat do you think? Am I correct in my understanding that your pull-request would cause a performance issue, and would you agree that a better alternative would the ps-child:hover approach?\n. It would be absolutely brilliant if you resubmit a PR. Thank you in advance!\n. Actually\u2026 I'll do it, as I actually want to combine shouldBeConsumedByTextarea() and standardise some logic. \n. @DEfusion, finished the work on it yesterday. Thanks for your help, using your example helped me a lot!\n. The scroll event does take place on the perfect-scrollbar container, would it be useful to add the handler there instead of on the window? Here's a demo\nScrolling is captured by perfect-scrollbar. If you want the scroll event to bubble up to the window once you've reached the end of the container, wheelPropogation might be useful to look at.\nPlease let me know if you need any help.\n. Could you share an example demonstrating the current issue? This will allow us to review your work faster, and get your PR merged quicker.\n. I'm having issues reproducing the issue you're describing. Could you create a JSFiddle for me look at?\nYou can find our JSFiddles here\n. Closing due to inactivity, feel free to re-open.\n. Just my two cents:\nMoving images is actually one of the toughest things for the browser to repaint. \nAs suggested, smaller images are a good start. \nWhat also might help is to add transform: translate3d(0,0,0) to the image. That CSS will move the image rendering to a separate layer that the GPU will take care of. \nAnyway, to reiterate: this is indeed no perfect scrollbar issue. \nSent from my iPhone\n\nOn 25 Feb 2016, at 06:44, Jun notifications@github.com wrote:\nClosed #465.\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi @nowseemee,\n\nI've now had the chance to look at your issue.\nThis has nothing to do with perfect scrollbar. What you are discussing is how the mobile browser converts taps and swipes in to clicks.\nA quick tap gets read as a click by the browser. If you touch and scroll (basically a swipe) then the browser will not consider that gesture a click, but rather it triggers touchstart event.\nAs your event handler is bound to the click event, it will only call the handler when the browser deems that the touch gesture is a click.\nAs this is not caused by perfect scrollbar, I'm closing this issue.\n. Merge it\nSent from my iPhone\n\nOn 5 Mar 2016, at 08:56, Jun notifications@github.com wrote:\nLooks like a proper point, as even using dataset seems slower. Any other opinion?\n\u2014\nReply to this email directly or view it on GitHub.\n. When setting wheelPropogation to true the behaviour takes place that you expect. https://jsfiddle.net/DanielApt/7vvycnep/1/\n. Haha perfect comment right there :wink: !\n\nFeel free to contribute by opening any other issues or by sending a pull request. Thanks!\n. Please send a pull request\n. I've finally had the chance to figure out the cause of this, and still am working on the solution.\nUpon initialisation, in IE 11 the default scrollLeft is 0, and ranges to the negative value of the scrollable width, e.g. -600.\nIn other browsers it initialised with a scrollLeft of 600, and allows scrolling to 0.\n| IE 11 & FF | other browsers |\n| --- | --- |\n| 0 to -600 | 600 to 0 |\n. In the 1st state, the combination of these classes will be on the container: ps-container and ps-active-y (or ps-active-x)\nIn the 2nd state, there will only be a ps-container \nTo style it, I'd suggest doing:\n``` css\n/ The 1st state /\n.ps-container {\n  opacity: .5;\n}\n/ the 2nd state /\n.ps-container.ps-active-y {\n  opacity: 1;\n}\n```\n. Looks great, thank you!\n. Hi there,\npefect-scrollbar aims to not change default scrolling behaviour. This means that the way you would achieve this with a native browser scrollbar is the same way you'd achieve it with perfect-scrollbar.\nThis means you don't need a custom function, but could it achieve it a similar way as shown in this JSFiddle. I hope that addresses your issue. Feel free to re-open if you need further help.\n. This is a nearly identical question to #487. Please read that one for an explanation.\nThis is how you can solve it, without using the scrollintoview() plugin: https://jsfiddle.net/wcgmjmqn/2/\nTip: To help speed up creating a jsfiddle, you can always fork one mentioned in our documentation.\n. Hmmm\u2026 that's odd, does ps-scroll-y trigger as well?\nps-scroll-x should only trigger when scrolling from left to right.\nps-scroll-y should only trigger when scrolling from up to down.\nThe event triggers often, that is the design, just as in jquery the scroll event triggers often.\nDo you need some help to prevent you from calling the handler too often?\n. I'm surprised that you needed to add that above line of code.\nDoes the container have its position set to relative?\nAs Javascript is running on each scroll event, there will be a performance impact. This impact should be minimal, though.\nCould you share an example?\n. I believe @rbiq simply wants an example of us demonstrating an infinite scroll feature.\n. Care to confirm @rbiq ?\n. Could you create a JSFiddle?\n. Continuously checking scrollHeight would be a very costly operation, this is why we have built the update method.\nWhen you're saying it should not change the position, this doesn't happen in the case of adding content to a container, but it sometimes must happen when content is removed from a perfect scrollbar container.\nHere's an example showing what happens when you add/remove content to a perfect scrollbar https://jsfiddle.net/sh7tp0hd/2/\nCould you create a JSFiddle demonstrating the issue, I can better address this issue.\n. Closing due to inactivty.\n. I really like this pull request, but I do have one tiny request.\nOne aspect I really like about the LinkedIn Pulse widget is that the scrollbar expands actually just before you hover it.\nWould you be willing to change your PR so the scrollbar handle expands just before you hover on it?\nHow I'd implement it is by setting the ps-scrollbar-y-rail width to be bigger than the ps-scrollbar-y width. When you hover over ps-scrollbar-y-rail, you set ps-scrollbar-y's width to 100%.\nI'm happy for you to do this, or I can do it as well. Let me know what you prefer. \n. I can't find the behaviour you're describing on Facebook and Twitter.\nDo you mean this?\n\nThat is not scripted, but a default OSX scrollbar behaviour.\nIs this maybe happening on a different OS?\n. Thanks, I can reproduce the desired effect on my Mac for the Pulse widget on LinkedIn as well.\nI like it, and I think it looks very elegant. Let me just review your code for the PR\nPS: Massive thanks for writing the PR\n. Just had the chance to look at it, will keep coments on the PR thread\n. Sorry to hear you found customising the plugin difficult. We offer the possibility of creating custom themes. Let me know if you need any help.\n. My first thought would be that you haven't initialised the container properly, or have forgotten to add position: relative to the container.\nCould you share a jsfiddle reproducing the issue? You can fork one of the jsfiddles mentioned in the readme\n. Thanks for that.\nIt seems to be an issue with having an iframe inside the perfect scrollbar container. \nThis is not specific to the facebook and twitter widgets.\nIt looks like the iframe scroll event does not bubble up to its parent in several browsers.\nI found this discussion referring to the issue in firefox.\n. Closing due to inactivity\n. You need to make sure that the container is the focused element.\nFor example, in this JSFiddle pressing the keyboard does not scroll.\nOnly after clicking the container, does keyboard scrolling work.\nIf it still isn't working, please let me know and I will re-open this issue.\n. Ah\u2026 I understand.\nBecause the search text box has focus, the perfect-scrollbar container will not receive any focus.\nYou can listen to arrow key presses within the search box and then scroll the container. You can see how I've done that here.\nI strongly advise against this approach. By default when an element is being typed into, the browser will not allow scrolling past it. You'll notice this in Google Chrome in the example I shared.\nIt is best to not change default browser behaviour. \n. Perfect-scrollbar strives to behave like the native scrollbar.\nWhen an element is not scrollable, scroll propagates upwards, as such perfect-scrollbar follows this convention.\nAlso, in your scenario perfect-scrollbar is not the cause nor the solution. When an element is non-scrollable, perfect-scrollbar does not receive scroll event. What you are seeing is your browser's default behaviour.\n. Thanks! Could you change it to overflow: auto instead?\n. overflow: auto is a graceful fallback. This makes sure that the element remains scrollable, even when there's no JS.\nWhen JS is available, it applies the ps-container class, which forces the element to overflow: hidden.\nAlso perfect-scrollbar uses auto, for example here.\n. If perfect-scrollbar is not hiding native scrolling when using overflow: auto, could you create an issue for this?\n. Hi @aviklai,\nApologies to keep you waiting. I realised that adding overflow: hidden is not required. The .ps-container class already does this for you.\nHere's the commit which actually removed overflow: hidden requirement.\nAs a result. I will not be accepting your PR. Don't let that stop you. There are always issues to address or flag and we always need people like you to help! Once again, thank you.\n. You can change the scroll position just as you would normally. By changing scrollTop or scrollLeft you can change the position.\nHere's an example\n. Could you fork one of these JSFiddles and demonstrate the issue?\n. ",
    "iuriicom": "I've tried it on two different platforms - Windows 7 and Windows Vista. It didn't work for me on both. I use the same example here: http://iurii.com/tmp/perfect-scrollbar/examples/options-wheelPropagation.html. It works great in Chrome and IE, but not in FF. Do you have any ideas?\n. btw, wheelPropagation also doesn't work on iOS6 (i've tried it on iPhone and iPad).\n. ",
    "StefanoBalzarottiDos": "I've found a possible solution: http://threedubmedia.com/code/event/drag\n$this.bind('drag.perfect-scroll', function (e, delta) {\n                    $this.scrollTop($this.scrollTop() - (delta.deltaY * settings.wheelSpeed/100));\n                    $this.scrollLeft($this.scrollLeft() + (delta.deltaX * settings.wheelSpeed/100));\n```\n                // update bar position\n                updateBarSizeAndPosition();\n            shouldPrevent = shouldPreventDefault(delta.deltaX, delta.deltaY);\n            if (shouldPrevent) {\n                e.preventDefault();\n            }\n        });\n\n```\n. ",
    "Zaszczyk": "Could You explain how to use it?\n. ",
    "A973C": "Same problem for me! My website is fully ajaxified and scrollbar is not showing up.\nI've tried to call plugin on page load, on document ready, on ajax stop, on page called, nothing change.\nIf someone could provide any help please.\n. @noraesae Thank you!\n. @dqw Already tested but not working. Btw thank you for your help.\n@noraesae Any information on how to fixe this, please?\n. ",
    "dqw": "Try update perfect-scrollbar after ajax request.\n$('#Demo').perfectScrollbar('destroy');\nor\n$(\"#Demo\").perfectScrollbar('update');\n$(\"#Demo\").perfectScrollbar();\n. ",
    "jcordero-git": "Hi, I was using AJAX in ASP, and had the same problem with re-loading to perfect scrollBar, I am using the following code for fix the problem, I hope help you in yours projects..\n\n\n\nThank's\n. ",
    "ashanvabs": "First there is no scroll bar until i scroll through my mouse wheel.\n. Thnaks very much .actually im using angular js is there any other way to call that  perfectScrollbar('update') method it will help me lot . \n. Thanks i have use refresh-on-change=\"someArray\" it will update the scroll\n. ",
    "zomp": "@ashanvabs, there might be multiple reasons:\n- Scrollbar's container content is updated, but perfect-scrollbar is not updated \u2013 execute $('#container').perfectScrollbar('update'); after update.\n- You overlooked the default behaviour (scrollbars are hidden on load and shown on container focus) \u2013 see official example if you want to change this.\n- There is a bug in perfect-scrollbar \u2013 provide a demo to find it, please.\n. Congratulations and thanks for sharing, @ashanvabs. :-)\n. @andri, DOM modifying is not so practical \u2013 visualization would change after scrollbar activation (consider all the existing projects, clean projects and projects with scrollbar selection option) and behaviour would change as well (event selectors would change). I appreciate Jun's will to find out a better solution.\n. Hi @nthibert , there was a bug till recently which could lead to this behaviour (I cannot find its reference). Could you try the newest version of perfect-scrollbar and confirm whether the bug persists, please?\n. Just for a reference, there has already been created an enhancement request #268 to handle automatic updates by HTML5's MutationObserver.\n. Hi @noraesae, no worries, you have a lot... :-)\n. Isn't it caused by -moz-user-input: disabled; applied on (by default) input:disabled, textarea:disabled, option:disabled, optgroup:disabled, select:disabled:disabled?\n. I wasn't able to workaround it by modifying -moz-user-input or user-input to inherit.\nIf you replace disabled by readonly, it will work fine (it is IMO even better \u2013 users can copy the text).\n. You can call it ps-scroll-start and ps-scroll-end \u2013 it is used by CSS' flexbox.\n. @DanielApt, I like the names. Infinitive reach is consistent with click, load, focus and other event names. The order (infinitive + specification) is consistent with mouseover, keydown...\n. Hi @harangue, note please, that is probably only a Windows behaviour and on plenty of other systems there are different actions on middle-click (e.g. a very useful clipboard).\n. Hi @noraesae, it might work even now, but specific conditions must be met.\nI have been experiencing this issue on Kubuntu/Firefox since I started to use perfect-scrollbar more than a year ago and I haven't spot changes in this behaviour. Usually Ctrl+F does not work, but if I focus the scrollable area somehow (or st like that), it starts to work fine. Unfortunately I haven't been able to identify the conditions enabling Ctrl+F.\nMaybe if we identify the conditions, we will be able to make it work reliably.\n. I made it work only in Firefox by wrapping the text by <textarea>: https://jsfiddle.net/xv0rrxv3/24/.\n. Hi noraesae, many thanks for the comment on PS future. I like your decisions, they are very wise.\nP.S. Personally I wouldn't mind even the current styling (5) \u2013 people who know how to use PS usually know even how to modify it.\n. ",
    "MarkAnderson312": "I've used this trick as @dqw:\n$.ajax({\n<...>\n$(div.class).perfectScrollbar('destroy');\n$(div.class).perfectScrollbar();\n<...>\n});\n. ",
    "raghugolla": "Thanks alot ....you made my day. ",
    "sadwizard": "I don't understand why \nlist.perfectScrollbar('upadte'); \nnot working, but it is\nlist.perfectScrollbar('destroy'); \nlist.perfectScrollbar();  \nworking perfectly \n       . ",
    "jfranklin9000": "upadte -> update. If you see this in your javascript console:\nGET \nhttp://XXX.xxx/js/perfect-scrollbar-0.6.16/js/perfect-scrollbar.jquery.min.js [HTTP/1.1 403 Forbidden 12ms]\nTypeError: $(...).perfectScrollbar is not a function\nthen change the file permissions of the perfect-scrollbar directory from (say) 700 to 755.. ",
    "naveedshahji": "it is not working without position relative. ",
    "nareshkumar4": "Hello @ashanvabs \nI too facing the same issue and tried using the suggested refresh-on-change=\"someArray\"  in my html page as shown below\n<div [perfect-scrollbar]=\"scrollConfiguration\" class=\"ps-container\" \nrefresh-on-change=\"someArray\"  [style.height.px]=\"ScrollHeight\">\n<div class=\"ps-content\"></div>\n</div>\nBut I couldn't get what to be replaced in that \"someArray\"?\nCould you please reply ASAP?. ",
    "UltraMC": "Please review this issue, as it happens in any IE (even Edge).\nAfter updating scrollbar position (scrollTop + ('update') it flickers on vertical bar\n. If you wish (just let me know) I can record a video with bugreport with detailed breakdown of it.\n. This occurs becaouse you are updating Rail height and position first, than scrollbar. \nRail gets rendered while bar is still not recalculated which causes filckering after bar is calculated.\n. @noraesae abotu no enviroment try http://modern.ie\n. ",
    "stambolov": "HI, I come across the same issue with IE.\nCan you please revise it?\n. ",
    "Praefect": "Hi, \nWhen I have a scroller in another one, the parent scroller scrolls the same time with the child (mousewheel)\nCould you please help me with this problem? Thank you.. ",
    "daverupp": "Hey\nwhen you go to this page, and open a video information on the bottom of the page, it will open a modal popup where you can scroll down... on PC browser it behaves correctly. But on tablet scrolling is not possible... \nhttp://www.bluewin.ch/de/tv-player.html\nthanks for any help.\nregards\n. thank you for the fix \ud83d\ude0e \n. ",
    "andreu86": "Hi! What is the current status of this issue?\n. Hi @noraesae, I need this feature, is it fixed? Will it be fixed soon? If it's not going to be solved soon, can you give me some tips to fix it?\nThanks,\nAndreu\n. Hi @noraesae,\nI'll work on this tomorrow, I'll do a pull request if I'm able to find an elegant way to fix it.\nThanks and congratulations for this plugin, it's really good :)\n. ",
    "scooterlord": "Hello there. So.. any progress on this one?\n. Wow, that was fast!\nLooking forward for a fix! thanks!\nDate: Sun, 29 Dec 2013 19:13:18 -0800\nFrom: notifications@github.com\nTo: perfect-scrollbar@noreply.github.com\nCC: scooterlord@hotmail.com\nSubject: Re: [perfect-scrollbar] scrollbar not showing in correct position when refreshing page (#83)\nHello,\nI think there can be the problem. The update call should be called not when the page is loaded, but the plugin is initialized. And I think the update should be called internally. I'll test and fix it asap.\nThank you for the report :D\n\u2014\nReply to this email directly or view it on GitHub.                  \n. I will try to put some code on jsbin and get back to you...\n. Hm, although I can't post all my code, there seems to be a problem with the initialization when one of the parent elements is changed from position: absolute to position:static through a script. I have pinpointed this between thousands of lines of code (I realized this while trying to make a jsbin snippet where the problem couldn't be reproduced). If it's something that can be fixed on your end I will be glad, if not, I will have to find an alternative to my code.\n. Well, here I am again, I managed to reproduce the problem in a snippet: Check this: \nhttp://nicksotiriadis.gr/test-folder/\nPerfect scrollbar is in the red container. If you scroll inside it and refresh, you will see the problem. As I said what is causing the problem is the change of the parent element from absolute to static using jquery. :/\n. It shows but in the wrong position! It stays in the position you had scrolled\n\u0391\u03c0\u03cc \u03c4\u03bf iPhone \u03bc\u03bf\u03c5\n1 \u0399\u03b1\u03bd 2014, 1:50 \u03bc.\u03bc., \u03bf/\u03b7 \"Hyeonje Jun\" notifications@github.com \u03ad\u03b3\u03c1\u03b1\u03c8\u03b5:\n\nHi,\nThe page has no problem in Chrome, but in Firefox the scrollbar doesn't show up when the page is refreshed.\nIs that the problem you means? Then now I can start to debug the problem.\n\u2014\nReply to this email directly or view it on GitHub.\n. Hello again,\nfirst of all you are right, it works fine on chrome and safari but it doesn't work as it should on latest firefox (26) or ie 9 installed on my system (win7 / 64bit). So, since it works properly only on webkit browsers, I think it has something to do with that.\n\nDescribing the behaviour once more: \n- first of all I made the scrollbar's opacity:1 so that you can see what's happening\n- when you scroll downwards just a bit, and refresh the page, the overflown element stays at that position while the scrollbar stays at the top - possibly even outside the overflown element\n- as soon as you scoll inside the overflown element, scrollbar restores and works as it should\n. ",
    "jesseschoff": "Just a little bump to say that one year later, this bug is still a problem. Because touch screens often have smaller dimensions, elements with perfect-scrollbar can sometimes trap the browser if there isn't enough padding on the sides of the element to touch and continue scrolling the page. This effectively breaks the page, as the user is unable to leave the scrollable element.\n. ",
    "leandrowilliam": "don't work in windows phone... :(\n. ",
    "afeijo": "Works!! Thanks :)\n. ",
    "pedro380085": "Thank you very very much!\n. I understand. Anyway, thanks! Amazing project.\n. :+1: \n. Good idea!\n. @noraesae Has @rolandtoth solution been implemented?\nIf .ps-container overflow is set to scroll, cmd+f works. But currently it is set to hidden.\n. ",
    "julien": "Thanks you :)\nOn Tue, Sep 24, 2013 at 4:54 AM, Hyeonje Jun notifications@github.comwrote:\n\nSeems good!\nThanks.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/noraesae/perfect-scrollbar/pull/63#issuecomment-24971593\n.\n. \n",
    "jtmalinowski": "Done, updated docs too. Let me know if it's alright.\n. Was going to take a stab at it today... Anyway, awesome!\n. ",
    "eranimo": "Here I am over a year later, wondering the same thing. Any ideas?\n. ",
    "aaaaahaaaaa": "Is there now a way to achieve this ? I'd need to apply a margin-top and margin-bottom to the scrollbar in order for the scrollbar to be contained in a smaller zone that the actual height of the scrollable element (if that makes sense...).\nCurrently, if I set margin-top to the y-rail, the scrollbar scrolls endlessly.\n. Thank you for answer.\nIt works with the margin-top, but when margin-bottom is set, it scrolls endlessly.\n. Thanks ! Problem solved.\n. ",
    "azharijelek": "any update bro?\n. ",
    "knyttl": "I tried your patch, but it breaks scrolling in certain cases, unfortunately I don't have time to debug it and give you more feedback.\n. ",
    "adrianonantua": "I have not come across any problems. Could you assembly a quick fiddle showing the issue? \n. ",
    "wooama": "This would be a  really  big improvement.\n. ",
    "ed1nh0": "@justinmc Perfect point!\nI think another issue in this subject is that the address bar on iOS devices doesn't hide while the page still has overflow: hide. So what could we do to make the address bar behave as it should if there is no workaround to hide it?\n. ",
    "rclai": "Not a problem. Thanks.\n. ",
    "OrangeWacko": "Okay, that's fine. I think it will work at this point. Just letting you know that I want to tip my hat to you sir for responding not just to my but other peoples issues and resolving them so quick, very impressive and thank you for maintaining the project!\nI will close the case\n. ",
    "jimaek": "Consider using jsDelivr too. Its fast and has good uptime http://www.cdnperf.com/\n. ",
    "genediazjr": "it is now added to cdnjs https://github.com/cdnjs/cdnjs/pull/2421\n. Thanks! I'm using your library for our current project so I'll proly contribute more in the future.\n. yup. no prob.\n. ",
    "shaunchurch": "Seeing the same issue after upgrading from v0.4.3 to v0.4.8. If I rollback to 0.4.3 it works without issue. Tested in both Chrome 31, 33, and Safari 7.0.1.\n. ",
    "WebStew": "No probs. I have patched it at the moment by giving each bound event a unique identifier. That way when the document and window unbind runs it only removes the function for that unique identifier. I can send a pull request if you'd like to check it out? Not sure if it is the best way to resolve though.\n. Hey,\nYeah my apologies on the bad commit. My IDE screwed your formatting. I know what you mean about the UID approach and I'm not sure it is the best way to resolve the issue however I had a deadline here and had to patch it as quickly as possible. I will endeavour to come back to this and see if I can find a better approach. If I do, I'll update the src and recommit on this fork.\nRegards\nStu\n. Hey,\nNo problem at all. Glad it helped :)\nOn 21 January 2014 03:27, Hyeonje Jun notifications@github.com wrote:\n\nHello,\nThe issue is resolved with the patch 771ed0chttps://github.com/noraesae/perfect-scrollbar/commit/771ed0c32f0d30b228f4aad4f68432ce2ac1ecc4\n.\nIt implements the function to return a unique event class name.\nBut your report and patch really helps me to do the job. Thank you very\nmuch.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/noraesae/perfect-scrollbar/pull/90#issuecomment-32818459\n.\n. \n",
    "Jaeiya": "Lazy loading of images should have a callback, which means you can instantiate the perfectScrollbar once the images have been loaded. You can also apply the scrollbar to the object and then use the update command on the perfectScrollbar. This is very simple.\n. I confirm this. This is a big issue for supporting IE users.\n. This issue is present in all versions of IE, but the mechanics described in that issue sound about right, since the scrollbar tries to jump back up to the top when scrolled.\nWhen I implement scrollbars in my web app, I'm going to see if I can nail down this issue.\n. There are several ways to do this, apply the scrollbar when the event has fired, or apply it ahead of time and update it when the event is fired. Also make note, that the scrollbar won't be applied if the items in your menu do not overflow the element. You must have more items then the size of the menu can contain.\n$('#yourobject').perfectScrollbar('update');\n. I've done a little work on how it would be done (this is for my own personal use, but I would like an official version as well). I'm not sure if the x-axis is done correctly as I don't use the x-axis on any of my containers. As you can see, it's not that difficult to add...\n```\n@line 285\nsettings.wheelSpeed = (settings.scrollBy) ? settings.scrollBy : settings.wheelSpeed / 10;\n@line 293\nif (!settings.useBothWheelAxes) {\n  // deltaX will only be used for horizontal scrolling and deltaY will\n  // only be used for vertical scrolling - this is the default\n  if (settings.scrollBy) {\n      $this.scrollTop($this.scrollTop() - ((deltaY > 0) ? settings.wheelSpeed : -settings.wheelSpeed));\n      $this.scrollLeft($this.scrollLeft() + ((deltaX > 0) ? settings.wheelSpeed : -settings.wheelSpeed));\n  } else {\n      $this.scrollTop($this.scrollTop() - (deltaY * settings.wheelSpeed));\n      $this.scrollLeft($this.scrollLeft() + (deltaX * settings.wheelSpeed));\n  }\n}\n```\nI understand more code sections would need to be changed to force the scrollbar dragging to obey the same rules as the scroll wheel. Maybe you can look into that?\n. I've been busy myself with a new project I'm working on. One of these days I might consider fixing this a priority :tongue: \n. Duplicate of issue here: https://github.com/noraesae/perfect-scrollbar/issues/118\n. If you destroy the scrollbar, you have to re-apply it. On my own page, I destroy it every time the content div goes out of focus and then I re-apply it, once the user clicks back on it. There's no overhead that I can detect, applying<->destroying the scrollbar as many times as needed.\n. Make sure you're referencing the mouse wheel helper script, that's the only thing I can think of.\n. ",
    "muvasco": "Hello,\nNo problem :)\nActually, I didn't realize about that problems with the settings values. Anyway, it was the first thing that came up to my mind and solved my problem (since my container size never changes).\nThanks for the fix, I'll update my code.\n. ",
    "asiviero": "you mean firing an event to the page once scrolling starts?\n. if so, you can bind your handler to the element:\n$('#Default').perfectScrollbar();\n$('#Default').bind('scroll', function(e) {\n  console.log(\"scroll\");\n });\nAlthough I don't think it'd solve X/Y verification\n. Wouldn't it be simpler if everything could be set in a single place for the scrollbar?\n. No problem at all, the plugin is really great :D\n. You can set .ps-container .ps-scrollbar-y-rail and .ps-container .ps-scrollbar-y css right property to left in the css files. I guess that would work. \nWidth is also controlled via css\n. Yeah but @noraesae doesn't want to mix css in the plugin code, check #139 and #27 \n. ",
    "amcdnl": "@noraesae - Take a look at my changes I made to ps - https://gist.github.com/amcdnl/4dfb65a32da722c7d902\nI trigger events for both drag/touch/mousewheel propagating the x/y changes to listen on parent modules.\n. ",
    "andri": "+1\n. @noraesae I would consider the solution using the modified DOM. I know its not at technically beautiful buts its practical and does the job. I would not be worried about the styling issue. Thats sort of thins happens ALL THE TIME in JS project where templating engines require extra markup. Also, awesome work @DanielApt for taking the time to look into this :) #2cents \n. @zomp, yeah I guess its hard to go that route this late in the game.\n. Good job @noraesae on this plugin. I'm using it in almost every project I do and it really is the best scrollbar script I have seen :)\n. @noraesae I have a similar problem in a project. The element scrolls fine with the mouse-wheel but for some reason the scrollbars are not visible and missing from the DOM. In this particular case I have three scrollable elements on a page but only one of them has this bug. If I can't solve it soon I'll make a fiddle or something.\n. ",
    "dustincaruso": "i second this request - 3px of padding top and bottom would match the spacing on the right and give the same appearance as OS X's native scrollbar.\n. ",
    "renet": "+1 from me for this request! :)\n. Oh, sorry for not looking at the README properly. I was probably searching for the wrong terms.\n. ",
    "slayer1ss": "Thanks for the links, i wasnt able to find anything on google and they really helped... If anyone needs i have created the code below, i have tested only on latest ie,firefox and chrome but it looks simple enough to work on all browsers... \nafter initiating perfectscrollbar plugin on your element apply this code...\nvar scrollbox=$(perfectScrollbar_element);\n$(iframe_element).contents().find(\"body\").bind('mousewheel',function(e,delta){\nscrollbox.scrollTop(scrollbox.scrollTop()+(delta>0?-40:40)).perfectScrollbar('update');\n});\n. ",
    "febLey": "This is great, i've got the problem, that my container has a paddding, but the plugin only takes the .height(). This'll fix it.\n. ",
    "strichter": "Yep, I just noticed the same thing. I think the event handler propagates the mouse scroll event to all parent elements. This is usually addressed by having the event handler return false.\n. Okay, I found the bug. perfect-scrollbar.js, line 312 misses:\ne.stopPropagation()\nI should create a pull request for this,\n. ",
    "joshscorrar": "This seems to stop the parent scroller from scrolling when the child div is scrolled, but then you scroll outside of the child it scroll the parent, the parent div dosent scroll.\n. ",
    "elondaits": "For me vertical scrollbars don't show at all when inside an iFrame in Firefox 27.0.1. They only appear when I put the mouse directly over the bar, and they have 100% height, son they're non usable. They work fine under chrome.\n. First, I updated the Firefox to 32 (latest) and the problem is the same.\nSecondly, the problem is not with the mousewheel... it just doesn't show up when on top of the scrollable element and when it does (placing the cursor directly over the rail) the bar handle takes 100% height so it can't be moved.\n. ",
    "dhirajt": "This happened with me too. I am using bootstrap dropdown menu and i am using overflow-y:auto to display the scrollbar. When i click the arrow keys then only the scrollbar  is displayed. I couldn't use this plugin beacuse of this.\n. ",
    "bkonetzny": "Code works, thank you!!! :)\nAs a temporary workaround, setting \"useKeyboard=false\" will also allow correct input.\n. ",
    "benasek": "Hi,\nI have encoutered an issue you described. May I ask how you solved the problem?\n. ",
    "betesh": "Thank you, that was helpful!\n. ",
    "joshuaballoch": "@noraesae updated. thanks for the awesome plugin, it really is great!\n. ",
    "zeevl": "There you go!\n. ",
    "newpen": "me too! It is ok on Windows, but it flashed when I am on a Mac (Chrome)!\n. ",
    "jetlej": "@noraesae - Thank you, that fixed the issue!\n. ",
    "russiann": "try this:\n-webkit-transform: translate3d(0px,0px,0px);\n;)\n. ",
    "jonschlinkert": ":+1: \n. ",
    "kariem": "Thank you!\nJust wanted to file the same pull request, although I wasn't sure what to say about that (now reverted) commit that cost me about two hours. Could not find any indication on the reason of that division by 10.\n. ",
    "Lsystems": "I had the same problem, and here how to fix it in the last version, line 150 and 151 \n```\n        containerWidth = settings.includePadding ? $this.outerWidth()-(($this.outerWidth()-$this.width())/2) : $this.width();\n  containerHeight = settings.includePadding ? $this.outerHeight()-(($this.outerHeight()-$this.height())/2) : $this.height();\n\n```\nTo stop the scroll, we have to substract the padding of the box and set the contenairHeight in the middle by dividing the padding by two.\nIt works for me for a main div with padding on every side, but it causes an other problem : scrollbar doesn't disapear when the content is enough to content all its children.\n. And Voil\u00e0 (in this case, only Y scrollbar was modified) :\n``` javascript\n  var updateBarSizeAndPosition = function () {\n        var paddingdifferencewidth=($this.outerWidth()-$this.width())/2;\n        var paddingdifferenceheight=($this.outerHeight()-$this.height())/2;\n        containerWidth = settings.includePadding ? $this.outerWidth()-paddingdifferencewidth : $this.width();\n        containerHeight = settings.includePadding ? $this.outerHeight()-paddingdifferenceheight : $this.height();\n        contentWidth = $this.prop('scrollWidth')-paddingdifferencewidth;\n        contentHeight = $this.prop('scrollHeight')-paddingdifferenceheight;\n    if (!settings.suppressScrollX && containerWidth + settings.scrollXMarginOffset < contentWidth) {\n      scrollbarXActive = true;\n      scrollbarXWidth = getSettingsAdjustedThumbSize(parseInt(containerWidth * containerWidth / contentWidth, 10));\n      scrollbarXLeft = parseInt($this.scrollLeft() * (containerWidth - scrollbarXWidth) / (contentWidth - containerWidth), 10);\n\n    }\n    else {\n      scrollbarXActive = false;\n      scrollbarXWidth = 0;\n      scrollbarXLeft = 0;\n      $this.scrollLeft(0);\n    }\n\n    if (!settings.suppressScrollY && containerHeight + settings.scrollYMarginOffset < contentHeight) {\n\n      scrollbarYActive = true;\n      scrollbarYHeight = getSettingsAdjustedThumbSize(parseInt(containerHeight * containerHeight / contentHeight, 10));\n      scrollbarYTop = parseInt($this.scrollTop() * (containerHeight - scrollbarYHeight) / (contentHeight - containerHeight), 10);\n    }\n    else {\n      scrollbarYActive = false;\n      scrollbarYHeight = 0;\n      scrollbarYTop = 0;\n      $this.scrollTop(0);\n    }\n\n    if (scrollbarYTop >= containerHeight - scrollbarYHeight) {\n      scrollbarYTop = containerHeight - scrollbarYHeight;\n    }\n    if (scrollbarXLeft >= containerWidth - scrollbarXWidth) {\n      scrollbarXLeft = containerWidth - scrollbarXWidth;\n    }\n\n    updateScrollbarCss();\n  };\n\n```\nI don't know if it's work with includePadding: false, but it is working, normal behavior : when the content is height enough, the scrollbar disapears.\n. ",
    "merzikain": "I'm using the jQuery version (0.6.3) and having this same issue. I created a plunker to show the situation: http://plnkr.co/edit/MRFAYv?p=preview\nIf you click on the blue bar it slides a sub nav over that has a working scrollbar but the scrollbar in the content area scrolls infinitely. The only way to get it to not do that is to make sure the elements inside the scroll container have no padding, margin, or heights set (which is not acceptable).\n. Thing is, I did it similar to what @thesergeev posted before posting my issue. The difference being that instead of using 'update' I used {suppressScrollX:true}. But when I scaled the window down to trigger the destroy, it would destroy it, but when I scaled the window back up it would not recreate it.\nThe difference between what I tried and what you provided in the jsfiddle is that I did not set my container as a variable and I did not check to see if .ps-container was already set. I also did not put my code in a new function (I have another script that auto triggers a window resize a moment after the page loads for another purpose).\nThe biggest difference, and the actual problem, is that I have a global variable called \"ww\" that contains the window width. Another resize function controls it but it seems that it doesn't change before the perfectScrollbar checking happens. When I replace ww with $(window).width() it works fine.\nThanks.\n. ",
    "drinchev": "+1. Is this library already on npm? It seems I can't find it.\n. @noraesae thank you for your great library and attention to this issue.\nI just wanted to let you know that perfect scrollbar works with browserify. Actually I think it's because of this line : https://github.com/noraesae/perfect-scrollbar/blob/master/src/perfect-scrollbar.js#L12 .\nOn the other hand I'm using it through npm with the following :\nnpm install \"noraesae/perfect-scrollbar\" --save\nBower is a good package manager, but with the recent explosion of browserify there are people that put their dependencies in package.json file rather than another package manager ( bower, component, etc ). \nFor me it makes sense to release it under npm, actually jquery-mousewheel is already there.\nBut of course it's up to you to decide. \nRegards\n. ",
    "SleepWalker": "it would be very good to have this extension as npm package :+1: \n. thank you :+1: \n. ",
    "le717": "@noraesae Thank you! :smile:\n. I tested this on my computer (laptop) the other day (Windows 8.1, Firefox 27) using both my mouse and touchpad. There did not appear to be any issues. From what I saw in the ~5 minutes I play with it, everything scrolled at the proper speed both horizontally and vertically. Can you provide some sort of quick visual of the expected speed?\n. ",
    "st32lthx": "I think this error is related:\nTypeError: Object doesn't support property or method 'scrollIntoViewIfNeeded'\nThis is the error that I get when I use the scroller. @noraesae \n. ",
    "sgtpep": "The same issue on IE9.\n. ",
    "latwelve": "same\n. ",
    "ninique": "Could it be that this is related to #56 ?\n. ",
    "SushantKadam008": "HI,\nIs the issue resolved ? \n. ",
    "bigpapa86": "did not work..\n// here is the jquery\n$(\".more\").click(function(e){\n        e.preventDefault();\n        $(\".more-list\").slideToggle(200);\n// here is perfectscroll script\njQuery(document).ready(function ($) {\n        \"use strict\";\n        $('#scroll').perfectScrollbar({wheelSpeed:100});\n      });\nso the .more-list div is the one that should have scroll, but as u said its set to 0 width I tried adding \n$('#scroll').perfectScrollbar('update'); After the jquery slideToggle line but it did not work\n. that works! thanks mate, you are the best :D\n. ",
    "watkinst": "I had this same problem when using Angular. The scrollbars would only appear after I scrolled in the div, but not on initial hover over the div. Here's how I fixed that issue:\nI imported the library with import PerfectScrollbar from 'perfect-scrollbar';\nI created the following function on my controller:\ninitializeScrollbars(): Observable<PerfectScrollbar> {\n  return observableOf(new PerfectScrollbar('#id-of-div-to-make-scrollable'));\n}\nThen I called that function from ngAfterViewInit like:\nthis.initializeScrollbars()\n  .pipe(\n    take(1),\n    delay(1500)\n  )\n  .subscribe(ps => ps.update());. ",
    "RishabhGoyal992": "\njQuery slideToggle() is an async function and if you want to do something after the element is fully toggled you should use a callback function. Just calling the update function in the next line of the statement doesn't help.\nAs you can see here: https://api.jquery.com/slideToggle/, there's a complete parameter. It's callback to do something when the toggle is completed. So, you should do like this:\njs\n$(\".more-list\").slideToggle(200, function () {\n  $('#scroll').perfectScrollbar('update');\n});\nThanks :D\n\nHello @utatti  ,\nI also have the same issue as @bigpapa86. The solution you have provided here is some how animating the contents of the particular div in which I have integrated the perfect-scrollbar/always available feature. Please provide a solution. . ",
    "MathieuLorber": "Hi, I think I have a similar issue with a textarea. The textarea is inside a div in which I use perfect-scrollbar. It's not about using perfect-scrollbar inside the focusable element (at least in my case). When the scrollbar is activated in the div, I can't use space anymore in the textarea, perfect-scrollbar seems to handle the event (& stop propagation..).\nCan't you just check if the current focused element is not an input/textarea/... before handling event ? Maybe something stronger would be necessary for more advanced editors, but that would be a first step.\nMaybe a quick & dirty first fix would be an option to just disable space handling ? This bug is a show stopper for me... And I'm not sure using space for scrolling is a widely used feature =]\n. Thank you for your quick answer ! Sorry for the bad issue, i post a response in the other one (or I'll directly make a new PR)\n. Thank you =)\n. ",
    "synthview": "I've sent you an email with a link of the bugging webpage\n. ",
    "BurnBin": "thank you so mush Aedaeum for replay.\ni find another solution\n\n\n$('selector').css({\n  position: \"absolute\",\n  visibility: \"hidden\",\n  display: \"block\"\n});\n$('selector').perfectScrollbar();\n$('selector').css({\n  position: \"\",\n  visibility: \"\",\n  display: \"\"\n});\n\n\nsome jQuery trick . but i'll try your solution too and reply here.\nthanks again Aedaeum\n. hi @pedrohrezende . are you tried my solution ?\n\n$('that selector which is display:none').css({\n  position: \"absolute\",\n  visibility: \"hidden\",\n  display: \"block\"\n});\n$('selector').perfectScrollbar();\n$('that selector which is display:none').css({\n  position: \"\",\n  visibility: \"\",\n  display: \"\"\n});\n\n. ",
    "pedrohrezende": "I tryed to apply in bootstrap's modal, but doesn't work.\nAny other idea?\n. ",
    "cisatchmo": "I need to have scrollbars visible immediately without move mouse or resize window, is there a way to force it?\n. ",
    "Texungo": "Just change the CSS file\n``` css\n.ps-container .ps-scrollbar-x-rail {\n    (...)\n    opacity: 0;\n    filter: alpha(opacity = 0);\n}\n.ps-container .ps-scrollbar-y-rail {\n    (...)\n    opacity: 0;\n    filter: alpha(opacity = 0);\n}\n```\nTo\n``` css\n.ps-container .ps-scrollbar-x-rail {\n    (...)\n    opacity: 1;\n    filter: alpha(opacity = 100);\n}\n.ps-container .ps-scrollbar-y-rail {\n    (...)\n    opacity: 1;\n    filter: alpha(opacity = 100);\n}\n```\n. ",
    "wonderment": "The above solution doesn't work. Has anyone resolved this by chance?\n. ",
    "jtrussell": ":+1: \nSee the discussion here for reference. The main property should not contain duplicates and should include non-minified files.\n. ",
    "codebakery-ch": "follow up in case someone else has this quirk:\nAs I use AngularJs, I made a small directive that puts the initial Element position into an attribute\n``` Javascript\n.directive('getPos', function () {\n        return function (scope, element) {\n            element.attr('pos', $(element).offset().top);\n        };\n    })\n```\nThe Scroll Event:\n``` Javascript\n.directive('scrollTo', function () {\n        return function (scope, element, attrs) {\n            $(element).click(function (event) {\n                event.preventDefault();\n                var id = attrs.href;\n                var pos = $(id).attr('pos');\n                $('.scrollarea').animate({\n                     scrollTop: pos\n                 }, 1000);\n                $('.scrollarea').perfectScrollbar('update');\n            });\n        };\n    })\n```\ncheers\n. no Prob, but I started to use this quite frequently. Works like a charm :) \n. +1\nStarted with something like this\nif (window.navigator.msPointerEnabled) {\n  // Pointer events are supported.\n}\nfrom here: http://msdn.microsoft.com/en-US/library/ie/hh673557.aspx\nBut I am not sure if it could be just as easy as adding this to the right element: (didnt work for me though)\n.disablePanZoom {\n  -ms-touch-action: none; /* Disables all pan/zoom behaviors and fire pointer events in JavaScript instead. */\n}\n. ",
    "YossiCohen": "Can you share an example of using the scrollbar with angular + anchor support please?\n. ",
    "trompx": "I'll be very interested to have this option too.\n@Aedaeum did you have the time to work on this ?\n. ",
    "juanghurtado": "Is this still the way to do it? My ps-scrollbar-x-rail has a display: none (and opacity: 1), and changing it to block on my CSS doesn't seems to work because the \"drag bar\" is not shown. The maths for the width of the \"drag bar\" seems to begin after first scroll on the scroller, so it can't be visible on page load.\nAm I doing something wrong?\n. ",
    "mantia11": "@juanghurtado the same\n. Thanks, now it works okay!\n. Hi!\nI have similar problem. My code:\n$(document).on(\"click\", \".remove-parent\", function () {\n    var parent = $(this).parent();\n    var psc = $(this).closest(\".ps-container\");\n    parent.remove();\n    if (psc.length) {\n        psc.scrollTop(0);\n        psc.perfectScrollbar('update');\n    }\n});\nHTML:\n\n<div class=\"ps-container\" id=\"projectLiterals\">\n             <div class=\"cntnt\">\n                        <div class=\"tool-box-row\">\n                            <a class=\"title\" href=\"/Lit...\">Global list</a>\n                            <a href=\"#\" class=\"remove-parent trash-icon\"></a>\n                        </div>\n                        <div class=\"tool-box-row\">\n                            <a class=\"title\" href=\"/Lit...\">Global list</a>\n                            <a href=\"#\" class=\"remove-parent trash-icon\"></a>\n                        </div>\n             </div>\n            <div class=\"ps-scrollbar-x-rail\"...>\n            <div class=\"ps-scrollbar-y-rail\" ...>\n</div>\n\nmax-height of .ps-container = 4 tool-box-rows (200px = 4x50px). While we have more then 4 of them perfectScrollBar(\"update\") works okay, but when we have less then 4 then I get either okay scroll (just invisible rail) or incorrect (rail with visible red scrolling bar)...\nI tried to get into plugin:\nif (!settings.suppressScrollY && containerHeight + settings.scrollYMarginOffset < contentHeight) {\n      scrollbarYActive = true;\n       ...\n    }\n    else {\n      scrollbarYActive = false;\n      ...\n    }\nI get here contentHeight bigger then containerHeight, but actually they are(should be) equal. \nFor example, I get contentHeight = 250px, containerHeight = 200px; 200px and 150px etc...\n. http://jsfiddle.net/mantia11/03y38v09/3/\n. I found bug in my code! It was awful week really. I'm angry happy :)))) \nThank you for your example, it motivated me to fight more and more :)))\nSo the bug was one my custom css line:\n.ps-container .ps-scrollbar-y-rail{\ndisplay: block !important;\n}\nI don't remember why I added it... Just remember that I couldn't place the scrollrail to the right: 0; earlier...\n. ",
    "AnasHSulaiman": "Code is clean now, sorry about that.\nHowever, I couldn't find a way to exclude commits from my pull request..\nI could only find an edit button for the title of the pull request!\nAm I missing something?\n. I hoped to have such an option instead of aligning the scrollbar manually. Great news you have such plan.\n. ",
    "brickgale": "P.S scrolling still works but the scrollbar doesn't show. \n. i guess jqtree has the problem. it keeps on deleting the contents inside the container when reloading. it removes the scrollbar everytime ajax reloads/jqtree reloads. thank anyway\nCheers!\n. @Aedaeum & @noraesae  thanks, anyway, you two are right. i've got this working with jquery-mousewheel last month. forgot to update this thread. Cheers :+1: \n. ",
    "danhodkinson": "Ok just realised that when i switch between tabs it doesn't update, but if i go back and switch between them again then it does... very strange. The update is being called so not sure why it wouldn't update until the second time? \n. I think it may well be a timing issue, if i call an update in a setTimeout function, on the second time it calls the update it updates/shows the scrollbar. I'll look to add a fiddle.\nThanks\n. ok here is a plunker - as you can see the scrollbar doesn't show up until you first move the mouse to actually scroll..\nhttp://plnkr.co/edit/ydDDrgz24FpCSQrQGzOJ\n. I've been trying to deconstruct everything and i've found that if i use text, the scrollbar initializes with no problems, but if i use images instead then that is when the problems occur..\n. ",
    "douglasppaz": "or try\n$(\".scroller\").on(\"mouseover\", function (){ $(\".scroller\").perfectScrollbar(\"update\"); });\n. ",
    "sorenhoyer": "Try this \"add-on directive\":\njavascript\n.directive('psMouseOver', function () {    \n    return {       \n        link: function(scope, element) {\n            element.bind(\"mouseover\", function(e){\n                e.stopPropagation();\n                e.preventDefault();    \n                element.perfectScrollbar('update');\n            });   \n        }\n    }\n});\nJust apply it as an attribute on the  <perfect-scrollbar class=\"scroller\" ps-mouse-over>...\n. ",
    "novotny": "@sorenhoyer Thanks. It helps\n. ",
    "MisaGu": "I know just thought that if it is implemented in the form of function will be more convenient and even easier in some sense\n. - noraesae: Just changing the CSS cannot make the scrollbar works at left position. \n- No, it is: #demo .ps-scrollbar-y-rail {left:3px !important;}\n. m/b i don't know because used it only with y-axis ))) ...\nthanks for your script \nI have seen many similar but your smallest))) = 9kb only, just very convenient for heavy site\n. ",
    "appl4e": "Not working this way. Saying perfectScrollbar is not a function in browser.\nCheck the screenshots in below link:\nhttps://imgur.com/Q1Upba7\nhttps://imgur.com/rFelaWd. ",
    "loliver": "Has anyone had any luck with the MSPointer events as yet? We have a business requirement for our app to work on Windows 8 touch devices so if this is still unsolved I'll try provide and fix here.\nE: I've been looking through this for a few hours now and have come to a few conclusions. \n- Chrome on a Surface 3 works fine, the issue is with IE only as far as I know. \n- The variable supportsTouch isn't set to true in IE as it doesn't use touch events, it uses pointer events. \n- When editing the condition on that variable so it shows as true in touch enabled IE, the existing touch functionality throws errors due to IE using pointers and not touch.\nI'll come back to this on Monday (AEDT, in Melbourne, Aus) and look at refactoring the touch functionality to work with pointer events instead of touch events. I'll make sure to test on iOS and Android to see if the pointer events are able to be used instead of touch, otherwise I'll do a pull request with them added instead of replacing the current touch functionality.\n. ",
    "clementoriol": "Apparently it's still not working on some windows phones.\nTested with a Nokia Lumia 520.\nCan anyone reproduce the issue ?\n. ",
    "Xananax": "I have the same; Also, I am using a :before element with height 100% inside the container, and the scrollbar is appearing even if not needed.\nI fixed it by passing the option\nscrollYMarginOffset\nI gave it a value of 10, it works for my purposes\n. ",
    "slopjong": "I've fixed it for you in PR #152.\n. ",
    "arpitac": "I am running this in windows environment(win 8),Firefox 24.0\n. Hi,the scroll is working in firefox .The problem was with my mousewheel.js file.Actually I am integrating this with onepagescroller.js.So some of the feature of perfect scroller is getting conflicted.\nAnyways,the perfectscroller.js is very lightweight and easy to implement nice plugin.\nThanks.Have a good day\n. ",
    "noonehere": "I have the same issue, any suggestions?\nAny help appreciated.\n. ",
    "aisayko": "+1\n. ",
    "nikaspran": ":+1: \n. ",
    "sarunas": "Updated PR\n. ",
    "vuhuy": "It seems like there is some delay between scrolling and updating the scrollbars positions, causing a jumpy effect. The workaround that I have used is to isolate both scrollbars, and not putting them in the scrollable area. Note that updating the positions is not necessary with this set up. I'm looking forward to see a solution, as my workaround breaks the design philosophy of Perfect Scrollbar.\n. ",
    "yoerivdm": "Is there a test-page that demonstrates this bug?\nIf so, I'd like to look into this ... otherwise, i'll make a test myself ;-)\n. I took a quick look, don't see how to solve it without getting the rails out of the scroll container.\nTried a few options, just didn't find a way to solve it without doing structural changes... \n. Hi, I stopped looking for a solution.\nIt is a known glitch in internet explorer ... the solution lies in\nmodifying the html structure which breaks with the philosophy of the\nscrollbar. \nI switched to http://manos.malihu.gr/jquery-custom-content-scroller\nsince my current project is nearing completion and Internet Explorer is\nnot to be ignored for the target audience.\nOn 2015-01-13 15:55, doronsever wrote: \n\nany news on this issue? this is an awesome plugin but i have to get it working on IE 11... \n\nReply to this email directly or view it on GitHub [1].\n\nLinks:\n[1]\nhttps://github.com/noraesae/perfect-scrollbar/issues/160#issuecomment-69755772\n. See IE support\nThe plugin would work in IEs >= IE9(not well, though)\n. Hi, same issue as https://github.com/noraesae/perfect-scrollbar/issues/160\nI'll need a solution soon to this problem, it renders the plugin unusable for my target users.\n. ",
    "pneyer": "A simple example with a lot of text: http://plnkr.co/edit/vJjyq8JeUFLD1fzM2LRj?p=preview\nBoth IE9 and IE11 have this jumpy scrolling issue\n. ",
    "doronsever": "any news on this issue? this is an awesome plugin but i have to get it working on IE 11...\n. ",
    "RamanVerma09": "Hi,\nI have used perfect scrollbar in my kendo grid content on both axis. It is appearing fine but its flickering while scrolling. It seems like there is some delay between scrolling and updating the scrollbars positions, causing a jumpy effect.\nPlease reply.\nThanks\n. ",
    "larvanitis": "In case it is of any help https://www.modern.ie/en-us/virtualization-tools#downloads\n. ",
    "futhr": "+1 This is a major blocker for it to be used in production, otherwise everything works very nice.\n. ",
    "Niaro": "Guys... there is any progress at this issue?\n. ",
    "PommeVerte": "Modifying the dom is not a good idea IMO. It doesn't play well with a lot of things. In our project, perfectScroll is actually the only scroll we can use because it doesn't touch the DOM. All the others just break the layout in a fashion that can't be fixed.\n. ",
    "MattyBalaam": "Just a small note, that I don't see this problem in Microsoft Edge on Windows 10\n. One thing that I noticed and I remember fixing some issues on IE11 was that the css has the IE10 friendly:\n-ms-touch-action: none;\nBut not the unprefixed version supported in IE11:\ntouch-action: none;\nMentioned here: https://github.com/noraesae/perfect-scrollbar/issues/374\n. Perhaps submit some pull requests or write your own? Maybe even leave critical feedback on the next release? https://github.com/noraesae/perfect-scrollbar/issues/277\n. I have made a reduced test case: http://codepen.io/MattyBalaam/pen/MYOWrE\nI found an old stack overflow thread with some potential solutions; http://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers\nEdit: It looks like iScroll had a similar problem which they have fixed: https://github.com/cubiq/iscroll/issues/577\n. OK, the new results on each scroll are:\nFirefox: 3px\nChrome: 100px\nIE: 1px\nQuite interesting! If I have some spare time over the weekend I will try and take a closer look myself.\n. In src/js/lib/helper.js I can see that a test for msMaxTouchPoints is used to look for pointer events. My hunch is that Edge no longer vendor prefixes this and that the test should be for maxTouchPoints first, and then msMaxTouchPoints for legacy browsers. At the moment I do not have a touch-enabled Windows 10 machine so can not test fully, but try this line instead:\nsupportsIePointer: window.navigator.maxTouchPoints !== null || window.navigator.msMaxTouchPoints !== null\nThere may be some other references to ms prefixed pointer events elswhere in the code which might need changing, but it may be as simple as changing that line.\n. I'm not 100% sure about the logic on that test, but try changing the line to:\nif (e.pointerType && e.pointerType !== 'mouse' && e.pointerType !== e.POINTER_TYPE_MOUSE && e.pointerType !== e.MSPOINTER_TYPE_MOUSE) {\n. something else I have noticed. The CSS only has \n-ms-touch-action: none;\nbut \ntouch-action: none\nwill also need to be added after this\n. ",
    "martinstender": "Until there's an official fix, I'll be more than happy to use the forked version by @DanielApt.\nDaniel, is there a compiled .js anywhere :-) ? \n. Great, thank you - I'll give #2 a shot and see how it performs :-)\n(Got the gulp working ... was new to that :-)\n. ",
    "carasmo": "Since I really like perfect-scrollbar and all others (tried about 5 of them) have many issues, I just detected IE and went with the perfect-scrollbar only on browsers that are not IE and only desktop (device.js) otherwise the overflow auto takes over.  IE just won't be as pretty, but it won't be jumpy.\n```\n// detect IE\nvar IEversion = detectIE();\nif (IEversion !== false) {\n  document.documentElement.className += \" msie\"\n} \n/*\n * detect IE\n * returns version of IE or false, if browser is not Internet Explorer\n /\nfunction detectIE() {\n  var ua = window.navigator.userAgent;\n// test values\n  // IE 10\n  //ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n  // IE 11\n  //ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n  // IE 12 / Spartan\n  //ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\nvar msie = ua.indexOf('MSIE ');\n  if (msie > 0) {\n    // IE 10 or older => return version number\n    return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n  }\nvar trident = ua.indexOf('Trident/');\n  if (trident > 0) {\n    // IE 11 => return version number\n    var rv = ua.indexOf('rv:');\n    return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n  }\nvar edge = ua.indexOf('Edge/');\n  if (edge > 0) {\n    // IE 12 => return version number\n    return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n  }\n// other browser\n\nreturn false;\n}\nif ($('html').hasClass('desktop') && !$('html').hasClass('msie')) {\n  / perfect-scrollbar v0.6.5 /\n  !function ... SCRIPT GOES HERE minified\n$(\".selector\").perfectScrollbar({ });\n  $(\".selector\").perfectScrollbar('update');\n   $('.selector').css('overflow', 'hidden');     \n} // end if desktop and not IE any version\n```\nCSS\n```\n.selector {\n   overflow-y: scroll;\n   -webkit-overflow-scrolling: touch;\n  -ms-overflow-style: -ms-autohiding-scrollbar; \n   -ms-overflow-style: scrollbar;\n}\nhtml.desktop .selector {\n   overflow:auto;\n  -ms-overflow-style: scrollbar;\n}\n```\n. ",
    "monurcan": "add && !(e.target).is(\"input\") condition\n. I used older version, sorry :)\n. ",
    "wikenator": "solved at: http://stackoverflow.com/questions/20536459/cross-browser-jquery-scrollbar-operates-with-body-tag\n. Added code to allow mousewheel zoom with ctrl+mousewheel by destroying then recreating perfect scrollbar on affected area of zoom.  Zoom was not possible \"mid-scroll\" before; zooming would propagate after scrollbar reached the top-most or bottom-most of the container.  Not sure if there is an easier way to detect a control key press to 'ignore' scrolling without having to destroy and recreate the scrollbar..\n. ",
    "sparda-": "Yes, it can be fixed in CSS.\ncss\n.ps-scrollbar-y-rail, .ps-scrollbar-x-rail {\n    opacity: 0.5 !important;\n}\n. ",
    "anish274": "Thank you. It worked. :)\n. Thank You !!! it worked :+1: \n. Ok. Done. I updated the scroll-bar after making it visible.\n$('#main_div_id-10').perfectScrollbar('update');\n. ",
    "renestalder": "Did you try to exclude the scrollbar container from fastclick handling?\n. ",
    "mhulse": "\nDid you try to exclude the scrollbar container from fastclick handling?\n\n@renestalder Would it be as simple as adding needsClick class to the PS element?\nI also use FastClick, hadn't noticed a problem myself, but it makes sense to make sure the two plugins don't collide. Thanks for tip! :+1: \n. @smeijer I was able to modify the CSS to make the scrollbar always visible. IIRC, it was as simple as removing the opacity:0 bits.\n. I have suppressScrollY enabled; Since the last update I did not have any styles for .ps-scrollbar-y-rail and I did not have any issues (the Y rail was not visible).\nIn the latest update, I noticed the div for the Y rail was visible and taking up space via display:block (just upgraded the code, no changes to JS instantiation or CSS for scrollbar).\nIn the example pages, I see that the Y rail is position:absolute and opacity:0.\nI'm going to add the above CSS to the Y rail as a fix.\nIn terms of behavior, in general, I'd expect a \"suppress\" option to completely disable the scrollbar, in that no HTML would get generated for chosen suppressed element.\n. A quick fix for me was to do this:\n.ps-container .ps-scrollbar-y-rail { display: none !important; }\n\u2026 and JS:\nsuppressScrollY: true\n\u2026 the above appears to work well, considering I don't ever want to use the Y rail.\n. Thanks @noraesae! :+1: \n. Just curious, but does $('.contentHolder').prefectScrollbar(); not work for you?\n. ",
    "sferoze": "I am having this issue right now. I am added the class needsclick class but it still does not work. \nRight now if I use perfect scroll on mobile, it requires a double tap to click any link. Please help\n. I found out a clue leading to the issue.\nIn this function\n```\nfunction touchStart(e) {\n    if (shouldHandle(e)) {\n      inLocalTouch = true;\n  var touch = getTouch(e);\n\n  startOffset.pageX = touch.pageX;\n  startOffset.pageY = touch.pageY;\n\n  startTime = (new Date()).getTime();\n\n  if (easingLoop !== null) {\n    clearInterval(easingLoop);\n  }\n\n  e.stopPropagation(); // When I comment this line out the click works again, but the scroll stops working\n}\n\n}\n```\nWhen I comment out e.stopPropagation() it works but the scroll does not show up. \n. @DanielApt \nI was testing on an iOS device, both ipad air and iphone 6. \nI would like to use native mobile scroll but I actually HAVE to use perfect scroll of some other scrollbar package. \nThis is because I am using the scroll capability inside a navigation menu. On mobile I have a button to open the nav, it slides in from the side of the screen.\nWhen I open the nav I need to disable scrolling on the body of the page because otherwise the user can scroll content while the nav is open and that is not good for me. \nSo I need a scrollbar package, that is the only way scrolling can work while I have disabled native scroll on mobile\n. ",
    "bitsfactory": "the way i temporarily fixed it by scroll 1px every time reload the page\n$(\"#scrollpart\").scrollTop(1);\n $(\"#scrollpart\").perfectScrollbar(\"update\");\nit works, but is there a better way?\n. ",
    "krishanrodrigo": "It can be scrollTop(0) and still works.\n. ",
    "Timespace7": "I guess .perfectScrollbar('update') is not called when the mouse enters .ps-container element. I tried $('#target').perfectScrollbar().mouseenter(function(){$(this).perfectScrollbar('update');}) and it will works  like what you expect.\n. ",
    "ujenjt": "Another way to fix this bug is to add box-sizing: border-box to css rule for .ps-scrollbar-y-rail and ps-scrollbar-x-rail classes. Don't forget to add border width to the scrollbar width according to the border-box model.\n. ",
    "thany": "See pull request: https://github.com/noraesae/perfect-scrollbar/pull/180\n. ",
    "andrejcremoznik": "Great minds think alike :) Glad to see this going in\n. ",
    "theasmoth": "oh ok\n. latest chrome, opera, ie10 on win7 is ok, safari (little jerky when slowing down) and chrome on mac is ok, except of firefox on win7... too slooow\n\"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:31.0) Gecko/20100101 Firefox/31.0\"\n. yay)) thanks a lot!\n. ",
    "shreyansqt": "I tested this on Windows 8 Firefox. Slow speed on that too. \nWhen will you be updating this? TIA\n. ",
    "twoelevenjay": "I achieved it with:\n.ps-scrollbar-y-rail {\n    top: 254px !important;\n}\nI was wondering if there is a better option?\n. ",
    "cmanzana": "Any news on this pull request?\nif you think it adds unnecessary complexity to the plugin then I can always publish my fork as own plugin\n. No worries, I perfectly understand, I will continue on my own fork and create a new public package (perfect-widget-scrollbar)\n. ",
    "bogdy29": "1.would be nice that the library manage the case of scroll event when drag it, otherwise is not perfect :)\n2. you can't bind to the original scroll because the overflow is hidden for that div, and bind scroll needs overflow : auto.\n. ",
    "davehouse78": "Hi,\nThanks a lot for replying. I'm having trouble applying the solution, though.\nI've added the JS code to perfect-scrollbar.js, with my container div class in place of the '...' in the line   $('...').mousemove(function () {\nI've amended the CSS as specified, so the .ps-container:hover class is now .ps-container.scrolling\nHowever, it isn't working - the scrollbars function exactly the same as before... any idea what I'm doing wrong? (As you can probably tell I'm very much a JS / JQuery novice!)\nThanks\n. ",
    "JakeGrice": "I tested on Firefox 31.0 on that page on Windows 7. It must either be an OS issue or something to do with my mouse/drivers. I'll test on some other setups to verify if it's just a configuration issue.\n. ",
    "yakashiro": "yes, but it would be much better to have rail are fixed and not to compare it to move with the scrollbar message facebook, agregale this and stay a little better I'll see if I can do it myself, successes\n. ",
    "sabinantony": "if it is a large content. height of  \".ps-scrollbar-y\"  is very small. is it possible to add a min-height in this condition.\n. Thank you very much. You saved me :)\n. ",
    "rjoaopereira": "A better way to explain the problem:\nIn the demo page, scroll the image to the bottom then run in the chrome console:\n$('#Demo .content').height($('#Demo .content').height() -100); $('#Demo').perfectScrollbar('update');\nThe size and position of the scroll is not updated\n. Hi. Just to check if someone was watching this as no comment was posted.\nThanks\n. Thank you very much!\n. ",
    "myrzz0r": "Sorry for my english)\nI meant that the x-rail or y-rail appear when scrolling, but not immediately. This can often be seen on the drop-down lists.\n. ",
    "smeijer": "If I'm not mistaken, what myrzz0r is trying to say. Is that it would be nice if the scrollbar could just be \"always visible\". Instead of appearing only at mouse-over.\nLike the difference between css \"overflow: auto;\" and \"overflow: scroll\". And of course the individual alternatives overflow-y / overflow-x.\n. ",
    "kifayat": "\n. This is happening in RTL (Arabic) language.\nBut the issue also exists in English.\nThe Orange Strip should be near to its own link\n. ",
    "lifetoeasy": "Hi kifayat. Did you applied position relative to the parent div to which you have applied Perfect scroll???\n. ",
    "andrewluetgers": "closed as it made more sense to put this in with my other PR\n. ",
    "ioleo": "PS. Great plugin! I love your definition of perfect\n. @noraesae no problem, I'll hack around or look for another plugin :)\n. ",
    "mbisk": "Hi, can you put example of js code here? thanks. ",
    "DV-JF": "When I try to include an iframe from another domain I get an error:\nUncaught SecurityError: Failed to read the 'contentDocument' property from 'HTMLIFrameElement': Blocked a frame with origin \"http://example1.com\" from accessing a frame with origin \"http://example2.com\". Protocols, domains, and ports must match.\nIs there a workarround?\n. ",
    "isarmstrong": "If you're trying to deal with this on a WordPress embedded tweet (common from what I've read), throw this into your jQuery\njavascript\nfunction overTweet() {\n        if (Modernizr.touch) {\n            $(window).load(function () {\n                var tweet = $('iframe.twitter-tweet');\n                tweet.each(function () {\n                    tweet.before('<div class=\"overtweet\">');\n                    var tHeight = tweet.outerHeight();\n                    var tWidth = tweet.outerWidth();\n                    var divDiff = tweet.offset().top - $(this).prev('div').offset().top;\n                    $(this).prev('div').css({\n                        'position' : 'absolute',\n                        'height': tHeight - 41,\n                        'width': tWidth,\n                        'margin-top': divDiff\n                    });\n                });\n            });\n        }\n    }\nYou should get something like this (minus the purple hi-light):\n\nBasically, you insert an absolutely positioned DIV above your iframe -- which isn't generated until after the window is loaded -- then shrink it by the size of the action panel. This minimizes the screen area hijacked by the iframe. Yes, I realize this covers the follow button... feel free to increase your top margin and decrease your height accordingly.\nYou could easily apply this to other oEmbed scenarios.\nDon't forget to run overTweet(); in your document ready statement.\nedit -- fix to uncover the follow button:\njavascript\n$(this).prev('div').css({\n    'position' : 'absolute',\n    'height': tHeight - 61,\n    'width': tWidth,\n    'margin-top': divDiff + 35\n});\n. ",
    "baannng": "Hi noraesae\nThank you for your reply and for your GREAT work here with perfect-scrollbar.\nI don't know why but with latest version the suppressScrollX: true isn't working.\nI run the example you've pointed and it doesn't work at it should too.\nI'm under OS10.9.5 not 10.10 could that be the difference? I don't like the idea that only in 10.10 will work correctly so I stick with the previous version.\nUnder safari it doesn't work correctly as well.\nThe container is overflow: hidden; for sure since this mandatory to work, right?\nAnd the scrolls appeared and worked, but the X Scroll was also appearing when it shouldn't.\nBest regards,\nAMP.\n. ",
    "edjimucator": "Something such as : \n$(\"#someDiv\").perfectScrollbar({\n      elementBeingScrolled: $(\"#someDiv table tbody\"), // Lol without the ridiculous property name\n});\n. ",
    "r-michel": "+1 on that, this is just what Perfect Scrollbar miss to be... perfect.\n. ",
    "msaggiorato": "Hey @noraesae,\nThanks for this incredible library. \nI've noticed some issues with selecting with the keyboard (using ctrl + shift + arrows) Not sure if you want to re open this issue, or if you want me to create a new one.\nThanks\n. ",
    "julmot": "Unfortunately I can not reproduce this bug. I am using the scrollbar in a webapp and I can not share this code. But I created a fiddle that contains the part where I have used the plugin. So it must be something I don't think it is relevant.. The working fiddle: http://jsfiddle.net/ff02nct8/\n. I already checked this. I also used the update inside a timout function to be absolutely sure the content is added to the DOM before updating. This bugs seems strange, but it will not appear if I avoid using the scrollbar so I think it is a problem of it but not yet known because of some fact that I don't know.\nThe only thing I can do for now is to describe the error in more detail:\nI initialize the scrollbar at the beginning. Then at some point I remove some content so that the navigation doesn't need the scrollbar anymore. So I call $('selector').perfectScrollbar(\"update\"). The call will be done after the DOM change was completed. But in fact the scrollbar will not change. Now I can scroll up a while and it will not refresh, only if I reach the top it will update the scrollbar and it will disappear. So the scrollbar even don't refresh while scrolling as you said above, only if I reached the top while scrolling!\n. Could you make a fiddle to demonstrate?\n. @mantia11 Yip, I see the problem.\nAlso this shows another problem I already knew: If you remove a item in the list, the scrollbar jumps to the top of the container, but that is not necessary. \n@noraesae What do you think causes this problem?\n. @mantia11 Please update your fiddle with the updated version.\n@noraesae Could you please point out what the problem was? As I already said above I have the same problem but can not make a fiddle showing the problem. But maybe I can find the bug if I know what causes the problem in the fiddle from @mantia11 .\n. As this issue is long enouth open and the bug is not solved for me I switched to another scrollbar plugin. Now it's working as expected.\n. https://github.com/gromo/jquery.scrollbar\n. No I want to use the scrollbar over the whole <tbody>-tag.\n. @mkoryak What does \"thead\" mean?\nSeems to be a cool plugin. However, I have multiple problems with perfect-scrollbar on mobile devices so maybe I'll take a look to your plugin but without perfect-scrollbar.\n. ",
    "varffs": "I had a similar issue with 0.5.8. update wasn't working but I just tried destroy and then re-initializing and it is now working. I had a div with content which was then removed and replaced with new content by an ajax load. I was waiting until images were loaded before calling update.\n. ",
    "FDiskas": "What plugin?\n. ",
    "scratchoo": "I was struggling with this issue recently and I downloaded the latest version which is at this time 0.6.11 and it seems fixing the problem for me. Give it a try :)\n. @itsOgden Thank you for the answer and the snippet of code :) I was using the previous version.. so I didn't changed the old css file, I just changed the JavaScript file to \"upgrade\", now I run the latest version of perfect-scrollbar with the old css, your solution is good as well, thanks. ",
    "azharuniverse": "I am also having this issue. Stuck on this for hours. \n. I am having this issue on chrome. Scrolling using mouse wheel looks very bad. \nAlso for some reason I had to add \n.ps-scrollbar-y-rail {\n    top: 0px !important;\n}\nin my css otherwise on scrolling top value is dynamically changing causing rail container to move down.\n. ",
    "chrilith": "Ok thank you for reading. :)\n. Of course, I perfectly agree with you. Thank you again.\n. ",
    "ronihcohen": "After investigation I found that the problem is that CSS :hover selector is being used and it is referring to all perfect-scrollbar classes in the page.\nPR #225\n. Not sure but maybe your problem related to wheal pagination option ?\n. ",
    "alensaqe": "Any Resolution for this case! I was using the same scenario when using touch devices. Scrolling through the child element will scroll the parent element. Both have .perfectScrollbar .\n. I did not read the entire title. My issue is the opposite. ill open another one!\n. Maybe. I opened not just one but eventually two issues following the issue! One for Touch Behavior one for Windows Phone 8.1 that does not work at all!\n. Update : Same behavior as Android on iOS 7/8. It does not work at all in Windows Phone 8.1. Opened another issue!\n. ",
    "SimenB": "Yeah, changed the day after I reported this bug\nhttps://github.com/noraesae/perfect-scrollbar/commit/664dec23d611307d7bf7ce0ad3fcd332879b01a9\n. Child selectors is supported in IE7 and newer (http://caniuse.com/#search=%3E)\nIt's no problem for me, we got another plugin working. We tried out a fair few, and I just thought I'd drop you a note that this wasn't working in the browser your readme stated it should. :smile: \n. ",
    "shichaow": "The fix doesn't work on IE 11.0 and still there is this exception.\n. ",
    "martijnrusschen": "Any update about this?\n. ",
    "KELiON": "@noraesae ok, done:)\n. ",
    "Fer0x": "See my commit https://github.com/Fer0x/perfect-scrollbar/commit/5d034871cc1ed602f8d984d5fd12e16dfb8db772\nIE 10/11 touch events also triggered by mouse,  so they must be prevented.\n. ",
    "VinceScript": "I've tested it and it now works fine with the patch, thanks for the quick response.\n. ",
    "darthmaim": "Thanks for the fast fix :+1: Will test it on Monday when i'm back in the office.\n. Works great :smiley:\n. :+1:\n. ",
    "lopsided": "+1 I've tested this (on an android phone) and seems to work great.  Good work @DI-john !\n. ",
    "TomAdam": "+1 I really need this\n. ",
    "bcgoodmate": "Is there a way to fix this issue?\n. Works great.\nThanks for being so responsive.\nBy the way, how can I give you a star?\n. ",
    "mrrtee": "OK, I found solution at http://stackoverflow.com/questions/23565393/add-multiple-scrollbar-in-a-same-page-using-perfect-scrollbar-plugin to using each() function on jQuery\njavascript\n$('.contentHolder').each(function(){\n    $(this).prefectScrollbar();\n});\n. I'm using version 0.5.4, but actually I combine it in another jQuery scripts, so It may conflict somehow\n. ",
    "StSenf": "Just in case anyone stumbles over this question with the newer version of this plugin - this is a working example:\n$('.dialogInner').each(function(){\n        const ps = new PerfectScrollbar($(this)[0]);\n    });. ",
    "vm-bio": "Ich bin von Di, 09.01.2018 bis Mi, 21.02.2018 abwesend.\nHinweis: Dies ist eine automatische Antwort auf Ihre Nachricht  \"Re:\n[utatti/perfect-scrollbar] Can I use multiple perfectScrollbar on same\npage? (#246)\" gesendet am 11.01.2018 13:22:28.\nDiese ist die einzige Benachrichtigung, die Sie empfangen werden, w\u00e4hrend\ndiese Person abwesend ist.\nwww.biotronik.com \nBIOTRONIK - excellence for life \nBIOTRONIK SE & Co. KG \nWoermannkehre 1, 12359 Berlin, Germany \nSitz der Gesellschaft: Berlin, Registergericht: Berlin HRA 6501 \nVertreten durch ihre Komplement\u00e4rin: \nBIOTRONIK MT SE \nSitz der Gesellschaft: Berlin, Registergericht: Berlin HRB 118866 B \nGesch\u00e4ftsf\u00fchrende Direktoren: Dr. Daniel B\u00fchler, Dr. Lothar Krings, Dr. Ralf Lieb, Thomas Simmerer \nThis e-mail and the information it contains including attachments are confidential and meant only for use by the intended recipient(s); disclosure or copying is strictly prohibited. If you are not addressed, but in the possession of this e-mail, please notify the sender immediately and delete the document. \n. ",
    "theshashiverma": "@StSenf Thank you so much brother that works for me.. ",
    "iamscottfreeman": "Thanks for addressing this quickly!\nAn interesting solution, but not one that I can use as it presents other issues (namely preventing page scroll if a select has focus). I guess a temporary fix for this temporary fix would be to .blur() selects onChange, but it's not ideal. :)\n. ",
    "romandragan": "@tkhyn, not working with latest perfect-scrollbar version. Adding margin-top or margin-bottom to the ps__scrollbar-y-rail makes scrollbar not working.\n@noraesae, I think this feature was removed during upcoming releases?. ",
    "Robmacker": "I too am experiencing this issue. Also, on the default Android browser, I have to 'touch' the div in order to activate the scrolling ability,,,otherwise it will not scroll when page comes up.\nOn the Chrome browser for mobile, it works fine. I do not have to touch first.\nThe default scroll will work without touching the div to put the focus on it.\nHopefully you can address this as I cannot count on my users installing Chrome as a supplemental browser.\nThanks\n. ",
    "mkoryak": "I just added support for this plugin to my locked table header plugin. See:\nhttp://mkoryak.github.io/floatThead/examples/perfect-scrollbar/\n. thead refers to the <thead> within the table. The thing that is floated. \nYou will probably have problems with my plugin on mobile devices also :P the dom manipulations and math require a fast cpu. \n. ",
    "Vaibhav2812": "I want to use the scrollbar over the whole <tbody>-tag. for Angular App.. ",
    "eness": "Here is the explanation of the problem and the solution I've just found.\nThe main problem is not related to plugin, it's a javascript based thing. jQuery (or javascript) is failed to calculate height() or width() of hidden elements. You may find lots of topics on stackoverflow or anywhere on the web. You will also see that several solutions are provided on these topics.\nIf the element is hidden with display: none, jQuery's height() will give you 0px. but when you make it display:block but hide using visibility: hidden, now jQuery is able to find the actual height() value. So this might be a hack to jQuery but you don't have any other way. You will have to display:block the wrapper and visibility:hidden then get the height() then revert the values back to display:none and visibility: visible\nYou can use the small hack plugin below to make this job easier :\nhttp://dreamerslab.com/blog/en/get-hidden-elements-width-and-height-with-jquery/\nAnd open the uncompressed version of perfect-scrollbar.js and replace lines between 212 and 215 with this :+1: \ncontainerWidth = settings.includePadding ? $this.actual('innerWidth') : $this.actual('width');\n    containerHeight = settings.includePadding ? $this.actual('innerHeight') : $this.actual('height');\n    contentWidth = $this.actual('scrollWidth');\n    contentHeight = $this.actual('scrollHeight');\nAnd now it will work without any problem! :)\n. oh, I didn't notice that method, perfectScrollbar('update'); really works. I'm closing this.\n. ",
    "Capenus": "Did you try .perfectScrollbar('update'); after you changed to display: block? That work's like a charm for me.\nFull Example:\njavascript\n$(\".trigger\").on(\"click\", function() {\n    $(\".content\").toggle(); // shows / hides the element\n    $(\".content\").perfectScrollbar('update'); // updates the size of the scrollbar\n});\n. ",
    "MeoMix": "\ud83d\udc4f \n. @Alexwijn \nIf you open your browser's dev tools on this page and run:\nwindow.addEventListener('click', function(){ console.log('hi'); } );\nsubmit the code, and then click on the native scrollbar on the side you won't see the click event handler run. By contrast, if you click on any element on the page -- you will.\nThe functionality you're experience is equivalent to native functionality. So, I don't think my suggested change should be considered a bug in perfect-scrollbar.\nYour menu shouldn't be closing when the user clicks on the scrollbar because the click event won't bubble up.\n. Right. I get that. I'm not saying you don't have a UX bug you need to solve. I'm saying that the issue isn't related to perfect-scrollbar as perfect-scrollbar is properly emulating native functionality.\nI made a CodePen for you which highlights the issue you're describing without use of perfect-scrollbar: http://codepen.io/Meo/pen/EPXXOV\nTry clicking around a bit. You'll see that clicking the scrollbar does not propagate click events.\n. Looking at the valid options for perfect-scrollbar, I see stopPropagationOnClick as a possible option. I suspect the rest of the propagating is defaulted on, but can be disabled as desired to properly emulate native functionality.\n. Well, ideally you should never see a scrollbar element in e.target because it shouldn't be a valid element. I'm not aware of other bugs (I don't do active development on this -- simply got an e-mail when you first commented). Mostly just wanted to stand by the fact that I think my suggest of stopPropagation is correct. Good luck! <3\n. ",
    "andig": "Why not provide a pr?\n. ",
    "nijikokun": "Why separate bower repo, this makes no sense?\n. ",
    "emkay": "@noraesae anything left to help out on to get this out the door? seems like most of the stuff is covered, but let me know if you need any help triaging issues, working on features, etc.\n. :+1: \n. ",
    "pajcho": "Thanks @noraesae\n. ",
    "lordaplala": "e.stopPropagation(); did the trick for me. \n$(element).on('mousewheel', function (e) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                        });. ",
    "yairEO": "sorry I have several projects of my own to maintain + full time job + work from the side... no time to fix code for others...wish I had but I really don't. All I can do is spare some minutes writing a list of issues i've seen from briefly looking at the source. if the author cares, he can fix these things up. if he doesn't...well...may god help us all :)\n. Awesome response. \nWhen will the next version be ready? I am eager to see the code\n. ",
    "blvz": "@yairEO if you were \"briefly looking at the source\" here at GitHub, you could leave comments on the code itself. It's more helpful and you don't look like a dick.\n. ",
    "seedwalk": "you are not loading the css file\n. ",
    "michalc": "@noraesae So I can think about it as well, what are the special cases?\n. I think I understand. So how about only hiding the bars on a call to update, like in my most recent commit?\n. I've now realised that in the latest version of perfect-scrollbar, this pull request isn't required, as the getRangeNode function returns null after entering a single character in an input, so the plugin doesn't think any text is selected, and so subsequent mouse movement doesn't cause the bug described. Closing :-)\n. ",
    "samuv": "Thanks for the answer and congrats for the good jobs you have done!\n. ",
    "Samuell1": "Version is latest (v0.5.8) and on container is padding.\n. It works. Thanks for fast reply and thanks for this cool scrollbar ! :)\n. ",
    "vytautas-pranskunas-": "position: relative helps but on IE11 it scrolls \"jumpy\". Wonder why ps-scrollbar-y-rail should change its top at all?. ",
    "DParua": "\nHello,\nPlease check the styles of the container div. Does it have any position style? If not, please add position: relative or whatever you want. If there is and it doesn't work yet, let me know if the container div has any padding value.\nCheers,\n\nI have the same exact problem.. I also tried adding position: relative; as it says so in the usage guide.. but still no luck.\n```\npages_list_div {\nposition: relative;\noverflow: hidden;\nborder: 1px solid #ccc;\nheight: 100%;\n\n}\n```\nThis is the CSS for perfect-scrollbar container.\n.page_num_div {\n    font-size: 10px;\n    height: 40px;\n    line-height: 40px;\n    border-top: 1px solid #fff;\n    border-bottom: 1px solid #ccc;\n    width: 100%;\n    padding-left: 15px;\n}\nDivs with class \"page_num_div\" are dynamically added and removed from the container \"pages_list_div\". \n\nThe div takes scrolling white space above the content as shown in the picture.. Please provide me with a solution.\n. ",
    "hannah111029": "@noraesae \nthanks~ Try i'll.\n. ",
    "nthibert": "Looks like things are working great now. Thanks for the update!\n. ",
    "NetOperatorWibby": "That's totally fine @noraesae, I'll update if I figure it out. Taking a break on development to learn some things for my OS.\n. ",
    "damchoi": "Hi,\nActually, I've been encountering this issue in real works (I'm using the latest version of chrome). So this is not for \"just in case\" and my fix have solve the issue indeed.\nPlease reconsider the request.\n. OK. I've attached some screenshots.\n\n\nAs you see, window.getComputedStyle(element)[styleName] (in cssGet() function) returns empty string when styleName is marginRight, borderLeftWidth or some.\n. I applied and tested the patch, unfortunately the issue still occurs. I will investigate more, and have plan for creating some example or test about this issue later.\nThank you for the support, though :)\n. ",
    "ObaidUrRehman": "Thanks @noraesae & @zomp . Appreciate your quick feedback.\n. ",
    "prashu421": "Can anyone check at this fiddle and tell me how to use update function in my case.\nIt doesn't work, as I think I am placing the update function at incorrect place.\nCannot just take \nconst ps = new PerfectScrollbar(demoDiv);\nand call ps.update();\nAs there are multiple sub-menu items in my case.\nhttps://jsfiddle.net/prashu421/egkfxzrt/\nAny help is appreciated.\nThanks.. Yes sir, will remember that. Appreciate your quick response. \nThank you.. ",
    "yhtomit": "I downloaded your plugin from the JQuery repo and the issue went away. Thanks.\n. ",
    "yashikagarg13": "Any updates on this.. I am facing the same issue\n. I found its the top that has extra value for div with class \"ps-scrollbar-y-rail\".\n. $(...).perfectScrollbar('update'); this doesn't help\nAttaching screenshot for this. Content is only upto the red border. the space after it is the extra height or top postion of  \"ps-scrollbar-y-rail\".\n\n. ",
    "AoEmaster": "Browser\n. ",
    "slimandslam": "You rock.  :-)\n. +1\n. ",
    "bertmsk": "Also remove from CSS\n-ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=60)\";\nfilter: alpha(opacity=60);\nBecause it's not needed since IE7 (and your scrollbar dont work in IE6 either)\n. ",
    "ditkachuk": "I have same problems on touch devices.\n. ",
    "Justin-lu": "@Kylia669  perfect-scrollbar  will bind the mousemove  by bindSelectionHandler when you have some selection.\nYou can read it for details.\n. ",
    "totszwai": "Yeah I already did something like that, just that the load order of the CSS is different, so i need to use !important. (we combine the css, clean and compress in the backend) 3rd party stuff load last, so the one came with perfectScrollbar end up being the last one.\nIn addition, because perfectScrollbar always put in custom styles at the back, you have to use !important to force it. ex: style=\"top: 0px; height: 722px; right: 3px;\"\nJust thought this should configurable options candidate.\n. ",
    "jaimz22": "I'd like for the scrollbars to be visible on initial load as well.\n. ",
    "fabiobiondi": "+1\n. ",
    "bugfreetech": "I am considering working on this request, it should be as simple as removing a css class on initial mouse hover (to retain the fade in/out behaviour) or simply changing main scrollbar css to always visible\n. I have opted to change my css so the bar is always visible. The bar now shows on initial load, as long as the element is scrolled first.\nFor now, this workaround:\nif(!$(\"element\").scrollTop()){\n  $(\"element\").scrollTop($(\"element\").scrollTop()+1);\n  $(\"element\").scrollTop($(\"element\").scrollTop()-1);\n}\nwill force the element to scroll (thus drawing the bar)\n. you have the same problem as https://github.com/noraesae/perfect-scrollbar/issues/393 and I still cannot make mine touch-scroll\nwhat broswer & os?\n. +1 this -- it was one of the first things i tried and it simply makes the main page scroll\n. @imShara thanks, looks very nice\n. i wish my elements had touch dragging on PC, how did you manage that? What browser? What OS?\n. ",
    "magnetronnie": "+1\nI'm using the scrollbar on widgets that contain items in a list and it's not always clear the list is longer than what's visible.\n. ",
    "AlessandroFlati": "Just write your own css:\ncss\n.ps-scrollbar-y-rail{\n    opacity: 0.6 !important;\n}\n. ",
    "paulm17": "Just to add my 2.c to this.\nI wanted the scrollbar on load of an overlay and then disappear on scroll.\nI added a class which exposes it.\n.overlay-detail.oninit .ps>.ps__scrollbar-y-rail>.ps__scrollbar-y {\n    height: 314px !important;\n}\n\n.overlay-detail.oninit .ps>.ps__scrollbar-y-rail {\n    opacity: 1 !important;\n    display: block !important;\n}\n\nWhich when my overlay gets shown, the class gets added.\nFor it to disappear (as normal) when the scrollbar is moved...\n$(\".overlay .overlay-detail-inner\").perfectScrollbar().promise().done(function() {\n    $(document).on('ps-scroll-down', function () {\n        window.setTimeout(function() {\n            $(\".overlay .overlay-detail\").removeClass(\"oninit\");\n        }, 750);\n    });\n});\n\nI found that 750ms was the optimal time, otherwise the bar would disappear and reappear for an instant.\n@noraesae many thanks for creating this plugin.  Definitely solved an issue for me!. ",
    "vaishnaviguduguntla": "code\n \n\n\n\nlibraries\n",
    "Alexwijn": "The stopPropagation causes an issue in my project. I got a sidebar that can open, it closes when the user clicks outside the sidebar. But because of stopPropagation I'm unable to detect if the user clicks on the scrollbar and because of that the sidebar will close even when the user does not want that.\n. Thanks for the quick response! Currently I have the following code to close the sidebar when clicking outside it:\n$(document).on('click', function (e) {\n    //\n});\nBut in e.target, where I normally check if its an element inside of the sidebar, I receive the wrapper element around the document rather than the sidebar when clicking it. And I think this is caused by the stopPropagation.\n. If its emulating native functionality than why is there a click event at all since it should not fire one? If it was not fired than my code is not executed and the sidebar is not getting closed.\n. Not sure why I did not saw stopPropagationOnClick earlier but for some reason this does not seem to work for me. The variable e.target still contains the wrapper of my document and not the scrollbar.\n. ",
    "aivarsak": "Adding onmousewheel=\"\" in iframe fixed my problem with scrollbar in Safari\nsource: http://kb.tableau.com/articles/issue/scroll-bars-in-embedded-views-do-not-work-in-safari\n. ",
    "Simoneth": "Hi @noraesae ,\nI have the same issue with a YouTube iFrame...but this trick didn't help me in Chrome, I can't scroll hover the iFrame\n```\n\n$(document).ready(function() {\n    $('.modal-container').perfectScrollbar(); \n});\nvar scrollbox=$('.modal-container');\n$('#yt-wrapper iframe').contents().find(\"body\").bind('mousewheel', function(e, delta) {\n  var scrollTopDelta  = delta > 0 ? -40 : 40; // maybe different for browsers\n  scrollbox.scrollTop(scrollbox.scrollTop() + scrollTopDelta).perfectScrollbar('update');\n});\n```. Dear @noraesae ,\nPlease have a look at this example\nWhy it's not working?. I've started a bounty for it...none knows a good reason for this issue. Could anyone here please help me?\nThanks. ",
    "agrublev": "Works for me over CKEDITOR :)\n```\nfkg.$scroll = self.$th.parents(\".fkit_scroll\");\n            var ckeditor_id = self.$th.attr(\"id\");\n            if(!ckeditor_id) {\n                return false;\n            }\n            CKEDITOR.instances[ckeditor_id].on( 'contentDom', function() {\n                var editable = CKEDITOR.instances[ckeditor_id];\n            editable.document.on( \"mousewheel\", function(e) {\n                var scrollTopDelta = e.data.$.wheelDelta > 0 ? -40 : 40; // maybe different for browsers\n                fkg.$scroll.scrollTop(fkg.$scroll.scrollTop() + scrollTopDelta).perfectScrollbar('update');\n            });\n        });\n\n```. ",
    "abdulmanan123": "Works for me over ckeditor :)\n```\nvar editor = CKEDITOR.replace( 'editor');\neditor.on( 'contentDom', function() {\n    var editable = editor.editable();\n    var win = this.document.getWindow();\n\n    editable.attachListener( editable.getDocument(), 'wheel', function(e) {\n\n        var scroll = win.getScrollPosition();   \n        var scrollTop = scroll.y;   \n        var scrollTopDelta = e.data.$.deltaY;                        \n        var scrollerOuter = $('.hrgmail_scroll_content');\n        var dragger = scrollerOuter.find('.mCSB_dragger');\n        var scrollHeight = scrollerOuter.find('.mCSB_container').height();\n        var draggerTop = dragger.position().top;\n\n\n            var scrollTop = draggerTop / (scrollerOuter.height() - dragger.height()) * (scrollHeight - scrollerOuter.height());\n\n            var mscScrollTop = scrollTop + scrollTopDelta;\n            if (scrollTop < y && scrollTopDelta < 0)\n                mscScrollTop = 0;\n\n            $('.hrgmail_scroll_content').mCustomScrollbar(\"scrollTo\", mscScrollTop, {\n                scrollInertia: 800,\n                scrollEasing:\"easeOut\"\n            });\n\n    });\n});\n\n```\n. ",
    "hellmelt": "I ran into this, just 9 days after the issue was closed... Please re-open it.\nTake a look at this fiddle:\nhttps://jsfiddle.net/hellmelt/xsh3uzsz/2/\n- The first box is a flex with normal order. It works as expected.\n- The lower box is a flex with reversed order. \n  - In Chromium 50.0 the scrollbar has the top too low. \n  - Firefox 46.0 shows no scrollbar at all, and the content is not scrollable.\nTested on Linux version of browsers. I have not tested any other browsers.\nI need this to work, so I'll try to solve it and submit a pull request later.\n. Yup, tricky. If I understood the code, perfect scrollbar relies on the browser's computation of scrollHeight (and scrollWidth). And for anything else than the conventional left-to-right, top-to-bottom ordering, the browsers do not compute scrollHeight/Width correctly when using flex.\nThis fiddle illustrates it (there is no perfect scrollbar in the fiddle):\n[https://jsfiddle.net/hellmelt/xLq0p1q6/]\nThe first box (flex-direction: column) is left-to-right, top-to-bottom, scrollHeight is correct, and perfect scrollbar would work for that particular case.\nThe second box (flex-direction: column-reverse) has the correct scrollHeight in chromium but the origin for the scrollbar will not be at the top for some reason (check my previous post and the fiddle linked there). In firefox the scrollHeight equals clientHeight, so no scrollbar would be displayed at all.\nFor the third box (flex-direction: column, justify-content: flex-end) the scrollHeight equals clientHeight in both browsers. No scrollbar would be shown, even though the content overflows.\nIf you change overflow:hidden to overflow:auto, you will see that the browser's built-in scrolling also fails, for box 3 in chromium, and boxes 2 and 3 for firefox.\nI guess a tedious and error-prone workaround would be to try to traverse all children inside the element, and add the heights together, and get a custom scrollHeight. But that feels genuinly wrong, the browsers should be able to compute scrollHeight and scrollWidth correctly. Don't you agree on that?\nSo in my opinion this is not possible to solve, and the only way out is to mention in the readme file that display:flex is a limitation where perfect scrollbar not always works as expected.\n. ",
    "MaximSaraev": "I have almost the same issue on Chrome (emulation iPad mode). And thanks for the good scroll, I expected that you find solution for this problem soon.\nI try to remove perfect-scrollbar.with-mousewheel.min.js from scripts for tablet layout, but it didn't help - error hapend on perfect-scrollbar.js:180\n. ",
    "jigar029": "I am using angular directive for perfect scrollbar and with Chrome Emulator, I am getting same error. Does anyone have solution to remove these errors with use of Angular directive? Any help will be appreciated.\n. @DanielApt : Thanks for opening issue again and making it active. I am using v0.6.10 for perfect-angular-scrollbar. One thing i found with this directive is, it's failing on destroying the scrollbar either on refresh on resize or orientation change on mobile devices while updating it. If I am removing function which destroy it, i am not seeing these errors at all. But this is not the way it should work. See $destroy function here: \n$elem.bind('$destroy', function() {\n        jqWindow.off('resize', update);\n        $elem.perfectScrollbar('destroy');\n      }); \n. I am on older version of scrollbar because I am using older version of angular (v1.3.10) in my application. Newer version of perfect scrollbar is not compatible with this version of angular.\n. Well, seems like changing version and upgrading from V 0.4.11 to V 0.6.10 fixed this issue. I am not getting this error anymore. Thanks for your help @DanielApt . You may want to close this thread.\n. ",
    "loominade": "you can actually do it yourself doing something like this:\n``` coffeescript\ninitallize perfectScrollbar\nscollable = $ '#scrollable'\nscollable.perfectScrollbar()\nadd \u2190 and \u2192 buttons\nprev = $ ''\n  .html '\u2190'\n  .bind 'click', ->\n    scollable.scrollLeft scollable.scrollLeft + 10\nnext = $ ''\n  .html '\u2192'\n  .bind 'click', ->\n    scollable.scrollLeft scollable.scrollLeft - 10\nscollable.append prev\n  .append next\n```\nits pretty easy to trigger the native scrolling\n. that is perfect.\nThank you\n. I already tried that but I can still scroll the ps, using the two-finger-scroll\n. Works well. Thank you\n. > I personally do not have any experience with BEM.\nI am myself not very experienced with it. It would be nice if someone from github.com/bem could review it.\n. Interesting. I was only familiar with the two dashes style\n@tadatuta which style would you recommend to use and why? why is there even a choice between all these styles?. So I guess it is up to the maintainer @noraesae to pick a style for modifiers.\nThe two dashes style is closest to the current implementation. . I propose to change the theme class like this:\ndiff\n- <div class=\"ps-container ps-theme-default ps-active-x ps-active-y\">\n+ <div class=\"ps ps_theme_default ps--active-x ps--active-y\">\nwhat do you think? @shchukin, @tadatuta. thank you @tadatuta \nI propose the second variant. Will provide a PR later. @noraesae does this class do something? I was not able to trigger it.. ",
    "suriyagp": "oh thank u\n. ",
    "sathishcst10": "```\nvar ps = new PerfectScrollbar('.container');\nprev = $('').html('\u2190').bind('click'),\n    ps.scrollLeft().scollable.scrollLeft() + 10;\nnext = $('')\n  .html('\u2192')\n  .bind('click'),\n    ps.scrollLeft().scollable.scrollLeft() - 10\nps.append(prev)\n  .append(next)\n```\nabove is my code, its have some issues, i can't fix, can you please help me?. ",
    "oleduc": "Workaround: Make sure that initialization occurs after the container is appended to an existing DOM element.\nThat said, this still needs to be addressed.\n. ",
    "chrissound": "Ah it was the latest version on cdnjs. \n. Have a great day! Thanks for the quick response!\n. ",
    "lebiru": "this is also a bug for me. \n. ",
    "roxaloxa": "Nevermind, ignore this. Turns out the problem was something else entirely. Sorry.\n. ",
    "11mb": "It is considered invalid HTML when you have 3 ID's which are the same. ID's should be unique.. so you may want to use classes: \n<div class=\"demo\">\n. ",
    "sergeylaptev": "thx for help!\n. ",
    "guandai": "add an additional option   sizeScale , which can scale scrollbarYRail  scrollbarY  scrollbarXRail scrollbarX\n. for continuous contribution I would like keep eye on this project and finish document , maybe you can create a group for all active contributors:)\n\u53d1\u81ea\u6211\u7684 iPhone\n\n\u5728 2015\u5e746\u670822\u65e5\uff0c14:30\uff0cJun notifications@github.com \u5199\u9053\uff1a\nApplied with db855ce. Thanks! And I've not yet merged the sizeScale feature, but if still interested, pls upload it as a seprated PR with documentation update too.\nThanks you very much! \n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "asaadmahmood": "+1 facing this issue, not sure if it's because it's nested but none the less facing it.\n. It's due to pointer-events: none; on \n.ps-container.ps-in-scrolling or.ps-container:hover.ps-in-scrolling\nremoving them from both classes in the css file fixes it for me.\n. ",
    "liugui": "I tried to remove the \"pointer-events:none\" from css file, but it not works.\nSo I open the js file, and there is a function named \"bindSelectionHandler\", which is invoked in the initialize function. Disabled it and then the problem solved!\n. ",
    "ayamflow": "Minified + gzip'ed version is 6kb.\n. ",
    "noherczeg": "I think he wants to hide the scrollbar when the content inside is empty.\n. If I'm not mistaken there actually is some text below the top scrolling area. I can certainly see the top of some text there. That's why it's there imho.\n. Have you tried the scrollYMarginOffset option? Are there any  tags at the end of the text? Or any leftover whitespaces? If not then it might be some sort of css problem in your code imho :-/\n. Without code I can't think of anything else.\n. ",
    "Jhonan321": "That's right @noherczeg,\n\nall divs have the same class, but in first div there is no content and even has the scrollbar, what should i do to hide de scroll bar in the first div without broke the rest\n. nop, there is nothing in first item, look\n\n and appears the scroll bar, in second one there is more info and the scroll bar is good, in first one is not\n. nope, there is nothing, and the problem is not that has an empty scroll, the problem is the scrollbar, it appears but the info is static, just appear the bar, there is no scroll\n. anyone???\n. you got a personal email? i dont have permission to publish the  url, im pretty sure you shall follow me when you see the real problem\n. ????????\n. you got the url on your inbox! i just send it\n. I'll try it and i let u know what happened, thanks bud!\n. It works, perfect!!! thanks for helping and time you guys!\n. ",
    "zedtux": "A z-index of 1000 out-of-the-box make more sense to me, as the scrollbar should be always visible. Then in case people needs to change it (1% of the use cases?) then they could override it.\n. ",
    "kotmatpockuh": "same issue...\n. @noraesae \nhow can i update Ps in angular 2?. ",
    "brunowego": "+1\n. ",
    "denniskuligin": "Well I can agree, that there's definely some memory leak exists... \n. ",
    "jeremygachet": "And I don't understand why, everthings seems to be cleanup as needed in the directive, but their is still som dom nodes which are retained. \n. ",
    "mAAdhaTTah": "FWIW, my best guess is the detached DOM nodes are getting captured in a closure scope somewhere, without diving into the code itself.\n. ",
    "liquida": "hello! thanks its working :)\n. ",
    "BannedForLife": "It seems to be happening on the inner-most scrollbar of nested scrollbars. I can scroll up but scroll does not propagate downwards. Ill see about getting a plunkr/codepepen together.\n. Here is a link to a codepen that shows the problem. The red div in the is scrollabel but will not propagate down to the image. The codepen uses perfect-scrollbar not angular-perfect-scrollbar which makes me think it is not necessarily a problem with angular-perfect scrollbar. Anyway here is the codepen: http://codepen.io/anon/pen/mJaeKR    I will raise it as an issue on perfect-scrollbars github page also.\n. I just realised that you maintain both so I will not post it in perfect-scrollbar.\n. My problem was due to padding on the top and bottom of an md-card. This padding meant I never actually hit the bottom of the card and thus the scroll was never propagated.\n. ",
    "clementprevot": "Hi!\nI've been confronted to the exactly same problem as you were. The wheel propagation works well going up but not going down.\nHowever, the CodePen you provided @noraesae was working very good.\nIt occurs that my problem, and probably the problem of @BannedForLife, was due to some rounding issues in the bindMouseWheelHandler.shouldPreventDefault() function: you first get the scrollTop of the scrolled element (in my case, it gave me 711.888888px). Then, later you compare it with i.contentHeight - i.containerHeight (which in my case gave me 712px) to check if it's greater than this. In my case, because of the rounding, scrollTop is lower than i.contentHeight - i.containerHeight, so the scroll propagation is stopped.\nIf you add some Math.ceil() everywhere (for the scrollTop attribute and the i.contentHeight - i.containerHeight operation) it works like a charm.\n@noraesae Do you confirm that this can solve the problem? Do you want me to make a pull request or can you fix this in the master by yourself?\nWhatever, thank you very much for this beautiful and very really super duper usefull plugin! :+1: :wink: \n. Thanks for letting me know. However, I don't have any padding (and certainly not of 0.2222 px :smile:)\n. ",
    "spyesx": "Thank you very much for this idea. It was a simple line hidden in a package.\nvar Event = window.Event = module.exports = function() {};\nDon't know what's the point to write that but anyway, it works now ;)\n. ",
    "behz": "I faced same problem. I have three windows laptops. all updated to windows 10.  Perfect Scrollbar works perfect on IE 11 on all of them, but on two of them which are lenovo thinkpad it doesn't work on Edge browser when scrolling with trackpad. mouse wheel scrolls but there is no scroll UI.\n. @MattyBalaam thanks. I just tried that line didn't fix it. \nI found a clue, I put alert(e.pointerType) inside  src/js/plugin/handler/touch.js > function touchStart(e) {...}\nwhen I scroll with either mouse or trackpad on IE 11 and Edge(on pc that PS works),  e.pointerType returns \"mouse\". but using trackpad on affected machine returns \"touch\"\nI'm also suspicious of MSPOINTER_TYPE_MOUSE as it's not supported on edge\nhttp://compatibility.shwups-cms.ch/en/home?&property=MSPointerEvent.MSPOINTER_TYPE_MOUSE\n. Good find @MattyBalaam  touch-action: none fix the scrolling problem. thx\nThough it fixes scrolling but the fact that using trackpad triggers touch functions instead mouse, makes some problems. there is no easing effect and touchmove moves page a little(much little compared to IE11).\n. ",
    "filfat": "Enabling \"MSPointer event interface\" inside about:flags fixes the issue, but that isn't really consumer friendly.\n. ",
    "JoshChoice": "Facing this issue too. Any more leads...?\n. ",
    "themevan": "Same issue here. I tried to use touch-action:none to fix the scrolling problem on Win8 touch screen, but the mouse can't scroll the page any more...  Any solution?\n. ",
    "elantion": "It's not just make Perfect-scrollbar work. It's also making Iscroll work in Edge. Interesting, what's the magic of this css property?\nBut the div not scroll smooth now.\n. ",
    "iver56": "@noraesae I tried that PR. Indeed, it fixes touch scrolling in Microsoft Edge.\n. @noraesae Perfect! That's worth a release, isn't it? :)\n. @noraesae This change didn't make it into 0.6.9. Try to run bower install perfect-scrollbar and search for touch-action: (which was one of the things this pull request added) in the downloaded code.\nTL;DR: Touch scrolling still doesn't work in Edge in 0.6.9\n. It seems that this commit is the culprit:\nhttps://github.com/noraesae/perfect-scrollbar/commit/3e76ce9d3ed291941f600f9121a2f59b857235a3\n. Splendid! Now it works\n. In my case touch scrolling (on a win10 laptop with touch) works in Chrome, Opera and IE11, but not in Edge and Firefox. The problem with Edge seems to have been fixed by https://github.com/noraesae/perfect-scrollbar/pull/401 which is not released at the moment\n. ",
    "s1291": "I had the same problem, I downloaded the new driver from the synaptic website ... but It still not working, but when I uncheck \"Three-Finger Flick\" it works fine, Now I can scroll inside MS Edge, settings ....etc\n. ",
    "steel97": "Got the same problem,here is live example skinov.net,this issue appears when someone writing a message and height of div is updating\n. Thanks for reply,I am not sure about async calls(i think that it's possible if websockets work asynchronously),but I sure that i call update after content updated,here is code example that executing after one of websocket events:\ndocument.getElementById(\"scr-chatbox-cont\").innerHTML += entry;     \nchatContainer.scrollTop = 1000000;\nPs.update(chatContainer);\nP.S Sorry for bad english\n. Yes this code from my page,I trying to write clean example that can cause this issue,I'll post it here when I finish\n. Ok,ready http://jsfiddle.net/3hn8L85b/8/, i am new to jsfiddle so onLoad method for me not worked and thats why code is not so clean,to reproduce issue just click several times on button\n. looking forward for fix, thanks in advance!\n. Hmm,i think that i understand my problem,here is workaround:http://jsfiddle.net/3Lurqnx0/1/ thanks for help,no fix required anymore)\n. ",
    "brendonmm": "It's exactly what I mean. There are any way to use rails for scroll the content?\n. I'll try some modifications here to implement this feature and if I have \"a solution\" make a PR here, alright?\n. @davilmaster Teria um exemplo disso ou em que navegador(es) acontece, para que possa verificar? \nPs.: O Jun n\u00e3o fala portugu\u00eas. =)\n. ",
    "thanhmabo": "Thanks @noraesae \n. ",
    "sacredMonster": "I am facing the same issue and was wondering if you can tell me what the fix/issue was??\nThanks..\n. ",
    "EIrwin": "I am having the same issue.\n. ",
    "DaRR2121": "Hey Noraesae! I made a post on Stackoverflow. http://stackoverflow.com/questions/32576843/perfect-scrollbar-not-showing-updating-the-scrollbar-in-modal. :) I'm still very new to all coding and the likes. This the js for the modal plugin https://github.com/VodkaBears/Remodal/blob/master/dist/remodal.js\n. I've tried putting\n    remodal.$bg.addClass(remodal.settings.modifier);\n    remodal.$overlay.addClass(remodal.settings.modifier).show();\n    remodal.$wrapper.show().scrollTop(0);\n    remodal.$modal.focus();\n   remodal.perfectScrollbar('update');\nbut that doesn't work. \n. Solved it by calling scrollbar after modal content loaded. :)\n. ",
    "VPenkov": "Seems like a Firefox issue. I already submitted a report there as well.\nThe same bug occurs in virtually all custom scrollbar plugins. Not sure if there's another way to implement this or I should close the issue.\n. You seem to be correct.\nIs there something I should know about this? Any workaround maybe?\n. Yeah, unfortunately it's not the same in a few ways:\n1) Disabled inputs don't actually get submtited with the form (readonly do)\n2) You can actually interact with a field with which you're not supposed to. That's bad UX.\n3) This doesn't work too nicely, unfortunately.\nI resolved my issue by adding a transparent div on top of my disabled inputs and scanning for it when necessary (more on that later).\nI did find a few scrollbars that don't have the issue but unfortunately I'm not too savvy with javascript to commit anything more useful than opening an issue and giving some info.\nThis one works: https://github.com/jnicol/trackpad-scroll-emulator\nThis one also works: https://github.com/noeldelgado/gemini-scrollbar\nThere was one more but I lost it somewhere.\nNot sure what they do differently but I'm hoping to give an idea or two.\nAs a workaround I did the following thing that is completely unrelated to perfectScrollbar but might be helpful to somebody:\n1) I put all my inputs inside <div class=\"field\">\n2) I wrote this: \n``` html\nvar is_firefox = /Firefox/i.test(navigator.userAgent);\n$.fn.inputDisabled = function() {\n        var $this = $(this);\n        var $parent = $this.parent();\n        $parent.addClass('input-disabled');\n        $parent.append('');\n        return $this;\n}\nif (is_firefox) {\n        $('input:disabled, textarea:disabled').inputDisabled();\n        $('.disabled-overlay').on('click', function(event) {\n                event.preventDefault();\n                var $this = $(this);\n                var $input = $this.siblings('input');\n                if (!$input.prop('disabled')) {\n                        $input.focus();\n                        $this.remove();\n                }\n        });\n    $('.field').on('mouseover touchstart', function(e) {\n            e.preventDefault();\n            var $this = $(this);\n            var $input = $this.children('input, textarea');\n            if ($this.children('input:disabled').length != 0 && $this.children('.disabled-overlay').length == 0)\n                    $input.inputDisabled();\n    });\n\n}\n```\n3) ...and this:\ncss\n.input-disabled {\n position: relative;\n .disabled-overlay {\n  position: absolute;\n  content: '';\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n }\n input:not(:disabled) + .disabled-overlay {cursor: text;}\n}\nThis works for me. For now, at least. Hopefully the author might work around the issue and this would really be a 'perfect' scrollbar.\n. Will be fixed in Firefox 47 which is coming in June.\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1212116\n. Not sure what you're asking but it's probably this\njavascript\n$('.cs-scroll, .cs-scroll-2').each(function(){\n$(this).perfectScrollbar();\n});\n. ",
    "leoloso": "I'm using Google Chrome Version 45.0.2454.99 (64-bit)\n. ",
    "imShara": "@bugfreetech, i think they don't approve patch for this, because it can be made only with hacks, wich not works in some browsers. I probably will make purejs port of jquery-scrollbar. \n. @bugfreetech, there is cool gemini-scrollbar.\n. ",
    "Reeker94": "Actually, it doesnt work if scroll container bigger than window height :<\n. ",
    "DevertNet": "+1\n. ",
    "thanhansoft": "I same you, please help me. ",
    "pmtarantino": "Hi Daniel, if you could generate the .min.js would be great because we are needing it to keep working on this project. We are using the jQuery plugin, by the way. \n. Thank you Daniel, you are the best :) It worked like a charm!\n. ",
    "forivall": "Enjoy. Click here if you want a PR of it. It's not complete at all, but it's most of the hard work. Definitely needs to go behind a flag.\n. public service announcement: github releases are great!\n. Confirmed, no events on mousewheel down; win 7, chrome 46.0.2490.71 \n. The events are fired properly in Firefox (41.0.2), but this but is reproduced in chrome (same ver), Arch Linux + Gnome 3.18.1. Seems like a chrome issue, but not a platform issue.\n. ",
    "sly-slaw": "I tried , but stopPropagation not working. http://jsfiddle.net/rd2d2/aqvfx6j6/2/\n. worked, thanks!\nhttp://jsfiddle.net/rd2d2/aqvfx6j6/3/\n. ",
    "roedit": "I'm using it as a thirdparty. \nbrowserify: {\n            public: {\n                options: {\n                    transform: [\n                        ['babelify', {\n                            loose: 'all',\n                            \"compact\": false\n                        }]\n                    ],\n                    alias: [\n                        '../public/client/thirdparty/react-0.13.3/react-with-addons.min.js:react',\n                        '../public/client/thirdparty/jquery-2.1.4/jquery-2.1.4.min.js:jquery',\n                        '../public/client/thirdparty/react-bootstrap/react-bootstrap.min.js:bootstrap',\n                        '../public/client/thirdparty/perfect-scrollbar/perfect-scrollbar.min.js:scrollbar'\n                    ]\n                },\n                files: {\n                    '../public/client/js/compiled/shared.concat.js': ['../public/client/js/concat/shared.concat.js']\n                }\n            }\n        }\n\"grunt-browserify\": \"^3.8.0\",\nSo i'm pointing to the downloaded file. I have a better control like this.\nWhen I require the library like this Ps is an empty object.\nThank you!\n. ",
    "cazacugmihai": "Hi, \nOK, it makes sense. Thanks for the feedback!\nBest regards,\nMihai\n. ",
    "bewards": "Same machine and chrome ver. as forivall.\nI believe tracking mousewheel solely is handled with the \"DOMMouseScroll mousewheel\" event, seen here: http://jsfiddle.net/honk1/gWnNv/7/\n. ",
    "zackkrida": "I'm seeing the events in @bewards demo, but not in a project of my own. I'll provide more details asap\n. ",
    "mimimimichael": "Having the exact same problem here, with some Windows 10 convertible, supporting touchscreen- and touchpad-input.\n. ",
    "closebang": "Since Firefox 24, Mozilla turn off the the touch event api for the desktop browser.\nhttps://developer.mozilla.org/en-US/docs/Web/API/Touch_events#Browser_compatibility\n. ",
    "Maximaximum": "UPDATE: Sorry, this appeared to be the case only if switch to touch emulation without reloading the page. Reloading the page fixes the problem.\nPerfect scrollbar does not seem to work with touch emulation in Google Dev Tools. Is this a Google DevTools bug, or a Perfect scrollbar bug?\n. ",
    "jaykyburz": "In firefox 48.0.1 on a Surface Pro 3, I can touch the scrollbars and drag touch the actual bar to scroll, but touch dragging the content of the element doesn't seem to work. \n. ",
    "zenorocha": "+1\n. I have multiple columns with vertical scrolls and a horizontal scroll to move the whole page.\nWhen I move the vertical columns it works nice. The problem is that when I move horizontally using a trackpad it also detects the vertical scrolls from each column, causing them to move on a weird way.\nHere's a more visual example of what I'm trying to describe.\n\nIf there was a way to detect a horizontal scroll and then lock any other vertical scroll, I guess that would fix the problem.\nWhat do you think?\n. Any news on this? Here's a minimal JSFiddle that shows the problem: http://jsfiddle.net/zenorocha/wb6b635q/\n. ",
    "czak": "My personal use case is simpler than yours (just a single large table), so I kind of got used to it.\nI'm not currently pursuing this addition.\n. ",
    "pliasetski": "Hello,\nI have the same problem in IE10 and IE11. But for only scroll down doen't work. Please see this video file for more details:\nhttps://www.dropbox.com/sh/55w3nbu2jdnq6ew/AAAsjewRHCbDMkdizqtDw7bwa?dl=0\n. Hello,\nI've checked this file: https://github.com/noraesae/perfect-scrollbar/issues/409\nThere is no window.scrollY and window.scrollX in IE11 and below. It works only in edge.\nhttps://developer.mozilla.org/ru/docs/Web/API/Window/scrollY\n. ",
    "Chehow": "Hi guys!\nAny progress with this issue? I have the same problem and this really important for my project.\nThx in advance.\n. ",
    "jinmingyougit": "Hi,  \nThanks for the quick reply. I think we should be able to prevent the parent div scrolling by prevent touchMove event already. The code is pretty much in place. https://github.com/noraesae/perfect-scrollbar/blob/master/src/js/plugin/handler/touch.js#L113\nIt will prevent parent scrolling if the inside ps container is still in the middle of scrolling(not hitting the boundary yet). \nHowever, in order to totally remove the stopPropagation in touchStart handler, we need to get rid of the document touchstart handler, since it will cause cause inGlobalTouch to be true and cause touchMove handler to be never executed even if it inside the local touch.  \nI understand getting rid of the document touchstart/end handler will cause unnecessary calls for multi-touch gesture. But I think it is worth it compare to not having touchStart event.  I am going to have a PR for this soon.  \nThanks again for your comments.\n. ",
    "jmuerle": "I also found on my own that this change was necessary. Please merge this as soon as you can. Instead of adding the isScrollable function, though, I added a check into shouldHandle that returned false if both scrollbarXActive or scrollbarYActive were false.\n. ",
    "MartijnBroere": "I am having sort of the same issue. When the page is loaded, i want the element on which perfect-scrollbar is applied to (container), to be horizontally scrolled to a given position. This is done by container.animate({scrollLeft:givenPosition}). After this perfect-scrollbar works perfectly fine, just as expected. \nBut on a touch-device (tested on iPad Air on iOs Simulator) the first touch after page-load makes the container jump to the ultimate left, i am assuming scrolled to 0. If i touchmove after this, it works again just fine.\nCould this issue also be related to #414 ?\n. ",
    "ScoutsOut": "I needed to quickly resolve this issue for us on a project. Since it is a requirement to always display scrollbars we created the following CSS rule (Sass rule):\n.parent-container {\n    &.ps-container > .ps-scrollbar-x-rail,\n    &.ps-container > .ps-scrollbar-y-rail {\n      .ps-scrollbar-y {\n        min-height: 90px;\n      }\n      opacity: .6;\n      display: block;\n      min-height: 100px;\n    }\n}\n. ",
    "ciccia": "Same for me. I'm on an Angular project. \nI fixed it calling (in a digest apply) update wrapped in a timeout with 100 as delay.\njavascript\n$timeout(function () {\n          $element.find('.table-responsive').perfectScrollbar('update');\n        }, 100, false);\n. ",
    "jmaks1": "i'm loaded all packages from bower and one from npm) \nperfectionist in me suffering\n. ",
    "wujekbogdan": "+1\nI include all the *.scss files directly from bower components. For perfect-scrollbar i had to make an exception and copy the file into my /src/scss/ directory. I feel bad about it.\n. Sure: https://github.com/noraesae/perfect-scrollbar/pull/434\n. @sharpshark28 \nSo you can give it a try. Here's a fork I created: https://github.com/wujekbogdan/perfect-scrollbar/tree/Make-perfect-scrollbar-easily-themeable-%23432\n. Thanks a lot. I'm glad I could make this great plugin even better. \n. It seems that these options are doing something different. Have a look: http://codepen.io/wube/pen/mEpaRk\nThere's no offset. Scrollbars are aligned to the edges of the container. \n. > Better styling.\nDid you consider using BEM methodology?\n. > (...) but I am thinking about starting from modifying the current code base.\nGood strategy, here's an interesting post about it: https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/\nYes, the post is old, but it's still valid.. Why? This is a parameter. All the parameters are cammelCase with a lower case at the beginning. \n. I don't know... For users it would be better to have at least one example... on the other hand if we provide an alternative theme it would be good if it was a nice theme. not 'big-and-ugly' :)\nSo I will remove it and improve the readme.md file with code samples.\n. sure ;)\n. ",
    "sundarj": "Closed because I've realised there is a prior issue.\n. ",
    "kstover": "@DanielApt Sure! I'm a bit busy with other things, but will get a fiddle up in a couple of hours.\n. I had created an issue earlier, but I never had time to actually post a fiddle.\nI was able to correct this problem in my use-case by using overflow-y: hidden !important rather than overflow:hidden !important. I only need to scroll on the Y axis, so this worked for me and allowed the sortable to scroll.\nSo, the CSS looks like:\n.ps-container {\n    overflow:auto !important;\n    overflow-y: hidden !important;\n}\nI hope that helps!\n. ",
    "Perezmarc": "Hey, \nI'm struggling with the same issue, did you solve it?\nThanks!\n. ",
    "rmemon": "Hi @DanielApt \nI am facing same issue and created jsfiddle, can you please help me with this, \njQuery sortable without perfect scrollbar:\nhttps://jsfiddle.net/rahilmemon/dsh1x34v/3/\njQuery sortable Integrating perfect scrollbar:\nhttps://jsfiddle.net/rahilmemon/dsh1x34v/4/\nThanks in advance \n. ",
    "axelboc": "Awesome, thanks! :+1: \n. Hey, thanks for taking a look! :)\nSorry this wasn't clear in the commit message: I'm not referring to the reach-(x|y)-(start|end) events, but to the scroll-(x|y) and scroll-(up|down|left|right) events. Those return statements that I removed where preventing the other conditionals further down from being checked. Does that make sense?\n. Yeah that's it. No worries, please do!\n. Happy new year @DanielApt! Thanks for merging this in. By any chance, would you have time to do another release some time soon?\n. Thanks! :)\n. When ps-x-reach-end gets triggered, it means that the user has scrolled towards the right. So could you listen to ps-scroll-left instead of ps-scroll-x? By doing so, the class would be removed only when the user scrolls left. And you could do the same on the other side with ps-x-reach-start and ps-scroll-right.\n. ",
    "mandar-k": "thnx for the support but problem is resolved now with small changes in css for resizable div and ps css.\n. ",
    "zauni": "Just wanted to say, that this pull-request can change the order in which the events are firing. For example in this code:\n``` javascript\n$el = $('.foo');\n$el.on('ps-x-reach-end', function() { $('.bar').addClass('reached-end'); });\n$el.on('ps-scroll-x', function() { $('.bar').removeClass('reached-end'); });\nscrollbar.initialize($el[0]);\n```\nWhen scrolling to the end, it was triggering the ps-x-reach-end event as the last event. But with this pull-request the ps-scroll-x event is triggerd as the last event.\nIn my case I want to add a class to another element if the scrollbar hits the end, and it should remove the class if the scrollbar is scrolling. But now the class is removed even if the scrollbar hits the end, because the scroll event is fired last.\nWould it be possible to change the order of the events inside update-scroll.js, so that the xEndEvent and yEndEvent are fired last?\n. That's a good idea!\nI solved it yesterday by saving the scrollLeft property on reach-end and checking in the scroll-x event handler if the scrollLeft property is different. But thanks for the suggestion :+1: \n. ",
    "yasirhaleem": "Hi,\nThanks a lot for the reply, i have set wheelPropagation to true\n$('.ui-panel-content').perfectScrollbar({ \n          wheelPropagation:true\n         });\n.ui-panel-content{height:500px;}\nbut its too much sluggish almost not responding\ni'm implementing perfect scroll bar to primefaces dashboard component\nhttp://www.primefaces.org/showcase/ui/panel/dashboard.xhtml\nso there will be multiple scrollbars \nanother thing i don't see scrollbar inside .ui-panel-content  but inplace of default chrome scrollbar i'm on mac.\n. here is the fiddle https://jsfiddle.net/yasirhaleem/b7ng0h9k/3/ please scroll slow within grey area ( perfect-scrollbar )\n. @DanielApt  great!! because of position:relative ( sorry i missed that ) now i see the scrollbar but scrolling effect is same its almost not responsive.\nwhen i reached end point of div having perfect-scroll scrollbar and i'm scrolling inside div to see bottom content or move to bottom i can't.\ni'm on Mac Yosemite using Chrome latest version.\ni can prepare short video if needed.\n. @DanielApt please click below link to see video, please use mouse pad for scrolling.\nhttp://screencast.com/t/NKRlaIiH\n. ",
    "akocmark": "this happens to me also. Im on elcapitan mac. latest chrome\n. ",
    "azala": "@DanielApt No problem! Several mobile Apples Against Humanity players had this problem after I switched to perfect-scrollbar, so I had to do something about it.\n. I'd second this - touch-action:none disables very popular gestures like pinch/double-tap to zoom.\nI'm using touch-action:auto on my local build.\n. ",
    "friedman30": "I can use that too. please add\n. ",
    "chavishindler": "Thanks for the change.\nBut what about the second change:\nin perfect-scrollbar/src/js/plugin/handler/keyboard.js remove lines 49-51:\nif (!hovered) {\nreturn;\n}\nthese lines cause the keyboard up/down keypress to work only on mousehover - and the accessibility rule is that when you focus on the scrollbar you can go up and down also not on mousehover.\nwaiting to your reply.\n. Sounds good.\nIs it going to be fixed soon?\nThanks\n. Thanks!\nCan you release a formal version?\nWaiting for your reply...\n. hi,\nI have the same issue with uib-dropdown.\nIt seems the fix for the bug is that you should add to perfect-scrollbar library an onclick event to ps-scrollbar-x-rail and ps-scrollbar-y-rail that invoke event.stopPropagation to prevent the default dropdown click behaviour which hide the dropdown.\nwaiting to your reply, thanks.\n. Why can not perfect-scrollbar control event propagation of the parent container?\nIf I add a button in the uib-dropdown and on-click I invoke event.stopPropagation the dropdown is not closed. I think it should behave the same in perfect-scrollbar.\n@noraesae can you add this behaviour?\nthanks.\n. If I add the on-click to all the perfect-scrollbar that wraps my list - it should prevent the children behaviour.\nBut I think if I add the onclick event only to ps-scrollbar-y - it should not prevent my list behaviour because the ps-scrollbar-y is not a parent of the ul or li.\nHere is your jsFiddle example source code - you can see the ps-scrollbar-y is not parent of the li list:\n<ul class=\"dropdown-menu scroll-container ps-container ps-theme-default ps-active-y\" role=\"menu\" data-ps-id=\"e9e5697b-faf9-87e9-d8e6-35e15ccc7c77\">\n                   <li><a href=\"#\">Item 1</a></li>\n                   <li><a href=\"#\">Another item</a></li>\n                   <li><a href=\"#\">This is a longer item that will not fit properly</a></li>\n                   <li><a href=\"#\">Item 2</a></li>\n                   <li><a href=\"#\">Item 3</a></li>\n                   <li><a href=\"#\">Item 4</a></li>\n                   <li><a href=\"#\">Item 5</a></li>\n                   <li><a href=\"#\">Item 6</a></li>\n                   <li><a href=\"#\">Item 7</a></li>\n                   <li><a href=\"#\">Item 8</a></li>\n                   <li><a href=\"#\">Item 9</a></li>\n                   <li><a href=\"#\">Item 10</a></li>\n                 <div class=\"ps-scrollbar-x-rail\" style=\"left: 0px; bottom: -121px;\">\n                     <div class=\"ps-scrollbar-x\" tabindex=\"0\" style=\"left: 0px; width: 0px;\"></div>\n                 </div>\n                 <div class=\"ps-scrollbar-y-rail\" style=\"top: 124px; right: 3px; height: 198px;\">\n                       <div class=\"ps-scrollbar-y\" tabindex=\"0\" style=\"top: 77px; height: 121px;\"></div>\n                  </div>\n</ul>\nhere is an example of div that onClick event doesnt close the dropdown: https://fiddle.jshell.net/auok2bg8/6/\n. ",
    "rebootcode": "I am using version 0.5.7\n. On Samsung Galaxy Tab and Samsung Grand Prime. Both.\nYes, already checked mobileCheck, it returns true on mobile and tab.\n. Hi DanielApt, I am still integrating latest version in my framework, i was using older version earlier.\nThanks\n. ",
    "sharpshark28": "Something like this would be great. I feel dirty practically needing to !important override most of the styles to adjust it to look like what a designer expects it to look like. Even basic color swaps are like this.\n. ",
    "deje1011": "The only fix I came up with so far is the \"delta-check\" (Edit 4). But suddenly it does not work anymore (after I updated to 0.6.10 I guess). Also, I can't get the gulp tasks to work properly anymore. They seem to be working but my changes aren't reflected in the output... If I find the time, I will look into it a little more next week. \n. ",
    "iconexperience": "While detecting a pinch gesture may be difficult, it should be easy to detect if the user holds the ctrl key during scrolling uing MouseEvent.ctrlKey, no? I am a Windows user, but ctrl+mouse wheel is used for zooming on Mac OSX, too, I think. This would at least cover zooming for mouse/keyboard usage.. ",
    "brauliobo": "+1\n. Nice, thanks!\nEm ter, 23 de fev de 2016 13:33, Jun notifications@github.com escreveu:\n\nMerged. It may take some time for the JSDelivr machine will actually load\nthe scripts, but maybe soon.\nThanks.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/noraesae/perfect-scrollbar/issues/439#issuecomment-187775940\n.\n. the link for usage: https://www.jsdelivr.com/projects/perfect-scrollbar\n. \n",
    "bradvogel": "Thanks all!\n. ",
    "phillip-haydon": "Yeah that works perfectly! I double checked my version and I'm using 0.6.8. \nIt's 2am here so I don't want to waste your time investigating something that may be my issue. Let me take look tomorrow after work, maybe I'm doing something really stupid and I'm too tired to see it!\n. It's definitely not working in my project. I'm trying to isolate it so I can create a way to reproduce it to see if it's indeed a bug or caused by me.\n. perfect-scroll.js\nTrying hard to ditch jquery, got 1 dependency left on jquery to convert. :) (I don't support IE 10 or below)\n. Ok I got it partially working...\nPs.initialize(scroller, {\n                wheelSpeed: 2,\n                //wheelPropagation: false,\n                minScrollbarLength: 20\n            });\nIf I comment out Wheel Propergation, and I click on the scroll bar and move it. The event gets raised.\nIf I scroll with the school wheel, it does not raise the event.\nIf I add the parameter as {} the same issue occurs.\nIf I remove the parameter completely:\nPs.initialize(scroller);\nThe events are raised perfectly fine.\nApplying the same logic to your example doesn't have the same effect tho.\n. ",
    "tonypine": "I'm getting an error related to this to \n\nthe setId and getId doesn't work as expected. This is an IE10.\nI actually tested it on the JSFiddle that you @DanielApt referenced, and it worked, but \nthere's a case that the getId n setId aren't working properly. I'm debugging here, but until now\ni didn't find what's the cause of the bug. \nIn my case, the solution of the @alicjakujawa worked. \n. @DanielApt yesterday with your JSFiddle and debugging I find out the reason that i'm getting that error. Maybe it isn't related to the one that @alicjakujawa are getting. I was using a polyfill to improve the support to the dataset method, and that make the behavior different from that expected, that's the dataset to be undefined.\nIf you include this polyfill you should be able to re-create the bug. So don't know, if u want to extend the support to others using this polyfill you need to do a fix.\nLook at this JSFiddle simulating the bug. If you run it on IE10, u'll see a div with an data-id, with the polyfill you can access it with the dataset.id, so the dataset ins't undefined. But if u do, dataset.id2 = 'test', it doesn't work, you can only set with the setAttribute, and after this you can get with the dataset method. So maybe you can change the setter to always use the setAttribute or improve the condition.\n. ",
    "rayronvictor": "Try angular-perfect-scrollbar.\n. ",
    "ethanmay": "I would not recommend using angular-perfect-scrollbar. It is no longer actively maintained.\n. ",
    "elmor34": "Thanks....\nOn Wed, Jan 20, 2016 at 8:35 PM, Rayron Victor notifications@github.com\nwrote:\n\nTry angular-perfect-scrollbar\nhttps://github.com/itsdrewmiller/angular-perfect-scrollbar.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/noraesae/perfect-scrollbar/issues/442#issuecomment-173318057\n.\n\n\nGokhan AYKAN\n. ",
    "devolkpl": "+1\n. ",
    "gmareater": "+1\n. ",
    "antoinegomez": "Yes the ps is inside an iframe, it's works well appart from the dection of editable elements\n. Of course, I use ps inside an iframe and I encountered a bug with a textarea input: when using space key ps is scrolling the content. I looked on the code and found out this place where it detects if the active element is editable or not. The element was not retrieved from the iframe. I added a check to know if the element is an iframe and support that use case. Shouldn't break anything I guess.\n. ",
    "c4l3b": "You're welcome and thanks for the consideration!\nI love the perfect scrollbar project, and used it in a horizontal product\nslider. It's very similar to the sliders on Amazon's homepage. There is an\nissue, specifically when using a touch pad, when scrolling the whole page\nand the cursor is over the perfect scrollbar container. It will catch any\nhorizontal scroll and stop scrolling the page. I wish I could give you an\nexample, but it would require you to be a registered user. Amazon's slider\nis not bound to the wheel and I'm guessing it's for this reason.\nThanks!\nCaleb\nOn Sun, Jan 31, 2016, 5:12 PM DanielApt notifications@github.com wrote:\n\nThanks for the pull request @cmbertsch01 https://github.com/cmbertsch01\nJust so I understand, in what scenario would this behaviour be desirable?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/noraesae/perfect-scrollbar/pull/449#issuecomment-177632236\n.\n. \n",
    "Lohik": "Thank you for your answer, but please tell me more - where I can find $ps-rail-default-opacity ? I changed all opacities in prefect-scrollbar.css and perfect-scrollbar.min.css, but it doesn\u00b4t help...\nMaybe it would help $('.selector').perfectScrollbar('update') function, may you be please more specific about it? If I should insert it on page with form and iframe or on page with content of iframe? And to what selector  I should \"add\" it? Sorry, I am really new to jQuery and Javascript...\nOn page, where is form and iframe I have:\n```\n\n\n\n      var iframe = document.querySelector('#iframe');\n      iframe.onload = function () {\n        Ps.initialize(iframe.contentDocument.querySelector('#Default'), {minScrollbarLength: 50})\n\n      };\n\n```\nAnd in iframe content:\n```\n<!DOCTYPE html>\n\n\n\n  <link href=\"/css/perfect-scrollbar.css\" rel=\"stylesheet\">\n  <style>\n    .contentHolder { position:relative; margin:0px auto; padding:0px; width: 1110px; height: 180px;}\n    .contentHolder .content {width: 1080px;}\n    .spacer { text-align:center }\n  </style>\n\n\n\n\n\n...some ....\n            \n\n\n\n```\n. ",
    "thesergeev": "Hello!\nI found solution. But don't know correct it or not. \nBecause first time it duplicates..\nfunction perf_sroll_bar() {\n    if ($(window).width() > 767) {\n        $('.page_content').perfectScrollbar();\n        $('.page_content').perfectScrollbar('update');\n    } else {\n        $('.page_content').perfectScrollbar('destroy'); \n    }\n};\nperf_sroll_bar();\n$(window).resize(function(perf_sroll_bar);\n. This hack helped me: https://css-tricks.com/popping-hidden-overflow/. ",
    "WoW-rotfl": "Okay here it is:\n\n``` html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- scrollbar rails -->\n<div class=\"ps-scrollbar-x-rail\" style=\"left: 0px; bottom: 3px;\">\n    <div class=\"ps-scrollbar-x\" style=\"left: 0px; width: 0px;\"></div>\n</div>\n<div class=\"ps-scrollbar-y-rail\" style=\"top: 0px; right: 3px;\">\n    <div class=\"ps-scrollbar-y\" style=\"top: 0px; height: 0px;\"></div>\n</div>\n<!-- scrollbar rails end -->\n\n<div class=\"folder\" draggable=\"false\">\n    <div class=\"folder__centered\">\n        <i class=\"icon icon-folder ac\"></i>\n    </div>\n</div>\n\n\n```\nit's happens because rails in one container with folders.\ni suggest some option like: \njavascript\nPs.initialize(container, {\n  wheelSpeed: 2,\n  wheelPropagation: true,\n  minScrollbarLength: 20,\n  // new option\n  railContainer: '.selector' \n});\n. ",
    "goldfire": "Any thoughts on what this would take? The performance issues are pretty much make this a non-starter.. It isn't true to say that \"repaints are inevitable.\" If things are done correctly there is no need for repaints at all in many cases. If you are re-writing anyway, I'm not sure why you wouldn't at least explore the possibility of something that could have a significant impact on performance (probably much more than just requestAnimationFrame).. ",
    "rasmushaglund": "@utatti is there any road map for doing the rendering improvements? I tried separating some dom reads from dom writes to avoid forced reflows, and that improved the performance a bit, but I feel that making a proper fix would take more effort. Are you working on it, or have any plan for how it should be done?. ",
    "DEfusion": "Thanks for the update.\nI also did consider using a classname for any children that will need to scroll but I thought not requiring that was easier for the end users and for it to just be handled out of the box. I did wonder about whether I should have added some caching so it only does the lookup on first scroll event, though I'm not sure how that would look.\nHowever it's probably a bit of an edge case so maybe just specifying a class is just the best solution. I'm happy to re-work and re-submit a PR if you think that's the best way around.\n. ",
    "gvnet": "Hey Daniel,\nThanks so much for the reply. It turns out the theme I have uses the skrollr library and native scrolling is turned off to allow parallax scrolling on mobile/ios devices (via css transforms). This prevents the animations software from triggering based on the viewport settings as it is not technically scrolling.\nThanks again.\n. ",
    "pra85": "No problems :+1: \n. ",
    "jonixj": "Yes, sorry I did not see #458. That is a better solution for modern browsers.\n. ",
    "bribar": "When I remove perfectScollbar, browser handles this perfectly fine with same image sizes.. ",
    "dietergeerts": "Having no click handler, or anything special, just included the perfect-scrollbar with default options, and I experience this on ipad (safari). So it should be opened again.\n. This is still a problem, on the ipad, when you click in the scrollable area, the touch (click) doesn't propagate.\nEDIT: Ok, I have included the latest version on master through a direct repo link in npm, and this issue seems solved, the problem though is that the co\u00f6rdinates are the ones from the previous touch, which isn't good, as our application needs the current ones to be able to create an item in that place.\nEDIT2: I thought so, but npm doesn't include the whole repo, so I can't really see if it works now with that latest version.... \n. ",
    "BenArunski": "Thank you for the responses!  I played around some more, and I was not able to find any conditions under which Ctrl+F positions to the found text (checked on Chrome and Firefox).\n. Thank you, @noraesae !\n. ",
    "paralin": "Can we fix this?\n. ??\n. ",
    "rolandtoth": "On Chrome I was able to create a fix:\n1. set container to overflow: scroll\n2. set container css ::-webkit-scrollbar { display: none; } (or width: 0)\nAfter this, searching with ctrl+F jumps to the results. Perhaps other browsers could be targeted as well.\n. You seem to be right. One solution could be playing with container padding and margin, but that's also error-prone.\n. ",
    "themadsens": "For IE11 and Edge, it seems -ms-overflow-style: none can be used. Chrome +  Safari + Opera + Midori + IE11 + Edge covered then?\n. ",
    "vsn4ik": "Thanks for the answer!\n. ",
    "yeou": "Do you have an iOS device? Because the performance on an iPad is not great :(\n. ",
    "illus0r": "Thanks, @noraesae!. ",
    "kaganvmz": "Thank you for your response, I'll check.\n. ",
    "jbardnz": "@kstover solution worked for me. Thanks a lot, saved me at least a couple of hours!. ",
    "koraysels": "if you use angular you can check out ngx-perfect-scrollbar\nThey have this method\nscrollToElement(qs, offset?, speed?)   // Animate scroll to element matching query selectors.. ",
    "amrigo": "Hi  @noraesae \nThis work\u00b4s for me : \nvar container = document.getElementById('.container');\nwindow.addEventListener('resize', function () {\n                    [].forEach.call(document.querySelectorAll('container'), function (el) {\n                           Ps.initialize(el);\n                    });\n});\nI try Ps.update(container); also, but did not work \n. ",
    "Demitrius": "It need for me too.\n. ",
    "devbazilio": "Confirmed that bug, during initialization plugin gets computed style from main css, without checking theme bottom and right properties\n. ",
    "davilmaster": "@brendonmm Ol\u00e1 amigo. Acabei descobrindo um erro, mas n\u00e3o era no scroll e sim no meu c\u00f3digo devido a um $resize do jquery. Sempre que eu movimentava a tela ou ativava o recurso de escrita, ele automaticamente chamava o resize e o recurso lateral era oculto. Ent\u00e3o o plugin est\u00e1 \u00f3timo. Falha minha mesmo :100:\n. I am not the creator and use this slide. But it was not done for this purpose you want. Unfortunately. He's just a scrollbar.\n. ",
    "yshterev": "Hi! There are two major points for supporting scroll rails with position:fixed, which allows the scroll to work without setting position on the container:\n1. The case with the fixed header table. The scroll should work as a substitute for default browser scroll. Currently there is no way to use the scroll without a container with position: relative. The point here is that there are cases where default browser scroll works, and position: relative on the container breaks the layout, like the fixed header tables, so it would be good for the plugin to have some fallback.\n2. I am not 100% sure as I have not spent enough time on this, but I think using position:fixed for scroll rails fixes IE issues described #160.\nUnfortunately, I have experienced other issues with the scroll. I am using the scroll for a single page app. It has complex DOM and multiple instances of the scroll are used in web components. I had problems with:\n1. This pull request needs more work. Sometimes rails positions are not calculated properly.\n2. Nested scrolls do not work well. Could be because of the fixed rails positions.\n3. The scroll is slowing performance on IE 10/11 + the jumping issue\nI have decided to go with the default browser scroll and I do not plan to work on this one, unless you think this pull request has some potential.\nREADME.md trailing spaces removed by mistake :(\n. ",
    "mrpharderwijk": "Will close, it was a css issue\n. ",
    "rajagopal14": "Hi,\n   I found why this issue coming..this is due to position:relative not given to the element\nThanks\nrajagopal.g                                    \n. am getting this error \"Uncaught InvalidStateError: Failed to execute 'dispatchEvent' on 'EventTarget': The event is already being dispatched.\"\n. am calling element.perfectScrollbar() while initializing my UI for the first time and again am initializing another UI with the same function without reloading.from that again same element.perfectScrollbar() will call. So that am gettting this error \"Uncaught InvalidStateError: Failed to execute 'dispatchEvent' on 'EventTarget': The event is already being dispatched.\"  And another one thing from my side database query calling infinity times while calling element.perfectScrollbar()\n. I have found why this happening, I have updating when,\nfor(var i=0,len=responseData.data.length;i<_len;i++){\n       var queueobj = parentObj.find('#qbox'+qslot);\n       queueobj.find(\".qboxheight\").scrollTop(0);\n       queueobj.find(\".qboxheight\").perfectScrollbar(\"update\");\n}\nIn for loop am updating the element is that correct ???\n. And the I have one doubt have we need to update element while setting scrollTop(0) ??\n. K fine see the above code am calling it in loop is that correct?\nwhile scrollTop = somevalue we need to update. just am giving scrollTop = 0 for 0 we need update?\n. Can u pls explain why the database query calling infinity times ? its difficult to give a fiddle for this case\n. I have lot more data in a container If I scroll the scrollbar height is reducing to 1px I need a default height for scrollbar how to implement this??\n. I have given minScrollbarLength but its not working for me\n. customScrollbar(jQuery(\".qboxheight\"));\njQuery(\".qboxheight\").perfectScrollbar({minScrollbarLength:30});\nI have give like this while initiating am setting minScrollbarLength\n. here the fiddle you can check here\nhttps://jsfiddle.net/gbfLazpx/143/\n. oh k thank you so much\n. Can u please check this also ? \n. Hello there ? Can u Please tell Y this is happening ? \n. thank you. Can u pls check this issue also #522 \n. @noraesae Any update about this ?\n. @noraesae Hi Any update regarding this ?\n. Yeah I understand, but dont need PS for an iFrame. I need If I scroll from that Iframe parent scroll is not happening\n. parent container has PS. If I hover the iFrame and scroll from Iframe parent scroll is not happening do you understand what am trying to explain?\n. ok fine. if it is not an iFrame its a div, y its working fine for other than iFrame selectors ?\n. u said scroll event is happening in iframe that's why parent scroll is not happening due to cross-origin limitation right.\nbut if child element is div instead of iFrame its working fine why ?\n. ok thank you\n. can you give any sample example to propagate container from iframe for PS in jQuery ?\n. ok thankyou\n. @noraesae  Any update regarding this ?\n. @noraesae  Any update on this ?\n. @noraesae Can u pls update this?\n. @noraesae any update on this?\n. ok thanks. @noraesae  is there any possible ways to solve this issue at my side before you work on this?\n. ok thanks for ur update\n. @noraesae Any update regarding this?\n. @noraesae any update on this?\n. HI @noraesae  can you please check this am getting this issue ?\n. No its not a styling issue. this issue happen only when I scroll suddenly. after I scrollTop this issue resolved.\n. ok. If I click something, some div is going to toggle before toggle that div if I scroll that element am getting this empty space at the bottom\n. \nrefer this attachment. I am clicking that icon, textarea is going toggle, when I scroll suddenly while toggling that textarea scroll is going somewhere at the bottom.\n. do you understand what am trying to convey you?\n. \nNo space is occupying, but am getting styles for scrollbar like this, refer the attachment\n. I also dont know why this is happening\n. Yeah it is also fine. stylesheet is loaded perfectly\n. if I call element.perfectScrollbar(\"update\") in the inspector this problem has solved but am getting this issue all the places where I use PS.\n. Ok I can call but If I use this PS in more than 200 places means I have to update in 200 places. that'y am asking \n. am not using PS in 200 places for a single page. its a module specific only\n. but sometime If I call update also issue not fixed \n. would you able found the root cause why this is happening when scrolling ?\n. ok will debug it with inspector. thanks for your info\n. sure.\n. ",
    "samherrmann": "I worked around this issue for now by adding the following CSS:\n.ps-container {\n    padding-right: 16px; // Or whatever px value you desire\n}\nI understand that this padding is always there, even if there is no overflow in which case no scrollbar may exist. So maybe the solution is for perfect-scrollbar to add padding to .ps-container when it's visible?\n. ",
    "stephanepericat": "Same issue here wit the 'update' method... I disagree with @medBouzid though, it should not reset the position to 0 on update otherwise things like infinite scroll will not work properly anymore... however it should be able to detect scrollHeight changes on the element and update the height of the scrollbar accordingly without changing its position.\n. ",
    "cdriscol": "@DanielApt - I can take a look at this a little later to see if I can replicate what your desired behavior.  I think I understand what you mean and shouldn't be a difficult addition - just want to make sure I truly understand it.\nI'll update the PR when I have something.. thanks!\n. @DanielApt - updated the PR.  I think I was able to capture the behavior you described in the custom-theme.html.. and I like it!\nFYI - we could also get more flexible with the hover height/width's if we allowed the user to specify exact px values for the rail and scrollbar.. but I think this is a good start until someone requests more flexibility.\n. @DanielApt - any updates here?\n. @noraesae - unfortunately that commit broke a few requirements for my project (and introduced breaking changes for others unrelated to hovering/scaling).  I will create issues on this project - but will likely have to keep using my fork in the meantime until I can correct the issues.\n. Facebook's you can find on the messenger and friends list on the right side widgets.  You're right that Twitter's is a OSX thing.. but the growing bars are nice for smaller widgets much like Facebook's implementation.\nhttp://screencast.com/t/HAZztkxEFp\n(on windows)\n. LinkedIn also has a similar effect on their \"pulse\" widget:\nhttp://screencast.com/t/qEqXhcvk\n(on windows)\n. i noticed this example was not using an actual custom theme, so I added a custom theme that this example now loads.\n. this was needed to compile the custom theme and default theme.\n. no scaling by default.\n. ",
    "danielverejan": "It seems to have been a CSS problem, don't know how but I fixed it.\nAnyway I think you should improve the CSS it was really hard to add some custom styles for it forcing me to use !important and \">\" things and deep nesting so I ended up writing styles from scratch.\nBut that's a small issue, thanks for the great plugin!\n. That's funny :D I just declared and .always-visible class for this \n\nFor different-color would be great to make use of currentcolor CSS variable, set it once on .ps-container and use elsewhere with currentcolor.\n. Probably was a Chrome issue, it works now.. ",
    "Qszer94": "Here you have a jsfiddle.\nhttps://jsfiddle.net/9pz5p0rh/\nThat example works fine on Edge 13.\nOn chrome 51 works only with Twitter embed.\nOn Firefox 47 doesn't work at all.\n. ",
    "williamweckl": "I'm with the same issue, anybody knows how to fix it? \nI'm using chrome.. ",
    "imarkdesigns": "Please check and refer to this issue.\nhttps://github.com/noraesae/perfect-scrollbar/issues/72\n. ",
    "erwinyusrizal": "@noraesae thanks for your reply,\nI'm running it with React, but i'm having problem with that, yeah I realized about that too\nthanks,\n. ",
    "6-162": "@noraesae using if (document) doesnt solve the problem, Im using server side rendering in a react application and getting the same error,  the problem is not when intializing Ps, its in the helper.js just importing the package triggers the error.\n. ",
    "usebaz": "@noraesae browser code(isWebKit: 'WebkitAppearance' in document.documentElement.style, /src/js/lib/helper.js) executed when i requre your lib, and its break server side rendering. \n```\nconst Ps = require('perfect-scrollbar'); // its breaking here, on server\napp.onBrowserRendering = () => {\n  Ps.initialize(element);\n}\n```\nCan you fix this?. ",
    "MaxSvargal": "+1. ",
    "ethanresnick": "@noraesae I think this should be reopened. As others have pointed out, it's hard to solve at the webpack layer (though it is possible with enough trickery), so it would save a lot of total effort if the module were aware of the possibility that it's running server side and simply did nothing.\nIf I created a PR, adding a bunch of typeof document/typeof window checks, would that be accepted?. ",
    "philosophocat": "There are 3 checks if document and window are undefined.. So, what about PR?). ",
    "maximeloizeau": "I also noticed this issue but on Safari 8 only, when scrolling with the touchpad.\n. ",
    "TonySma": "Hello,\nProblem solved by remplacing \n@mixin ps-container($theme) {\n  -ms-touch-action: none;\n  touch-action: none;\n  overflow: hidden !important;\n  -ms-overflow-style: none;\nby \n@mixin ps-container($theme) {\n  overflow: hidden !important;\n  -ms-overflow-style: none;\n. Hi!\nYes you can use it in Magento. \nUpload the files and update your layout for include the library in your theme, then clean cache and it will work. \nTony\n. ",
    "megapctr": "@noraesae the problem is still present on 0.6.12, and patch from @TonySma solves it.\nIn my case, the problem happens when the container is big enough not to require a scrollbar. When the container is smaller and requires the scrollbar, scrolling works fine.\n. Just to be sure, when testing in chrome dev tools, you have to click and drag to emulate a touch swipe.\n. ",
    "shinygruv3": "I'm seeing the same issue...ostensibly due to mouseup propagation when dragging the scrollbar on the dropdown. Here's a fiddle: https://fiddle.jshell.net/shinygruv3/auok2bg8/5/\nNote that clicking on the rail does not hide the dropdown, but dragging the scroll bar does.\n. I believe the code does invoke event.stopPropagation for both the rail and the bar. I've also noticed that the dropdown does not close on-mouse-up 100% of the time...at least not in my actual project. The fiddle example seems to always close on-mouse-up.\n. For others on this thread, I fixed this by tweaking how I use uib-dropdown: set auto-close=\"disabled\" and explicitly control is-open. Given that the scroll rail/bar are siblings to the list items (which also handle click events), I don't think there's a way for perfect-scrollbar to fully control event propagation from the parent container.\n. @chavishindler \nHmm. Which element are you adding on-click to (ul)?\nMy thought was that the parent container (i.e. ul) should not stop-propagation to children because the dropdown li elements need to react to click...and that scroll rail/bar trying to prevent propagation won't affect the siblings...which still need to react to the click. \nBut now I'm wondering if this whole thing is a side-effect of the dropdown responding to onblur (because the rail is stopping propagation).\n. @chavishindler - I'm a bit confused. The example for the link you provide does result in the menu closing when you click-on or click-and-drag the scrollbar. \nSomething I noticed yesterday...the scrollbar (i.e. ps-scrollbar-x, ps-scrollbar-y) is subscribed to the 'click' event...and the handler calls event.stopPropagation(). However, the handler is never invoked. The same is true for the focus & blur events. @noraesae any ideas?\n. ",
    "tarunmangukiya": "@shinygruv3 I am facing the same issue. @noraesae Please find fiddle by him.\n. ",
    "TehSomeLuigi": "Just leaving this comment here, I'm not familiar with perfect-scrollbar yet, or even that well acquainted with CSS (I understand CSS but we never seem to get on too well).\nBut I've noticed that they seem to have wrapped their content in a div with the class name impala-scroll-overlay and then seem to have initialised perfect scrollbar on that div, seemingly like any other.\nIf this isn't true/helpful, I apologise, but hopefully it can shed some light on the situation.\nI found this JavaScript in the template:\nif (navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry|Windows Phone)/)){\n      $('.impala-scroll-overlay').perfectScrollbar(\"destroy\");\n      $('.impala-scroll-overlay').addClass('scroll-block');\n      $('.bg-video').find('video').remove();\n    } \n    else {\n        $('.impala-scroll-overlay').perfectScrollbar();\n        $('.impala-scroll-overlay').removeClass('scroll-block');\n    }\nAgain, this is not guaranteed, but I would say that it's essentially doing the following:\nIf the device is a mobile phone or tablet:\n- Destroy (stop using) the Perfect Scrollbar\n- Add the scroll-block CSS class to the wrapped content\n  which, with the following CSS,\n.impala-wrap-home .scroll-block {\n    height: 100%;\n    overflow-y: auto;\n}\n, makes it so the content is normally scrollable (using the browser's default scrollbar)\n- Remove the video (I suppose they must have a video somewhere, doesn't seem relevant in any case)\nOtherwise, if not using one of those mobile devices:\n- Initialise perfect scrollbar on the container\n- Remove the scroll-block class, to suppress the browser's default scrollbar (because the overflow will revert to hidden)\nI hope that makes some sort of sense; some of the explanation isn't 100% strictly correct.\nMaybe it'll save the developer of perfect-scrollbar some time responding to this issue, and can serve as my gratitude, both for writing perfect-scrollbar, and for having a non-jQuery version.\nCheers.\n. ",
    "ihorzenich": "I tested and found NO PROBLEM in Edge/14.14383 on Windows 10 rs1_release 14383.\nNotebook is MacBook Pro 13\" Late 2013 under Bootcamp with NO-touchscreen.\n. ",
    "Steve-Mc": "js\nPs.initialize(yourElement, {\n    scrollYMarginOffset: 100,\n    scrollMarginXOffset: 100\n});\n. ",
    "yurii-sorokin": "Do you have any examples how to add such offset in v1?. ",
    "lavrton": "Any chance to see the PR merged?\nMy use case is related to https://github.com/noraesae/perfect-scrollbar/issues/457. I am applying smooth animation scrolling to a container. Each container.scrollLeft = value produce browser repaints (because of PS style changes). For sure a better solution is to use transform instead of top and left properties.. ",
    "lechup": "I'm having similar issue. I'm using:\n https://github.com/callemall/material-ui\n https://github.com/zilverline/react-tap-event-plugin\nPS is not propagating touchStart event to MaterialUI, I'm testing this change:\nhttps://github.com/lechup/perfect-scrollbar/commit/e8e967118df786343282a4c4180bef40bb33ab5c\nWith success. But probabbly it destroys some default behaviour?\n@noraesae why we would want to stop propagating touchStart events by default?. ",
    "sconix": "This is also issue in the ngx-perfect-scrollbar wrapper library which I went around by generating the touch event by copying the event send by perfect-scrollbar and sending it to the parent. It works but is a bit hackish so would be nice to be able to get rid of that.. Would be nice to get this fixed. @utatti do you know why the touchStart event propagation is stopped in the touch handler? If I knew the reason I could try to think of a solution.. Thanks!. I do agree that this is better now than how it was in the 0.8.x. I was kinda thinking more like a parameter for update / init so that the scroll state event could be send if wanted or providing a function to do the checking. I just hate \"duplicating\" a code so would be nice if the check done by the library would be available as helper function etc. Since its really common that you relay on the reach end event that you might want to know the status after init / programmatic scrolls as well.. I can't say for sure which makes more sense having them as default or not, but imho having an update call with more finer control about what to update is not a bad thing. Anyway I am happy with either way.. Ah sorry, forgot that I run build so should not have used -a. . At least there hasn't been problems with 0.8.x which worked like that. If the need arises then its very easy to add the emitEvents parameter back, at least updating the reach values always should not be an issue to anyone. \nIf you can release in few days it would be nice so I can get the next release out for the ngx-perfect-scrollbar which latest release I already had to pullback once since did not check carefully if the 0.8->1.x change broke anything :). Any change to ger new release out :) Angular 5 was just released so would like to release new major version of my wrapper and would love to have it use 1.x, but for that I need release with these event changes.. I am bit curious about the use case. What could be a situation where you want the touch to work differently from mouse wheel when both are available? If its just that you want it to behave differently in touch device than on desktop then why not just detect if its a touch device and use different configuration.. Ah ok, still wondering what could be the use case to disallow wheel but allow scrollbar to one direction. Couldn't you just leave out the suppressScrollY and capture wheel event yourself and prevent its propagation to perfect-scrollbar. This just sound something which is really rare and odd use case that having ready configuration option does not make much sense. Of course there could be suppressWheelX/Y options, but it just sounds like a rare use case.. I believe that would work also, but my suggestions should cover \"error\" cases as well (not sure if such cases are possible though). So not sure which one is better, but anyway would love to see this fixed soon.. ",
    "people-06": "Hello! \nps-y-reach-end\nThis event fires when scrolling reaches the end of the y-axis (useful for infinite scroll)\n. ",
    "Suzanne3": "I found a solution to my problem. I use :    \nthis.myElementwithScrollBar().animate({ scrollTop: scrollTopValue }, 750);\n this.myElementwithScrollBar().perfectScrollbar('update');\nI have now a smooth effect. It is working very well.\n. I was on a VM.  It is working well on a real Win 10, Chrome.\n. ",
    "shekhargupta019": "Hi Suzanne,\nI am using\n PerfectScrollbar onScrollY={this.handleScroll}\n      component2 \n      component3\n      component4 \n/PerfectScrollbar\nbut in this case when I click on the NavItem the component should scroll \nthe components are getting scrolled but the scroll is not smooth.\ncan you suggest any solution\n. ",
    "chrisd08": "Problems seems to still exist (or has been reintroduced) in 1.4.0\nhttp://jsfiddle.net/bgm3dejz/1/. ",
    "supercain": "Any help please??\n. ",
    "sheparddw": "@noraesae, I have this issue as well. I added a box shadow to the scrollbar to get around this, but when I add margin to prevent the scrollbar from sitting flush with the edge or add a border, it allows the scrollbar to scroll beyond the bottom of the container. Any ideas?\nTo reproduce add this CSS to the demo:\n.ps-scrollbar-y {\n    margin: 3px;\n    border: 1px solid red;\n}\n/* or */\n.ps-scrollbar-y-rail {\n    margin: 3px;\n    border: 1px solid red;\n}\n. Thanks for the explanation.\n. ",
    "liquidvisual": "Did this ever get solved in v1? I would like to put a 1px gap between the scrollbar and the edge.. ",
    "Toddses": "Had the same issue - can confirm this fixed it! Thanks.\n. ",
    "harryjoy": "I have made my own for now, you can use it if you want.\n``` typescript\ninterface PerfectScrollbarOptions {\n    wheelSpeed?: number;\n    wheelPropagation?: boolean;\n    swipePropagation?: boolean;\n    minScrollbarLength?: number;\n    maxScrollbarLength?: number;\n    useBothWheelAxes?: boolean;\n    useKeyboard?: boolean;\n    suppressScrollX?: boolean;\n    suppressScrollY?: boolean;\n    scrollXMarginOffset?: number;\n    scrollYMarginOffset?: number;\n}\ninterface PerfectScrollbar {\n    initialize(container: HTMLElement, options?: PerfectScrollbarOptions);\n    update(container: HTMLElement);\n    destroy(container: HTMLElement);\n}\ninterface JQuery {\n    perfectScrollbar(options?: PerfectScrollbarOptions): JQuery;\n}\ndeclare var ps: PerfectScrollbar;\ndeclare module \"perfect-scrollbar\" {\n    export = ps;\n}\n```\n. ",
    "frederikprijck": "@noraesae Is it possible the d.ts file isn't part of the node_modules folder when installing perfect-scrollbar ? I've got:\n\nAnd I'm using 0.6.13... \n. The file exists in node_modules now, but I get the following error:\n\nerror TS2656: Exported external package typings file '.../node_modules/perfect-scrollbar/perfect-scrollbar.d.ts' is not a module. Please contact the package author to update the package definition.\n. TS is supposed to load them that way, but it's not working. \nI'm not saying it's an issue on your end, but I guess so.\n\nI'll try to look into this tonight. Your definition's code works fine if I add them to my custom.d.ts files installed using typings, but it doesn't work when importing it from your node_module.\n. It does find the d.ts file, but it fails to work. I'll try to reproduce it tonight and see where it gets me. \n. ",
    "KingSora": "Hello! :)\nA very important thing to me would be hotkeys as they are in the native scroll behavior. This might be a bit complicated since they are different in different operating systems. There is also one thing which would be nice: In windows you can press the \"middle mouse button\" (you can press the mouse wheel itself) and you will get a cool scroll behavior. Its hard to explain for me, the best thing would be if you try it out by yourself.\nTouch support should be also a thing.\nAlso a nice thing would be if your scrollbar could be applied to textareas (if this is the case ignore this suggestion, havent tested this so far)\nBest regards,\nSora\nP.S.: I am currently developing my own Scrollbar plugin, and there are a few things which cause me stomach pains... :D\n. ",
    "bck2207": "Hi noraesae,\nReally good news! I was planning to use perfect-scrollbars for a project, which is basically a css framework with some custom-elements. (like this one). Currently, we do also have a custom-scrollbar component, which was created years ago and doesn't satisfy our requirements any more! (it become also almost unmaintainable).\nMy idea was to use perfect-scrollbars in a custom-element basically like:\nhtml\n<custom-element class=\"required-styles-for-perfect-scrollbar\">\n    ...\n</custom-element>\nand innerly by custom-element script:\njavascript\nvar ps = require('perfect-scrollbar');\nps.initialize(root); // initialize ps on custom-element\nThe problem with update(), which you also wanted to solve through MutationObserver came to my mind and i could easily set it manually to my custom-element.\nAnd actually, it was done except the IE11 bug :(. #160. We must support >IE11 in our project, so without solving that, it was impossible to use this in production. I loved perfect-scrollbars because of clean and wise design with correct principles, so I wanted to figure out a way to solve (or at least to by-pass) this issue. At the end, I came to this crazy idea.\nSince you are working on a stable version of perfect-scrollbars, I hope that this bug won't be an issue anymore :)\nEmulators\nSeparation of emulators (I would call them plugins, since they will be optional), is a very good idea. (For example, we don't really need touch support).\nUpdate\nLike you said, MutationObserver covers almost all cases, except flex-box. I used this npm package to cover that too in my custom element, but honestly, this was a pragmatic approach.\nSo, i can offer you any help, if you need ;).\n. ",
    "Tigerino": "Hey noraesae,\nany update on when you plan to implement this concept (or any timeline in mind)? Are you still working on it, or is it on hold? I really do like your library, yet, I would love to see the requestAnimationFrame changes in.\ncheers\nTigerino. ",
    "Robinjoeh": "Hello,\nAlso wanted to check, will there be a new version 1, or is this project abandoned? If you don't have the motivation, please feel free to provide us with your PayPal address or other ways to donate. I'm sure a lot of us would appreciate the new version of perfect scrollbar.\nPing @noraesae . ",
    "mercs600": "For example I had to use vertical mousewheel to horizontal scroll. \nWhen I set useBothWheelAxes on true wheelPropagation doesn't work anymore.  I added wheelPropagationX option to use only vertical mousewheel and prevent scroll when scrollLeft is equal to width of container. \n@noraesae it would be nice if you could check it: \nhttps://github.com/mercs600/perfect-scrollbar/commit/36979b1e9c1ccb07be43fe435cd25d88db0ab4e1 . Just use https://github.com/mercs600/vue2-perfect-scrollbar . ",
    "mrhammadasif": "Here is Quickfix for you\n.ps-scrollbar-x-rail,\n.ps-scrollbar-y-rail{\n    display: none !important;\n}\nAdd these in your stylesheet\n. ",
    "sudhirbeldar": "Hello Daniel,\nThank you very much immediate reply. \nIn my case, I have a search text box, wherein user types and search results auto populates. I have appended Perfect scrollbar on search results. In this case my focus is on search text box. I have added jquery to show highlight on search results when user press keyboard down key (ASCII value 40). and there after up and down keys for navigation. \nCould you please help me to set focus on ps-container when first down key is pressed or any other suggestion.\n. Hey Daniel,\nThank you very much. It resolves my issue. I will further ask you question if I again get stuck in this context.\nThank you very much for your help.\n. ",
    "mankins": "Thanks!\n. ",
    "xDeepx": "I have same problem in Fuse http://fuse-angular-material.withinpixels.com/ui/forms\n\n\n. ",
    "lekhnath": "Any progress on it??. ",
    "kinkoazc": "Hi! I might be wrong, but, as per this answer http://stackoverflow.com/questions/37721782/what-are-passive-event-listeners (and these release notes https://blog.chromium.org/2016/05/new-apis-to-help-developers-improve.html), the whole point of using the flag is to \"skip the line\" of waiting for the jank-causing JS process and allow for smooth scrolling regardless.. But that's not the issue I guess.. ",
    "edgargaza": "Hello there. I have the same issue.\n[Violation] Added non-passive event listener to a scroll-blocking 'wheel' event. Consider marking event handler as 'passive' to make the page more responsive. See https://www.chromestatus.com/feature/5745543795965952\nMaybe this link can help you, @utatti. It was in the warning shown by Google Chrome console (it's the same link as it's in the error that I posted), maybe you can find it in the console too just by initializing an element with the \n\"new PerfectScrollbar(container)\". It appears when I initialize it to be handled by Perfect Scrollbar.. ",
    "mbonaci": "@edgargaza Wow, where did you manage to find that link :). ",
    "chiss22": "@DanielApt I understand that this is native browser behaviour, I was actually just wondering if we could have it as an option. wheelPropogation = false is not default browser behaviour, so with that logic, it would also be nice to offer a sort of \"alwaysOnWheelProgogation\".\nThanks for the quick reply!\n. ",
    "rdkmaster": "I am having the same problem, I hope the parent element can be scolled if there is no need to scroll in the child element, can you please fix this issue?\n\n. ",
    "aviklai": "Are you sure? it won't hide the native scroll in that case.\n. @DanielApt done. Issue number #566.\nAnyway, it is not clear because in the Readme file, in the requirements section it is written that \n\"the container must have an 'overflow:hidden' css style\".\n. ",
    "Dylavemiliak": "Ok, thank you and keep the excelent work! ;)\nBye\n. ",
    "gregoryagu": "Ok, thank you.\n. ",
    "TyGp": "This can be realized quite easily by Adding/Replacing the code in click-rail.js with\nvar dom = require('../../lib/dom');\nvar _ = require('../../lib/helper');\nvar instances = require('../instances');\nvar updateGeometry = require('../update-geometry');\nvar updateScroll = require('../update-scroll');\nfunction bindClickRailHandler(element, i) {\n  function pageOffset(el) {\n    return el.getBoundingClientRect();\n  }\n  var stopPropagation = function (e) { \n      e.stopPropagation(); \n  };\n/*** Vert Scrollbar ***/\n    var destY = null;\n    var currentTop = null;\n    var startTime;\n```\nvar calcTopScrollPos = function(pageY) { \nvar halfOfScrollbarLength = _.toInt(i.scrollbarYHeight / 2);\nvar positionTop = i.railYRatio * (pageY - window.pageYOffset - pageOffset(i.scrollbarYRail).top - halfOfScrollbarLength);\nvar maxPositionTop = i.railYRatio * (i.railYHeight - i.scrollbarYHeight);\nvar positionRatio = positionTop / maxPositionTop;\n\nif (positionRatio < 0) {\n    positionRatio = 0;\n} else if (positionRatio > 1) {\n    positionRatio = 1;\n}\n\nreturn (i.contentHeight - i.containerHeight) * positionRatio;\n\n};\nvar calcAbsTopScrollPos = function(e) { \nreturn _.toInt(e * (i.railYHeight - i.scrollbarYHeight) / (i.contentHeight - i.containerHeight));\n\n}\nfunction updateScrollTop(newTop) {\nupdateScroll(element, 'top', newTop);\nupdateGeometry(element);\n\n}\nfunction moveScrollTop(deltaY) {\nvar newTop = currentTop + (deltaY * i.railYRatio);\nupdateScrollTop(newTop);\n\n}   \nvar scrollTop = function() {\nif (destY == null)\n    return;\n\ncurrentTop = element.scrollTop; // * i.railYRatio;\n\nvar diffY = destY - currentTop;\nif (Math.abs(diffY)<=90*i.railYRatio) {\n    updateScrollTop(destY);\n    //updateScroll(element, 'top', destY);\n    //updateGeometry(element);\n    return;\n}\n\nmoveScrollTop((diffY>90)?90:-90);\n\nsetTimeout(function() {\n    scrollTop();\n}, 50);\n\n};\nvar mouseMoveHandlerScrollbarYRail = function(e) {\ndestY = calcTopScrollPos(e.pageY);\nscrollTop();\n\ne.stopPropagation();\ne.preventDefault();\n\n};\ni.event.bind(i.scrollbarYRail, 'mousedown', function(e) {\nmouseMoveHandlerScrollbarYRail(e);\n//currentPageY = e.pageY;\n//currentTop = _.toInt(dom.css(i.scrollbarY, 'top')) * i.railYRatio;\n_.startScrolling(element, 'y');\nstartTime = (new Date()).getTime();\n\ni.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandlerScrollbarYRail);\ni.event.once(i.ownerDocument, 'mouseup', function() {\n    _.stopScrolling(element, 'y');\n    i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandlerScrollbarYRail);\n\n    if ((new Date()).getTime()-startTime < 200)\n        //handle it as click event\n        updateScrollTop(destY);\n\n    //stopAutoscroll\n    destY = null;\n});\n\n});\n```\n/*\n     //removed because can cause interference\n     if (i.settings.stopPropagationOnClick) {\n        i.event.bind(i.scrollbarY, 'click', stopPropagation);\n      }\n```\n  i.event.bind(i.scrollbarYRail, 'click', function (e) {\nupdateScrollTop(calcTopScrollPos(e.pageY));\ne.stopPropagation();\n\n});\n```\n*/\n/*** Hor Scrollbar ***/\n```\nvar destX = null;\nvar currentLeft = null;\nvar startTime;\nvar calcTopScrollLeft = function(pageX) { \nvar halfOfScrollbarLength = _.toInt(i.scrollbarXWidth / 2);\nvar positionLeft = i.railXRatio * (pageX - window.pageXOffset - pageOffset(i.scrollbarXRail).left - halfOfScrollbarLength);\nvar maxPositionLeft = i.railXRatio * (i.railXWidth - i.scrollbarXWidth);\nvar positionRatio = positionLeft / maxPositionLeft;\n\nif (positionRatio < 0) {\n    positionRatio = 0;\n} else if (positionRatio > 1) {\n    positionRatio = 1;\n}\n\nreturn ((i.contentWidth - i.containerWidth) * positionRatio) - i.negativeScrollAdjustment;\n\n};\n```\nfunction updateScrollLeft(newLeft) {\nupdateScroll(element, 'left', newLeft);\nupdateGeometry(element);\n}\nfunction moveScrollLeft(deltaX) {\nvar newLeft = currentLeft + (deltaX * i.railXRatio);\nupdateScrollLeft(newLeft);\n}   \nvar scrollLeft = function() {\n```\nif (destX == null)\n    return;\ncurrentLeft = element.scrollLeft;\nvar diffX = destX - currentLeft;\nif (Math.abs(diffX)<=90*i.railXRatio) {\n    updateScrollLeft(destX);\n    return;\n}\nmoveScrollLeft((diffX>90)?90:-90);\nsetTimeout(function() {\n    scrollLeft();\n}, 100);\n```\n};\nvar mouseMoveHandlerScrollbarXRail = function(e) {\n```\ndestX = calcTopScrollLeft(e.pageX);\nscrollLeft();\ne.stopPropagation();\ne.preventDefault();\n```\n};\ni.event.bind(i.scrollbarXRail, 'mousedown', function(e) {\n```\nmouseMoveHandlerScrollbarXRail(e);\n_.startScrolling(element, 'x');\nstartTime = (new Date()).getTime();\ni.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandlerScrollbarXRail);\ni.event.once(i.ownerDocument, 'mouseup', function() {\n    _.stopScrolling(element, 'x');\n    i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandlerScrollbarXRail);\nif ((new Date()).getTime()-startTime < 150)\n    //handle it as click event\n    updateScrollLeft(destX);\n\n//stopAutoscroll\ndestX = null;\n\n});\n```\n});\n/*\n    //removed because can cause interference\n```\nif (i.settings.stopPropagationOnClick) {\n    i.event.bind(i.scrollbarX, 'click', stopPropagation);\n}\ni.event.bind(i.scrollbarXRail, 'click', function (e) {\nupdateScrollLeft(calcLeftScrollPos(e.pageX));\ne.stopPropagation();\n\n});\n```\n*/\n}\nmodule.exports = function (element) {\n  var i = instances.get(element);\n  bindClickRailHandler(element, i);\n};\n. ",
    "tukasz": "Hi Jun,\nThanks a lot for the fix. \nDoes it mean that user needs to right-click on the rail above/below scrollbar to scroll the view one page up/down?\nIf so, why not go for the left click? Or even make it configurable? :)\n. Oh, no problem :). In such case thank you again for the fix and great overal work on the PS :)\n. ",
    "snuuve": "Ok, i know that. But how to make smooth content scrolling in container, not scrollbars ;p\n. ",
    "kebot": "I use gsap's ScrollToPlugin:\nhttps://greensock.com/ScrollToPlugin. ",
    "arbiasgjoshi": "@kebot - Sorry for asking but, could you post/PM the code u used or some explanations regarding it. I've used greensock in the past, however not for such circumstances. I'm having a hard time getting smooth scroll to work, and any help would be appreciated.  . ",
    "tiagomatosweb": "Does it mean that the Perfect Scroll has the same behaviour of the native browser scroll?. ",
    "dilame": "@tiagomatosweb Unfortunately, no. ",
    "pinta83": "You can actually just animate the scroll with js....\n\n$('#yourElementId').animate({ scrollTop: 500 }, 400); // 500 = Y scroll offset, 400 = animation speed... \n",
    "robobalasko": "In FF 52 on Mac OS this still does not work.. ",
    "harabara": "I will join this idea. I have an issue with this on mobile. I have a scrollable div which occupies most of the screen, once scrolled to the bottom, doesn't allow page to be scrolled.\n. I realized that this is what swipePropagation is for. But unfortunately it's not working. Even the demo is not working on my android phone. As I understand it should scroll the page once the image can't scroll anymore in that direction? Well, it doesn't.\n. ",
    "praveenpuglia": "It's installed and available in node_modules. \nAngular CLI uses webpack. Even on their readme they specify that it should be as simple as installing any package with npm. https://github.com/angular/angular-cli#3rd-party-library-installation\nShould I be raising a bug there?\n. Wow! so all I did is to add declare module 'perfect-scrollbar'; in typings.d.ts. Everything works smooth now. But I now have to know why this works. Thanks. Closing this.\n. Did you also do this in your component?\njs\nimport * as Ps from 'perfect-scrollbar';. ",
    "bborad": "Hi \nI am trying to use it with Angular 2 CLI but getting following error message. \n'Calling function 'PerfectScrollbarModule', function calls are not supported. Consider replacing the function or lambda with a reference to an exported function'\nTry adding declare module 'perfect-scrollbar'; in typings.ts but didn't help. \n. its showing error on \"PerfectScrollbarModule.forRoot(PERFECT_SCROLLBAR_CONFIG)\" in app.module so not getting that far. CLI doesn't seem to like calling forRoot(). \nAny workaround for this?. switched to ngx-perfect-scrollbar. all ok now. ",
    "jakkor": "BTW I didn't add jsfiddle, but example is added to examples/options-handlers.html\n. I think that selection is a different thing as it for text selection ?\nThis is for reassigning elements in the element that is scrolled. For example when you have a list of divs and you want to reorder them by dragging. You start drag top element and you want to drag it to the bottom of the list. To do that you need to scroll the list. And you cannot scroll anything while you are dragging stuff.\nThis addition allows you to drag element to the bottom of the element and it will then start to scroll it.\nAnyway I can use my forked version of this app if you don't want it here. Btw I already use this in production and it's working.. No worries, like I said I just use my own fork for that, so it's fine.. ",
    "prog8": "This is indeed serious problem in perfect-scroller. Not only charts are a problem here.. ",
    "tkhyn": "Maybe @frg, who authored 68dbc427ea8df2791472d8533a20d9ab01536650, can comment?\n. As a side note, there were no jspm dependencies prior to 0.6.13 and that worked fine. @frg, what made you add the jspm dependencies in package.json?\nIndeed, from what I know - or think I know (!) - jspm automatically parses the package code included in the package files (here index.js and jquery.js), even if there is a provided 'dependencies' override.\n. ",
    "Iworb": "Thanks @noraesae, now everything is ok.\n. ",
    "monstrfolk": "@utatti, What happened to the example?. @utatti, 404 when trying to view example. Does perfect-srollbar work correctly with iframes? It works on small screen devices.. ",
    "kittaakos": "I was looking for the iframe example too. It is still available in the source of the 0.8.0 release. But I do not know whether it is still valid or not.. ",
    "MennoVS": "In your handler you can do a (event.srcElement === elementToWatch) comparison before acting on the event. @noraesae I've come across a scenario involving a slow device and a heavy app, making scrolling slow. To increase the speed of the application I'd like to disable scroll easing. I've looked around in the code and found an 'easingLoop' on touchEnd, disabling it increases scrolling usability. \nI'd like to add a setting to disable this loop. I'll submit a PR for it, please let me know what you think.. ",
    "isairz": "Try alternate import for package with no default in typescript.\njs\nimport * as Ps from 'perfect-scrollbar'\n. ",
    "KavanShaban": "Awesome, thanks for the great work!\n. ",
    "wuzhouyang": "ok\uff0c thanks\uff01\n. ",
    "udithachandana": "Thank you very much for the quick reply. Like magic it works. Thanks again !!. ",
    "Bhuvan-Arora": "Thanks, @utatti, This workaround fixed my issue :). ",
    "avidspartan1": "I'm also seeing this behavior when trying to scroll a normal \"select\" element when the parent container (which is using perfect-scrollbar) is \"in overflow\". The parent container scrolls fine, but the select element does nothing when you try to scroll with the mouse wheel.. ",
    "mlibre": "ok. :+1: . ",
    "tadatuta": "it looks quite fine but take a look at concept of key-value modifiers for theme: https://en.bem.info/methodology/naming-convention/#modifier-name (please note that on bem.info different naming scheme is used by default but that does not matter).. @loominade it's covered in https://en.bem.info/methodology/naming-convention/#which-style-to-choose\nI prefer original style used on bem.info but the only real advantage is that < followed with two dashed means comments in XML so underscore is a bit more secure. All the rest is just a matter of taste.. @loominade such mix of different delimiters looks a bit strange for me.\nLet's consider such variants:\ndiff\n- <div class=\"ps-container ps-theme-default ps-active-x ps-active-y\">\n+ <div class=\"ps ps_theme_default ps_active-x ps_active-y\">\nor\ndiff\n- <div class=\"ps-container ps-theme-default ps-active-x ps-active-y\">\n+ <div class=\"ps ps--theme_default ps--active-x ps--active-y\">. ",
    "shchukin": "These code styles options are not equal. In original BEM notation with dashes we have two kind of modifiers. You can call them full and short (not sure if there is a term for this). For example:\n1) For full it is\n.block-name_property_value\n.button_palette_danger\n.button_palette_success\n.button_palette_warning\n.button_size_larger\n.button_size_largest \n.button_size_smaller\n.button_size_smallest\n.button_shape_square\n.button_shape_circle\n2) Short one is for boolean case:\n.block-name_value\n.button_disabled\n.button_squared\nAnd second notation is by Nicolas Gallagher (if I remember correctly). In his notation only boolean case exist:\n.button--danger\n.button--success\n.button--warning\n.button--larger\n.button--largest \n.button--smaller\n.button--smallest\n.button--shape\n.button--circle\n.button--disabled\n.button--squared\nI personally like the original one because that kind of grouping by property more meaningful. Whatever you guys choose please follow it and don't make your own notation :) . ",
    "mhoyer": "Sidenote: I propose to def. mention the concrete changes of CSS class names with next release. In fact, isn't that change a breaking change?\nWe already saw broken custom styles in our application after updating to latest master for testing.. I added further commits as we found another issue. There are lastTop and lastLeft defined in update-scroll to track last scroll positions. But it seems those variables are used globally which will conflict when having multiple instances of perfect scrollbar running.. ",
    "danielordonez": "Looking forward for a fix to this issue too, I really like perfect scrollbar but this issue really compromises my ux. ",
    "tkorsback": "I haven't tried this but what about using translate instead of top. I have nothing to back this up but maybe it's jumping around because of top/right/bottom/left lack of sub pixel animation.\nAlso, TRBL uses more paint frames than translate.\nI could do a PR but I have no way to test on IE atm. :crying_cat_face: . Maybe something like\ndefault-settings.js\n{\n  ...\n  userCss3: true\n}\nupdate-geometry.js line ~48\nif (i.settings.useCss3) {\n  dom.css(i.scrollbarX, {transform: 'translateX(' + i.scrollbarXLeft + 'px)', width: i.scrollbarXWidth - i.railBorderXWidth});\n  dom.css(i.scrollbarY, {transform: 'translateY(' + i.scrollbarYTop + 'px)', height: i.scrollbarYHeight - i.railBorderYWidth});\n} else {\n  dom.css(i.scrollbarX, {left: i.scrollbarXLeft, width: i.scrollbarXWidth - i.railBorderXWidth});\n  dom.css(i.scrollbarY, {top: i.scrollbarYTop, height: i.scrollbarYHeight - i.railBorderYWidth});\n}. Based on the reference @conover linked it should be the following.\n/src/handlers/keyboard.js#L111\njavascript\n...\ncase 33: // page up\n  deltaY = i.containerHeight;\n  break;\ncase 32: // space bar\n  if (e.shiftKey) {\n    deltaY = i.containerHeight;\n  } else {\n    deltaY = -i.containerHeight;\n  }\n  break;\ncase 34: // page down\n  deltaY = -i.containerHeight;\n  break;\ncase 35: // end\n  deltaY = -i.contentHeight;\n  break;\ncase 36: // home\n  deltaY = element.scrollTop;\n  break;\n.... ",
    "romanmarkelov": "lol :) maxScrollbarLength. ",
    "Schnellesadlerauge": "Use 'position: relative' on the .ps-container. ",
    "gitsnow": "Thanks, that fixed it but opened a whole new can of worms with the buttons that are auto-gen'd by the Datatable plugin.  I'll have to figure out what to do with them.  Thanks again.. ",
    "morrisjn": "Are there any plans to support this feature?. ",
    "eelke": "I also ran into this behavior. Using Wacom Intuos 4 + Chrome 56.0.2924.87 (64-bit) on MacOS. . I noticed that while this behaviour appears on the Perfect Scrollbar homepage, it did not on this JSFiddle: https://jsfiddle.net/DanielApt/gbfLazpx/\nThe difference seems to be the touch-action on the .ps-container object. When it is set to touch-action: auto; (like on the homepage) we get this behaviour. When it is set to touch-action: none; it no longer happens. \nI don't know if changing this breaks anything else though. Maybe on (actual) touch devices? . @Silvea12 Thank you for this fix!\n@noraesae The Github example needs an update to reflect this fix, right now the problem still occurs here. Can you update and bump the version?. @noraesae Thank you, it works fine now!. ",
    "rianne-o": "I'm experiencing the same problem with my Wacom and Chrome. Setting the touch-action to none, doesn't make any difference in my case.\nThe example given in the JSFiddle however does work, but no due to the CSS.\nIt seems to be a difference between the versions. I used 0.6.12 when I was experiencing this issue and on an other site I had version 0.6.10 and all worked fine there. So I downgraded to 0.6.10 and the problem was gone. In 0.6.11 the problem occurs as well, so there has be something that has changed between version 0.6.10 and 0.6.11. \nHaven't looked further into the problem yet, but perhaps this is something to start with.. ",
    "fishbucket": "Thanks rianne-o - reverting to 0.6.10 solved it for me!. ",
    "adfie": "i got same error.... @dotku have u got solution?. ",
    "SimonFricker": "I get the same error.. ",
    "bashenandi": "I get the same error, try use 'perfect-scrollbar.jquery.min.js' file. it`s solved.. ",
    "w9914420": "I also confirm that I get the same error as @dotku . ",
    "arifhussain353": "still same error. ",
    "reeslo": "Can you provide this file into the npm package ?. ",
    "IrvingArmenta": "I want to achieve exactly what this plugin does:\nhttp://plugins.gravitysign.com/rollbar/\nif you resize the browser windows, the whole scrollbar works for the site.. ",
    "minhcasi": "I had the same problem, please help.. ",
    "darkterra": "+1. ",
    "paulocheque": "This can be useful: https://github.com/noraesae/perfect-scrollbar/wiki/FAQ#how-can-i-make-the-scrollbars-always-visible. ",
    "silentHoo": "If you're using 0.7.0 you can simply use:\n.ps > .ps__scrollbar-x-rail,\n.ps > .ps__scrollbar-y-rail {\n  opacity: 0.6;\n}. ",
    "dehimer": "I think you should calc offset\nelement.scrollTop = X;\nwhere X is listHeight - containerHeight\n(element.parent().height() - element.height()). ",
    "BDMO-Forum-Bot": "I had to do \nelement.perfectScrollbar('destroy');\nelement.perfectScrollbar();\neverytime I added some element. I really think this is an important issue.. ",
    "barrychapman": "This may show it better:\nhttps://jsfiddle.net/xv0rrxv3/297/. ",
    "valecarlos": "Thanks! sorry i wasn't quicker to answer. ",
    "itsOgden": "@medBouzid it does seem like having this as an option would be good, but for me, I just override the css so it always does what I want (which is staying a static size and always visible);\n.ps-container{\n    div{\n        border-radius: 0 !important;\n    }\n    .ps-scrollbar-y-rail, .ps-scrollbar-x-rail{\n        opacity: 1 !important;\n    }\n    .ps-scrollbar-y-rail, .ps-scrollbar-y-rail .ps-scrollbar-y{\n        right: 0 !important;\n        width: 0.5rem !important;\n    }\n    .ps-scrollbar-x-rail, .ps-scrollbar-x-rail .ps-scrollbar-x{\n        bottom: 0 !important;\n        height: 0.5rem !important;\n    }\n}. @rohmann are you sure it's the bottom of the scrollable area that's causing that issue? I'm just wondering because I have this exact problem with all scrolling on Windows, but perfectly silky scrolling on OSX. I'm trying to figure out if it's a related issue or two separate ones with similar side effects.. ",
    "cfatorNSS": "+1. ",
    "adil-gikian": "+1. ",
    "Abdipour": "+1. ",
    "minamoto19": "+1. I'm having the same problem.\nIt works correctly in Chrome, Opera, Safari and IE11 but not working in Firefox and Edge.\nFrom the developer tools I noticed that in Firefox and Edge the \"ps--active-y\" class was missing from my container.\nTried to add it manually. After scroll was removed.\nI'll try too dig deeper.\n. Hi again.\nTry to define a height property to the container you want to be scrollable.\nThat fixed the issue for me.\nWorking example: https://jsfiddle.net/gbfLazpx/1074/\nNot working example: https://jsfiddle.net/gbfLazpx/1072/. ",
    "mikeluyties": "Unfortunately, this issue still occurs if you are using a height with calc() =/. ",
    "tsujihidetaka": "+1. ",
    "kennydp": "I have the same issue on my mac trackpad. I think the cause is the shouldPreventDefault function in the mouse-wheel.js file. I tested it out and when both deltaX and deltaY are not 0 you return true, which means you will call stopPropagation and preventDefault. I think you should still check to see if you have reached the start/end of the container while scrolling, because the event should still be propagated in that case.. ",
    "konradjurk": "I noticed this too. Is it fixable?\nAnd what is the usecase of shouldPreventDefault? I changed the function to return false always and all problems are gone :)). @chanduk040 Have you tried to enable wheelPropagation?\nCheck out the demo page with enabled wheelPropagation.. @utatti I like that even better!. Sure, but maybe we should add it to the demo page in the meantime so that the feature is demonstrated? Maybe I was too fast in closing that PR :D. @Bilge Hey, if you've applied these steps from the README and the problem persists, could you provide a jsfiddle that reproduces the problem? :)\n  . @Bilge Harsh words, do mind letting us know which library you chose instead that satisfies your usecase? If it is indeed a bug we should adapt this library which will help a lot of people.\nApart from that, the cause of your bug is almost certainly a small configuration thingy.. @Bilge Thanks much for the feedback :) Will look into the Windows thingy.\n@utatti Do you like Bilge's idea to ease the setup of perfect-scrollbar? Maybe we can ship a default .container class or the constructor sets the required style on the parent DOM element?\n  . Hi @Costegillio, I adapted the nice jsfiddle from #735 to your setup. Could you check this out and describe what exactly is not working as expected? For me, the outer container is not scrolling.. @Costegillio Oh I see, the percentage height is in relation to its parent DOM elements (in this case body and html). Both need a height value too, otherwise it defaults to auto which is just the full height of body so perfect-scrollbar thinks there is nothing to scroll.\nSo \ncss\nhtml, body {\n  height: 100%;\n}\nfixes the issue for this particular case: https://jsfiddle.net/usq0fc0g/1/\n  . ",
    "keevitaja": "huh, it has been a while. but i kinda think it rather was the problem nr 2. \nI'll come back to it when similar situation represents itself. \ntnx!. ",
    "w3lifer": "@utatti, https://fiddle.jshell.net/bgjm9mpx\n. ",
    "fadhly-permata": "UPDATE:\nHey, it turns out this error appears also in some other places.\nDo you have any solution for my case?. Hii @noraesae,\nAfter upgrading my PS object into version 0.7.0 this problem was not coming anymore. Thanks for your new version.. ",
    "aaronferris": "I've been looking into this, I believe i've whittled it down to not being the jQuery but the CSS.\nIn particular the css transitions in:\n\n.ps-container > .ps-scrollbar-y-rail > .ps-scrollbar-y {\n    position: absolute;\n    background-color: #aaa;\n    -webkit-border-radius: 6px;\n    -moz-border-radius: 6px;\n    border-radius: 6px;\n    -webkit-transition: background-color .2s linear, height .2s linear, width .2s ease-in-out, -webkit-border-radius .2s ease-in-out;\n    transition: background-color .2s linear, height .2s linear, width .2s ease-in-out, -webkit-border-radius .2s ease-in-out;\n    -o-transition: background-color .2s linear, height .2s linear, width .2s ease-in-out, border-radius .2s ease-in-out;\n    -moz-transition: background-color .2s linear, height .2s linear, width .2s ease-in-out, border-radius .2s ease-in-out, -moz-border-radius .2s ease-in-out;\n    transition: background-color .2s linear, height .2s linear, width .2s ease-in-out, border-radius .2s ease-in-out;\n    transition: background-color .2s linear, height .2s linear, width .2s ease-in-out, border-radius .2s ease-in-out, -webkit-border-radius .2s ease-in-out, -moz-border-radius .2s ease-in-out;\n    right: 2px;\n    width: 6px\n}\n. I've fixed this in my implementation by removing the transitions in my stylesheet, i'm yet to see any issues caused by doing so.\nbody .ps-container > .ps-scrollbar-y-rail  .ps-scrollbar-y {\n    transition: none;\n}\n. Thanks @utatti. \n",
    "Mortens4444": "I finally created a JSFiddle example: https://jsfiddle.net/sgsj7ff1/\nor https://jsfiddle.net/sgsj7ff1/1/\nAs I see, this issue is related to the css style: transform: translate.. I replaced the transform: translate with flex, so it's working now on the web page.. I've created a sample from the fixed version: https://jsfiddle.net/sgsj7ff1/2/. ",
    "dbauszus-glx": "+1 This is a feature I very much would like to use as well. Currently I use jScrollPane for that reason alone. This works well but jScrollPane requires jQuery and I add jQuery for that reason alone to my project.. ",
    "bulbil": "@beerteam I have a two column site and have had success with placing the scrollbar on the left side. Below is the css I apply to the left column (updated for the 0.7 release).\n```\n// Perfect scrollbar overrides\n.ps#left {\n.ps__scrollbar-y-rail{ left: 0; }\n.ps__scrollbar-x-rail{ display: none; }\n\n}\n.ps#right {\n.ps__scrollbar-y-rail{ right: 0.2rem; }\n.ps__scrollbar-x-rail{ display: none; }\n\n}\n```. ",
    "dashed": "@utatti Looks like the example you provided no longer exists.\nAnd that particular file seems to have been removed in this commit: https://github.com/utatti/perfect-scrollbar/commit/46d5f8eee7a5ee1510a59d63ce50f2fdd3c52c72#diff-bfebe34154a0dfd9fc7b447fc9ed74e9\nIs this something that's no longer possible?. ",
    "JoelBout": "Hello Tony,\nThank you for your response but saying that I need to update my layout does not help much...\nMaybe can you let me know in which directory should I upload those files (js and directory) on Magento?\nAnd for the layout do you mean that for each page layout I need to include those library? Can you give me an example?\nThanks & regards,\nJoel\n. ",
    "phantomedc": "i solved this situation temporarily by load external css file,but i still dont know why the style doesnt work in that situation. ",
    "neozl24": "Hey, I met the same problem in my Vue.js project.  After initialization, the scroll bar does work but not appear. Instead, a blank area appear at bottom of my content, with the exact height of the container. \nSearching info on google and they usually tell that the key is to initialize at the right time or update the container. But for me, the problem doesn't seem on that.\nAfter I find your issue, I write some external css which does work !!!\nBelow is my key css code\n.ps__scrollbar-y-rail {\n  position: absolute;\n  width: 20px;\n  right: 0;\n  background-color: #ddd;\n }\nand\n.ps__scrollbar-y {\n  position: relative;\n  background-color: #aaa;\n}. ",
    "kiwicopple": "\nCSS is not automatically imported for Vue. Please include it manually or by giving source file path for single-file component.\n\nFor those wondering how to do this, just add this somewhere to you App's scss:\n@import \"../../node_modules/perfect-scrollbar/css/perfect-scrollbar.css\";. ",
    "Adnan-Oezsarigoel": "Your scrollbar rail top property changes with inline-css while scrolling. In combination with sticky headers it moves out of area. Adding any styles won't fix that.. Yes, sticky headers force position:relative; to the wrapper, to put the header on top. But then the slider moves to fast. Therefore I add a property to your plugin. I wrote it in my first post.. This Plugin http://polarblau.github.io/stickySectionHeaders/ uses overflow: hidden; and position: relative;. \nYou can test it hear:\nhttps://jsfiddle.net/Adnan_Oezsarigoel/0cL4pf5a/. Wow, @janizde. Your fix is ways better then mine. Thank you.. ",
    "janizde": "I agree with @Adnan-Oezsarigoel, I also have the problem, that I cannot set the container to position: relative;. Just keeping ps__rail-y top style at 0 would fix the problem. I think the best solution would be to give plugin users the ability to intercept the styles of the generated dom elements.\nSomething like\njavascript\nconst container = document.getElementById('#container-with-position-other-than-relative');\nnew PerfectScrollbar(container, {\n  interceptRailY: styles => ({ ...styles, top: 0 }),\n});. FYI I solved it by just using a top: 0 !important in CSS. But anyway it would be nice to have more control over the scrollbar DOM elements if it's not a big performance deal. ",
    "JordanSjodinFaithlife": "@utatti are you sure you should have closed this? Having a relative wrapper around the scrollable content is required for my use case, and would cut down on the fancy logic mutating top and bottom on the scroll rails.\nHaving a relative wrapper would mean you only need to set top to 0 and never think about it again. (Since the rail would be absolute relative to the non-scrollable portion)  Would you consider re-opening this issue?. ",
    "Hurtak": "Oops, sorry duplicate of https://github.com/noraesae/perfect-scrollbar/issues/560. ",
    "devildant": "IMG_3269.zip\n. this video show the problem, during this test i just move a mouse. hello,\nI tried to reproduce the problem but it seems to have disappeared.\nthx for your reply. ",
    "Joseph7451797": "I encountered similar problem today on our production server.\nI imported perfect-scrollbar/src/css/mixins.scss and perfect-scrollbar/src/css/variables.scss in my main scss file. Using the mixins for custom scrollbar color and scrollbar width setup. \nMy main scss code:\n```scss\n// perfect-scrollbar\n@import \"./node_modules/perfect-scrollbar/src/css/variables.scss\";\n@import \"./node_modules/perfect-scrollbar/src/css/mixins.scss\";\n$ps-theme-customBlack: (\n  border-radius: 0,\n  rail-default-opacity: $ps-rail-default-opacity,\n  rail-container-hover-opacity: $ps-rail-container-hover-opacity,\n  rail-hover-opacity: $ps-rail-hover-opacity,\n  bar-bg: #fff,\n  bar-container-hover-bg: #000,\n  bar-hover-bg: #333,\n  rail-hover-bg: $ps-rail-hover-bg,\n  scrollbar-x-rail-bottom: $ps-scrollbar-x-rail-bottom,\n  scrollbar-x-rail-height: $ps-scrollbar-x-rail-height,\n  scrollbar-x-bottom: $ps-scrollbar-x-bottom,\n  scrollbar-x-height: $ps-scrollbar-x-height,\n  scrollbar-x-hover-height: $ps-scrollbar-x-hover-height,\n  scrollbar-y-rail-right: $ps-scrollbar-y-rail-right,\n  scrollbar-y-rail-width: 15px,\n  scrollbar-y-right: 0,\n  scrollbar-y-width: 9px,\n  scrollbar-y-hover-width: $ps-scrollbar-y-hover-width,\n);\n// custom-black scrollbar theme\n.ps {\n  @include ps-container($ps-theme-customBlack);\n}\n// custom-black scrollbar rail\n.ps__scrollbar-y-rail {\n    border: 3px solid rgb(0, 0, 0);\n}\n```\nThen I use webpack, sass-loader and node-sass to transpile scss file to css file on my development machine(Mac OSX 10.11) and test server(centOS). All css files are good in my Mac and our test server. Oddly when the scss file was deploy to production server(also centOS), css file transpiled lost some pieces of code.\n```css\n .ps {\n    touch-action: auto;\n    overflow: hidden!important;\n    -ms-overflow-style: none\n}\n@supports (-ms-overflow-style: none) {\n    .ps {\n        overflow:auto!important  / css file is broken at this line, and lose everything below /\n```\nThat is totally weird! I have no idea why there are differences between Mac and production server. All enverionments use same tool:\n- webpack 2.6.1\n- sass-loder 6.0.5\n- node-sass 4.5.3\n- libsass 3.5.0.beta.2\nMy solution is to comment three lines in perfect-scrollbar/src/css/mixins.scss\n```scss\nother code...\n// comment @supports rule to fix the issue \n// Edge\n  @supports (-ms-overflow-style: none) {\n    overflow: auto !important;\n  }\nother code...\n```\nThe code seems to be a Microsoft Edge CSS hack and looks valid. I still have no idea why it breaks my css and which part of transpiling influenced. Maybe someone has better solution to this issue.. ",
    "AndrewPix": "We also encountered the same error. Our gulp generated css interrupted at the same line. Ok sorry found this https://github.com/utatti/perfect-scrollbar-bower deprecation warning.. ",
    "leeroy8": "If someone needs it:\nin order to bind the wheelscroll event to body element I've added a line to module.exports:\nmodule.exports = {\n  /* .. */\n  wheelSpeed: 1,\n  focusedScroll: true,\n  theme: 'default',\n};\nthen changed the event bind in mousewheelHandler by adding a condition:\nvar body = document.body;\n  if (typeof window.onwheel !== \"undefined\") {\n    i.event.bind(i.settings.focusedScroll ? element : body, 'wheel', mousewheelHandler);\n  } else if (typeof window.onmousewheel !== \"undefined\") {\n    i.event.bind(i.settings.focusedScroll ? element : body, 'mousewheel', mousewheelHandler);\n  }\nand the calling:\n$('element').perfectScrollbar({\n      swipePropagation: true,\n      wheelPropagation: true,\n      focusedScroll: false\n    });. ",
    "ucjonathan": "I agree that the page up/down should be equivalent to the height of the container being scrolled instead of just 90 pixels.. ",
    "MA-Maddin": "Seems to be an mac-only issue (or browser specific). Working on windows.. ",
    "CKGrafico": "Working on my demos on Windows. ",
    "DMShamonov": "You need get '.ps__scrollbar-y' dom element and read this 'offsetTop' property. But perfect-scrollbar fires events before re-render scrollbar dom element, and so 'offsetTop' property has old value (value before re-rendering scrollbar dom element). I'm created issue for this (#667). . @GufNZ wheelPropagation is false by default, but it isn't help.. ",
    "luishdez": "Thanks for the example!. ",
    "ravi-mone": "perfect-scrollbar plugin On reaching bottom, fires the event multiple times\n. ",
    "sandeeproop": "Can you help me and let me know how to do that. getScrollTriggerPoint(containerElem:any):boolean {\n    let scrollBarElem = containerElem.querySelector('.ps__scrollbar-y');\n    if(scrollBarElem) {\n      let scrollBarHeight = scrollBarElem.style.height.split('px')[0];\n      let contHeight = containerElem.clientHeight;\n      let offSetTop = scrollBarElem.offsetTop;\n      // console.log('offSetTop + scrollBarHeight',(offSetTop + scrollBarHeight));\n      // console.log('contHeight - 10',contHeight - 30)\n      if((parseInt(offSetTop) + parseInt(scrollBarHeight)) >= (parseInt(contHeight) - 30)) {\n        return true;\n      }\n    }\nreturn false;\n\n}\nI have used above code to determine 30px before reaching end \nand used (ps-scroll-down) event for handling that.\nthis works perfectly when user scroll slowly if user scroll fast this won't help.\nany idea what i am doing wrong.   . ",
    "marko-hologram": "\nThe following requirements should meet.\n the container must have a 'position' css style.\n the container must be a normal container element.\n* PS may not work well in body, textarea, iframe or flexbox.\n\nDoes you container element meet these Perfect Scrollbar requirements ?. ",
    "gvmohzibat": "Thanks for your reply.\nThe problem was with the css file and it wasn't loaded. I had to add this line of code to my sass file:\ncss\n@import \"~perfect-scrollbar/dist/css/perfect-scrollbar.css\";. ",
    "mazeeblanke": "i have imported the css from cdn i see those classes in my element \"ps ps--theme_default\"  but the look/theme remains the same :(. ",
    "vislogurov": "I have the same issue http://s.csssr.ru/U0FMPH83W/20180111124136.png. ",
    "andrewtibbetts": "This behavior also happens when you release mouse over the rail. It will trigger a click on the rail which in IE and Chrome makes the scrollbar jump to the bottom.\n\n. ",
    "Silvea12": "We ran into this issue on Picarto.tv, we are using your scroll system. There is also one other weird bug but it keeps evading us whenever we test it. Will send a pull request when we find that.. ",
    "ericdepotter": "So the scroll now works for contained children out of the box? Great, thanks!. ",
    "altschuler": "In this case it's HTML5 drag and drop events, it might not be an issue for custom type of drag and drop systems where you manage the entire flow without using the native drag events.. ",
    "holgersindbaek": "Ya... it's weird. Why would such a thing happen? Because i have too much content? Too many HTML elements? Too much css?\n. It\u2019s kind of weird. It only happens when the browser window is very small or very large. Middle size works fine.\u00a0\n--\u00a0\nAll the best\nHolger Sindbaek\n\u00b7\u00a0UI/UX\nDesigner & Web/iOS Programmer\u00a0\n\u00b7\nhttp://holgersindbaek.com/\nOn Tue, Oct 10, 2017 at 1:52 PM Hyunje Jun\n<\nmailto:Hyunje Jun notifications@github.com\n\nwrote:\n\na, pre, code, a:link, body { word-wrap: break-word !important; }\nIt could be, but I think it's more of browser issue rather than user-level one. It works fine in Safari or Firefox. I just assume it's related with GPU memory, but not sure at all.\nI, anyway, wonder if it's resolved when there are less contents or CSS styles.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly,\nhttps://github.com/utatti/perfect-scrollbar/issues/688#issuecomment-335448220\n, or\nhttps://github.com/notifications/unsubscribe-auth/AAqqY1Q3hIAz6AboLMkNeT07WOtQ1DZjks5sq1qWgaJpZM4PsU12\n.. ",
    "Exlord": "I am only using Y scroll so this changes worked for me , almost.\n.rtl .ps__rail-y {right : auto !important;left : 0;}\nlet scrollbar   = new PerfectScrollbar(this.element, { suppressScrollX: true });\nscrollbar.isRtl = false;. ",
    "ashrafreda": "```\nps = new PerfectScrollbar(element, {\n    wheelSpeed: 0.5,\n    swipeEasing: true,\n    wheelPropagation: false,\n    minScrollbarLength: 40,\n    suppressScrollX: true\n});\nps.isRtl = false;\n```\nthis ps.isRtl = false; fix the RTL issue.. ",
    "mahdibx": "I have the same issue, there is a problem in the typings, it should not export default, the export should rather be export = PerfectScrollbar\n. ",
    "MurhafSousli": "Never mind, I got it from the releases page. ",
    "tegomass": "Hi,\nI've uploaded the very simple project using webpack and perfect-scrollbar, please take a look here : \nhttps://github.com/tegomass/perfect-scrollbar-webpack-demo\nJust do a npm install then webpack on the directory.\nOpen the index.html file.\nComment/uncomment the line below (in main.js before the bundle process) to see the difference:\n//import PerfectScrollbar from 'perfect-scrollbar';\nWith the require method, I have an error about the Constructor (on the chrome devtools console). ",
    "kikoseijo": "You made my day, thanks @utatti . ",
    "dantranv": "Hi @tegomass, @utatti \nI use import with my webpack and got the same error ReferenceError: \"PerfectScrollbar is not defined\"\nv1.4.0\nimport PerfectScrollbar from 'perfect-scrollbar';\nAny idea?. ",
    "draaslan": "\nHi @tegomass, @utatti\nI use import with my webpack and got the same error ReferenceError: \"PerfectScrollbar is not defined\"\nv1.4.0\nimport PerfectScrollbar from 'perfect-scrollbar';\nAny idea?\n\nwindow.PerfectScrollbar = require('perfect-scrollbar');\nI did it after 3 hours of trying and works now. You can try :). ",
    "ujtordai": "Hi,\nI Use the ngx-perfect-scrollbar v 4.4.0 which useing the v 0.7.1 perfect-scrollbar.\nThank you of your reply.\n. Thank you. ",
    "glennnall": "the \"thumb\" is the part of the scrollbar that moves - it's how utatti refers to it...\nnot the human thumb.\nI'm just trying to utilize the y axis as well as the x axis with the mousewheel.... ",
    "sqal": "PS instance doesn't have scrollTop method. scrollTop is just native DOM property, so If you want to change scroll position just do:\nconst container = document.querySelector('.container');\ncontainer.scrollTop = 0;\n// ps.update() // optional\nhttps://jsfiddle.net/dyvL31r6/65/. ",
    "arl1nd": "Its interesting that this issue is not appearing in version 0.6.16 so that might help you figure out the issue.. Hi Hyunje,\nSince this is my first commit to Github I am not sure how this works. Otherwise you can simply add the fix from your account (if thats the correct way). Sure no worries, I hope you can find a better alternative.. ",
    "costea93": "@utatti, thanks for answer, the error will disappear if use this option: \nconst PerfectScrollbar = require('perfect-scrollbar');\nBut the scroll but doesn't appear when i scroll, it's always hidden. I checked the css classes, and it's always: \"ps ps--active-y\", the css styles i also can see, but the scroll but doesn't appear when i scroll, do you know what problem might be in this case?\nThanks a lot!. Heh, it works and it's nice, but with PS doesn't work more element.scrollIntoView({ behavior: 'smooth' })\nWhatever, thanks for help!. For multiple elements on page with scroll it won't work ok, because, it'll be initialized just for first element, it can be fixed easy by this way:\nconst containers = Array.from(document.querySelectorAll('#selector'));\ncontainers.forEach(elem => new PerfectScrollbar(elem));. ",
    "JochenDiekenbrock": "Thank you!. ",
    "kfadli": "Finally i disable perfect-scrollbar for this view. ",
    "sebastian-yabiku": "Thanks for your helping. I was have imported good the file css . Well i will try el vue-perfect-scrollbar . thanks so much. ",
    "abensur": "@sebastian-yabiku I'm using this implementation as a Directive:\n```js\nimport PS from 'perfect-scrollbar'\nexport default {\n  name: 'scroll',\n  inserted (el, binding, vnode) {\n    if (binding.value) {\n      const callback = typeof binding.value === 'function'\n        ? binding.value\n        : binding.value.callback\n  el.addEventListener('scroll', callback, { passive: true })\n}\n\nel.style.position = 'relative'\nPS.initialize(el)\n\nlet ticks = 0\nconst interval = setInterval(() => {\n  PS.update(el)\n  ticks++\n  if (ticks >= 20) clearInterval(interval)\n}, 200)\n\n},\n  unbind (el, binding) {\n    if (binding.value) {\n      el.removeEventListener('scroll', binding.callback, { passive: true })\n    }\nel.style.position = 'static'\nPS.destroy(el)\n\n},\n  componentUpdated (el) {\n    PS.update(el)\nlet ticks = 0\nconst interval = setInterval(() => {\n  PS.update(el)\n  ticks++\n  if (ticks >= 20) clearInterval(interval)\n}, 200)\n\n}\n}\n```\nthen i just place v-scroll in the desired component, working for vertical and horizontal scroll. ",
    "MarcoBatongbacal": "Working on scrollbar with x axis but not working on y axis. Sorry, it's working now thank you!. ",
    "madprops": "Is this related to selecting text upwards with a mouse not moving the scrollbars to select more text?. It's not a big problem for me, it just messes temporarily some obscure feature of mine, so no worries. Maybe that wrap could work. Thanks. This only happens in Chrome, not in Firefox. Any good alternative?. ",
    "DzmVasileusky": "It seems that you have forgotten to update the docs.\n\nwheelPropagation {Boolean}\n...\nDefault: false. +1\nCame here from ngx-scrollbar issues https://github.com/zefoy/ngx-perfect-scrollbar/issues/149\nI have created stackblitz (Angular engine but the same scrollbar in it)\nhttps://angular-wapzv9.stackblitz.io\n\nIf the container is originally empty scrollbar will be on the left even after loading data into it and updating.\nOn top of it there is a bug that scrollable area become expanded and you can scroll much more than really occupied space.. ",
    "Bilge": "At first you agreed with me but now you changed your opinion because Mac does it differently. It's not as if Mac is some holy design epitome of unfathomable perfection. This should not be the default behaviour no matter what Apple does.. Sorry but I didn't end up using this library because I think it has a long way to go before it lives up to its name.. I ended up rolling my own which still uses native scrolling, but modifies its behaviour to work better with transitions and doesn't scroll the parent window when reaching the extents.\nI realize this particular issue could possibly be my own fault, but there are shortcomings I haven't listed. Besides the other ticket I raised, I don't like the fact that it loses the smooth scrolling animation that native scrolling has on Windows. After becoming accustomed to the pleasantry of smooth scrolling, the jaunty instant relocation is a bit jarring and uncomfortable by comparison. Consequently I no longer have an interest in pursuing usage or improvement of this library at this time, however I may revisit it in future.\nAside, if those requirements in the readme are really non-optional then I opine the script should set them itself to avoid bogus support tickets.. ",
    "Costegillio": "@konradjurk, thanks for answer. Your fiddle works like a charm. \nSeems my problem is in percentage height for container, which breaks vertical scroll:\n.container {\n  height: 30%;\n}\nIs where way to use it?\njsfiddle. @konradjurk, it's works now.\nThanks and good luck!. @utatti, thanks for your reply. \nActually i did it right as you say, just gave wrong example, sorry.\nHere is full code and it doesn't work:\n`    \n psB = new PerfectScrollbar(\"#mainWrapper\", {suppressScrollX:true});\n psF = new PerfectScrollbar(\"#frames\", {suppressScrollX:true});\n\n $(window).resize(function() {\n   psB.update();\n   psF.update();\n });\n\n`\n  . ",
    "GufNZ": "Try moving the updated calls inside a setTimeout or requestAnimationFrame callback to give things time to re-render at the new size first perhaps?. It sounds like PS needs a modifier check in the event handler(s).... Do you still have wheelPropagation set to false (or unspecified as that's the default)?. You could also manage your own collection of instances as you create them.. Manually add the ps--active-x or ps--active-y classes to the element you created the PerfectScrollbar of and they will show up initially.\nAs to why, not sure.. ",
    "DmitryTezh": "I have the same issue, ps.update() not works, only ps.destroy() and re-creating helps me. Do you have any ideas?. ",
    "ahmad-sa3d": "I closed this pull request and i will open new one only with changes on 'src' directory on new branch. for testing and to demonstrate this fix i have added two examples in my fork repo master branch https://github.com/ahmad-sa3d/perfect-scrollbar\n'rtl-supressScrollX.html', 'ltr-supressScrollX.html', and edited 'rtl.html'. thanks oladon for your updates, i think number 9 was fixing scrollbar width or position while i was fixing this issue on aproject i was working on, i donot know why but this was the fix, any way if it works will without it ok and it might be my project related, i will figure out with this new release and feedback . ",
    "Ardeshir81": "I liked it very much. Niice . Hey @oladon \nThanks!\nEverything is super-fine on RTL.\nAnd in my non-multilingual rtl-only project I will use your version.\nBut the only thing that is annoying in your PR, is the example with dynamic turn rtl on/off which is great in chrome, but in firefox 66.0b12 (64-bit) it has buggy behavior which is depicted in gif below:\n(thi gif is 5.9MB, so it takes a little to load)\n\n. ",
    "dimitarnestorov": "Just wrapping updateGeometry in requestAnimationFrame isn't enough. Measurement and mutation must be in separate requestAnimationFrames (https://github.com/wilsonpage/fastdom).\nI am suggesting this PR to be rejected and I will recreate it by implementing fastdom inside updateGeometry, which should bump the fps to 60.. @utatti requestAnimationFrame is somewhat similar to setTimeout and setInterval in the sense there is a clear method (cancelAnimationFrame). My idea is whenever no mutation has to happen (preventDefault/stopPropagation), I am just going to add cancelAnimationFrame for the mutation callback. fastdom also implements a clear method.\nLet's keep this PR open so that we can benchmark both implementations to see which one actually performs better.. A turn of events has occurred. It seems I was wrong that measurements and mutations must happen at different requestAnimationFrames. But batching measurements to be before mutations inside a requestAnimationFrame is what gets max performance. I looked at the source of fastdom to be surprised that measurements and mutations weren't in different rAFs.\nSplitting updateGeometry into 2 rAFs won't yield a performance bump. What would is wrapping every other function that does DOM measures and mutations in a rAF. However rAF is similar to setTimeout in the sense that the callback is going to be called asynchronously and in event handlers we need the result immediately in order to decide whether to call event.preventDefault. I am going to start thinking of a solution for the event.preventDefault case.\nSince all the measurements in updateGeometry are in the first 5 lines and everything after that is a mutation it's at max performance as it is.\nSimply put: I would love to see this PR merged.\nMore on the topic: https://github.com/wilsonpage/fastdom/issues/35. ",
    "redders6600": "@dimitarnestorov Happy for that approach - I haven't had loads of time to work on this, but noticed there were a couple of quick wins that I could implement in 10 mins, so I did!\nOne approach is to reject and re-implement fully (a task I personally don't have the resources to complete myself) another is to merge because this is better than the current state (no requestAnimationFrame at all), and create an issue/task for someone to upgrade at a later date.\nGiven there was an issue created and subsequently closed on this due to lack of resource, my feeling is that an interim 'better than nothing' approach is definitely more beneficial.\nI am now using my fork in my project, so I'm not really bothered either way, just thought others might benefit :)\nEDIT just re-read and realised you are proposing to re-create the PR yourself - I initially missed that part. I'm fine with that! \ud83d\udc83 . I updated my branch today - I noticed that my last implementation would only cache a single instance's request to update geometry. This caused issues when there are multiple instances of perfect scrollbar on a page whereby if both needed a geometry update (e.g. resize, initial load, etc.), only the last one to register call the requestAnimationFrame function would actually update.\nFurthermore, multiple requestAnimationFrame listeners would be added, meaning the function could get called many times for a single instance at the start of a frame. I think the two commits I've just made fix this.. ",
    "geiregjo": "I justed stumbled on this same problem. I depend on jQuery UI Draggable which Sortable depends on. Did anyone look into this yet?. ",
    "jowhannez": "Sent you a mail asking for help since it seems like you fixed the issue and here's the reply:\n\nHi Johannes,\nIt seems that it might have been magically \"fixed\" by a browser update. \nI suspect it might have been a browser issue then.\nPerhaps the problem was only on Safari - can't really remember!\nActually, just checked it on microsoft edge, and there the problem still remains :(\nAnyway, at one point I added these options:\nsuppressScrollY: true,\n   wheelPropagation: true\nMaybe that helps to get it working on firefox and chrome at least.\n\nAdding these as [config]=\"{suppressScrollY: true, wheelPropagation: true}\" on the angular component fixed it for me in chromium at least!. ",
    "oladon": "Hmm, that's odd behavior indeed. I normally use Firefox and haven't experienced it \u2014 do you have any browser extensions which might be interfering?\nUnfortunately, not sure I'll have bandwidth to investigate in much detail any time soon.. ",
    "joSFD": "+1 to add it in next version.... ",
    "marcelaraujo": "@steady-join It's because scroll-end event happens twice or more. I have to apply debounce function\nelement.on(\n                        \"ps-y-reach-end\",\n                        lodash.debounce(\n                            e => {\n                                //console.log(\"here\");\n                                //element.perfectScrollbar(\"update\");\n                            },\n                            500,\n                            {\n                                leading: true,\n                                trailing: false\n                            }\n                        )\n                    );. ",
    "statyan": "I think I faced almost the same issue. How to reproduce:\n1. Go to the perfect-scroll demo page: http://utatti.github.io/perfect-scrollbar/ with latest Chrome\n2. Zoom to 150%\n3. Set height = '400.65px' instead of '400px' to <div id=\"demo\" class=\"ps ps--active-x ps--active-y\">\n4. Scroll to the bottom and continue scrolling - scroll becomes infinite. \nSeems like issue happent because of incorrect rounding of thumb size calculation. element.scrollTop becomes fractional and size of thumb sometimes grows on 1px (or top of it becomes on 1px greated than should be) and increase size of content.. ",
    "twelvew12": "Thank you\nI have another problem. When will I be personalized for each individual?\nconst ps = new PerfectScrollbar('#a', {\n    wheelSpeed: 0.5, \n    wheelPropagation: true,\n    minScrollbarLength: 20, \n        suppressScrollY: false, \n});\nps.update();. I updated the code above.\nHow should I call update order now?. # Thank you very much\nIt's ok. ",
    "dmk1111": "Hi, @utatti \nCould you please have a look at this PR? It is really important. ",
    "dikirill": "It looks like you are using old version, try this documentation:\nhttps://github.com/utatti/perfect-scrollbar/tree/0.8.1. ",
    "nickbullock": "got this error too. ",
    "rewasa": "same here, but PerfectScrollbar works.... ",
    "JStrebeyko": "I'm trying to make a custom Vue component using PS, same here. I'm trying to pass the element just like this: scrollBar().initialize(this.$el, this.settings);. ",
    "rennX": "I had this error using react-perfect-scrollbar. I eventually found that it was because I was importing just perfect-scrollbar.. ",
    "adibpg": "I had the same issue turned out that I was trying to create the scrollbar before document ready.. ",
    "seyfer": "Actually, it can be achieved by overloading the library classes. Play with opacity property.. ",
    "lichnow": "yarn add jquery.nicescroll,\nrequire('jquery.nicescroll'),\n$(function () {\n        $(\"body\").niceScroll({\n            scrollspeed: 160,\n            mousescrollstep: 140,\n            cursorcolor: '#eee',\n            cursorborder: 'none',\n            cursorborderradius: '7px',\n            cursorwidth: '3px',\n            cursoropacitymax: 0.6\n        });\n    }). ",
    "guiassemany": "Same error here.\n@kobadg have you found a way?. ",
    "stachoj": "Sorry, wrong repository. Will get back later, after proper testing.\n. ",
    "ersurajnegi": "is there any option to show the scrollbars all the time when the content is more than the height of the container?. ",
    "webdevan": "Does anyone else want to check/confirm this issue? I've tested on two computers with the same results.. ",
    "lyssandro": "Having the same issue :( . ",
    "htran81": "same issue\n+1. ",
    "icexxxxxx": "@leveloid I met this as well, how did you fix that?. ",
    "hyperknot": "@Sulsummer here is a workaround, until this gets fixed properly:\n.ps__rail-y {\n  left: auto !important;\n}. ",
    "yurovant": "Same request from my side. Is it possible to have an additional setting for scrollbar wrapper's width?. ",
    "Schleuse": "Hmm, I have no idea why the build is failing :disappointed:.\nThe tests run fine on my machine :man_shrugging: . The build now works after rebasing the master onto this PR . ",
    "andrey-hohlov": "The same problem with Vue directive. Looks like Vue.nextTick() helps.\n```javascript\nimport Vue from 'vue';\nimport PS from 'perfect-scrollbar';\nconst cache = new WeakMap();\nexport default {\n  bind(el, binding) {\n    if (typeof window === 'undefined') return;\nconst defaults = {\n  wheelPropagation: true,\n  suppressScrollX: true,\n};\n\nVue.nextTick(() => {\n  const ps = new PS(el, Object.assign(defaults, binding.value));\n  cache.set(el, ps);\n});\n\n},\n  update(el) {\n    const ps = cache.get(el);\n    if (ps) {\n      ps.update();\n    }\n  },\n  componentUpdated(el) {\n    const ps = cache.get(el);\n    if (ps) {\n      ps.update();\n    }\n  },\n  unbind(el) {\n    const ps = cache.get(el);\n    cache.delete(el);\n    if (ps) {\n      ps.destroy();\n    }\n  },\n};\n```. ",
    "despian": "+1\nAlso having problems with this.. ",
    "ffey": "\u6211\u4f7f\u7528\u7684\u65f6\u5019\u6ca1\u6709\u95ee\u9898\uff0c\u4f60\u8981\u628a\u4f60\u4f7f\u7528\u7684\u4ee3\u7801\u7c98\u8d34\u51fa\u6765\u624d\u53ef\u4ee5\u770b\u5230\u662f\u4ec0\u4e48\u95ee\u9898. \u6211\u89c9\u5f97\u662f\u6eda\u52a8\u5230\u6700\u540e\u7684\u64cd\u4f5c\u53d1\u751f\u5728\u4f60\u6dfb\u52a0\u7684\u52a8\u4f5c\u4e4b\u524d\u4e86\uff0c\u8bd5\u8bd5setTimeout\u5427. In my way, I do it like this.\n`const ps = new PerfectScrollbar('#container');\ndocument.getElementById(\"container\").scrollTop = document.getElementById(\"container\").scrollHeight;\nps.update();\n`. ",
    "pavelarseyev": "```\nvar elements = $('.element');\nfor(i=0; i < elements.length; i++){\n  const ps = new PerfectScrollbar($(elements)[i]);\n}\n```. ",
    "lrech": "We are also using Aurelia and we had to modify the perfect-scrollbar.d.ts to get this to work.\nWe removed the export default PerfectScrollbar line and replace it with an export = PerfectScrollbar above the declare class PerfectScrollbar\neg.\n```javascript\nexport = PerfectScrollbar;\ndeclare class PerfectScrollbar {\n  constructor(element: string | HTMLElement, options?: PerfectScrollbar.Options);\n``\nThis also meant that we need needed to change the import statement to this:import * as PerfectScrollbar from 'perfect-scrollbar';`\nI hope this helps. I'm not sure if this is a valid change for use in other frameworks but it is now working for us.\nUpdate:\nWith the above changes in place we also found that on a release build with webpack we needed to remove the \"module\" property from package.json file to force webpack to use 'dist/perfect-scrollbar.common.js'\n. ",
    "sambaptista": "Using mac, I can confirm. On macOs, when holding shift key, e.wheelDeltaX and e.wheelDeltaY are reversed.\nThis lib reverses what is already reversed natively and cancels the horizontal scroll.\nI've tested this fix and worked fine.. ",
    "airwin": "good job, but I think it should be deltaX != 0. ",
    "MichaelTamm": "We ran into the exact same problem.\nI put together a little CodeSandbox example which reproduces the issue.. ",
    "Bogdan808": "I join the question. This is a very necessary functionality.. ",
    "Sadhananagori18": "I also need this scrollbar smooth. Any one have any solution on related this ?. ",
    "volago": "Same here. It's a pity perfect-scrollbar overrides default browser's smooth scroll. It stops us from using the lib, because we have parallax effect on a site and it not looks good with perfect-scrollbar.. ",
    "cyruscuenca": "I also have this issue. ",
    "gaurav2000": "Provide fix. ",
    "tmt003-ho": "Thank you @gvodesigner, for ag-grid-react 20.0.0, the selector is '.ag-body-viewport'. And for horizontal scrollbar, just do\nnew PerfectScrollbar('.ag-body-horizontal-scroll-viewport');. ",
    "henken": "I have the same question.. ",
    "romanran": "It just uses the scrollLeft property on the node with scrollbar. So you can just use yourHtmlElement.addEventListener('scroll', () => { yourHtmlElement.scrollLeft }). ",
    "skxiaoniao": "use so difficult. ",
    "tance77": "@clarkk did you ever figure this out? I to would like to do this.\nI was able to add the following code to achieve what I think we both want, but it disabled clicking and scrolling.\ncss\n.ps__rail-y{\n    pointer-events: none;\n}. ",
    "YannickAWE": "@clarkk Try with this:\n```css\n.ps .ps__rail-y:hover, .ps .ps--clicking {\n  background:transparent!important;\n  opacity: 0.6!important;\n}\n.ps__thumb-y {\n  width:6px!important;\n  background-color:#aaa!important;\n}\n```. ",
    "MiroslavPetrik": "Saved my day :) :)\nI'm using this as wrapped in react-perfect-scrollbar and I was wondering why it didn't work.\nThe rule with JS packages is, always check the source code, you can not trust the docs.. ",
    "mehrdad94": "I made a mistake. ",
    "kevintruby": "I hope this merges in soon. I was having an issue with PerfectScrollbar on a Vue application running on a touch screen that seems to be using some sort of IR frame to detect touch events.\nTemporarily copied the dist esm build in a local libs directory and altered my es6 import statement, implementing the code change from the final commit, and everything is working perfectly! Would love to pull in a newer version with this, and cut the local dependency.\nJust my two cents, and thank you so much for sharing this; was driving me crazy!. ",
    "Sharon519": "Used classlist-polyfill to work around. ",
    "cheeZery": "We have the same issue and I now found the reason for the TypeError. As @Sharon519 correctly pointed out, the error occurs in shouldBeConsumedByChild. There the classList of the wheel or touch event target is read (see here and here).\nBut as you can see on caniuse in IE 11 and below, classList isn't supported for SVG or MathML elements. So if the cursor happens to point on one of those, the mentioned TypeError will occur.. :unamused: Apparently I was wrong about prettier... ",
    "dreamershl": "after study the cases, seems the most convenience approach is handle it in the program itself. When reposition the scrollbar, the code should use the flag to mark it and clear the flag after a while. ",
    "olaf89": "Im also having alot of this issues. Would be awsome to get it fixed. ",
    "DanielRuf": "Bump. What is the current status of this project?. ",
    "apriljunge": "@prakashtupad Can you please follow the steps above and provide an example?\nThank you :). @NorthwooDzp This is not an issue with perfect scrollbar. Just the expected behaviour of your browser. If you remove perfect scrollbar in your example you can see it very clear.\nYou could try setting a padding instead.. ",
    "laurentgoudet": "Fair enough, it's a selling point to me as since I've started to look into SSR I've realized it's really hard to find SSR friendly libraries :). Good point, fixed it. "
}