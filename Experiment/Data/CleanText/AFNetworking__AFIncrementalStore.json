{
    "mattt": "Great. Thanks!\n. Just ran into the same problem myself.\nApparently you need to specify the iOS version in the platform declaration:\nruby\nplatform :ios, '5.0'\nThat does the trick.\n. Ah, the 'old copy-paste error. How embarrassing for me! Thanks for the patch!\n. Excellent work. This goes to show the importance of developing against non-trivial examples (something which I've been admittedly slow in doing this time, so I appreciate your working through this). Thanks so much for the patch\u2014this has all been merged into master as of 788c5e5c256ee0a6522915f25e29717f63349d5b.\n. Heh, sure enough... Thanks for the patch, @dismory.\n. Ah, right you are. Thanks for the patch, @bjtitus!\n. Ah, good call. I've added this in acccc43. Thanks!\n. Hmm... I'm not particularly keen on adding things to .gitignore that should be in a global .gitignore in the first place. I've been holding out on AFNetworking for a year and a half now, so if nothing else, I'm stubborn about it, too.\n. Hey, thanks so much for submitting your documentation\u2014I really appreciate it. I took that as a long-needed kick-in-the-ass to give it some proper documentation, which is now in there as of 1171474a48f3e61afcf16d47295487939750ca78.\nTake a look at the way everything is formatted in my patch; you may want to use that as a starting point for any more docs you write. I'm following Apple's conventions for style, content, and formatting, which seems to be pretty comprehensive for how exhausting it is to write in the first place. Either way, documentation generally goes in the interface (.h), rather than in the implementation, which may contain some inline comments to clarify complicated codes.\nThanks again!\n. Ah, this is correct. I think I only re-realized the distinction between properties and attributes halfway through my original implementation, so there are a few lingering references to properties where I really mean attributes. Anyway, thanks.\n. Wait, no, this is incorrect. These properties are then used in representationsForRelationshipsFromRepresentation:ofEntity:fromResponse:. We need those in there. Reverting.\n. Apologies for taking so long to respond to your pull request.\nI just merged 96101a6 into master. See Issue #46 for the full discussion, but my approach was to use notifications to communicate all of the context necessary to do things like update activity indicators, or alert users about errors.\nA AFIncrementalStoreContextDidFetchRemoteValues notification will contain the associated HTTP request operation at AFIncrementalStoreRequestOperationKey. If it failed for some reason, its error field will be non-nil.\nI hope this approach works alright for you. Thanks again for your patch.\n. I'm embarrassed to admit that I only recently realized that UIWindow rootViewController was a thing. Goes to show how long I've been out of the iOS development loop.\nI cherry-picked all but the .gitignore commit. Thanks!\n. Core Data should do that automatically, but it didn't without doing this manually. Unless I'm mistaken. Can you check your change against the example projects to see if everything functions as expected?\n. Cool cool. Thanks again for that. This is all starting to come together, I think.\nI think I've reached a breakthrough as far as write operations, so I hope to push something for that in the next day or two.\n. I'm certain that discovering things that work for entirely the wrong reason doesn't exactly inspire confidence, but thanks all the same for the patch, Ben. I've merged it in 05f4f2a.\n. Thank you for this. I really appreciate it!\n. I dig it. Thanks so much for following up on that\u2014I really appreciate it.\n. Thanks for the pull request. I merged in all but the .gitignore, for reasons explained in Issues #30 and #23. Cheers!\n. That's a great idea. Thanks for the patch, Kevin! \n. I thought I'd made that change myself in an earlier commit, but it seems that it didn't go through. Thanks all the same, @lottadot\u2014I appreciate it.\n. Thanks for the pull request, @pitiphong-p. Correct me if I'm wrong, but it seems that this approach would only support 2 levels deep, no? \nA recursive solution would support any arbitrary depth, and even help to break up the wall of code in that method now. I've implemented that in 8743ea97c2599ee7edb1c2e1023218cf2583dcda ... e487c6a.\nLet me know how that works for you. Cheers!\n. Heh, almost forgot that one. Added in 34815bb.\n\n1 files changed, 5 insertions(+), 39 deletions(-)\n\n:+1:\n. Whoops, sorry about that. Fixed in 54f04e0.\n. @pitiphong-p Works for me :)\nJust merged in your code in d7c7209. I committed it with you as the author, if that's alright with you. Thanks so much for your help on all of this! Sorry I wasn't hitting the same problems myself while debugging\u2014I really need to come up with a more complex example to test against.\n. Thanks for your pull request, @xslim. There's a lot in here other than the foreign ID stuff, so it's going to take some time for me to determine what I should take from this. Bear with me for a moment.\n. No worries at all\u2014thanks for your contributions.\nAs it were, I just added Last-Modified support myself, with 40bee2dfe9324210ed42c89d96095c27097284a3. It takes a different approach from yours by managing Last-Modified in the same way as resource identifiers. Interested to hear any thoughts you have.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. Finally getting around to merging all of this. Thought this is a bit late, some notes about coding conventions:\n- For now, I'm trying to avoid usage of object literals in AFIncrementalStore itself, to maximize compatibility in the short term (a few people complained about it before).\n- There shouldn't be any whitespace padding inside curly brace code blocks.\n- NSCParameterAssert is specifically for C functions, NSParameterAssert is for methods.\nThanks again for your hard work. I'll be making my attempt to pull in as much as I can from your develop branch today and tomorrow.\n. Going commit-by-commit, I was able to cherry pick a majority of these changes. There were some things that I've held off on, like adding a dependency on RASchedulingKit, and externalizing private categories, but I think for the most part, I was able to pull in a lot of the nice improvements you made with respect to concurrency and robustness.\nThanks again!\n. @pitiphong-p I've read the release notes extensively and watched the WWDC sessions many times, but in my experience from developing this originally, I found that the child context was, in fact, not actually notifying its parent context of its saves. Now, this could have been caused by an entirely orthogonal mistake on my part, that has since been made moot. Either way, I'll have to test that everything is, in fact, working as advertised. I'd love nothing more than to be able to remove those notifications.\n. I not entirely sure about what's going on, but things don't work quite right without the notification stuff. Right now, the pattern looks like this:\nobjective-c\nid observer = [[NSNotificationCenter defaultCenter] addObserverForName:NSManagedObjectContextDidSaveNotification object:childContext queue:[NSOperationQueue mainQueue] usingBlock:^(NSNotification *note) {\n    [context mergeChangesFromContextDidSaveNotification:note];\n}];\n//...\n[[NSNotificationCenter defaultCenter] removeObserver:observer];\nIf I ever do figure out what's up, and it is indeed unnecessary, I'll gladly remove this.\n. Awesome\u2014I forgot about optional relationships. This has been merged in (with attribution) in 579ebb2. Thanks!\n. Thanks. I'm looking to remove that dependency soon, but in the meantime, it might as well be correct, right? :)\n. Interesting example\u2014thanks for sharing it.\nSo for APIs that have inconsistent formats, this method needs a way to determine what the \"meat\" of the response body is.\nWhen I designed this all, my thought was that you could determine this just from the response body itself. In this case, that would look like:\nobjective-c\nif ([responseBody valueForKey:@\"matches\"]) {\n  return [responseBody valueForKey:@\"matches\"];\n} else {\n  // ...\n}\nUsing the added operation would turn this into something like:\nobjective-c\nif ([[operation.request.URL lastPathComponent] isEqualToString:@\"search\"]) {\n  return [responseBody valueForKey:@\"matches\"];\n} else {\n  // ...\n}\nThat second example is inherently going to be more brittle, because now it's baking in an assumption of how the API is going to serve something. Not only that, it seems like it's generally more difficult to match the request rather than some element of the response.\nIt's hard to imagine too many cases where it would be nontrivial or impossible to determine what part(s) of a response object (is/are) the representation(s). \n\nFWIW, if it were somehow impossible (e.g. unpredictable keys), there would be the potential out of overriding the response object returned in the success block on a per-request basis in the HTTP client to turn the response object into something more reasonable.\n\nIf I were to add that field, I'm worried that it would just end up being more confusing than useful. Let me know how my suggested approach works for you; I can revisit this if it's found to be overly cumbersome.\nThanks, @lordkev\n. Thanks for your fix to Issue #76. I cherry-picked just those lines with attribution in 18805daac907ac498c6a23c1f25d3922623bca35.\nAs for the rest of the changes, I'm not the biggest fan of that approach. Necessary categories on Core Data classes goes down the path of API bloat and dependencies that plagues Core Data meta-frameworks. Communicating vital state through userInfo like this also feels somewhat fragile.\nAs far as conditionally triggering network requests for inserts / updates / deletes, I think the terms of that could just be determined based on whether the client implements the optional protocol methods (or returns non-nil request, even).\nBlock methods for context saving would be better than the current use of notifications. Someone recently suggested that I could accomplish this with a manager object that saves the context and listens for the relevant notifications, triggering the specified blocks when appropriate. Manager as an interface to blocks from notifications seems like the best pattern in this case.\nAnyway, thanks again for that one fix. I'll those aforementioned changes in soon.\n. Ah, yep. That's some unused code leftover from that refactoring. Thanks for sending that over.\n. As of 836875d717cc54f09155b9d92b4051d373d3c998, all of the child contexts are using private concurrency types. Thanks to @evadne for doing a lot of the legwork around that.\n. Yeah, I've been punting on the inflection stuff as I figure out the best way to go about that. My current plan is to create a new dependency to handle all of the inflection logic, which could then be used in other projects.\nThe intention was to cover a good portion of the cases with a simple algorithm, and have the option to override as necessary. If you don't mind waiting a day or two, I'll replace that with a more robust solution rather than patching the partial solution. Thanks!\n. I just pushed a commit (c8e10e5) that persists inserts / updates / deletes to the backing store if the corresponding request from the REST client is nil. In the case of inserted objects, the resource identifier is generated from a UUID. The next steps are to refactor this to remove the code duplication between the conditional and the block, and to make this work when the client simply does not respond to the method as well.\n. I like this a lot. Everything's merged in and looking great. Thanks!\n. Thanks for your pull request, @wtmoose. In the process of merging a batch of commits from an earlier patch, it seems like these issues have been addressed. Specifically, d497e3286ab6649fd6b90ba5418e31b6f8954acb fixes the backing object ID in the update / delete callback, cc6fc7eb76e07dc048cb86b849cf2eadefb51e04 fixes the typo with managed / backing objects, and 830def614c9823fadda99d7a2c6305897a95b1ce fixes the notification infinite loop.\nLet me know if there's anything missing from all of that.\n. I just merged in 3b8443fce24dc551d55f2513ed26c19fde99e9de and b421dd6660f590f8efabc3c51ed531e5234f371d, which pull in the changes from this pull request, adjusted to the changes I'd already made that prevented a direct merge.\nActually, having just revisited it, I'm coming around to the idea that the Last-Modified header may be better off going in directly, unparsed, into the backing store, rather than going through the hassle of converting back and forth (especially since all that's being done is adding it to the request header if present. Thoughts?\n. RFC conversion removed in 516617790223e946732e465a85b65a4babbe083c, which has the unfortunate side effect of causing incompatibility in model, as attribute type changed from date to string.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. It appears that almost the exact same thing has been merged in from Pull Request #87. From all I can tell about that implementation, only root objects are exposed in the fetched objects array--any relationships are keyed as properties. Cheers!\n. This has quite a few other changes in it, aside from not dispatching to main to deliver the notification. Can you explain those changes?\n. Thanks for the patch, @pitiphong-p. Unfortunately, since I took so long to get around to this one, this can't be merged cleanly. On the plus side, I think everything in here was added in some place or another. The latest version of AFIncrementalStore is significantly more stable that it was before. I'm excited to push out a new release soon.\n. Thanks @pitiphong-p  and @adamhowardprice  for your fixes on this patch. I merged this in with 10bb56948ea203f5a6882d75643ec57c4a800c20, which did a bit of refactoring & cleanup, ultimately renaming the method to -updateBackingObject:withAttributeAndRelationshipValuesFromManagedObject:.\n. I cherry-picked just the part about using the private queue concurrency type in 50edfc5. Thanks again for that.\n. Indeed, this was a typo from a merge I did on this (though I forget the exact one). Thanks for the patch, Cory.\n. Hi, @tsakoyan. Thanks for your pull request\u2014my apologies for taking so long to review it.\nI was hoping you could help clarify what this code fixes, and tell me a little more about what's going on in the code. There seems to be a lot of similar-looking code in -insertOrUpdateObjectsFromRepresentations:ofEntity:fromResponse:withContext:error:completionBlock:; is there any way that your patch could be refactored to use this function? Likewise with -updateBackingObject:withAttributeAndRelationshipValuesFromManagedObject:; is there any overlap there?\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. Thank you so much for the thoughtful pull request, @julienfantin. I hadn't realized that a NSSaveChangesRequest would have its object references removed as each one saves, although I guess that's actually a reasonably side-effect.\nI've merged this in with some an inline comment explaining what's going on.\nThere are a few things I'm worried about, but can respond to as they prove themselves out:\n- The cost of copying all of the objects. Could this ever become unreasonable to the point of affecting performance?\n- Whether there's any use in getting the resulting NSSaveChangesRequest, with all of the saved objects removed. If there are objects that aren't saved, do they stick around in the request?\nThose will be something to watch out for going forward, but for now, this seems like a reasonable and useful patch. Thanks again!\n. > When it's different it's different in a consistent way... the fetchLimit is fetchLimit+1.\nWell, you know what they say, there are two problems in programming: naming things, threading, and off-by-one errors.\nTotally bizarre, that.\nBut you're spot-on as far as the fetch request goes\u2014I totally missed that this was being passed further down the line. I'll merge that in now.\n. Thanks again for the patch!\nLet me know if you have any more leads on the bizarre off-by-one error. Just Core Data being cheeky, maybe?\n. Yep, a vestige of when it used SQLite. Thanks for the patch.\n. Indeed it is. I'll package all of the latest commits into a new tiny release now.\n. Dang, that typo again? I swear, I've probably gotten that wrong more than I got it right. Thanks for the pull request.\n. Looks good. Always glad to merge in documentation. Thanks, dude!\n. Glad to see that the solution was so straightforward. Thanks for sending this patch.\n. I'm a bit squeamish about automatically translating arbitrary integers to dates. If the server sent a number when a date was expected, there's almost certainly a problem somewhere along the line. It's not hard to imagine this leading to a weird class of error where dates from the server are inexplicably Jan 1, 1970, because it sent back a 0.\nAny update on the sub-entity patch?\n. Good call. Thanks so much for the patch, @zulfishah. Sorry it took so long to merge this in.\n. Great! I've seen other data providers adopt this convention, which makes this all-the-more applicable.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. Sorry for the delay. Thanks for sending the patch, @f1fe.\n. Cherry-picked lines to commit in 39e407a. Thanks for the patch!\n. Good call. Merged in 7b8c4de. Thanks!\n. This looks like a great patch, @alvinhu. Thanks so much, and apologies for taking so long to get around to taking a look at it.\nIf I'm not mistaken, wouldn't this logic be useful for the other fetch request result types as well? Would it make sense to put this outside the switch statement, and have all of that translated into the backing context?\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. Indeed, this is correct. Although unlikely, I added a check for representationOrArrayOfRepresentationsOfEntity to be an NSDictionary with 75923beb576d92055428aa4c30a851c5d0a3bebe. Cheers!\n. Merged! Tagging 0.4.1 with this now. Thanks, @jerryhjones!\n. Again, a flurry of recent changes made it impossible to merge directly, but 03fc331 is credited to you, and should make the same change. Thanks, @Metamogul!\n. Thanks for the patch, @marthinfreij. With all of the changes I've made recently, I wasn't able to merge this cleanly, but b6582bc is credited to you, and (should) have the equivalent diff. Cheers!\n. Sorry for taking so long to get around to this.\nHow do your changes to the __strong / __weak references relate to the changes made in #193? Is this ready to go, or did #193 address this?\n. Thanks, @jerryhjones.\n. Thanks for the fixes, @Metamogul. I've been working hard on AFIncrementalStore over the last couple of days, so I was only able to merge e9cbf6a, which I cherry-picked as a1bcc2ffa282d07b27393ec65df42b997e4fa1ed. Cheers!\n. Much obliged. Cheers, @dulaccc!\n. Thanks, @agassiyzh :+1: \n. Yikes. That's embarrassing. I'm definitely not the first, nor the last person to flip-flop an NSValueTransformer, but still... \nAnyway, thanks for the patch, @t089.\n. Thanks for the patch, @ric2z. FWIW, the version there is unnecessary (especially with the library not yet at 1.0), so I removed it outright with e7b6b05d239665b6b295c377bb5c496a5be64356.\n. Thanks for your patch, @MattNewberry. This is an interesting idea, but the implementation is rather brittle, since it relies on a specific predicate format pattern. My intention with the original design was for the user to implement this logic in the -requestForFetchRequest:withContext: method, using NSExpression to extract the necessary components and handle routing according the specific needs of the application.\nYours is a great example of how one might implement that, but it's a little too specific to be incorporated as a core feature.\n. @davidbitton It's pretty much copy-paste from one method into the other for your particular AFRESTClient subclass.\n. Thanks for the patch, @baarde. I'll be pushing a new bugfix release (0.5.1) shortly.\n. Actually, this is by design: an object cannot have a permanent ID until the server returns a resource identifier. I'm not entirely sure what the correct workaround is for webservices that send blank 201 responses, but I don't think this is it, unfortunately...\n. D'oh. :sweat:\nThanks, @jerryhjones.\n. This is great, @jerryhjones. It looks like I'll have to add logic for resetting ordered relations, but other than that, this is really helpful. Thanks!\n. Actually, scratch that\u2014I misunderstood the purpose of the isToMany check. Looks good!\n. Nice. Thanks for the patch, @baarde.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. Sorry for the delay in all of this. The podspec on CocoaPods/Specs & in this repo have been updated.\n. The podspec has been fixed by #236. An AFNetworking 2.0-compatible release is forthcoming.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. Great. Thanks!\n. Just ran into the same problem myself.\nApparently you need to specify the iOS version in the platform declaration:\nruby\nplatform :ios, '5.0'\nThat does the trick.\n. Ah, the 'old copy-paste error. How embarrassing for me! Thanks for the patch!\n. Excellent work. This goes to show the importance of developing against non-trivial examples (something which I've been admittedly slow in doing this time, so I appreciate your working through this). Thanks so much for the patch\u2014this has all been merged into master as of 788c5e5c256ee0a6522915f25e29717f63349d5b.\n. Heh, sure enough... Thanks for the patch, @dismory.\n. Ah, right you are. Thanks for the patch, @bjtitus!\n. Ah, good call. I've added this in acccc43. Thanks!\n. Hmm... I'm not particularly keen on adding things to .gitignore that should be in a global .gitignore in the first place. I've been holding out on AFNetworking for a year and a half now, so if nothing else, I'm stubborn about it, too.\n. Hey, thanks so much for submitting your documentation\u2014I really appreciate it. I took that as a long-needed kick-in-the-ass to give it some proper documentation, which is now in there as of 1171474a48f3e61afcf16d47295487939750ca78.\nTake a look at the way everything is formatted in my patch; you may want to use that as a starting point for any more docs you write. I'm following Apple's conventions for style, content, and formatting, which seems to be pretty comprehensive for how exhausting it is to write in the first place. Either way, documentation generally goes in the interface (.h), rather than in the implementation, which may contain some inline comments to clarify complicated codes.\nThanks again!\n. Ah, this is correct. I think I only re-realized the distinction between properties and attributes halfway through my original implementation, so there are a few lingering references to properties where I really mean attributes. Anyway, thanks.\n. Wait, no, this is incorrect. These properties are then used in representationsForRelationshipsFromRepresentation:ofEntity:fromResponse:. We need those in there. Reverting.\n. Apologies for taking so long to respond to your pull request.\nI just merged 96101a6 into master. See Issue #46 for the full discussion, but my approach was to use notifications to communicate all of the context necessary to do things like update activity indicators, or alert users about errors.\nA AFIncrementalStoreContextDidFetchRemoteValues notification will contain the associated HTTP request operation at AFIncrementalStoreRequestOperationKey. If it failed for some reason, its error field will be non-nil.\nI hope this approach works alright for you. Thanks again for your patch.\n. I'm embarrassed to admit that I only recently realized that UIWindow rootViewController was a thing. Goes to show how long I've been out of the iOS development loop.\nI cherry-picked all but the .gitignore commit. Thanks!\n. Core Data should do that automatically, but it didn't without doing this manually. Unless I'm mistaken. Can you check your change against the example projects to see if everything functions as expected?\n. Cool cool. Thanks again for that. This is all starting to come together, I think.\nI think I've reached a breakthrough as far as write operations, so I hope to push something for that in the next day or two.\n. I'm certain that discovering things that work for entirely the wrong reason doesn't exactly inspire confidence, but thanks all the same for the patch, Ben. I've merged it in 05f4f2a.\n. Thank you for this. I really appreciate it!\n. I dig it. Thanks so much for following up on that\u2014I really appreciate it.\n. Thanks for the pull request. I merged in all but the .gitignore, for reasons explained in Issues #30 and #23. Cheers!\n. That's a great idea. Thanks for the patch, Kevin! \n. I thought I'd made that change myself in an earlier commit, but it seems that it didn't go through. Thanks all the same, @lottadot\u2014I appreciate it.\n. Thanks for the pull request, @pitiphong-p. Correct me if I'm wrong, but it seems that this approach would only support 2 levels deep, no? \nA recursive solution would support any arbitrary depth, and even help to break up the wall of code in that method now. I've implemented that in 8743ea97c2599ee7edb1c2e1023218cf2583dcda ... e487c6a.\nLet me know how that works for you. Cheers!\n. Heh, almost forgot that one. Added in 34815bb.\n\n1 files changed, 5 insertions(+), 39 deletions(-)\n\n:+1:\n. Whoops, sorry about that. Fixed in 54f04e0.\n. @pitiphong-p Works for me :)\nJust merged in your code in d7c7209. I committed it with you as the author, if that's alright with you. Thanks so much for your help on all of this! Sorry I wasn't hitting the same problems myself while debugging\u2014I really need to come up with a more complex example to test against.\n. Thanks for your pull request, @xslim. There's a lot in here other than the foreign ID stuff, so it's going to take some time for me to determine what I should take from this. Bear with me for a moment.\n. No worries at all\u2014thanks for your contributions.\nAs it were, I just added Last-Modified support myself, with 40bee2dfe9324210ed42c89d96095c27097284a3. It takes a different approach from yours by managing Last-Modified in the same way as resource identifiers. Interested to hear any thoughts you have.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. Finally getting around to merging all of this. Thought this is a bit late, some notes about coding conventions:\n- For now, I'm trying to avoid usage of object literals in AFIncrementalStore itself, to maximize compatibility in the short term (a few people complained about it before).\n- There shouldn't be any whitespace padding inside curly brace code blocks.\n- NSCParameterAssert is specifically for C functions, NSParameterAssert is for methods.\nThanks again for your hard work. I'll be making my attempt to pull in as much as I can from your develop branch today and tomorrow.\n. Going commit-by-commit, I was able to cherry pick a majority of these changes. There were some things that I've held off on, like adding a dependency on RASchedulingKit, and externalizing private categories, but I think for the most part, I was able to pull in a lot of the nice improvements you made with respect to concurrency and robustness.\nThanks again!\n. @pitiphong-p I've read the release notes extensively and watched the WWDC sessions many times, but in my experience from developing this originally, I found that the child context was, in fact, not actually notifying its parent context of its saves. Now, this could have been caused by an entirely orthogonal mistake on my part, that has since been made moot. Either way, I'll have to test that everything is, in fact, working as advertised. I'd love nothing more than to be able to remove those notifications.\n. I not entirely sure about what's going on, but things don't work quite right without the notification stuff. Right now, the pattern looks like this:\nobjective-c\nid observer = [[NSNotificationCenter defaultCenter] addObserverForName:NSManagedObjectContextDidSaveNotification object:childContext queue:[NSOperationQueue mainQueue] usingBlock:^(NSNotification *note) {\n    [context mergeChangesFromContextDidSaveNotification:note];\n}];\n//...\n[[NSNotificationCenter defaultCenter] removeObserver:observer];\nIf I ever do figure out what's up, and it is indeed unnecessary, I'll gladly remove this.\n. Awesome\u2014I forgot about optional relationships. This has been merged in (with attribution) in 579ebb2. Thanks!\n. Thanks. I'm looking to remove that dependency soon, but in the meantime, it might as well be correct, right? :)\n. Interesting example\u2014thanks for sharing it.\nSo for APIs that have inconsistent formats, this method needs a way to determine what the \"meat\" of the response body is.\nWhen I designed this all, my thought was that you could determine this just from the response body itself. In this case, that would look like:\nobjective-c\nif ([responseBody valueForKey:@\"matches\"]) {\n  return [responseBody valueForKey:@\"matches\"];\n} else {\n  // ...\n}\nUsing the added operation would turn this into something like:\nobjective-c\nif ([[operation.request.URL lastPathComponent] isEqualToString:@\"search\"]) {\n  return [responseBody valueForKey:@\"matches\"];\n} else {\n  // ...\n}\nThat second example is inherently going to be more brittle, because now it's baking in an assumption of how the API is going to serve something. Not only that, it seems like it's generally more difficult to match the request rather than some element of the response.\nIt's hard to imagine too many cases where it would be nontrivial or impossible to determine what part(s) of a response object (is/are) the representation(s). \n\nFWIW, if it were somehow impossible (e.g. unpredictable keys), there would be the potential out of overriding the response object returned in the success block on a per-request basis in the HTTP client to turn the response object into something more reasonable.\n\nIf I were to add that field, I'm worried that it would just end up being more confusing than useful. Let me know how my suggested approach works for you; I can revisit this if it's found to be overly cumbersome.\nThanks, @lordkev\n. Thanks for your fix to Issue #76. I cherry-picked just those lines with attribution in 18805daac907ac498c6a23c1f25d3922623bca35.\nAs for the rest of the changes, I'm not the biggest fan of that approach. Necessary categories on Core Data classes goes down the path of API bloat and dependencies that plagues Core Data meta-frameworks. Communicating vital state through userInfo like this also feels somewhat fragile.\nAs far as conditionally triggering network requests for inserts / updates / deletes, I think the terms of that could just be determined based on whether the client implements the optional protocol methods (or returns non-nil request, even).\nBlock methods for context saving would be better than the current use of notifications. Someone recently suggested that I could accomplish this with a manager object that saves the context and listens for the relevant notifications, triggering the specified blocks when appropriate. Manager as an interface to blocks from notifications seems like the best pattern in this case.\nAnyway, thanks again for that one fix. I'll those aforementioned changes in soon.\n. Ah, yep. That's some unused code leftover from that refactoring. Thanks for sending that over.\n. As of 836875d717cc54f09155b9d92b4051d373d3c998, all of the child contexts are using private concurrency types. Thanks to @evadne for doing a lot of the legwork around that.\n. Yeah, I've been punting on the inflection stuff as I figure out the best way to go about that. My current plan is to create a new dependency to handle all of the inflection logic, which could then be used in other projects.\nThe intention was to cover a good portion of the cases with a simple algorithm, and have the option to override as necessary. If you don't mind waiting a day or two, I'll replace that with a more robust solution rather than patching the partial solution. Thanks!\n. I just pushed a commit (c8e10e5) that persists inserts / updates / deletes to the backing store if the corresponding request from the REST client is nil. In the case of inserted objects, the resource identifier is generated from a UUID. The next steps are to refactor this to remove the code duplication between the conditional and the block, and to make this work when the client simply does not respond to the method as well.\n. I like this a lot. Everything's merged in and looking great. Thanks!\n. Thanks for your pull request, @wtmoose. In the process of merging a batch of commits from an earlier patch, it seems like these issues have been addressed. Specifically, d497e3286ab6649fd6b90ba5418e31b6f8954acb fixes the backing object ID in the update / delete callback, cc6fc7eb76e07dc048cb86b849cf2eadefb51e04 fixes the typo with managed / backing objects, and 830def614c9823fadda99d7a2c6305897a95b1ce fixes the notification infinite loop.\nLet me know if there's anything missing from all of that.\n. I just merged in 3b8443fce24dc551d55f2513ed26c19fde99e9de and b421dd6660f590f8efabc3c51ed531e5234f371d, which pull in the changes from this pull request, adjusted to the changes I'd already made that prevented a direct merge.\nActually, having just revisited it, I'm coming around to the idea that the Last-Modified header may be better off going in directly, unparsed, into the backing store, rather than going through the hassle of converting back and forth (especially since all that's being done is adding it to the request header if present. Thoughts?\n. RFC conversion removed in 516617790223e946732e465a85b65a4babbe083c, which has the unfortunate side effect of causing incompatibility in model, as attribute type changed from date to string.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. It appears that almost the exact same thing has been merged in from Pull Request #87. From all I can tell about that implementation, only root objects are exposed in the fetched objects array--any relationships are keyed as properties. Cheers!\n. This has quite a few other changes in it, aside from not dispatching to main to deliver the notification. Can you explain those changes?\n. Thanks for the patch, @pitiphong-p. Unfortunately, since I took so long to get around to this one, this can't be merged cleanly. On the plus side, I think everything in here was added in some place or another. The latest version of AFIncrementalStore is significantly more stable that it was before. I'm excited to push out a new release soon.\n. Thanks @pitiphong-p  and @adamhowardprice  for your fixes on this patch. I merged this in with 10bb56948ea203f5a6882d75643ec57c4a800c20, which did a bit of refactoring & cleanup, ultimately renaming the method to -updateBackingObject:withAttributeAndRelationshipValuesFromManagedObject:.\n. I cherry-picked just the part about using the private queue concurrency type in 50edfc5. Thanks again for that.\n. Indeed, this was a typo from a merge I did on this (though I forget the exact one). Thanks for the patch, Cory.\n. Hi, @tsakoyan. Thanks for your pull request\u2014my apologies for taking so long to review it.\nI was hoping you could help clarify what this code fixes, and tell me a little more about what's going on in the code. There seems to be a lot of similar-looking code in -insertOrUpdateObjectsFromRepresentations:ofEntity:fromResponse:withContext:error:completionBlock:; is there any way that your patch could be refactored to use this function? Likewise with -updateBackingObject:withAttributeAndRelationshipValuesFromManagedObject:; is there any overlap there?\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. Thank you so much for the thoughtful pull request, @julienfantin. I hadn't realized that a NSSaveChangesRequest would have its object references removed as each one saves, although I guess that's actually a reasonably side-effect.\nI've merged this in with some an inline comment explaining what's going on.\nThere are a few things I'm worried about, but can respond to as they prove themselves out:\n- The cost of copying all of the objects. Could this ever become unreasonable to the point of affecting performance?\n- Whether there's any use in getting the resulting NSSaveChangesRequest, with all of the saved objects removed. If there are objects that aren't saved, do they stick around in the request?\nThose will be something to watch out for going forward, but for now, this seems like a reasonable and useful patch. Thanks again!\n. > When it's different it's different in a consistent way... the fetchLimit is fetchLimit+1.\nWell, you know what they say, there are two problems in programming: naming things, threading, and off-by-one errors.\nTotally bizarre, that.\nBut you're spot-on as far as the fetch request goes\u2014I totally missed that this was being passed further down the line. I'll merge that in now.\n. Thanks again for the patch!\nLet me know if you have any more leads on the bizarre off-by-one error. Just Core Data being cheeky, maybe?\n. Yep, a vestige of when it used SQLite. Thanks for the patch.\n. Indeed it is. I'll package all of the latest commits into a new tiny release now.\n. Dang, that typo again? I swear, I've probably gotten that wrong more than I got it right. Thanks for the pull request.\n. Looks good. Always glad to merge in documentation. Thanks, dude!\n. Glad to see that the solution was so straightforward. Thanks for sending this patch.\n. I'm a bit squeamish about automatically translating arbitrary integers to dates. If the server sent a number when a date was expected, there's almost certainly a problem somewhere along the line. It's not hard to imagine this leading to a weird class of error where dates from the server are inexplicably Jan 1, 1970, because it sent back a 0.\nAny update on the sub-entity patch?\n. Good call. Thanks so much for the patch, @zulfishah. Sorry it took so long to merge this in.\n. Great! I've seen other data providers adopt this convention, which makes this all-the-more applicable.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. Sorry for the delay. Thanks for sending the patch, @f1fe.\n. Cherry-picked lines to commit in 39e407a. Thanks for the patch!\n. Good call. Merged in 7b8c4de. Thanks!\n. This looks like a great patch, @alvinhu. Thanks so much, and apologies for taking so long to get around to taking a look at it.\nIf I'm not mistaken, wouldn't this logic be useful for the other fetch request result types as well? Would it make sense to put this outside the switch statement, and have all of that translated into the backing context?\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. Indeed, this is correct. Although unlikely, I added a check for representationOrArrayOfRepresentationsOfEntity to be an NSDictionary with 75923beb576d92055428aa4c30a851c5d0a3bebe. Cheers!\n. Merged! Tagging 0.4.1 with this now. Thanks, @jerryhjones!\n. Again, a flurry of recent changes made it impossible to merge directly, but 03fc331 is credited to you, and should make the same change. Thanks, @Metamogul!\n. Thanks for the patch, @marthinfreij. With all of the changes I've made recently, I wasn't able to merge this cleanly, but b6582bc is credited to you, and (should) have the equivalent diff. Cheers!\n. Sorry for taking so long to get around to this.\nHow do your changes to the __strong / __weak references relate to the changes made in #193? Is this ready to go, or did #193 address this?\n. Thanks, @jerryhjones.\n. Thanks for the fixes, @Metamogul. I've been working hard on AFIncrementalStore over the last couple of days, so I was only able to merge e9cbf6a, which I cherry-picked as a1bcc2ffa282d07b27393ec65df42b997e4fa1ed. Cheers!\n. Much obliged. Cheers, @dulaccc!\n. Thanks, @agassiyzh :+1: \n. Yikes. That's embarrassing. I'm definitely not the first, nor the last person to flip-flop an NSValueTransformer, but still... \nAnyway, thanks for the patch, @t089.\n. Thanks for the patch, @ric2z. FWIW, the version there is unnecessary (especially with the library not yet at 1.0), so I removed it outright with e7b6b05d239665b6b295c377bb5c496a5be64356.\n. Thanks for your patch, @MattNewberry. This is an interesting idea, but the implementation is rather brittle, since it relies on a specific predicate format pattern. My intention with the original design was for the user to implement this logic in the -requestForFetchRequest:withContext: method, using NSExpression to extract the necessary components and handle routing according the specific needs of the application.\nYours is a great example of how one might implement that, but it's a little too specific to be incorporated as a core feature.\n. @davidbitton It's pretty much copy-paste from one method into the other for your particular AFRESTClient subclass.\n. Thanks for the patch, @baarde. I'll be pushing a new bugfix release (0.5.1) shortly.\n. Actually, this is by design: an object cannot have a permanent ID until the server returns a resource identifier. I'm not entirely sure what the correct workaround is for webservices that send blank 201 responses, but I don't think this is it, unfortunately...\n. D'oh. :sweat:\nThanks, @jerryhjones.\n. This is great, @jerryhjones. It looks like I'll have to add logic for resetting ordered relations, but other than that, this is really helpful. Thanks!\n. Actually, scratch that\u2014I misunderstood the purpose of the isToMany check. Looks good!\n. Nice. Thanks for the patch, @baarde.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. Sorry for the delay in all of this. The podspec on CocoaPods/Specs & in this repo have been updated.\n. The podspec has been fixed by #236. An AFNetworking 2.0-compatible release is forthcoming.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. As of e8c6472bf42f763d77e5c5ca584099abd555f906, AFIncrementalStore is no longer being actively maintained. Thank you for your contributions; my sincere apologies for any inconvenience this may have caused.\n. ",
    "asmallteapot": "(Sorry for the closing/opening/comment noise. I don\u2019t really know how computers work.)\nI\u2019m getting the following error with the pod requirement I added in this pull request:\n[!] AFIncrementalStore (0.0.1) is not compatible with iOS 4.3.\nMy project\u2019s Base SDK and Deployment Target are both 5.1. Grepping the Xcode project file for \"4.3\" returns nothing. The podspec in AFIncrementalStore doesn't seem to be causing the problem, either. Any ideas?\n. (Sorry for the closing/opening/comment noise. I don\u2019t really know how computers work.)\nI\u2019m getting the following error with the pod requirement I added in this pull request:\n[!] AFIncrementalStore (0.0.1) is not compatible with iOS 4.3.\nMy project\u2019s Base SDK and Deployment Target are both 5.1. Grepping the Xcode project file for \"4.3\" returns nothing. The podspec in AFIncrementalStore doesn't seem to be causing the problem, either. Any ideas?\n. ",
    "ghost": "I seem to have the similar problem now. My UI thread is unresponsive, when I execute the fetch request and when it finishes pulling it is again fine. I am using the latest version of AFIncrementalStore. \n. I seem to have the similar problem now. My UI thread is unresponsive, when I execute the fetch request and when it finishes pulling it is again fine. I am using the latest version of AFIncrementalStore. \n. ",
    "cmezak": "Same situation as insane-36.\n. Same situation as insane-36.\n. ",
    "JeanetteMueller": "Same Problems here. \n. Same Problems here. \n. ",
    "MrMaksimize": "@mattt Awesome thanks man! And thanks for the tips!  I've never really written documentation for this stuff before so that helps.  Thanks so much!  And thank you thank you thank you for adding the docs :)\n. @mattt Awesome thanks man! And thanks for the tips!  I've never really written documentation for this stuff before so that helps.  Thanks so much!  And thank you thank you thank you for adding the docs :)\n. ",
    "achainan": "thought this would be useful for error handling. any suggestions? thanks. cc @mattt \n. thought this would be useful for error handling. any suggestions? thanks. cc @mattt \n. ",
    "matthiasplappert": "I'd rather use blocks for that. Your code makes it impossible to distinguish between different sources of the error and only allows a very generic handling of errors. I think the main issue with AFIS is that Core Data is designed for synchronous requests whereas networking requires asynchronous requests.\n. I'd rather use blocks for that. Your code makes it impossible to distinguish between different sources of the error and only allows a very generic handling of errors. I think the main issue with AFIS is that Core Data is designed for synchronous requests whereas networking requires asynchronous requests.\n. ",
    "soffes": "My apologies for not using branches. There are some more commits that got added into this pull request than I originally intended. That said, I think you should merge them :)\n. My apologies for not using branches. There are some more commits that got added into this pull request than I originally intended. That said, I think you should merge them :)\n. ",
    "followben": "Apols for the master/ master faux pas Mattt - I'll ensure all future remote changes and/ or pull reqs are in a topic branch.\n. Closing this one as I've created a new PR pointing at a topic branch (#36)\n. Hey @matt - indeed, I rechecked both the basic and twitter example projects this morning on this branch, and they're both working as expected :)\n. Nice one, @mattt. First release of the app I'm using AFIS in is only pulling back info from a REST API. Next phase will have a whole bunch of POSTs and PUTs though, so looking forward to seeing what you have in mind :)\n. Apols for the master/ master faux pas Mattt - I'll ensure all future remote changes and/ or pull reqs are in a topic branch.\n. Closing this one as I've created a new PR pointing at a topic branch (#36)\n. Hey @matt - indeed, I rechecked both the basic and twitter example projects this morning on this branch, and they're both working as expected :)\n. Nice one, @mattt. First release of the app I'm using AFIS in is only pulling back info from a REST API. Next phase will have a whole bunch of POSTs and PUTs though, so looking forward to seeing what you have in mind :)\n. ",
    "lordkev": "Missed the open issue on this: AFNetworking/AFIncrementalStore#38\nClosing this as a dupe.\n. Yeah, after contemplating it some more I think that you're right. For the vast majority of cases, I think the pattern you described should work just fine.\nThe only case I could think of that would be tough is if the response to two different calls looked similar (or both had at least one key in common), but you wanted to use different portions of each for the representation(s). However, this is probably a pretty remote edge case, and your alternative solution of overriding the response object should work there.\nI'll move forward examining the response objects, but I'll let you know if I run into any issues.\nThanks!\n. Thanks for this. I was having issues with a NSFetchedResultsController and the UI not responding when performing large fetches. This seems to have largely solved it.\n. Missed the open issue on this: AFNetworking/AFIncrementalStore#38\nClosing this as a dupe.\n. Yeah, after contemplating it some more I think that you're right. For the vast majority of cases, I think the pattern you described should work just fine.\nThe only case I could think of that would be tough is if the response to two different calls looked similar (or both had at least one key in common), but you wanted to use different portions of each for the representation(s). However, this is probably a pretty remote edge case, and your alternative solution of overriding the response object should work there.\nI'll move forward examining the response objects, but I'll let you know if I run into any issues.\nThanks!\n. Thanks for this. I was having issues with a NSFetchedResultsController and the UI not responding when performing large fetches. This seems to have largely solved it.\n. ",
    "ErikEvenson": "Gosh, thanks for this.  This fixes a bug that I've been wrestling with for hours.\n. That's a good point on the global .gitignore.  I'll have to incorporate that approach in my projects.\n. Gosh, thanks for this.  This fixes a bug that I've been wrestling with for hours.\n. That's a good point on the global .gitignore.  I'll have to incorporate that approach in my projects.\n. ",
    "pitiphong-p": "Yes you're right, mine approach support only 2 levels deep.\nYour recursive solution is not work for me. \n- (id)newValueForRelationship:(NSRelationshipDescription *)relationship\n              forObjectWithID:(NSManagedObjectID *)objectID\n                  withContext:(NSManagedObjectContext *)context\n                        error:(NSError *__autoreleasing *)error\nThis method is still not using your approach right?\n. I use the new \n- (void)insertOrUpdateObjectsFromRepresentations:(id)representationOrArrayOfRepresentations\n                                        ofEntity:(NSEntityDescription *)entity\n                                    fromResponse:(NSHTTPURLResponse *)response\n                                     withContext:(NSManagedObjectContext *)context\n                                           error:(NSError *__autoreleasing *)error\n                                 completionBlock:(void (^)(NSArray *managedObjects, NSArray *backingObjects))completionBlock\nin \n- (id)newValueForRelationship:(NSRelationshipDescription *)relationship\n              forObjectWithID:(NSManagedObjectID *)objectID\n                  withContext:(NSManagedObjectContext *)context\n                        error:(NSError *__autoreleasing *)error\nand it fixed my problem, also works for me too.\nShould I send you pull request?\nPS. Thanks for your great work on this project. I choose it in my new project too. :)\n. Oh just saw your commit.\nWell it doesn't work I need to add \n```\n                        NSManagedObjectContext *backingContext = [self backingManagedObjectContext];\n                    NSManagedObject *managedObject = [childContext objectWithID:objectID];\n                    NSManagedObject *backingObject = [backingContext existingObjectWithID:objectID error:nil];\n                    if ([relationship isToMany]) {\n                        if ([relationship isOrdered]) {\n                            [managedObject setValue:[NSOrderedSet orderedSetWithArray:managedObjects] forKey:relationship.name];\n                            [backingObject setValue:[NSOrderedSet orderedSetWithArray:managedObjects] forKey:relationship.name];\n                        } else {\n                            [managedObject setValue:[NSSet setWithArray:managedObjects] forKey:relationship.name];\n                            [backingObject setValue:[NSSet setWithArray:managedObjects] forKey:relationship.name];\n                        }\n                    } else {\n                        [managedObject setValue:[managedObjects lastObject] forKey:relationship.name];\n                        [backingObject setValue:[backingObjects lastObject] forKey:relationship.name];\n                    }\n\n```\nin the insertOrUpdate.. method completion block.\nYour current implementation is just fetch and insert to the context. But not set the relationship back after inserted. So I had to manually set it back to the managed object.\nAny idea?\n. Oh I found that current implementation is crash my program\nI think you should use relationship.destinationEntity in ofEntity: argument?\n. Thanks :)\nWhat's about the other problem?\nI'm not sure that my solution is good enough.\n. WOWWW That's great!\nThank you for your great work :)\n. Well, I removed it and it work properly on my app.\nAnyway you still have to remove observer returned from the addObserverForName:object:queue:usingBlock: right?\n. It has the problem with backing context now. I'm looking for nit now\n. It's seem to work properly now :)\n. Well there are relationship values is disappear form from backing store in some case. I'm investingating on it now. Hope can fixed in soon.\n. It's seem to work properly now.\nIf you find problem please tell me :)\n. I sort the fetched objects with the fetch request's sort descriptors in 862b4c7\n. Others changes is for handling the invalid (nil) request. So it's not quite related to the issue. Sorry for unrelated codes.\n. The Managed Objects is not thread safe so I think we should post notification on the operating thread. And in the NSNotificationCenter we can specify the operation queue to handling the notification in \n- (id)addObserverForName:(NSString *)name object:(id)obj queue:(NSOperationQueue *)queue usingBlock:(void (^)(NSNotification *))block\nwhich I think it's cleaner than always post the notification on the main queue.\n. Thank you @conradev for the point.\nUpdate the code in 1bbca5b8708194d62f8eb8ff2c545a61e1421e75\n. Yes you're right, mine approach support only 2 levels deep.\nYour recursive solution is not work for me. \n- (id)newValueForRelationship:(NSRelationshipDescription *)relationship\n              forObjectWithID:(NSManagedObjectID *)objectID\n                  withContext:(NSManagedObjectContext *)context\n                        error:(NSError *__autoreleasing *)error\nThis method is still not using your approach right?\n. I use the new \n- (void)insertOrUpdateObjectsFromRepresentations:(id)representationOrArrayOfRepresentations\n                                        ofEntity:(NSEntityDescription *)entity\n                                    fromResponse:(NSHTTPURLResponse *)response\n                                     withContext:(NSManagedObjectContext *)context\n                                           error:(NSError *__autoreleasing *)error\n                                 completionBlock:(void (^)(NSArray *managedObjects, NSArray *backingObjects))completionBlock\nin \n- (id)newValueForRelationship:(NSRelationshipDescription *)relationship\n              forObjectWithID:(NSManagedObjectID *)objectID\n                  withContext:(NSManagedObjectContext *)context\n                        error:(NSError *__autoreleasing *)error\nand it fixed my problem, also works for me too.\nShould I send you pull request?\nPS. Thanks for your great work on this project. I choose it in my new project too. :)\n. Oh just saw your commit.\nWell it doesn't work I need to add \n```\n                        NSManagedObjectContext *backingContext = [self backingManagedObjectContext];\n                    NSManagedObject *managedObject = [childContext objectWithID:objectID];\n                    NSManagedObject *backingObject = [backingContext existingObjectWithID:objectID error:nil];\n                    if ([relationship isToMany]) {\n                        if ([relationship isOrdered]) {\n                            [managedObject setValue:[NSOrderedSet orderedSetWithArray:managedObjects] forKey:relationship.name];\n                            [backingObject setValue:[NSOrderedSet orderedSetWithArray:managedObjects] forKey:relationship.name];\n                        } else {\n                            [managedObject setValue:[NSSet setWithArray:managedObjects] forKey:relationship.name];\n                            [backingObject setValue:[NSSet setWithArray:managedObjects] forKey:relationship.name];\n                        }\n                    } else {\n                        [managedObject setValue:[managedObjects lastObject] forKey:relationship.name];\n                        [backingObject setValue:[backingObjects lastObject] forKey:relationship.name];\n                    }\n\n```\nin the insertOrUpdate.. method completion block.\nYour current implementation is just fetch and insert to the context. But not set the relationship back after inserted. So I had to manually set it back to the managed object.\nAny idea?\n. Oh I found that current implementation is crash my program\nI think you should use relationship.destinationEntity in ofEntity: argument?\n. Thanks :)\nWhat's about the other problem?\nI'm not sure that my solution is good enough.\n. WOWWW That's great!\nThank you for your great work :)\n. Well, I removed it and it work properly on my app.\nAnyway you still have to remove observer returned from the addObserverForName:object:queue:usingBlock: right?\n. It has the problem with backing context now. I'm looking for nit now\n. It's seem to work properly now :)\n. Well there are relationship values is disappear form from backing store in some case. I'm investingating on it now. Hope can fixed in soon.\n. It's seem to work properly now.\nIf you find problem please tell me :)\n. I sort the fetched objects with the fetch request's sort descriptors in 862b4c7\n. Others changes is for handling the invalid (nil) request. So it's not quite related to the issue. Sorry for unrelated codes.\n. The Managed Objects is not thread safe so I think we should post notification on the operating thread. And in the NSNotificationCenter we can specify the operation queue to handling the notification in \n- (id)addObserverForName:(NSString *)name object:(id)obj queue:(NSOperationQueue *)queue usingBlock:(void (^)(NSNotification *))block\nwhich I think it's cleaner than always post the notification on the main queue.\n. Thank you @conradev for the point.\nUpdate the code in 1bbca5b8708194d62f8eb8ff2c545a61e1421e75\n. ",
    "xslim": "Sorry for a lot of commits, I'm trying to use the library in current app development, and I stuccoed with the problem of entities are not saved in DB. So some of the commits are fixing this issue.\n. Also I've made implementation for sending If-Modified-Since and working with 304 Not Modified\u2026 but this work is currently in my gist https://gist.github.com/3855430\nIf you have any comments how to improve the code for pull request - please tell me I'll do that.\n. You developed Last-Modified for \"per-resource request\"\nWhat I did in my gist, is developed Last-modified when requesting \"array\" of items.\nThe example implementation on rails side is\n``` ruby\nAreasController\ndef index\n    @areas = parent.areas\n    if stale?(last_modified: @areas.max(:updated_at))\n      respond_with @areas\n    end\n  end\n```\nSo I get the last modified area in database, and send this info to server. Server checks it against his DB and returns just :304 if nothing changed, or :200 with the list of areas if there were changes. This saves bandwidth.\n. https://github.com/xslim/AFIncrementalStore/commit/06041256e5c76190fba714f4b6d8a4c2aff8c180 prevents crashing when server sends 304 Not-Modified and empty data in success.\nTo make 304 a success response I also added this code in APIClient subclass\nobj-c\n// 304 Not-Modified\n[AFJSONRequestOperation addAcceptableStatusCodes:[NSIndexSet indexSetWithIndex:304]];\n. Should I change my pull request to reflect your latest commits?\n. Sorry for a lot of commits, I'm trying to use the library in current app development, and I stuccoed with the problem of entities are not saved in DB. So some of the commits are fixing this issue.\n. Also I've made implementation for sending If-Modified-Since and working with 304 Not Modified\u2026 but this work is currently in my gist https://gist.github.com/3855430\nIf you have any comments how to improve the code for pull request - please tell me I'll do that.\n. You developed Last-Modified for \"per-resource request\"\nWhat I did in my gist, is developed Last-modified when requesting \"array\" of items.\nThe example implementation on rails side is\n``` ruby\nAreasController\ndef index\n    @areas = parent.areas\n    if stale?(last_modified: @areas.max(:updated_at))\n      respond_with @areas\n    end\n  end\n```\nSo I get the last modified area in database, and send this info to server. Server checks it against his DB and returns just :304 if nothing changed, or :200 with the list of areas if there were changes. This saves bandwidth.\n. https://github.com/xslim/AFIncrementalStore/commit/06041256e5c76190fba714f4b6d8a4c2aff8c180 prevents crashing when server sends 304 Not-Modified and empty data in success.\nTo make 304 a success response I also added this code in APIClient subclass\nobj-c\n// 304 Not-Modified\n[AFJSONRequestOperation addAcceptableStatusCodes:[NSIndexSet indexSetWithIndex:304]];\n. Should I change my pull request to reflect your latest commits?\n. ",
    "evadne": "Using NSCParameterAssert avoids keeping a strong reference to self, check\nthe expansion ;)\nWe can really use an uncrustify style sheet that we run before each merge.\nThere is a fixing-child branch we are using right now which is more solid,\nI will try to get it back to develop soon.\n- *\nOn Nov 1, 2012, at 9:32, Mattt Thompson notifications@github.com wrote:\nFinally getting around to merging all of this. Thought this is a bit late,\nsome notes about coding conventions:\n- For now, I'm trying to avoid usage of object literals in\n  AFIncrementalStore itself, to maximize compatibility in the short term (a\n  few people complained about it before).\n- There shouldn't be any whitespace padding inside curly brace code\n  blocks.\n- NSCParameterAssert is specifically for C functions,\n  NSParameterAssertis for methods.\nThanks again for your hard work. I'll be making my attempt to pull in as\nmuch as I can from your develop branch today and tomorrow.\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/AFNetworking/AFIncrementalStore/pull/66#issuecomment-9986443.\n. Great to hear.  I\u2019m holding off any more integration work on the incremental store for now before we ship the product which is dependent on it, and will be glad to help with further integration later on.  RASchedulingKit is only there to provide concurrency constructs, and it is really small enough to be copied into the incremental store.\nWorking out of commit 086835e649db8df7c11b8c71f01c9f9493c2df8e for now.\n. Note: please review 086835e when you\u2019re at it since it has some more changes, including some race condition fixes and more unnecessary code removal.\n. Using NSCParameterAssert avoids keeping a strong reference to self, check\nthe expansion ;)\nWe can really use an uncrustify style sheet that we run before each merge.\nThere is a fixing-child branch we are using right now which is more solid,\nI will try to get it back to develop soon.\n- *\nOn Nov 1, 2012, at 9:32, Mattt Thompson notifications@github.com wrote:\nFinally getting around to merging all of this. Thought this is a bit late,\nsome notes about coding conventions:\n- For now, I'm trying to avoid usage of object literals in\n  AFIncrementalStore itself, to maximize compatibility in the short term (a\n  few people complained about it before).\n- There shouldn't be any whitespace padding inside curly brace code\n  blocks.\n- NSCParameterAssert is specifically for C functions,\n  NSParameterAssertis for methods.\nThanks again for your hard work. I'll be making my attempt to pull in as\nmuch as I can from your develop branch today and tomorrow.\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/AFNetworking/AFIncrementalStore/pull/66#issuecomment-9986443.\n. Great to hear.  I\u2019m holding off any more integration work on the incremental store for now before we ship the product which is dependent on it, and will be glad to help with further integration later on.  RASchedulingKit is only there to provide concurrency constructs, and it is really small enough to be copied into the incremental store.\nWorking out of commit 086835e649db8df7c11b8c71f01c9f9493c2df8e for now.\n. Note: please review 086835e when you\u2019re at it since it has some more changes, including some race condition fixes and more unnecessary code removal.\n. ",
    "adamhowardprice": "I've been thinking more about this problem, and I like the idea of an object listening for these notifications and executing blocks as needed. I think you make a good point about trying to avoid required categories on Core Data classes. However, since the two important method calls AFIncrementalStore works on are both on NSManagedObjectContext, I can't think of another way to structure the method that would both execute a fetchRequest or saveRequest and include a completion block. What are you leaning towards at the moment?\n. Updated with new commit to include fetched objects in calling context, similar to implementation in 95\n. I'm interested in this as a solution to a common behavior too. @mattt, do you think this is applicable?\n. I've been thinking more about this problem, and I like the idea of an object listening for these notifications and executing blocks as needed. I think you make a good point about trying to avoid required categories on Core Data classes. However, since the two important method calls AFIncrementalStore works on are both on NSManagedObjectContext, I can't think of another way to structure the method that would both execute a fetchRequest or saveRequest and include a completion block. What are you leaning towards at the moment?\n. Updated with new commit to include fetched objects in calling context, similar to implementation in 95\n. I'm interested in this as a solution to a common behavior too. @mattt, do you think this is applicable?\n. ",
    "uxp": "Sounds great. Thanks!\n. Sounds great. Thanks!\n. ",
    "HiDeoo": "I described a related issue here without a pull request https://github.com/AFNetworking/AFIncrementalStore/issues/84\nThanks\n. For insertion, I add to replace (objectID != nil) by (backingObjectID != nil).\n. Thanks @pitiphong-p , run into this issue today !\n. I described a related issue here without a pull request https://github.com/AFNetworking/AFIncrementalStore/issues/84\nThanks\n. For insertion, I add to replace (objectID != nil) by (backingObjectID != nil).\n. Thanks @pitiphong-p , run into this issue today !\n. ",
    "lumenlunae": "I don't think this would preserve the original fetch request's sorting though. Can you make a call to the backing context at this point and run the fetch against that, again? \n. I don't think this would preserve the original fetch request's sorting though. Can you make a call to the backing context at this point and run the fetch against that, again? \n. ",
    "wtmoose": "Updated pull with a fix for #90. The fix involves removing the notification in newValueForRelationship, as discussed in #71. However, I found it necessary to also explicitly save the main context after saving the child context in order to have the main context post an update notification.\n. Unparsed sounds like a great idea to me given that its only used in headers.\n. Updated pull with a fix for #90. The fix involves removing the notification in newValueForRelationship, as discussed in #71. However, I found it necessary to also explicitly save the main context after saving the child context in order to have the main context post an update notification.\n. Unparsed sounds like a great idea to me given that its only used in headers.\n. ",
    "cheneveld": "I am running into a similar situation with the infinite loop.  I have a simple one to many relationship X has many Ys.  I am executing a fetchRequest on X with a predicate similar to \"Ys.@count == 0\".  The FetchRequest is used in a NSFetchedResultsController within a Table View Controller.  \nWhen any X object does not receive any Y's from the API, the fetchRequest will go into an infinite loop.  If I remove (like mentioned in https://github.com/AFNetworking/AFIncrementalStore/pull/71)\nobjective-c\n[context mergeChangesFromContextDidSaveNotification:note];\nin newValueForRelationship, the problem goes away.\n. I am running into a similar situation with the infinite loop.  I have a simple one to many relationship X has many Ys.  I am executing a fetchRequest on X with a predicate similar to \"Ys.@count == 0\".  The FetchRequest is used in a NSFetchedResultsController within a Table View Controller.  \nWhen any X object does not receive any Y's from the API, the fetchRequest will go into an infinite loop.  If I remove (like mentioned in https://github.com/AFNetworking/AFIncrementalStore/pull/71)\nobjective-c\n[context mergeChangesFromContextDidSaveNotification:note];\nin newValueForRelationship, the problem goes away.\n. ",
    "catlan": "Fixed with https://github.com/AFNetworking/AFIncrementalStore/commit/7e2de05acf72fee093f8ab608a1da11e554bbd74\n. Fixed with https://github.com/AFNetworking/AFIncrementalStore/commit/7e2de05acf72fee093f8ab608a1da11e554bbd74\n. ",
    "madninja": "Indeed it is! \nOn Oct 28, 2012, at 6:22, Christopher Atlan notifications@github.com wrote:\n\nFixed with AFNetworking/AFIncrementalStore@7e2de05\n\u2014\nReply to this email directly or view it on GitHub.\n. Indeed it is! \n\nOn Oct 28, 2012, at 6:22, Christopher Atlan notifications@github.com wrote:\n\nFixed with AFNetworking/AFIncrementalStore@7e2de05\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "dulacp": "Hi guys!\nI'd really liked to see something like this in AFIncrementalStore, to properly handle server restrictions/errors/bad requests. I'm currently using those commits in one of my own branch that I've updated to the last version of AFIncrementalStore.\nDo you need a hand on something @mattt before considering merging it ?\nI'll be happy to help.\n. No problem @mattt, I can only imagine how much you already have to deal with.\nJust so you know, this project helped me a lot !\n\nI think I can say that this code was truly beautiful.\n\nSo thanks :beers: \n. Hi guys!\nI'd really liked to see something like this in AFIncrementalStore, to properly handle server restrictions/errors/bad requests. I'm currently using those commits in one of my own branch that I've updated to the last version of AFIncrementalStore.\nDo you need a hand on something @mattt before considering merging it ?\nI'll be happy to help.\n. No problem @mattt, I can only imagine how much you already have to deal with.\nJust so you know, this project helped me a lot !\n\nI think I can say that this code was truly beautiful.\n\nSo thanks :beers: \n. ",
    "bjhomer": "As noted in the commit, I think it makes sense to only have the root objects in the didFetchRemoveValues notification, as that makes it the semantic equivalent of the cached results returned from the backing store. But if we only return the root objects, is \"AFIncrementalStoreFetchedObjectsKey\" the right name for the key? Should it be \"FetchedRootObjectsKey\" instead?\n. As noted in the commit, I think it makes sense to only have the root objects in the didFetchRemoveValues notification, as that makes it the semantic equivalent of the cached results returned from the backing store. But if we only return the root objects, is \"AFIncrementalStoreFetchedObjectsKey\" the right name for the key? Should it be \"FetchedRootObjectsKey\" instead?\n. ",
    "aprato": "Unfortunately I didn't see this before fixing the same bug. As mentioned in #117 the same problem may exist around line 442 in the requestForInsertedObject branch of executeSaveChangesRequest:withContext:error: but I don't have a way to test so I'm not touching it at present.\n. This was already fixed in #100\n. I've continued to have problems with the fetch request being returned from the notification even after this commit. It looks to be something happening before AFIncrementalStore. I put a breakpoint on executeRequest:withContext:error: and sometimes (random but seems to happen in streaks) I get a different fetch request here than passed in. When it's different it's different in a consistent way... the fetchLimit is fetchLimit+1.\n. Good question, I'll keep you posted. For now I've worked around it. But I've also seen it pop up on my 'list' page where I set it to 10 but see the request going out to the server with limit=11.... but I'll save that for another day :smile: \n. Unfortunately I didn't see this before fixing the same bug. As mentioned in #117 the same problem may exist around line 442 in the requestForInsertedObject branch of executeSaveChangesRequest:withContext:error: but I don't have a way to test so I'm not touching it at present.\n. This was already fixed in #100\n. I've continued to have problems with the fetch request being returned from the notification even after this commit. It looks to be something happening before AFIncrementalStore. I put a breakpoint on executeRequest:withContext:error: and sometimes (random but seems to happen in streaks) I get a different fetch request here than passed in. When it's different it's different in a consistent way... the fetchLimit is fetchLimit+1.\n. Good question, I'll keep you posted. For now I've worked around it. But I've also seen it pop up on my 'list' page where I set it to 10 but see the request going out to the server with limit=11.... but I'll save that for another day :smile: \n. ",
    "conradev": "This code needs to be updated for the new method of obtaining resource identifiers. (see #82)\n. This code needs to be updated for the new method of obtaining resource identifiers. (see #82)\n. ",
    "alvinhu": "It really looks like a typo\n. @mattt this is an obvious typo which will cause strange error during inserting new record. I hope you can check it and fix it asap.\n. It really looks like a typo\n. @mattt this is an obvious typo which will cause strange error during inserting new record. I hope you can check it and fix it asap.\n. ",
    "tsakoyan": "No apologies needed, I also preferred to wait until the other pull request for relationship on different contexts got merged, before I could come up with a more elegant solution.\nMy special case is the posting of nested objects creating 2-3 objects on the other side with one request.\nThe main entity gets inserted and POSTed by AFIS (as a representation of the whole tree) and the \"sub\"-entities are ignored (with an invalid request url, because I don't want to save them with a nil return of - (NSMutableURLRequest )requestForInsertedObject:(NSManagedObject )insertedObject; -- maybe I should add a way to ignore an object insert all together).\nThe response contains the full created tree, and I need to \"parse\" any incoming added data (e.g. UDIDs created server side) and persist the tree in the backing context.\nobjc\n-insertOrUpdateObjectsFromRepresentations:ofEntity:fromResponse:withContext:error:completionBlock:\nhas the main effect of inserting the objects as new (either only the nested ones or all of them) when I already have them as inserted and connected to the main object being \"updated\" by the response from the server.\nSo long story short I only need the backing-context part of that method...\nIf you would like such behavior I'll put more effort to it (like refactoring backing context insertion out of the insertOrUpdate to use it there as well)\np.s. updateBackingObject wouldn't work as well because there aren't any backing objects yet to update\n. Sorry for not commenting earlier, what I did in the last commits is actually use the, then, latest merge which spawned the \nobjc\n// tackles correctly connecting the created backing object with the already existing related objects \n- (void)updateBackingObject:(NSManagedObject *)backingObject\nwithAttributeAndRelationshipValuesFromManagedObject:(NSManagedObject *)managedObject\nbut took out the parsing of the response, the representationOfAttributes along with the af_resourceIdentifier setting out of the\nobjc\n- (id)executeSaveChangesRequest:(NSSaveChangesRequest *)saveChangesRequest\n                    withContext:(NSManagedObjectContext *)context\n                          error:(NSError *__autoreleasing *)error\nand put it in a new\nobjc\n- (void)updateObject:(NSManagedObject *)object withAttributeAndRelationshipValuesFromRepresentation:(NSDictionary *)representation andResponse:(NSHTTPURLResponse *)response {\nthat also reads the relationship objects (like the fetchRequest does) and calls itself recursively with their representation.\nSo if the response contains nested objects it creates/updates them in the backingContext accordingly connecting them to their parents in the backingContext, and leaves the other relations as they were (responsibility of updateBackingObject:withAttributeAndRelationshipValuesFromManagedObject:)\nThat said, the problem is I didn't address the problem of similar scenario in the updateObject case, where the root object is updated but its nested objects are created/updated as well. Unfortunately I didn't have the time/use cases to tackle that one appropriately...\n. No apologies needed, I also preferred to wait until the other pull request for relationship on different contexts got merged, before I could come up with a more elegant solution.\nMy special case is the posting of nested objects creating 2-3 objects on the other side with one request.\nThe main entity gets inserted and POSTed by AFIS (as a representation of the whole tree) and the \"sub\"-entities are ignored (with an invalid request url, because I don't want to save them with a nil return of - (NSMutableURLRequest )requestForInsertedObject:(NSManagedObject )insertedObject; -- maybe I should add a way to ignore an object insert all together).\nThe response contains the full created tree, and I need to \"parse\" any incoming added data (e.g. UDIDs created server side) and persist the tree in the backing context.\nobjc\n-insertOrUpdateObjectsFromRepresentations:ofEntity:fromResponse:withContext:error:completionBlock:\nhas the main effect of inserting the objects as new (either only the nested ones or all of them) when I already have them as inserted and connected to the main object being \"updated\" by the response from the server.\nSo long story short I only need the backing-context part of that method...\nIf you would like such behavior I'll put more effort to it (like refactoring backing context insertion out of the insertOrUpdate to use it there as well)\np.s. updateBackingObject wouldn't work as well because there aren't any backing objects yet to update\n. Sorry for not commenting earlier, what I did in the last commits is actually use the, then, latest merge which spawned the \nobjc\n// tackles correctly connecting the created backing object with the already existing related objects \n- (void)updateBackingObject:(NSManagedObject *)backingObject\nwithAttributeAndRelationshipValuesFromManagedObject:(NSManagedObject *)managedObject\nbut took out the parsing of the response, the representationOfAttributes along with the af_resourceIdentifier setting out of the\nobjc\n- (id)executeSaveChangesRequest:(NSSaveChangesRequest *)saveChangesRequest\n                    withContext:(NSManagedObjectContext *)context\n                          error:(NSError *__autoreleasing *)error\nand put it in a new\nobjc\n- (void)updateObject:(NSManagedObject *)object withAttributeAndRelationshipValuesFromRepresentation:(NSDictionary *)representation andResponse:(NSHTTPURLResponse *)response {\nthat also reads the relationship objects (like the fetchRequest does) and calls itself recursively with their representation.\nSo if the response contains nested objects it creates/updates them in the backingContext accordingly connecting them to their parents in the backingContext, and leaves the other relations as they were (responsibility of updateBackingObject:withAttributeAndRelationshipValuesFromManagedObject:)\nThat said, the problem is I didn't address the problem of similar scenario in the updateObject case, where the root object is updated but its nested objects are created/updated as well. Unfortunately I didn't have the time/use cases to tackle that one appropriately...\n. ",
    "max-horvath": "@mattt, any comment on whether this is an acceptable solution or not?\n. @mattt, any comment on whether this is an acceptable solution or not?\n. ",
    "zetachang": "Hi, @mattt. I've done some experiment on this issue. For the second point you ask, the answer is that whether the [backingContext save:nil] is executed in here or not, the objects which are not saved (because of failure on remote delete request) will still be removed from NSSaveChangesRequest. \nI think a possible solution is to have a copy of NSSaveChangesRequest, and then before we fire up the AFIncrementalStoreContextDidSaveRemoteValues notification. We can iterate through the objects and check whether - (BOOL)isInserted or - (BOOL)isDeleted or - (BOOL)isUpdated is NO. If so, we can remove them from the copied NSSaveChangesRequest since there are successfully saved according to documentation. \n. Hi, @mattt. I've done some experiment on this issue. For the second point you ask, the answer is that whether the [backingContext save:nil] is executed in here or not, the objects which are not saved (because of failure on remote delete request) will still be removed from NSSaveChangesRequest. \nI think a possible solution is to have a copy of NSSaveChangesRequest, and then before we fire up the AFIncrementalStoreContextDidSaveRemoteValues notification. We can iterate through the objects and check whether - (BOOL)isInserted or - (BOOL)isDeleted or - (BOOL)isUpdated is NO. If so, we can remove them from the copied NSSaveChangesRequest since there are successfully saved according to documentation. \n. ",
    "ksm": "The code right after (between lines 214 and 217) already removes all representation relationships, except for [NSNull null] relationships (correct my thinking, if I'm wrong here, please!). Your change would strengthen this method by making sure no pesky NSNull relation gets returned in the resulting dictionary. Thumbs up from me for this commit :thumbsup: \n. The code right after (between lines 214 and 217) already removes all representation relationships, except for [NSNull null] relationships (correct my thinking, if I'm wrong here, please!). Your change would strengthen this method by making sure no pesky NSNull relation gets returned in the resulting dictionary. Thumbs up from me for this commit :thumbsup: \n. ",
    "mishagray": "Hmm... ok.  Maybe the subEntity thing isn't working completely correctly.\nIt creates and saves SubEntities correctly when it gets results from the server.\nHOWEVER - when fetching via the parent entity, it's not retreiving the correct \"sub entity\" from storage yet.\nSo Hold off on this pull!\n. Hmm... ok.  Maybe the subEntity thing isn't working completely correctly.\nIt creates and saves SubEntities correctly when it gets results from the server.\nHOWEVER - when fetching via the parent entity, it's not retreiving the correct \"sub entity\" from storage yet.\nSo Hold off on this pull!\n. ",
    "jbaudanza": "+1. I had to make the same change in my fork as well.\n. +1. I had to make the same change in my fork as well.\n. ",
    "kmcbride": "+1. Having the same issue.\n. Yes, you're correct that the error is also present in AFRESTClient's automatic conversion. I'll close my pull request in favor of yours, since it covers both.\nThough, if the syntax here is intentional, then perhaps TTTDateTransformers was incorrectly implemented in the reverse order.\n. +1. Having the same issue.\n. Yes, you're correct that the error is also present in AFRESTClient's automatic conversion. I'll close my pull request in favor of yours, since it covers both.\nThough, if the syntax here is intentional, then perhaps TTTDateTransformers was incorrectly implemented in the reverse order.\n. ",
    "jghazarian": "This tripped me up when trying to use the examples. Glad I stumbled upon this. Now the example works as intended.\n. This tripped me up when trying to use the examples. Glad I stumbled upon this. Now the example works as intended.\n. ",
    "huguesbr": "+1 did the same fix.. I was pretty confuse... it suck when example doesn't work...\n. +1 did the same fix.. I was pretty confuse... it suck when example doesn't work...\n. ",
    "swizzlr": "+1 I just debugged this myself @mattt this is a pia bug with a simple fix, please merge.\n. +1 I just debugged this myself @mattt this is a pia bug with a simple fix, please merge.\n. ",
    "hankwallace": "Added fix for issue #180 \n. Added fix for issue #180 \n. ",
    "zsiegel": "Im also curious why each fetch request does a save immediately? \nI would think that batching these up could provide a really nice performance improvement. For example we could add  all the fetched objects to a context then save it once at the end.\n. 193 addressed them. There were a few different forks of my change that all did the same thing. \nThanks!\nZachary Siegel\nSent from where the wild things are...\nOn Jun 18, 2013, at 2:13 PM, Mattt Thompson notifications@github.com wrote:\n\nSorry for taking so long to get around to this.\nHow do your changes to the __strong / __weak references relate to the changes made in #193? Is this ready to go, or did #193 address this?\n\u2014\nReply to this email directly or view it on GitHub.\n. Testing out various examples on my own I was able to deadlock the contexts so I can also reproduce that as well. \n\nI am still wondering why the contexts even need to be __weak and __strong but I could be missing something in the greater context of things. \n. To @Metamogul points above I have also tried this out and it seems to work. I have a test setup with relationships and partial updates of objects and I seem to get all of the appropriate change notifications as well as full proper updates.\nI know alot has changed between iOS5 and iOS6 with CoreData. So far I have only tested on iOS6 so we would need to test this out on iOS5 as well.\nAll changes so far here seem to be valid and improve the situation.\n. Im also curious why each fetch request does a save immediately? \nI would think that batching these up could provide a really nice performance improvement. For example we could add  all the fetched objects to a context then save it once at the end.\n. 193 addressed them. There were a few different forks of my change that all did the same thing. \nThanks!\nZachary Siegel\nSent from where the wild things are...\nOn Jun 18, 2013, at 2:13 PM, Mattt Thompson notifications@github.com wrote:\n\nSorry for taking so long to get around to this.\nHow do your changes to the __strong / __weak references relate to the changes made in #193? Is this ready to go, or did #193 address this?\n\u2014\nReply to this email directly or view it on GitHub.\n. Testing out various examples on my own I was able to deadlock the contexts so I can also reproduce that as well. \n\nI am still wondering why the contexts even need to be __weak and __strong but I could be missing something in the greater context of things. \n. To @Metamogul points above I have also tried this out and it seems to work. I have a test setup with relationships and partial updates of objects and I seem to get all of the appropriate change notifications as well as full proper updates.\nI know alot has changed between iOS5 and iOS6 with CoreData. So far I have only tested on iOS6 so we would need to test this out on iOS5 as well.\nAll changes so far here seem to be valid and improve the situation.\n. ",
    "Metamogul": "I ran into the same problem and came up with a different solution - though I'm not so sure if it's any good. After have given it some thought, I didn't really understand why this __strong and __weak modifications should do the trick and prevent deadlocks. I realized, though, that the __weak modifier on weakChildContext could lead to the context being released long before it will get reassigned to strongChildContext within the success block, since __weak doesn't guarantee the survival of the object in any way. Nevertheless, __block was intended for exactly that purpose, and it worked for me instead of __weak. Any other thoughts?\n. After refreshing my knowledge of CoreData concurrency and nested contexts, I gave debugging this deadlock mess another round, and I might have identified a serious issue: When carefully formatting the kinda messy and uncommented AFIS code of newValueForRelationship:..., I stumbled upon the following messages enclosing the contexts save: operations, whose benefit I somehow didn't get before:\n``` obj-c\nid observer = [[NSNotificationCenter defaultCenter] addObserverForName:NSManagedObjectContextDidSaveNotification object:strongChildContext queue:[NSOperationQueue mainQueue] usingBlock:^(NSNotification *note) {\n                            [context mergeChangesFromContextDidSaveNotification:note];\n                        }];\n                    // ... Saving of backing context and child context done here ...\n\n                    [[NSNotificationCenter defaultCenter] removeObserver:observer];\n\n```\nWhat happens here is that context will have any changes from strongChildContext merged in, as soon as strongChildContext is done saving. However, merging changes this way from one context into another is deprecated when using nested contexts, as outlined in this quick info post on the benefits and possible usage schemes for nested MOCs. The mentioned code, which I therefore consider as unnecessary and possibly even dangerous, might lead to more than one issue:\n1. I'm not sure if merging changes twice could lead to crashes and collisions, since saving a child context already automatically pushes the changes to the parent, merging them in. Most probably nothing would happen at all, since the changes are already in place - but we shouldn't just rely on possibilities. At least, a safe but unnecessary operation could cut down on AFIS overall performance.\n2. Furthermore this might imperil thread/queue safety, since it's not guaranteed, that context is running on the main queue and not on some private queue via NSPrivateQueueConcurrencyType.\nAnyway, commenting out the lines of code in question, I don't seem to hit any more deadlocks. At least, the amount of deadlocks occurring during tests with my testing app seems to have substantially diminished. I've already seen this in an older temporary fix of the deadlock issue I can't find atm, but back then I didn't get the reason for cutting out these lines of code. Now, I think I have learned and can state that removing them would definitely improve stability and decrease the number of deadlocks produced by AFIS.\nWould do you think? I consider my self not to be the most experienced CoreData developer, so I'm interested in your opinions on that before I hastily issue a pull request.\n. I ran into the same problem and came up with a different solution - though I'm not so sure if it's any good. After have given it some thought, I didn't really understand why this __strong and __weak modifications should do the trick and prevent deadlocks. I realized, though, that the __weak modifier on weakChildContext could lead to the context being released long before it will get reassigned to strongChildContext within the success block, since __weak doesn't guarantee the survival of the object in any way. Nevertheless, __block was intended for exactly that purpose, and it worked for me instead of __weak. Any other thoughts?\n. After refreshing my knowledge of CoreData concurrency and nested contexts, I gave debugging this deadlock mess another round, and I might have identified a serious issue: When carefully formatting the kinda messy and uncommented AFIS code of newValueForRelationship:..., I stumbled upon the following messages enclosing the contexts save: operations, whose benefit I somehow didn't get before:\n``` obj-c\nid observer = [[NSNotificationCenter defaultCenter] addObserverForName:NSManagedObjectContextDidSaveNotification object:strongChildContext queue:[NSOperationQueue mainQueue] usingBlock:^(NSNotification *note) {\n                            [context mergeChangesFromContextDidSaveNotification:note];\n                        }];\n                    // ... Saving of backing context and child context done here ...\n\n                    [[NSNotificationCenter defaultCenter] removeObserver:observer];\n\n```\nWhat happens here is that context will have any changes from strongChildContext merged in, as soon as strongChildContext is done saving. However, merging changes this way from one context into another is deprecated when using nested contexts, as outlined in this quick info post on the benefits and possible usage schemes for nested MOCs. The mentioned code, which I therefore consider as unnecessary and possibly even dangerous, might lead to more than one issue:\n1. I'm not sure if merging changes twice could lead to crashes and collisions, since saving a child context already automatically pushes the changes to the parent, merging them in. Most probably nothing would happen at all, since the changes are already in place - but we shouldn't just rely on possibilities. At least, a safe but unnecessary operation could cut down on AFIS overall performance.\n2. Furthermore this might imperil thread/queue safety, since it's not guaranteed, that context is running on the main queue and not on some private queue via NSPrivateQueueConcurrencyType.\nAnyway, commenting out the lines of code in question, I don't seem to hit any more deadlocks. At least, the amount of deadlocks occurring during tests with my testing app seems to have substantially diminished. I've already seen this in an older temporary fix of the deadlock issue I can't find atm, but back then I didn't get the reason for cutting out these lines of code. Now, I think I have learned and can state that removing them would definitely improve stability and decrease the number of deadlocks produced by AFIS.\nWould do you think? I consider my self not to be the most experienced CoreData developer, so I'm interested in your opinions on that before I hastily issue a pull request.\n. ",
    "jerryhjones": "I had the exact same thought process - I'm not sure why __weak and __strong would stop the deadlock. I'm also not sure what the solution should be. Part of the reason I commented on the commit where this change took place before submitting a pull request was because I thought it might be helpful if @mattt could shed some light on his thought process.\n. I had the exact same thought process - I'm not sure why __weak and __strong would stop the deadlock. I'm also not sure what the solution should be. Part of the reason I commented on the commit where this change took place before submitting a pull request was because I thought it might be helpful if @mattt could shed some light on his thought process.\n. ",
    "t089": "Actually, the error is already present in the default date handling of AFRESTClient. See my pull request: #203 \n. Actually, the error is already present in the default date handling of AFRESTClient. See my pull request: #203 \n. ",
    "MattNewberry": "No problem! This works great for me and wanted to share. \n. No problem! This works great for me and wanted to share. \n. ",
    "davidbitton": "@mattt, can you post an example of what @MattNewberry is doing but in the -requestForFetchRequest:withContext method? Thanks!\n. @mattt, can you post an example of what @MattNewberry is doing but in the -requestForFetchRequest:withContext method? Thanks!\n. ",
    "ryan-lang": "Sorry to resurrect an old topic, but I was hoping for some clarification on this.  @MattNewberry, looking at your fork - you've taken out all references to this.  Have you found that there's a better way now?\n. Sorry to resurrect an old topic, but I was hoping for some clarification on this.  @MattNewberry, looking at your fork - you've taken out all references to this.  Have you found that there's a better way now?\n. ",
    "boondigo": "I'd like to see this fix as well.  My app currently crashes at line 71 of version 0.5.0\n. I'd like to see this fix as well.  My app currently crashes at line 71 of version 0.5.0\n. ",
    "jphribovsek": "found some issues, not ready for prime time\n. found some issues, not ready for prime time\n. ",
    "ExoticObjects": "Any news on when that 2.0 release is coming?\n. Any news on when that 2.0 release is coming?\n. ",
    "andrewtheis": "+1 For this. Would like to use AFNetworking 2.0!!\n. +1 For this. Would like to use AFNetworking 2.0!!\n. ",
    "paddev": "when i delete a news in back office, json is modify but the object in entity is not delete!\nhelp me please\n. hello\ni've a problem when i delete a news in my back office, the json is modify but nothing happen in my application...\n. when i delete a news in back office, json is modify but the object in entity is not delete!\nhelp me please\n. hello\ni've a problem when i delete a news in my back office, the json is modify but nothing happen in my application...\n. ",
    "proger": "indeed it's time, thanks for all the fish :)\n. indeed it's time, thanks for all the fish :)\n. ",
    "kgn": "@mattt no worries :)\n. @mattt no worries :)\n. ",
    "oliland": "I've implemented said algorithm before in a previous project. While it does improve performance greatly in some cases, it won't solve to the problem of these operations happening on the wrong thread. I would argue that we should ensure that what should be happening in the background happens in the background before changing how the insert or update algorithm works.\n. @haitham-reda Your issue appears to be completely unrelated. This pull request deals with all insertions from fetch requests blocking the main thread.\n. Closing because it seems to crash things and that's probably bad\n. I've implemented said algorithm before in a previous project. While it does improve performance greatly in some cases, it won't solve to the problem of these operations happening on the wrong thread. I would argue that we should ensure that what should be happening in the background happens in the background before changing how the insert or update algorithm works.\n. @haitham-reda Your issue appears to be completely unrelated. This pull request deals with all insertions from fetch requests blocking the main thread.\n. Closing because it seems to crash things and that's probably bad\n. ",
    "haitham-reda": "I have a problem with multiple remote relationships issue #250 for the same reason, any advice ?\n. I have a problem with multiple remote relationships issue #250 for the same reason, any advice ?\n. ",
    "gustavosaume": "This was dealing with the symptoms not the cause. For a better fix please check issue #225 \n. This was dealing with the symptoms not the cause. For a better fix please check issue #225 \n. ",
    "ehlersd": "BTW, this also includes the improved subentity support  added by @lukerattei in a previous pull-release.\n. BTW, this also includes the improved subentity support  added by @lukerattei in a previous pull-release.\n. "
}