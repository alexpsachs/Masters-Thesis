{
    "epoberezkin": "https://github.com/epoberezkin/ajv/blob/master/lib/compile/validate.dot.js#L37\n. closed with 5b434b426e27953bb82819c3a0037c41e5532fea\n. The solution is to separate adding schemas from compiling schemas. Schemas will be compiled on demand or when they are first used, so multiple schemas can be added before the first one is compiled.\n. Agreed. Given the declarative nature of schema definition, the need to manage the order is not great. Also recursive definitions do have the use cases - I need them for another project. I think I may have time to do it some time this week. Or if you'd like to contribute that would be great. It's not the most simple change though - schemas are stored as functions at the moment and there are many places in the code that rely on that...\n. @cdmcnamara check out the version in the branch 1.0.0. Compilation is separated from adding schemas, so addSchema returns nothing, order of addition is not important and circular dependencies between schemas also work.\nEverything else works as before, schemas can either be compiled explicitly with compile or they will be compiled when they are first used with validate or with getSchema.\nThat would be great if you could try it with your schemas before I merge it into master. You can include it in package.json as epoberezkin/ajv#9b1361c92e (https://docs.npmjs.com/files/package.json#git-urls-as-dependencies)\nThanks!\n. Thanks. Could you post the Payment schema as well please? Am I right that it was working ok with the previous version? I will check anyway.\n. @cdmcnamara sorry can't reproduce. Can you please post Payment and Hash256 and maybe some valid/invalid samples. Thanks\n. Branch 1.0.0 was merged into master\n. Thank you :) Your jsen was great help too - I've spend quite some time analysing and comparing the code generated by it and imjv.\nYou are right, there is still some potential for speeding it up, maybe +25-50% I guess. But each step gives less return and more risky. I think you know it first hand. I've found using regexp replaces with generated code for some last step optimisations quite efficient and easier than introducing more conditions in code generation.\nBenchmarks are not affected by caching actually, they are using precompiled functions anyway.\nI wasn't thinking about the setup with multiple dynamic schemas, I haven't encountered such a use case. Can be added as an option with some LRU eviction I think (or even using set-associative cache I did recently - https://github.com/epoberezkin/sacjs) :) Or at least as an api to purge a schema from the cache - if they are used in other schemas they are referenced internally anyway, so there is no risk removing it.\nI was more concerned about correct handling of referenced schemas, resolution scope changes, inline resolutions - that was what prompted me to create ajv in the first place (before I got hooked into benchmarks :). I couldn't find the one that was correctly handling all the cases when I started working on this - https://github.com/JSONScript/jsonscript . Actually I still have two ref resolution issues to resolve - #1 and #2.\n. Thanks :)\nYou are right - I also think that the resolution scope change is not really necessary - the spec could've been simpler by saying there is one id per file, all internal references should be JSON pointers. Spec has actually got decent examples of scope change and inline resolution, but it doesn't make it any simpler to implement, particularly for generated code.\nOn the other hand any complex and recursively defined data-structure (tree/graph) will lead to many interlinked schemas in multiple files. So maybe for these complex structures these features make it a bit easier.\nBy the way, I'd love to hear what you think about JSONScript when you have a moment.\n. I think any specific caching strategy is out of scope, so I've implemented an option to pass an instance of any cache (see readme) and also removeSchema method.\n. It working. The issue was caused by the order in which schemas are added - will be addressed in v0.5.0\n. I suspect I may have recently fixed the issue with incorrect dataPath reporting in version 0.4.9 (it was issue #9).\nPlease try using the latest version (0.4.10 - there is another important fix). If you are still seeing the issue please post your schema, data and results (errors) here.\nThanks for helping me making it better ;)\n. Ok, I've figured what it was about.\nThe choice I've made was to put the object path in dataPath rather than the property, because it is the object that is being validated rather than its property.\nSo if you had additionalProperty keyword in some sub-object, you would have it's path in dataPath.\nAlthough this is more consistent with the rest of the validation keywords, I agree that it is useful to have the actual additional property in error.dataPath.\nSo I added it in 0.4.15.\n```\nvar schema = {\n  properties: {\n    foo: {},\n    bar: {}\n  },\n  additionalProperties: false\n};\nvar data = { foo: 1, bar: 2, baz: 3, quux: 4 };\nvar ajv = Ajv({allErrors: true});\nvar valid = ajv.validate(schema, data);\nconsole.log(ajv.errors);\n```\nThere will be two errors in the array, with dataPaths \"['baz']\" and \"['.quux']\". (It would have been easy to replace them with \".baz\" and \".quux\", but as it's not a compile time replacement, I decided to keep it faster - you can map/slice your properties out of these errors.\nSo if you want to remove additional properties you could do smth like this:\najv.errors\n.filter(function(err) { return err.keyword == 'additionalProperties'; })\n.map(function(err) { return err.dataPath.slice(2,-2); })\n.forEach(function(p) { delete data[p]; });\nIt'll be just a bit more complex for properties in sub-objects.\n. I was focussing on implementing JSON-Schema standart that schemasaurus does only partially...\nYou can check the benchmark to see which parts of the standart are not supported in different validators.\n. Thanks! Yes, you are right - schemasaurus allows you to create your own tools based on json documents, essentially creating your own processing standard - json validation is almost a side-effect :)\n. Yes, I can see the issue\nThanks. Will fix today\n. It seems like you may be using some \"old\" version.\nThe current one will validate the schema before compiling unless you turn it off with options (items in enum should be unique)\nNevertheless, once I've removed this obstacle I've found another bug (different from the one you were getting) - it is fixed now in version 0.5.11\nThanks a lot!\n. By the way, your schema is equivalent to this one (it is simpler and it will validate faster):\n{\n    \"type\" : \"object\",\n    \"additionalProperties\": {\n        \"type\" : \"object\",\n        \"properties\" :  {\n            \"unit\" : { \"type\" : \"string\", \"enum\" : [\"ap\", \"ac\", \"af\"]},\n            \"density\" : { \"type\" : [\"string\", \"number\"]},\n            \"compositions\" : { \"type\" : \"array\"}\n        },\n        \"required\" : [\"unit\", \"compositions\"]\n    }\n}\n. You're welcome. Please make sure to use the latest version.\n. On it.\n. It is a design choice for performance rather than shortcoming :) Required keyword is validated in a single expression (conditions for each property are connected with &&), not in the loop, so ajv has no knowledge of which specific property is missing.\nHaving said that I agree that one wants to know what exactly is missing, not just that something is missing :)\nI'll see how I can improve it without damaging performance. Maybe it should be an option. Or I have another idea...\nThank you for pointing it out.\n. I agree. I have a solution in mind - it will have missing properties in dataPath without affecting performance. If you use allErrors=true then each missing property will create an error (not one error as it is now). If allErrors is not passed it will return the error with the name of the first missing property. Just need a little time for that.\nAnd thanks for using it :)\n. done in 0.6.1\n. you're welcome. Thanks for the motivation to improve it :)\n. By the way, the error message for \"required\" was simply listing all required properties, not just missing ones. So making assertions on it wasn't the right thing to do.\n. That's possible as for 10 or less items ajv generates a single expression and for more than 10 generates a \"for\" loop. Although there is a test for \"required\" it is obviously missing your case. Could you please post your schema and the data that fails?\n. Thanks! I'll have a look\n. It is fixed, it was a bug with \"required\" validation with many properties (>10 with allErrors, > 20 without - that's why it was passing for you). Instead of testing the data on the current level, it was testing top-level data.\nYour data passes too.\nThank you.\n. You're welcome\n. Thanks. On it.\n. @sarus It's a proper bug, thanks. Properties with \"-\" in it are causing it. As a temporary workaround, maybe you can replace \"-\" with \"_\". Will fix later today anyway.\n. @sarus fixed in 0.6.7. Your schema gets compiled too. Please let me know if you spot some other issues. Thanks!\n. We use it with browserify with require('ajv') in dependent module, not as a separate bundle, but it should work the way you do it too. Are you using the latest version? it only works from 0.5.2.\n. ah, yes, it doesn't create any global at the moment. You can:\n1) require it directly from your code as we do\n2) create file bundle.js like this:\nwindow.Ajv = require('ajv');\nand then browserify and use this bundle\n. Cool, thanks. I will add to readme. Just to confirm, you are still loading bundle in a separate script tag, correct?\n. Thanks, added \"Using in browser\" to readme.\n. @nsdelgadov it's changed since then - the supplied bundle already creates global (it is \"universal\"). So if you load bundle from npm package or from cdnjs you can just use global Ajv. Maybe just one line comment can be added to readme.. 1. Can you explain more or maybe provide some example? Sorry, I didn't understand.\n2. The second idea is interesting. I was thinking more about inlining compiled refs rather than generating schema. It won't work with recursive refs though.\n. I understand now. I don't think it should be the part of library, not because of the standards, but because I think it is not a very common use case. You can create a simple wrapper that would do it:\nfunction compile(schema, finalCheck) {\n  var v = ajv.compile(schema);\n  return function validate(json) {\n    var valid = v(json);\n    if (valid) {\n      valid = finalCheck(schema, json);\n      validate.errors = valid ? null : [{ /**/ }];\n    } else {\n      validate.errors = v.errors;\n    }\n    return valid;\n  };\n}\nThe projects we use ajv in have project specific wrappers that add features that are needed for them.\nI am thinking about the second suggestion. I was wondering, what is your use case for which you need schema with substituted refs?\n. By the way, custom formats may be helpful, although at the moment they only validate strings.\n. Ajv doesn't generate a final schema. Each ref is compiled as a separate function - that makes recursion possible and also makes refs reusable between schemas referring to them. It doesn't mean that generating schema with refs substitution is impossible, but it is not available anywhere internally at the moment.\nTo make sure that your schemas work correctly you could have tests with valid/invalid data samples. You can use https://github.com/MailOnline/json-schema-test - it is used to test ajv and we use it to test schemas in our project too. It allows you defining your test cases as json files that contain schemas and data samples (or references to files with them).\nI will think about custom validation. At the moment I think it is out of scope of json-schema validation, because attempting to include any custom validation in schemas would make them incompatible with other platforms. So I think it is better to have it as a separate validation step, additional to json-schema validation.\nIn your case you can try using \"dependencies\" and \"anyOf\"  keywords and maybe consider changing data structure (if possible) so that different data is not kept in the same fields.\n. Closing. Generating schema with substituted references won't help as this schema is not used for validation anyway.\n. :+1: \nI think it's very cool, it's quite common feature for validators. I was reluctant to implement it thinking that it is probably out of scope, and you can remove additional properties by analysing errors (see #11 e.g.)... But analysing errors is a hassle and it's definitely easier to do it in the process of validation as your code shows.\nCould you please do a couple of things (or I can):\n1. move $removeAdditional var to properties.jst, so it's not defined for all keywords\n2. remove additional properties if additionalProperties is a schema (it's below in the same properties.jst) and if there is no additional properties keyword at all.\n3. recompile dots using 0.10 node as it doesn't insert these /**/ - I still hope it's some V8 fluke that will go away.\n4. update readme\n5. update version in package.json\n6. Ideally, some test(s) for the option - in options.spec.js (nonexistent at the moment :).\n. Cool, I've noticed :)\nI think warnings is a complication, don't you think? I would simply remove quietly with maybe optional logging (say if removeAdditional is set as 'log').\nIf you skip the test that's failing, I can merge and finish.\nOr you can simply move this logic a bit outside - removing will be instead of what is happening between https://github.com/andyscott/ajv/blob/feature/filter-object-to-schema/lib/dot/properties.jst#L47 and https://github.com/andyscott/ajv/blob/feature/filter-object-to-schema/lib/dot/properties.jst#L73 - essentially removing will take precedence over failing in all cases - no error reporting will happen in this case (apart from logging maybe)\n. Also I think there is no point validating nested schema if we are going to remove the property anyway\n. yes, it will be inside if (isAdditional{{=$lvl}}) { ... }. With removeAdditional there will be removal code, without - validating. It doesn't matter if it is offending or not - if it is additional - it will be removed.\nOr you only want to remove additional properties if there is additionalProperties: false in schema?\nI thought it should always remove them with this option regardless of the schema for addtionalProperties. Although it is possible to differentiate this behaviour, if there is some use case, and remove only failing additional properties if the option value is 'failing' and remove all additional if the option is true. In this case you would have to validate nested schema first indeed if there is schema...\nBut I think it is an unnecessary complication, to be honest. I would simply always remove until you or somebody else has some specific use case where differentiation is needed. What do you think?\n. Looking at your test you do want to differentiate. Anyway, I merged and added 'all' for removeAdditional (see readme). \nYou can add 'failing' if you want, but not necessary. Maybe I'll add it later. Essentially you have to preserve the value of errors (the counter) before schema validation and then restore it if schema failed and you want to remove additional property rather than fail validation. Array should also be reset. See anyOf keyword for example - it does that.\nThanks!\n. it now can do both - either all or only those where additionalProperties is false. I didn't implement only removing properties for the failing schemas.\nThanks\n. @andyscott see #26 - funny issue came out of this feature. Make sure to use 0.6.11 - it works correctly at   least when your $schema points to draft 4 meta-schema (or absent).\n. Not sure if I understood the question correctly.\nIf you want traversing object using paths, you can use object-path\nOr you can use reactive models from milojs framework - it does much more than just that though.\nIf you want to determine the required type for the value at a given path based on schema, it is not possible, because the schema can have 'anyOf' or 'not' keyword, for example, that would allow multiple types for a given property. Also schema can be written in such a way that the allowed type(s) for a given property would depend on other properties.\nIf you only use simple keywords then you can answer this question, but in general case there is no definite answer.\n. I will look into it. I does go into endless loop trying to resolve this reference in this case.\nI suspect the problem may be that you are using IDs that are not proper URIs (although generally they are supported).\nAs a temporary workaround I suggest moving the schema for layout property to a separate file and referring to it as #:\ntestrec.json:\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"id\": \"http://yourdomain/testrec.json#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"layout\": { \"$ref\": \"layout.json#\" }\n  }\n}\nlayout.json:\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"id\": \"http://yourdomain/layout.json#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"layout\": { \"type\": \"string\" },\n    \"panels\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"oneOf\": [\n          { \"type\": \"string\" },\n          { \"$ref\": \"#\" }\n        ]\n      }\n    }\n  },\n  \"required\": [\n    \"layout\",\n    \"panels\"\n  ]\n}\ncode:\najv.addSchema(require('layout.json'));\nvar validate = ajv.compile(require('testrec.json'));\nvar valid = validate(data);\nThis should work (there are many samples like that in tests).\nPlease let me know if it does/doesn't. Also please make sure that you are using the latest version.\nIn any case I'll look at the issue. Thanks for reporting!\n. Yes, needs fixing. Will do it.\n. closed with a0c342c58f7a15ba1b9723d58c00145235b45bcf\n. @blakeembrey great, thanks :) do you maybe have some valid/invalid samples?\n. @blakeembrey RAML schema now compiles - it actually helped improving how #13 was solved.\nI had to change some regular expressions in RAML schema (see lines 503 and 534 in b3fb2e58c7843e780a7b9c3e5fdbd079537371f2): I think it is wrong to escape \"/\" in this regex variation (you don't escape \"/\" in lines 142 and 389; escaping it also breaks ajv). Maybe it is wrong and something needs to be changed in how I escape regex strings (escapeRegExp function). I also removed unnecessary escaping in lines 142 and 389 - only \"-\" needs to be escaped inside [].\nThanks a lot for help. I would appreciate if you let me know if it actually validates correctly :).\n. json-schema spec advises to use a subset of ecma262 regular expressions: http://json-schema.org/latest/json-schema-validation.html#anchor6 . That probably means [a-zA-Z0-9_] instead of \\w and [0-9] instead of \\d, although I am not sure about that. They will work in JavaScript of course.\nIt says nothing specifically about how escaping should work, but it's not a universal rule that '/' has to be escaped in regular expressions. Even RegExp constructor doesn't require escaping '/'. Although it produces the same results for '/' and '\\/'. So I guess I can make ajv support the latter as well :).\n. :+1: \ntypes don't need escaping though - removed\nThanks!\n. Thank you very much!\nYeah, I usually let it shows all errors :)\nBut it's not because I prefer it - I actually just alwayS did it this way :)\nSo I'll leave with bail, probably it's easier indeed.\nSo now I just need to push the coverage data to https://codeclimate.com/github/epoberezkin/ajv to get a badge ;)\n. Removed --bail :)\nIt's easier to see all the things that break in this case rather than just the first one that breaks - it suggests what could be changed to fix.\n. I will use npm version, no problem. I think I was adding tags for most major releases, but probably missed some.\n. I don't think I was choosing really. I just used JavaScript property access syntax as it can be easily used in the code that processes errors (either with eval or with a library like object-path). And the same (or similar) syntax is also used internally in generated code.\nI can see the use case where errors are consumed outside of JavaScript environment (node.js server accessed by non-javascript client). While I don't think it's common, I don't mind having an option say errorsJsonPointer or smth like this that would make generated code report errors using JSONPath.\n. That's a relatively easy change - wherever it.errorPath or $it.errorPath is appended (in doT folder) with path segment using JS syntax, they should be appended using JSONPointer syntax if it.opts.errorsJSONPointer is present.\nit.errorPath maintains the code for \"validation-time\" (as opposed to compile-time) expression that will evaluate to the path of the data currently validated. It is only used to report errors, nothing else relies on it. So changing it to a different format won't affect anything.\nI've just discovered and removed unused it.dataPath from everywhere - at some point it was used but not anymore, so if you decide to do it please use the latest commit.\nThanks!\n. @blakeembrey I've found one more case where jsonPointers should be used - fixed.\nBy the way, with json pointers it reports error message slightly differently in this case (see https://github.com/epoberezkin/ajv/blob/master/spec/errors.spec.js#L93). I think it's not important to be honest.\n. Thanks!\n. Cool. Please see my comment in code.\n. Thanks for all that - that's great. Added you to collaborators, hope you don't mind, - you can commit directly to a branch of this repo and merge PRs from them.\n. Looked at this compatibility. Yes, can be mentioned in README.\n. I removed npm run build from npm test because tests (especially in travis) should run against compiled dot files in the repo rather then recompile them - many users are likely not to run tests / recompile dot files.\nI think linting in script is a good idea - it will prevent some code errors from being comitted - at the moment it only happens in code-climate and there is a file that turns off the rules I intentionally break.\nI don't like standard though - although with some things it enforces I agree, it's opinionated differently from me :) and not configurable. I disagree about not using semicolons - not only consistently using them prevents some errors but also, for example, }; vs } helps understand what this brace belongs to. I also disagree about always using '===' - I have many arguments for always using '==' unless you know that you definitely need '==='. I almost never use braces around single statements after if and for - for example, I prefer for (var key in schema) if (rules[key]) return true; to for (var key in schema) { if (rules[key]) { return true; } }... I know that many people think differently and quote Crockford. I prefer Flanagan's approach to JS :)\nSo I'm happy with any tool as long as it supports options from .jshintrc.\n. Removing them completely is ok, I think. I didn't understand that it is what you suggest as they were still there. It will guarantee they are not old.\nIt also makes tracking changes a bit easier too. I will do it.\njshint is ok, definitely.\n. thank you, I published 1.1.1\n. @blakeembrey should https://github.com/mulesoft-labs/osprey-method-handler/blob/master/package.json#L41 be changed to ^1.1.1? Or what is it better to do with that broken 1.1.0?\n. :)\n. Great stuff. But it says conflicts... Probably because I merged another PR. Why do we need phantom by the way? I have it installed, but it perfectly runs with chrome - I suspect many people may not have it installed. I suggest removing it.\n. Ah... Got it.\n. The option can be even shorter by the way: { jsonPointers: true }.\nIt looks like I added all the comments in your branch, rather than in PR... It got them here anyway, but without code context. \nDo you want to me to fix all those issues or you'd rather look at them yourself? I don't mind either way.\n. It's impressive that you've figured how it works by the way... I get lost almost every time :)\n. Ok, so apart from ~~two places~~ one place it uses getPathExpr for validation time variable names and getPath for compile time key/index. Am I right? Is it an error in ~~those two places~~ this one place :) or am I missing something?\n. @blakeembrey please comment on my comments - I've finished reviewing. Great stuff.\n. Yes, it's great. Can I merge or you are going to make another commit?\n. I see that I can :)\n. @blakeembrey should we maybe add \"#\" in front of JSON pointers?\n. They usually start with #, no?\n. Ah, I see. Thanks for explaining...\n. @blakeembrey fixed with 1.1.1. Sorry, my bad - removed compiled files from published...\n. Not really. Validation is synchronous. What's the use case?\n. I will think about asynchronous...\nI think that \"format\" is something that can be clearly and independently defined. If something requires IO it is not a \"format\", it is some other custom validation.\nI don't think custom validation should be done via JSON-schema. It undermines schema platform independence.\nI can reconsider under pressure though :)\n. I assume you are talking about VAT identification number, correct me if I am wrong. There are two parts in its validation. The first is \"format\" validation - it is clearly defined in Q11 and can be defined via regex or a function. The second is establishing that it is valid based on some proprietary algorithm or based on whether it is assigned to some company. I think it should be validated in a different application layer from the one that receives the data and establishes its validity to the JSON scheme, because it belongs to the business logic. Mixing IO / data validation with business logic validation is not the most efficient thing to do. JSON-schema is not designed for business logic validation.\n. Credit card number is similar, by the way. Format validation will just look for 16 digits with optional spaces. Business logic validation can look up database or access the web service. The first should be in the schema, the second should not be.\n. Question 11 in the document you've posted. It has format specifications for VAT identification number in different countries. I think this is what the schema should validate against.\nAt best the change is not very easy to make - changing compiled functions to be asynchronous is quite an effort. So it won't happen very soon. If you really need async, z-schema is a very good choice, because although z-schema is much slower, with async the validation speed is not that important - it will be a tiny fraction of I/O anyway. At the same time z-schema is a very mature and battle-tested validator.\nI've just tried to suggest you to consider an alternative approach, but it is up to you of course...\nBut keep it open; as I said, I will think about it, I am not 100% certain about the right approach to asynchronous and custom validations. I may implement them at some point.\n. You are welcome.\n. It should also be possible to create asynchronous custom keywords then.\n. If the schema has id property (and it is always better to have it) you don't need to do anything - it will be added automatically if it is successfully compiled (synchronous compile does that too). That's what I'd recommend.\nIf you want to associate schema with an additional key you can use ajv.addSchema(schema, key). You have the wrong order of parameters in your sample btw. The downside is that the schema associated with this key will be compiled again (synchronously - all the dependencies will be available at this time) when you use ajv.validate(key, data) or ajv.getSchema(key). Also if the schema has id this call will throw an exception, because id has to be unique.\n. compile can also be used to compile schemas without IDs. These schemas won't be added to the instance (apart from caching compiled function, but cache is an internal thing - there is no public API to access it), so using addSchema to compile them would be indeed confusing. By the way, I actually started schema level options for some other reason but it was becoming very complicated and confusing, so I abandoned it.\nI also think multiple methods are better than options... It's better to keep API as it is unless there is something that cannot be achieved with it.\nThere is an option suggested in #83 that when implemented would make compile even more different. Maybe it should also be controlling when/if compile and validate add schemas to the instance (always - would throw if there is no ID / if ID present - current behaviour, throws if ID is not unique / if unique ID present / never). Not sure what the property name should be and possible values in this case, so if you have some ideas please share them. As long as it doesn't change the default behaviour it can be useful.\n. Thanks :)\nAsync formats and keywords is an interesting challenge... I agree that having all validation logic in one place is convenient. So they are coming some day.\nMy only advice is to maintain and to use your own custom meta-schema that includes them. You just need to do something like this:\n{\n  \"id\": \"http://thoughtworks.com/schemas/meta-schema.json#\",\n  \"$schema\": \"v4 or v5 meta schema uri\",\n  \"allOf\": [\n      { \"$ref\": \"v4 or v5 meta schema uri\" },\n      {\n        \"properties\": {\n           // your custom keywords go here...\n        }\n      }\n  ]\n}\nIn this way you won't have to validate keyword values in their definitions, your schemas will be correctly validated and the keywords you've created would be properly documented in one place.\nI am curious, what keywords you are using and what is your main implementation mechanism (I like macros more than anything but they are limited of course :)? Maybe they can be interesting for other people too... If that's the case it's relatively easy to make them into an npm module(s).\n. @rdsubhas I added docs for inline keywords, can be useful for you\n. @rdsubhas you're welcome. \"inline\" functions existed from the beginning, that's how most v5 keywords are implemented (only contains is implemented as macro). But I've realised that not only it's not easy to figure out how to use them, but also given that it was private api it was risky to use it. What you see in the doc is very stable, it's very unlikely to change, definitely not without major version change.\n. I was thinking about asynchronous schemas and I think that the good approach is to have $async keyword that should exist both on the top level of the schema to declare it as asynchronous and on the level where asynchronous elements exist:\n{\n  \"id\": \"...\",\n  \"$schema\": \"v4-async.json or v5-async.json\",\n  \"$async\": true,\n  \"type\": \"object\",\n  \"properties\": {\n    \"company\": { \"type\": \"string\" },\n    \"vatId\": {\n      \"$async\": true,\n      \"type\": \"string\",\n      \"format\": \"VAT-ID\"\n    },\n    \"registration\": {\n      \"$async\": true,\n      \"companiesHouse\": { \"regNo\": \"XXX\" }\n    }\n  }\n}\nThe format \"VAT-ID\" and the keyword companiesHouse are asynchronous in this example.\nIf $async is present on the top level the schema will always be asynchronous, even if there are no async elements inside. If $async is absent either on the top level or on the level where async elements exist, the schema will be invalid (the compilation will fail).\nWhat do you think? Why it is good or bad?\n. It's not implemented yet, just an idea. Macro returns schema, so it will remain synchronous. It may contain async schema though once it's implemented.\n. It's implemented in async branch, give it a go. At the moment it requires generators support, so only nodejs / Chrome / Firefox. There will be an option to transpile compiled validation functions to ES5/6. In the browser it will require an additional (or bigger) bundle. Compiling schemas into functions with callbacks is not a feasible option - it would require a lot of changes everywhere.\nSee async validation test for the examples of async format and keyword. Validation function for a custom format/keyword should return a promise that resolves to true/false. The compiled validation function is a generator function that you can use with co or directly, e.g. in koa 1.0. If used with co it returns a promise that resolves to true or rejects with an exception that has errors property.\nAt the moment it needs $async: true on the top level of the schema (and on the top level of dependencies if they have async formats/keywords) but also requires $async keyword on the level where async format/keyword is used (I am thinking to drop this second requirement).\nLet me know what you think.\n. in 3.5.0\n. @rdsubhas now with 3.7.0 you can access parent data from \"compile\" and \"validate\" custom keywords.\n. I agree that it's a useful feature. The reason it is absent is the number of complex and/or contradictory scenarios that should be covered. I am sure that there will be other complications that we don't immediately see. The additional problem with anyOf, for example, is that multiple branches can be satisfied. allOf is also not obvious. Post processing is not going to work, because I think that the expectation is that if default is provided and the value is missing, object with inserted default should be valid, not without. Pre-processing is difficult because it is not clear which branches are going to be valid. Some validators implement complex scenarios with changes and roll-backs...\nI will probably implement it at some point, but it's not a simple task. PR is welcome of course :)\n. The first valid anyOf branch I assume. So I guess apply defaults first (if it wasn't applied in the previous branch), validate a branch, rollback if it wasn't valid...\n. @atrniv, thanks. I was actually thinking about implementation in themis.\n. The implementation uses default keywords only in properties and in items (when it's an array). It also ignores them if they are anywhere inside anyOf, oneOf and not as not only the required code is complex to implement but also because the meaning of these defaults is very ambiguous. I think the way it is done it covers the majority of use cases. The possible improvements to compilation are:\n- [ ] warn when default keyword is ignored\n- [ ] detect situations where minItems/maxItems (etc.) is guaranteed to pass (to simplify the compiled code) or to fail (to throw the exception during compilation).\n- [ ] detect situation when property dependency in dependencies keyword is guaranteed to pass.\n- [ ] validate defaults against the schema for the item/property (to throw compilation exception when it fails)\n. JSON schema is a JSON-document. It should be serialisable. You can do it with custom keyword on the parent object though, e.g.:\n{\n  uuid: {\n    property: 'id',\n    version: 4,\n    generate: true\n  }\n}\n. actually, with \"inline\" keyword you can do a more sane thing on the property itself as there you will have access to the parent object and the current property name (check the implementation of default for that):\n{\n  \"properties\": {\n    \"id\": {\n      \"uuid\": {\n        \"version\": 4,\n        \"generate\": true\n      }\n    }\n  }\n}\n. file defaults.def\n. @paglias this doc about inline keywords can be useful\n. @rondonjon that is not how Ajv works, it has no global awareness about branches, it just validates data against all of them and defaults have to be applied before validation. There is no way Ajv can decide which is the right branch without validating against it. But then if it is not valid, defaults have to be removed. So there is no \"branch selection\".\nThe suggestion to work around is exactly that - to explicitly select the branch using some kind of conditionals: \"if/then/else\" (will be in draft 7) or \"select\" (both are in ajv-keywords). It both solves defaults problem and excessive error reporting problem (in case of using oneOf/anyOf when all branches are invalid and Ajv has no idea what is the \"right\" branch).. Cool stuff. Several questions.\n1. Why it is needed to have multiple lookup functions? I think one would suffice per ajv instance, in cases when not, the loop can exist outside of ajv, inside the supplied function.\n2. I would pass it via options, if anything.\n3. What about asynchronous loading? This is not covering it.\n4. What about referenced schemas that are missing? I think that is more common use case. I was going to solve it with throwing exceptions that contain missing schema inside.\nI think the whole logic, apart from part 4, can exist outside of ajv:\nvar validate = ajv.getSchema(schemaRef);\nif (validate) {\n    var valid = validate(data);\n    continue(valid);\n} else {\n    loadSchema(schemaPef, function(err, schema) {\n        validate = ajv.compile(schema);\n        valid = validate(data);\n        continue(valid);\n    });\n}\nNot sure why this should be inside of ajv to be honest.\n. No problem, thank you for the suggestions.\n1. there is options allErrors: true that will force ajv to continue validation and collect all errors. The default behaviour is to return false on the first error.\n2, 3. I think you are confusing schema compile time with validation time. Or I didn't understand what you meant. My intention was (I can actually do it today) during compilation to throw an error with the first missing schema (that will be the default behaviour). Then you can handle asynchronous loading with the code like this:\n```\nfunction compileSchema(schema, callback) {\n    try { validate = ajv.compile(schema); }\n    catch(e) {\n        if (e.missingSchema) resolveMissingSchema(e.missingSchema);\n        else callback(e);\n        return;\n    }\n    callback(null, validate);\nfunction resolveMissingSchema(missingSchema) {\n      loadSchema(missingSchema, function(err, sch) {\n          if (err) callback(err);\n          else {\n              compileSchema(sch, function(err) {\n                  if (err) callback(err);\n                  else compileSchema(schema, callback);\n              });\n          }\n      });\n}\n\n}\n```\nProbably it will be a bit more elegant with promises. Also it needs some protection against situation when loadSchema returns a wrong schema that doesn't help compiling original schema so the same error is thrown again and again. I may actually include it in ajv - it's a bit not obvious....\n4 I am not sure I understand what you mean by lost. ajv.error will be overwritten by the result of the next validation, either null or the new errors array. If you want to use it you need to save it to some variable. Or did you mean something else?\n. I've added missingRef and missingSchema properties to the thrown error. I am going to either add callback and loadSchema parameters (functions) to compile method or create another method that will do asynchronous compilation loading missing schemas on the way (it will be similar to the code above - try compiling, see what's missing, try again...). It's not directly related to asynchronous validation in #40 though. Compiled schema will be synchronous.\n. @abalmos If compileAsync that I've done in 1.3 is covering it, I will close this PR\n. Thanks, you're welcome.\n. Do you mean for error reporting?\n. It's not that difficult. It shouldn't be in the template in this case if we want to support multiple languages. I can do the support if you are happy to contribute the actual messages once I've done it.\n. Ok, I'll look at it this week\n. That's cool, thanks a lot!\n. Started working on it. @blakeembrey do you think it should be just an option of the validator instance (say i18n: 'fr' ) or there should be a way to make the same compiled shema return errors in different languages?\n. got it. thanks\n. So I guess the whole file with the rest of keywords can be moved to ajv-i18n package that will provide functions to create error messages from errors array created by ajv. And there will be nothing in ajv itself in this case. Do you mind?\n. Good idea actually. Please do.\n. @blakeembrey thanks!\n. @jmtoball have a look at ajv-i18n. It has en, hu, pl and ru locales at the moment. You can contribute German translations of the messages in /messages/index.js file. Let me know if you need some help.\n. done in 4dc6cbecb9efb2cef8bf5d60916b82cf4cf35837\n. @blakeembrey I agree. I've made a separate method compileAsync, so nothing changed in compile method.\nWhile asynchronous compilation is a possible use case - lots of 3rd party schemas where it is not practical to pre-load all of them (although it's quite theoretic for me to be honest), I genuinely believe that asynchronous and custom validations are evil :), with the exception of custom format for strings.\nI think it is wrong to mix JSON-schema validation with business/semantic validation. Although I may be fighting a lost battle here :) - lots of people seem to like the idea of cramming all sorts of validation logic into JSON-schema (at least by reference), disregarding all the negative consequences...\n. Thanks for that! Funny bug that was. I don't know what I was thinking :)  I guess because it's only used in uniqueItems and it's kind of inefficient to use it with objects, nobody hit it so far.\n. I optimised a bit. It's safe (and much faster) to compare with undefined here as the data comes from JSON. I thought to merge two loops in one but it will be only marginally faster when there are the same properties and much slower in all other cases, so I kept them separate.\n. At the moment validate method does not resolve references - it only allows to use references that were previously added via id attributes (both top level and internal). For now you can instead use this:\najv.validate({ $ref: 'my-schema#/definitions/foo' }, {\n    bar: true\n});\nBy the way you don't need the inner id in this case\n. Not really. { $ref: 'my-schema#/definitions/foo' } is just a schema. key is the second argument passed to addSchema method, ref is schema id attribute (there is no need to have both btw, in your case you don't need to pass the second parameter at all).\nI was thinking that validate should really resolve reference in the same way as it happens during the schema compilation.\n. yes\n. By the way, not sure if you saw it in readme - it's faster to use a compiled validation function than validate method.\nAlso if validate resolves the reference it most likely will need to compile the schema. This feature can be implemented by simply replacing string with the schema (as I did above) but this approach has the performance cost of an extra function call in compiled schema.\n. Thank you :) yes _getSchema, but you need to use resolve function... At the moment it is too tightly coupled to compile, but that's the one.\n. Actually using getSchema also returns the same function that is returned by compile - it can be used after all schemes are added\n. in 4.5.0\n. There is also a simple library object-path that can be used to find an object by path. Another approach is to use eval:\nvar data = { /*...*/ };\nvar dataPath = '.assetGroups['166'].previewUrl';\nvar value = eval('data' + dataPath);\nIt is most likely faster than a library that parses and iterates path.\nThere is also an option verbose that would include both the related schema and the data object in the error.\n. What is probably wrong here is that the number should not be in quotes. Although it makes no difference for JS, they are unnecessary. So renaming the issue...\n. There is a package ajv-cli by @jessedc that does it.\nIf it misses some features it should be easy to add there.\n. :)\n. Ah great, thanks. I suspected there will be some side effects from not compiling schemas when they are added (that was done to allow mutual references between schemas), but I couldn't find any situation when it happens. I'll have a look.\n. @cartant thanks for help, the fix was trivial thanks to your comments. Sorry it took that long :) Issue #53 was also fixed with this change, it turned out to be the same issue.\n. Interesting. I guess there is no protection from it. Those calls should be queued and while the one is running another should not start. And by the time the first one finishes, the schema will already be compiled so that the second will return immediately. The solution is to queue inside ajv, the workaround is to queue outside.\n. I've improved it. It doesn't queue calls, but it makes sure that each schema is only loaded once even if it is requested multiple times because of concurrent calls to compileAsync.\n. Thank you @blakeembrey !\n. this is contradictory to the wish to have a separate error for each required property and to have missing property in dataPath (e.g. https://github.com/epoberezkin/ajv/issues/18). I think the better solution is to change the message to data.name is a required property, i.e. to change the message rather than the dataPath\n. Thanks!\nYou've done it all correctly. I am just still thinking how to address this issue better... The old messages are better in case they are used separately (that's how I use them). In case they are connected using errorsText they are obviously wrong - that's what your fix is improving... To be honest I wasn't fully sure about the changes that addressed #11 and #18. But I didn't think about the errorsText at the time (not sure if it even existed).\nYour first solution may be better and in this case missingProperty can be made available as some additional parameter to those who needs them. There already exists an additional property of the error object params that is added if i18n option is used - these params are used to construct internationalised messages. So maybe I should have dataPath pointing to the object rather than to the property and rename i18n option to params - they can be useful for other use cases too.\nReverting dataPath to point to object for both required and additionalProperties keywords will be a change that breaks backward compatibility for some users, but probably it is worth it because it is more correct - for these keywords the error is in the object, not in the property.\nWhat do you and others (@blakeembrey, @shachr, @cdmcnamara) think?\n. I merged the message change while I am thinking what to, message is wrong anyway in the current situation. I am thinking more and more that dataPath should point to the object (that's where the problem is) and some extra property should have the name of the missing (or additional) property.\n. @blakeembrey another argument for switching dataPath to point to object rather than to property is that at the moment dataPath and data in error point to different things (data - object, dataPath - property). In all cases apart from required and additionalProperties they point to the data currently validated... So I think in 2.0 I'll preserve existing behaviour with some option (for backwards compatibility) and the default behaviour will be to make dataPath point to the object and report the property in params.\nStill not sure what's the better thing to do :)\n. duplicate of #42. Or did you mean something else?\n. @cemtopkaya closing as duplicate, please reopen if you meant something else. Thank you\n. There is compileAsync method that uses loadSchema function from options passed to the instance constructor for actual loading. Please implement any loading mechanism you want using this option.\n```\nvar Ajv = require('ajv');\nvar ajv = Ajv({ loadSchema: loadFromRedis });\nvar KEY_PREFIX = 'schemas:';\nfunction loadFromRedis(uri, cb) {\n  redis.get(KEY_PREFIX + uri, cb);\n}\najv.compileAsync('http://mydomain.com/myschema.json', function(err, validate) {\n  var valid = validate(data);\n});\n// some time later the schema is available in memory:\nvar valid = ajv.validate('http://mydomain.com/myschema.json', data);\n``\n. @cemtopkaya please reopen the issue if the above is not covering your use case. Please provide more information in this case.\n. Thanks, I will have a look\n. There are two issues here.\n1. The string isn't a valid resource address (e.g. http://example.com) according to JSON-schema standard, that is a bit contradictory about what a valid URI is, but the test suite they supply mandates the presence of '//' (you can check [formats file](https://github.com/epoberezkin/ajv/blob/master/lib/compile/formats.js)). For your kind of URN/URI you can either add a custom format or redefine URI format withajv.addFormat('uri', /some_pattern/).\n2.ajv.errorsText()without parameters will return errors as a string only if you usedajv.validate()rather than a compiled function (see examples in readme). Using compiled function is recommended as it is a bit faster. In this case you can access errors either viavalid.errors(an array) or viaajv.errorsText(valid.errors)(a string).\n. @nichtich with the latest change from @johanlelan URIs need to have at lease a single \"/\" character (was two slashes). Please feel free to reopen if my suggestions above are not working for you. Thanks\n. :+1: It would be really great if you could suggest changes to the regular expressions ajv uses (in PR or just here).\n. Cool, thanks!. Can be just/.../i`\n. The problem with that regex is that it also validates URI fragments (like 'abc'), and it shouldn't... It will fail the test. I'll see how it can be changed so URI fragments don't match.\n. It would be good to add some test that would fail without this change here: https://github.com/epoberezkin/ajv/tree/master/spec/tests/issues\n. The standard for URI is RFC3896 according to this http://json-schema.org/latest/json-schema-validation.html#anchor123 \n. Thank you. It's merged :) I will publish in the evening\n. @johanlelan It's on npm\n. Thank you :)\nThis line caters for a rarely used ~~ID substitution~~ resolution scope change (http://json-schema.org/latest/json-schema-core.html#anchor27) where ID in the schema becomes a base ID and all URIs inside are resolved relatively to this ID. I don't think that this is a correct fix... The correct fix would be to ignore id properties inside objects that are not schemas (the value of properties keyword is one such object). Simply replacing id with part will break resolution scope change logic in some cases.\nThe fact that nothing was broken is interesting indeed - it means that resolution scope change has insufficient test coverage (there is one test for this I think).\nI will create issues\n. No problem, I'll probably look at it today evening\n. @quilicicf It's fixed and published to npm.\n. ajv is synchronous. Or am I missing something? compileAsync can be used with yield with partial that returns thunk\n. Sorry. compileAsync is ajv method, the only one that is asynchronous\n. Thank you very much for the feedback!\n\nWhen accessing ajv.errors (or ajv.errorsText I presume as well) in a callback, promise or any tick after the one in which you've called ajv.validate there is no guarantee that ajv.errors contains the set of errors you might expect.\n\nThat is correct, the errors are overwritten every time ajv.validate is called. If you plan using these errors you need to copy the reference to some var in the same tick before the next validation is called.\n\nWhy not have var valid = ajv.validate('testSchema', data); return a result object containing errors, errorText etc. (a sort of ValidationResult object)?\n\nFor performance reasons - it would be slower. In most validation calls the data is valid so you don't need to access errors. Creating a wrapper object every time you need to return the result makes it substantially slower.\nAlso, you may have seen in readme that although there is ajv.validate method for convenience, it is faster using precompiled validating function (ajv.validate calls it anyway but it has the cost of the lookup plus an extra function call, so if the schema is large the difference can be negligible but on the small schemas it can be more than twice faster). If you use one ajv instance per app with all schemas in one place it could be more convenient to use ajv.getSchema method (that accepts the schema ref) than ajv.compile(that needs the schema itself) - they both return the same compiled schema function (it only gets compiled once in all cases).\n\nAnother option to avoid misuse of the function is to rename ajv.errors to ajv.lastErrors. Not that I like that name, but it makes its intended use more clear.\nI understand these changes would be backwards incompatible, but it might be worth a thought if planning a big new release.\n\nYou are right here. Maybe on the next major version change... I will make it clearer in readme that ajv.errors (and validate.errors) are overwritten and have to be used in the same tick.\nThanks again\n. I added note in readme. errors is the same property name that is used in other validators returning boolean rather than the object (e.g., is-my-json-valid and in jsen), so I will keep it like this for consistency sake.\n. Please see https://github.com/epoberezkin/ajv/blob/master/FAQ.md#ajv-api-for-returning-validation-errors. Just be aware that async requires a non standard keyword in the schema at the moment.. I can look later but I suspect that the issue may be in json-stable-stringify\nIf you pass your object to it directly does it work?\n. It seems like it is - this file throws this error - https://github.com/substack/json-stable-stringify/blob/master/index.js\nIt probably thinks that the object is circular because the same reference appears in it twice, although it appears in different properties so it can be stringified ok. Passing it to JSON.stringify makes all references unique\n. It would be good if @substack merged the PR that fixes the issue. Or I could switch to using the fork of json-stable-stringify\n. I'd say it's 20 months...\n. dataPath is empty because the validation error for dependencies keyword happens on the top level.\nAt the moment there is some inconsistency with how the errors are reported for additionalProperties and required keyword - instead of reporting the level at which the validation failed, they report the additional (or missing) property in dataPath. See #11, #18 and #55.\nCurrently you can use {i18n: true} option as a workaround - it will make both properties available in params property of the error object.\nYour example in node REPL: https://tonicdev.com/esp/56317ddbd8fa530d00148e54\nPlease note that at the moment it will add all properties that should be present, not only those that are missing, so if you need to have more than one dependency it may not be what you need. I plan to address it soon in version 2.0 (#69)\n. No problem, let's keep it open until it's resolved in v2 or maybe earlier. And thanks for the feedback :)\n. @jsdmc You can create custom messages with ajv-i18n I think. It's a bit clunky as you either need to fork or to supply functions rather than templates, I'll think how to improve it. Also you can generate any messages you want from available information in error objects - at the moment you have to use a18n option to have additional info in errors.\nRe custom validation functions I am kind of fighting this trend :), in a losing battle I should admit. I still tend to believe that it is much better to keep all custom validation outside of JSON-schema to preserve schema compatibility and portability. When you add custom keywords your JSON \"schema\" is no longer a JSON-schema... But many people seem to want it anyway. So maybe I will do it. No asynchronous validation though at least for now :)\n. @jsdmc @simon-p-r custom keywords are available in version 2.0 (npm install 2.0.0-beta.0 to use them).\n. > is the function registered for custom keyword synchronous and have to return a boolean to indicate it is valid?\nYes, it is in readme I think... Maybe not, I will add then. EDIT: here actually.\nIt can also return custom errors by assigning array of errors to .errors property of validation function (whether supplied in definition or returned from compilation function). If it doesn't, the standard error will be used when the validation fails.\n\nWhat is this parentSchema that I can access as 3 parameter?\n\nSee the example for range and exclusiveRange keywords. Inside the function for range keyword you may want to access parent schema to change its behaviour based on some other keyword on the same level. Many standard keywords use the same logic.\n\nI build each key of my schema with z-schema from a definition so I can reuse each piece, will this help me?\n\nI don't understand... Some example may help\n. Thanks, I'll have a look\n. https://tonicdev.com/esp/563b71a6b859fd0c00ac4bf1\n. Essentially this schema doesn't compile:\n{ \"$ref\": \"http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0\" }\n(hash ref inside hash ref in remore ref)\nEDIT: It does compile...\n. Yeah, I like Tonic too - very convenient to test stuff quickly, especially with ES7 support. I noticed the link in npm (\"Test ajv in your browser\") and asked them how I can add my own code to the link. They said it's not possible yet but they can \"special-case\" it. And they did :)\n. Ok, I get it now.\nThis does not compile:\n{\n  \"definitions\": {\n    \"a\": { \"$ref\": \"http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0\" }\n  },\n  \"properties\": {\n    \"b\": { \"$ref\": \"#/definitions/a\" }\n  }\n}\nAnd this does:\n{\n  \"definitions\": {\n    \"a\": { \"$ref\": \"http://json-schema.org/draft-04/schema#/definitions/positiveInteger\" }\n  },\n  \"properties\": {\n    \"b\": { \"$ref\": \"#/definitions/a\" }\n  }\n}\n. Published 1.4.9 with the fix\n. You're welcome :)\n. Sorry, I don't think I understand what is the purpose... To use schema to modify the data being validated? Could you please explain a bit what is happening there?\n. I see. I'll think about it. I still have to digest the idea of custom validation keywords... Custom transformations are the next step.\n. If I do custom keywords, they will be just functions, essentially interpreting their schema rather than compiling it. Given that the compiled schema is a single function in most cases allowing custom keywords that would participate in this compilation is a bit fragile. One can fork of course and implement the custom keywords in the repo with tests and such - don't think many people will go this way though.\n. @Santinell custom keywords are available in version 2.0 (npm install ajv@^2.0.0-beta to use them). I guess you can use them for data transformations as well, with caution :)\n. Just make sure you modify the same object instance if you want to change data. It won't be possible for scalar data of course.\nFor some more complex transformation inline keywords can be used where you can access the parent data or the whole data object.\n. b92e6e86a78092e64c9938874395ec578c739d12\n. Duplicate of #42. Not yet, but it's in the plan :)\n. Ah, interesting, thanks. I will look at this package... I though to do it after async validation but I will do it before. Without catering for edge-cases that are not that important it's pretty easy actually. And it will be much faster, as it will be compiled into the validating function.\nClosing this one now, feel free to post to #42 if you have any questions\n. For oneOf to fail either none of the schemas should validate (in which case there is no much point in adding refs) or more than one schema should pass (in which case the error should contain IDs of passing rather than failing schemas). It also reports all the underlying errors in failing schemas in case oneOf fails.\nMaybe in case when more than one schema passes it should not report underlying errors? Because the issue here is not failing but passing too much...\nI can add some extended error information in params to indicate why oneOf failed.\nGenerally I never used oneOf myself as in most cases anyOf does the same job but faster, because it doesn't have to validate all schemas to pass, it only needs to find the first passing schema. And the condition that only one schema should pass is usually implicitly satisfied by schema design.\n. @Duncan00 It would actually help if you post your schema and data and what output you are expecting.\n. In the first error schemaPath would be \"/success#/properties/status/enum\", in the second \"/fail#/properties/status/enum\", in the last related to oneOf, \"/do_somethings#/oneOf\". Would it help?\nThese messages seemed a bit unnecessary because in most cases it is clear from keyword and schema what failed.\n. Alternatively, in the last error there are empty params (from 2.0.0 all errors have params by default) where I could add:\n{\n      \"dataPath\": \"\",\n      \"keyword\": \"oneOf\",\n      \"message\": \"should match one schema in oneOf\",\n      \"params\": {\n        valid: [],\n        invalid: [0, 1]\n      },\n      \"schema\": [\n        {\n          \"$ref\": \"/success\"\n        },\n        {\n          \"$ref\": \"/fail\"\n        }\n      ]\n    }\nThat seems more useful to be honest, as there can be multiple errors in each subschema so it will still be difficult to understand which one failed.\n. Well, you can imply :) For example in your case one schema has value \"success\" in enum and another \"fail\". But I agree, there can be many cases where the error can be the same and it may not be clear from which schema it is coming.\nOne may argue that this means that schema should be redesigned :) But in many cases you don't own the schema and can't do anything about it. So having schemaPath would remove the ambiguity. As it will have some performance cost it should be available with some option, probably verbose option or maybe some other. Not this week I am afraid though, 2.0 took lots of time... So PR is welcome. Tests are essential :) \n. @Duncan00 I added schemaPath to errors in 2.0.4. At the moment it is JavaScript path, I'm going to make it dependent on jsonPointers option, or maybe for schema it should always be JSON pointer (#80)... But can already be useful.\n. yes. [\"success\"] is schema value, not schema path (json-pointer). If you add verbose option you will also get schema and parentSchema in errors.\nThe latest version is 3.1.1, you should be able switch to it. There some changes but you most likely won't be affected.\nEDIT: I understand now what you mean. It doesn't include the full schema ref, only relative. I will think what can be done here.\n. Seems like a bug related to inlining of remote refs (#6). Thanks for spotting. Will be fixing it.\nAs a workaround please use option inlineRefs: false - it's working with it as it should.\nSee it here: https://tonicdev.com/esp/56537f9f44348f0d004d1c4a\nThanks!\n. Interestingly, the issue doesn't happen without verbose property, so removing { verbose: true } is another workaround.\n. @dancasey I understand the problem now. I'll implement a solution soon.\nThere are three workarounds at the moment:\n1. use  inlineRefs: false (worse performance)\n2. do NOT use verbose: true (but ~~may not work for you~~ you may need the option)\n3. use allErrors: true (may be even worse performance than 1, but if you want to collect all errors anyway, that may be the best for you).\n. When I wrote \"may not work\", I meant that you may need those properties :) It will always prevent the issue though.\n. fixed in 2.0.3\n. Yes, I thought about it. The problem is version compatibility... ajv 1.4 needs ajv-i18n 0.1 and ajv 2.0 needs ajv-i18n 1.0.\nIs there a better way to enforce it than peer dependencies?\nStarting from npm version 3 peer dependencies are optional - they are not installed, so I thought this forced installation issue will go away...\n. I will remove then - I also didn't like this red box... You are right that peer dependency in one place is enough.\n. Does switch from v5 proposals look like something that you need? Because it is coming soon :)\nOtherwise you have two options. If you want to do with compiled keyword it is definitely simpler, the only downside is that you'll have functions calling functions... You simply need to compile subschemas into separate functions and conditionally call them. If you want to use inlined keyword that's more tough - you'll need to do the same as ajv does - recursively call code generator for each schema and inline this code in a switch. Not easy, but much faster validation.\nThe trick for compiling keyword here is in error reporting but all you have to do is to pass through dataPath that is passed as a second parameter to validating function (I need to document it probably)\nThe compile option is here:\n``\najv.addKeyword('schemaMap', {compile: function(schema, parentSchema) {\n  var validators = {};\n  // I am assuming there are schemas inside schemaMap,\n  // if you need to pass refs just use{$ref: \"ref\"}`\n  for (var key in schema) validators[key] = ajv.compile(schema[key]);\n  var keyProperty = parentSchema.schemaMapProperty; // up to you of course what to call it\nreturn function validate(data, dataPath) {\n    var key = data[keyProperty];\n    var v = validators[key];\n    var valid = v ? v(data, dataPath) : true; // if no match, assume passed\n    validate.errors = valid ? null : v.errors;\n    return valid;\n  };\n}});\n```\nAnd it works: https://tonicdev.com/esp/56579a6ae505840c00c1953b\n. I would say that your idea looks more like a JavaScript switch than v5 proposal\n. I think it should be a bit changed along the conventions... I'd put all the logic in one keyword and JSON pointer inside data instead of property name. E.g.:\n{\n    schemaSwitch: {\n        switch: { $data: 'JSON pointer in data' },\n        schemas: {\n            Human: {...},\n            Hipster: {...}\n        }\n    }\n}\nOn the other hand it can be easily achieved with a combination of $data and $ref keywords so probably no need for this construct:\n{\n  id: 'http://myschemas.com/schema.json#',\n  definitions: {\n    schemas: {\n      key1: { id: \"key1\", ...},\n      key2: { id: \"key2\", ...}\n    }\n  }\n  anyOf: [ { $ref: { $data: 'JSON path in data mapping to the key value } } ]\n}\nAlthough the first is clearer and will probably more efficiently compile.\n. Re your inlined implementation, the whole point of it is to avoid using functions, you just have to use unique variable names...\n. But type just checks type and this schema is invalid... You need to validate against schema.\n. Actually the better way to express it without any custom keywords is:\n{\n  anyOf: [\n    {\n      properties: {type: {enum: ['Human'] }},\n      ...\n    },\n    {\n      properties: {type: {enum: ['Hipster'] }},\n      ...\n    }\n  ]\n}\n. One day... That's not trivial and will increase the code size twice. Not sure it's worth it, particularly for the browser. Probably should be a separate bundle with $data support. That $data is not a keyword, it's a part of data that can be used in place of any value/schema, so compiled code will have to interpret the schema in such places. A simple solution is to compile the whole schema every time if it has $data, but it's extremely inefficient.\n. Given that there is no need to support $data for such keywords as properties and items, and wherever the schema is needed, it is quite easy actually.\n$data will be supported for the following keywords:\n- [x] multipleOf\n- [x] maximum\n- [x] exclusiveMaximum\n- [x] minimum\n- [x] exclusiveMinimum\n- [x] maxLength\n- [x] minLength\n- [x] pattern\n- [ ] additionalItems (boolean) - ?\n- [x] maxItems\n- [x] minItems\n- [x] uniqueItems\n- [x] maxProperties\n- [x] minProperties\n- [x] required\n- [ ] additionalProperties (boolean) - ?\n- [x] enum\n- [x] format\n- [x] formatMaximum\n- [x] formatMinimum\n- [x] exclusiveFormatMaximum\n- [x] exclusiveFormatMinimum\n- [ ] patternGroups maximum/minimum\n- [x] constant\n. That's the test: https://github.com/epoberezkin/ajv/blob/master/spec/v5/%24data/constant.json\nI will have a look why it's not working\n. 1. Your schema is incomplete - they should be inside \"properties\". Maybe that's how you do it...\n2. It's minLength and maxLength\n3. Maybe you expect the value in \"secret-repeat\" to match the schema in \"secret\"? That's not how it works then. $data puts the value of secret into constant, so it only requires the properties to be equal in this case.\n4. Do you use \"v5\" option?\nThat's the working example: https://tonicdev.com/esp/56840ca4b7ce7b0d00e6f573\n. Indeed, in the defaults... It was never the intention. Thanks for spotting.\n. @naturalethic if you're still interested to support ajv development :), there is a bounty to implement custom error reporting: https://www.bountysource.com/issues/30029477-custom-error-messages\n. Thank you! I am hoping somebody will do it at some point :)\n. Thanks!\n. Yes, let's do it. I suggest duplicateIds with the value ignore to log error instead of throwing exception. compile, validate and validateSchema should be affected, but not addSchema\n. Not validateSchema of course, it doesn't do any checks on id field\n. Added option addUsedSchema in c99d6751adca80869ae92567685e21e80cd4ea6e (3.3.0). It's true by default but I'll make it false by default in the next major version.\n. It is also the case in v8 that 53.198098 / 0.0000001 = 531980980.00000006, although the precise value is 531980980.\nThere is no efficient way to improve integer arithmetics. Also I am not sure what is the practical reason to use \"multipleOf\": 0.0000001. If the number of decimal digits is really important maybe you can use a string with pattern instead...\nAlso you probably could define modulo precision for multipleOf as an option. It can be an option multipleOfPrecision: N (N is a positive integer). And in case it is defined, it will check that the modulo result is within -1e-N ... 1e-N range (instead of being exactly 0).\nIf that's what you want maybe you could make a PR with such option.\n. @blakeembrey thanks, it's interesting. Never heard of it :) The disadvantages are that it's ES6, so won't work in node 0.10 (we still use it...) and in some supported browsers, and that the above would fail anyway: 53.198098 % 0.0000001 is greater than Number.EPSILON.\n. yes, 1e-7 will work too (it's compiled so can be x > -1e-{{=precision}} && x < 1e-{{=precision}} - modulo is negative for negative numbers)\n. Yes, same story here. 4.18 / 0.01 = 417.99999999999994. 4.18 % 0.01 is 0.01which is really bad... (multipleOf doesn't use modulo though, it compares the result of the division with parseInt() of this result).\nThe option I suggested would resolve this issue and probably it should be set to 12 by default...\n. It passes with 6. multipleOfPrecision is explained in docs, see the docs on the information about this option.. You can't really compute this N, it just determines how close the result of division should be to a nearest integer number. The number of correct fractional digits depends on the number of digits in the integer part. So the correct N would depend on the range of the division results. With the divider 1e-8 you can't have too many fractional digits as the result is quite large...\nThere can be a better algorithm than Math.abs(Math.round(division) - division) < 1e-N, e.g. see #652 submitted today too.. It would pass with multipleOfPrecision equal to 1 or 2. multipleOf is not really created to determine the number of digits in the fractional format. If you really need to enforce a certain number of fractional digits you can consider using a string and patterns to validate it, rather than a number.\nWith a number, particularly a large one, multipleOf will not give you a precise result. It's the limitation of JavaScript number precision.. Fixed in version 2.2.2. Thanks!\n. btw, it also affected all properties that contain replacement patterns or end with \"$\".\n. By default referenced schemas are inlined in the compiled code (for performance reasons), in which case you will not have it. Try using option inlineRefs: false. In any case, #80 should resolve it.\n. schemaPath is not in its final state indeed. jsonPointers only affects dataPath at the moment. At the moment error messages can be based on dataPath.\n. Thanks.\nThe immediate workaround I can suggest for error reporting is to either use some documented JSON-schema meta property (title, description or id) or to introduce some application specific one (e.g., x-error-info). If you use verbose: true the reference to the schema that triggered the error will be available in the error object and you can access the information you need.\nFor example, in your case if you change the schema in this way:\n```\nvar schema = {\n   // ...\n    \"definitions\": {\n        \"macaddr\": {\n            \"id\": \"#/definitions/macaddr\"\n            \"type\": \"string\",\n            \"pattern\": \"^c\"\n        }\n    }\n};\nvar ajv = Ajv({\n    //...\n    verbose: true\n});\n```\nthen error.schema.id will be \"#/definitions/macaddr\", which is what you need.\nYou can even set id in this definition as \"#macaddr\" and then you can refer to it using { \"$ref\": \"#macaddr\" }.\nThere is still a plan for #80 to keep track of the current schema path in JSON-pointer format. The need to correctly handle referenced schemas in several scenarios is a complication and the reason I didn't have time to do it yet, but I don't think there are any pitfalls. So it'll get done.\n. You are right, parentSchema would do the trick if it existed :) I'll see what I can do.\n. @ozum thanks for the patience :) I thought parentSchema is useful in any case so I added it to errors when option verbose is true (in version 2.3.0). schemaPath will be improved soon, but for now you can use the approach I suggested. I hope it helps.\ninlineRefs and jsonPointer options don't affect it - parentSchema is simply the reference to the schema that contains the keyword that failed validation.\n. One approach is to create your own meta-schema (that would have minProperties: 1, I guess), add it to ajv (with addMetaSchema) and to use its id as $schema property in your schemas. See validateSchema reference. Although I don't think that limiting the standard is generally a good idea - this approach is good for extending it. Also bear in mind that if you prevent top level schema from being {} then subschemas won't be able to be empty too - schema definition is recursive.\nI am not sure why do you need it though. Are your schemas supplied at run time? You can simply run additional validation on them with some simple schema if that's the case.\n. Yes, they will fallback. Rightly so :)\nIn any case, I think the better approach is to impose any additional requirements via some additional schema (or even without schema) than to modify meta-schema. For example, you can validate all your external schemas with {minProperties: 1, additionalProperties: false}. The advantage is that the internal schemas will still be able to be empty (and it's a very useful thing in some cases...).\nIf you really must change the default meta-schema nobody can stop you from using the option meta: false, and then adding your own meta-schema with the same ID as the default one has, using addMetaSchema(schema, id, false) (the last false will prevent it from being validated regardless the lack of the option that prevents schema validation - there will be nothing to validate it against yet). I don't like it though as you could guess :). I think the first approach is cleaner.\n. I will make this api public, it's just changing readme... It can be useful in some cases.\nI don't like the idea of making such an option though. I will think about it.\n. I can now see several other use cases for it. So I think it can be done.\nI think that this default meta-schema should be passed in meta option as an object (but v4 meta-schema and v5 meta-schema (in case v5 option is true) still should be added) . So it can't be changed within ajv instance.\nThe following has to be done:\n- [x] draft 4 meta schema should still be added if option meta is schema\n- [x] v5 meta schema should still be added if option meta is schema and option v5 is true\n- [x] this meta schema must have a unique ID (different from draft 4 / v5 meta-schemas id), ajv should throw an exception otherwise\n- [x] this default meta-schema will be validated against draft 4 or v5 meta-schema?\n- [x] update readme\n- [x] test(s) in options.spec.js: correct meta-schemas are used for the instances with/without v5 depending on the $schema keyword absent or present\n@trikadin if you still need this feature and have time to do it I would really appreciate it.\n. Yes, that's the reason. At the moment constant is defined as \"macro\" keyword, so it simply replaces constant with enum. I plan to re-write it as \"inline\" keyword.\n. I've just added this idea yesterday if you've noticed :) I support it... To support it in ajv it has to become higher priority than other unsupported features - it will take some time.\nThe motivation for the keyword is that that many bug reports and feature requests I saw were related to people trying to generate custom error messages based on some information from the schema. So I thought that having errors explicitly defined in the schema would make their life much easier.\nSome feedback from other people there would be useful too.\n. errorDataPath option is created mainly for backwards compatibility, I wouldn't recommend using it for any other reason. Without it dataPath is the current level in data (\"\" simply means top level). Depending on the keyword you are using you can get all the required information (missingProperty or additionalProperty) in error.params.\nIf you use verbose option there is also error.data that is the data currently validated. This data is consistent with dataPath. If you use option errorDataPath: \"property\" data and dataPath become inconsistent.\nWill add it to readme...\n. Thanks a lot for spotting! Fixed in 3.0.4.\nWeird it survived that long, I guess \"dependencies\" is rarely used, especially with more than one property. Also false positives are often missed.\n. Thanks.\nIt can be done.\nYou could try using custom keyword (say coerceType), but custom keywords are validated in the end, after all other keywords, so the type coercion it could do would be too late. So to do it with a custom keyword, there should be some option in keyword definition to add it to the beginning rather than to the end of keywords list... I don't like it to be honest.\nThe option coerceTypes could be implemented quite easily. Type validation is in this file: https://github.com/epoberezkin/ajv/blob/master/lib/dot/validate.jst . You have to add additional code to compiled function to coerce type if the option and type keyword are present (plus remove the code that validates types without coercion, plus tests :). laxMode would be much more problematic as it would have to affect most keywords, so probably it is not a good idea. PR for coerceTypes is welcome.\n. Much appreciated, good luck. Any questions - feel free to ask.\n. You need git submodule update --init\n. I don't see all the code/error stack. Is it compile time or validation time, what is the line/code that triggers the error?\nWhat I see wrong in the snippet (not related to the error) is that it assumes it is always possible to coerce type. But depending on data type it may not be possible to coerce it and if it isn't it should still create type error, so in case you have it.opts.coerceType option the decision whether to create error is made at validation time.\nAlso you won't be able to coerce type on the top level of data as there is no parent data to update, so in case it's top level it should simply fail validation .\nBut I guess it's work in progress...\n. :)\n. you need a previous level data + current property which is something like {{='data' + ((it.dataLvl-1)||'') + it.util.getProperty(it.dataPathArr[it.dataPathArr.length-1]) }} (assuming you are in validate.jst).\nOn the root level (Edited: it.dataLvl is 0) you simply can't do it (or maybe you can but the caller won't see the change, although maybe it's fine - it would still pass validation. In this case it's just data).\n. not sure I follow\n. level 0 is the data passed to validate function. For example the schema is { type: 'number' } and you call var data = '0'; validate(data) that should pass in case of coercion, but the caller's variable won't be updated.\nIf data passed to validate is an object then its properties are level 1 already.\n. Btw, maybe you should be able to coerce array to object (together with length property), and object to array (if all properties are strings of numbers). But again, if it's a top level object/array, the caller won't see the change. But maybe it's overkill...\n. Ok, thanks\nI think collecting \"coercions\" is a bit overkill, too much code for something of limited use... Top level is a theoretic case, usually objects/arrays are validated, but for consistency it is better to coerce it even though it won't be returned to caller. Also easier to test coercions.\nobject <-> array coercion is also a bit too much.\nWhat should be coerced I think should be similar (but not exactly the same) to what JS coerces:\n- [ ] boolean <-> number/integer (false <-> 0, true <-> 1, not 0 -> true)\n- [ ] boolean <-> string ('false' <-> false, 'true' <-> true, 'everything else' -> false)\n- [ ] boolean <-> null (false <-> null, true should fail to coerce to null)\n- [ ] string <-> number (string should fail to coerce if it is not a number)\n- [ ] string <-> integer (string should fail to coerce if it is not an integer)\n- [ ] string <-> null ('null' <-> null, '' -> null, other not empty strings should fail to coerce to null)\n- [ ] number/integer <-> null (0 <-> null, not 0 should fail to coerce to null)\n. As usual, everything is more complex than it seems on the surface\n. \"null\" is a type in JSON-schema standard, so it can be coerced to if the schema has { type: \"null\" }\nBy the way, the whole thing gets complicated by the fact that there can be multiple types in type keyword... So I guess it should try to coerce in order, and be happy with the first that works.\nSo null value won't be valid for any type of data, unless you use, e.g., { type: [\"string\", \"null\"] }\nAnd only coerce if it matches none of the types... omg\n. JavaScript thinks it shouldn't coerce... English thinks it's the same... I think it's either nothing should coerce to null (like in JavaScript) or all of the above.\nBut if you try to stay closer to JavaScript then \"false\" shouldn't coerce to false... Or maybe coerceType option should have values true / \"natural\" and \"JS\" :) ... That's a Pandora box that coercion.\n. Please don't coerce array. validate.jst is used to generate code for any internal schema, if you mean types there.\n. validate.jst generates code for all subschemas, why do you need to worry about arrays in particular?\n. If the schema is as above, the first subschema applies to the 1st item only, and so on. validate.jst will be executed once for each subschema to generate code for each of them.\nSo for the first item it has to cast to integer, but data matches already; for the second - from string to boolean, for the third - from boolean to string.\nSo what is the problem?\n. The problem of multiple types exists though if types keyword is an array. In this case you have to match if  data matches any of them and if not try to coerce in order (see above).\noneOf issue I would simply disregard, if each schema in oneOf has type there potentially will be multiple coercions but given that they are all reversible I don't see it as a problem. Although depending on coercion rules string value may change after it's coerced to boolean and back for example...\n@darrin oneOf/etc. with different types in subschemas is another reason (in addition to having a generic solution) to implement coercions for all scalar types and not just for strings. And probably they should be one-to-one relationships so that coercing to any type and back does not change the value.\n. No problem.\n. So I'll do it then\n. In 3.4.0\n. :)\n. It's the same as #47 really (although not obvious from the title)...\nThe workaround is:\n// assuming xxx.json is added\nvar validate = ajv.compile({ $ref: 'xxx.json#/definitions/a' });\n. Closed as duplicate\n. Ah, you want to get some part of the actual schema, not a validation function that this part compiles to (that's what I thought)? There is no public api for that... getSchema always returns a function.\n. >  I think it's impossible to get a part from current file like $ref: '#/definitions/a', I got can't resolve reference #/definitions/base from id #\nCan you post the whole schema/code? Because that should be possible\n. Will be resolved together with #292\n. You need to define a custom keyword for that.\n. See instanceof keyword in ajv-keywords\n. Not in ajv at the moment. You can create your own messages based on error.params. How would you envisage defining them I wonder?\nMy idea was this: https://github.com/json-schema/json-schema/wiki/Custom-error-messages-(v5-proposal), but I am not sure yet what the templating approach should be. I'd like to have something like relative-json-pointer-expression, to be honest, that would include interpolated strings.. yeah, I saw it. It won't be exactly that, for sure.\n. I am thinking about implementing invalidMessage and requiredMessage as custom keywords and add them to ajv-keywords. This way those who need this functionality can use those keywords without polluting the namespace and increasing the size of ajv for everybody else.\nThese keywords will analyse errors collected so far for the same property/item and if it was invalid/required the error will be added. Then it's possible to filter those errors out (using keyword property of the error object).\nWhat do you think?\n. The keyword schema is indeed accessible, but depending on the format of this schema the keyword can do more - e.g., it can have different errors for different rules or maybe it can merge and remove collected errors into one error.\nBut you are right, on a simple level all that's needed is to add some info in the schema using any keyword and to access it via error object to create the list of application specific errors.\n. @crkepler The suggestion above by @claudio-viola can be helpful. In any case this functionality will be implemented as an [optional] custom keyword. What is the syntax for custom errors used in revalidator? I don't see it in the repo.\nAlso revalidator doesn't seem to be particularly close to the standard (looking at the docs and at the benchmark). \n. Thank you. I can also see in revalidator test that it supports messages keyword to define keyword-specific messages.\nSo I am considering implementing custom keyword errorMessages that can be a string or an object.\nIf it's a string \"error_message\" and the validation fails on the current level it will add an error object:\njavascript\n{\n  keyword: 'errorMessages',\n  message: 'error_message',\n  params: { keywords: ['...' /*, '...', ... */] } // failing keywords\n  // other properties as usual\n}\nIf it's an object, then it's keys are keywords and the values are strings with errors for each keyword (a bonus would be to allow templates referring to the keyword schema and data values). required and dependencies keywords are special, they should also allow property specific messages (as there is no such thing as \"required\": true in draft 4 and instead the array of properties should be used on the object level).\njson\n{\n  \"properties\": {\n    \"size\": {\n      \"type\": \"number\",\n      \"minimum\": 4,\n      \"multipleOf\": 2,\n      \"errorMessages\": {\n        \"type\": \"size should be a number\",\n        \"minimum\": \"size should be bigger or equal to 4\",\n        \"multipleOf\": \"size should be even\"\n      }\n    }\n  },\n  \"required\": [\"size\"],\n  \"errorMessages\": {\n    \"required\": {\n      \"size\": \"size is mandatory\"\n    }\n  }\n}\nIn this case instead of adding additional error objects, the keyword would add the property errorMessage to them (it's better than replacing message property as it would still allow functions such as errorsText produce meaningful results and also i18n would not replace errors in those additional properties.\nOr maybe it's better to always add additional objects - they can be easily filtered out. Need to think about it.\nThis custom keyword will be defined in ajv-keywords package so it would be quite easy to use.\nSuggestions? @amcdnl @Xamage @joaoreynolds @claudio-viola @crkepler \n. Or maybe even in a separate package ajv-errors, ajv-keywords would stay for custom validation keywords then...\n. About the latter, custom error messages for different validation failures, not necessarily based on a single keyword. Custom keywords are already supported.\n. @danielanteloagra to change the error messages you need to process them in your code after validation, there is no other way at the moment. You can look in the code that ajv-i18n package uses for this purpose and follow the same pattern (ajv-i18n doesn't allow defining your own messages at the run time, but it can help understand how to do change the validation messages).. This issue is a plan :). @crkepler https://github.com/epoberezkin/ajv-errors/blob/master/SPEC.md - let me know what you think. @crkepler There are two scenarios possible here: 1) no messages that are defined match but there are some other errors. 2) some messages match and there are some other errors as well.\nThe example above makes sense in scenario 1, but not much sense in scenario 2. Potentially we could have two catch-all messages:\n\ndefaultMessage (like in your example, for scenario 1\notherErrorsMessage (for scenario 2, it could be \"size is invalid\")\n\nNot sure I like it to be honest - it's getting complicated :)\nA simpler options would be to have only one defaultMessage and use it:\n1. only in scenario 1\n2. only in scenario 2\n3. in both cases\nWhat do you think?. Also as we are defining catch all messages (and even without this extension we need them in case string rather than object with keyword-specific messages is used) than we probably need to be able to some elements from errors (e.g. the list of keywords) in the string templates.... @crkepler also I think error classification could be a part of this feature, it was asked a couple of times.. @crkepler thank you for the support. I will do it.. Some limited functionality is available in ajv-errors, more to follow.. 1.0.0 published. I think the better approach than modifying the behaviour of the standard keyword pattern is to define the custom keyword, e.g. regexp, that would accept the JavaScript regular expression with flags as a string and convert it to RegExp instance:\nvar rx = str.match(/^\\/(.*)\\/([gimy]*)$/);\nif (rx) var regexp = new RegExp(rx[1], rx[2]);\nWe also have such function in protojs library.\nYou may even let it accept an object { pattern: '', flags: '' } so you neither have to worry about escaping '/' characters nor about parsing the string.\nI don't really like the option that would change the meaning of the standard JSON-schema keyword for several reasons:\n- changing standard is much worse than extending it\n- regex format will have to be modified as well based on this option\n- it creates a precedent that leads to this amount of variations of how the schema is treated: https://github.com/zaggino/z-schema#features.\nI think using custom keyword is better for this situation.\n. Closing it, please let me know if the proposed solution works for you\n. See https://github.com/epoberezkin/ajv-keywords#regexp\n. Your data is invalid according to your schema. Actually any data is going to be invalid according to this schema as it is contradictory - type requires array, enum is a list of strings. \nYou probably want:\n\"preferredBrandOrder\": {\n  \"type\": \"array\",\n  \"items\": {\n    \"enum\": [\n      \"VISA\",\n      \"MASTER_CARD\",\n      \"AMEX\",\n      \"DISCOVER\",\n      \"CHINA_UNION_PAY\",\n      \"CB_NATIONALE\",\n      \"CETELEM\"\n    ]\n  }\n}\n. Creating a new instance is the way to go I think...\n. The disadvantage of re-creating the instance is that it has compiled meta-schema(s) so if you are replacing dependencies often it's a waste to recompile meta-schemas every time.\nAlso if the instance has custom keywords / formats added than re-creating it may be a bit annoying.\nIt think the existing method removeSchema can be extended to accept RegExp that would allow to remove many/all schemas (/.*/) by iterating this._refs and this._schemas for matching refs and keys, excluding meta-schemas.\n@pictin what do you think? you are welcome to implement of course if you have time for it (with docs and tests) - I would appreciate it.\n. in 3.8.0\n. If that's api docs both raml and swagger seem ok to generate them.\n. Maybe you meant generating sample data based on the schema? JSON-Schema faker does it.\nThere is also the list of JSON-schema related software.\n. I don't think it's possible as ajv accepts objects, not JSON strings... So there is no way to map to the line - the same object can be represented in many ways (line-breaks are optional and the order of properties is not really defined). So you have to parse the original JSON file to have mappings from properties to line/column. That's not too difficult, but it's out of scope I am afraid.\nIt deserves a separate npm package I  think.\n. Please post the package here when it's available\n. There is also json-source-map.. Sorry, but there is the standard to follow... It would also have a negative performance impact. The error was pointing to the offending property of the schema - top level type.\nIf you like you can turn off schema validation but then you'll have harder time debugging false positives because instead of throwing an exception during schema validation/compilation it would quietly ignore type keyword during data validation.\n. You can replace URI format with any regex using addFormat.\nOr you can change it in formats.js.\n. I don't think there is such thing... All the standard says it should comply with RFC3986.\n. Does it work for you?\n. Thank you.\n. That's very cool, thank you very much for the compliment.\nNext release (out tomorrow) implements asynchronous validation, but you have to execute some javascript to define custom asynchronous formats/keywords.\nTo my shame I spent several minutes figuring out how I do the validation :) Kept looking for a button, until I realised it's automatic :)\nI wanted a tool like this for quite some time. That would be cool to set some options, e.g. show all errors (I guess that's the default for jsoneditor) etc.\n. You can run it in webworker indeed, whether it's synchronous or not. By asynchronous I meant schemas with custom formats/keywords that make requests to remote services: https://github.com/epoberezkin/ajv/tree/async#asynchronous-validation (in the branch now)\n. Added Packages using ajv to readme :)\n. If you need asynchronous loading there is the method compileAsync (you need to define the loading mechanism yourself, it can be HTTP or whatever - there is an example). But in case you have a limited number of schemas addSchema is better probably.\n. Thanks for the suggestion, your version is probably clearer. Maybe \"allowed\"... Enum values can be anything - not just large strings, but also objects and arrays. So including them into the string is not practical indeed. With verbose option you will get the reference to the schema of enum keyword, which is the array of allowed values. If your values are strings/numbers you can add them to the message.\n. That's only the case in allErrors: true mode, and that's the common problem with not keyword, rather than with this specific keyword.\nSo this keyword can be left as is while not keyword can be improved.\n. If you are building with browserify it doesn't resolve this dependency at build-time (because there is an expression) and at a run-time it quietly fails if js-beautify is not available (it can be provided either as another bundle or included in ajv bundle by adding browserify CLI option). The reason for not including js-beautify in the bundle by default is the bundle size. It's unlikely one would need beautifying generated code in the browser, it's a debugging feature.\nIt seems that webpack tries to include modules even if their names are expressions. It's interesting what would it do if it encounters require(moduleName)?\nYou can of course resolve this issue by installing js-beautify so that webpack finds it. But you will also have to add nodent and regenerator that are required in a similar manner (they are used for asynchronous validation but one would never need both). So you'll end up with a large bundle full of things you don't need - 659Kb minified, while ajv itself is 109Kb (and I am thinking how to reduce it).\nI am happy to modify the code in some way so that webpack can understand that these dependencies are optional and have to be resolved at run-time. I've searched but I don't see any elegant way to achieve it while still being compatible with node and browserify.\nSo until we find such a way, the workarounds are to use:\n- the UMD bundle supplied with the npm package (in dist folder)\n- the same bundle from cdnjs\n- browserify. It seems that all webpack features (and more) can be implemented with browserify and existing transforms/utilities.\nAny other ideas?\n. By the way, does it fail to build or is it just a warning? If the latter, there should be a way to suppress warnings I hope.\n. If they are just warnings you can either find some option in webpack to suppress the warning or you can webpack ... > /dev/null\n. What is possible with webpack that is not possible with browserify?\n. @avindra: it seems like it does, with additional tools: https://gist.github.com/substack/68f8d502be42d5cd4942\n. @strax thanks!\n. Thanks. Probably worth making a note in readme in Using in browser.\n. I don't think it is possible to resolve in any other way. Webpack doesn't support dynamic imports. Optional dependencies need to be dynamic.\nWhy is it not an acceptable solution?\n. It doesn't log warnings with IgnorePlugin, see above. Why using it is not an acceptable solution? If you know a better solution than to use IgnorePlugin, we can post it here. To me it seems the webpack's limitation that it doesn't support dynamic dependencies. If it turns out it does and there is a way to change code so it is still compatible with browserify and nodejs, we can change it.\n. It will be resolved by #382 and #383. Resolved in 5.0.1-beta.0\nTo use: npm install ajv@^5.0.1-beta. 5.0.1-beta.3 should resolve it, finally. I assume you mean https://github.com/epoberezkin/ajv/issues/117#issuecomment-198328830\n\nI ask because I am using request, which uses har-validator which uses ajv. It will take a while before the change propagates to request.\n\nAs soon as it is changed in har-validator, request will use new version, there is nothing more to propagate.\nI expect 2-3 weeks at most. Warnings aren't critical as long as it all works. You can also lock request to 2.79.0 if it's a problem.. in 3.8.0\n. I may be missing something but it seems to me that the problem you're describing is unrelated to this issue? Also, the schema should have $async: true in it.... This issue is about supporting custom errors in synchronous custom formats. Currently it is not possible at all (and nobody ever asked for it).\nYou are describing a different problem here: some missing information in the custom error in async format. Please submit a separate issue.. Cool, thank you!\n. CUSTOM.md also needs fixing...\n. Thanks!\n. in 3.8.0\n. what is \"/another schema\"? Can you post the whole code please?\n. The problem is either in \"/another_schema\" or in the incorrect usage. See https://tonicdev.com/esp/56bdbb503689090c00a52ed8\n. No problem, let me know if there are any problems\n. ajv.compile(schema) returns validation function that can be used to validate data (see example in readme), regardless whether it uses refs or not.\nFrom your example you seem to want a schema with refs merged in... Ajv doesn't produce such thing, refs are either inlined as code in generated validation function (if they don't contain other refs and if they are not recursive) or compiled as separate functions. The reason this \"final\" schema is not created is that schema can be recursive (and it is a very common thing) in which case it is impossible to create.\nThis seems to be similar to #22.\n. what is the utility by the way?\n. I was thinking what would I do if I had such an issue... I would probably simply use some templates (doT templates in my case :) to generate two different schemas - one with refs, another without.\nAnother alternative is to use code to merge them as objects... It's not that difficult to write a generic processor that would replace $refs with actual schemas in case it is not recursive - you can even make a schema with a custom keyword to do such processing:\nvar processingSchema = {\n  properties: {\n    $ref: {\n      replaceRef: true\n    }\n  },\n  additionalProperties: { $ref: '#' },\n  items: { $ref:\u00a0'#' }\n}\nAll you need to do is to define a custom keyword replaceRef (that will resolve and replace the ref with object) and then pass your schema as data to this \"processing\" schema:\najv.addKeyword('replaceRef', { ... });\najv.validate(processingSchema, yourSchemaYouWantToMergeTheRefsIn);\nAt the moment you can only do it with inline keyword (as you need access to the parent object), but the next release which I am about to make will allow to use simpler validation/compiled keywords to do so.\n. Thanks!\n. That is how it is implemented: see docs Assigning defaults, the end of the section.\nThe reason for ignoring defaults in compound keywords is that the possible algorithm to decide which branch to take the default from is\n1. quite arbitrary - it has nothing to do with the standard\n2. complex - it requires keeping track of applied defaults and rolling back in case anyOf branch validation failed\n3. confusing / non-deterministic - it's impossible to know in advance whether the default will be applied or not, and that was the main reason for me to decide not to implement it.\nObviously in the case like in your example the default could have been applied, but you don't really need anyOf with a single branch. If anyOf/oneOf has multiple branches it becomes very messy.\nThere is some discussion on the subject in #42.\n. The solution I can suggest is to define a custom keyword say applyDefault that would apply the default if the option useDefaults is true in cases when it would be ignored otherwise, after successful validation.\nGiven that from version 3.7.0 you have access to the parent data object and the property in this object that points to the current data you can easily check if the current data is defined and if it is not assign the default value.\nYou'll just have to modify the schema to make the property not-required (it is kind of redundant in cases you have default) - this applyDefault will be executed after branch validation if it was successful, not before.\n``` javascript\nvar schema = {\n  \"anyOf\": [{\n    \"type\" : \"object\",\n    \"properties\": {\n      \"key1\": {\"type\": \"string\", \"applyDefault\": \"A\"}\n    }\n  }]\n};\najv.addKeyword('applyDefault', { compile: function(schema) {\n  if (!this._opts.useDefaults) return function() { return true; }\n  var default = schema.applyDefault;\n  return function(data, dataPath, parentData, parentDataProperty) {\n    if (data === undefined) parentData[parentDataProperty] = default;\n    return true;\n  };\n}})\n```\n. above won't work :) but something along these lines will :)\ne.g. this:\nJSON\n{\n  \"anyOf\": [{\n    \"type\" : \"object\",\n    \"properties\": {\n      \"key1\": {\"type\": \"string\"}\n    },\n    \"defaultProperties\": {\n      \"key1\": \"A\"\n    }\n  }]\n}\n. Thanks!\n. It works as it should in this situation. Look at this working example.\nThe first instance of ajv does not have removeAdditional option. And it correctly fails on obj3.\nThe second instance has removeAdditional option as true. When it validates obj1 it passes because the first schema in anyOf has 'a' property in properties. When it validates obj2 using the first schema in anyOf property 'b' is additional there. So it gets removed, as you can see from the log. But the first schema in anyOf fails and it goes on to try to validate it with the second schema. It fails too because there is no property 'b' (it was removed).\n{ removeAdditional: true } removes any property that would otherwise be validated with the schema in additionalProperties: false keyword in the same schema. It does not try to establish whether this property is known to some other branch of the schema - it is simply out of its scope. There is a place for defining unknown properties in the standard - there is actually this proposal for v5. But it is not what this option is doing.\nI don't think there is a real need to define the concept of \"unknown property\" because usually there are ways to refactor your schema to make it work (and remove what you need). Difficult to say how exactly of course without seeing the actual schema, but usually you just need to take out properties from keywords anyOf, oneOf. The example above doesn't need to have properties inside anyOf. The equivalent (and faster) refactored schema is:\nJavaScript\n{\n  type: 'object',\n  additionalProperties: {\n    type: 'object',\n    properties: {\n      a: { type: 'string' },\n      b: { type: 'string' } \n    },\n    additionalProperties: false,\n    anyOf: [\n      { required: ['a'] },\n      { required: ['b'] }\n    ]\n  }\n}\nWith this schema it will correctly fail on obj3 if you pass { removeAdditional: true }. It can also filter out obj3 if you pass { removeAdditional: 'failing' } (see docs).\n. It just that it uses the same definition of \"additional\" as JSON-schema standard - it means \"additional\" according to the current (sub)schema, i.e. not present in \"properties\" and not matching \"patternProperties\" of the same (sub)schema, and it does not mean \"unknown\" according to the whole schema. For example, this schema should fail on any data because of that:\n{\n  type: 'object',\n  properties: { foo: { type: 'string' } },\n  required: ['foo'],\n  allOf: [ { additionalProperties: false } ]\n}\nThis would alway fail too:\n{\n  type: 'object',\n  required: ['foo'],\n  additionalProperties: false\n}\nBut it definitely not just you, it takes some time to understand how the standard works... The main thing here is that all the keywords are shallow, they can only be affected by siblings in the same object.\nI will think again about implementing this \"unknown\" properties concept - both to fail on unknown properties and to filter them out. There are cases when it is either difficult to refactor schema (I haven't come across the cases where it is impossible though...) or undesirable, because it makes schema lose it's meaning from the application domain point of view.\n. Closing this issue, please let mw know if there are any questions.\n. The easiest is to use v5 switch keyword instead of oneOf (and by the way, anyOf is often faster than oneOf - for 50% of data in your case). Otherwise see suggestions in issues mentioned in FAQ\n. @sberan so rather than removing them straight away, additionalProperties: false would ignore them and once the sub-schema validation passed, you would remove? Maybe it's possible.. makes sense, thanks\n. pushed the tag, you should have it soon\n. in 3.8.0\n. npm includes dist already, it is generated during npm publish. For bower it should be done in a similar way - there should be post-install command that would generate bundles. I don't like the idea of including bundles in the repo because it completely distorts changelog and stats.\n. > Building on install is an anti-pattern and is strongly recommended against in Node.\nnpm recommends limiting the use of post-install script to environment-specific compilation and it provides an alternative mechanism for all other build steps - building when publishing.\nBower has post-install hook but they advise against using them for building packages... Unfortunately, although they may have plans to provide storage for compiled packages (according to the same answer by one of bower contributors that you quote) the only viable alternative to using the hook they offer is building manually. I am sorry that it causes you some inconvenience, I don't think that putting compiled code under source control is a better alternative.\nWe will have to decide whether we simply show the compiling instructions when the package is installed (post-install script will be some \"echo ...\") or build automatically disregarding their recommendation. I think just showing instruction can be a bit better, but I am happy with any of two options that you think is more convenient. If bower creates storage for packages we can change it.\nThe other alternatives you can consider are:\n- using compiled ajv bundles on cdnjs.\n- using npm/require/browserify to build your application - we used it with angular apps without any problems.\n. Ah, so you say it doesn't even trigger post-install... Sorry, I missed it. We can't even show the instruction then. I guess that inconvenience may be the reason in some decline in bower usage... \n. Is it possible to publish to bower from the branch somehow? And the branch would be pushed to from travis build process whenever master branch changes.\nTags exist without connection to branches and bower seems to pick up the latest tag anyway... But maybe it is somehow possible to limit bower to the branch? Not sure.\n. Thank you. I also thought some instructions are needed.\n. What exactly is not valid? See https://tonicdev.com/esp/56d84ef08757b50d0044442d\nSeems to work correctly.\n. What are your ajv options? I suspect you may be using removeAdditional option. Without it it validates ok: https://tonicdev.com/esp/56d57c034b05fd0c00e8978b\nIf that is the case this issue is essentially a duplicate of #129 and it is an expected behaviour according to the JSON-schema standard.\n. I would suggest refactoring the schema to take the duplicated keywords and all property definitions apart from required out of oneOf:\njson\n\"items\": {\n  \"type\": \"object\",\n  \"properties\": {\n    \"mode\": {\n      \"enum\": [\n        \"ftp\"\n      ]\n    },\n    \"account\": {\n      \"type\": \"string\",\n      \"pattern\": \"^[a-f|0-9]{8}$\"\n    },\n    \"mailingList\": {\n      \"type\": \"string\",\n      \"pattern\": \"^[a-f|0-9]{8}$\"\n    }\n  },\n  \"additionalProperties\": false,\n  \"oneOf\": [\n    { \"required\": [ \"mode\", \"account\" ] },\n    { \"required\": [ \"mode\", \"mailingList\" ] }\n  ]\n}\nThis way it will work with removeAdditional option the way you expect it to.\nThe previous schema works correctly, but not how you expect probably\n. You're welcome. I'll add a note in readme about it :)\n. You can use { \"not\": { \"required\": [\"account\"] } } to explicitly prohibit property account.\n. Btw, \"additionalItems\": false does nothing unless the schema in items keyword is an array.\nThe solutions to additionalProperties limitations are:\n- don't worry about additionalProperties and simply allow them. I think the obsession with removing them is not always justified, in many cases you make your life MUCH easier by allowing them (especially when you have multiple applications using the same data/schema). The argument against it though is that by allowing additional properties you may miss some typos in property names.\n- refactor schemas as suggested above\n- use custom switch keyword (or if/then/else) instead of anyOf - it allows to control what is validated based on some conditions (so only correct properties will be treated as additional)\n- use $merge/$patch keywords to extend schemas rather than joining them with compound keywords such as anyOf etc.\nPlease see FAQ that points to other related issues that show these approaches to using additionalProperties.\n. I don\u2019t understand the question - what are you trying to achieve? \u201cnot\u201d can be a sibling to required and any other keyword, if that\u2019s what you are asking.\nAlso it as a general JSON schema question - it should be posted to Stack Overflow.. That's a valid concern. There is no need to clone the object at the validation time though, instead it can simply be inserted in the generated code: {{= it.useDefault($sch.default) }} should be replaced with {{= JSON.stringify($sch.default) }}, possibly with some conditional.\nThe reason it.useDefault was used in the first place is performance - it is faster to insert the reference than actual object, which is acceptable in cases you don't need to modify the data being validated.\nSo I think it should be based on some option, e.g. cloneDefaults: true (instantiating an object with an object literal is slower and is only necessary if you further modify the validated data), so the code will be:\n{{= it.opts.cloneDefaults ? JSON.stringify($sch.default) : it.useDefault($sch.default) }}\n. or probably better to use {{= it.opts.useDefaults == 'clone' ? JSON.stringify($sch.default) : it.useDefault($sch.default) }} as @jonasfj suggested - it is consistent with how other options are used.\n. @jonasfj yes.\n. Given that it's all optimised for speed a bit surprising is ok. I think it's better if the current behaviour is the default. We will add to options and to filtering data section - it'll be clear enough.\nWrapping isn't that important, whatever you prefer, this is clearer though probably:\njavascript\n{{=$passData}} = {{? it.opts.useDefaults == 'clone' }}\n                   {{= JSON.stringify($sch.default) }}\n                 {{??}}\n                   {{= it.useDefault($sch.default) }}\n                 {{?}}\n. On the other hand you are probably right and less surprising is better. It'll save somebody hours of debugging. In this case let's drop the option idea - nobody will use 'fast' option. And the whole useDefault business will be unused and can be removed.\n. On the other hand:), if somebody used some dirty hack where you can modify defaults without recompiling the schema, because it's the same object, the hack would stop working. So let's stick with 'clone' option plan :)\n. Always liked that Microsoft's approach ;)\nIt only came to my mind only because of #103, which is a similar scenario - dynamically update schema dependency.\nIf, for example, you want to have the current timestamp in the default object (or anything else dynamically changing, e.g. fill in IP if the referrer of the request is not supplied), the fact that the default is by reference allows to do it efficiently without recompiling the schema, which would be slow.\nFilling such dynamic defaults after validation is probably cleaner, I have suggested similar things many times, but in reality people like putting this sort of things in schemas because it allows to change the data structure without having to maintain property references in other places.\nI agree that this \"feature\" is close enough to a \"bug\" :). I'll think whether to remove it completely or to switch the default by the next major version.\n. Great, thank you very much for spotting and fixing.\n. @imbstack From v4.0 using object/array literal (\"deep-clone\") will be the default behaviour and useDefaults: \"shared\" will be inserting default using the reference (the default behaviour before v4.0).\n. this:\n\"type\": {\n   \"description\": \"Whether an effect is positive or negative\",\n   \"type\": { \"enum\": [ \"good\",\"bad\" ] }\n}\nis invalid.\nobject is not a correct value for type keyword, should be either string or array of strings.\nthis:\n\"type\": {\n   \"description\": \"Whether an effect is positive or negative\",\n   \"enum\": [ \"good\",\"bad\" ]\n}\nis valid\n. Thank you :)\n43x sounds about right :)\nbenchmark is 100x + but it depends on the schema of course.\n. @tejasmanohar The way to define top level property \"type\" is the same as for any other protperty name - use \"properties\" keyword with the map of property schemas inside:\njson\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"type\": {\n      \"enum\": [ \"good\",\"bad\" ]\n    }\n  }\n}\nplease see JSON schema dosc and some tutorial. . Most likely you are passing data in place of schema - difficult to test without seeing the code. You need to use additionalProperties keyword in the schema.\nThere is no such thing as strict mode in the standard. By default additional properties are allowed.\n. @hatfinch please see https://github.com/epoberezkin/ajv/issues/134#issuecomment-242989744. additionalProperties: false makes invalid all properties not present in properties keyword (and not matching patterns in patternProperties) in the SAME subschema.\nThis schema:\n\"mgt0\": {\n              \"type\": \"object\",\n              \"$ref\": \"#/definitions/interface\",\n              \"additionalProperties\": false,\n              \"required\": [\n                \"mode\"\n              ]\n            }\ndoes not have properties keyword, so any property will be invalid according to spec.\nYou either need to move properties from #/definitions/interface to this schema or to move additionalProperties: false to #/definitions/interface.\nAlso, strictly speaking, the standard says that $ref should be the only property present in the object, and you have to use allOf to apply both $ref and some other schema. Ajv is lax here, it doesn't flag $ref together with other keywords as an error. But I would recommend fixing it too. EDITED: It won't affect the way additionalProperties are validated though.\n. Thank you\n. additionalProperties are indeed always relative to the properties defined in the same subschema (the same object in the schema).\nThe better approach than to repeat properties though could be to refactor them outside of allOf/other keywords. You can look at the examples in related #129 and #134.\n. You can do all that and more with custom keywords.\n. See #147 for an example\n. Maybe example would help in docs, but the idea here is explained in docs you mention - the validation function in all keyword types but \"macro\" (i.e. \"validate\", \"compile\" and \"inline\") receives \"parent data object\" and \"the property name in the parent data object\" as parameters. That allows custom keywords to modify the data being validated in any way they want, e.g.\n```javascript\nconst collectionFormat = {\n  csv: (data, dataPath, parentData, parentDataProperty, rootData) => {\n    var arr = [];\n    // process data to populate array\n    if (success) parentData[parentDataProperty] = arr;\n    return success; // true or false - validation result\n  },\n  // ... other list types\n};\najv.addKeyword('collectionFormat', {\n  type: 'string',\n  compile: (schema) => collectionFormat[schema],\n  metaSchema: {\n    enum: ['csv' / , ... /]\n  }\n});\n```\nThe only caveat at the moment is that custom keywords will be validated AFTER standard keywords in the same schema object, so if you expect to define validation rules for the CHANGED data these rules cannot be in the same object, they should be in the next subschema of \"allOf\" keyword:\njavascript\n{\n  allOf: [\n    {\n      // modify data\n      collectionFormat: 'csv'\n    },\n    {\n      //validate data\n      type: 'array'\n      // etc.\n    }\n  ]\n}\nI thought several times about allowing to define custom keywords that execute BEFORE standard, but I decided against it because it implies the need to manage order implicitly and there is no way of telling the execution order by looking at the schema. I think it is better that in cases the order matters you MUST use allOf keyword, otherwise the keywords should be independent of execution order.\nWhat may make sense though is to add some extra requirement to the keyword definition that it MUST NOT be used in the same schema with other validation keywords to enforce that it is used in its own schema object, which can be useful in cases like above.\nIn any case, at the moment it is something you just have to remember.. Ok. Actually if you define type in keyword definition as above, there it no need to check type in validation function - it won't be called for anything but a string. Also if the keyword value is valid according to metaSchema the schema compilation will simply fail, so no need to check it as well.. @ksmithut That's a really interesting discovery. It worked for me in similar cases, but I think I understand the difference now. So thank you.\nIn the beginning I thought that async is messing things around, but it seems like while you have the same data to validate all keywords re-use the data variable for validation (that's assigned in properties keyword) rather than using parent object on every iteration. So while underlying object gets updated the next allOf subschema doesn't see it yet.\nIt is something that would be good to improve, although it may be tricky... Probably there should be a property in custom keywords definition to define them as \"mutating\" - this property would cause the variable to be re-assigned AFTER keyword function is executed (as there is no way you can update the variable in the calling function from keyword function). Another improvement to custom keywords I keep thinking about that keywords that only do mutation or some logging and always return true (or false) as a validation result can have \"valid: true/false\" property in keyword definition that would simplify generated code because the result is known in advance (like my log keyword in examples below).\nAt the moment the only workarounds I can come up with are:\n\nto split into a different properties keywords, but it's quite ugly - see a working example here https://runkit.com/esp/586eba75290f430013c4b6fd  . It works because the second properties/foo re-assigns the variable from the parent object\nuse inline keyword and update both the parent object and the variable - https://runkit.com/esp/586ec1210b602700145eb23f . It allows for your schema that I thought would work in all cases, but has more complex keyword definition.\n\nI also added \"log\" keyword just to understand what's going on.\nThank you for the patience.. Lol. Thank you. Contributions to this issue are welcome: https://github.com/epoberezkin/ajv/issues/100#issuecomment-230353861 There is a pledge from @crkepler to match them :). It's very generous, thank you :) This bounty is for a particular big issue: to support custom error message generation.\nMutation I'm going to improve anyway, it's quite simple actually. I just always assumed it works in all cases, but it turns out I just somehow managed to use it in the way it works.... A bit cleaner inline keyword with doT template: https://runkit.com/esp/586ec1210b602700145eb23f. @ksmithut now with option modifying: true in custom keyword definition the keywords that change data work as expected.. > all compile call share the same error object for the same shema and same ajv instance.\nNot sure I understand... Compile doesn't return errors, it throws exceptions if the schema is not valid. In most cases it can be tested in some build process so shouldn't happen at run time.\n\nall getContext call share the same error object for the same shema and same ajv instance.\n\nWhat is getContext?\nIf validation is synchronous then the errors are assigned to errors property of the validation function. It is a new array every time, you just have to copy it to some var if you plan to use it in some async context.\nI see no reason to instantiate ajv every time. You have to precompile all schemas once (or compile them when they are first used if there are many of them) and reuse validation functions.\n. errors are not shared. Every time it's a new array instance, although you are right, they are assigned to the same property. If you are not using them immediately all you have to do is to assign this array to some local variable immediately after validation, otherwise they may indeed get overwritten:\njavascript\nvar validate = ajv.getSchema(ref);\nvar valid = validate(data);\nif (!valid) {\n  var errors = validate.errors;\n  // ...\n}\nIn many cases you don't even need to reassign errors (if you are using these errors immediately, e.g. sending in the response). That's safe because javascript is single threaded and while your code is executing nothing else can be executed.\nPlease see the note in the end of Getting started and #65.\n. There are obviously use cases when you need to use multiple instances. I don't really see why you may want to have the same keyword defined differently every time, although if you must you can always have a wrapper function that would be calling different function based on some external condition.\nSo while creating new instance every time is a possible option, you would be destroying the benefit of compiling schema once and using it multiple times\n. It seems like the browser doesn't like \"enum\" being used as the property name without quotes, because enum is a reserved word... ES5 allows unquoted reserved words as property names, but apparently Android 4 doesn't fully support ES5.\nPlease try quoting the properties in this object in the code to see if it works. I think something else may still be not working.\n. On Android 4 typeof of any RegExp is \"function\" instead of \"object\".\n. @wanjuki10 fixed in 4.0.1, please let me know if something doesn't work.\n. please reopen if you notice some issue.\n. Additional properties are allowed in schemas. Your schema has no defined validation keywords and any data is valid according to such schema. So this is a correct behaviour.\n. None of these properties are required for the schema to be correct. {} is a valid schema according to spec.\n. You can validate the schema against your own meta-schema if you want to require these properties.\n. I will think about it. There are many cases when empty schema is used, so it is not non-sense. If you want to do additional validation of schemas the solution already exists - creating and using meta-schemas.\nAt the moment I don't think it should be a part of the library, but I will think about an option to warn on some missing properties in top level schemas.\n. See #90 for example - you now can supply your own default meta-schema that would prevent what you consider invalid schemas from passing validation.\n. The JSON-schema spec says that the the schema in properties should be applied to .shelf only if the property .shelf is present.\nYou could add default: {} in the schema at the levels of .drawer and .drawer.shelf and use useDefaults: true option:\njavascript\n{\n  properties: {\n    drawer: {\n      default: {},\n      properties: {\n        shelf: {\n          default: {},\n          required: ['car', 'ball', 'book']\n        }\n      }\n    }\n  }\n}\nIn this case you will get errors for children but you won't get an error for missing .drawer or .shelf, because the default will be used. Not sure if it's better for you.\nThe alternative is to process the returned errors and add the messages you need...\n. Please let me know if you think some improvement is possible here.\n. Your custom keyword is just passed the schema. So you can interpret $data in the function you supply. If your custom keyword is a macro it will just work of course, but if it is any other kind you will have to write code to process any schema it is passed, including $data keyword.\n. I think a custom keyword could have $data: true in its definition that would allow its value to be $data reference without the need to write code for it - it would be resolved by ajv.\n. I have several interpretations of what you may want to do, could you please provide some details or examples maybe? Like what the schema and data may look like.\n. I understand now. Extending type coercion rules wasn't in my plan - I will think about it.\nBut even if it were available, using it for this particular problem seems a bit hacky to me.\nI don't know whether you have seen what you could do with custom keywords but they seem to be the correct solution.\nI don't think replacing $ref with references (or with deep clones) is a bad idea, and it can be done with the schema itself so you don't have to iterate data in your code:\nJSON\n{\n  \"allOf\": [\n    {\n      \"id\": \"#replaceJsonPointers\",\n      \"description\": \"this subschema replacing all $refs recursively using custom keyword jsonPointerRef\",\n      \"properties\": {\n        \"$ref\": { \"allOf\": [\n          { \"type\": \"string\", \"format\": \"json-pointer\" },\n          { \"jsonPointerRef\": true }\n        ] },\n        \"additionalProperties\": { \"$ref\": \"#replaceJsonPointers\" },\n        \"items\": { \"$ref\": \"#replaceJsonPointers\" }\n      }\n    },\n    { \"description\": \"your validation schema here\" }\n  ]\n}\nAnd then the keyword itself can be defined in this way:\n``` JavaScript\nvar jsonPointer = require('json-pointer');\nvar ajv = Ajv({ passContext: true });\najv.addKeyword('jsonPointerRef', {\n  type: 'string',\n  schema: false,\n  validate: function(data, dataPath, parentData, propertyName) {\n    // some error handling/validation is needed here that the replacing object doesn't contains $refs e.g.\n    var ref = data;\n    var dataRef = jsonPointer.get(this.data, ref);\n    parentData[propertyName] = dataRef; // that would replace the value of $ref with reference\n    // if you want to replace { $ref: '...' } with reference you may use jsonPointer to do it.\n  }\n});\nvar validate = ajv.compile(schema);\nvar context = { data: data };\nvar valid = validate.call(context, data);\n```\nI now understand what you meant by \"treating schema as a meta-schema\" (and the data as a schema). It won't work because Ajv doesn't attempt to generate a final schema (see #22) because references can be (mutually) recursive. If the referenced schema doesn't contain $ref the validating code is inlined (for performance reasons) and if it does - it is compiled as a separate function (you can control this behaviour with inlineRefs option). But the schema object itself remains unchanged.\n. in 4.2.0\n. You can use custom keywords to validate custom types. From the point of view of the schema it will still be an object, but the keyword can test that it is instanceof some class and do some other stuff with it depending on the value of the keyword (i.e. its schema).\n. no, you cannot extend or override type keyword. But you can define a new keyword that would do validation for some additional \"type\" (it's not a type really in JS, the type is 'object' in most cases).\njavascript\najv.addKeyword('buffer', { compile: function(schema) {\n  return function(data) {\n    if (data instanceof Buffer) {\n      // do some schema based validation, e.g. buffer size\n    } else {\n      return false;\n    }\n  };\n} });\nSo if the data is not instance of Buffer the validation will fail.\nOr you can even add a custom keyword instanceof that would accept class constructor name as a string:\n``` javascript\nvar CLASSES = {\n  Buffer: Buffer,\n  RegExp: RegExp,\n  // ...\n};\najv.addKeyword('instanceof', { compile: function(schema) {\n  var Class = CLASSES[schema];\n  return function(data) {\n    return data instanceof Class;\n  };\n} });\nvar schema = {\n  type: 'object',\n  properties: {\n    buf: { instanceof: 'Buffer' }\n  }\n};\n// ...\n```\nAs long as your schema is serialisable it will all work (so you cannot use constructor function as the value of the keyword). Data itself does not have to be serialisable, so you can use and validate any instances in the data.\n. Yes, that's what ref is for\n. Shouldn't it be at least function Ajv(opts?: object): object; ? \n. Also it seems like the methods can be defined too...\n. Cool. I was actually about to ask you about it as I saw you are involved in typings :) I had a feeling that it's at best a stub and simply masks warnings, which I don't think is a good thing. But you seem to have it all worked out already :)\n. @mrchief thanks for starting it. I was going to write that it needs to be done properly, not just a stub. Thanks again.\n. @blakeembrey so is it better if it is inside ajv package (as you write in typings/typings#322) or if it is a separate thing? I can see a couple of corrections that are needed in the type definitions https://github.com/enriched/typed-ajv/blob/master/ajv.d.ts. - some options should use union-type string | boolean.\n. Thank you @blakeembrey @mrchief\n. @blakeembrey, sorry to chase you :), can I help with this one somehow maybe?\n. Oh my... I guess I liked my version more :) It never occurred to me they are different.\nIt probably should be a major version change...\nThanks!\n. btw, given that it's not implemented anywhere yet (as far as I know) maybe we could simply edit the proposal...\n@geraintluff what do you think?\n. Thank you!\n. released\n. fixed in 3.8.7. Thanks!\n. Not at the moment, validation function is a closure as you pointed out.\nI was planning to implement it in ajv-cli (and it would require splitting some run-time dependency from ajv).\nMaybe the better way to do it is to have the api for creating a serialisable validation function exposed in ajv and have ajv-cli simply use this api.\n. @ReactiveRaven I was looking at couchdb docs, it seems like this function should have everything inside, so it won't be able to use any dependencies or globals, correct? Are there any other limitations?\n. Thanks! So more people will find it :)\n. It may be an interesting idea, please let me think about it.\nThe immediate workaround is to either use anyOf/oneOf keywords or to define some custom keyword.\n. My concerns are:\n1. unless you expect this coercion it can be surprising and unexpected.\n2. it may be coerced twice (first to array, then potentially to the type of array item, although maybe it's fine).\n3. if it coerces to array it should also be able to coerce array of a single item to a scalar type, but it means that it would coerce twice in one go (first to a scalar than to the expected type)...\nSo if all these things seem ok, then at least it should be a different option value (coerceTypes: 'array') that would coerce to/from arrays in addition to scalar coercion...\n. in 4.3.0\n. I'd like to see the schemas. The message means that the schema with $async keyword is referenced by the schema without $async keyword.\n. I don't think I can reproduce the issue: https://tonicdev.com/esp/5707dc7fed8bd01200bfb7a6\n. Could you make some minimal code that fails? The error message is not related to loading schemas, it is about asynchronous validation. But there is no async validation in this schema so I don't really know what it misses.\n. Meteor extends Function.prototype with async method:\nJavaScript\nfunction (allowReuseOfCurrentFiber) {\n  return MeteorPromise.async(this, allowReuseOfCurrentFiber);\n}\nAjv uses own property of validation functions with the same name async to indicate that this function is asynchronous (returns promise) - it is used for asynchronous validation. So when Ajv compiles meta-schema it thinks that some referenced schema is asynchronous because of this.\n. @nrotstan thanks for the failing code.\nThis particular issue is fixed in 3.8.9. There may be some other cases that would fail for the same reason - please reopen the issue if you notice it. In 4.0 I will rename async property of validation function to $async.\nThank you!\n. Thank you! Fixed in 3.8.10. Renaming async property was fixing it too...\n. It would be good to run the whole test suite in meteor (probably fibers can be used without it?)... Not sure what is the best way to do it.\n. It's not quite clear what you want to do from the example.\ntype keyword should be a simple type (string, number etc.) or array of simple types. If you want to make coordinates property an array of objects each of which matches the schema Coordinate you need to use keywords items and $ref:\nJSON\n\"Coordinate\": { \"id\": \"#coordinate\" }\nand\nJSON\n\"coordinates\": { \"items\": { \"$ref\": \"#coordinate\" } }\nSee keywords reference\n. You need to use $ref, as I wrote above.\n. Without items in this case, but you still need to use $ref.\n. http://code.tutsplus.com/tutorials/validating-data-with-json-schema-part-2--cms-25640\n. errors is a property of a validation function, not of a context (assuming it is a synchronous function)\n. ajv.addKeyword('auth', {\n  validate: function validate (schema, data) {\n    validate.errors = [{keyword: 'auth', message: 'shoud be authenticated.', params: {keyword: 'auth'}}];\n    return false;\n  },\n  errors: true\n});\n. You're welcome!\n. If your default is an object (or array) and you update some property in this object this will change the value that is used during the validation without recompiling the schema. It will also change all other validated instances that may lead to surprising results in asynchronous code. If validated instances are used/serialised in the same execution block it will be fine.\nPlease also note that the default behaviour will be to clone in v 4.0 (soon).\nIn general I think custom keywords are safer option for dynamic defaults (they can't be applied before validation of course so your schema should allow for an empty property).\n. Numbers/strings are inserted as values, not as references, so they won't be dynamic.\nCustom keywords allow you to modify the data being validated, this allows to assign some default values or make any other changes to data.\n. Correct, you'll have to use this keyword on the parent object level.\n. You're welcome!\n. Thank you!\n. @blakeembrey , could you please review these changes?\nThere are a couple of things I don't understand.\n1. Why return values of the methods are sometimes separated with \":\" (e.g. this line and many other places) and sometimes with \"=>\" (e.g. this line)?\n2. ErrorParameters interface looks as if it is an object with many optional properties. In reality it is one of the definitions below (MinMaxParam | AdditionalPropertyParam | ...) depending on the keyword property in ErrorObject. Is it possible to express it or should alteration (\"|\") be used in this case?\n3. Why Dependency and PatternGroup in ErrorParameters have \"[]\" after them? Probably I should read the manual more attentively...\n. Also, would that be a correct syntax?\ninterface FormatValidator {\n  string | RegExp | (data: string) => boolean\n}\n. @blakeembrey thank you very much!\nWhen I run ./node_modules/.bin/tsc lib/ajv.d.ts on this file I get these errors:\nlib/ajv.d.ts(44,31): error TS1005: ')' expected.\nlib/ajv.d.ts(44,33): error TS1131: Property or signature expected.\nlib/ajv.d.ts(44,39): error TS1005: ';' expected.\nlib/ajv.d.ts(44,41): error TS1128: Declaration or statement expected.\nlib/ajv.d.ts(45,10): error TS1109: Expression expected.\nlib/ajv.d.ts(46,20): error TS1109: Expression expected.\nlib/ajv.d.ts(47,19): error TS1109: Expression expected.\nlib/ajv.d.ts(48,16): error TS1109: Expression expected.\nlib/ajv.d.ts(49,17): error TS1109: Expression expected.\nlib/ajv.d.ts(50,18): error TS1109: Expression expected.\nlib/ajv.d.ts(51,25): error TS1109: Expression expected.\nlib/ajv.d.ts(52,19): error TS1109: Expression expected.\nlib/ajv.d.ts(53,14): error TS1109: Expression expected.\nlib/ajv.d.ts(54,14): error TS1109: Expression expected.\nlib/ajv.d.ts(55,11): error TS1109: Expression expected.\nlib/ajv.d.ts(58,49): error TS1005: ')' expected.\nlib/ajv.d.ts(58,57): error TS1005: ';' expected.\nlib/ajv.d.ts(58,59): error TS1128: Declaration or statement expected.\nlib/ajv.d.ts(185,1): error TS1128: Declaration or statement expected.\nI installed with npm install typescrpt\nIt seems like it doesn't like anonymous functions in parameters...\nWhat am I missing?\nThank you again :)\n. @blakeembrey thanks a lot, all works now! I just added type Promise = Object; and I was wondering whether it should import this instead: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/es6-promise/es6-promise.d.ts ?\nThank you again :)\n. @blakeembrey Ok, I've figured re Promise. Should've read your comments more attentively :)\n. @blakeembrey Promises are used for asynchronous validation. Ajv supports both custom keywords and formats that return promises and in this case the schema itself becomes asynchronous. Promise-compatible inline definition is absolutely fine, I actually started with it: type Promise = Object;. Or should it be something more elaborate than that?\n. cool, thank you, I will have a look\n. Hi, sorry it takes some time to comment...\nAt the moment the package seems to have quite a few undocumented limitations. Please see the issues I've submitted.\nHappy to reference it here once the limitations are removed or documented. Also ci build / test coverage would be good.\nClosing the issue for now, please re-open when the issues are addressed.\n. wow :)\n. Thanks!\n. Indeed: https://tonicdev.com/esp/571a223b2449f212002e0713\n. @maciasello you are right, it's a bug. Thanks for reporting. I would appreciate if you could investigate further or to submit a failing test - I will try to fix soon anyway.\n. Keywords where this issue with leaking change of resolution scope should be fixed:\n- [x] properties\n- [x] items\n- [x] allOf\n- [x] anyOf\n- [x] dependencies\n- [x] oneOf\n- [x] switch\n. fixed in 4.0.4\n. Please see #132\n. Not sure what is your solution, what is possible though I think is to create another repo that will only contain compiled bundles (travis could push all tags there or every time npm version is changed e.g.) and publish to bower from there\n. Not sure I understand. Do you want to have validation function that calls node style callback?\n. Asynchronous schemas are compiled to either generator function or ES7 async function - that's the reason to use promises. Compiling to functions using callbacks would require completely rewriting code generation - essentially that's what transpilers (nodent/regenerator) are doing.\nIt's simple to convert callback functions to/from functions returnig promises.\nSo whether you have node-style functions with callbacks for your custom keywords or you need to use validation function with callbacks you just need to convert them to what ajv/you need.\n. Sorry, not sure I understand. What do you mean by the context? Validation function returns promise that rejects if validation fails. The rejection error contains validation errors. In readme:\n\nValidation result will be a promise that resolves to true or rejects with an exception Ajv.ValidationError that has the array of validation errors in errors property.\n\nI don't think it is possible implementing callback style without rewriting code generation completely.\n. I actually tried doing async validation with callbacks everywhere - this attempt is in async-callback branch.\n. The main thing is that you cannot have a single function, it all has to be refactored into multiple functions. So for example if you have some async keyword that is only validated if the property is present, everything after should become a function that in one case is called immediately and in another in the callback. Now think about async keywords inside loops etc. You will be essentially implementing the same logic that is in nodent/regenerator to keep track of all these functions.\nWith generators or async functions it is simple - you just put yield or await in front of async function calls, but the code flow remains the same and you still have a single function.\nIf you want to see how code changes try compiling some simple async schema into ES7 await function (source code is in sourceCode property of compiled validation function) and then transpile it to callbacks with nodent in \"Pure ES5\" mode.\n. looks like a bug, thanks\n. not a bug actually. errors is a property of validation function, not a property of this.\n. See https://github.com/epoberezkin/ajv/blob/master/CUSTOM.md#reporting-errors-in-custom-keywords\n. ``` javascript\najv.addKeyword(\"validateMaxPoints\", {\n  errors: true,\n  validate: function xyz(value, dataObject) {\n    xyz.errors = [];\nxyz.errors.push({\n  keyword: \"validateMaxPoints\",\n  message: \"maxPoints attribute should be \" + 0 + \", but is \" + 0,\n  params: {\n    keyword: \"validateMaxPoints\"\n  }\n});\n\nreturn false;\n\n}\n});\n``\n. Not sure what is myModel in your case, maybe it does not contain the keyword?\nIt works for me: https://tonicdev.com/esp/5730bf365b4cad1100742570\n. https://tonicdev.com/esp/5731a55eabbf001200bbc028 - it works.\nThe issue seems to be though that it doesn't validate this custom keyword if there is some other error before it.\n. It's something that needs improving/fixing rather than documenting :)\n. Fixed in 4.1.3\n. Outside of spec I'd say... JSON-schema is for JSON validation. NaN is not JSON.\nWhat is the use-case for supporting NaNs?\n. By \"supporting\" I meant \"failing\" :)\n. I will fix this particular issue. I agree that NaN should not be considered\"integer\"` and maximum/minimum constraints should not pass, it doesn't make much sense, particularly given the use case of validating the computation results (even though it's not the main use case for validation).\nI was just trying to say that supporting NaNs (= returning \"expected\" results) is part of the bigger issue of supporting all JavaScript types/primitives in \"expected\" way. In some cases expectations will vary. Why typeof NaN === 'number' if it's \"not a number\"? Is it expected behaviour for NaN to pass {\"type\": \"number\"} or to fail? I am not sure of either, it's a special case and there are arguments for NaN both passing, failing, throwing an exception and logging warning if it's encountered in the data. Whatever decision is made about it, it should be documented.\nJSON-schema as a standard is defined for validating JSON; in JavaScript terms - the result of JSON.parse(). So how a validator should behave with NaN or any other language-specific artefact is outside of spec - ajv is definitely not the only one that will pass NaN as an integer. I am sure there are other edge cases that would return unexpected results - there are no tests for them at the moment.\n. NaN now fails minimum and maximum, fails type: integer but passes type: number.\nIf it were to fail type: number then it would have passed the schema {minimum: 1} because minimum keyword only applies to numbers.\n. in 4.1.0\n. >  in JSON NaN is not an accepted value so my assumption would be that if I pass NaN to ajv and its expected type: number it would fail.\nIf your data is JSON then there would be no NaNs. Given that Ajv validates arbitrary objects, it has to make decisions about how to validate everything that's non JSON. Following your logic, everything that cannot be JSON should be validated as invalid, that would have been a very limiting design choice - users use Ajv for a lot of validation scenarios beyond JSON validation.\n\nIf I understand correctly I can use a min or max in order to get ajv to not accept NaN but that would mean I have to fill my schema with a bunch of cruft (meaningless mins or maxes) that might be confusing to anyone that looks at.\n\nA better approach is to prevent NaNs passed to Ajv in the first place. NaN can only appear as the result of some expression, and the use case for validation is to do it before any other data manipulation, so it's not quite clear why would you get NaNs into your data in the first place.\n\nIf there's any \"backwards compatibility\" concern, then this feature could certainly be introduced as an option, like allowNaN: false.\n\nI will think about it. I am not convinced that validating computation results/NaNs is a common enough use case that justifies one more option - there are way too many already.. Coercing types affects validation result, what is wrong here? null is coerced to 0 (see coercion rules), so both subschemas become valid and oneOf becomes invalid.\nHow is it different from validating null against the schema { \"not\": { \"type\": \"integer\" } }? With type coercion it fails, without - passes.\n. type keyword can have multiple types: { \"type\": [\"integer\",\"null\"] }\n. @HolgerJeromin thank you. Looks mostly good, although there are cases when jsdoc is not consistent with typescript (@this Ajv, private parameters).\n@blakeembrey can you please have a look? Thank you.\n. You meant \"adjust jsdoc\" I think? These are not public parameters.\nNot sure about the need to include meta-schema in typescript format...\n. @blakeembrey thank you. The problem with existing JSON-schema definitions is that Ajv also supports v5 proposals. So I would leave it as Object for now.\n@HolgerJeromin will you update those jsdocs then?\n. Thank you!\n. You either need to use IDs in schemas (in this case $ref's will be resolved as relative to these IDs) or to use absolute $ref's. As is, it's impossible to resolve these $refs. The key you pass to ajv.addSchema as a second parameter is used for lookup, but it is not used as a base for ref resolution. Instead of using this second parameters you can add IDs in schemas.\n. Thank you. I will think whether this key should be used as id (the base for ref resolution). There are arguments for and against it...\n. I don't think it is a good idea to use externally defined schema name as the base for $ref resolution:\n- it is not clear where the $ref would resolve from the schema itself - makes it more difficult to understand.\n- the same schema can result in different validation logic depending on how it's added to the Ajv instance.\n- it also seems against the standard that clearly mentions schema IDs as the base for $ref resolution.\nWorkaround above resolves the issue.\n. dist directory is not in the repo and bower does not have its own storage. You can choose one of the following:\n1. npm install - the dist is there\n2. npm run build after you install from bower\n3. use cdnjs\nI recommend to stop using bower and use npm instead.\n. Sorry, you need to run npm run build && npm run bundle-all.\ncompile-dots.js only converts dots to js, then you need to bundle it for the browser.\nIt's a shame that bower stopped allowing to automate it with post-install script without providing their own storage like npm. See #132 and #171.\nI simply stopped using bower because of that...\n. Thank you. If you do npm install you don't need to run this script, all the bundles are included in the npm package already.\nClosing this issue until we come up with some better ideas...\n. I was considering implementing it, but decided against it.\nI think it's clearer to use allOf in schemas where the order is important.\nIn allOf subschemas are validated in order.\n. Custom formats can't do coercion, only validation. They are synchronous functions.\nYou can achieve what you want with custom keywords - they allow modifying data during validation \n. Let me know if custom keywords work for you, closing for now\n. See Define keyword with \"compilation\" function\n\nThis validation function will be passed data during validation (and also data path, parent object and the property name in the parent object - it allows to create keywords that modify the validated data)\n\nBy changing data you are not updating the object that contains this data, you are simply updating the local variable. You need to update the property in the parent object - parent object is passed as the 3rd and the property name as the 4th parameter to your validation functions.\n. Sorry, the previous response is a bit confusing. The return value should be the validation result rather than the new data value. If the keyword is purely for data conversion it should return true.\n. Can be either a separate code or separate schema applied to the cloned data.\n. I am not sure I understand what problem this keyword solves that is not already solved by existing keywords.\n. I see nothing in the proposal that would suggest it is the case.\nI generally disagree with the idea of having keywords that have wider effects than the schema they are used in - there are quite a few edge cases that make it both unexpected and difficult to implement.\n. According to the proposal, this schema:\njson\n{\n  \"required\": [\n    \"propA1\",\n    \"propA3\",\n    \"propB2\",\n    \"propB4\",\n  ],\n  \"strictProperties\": true\n}\nis equivalent to:\njson\n{\n  \"properties\": {\n    \"propA1\": {},\n    \"propA3\": {},\n    \"propB2\": {},\n    \"propB4\": {}\n  },\n  \"required\": [\n    \"propA1\",\n    \"propA3\",\n    \"propB2\",\n    \"propB4\",\n  ],\n  \"additionalProperties\": false\n}\nSo it is just a syntax sugar that can be added with macro keyword definition. Can be added to ajv-keywords I think\n. What do you mean by \"external properties\"? In any case strictProperties should be only affected by properties and other keywords in the same schema object, it can't take into account properties in other objects.\n. Closing the issue. I will not be implementing any keywords with global visibility until they are added to the standard. And I am strongly against it, I think keywords should only have local visibility.\nI haven't been presented with a single use-case for properties that cannot be expressed using existing JSON-schema vocabulary. I like the idea of $merge/$patch keywords though, extending the schema is indeed not supported and it is needed to extend meta-schemas, for example.\nIf you are interested in strictProperties keyword with local visibility, we can add it to ajv-keywords as I suggested (I already wrote the code, just need to add test cases...)\n. See $merge and $patch keywords.\n. This will work:\nvar ajv = require('ajv')({ removeAdditional: true });\najv.addSchema(swagger, 'swagger.json')\nvar isValid = ajv.validate({ $ref: 'swagger.json#/definitions/Employee' }, {\n  name: \"John\"\n});\n. $ref can be used as a schema for a single property, not to the whole properties keyword. In your example $ref will be treated as a property name, not as a reference to something.\n. @dinvlad why do you want to call compile/addSchema every time? It can be called only once during app initialisation.. You can use anyOf to require that either one is valid, not both.\n. @mbroadst it is still validating prototype properties against schemas in properties keyword (additionalProperties and patternProperties are resolved with #198, but it doesn't cover properties themselves).\nThat's the failing test: https://runkit.com/esp/585d958bc5386f00131c3093. @mbroadst the option is also not used in \"required\" keyword validation. TODO:\n- [x] \"properties\"\n- [x] \"required\" with \"properties\"\n- [x] \"required\" for few properties\n- [x] \"required\" for many properties\n- [x] \"required\" with $data\n- [x] \"dependencies\" with property list\n- [x] \"dependencies\" with schema. Cool, thank you. There may be a couple of other places where all properties are iterated that should also be affected by this option. + docs update is needed.\n. The feature definitely makes sense for the cases when there are class instances in your data when class extends prototype without making these methods enumerable. In your code you can control it, but most libraries (including ajv :) don't bother defining instance methods as non-enumerable. And it also makes sense to make it an option as otherwise it would affect performance of the main use case - validating objects parsed from JSON strings where it is not needed.\nA more performant approach could be to get the list of own properties in array and then iterating it with \"for\" loop (one function call to Object.getOwnPropertyNames) instead of checking each property (N function calls)\n. On the second issue there is this interesting \"essay\": http://mrale.ph/blog/2014/12/24/array-length-caching.html\n. Also:\nhttps://github.com/epoberezkin/ajv/blob/master/lib/dot/properties.jst#L214\nand\nhttps://github.com/epoberezkin/ajv/blob/master/lib/dot/properties.jst#L253\nunless I am missing something.\nI was thinking about some other cases, but it's schema that iterated there, that is highly unlikely to be some class instance, so no need to change anything there...\nYes, in options tests is perfect.\nThank you very much\n. No worries, today or tomorrow, sorry for the delay :)\n. in 4.1.0\n. It won't indeed... It's definitely outside of spec. You can do something like this using custom keywords though I think, although it's not trivial.\nIf you were to do it, where would the inheritance structure exist? In the schema? Or just in ajv instance? Custom keyword would work in both cases, just curious how you see it.\n. Consider how would anybody understand where this reference points to. Local reference should be local, remote should point to the exact location, otherwise it will be very confusing. Any inheritance if implemented should be expressed in the schema itself, definitely not as a validator feature.\nThe right place to submit this idea would be json-schema-org. If the idea makes its way into a standard draft (or at least becomes a proposal with a clearly defined syntax and some community support), I may implement it in ajv.\n. Need to think about it...\nProblems:\n1. Validation function receives 4 arguments, not just data.\n2. It would affect performance for the main use case\nI was also thinking about schema level options (rather than validation-time options) but it also adds a lot of complications...\n. Was thinking... Probably performance overhead of creating an additional instance is less that checking such options at validation time.\nThe solution could be to have some compilation time option(s) that would whitelist option(s) that should be supported at validation time (to avoid performance cost in general case, and to generate code that would support such options).\nIt still requires changing validation function signature to pass these options, so should be a major version change. Alternatively it could be some method to set validation time options that would apply to all subsequent calls... Not sure I like such api though.\nThe reason you can't have schema level options easily, by the way, is because schemas may have dependencies and they should be compiled with the same options; so caching compiled schemas becomes difficult - options they were compiled with should be taken into account.\nThe more I think about all this complexities, having multiple instances seems to be the right way. What are your arguments against it, apart from some aesthetics? This complexity should live somewhere and having it in your app rather than inside ajv has both performance benefits and also reduces total complexity...\n. anyOf collects one error for each subschema and if no valid subschema is found it also adds anyOf error. Determining which of failing subschemas \"best matches\" the input is not trivial - it seems to be out of scope of validation and more like in application scope.\noneOf only passes if only one subschema is valid. In most cases anyOf faster - it only needs to validate until valid subschema is found; oneOf will have to validate all schemas if the data is valid. The error in your case has schemaPath and dataPath that allow to determine what the error relates to. Maybe it should like anyOf keep the errors from subschemas...\n. Relative JSON pointer draft does not specify any syntax for array length. 1/metadata/length works because it is defined in JavaScript. 0# in the same place would resolve to \"audience\", 1/metadata# correctly resolves to property metadata#\n. I guess I could add to the tagline \"the only validator supporting v5 proposals\" ;)\n. Could you post the code please?\n. https://tonicdev.com/esp/574e756875fd9d13001bdbd7\n. The issue is in some of your schemas probably...\n. What is the version of ajv?\n. Ok, I think I see the issue. As a workaround, instead of the option schemas: _.values(schemas) use ajv.addSchemas(_.values(schemas)) for now. Will fix\n. Or better add $schema keyword in all your schemas. The bug is that with v5 option it tries to use v5 metaschema by default but at the time schemas option is processed it is not added yet. If you tell your schemas to use draft4 metaschema explicitly it will also work.\n. fixed in 4.1.1\n. additionalProperties are scoped to the current schema, they don't have global visibility...\nIn this case it means that additionalProperties will fail validation if any property in addition to foo and bar is present. You cannot extend it by declaring properties in another schema object, they should be declared in the same schema object. That's by the spec.\nYou need:\n{\n  type: 'object',\n  properties: {\n    foo: { type: 'array', minItems: 2 },\n    bar: { type: 'string' }\n    baz: { type: 'string' },\n  },\n  additionalProperties: false,\n  required: [ 'foo', 'bar' ],\n  switch: [\n    {\n      if: { properties: { bar: { constant: 'testing' } } },\n      then: {\n        required: [ 'baz' ]\n      }\n    },\n    {\n      then: { not: { required: ['baz'] } }\n    }\n  ]\n}\n. See #129, #134, #140\n. And you don't need v5 switch for that, oneOf will work too.\n. Maybe it will all make more sense if you think about it in this way: JSON Schema may seem like it is about declaring what is allowed, but it is not. JSON Schema is about imposing restrictions. So you can easily extend the restrictions by adding them to any schema (like in the case with required above, where you don't need to repeat properties required in another schema object). But you cannot reduce the restriction by adding something to another schema object (like adding property declaration to another schema in your example). To reduce the restriction you need to modify the schema that imposed the restriction (or to use anyOf/oneOf). Not sure if I made it any clearer to be honest...\n. you can use not with required as in my example to prohibit proberty\n. not negates validation result. not passes when schema inside fails. required fails when property is absent.\n. But semantically it is funny indeed\n. You don't have to wait for the standard change :)\njavascript\najv.addKeyword('present', {\n  macro: (schema) => ({ required: schema });\n});\n. Can't reproduce, although I tried with npm 3.9.3 (I used nvm to install, that's the latest it has), yours is 3.9.5\n. Ah, just noticed, you have windows...\n. Also, did you just 'npm install'ed or 'git clone'd and then installed?\n. It all works on mac...\nCan you at least install ajv as a dependency?\nThe only existing circular dependency, if that's what it is, is that ajv depends on gh-pages-generator that depends on ajv. gh-pages-generator is a dev dependency (although it makes no difference on mac, it works ok if it's a normal dependency as well)... Can you maybe try removing it from package.json and run npm install without it?\n. It's in repo: https://github.com/epoberezkin/ajv/blob/master/package.json\n. @ralphtheninja Ah, sorry, got it :)\n. As I understood, @sushant160185 did just the following:\ngit clone git@github.com:epoberezkin/ajv.git\ncd ajv\nnpm install\nSo ajv is not a dependency, it was installed separately.\n@sushant160185 is it correct?\n. Did you try removing gh-pages-generator from package.json before npm install?\n. @sushant160185 Can I ask what are you trying to do in general? To make some change in ajv?\n. Bundle is included in npm package. If you make ajv a dependency in your app (npm install ajv --save), there will be a bundle in the folder node_modules/ajv/dist. Using CDN is also an option.\nI still need to figure out what is wrong with npm install inside ajv in windows.\n. The bundle shipped with ajv can be used as is - this is recommended.\nIf you really want to re-build you need:\ngit clone git@github.com:epoberezkin/ajv.git\ncd ajv\nnpm install\nnpm run build\nnpm run bundle\n. @sushant160185 You have to fix lines 9-12 in bundle script in the same way.\n. in 4.11.5. schema should be a valid JSON, it gets serialised. So it's treated like an absent property.\n. Data is not serialised. But \"required\" and \"properties\" keywords treat undefined properties as absent. If they didn't it would fail \"type\" validation anyway.. https://runkit.com/esp/59483e6f46db35001276ae47. It's not possible at the moment. I have some doubts that it is a good idea to be honest, particularly for type keyword.\nYou may want to use independent custom keywords instead. I've recently started adding some useful keywords to ajv-keywords, both to use them and to serve as implementation examples...\n. I think using a custom keyword { \"typeof\": [\"string\", \"function\"] } is better than redefining standard type keyword for several reasons.\n. https://github.com/epoberezkin/ajv-keywords#typeof\n. You can define custom keyword that would analyse errors collected so far and remove them based on some criteria. So your allowAFunctionAsWell could be a custom keyword that would check that if type validation failed but the data is a function it would remove the validation error.\n. Yes, that's correct, it will have to be inline. You've probably found that already: https://github.com/epoberezkin/ajv/blob/master/CUSTOM.md#reporting-errors-in-custom-keywords :)\nBy the way, return true; may not complete validation if it is in some subschema that was compiled to a separate function rather than inlined. But in general, that's the idea.\n. Subschemas that don't have refs inside them are inlined (can be turned off). Also, before you return you need to clear errors. But I don't think you want to return, do you? I thought you would update vErrors and errors.\n. See this too: https://github.com/epoberezkin/ajv/blob/master/CUSTOM.md#short-circuit-validation\n. You need to use this custom keyword in the parent object, not in the property:\njson\n{\n    \"$async\": true,\n    \"type\": \"object\",\n    \"properties\": {\n      \"email\": {\n         \"type\": \"string\",\n         \"format\": \"email\"\n      },\n      \"password\": { \"type\": \"string\" }\n    },\n    \"required\": [ \"email\", \"password\" ],\n    \"validatePassword\": true\n}\njavascript\nvalidator.addKeyword('validatePassword', {\n    async: true,\n    schema: false,\n    validate: function (data) {\n      return User.where('email', data.email).fetch()\n        .then(model => {\n          if (model === null) {\n            return false;\n          }\n          return validatePassword(data.password, model.get('password'));\n        });\n    },\n    errors: true\n});\nYou can use validation function straight away and pass schema: false when you don't need keyword value: https://github.com/epoberezkin/ajv/blob/master/CUSTOM.md#define-keyword-with-validation-function\nBtw, you don't need to use allOf when combining two rules, it's only needed when combining two schemas and 1) one of them is $ref; 2) the order is important (custom keyword will be the last one to be validated anyway); 3) you need to combine two different values for the same keyword (e.g. two different patterns). \n. Probably just code to transform the object ajv returns to the object you need. dataPath is empty string because it refers to the top level object you pass, not to some property.\nThe structure of error object is documented and is not going to change without notice and major version change.\n. Even if schema is recursive it should have some branch(es) when the recursion stops, same as with functions. Otherwise you'll get stack overflow exception.\nTheoretically you can get this exception if your data is extremely deep, but all the cases of endless recursion I came across were with badly defined schemas.\nFor example, this simple schema will cause stack overflow when you try to validate any data:\njson\n{\n  \"$ref\": \"#/definitions/recursive\",\n  \"definitions\": {\n    \"recursive\": { \"$ref\": \"#\" }\n  }\n}\nhttps://tonicdev.com/esp/575f2c68a580751300ba16f6\nSome example of schema and data that fail would help to understand whether the issue is with your schema or with ajv. Maybe you can post a \"working\" example to https://tonicdev.com/ ?\n. Mutual recursion that you describe is supported, but you can get the same problem, if there is no branch that stops recursion (or if its condition is never satisfied).\nYou can see a working example of mutual recursion in the beginning here: http://code.tutsplus.com/tutorials/validating-data-with-json-schema-part-2--cms-25640 (navigation.json refers to page.json and vice versa).\n. Not in all cases. References can resolve differently when you split the schema. Could you please post the example?\n. Or can be a bug of course, in any case if I can't reproduce, I can't fix.\n. sure, I'll have a look\n. I didn't... Maybe email dropbox/google docs link?\n. please add the code that fails too\n. This is the minimal failing test case:\n``` javascript\najv.addSchema({\n  \"id\" : \"def\",\n  \"definitions\": {\n    \"text_assets\": {\n      \"properties\": {\n        \"asset\": {\n          \"$ref\": \"asset_base#/definitions/asset_image\"\n        }\n      }\n    }\n  }\n});\najv.addSchema({\n  \"id\" : \"asset_base\",\n  \"definitions\": {\n    \"asset_image\": {\n      \"properties\": {\n        \"caption\": {\n          \"$ref\": \"def#/definitions/text_assets\"\n        }\n      }\n    }\n  }\n});\najv.compile({ \"$ref\": \"def#/definitions/text_assets\" });\n```\nIt appears that the support of mutual references is limited to the case when at least one of them is the reference to the whole schema and the case when both are fragments is not supported.\nThe workaround is to extract one of the schema fragments that participate in the mutual reference into a separate schema:\n``` javascript\najv.addSchema({\n  \"id\" : \"def\",\n  \"definitions\": {\n    \"text_assets\": {\n      \"properties\": {\n        \"asset\": {\n          \"$ref\": \"asset_image\"\n        }\n      }\n    }\n  }\n});\najv.addSchema({\n  \"id\" : \"asset_image\",\n  \"properties\": {\n    \"caption\": {\n      \"$ref\": \"def#/definitions/text_assets\"\n    }\n  }\n});\najv.compile({ \"$ref\": \"def#/definitions/text_assets\" });\n```\nThat's a good finding, something to be improved. Thank you.\n. Can't promise, definitely not year, can be a month though. There is a third option btw - to submit a PR :)\n. In 4.1.7\n. That's definitely out of scope. This logic should be in the application and to avoid duplication of code in schemas I would use templates with conditionals (or some other mechanism) to generate all the schemas I need from a single template (either at build or at bootstrap time).\n. I was suggesting creating separate schemas for each field - the main schema can be used to extract them programmatically or you can define them separately (and potentially construct main schema by merging them).\nThe first approach you mention (validate the whole form) can be also justified if some of your fields dependent on the other (e.g. mutually exclusive form subsections toggled by checkbox or password/confirm password fields).\nYou can also use $ref to extract these partial schemas, e.g. { $ref: 'schema.json#/properties/first' } or { $ref: 'schema.json#/properties/second/properties/some' } - it is part of the standard.\nI don't plan to add anything else to support it - I think the approaches above are more than sufficient.\n. someSchema#firstName doesn't point to anything in this case. You either need to use someSchema#/properties/firstName or to add \"id\": \"#firstName\" inside this subschema.\nYour code is also wrong, you can't pass schema to a compiled validating function, you can though do ajv.validate({ $ref: 'someSchema#/properties/firstName' }, 42)\nTo have required constrain you need to split your whole schema into multiple subschemas and validate the whole data object rather than its properties:\njson\n{\n  \"id\": \"someSchema\",\n  \"type\": \"object\",\n  \"allOf\": [\n    {\n      \"id\": \"#firstName\",\n      \"properties\": {\n        \"firstName\": { \"type\": \"string\" }\n      },\n      \"required\": [ \"firstName\" ]\n    },\n    {\n      \"id\": \"#lastName\",\n      \"properties\": {\n        \"lastName\": { \"type\": \"string\" }\n      },\n      \"required\": [ \"lastName\" ]\n    },\n    {\n      \"id\": \"#email\",\n      \"properties\": {\n        \"email\": { \"type\": \"string\", \"format\": \"email\" }\n      },\n      \"required\": [ \"email\" ]\n    }\n  ]\n}\nNow you can validate ajv.validate({ $ref: 'someSchema#firstName' }, { firstName: 42 }). And you can validate the whole object as well.\nAlternatively, as I wrote previously, you can use templates to generate multiple schemas. For example using one doT template:\n{\n  \"id\": \"someSchema\",\n  \"type\": \"object\",\n  \"properties\": {\n    {{~ it.properties:p:i }}\n      {{?i}},{{?}}\n      \"{{= p.name }}\": {{= JSON.stringify(p.schema) }}\n    {{~}}\n  },\n  \"required\": [\n    {{~ it.properties:p:i }}\n      {{?i}},{{?}}\n      \"{{= p.name }}\"\n    {{~}}\n  ]\n}\nyou can get all the schemas you need, for all, one or several properties - you need to pass the array of objects with properties name and schema of data properties that you want to validate.\n. I understand that what you want is for a validator to somehow derive the requirement for a single property from a general schema that has the requirement for the whole object. Please correct me if I am wrong.\nThe problems here are:\n- it is only applicable to objects, while schemas can be defined for other types\n- it is not always possible - there are schemas where the requirements to a property are dependent on other properties\n- it is complex even in relatively simple cases when it is possible (it should take into account patternProperties, required, schemas inside additionalProperties, compound keywords, etc.) \n- it is out of scope of what a validator should be doing. You want \"given schema A derive schema B\". Such schema operations are out of scope of validation.\nWhat you want is only possible for schemas that are defined for objects, with properties independent of each other.\nWhat I suggested above are not workarounds, these are generic approaches that would work for any schemas, without limiting them to a subset of JSON-schemas. These approaches are the opposite of what you want - instead of trying to derive the schema for a property from the schema for the object (complex, not always possible), I suggest to start from multiple schemas for all properties and to construct (manually or programmatically) the schema for the whole object (simple, always possible).\nThere is a package ajv-inspector by @e0ipso which seems to be doing something close to what you want: given the schema for an object it extracts the schema for a given property. There are several relatively simple improvements that would make it more useful - I've submitted several issues there, please also see https://github.com/epoberezkin/ajv/issues/166#issuecomment-239929160 .\nI disagree that any such schema transformations/operations should be a part of Ajv. They should be separate packages. So please contribute to ajv-inspector if it is close to what you need.\n. The second can be created from the first.. @rasdaniil Ajv doesn't compile the schema every time in this case, it stable-stringifies the JSON and looks up the compiled schema in the cache.\nIt is more efficient though to use getSchema (or to pass the jsonpointer to ajv.validate), as there is no need to stringify the schema in this case:\n```javascript\n// this should be executed only once\najv.addSchema(schema); // schema should have $id or id attribute, say \"schema.json#\"\n// or\n// ajv.addSchema(schema, 'schema.json');\n// ...\n// every time you validate\nconst schemaUri = 'schema.json#/properties/' + prop;\nconst validate = ajv.getSchema(schemaUri); // you can keep them in the map, to avoid getSchema call too\nconst valid = validate(value); // errors are in validate.errors\n// or\n// const valid = ajv.validate(schemaUri, value); // errors are in ajv.errors\n```. > If I use a compiled validator and get an error, the errors object (associated with the validator function), has a dataPath field which has the value [object Object]. I suspect that it is being copied in the process of validation.\nThat may be a bug. Could you post some example here that produces such result?\n\nI also enjoyed having the errorsText() function to produce a helpful error message. Apparently, this feature is not afforded to compiled validation functions. That's unfortunate and unexpected (as compiled validator functions have the same needs as those invoked via the ajv instance method).\n\nIf validate is a compiled validation function, you can use ajv.errorsText(validate.errors) - see https://github.com/epoberezkin/ajv#errorstextarrayobject-errors--object-options---string\n\nFinally, for thread safety purposes (since I would expected compiled functions to be reused by many threads), why not simply return an errors object instead of a boolean?\n\nJavaScript is a single-threaded environment and the validation is synchronous. So while the same function can be called many times, it can't be called during its execution. So all you have to do is to re-assign errors array after validation to any variable, particularly in async environment (there is a note in readme). The existing api was copied from jsen and is-my-json-valid, the fastest validators existing at the time I was doing it. The alternative api implemented by validators of the previous generation (return result object with boolean and errors) has a substantial negative performance impact.\n. That's why I think it may be some bug. Schema or not, you are passing something that is not valid, but errors should still be correct, and they are not.\nI can't reproduce it with a simple schema, so it would be good if you could post the example.\n. Thank you.\nI understand the issue now. It happens not because you pass schema instead of data, but because you pass empty object as a second parameter.\nSecond parameter is used to pass the current dataPath to subschemas and it must be string. It's used internally, so there is no validation for it.\nIf you call validate(schema) dataPath will be an empty string.\nSo it's all ok I think.\n. There is a link to relative JSON-pointer draft in docs: https://tools.ietf.org/html/draft-luff-relative-json-pointer-00\n. also see examples here: https://gist.github.com/geraintluff/5911303\n. Function in compile property of keyword definition should return validation function, rather than validation result.\n. https://tonicdev.com/esp/576fa7d3b9a58d120006e88c\nThat's exactly your code. Not sure what did you expect...\n. It is all correct. If you use ajv.validate method, the returned value is validation result (boolean) and the errors are added to ajv instance (ajv.errors).\n. See https://github.com/epoberezkin/ajv#getting-started\n. Thank you, seems ok. And it should be optional indeed as the same definition is used for custom keyword functions (although maybe it's worth using different type definitions?).\n. Interesting. If you replace \"properties\" in asyncSchema and in $ref with \"definitions\" (or anything else) it works: https://tonicdev.com/esp/5772c6738dc3051200da26e9\n. And using different property names in schemas also fixes the issue...\n. So the real issue has nothing to do with async loading - it happens because ref resolution doesn't fail when it should (because referenced schema is missing): https://tonicdev.com/esp/5772cc02b5157813007e909a \n. fixed in 4.1.5\n. There is an option format: \"full\". See options in docs\n. See https://tonicdev.com/esp/5772e2ec8dc3051200da3961\n. What would be the regex change?. Extending Object prototype, particularly with enumerable property, is never a good idea. It all works if you remove this debugging code, why it is an issue? Just remove the debugging code.\nEven if you need it make it a non-enumerable property.\n. See https://tonicdev.com/esp/57780c2a700b9a130045b1e3\n. Making this method non-enumerable also works\n. can you post the full failing code please? Schema seems to be invalid, maybe nothing to do with format.\n. See https://tonicdev.com/esp/577c211846395d1200bb9b52\nThe value that you have is not a valid \"date-time\", it is a valid \"date\" though.\nAlso, I am not sure what validate is, if it's ajv.validate (as it seems from the error), then the schema should be the first argument. See Getting started\n. closing, please reopen if you have a failing code and above is not helpful. Thank you\n. ESLint 3+ only supports node v4+\n. @blakeembrey should it be there?\n. @blakeembrey thank you!\n. @skolmer thank you.\nJSON with special characters is not supported indeed...\nIt's relatively easy to address by escaping control characters in the code that inserts properties.\n. Yes. Can you maybe check if I am missing some control characters in the test?\n. In 4.1.6. Please reopen if you notice some cases when control characters are not supported.\n. @arosequist thank you!\nI suspect that this wording exists from the time when additionalProperties was returning a single error for all properties rather than one for each additional property (you can have multiple errors with allErrors: true option)...\nYour suggestion can make it better in some cases, but it cannot be merged right now as it may break the code of users who depend on error messages. So in any case if we do it, it should be a major version change.\nIn general, the messages returned by Ajv were intended for consumption by code/debugging rather than for the end users. In particular for additionalProperties, I don't see a real use case when end users could add additional properties - it usually happens if the wrong data is supplied to the api. The error object has an additional property in params so any code that consumes it can use it there.\nThere are several ways to generate end-user messages:\n- application code\n- ajv-i18n. Its English locale already has \"NOT\" in lowercase, by the way. At the moment it doesn't allow adding/changing locales in the run time, so you'd have to fork it, but I'd be happy to change it to allow it - https://github.com/epoberezkin/ajv-i18n/issues/21\n- custom error messages discussed in #100 (not implemented yet) - it should be a separate package defining the custom keyword errorMessages, there is even a small bounty for it :)\n. see https://github.com/epoberezkin/ajv/issues/22#issuecomment-124921380\n. Creating dereferenced schemas for recursive schemas is simply not possible (short of creating objects with circular references), and recursive schemas are a very common use case.\nA better approach for code generation (and actually any schema-based processing) is to use custom keywords and your own context object that will be passed to them (see passContext option) and can accumulate the results of processing or anything else.\nIn this case you won't have to worry about traversing the schema and interpreting keywords items, properties etc. You will only have to implement your custom processing in custom keywords and Ajv will iterate the schema for you. I used this approach in jsonscript-js.\n. Also #125\n. fixed in 2.5.9\n. in 4.2.0\n. For small/non-recursive schemas you own you can always refactor at least...\n. See $merge and $patch keywords.\n. In 5.0.0-beta.0.\nTo use: npm install ajv@^5.0.0-beta\n. Could you please post the whole failing code (e.g. in tonicdev.com)? The error seems to be from the app rather from the ajv. Also it would be good to reduce the failing example size.\n. Have you tried using the bundle from cdnjs? https://github.com/epoberezkin/ajv#using-in-browser\nThen the code from Getting started should work I think, although require in Dojo has some different syntax I suspect.\n. You can use the bundle in dist folder it's the same.\nWhat happens with the code above?\n. By the way, given that dojo doesn't recognise the bundle format (although it's universal) you may have global Ajv.\n. the problem with the fiddle is that it uses dojo that redefines require. And as I said, Ajv is global (that is until you override it in the second fiddle)\nSo just remove the first line in the second fiddle - it works then.\n. Please reopen if it didn't work.\n. Please create a non-working sample. I think fiddle uses Dojo, no?\n. It seems like dojo has its own module system that isn't compatible with both commonjs and AMD, but because it redefines global require it breaks the bundle? Not sure how to fix it, maybe bundle has to be built separately...\n. In which order do you load bundles (ajv and dojo)? jsfiddle loads dojo before ajv. Did you try changing the order?\n. Thank you! I guess it's worth adding some notes in README.\n. The reason is performance - it is faster to return boolean. I was implementing the same api as other fast validators. Slow validators usually return { valid: false, errors: [] } object.\nYou can either define your own wrapper function or use json-schema-consolidate to return such object.\n. It does not. I don't plan to support it for several reasons.\n. You can achieve all it does by correctly structuring your schemas. This feature is at least inefficient in terms of performance, also there are cases when it is not clear what it should mean (inside keywords oneOf and not, which were part of the purpose to add it).\n. Thank you\nThere are two ways to address this requirement:\nOne is by manually merging allowed properties in one subschema (you don't have to repeat their definitions) and use additionalProperties:\n{\n    \"definitions\":\n      \"first\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"prop1\": {\"type\": \"string\"}\n        },\n        \"second\": {\n        \"type\": \"object\"\n        \"properties\": {\n            \"prop2\": {\"type\": \"string\"}\n        }\n      },\n      allOf: [\n         {\"$ref\": \"#/definitions/first\"},\n         {\"$ref\": \"#/definitions/second\"},\n         {\n           \"properties\": {\n             \"prop1\": {},\n             \"prop2\": {}\n           },\n           \"additionalProperties\": false\n         }\n      ] \n}\nIt's super easy to define custom keyword { allowedProperties: ['prop1', 'prop2'] } as macro to do the same if you like.\nAnother is by using the proposed \"$merge/$patch\" keywords. See #231 - I plan to implement it at some point.\nI prefer these approaches as it keeps validation logic in the schema without delegating it to the validator option and essentially changing JSON schema semantics in a big way. There are some options that affect validation, but these options are either mentioned in the standard or are very focussed on particular keywords. banUnknownProperties creates the whole parallel universe where JSON schema is a different standard...\nI've seen the tests you are referring to - there are only tests for very simple cases, they don't even cover patternProperties. With $refs (particularly [mutually] recursive ones) it becomes much messier to support/implement.\n. The only reason I see to implement this feature is to help people migrate from tv4... I will try to investigate how many tv4 users who would consider migrating are using this feature.\nIn any case, an alternative to supporting different validation mode would be to provide a migration utility/library that transforms the schemas to equivalent schemas but not relying on this option.\n. See $merge and $patch keywords.\n. @zag2art $merge can't merge multiple schemas indeed.\nIt's possible to improve it to support this: https://runkit.com/esp/588249924ddfcf001488f5e9\nBut a better option could be to implement an array syntax when $merge value is an array of schemas/objects to merge.. @stuartpb the problem is that additionalProperties is shallow, it doesn't take into account properties that exist on the same level in data but are defined in different schema objects.\nPlease see FAQ on multiple related issues and also this https://github.com/epoberezkin/ajv/issues/134#issuecomment-242989744 about possible workarounds.\nAt the moment there is no consensus in JSON-Schema-org about what should be the standard solution to these issues.. Because some properties can be defined on top level of schema and some inside anyOf subschemas, but they need to be combined. Just adding additionalProperties would make schema more restrictive than you would like to - it wouldn't allow properties defined on top level.. Thank you!\n. Thank you very much, it is very detailed.\nI don't see any obvious issues in your schemas, it should have worked. #210 is actually resolved, but you seems to have uncovered another edge case where my ref resolution logic fails...\nI will look into it this week, I have a feeling it can be something easy to fix.\nBy the way, the fact catalog and library are mutually recursive is not relevant for domain.schema - it refers to the fragments that only refer to api.schema, not to each other.\nRemoving properties from one of catalog or library schema makes it compile, as I think extracting just one fragment would be enough: https://tonicdev.com/esp/578f25ac150e3f1300310e5e\nJust a side note, why do you include fragments into schemas that don't use those fragments? I mean catalog is not using catalog resource and same for library. I guess they belong there from the domain perspective... It should work anyway.\nI will debug.\n. I understand, ref resolution is the most convoluted part indeed...\n. In 4.1.8\n. @jonah-williams please let me know if you notice any other issues. Thank you!\n. Thank you!\n. JavaScript is single threaded and the validation itself in your case is synchronous for each ID.\nSo there is no such risk.\nIf, for example, you wan't to collect all errors from all customers you can:\n``` javascript\nconst validate = ajv.compile(customerSchema)\nfunction checkCustomer(id) {\n  return promiseFetch(id).then(customer => {\n    validate(customer);\n    return { id: id, errors: validate.errors };\n  })\n}\nPromise.all([id1, id2, id3, ...].map(id => checkCustomer(id) ))\n.then(results => console.log(results));\n```\nIt will be mapped correctly.\nIf the schema itself is asynchronous then errors are not returned as the property of validation function but as the property of error object that the promise rejects with.\n. In relation to the comment in readme, it means that if you tried to use the same errors in a different execution block they could be errors from the different validation.\nFor example this code has this problem:\njavascript\npromiseFetch(id)\n.then(customer => ({ id: customer.id, valid: validate(customer) }))\n.then(result => {\n    if (!result.valid) console.log(`Customer ${id} has errors: ${validate.errors}`);\n});\nBut the code below will always work as expected, because errors are used in the same execution block before they can be overwritten:\njavascript\npromiseFetch(id)\n.then(customer => {\n  var valid = validate(customer);\n  return { id: customer.id, valid: valid, errors: validate.errors };\n})\n.then(result => {\n    if (!result.valid) console.log(`Customer ${id} has errors: ${result.errors}`);\n});\n. I am afraid it is a bit too late to change the coercion rules - it won't be backwards compatible. Also all the rules are created in such way that they are \"reversible\" - coercing twice should produce the same result as the original data. Doing it otherwise would make validation fail in cases when it should not.\nNow it works this way: \"0\" -> 0 -> \"0\", so it is reversible.\nThe coercion you suggest is not reversible: \"\" -> 0 -> \"0\".\nBy the way, empty string coerces to null but in JSON-schema it is a different type. See all rules.\nTo pass validation in your case you should simply update your schema, e.g. in such way:\n{ \"type\": [\"integer\", \"null\"] }\nIf you need additional data change from null to 0 you can either do it outside of schema, use custom keyword or coerce twice (a bit weird but will work too):\n{\n  \"description\": \"this schema will coerce empty string to 0\",\n  \"allOf\": [\n    { \"type\": [\"integer\", \"null\"] },\n    { \"type\": \"integer\" }\n  }\n}\n. Thank you\n. You can define custom format \"numeric\" - it can have functions for both validation and for comparisons: https://github.com/epoberezkin/ajv#addformatstring-name-stringregexpfunctionobject-format\n. This is a partial solution. It coerces to array but doesn't coerce from array. Coercions should be reversible, otherwise it would fail with coercions in cases it would pass without (when anyOf/etc are used).\nAll rules from #158 need to be implemented before it can be merged...\n| schema | data | result | pass |\n| :-- | :-: | :-: | :-: |\n| {type:'number'} | [5] | 5 | no |\n| {type:'string'} | [5] | '5' | no |\n| {type:'array',items':{type:'number'}} | 5 | [5] | yes |\n| {type:'array',items':{type:'string'}} | 5 | ['5'] | yes |\n. Also, please avoid unnecessary white-space changes. It's spaces, not tabs, 2 space indentations everywhere.\n. Also, there should be tests of standard coercions with coerceTypes:'array' option to make sure they are not broken, and tests of array coercions with coerceTypes:true to make sure it doesn't coerce to/from array.\n. Thank you, I will review/merge this week.\n. Getting there... :) Could you please also remove unnecessary changes of == to ===? In my \"book\", I always use ==/!= unless ===/!== must be used, for several reasons :)\n. By the way, this object <-> array coercions seems a bit over the top - I'd limit to scalars...\n. Also it seems to be only one way at the moment, so removing it is probably better.\n. Thank you. Will publish today evening.\n. in 4.3.0\n. Ajv supports custom keywords, any data transformation can be defined using them. If you need to run transformation before validation you can do it with allOf keyword (in the same schema custom keywords are executed after).. @willfarrell it was not dropped. I think @jfstgermain refers to the ability to define custom coercions.. I see. It's quite easy to define as a custom keyword.. You need to use an option allErrors, see Options.\n. You need to use \"id\" property in schemas, add them to ajv instance using addSchema method. $ref refers to the schema ID (schema uri, as per spec), it has nothing to do with file names.\n. Got it. Ajv doesn't implement any loading mechanism - it's out of scope. You can either add all referenced schemas using addSchema method (or via schemas option) or use asynchronous compilation - you will need to supply your own loading logic as an option to the Ajv instance. This way you can load from files if you run on the server or via network when you run in the browser.\n. You may have added them with addSchema? \n. In 5.0.0-beta.0.\nTo use: npm install ajv@^5.0.0-beta\n. Looks ok to me, @blakeembrey I'd appreciate if you could look as well...\n. @blakeembrey thank you, I was thinking about it not being backwards compatible...\n. Instead of oneOf you probably need to use \"type\": [\"string\", \"null\"].\nIn your case it works as expected. null can be coerced to \"null\" and it also passes {\"type\": \"null\"}, while oneOf requires only one schema to pass.\nIn general, coercion increases the probability of passing, so in cases your schema requires that some subschema fails (e.g. inside oneOf or not) coercion would increase the chances of parent schema failing.\n. Thank you, that was the use case, also form submissions.\n. Possibly, duplicate of #93.\nrequired keyword is applied to the parent object, so dataPath points to it; if it's a root object it will be an empty string. Same for additionalProperties and dependencies. As you can see from your errors object dataPath points to the same value that is in data property.\nSee this comment: https://github.com/epoberezkin/ajv/issues/93#issuecomment-167445543\nKeywords applied on the property level (i.e. those used in subschemas inside properties keyword, e.g. type, format, etc.) always have property name as part of dataPath, but it can be in JavaScript index format in case it is not a valid identifier and in some other cases. It you need to parse out the property name in can be easier if you use jsonPointers option - there is also escaping for symbols \"/\", \"~\" etc., but at least no index notation.\n. What I was trying to explain is that you mix two different concepts here - the property of the data object in which the error happens (e.g. when you use keywords type, minimum etc.) and the property to which the error is related (when you use required, additionalProperties, dependencies) - in which case the error happens on the object level, not on the property level.\ndataPath points to the point in the object where the error happens.\nproperty related to error is always available in error.params.\nI don't think we should add one more property in error object if it doesn't add any additional information. I think it should be in the application code that processes the errors... I will think about it.\nIn any case, the structure of error objects for all keywords is documented and it won't change, not without major version change, so you can rely on it in the code that processes errors.\n. > So if I understand correctly there are basically only two paths.  One is\n\nfor the required rules, and the other is for the more specific type, format\netc rules.\n\nYes, the former pointing to the parent object.\nYou can use the option errorDataPath: 'property' (see Options) that would make dataPath always pointing to the property in question (for keywords required, additionalProperties and dependencies).\nWhat I don't like about this option is that data property of the error object (with verbose: true option) would still point to the parent object becoming inconsistent with dataPath.\n\nYou feel that the client can derive what the property is and\nthat is enough, and if it turns out to be pretty straightforward, then\nthat's cool.\n\nKind of. I am fighting the \"feature creep\" here a little bit... Also I think duplicating the same information in multiple places should be at least considered carefully. As I wrote, I need to think about it...\n\nI feel that the client should be presented with an easily\nconsumable ( no need for derived or constructed data ) payload, but that is\njust an opinion.\n\nThat I agree with. I think it is (at least partially) addressed with message property of errors and also .errorsText method - both include messages that refer to the property in question. Also #100 when implemented would allow to include custom error message generation in the schema, that would most likely address your issue as well. I still hope somebody would implement it, there is even a small bounty for it...\n. Let's keep it open for now...\nRe #100, you'll need to see how custom keywords that generate inline code are implemented and follow more or less the same approach. Other custom keyword types won't allow you to manipulate the array of errors. It's not too difficult, but you'll need to figure out a few things about how ajv works internally.\n. Because the error with required keyword happens on the parent object level, rather than on the property level - property doesn't exist and it never gets validated, object does.\nAlso, error has properties data (actual reference, in verbose mode)  and dataPath (JavaScript property or JSONPath) - by default they point to the same data.\nSee above - it's explained there too.\n. @reharik I was about to implement it, but stopped at naming this property of error object... The error can be both related to the object property (in which case relatedProperty seem right) and to the array item in which case the name doesn't fit. Having two different names seems wrong, it defeats the original purpose of getting this info from a single place... relatedPropertyOrItem seems quite stupid too. What do you think?\n. This can be helpful: https://github.com/epoberezkin/ajv#validation-errors\nError is always either on the property level (where you know the data path) or on the parent object level in some cases (where you know the data path as well). So you should be able to filter errors for each field.\nAs I wrote above, you can use the option errorDataPath: 'property', in which case all errors will be on the property level.\n. This can be helpful maybe: https://github.com/DivineGod/ajv-error-messages\n. Thanks for the issue. It's similar to #242.\nJavaScript is always single threaded so you won't have any race conditions in asynchronous environment if you use the errors in the same execution block - see the referenced issue.\nYou also can create your own api wrapper, which is a common practice anyway as it often combines schema retrieval, or use json-schema-consolidate if an additional function call is not a concern. I don't think an additional method doing the same validation should be added to ajv.\nIt's also better to use compiled validation function rather than accessing it via ajv.validate method.\n. > we call the JavaScript from a multithreaded environment (we use Java which provides its own JavaScript engine (\"nashorn\") and thus we can invoke JS functions from a running Java-Thread). This is of course sort of a mismatch (single-threaded environment called by a multi-threaded environment). I think however that by doing so it is indeed possible that JS functions are called concurrently (I am however not 100% sure). \nInteresting... If the same JavaScript function (the same instance of function) is indeed used from multiple threads (not sure if that is possible) then changing Ajv instance API may not be enough to solve the problem. I would suggest checking if the validation function you access is the same instance (by marking it with some unique property e.g.). Even if it's the same function, it's worth checking if they are called concurrently. I would still expect there should be some locking mechanism in this case, that would prevent the same instance of function to be concurrently executed from multiple threads. Could you please check it?\n\nI thought that it might be anyway \"cleaner\" to return all validation result immedietaly and not writing it in the ajv (or compiled) instance variable. The current API design makes the error handling even in plain javascript a little bit more complicated when dealing with promises due to the error state in AJV. If you would just return it, it would be more \"clean\" for a caller. \n\nThere are both historical reasons (other fast validators have the same api) and performance reasons not to return an object. Given that convenience is a subjective thing and also that the majority of users end up having their custom wrapper anyway (to retrieve schemas, to process validation errors, etc.) I am not convinced that convenience is strong enough reason to change or to extend the api.\nBy the way, are you aware that ajv supports asynchronous validation where you can add your own custom keywords (or formats) having some async calls in them? Even without custom keywords, if you add $async: true keyword to the schema root the validation function will return promise that either resolves with true or rejects with an Error instance that has errors property.\n\nFrom my understanding the compiled validation functions improve performance, but when calling ajv.compile('schema') several times, I get always the same compiled validation function instance.\n\nCorrect, compiled function is cached using stable-stringified schema as a key. When you use ajv.validate you also use the same function under the hood. What I meant is that by calling a compiled function directly you avoid extra function call.\n. Thank you, I will read.\nThe difference in performance was quite measurable, I don't remember the exact difference though...\nChanging this api would be a much bigger pain than you think; it is used internally as well as externally and if the same objects/functions are indeed concurrently accessed and executed in nashorn from the multiple threads there may be race conditions - simply adding API wrapper would not solve the potential problem as internal functions would still have the state.\nIt would be interesting to find out if this is the case :)...\n. I've read the post. Using JavaScript with JVM seems to be fun :) Using the pool of objects seems to be the best approach, it will work in general case. Given that JS is inherently single threaded any library, even with a stateless api, could have some state under the hood, it would be too difficult to find out whether it's the case. Using pool of single threaded resources solves this issue in any case.\n. The workaround is to use the third parameter in addMetaSchema to skip its validation:\najv.addMetaSchema(jsonHyperSchema, undefined, true)\nThe improvement would be to support validating meta-schema against itself. It's not supported at the moment, ajv expects all schemas used as meta-schemas to be added separately.\n. You are right.\nAjv doesn't comply with this provision, it allows extending $refs with additional keywords.\nI was going to address it in the next major version change.\nI was also considering adding the option in the current version that would allow to choose between:\n- failing schema compilation (I think it should be the default to be honest)\n- ignoring extra keywords (as per spec, should log warning)\n- using extra keywords (current behaviour).\nIn this case the 1st or 2nd option could become the default in the next major version.\n. Could you please submit a new issue - it may be a bug\n. There will be an option to preserve the current behaviour.\nBy spec everything but $ref should be ignored, the correct way to extend $ref is to use allOf keyword.\n. in 4.4.0\n. Ajv now ignores all siblings to $ref but it can be changed with options. See the docs.. Good catch, thank you. It should still fail validation though, there is \"date\" format for date-only strings.\n. Thank you\n. That is not a bug, it is correct behaviour.\nPlease see #129 and also #140.\nThe problem here is that \"additional properties\" are meant in the sense of additionalProperties keyword - local to the schema that contains properties keyword. As each sub-schema in oneOf is evaluated, any property not mentioned in \"properties\" in each sub-schema is removed.\nThe solution is not to use removeAdditional: 'all' option and instead use removeAdditional: true, explicitly use the keyword additionalProperties: false only in subschemas that contain all allowed properties (rather than some part).\nTo remove not allowed properties properties in widget you can whitelist all properties on the top level (that may still pass through properties from invalid branch of oneOf).\nThe alternative solution is to use switch keyword (from v5 proposals) and branch based on widgetType property (in this case wrong branches won't be validated and only properties additional to the correct branch will be removed:\njavascript\n{\n  \"switch\": [\n    {\n      \"if\": { \"properties\": { \"widgetType\": { \"constant\": \"pic\" } } },\n      \"then\": { /*schema for \"pic\" widget, should include \"additionalProperties\": false */ }\n    },\n    {\n      \"if\": { \"properties\": { \"widgetType\": { \"constant\": \"text\" } } },\n      \"then\": { /*schema for \"text\" widget, should include \"additionalProperties\": false */ }\n    },\n    // ...\n  ]\n}\nMake sure to use removeAdditional: true (\"all\" would still be removing too much when validating subschemas in \"if\"), v5 option and correct $schema keyword (if you use it).\n. Ajv is not matching sub-schemas, it simply removes additional properties as each sub-schema is validated, whether this subschema is valid or not.\n\"Additional property\" is understood in the same meaning as the standard uses for \"additionalProperties\" keyword - local to the current subschema (not used in \"properties\" and \"patrernProperties\" keyword in the current schema object only), not global to the whole schema as in \"used in some other place of the schema\".\nIf you add a property in all sub-schemas it won't be additional in any of them, so it won't be removed.\nI have suggested several approaches that would work for you, there is nothing that has to be changed in Ajv. I will probably add some example to clarify it.\n. > it simply removes additional properties as each sub-schema is validated, whether this subschema is valid or not.\nI mean with removeAdditional option.\nAlso there is example in readme already that shows exactly your situation and shows how to construct the schema correctly - see Filtering Data section.\n. > can i consider that removeAdditional: \"all\" equals to removeAdditional: true + all schemas with additionalProperties: false\nYes\n\nit means this behavior is the oneOf's standard behavior in json schema draft, may i right?\n\nRemoving additional properties is ajv feature, it's not the part of the standard. But it relies on the definition of \"additional property\" in the standard. \"oneOf\" must validate all subschemas so all additional properties will be removed. \"switch\" only validates \"then\" subschemas that pass \"if\" test, so you have better control which properties will be considered additional. But have a look at the example in readme, this approach will also work in your case.\n. Can you make a smaller sample please?\n. All properties get removed when if subschema is validated because you use removeAdditional: \"all\". You still need to use option removeAdditional: true and add the keyword additionalProperties: false to schemas where you want additional properties removed.\n. The properties you see in the final json are defaults (from default keywords) and DATAREF_ID doesn't have default.\n. > So when executing if, it is the time to validating already? i thought that if is just a judgement without other actions.\nAjv does nothing but validation. There is a schema inside if, so it gets validated. Potentially there is a place to extend the functionality of removeAdditional: 'all' option to exclude some subschemas from removing additional properties, but I think explicitly adding additionalProperties: false and using removeAdditional: true (or 'failing') is a cleaner solution.\n\nnow realized the removeAdditional: \"all\" is not a handy function but a dangerous evil.\n\nFor any moderately complex schema 'all' setting for this option is indeed a bit too thorough.\n\ncan i consider that, if removeAdditional: \"all\", every schema Ajv meet, it will remove extra properties which not defined in the schema, whatever the schema is in switch or if or other special types ?\n\nremoveAdditional: 'all' will remove additional properties when any schema that have some of the following keywords is validated: properties, patternProperties, additionalProperties, patternGroups (v5). Without these keywords nothing should be removed.\n. Maybe required and patternRequired (v5) on their own would also trigger it, need to check.\n. In 5.0.0-beta.0.\nTo use: npm install ajv@^5.0.0-beta\n. are you using v5 option?\n. The reason it failed is that it is not a valid draft 4 JSON-schema.\n. Thank you!\nBecause of the option allErrors: true Ajv continues validation after the first error.\nSchema inside if is valid without type property, it only requires that if the data is an object and if property type is present, then it is equal to \"boolean\". See properties keyword spec.\n. Please upgrade to the latest version - it is fully compatible with the one you have.\n. This works as you need.\n. Thank you for the issue. It is essentially a duplicate of #211.\nThe best approach I think is to have each form section as a separate definition with ID in the schema, then you can refer to them from the outside:\njavascript\najv.validate({$ref: 'schema.json#section1'}, data);\n. Yes, this approach has limitations.\nIn cases the UI structure is different from data structure you need to have some other ways to generate schemas from parent schema. You could use a custom keyword to mark up sections and use some function or processing schema to extract smaller schemas.\n. You can extend it like this:\njavascript\nAjv.prototype.assert = function(schema, data) {\n  if (!this.validate(schema, data)) throw new Ajv.ValidationError(this.errors);\n};\nI will think whether it should be a part of the library\n. For tests there is chai-ajv-json-schema\n. @felixfbecker thanks for the PR. I will think about it, no promises though. See FAQ: can we change/extend API.\nMy objection is that assert method is not substantially different from validate - they both do validation, just return results in a different way, which is a matter of convenience, rather than additional functionality. I think that convenience API wrappers belong in the application code, not in the library.\nTo have this method in the application you need 1 line function (https://github.com/epoberezkin/ajv/issues/274#issuecomment-239668695). In the library it requires 100+ lines - test, docs, etc.\n. Will think indeed... \nI think Joi is one of the very few that has assert, if not the only one. I've never seen it before in other validators to be honest.\n. @blakeembrey what do you think?\n. @blakeembrey thank you. async is a concern indeed for this api (although this particular issue could be solved - it is known in advance whether the schema is async).\n@gajus I actually like the idea of a separate module - different assertions could have been implemented there over time, rather than just one. You could assert for failure, for a presence/absence of a particular error (or particular error only, e.g. in order to pass the data, but generate a warning in case of additional properties validation errors), for being valid against multiple schemas, etc.\n@felixfbecker what do you think? There are several ajv features in separate packages already and they are all mentioned in docs - ajv-i18n, ajv-cli (@jessedc started it), ajv-merge-patch, ajv-keywords. Given that these features are only useful for some users, it seemed wrong to add them to the main ajv package. I am actually considering splitting both v5 proposals (more likely) and async schemas support (less likely) to separate packages in the next (or the following) major version to reduce the size of the ajv core and to have a smaller browser bundle for the majority of users.\nIf you like to do it this way and the quality of ajv-assert is on the same level (docs, tests, visible test coverage) I would be happy to refer to it in ajv docs in similar way my packages are mentioned.\n. That is the way they are implemented. See Assigning defaults:\n\ndefault keywords in other cases are ignored:\n- not in properties or items subschemas\n- in schemas inside anyOf, oneOf and not (see #42)\n- in if subschema of v5 switch keyword\n- in schemas generated by custom macro keywords\n. Deafult is defined in the spec as optional, its behaviour is not specified in too much detail.\n\nTaking into account defaults in subschemas of compound keywords inside properties is both difficult to implement and in some cases ambiguous. The existing implementation covers 80%+ of real use cases. If you need multiple defaults depending on the valid schema branch, you just have to use v5 switch instead of anyOf, because in case of switch it is deterministic and doesn't require a rollback mechanism.\nWhat is the objection to refactoring the schema in the way that Ajv supports (i.e. putting default keyword on the same level as allOf)?\n. In your case, this schema would produce the result you want (defaults are assigned before schema is validated):\njson\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"num\": {\n      \"default\": 2,\n      \"allOf\": [ { \"type\": \"number\" }, { \"acceptTerms\": true } ]\n    }\n  },\n  \"required\": [ \"num\" ]\n}\nAnother common use case that would produce confusing results if it were supported is this:\njson\n{\n  \"type\": \"object\",\n  \"anyOf\": [\n    {\n      \"properties\": {\n        \"type\": { \"enum\": [ \"foo\" ] },\n        \"foo\": { \"type\": \"integer\", \"default\": 1 }\n      },\n      \"additionalProperties\": false\n    },\n    {\n      \"properties\": {\n        \"type\": { \"enum\": [ \"bar\" ] },\n        \"bar\": { \"type\": \"string\", \"default\": \"abc\" }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}\nThe above wouldn't work without implementing complex rollback logic and that's the reason why defaults inside \"anyOf\"/\"oneOf\" (at any depth) are ignored by Ajv.\nThe same logic can be implemented with this schema:\njson\n{\n  \"type\": \"object\",\n  \"switch\": [\n    {\n      \"if\": { \"properties\": { \"type\": { \"constant\": \"foo\" } } },\n      \"then\": {\n        \"properties\": {\n          \"type\": {},\n          \"foo\": { \"type\": \"integer\", \"default\": 1 }\n        },\n        \"additionalProperties\": false\n      }\n    },\n    {\n      \"if\": { \"properties\": { \"type\": { \"constant\": \"bar\" } } },\n      \"then\": {\n        \"properties\": {\n          \"type\": {},\n          \"bar\": { \"type\": \"string\", \"default\": \"abc\" }\n        },\n        \"additionalProperties\": false\n      }\n    },\n    { \"then\": false }\n  ]\n}\nThe above would assign defaults in the expected way because Ajv knows which branch should be validated based on \"if\" conditions. Defaults inside \"if\" schemas are still ignored.\n. @kapouer it is in docs here: https://github.com/epoberezkin/ajv#assigning-defaults\n. @kapouer got it. Will do.\n. in 4.5.0\n. Apparently the current limitation is that the source schema in $merge should be in separate schema file - please try to separate it to another file and add before this schema is compiled\n. That works: https://tonicdev.com/esp/57b46b9518f1571200cdd517\nI don't know if the validation result is as expected, but the schema compiles\n. Actually I am wrong about the reasons. While suggested workaround works, the limitation is different - $merge doesn't support relative references, it needs absolute references at the moment.\nSo this also works: https://tonicdev.com/esp/57b46d5d0fc3f71300eba412\n. By \"absolute path\" I meant the path including schema id, not relative to the parent id. File path doesn't matter, ajv doesn't have it anyway.\n. The above will work :)\n. Relative refs in $merge and $patch are now supported in ajv >= 4.6.0 and ajv-merge-patch >= 2.0.0\n. Yes, the results are valid. properties keyword (as well as \"required\", etc.) as per spec doesn't require validated data to be an object, it is only applied IF the validated data is an object. You need to use type keyword to enforce data type.\nSee Keywords:\n\nMost keywords apply only to a particular type of data. If the data is of different type, the keyword will not apply and the data will be considered valid.\n\nIn general JSON-schema is not about data \"matching\" schema, it is about enforcing certain restrictions to the data; each keyword enforces its own limitation. In this way  you can have both items and properties keyword in the schema, they would be applied respectively to arrays and to objects, but neither type will be enforced unless you use type keyword.\nPlease submit JSON-schema usage questions to Stack Overflow, happy to answer them there if you mention my account :)\n. Base ID is available as a property of the schema compilation context: it.baseId.\n. in 4.6.0\n. Thinking... In any case, if I add this, it should be inside params. I will need to review errors for other keywords.\n. @brodeuralexis  given that quite a few keywords have their value (i.e. schema) available inside params already, there is no harm including the property allowedValues in params object, it would make error reporting more consistent with other keywords.\nPlease let me know if you could make a PR (docs have to be updated as well).\n. in 4.6.0\n. There are two solutions already:\n1. to extend draft4/v5 meta-schema with whatever additional requirements you have and put this extended meta-schema in $schema keyword. You need to use $merge keyword to extend meta-schemas.\n2. Define additional schema to validate your schemas and do it in your code before schema compilation.\nNeither requires additional options or compilation modes, it is all in the scope of validation, you just need to treat your schemas as data and validate them for any requirements you need to enforce.\n. Closing this issue, please post here if you have a use case that cannot be implemented in the suggested way.\n. defaults are applied and additional properties are removed when the data is validated according to the schema, before it is known whether the data is valid or not. The solution is to either refactor the schema or to use switch keyword, that allows to have subschemas that are validated or skipped based on validity of another schema.\nSee FAQ.\n. Closing the issue, please let me know if you have any questions.\n. Yep, good idea.\nYou can just edit the wiki  re $data proposal btw.\nIt's here btw: https://github.com/epoberezkin/ajv/blob/master/lib/compile/util.js#L218\n. In 4.6.0\n. The paragraphs you are referring to are about determining whether the property is additional or not. 5.4.4.1 requires that both keywords apply.\n. Ok, requires is a bit too strong a word here... I'd say implies. This test requires it though.\n. > This seems to suggest that you can have '/' as a valid property, even though it does not match the regular expression within the 'patternProperties'.\nThat is correct, you can have a property that does not match the pattern. But if it matches the pattern it should be valid according to the schema related to that pattern (even if it is explicitly listed in properties too).\nThe test you are pointing to has different properties in properties and patternProperties, neither foo nor bar match /^v/ pattern.\nThe confusion about the validation of properties and patternProperties comes from the general confusion related to seeing JSON-schema as a declarative standard the defines the structure of the data (which it is not). It all becomes much simpler to reason about if you think about the schema as about the list of requirements that should be fulfilled for the data to be valid, each keyword defining its own requirement. In some simple cases this list may look like the structure of the data, but in many advanced cases it does not. In this way the requirements defined inside properties keyword have nothing to do with those defined in patternProperties keyword.\n. Works for me: https://tonicdev.com/esp/57be3188f18f321300ea7763\nCould you please submit everything I asked for (ajv version, ajv options, schema, data, code, results/errors/messages)?\n\nAlso, I wonder if you could squeeze some more speed out by checking for the existence of the property before the format? It seems like other required properties are returning \"format of property should be XXX\" instead of just \"property doesn't exist\"\n\nI don't understand that. Please submit the example. Sounds like a separate issue - a potential improvement? Only existing properties are validated at the moment, ajv wouldn't validate format of the property that doesn't exist if that's what you mean.\n. @braco could you please clarify?\n. I am not sure why adding \"browser\" field breaks the tests. I thought it was some dependency update, but then the following PR passed... Does it pass when you run them locally? Is it maybe breaking browserify?\n. It seems like it breaks the bundle creation indeed:\nWorks: https://travis-ci.org/epoberezkin/ajv/jobs/155026726#L2271\nBreaks: https://travis-ci.org/epoberezkin/ajv/jobs/154730115#L2275\nSee https://github.com/substack/node-browserify#browser-field\n. > I'm not a browserify user, but as far as I understand browserify they would want a browser field, too?\nIf you want to use the bundle it can be just loaded separately. You can either use browserify to create this bundle (that's what is used here) or you can bundle Ajv as part of your application, in which case you just use var Ajv = require('ajv').\nI am not sure I understand what would be your code to use Ajv if you include the bundle rather than the index file - the bundle doesn't return the Ajv constructor as far as I understand. Would you just use global that the bundle exposes? In which case I don't think I understand why you need webpack at all if you use the bundle. And if you are going to use as above I don't think it would work.\n. Got it. Thank you!\n. In 4.6.0\n. Is it possible instead to add IgnorePlugin to package.json somehow? Or add some other file that webpack would take into account and would use the plugin? I am not a webpack user, just thinking about what could work.\n. Wouldn't the better solution be to simply add to docs the instruction to use IgnorePlugin (see https://github.com/epoberezkin/ajv/issues/117#issuecomment-198328830)?\n. In which case users who use any of those packages could also have them included by changing the regexp?\n. Thank you for the PR!\nCould you please:\n- determine whether it's a relative or an absolute pointer by checking the first character $data[0] == '/',  matching regexp twice is wasteful.\n- fix meta schema (see comment in code)\n- squash existing commits (with the change above) in your branch\n- add tests here (as a separate commit). I suggest creating a separate file absolute_ref.json to test several different keywords (constant and a couple of others). There should also be tests of how it works inside $ref (to make sure it can go to a higher level than the root of $ref, because relative refs can't do it on purpose (I remember so at least :), but absolute ones should be able to come to a higher level. If at the moment they can't, please skip those tests, I will think how to improve it (you can use skip: true in json test file, both on a suite level and a test level).\n. Thank you! I will try to fix this issue - I hoped that even if it doesn't go outside of $ref at least the value would be correct based on the absolute reference. From what you say it's even worse - it just points to the wrong value (in case the root for the ref is different from the data root).\nDocs need to be updated too, I will do it.\n. @HotelDon I understand how to resolve the issue - the validation function should be passed an additional 5th argument - rootData, then the code generated by getData function can use this variable instead of data (that is the top level data at the current $ref'd schema).\nI don't think it will be a breaking change for anyone - It would only be breaking if somebody were passing additional arg(s) to compiled validating function (they could only be used in inline custom keywords).\n. In 4.6.0\n. > The readme is currently broken or out of date, containing many dead links to itself, presumably because some sections have been removed. One important example (but not the only one) is the options link.\nI have no better idea than that you have some issue with you your browser (or its settings)... Options link in the table of contents is fine, it points to the options section. If there are some specific broken links that are not working please either post them here or you can make the RP.\n. @jeremykentbgross could you please clarify the issue?\n. Please re-open if you see some issue\n. The draft 4 spec describes format keyword as optional, it only says that if it is implemented, some predefined attributes should be implemented too - see 7.2. It does say that it \"generally\" applies to a limited set of data types, so applying it only to strings is not against the standard, although one may imply that other types should be possible too:\n\nA format attribute can generally only validate a given set of instance types. If the type of the instance to validate is not in this set, validation for this format attribute and instance SHOULD succeed.\n\nAt the same time it says:\n\nThe \"format\" keyword is defined to allow interoperable semantic validation for a fixed subset of values which are accurately described by authoritative resources, be they RFCs or other external specifications.\n\nWhat would be the example of such external spec for non-strings? Also to me it seems semantically wrong using it for anything but strings, so Ajv indeed only supports formats for strings.\nThe validation scenario you describe is not really a \"format\" (neither in the way the spec defines it nor in plain language meaning: shape/size/pattern/plan/arrangement/presentation), it is some other data requirement.\nAjv allows to implement any requirements, including those that require asynchronous calls, using custom keywords - I think a custom keyword would better fit your use case (and you are not constrained with a string as a value, where you need to cram several things in one string as you are trying to do). See for example instanceof keyword - it is somewhat similar to what you are describing.\nI will think again whether it's worth extending format to support other data types in addition to strings.\n. @nimerritt this seems like a more appropriate use case for format keyword than structural validation. So the proposal is to allow defining custom formats that would apply to some chosen type, not necessarily a string, correct? I'd still limit it to numbers and integers in this case, although it can be a usage recommendation rather than a limitation, it doesn't make much difference whether to allow all or some types.\n. Ok, this can be done. PR is welcome. API should be consistent with the existing format/custom keywords API (format definition can already be an object to support formatMinimum etc. and also async formats, so \"type\" will simply be a property in this definition defaulting to \"string\").\nI don't want to support formats that apply to multiple types to be honest, although you can convince me otherwise if you know some valid use case.\n. This should be added to 5.0.0 branch btw\n. @pyramation The reasons NOT to support formats for types other than string/number are above in comments.\nPlease share a specific use case where you think a format is a better fit (semantically) than a custom keyword.. A better fit for your case where you validate that an object is an instance of List class is the custom keyword instanceof defined in ajv-keywords. Semantically, this validation has nothing to do with format.\nIf you use duck-typing and your object is not an instance of any class you can either change it and use class instead or define your own custom keyword e.g., x-list.. #98 should be resolved at the same time\n. This approach is slower\n. Thanks for the PR!\nThis essentially contains two [independent] changes:\n1. optionally not retaining the source code (I'd like to see that it reduces the memory usage - you can get the source code of the function only by calling .toString() method, or this property adds additional overhead? If that's the case this option can become the default in 5.0.0).\n2. different way of creating the closure (rather than scoped to the context, it is scoped to the wrapping function)\nNot sure I understand why the 2nd is needed... All the shared objects that the closures are using will be shared anyway, all the closure-specific objects will be different anyway...\nThe inventory of these variables is useful in any case, as I keep thinking about some \"easy\" way to solve #156\nThe build fails because of ESLint\n. Also I think in case the second part is needed (new Function instead of eval) this line should be var validate = ....\n. > The validate variable is declared because I passed it into the new Function() constructor on line 131 which makes it an argument to the function being created.\nI see. It's a bit unusual to pass an undefined value simply to declare the local variable.\n. As far as I understand it, only the variables used inside closure are retained on the heap. So from the memory utilisation point of view it shouldn't make any difference whether you're using eval or function constructor...\nAm I wrong?\nIt may or may not have difference on the time it takes to create this closure and also to execute it. But 1) closure creation time is not very important, 2) the difference can be negative - we will need to benchmark it to see if there is a positive difference.\n. > So it turns out that the strings will still be retained by the code object to support .toString() on the function.\nIt's a different string though, so probably keeping it in the property as well doubles the size\nRe eval vs new Function I am not sure it has any difference.\n. Thank you, it's very interesting.\nI am going to check that capturing the whole context with eval usage is still the case in node and modern browsers (Egorov's post is 4yo). That's a bit surprising - I thought v8 would be a bit more clever and only capture what's used :)\n. It does indeed capture everything with eval :)\nCould you please:\n- rename the property to sourceCode (it will be false by default in the next major version)\n- remove validate from parameters, remove + 'return validate;' from line 103 and instead replace validate = with return in validate.dot. That would make it cleaner.\n- add test to https://github.com/epoberezkin/ajv/blob/master/spec/options.spec.js\n- add docs to https://github.com/epoberezkin/ajv#options\nThen it's good to go.\nThank you again!\n. going to merge/complete...\n. in 4.7.0 :)\n. Thank you!\n. @rf https://medium.com/mail-online/eval-is-evil-but-not-why-you-may-think-25961f9b01bb\n. In 5.0.0-beta.0.\nTo use: npm install ajv@^5.0.0-beta\n. SO is a better place indeed :)\njson\n{\n  \"type\": \"object\",\n  \"anyOf\": [\n    {\n      \"additionalProperties\": false,\n      \"required\": [ \"a\" ],\n      \"properties\": {\n        \"a\": {}\n      }\n    },\n    {\n      \"additionalProperties\": false,\n      \"required\": [ \"b\" ],\n      \"properties\": {\n        \"b\": {}\n      }\n    }\n  ]\n}\n. You should use your second code sample - that's exactly how it should be.\n. That's not correct. Validation is synchronous, JavaScript is single threaded. It could have only happened if you use the errors in the next execution block (in callback, nextTick, setTimeout etc.). Please see FAQ and https://github.com/epoberezkin/ajv/issues/242#issuecomment-234369094\nSo you don't need to clone, you just need to use your second sample, it doesn't have the problem you describe.\n. Hi!\n$data reference is only supported with v5: true option, without this option the schema is invalid because the value of maximum keyword should be a number.\n. for v5 schemas you should use \"$schema\": \"https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/json-schema-v5.json#\" (it almost says so in options). That's an SO question :)\nEach item should be valid according to the schema in items keyword. And each item is valid, so the result is true. Your schema is equivalent to this one:\njavascript\n{\n    type:'array', minItems:1,\n    items:{\n        type: 'string',\n        enum: ['admin', 'read', 'search']\n    }\n}\nWhat you seem to want though is this:\njavascript\n{\n    type:'array', minItems:1,\n    items:{ type: 'string' },\n    oneOf: [\n      { items: { enum: ['admin'] } },\n      { items: { enum: ['read', 'search'] } }\n    ]\n}\n. And actually in the second schema using anyOf is more efficient, as no data can be valid according to both schemas at the same time.\n. title keyword is not used for validation, so the only change that is really needed is to change v5 meta-schema to allow objects of strings in addition to simple strings (or locale references from the second part of the proposal).\n. I wouldn't complicate it with pattern-matching locales, to be honest. Maybe just make the second subschema:\njson\n{\n  \"description\": \"localised strings\",\n  \"type\":\"object\",\n  \"additionalProperties\": {\"type\":\"string\"}\n}\n. No, it can't be a basic type. Type is something that exists on the JSON level, not on the data structure level. It's still \"object\" type.\n. Closing it as this idea is not included in draft-06 and probably won't be included in the next version too. In any case meta-schema change can be made separately or using some plugin.... Lol. Funny indeed.\nThe idea is that \"additionalProperties\" keyword value can be a schema, in which case those properties that failed validation by that schema would be removed.\nTo achieve what you want there are two approaches:\n1) Make them additional indeed:\njson\n{\n    \"type\": \"object\",\n    \"allOf\": [\n        {\n            \"properties\": {\n                \"_id\": {},\n                \"optionalString\": {},\n                \"optionalObject\": {}\n            },\n            \"additionalProperties\": false\n        },\n        {\n            \"properties\": {\n                \"_id\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"additionalProperties\": {\n                \"anyOf\": [\n                    {\n                        \"type\": \"string\",\n                        \"minLength\": 5\n                    },\n                    {\n                        \"type\": \"object\",\n                        \"minProperties\": 1\n                    }\n                ]\n            }\n        }\n    ],\n    \"required\": [\"_id\"]\n}\nIt looks a bit hacky and complex but does the job - the first subschema in \"allOf\" would remove all but allowed properties, the second would remove optional properties if they are invalid.\n2) I would prefer another approach though - using a custom keyword\njson\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"_id\": {\n            \"type\": \"string\"\n        },\n        \"optionalString\": {\n            \"type\": \"string\",\n            \"minLength\": 5,\n            \"removeIfFails\": true\n        },\n        \"optionalObject\": {\n            \"type\": \"object\",\n            \"minProperties\": 1,\n            \"removeIfFails\": true\n        }\n    },\n    \"additionalProperties\": false,\n    \"required\": [\"_id\"]\n}\njavascript\najv.addKeyword('removeIfFails', {\n    inline: function() {} // TODO\n});\nOnly inline keywords have access to validation errors at the moment.\n. > the first one would make my already huge schemas enormous. \nProbably makes sense splitting them so they are manageable\nI will look at the code later.\n. There is info on the variables that are available for inline keywords to use in CUSTOM.md. in 4.7.1\n. passing\n. The purpose of the warning is to notify the users that the default behaviour will change in the next major version (in case the option is not specified). In your case, when the option extendRefs is explicitly set to true, the behaviour won't change so there is no need for the warning.\nSo we don't need an additional option, we can remove the warning in case the option is set to true (and update the message to suggest {extendRefs: true} to keep the current behaviour in case the option is undefined).\nI also noticed that the message contains path expression rather than the actual path (i2 should be replaced with the actual number in the message) - it should be fixed as well.\n@miikka PR is appreciated, thank you.\n. in 4.7.7\n. How is it related to JSON-Schema validation?\n. I understand now. It should not be a part of Ajv package I think. It can be a separate package, e.g. ajv-json-api that would contain the code to transform errors returned by ajv into the format defined by JSON API spec (and maybe some other things related to this spec, e.g. schema for it).\n. closed with cdd30a9776987dc480c8927bd036f52e7eb56571\n. It can be tricky indeed\n. Date indeed is an object and not a string, so your data is invalid according to your schema. If you want to validate Date objects you can do it with custom keywords, for example:\njson\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"someDate\": {\n      \"instanceof\": \"Date\"\n    }\n  }\n}\ninstanceof keyword is defined in ajv-keywords.\nAjv doesn't stringify/parse data - it validates it as is. It allows for much wider range of applications, beyond data validation. If you need to you can stringify/parse objects in your code.\n. In 5.0.0-beta.0.\nTo use: npm install ajv@^5.0.0-beta\n. https://runkit.com/esp/57ebc100d3420b13000ea8a8\nYes, good catch.\n. are you trying to use from github? just do npm install. it's in 4.7.5\n. or npm update (just published)\n. Not sure about this one.\nAccording to https://tools.ietf.org/html/rfc1034#section-3.5 the sections should start with letter, not with digit. So it is invalid according to this RFC and to the pattern Ajv is using.\nIt works though (I can even ping it), which means that such \"hostnames\" are supported.\nAs a workaround you can redefine the format in any way you like:\njavascript\najv.addFormat('hostname', /.*/);\nPlease post here if you know what is the standard that defines the syntax for hostnames.\n. cool, thank you, has to be fixed then.\n. in 4.7.6\n. There is no JSON schema keywords for such validation scenario. You can create your own custom keyword for Ajv to implement any restriction you need.\n. JSON pointer /arr/0# means (in JavaScript) .arr['0#']\nI understand that the intention is to get the index of the current element, but the only defined syntax is 0#.\nThere is no syntax to point to the element with the same index in the different array.\nYou can (possibly programmatically) create the schema using array syntax of items keyword when element 0 in one array would point to el 0 in another, 1 to 1, etc.:\njson\n{\n    \"properties\": {\n        \"arr\": {\n            \"items\": [{},{},{}],\n            \"additionalItems\": false\n        },\n        \"sameArr\": {\n            \"items\": [\n                { \"constant\": { \"$data\": \"/arr/0\" } },\n                { \"constant\": { \"$data\": \"/arr/1\" } },\n                { \"constant\": { \"$data\": \"/arr/2\" } }\n            ],\n            \"additionalItems\": false\n        }\n    }\n}\n(btw, additionalItems keyword when items is a schema, as in your example, rather than array, is simply ignored).\nOr you can:\njson\n{\n    \"properties\": {\n        \"arr\": {\n            \"items\": [{},{},{}],\n            \"additionalItems\": false\n        },\n        \"sameArr\": {\n            \"constant\": { \"$data\": \"/arr\" }\n        }\n    }\n}\nAs I wrote in another issue, the only alternative is the custom keyword:\njson\n{\n    \"properties\": {\n        \"arr\": {\n            \"items\": [{},{},{}],\n            \"additionalItems\": false\n        },\n        \"sameArr\": {\n            \"sameItemsAs\": { \"$data\": \"/arr\" }\n        }\n    }\n}\nYou'll have to write some code to implement the keyword sameItemsAs but it's easily doable.\n. I was thinking about JSON-pointer expressions :) It's neither standardised nor supported at the moment. Using custom keywords (see docs) is the only available solution at the moment.\n. Top level $data can be evaluated (with an option). The way you have it, you will have to code for it. You may consider using multiple sibling keywords, although it may become more complex.\nYou can simplify things a lot by using property name instead of $data reference, assuming that you are referring to the sibling property in the same object as the current data.\n. https://github.com/epoberezkin/ajv#addkeywordstring-keyword-object-definition\nBut it won't work with your example, Ajv will only evaluate $data if the keyword value is { \"$data\": \"...\" }, not if it's used in some sub-property.\n. Closing this issue. There may be a place to do deep $data evaluation, but it seems like an unnecessary complication - several sibling keywords that work together can be used instead ( where some of them simply hold values and some do actual validation - in the same way as maximum/exclusiveMaximum etc. work).\n. the problem here is that you are using two different instances of Ajv. Errors are in the first one, you just need to assign it to some variable:\n``` javacript\nimport * as Ajv from 'ajv';\nlet ajv = new Ajv({ allErrors: true, verbose: true });\nlet valid = ajv.validateSchema(testx);\nconsole.log('Validation result is ' + valid);\nconsole.log('got validation errors text ' + ajv.errorsText());\n```\n. by the way, in most cases you don't need to explicitly validate schemas, they are validated when they are used by default (although it can be disabled in case you need to validate them separately).\n. Yes, you have to build it so it's there... I will look at jquery approach, not sure I like the idea of release branches, at the moment they are just tags in master branch. I definitely don't like the idea of having dist in master.\nIt's been raised on several occasions: #132, #171, #186\nI am not sure I am interested to support bower, npm seems to be more convenient these days.\n. I don't think it's \"most\" nowadays any more. I'd say \"some\". Most people I know, work with, read, etc. switched to using npm for both client and server side, particularly given that there is appearing more and more isomorphic libraries. I think it's time to forget about bower - it seems to have outlived its usefulness...\n. I looked at jquery. They are not keeping version branches, their releases are just tags in the master branch. It results in distorted statistics that doesn't reflect contributions and instead shows the releases: https://github.com/jquery/jquery/graphs/code-frequency . Creating and keeping version branches would make branches difficult to manage.\nAlso, jquery is primarily browser library. Although you can use it in node, very few people do. Still, there is not a word of using it with bower in readme...\nAjv, on the other hand is isomorphic, so you still need to npm-install it if you use node.js (and validating only in the browser is a bad idea, you should validate in the server as well).\nFor some schemas you already can precompile them to importable modules (with ajv-cli) and include them in your application bundle to be used in the browser without ajv.\nSo I will not include browser bundles in the repo, instead one of these should be used:\n- npm\n- cdnjs\n- github or bower with an additional step that builds bundles\n. > There are still people out there, who are forced to use bower while it's still alive.\nHow can people be \"forced to use bower\"? Why not use cdnjs instead?\n\nI propose you to create new one exclusively for bundled bower version and setup any of CI/CD tools to build and push releases there.\n\n@dcbrwn if you or somebody else created such a repo (say ajv-dist) I would accept PR to publish bundles to that repo from travis when master branch is updated. Maybe it's possible to push releases to a single branch here, if you can configure bower to use a specific branch - it is probably better than a separate repo. I do not plan to implement it myself though.. > since I don't have an access to TravisCI environment\nYou can alway experiment from PR to publish to some branch in your repo and then once it's working the destination branch can be changed to local. There are already env vars that are used to push locally to gh-pages branch: https://github.com/epoberezkin/ajv/blob/master/scripts/travis-gh-pages. Actually I don't think it can be in a branch, you'd still need release tags that should be in the master branch... So the only option is to have it in a separate repo.. I don't mind either way.. Closing it. Some tests are option dependent, some cases are already covered in ajv tests.\n. Runtime options would be detrimental for performance for the majority of users who don't need them, so I will not be adding them. You can obviously change it in the fork. Is it what you want? Also bear in mind that validation function has 5 parameters at the moment, so you'll have to use some other way to pass these runtime options, e.g. by attaching them to the function as property(ies).\nI also considered compile time options, but the problem is that you will potentially have different functions compiled with different options, and these functions may call each other, so it complicates caching those functions - not only schema but also options should be used as part of the key. It also would complicate api.\nUsing multiple Ajv instances appears to be a much simpler solution, both from implementation and from users' point of view.\n. Re heap size: use option sourceCode: false (it will be the default in the next major version anyway).\nI will look at the rest later.\n. Not sure what you mean to each function... You really need to either set to all cached validation functions or pass it to referenced schemas (in ref.jst). It is probably simpler to set this flag on the instance, it is available as self. Actual property removal happens in 3 places in properties.jst file (just search for \"removeAdditional\" or for \"delete\").\nEDIT: Actually yes, you can iterate refVal array. But on the instance is probably cleaner. It all gets complicated though if you use async validation. In this case you can use validation context and pass it with option passContext: true.\nYou will have to call validation function as v.call(context, data) - context can be anything you want, it will be this everywhere.\n. @mrhooray please close if it's resolved. Thank you!\n. Correct, ajv instance. In code templates it's self and you can assign some custom properties to it. Maybe I should reserve some name for user object to provide a guarantee it's never used...\nPassing validation context as I suggested is also safe and already documented option; it also can be used for async validation, so maybe it's a bit cleaner and future proof approach.\n. In 5.0.0-beta.0.\nTo use: npm install ajv@^5.0.0-beta\n. Nodent is used only in asynchronous validation, if you are using it you have to also load nodent bundle as well.\nIf not:\nAre you using supplied Ajv bundle or you build yourself? If so what do you use to build?\nDoes something overrides require?\nThe root of the problem is that nodent is required using require('' + 'nodent') that correctly works if you bundle with browserify.\nAlso you write, \"if I run this in chrome\" but your code sample is different from what is loaded to chrome - there is some build process. Are you getting the error during build or in chrome console?\n. Please also include answers to questions here: http://epoberezkin.github.io/ajv/contribute.html#compatibility (there is another issue template for compatibility issues)\n. I think it is related to #82 and #117 (probably duplicate). I wouldn't discard browserify yet, given that webpack doesn't support dynamic requires.\nI suspect the issue may be that Angular 2 requires Ajv not from the bundle but from main. Not sure. Some PR / suggestions that would fix it are welcome, as long as it continues to work in node.js and in browserify...\nI think you should be able to work around the issue by including Ajv as a separate bundle (either from npm package dist folder or from cdnjs) and using global Ajv from your code.\n. > I have no idea if webpack may need some configuration to work with ajv.\nI meant in which order script tags are loaded, assuming different JS files loaded to the browser. I understand that you are trying to bundle Ajv together with your app using webpack. Maybe some suggestions from the issues I linked could be helpful.\n. That's exactly what I suggested for a workaround.\n. @ValeryVS I am not sure I understand why do you want to require the bundle and not the main file. Ajv is used by with Typescript without any problem.. So it is a webpack issue essentially? Same as https://github.com/epoberezkin/ajv/issues/117 ?. @ValeryVS cool. So we've found a way to trick webpack finally, not only browserify! Do you want to make a PR?. It will be resolved by #382 and #383. Resolved in 5.0.1-beta.0\nTo use: npm install ajv@^5.0.1-beta. 5.0.1-beta.3 should resolve it, finally. I merged it (with some corrections - removed whitespace changes and made it function back again...)\ntry catch should be in a separate function (that's why it was in closure in my sample), v8 doest use optimising compiler for the whole function with try/catch (see https://bugs.chromium.org/p/v8/issues/detail?id=1065).\n. In 4.8.1\nThank you, it was the right thing to do.\n. I understand the issue. The problem is {\"id\": \"steps\"}, it makes \"#/definitions/steps\" resolve to \"stesp#/definitions/steps\" i.e. some fragment of schema with id \"steps\" and although this \"id\" exists here, there are no \"definitions\" inside it. That's by the spec. See this schema:\n{\n  \"type\": \"object\",\n  \"id\": \"dialog\",\n  \"properties\": {\n    \"steps\": { \"$ref\": \"#/definitions/steps\" },\n  },\n  \"definitions\": {\n    \"steps\": {\n      \"id\": \"steps\",\n      \"definitions\": {\n        \"steps\": {\n          \"description\": \"this is what internal $ref points to, but it does not exist in your schema\"\n        }\n      },\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"steps\": {\n            \"$ref\": \"#/definitions/steps\"\n          }\n        }\n      }\n    }\n  }\n}\nYou just need to remove this id, it serves no purpose.\nMaybe the intention was to have \"id\": \"#steps\" to be able to use it instead of \"#/definitions/steps\"? This would work.\nI hope it makes sense.\n. Actually the error message gives a subtle hint: \"can't resolve reference #/definitions/steps from id steps\". The key here was \"from id steps\" :)\n. The problem is \"id\": \"step\". id attribute changes resolution scope (by spec), there is no \"#steps\" inside \"step\", it's outside. Just remove it or replace with \"#step\".\n. @morsh because your $ref is a relative URI (hash fragment) and id attribute defines base URI for $ref. #step doesn't change base URI because it is also a fragment, step does because it's a different file name\n. https://tools.ietf.org/html/rfc3986#section-5.1\n. This issue is a duplicate of #329. Not sure I understand why you need internal IDs that you don't use anyway...\n. dataPath is set to the data level where a custom keyword is used, which is an object level rather than property level. In this particular situation the problem is not only email but combination of email and password, which is object (although you may want to differentiate between wrong password and missing user. It is usually considered less secure though and a common practice is to validate password even if user is not found - to prevent timing attacks).\nIf you need to you can use message or params property in the error object to differentiate errors.\nAt the moment only inline keywords allow defining their own dataPath/schemaPath in errors, because they have information about where in the data (and in the schema) you are. validate/compile keywords don't know which data level they are used in (it can be somewhere deeper in object than root level) so even if they set dataPath it is overwritten to the current dataPath.\n. You just need to process your errors in a loop and have some switch inside this loop to attach messages to fields.\n. What I meant is that you have to process errors with your own code. dataPath is what it should be, Ajv will not return a different one.\n. > What are reason why it impossibly do for custom Ajv.ValidationError\nThe reason is that you don't really know in your custom keyword handler where the keyword is used. \"\" simply means root object, but the keyword can be used in some property, e.g.:\njson\n{\n  \"$async\": true,\n  \"type\": \"object\",\n  \"properties\": {\n    \"user\": {\n      \"type\": \"object\",\n      \"required\": [\"email\", \"password\"],\n      \"validatePassword\": true\n    }\n  }\n}\nIn this case if validatePassword fails dataPath will be \".user\".\nYou can say that you know where in the schema you use the keyword and you can set dataPath as you like. The problem with that approach is that it introduces unnecessary coupling between schema and keyword definition (that, generally speaking, can be used in different places in different schemas).\nAlso in your case, dataPath will be .email if email property fails validation (type or format).\nSo yes, you will have to rely on other error object properties to identify errors and attach to fields.\nMost likely it will look like:\n``` javascript\ngetUserErrors(ajvErrors) {\n  return ajvErrors.map(processError);\n});\nvar KEYWORDS = {\n  validatePassword: '.email',\n  otherMyCustomKeyword: '.otherField'\n};\nfunction processError(error) {\n  var field = KEYWORDS[error.keyword] || '';\n  return {field: error.dataPath + field,  message: error.message};\n}\n``\n. Actually, schema compilation context is now passed to \"compile\" keywords. So it's probably worth supporting optionerrors: 'full'` in \"compile\" keywords as well, so users can define all properties of error objects.\nAlso dataPath is available in all validation functions, so it is possible to let them set it on some sub-properties of the current data. It would probably require some additional option (like `errors: 'data')? The alternative is to always check if dataPath is already set before setting it. \n. > it's probably worth supporting option errors: 'full' in compiled keywords\nIt won't work, \"compiled\" keywords won't be able to set schemaPath in errors, as it is an expression rather then value in the compilation context...\n. 0.10 is removed in 5.0.0. @fperetti yes, default is only used in case of missing property. What you want can be achieved with \"inline\" custom keyword.\n. @pressureDrop there is no fix yet, let me know if you want to make a PR to 5.0.0 branch.\n. TODO:\n- [x] docs\n- [x] dts\n. In 5.0.0-beta.0.\nTo use: npm install ajv@^5.0.0-beta\n. It may be an interesting idea.\nBut the implementations of custom formats will be responsible for reformatting rather than Ajv, because it is too much heuristics otherwise which is out of scope. I guess parent object and the property name can be passed to format validation function to allow them to modify the string that is validated. So no option will be necessary, users will just decide whether they want to re-format or not in the function implementation.\n. Should be done together with #119 I think\n. No, the function will have to modify the value in the parent object that would also be passed. Same as custom keywords do. Generally I think custom keywords are better suited for advanced validation scenarios\n. You can:\njavascript\nparentObject[propName] = format(data)\ninstead of using dataPath\n. Also in metaschema you can enum: Object.keys(reformat). Not sure why you need additionalItems: false, it only affects objects and you require that it is a string.\n. For performance you can:\njavascript\n    compile(sch, parentSchema) {\n        return Array.isArray(sch)\n                     ? (data, dataPath, parentObject, propName) => {\n                          // ...\n                          return true;\n                        }\n                     :  (data, dataPath, parentObject, propName) => {\n                          // ...\n                          return true;\n                        };\n    }\n. @onury I decided not to add the ability to modify data in custom format function, it would substantially complicate their code and also it would be an unnecessary duplication of functionality with custom keywords.\nBy the way, with custom keyword that modify data you must now use option modifying: true - see #392.. The short answer is no (and there won't be, because in general case it is not possible).\nIt is explained in #22 and #125.\n. To repeat here the reasons why it is not possible:\n1. recursive $refs\n2. $ref is not equivalent to the object inclusion, because the $refs inside $ref should be resolved based on id in the source schema and not based on id of the current schema.\n. Yes, only from items and properties directly at the moment. It's a documented limitation: https://github.com/epoberezkin/ajv#assigning-defaults\n. I see it as \"nice to have\" rather than something many users need. And it's quite complex. So there are no plans to implement it at the moment. . Even if you define properties in $refs, you can still define default values for the properties alongside $refs rather than inside: https://runkit.com/esp/5942f60cc72ffe0012805f9c. through allOf it also works (unless you put default inside allOf). And it's not that putting default inside allOf is incorrect, it's just unsupported.... @marshall007 This question belongs in ajv-merge-patch. $merge is implemented as a custom keyword, it doesn't merge anything into the original schema. I don't plan to improve it until json-schema-org standardises it (or some other re-use mechanism).. In 5.0.0-beta.0.\nTo use: npm install ajv@^5.0.0-beta\n. oneOf is valid when only one subschema in it is valid. 10 is valid according to both subschemas. That's why the final result is invalid. That's all according to the spec, nothing Ajv specific here.\n. You probably need to add \"type\": \"string\" to the subschema with format keyword.\n. The behaviour you disagree with is by the spec. \"Format is only for strings\" and \"format requires that the data is a string\" is not the same thing, the former means that format only applies to strings, for everything else it is valid.\n. https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#type\n. All type specific keywords defined by JSON schema do NOT require that the data is of any type, so type restriction should always be explicitly applied.\n. @kapouer thanks for the suggestion, I will think about it. Maybe make a PR so that we can see that all tests are passing?\n. id is optional... They also can be subschemas (when you use $refs).\n. @alexkuz I think it can be done in 5.0.0, need to think about it.\nThe downside is that if the same fragments exist in different places they will be compiled twice. Maybe it's an edge case.\nWhy do you want it, I wonder?. Actually, sacjs that can be used as an alternative already has json-stable-stringify inside.... I see. I suspected something like this... What is huge? I guess you retrieve by id, but it still takes some time to cache them... Also it can consume a bit of memory.\nFeel free to make a PR (move stringify to cache and update docs) to 5.0.0 branch, I am going to release the next beta soon (although there will be some migration effort needed).\nIs it maybe a good idea to always use weakmap if they are available? It'll just have to take into account that schemas can be Boolean, although it's an edge case when they'll be cached separately.. Probably better to make it a separate package. @alexkuz thank you. You do know that it serialises the schema 8000 times in this case, so it's 3.7ms vs 0.6ms per time (even though it's a big schema), and it normally happens only once.\nIt's better not to call compile every time you need to use the schema... During run-time it's a better idea to use getSchema that accepts schema uri (id in this case) - it will be retrieving validation function from a different map in this case, and it will be much faster. Maybe it needs some better explanation in docs...\nIn any case, I don't mind moving json-stable-stringify to cache.js, please update docs too if you do it.\nWeakMap cache can be a separate package, no point overloading ajv with it.. @kapouer I am thinking to provide serialize option instead: https://github.com/epoberezkin/ajv/issues/385#issuecomment-269705947. @kapouer it appears that GPL cannot be used inside MIT as GPL is more restrictive, according to this: http://stackoverflow.com/questions/3902754/mit-vs-gpl-license\n@nickyout would you consider changing it to MIT?\nbtw, the build in fast-stable-stringify fails...\n. @STRML ajv is de facto used for validating/processing arbitrary objects, not only JSON. Schemas must be JSON as they get serialised, but data can be anything.\nI am thinking about optionally(?) using getOwnPropertyNames instead of keys and maybe also comparing enumerable status of properties (or maybe just values).\n. size and performance\n. can also just compare .toString() for Date and RegExp, it would ignore regexp state though, but I don't think it's important here.\n. it doesn't cover regexp it seems\n. @STRML deep-eql is failing tests you say... I've added correct comparisons for Data/RegExp in 4.9.0, but I think the better solution could have been to keep the internal implementation supporting only objects from JSON and allow to pass any other library as an option, rather than having it as dependency.\n. I don't want to make deep-eql the default option too. It is much slower in the main use case (objects/arrays created from JSON) and also quite opinionated about what to consider equal (e.g., generators are iterated, rather than be compared by the reference, i.e. the assumption is that they are pure).\n. I have extracted equality comparison into a separate package: https://github.com/epoberezkin/fast-deep-equal. Can you please include your code here that doesn't work as you expect? uniqueItems keyword should check for deep equality of objects.. > it says data pass\nuniqueItems ensures that items are unique, not that the values of individual properties are unique, so the result is correct - items are different.\n\ni have work around this case with\n\nit can be simplified by applying the same schema you have to both data and to data.map(x => x.a)\n\nany idea to use in ajv\n\nAjv supports defining custom keywords in variety of ways. So your validation requirement can be implemented as the keyword uniqueItemsProperty where {\"uniqueItemsProperty\": \"foo\"} would mean that property foo value should be unique across all items and {\"uniqueItemsProperty\": true} would mean that all properties should be unique. It will not be included in ajv because it implements JSON-Schema spec with some proposals for the future version, rather than arbitrary validation keywords. Feel free to contribute it to ajv-keywords package, it can be useful to some people.. @davidjamesstone thank you\n\n\n$ref is more preferable than $merge as it is standard, so if you can get away with it I'd recommend using it. But if you want to extend the list of allowed properties without repeating them all (even with empty schemas) $merge/$patch is the only approach (even though it's not standard and it will take some time before it makes it into JSON schema or into a separate spec, so don't expect compatibility with any other platform soon :).\nAlso, if you expect $merge to concatenate arrays in required keyword, that's not how it works. Underlying JSON-merge-patch spec simply overwrites arrays, rather than concatenating them, so you either need to list all properties in with or to use $patch.\n\n\n$merge/$patch do not support asynchronous loading yet it seems, it is quite easy to improve - I will do it.. > In regards to require overwriting, I swear this works in my example above.\n\n\nIt works in your case in a sense that it passes validation. It doesn't mean it would fail in the case when some required fields are missing - you need test(s) where validation fails.\n\nIs this what you mean by using $patch?\n\nYes. You can either start from a bigger schema and remove as you did, or you can start from a smaller one and add, whatever makes more sense for you. I would probably add, but it's just my preference, no difference really.\n\nThanks for looking into async loading with patch/merge too.\n\nYou're welcome. Just published ajv-merge-patch that supports async loading, if you npm update ajv-merge-patch, it should work.. At the moment, formats only apply to strings, not to any other data type.\nCoercion happens when the type is checked, before applying any other keywords, so the data becomes a number and format keyword is not applied.\nThere is a feature https://github.com/epoberezkin/ajv/issues/291 to support format for all datatypes that I agreed to include - @nimerritt was going to create a PR - are you still?. > @epoberezkin Perhaps it is okay to only apply the format if the type is explicitly declared in the schema?\nsee comment above\n\nI think it makes sense to restrict it to just string/numeric types explicitly declared in the schema\n\nI think there should be a way to define format for any types. Type that the format applies to should be a part of format definition with string being the default (if type is not present in the definition).\nEDIT: actually it's ok, only for string and number is fine, there is no use case really to use format for arrays/objects/boolean/null, other keywords should be used for them.. Thank you, it's getting there it seems :) Some more tests and docs and it's done. Also, I am going to merge it into 5.0.0 branch - I will release the next beta version once it's finished.. @nimerritt finished and merged in 5.0.0. Have a look at inline custom keywords - I think using them for can be a better idea that making it an Ajv feature.. @acheshkov you can transform document with keywords too. You need to use inline keywords as other kinds don't give you access to errors (which will be the criteria to filter items).. > inside validation function i have to push error inside vErrors array\neventually something in the library removes invalid data\nIt's the other way around - based on validation errors in vErrors for the failed array items (this would indicate that they have to be removed) your keyword removes these items, removes the errors related to these items and then returns true. The keyword would exist on array level.\n\nthrough doT template\n\nYou don't have to use doT template, your keyword function just have to return code snippet as a string (your function will be called during schema compilation, the code snippet will be executed during validation as a part of validation function).. As I wrote above, you have to remove the data yourself. And you have to check if there is an error associated with a particular item (there may be some other error) to decide what to remove.. you probably need to use statements option, as by default Ajv expects expression. Please see: https://github.com/epoberezkin/ajv/blob/master/CUSTOM.md#define-keyword-with-inline-compilation-function. What is the error?. The error is in your generated code - just put it in any JS validator and it will show you where. Most likely some unbalanced parens or missing semicolon. Also using JS-beautify simplifies debugging. If you can't resolve, submit another issue with all information - there is not enough info here to understand what's going on. Closing this one.. getSchema compiles schema, you don't have to compile it separately.\nSo you can use addSchema to add and getSchema to retrieve (and compile, if it wasn't compiled before). If the schema doesn't exist, getSchema should return undefined.\nDoes it just need clarification in the docs or it is not sufficient for your use case? Some context of your use case would be helpful. Also, have you seen compileAsync method?\nIn any case, as a temporary workaround you can use ajv._schemas[id] || self._refs[id] to check the schema.. > I thought getSchema would only return something if already compiled.\n@mmc41 thank you for the reply and closing. I will clarify in docs.. null is a value in JSON rather than an absent property. So if you use an option coerceType it will be coerced to the first allowed type (if \"null\" is not allowed)\nThe last schema does not coerce null to 0, it leaves it as it is (see https://runkit.com/esp/583dc2ae82382300136c0c3a). What is the problem here?\nThe behaviour you want for required property (2nd schema) should be achieved with the default keyword - when the property is missing there is nothing to coerce but if the default is present it will be used. See docs about assigning defaults.\nI don't think any changes are necessary to be honest. You can also add any custom post-processing with custom keywords (e.g. if you want to delete property when it is null or 0).. > Desired result of SH1 - empty source, because this property is not necessary, it can not contain null seamlessly and can be removed from the source (by new special coercive option)\nI will not be adding an additional option, because:\n- I think this requirement is not common enough\n- coerce means \"change\", it does not mean \"remove\". null is a value, so removing it is not something Ajv will support.\n- making coercion dependent on another keyword in addition to type keyword will substantially complicate it.\nIt can be implemented for your use-case as a custom keyword, e.g. removeNull: true or you can even implement a more generic keyword removeIf: { type: 'null' } that takes schema as a value and removes current property if the data is valid against this schema. I'd be happy to add it to ajv-keywords package if you contribute it there.. > i would like this behaviour in all validations on all my schemas and nested schemas.\nWhy do you need it to be a part of validation then? The whole point of schema is to apply schema-specific requirements (and possibly changes). If you just want to modify everything, it can be just the code you run before or after validation.. @domoritz thank you, I will review/merge\n\nWhen I used ajv, I didn't aware of there is a typings in the library.\n\n@plantain-00 it was added after, @blakeembrey was saying the preference is to have it here.\n\nOne thing I'm worried about is that libraries' version is rarely updated just because it's typings is updated\n\nI don't mind adding version on typings update.. > One thing to note about this PR - it breaks compatibility with TypeScript 1.x\n@blakeembrey thank you. I will merge it in 5.0.0 then.. It's merged and released as 5.0.0-beta.1, you can npm install ajv@^5.0.0-beta. @wei-xu-myob I don't think I agree with that change I am afraid. The messages that Ajv returns are meant to be processed post-validation and the error object for enum contains property .params.allowedValues that points to that list. The reasons not to add that in the message are:\n\nit's not backward compatible and can break some users code\nthe items in enum can be anything, it's not limited to strings. So potentially it can create a huge error message, while .params.allowedValues is a reference to enum array, not a copy.\n\nIn your case, if you need a message that contains allowed values you need to iterate the errors array after a validation and create such a message.. Thank you! It's in 4.9.2. @angelowang loadSchema is asynchronous itself. How can it be used in synchronous function?\nIs it not sufficient to add all required schemas in advance with addSchema?. > These schema files are in various folders, and it's not clear which should be added in which order.\nYes, order in which you pass schemas to addSchema is not important. You can load them all in array/object and then pass via options property schemas when you create Ajv instance. And then they will be compiled when you call getSchema.\n\nAn alternative is having a simple way to make my main process wait until the compileAsync() finishes, something like Promise.\n\nYes, also possible.. @angelowang closing this issue, seems like your situation is covered.. In 5.0.1-beta.0\nTo use: npm install ajv@^5.0.1-beta. should be done via config management package. In 5.0.1-beta.0\nTo use: npm install ajv@^5.0.1-beta. What is the version? Wasn't it solved by https://github.com/epoberezkin/ajv/pull/363?. Webpack doesn't seem to have a way to manage optional dependencies. In any case, these messages are warnings, not errors, they seem to be manageable. See https://github.com/epoberezkin/ajv/issues/117#issuecomment-198328830 for example.. It will be resolved by #382 and #383. Resolved in 5.0.1-beta.0\nTo use: npm install ajv@^5.0.1-beta. Is it \"webpack\": \"dist/ajv.bundle.js\" in package.json makes it work with compiled file? If so, it just has to be removed then.. Does removing the line above solve the issue?. @idangozlan I think you are using 4.x.x rather than beta version (5.0.1-beta). These optional dependencies are only removed in beta version, it won't be changed in 4.x.x.. Why webpack is trying to parse .jst files I have no idea - they are not required. It's not the same problem really, it's webpack configuration issue - how to make it to ignore everything but js (or just ignore jst). They are not used at run-time so they need to be ignored in webpack.. Why \"3\" should be a valid URI?. Then what is the problem?. If you mean other URLs then you can use format: 'full' option that does slower but more correct validation.. Actually, no. Maybe they are valid URIs?. The last 4 (including \"3\") fail in \"full\" mode. You can use less permissive \"url\" format: https://runkit.com/esp/584b14bae50294001406f653\nNone of the examples above pass it. Also see #481. The schema { format: 'numeric' } does not require that the data is a string, it is valid for all other data types, including arrays. That's not an ajv issue, it's per spec.\nYou need to change it to { type: 'string', format: 'numeric' } (in both branches of oneOf).\nAlso anyOf is more efficient, so unless you need to ensure that only one subschema is valid (when it is not always the case from the design) it is better to use anyOf.. Format keyword is validated (and the function is called) only if the data is a string. All other data types pass format validation (the function is not called).. In 5.0.1-beta.0\nTo use: npm install ajv@^5.0.1-beta. The proposed change is simple - it's this line: https://github.com/epoberezkin/ajv/blob/master/lib/dot/validate.jst#L174\nPlus a couple of other related lines (see comment there), docs and tests.\nIt can be done in 5.0.0.\nI'm always a bit reluctant with api changes that can be implemented with a simple wrapper; in this case you can:\njavascript\nvar validateWrapper = (data) => validate(data).then(()=>data);\nAnd it gives you what you want so you can:\njavascript\nvalidateWrapper(data).then(render, handleErrors);\nBut given that the current return value for async validation is ALWAYS the same and it is something that was bothering me from the very beginning, maybe it is a strong enough reason to resolve Promise with something more useful. Also in all practical cases even if there is some if with that value (although it's not needed), unless the data is some falsy primitive, which would be highly unusual, it would still work, so it would be almost fully backwards compatible change.. In 5.0.1-beta.0\nTo use: npm install ajv@^5.0.1-beta. I don't think I like it as a designated option/feature designed specifically for additionalProperties to be honest.\nIt seems like it could be a part of a bigger feature - converting some errors into warnings. As such, it could have been a part of https://github.com/epoberezkin/ajv/issues/100 - custom keyword(s) for processing/reporting errors (there is even a bounty on it and a pledge from @crkepler to match contributions).\nI suggest, as a starting point, to contribute a custom keyword say warningKeywords to ajv-keywords that would take parameters to specify errors in which keywords should be converted to warnings. E.g.:\njson\n{\n  \"properties\": {\n    \"foo\": {}\n  },\n  \"additionalProperties\": false,\n  \"warningKeywords\": [\"additionalProperties\"]\n}\nwould mean that errors in \"additionalProperties\" in the current schema (and maybe in subschemas too) should be converted to warnings.\nIt would satisfy your use-case and also would be a useful bolt-on for some other users. Eventually it can evolve into more generalised error processing for #100.\nAnother approach would be to use two schemas generated from a single source (with and without additionalProperties), and the diff between errors will be the warnings - I would have done it this way to be honest.. An even simpler approach could be to clone data, use removeAdditional: true (or removeAdditional: 'failing') option and diff the data after validation (by using JSON Merge Patch (RFC 7396) or JSON Patch (RFC 6902) - there are several good implementations for both specs) - it will give you the additional properties without failing validation.. @scott-martin please check docs - there are 3 suggested options in Getting started, you are not using it correctly. ajv.validate expects a schema as the first parameter.. Maybe better error reporting here would be helpful.... in 5.0.1-beta.3. In 5.0.1-beta.0\nTo use: npm install ajv@^5.0.1-beta. transpile option support requires ajv-async package, without it processCode option can be used to pass transpilation function. In 5.0.1-beta.0\nTo use: npm install ajv@^5.0.1-beta. Validation of schema examples (new examples keyword in draft-06) seems out of scope of this package, as it is not a validation keyword and should happen as part of schema testing rather than as part of schema compilation. It probably could be a separate package.. @alexkuz I looked at the code and it seems it can't be done without making the default case performance worse.\nAjv stringifies schemas only once and then the string is used first to check whether the schema is present and then to save the schema in cache if not (and it can't be combined in a single cache call because there is schema compilation between cache.get and cache.put).\nThere is another, less common use case when these strings are re-used - when all schemas are removed...\nMoving json-stable-stringify inside cache would mean that the schema will have to be stringified twice every time the schema is added.\nSo, unless you have an idea how this problem could be addressed, I don't think this is an acceptable change.. The problem is that if it is inside the cache then it will be called multiple times for the same schema, however it is refactored.... It works. That can even be:\njavascript\nvar Cache = {\n  serialize: stableStringify,\n  ...\n};\nto avoid extra function call, in which case the default behaviour won't change at all.\nAnd schemaObj can store that key as well (now it's called jsonStr, and it will be cacheKey), to avoid calling this method every time.\nSerialize would take the key and return serialized key.. @alexkuz I think that all that is needed to address your use case is serialize option. Otherwise it doesn't make any sense... Not sure I like one more option, but alternatives are worse. Apart from doing nothing :). Because it's not part of the JSON-schema standard that Ajv implements.. The reason why it was removed from the standard (it existed in draft-03) is most likely the fact that you can't impose requirement on something that does not exist and never gets validated. And you can't impose the requirement on the parent data from the schema that applies to the child data.\nThese are general design principles of JSON schema.. 5.0.1-beta.0\nTo use: npm install ajv@^5.0.1-beta. in 5.0.1-beta.3. I think it is used as property access somewhere in .jst files, probably in custom.jst, errors.def, maybe in compile/index.js too (the part that generates code?)\nWhat is the limitation you propose instead? If it is identifier with optional hyphens inside (not starting or trailing) I don't mind.\nThe starting point it to write a couple of additional tests in custom.spec.js (or maybe just change camel case to dash case in some examples) to see where it fails.. It should be relatively straightforward change - you'll need to use {{=it.util getProperty(keyword)}} instead of .{{=keyword}} where it is used to access a property, most likely within the files I mentioned above, maybe some others.. Thank you. I prefer 2 - just add hyphen to the list of allowed characters but the first.. \"1\" in your data is a string, it is not an integer. So the validation should fail in this case.\nThere is an option coerceTypes that converts data to the expected type, it also changes underlying data, not just passes validation.. This would have passed:\njson\n{ \"count\": 1 }. JSON-Schema is about validating JSON, where strings and numbers are distinct.\nOption coerceTypes is exactly for this (and similar) situations.. Also docs needs to be updated here: https://github.com/epoberezkin/ajv#addkeywordstring-keyword-object-definition\nI would even say that \"it is recommended to use hyphens in application-specific custom keyword to prevent possible name collisions and to differentiate them\"? Not sure.. Thank you!. in 4.10.4. In 4.11.0 and 5.0.1-beta.1. In 4.11.0 and 5.0.1-beta.1. thing is \"an additional property\" in the schema and the specification allows additional properties to be present. It's only if the value of defined keyword were invalid, schema validation would fail, e.g. minimum: false instead of a number.\nUsually you don't have to explicitly validate schemas - they are validated when they are added to Ajv instance (unless you disable it).. in 5.0.1-beta.3. @shmax The reason is that as it is all coercions are reversible to the same starting value. If you allow coercing \"0\" to false then the reverse coercion will have a different result (\"false\" instead of \"0\"). It may have unexpected effects when schemas have multiple branches with different types expected in different branches. Such unexpected effects may still happen when there is more then one coercion (e.g. \"0\"->0->false->\"false\") but they are less likely.. Consider the schema:\n{\n  \"anyOf\": [\n    { \"type\": \"boolean\", \"enum\": [true] },\n    { \"type\": \"string\", \"pattern\": \"^[0-9]+$\" }\n  ]\n}\nWith my grid this schema passes with \"0\" regardless whether coercion is on or off. With your coercion idea it would fail WITH coercion turned on. But it's the opposite to what is expected from coercion - to pass when it would fail without it.\nRemembering the original value is not trivial - coercion just mutates data in place.\n    . > does not support coercion with multiple types at all, so it does not matter really.\nAjv supports it. It coerces to the first possible type in the list.\n\nBut you can remember the place (in PHP for example with reference to the value, in JS probably with reference to parent object and name of property).\n\nYes, sure you can... It just seems like one more complication where there are quite a few already. Particularly in my case - Ajv compiles schemas to JavaScript, so all this logic would have to happen in generated code. Also it seems to be introducing some non-determinism where you'll have to make some arbitrary choices whether to pass or to fail (too late to come up with a specific example :), I may be wrong here, but the first reason is strong enough for me not to do it anyway).... It seems like email should have _ allowed, as this limitation applies to hostnames (as part of URL) only. I am ok with the change but please refer to the sources (EDIT: I mean references to normative documents) and it should go into 5.0.0 branch.. Closing, see https://github.com/epoberezkin/ajv/pull/397#discussion_r97484697. The advantage of that idea over any pre-processing/macro step is that the schema would be compiled only once and creating a validating function with different parameters would not require any code-generation so it will be efficient, unlike any pre-processing/macro step that would require to re-compile the schema every time.. My use case is to be able to use schemas as rules that can be configured, similar to eslint, but applied to some data rather than code. Rules and their configuration are supplied by different authors/users, so parametrising them allows to have fewer rules.\nExample:\njavascript\n{\n  type: 'object',\n  $params: {\n    minLength: {\n      type: 'integer',\n      minimum: 0\n    }\n  },\n  required: ['description'],\n  properties: {\n    description: {\n      type: 'string',\n      minLength: { $param: '/minLength' }\n    }\n  }\n}\nThe rule above requires that the property 'description' is present in the object and that its length is bigger than the parameter that is in the rule configuration. That allows to separate rule definition from rule usage and rather than having a separate rule for each minimum length to have just one rule.\nIn general, the use case is to have a single schema instead of multiple similar schemas. In many cases it's possible to achieve the same results by extending/combining schemas but:\n1. extending is more verbose\n2. there is no simple solution for extending recursive schemas\nSo if you try to define schemas for tree with different restrictions for node, then with parametrised schemas you can have one schema for a tree that accepts parameters that affect node definition. Without parametrised schemas you will need to have a new schema for each tree and it would be not possible to use extension/combining.\nParametrised schemas are as useful as higher-order functions. You can live without them, but using them leads to more re-usable and concise code. So if you consider schema itself to be a function that validates data, then the schema with parameters is a higher-order function that returns the function that validates data.. Duplicate of #141 (there is a working implementation of keywords modifying the data). Also please read the docs about creating custom keywords (it explains how to modify data too among other things) and see examples of custom keywords in ajv-keywords, particularly dynamicDefaults (it modifies the data).. @idangozlan thank you. I assume it resolves webpack issue in 5.0.1-beta, right? I'll merge into 5.0.0.. @idangozlan could you please make the change in 5.0.0 branch in your fork and submit a new PR to 5.0.0 branch?. @gajus it can be merged.\nPlease add the tests here: https://github.com/epoberezkin/ajv/blob/master/spec/tests/rules/format.json#L74\nAnd docs: https://github.com/epoberezkin/ajv#formats (ideally with the link to json-schema spec  proposal :). your jsbin is somehow different - it fails for me: https://jsbin.com/duqoniqiha/1/edit?js,console\nthis fails: \"http://a.b--c.de/\". What's the original problem? I think these tests should pass so it's regex that is the problem, no?. in 5.0.1-beta.3. I guess this file should be changed too: https://github.com/epoberezkin/ajv/blob/master/scripts/bundle ?\nIf you submit PR (and it works :) I will merge.. @ahmedsoliman92 thank you. Ajv uses Function constructor indeed, not eval. You can do it with ajv-cli - the pre-compilation feature is BETA though, it doesn't support all cases of schema references and has limited support of custom keywords.. @jdmswong it is possible to validate using static schemas AND you will have to generate a function/module for each such schema you want to use. Why is there OR in the question?. @jdmswong Ajv compiles schemas to code. You can do it at run time, in which case it uses Function constructor - you will need to change your CSP to allow it. Or you can do it at build time converting all your schemas to modules that can be required (it is done this way in \"table\" package, e.g.). There is no other option.\n. @bofcarbon1 I think it's a duplicate of #325. If it's different please re-submit with answers to all these questions: https://github.com/epoberezkin/ajv/blob/master/CONTRIBUTING.md#compatibility. 5.0.1-beta.3 should resolve it. It's there already - https://github.com/epoberezkin/ajv/blob/master/lib/ajv.d.ts\nUnless I am missing something?. See https://github.com/epoberezkin/ajv/releases/tag/5.0.1-beta.0 - the part about Migrating.\nThat's the expected behaviour. Ajv 5.0.0 will implement draft-06 that's about to be published ($id is outstanding though).\nLoading draft-04 meta-schema for users who only use draft-06 schemas is wasteful and shouldn't be the default behaviour.. Just noticed you're talking about hyper-schema. The argument about not loading it by default applies even more.. @kapouer \"additionalProperties\" keyword only takes into account the properties and patternProperties in the same schema object, properties defines in other objects in the schema schema are not taken into account. This behaviour is per spec.\nThe is no such thing as \"inheritance\" in JSON schema. The easy way to think about it is to see JSON schema as a set of restrictions that should be satisfied for the data to be valid. Each keyword applies restrictions according to strictly defined rules. While in simple cases JSON schema looks like a definition of the object structure, in general case it is not. In this way \"properties\" keyword does not define properties, it defines restrictions on property values if they are present in the object. So \"properties\" keywords defined in different places of the same schema are not supposed to be merged or treated together and \"additionalProperties\" keyword is not supposed to take them all into account. That follows from one important design principle of JSON schema that it is shallow and the result of validation of any keyword can only depend on sibling keywords in the same object, but not on any other keywords present anywhere else in the schema.\nThis limitation is a known one, there are multiple discussions about how to address this problem and no clear consensus at the moment.\nThere are several workarounds though: see https://github.com/epoberezkin/ajv/issues/134#issuecomment-242989744. @sondrele This subschema would compile to something that expects a value. JSON pointer '1/property' points to another property of the parent object. But how can you define a parent object of the data that is passed to validation on the top level? Ajv cannot generate code to access that property as it has nothing to point to the parent object. So it is different from the property (or sub-property) being absent in the object Ajv has reference to (for which it would safely returns undefined). In this case Ajv doesn't even know where to start.... > the $data reference points outside of the root level of the subschema\noutside of the root data to be precise. The documentation can be amended to say that $data can't point outside of root object passed to validation function and doing so results in schema compilation exception.. It is already possible with both getSchema and validate methods - you can pass full URI including JSON pointer to subschema.. @delavara thank you. @adamtal3 thank you for figuring it out :) npm run build && npm run bundle would have fixed it too - most likely you had old compiled doT templates from some previous version. cleanUpVarErrors is not used anywhere in 5.0.1-beta.3, the last version it was used in was 5.0.0-beta.1, then it was renamed to finalCleanUpCode.... @dvergeylen yes, you are using it incorrectly. The first schema in switch/if doesn't check the property type in the parent object (why would it?), it checks for the property type inside property payload (that's where the schema is located). As there is no property type there, the schema is valid and the schema in then is validated. Your switch keyword should be on the parent object level, not on the property level.. And you probably want to make type required, as otherwise when this property is absent, the validation would pass.\nAlso, I'd recommend switching to 5.0.2-beta and using if/then/else from ajv-keywords rather than switch, as it is likely to become part of the spec in draft-07.. Or you can use select, but it is not clear if it's going to be standard.. You already can define custom formats for \"number\" type in version 5.0.2-beta, also see migration guide. Not sure what you mean by \"custom types\", but for all other custom validation scenarios, including asynchronous, you can use custom keywords. See docs and also ajv-keywords package.. It's the same as #291. @sondrele thank you. It all works correctly in version ^5.0.2-beta because propertyNames became a standard keyword (it's added to draft-06). In 4.x.x it's defined in ajv-keywords and the implementation has limitations (the data inside the subschema of propertyNames is the property name itself, rather than the whole object, so the data reference is undefined).\nSee https://runkit.com/esp/58a83949b356410015a169cc\nAlso see migration guide\nIf anything, it's ajv-keywords issue, but I will not be improving it as it all works in the next version.. patternRequired has been moved to ajv-keywords, as it didn't become part of the spec. See migration guide on how to use \"v5\" schemas with Ajv 5.0.x.. Interesting. Never tried using URNs as refs. > I generate my schemas from java classes, so the class names gets serialized to a URN\n@sondrele out of curiosity, what do you use to generate the schemas? We have some legacy Java code where it may be useful...\n\nIf support for URN's is not on top of your priority list (so that it will take a while before it's implemented), I would happy to look into the issue instead.\n\nIt wasn't in this list at all, to be honest :) Yes, I would definitely appreciate it. I think it is most likely caused by using node url package to parse and resolve URIs (and whatever browserify replaces it with in the browser). The replacement you use (if url package is indeed the reason) should not be much bigger, ideally even smaller :). It's not sufficient I think. If Ajv were to support URNs it has to support URN resolution, URNs with hash fragments, etc., etc.\nEssentially all the tests that exist for URLs in refs have to copied and made into the tests that support URNs, both the tests that are in Ajv and in JSON-Schema-Test-Suite (these tests can be added there directly).\nIt's a bigger effort than making a simple case work, but I'd rather have no URN support than partial URN support.. > draft v4/v5\nIf by v5 you mean a special mode in Ajv, it's not standardised and removed from the next version - see 5.0.1-beta.0 (although all the features and v5 schemas will be supported with options).\nIf you mean recently published draft-05, then the consensus is that it was rushed out, has many inaccuracies, and as it was supposed to just \"clarify the language\" it should be ignored and instead draft-06 that is going to be published soon should be used. Ajv 5.0.0 will support it, the lastest beta supports almost everything from draft-06 apart from renaming \"id\" keyword to \"$id\".. > It's not sufficient I think.\nI meant a simple fix. Replacing url with another library is the right approach, that would be very good if you could do it. Thanks.. They are added in 5.0.x-beta (5.0.0 branch), can be added to master branch too. closed with https://github.com/epoberezkin/ajv/commit/8c0395908c498e8525b9c09e8f48112aa3635eb3. @boenrobot Sorry, just noticed your comment. Yes, the test failures are definitely related to the change. The error message \"generators, nodent and regenerator are not available\" means that neither nodent bundle nor generator bundle doesn't allow to require them.\nCompare the output after the change: https://travis-ci.org/epoberezkin/ajv/jobs/204781630#L2329\nand before the change: https://travis-ci.org/epoberezkin/ajv/jobs/207894092#L2950\nThe new output is practically empty, which means that the bundle file is most likely empty before it gets to uglify (that generates all this \"unused variables\" output). I see. Thank you, I will review/merge it later today or tomorrow.. in 4.11.5. @boenrobot now the problem is to make it work with uglify-js 3.x.. @krishnanms  \"oneOf\" requires the data to be valid against exactly one schema, unlike \"anyOf\" that requires that data is valid against any of the schemas (i.e. possibly valid against more than one schema).\nIn general, the approach to error reporting is that if all the errors are fixed then the data will be valid against the schema. That is not the case with oneOf though. In your case if Ajv were to return the errors from schemas inside oneOf it would return:\n\n\"foo\" has wrong format (error from the first schema in oneOf)\nproperty \"bar\" is required (error from the second schema schema in oneOf)\nshould match exactly one schema in oneOf\n\nThat's what Ajv would return if you used anyOf, by the way.\nIf you fix all these errors though (format of \"foo\" and add \"bar\") the data would still be invalid, because oneOf requires exactly one schema to be valid, not both.\nThat was the motivation to not report underlying errors from oneOf.\nI will re-consider this decision, in the meanwhile you can:\n1. use anyOf (error report would include errors from both schemas though, as Ajv has no way of knowing which of the schemas is the right one)\n2. use conditional (\"if/then/else\" keywords, they is likely to be included in draft-07 and is available as part of ajv-keywords package). In this case you can \"tell\" Ajv how to choose which schema is the right one to use based on some subset of requirements (e.g., the field that is present) and in this way avoid including errors from both schemas in the report in case of failure.\nIn general it is always better to use \"anyOf\" in cases when schemas are mutually exclusive (both can't be valid at the same time), as in your case, and only use \"oneOf\" when you need to make sure that ONLY ONE schema is valid. \"oneOf\" will always validate data against ALL schemas, while \"anyOf\" always short circuits - as soon as the data is valid against some schema, validation of anyOf succeeds.. @krishnanms interesting. I didn't realise it depends on allErrors option, I don't think it should. This option affects continuing validation after the first failure that determines the validation result, and oneOf keyword is the first such failure in both cases. So it should be made consistent.. If you decide to improve it please make PR to 5.0.0 branch.. The reason is removeAdditional options, when the first subschema is validated everything but \"type\" gets removed.\nsee #129, https://github.com/epoberezkin/ajv/blob/master/FAQ.md#additional-properties-inside-compound-keywords-anyof-oneof-etc. in 4.11.4. This PR once published will fix it: https://github.com/ahmadnassri/har-validator/pull/89. @prettydiff har-validator in the dependencies tree should have version 4.2.1. If it is before that, you need to re-install. If it's 4.2.1 and it's still broken please let me know.. @idangozlan it's not about ajv version, it's about har-validator version, it should 4.2.1+. Can you please post your dependency tree here (npm ls)?. related to #397. Non-latin characters in emails are not allowed by the standards, some email servers/systems may support them but it does not make them valid.\n\nSee extracts from RFC 5321, section 4.1.2 in this https://github.com/epoberezkin/ajv/pull/397#discussion_r97484697\nSee definition of ALPHA in RFC 5234, appendix B.1 that the above refers to.\n\nSo email format is how it should be and if you need to support non-latin characters in emails you can re-define it in your app with .addFormat('email', /.../) call (it allows not only adding but re-defining as well).. JSON Schema draft specifically refers to RFC 5322, not to the extension. You can submit the issue to JSON-schema-org. Even if it is added to the spec, I think it should be an additional format rather than the change in the existing format.\nThe solution I suggested still works - you can always redefine email format.. It says something about \"url\" module not found. It is a core node.js module that would also be available if you were to use browserify.\nIt also mentions https://github.com/facebook/react-native/issues/4968. As a workaround I can suggest using supplied bundle - it exports global Ajv.. @claudiorodriguez do you know how to solve it?. @nenti @pavlelekic I think including url module from npm as your app dependency can help. Please let me know if it does or doesn't.. @superandrew213 thank you. You only need .js and .json files from lib folder, not any others. see #373 and https://github.com/epoberezkin/ajv/issues/117#issuecomment-198328830. @ryanmeador it is expected. oneOf to be valid has to have only one subschema valid, so it has to always validate all of them, and if there is coercion that can happen to make type in the second one valid this coercion will happen, as in your case. Instead you should be using anyOf that is valid if any of the subschemas valid and it always stops validation as soon as it finds such subschema.\nIn general it is always better to use anyOf (an equivalent of boolean OR) unless you need the additional restriction that oneOf (an equivalent of boolean XOR) imposes and more than one of your schemas can be valid at the same time.. > Is it not fair to restate the method of applying coercion as this: after being successfully validated with coerceTypes == true, data will be left in a state such that it would successfully validate even if coerceTypes == false? As it stands, the data I'm left with is invalid per the schema.\nIn most cases it is correct, but such guarantee in ALL cases is out of scope of this feature - it requires a complex rollback logic based on remembering in which state the data was before coercion and also understanding what should/shouldn't be rolled back. At the moment coercion is very simple and local and it has no memory of the original state. Given that the problem is easily solved by switching from oneOf to anyOf, I don't think some edge cases when the requirement you state is not met are important enough to justify this complexity.. Related issues:\nhttps://github.com/epoberezkin/ajv/issues/395 (justification for coercion matrix and some discussion on rollback logic)\nhttps://github.com/epoberezkin/ajv/issues/399 (using custom keywords for coercion). +1 for PR updating docs - docs is a huge time-sink. > Is it not fair to restate the method of applying coercion as this: after being successfully validated with coerceTypes == true, data will be left in a state such that it would successfully validate even if coerceTypes == false? As it stands, the data I'm left with is invalid per the schema.\n@ryanmeador Another simple example when this statement cannot be true, regardless the level of extra complexity we introduce:\nschema:\njson\n{\n  \"allOf\": [\n    { \"type\": \"boolean\" },\n    { \"type\": \"number\" }\n  ]\n}\ndata: true\nThe validation will succeed with coerceTypes: true, but the data won't be left in the state when it is valid without coercion (and for this schema no such data exists at all).\nIn general, using this option, we mix two concerns - validation and transformation and that's where the challenges comes from. While for pure validation the order of subschemas shouldn't matter (and it doesn't) for transformation that mutates data it does, so some deeper understanding of the process is required when writing the schemas: \"oneOf\" should generally be avoided; instead \"anyOf\" or \"if/then/else\" (proposed for draft-07, available as part of ajv-keywords package), should be used, that have more predictable outcomes and better error reporting.. > It's certainly a lot more complex.\nexactly. And don't forget it should all work with references, including recursive references, plus there can be multiple coercions, so a problem that you describe is really \"finding one set of all coercions for the data instance that would make the data valid according to the schema\" - a much more complex problem than the one currently solved. I think solving this problem is out of scope of what Ajv does (validation according to spec), and it's rather theoretic than practical problem - most real world issues can be solved by modifying schemas (from this point of view the sample schema above doesn't make much sense). Same considerations apply to using defaults in schema and here as well Ajv is opting to implement some relatively simple logic instead of complex rollback scenarios (as some validators do, but then they fail some tests in the standard suite and many Ajv tests...). @daditto The result is correct. the absence of \"type\" keyword (the one that is commented out) makes the data valid against both subschemas inside \"oneOf\", because \"properties\" keyword does not require data to be an object, it only applies IF the data is an object. And the data is only valid if it is valid against one and only one subschema inside  \"oneOf\" keyword.\nThis is all according to specification.\nPlease see the docs on validation keywords for more details about how they work.. @daveisfera please try to make the code reproducing the issue smaller, ideally only using Ajv and not other packages. Also could you please re-submit the issue answering all the questions from compatibility template (see the contribution guidelines).. @daveisfera please add the error messages when it crashes.. @daveisfera I would suggest trying to find a smaller code that causes the crash. You still have too much going on there. Would just creating ajv instance cause it? If so, you can try using option {meta: false, validateSchema: false} (that prevents validating schema against meta-schema).\nIf the schema size is the issue you can try changing it to use patternProperties keyword instead of properties (the code seems to generate schema with 500 properties and it compiles into a functionthat has size approx. 31kb (it's not recursive though, but can the size of the function be an issue?)\nYour schema would look something like this:\njson\n{\n  \"type\": \"object\",\n  \"patternProperties\": {\n    \"^s\\\\d+$\": { \"$ref\": \"/ColumnType\" }\n  }\n}\nYou can have more specific pattern to define exact range of allowed numbers and use \"additionalProperties\": false} to prohibit any other properties if needed.. In general, I think that generating schemas programmatically partially defeats many reasons of using the schemas, so while there are cases when it's the only way, in your case using patternProperties seems a better approach.. > I did some testing and it will work fine with 80 properties but crashes with 81.\nSo the function size can be an issue. Try changing schema to reduce its size as I suggested.\n\nIt's a completely self contained test in 79 lines with the bulk of that being setting up ajv so I'm not sure how I could make it any simpler.\n\nYou don't need a self-contained test. You just need a minimal code snippet that still fails, to isolate the problem - what is the line where it actually crashes. As you don't have logs (maybe you can add them?), removing some code can help to understand the line where it fails. E.g., if it crashes during schema compilation, you can remove call to validate function. etc.. Can you try removing data and call to validate inside the loop in the end? Would it still crash?. Also, after that, can you try using option inlineRefs: false?. So crash is caused by call to validate, not by compiling schema.\nWould it crash if you call validate only once? Or you need to call it 394 times to crash and 393 is not enough?\nDid you try using patternProperties in schema instead of properties as I suggested earlier?\nYou really need to experiment more with the code to find the minimal amount of code that still crashes but when ANY further reduction stops it from crashing. From what you say it is not minimal yet.... Also, the option is not extendedRefs, it's extendRefs and in your case it does nothing.. Also try changing ID to id: 'StringKey', not sure why you need this \"/\" in front. Unlikely it's what's causing the issue, but just in case.\nAlso, does switching to ajv 5.0.4-beta change anything?. > This wouldn't help me because our actual code can't use patternProperties.\nThis would help understanding the issue. But I guess it should work given that it works with smaller schemas.... Ok, I have a theory... Can you try bigger number of properties with a smaller number of calls (e.g. 82 properties with 1+ call etc.)? Opposite too (395 calls with 1+ properties etc.)?\nMaybe the environment has some limit on the time spent in the execution block (\"tick\")? Maybe if you make it async it will work? I mean not trying to validate everything in one go and instead use setTimeout to break it into multiple blocks?. @gajus thank you. I think both positional arguments and objects are equally affected by the [lack of] validation. So the main question is whether to use positional or objects, rather than whether to validate or not to validate ;). You may be right... I'll leave it as is I think :). @pselden thank you for highlighting the problem. I don't think there is any viable way to resolve it on Ajv level. All Ajv does is adding yields (or awaits) in front of async keyword calls so the code stays \"synchronous\" in structure. Doing anything more advanced is definitely out of scope - it would dramatically increase the complexity and given the relatively small share of users who use async validation it is not justified.\nWhat you can do on your end is to define the keyword differently - rather than using it in each property to have it appear once on the top level with the list of properties. This way you can control how you do validation in your own code. It's the same syntax that required keyword uses:\njson\n{\n  \"$async\": true,\n  \"title\": \"User Schema\",\n  \"type\": \"object\",\n  \"nameBlacklist\": [\"firstName\", \"lastName\"],\n  \"properties\": {\n    \"firstName\": {\n      \"description\": \"First Name\",\n      \"type\": \"string\",\n    },\n    \"lastName\": {\n      \"description\": \"Last Name\",\n      \"type\": \"string\"\n    }\n  }\n}. @pselden The only difference without allErrors: true (false is the default) is that it fails sooner, successful validation will take the same time, so yes it won't be faster.\nThe problem is essentially taking a \"synchronous looking\" code with yields (or awaits) and converting it into a code where all yields are resolved in parallel. This is not a trivial task. If you know how to do this transformation of the code - then you can supply Ajv with a different transpiler and it will do what you need.\nRefactoring the schema can be not as simple as in the example above, but I think it should be possible. For example, you can have custom keywords that register necessary processing (and the registration itself is synchronous) and have another keyword that is only used on top level that executes all async operations in one go (or it can even be outside of schema) so that all your async operations are batched.\nAnother option is to use promises as a part of the data you validate and do merging of these promises (that's the approach I used in JSONScript).\nSo I am sure there are a couple of solutions that would give you parallel async operations with some simple changes in how you define and use custom keywords.. @DAGapps thank you. PR is welcome, I'm happy to change property access to compatible way. A bigger question though, will Array.isArray etc. work? Maybe a better solution is to transpile to ES3.. @DAGapps QT 5.8 seems to support at least ES5. Which version you are using?. @DAGapps thank you. Happy to help if needed. Can the issue be that QT platform cannot execute Function constructor? If that is the case you can try pre-compiling the schemas during the build time using ajv-cli as I've done in table package.. @byrneciaran That is correct - you will have schema and parentSchema property in each error object, title will be in parentSchema, schema is the value of keyword itself.. @aikar 'nodent' and 'regenerator' are optional dependencies. If I make the change you suggest the Ajv bundle will be bigger by more than 1.2Mb (i.e. 1.3Mb minified instead of 110Kb minified).\nUnfortunately Webpack doesn't seem to support optional dependencies in a way that would be compatible with nodejs/browserify. Browserify supports dynamic require when the package name is an expression and the bundle for that optional dependency is loaded separately.\nSo your options are:\n1. wait until version 5 of Ajv is released and dependencies are updated. It should happen soon, as soon as draft-06 of JSON-Schema specification is published. In v5 these optional dependencies are moved to ajv-async package, which most people don't need\n2. use Ajv bundle created with browserify and load it separately. It is available in npm package and via cdnjs. This bundle exposes global Ajv symbol\n3. use browserify instead of webpack\n4. fork Ajv and remove these optional dependencies completely (but you'll have to fork packages using Ajv as well). By the way, is \"webpack complaining\" a real issue? I.e. does the bundle work? I was under the impression that it is possible to configure webpack to ignore these optional dependencies and it all works. If the only problem is some build warnings then it's not the problem that MUST be solved.. The bundle is already deployed in dist folder in npm package. The bundle supplied with the npm package should work, it exposes a global Ajv variable.\nI don't know what creates this Ajv.chunk.js, it's not in this package. @gajus thank you. Added a question there: https://github.com/webpack/webpack/issues/196#issuecomment-291888689. > > I'm curious to what even caused this issue, as 4.11.3 does not cause this, but 4.11.4 or 5 does.\n\nHave you tried looking into the changes introduced between the two tags to identify what @epoberezkin change triggered the warning?\n\n@aikar I don't see what could have caused the difference between these versions. Are you sure there is no change in webpack configuration that happened at the same time?. @elrumordelaluz The bundle is published in npm package. You need to npm install ajv. It's not in the repository.. https://github.com/ahmadnassri/har-validator/pull/93 will fix it. what exactly?. https://github.com/request/request/issues/2652#issuecomment-332162880. @brainstormtrooper There is no such file in ajv v6: https://github.com/epoberezkin/ajv/tree/master/lib. duplicate of #22. $ref is not equivalent to schema inclusion - the expectation you have is wrong.\nYou can read more on the issue in various discussions in JSON-schema-org, this is the last https://github.com/json-schema-org/json-schema-spec/issues/279#issuecomment-288558322. > inlineRefs option seems to be used for inlining referenced schemas but it doesn't.\nIt affects code generation - with this option false $ref is ALWAYS compiled to a function call, by default the code is inlined when possible. The schema itself NEVER changes.. For a subset of possible JSON-schemas $ref can be seen as pre-processing instruction to include the referenced schema in place. In general case such pre-processing is NOT possible. \nPerforming any schema manipulation, including inlining $refs in place, is out of scope of this package. The scope of this package is validating data against given schema (specifically, generating code to validate data).. Added to FAQ: https://github.com/epoberezkin/ajv/blob/master/FAQ.md#generating-schemas-with-resolved-references-ref. It's difficult to understand the problem without a failing code... Can you please re-submit the issue answering all the questions in the template?. Looking at your code, how do you know that validate is undefined if you are logging JSON.stringify of it? JSON.stringify(function(){}) is always undefined. @radio-miskovice You need to use beta version, draft-06 meta schema is already bundled in there. draft-04 meta-schema is already bundled into the main version (not in beta though). I don't create tags for patches. You can see changes by looking at commits history. Why do you need them?. I see. Ok, I will start making tags for all releases.... you got it. @seeden I'm not sure how Ajv can be split... Theoretically keywords can be plugins and optional, but I'm not sure I like this idea. In any case it is not related to using ES6.\nFor your application a better idea could be to precompile your schemas into modules using ajv-cli (that uses ajv-pack inside). It may result in a smaller bundle size (depending on the number and the size of schemas) as only a small portion of Ajv will be included in the compiled code.. You can also try using some build tools that remove unused code - e.g. if there are some Ajv methods/functions you don't use they can be removed. It requires bundling Ajv together with your app, but it's easier than managing manually what should and shouldn't be included. . e.g. http://2ality.com/2015/12/webpack-tree-shaking.html. 196kb not minified? If so, you already remove 25%.\nI can suggest forking and removing unused keywords from these two files:\nhttps://github.com/epoberezkin/ajv/blob/master/lib/compile/_rules.js\nhttps://github.com/epoberezkin/ajv/blob/master/lib/compile/rules.js\nThat should reduce the bundle substantially.\nYou can also contribute a script that automates generating bundle including only certain keywords (e.g. by updating and then restoring these files after the bundle is created).. Can you please explain?. you can precompile your schemas with ajv-cli - the code can be smaller (unless you have large schemas, in which case it can become bigger :), as it will only include used run time parts of ajv and not the compilation logic.. Validating ~~recursive~~ self-referencing data structures is out of scope of JSON-schema specification.\nWhether to support it in Ajv depends on how common is the use case - could you explain what is it?\nIt would substantially complicate validation as it will have to keep track of all validated nodes and in case some node is encountered again and it has to be validated against the same schema it will be considered valid.. Just to clarify, recursive $refs are fully supported, just not with self-referencing data structures. E.g. this data:\njson\n{ \"self\": { \"self\": { \"self\": {} } } }\nis valid according to this schema:\njson\n{\n  \"type\": \"object\",\n  \"properties\": { \"self\": { \"$ref\": \"#\" } },\n  \"additionalProperties\": false\n}. Interesting. You may be interested to read FAQ - the third part about $refs and why it is wrong/difficult to deference them in general case.\nFrom my experience it's better to avoid self-referencing data structures that can't be serialised. You may save some time in the beginning but you are likely to find yourself in some tight corner further down the line. In general, there is bad support of self referencing data structures by most libraries... I'd stick with $refs.. btw, supporting self-referencing schemas would be even more complex - atm it is a hard requirement that they are serialisable.. Documentation says: \"With v5 option...\" (or \"with $data option\" if you are using 5.0.x-beta).\nYou need to new Ajv({v5: true}) (or new Ajv({$data: true})).\n. See https://github.com/epoberezkin/ajv/blob/master/FAQ.md#generating-schemas-with-resolved-references-ref. Not sure I understand why it is needed. The ability to quietly suppress all unknown format will lead to mistakes and unnoticed typos (as false positive results are usually the most difficult to detect with JSON schema).\nAlthough the value of format can be any string, it has some semantic meaning, so your options currently are:\n\nfail on unknown formats - you will need to add them all, and you can always add them as ajv.addFormat('name', /.*/) if you want to delay the actual implementation.\nwhitelist unknown formats you want to ignore by passing an array of values to unknownFormats option. In this case you won't get warnings if these formats are used.\n\"ignore\" all unknown formats (which is prone to errors even with warnings).\n\nI don't understand why you need an additional value for this option and whitelisting those formats you don't want to implement is not good enough.\nWhat is the use case?\nAlso, the latest version is 5.0.0 - https://github.com/epoberezkin/ajv/releases/tag/5.0.0. Also if you want to disable formats completely you can use option format: false, in which case ALL formats will be quietly ignored. > I'm guessing that disables e.g. email validation\nThat is correct.\nI am still not convinced that suppressing warning on a library level is a good idea... The problem here, even in your case, is that you are using third party schemas ignoring some part of them without providing any feedback to providers of those schemas. An option for your app/library here would be to process and report these warnings somehow.\nIf anything, there should either be an option to suppress all warnings (e.g. quiet: true) or for more granular control all options that may lead to warning should support value \"quiet\". Or both.... #618 should address it - it will be possible to capture all warnings/errors in a function and to decide there whether to log them.. The problem with simply ignoring anything is that you would not catch typos and you never know what is ignored. That\u2019s the reason why default is not to ignore. Permissiveness of JSON Schema makes it very difficult to maintain schemas - can you imagine a programming language that ignores all statements and that it doesn\u2019t know about? Well, it\u2019s JSON Schema.\nYou can also whitelist formats that may be used in schema and not supported. Could you please simplify your code sample using one of the usage patterns in https://github.com/epoberezkin/ajv#getting-started and re-submit the issue providing all the info in the issue template - including schema, sample data and the output, both the actual and expected.. @gunslingerfry It does patch \"recursively\" but not in the order you expect.\nYou expect the $patch in the source to be executed first and then apply patches.\nWhat happens is that the patches are applied first and then the $patch in the resulting schema is applied.. $patch may be the wrong keyword for this purpose. Why can't you just use allOf?\njson\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"$id\": \"example.json#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"thing\": { \"$ref\": \"#/definitions/C\" }\n  },\n  \"definitions\": {\n    \"A\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"item1\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\"item1\"]\n    },\n    \"B\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/A\" },\n        {\n          \"properties\": { \"item2\": { \"type\": \"string\" } },\n          \"required\": [\"item2\"]\n        }\n      ]\n    },\n    \"C\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/B\" },\n        {\n          \"properties\": { \"item3\": { \"type\": \"string\" } },\n          \"required\": [\"item3\"]\n        }\n      ]\n    }\n  }\n}\nAre you trying to merge several properties to be able to use additionalProperties: false?. Alternatively, you can patch the patch in C:\njson\n{\n  \"C\": {\n    \"$patch\": {\n      \"source\": {\n        \"$ref\": \"#/definitions/B\"\n      },\n      \"with\": [{\n        \"op\": \"add\",\n        \"path\": \"/$patch/with/1\",\n        \"value\": {\n          \"op\": \"add\",\n          \"path\": \"/properties/item3\",\n          \"value\": {\n            \"type\": \"string\"\n          }\n        }\n      }]\n    }\n  }\n}. Patching the patch (rather than its result) leads to a bit clunky implementation as you can see.\nOn another hand patching the result is not obvious as you cannot really see from the schema itself what is being patched.\nSo I am going to leave it as is, I think explicitness is more important here.\nUsing $merge may result in more intuitive schemas.\nGoing to close it here, if you have some ideas how $merge/$patch can be improved in some other way please submit the issue to ajv-merge-patch repo. @jfstgermain thank you. Option coerceTypes seems to be causing it when \"type\" is used in combination with any other keyword that may apply to a number, not necessarily format:\nhttps://runkit.com/esp/58fe72cc29e27100129b2212. fixed in 5.0.1 and in 4.11.8. By default Ajv treats your schema as draft-06 - the latest published version of JSON schema spec (json-schema-org website has to be updated still). In this specification exclusiveMaximum/Minimum have been changed to be number.\nSee docs on these keywords for more details.\nSee migration guide for info how to use Ajv 5.x.x with draft-04 schemas.. So with draft-06 your schema should be:\njson\n{\n  \"properties\": {\n    \"factor\": {\n      \"type\": \"number\",\n      \"exclusiveMinimum\": 0\n    }\n  }\n}. Ajv still supports boolean form for exclusiveMaximum/Minimum, but you need to tell it that it's a draft-04 schema.. @adamayogo that is correct. @mmc41 this guide explains how to use draft-04 schemas with 5.x.x version. By default it only includes meta-schema for draft-06.. @Domvel $schema is URI of the meta-schema, $id is recommended rather than required, please see JSON schema spec. It is possible to use ajv without $id, it is only needed if you refer to a schema.. Possibly, it is an expected behaviour - applying defaults can indeed make data invalid.\nI can investigate further but please reduce the size of the code sample to make it as small as possible to reproduce the issue.. Ajv doesn't implement default roll-backs. To validate oneOf it has to validate both branches, so if defaults are in another schema they both will be applied.\nYou can try using anyOf or if/then/else conditionals (from ajv-keywords)\nSee also https://github.com/epoberezkin/ajv/blob/master/FAQ.md#additional-properties-inside-compound-keywords-anyof-oneof-etc - it is related.. Possibly, you are using an old version.\nIf it's not the case, please submit the issue answering all the questions in the template.. Error objects should contain params property with that information, see https://github.com/epoberezkin/ajv#error-parameters\nIf in your case it doesn't please re-submit the issue providing the full info based on the issue template.. See https://github.com/epoberezkin/ajv/blob/master/FAQ.md#why-dont-additionalproperties-false-errors-display-the-property-name. When you use anyOf/oneOf keyword and all options fail, error report will include errors from all branches, as Ajv has no way to determine which is the correct branch.\nYou can use if/then/else from ajv-keywords (this keyword is likely to be added to the next version of the spec) - then you will be able to determine the correct branch based on whatever conditions and reduce the number of errors.\nAnother suggestion - you may consider extending draft-06 meta-schema either in the way draft-06 hyper-schema extends it or using $merge - to avoid repeating the whole meta-schema. It won't make error reporting any clearer.. > When you say it will be added to the next spec, which spec do you mean?\nJSON-schema draft-07: https://github.com/json-schema-org/json-schema-spec/issues/180. @handrews thank you.\nI am sorry, I am going to say no...\nThat's been suggested several times. I don't like this idea for two reasons:\n- it may be a breaking change for some users.\n- more important: it would create a precedent where validated data is used in error messages, creating a vulnerability (e.g., when ajv is used to validate API data/parameters and error messages are logged).\nAs you say, it's already in params object so in the application you can modify messages in any way you need. ajv-errors package will allow to modify messages as well - templating is not there yet though.. Thank you.\najv-cli already reports error objects, so you can see additional property in params. Is it not good enough?\nThe idea of ajv-errors is to define errors in the schema itself - not sure you're going to like it :). What I meant was that if you run\najv -s test/schema.json -d test/invalid_data.json\n(in ajv-cli folder) you will get this output:\ntest/invalid_data.json invalid\n[ { keyword: 'required',\n    dataPath: '[0].dimensions',\n    schemaPath: '#/items/properties/dimensions/required',\n    params: { missingProperty: 'height' },\n    message: 'should have required property \\'height\\'' } ]\nwhich looks friendly enough for people who can edit schemas - I didn't suggest debugging.\nBUT, \"compile\" command outputs schema validation errors as strings only, it doesn't support --errors option that is supported for commands \"validate\" and \"test\".\nThere is https://github.com/jessedc/ajv-cli/issues/10 that is exactly about it - to allow to output errors from schema validation in different format, that I think would solve your issue.. Because of some inconsistencies in uri format draft-4 meta-schemas use a bit different \"uri\" format when compiled (to allow uri-references). For draft-06 \"validate\" will work, but not for draft-04 schemas when they use \"id\" with uri-reference.\nThe issue has been recently raised https://github.com/json-schema-org/JSON-Schema-Test-Suite/issues/177 - no idea why I decided to just just dance around it, probably because JSON-schema org was quite quiet then.. @beeplin It has nothing to do with \"select\", \"additionalProperties\" only takes into account properties defined in the same schema object, so property \"a\" is indeed \"additional\".\nSee https://github.com/epoberezkin/ajv/blob/master/FAQ.md#additional-properties-inside-compound-keywords-anyof-oneof-etc. Also example 3 in https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#additionalproperties. @gajus does it not allow hash fragment?\n@velocityzen you can use \"uri\" as an alternative, \"url\" is an additional format.. @gajus Thank you. Should it allow? Or not really?. > I'd recommend that in the case user requires non-public URLs (such localhost, date URIs, tel, skype, etc.) it should be implemented in the user-space.\nThere is \"uri\" format for that. Thank you, it's all ok then.. It would be the right thing to do. It would require:\n1. moving nodent and regenerator to ajv-async (its next major version)\n2. moving all tests that use them there as well\n3. publishing ajv-async to cdnjs\nOnce it's done, they can be removed from here in the next major version, together with the tests that use them.. in 6.0.0-beta.2. change for integer is reverted so that schema {type: 'integer', maximum: 5} returns 2 errors for 5.5.. You need to create inline keyword, it's the only way at the moment. I considered exposing validation errors to all keywords but decided against it.\nCheck out ajv-keywords and ajv-errors packages for examples of inline keywords. There are [edge] cases when type can be validated after custom keywords that will be addressed soon (see #485).\nBy the way, \"type\" in keyword definition determines data types that the keyword applies to, in case when you want it applied to all types (as in case with \"nullable\") you don't need to use \"type\". The way you've defined it it will be applied to boolean data only, it won't even be called for strings.\nMacro keywords return the schema that will be used instead of them, there is no way at the moment (and there is no easy way to do it) to define macro keyword that would replace the parent schema.. In most cases nullable will be validated after type checking and after #485 it will be in all cases. So you can manipulate error state by changing errors and vErrors variables to remove type errors in case data was null and it is ok. Just using true as validation result is not enough, you need to analyse and correct errors collected so far and their count.. That's what ajv-errors is doing. Changing schema as you do in the sample would achieve nothing, you should not be doing it during compilation - as you have said type is tied into validation process and it's been already used, so at best it would simply not work.. @khusamov thank you.\nThese keyword are not part of JSON schema specification - that's why they are not supported in any of the validators.\nI am surprised that Open API spec still chooses to maintain their own flavour of JSON schema rather than sticking to the standard, where you can use \"type\": [\"string\", \"null\"], even though it slowly converges to JSON schema spec /rant.\nIt's possible to implement nullable (and probably discriminator too, didn't look into it) as a custom keyword for ajv, as explained above. If you or anybody else decides to implement them, they can be added to ajv-keywords package. See https://github.com/epoberezkin/ajv-keywords/issues/32\nI'm closing the further discussion here, please submit any questions/comments to ajv-keywords issue.. https://swagger.io/docs/specification/data-models/data-types/ - this page implied it. But happy to change - you can submit a PR. Somebody was going to do it but probably busy... So yes, thank you :). Hi @ui-xp. I've sent logo via email.\nI like the design suggestion, but I still want to have the site generated from readme and other markdown files, I don\u2019t want to maintain separate HTML site\u2026 Would it be possible to break readme into sections with CSS and/or JavaScript?. Otherwise in can be done by extending gh-pages-generator to support sections. @ui-xp maybe, to keep things simple, you could just improve the design/layout with the current information structure. Then I could look how to implement sections in gh-pages-generator.\nAlso, maybe it's enough to expose table of contents somewhere in navigation without breaking the readme to sections - it could be a good compromise (in a sense that only TOC will be duplicated, not all content).. sure. @bassundar it passes because it successfully validates against the first subschema and \"phones\" is not prohibited there. That's not the question related to Ajv specifically - it's about the usage of JSON schema.. See: http://epoberezkin.github.io/ajv/contribute.html#json-schema. @Niklv thanks for reporting.\nThat's the consequence of #485.\nVersion 5.0.1 is ok. fixed in 5.1.1. That's the change from draft-04 to draft-06 of JSON schema specification - see migration guide. Relative uri are valid with \"uri-reference\" format.. @blainesch Not using the standard keywords. You will need to either do it outside of schema or to define a custom keyword, e.g. \"uniqueItemProperties\" that accepts the array of property names which values should be unique across all items:\njson\n{\n  \"uniqueItemProperties\": [\"id\"],\n  \"items\": [\n    { \"id\": 1, \"name\": \"ajv\" },\n    { \"id\": 2, \"name\": \"ajv-cli\" },\n    { \"id\": 3, \"name\": \"ajv-errors\" }\n  ]\n}\nIt can be a useful thing, feel free to contribute to ajv-keywords if you do it.. That was quick :) Thank you!. Most likely it is a false positive. Probably should be reported to https://github.com/facebook/regenerator as the bundle is created from their code.. @rodrev closing it here, it would be good if you could submit to regenerator - they'll probably need more information about how to reproduce.. dataPath is set either using JavaScript property access syntax or JSON pointers (with option jsonPointers). You can modify them in your code.. v5 option is no longer used, for $data reference support you need to use $data option. See https://github.com/epoberezkin/ajv/releases/tag/5.0.0. 5.x is backward compatible, it still compiles schemas to functions. You just need to follow the migration guide as I wrote, and use $data option and not v5 option.\nYou cannot addSchema because it is not a valid schema unless you use $data option that makes it valid (by extending meta-schema).. $ref (not #ref btw) should be a schema URI, not object reference.\nIn your case you can change innerArraySchema:\nvar innerArraySchema = { \"type\": \"array\", \"items\": innerSchema }. @astitt-ripple please see https://github.com/epoberezkin/ajv/issues/476\nAlso: https://github.com/epoberezkin/ajv/blob/master/FAQ.md#why-dont-additionalproperties-false-errors-display-the-property-name\nSorry, I don't want to make this change in the library.. > That faq section has the title 'Additional properties inside compound keywords anyOf, oneOf, etc.'\nThe section I sent the link to is titled: \"Why don't \"additionalProperties\": false errors display the property name?\"\n\nThe FAQ does not seem to address why that case cannot be supported\n\nIt says: \"Doing this would create a precedent where validated data is used in error messages, creating a vulnerability (e.g., when ajv is used to validate API data/parameters and error messages are logged).\"\n\nOther error types seemed to include those specifics in the message too.\n\nOnly when these specifics are from the schema, not from the data.\n\nbut that then makes it harder to use errorsText().\n\nIt is not the case. You can modify messages how you need, then you can call errorsText(). How is that more difficult?. see https://github.com/epoberezkin/ajv/issues/379. Doing it with the schema complicates it a bit, but can be done too:\nhttps://runkit.com/esp/59268e4e237c55001294fda2\n379 also suggests a custom keyword. @hogething interesting. And if you remove \"str\" from schema it correctly fails validation: https://runkit.com/esp/5926fa6b9ea69e0012c93625. And it works in 4.x.x (with v5 option).\nAs a temp workaround, I can suggest replacing contains: schema with not: {items: {not: schema}}.. And actually if \"str\" uses schema and not $ref it also works...: https://runkit.com/esp/5926fa6b9ea69e0012c93625. option {inlineRefs: false} also solves the problem. fixed in 5.1.4. url is a core nodejs module, it is also available when you use browserify/webpack.\nFor any other environment that doesn't include code nodejs modules you may need to add it to your app's package.json.\nSee https://github.com/epoberezkin/ajv/issues/435. the code sample uses only one schema. it works for me: https://runkit.com/esp/59274b20c2d9b00012771e6b. @dolphub And actually I cannot reproduce your error message even if I add only one schema - I am getting \"can't resolve reference Sometypes#/definitions/uuid from id Animal#\", which is expected.\nCan you post your code please?. @dolphub ok, so the error is from json-schema-faker, not from Ajv. Probably it is because Ajv doesn't resolve references, so you have to pass both schemas to this faker. See https://github.com/epoberezkin/ajv/blob/master/FAQ.md#generating-schemas-with-resolved-references-ref. fixed in 5.1.5. see #472 . Added note to readme: https://github.com/epoberezkin/ajv/commit/daf7d6b7b0a7a43c47741b4f5cf461c17f5a6382. @jorotenev Difficult to say what's the problem without the example, but it all works. You should add all meta-schemas to the instance that are used in your schemas in \"$schema\" keyword. By default in v6 only draft-07 meta-schema is added, in v5 - only draft-06.\nEDIT: So, if you use draft-06 schema in v5 it will just work, in v6 you either have to update $schema to be draft-07 (it's backward compatible, so it's ok), or add draft-06 meta-schema.. @jegj this is a webpack configuration issue, not an Ajv issue. It affects jsonify package as well, as you can see from the output. Possibly the issue is that .js is not set as the default file extension?. > Can I get if something is required from AJV matching schema to validation?\nI don't understand the problem. Ajv performs validation according to the spec. You can define custom validation logic using custom keywords. Then you can process errors (that have all the information about the reasons of failure) how your application needs. You problem fits in one of these. Or it's something else?. I think I understand now that you want some schema analysis - to traverse the schema and to see if a particular field is required anywhere. It's definitely out of scope of Ajv. To traverse the schema you can use json-schema-traverse package.. @jboavida well spotted. It's a known issue (https://github.com/epoberezkin/ajv/issues/273) and it's a tricky one indeed. I should've written down the reasons I decided to leave it as is, there were some complications around it. I'll look into it.. @aapoalas thank you. Some simplified example of your issue would be helpful too, in runkit.com if possible. @mythili007 it\u2019s unrelated to this issue, you reference is incorrect. You may need #/device - but it\u2019s not clear from a partial sample. Please refer to the docs or JSON schema spec or submit a question to stackoverflow.. @lukaswelinder sorry, I'd rather not do it. Given that the method you are suggesting is purely for convenience and the use case is not so common (what it is by the way) it belongs in your app code rather than in the library.\nInstead of catching the exception you can:\njavascript\nif (ajv.getSchema(key)) ajv.removeSchema(key);\najv.addSchema(schema, key);\nBear in mind, that if any previously compiled schema referenced the replaced schema it would still use the previous schema, it will not be recompiled.\nAlso see: https://github.com/epoberezkin/ajv/blob/master/FAQ.md#can-we-change--extend-api-to-add-a-method-that-would-return-errors-rather-than-assign-them-to-errors-property. manually = without npm?\nIf you can't run npm install, you need to run npm run build. meta-schema is a schema that describes the schema itself. All draft-06 schemas should be valid documents according to draft-06 meta-schema. Meta-schemas ignore option useDefaults, as otherwise your schemas would be modified.. http://json-schema.org/documentation.html. @jboavida interesting. Btw it works correctly with option {inlineRefs: false}: https://runkit.com/esp/5939da4956ebfd0012d13943. To express conditions you can use anyOf/oneOf or if/then/else keywords (the latter is defined in ajv-keywords package and is planned to be included in draft-07 of JSON-Schema). I will think about it. In general, it is usually a bad idea to define functions that can be either sync and async, depending on their parameters. I think it applies to keywords as well. What is the problem with having keyword to be always async?. I don't understand how it can be the same_function if the function it returns should return promise in async and boolean in sync scenario. Or you have the function that can return both and you expect Ajv to understand at run time whether it is sync or async or compile different code depending on the parent schema? Either seems like a complication, at best...\nWhat you do feels absolutely right to me, I would never have the same function that can return both promise and boolean, in the same way having the same keyword that can be both sync and async seems an anti-pattern.\nWhat is the use case? Not sure I understand what do you mean by \"dynamic $ref\". Would allowing $data as the value of $ref cover this use case?\n\nif the invoked schema is sync called from an async schema, return a rejected promise based on innerSchema.errors;\n\nI think in this case it can just return errors synchronously (copy innerSchema.errors to same_function.errors).. Please use ajv-errors to generate custom error messages.. if you use compiled function, you need to pass errors: ajv.errorsText(validate.errors). It can be used without parameters after the call of ajv.validate.. https://runkit.com/esp/59400ddaca4785001289c821\nIt should still validate correctly. You can either use it without schemaId option or just ignore the warning. in 5.1.6. Recursive schemas are fine. And recursive schemas do not have actual recursive JavaScript references, they have $refs. Infinitely recursive self-referencing data structures are not supported though.  Similar (or the same) issue is https://github.com/epoberezkin/ajv/issues/461. Hi @jdthorpe.\nAt the moment all my and your plugins seem to have the same api - they export a function that accepts ajv instance, with an optional second argument (parameters), and returns the same ajv instance so you can chain them.\nI am reluctant to change it for this reason (several existing plugins), and also because I don't want ajv to be in any way responsible for the plugins as they could potentially conflict each other, require a certain loading order etc.\nMaybe instead of introducing an ajv method, it's better to\n1) document the current convention as a standard (a simple README change),\n2) optionally provide some [command-line] plugin tester that would check that\n  - the package exports a function\n  - ajv instance can be passed to it and it doesn't throw\n  - the same ajv instance is returned\n  - possibly, the function signature has only 1 or 2 arguments\nWhat do you think?\nIf that's agreeable, a PR is welcome.\nThank you.. The second part should probably go into ajv-cli, as it already supports such plugins (without support for parameters though).. Added https://github.com/jessedc/ajv-cli/issues/41. in 6.0.0-beta.0. @Kirtlander if you do a PR please make it to the branch \"beta\", I can release it as a beta version.. Feel free to submit PR to \"beta\" branch. \"$\" can be just dropped.. @GunslingerBara as I wrote above, you can submit PR to \"beta\" branch (not to master as it is a breaking change), I will then release version 6-beta.. > why this is a breaking change?\nBecause this is a public schema URI that depends on the file name: https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/$data.json#\n(https://github.com/epoberezkin/ajv/blob/master/lib/refs/%24data.json#L3)\n\nI would like to install the package unpatched\n\nOnce the change is released you will be able to install ajv@6.0.0-beta.0 without any patches. in 6.0.0-beta.0. No problem. Probably just watch the repo? Or gitter. Also, if you use greenkeeper it will tell.. @onury option multipleOfPrecision should be an integer number (and it only necessary if you are hitting some rounding issues), please see the docs. A possible improvement would be to validate the options, but it's another issue - at the moment options are not validated  and if they are invalid schema compilation can fail.. This is not related to an optional property being omitted by the way.. Approach 1 works for me, you need to submit a simplified failing code, ideally via runkit.com. there is no object with the JSON pointer '/definitions/Pet' in the schema, there is an object with the pointer '/paths/definitions/Pet'. If you fix it it resolves it: https://runkit.com/esp/59561ee71cba570012815d8f\nThere are missing formats, they should either be defined or ignored.. PR is welcome. in 5.2.1. 1. You are not using references correctly.\nThere are no definitions in your schema, so $ref cannot be resolved. If they are in a different file, full URI should be used with hash fragment.\n\nYou can use compileAsync method - see the docs.. If you want to reference the whole file, just use its name, why do you need \"definitions/\"? Also the second file is not added to Ajv instance.. I can't say without looking at files. You have to explicitly add all the referenced files using addSchema method and the resolved URI (using schema id as base URI - see RFC3986) should be the same as id in the added file. This is all according to JSON Schema spec. If you use the method compileAsync the schemas will be downloaded from full resolved URIs using the hook you passed via options.. Also your schema is draft-06 (you use $id) and you use $schema for draft-04, although that is not what is not working here - you simply use incorrect references (most likely :).. Hi @ro70. This is a general question on usage of JSON Schema - the specification that Ajv implements. Please submit the question to StackOverflow.. Your schema is equivalent to an empty schema - {}. There are no validation keywords on the top level. Additional properties will be removed if one of properties, patternProperties or additionalProperties keywords is present). None of them is present in the schema (only in definitions that are never used).. Actually you are using not the root schema... not sure, please make a working example in runkit.com using the latest version (v5 option is no longer used, for example), I will have a look.. You have not added $merge keyword to ajv instance - see this, by default $merge is simply ignored.. https://runkit.com/esp/5967e408fdb38a0014cb0f33\nhttps://runkit.com/esp/5967e4f3f3722d0012df4e82. @Airkro no, ajv doesn't transform schemas, the compiled validation function uses actual runtime data - it would have been very inefficient otherwise if the schema needed to be re-compiled every time.\n\nIf you need to do schema transformation like you describe you can use json-schema-traverse package to iterate through all the subschemas and replace $data reference in all the keywords.. The problem is in \"additionalProperties\" keyword on the top level. Without \"properties\" and \"patternProperties\" keyword any object is invalid, as any property is additional. That is according to the JSON Schema specification.. Also see https://github.com/epoberezkin/ajv/blob/master/FAQ.md#additional-properties-inside-compound-keywords-anyof-oneof-etc. > Trying to achieve same effect with something else--any hints?\nWhich effect? You should be able to express your validation logic with JSON Schema, just differently.\n\nWhy doesn't meta-schema validation fail?\n\nBecause the schema is valid, it just fails validation if data is any non-empty object.\nYou can create a meta-schema that would require one of these two properties, but it is not required by the specification.. several problems here:\n- option v5 is no longer used\n- not: 'integer' is not a valid schema, the only reason it doesn't fail is that that schema is never used\n- I don't see you using the second schema (blockObj) at all - it has to be explicitly added to the instance with addSchema method.\n- #/definitions/blockObj - I don't see definitions anywhere here\nIf it doesn't help, can you please make a self-contained code sample in runkit.com?. Also I assume that data is not {data:{...}} but {...}, at least from looking at the code. Just looking at the code/sample - I see only two possibilities - either schema should not compile at all, because the reference can't resolve, or if you pass the whole object as schema it is equivalent to an empty schema.. This is the correct behaviour because \"links\" is not a validation keyword, so everything inside \"links\" is ignored. If you want to validate against the schema inside \"links\" object, you can either compile it directly (by passing a sub-schema object to .compile method) or add \"id\" attribute to your schema and access the sub-schema using JSON pointer with .getSchema method.\nAlso, there is no need to download draft-4 meta-schema, it's available as the part of ajv package as shown here: https://github.com/epoberezkin/ajv#using-version-5. https://github.com/epoberezkin/ajv/issues/406. defaults keyword is only applied when it is used inside properties or items keyword (items should be array of schemas), with some exceptions. It's explained in the docs here: https://github.com/epoberezkin/ajv#assigning-defaults. In all cases when it is not applied it only serves informative purpose, same as description, for example.\nDefault on the top level is not be applied as there is no way to pass the value back with the existing api (the reference to the data would change and you cannot pass the changed reference back in JS).. @HenrikGr yes it does. You may post a minimal example to runkit.com, I can check what are you doing wrong.. your schema only validates the first item in the array, others can be absolutely anything. I don't think it is intentional.. default can be array, but it should be used on the level of the array, i.e. on the same level as items keyword and not inside items schema.. > What about add a property instanceof that could validate if an object is an instance of the right class.\nAjv implements JSON Schema specification, instanceof is not a part of it, so it should not be in this package.\nAlso, it would be a very fundamental change to Ajv to allow non-serialisable schemes. Currently, you cannot have a function/class in the schema.\n\nI know that ajv#keyword can do the trick, but it's really not developper friendly.\n\nAssuming you mean ajv-keywords package that implements instanceof keyword, what is not friendly about it? If it's the fact that you have to register the class and use its name rather than actual class constructor, it follows from the limitation that the schema must be serialisable. Or is it something else?\n. It can be done in ajv-keywords, so closing it here.\nThe api to pass keyword-specific options would be\n```javascript\nconst MyClass = require('./MyClass.js');\nconst Ajv = require('ajv');\nconst ajvKeywords = require('ajv-keywords');\nlet ajv = new Ajv;\najvKeywords(ajv, { // array of keywords is supported, a map of options can be supported too\n  typeof: true, // no options\n  instanceof: {\n    classes: {\n      'MyClass': MyClass\n    }\n  }\n});\najv.validate({instanceof: 'MyClass'}, new MyClass);\n```\nIt should be done for all keywords that support parameters, not just instanceof.. I'll have a look a bit later. @sondrele I'm a bit reluctant to switch from internal url to uri-js for several reasons:\n\nthe use case when URIs are used in $ref is not common.\nit may have some differences in behaviour compared to url that is difficult to identify/test.\nthe bundle becomes 4kb bigger.\n\nI think a better approach could be to allow passing uri-js (or any other library) as an option and specify in docs what methods it should support. What do you think?. @sondrele \n\nhave you considered looking into replacing the legacy functions from the node-url package, with the whatwg-url API instead?\n\nThat would make it more difficult to allow supporting all URIs, no?\n\nWhat's your stance on the API?\n\nI thought it would be just an option \"uri\" that should be an object compatible with the current \"legacy\" url package API (i.e. supply methods parse and resolve, where parse returns an object with properties (at least) protocol, href, host, path). If it is not supplied, \"url\" will be used.. @sirugh your comment is unrelated to the problem this PR addresses (support for full URI spec in refs rather than just URLs). Please submit a specific example that doesn\u2019t work in the browser for you together with how you load ajv. At the very least I expect it to work ok with the provided bundle, so maybe your issue can be addressed with the changes in how you build it?. Are you using ajv as dependency of your project? or do you git clone ajv and then npm install?\nAre you loading from npm directly or is it npm in your network?\nAlso possibly some compatibility issue - Please re-submit it using compatibility template: https://github.com/epoberezkin/ajv/blob/master/CONTRIBUTING.md#browser-and-compatibility-issues. https://github.com/npm/npm/issues/18036. You need JSON loader in webpack configuration.. @danny-andrews given that Ajv is not limited to validating JSON data making defaults etc. mutating is a conscious decision.\nIf you have JSON data all that is required to preserve the original in your code is this:\njavascript\nlet dataCopy = JSON.parse(JSON.stringify(data));\nconst valid = ajv.validate(schema, dataCopy);\nReturning changed data as a separate object requires deep-cloning of the data-structure that is not possible in JavaScript in general case, without restricting what this data can be.. In general case, errorMessage keyword converts multiple errors into a single error with a defined message, so in parameters in contains the array of original errors that were replaced.. yes, params can be different depending on keyword, it's all documented here and in case of errorMesage it's always the array of original errors.\nYou can replace errors per property rather than per keyword: https://github.com/epoberezkin/ajv-errors#messages-for-properties-and-items. see https://github.com/epoberezkin/ajv/issues/406. @sberan It's a duplicate of https://github.com/epoberezkin/ajv/issues/129 and many other similar issues.\nPlease review them and if you have something to add, comment there.\nAlso see FAQ.. @sberan I will review, thank you. @sberan Thank you!\nI don't think it is going to work as expected (that is to only remove additional properties when otherwise current schema succeeds). In your code additional properties are removed when all other properties succeed, but it doesn't check that other keywords succeed, e.g. required or minProperties etc.\nAlso the changes in tests are difficult to follow. I suggest not touching the existing tests and instead add other tests that validate that without this new option even if schema fails additional props are removed anyway and with this option they don't.\nRegarding the fix for 'failing' option - I still don't understand the issue. Maybe it's better to make it a separate PR or at least make a separate test case that demonstrates the issue. . You can define custom formats and custom keywords, that should allow to express any validation requirements. Not sure which coercions you need, but custom keywords allow to modify validated data.. See https://github.com/epoberezkin/ajv-keywords#dynamicdefaults\nI'm not sure I understand the problem with applying assertions after the defaults are inserted. If the data is not there then these assertions will not be applied, so the validation will pass. The only exception is required, but I would say if there can be dynamic default value, then there is no reason to include this field in required - strictly speaking it is not required.. Changing the execution order would introduce ambiguity. Type is only checked once for all keywords for which type applies (for performance reasons). So at least it is not trivial.\nGenerating multiple schemas from a single template can be addressed in other ways - programmatic, string templates, $ref (depending on the environment your referenced schema for the same id can be different). https://github.com/epoberezkin/ajv/issues/398 is also about it.\nRegarding formats, you can define formats that apply to numbers - I think it should help.. Could you please provide all the details listed in change proposal questions?. see #558. This particular regular expression is only used during the schema compilation. The schema is not supplied by users, so this regex will only be used once (assuming you compile your schemas once). Also, the generated code never has more than one space so the actual match will never be that slow.\nCould you demonstrate the actual schema that is very slow to compile because of this regular expression (i.e. when removing it would make schema compilation noticeably faster)?. @cristianstaicu thank you\nThe compilation time in this particular case does not change if I remove the regex you mention (and couple of others). So it needs to be better investigated. It may be the case that there are some other regular expression used during schema compilation.. Could you please submit the working code sample to runkit.com, post the link here and the output that you propose it should generate instead of what it currently does.. I was really hoping for some small example, not 4k+ lines :)\nIf what you you want is to remove ALL errors for oneOf keywords, that can be done in the wrapper that you have for ajv library in your code. Something like this:\njavascript\nfunction validate(schema, data) {\n  const valid = ajv.validate(schema, data);\n  const errors = ajv.errors.filter(e => e.keyword != 'oneOf');\n  return {valid, errors};\n}\nIf you need some more advanced error processing it can be done with ajv-errors.\nOr do you want something else?. oneOf can fail in two cases:\n- none of the sub-schemas passes.\n- more than one sub-schema passes.\nThe second case will be differentiated by the implementation of #573.\nThe suggestion to remove error reports for oneOf in the first case cannot be accepted, as it breaks the general approach where a failing keyword generates an error.\nAdditional processing of errors to remove unnecessary errors (from the application perspective) can be made either in code or using ajv-errors once https://github.com/epoberezkin/ajv-errors/issues/16 is implemented.. duplicate of https://github.com/epoberezkin/ajv/issues/549\nPlease comment there.. You can use required inside anyOf or oneOf. Or to can use propertyNames together with minProperties. Please see available JSON schema keywords.. Works for me: https://runkit.com/esp/59b4fddfb7a64300128cbacf\nWhat is your req.body? Is it parsed?\nAlthough more likely you just swapped entry and entryField and the data is validated against entryField.. Ajv does not clone the original data in any way, see https://github.com/epoberezkin/ajv/issues/549 for the reasons. The rootData is always passed by the reference.\nIf your custom keywords modifies the data then all the keywords that execute after will have access to the modified data.\nYou can work around by passing both the original and the clone as two properties of the same object and either re-define your schemas accordingly or just construct the modified schema in code.\nData:\nJavaScript\n{\n  data: {/* your data */},\n  original: {/* the deep-clone of your data */}\n}\nSchema:\nJavaScript\n{\n  type: 'object',\n  properties: {\n    data: {/* your schema */}\n    original: {}\n  },\n  additionalProperties: false\n}. There is also Ajv.MissingRefError. Let's ask @substack first, if he is going to accept MIT license PR https://github.com/substack/jsonify/pull/7. In any case, I don't think that forking a packing and sticking a license file on it makes it any more licensed than downloading the movie and writing it onto a disk with some license label. Fast-stable-stringify is a possibility, but it needs to be checked that it supports shared references in objects.\nThere is no need to include JSON indeed, ajv uses global JSON anyway, it also makes a browser bundle 3k smaller. @substack, is there any way there could be json-stable-stringify with license and without JSON?. > I don't think you need json-stable-stringify in your library.\nThat's out of scope of this issue, but it's a bit more complex.\n\nwhat's your cache hit rate with this feature?\n\nThat would depend on how Ajv is used and on schemas structure. You can either use sacjs or your own cache implementation to calculate the statistics in your case.. @hansl @ahmadnassri I couldn't choose between using a tested code from json-stable-stringify that correctly handles circular dependencies and a faster alternative without bells and whistles. So I decided to replace with a fork of json-stable-stringify with bells and whistles removed. It's coming soon.. In 5.3.0. >> I don't think you need json-stable-stringify in your library.\n\nThat's out of scope of this issue, but it's a bit more complex.\n\n@hansl actually you already can disable caching by passing an option serialize: false and also passing a \"cache\" instance that does nothing on set/del and always returns undefined on get. I don't mind adding support for an option cache: false as well.\n. That is correct, type definition doesn't allow returning Thenable, it has to be updated.. Thank you!. https://github.com/epoberezkin/ajv#ref. This is discussed here: https://stackoverflow.com/questions/46365911/json-schema-ajv-not-const-error-message-is-obscure\n@jhohlfeld do you have a better idea how the error should be reported?. > but the really relevant information would be that const was not satisfied.\nconst IS satisfied, that's why not fails.. Add \"passingSchemas\" to params object in the error for \"oneOf\" keyword (array of passing schema indices, null if none pass). in 6.0.0-beta.0. added section to docs: https://github.com/epoberezkin/ajv#ref. Thank you!. Keywords are executed in the order that is defined here, grouped by type. Custom keywords are executed after all standard keywords, in the order they are added (for a given type).\nI considered implementing the ability to manage the execution order of keywords, but decided against it as it would make the result non-deterministic in some cases.\nWhen you need to define a specific execution order of your keywords you need to use \"allOf\". It also makes it more obvious when looking at the schema than it would have been if you managed the execution order via ajv instance:\njavascript\n{\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n      allOf: [\n        {trim: true},\n        {minLength: 3}\n      ]\n    }\n  }\n}. You can also explicitly use validateSchema method - see the docs. @E314c It is doable but it requires analysing previous errors, similarly to what ajv-errors is doing\nI think https://github.com/epoberezkin/ajv/pull/553 can be related?\nIn any case, you are right, it should be a plugin, not a core feature.. The problem with that is that to do it via option draft-4 meta-schema should be included in code that would increase bundle size by 4%. It could have been an optional dependency, but webpack doesn't support them and they only confuse everybody. So unless you have an idea how to achieve it without increasing the bundle size, I will not make this change.... in 6.0.0-beta.0. in 6.0.0-beta.0. in 6.0.0-beta.0. mentioned in docs, won't be part of Ajv, can be in a plugin. I think it\u2019s better to implement as a plugin.. Formats are optional part of the spec, their support is not required. 1. My interpretation that partial support is better than no support\n2. SHOULD according to https://tools.ietf.org/html/rfc2119 is the same as RECOMMENDED\n3. I actually considered, quite a few times to move all formats to a plugin\nWhy don\u2019t you make this plugin rather than trying to prove me wrong here?. @fboutin-pmc There is no need for it. I believe I've explained that I don't see it as the problem that this package itself should or would address. If you create a plugin that implements these formats, please submit a PR with the documentation change that mentions it.. uri-js supports parsing IRIs - does it validate at all? You don\u2019t need to validate in order to parse.. in 6.0.0-beta.0. I am not getting this result: https://runkit.com/esp/59e3a4ed5a955800128ae73d. @Techniv I'm not sure it's always the case.. resolved by uglify-js 3.1.5. Indeed. Better make it (?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60) with some comment why + the function time has to be fixed as well (in case you do PR).. in 6.0.0-beta.0. Please run in some Linux VM in node 4 (other versions don't run browser tests). Alternatively, when you make PR the tests will run in travis - you will see if they fail. Thank you.. Yes, you need to create a new instance in case you need different options - they are used during schema compilation and cannot be changed on the fly.. See #322 . Thank you. You're welcome. I will review/update/merge in a couple of days.. > I need to use JSON schema as the source to generate elasticsearch templates ... flatten a nested JSON schema and convert to SQL\nIt would be out of scope of this package. You can try though, using Ajv custom keywords, to create some schema that coverts a schema into ES template.\n\nI would rather not build a solution from scratch\n\nYou can use json-schema-traverse (that Ajv uses) to traverse the schema to convert it to any other document you need.. @maurelian did you try re-installing all node modules?. also, can you install the previous version: npm install ajv@5.2.3?. closing it, please re-open if the issue persists. You are passing a string instead of an object.. You need to convert a string you read from file to an object before passing to ajv. If you pass a string, ajv treats it as $id of some previously added schema.. fixed in 5.2.5. For schema in items keyword to apply to all items, the schema should be an object. In you case, when items is array it contains schemas for each item, only for the first one in this case.\nIt is all consistent with the specification.\nSee https://runkit.com/esp/59ef8a82daba97001201343b - the schema there works as you expect.. \"type\" cannot be \"Date\"\nsee https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#type. Time is represented as a string in JSON, you can use \u201cformat\u201d. Single pass in general case requires hashing objects to strings using stable-stringify and it is slower - I tried.\nIt is possible to prescan an array and choose hashing in case all values are the scalars of the same type.\nI don't mind to allow passing a function via uniqueItems option (passing false now disables uniqueItems entirely) - this function would accept an array and implement any other algorithm (comparing by hashing or by reference using a faster indexOf instead of the second loop). Or maybe compilation can be a bit more intelligent and use hash in case there it \"type\": \"number/string/boolean/null\" in the schema (but it would have to ignore items that are of different type to avoid extra errors in case allErrors: true is used).. > Where is that code?\nhttps://github.com/epoberezkin/ajv/blob/master/lib/dot/uniqueItems.jst#L17\n. Items can be objects, you can't sort them in general case - see my comment above. For same-type scalars you can use hash - it's more efficient than sorting (and you can't sort the original data).. in 6.0.0-beta.0. in 6.0.0-beta.2. in 6.0.0-beta.0. @nick121212 thank you.\nWorks correctly if recursive $ref is to the root ($ref: '#')\nCorrectly fails if error is before recursion. https://runkit.com/esp/59f6f7762227450012f05557. The workaround is to put the recursive async fragment in a separate schema file and use $ref: '#' as a recursive reference.. @nick121212 I don't think this works in general case as you are simply making all schemas async.\nThe problem is that you need to know whether the schema is sync or async before it is compiled. Currently in recursive cases resolveRef returns the name of the reference where the compiled schema will be once it's compiled, until then it is undefined so it is assumed to be sync.\nNo easy solution here, the support of async recursion (and I believe mutual recursion as well) requires substantial changes in compilation. The above workaround works though.. in 6.0.0-rc.0. @filipesilva Only the docs in ajv-merge-patch need updating, v5 option is not used there since the previous major version of ajv - so it's supported.. see https://github.com/epoberezkin/ajv-merge-patch/issues/7. You can create ajv instance without adding custom async keywords and formats - they will be ignored.\nI'll think whether an option async: false is a good idea.. The option name will be $async, to distinguish from the current async option that is removed in v6.\nValues:\n- undefined (default) - current behaviour but all schemas referenced from async schemas are compiled as async functions, unless they are inlined or it is known in advance that they are sync (that will fix #612)\n- true - all schemas are compiled to async functions, regardless of $async keyword\n- false - all schemas are compiled to sync functions and async formats and keywords are ignored. @brendo thank you, that's cool. I'll be merging it to the beta branch (the next major version). Maybe you could change the PR?. @meirotstein that's good, thank you.\nI suggest calling the option logger and support:\n- false to suppress all logging (but not exceptions)\n- a custom logger object with methods log, warn, error\nBy default Ajv would simply assign console to this option.\nThere should be tests for all cases for all existing calls to console.\nI don't think there is any logging during validation apart from $comment keyword but it is off by default and it has its own option that enables it.. in 5.4.0. in 6.0.0-beta.2. Endless recursion of macro keywords is not supported indeed. If the objective is to have more concise $refs you can:\n```javascript\najv.addSchema({\n  $id: 'interfaces.json',\n  definitions: {\n    tree: {\n      $id: '#tree'\n      type: \"array\",\n      items: {$ref: \"#branch\"}\n    },\n    branch: {\n      $id: '#branch',\n      allOf: [{$ref: \"#tree\"}]\n    }\n  }\n});\nconst validator = ajv.getSchema('interfaces.json#branch');\n```. I thought it was added in draft-07.... Validation is usually synchronous, it is not supposed to wait. You can define asynchronous schema with asynchronous custom keywords - see https://github.com/epoberezkin/ajv#asynchronous-validation. @kmahalingpur You can access the parent object, see the docs for custom keywords.. duplicate of https://github.com/epoberezkin/ajv/issues/608. in 5.4.0. Looks good. And drop \u201cadd\u201d? :). Also removeSchema and removeKeyword can be chained, although they aren\u2019t used too often.\n@pithu if you do the PR please update .d.ts file as well. I am now thinking whether renaming all methods (maybe leaving old names as aliases) is a good idea:\naddSchema -> schema\naddMetaSchema -> metaSchema\naddFormat -> format\naddKeyword -> keyword\ngetSchema -> get\nremoveSchema -> remove\n. in 5.5.0. Thank you for the idea. I will think about it.\nAs is, explicitly defining {\"default\": null} or {\"default\": {}} for these properties should solve this problem, so I need to think whether implying these defaults is a good idea.\nAnother approach is to pre-process the schema (e.g. with json-schema-traverse) and whenever default is missing add it based on the same criteria.. The issue of swagger / open api implementing some non-standard dialect of JSON Schema should be raised there.. url is validated with this regexp:  https://github.com/epoberezkin/ajv/blob/master/lib/compile/formats.js#L17\nIt can be slow indeed.\nPossible solution is to have a simplified version that is used by default (as for uri format) and only use this regexp in 'full' mode.. #907. Thank you. API section in readme needs to be updated as well and there are also several examples that could use chaining: https://github.com/epoberezkin/ajv#api. duplicate #526\nIt's already done in beta. \"properties/c\" is not a JSON schema keyword, it should be \"properties\": {\"c\":{}}. Not sure I understand. \"default\" assigns values to missing properties that are defined in \"properties\". And \"additional\" properties are those that are not defined (and not matched). Which property is both \"missing\" and \"additional\"? If you mean defined sub-properties inside additional properties than it already works.. No problem, thanks. @taojoe making additionalProperties default to false would deviate from JSON schema specification and I don't won't to create options that facilitate it. So writing additionalProperties: false is the correct approach as it makes it explicit to all people who will read your code... The alternative is to traverse your schema programmatically (with json-schema-traverse) and assign additionalProperties: false to all subschemas that don't have additionalProperties: true.. Yes, it should be changed - it's easy. Thanks for spotting @markchart.. https://runkit.com/esp/5a16d982e39bc60012123305. in 6.0.0-rc.0. \"uri\" works, not sure if \"url\" should\nhttps://runkit.com/esp/5a1bcba2b9cbb90011985dfb\n@gajus?. Or you can re-define \"url\" format as you did in your code.. glitch. The error you should get is:\nError: schema is invalid: data.required[0] should be string\nSee https://runkit.com/esp/5a1ffa008722a00012a409db\nYou can only get some other error if you use api incorrectly of if you disable schema validation against meta-schema. Please open another issue with all info if that doesn't help.. So this issue should be submitted there then.. I don't think anything needs to be done for this:\n1. The hash of valid types is available at ajv.RULES.types.\n2. If you use an incorrect type the schema validation against meta-schema will fail (that is always done by default).\n3. Composing schemas is out of scope for ajv.\nYou may want to use something like ajv-schema-builder.\n. You can compare the copy of data before validation with the data after validation.. Possibly, need to think about it.\nIf it is added, it should be more generic and be set in case data updated in any way (there are 3 options that cause data change).. @Delagen could you please remove unnecessary whitespace and line order changes so it's easier to see what has really changed?. @blakeembrey could you please comment on \"Object\" vs \"object\" and \"String\" vs \"string\"?. @blakeembrey @Delagen thank you. @Delagen see https://github.com/epoberezkin/ajv/blob/master/FAQ.md#generating-schemas-with-resolved-references-ref. What\u2019s the use case?. Ok then, it doesn't need to be a new option I think, it can be just a function hook passed to allErrors option.. Also, if somebody implements it, it should only call the hook on the errors that without allErrors option would terminate the validation (I.e. not inside compound keywords like \u201cif\u201d, \u201cnot\u201d etc.).. >  I don't actually understand why \"$async\" is a schema\nkeyword (custom to ajv) at all. Why isn't $async just an option\nto Ajv or ajv.compile?\nJust one of possible design decisions, seems to be the most flexible. If you make it an instance option, then all schemas would be compiled to async functions. If you make it an option of compile (or actually introduce any compilation options) it becomes much more difficult to cache schemas as options should become part of the cache key - there is an abandoned branch with this idea.\nDocs say that all referenced schemas should have their own $async: true if they are asynchronous. The reason why it works for a single reference (and it probably shouldn\u2019t) is because ref without refs is inlined by default and the keyword is processed in the context of async function. If you use option inlineRefs: false I expect the compilation to fail.\nThe option $async: true to enforce async mode on all schemas was recently proposed, I decided not to implement it.\nGiven that asynchronous validation is very unlikely to be ever standardised I think it\u2019s not a bad thing to require $async: true on all schemas in the chain - it makes it explicit and expected.. > The more I think about this, the more problematic \"$async\" seems.\nThat looks similar to complaining about the need to use \"async\" keyword together with JS function when it uses \"await\". Couldn't JavaScript figure out without it that the function is \"async\"? Probably it could, but because this function behaves very differently from normal functions it is better to have them explicitly marked as something else. My arguments for using this approach were similar - async schemas behave quite differently so they should be marked both to simplify their compilation and to make it clear to the users. And given that $ref is very similar to a function call, if you $ref to some subschema that uses async keywords that subschema should be marked as $async.\n\nThe only way to avert the crash is to put \"$async\": true into\nnearly every property, because someone might $ref to it in\nthe future.\n\nOnly in those that use async keywords really.\n\nThat seems a bit awkward to me, considering that \"$async\"\nisn't doing any work with respect to the data\n\nThere are standard keywords that have nothing to do with the data and instead define how the schema should be processed - $schema, $id, $ref. The idea for $async was similar.\nSo I am afraid I do not plan to change this approach.. Do you want to validate the schema against meta-schema?. Schemas are validated by default when they are first used, you don\u2019t need to do anything special for it. In some rare cases you may want to use method validateSchema. See readme.. While validating against schema \"A\" property \"b\" is removed so the validation against \"B\" fails.\nSee https://github.com/epoberezkin/ajv/blob/master/FAQ.md#additional-properties-inside-compound-keywords-anyof-oneof-etc. @fpenim The result is correct.\nYou need to add required: ['countryOfBirth'] to the subschema in \u201cif\u201d keyword for the schema to work as you expect. Without it, \u201cif\u201d passes validation when the property \u201ccountryOfBirth\u201d is absent and the subschema in \u201cthen\u201d requires that \u201ccityOfBirth\u201d is present.\n. Also, you could use const: 'England' instead of pattern.. There is an option multipleOfPrecision that does a similar thing, see options.. @manahga some algorithm similar to yours can be a better option still, if it can be simplified. The problem with the current approach is that N should be almost empirically defined. See the comment in #84 that was also added today (strangely).. @gpietro Can you please simplify the schema so it's as small as possible while still having the issue? In general, recursive schemas for deep data structures are fully supported, but this schema would have the same issue as yours and it doesn't mean much:\njson\n{\"$ref\": \"#\"}. What makes you think it\u2019s not supported? FHIR schemas have a problem with IDs and refs, it\u2019s been discussed in Gitter.. > try to make them compatible with ajv.\nI\u2019d say with JSON schema spec.\nI am going to close this issue as the problem you have now is different and I don\u2019t think it\u2019s in ajv. If you cannot resolve it please try to isolate the issue to a really small example (10-15 lines of schemas is usually enough) and submit another issue answering all questions in the issue template. Also please use as minimal JS code as possible.. @chharvey means that \u201ctype\u201d keyword in the same subschema as $ref is ignored - that\u2019s by the JSON Schema specification.\nThere is an option to override this and either to fail or to take it into account. Also, there is good chance that the spec will change in that regard and the keywords in the same schema will not be ignored.. > I did try with asyncCompile but it doesn't work.\nYou may file a separate issue on that, not sure why it didn't work, but some details would help.\n\naddSchema method doesn't compile the added schemas.\n\nThey are compiled when you call compile or getSchema method. Not compiling when addSchema is called allows to add them in any order (and also mutual recursion).\n\nThere is a way to precompile all my 150 schemas before validating and avoid Maximum call stack error?\n\nI doubt the Maximum call stack error is caused by the number of schemas, more likely it is caused by infinite recursion in schema definition for the same location in data instance: either you have schema that is similar to {$ref: '#'} or to schemas referencing each other at the same location in data.\nDo they all use each other so they cannot be compiled separately? Please make a minimal example to reproduce the issue.\nWhen you file an issue, can you please use the template?. Sorry, I don\u2019t understand the question. Do you mean to get the list of fields required by the schema?. Ajv compiles schema without the data, the data is just passed to a compiled validation function.\nIn general case it is not a trivial problem, as you would expect only \"required\" in valid schema branches taken into account.\nI believe what you want is \"annotation collection\" process from draft-07 spec applied to \"required\" keyword.\nAjv doesn't implement collection of annotations.\nAlso, \"required\" is not an annotation keyword, although I don't see why it can't be - you can submit this proposal to JSON Schema org.\n  . That would simply collect all required fields in the schema, disregarding whether a given subschema passed validation.\nIf that's what you want it can be done once by simply traversing the schema (e.g. with json-schema-traverse).\nWhat I believe you need would require a more complex mechanism to first take note and later to  exclude \"required\" properties from subschemas that failed validation because of some other reason.. I would do it all outside of Ajv.\n1. pre-process the schema using json-schema-traverse to collect all usages of \"required\" keyword together with the properties (& data paths) they apply to.\n2. run validation with allErrors: true option.\n3. get the \"required\" you need by excluding the properties for schema branches that fail validation (for any other reason than \"required\") from the list collected during pre-processing step.\nThe only problem here is that anyOf short-circuits and you won't know whether some branches of anyOf have errors (apart from required errors). So to allow that process there should be an option to prevent short-circuiting anyOf.\nProbably it's worth doing it by default but it can only be done in the next major version.. https://github.com/epoberezkin/ajv/issues/662. It still wouldn't work for anyOf/oneOf - ajv doesn't tell you which anyOf branches pass when the whole keyword passes, only which branches failed.... > there's a way to extract the active required-fields from the schema+data\nThere definitely is, it just requires a very different process from the one ajv uses for validation.\n  . This question cannot be answered in general case even for a defined schema and data (unless you only consider a subset of all possible JSON schemas).. oneOf can never short-circuit, if/then/else should always short-circuit, so they are not affected.. It's definitely incorrect to have errors as property of the function in async case - you may have multiple calls interleaving and they would write to the same errors property. It should be a local variable.\nTo debug further, I suggest trying to simplify and to mock the actual api with some function call so it can all be executed without server. If you submit the working code sample to runkit.com, I will have a look. If you can be certain that the promise rejects but validation still passes, there may be an issue.\nBtw, no need to have \"$async\": true in data.\n  . No problem. Apart from shared errors property I don't see other issues.. For async schema the compiled validation function returns a promise that has to be resolved. See working example here: https://runkit.com/esp/5a535de37742630014e25486\nAlso parentTerm is undefined where you use it.. travis glitch. @dcbrwn I invited you to https://github.com/epoberezkin/ajv-dist/invitations. @dcbrwn could you please push some tag in the branch so we both can see it working? And after that force-push its removal so it's not merged?\nAlso, shouldn't bower.json be updated to point to a new repo?. Actually I see something got published there... Or should it be just me publishing it to bower?. Thank you. Merged. Let's see how it works :). @dcbrwn it seems like it doesn't remove files that should not be there.... The current dist doesn't have regenerator/nodent, and ajv-dist does.\nI think the dist folder should be removed after cloning from ajv-dist before copying the build result over, as otherwise the files removed in build remain there.. Probably just needs rm -rf ../ajv-dist/dist && mkdir ../ajv-dist/dist instead of mkdir -p ../ajv-dist/dist. Neither file name, nor line number is available - the schema is JSON object. It is possible to report schema $id in the error message though (or \"id\" based on schemaId option).. That is the intended behaviour.\nAs documented, by default ajv uses JavaScript property access notation. It includes dot-notation and square brackets notation; the latter is used in this case. Dot-notation is only used for properties that are both valid identifiers/reserved keywords and are defined in the schema. As this property is not defined in the schema it is reported as \"['additional']\" and not as \".additional\", to avoid the cost of validation-time check of its validity for dot-notation.\nIf you need to parse property names in dataPath, it is better to use the option jsonPointers: true, because JS property access notation is difficult to parse, in general case.. That\u2019s a different issue - there was a PR that made the error message for \u201crequired\u201d dependent on errorDataPath option, the current message for additionalProperties is for normal error reporting - the error relates to the object, not to the property. I will accept a similar PR for this error message as well.\nerrorDataPath option was added for backward compatibility with the original incorrect but convenient error reporting. I am going to mark this option as deprecated.. It works for me in 6.x (including 6.10) in MacOS, it always worked in 6.x on Travis that runs Linux, it also works for users that use Windows. There must be something specific/non-standard in your environment that prevents it from working.\nWhat is the error message you receive?\nOn what platform do you run Node.js?\nWas node.js installed using nvm or in some other way?\nDoes the issue happen if you install node.js with nvm?\nWhat is the minimal code that allows to reproduce the issue? (e.g. would it happen with require('ajv')() - that already invokes Function constructor).. > Unexpected token function\nIt most likely refers to async functions not supported in node 6. Do you use async schema?\nimport Ajv from \"ajv\";\nconst ajv = new Ajv();\najv.compile(schema);\nIf it works without the last line, it has nothing to do with function constructor support, as I wrote it can be that your schema is async.\nI am closing the issue, if you can't solve please re-submit with ALL info from the template.. @lehni well spotted the test was missing for the other change. The tests should be somewhere here https://github.com/epoberezkin/ajv/blob/797dfc8c2b0f51aaa405342916cccb5962dd5f21/spec/errors.spec.js#L45 and here https://github.com/epoberezkin/ajv/blob/797dfc8c2b0f51aaa405342916cccb5962dd5f21/spec/errors.spec.js#L145 (for \"required\" errors).\nAt the moment it tests only dataPaths, should also check messages.. @lehni thank you. I've merged. Maybe just \"is an additional property\"?. Please submit all info as requested by the issue template - a minimal working code sample that fails.. IE11 does not support async functions: https://caniuse.com/#search=async%20function\nYou need to transpile.. Same as #673. It's not related to babel or webpack. Please see the docs on how to transpile compiled async functions - it's ajv-async package.. What is a custom loader in ajv-async? 1.0 should be ok.. Am I right that you are trying to avoid always loading it?. If it's a nodent issue it makes sense to file there.. You can use propertyNames together with additionalProperties and properties.. Thank you!. @markchart I think this issue should be submitted to nodent. You can provide the author a non-transpiled code in both cases (it can be obtained from sourceCode property of validate function) and ask whether an issue of non-linear scaling in node.js 4.x can be addresses.\nWhat are the results in node 6.x? Given that 4.x is in maintenance rather than active support, and it won't be supported at all from April, it may be better to migrate to 6/8.x. Half of the size are bundles that have to be in npm for cdnjs to work... Maybe with https://github.com/epoberezkin/ajv/pull/669 it can be changed.. Yes, it's doable, within the existing limitations.\nThe problem here is that the defaults in data should be cloned and there is no generic clone mechanism in JS (unlike schema that should be serialisable, data can be any JS structure).\nWhat are you thoughts on that?\nProbably default behaviour should be just using the reference, but then it's not consistent how defaults are used in the schema.... $data points to some location in the data instance, as in your example. Ajv does not require that data itself is JSON compatible (it only requires it for schemas); there are use cases when non-serialisable data structures are validated (promises, etc.), e.g. with custom keywords.. I think it should do a simple deep-clone by default, based on useDefaults option (it has a value that would make it use the reference, mainly for backward compatibility, but could also be useful in this case). The current JSON.parse(JSON.stringify) used to clone defaults from the schema is too slow for validation time, so it would need to be replaced with some deep-clone implementation.. > a simple clone\nThat's ok, but JSON.parse(JSON.stringify) is not acceptable for validation time, some small/fast deep-clone library, ideally supporting the same as current deep-equal mechanism (i.e. Data, RegExp), should be used.\n\nsome pointers\n\ncheck out https://github.com/epoberezkin/ajv/blob/master/lib/dot/defaults.def and any simple keyword that supports $data, e.g. min/maxItems.\n\nin my original example, would \"default\": { \"$data\": \"1/defaultNumber\" } work?\n\nNo. Think about the schema as a function (which is what ajv is doing). In your case you pass data.numbers.XYZ to this function as a parameter. I think allowing full JSON pointer to the root data of the current validation is fine, but also allowing to traverse up through the schema root to any arbitrary parents introduces extra complexity. Also given that the subschema can be used in very different contexts (e.g. to validate not only data.numbers.XYZ but also data.something_else.one_more_level.ABC), it also introduces too much ambiguity that I'm not the fan of. Imagine seeing a relative reference and trying to understand where it leads in some complex cases - it won't be even possible to determine at compile time whether this location exists, because you don't know how high the root is - it would depend on the usage context. So you can either traverse up but until the current schema data root, or down from the current validation process root.. It would be 2/defaultNumber btw (or 3/ :). yes, 3/defaultNumber: from data.numbers.XYZ.defaultValue to data is 3 steps up. It's quite simple and already quite easy to get lost...\n. Sorry, not sure if I understand. Do you want to assign a default value (when some property is missing) from another property?. You can make a custom keyword for it.. @jthomerson It should be \u201cconst\u201d: https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#const. It was originally proposed as \u201cconstant\u201d and previously implemented this way though, so I understand where the confusion can be coming from.... @mnpenner It is \u201cconst\u201d in draft-07 and it is available by default. Detecting unknown keywords #781 would help :). You can define a custom keyword. You cannot use one string as a regular expression for another, in general case, but the logic is trivial here, so defining a keyword \"startsFrom\" should be easy (and custom keywords have built in $data support - see the docs).. That is by design. No keywords are triggered for non-existing properties. Default is an exception and it's not a validation keyword.. The workaround is to use the same pattern as used for dynamicDefaults in ajv-keywords - define it on the object level.. The spec: http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.5.4\nSo if property doesn't exist in the data, no schema gets applied to it.\nDefault is an annotation keyword and the spec doesn't require that its value is added to the data: http://json-schema.org/latest/json-schema-validation.html#rfc.section.10.2\nAjv does not allow defining keywords with the behaviour similar to \"default\".. There is no way to disable any standard JSON schema keywords. It won't be provided as part of this library, I believe it's not a correct pattern. Instead, you could have multiple schemas (possibly, created programmatically, e.g., using templates), one for each validation scenario.. What can be provided in the future though is #398 that would help with expressing the schema generation logic in a declarative way.. The default behaviour for $ref is to ignore sibling properties. That, by the way, can change in the next version of the spec.\nDo you want $comment to be ignored even if extendRef is set to \"fail\"?. @aubergene It'll be just a wrapper, correct?. duplicate of https://github.com/epoberezkin/ajv/issues/337. no problem at all. closes #668 . you may be using ajv API incorrectly.. oneOf means that only one sub-schema is valid, in your case - both are valid.. TLDR: please read the JSON schema spec and/or KEYWORDS.md file in this repo.\nThey are both valid because neither schema requires or prohibits the presence of any property. Specifically, the data is valid against the first schema, because \u201ca\u201d is present and matches the schema for \u201ca\u201d. The data is valid against the second schema, because there is no property \u201cb\u201d.\nThat\u2019s a very common misconception to think that JSON schema describes the structure the data should have to be valid, while it just defines conditions that make data invalid if they are not met. In this way \u201cproperties\u201d keyword neither requires any property to be present, nor prohibits the presence of any properties, it just defines conditions that a property should satisfy IN CASE it is present. Also, it does not require any type of the data, any non-object will pass validation with \u201cproperties\u201d keyword (see #731 for such issue). When such mistakes happen in the context of oneOf, they are easily noticeable, as the validation correctly,  but unexpectedly, fails. But without oneOf such mistakes simply lead to false positive results, that is probably one of the biggest problems of JSON schema in general, as many people start using it relying on their expectations about how it should work without looking at the spec/tutorials... /rant :)\nIf you have a specific example that you believe is not working according to the spec, please post it here but it would help if you checked the spec as well.. As a note about data passing validation with some other validators. The fact that the validation results differ between validators means just that - that the results are different. It obviously means that one of (oneOf:) validators is violating the spec (unless you\u2019re in the grey zone of format validation). But it does not mean that the one that fails is incorrect. From my experience, the opposite is much more likely - i.e. the one that passes is incorrect, because the whole purpose of the validation is to recognise certain data as invalid.\nThe simplest possible validator would just always return \u201cvalid\u201d and it is likely to be correct most of the time (at least, server-side), but such validator would be useless.. > If JSON Schema states that value can be either numeric or null, and original value is null, it should stay null.\nThat is already the case. Schema {\"type\": [\"number\", \"null\"]} does not coerce null to 0. Submit your example, current and the proposed result.\n\nFor compatibility sake this behaviour probably should be configureable.\n\nI disagree.. No worries, I\u2019m glad it\u2019s sorted.. I am confused. All these cases work for me (https://runkit.com/esp/5a7761e3d1a7fd0012e44ede). What exactly is not working as you expect?. ... and the skipped test passes.. Yes, if integer wasn\u2019t separately tested before it makes sense to have them - let\u2019s uskip & merge.\nThank you . It\u2019s a bit more complex than that as ajv doesn\u2019t need to know which schema paths were matched (and it indeed doesn\u2019t keep track of that). For oneOf for example it only tracks that some subschema succeeded and if more than one succeeded it fails straight away. You could use custom error processing with ajv-errors (to consolidate messages) and then on top of that create your own custom keyword that would look whether the current subschema passed. That\u2019s probably clunky but it would do what you need. I think there could indeed be a property defined on validate function to collect JSON pointers of subschemas that contributed to the final success, but there will be some tricky things to pass this info between referenced subschemas that may be compiled to separate functions.\nAlso, there is still an open issue with some inconsistent reporting of schema paths when referenced subschemas are used - that probably needs to be improved as well.\nSo, I like the idea, but it\u2019s not trivial.. closing this issue, it is better represented in https://github.com/epoberezkin/ajv/issues/902. Cool, thanks. That is correct. Regexp with numbers may work, not sure, it wasn\u2019t tested.. I don't understand. I think you can write a schema to validate any JSON patch, which is also JSON. Why it should require any changes in ajv?. That's definitely out of scope of this package, should be a separate one :) Closing it then.. I will close it if you don't mind.... You specifically instructed ajv to collect all possible errors (allErrors: true), so that's exactly what it does. There is no easy generic way to decide which branch is \"closer\" to being valid, so ajv validates data against all branches and includes all errors. You may have a smaller number of errors without allErrors: true, but because ajv still doesn't know which branch is less invalid it would include errors from all branches of at least one \"anyOf\".\nTo have a smaller number of more useful errors you need to specifically tell ajv which branch it should and which branch it shouldn't try to validate against. draft-07 introduced conditional if/then/else to make it possible. So instead of using:\njson\n{\n  \"anyOf\": [\n    {\"$ref\": \"#/definitions/model1\"},\n    {\"$ref\": \"#/definitions/model2\"}\n  ]\n}\nyou could use something like\njson\n{\n  \"properties\": {\"type\": {\"enum\": [\"model1\", \"model2\"]}},\n  \"allOf\": [\n    {\n      \"if\": {\"properties\": {\"type\": {\"const\": \"model1\"}}},\n      \"then\": {\"$ref\": \"#/definitions/model1\"},\n    },\n    {\n      \"if\": {\"properties\": {\"type\": {\"const\": \"model2\"}}},\n      \"then\": {\"$ref\": \"#/definitions/model2\"},\n    }\n  ]\n}\nYou obviously can do it without allOf, using only if/then/else, but if you have many possible types the above way seems better to me - it allows to avoid deep nesting of if/then/else.\nEDIT: On another hand, with if/then/else only, without allOf, it can be faster, as in the schema above would have to compare \"type\" property with every possible type value, while with if/then/else it would stop as soon as the first one matches...\njson\n{\n  \"if\": {\"properties\": {\"type\": {\"const\": \"model1\"}}},\n  \"then\": {\"$ref\": \"#/definitions/model1\"},\n  \"else\": {\n    \"if\": {\"properties\": {\"type\": {\"const\": \"model2\"}}},\n    \"then\": {\"$ref\": \"#/definitions/model2\"},\n    \"else\": false\n  }\n}. If the problem is indeed stack size because of deeply nested recursive data (it should be really deep for it to be a problem though), you can consider using async schemas - it should help with the stack size (negatively affecting performance though. But as I understood, your problem is the large size of error array.\nYou can also try not using verbose option - it also increases the size of error object (data and schema can be large strings that are copied by value, not by reference).. There is a proposal for select that makes above even more concise. It depends on $data proposal, so it's unlikely that select makes into the next draft. select is available in ajv-keywords. With select you can:\njson\n{\n  \"select\": {\"$data\": \"0/type\"},\n  \"selectCases\": {\n    \"model1\": { \"$ref\": \"#/definitions/model1\" },\n    \"model2\": { \"$ref\": \"#/definitions/model2\" }\n  },\n  \"selectDefault\": false\n}\nBut bear in mind that it has some limitations (they aren't critical though - see issues there).. > what spec is if/then in? is that draft 7?\nyes\n\nallErrors: false will mean per object we return after the first error?\n\nyes, if this error means failure. That's the default.\n\nand is that the first error of each of anyOf\n\neach branch of anyOf will stop validating on the first error in each branch, but all branches must be validated as some branch may pass. All errors that were collected will be reported. \"anyOf\" always stops validating on the first passing branch. \"allOf\" stops validating on the first failing branch, but in allErrors mode it will always validate against all branches. \"oneOf\" stops validating on the second passing branch, otherwise it will always validate against all branches (as only one branch allowed to be valid) - that's why anyOf generally better than oneOf.. In all cases without allErrors it will stop as early as possible and with allErrors collect as many errors as possible.. Try select too - I'm sure it'll get into the spec some day :) See above if you missed. Actually, the more people use it and support it in JSON-Schema-org the more likely it to become the standard.. travis glitch. If you want to enforce a specific order of keywords execution, you need to use \"allOf\" keyword. In the same schema the standard keywords are always executed before custom keywords; making it configurable would introduce a lot of ambiguity.\nSo instead of your schema:\njson\n{ \"type\": \"string\", \"format\": \"email\", \"lowercase\": true, \"trim\": true }\nyou need:\njson\n{\n  \"type\": \"string\",\n  \"allOf\": [\n    {\"lowercase\": true, \"trim\": true},\n    {\"format\": \"email\"}\n  ]\n}\nI think it could be useful for others to create one keyword that allows to define all string modifications and either make a separate package or add it to ajv-keywords, so you could:\njson\n{\n  \"type\": \"string\",\n  \"allOf\": [\n    {\"text\": [\"lowercase\", \"trim\"]},\n    {\"format\": \"email\"}\n  ]\n}\n. nope, but it should just compile into a series of calls to pre-defined functions (depending on the list of modification, or make it inline to have it faster).. Also, when a keyword modifies data it needs modifying: true in its definition (or something like it, please check the docs), it won't work in all cases otherwise.. You can also use valid: true in the definition, it makes the compiled code a bit more efficient (I think) and you don't need to return anything.. Did you see $data in docs? I think this is what you\u2019re looking for. Yes, you can have indeed use your schema as part of a bigger schema and pass your data also wrapped. I would use other property names, something like \"data\" and \"params\", but the principle is the same. Then you can refer to values in params from the part of your schema in data with $data keyword.\nA similar problem is described in https://github.com/epoberezkin/ajv/issues/398. requried: {$data: 'json-pointer to the array of required properties}\nOr use custom keywords.. The error shows the problem - you have an invalid regular expression in your schema as a key in patternProperties.. > why does JSON Schema Lint, which is using ajv ^5.0.0 accept this schema\nno idea, I would ask them. Maybe they've disabled the validation of the schema?. Most likely, the issue title explains the problem. What is the output of npm ls? Try removing package-lock.json and reinstalling node_modules.. In your output the error is in the chain:\n@angular/cli -> cache-loader -> schema-utils@0.4.5 -> ajv-keywords\nschema-utils@0.4.5 depends on ajv@^6.1.0, I don't know why it was not installed (it's not in the output of npm ls).\nDid you try removing everything and re-installing?\nWhich version of node.js you are using?\nDoes it change if you try older/newer version of node.js?. git clone ... && npm install works ok for me - it doesn't show the error above.\nIf an issue happens during ng new NewProject I think it should be reported to @angular/cli.\nClosing it here.. @eholland7080 the correct way to resolve it is to either upgrade ajv to 6.x or downgrade ajv-keywords to 2.x, as otherwise they are not fully compatible (even if they can work in some cases). I wonder what tool has ajv 5.x and ajv-keywords 3.x in its dependencies. Can it be caused by eslint still using 5.x and webpack using 6.x (and ajv-keywords 3.x)? If so, it's definitely npm issue, although can be fixed by upgrading eslint.... See the second part of the answer in https://github.com/eslint/eslint/pull/9856#issuecomment-377694098\nAccording to it it\u2019s an npm bug.. @eholland7080 is it a blocking issue? Can't you just use some command line parameter to ignore the message? I'm not sure npm is going to fix it any time soon.... See https://github.com/json-schema-org/JSON-Schema-Test-Suite/issues/215#issuecomment-367418604\nClosing it, as flags should not be supported\nThere is a custom keyword regexp in ajv-keywords that supports flags.. allErrors option instructs ajv to collect all possible errors. To do it ajv will not short-circuit anything. Just don't use this option if you want to terminate as early as possible.. breakOnError is always equal to !allErrors.. > Normally it looks like I need to check [1, 2, 3] against {enum: [1, 2, 3, 4, 5] }.\nNo, it is not correct. enum check for an individual value, not for array items.\nIf you need to check all items you need: \njson\n{\"items\": {\"enum\": [1, 2, 3, 4, 5]}}\n{ contains: {enum: [1, 2, 3, 4, 5] }} checks that at least one item is from that list, it won't check all.\nPlease see JSON schema docs or https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md. Yes, that\u2019s ok, makes error reporting more consistent. Implementation should be quite straightforward, see the PR that closed the other issue.. Thank you @UlisesTJ.\nPlease feel free to translate, but it shouldn't be a part of this repository as it won't be possible to keep it in sync. I would suggest to make it clear which version is translated by probably using the same tags in a separate repo.. An interesting use case. You may be able to achieve it by re-defining (i.e. remove/addKeyword) \u201cdefault\u201d as a custom keyword that removes the property/item in case the value is the same (and useDefault option will be off, of course).. @wla80 thank you for the PR.\nThis change makes it incorrect for both paragraphs, I am afraid.\nnull is the value of errors property, not a property.\nAlso \u201cunless\u201d is \u201cif not\u201d, not \u201cif\u201d.... Your first revision just highlights that my wording is not clear, I'll read the last version.\nThank you!. @blakeembrey thank you. Does it mean that should be a major version change?. Released. Firstly I would make sure that it\u2019s is not schema compilation time.\nIf you have a large schema it may be easier to profile if you could break it across multiple files and compile with inlineRefs: false (to make sure that each schema file is compiled into a separate function), although because schema function name is always the same (\u201cvalidate\u201d) you would still need to figure out what\u2019s what.\nYou could try benchmarking schemas separately and also disabling formats - as they use regular expressions they can be slow on some strings.. going to close it, not sure what else can be done. Please reduce the schema that you have different results compared with the other tool to under 20 lines and submit a complete code sample to runkit.com - I would then be able to review.. Closing it until clarified. Please resubmit with smaller schema and more information about the error you receive.. Ok, so the issue is not with async, it\u2019s with $data. It can potentially affect other keywords that support $data.. https://runkit.com/esp/5a97205fdd0d500012e22a9e\nThis is not a new issue though, same in 5.x.x.. There may have been some delay, cdnjs picks up npm updates automatically.. The schema in \"then\" is applied because the data is valid against the schema in \"if\", so this is the correct behaviour.. You don't need to put if/then inside allOf btw.. because property \"code\" is not required by the schema, so an empty object is valid.. an empty object is valid against the schema in \"if\", so \"then\" is applied and it is invalid against \"then\". you need required: 'code' in \"if\". That's a 6.0.0 issue caused by https://github.com/epoberezkin/ajv/commit/5e17f9b4eed702e016d8b810e19a40852104b342 (https://github.com/epoberezkin/ajv/issues/608).\nThe workaround is to use 5.x.x version.\nSimplified example: https://runkit.com/esp/5a9721ab8510ec00129206d5. The solution is to use Object.prototype.hasOwnProperty.call(itemIndices, item) or typeof itemIndices[item] == 'number' instead of itemIndices[item] !== undefined (whatever is faster - TBC)  here: https://github.com/epoberezkin/ajv/blob/master/lib/dot/uniqueItems.jst#L37 (as this hash does have toString property...)\n@domoritz if you make a PR, please add the failing test to https://github.com/epoberezkin/ajv/blob/master/spec/tests/rules/uniqueItems.json. @domoritz please let me know if you\u2019re interested to fix it, I can then explain the scenarios that should be supported. It\u2019s seems to me a bit bigger problem than #725 introduced by that performance optimisation of uniqueItems. I guess heterogenous arrays aren\u2019t that common - that\u2019s why nobody caught it.. That is correct result, because to level property \u201cperson\u201d is not required by the schema. Also, not sure why do you need property \u201cschema\u201d, depending on what you pass to ajv, it may not work. The results are according to the spec because the first subschema does not have \u201ctype\u201d and will pass on any non-object value (including any Boolean), so your data is valid against both schemas.\nIt\u2019s essentially a duplicate of https://github.com/epoberezkin/ajv/issues/692. Sorry, npm provides a better list of packages that depend on ajv. Only de-facto standard libraries or ajv plugins need to be added to the docs.. You can control execution order using allOf. That\u2019s an expected behaviour - oneOf has to validate against all schemas (to make sure only one passes), so it will coerce as neede to pass. You need to use anyOf in this case (and in all cases when the schemas are mutually exclusive).. You expect too much from it. It would try all types if you use type: ['number', 'string']; the way you have it, at the point when it validates the first type it doesn't know about the existence of another type in another branch.. Correct, they are not \"arrays\". typeof is \"object\" for all arrays, but the problem is that Array.isArray(new Float64Array(3)) is false...\nA custom keyword can be used to validate them.. Just to clarify, you want generated code to be typescript?. Probably not.... Looks like it won\u2019t hurt... cc @blakeembrey. Your schema is only supposed to validate first item - please see the JSON schema spec. See JSON Schema spec and also RFC you mention. \u201curi\u201d - is a full uri. Relative uri can be validated with the format \u201curi-reference\u201d. http://json-schema.org/latest/json-schema-validation.html#rfc.section.7.3.5. I don't think I can reproduce, I think it was fixed. Can you try to re-install everything please - you maybe getting an old version from somewhere or from some dependency. After re-installing, try npm ls to see if something uses an old version. Also, try reproducing on a clean installation of ajv - will it happen too?. So it doesn't seem like an Ajv issue to me, correct?. you read data into schema and vice versa. @aschmach \nhttps://github.com/epoberezkin/ajv/issues/740#issuecomment-375233687. \"example\" is not a standard JSON schema keyword, so ajv treats it as if it were schema when it analyses \"id\"s. It could be addressed from another part of the schema with {\"$ref\": \"#/example\"}.\nThere is a standard keyword \"examples\": http://json-schema.org/latest/json-schema-validation.html#rfc.section.10.4\nSo it is not a bug.. Changing the way the standard keywords work is a wrong approach, in the most cases. A better solution is to use a custom keyword, so your transformations are explicit. See https://github.com/epoberezkin/ajv/issues/705. Almost a duplicate of https://github.com/epoberezkin/ajv/issues/705. The bug is here: https://github.com/epoberezkin/ajv/blob/master/lib/dot/properties.jst#L62\nI believe it needs === undefined in the end of the line to fix. Also it needs test if you do PR.. actually it only happens in this edge case, it's not the bug I thought it is... Also when property has boolean schema false and there is > 5 properties in the schema, ajv will incorrectly see this property as additional.. Added 6.3.0. The result is correct, schema doesn\u2019t require a specific type. See https://github.com/epoberezkin/ajv/blob/master/FAQ.md. \"ARRs\" != \"vsds\". It looks like yarn problem, npm installs it ok: https://travis-ci.org/epoberezkin/ajv/jobs/358014029. README indeed need updating. > Changed the TypeScript definition to use an ES module default export. This will require TypeScript consumers to change import Ajv = require('ajv') to import Ajx from 'ajv'.\nIt should be in the next major version then.. @debabrata100 please submit the issue either to uri-js or to react-js, if it's not submitted there already.. You can validate in the same way as you do in code, e.g. using ajv.validate. Also see ajv-keywords package - there are several keywords that accept schemas as their parameters.. duplicate of https://github.com/epoberezkin/ajv/issues/724\nalso see https://github.com/epoberezkin/ajv/blob/master/FAQ.md#using-json-schema. Please submit general JSON schema usage questions to StackOverflow, it is not ajv-specific question. Also see FAQ.md. Hi @willfarrell. It is almost the same as https://github.com/epoberezkin/ajv/issues/705,\nit\u2019s actually the third time this idea brought up.\nI think creating a custom keyword that would manage case and any other text transformations is better - it will be explicit in the schema rather than implicit. It would still be ignored by other validators, same as transformation via config, but at least it will be clear that something is ignored.. It exists: https://runkit.com/esp/5ad26dff34cee100126093f2. Interesting. What is the value of a non-existing property in Electron - still undefined I hope? The test to assign default is data.bar === undefined - does it return true?. Well, no idea then. You\u2019ll have to debug the compiled validation code to understand why it doesn\u2019t assign default - it helps if you beautify it (with processCode option).. Thank you. > The problem occurs when I try to minify my app assets in a reactjs env. The issue is described at create-react-app.\nThat is some other issue, as this package only uses ES5 - there is no ES6 code here. \nAlso please describe the actual problem.. Please check if the issue happens with 6.3.x - it used core url instead of uri-js. It may require changes in uri-js indeed.. @rolandjitsu I think it maybe an issue in create-react-app, I'd say it's worth reporting to them. Looks like they may be not picking it correctly from sub-dependencies.\nI am not certain whether exposing build artefacts via package.json is the correct solution, some other opinions on the issue could be helpful here. To me it seems that the place for them is your app config (or html head) and you should not be using them as part of build process, only if you use them separately.\nIn this way if you just load ajv.bundle.js as a separate script file in the browser, whether from the package, or from cdnjs, it will \"just work\", as it exposes globals to be compatible with the most module systems. So you should be able to simply use global Ajv and also use require('ajv') in the browser.\nIf you are including ajv in your bundle it doesn't seem correct to use a bundled file, you should use the file in package.json main property. If some build system can't work with it, the issue should be addressed in that build system rather than here.\n. Ajv will pick it up, no update is necessary - npm update should fix it for you (or reinstall). That's out of scope of this package. You can do it your code or create a separate package.. Thank you!. Assuming you are using Babel/webpack, you need to copy/include JSON files in your target folder/bundle. Ajv doesn\u2019t work with JSON strings, only with objects. It returns JS or JSON-pointers in errors. You can use json-source-map to map them to locations in JSON strings. Flags are not part of JSON schema spec, so supporting them in \u201cpattern\u201d keywords is not correct - the whole string should be treated as a pattern. You can use custom regexp keyword from ajv-keywords.. sorry, I don't understand. \"not\" fails when the subschema is valid, that means that ALL rules in that subschema are valid, not because something in it is failing. What additional information you expect to be provided?. I think it's out of scope of this package. Potentially this functionality can be added to ajv-errors package, I need to think about it. I just did post-validation error processing in the app code.. You could use anyOf/oneOf rather than trying to put it all in regex.. Possibly depending on passContext option value? Also, there may a few other places like that.. Yes, seems so... Will you make PR with a failing test and the fix?. See https://runkit.com/esp/5ae23d12d0320b001260cdb3\nYou must be running some old version that doesn't have if/then/else, as otherwise explicitly adding draft-07 meta-schema would throw an exception.\nAlso \"id\" should be \"$id\" in draft-07. I suspect it may be related to https://github.com/epoberezkin/ajv/issues/708, which is npm issue with sub-dependencies. Maybe using yarn will help?. Try this:\njavascript\nrequire('ajv');\nconsole.log(Object.keys(require.cache).filter(s => s.includes('ajv')))\nAfter that you can check the version of Ajv in package.json in the folder where you get it from.. Also, look at the full npm ls output - there can be two versions.... > I want to make, that if passContext is false ({{=_v}}( part) to send undefined as this\nEven though it changes the compiled code, I believe that this change doesn't change the validation behaviour and results. I may be wrong - could you make the test that would fail without this change? I only mean the changes in ref.jst, another thing I understand.. See https://github.com/garycourt/uri-js/issues/24#issuecomment-377670307 for the workaround.\nI don't see how it can be an issue that needs to be fixed here. The issue seems to be with the tooling that does minification, or, less likely, with uri-js.. Duplicate of #749 - please add comments there instead of creating a new issue.. See https://github.com/epoberezkin/ajv#assigning-defaults. You should be able to manage it with options \"schemaId\" and \"logger\" - see https://github.com/epoberezkin/ajv#options. schemaId: auto would avoid the warning, you're never supposed to have both.. ajv.validate will throw when the schema itself is invalid. It will return false when the data is invalid.. The justification is the most common use case - server side validation with a set of static schemas. Invalid schemas should prevent application from starting - in the most common case you don't need to catch this exception.. It is related to ajv-keywords, not to this package. select indeed requires support of $data reference that is enabled with $data option.. Given the complexity of extending meta-schema in the specification, and also the fact that ajv doesn't require it for custom keywords (and instead accepts their \"meta-schemas\" as part of their definition), I think it can be useful to have an option unknownKeywords: 'ignore'(default)|'fail'|'log'}  that would make Ajv throw exception or log in case any unknown keyword is used.\nIt should support (as known) all defined/reserved annotation keywords as well..  in 6.10.0. @BebeSparkelSparkel the problem with providing only a function is there is no way to restrict keyword applicability to a certain type with such api. You code implies that the data should be number, but the keyword definition doesn't limit the type(s).\nSuch api extensions either belong the app or in a separate plugin package - if you create a module that  follows plugin convention and adds keyword defined with a simple function to ajv (the type should be specified though), I'll add to the docs.. That\u2019s how default is supposed to work, it will not change the existing property. You can achieve what you want with a custom keyword.. It can be done with a custom keyword, see docs and ajv-keywords for examples.. There is ajv-errors package where it can be addressed. The error object includes all this data and it can be processed there.. You could use anyOf/oneOf or if/then/else... This is more stack overflow question as it relates to JSON schema usage rather than Ajv usage.. @jota3 Could you please submit a minimal failing code sample to https://runkit.com and post the link here?. Yes, you don\u2019t need to pass the schema to validating function.. Per spec \"additionalProperties\" only considers \"recurrentType\" as known, properties defined in subschemas are additional. You need to restructure your schema. It's a general JSON schema usage question, not ajv specific.. That's a general question of using any library with angular, out of scope here. Please post the question to StackOverflow.. They should be implemented as separate formats \u201cidn-hostname\u201d and \u201cidn-email\u201d etc. that were introduced in draft-07. It should be a separate plugin. See \u201cformats\u201d section in docs.. See https://github.com/epoberezkin/ajv/issues/588. Closing as out of scope... Please use StackOverflow/google. @gregglind have you seen this: https://github.com/epoberezkin/ajv#ref?\nI was thinking to make a separate document on $refs (REFS.md:) but never came around to it. PR is welcome.. Just bear in mind that $ref in JSON schema does not mean de-referencing, it it not the same as copy pasting the referenced schema instead of $ref in general case. There was a long conversation on JSON schema org on the subject and also see https://github.com/epoberezkin/ajv/blob/master/FAQ.md#generating-schemas-with-resolved-references-ref. The closest programming analogy to $ref is a function call (and that's how ajv implements it internally - only the simplest cases are inlined as an optimisation), not a macro as many people seem to think.. See transform in ajv-keywords. It's out of scope here.. There is no such thing as the duplicate properties in JS objects, later ones simply override previous property definitions. I think you may not be passing the object above to validateLoginSchema function, you may be passing something else. Could you please submit a working code sample to runkit.com?. req.body can be an empty object - do you have a parser?. Could you please submit a minimal working code sample that reproduces this problem to runkit.com?  (it can be substantially reduced I'd say, you don't need array, that many properties, any conditions on property values, etc. - it would make understanding the issue much easier). The issue can be related to how you use ajv api, rather than to the schema/data.. Also without $data option \"select\" should fail to compile, unless you don't add \"select\" keyword.. \"^4.2.1\" means any version higher than 4.2.1 with the same major version, so no need to change it explicitly.. In this case you can merge both conditions into the same \"if\", but conditionals can indeed get bulky - so you can use $refs to put them in definitions. I'd say it's the question for StackOverflow or JSON-Schema org, as it's not ajv specific.. https://runkit.com/esp/5b1bc524f1030f00129fd26d. @Hirntoasted thank you.. It does work though if properties that have non-recursive schemas are defined first (see runkit)... Not sure if it helps as a temp workaround in your case, needs to be fixed obviously.. @Hirntoasted it's fixed in 6.5.1, please test with your real code.. Thanks. compileAsync should be optimised as all it does, it tries to compile, blows up, checks what missing schema caused it to blow up, loads it and tries again... It definitely can be better than this.. @fogine ajv indeed doesn't support schemas with recursive data structures - they need to be serialisable (unless you disable it, as you wrote, but they would still be used as keys - so unless you use WeakMap as a cache, nothing will work). I will release json-schema-traverse.. {not: {required: ['name']}} or https://github.com/epoberezkin/ajv-keywords#prohibited. You need to pass an actual meta-schema object as a parameter to addMetaSchema, as in the example on top of readme.. > best practices for using $ref.\n$refs are part of JSON schema spec, it\u2019s better to address this question to JSON-Schema-org.\n\nSince all of my JSON files reside on the same server, it seems silly to have my $ref use URI's that refer back to the same server.\n\n$refs can be relative URIs that are resolved based on the current schema $id, so you don\u2019t have to use full URIs inside the schema with $id in the same domain.\n\nDoing this also makes testing difficult because I need to mock external requests to my own server to test my schema.\n\nYou don\u2019t need to use any IO - you can add all your schemes either via ajv constructor option or via a method call. Also, please note that JSON schema spec specifically says that schema $ids are only identifiers and shouldn\u2019t be treated as HTTP resource addresses where schema can be loaded from (although some schema providers make them available over HTTP).\n\nAre URI's with $ref the best way of modulating a JSON schema,\n\nI believe so\n\nor is there a way to do it with internal file server references.\n\nYou can use URIs that map to file locations - this mapping can be in loadSchema function (option).. @Sutikshan you cannot use a relative ref (\"../common/restricted-name.json\") in the schema without $id - is it relative to what? Ajv doesn't know which file is original schema is and doesn't do any I/O (unless you use compileAsync with loadSchema function).\nAs you added restrictedName with the reference \"restricted-name\" you should have used it in your schema: \"$ref\": \"restricted-name\" would have worked.. https://github.com/epoberezkin/ajv#command-line-interface. travis glitch: https://travis-ci.org/epoberezkin/ajv/builds/395136478. @jstewmon can you please explain how you determined that exactly this change is necessary? The reason I am asking that it changes the execution logic in many test cases, not just in the one you've added. I think there should be somewhat narrower condition, this seems too wide... I didn't have enough time to think about it I should admit, but I've traced the number of extra times the if branch is entered into during the test.... I understand. Looks like I will have to debug myself, I am not quite sure yet what is going on here :). > So, I debugged some additional tests and observed that root may be an instance of SchemaObject. That led me to try this fix, which passed all current tests as well as the case where getSchema is called in a macro with an internal ref.\nThat may be a correct fix, even though it comes at the cost of going inside this branch when it is not necessary... I just want to make sure I understand why and also that we're not creating any side effects here.\nThank you, I will try to get to it quickly.. If you want to investigate further empirically, I would look into the properties of root rather whether it is or isn't an instance of SchemaObject, I think it may be a coincidence that the latter worked, and there is some more specific condition that is common for failing test.... excellent, makes my job easier, thank you :). I wouldn't worry about compilation performance, validation time isn't affected anyway, so no need to optimise it.. Thank you. > but perhaps compile can be a static method on ajv, idk.\nOnly if some instance is pre-created, it needs options etc. that are per instance.. Pattern for digits should be \"^\\\\d+$\", you are matching \"d\" literally, it will only match d's.. Thank you, I think I know why it is the case. Workaround is indeed easy but it should work.. It\u2019s indeed an existing limitation.. Resolve.js is indeed a bit of a puzzle, but this issue is in ref.jst.\nI tried fixing it at some point but it turned out to be more complex.\nGiven that it\u2019s a relatively narrow use case and it normally happens only if you try to bundle multiple schemas into a single file (which I believe is not something that should be done, better to keep them separately), I never had fixing it as a high priority.\nAre you trying to compile a bundled schema? Or what\u2019s the use case?. Could you please submit a minimal code sample without I/O to runkit.com? I believe the problem is not in ajv, but having it in runkit would help to isolate the issue.. Ok, the problem is that you are not using $id and $schema correctly. The error you see is logged during ajv.compile call when the schema is validated against itself, it requires property version but doesn\u2019t contain it. Confit never gets validated, because an invalid schema throws exception.. draft-06 meta-schema needs to be added separately - see the docs.. @Domvel Please review JSON schema spec and ajv docs. $schema is the id of the meta-schema. When you add the schema that has the same $id as the $schema, it is validated as a document against itself - that's what meta-schema is. All you have to do is either to remove $schema (then it will be draft-07 by default), or change $schema to the URI of draft-07 meta-schema, or to add draft-06 meta-schema to ajv instance. It is explained in the docs on the very top of readme file.. Yes, it is can be used in the browser. You have to either bundle ajv together with your app (e.g. with webpack), or to use a supplied browser bundle either from npm package or via cdn.js The require will work, or you can use a global Ajv, if you use bundle.. travis build stalled. Everything seems to be working ok, console.log will only execute when this keyword is used in validation, and in your example it is not - you don\u2019t validate against a schema with a custom keyword (as meta-schema simply has schema for it and doesn\u2019t use it as a keyword).\nAlso see hyper-schema for the example how meta-schema should be extended at the moment - simply adding it to properties of meta-schema is not enough (although it has nothing to do with what you see as a problem).. > I don't understand. \nWhich part?\n. Merging the property will work ok, it would still iterate subschemas. By hyper-schema I meant this: https://github.com/epoberezkin/ajv/blob/master/spec/remotes/hyper-schema.json\nSo please ignore the second part of what I wrote :) Did you understand the first one?. Closing it - I understand there is no issue here.. @delmu sorry, I am not sure what code you run and what results you expect - could you please submit a working code sample to runkit.com together with the expected results in comments?. Closing here, relates to custom keyword errorMessage defined in ajv-errors. If it\u2019s still a problem it should be submitted with full code sample to ajv-errors repo.. @lcsjunior you can have a separate schema for each method. The best practice discussion probably belongs to SO rather than here.. @nick121212 you can use if/then/else keywords. The question is about general JSON schema usage - it\u2019s not ajv specific, so posting it to SO is better.. > i believe that works with bellow code but why not with above?\nBecause they are not equivalent. Your second schema only applies \u201cenum\u201d when the data is a string, while the first one always applies \u201cenum\u201d, and null value is not in the list.\nThe values in \u201cenum\u201d can be anything, it is not limited to strings, so \u201cenum\u201d with null (value, not string) in it would work (and, strictly speaking, \u201ctype\u201d would not be necessary).. Also I\u2019m not sure what \u201devents\u201d:[\u201ctest\u201d] does in the schema.. @crackloi why is it needed? It installs the latest 3.x.x version as is.. closing, it is not necessary. I think the problem is somewhere else - could you please post the whole code sample to runkit.com?\nSee https://runkit.com/esp/5b5f5f9932208d0013b23b1d\nMy guess is that in your case property \"uri\" is present and is an empty string.. Please see https://github.com/epoberezkin/ajv/blob/master/FAQ.md#why-dont-additionalproperties-false-errors-display-the-property-name. The logic here is that the validation somewhat replaces the need to sanitise data. Logging unsanitised data is the security concern. Sanitising the data before logging (that\u2019s what you suggest) would have performance impact... (and you have to check the length first as the string can be large).\nArguably the same risks exist for format and pattern... keywords, but then it\u2019s on the schema authors and library users to consider using maxLength (that\u2019s validated first) and not using allErrors:true in public production APIs.. @gajus It all deserves a separate section in docs about security model and concerns...\nE.g. schemas are considered as trusted as application code but it seems that some users generate them based on the external data... While schemas are validated against standard meta schemas, they are not sanitised in any way (which can be done by a different meta-schema). \nAlso there is no security assessment of schemas (and it also can be done with some other meta-schema - e.g. requiring that maxLength is used whenever format or pattern is used, that patternProperties is not used at all, etc.). https://github.com/epoberezkin/ajv#security-considerations. Your schema is not correct, in \"if\" you are not checking property type of the object on the top level (data[0].type), you are checking a sub-property of property points (data[0].points.type).\nThat's why all three ifs are valid (\"properties\" keyword is applied to an array is the same as an empty schema) and all three thens are checked (and they all fail, as Ajv tells you).. I don't understand. Please submit a working minimal code sample to runkit.com with the expected result in comments.. Closing, not enough info.. @kevin-leptons could you please post a specific code sample that doesn't work as you expect (ideally please post it to runkit.com)?. You didn\u2019t just remove the protocols, you replaced full URIs with relative paths.\nsee \nhttps://runkit.com/esp/5b6f190d26ab0400120a1cd9. I think you want this: https://github.com/json-schema-faker/json-schema-faker. @mduu The dependency version is \"^4.2.1\" that means that the latest \"4.x.x\" version will be installed - it is currently 4.2.2. Why it is an issue and why #834 is needed?. > Yarn (and npm) both installed 4.2.1 of uri-js instead the latest one\nDoes it happen when you install from empty node_modules folder? The problem may be with your npm setup as well.\n\nWhen many packages have dependency on uri-js package-manager normally try to negotiate the version that matches best for all\n\nWhere is this behaviour described? My understanding is that if the latest version is 4.2.2 than it is the only one that matches \u201c^4.2.1\u201d. The reference indeed points to the object, but your data is an array.. There are many ways it can be achieved, in all cases you would have to repeat all allowed property names on the top level. This question is not ajv specific, it is related to general JSON schema specification usage.. @AVVS I suspect the problem may be that Array.isArray(new Uint8Array) is false, so these new arrays are not arrays from JS point of view. Difficult to say more without code sample.. Please submit a working code sample that demonstrates the issue to runkit.com and add expected results in comments.. This is a general question about JSON schema usage, it\u2019s not specific to Ajv. Please submit it to StackOverflow.. missingProperty is defined in some error types. What do you mean by \u201cnormalise\u201d?. @blakeembrey I would appreciate if you could help me understand the problem. This property is defined in some of interfaces and error.params is defined as ErrorParameters that is defined as a union. Yet when I use error.params.missingProperty I get the same error too. Typescript version I have is 3.0.1.. The problem is that you are using different validation API. ajv.validate assigns errors to ajv instance, using validation function does not (it assigns errors to a property of validation function, so you need to pass errors to ajv.errorsText explicitly).\nhttps://runkit.com/esp/5b7a70d4405b650012ab4311. The way it works:\n\nwhen property payor is present, \"required\" : { \"$data\": \"/payor\" } fails because the value of payor is not an array, and the required keyword should be array. So \"then\" schema is never validated and the validation passes.\nwhen property payor is absent, \"required\" : { \"$data\": \"/payor\" } passes because the value of payor is considered undefined, so it's the same as not having required at all. So \"then\" schema is validated and \"occupation\" is required.\n\nThe logic you want can be achieved with a couple of compound keywords (allOf etc.) or with if/then/else (draft-07), you don't need run-time schema substitution with $data at all. Please submit the question to StackOverflow - it's a general JSON schema usage question.. see https://runkit.com/esp/5b7d5de4b6b3d700123c8d66 to understand how it works. The above should work. Meta-schema to validate against is determined by $schema, not by $id. The default is draft-07 (and you don't need to add it explicitly, it's added automatically).. Duplicate of #843. Different interface but the same problem. Any solution that is chosen for #843 would address this issue as well.. The error is from \u201cnot\u201d keyword, you have the schemaPath and you can also include schema itself using \u201cverbose\u201d option. Understanding what properties are related to the error is out of scope here, you need to implement your own error processing either in code or using ajv-keywords. You can also get better error reporting by refactoring the schema, e.g. using \u201cif/then/else\u201d instead of \u201cnot\u201d and \u201cdependencies\u201d.. travis glitch. Browser tests are run using phantomjs, why should it be removed? The issue you have can be specific to your environment. Please open the issue if you cannot resolve it.. Please submit with all info. Ajv implements JSON schema specification. Custom keywords can be added to ajv-keywords package - it already has \u201ctransform\u201d, this idea seems related (see the discussion in the issue about applying transform to arrays).. swagger schema (the one you are validating against) defines \"$ref\" as {\"type\": \"string\"}, so it is valid. Ajv will throw exception if you try to compile the schema with the missing \"$ref\". So to validate \"refs\" in swagger config file (petstore.json) you need to compile all schemas contained in that file.. @rtbz parens are not required for \"new\" without parameters.. As a workaround you can use an option jsonPointers: true.\nhttps://runkit.com/esp/5ba2321afa1ba90012661ade\nhttps://github.com/epoberezkin/ajv/blob/master/lib/dot/missing.def#L8. you can use \"else\" branch and make it additional / failing there.. Yes, that\u2019s how \u201cadditionalProperties\u201d keyword defined in the spec - it is \u201cshallow\u201d.. It's a wider issue - additionalProperties keyword is not validated at all in this case.\nhttps://runkit.com/esp/5ba7615233bc340012478b31\nAnd actually no other keywords after propertyNames as per https://github.com/epoberezkin/ajv/blob/master/lib/compile/rules.js#L16 are validated.. Empty string is supposed to fail format, it is not the same as absent property.. I suspect ajv-cli can be ignoring $id - it needs to be upgraded.\nThe problem is that inner $id (\u201c/properties/request) changes base URI and with the changed base $ref cannot be resolved. Not sure what was the intention to have that $id, but in its presence relative $ref won\u2019t work, it has to be absolute (or at least \u201c/example.json#/definitions/datetime\u201d). Well, these tests should pass - they specifically test that the content of $comment itself should be logged when this option $comment is enabled - it is not related to the problem this PR should be addressing.. Tests pass but the changes are not updated I think.. No problem with the time - thanks for the contribution.\nThe change should allow comments and refs in the same schema object, if I understand it correctly. I don\u2019t see how it should affect any of the existing tests (unless you change them).\nThe additional tests you need should tests that with the comments and ref together Ajv doesn\u2019t throw but it still logs comments (or calls hook).\nWhat am I missing?. replaced by #903. To me extending standard classes is not a JS way - JS was never good at supporting standard class extension. Also a string and an instance of String class are two different things in JS. Python can be more your thing tbh (I don\u2019t try to be sarcastic, I just mean that it has much fewer quirks than JS). JS way would be to have a separate class hierarchy with some normal string property. I don\u2019t think supporting Sting instances is something that any JS library should worry about.... That\u2019s a feature, see options.. Adds the same as #865 but definition is narrow.. You need to update meta schema with metaSchema = Ajv.$dataMetaSchema(metaSchema). before adding. Probably needs documenting :) Maybe should be done automatically with option $data... Draft 7 meta-schema is added by default. See https://github.com/epoberezkin/ajv/blob/master/README.md#addmetaschemaarrayobjectobject-schema--string-key---ajv. duplicate of #512 . I assume the expectation is that this this schema should be loaded from URL https://w3id.org/dats/schema/identifier_info_schema.json#? The standard usage is to add all necessary schemas using addSchema. Ajv does not do any I/O unless you use compileAsync method and loadSchema option (see https://github.com/epoberezkin/ajv#asynchronous-schema-compilation). \u201cSerialize\u201d option indeed has to be defined in types, but that not the problem here. The issue seems to be caused by something assigning this property to something other than undefined, maybe on prototype chain, and that leads to Ajv failing to properly initialise it with the required function - you can check the source code. The error says it\u2019s not a function - you need to check what it is and that may give you a clue to what assigns it.. I am closing the issue here, if you can\u2019t resolve - please resubmit using template for compatibility issues.. no idea what is going on here. You need $data option.. @rklueber there is indeed a bug in ajv-cli that needs to be fixed - it is supposed to pass --data as {$data: true} to ajv and it does not. epoberezkin/ajv-cli is a fork, the main repo is jessedc/ajv-cli. Standard keywords in JSON schema are either applicable to all types or to just one type. In your case you need all types so you just need to drop \"type\" from keyword definition, it will be validated only once. Keywords that have multiple types in the definition validate once for each matching type. It's possible to account for such cases, but seems unnecessary given that it's an edge case.. The reference should be view/properties/name.. You can use other JSON schema keywords, e. g. minLength for strings.. @vlamic \"url\" format is not part of JSON schema spec, you could use \"uri\" instead, it passes: https://runkit.com/esp/5bff85e6b9b5eb001267e991\nAccording to these test cases double-dash is supposed to fail - not quite sure why. @gajus?. Why it is marked as invalid in the test cases then I wonder?...\n\nOn 29 Nov 2018, at 18:11, Gajus Kuizinas notifications@github.com wrote:\n@epoberezkin This shouldn't be closed, though.\nhttp://b--b.com/ is a valid domain name.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. https://github.com/epoberezkin/ajv/issues/898#issuecomment-447596417, #907. There is PR that fixes it. It\u2019s not a JSON schema validator; so it\u2019s a wrong benchmark. Also the benchmark is maintained in json-schema-benchmark. So it appears that several libraries depended on an internal file that was not public (I think) and that became one-line wrapper around fast-deep-equal long time ago... Who would have thought :)\n\n@mcollina @gajus could you please replace require(\u201cajv/lib/compile/equal\u201d) with require(\u201cfast-deep-equal\u201d)? I won\u2019t be able to revert for several hours I am afraid.. Even if I do revert, it\u2019s worth replacing anyway.. I will revert, it\u2019ll go out in the next major version. Give me an hour - just landed :). Good old release and run routine.... Yes, that\u2019s why I probably kept it at the time... it\u2019s published. So \u201cequal.js\u201d is public as it turned out... \nhttps://github.com/epoberezkin/ajv/issues/889#issuecomment-442784790\nSorry. Sorry, npm provides a better list of packages that depend on ajv. Only de-facto standard libraries or ajv plugins need to be added to the docs.. It\u2019s difficult to understand the issue without a self contained code sample, ideally without fastify. It can be worth submitting to fastify.. They are optional by default. Please see JSON schema spec. \"request\" is undefined?\nMaybe you can submit a working code sample with mock instead of request to runkit.com.. https://runkit.com/esp/5c0d7e72da6b7c0019209772. It looks like it wants it to be \"http://test.com/?ref=text\".\nThe format defined in JSON schema spec is \"uri\", not \"url\" by the way - it passes for \"http://test.com?ref=text\":\nhttps://runkit.com/esp/5c155fe539f6fa0013639b3f. I think the correct approach is to deprecate \"url\" format in this package and remove it in the next major version, as it is not part of JSON schema spec.\nEither \"uri\" or a custom definition of \"url\" format can be used.. #907 . @farisn thank you for the change and sorry it took long time to review.\nThe problem with reviewing it is that there are 4 different scenarios with 2 options (allErrors = true/false) that are inside a single test, it would be easier to understand if they were split.\nSome of these 8 scenarios pass without the change, some require the change (I didn't check all). The lack of descriptive names for these tests also complicates reviewing.\nAlso this assertion: https://github.com/epoberezkin/ajv/pull/899/files#diff-fe04da3b92b1e5d8609c211a4b069473R193 is too complex, but it will get simpler if the tests are split...\nWould you be able to split it to 8+ different tests in 3 separate commits:\n- commit 1: 8 tests that pass without the change (they are there to ensure correct behavior remains and skipped tests that fail without the change.\n- commit 2: change and un-skipping the tests that now pass\n- commit 3: additional skipped tests that should pass, but don't pass because, as you say, with allErrors: false it doesn't work - I would try to fix this scenario, I don't like the idea of the option that occasionally doesn't work - it is better than it it is now, but it doesn't resolve the issue.\nPlease let me know if you could restructure it in this way.\nThank you.\n. JSON Schema specification is out of scope of ajv docs, it has the reference of keywords though. There are links to the specification in readme https://json-schema.org. @mmccool What you want seems  related to \"annotations\" collection process defined in draft-07 (ajv does not implement annotations collection): https://json-schema.org/latest/json-schema-validation.html#rfc.section.3.3.\nThis process may be required for draft-08 support as there will be added a validation keyword that will be dependent on the properties in subschemas that passed validation: https://github.com/json-schema-org/json-schema-spec/issues/602 (looks like it was bumped to draft-09 though).\nGiven that draft-08 seems to be going to define some standardised output formatting as well, it probably has to be addressed together.\nIt seems to me that what you need is annotations collection (your option 2).. Annotation collection is optional in draft-07 but I don't mind it added according to the spec based on some option. It\u2019s not a small change, particularly supporting it for various combinations of options and taking short-circuiting validation into account (there is some note on that in the spec).. Btw, you could use $comment keyword - the hook it calls will need to be passed some extra parameters to expose the current validation state (e.g. errors collected so far and part of the data the schema was applied to), but it\u2019s an easy change.. I removed generic argument:\n1. Promise result type is different from data type\n2. Function should be able to validate any data type, it's not limited to a specific data type. This is a relatively recent retrospective change in draft-04 meta-schema to address the issue with \"id\": https://github.com/json-schema-org/json-schema-spec/commit/4be0cbff74081e4b9f8ab4a177e75d36ab789c2c#diff-76d5ffeac090c76ed5f4c581f02f3c53\nWhen draft-04 meta-schema is used as \"meta-schema\" ajv replaces \"uri\" format with \"uri-reference\", as it is defined in later versions.\nWhen this meta-schema is used as part of your schema it does not happen, so it fails validation.\nThe correct fix would be to replace \"format\": \"uri\" with \"format\": \"uri-reference\" for both \"id\" and \"$schema\" properties in this package at /lib/refs/json-schema-draft-04.json, not to suggest loading meta-schema remotely as in #905.\nA PR with this change is ok.. see https://github.com/epoberezkin/ajv/issues/904#issuecomment-447594283. It is much easier to do with schema pre-processing step outside of ajv, when a single schema is used to construct READ, WRITE and DEFAULT schema.. \"if\": { \"properties\": {\"propType\": {\"const\": \"n\"}} applies to data.prop. propType, not to data.propType as you probably need.. See https://github.com/epoberezkin/ajv/blob/master/lib/dot/validate.jst#L24 - it can be async function \n that always returns a promise.. Ok, so the option useDefaults should support the value \u201cempty\u201d to assign the default value to the property/item that is either absent (like it is now) or equal to an empty string, undefined or null.\nI don\u2019t think the use case justifies supporting any other values as \u201cempty\u201d. The change should be relatively straightforward, if you search for useDefaults you will see where it is used in code.\nTypes should be updated too.\nThere is dynamicDefaults is ajv-keywords already.. That is by design. The property with the value undefined is considered absent for the purpose of the validation (it will be absent if you stringify). An absent property is not validated against the schema somit passes. You need to use \u201crequired\u201d keyword to require that property is present (either in or outside of \u201cif\u201d). There is not enough information to reproduce your issue. If anything, it may be a compatibility or installation issue - please resubmit using installation template.. released. It would help if you could resubmit the issue via compatibility template with all info.. @coderextreme for performace reasons Ajv by default does simplified format validation for several formats, including uri-reference that is used here: https://github.com/epoberezkin/ajv/blob/master/lib/compile/formats.js#L40. There is an option format: 'full' that uses more restrictive and slower regular expressions - please use this option. You can see the difference here: https://github.com/epoberezkin/ajv/blob/master/lib/compile/formats.js#L10. Also see https://runkit.com/esp/5c5ec7c65448d1001534e273. Please try to reduce the size of the examples so that both the schema and the data is as small as sufficient to demonstrate the issue.. Not much simpler, to be honest :) \"null\" has to be explicitly allowed as type, your schema allows only strings. Please refer to the docs and JSON schema spec.. Could you please post a minimal code sample, to runkit.com if possible? I don\u2019t understand the issue.. I think I may understand the question. Coercion only changes the data in case it doesn\u2019t pass validation with the type keyword. Empty string is a \u201cstring\u201d - why it is expected that it would be coerced to null? Whether it passes validation is irrelevant from the point of view of this functionality.\nPlease bear in mind that type coercion is Ajv feature that is not part of JSON Schema spec.. ... nullable is also not part of JSON Schema spec - it\u2019s an extension defined by OpenAPI spec, Ajv supports it for compatibility with OpenAPI tools. An equivalent JSON Schema syntax is type: [\u2018string\u2019, \u2018null\u2019] (it wouldn\u2019t trigger coercion too).. Making coercion dependent on validation results is too complex (and even more indeterministic than it already is).\nYou need to use some compound JSON Schema keywords.\nYou may be able to achieve what you want with default: null and the option useDefaults: \u201cempty\u201d. You probably installed from GitHub... Please resubmit the issue using installation template (the last one - it has suggestions how to resolve.. Are you saying the issue is that the missing property definition in the schema itself not causing an error? Or that the missing property in the data does not cause an error?. I.e. do you expect the example above to trigger an error? Or if you remove \u201cfoo\u201d from data it should trigger an error (and it doesn\u2019t)? It would help to have code sample in runkit.com. That is according to JSON schema specification  - most keywords are independent and you are not required to have a schema for a property when it is listed in \u201crequired\u201d. Please refer to the spec.. I don\u2019t know - it\u2019s an old version. Please check with code.... This can (and should) be achieved by modifying the schema at any point (you could traverse the schema in code and replace all type:'string' with type: ['string', 'null'] just before schema compilation). I am not sure why you are unable to modify the schema - it is a trivial thing to do in your code programmatically by traversing the schema and replacing each type:string with type:[string,null] - you could use JSON-schema-traverse (that ajv uses to traverse the schemas).\nIn any case, the logic of string validation will not be changed in ajv.. It behaves as intended, the docs can be clarified a bit. You can probably prevent validation reaching default if the property is not present... Not sure I understand the use case. The idea of this option was to extend the previous \u201cdefault\u201d behaviour - I.e. treat property with empty string or null value as if this property not present.. I was asking about an actual use case, not about the code sample. The way default: \"empty\" is defined, it is useful as it can be used, e.g. both for form submissions when empty fields can be present as empty strings and for API calls when the properties will be absent. What is the use case of the above?. @akaNightmare you need to structure your schema differently to achieve it. The behaviour of the default keyword will not change to achieve what you describe.. url format is non standard and it\u2019s deprecated (see the docs) - you should use uri. Is it windows only issue or it happens on Mac/Linux too?. Ajv uses the package del-cli (to work on both Linux and Windows) and if you look at package.json build script it is configured to remove all js files in dotjs folder excluding index.js\ndel-cli was last released 2 years ago, so it\u2019s not their change. And I believe it worked on Windows in the past (I never tested it myself though).\nSo maybe it\u2019s about compatibility of del-cli with a specific version of Windows?. It may help if you submit all info in installation issue template. You can disable the hook with -n flag (--no-verify). @bennieswart Thank you. As is, this change does not cover properties defined inside any compound keywords - such as allOf, anyOf etc.\nIt is definitely impossible to determine required properties for a given JSON schema without a specific data instance in any better way than JSON schema itself.\nUnfortunately, even for a specific data instance it is impossible to determine the list of required properties in general case. Consider this simple example:\n```javascript\nconst schema = {\n  anyOf: [\n    {required: ['foo']},\n    {required: ['bar']}\n  ]\n}\nconst data = {};\n```\nThere is no better way to define the list of required properties than the above JSON Schema itself.\nFor some simple cases it is possible to construct a simple list, but in these cases the same list can be constructed either by analysing the schema or by processing validation errors.\nIt is possible of course to solve the task of returning the list of all unsatisfied requirements in the form of simplified JSON schema, but it is out of scope of Ajv.\nFor any options or features that could be added to Ajv they should either work for all JSON Schemas in some predictable way, or they should be provided as separate plugins/packages.\nI think in general this problem should be considered in the context of annotation collection process proposed for draft-08; once it is published some additional reporting around required properties can be considered as an extension to annotation collection (that is if annotation collection and the new keywords that depend on it is added to Ajv by me or somebody else).. @mikila85 this is a much bigger work than just fixing the gaps - it would require substantial changes in how schema compilation is performed, possibly a rewrite, and it has to be done in the context of the coming draft-08 spec (which is although not released, already available). I may consider helping you find a resource to do it on commercial basis (that I would have to supervise) - feel free sending me DM/email if it's a consideration.. I guess I was looking at this page that only mentions true, but allowing any boolean makes more sense.. Null is a value. And each value should have type. Would you rather JSON Schema treat null as object as Javascript does? Nullable:true to allow null value makes no more sense to me than falseable: true to allow false value... As you can see I am not a fan of Swagger decision to implement not even a subset or superset of JSON Schema but some kind of \u201csideset\u201d :). > in the context of a standard where null is not itself a type, which is the case for OpenAPI\nAs I wrote null is value, so it has to have some type. JSON  Schema defines a special type \"null\" that has only one value null. It's definitely less confusing than treating null as an object as JS does. \nSwagger says that null is a value but it has no type, which is not a matter of opinion - it is nonsense that doesn't exist in any other major typed language. They could have easily said that \"type\" keyword allows either one type, or only two types if one of them is null, i.e. type: 'null' is ok and type: ['string', 'null'] is ok, but type: ['string', 'number'] is not ok. It would be a subset of JSON schema and all the tools would have worked with it as easily as with nullable.\nAll ajv does with nullable is replacing it with type: [XXX, 'null'] before anything else happens.\nInstead they decided to be clever and created a weird situation when null is a value that has no type and you need a special keyword to allow it.\n. And if you look at JSON standard, it doesn't define types for null, true, false, but it separates null from objects. So from this point of view I am not quite sure why having type 'boolean' has any more or less sense than type 'null', or why falseable is any worse than nullable. /rant. the tests were failing because of jshint update that has some regressions, now they fail because of code style in PR. @mattpolzin Git error on merge: \"fatal: refusing to merge unrelated histories\"\nWith the option \"--allow-unrelated-histories\" there are merge conflicts in 7 files not changed by this PR.\nIt looks like you made the change against some old commit in master.\nCould you please update the fork (maybe remove and create a new one?), make the change again (eslint will want single quotes and no trailing spaces in code: https://travis-ci.org/epoberezkin/ajv/jobs/490923434) and create a new PR?. I was trying to merge into the wrong repo \ud83e\udd26\u200d\u2642\ufe0f.... This issue is related to errorMessage keyword that is in ajv-errors package, so it should be submitted there.\nBased on the error message it looks that you are not using it as documented, please review the docs in ajv-errors and if it does not help:\n1. if you believe errorMessage does not behave as documented - please submit bug report with the full code sample\n2. If you propose a change - please submit change proposal (including the code sample of the proposed change being used)\n3. You need help using the package - please submit the question to StackOverflow\n. There is indeed some inconsistency between how properties with the value \"undefined\" are treated... In the most cases they are treated as absent but minProperties clearly treats them as present.\nI am not sure yet whether it is something to be fixed or be classed as limitation of \"undefined\" being out of scope of allowed JSON values.. For the main use case of ajv - validating API requests data - there will be no properties with undefined value. Making min/maxProperties behaviour more consistent in this scenario would have performance impact and also can break some existing code.\nCurrently the compiled schema code simply counts properties: https://github.com/epoberezkin/ajv/blob/master/lib/dot/_limitProperties.jst#L7 and the required change would have to scan all properties to remove undefined values from the count (and there will be some edge cases around own vs inherited properties).\nSo this can be improved with the option, e.g. countUndefinedProperties: false (maybe some shorter name) that would make validation of min/maxProperties consistent with other keywords in this scenario. . It has to be an option as otherwise it may break some existing code indeed. \"filter\" is still very inefficient on some platforms, it will have to be while/for loop to exclude undefined properties from the count. . @VytautasT PR is welcome, but let's please agree the option name and value first - I don't have any idea that I like.. I don't think there is a use case for having this behavior determined by the schema rather than globally. Maybe it's better just to change it and see ~~what~~ if anything breaks.... Ajv compiles schema into javascript code that is executed during validation. So all schemas referenced in the schema you compile should be available at the time of schema compilation. For the most common use case of server side validation of API request bodies/parameters it give up to 100x performance and the schema needs to be compiled only once (that is if you don't create a new instance on every request, of course).\nYou could implement what you want by validating each property separately with a separate schema, in which case each schema would be compiled on demand. You can add all schemas to the instance with addSchema and retrieve them using getSchema - ajv compiles schemas lazily in this case, but each schema should be fully compiled - supporting partially compiled schemas would be very complex.. > If I use addSchema to add all referenced schemas, and I then I use getSchema($id) to compile a validator lazily, will that validator get cached ? So If I then call getSchema for the same $id again, it wont compile it again ?\nYes that is correct - it compiles only once - you can use Ajv instance to access all compiled validators.. Thanks for the patience, going to fix https://github.com/epoberezkin/ajv/commit/7079aed19599fd13c95412b181fd2c08feb1debb - I think I know what the issue is.\nerrors can also be \"full\".... released 6.9.1. Please let me know if somebody is still affected. The validation of custom keyword was simply incorrect, and now it is fixed. But it is still a bit more restrictive than it was - it would only fail though if e.g. somebody used 0 instead of false, which seems unlikely.. It probably is possible to make travis CI run tests of some dependencies against the new tags (e.g. webpack and eslint).. closing. It actually was throwing before, it just was a bit less restrictive... I've released the fix - let's see if there is anybody still affected.. @TheLarkInn maybe you have any idea why it fails on yarn unlink on travis in this job (in the end of the log where it runs scripts/test-deps-release): https://travis-ci.org/epoberezkin/ajv/jobs/496636927\nIt does work locally.\nThank you!. @fgarcia your approach of modifying schema via the reference should work, surprisingly, but it is a hack that I would avoid using - it will be very difficult to reason about and to debug.\nThere is no penalty for having each definition in a separate file and adding them to Ajv instance all at once or as needed - they are only compiled on demand, lazily, even if you add them all at once.\nSo instead of addressing them via JSON pointer after #, you would be simply addressing them by different schema $id\u2019s, e.g. https://example.com/defs/myDefinition (and $id structure may match folders structure to make it easier to reason about or be downloadable via http, but the spec has no such requirement - how you map $ids to actual schemas is completely up to you). A common approach is to group related definitions across multiple files.\nBtw, I do not understand the use case of extending definitions during run time? Why cannot they all be pre-added to Ajv instance during application bootstrapping? Do you generate them dynamically?. Please ask general JSON Schema and Ajv usage questions on StackOverflow, this issue tracker is for Ajv bugs and change proposals.. Please search for answers and ask general questions about using JSON Schema and Ajv on StackOverflow with the relevant tags.. I am not convinced that making Ajv resilient to the absence of global console is the right approach, given that\n1) 2 main JS environments have it (and probably most main environments have it)\n2) there are simple solutions that don\u2019t require library changes:\n  a) pass console object to Ajv instance - there is an option\n  b) define global console if for whatever reason you cannot pass it (in case you don\u2019t control instance options).\nWhy does it have to fixed in the library? . Having thought about it, I believe that even for the environments that do not have \"console\" object, I believe it is better to fail, to make users aware that the library does not log in cases it is supposed to, rather than to do nothing silently.\nOnce users understand that either the global console or \"logger\" option is required, they will have a choice to either supply another way to log or to supply a logger that does nothing.. Thank you for the PR, but it will not be merged. Please see the comment in the issue.. Duplicate of \nhttps://github.com/epoberezkin/ajv/issues/221. travis glitch - passes now. Difficult to say... Would you be able to post a code sample to runkit.com? (it's easy to run there against different versions and try changing things). Alternatively you can try running your code against different Ajv versions to identify exactly which release caused the change.. Yes, it's definitely the same issue as linked - if you remove removeAdditional it should work.. Fixing it.. as a recommendation, you may want to limit keyword to strings with \"type\" in definition, maybe you have it in your code.. fixed in 6.9.2. Apparently, the example data2 above is per RFC1123, and instead RFC1034 should be used.. @not-an-aardvark I understand the problem. The docs list the scenarios where defaults are ignored, but Ajv simply uses them only in properties and items:\n\nWith option useDefaults Ajv will assign values from default keyword in the schemas of properties and items (when it is the array of schemas) to the missing properties and items.\n\nSo it doesn't really know when defaults are ignored... What would be possible though (I think:) is to make a meta-schema that would fail if a schema has defaults that are ignored, similar to this one: https://github.com/epoberezkin/ajv/blob/master/lib/refs/json-schema-secure.json\nThen it would be one line of code to validate against it. I don't think it should be an option though - we can just add to the docs this line and you can also call it for user-provided schemas.. actually meta-schema is not possible, logging or throwing is possible though - see commit https://github.com/epoberezkin/ajv/commit/f59c995504c992a1db04b0ff76047a13aad3c9ba?w=true. It has to be an option, and it has to be excluded for meta-schema compilation, as several other options are, because standard meta-schema has default: true in its root that is ignored - it would log all the time without this option.\n\n[ ] exclude option for meta-schemas (together with other excluded options)\n[ ] option values: true (throw exception), \"log\" (to log a warning), false\n[ ] tests\n[ ] docs - in options and in \"assigning defaults\" section\n[ ] types. The meta schema is part of JSON schema specification - I would rather we don\u2019t have a different version of it here.\nAlso ignoring some options in meta-schema is something that already happens for three options - there is an array of such options to add to.. Here: \nhttps://github.com/epoberezkin/ajv/blob/master/lib/ajv.js#L42. Cool, thank you, you can continue off my branch with this commit, and then I merge. @not-an-aardvark it's in 6.10.0. I also added strictKeywords - it is useful to catch typos in keywords that would lead to them being quietly ignored.. I think ignoredDefaults was fine, there are two options that allow value \u201cignore\u201d. I am guessing here - maybe you think it looks too similar to \u201cignoreDefaults\u201d and can be confusing? We also could \u201csimplify\u201d the whole thing and cram it into useDefaults option - \u201cwarn\u201d would log unused defaults and \u201cstrict\u201d would throw? Not sure :) \n\nunusedDefaults is cool too - consistent with useDefaults. unusedDefaults it is then :). > I think my confusion with ignoredDefaults is that while the defaults were previously being ignored before adding this option, they are now sometimes logging a warning or reporting an error, which intuitively doesn't seem like they're being ignored\nI see... so we need some option that would mean to throw if some defaults are not used.\nMaybe strictDefaults: true/'log'? The meaning is to only allow defaults that are used, and report other defaults?\nFrom reading the issue you want to throw:\n\nIt should be possible to opt into a mode where invalid default keywords result in a compilation or validation error, rather than being ignored.\n\nIf so, we could do useDefaults: true/'strict' and leave any possible further extension to the future. Logging is not that useful normally...\nAnyway, I am probably thinking too much about it :) Happy with either of the above: strictDefaults or useDefaults extension - your call.. Going to merge it with strictDefaults - I want to release it today. It can be a plugin - it doesn't have to be in Ajv. See https://github.com/epoberezkin/ajv#annotation-keywords and https://github.com/epoberezkin/ajv#plugins\nSo require('ajv-examples')(ajv); would make ajv instance validate examples.. I don't understand sorry. How the document would look? What result would you expect? From the description it feels out of scope - you need to decompose it in your code.. It already happens when the schema is used with Ajv - see the docs\n\nOn 6 Mar 2019, at 10:43, ChiragMaliwal notifications@github.com wrote:\nHow can I validate the written schema valid or not .\nconst requestValidation = {\n  \"properties\": {\n    \"name\": {\"type\": \"string\" , \"minLength\": 3, \"maxLength\": 255}\n  }\n};\nvar schema = {\n    \"foo\": { \"type\" : \"str\" , \"minimum\" : 3, \"maximum\" : 255 }\n};\nlike we validating the data , there is any function who validate the schema .\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Sorry, it has been previously been proposed and it won\u2019t be supported. Type is a special keyword in JSON Schema and Ajv processes it differently from other keywords, so redefining it would be very complex. Also I do think it\u2019s a bad idea to redefine standard keywords - it is better to define new custom keywords via available extension mechanism.. Sorry but what\u2019s wrong with additionalProperties: false? Won\u2019t it do exactly that?\nOn 7 Mar 2019, at 09:48, fogine notifications@github.com wrote:\nHmm, when thinking about it, it would be against json-schema specs to allow string value for additionalProperties keyword. Thats not acceptable.\nFor the time being will solve it by custom keyword. Would be nice to have the functionality build-in though.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Using multiple Ajv instances is the correct approach, overriding options on the schema level will not be supported. This issue should be in ajv-i18n. This is how removeAdditional is defined - see the docs. You may need to define a schema differently - please address the question to StackOverflow.. removeAdditional: false is noop AND you have additional properties. You need different options/schema - please post the question to StackOverflow.. The possible approach is to have a code dependent on the keyword in the error message. dataPath defines the level in the data that has the problem - in case of \u201crequired\u201d the error is in the object, not in the property.\n\nThis has been changed from draft-04 of JSON Schema specification, before that you needed to use required: true on the property level. You could submit this issue to https://github.com/epoberezkin/json-schema-usage-problems. no need escaping types - they don't have quotes (schema validation will fail if they do)\n. hyper meta-schema is different from meta-schema - it has additional keywords (and they are not implemented). I suggest not adding it, because it will increase the size of browser bundle. It can be manually added using addMetaSchema by users when needed.\n. The guards should be on the calling side, in date_time function. This function is also used for \"time\" format and it will never be called for undefined, so this condition is only necessary if called from date_time\n. Strange there were no tests for this format at all. There is a mistake in date format tests above when in description it's called \"date-time\" - maybe that's why... Thank you\n. This is not valid - should be anyOf with two format keywords inside.\n. Why do you need \"#\" in the pattern? If you mean it as the pointer to the root it should be \"\" (an empty string) instead. \"/\" is the pointer to the empty property at the top level. \"#\" in relative json pointer is a special thing resolving to the name of the property/index rather than to data. Or am I missing something?\n. Not really: https://tools.ietf.org/html/rfc6901#section-3\nIt's when JSON pointer is in URI (in $ref)\n. /defenitions/foo is a valid relative URI (definitions is a folder and foo is a file), schema compilation fails because it cannot find schema with such uri.\nBut #/foo is not a valid JSON pointer, it passes json-pointer format validation because I allowed (maybe mistakenly? Not sure, it's not precisely specified) URI encoded JSON-pointers in this format.\nI don't think it's such a big deal to worry about, as long as you are aware that $data only takes normal JSON pointers it's fine. Allowing uri encoded JSON pointers would be a bit more effort that just stripping #, you'd need to decode as well.\n. Ha :) Thanks!\n. Would this still affect .toString()code?\n. rootData should be: Object | Array\nSame as parentData\n. Thank you.\nNo, data can be anything, but parentData and rootData can only be array or object (otherwise you would never get to children).\n. Could we simplify a bit? Something like:\njavascript\nif (beautify === undefined) {\n  (function() {\n    try { beautify = require('' + 'js-beautify').js_beautify; }\n    catch(e) { beautify = false; }\n  })();\n}\nNo need to create two new names really...\n. yes, can be any of basic types or integer. I don't understand. If you mean that \"if type is not specified\", then it is not correct. Format should be applied string and number after this change, depending on format keyword value, but even if the type is not explicitly specified. So this schema { \"format\": \"int32\" } would be valid for numbers only if they are int32 but all other types will be valid too. You need to think about keywords as about restrictions. Type keyword is also a restriction, but it does not affect format validation, data type does.. Let's not support formats that apply to multiple types, there is no real use case for it and it would make code simpler.. By the way, rules are called based on the data type, not on the presence of type keyword. So the way you did it (format keyword added to two types) there can be some code added for both string and integer data type and the code in format.jst should skip adding code if type is incorrect (I think you're doing it already, and I suggested to simplify not to support arrays of types). So I don't think that type keyword should be explicitly specified for it to work.. /^[a-z_$][a-z0-9_$\\-]*$/i, as you've suggested. it should be: it.schemaPath + it.util.getProperty($keyword);\nThis way it would still have direct property access when possible (which is in most cases and for all standard keywords). > i.e. you get a line in lib\\custom.js that looks like:\n\nvar $schemaPath = it.schemaPath + it.utils.getProperty($keyword);\n\nIf you mean the file lib\\dotjs\\custom.js then that's what it should be.\nIt's not a generated code of validation function, it's a code that generates code of validation function :). The only question is if it works or not.. > I'm not very familiar with dotjs\nIt's a normal (and very simple) templating engine that allows JavaScript in it. Whatever is inside {{  }} is just code, so it is copied as is, while things in {{= }} get into the output.\nIt's a bit easier to manage template then it would be to manage string concatenation to generate code, that's it, but it's the same really.. Please update these references to match the regex (the part(s) of RFC(s) that say that underscores are fine). I suspect that the requirement to have hyphens only in the middle is also unnecessary for domains (we need reference as well to RFC), so regex can be substantially simplified to have fewer matching ranges. Can't it be email@-domain.com ? Or it is still invalid?. I think both are valid, strictly speaking... You won't be able to use my_domain.com as a host-name (as a part of URL) but you should be able to use it as a domain name. But practically given that everybody uses domains as hostnames maybe we shouldn't allow underscores in the second level and only allow it in the third etc.. Having read the docs, I think that it should be extended even more rather than just adding underscores.... @wdullaer Ok, thank you for your time spent to clarify it. In any case, if somebody needs to support emails with underscores they can easily update the format to allow it.. This whole Logger class seems like an unnecessary indirection, to be honest.\nIt can be much simpler without it completely:\n1. if undefined is passed - use console (in Ajv constructor)\n2. if false is passed assign a noop object: {log: noop, warn: noop, error: noop}\n3. otherwise just use what is passed\n. 1. You won't have to test it if it doesn't exist. You only really need to test 3 scenarios for the option: logs to console/log to passed logger/doesn't log.\n2. It essentially hides the missing method in passed logger. Throwing an exception is better. If a user want's to hide say warnings but not errors they just need to pass logger with a noop for a method.. Thank you. To address the problem above, whether with the passed object or with the default global console, rather than hiding the problem it is better to check that the object has all 3 methods during the instance initialisation (in the constructor) and throw an exception if it doesn't:\nif (!(logger.log && logger.warn && logger.error)) throw new Error('logger is invalid');. It would, because once console is assigned to the instance the fact that oracle overridden a global wouldn't have affected it. It would still continue using the old one.. The difference is that it would throw an exception early and always rather than late and sometimes (in case console is replaced before ajv initialisation; if it happens after as you wrote, it would simply work). I prefer this behaviour to simply not having warnings.. Description here is bit confusing, everything else is ok. Thank you.. I don't understand these changes. It looks like $refCodeFn is assigned after it is used? Probably not - $refCodeFn is a validation time var, the convention is to use $ for compile time variables. In any case, I don't understand what this re-assignment achieves?. If the idea was to simplify why can't it be {{= $refCode }}.call(this, .... ... and {{= $refCode }}( ?. not necessary. I prefer simply always ignoring $comment with $ref, without any extra option.. this change will be much simpler as $comment can be just used here directly. without option - no change here. I think that the usage as constructor may have been lost? Also the issue is to export only ErrorParameters interfaces to use them as type guards - why all interfaces should be exported?. ",
    "cdmcnamara": "Would be great if you could add all your schemas and then compile as this would support being able to parse a folder of schemas and add them without having to manually put them in order.\n. Thanks @epoberezkin will start playing around with it today\n. Looks like all the tests are passing except one, I'm running a test were I validate the top level schema and have a definition in a schema that is a few children deep:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"id\": \"AdditionalInfo\",\n  \"title\": \"AdditionalInfo\",\n  \"description\": \"More info about this payment\",\n  \"definitions\": {\n    \"error\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"message\": {\n          \"description\": \"A human-readable string describing the error\",\n          \"type\": \"string\"\n        },\n        \"code\": {\n          \"description\": \"A machine-parseable string describing the error\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\"message\", \"code\"]\n    }\n  },\n  \"type\": \"object\",\n  \"properties\": {\n    \"error\": {\n      \"description\": \"Present if the SubPayment incurred an error\",\n      \"$ref\": \"#/definitions/error\"\n    },\n    \"hash\": {\n      \"$ref\": \"Hash256\"\n    }\n  },\n  \"additionalProperties\": true\n}\n```\nWhen I attempt to validate this I get the following error:\nError: can't resolve reference #/definitions/error from id Payment#\nWhere Payment is the name of the top level schema. So it appears as if the context of #/definition/error is at the top level object and not on the object a few children deep.\nIf I just try and validate the object a few children deep, there are no issues\n. Thanks for the quick reply! This solution sounds ideal.\n. ",
    "bugventure": "Yeah, dereferencing and scope resolution is a pain. I guess there are several reasons this problem is not addressed in a good way in any of the high-profile JSON validators today:\n1. The spec is vague, lacks detailed explanations and better use cases.\n2. It kinda seem unintuitive to the average programmer who deals with schemas and JSON validation.\n3. It's tightly coupled with remote reference fetching, a problem the bulk of JSON validators have put out of scope, as it deals with making HTTP requests.\n4. I still haven't seen a viable real-world use case for scope dereferencing to date.\nActually, your current work seems to go as far as any JSON validator has gone in terms of proper scope resolution.\n. ",
    "jon49": "Found what I was looking for, schemasaurus will do what I need.\n. Thanks. It looks like your library is very good. I was just wondering about a more general purpose tool that is very similar to what json-schema validators already do. It looks like schemasaurus was built with general purpose in mind. I'll evaluate yours for validation though. It looks good!\n. Yes, it does work when I create a fresh object directly. I'll check out json-stable-stringify.\n. If I omit the data in the definitions it then works.\njs\nvar definitions = r.omit(['baz'], defs.definitions)\nvar schema = r.merge({definitions}, defs.definitions.baz)\n. Yes, here's the issue in json-stable-stringify. It hasn't been updated to the library yet though. Until then I'll just do my work around.\nhttps://github.com/substack/json-stable-stringify/issues/14\n. I'm not sure if this issue should stay open until it is resolved in the other library. So whatever you want to do!\nThanks for the pointer!\n. ",
    "sanglierquipue": "Yes you are right ! I had also a bug in my schema\nthis part was wrong \njavascript\n[\"ap\", \"ac\", \"ap\", \"af\"]\n(should be replace by [\"mp\", \"ac\", \"ap\", \"af\"])\nOk, I will try the schema you propose, THX !\n. ",
    "stefk": "Hi,\nI understand performance is an important consideration, but precise error reporting is also really valuable. \nI'm currently building a format specification using JSONSchema, and as the multiple schemas involved are subject to many changes at this point, I've set up a test suite automating validation of valid/invalid data samples and generating a primitive documentation above it. \nThe current error reporting of ajv forces me to make assertions on error messages, which aren't always precise, and the whole approach of relying on message strings is quite fragile. I'd really like to have something like error codes/constants along with better data paths and messages.\n@cdmcnamara's proposal:\n{ \n  keyword: 'required',\n  dataPath: '.amount.value',\n  message: 'property value is required' \n}\nwould allow cleaner assertions on errors like:\nkeyword === 'required' \ndataPath === '.amount.value\n. Thanks :)\n. ",
    "m-reiniger": "Sure. \nOn a side note, this bug happens to all the schemas I created.\nSchema: \n``` javascript\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"NodeJS Search Result Response without Hotel Infos\",\n    \"description\": \"A response from a Search Result Call without hotel data\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"error\": {\n            \"description\": \"error code if an error occurs\",\n            \"type\": [\"integer\", \"null\"]\n        },\n        \"errorDesc\": {\n            \"description\": \"error description\",\n            \"type\": [\"string\", \"null\"]\n        },\n        \"status\": {\n            \"description\": \"operation status\",\n            \"type\": \"integer\"\n        },\n        \"statusDesc\": {\n            \"description\": \"status description\",\n            \"type\": \"string\"\n        },\n        \"sid\": {\n            \"description\": \"search Id\",\n            \"type\": \"integer\"\n        },\n        \"offers\":{\n            \"description\": \"List of Offers\",\n            \"type\": \"object\",\n            \"patternProperties\": {\n                \"^[0-9]+$\": {\n                    \"description\": \"an offer\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"shop\": {\n                            \"description\": \"shop offer is from\",\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"name\": {\n                                    \"type\": \"string\"\n                                },\n                                \"id\": {\n                                    \"type\": \"integer\"\n                                }\n                            },\n                            \"required\": [\n                                \"name\",\n                                \"id\"\n                            ]\n                        },\n                        \"shopId\": {\n                            \"type\": \"integer\"\n                        },\n                        \"bookingId\": {\n                            \"description\": \"generated booking ID reflecting this offer, used later for deeplink logging\",\n                            \"type\": \"string\"\n                        },\n                        \"partnerHotelId\": {\n                            \"description\": \"the shops ID for this hotel\",\n                            \"type\": \"string\"\n                        },\n                        \"arrival\": {\n                            \"description\": \"arrival date\",\n                            \"type\": \"string\",\n                            \"pattern\": \"^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\"\n                        },\n                        \"departure\": {\n                            \"description\": \"departure date\",\n                            \"type\": \"string\",\n                            \"pattern\": \"^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\"\n                        },\n                        \"hotelId\": {\n                            \"description\": \"idealo hotel id\",\n                            \"type\": \"integer\"\n                        },\n                        \"rooms\": {\n                            \"description\": \"room definition\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"roomDesc\": {\n                                        \"type\": [\"string\", \"null\"]\n                                    },\n                                    \"roomType\": {\n                                        \"description\": \"usually the number of beds\",\n                                        \"type\": [\"string\", \"integer\"]\n                                    },\n                                    \"deeplinkOffer\": {\n                                        \"description\": \"link to the hotel on the shop site\",\n                                        \"type\": \"string\",\n                                        \"format\": \"uri\"\n                                    },\n                                    \"priceTotal\": {\n                                        \"type\": [\"number\", \"string\"]\n                                    },\n                                    \"priceAvg\": {\n                                        \"type\": [\"number\", \"string\"]\n                                    },\n                                    \"partnerRoomType\": {\n                                        \"description\": \"room description by the shop\",\n                                        \"type\": [\"null\", \"string\"]\n                                    },\n                                    \"currency\": {\n                                        \"type\": \"string\",\n                                        \"pattern\": \"^[A-Z]{3}$\"\n                                    },\n                                    \"breakfast\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"storno\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"stornoText\": {\n                                        \"type\": [\"string\", \"null\"]\n                                    },\n                                    \"creditcard\": {\n                                        \"type\": [\"string\", \"null\"]\n                                    },\n                                    \"bookingId\": {\n                                        \"description\": \"generated booking ID reflecting this offer, used later for deeplink logging\",\n                                        \"type\": \"string\"\n                                    }\n                                },\n                                \"required\": [\n                                    \"creditcard\",\n                                    \"bookingId\",\n                                    \"roomDesc\",\n                                    \"roomType\",\n                                    \"deeplinkOffer\",\n                                    \"priceTotal\",\n                                    \"priceAvg\",\n                                    \"partnerRoomType\",\n                                    \"currency\",\n                                    \"breakfast\",\n                                    \"storno\",\n                                    \"stornoText\"\n                                ]\n                            },\n                            \"minItems\": 1\n                        }\n                    },\n                    \"required\": [\n                        \"shop\",\n                        \"shopId\",\n                        \"bookingId\",\n                        \"partnerHotelId\",\n                        \"arrival\",\n                        \"departure\",\n                        \"hotelId\",\n                        \"rooms\"\n                    ]\n                }\n            },\n            \"additionalProperties\": false\n        }\n    },\n    \"required\": [\n        \"error\",\n        \"errorDesc\",\n        \"status\",\n        \"statusDesc\",\n        \"sid\",\n        \"offers\"\n    ]\n}\n```\nData:\njavascript\n{\n    \"cachedSid\": null,\n    \"error\": null,\n    \"errorDesc\": null,\n    \"sid\": 808,\n    \"status\": 250,\n    \"statusDesc\": \"Request Completed\",\n    \"last\": 0,\n    \"offers\": {\n        \"0\": {\n            \"shop\": {\n                \"name\": \"\",\n                \"id\": 1\n            },\n            \"shopId\": 1,\n            \"bookingId\": \"df449f7fd1cb27005bac2d2c66f190f9\",\n            \"partnerHotelId\": \"219587\",\n            \"arrival\": \"2015-08-08 00:00:00\",\n            \"departure\": \"2015-08-13 00:00:00\",\n            \"hotelId\": 47503,\n            \"rooms\": [\n                {\n                    \"roomDesc\": \"Economy Class Double\",\n                    \"roomType\": 2,\n                    \"deeplinkOffer\": \"http://example.com\",\n                    \"priceTotal\": \"336.00\",\n                    \"priceAvg\": \"67.20\",\n                    \"partnerRoomType\": \"Doppelzimmer\",\n                    \"currency\": \"EUR\",\n                    \"breakfast\": \"unknown\",\n                    \"storno\": \"yes\",\n                    \"stornoText\": null,\n                    \"creditcard\": \"unknown\",\n                    \"bookingId\": \"df449f7fd1cb27005bac2d2c66f190f9\"\n                }\n            ]\n        },\n        \"1\": {\n            \"shop\": {\n                \"name\": \"\",\n                \"id\": 1\n            },\n            \"shopId\": 1,\n            \"bookingId\": \"81d87fb7e7acbf599c11cc4039460106\",\n            \"partnerHotelId\": \"558193\",\n            \"arrival\": \"2015-08-08 00:00:00\",\n            \"departure\": \"2015-08-13 00:00:00\",\n            \"hotelId\": 85077,\n            \"rooms\": [\n                {\n                    \"roomDesc\": \"Standard-Doppel- oder -Zweibettzimmer - Super Sparangebot, ohne Erstattung, ohne Fr\u00fchst\u00fcck\",\n                    \"roomType\": 2,\n                    \"deeplinkOffer\": \"http://example.com\",\n                    \"priceTotal\": \"323.00\",\n                    \"priceAvg\": \"64.60\",\n                    \"partnerRoomType\": \"Doppelzimmer\",\n                    \"currency\": \"EUR\",\n                    \"breakfast\": \"unknown\",\n                    \"storno\": \"no\",\n                    \"stornoText\": null,\n                    \"creditcard\": \"unknown\",\n                    \"bookingId\": \"81d87fb7e7acbf599c11cc4039460106\"\n                }\n            ]\n        },\n        \"2\": {\n            \"shop\": {\n                \"name\": \"\",\n                \"id\": 10\n            },\n            \"shopId\": 10,\n            \"bookingId\": \"55855141486aa48a540cb92469912ad9\",\n            \"partnerHotelId\": \"219587\",\n            \"arrival\": \"2015-08-08 00:00:00\",\n            \"departure\": \"2015-08-13 00:00:00\",\n            \"hotelId\": 47503,\n            \"rooms\": [\n                {\n                    \"roomDesc\": \"Economy Class Double\",\n                    \"roomType\": 2,\n                    \"deeplinkOffer\": \"http://example.com\",\n                    \"priceTotal\": \"336.00\",\n                    \"priceAvg\": \"67.20\",\n                    \"partnerRoomType\": \"Doppelzimmer\",\n                    \"currency\": \"EUR\",\n                    \"breakfast\": \"unknown\",\n                    \"storno\": \"yes\",\n                    \"stornoText\": null,\n                    \"creditcard\": \"unknown\",\n                    \"bookingId\": \"55855141486aa48a540cb92469912ad9\"\n                }\n            ]\n        }\n    },\n    \"parserErrors\": [],\n    \"statistic\": {\n        \"offers\": 17,\n        \"uniqueHotelIds\": 8,\n        \"hotelInfos\": 8,\n        \"shops\": 19,\n        \"uniqueTagIds\": 90,\n        \"tags\": 90,\n        \"resultRequestCount\": 3\n    },\n    \"data\": {\n    },\n    \"searchFinished\": true\n}\nThis is a little test script I use:\n``` javascript\n\"use strict\";\nvar ajv = new require('ajv')({\"allErrors\": true}),\n    fs = require('fs');\nvar schema = JSON.parse(fs.readFileSync('schema.json'));\nvar data = JSON.parse(fs.readFileSync('data.json'));\nvar valid = ajv.validate(schema, data);\nif (!valid) {\n    console.log(ajv.errors);\n} else {\n    console.log('JSON valid');\n}\n```\n. Thanks a lot.\n. ",
    "sarus": "Wow thank you for such a fast fix. Schema compiles now.\n. ",
    "siddo420": "Yes, using the latest versions of browserify and ajv.\n. It looks like Browserify does not make require function available with the command I was using. Here is what I used instead:\nbrowserify -r ./node_modules/ajv/lib/ajv.js:ajv -o ./node_modules/ajv/lib/bundle.js\nThen, I was able to use it normally (after including bundle.js)\nAjv                  = require('ajv')\n  , ajv                  = Ajv()\n. Yes, I still load bundle.js in a script tag in HTML file.\n<script src=\"node_modules/ajv/lib/bundle.js\"></script>\nFor some reason, many of the browserify articles do not mention -r option.\n. For example, in the second case above, I should be able to do the following:\ntry{ \n  ajv.addSchema( schema, 'schema.json' ); \n  console.log( ajv.printSchema( 'schema.json' )) ;  // printSchema or getSchema whatever\n}\ncatch(e){console.log(e);}\n. Here is one way of doing it (but you can come up with a better approach:\najv.addSchema( schema, 'schema.json', /*optional*/ function( input ){\n  // check for additional input data validity (anything not covered by json schema validation already)\n  if( input is valid ) return true;\n  else return false;\n});\nWhenever, ajv.validate is called on this schema then this function will be called with the provided input for any additional checks on input data.\nMakes sense?\n. I recently started using JSON schema and ajv, so my use case was debugging :)\nI wanted to make sure refs are replaced with proper values and how final schema looks like\nI don't think formats would work in my case. I want to make sure a certain key is present (possibly with certain values) based on certain values of another key (a weird/complicated case of dependency, I guess). \n. ",
    "nsdelgadov": "@epoberezkin Can you add a link to this thread in the readme please? This help me a lot :D\nPD: sorry for my english.. ",
    "RS-Roshi": "I have found a possible way to get compiled schema with resolved references.. maybe it could help.\n```\n//Using Angular 7 Syntax\n//parent schema-- must follow id#/JSON Pointer even to resolve reference from same file as below for \"loc\"\nschema: any = {\n    \"$id\": \"schema.json\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"foo\": { \"$ref\": \"defs.json#/definitions/int\" },\n    \"hel\": { \"$ref\": \"defs.json#/definitions/int\" },\n    \"bee\": { \"$ref\": \"defs.json#/definitions/int\" },\n    \"loc\": { \"$ref\": \"schema.json#/definitions/str\" },\n    \"bar\": { \"$ref\": \"defs.json#/definitions/str\" }\n},\n\"required\": [\"foo\"]\n\n};\n  //child schema\n  defsSchema: any = {\n    \"$id\": \"defs.json\",\n        \"definitions\": {\n          \"int\": { \"type\": \"integer\", \"title\": \"Hello\" },\n          \"str\": { \"type\": \"string\" }\n        }\n  };\n  //ajv instance\n  ajv: any = new Ajv({schemas: [this.schema, this.defsSchema]});\n  //on intialize function because i want to console the output as the web intialize\n  ngOnInit(){\nthis.schema = this.ajv.getSchema('schema.json'); //output in validate function that has same schema\nthis.dereferencedObj = this.dereference(this.schema.schema);//calling the dereference function and setting its returened value\nconsole.log(this.dereferencedObj);\n\n}\n//function that will dereference the schema object and return you the compile schema object\n   dereference(obj, id = null) {\n    if(id == null) {\n      id = obj.$id\n    }\n    //lodash function to separate keys and values of object\n    .forOwn(obj, (value, key, obj) => {\n      if(value.$ref) {\n        let schemaRef //store the $ref value \n        if(.startsWith(value.$ref, '#')) {\n          schemaRef = id + value.$ref.substr(1) //for reference in same schema\n        } else {\n          schemaRef = value.$ref // when reference is external\n    }\n    obj[key] = this.ajv.getSchema(schemaRef).schema //set the resolve value to the obj[key]\n\n  }\n  if(_.isObject(value)) {\n    this.dereference(value, id)\n  }\n})\nreturn obj //return compiled schema with resolved references.\n\n}\n```. I have found a possible way to get compiled schema with resolved references.. maybe it could help.\n```\n//Using Angular 7 Syntax\n//parent schema-- must follow id#/JSON Pointer even to resolve reference from same file as below for \"loc\"\nschema: any = {\n    \"$id\": \"schema.json\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"foo\": { \"$ref\": \"defs.json#/definitions/int\" },\n    \"hel\": { \"$ref\": \"defs.json#/definitions/int\" },\n    \"bee\": { \"$ref\": \"defs.json#/definitions/int\" },\n    \"loc\": { \"$ref\": \"schema.json#/definitions/str\" },\n    \"bar\": { \"$ref\": \"defs.json#/definitions/str\" }\n},\n\"required\": [\"foo\"]\n\n};\n  //child schema\n  defsSchema: any = {\n    \"$id\": \"defs.json\",\n        \"definitions\": {\n          \"int\": { \"type\": \"integer\", \"title\": \"Hello\" },\n          \"str\": { \"type\": \"string\" }\n        }\n  };\n  //ajv instance\n  ajv: any = new Ajv({schemas: [this.schema, this.defsSchema]});\n  //on intialize function because i want to console the output as the web intialize\n  ngOnInit(){\nthis.schema = this.ajv.getSchema('schema.json'); //output in validate function that has same schema\nthis.dereferencedObj = this.dereference(this.schema.schema);//calling the dereference function and setting its returened value\nconsole.log(this.dereferencedObj);\n\n}\n//function that will dereference the schema object and return you the compile schema object\n   dereference(obj, id = null) {\n    if(id == null) {\n      id = obj.$id\n    }\n    //lodash function to separate keys and values of object\n    .forOwn(obj, (value, key, obj) => {\n      if(value.$ref) {\n        let schemaRef //store the $ref value \n        if(.startsWith(value.$ref, '#')) {\n          schemaRef = id + value.$ref.substr(1) //for reference in same schema\n        } else {\n          schemaRef = value.$ref // when reference is external\n    }\n    obj[key] = this.ajv.getSchema(schemaRef).schema //set the resolve value to the obj[key]\n\n  }\n  if(_.isObject(value)) {\n    this.dereference(value, id)\n  }\n})\nreturn obj //return compiled schema with resolved references.\n\n}\n```. I have found a possible way to get compiled schema with resolved references.. maybe it could help.\n```\n//Using Angular 7 Syntax\n//parent schema-- must follow id#/JSON Pointer even to resolve reference from same file as below for \"loc\"\nschema: any = {\n    \"$id\": \"schema.json\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"foo\": { \"$ref\": \"defs.json#/definitions/int\" },\n    \"hel\": { \"$ref\": \"defs.json#/definitions/int\" },\n    \"bee\": { \"$ref\": \"defs.json#/definitions/int\" },\n    \"loc\": { \"$ref\": \"schema.json#/definitions/str\" },\n    \"bar\": { \"$ref\": \"defs.json#/definitions/str\" }\n},\n\"required\": [\"foo\"]\n\n};\n  //child schema\n  defsSchema: any = {\n    \"$id\": \"defs.json\",\n        \"definitions\": {\n          \"int\": { \"type\": \"integer\", \"title\": \"Hello\" },\n          \"str\": { \"type\": \"string\" }\n        }\n  };\n  //ajv instance\n  ajv: any = new Ajv({schemas: [this.schema, this.defsSchema]});\n  //on intialize function because i want to console the output as the web intialize\n  ngOnInit(){\nthis.schema = this.ajv.getSchema('schema.json'); //output in validate function that has same schema\nthis.dereferencedObj = this.dereference(this.schema.schema);//calling the dereference function and setting its returened value\nconsole.log(this.dereferencedObj);\n\n}\n//function that will dereference the schema object and return you the compile schema object\n   dereference(obj, id = null) {\n    if(id == null) {\n      id = obj.$id\n    }\n    //lodash function to separate keys and values of object\n    .forOwn(obj, (value, key, obj) => {\n      if(value.$ref) {\n        let schemaRef //store the $ref value \n        if(.startsWith(value.$ref, '#')) {\n          schemaRef = id + value.$ref.substr(1) //for reference in same schema\n        } else {\n          schemaRef = value.$ref // when reference is external\n    }\n    obj[key] = this.ajv.getSchema(schemaRef).schema //set the resolve value to the obj[key]\n\n  }\n  if(_.isObject(value)) {\n    this.dereference(value, id)\n  }\n})\nreturn obj //return compiled schema with resolved references.\n\n}\n```. ",
    "andyscott": "Sounds good. I went ahead and added the tests.\nI haven't been able to figure out how to support the schema values for additionalProperties.\nIn properties.jst at line 69 the call to validate the nested schema modifies the errors and validate.errors variables. I don't quite know how to captures those nested errors and instead emit them as warnings.\n. Don't you have to first validate it to see if the property is offending and\nneeds removal?\nOn Wed, Jul 29, 2015 at 2:48 PM, Evgeny Poberezkin <notifications@github.com\n\nwrote:\nAlso I think there is no point validating nested schema if we are going to\nremove the property anyway\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/epoberezkin/ajv/pull/23#issuecomment-126106705.\n. Awesome!\n\nAnd you're right-- I think I was a bit confused (or just didn't explain myself properly). Originally I set out to just remove additional fields that failed validation. I should have named the property removeInvalidAdditionalFields or something more descriptive.\nEither way, removing all additional fields covers my use case, since I only set additionalFields = false in my schemas.\n. ",
    "pedroteixeira": "Hello, is there currenty a way to \"find possible schemas\" given a data path (or json pointer of the data) that resolves all $refs along the way (that were added into the Ajv instance)?\nI could not find from the docs, I suspect the answer is still no.. \nThanks!. ",
    "blakeembrey": "FWIW, I just run into infinite loop crash with an internal reference in my own JSON schema test.\n. @epoberezkin Nice :+1: It's still crashing for me though. If it helps, I'm using https://raw.githubusercontent.com/mulesoft-labs/raml-object-standard/master/schema.json and the validate function (https://github.com/mulesoft-labs/raml-object-standard/blob/master/test/support/validate.js) modified to use ajv.\n. Awesome, I'll give it a go. The slashes worked fine with other schema validators, so I wasn't sure about that - don't suppose you have a reference in the spec I can read? \n. Thanks :+1: It makes checking commits between version much simpler.\n. That would be cool, I'll look into it if I get a chance. For reference, http://jsonapi.org/ and other formats use pointers as the primary notation format.\nEdit: Having a consistent format can be important and, at least, the errors I'm generating is for an API and, most likely, will be consumed outside of JS.\n. No worries. I'll definitely stick to PRs though, the conversations are valuable :smile: \n. @epoberezkin Fair enough, not sure I agree. Normally I'd avoid checking in any compiled files though and I'd just publish them using the npm prepublish step.\nI'll look into a linting solution later for you. Shouldn't be difficult just to use jshint and all the newer projects tend to use eslint now too.\n. It's ok, I don't think I had made that suggestion yet. But yeah, I normally just prepublish and run it on build, and keep compiled pieces out of the source code. \n. Can confirm. This is a result of, when you don't specify the files to publish, it uses .gitignore. I'll make a PR now with the folder we need.\n. Fixed with #37.\n. @epoberezkin You can unpublish 1.1.0. I'll update that module once I use JSON pointers most likely.\n. Thanks :+1: \n. @epoberezkin Karma can't run on Travis with Chrome, you'll need either Firefox or PhantomJS.\nEdit: Also, PhantomJS installs with the devDependencies so all you need is still npm install.\n. I'll resolve the conflicts now too :+1: \n. @epoberezkin Tests passed\n. @epoberezkin Ok, tidied up the output. Strings are maximally joined together at compilation time by using single quotes consistently (I think previously missingProperty would not have joined because it used the escape method which uses single quotes).\nEdit: I used the key useJsonPointers as it seemed more natural.\n. > Ok, so apart from one place it uses getPathExpr for validation time variable names and getPath for compile time key/index. Am I right?\nYes, pretty much. I just based the code on the type of code it was replacing though, so depending on which syntax you used I replaced it with the the runtime or compile time path expression.\n\nThe option can be even shorter by the way\n\nUsing that now.\n\nit will escape quotes twice. is it intentional here?\n\nI don't think that was intentional. I should get some tests for that later.\n\nWe should keep both the current test (without json pointers) and the new one\n\nI guess you could add another test with it enabled. I just changed only fullAjv tests since those errors would have been tested already using the regular ajv object.\n\nI would rename it to toQuotedString; toString\n\nFixed.\n\nAlso the behaviour when normal properties were appended as .key instead of ['key'] is lost.\n\nAll the same behaviour is there for keys. Some more complex nested tests probably wouldn't hurt though.\nI'm guessing all the comments related to compile time and validation time keys is ok now? If I missed something or the logic is wrong, feel free to fix it up. I mostly based it on what was already there.\n. @epoberezkin Why's that? That would be an implementation detail that doesn't have anything to do with JSON pointers.\n. @epoberezkin Nope, never. You might be thinking of when it's used as a URL in a reference within JSON schemas? That's only because it's the URL fragment.\n. @epoberezkin FWIW, I pulled this logic into an external module for handling request errors with i18n - the messages were extracted from tv4 (https://github.com/mulesoft-labs/node-request-error-handler/blob/master/lib/messages/json.js).\nEdit: As I'm not multilingual, I am trusting the existing translations a bit.\n. @epoberezkin I'm probably not the best person to comment on the final implementation as I tend to structure APIs differently and prefer to provide l10n to application error instances instead of having every tool I use provide separate i18n. \nThat said, I think the implementation requires that the option is passed as a second argument into the validation function as they'll be evaluated differently at runtime. I'm not sure what the difference is between your two options though, sounds like the same thing here? I'd also use locale: 'fr' for correctness over i18n too.\n. @epoberezkin Makes sense to me. Might want to check with tv4 and try to collaborate with them on this as a general JSON schema i18n messages module to avoid unnecessary work - I can open an issue there and discuss with them, if you'd like. \n. My only comments on this is that synchronous compilation must always be first class (less for you and more for anyone else landing on this issue or wanting this feature), but I don't have any real issue with a little utility for handling asynchronous loading. #43 \nAside from that, I don't think validation should ever be asynchronous either - it's easy enough to build a utility on top of this or in conjunction with this to handle the business logic related to validation. If it's a big enough or unsolved issue, it'd be interesting to build a little utility that applies business logic as simply as a schema and returns all the errors (or the first) in the same fashion. #40 \n. Just a note, but I think this would be much simpler solved with a loop that exits once a key is in one object and not the other. However, even a sort would work here though there'd be a minor overhead. E.g.\n``` js\nvar keys = Object.keys(a);\nif (keys.length !== Object.keys(b).length) {\n  return false;\n}\nfor (var i = 0; i < keys.length; i++) {\n  if (!Object.prototype.hasOwnProperty.call(b, keys[i]) {\n    return false;\n  }\n}\n``\n. Just some thoughts, but why wouldn't you be able to usedataPathprogrammatically? I think the idea ofprettyDataPathwould end up too opinionated. A different idea would be to show the containing object in the data output. That said, I think the tooling around consuming thedataPathis the best way to go forward - if you use JSON pointers you can use https://www.npmjs.com/package/json-pointer and with the defaultdataPathyou could try something like https://github.com/component/to-function (haven't researched too much on that, maybe someone else can help you more).\n. @urlin The pattern is the regular expression content, without the slashes (that's JavaScript you are thinking of. Try it with\"^\\w+$\".\n. @urlin You need a backslash before thew, so two\\in your JSON. Otherwise you're only trying to matchw+which will only work withwww`, etc.\nEdit: Updated the example above.\n. No worries. Glad it's working now :smile: \n. I had trouble parsing everything, so I might follow up, but some initial thoughts. I prefer required and additionalProperties and everything else to use the exact path to the issue (the property that is missing, not the object). I think it's more useful in generating error messages and parsing - in any case, a consumer can always split it and go backwards but it's trickier to get the path from the message itself. \nI guess I'll have to relook into params now, I haven't updated to use the latest i18n code to evaluate it properly. \n. sh\n\u279c  ajv  cat package.json | grep version\n  \"version\": \"1.4.2\",\n\u279c  ajv  ls lib/dotjs    \nREADME.md        format.js        maximum.js       multipleOf.js    ref.js\nallOf.js         items.js         minItems.js      not.js           required.js\nanyOf.js         maxItems.js      minLength.js     oneOf.js         uniqueItems.js\ndependencies.js  maxLength.js     minProperties.js pattern.js       validate.js\nenum.js          maxProperties.js minimum.js       properties.js\nAre those the templates you mean?\n. They are not included from git, but from npm. How are you installing ajv?\n. Great, good to hear it works now :smile: Wonder what was up before...\n. Ah, no it does not :smile: Normally you would want to do an npm link which, IIRC, runs npm prepublish for you.\n. It's not so much a forced installation (I'm catering from v0.10 - v5 anyway), but it'll warn or even show a big red box on installation saying invalid peer dependency because none was installed. I don't think there's a perfect solution in package.json, because these are for dependencies (not hypothetical dependencies). I would recommend just a nice, clear warning on the README here and/or ajv-i18n. \n. @epoberezkin And, actually, you always have the peer dependency in ajv-i18n. No need for it here, and that'll fix the error. Still recommend including a notice in the docs though.\n. @epoberezkin It might be worth looking at Number.EPSILON. That way the offset is factored into the calculation from the beginning (not sure if there's a drawback with using this, except maybe false positives on really tiny cases). This is only a slightly related comment in case you weren't aware of it.\n. @epoberezkin Right, you'd use it to check the difference so you probably can't use it here (maybe, bad at math, sorry!). Also, it's just a number so I'm sure it's fine to polyfill. E.g. Math.pow(2, -52) === Number.EPSILON.\nEdit: Thought, probably wrong, but you could do 53.1980435435 % 0.0000001 < Math.pow(10, -7) where -7 is the number of decimal places of accuracy.\n. @epoberezkin Don't merge this, it's wrong. It should be an external module to work for TypeScript users. I can work with you to get a complete definition in for you, we've been maintaining one already: https://raw.githubusercontent.com/enriched/typed-ajv/66c35ae67b4e2792f0caf8db70e6ed5d937a8f94/ajv.d.ts.\n. @epoberezkin I can work with you on this. For more information, there's https://github.com/typings/typings/issues/322.\n. @epoberezkin Definitely more valuable to have it here, TypeScript users will be able to use it immediately. Let's open a new PR to collaborate on those fixes and get it supported :+1: \n. @mrchief Just for reference, type definition are meant to be external modules and not ambient definitions. That's the biggest issue you had here, since making it ambient doesn't actually make it any easier to someone using TypeScript to consume it.\nEdit: I'll try to do a PR tomorrow with the suggested changes.\n. @epoberezkin I haven't dove into improving or reviewing it much yet, but it's a start. Let me know if anything looks incorrect or if you need help to add updated definitions when working on new features.\n. @epoberezkin Quick TypeScript primer. You have primitive types: number, string, void, any, boolean. Includes any[] (array syntax) and () => any (function syntax). On top of that, you can write interfaces:\nts\ninterface Foo {\n  (): any // `Foo` is a function.\n  method (): any // Has a `method` method.\n  prop: () => any // Equivalent to `method` method, but using our primitives.\n  x: string // Another prop.\n  [key: string]: string // Dictionary.\n}\nSo, interfaces can kind of describe anything. On top of that, you have type expression (E.g. unions and intersections, etc.) which can be used in any type position or with the type keyword.\nts\ntype Bar = () => any\nNow let's use an expression to demonstrate where expressions can be valid.\nts\nfunction foobar (x: string, y: { [key: string]: Foo }): Bar\n. > Also, would that be a correct syntax?\nNo, you want:\nts\ntype FormatValidator = string | RegExp | (data: string) => boolean;\n\nWhy return values of the methods are sometimes separated with \":\"\n\nEither works, as described above.\n\nIs it possible to express it or should alteration (\"|\") be used in this case?\n\nYes, it's possible to express. TypeScript has string literal types that could be used here, but it'll probably get verbose.\n``` ts\ninterface ErrorObject1 {\n  keyword: 'foo'\n  params: {\n    x: number\n    y: number\n  }\n}\ntype ErrorObject = ErrorObject1 | ...\n```\n\nWhy Dependency and PatternGroup in ErrorParameters have \"[]\" after them?\n\nArray syntax.\n. I think everything in this PR looked valid (we could hook up a test using tsc on the .d.ts file), but you may want to replace some of those Object usages with index signatures ({ [key: string]: Foo }).\n. Odd, worked for me from master. Can you make sure it wasn't your PR you tested?\nEdit: Sorry, just saw we are checking the PR branch.\n. @epoberezkin I forgot to mention, for Promise support, you'll want to add some promise typings locally for it to work properly. TypeScript < ES6 does not have a promise type, and the promise type also requires a generic parameter.\n. ^ As does Array. It's a generic, should be Array<any>, for example.\n. Finally, for the union with an anonymous function use-case, wrap it in some extra parens for parsing:\nts\ntranspile?: string | ((code: string) => string);\n. @epoberezkin Where are you using promises, I want to check if we can improve this. Otherwise, non-ES6 TypeScript clients will get confused because Promise<> does not exist for them. Is it just you accept something that returns promises or do you actually return promises yourself? If it's the former, we can fix this and inline a type definition that's compatible for you (TypeScript is structural, it'll be clearer that way).\n. Should be more elaborate, unless you accept pretty much anything? In TypeScript, Object is pretty equivalent to any. E.g. http://www.typescriptlang.org/play/#src=const%20test%3A%20Object%20%3D%2010\n. FWIW, I have a JSON schema definition in Typings already: https://github.com/typed-typings/lib-json-schema/blob/master/v4/index.d.ts.\nThe PR looks good, subjective to @epoberezkin for formatting/whitespace/etc.\n. It's not a bug, it's caused by the command you've tried to run. You don't want to do npm install ajv inside ajv - you can not install the module inside itself. If you're trying to use it locally, you can use npm install (no ajv) to install dependency and npm link to link it to other places. Most likely, you just want to install ajv inside your project - so you'd cd into your project and run npm install ajv there.\n. Most likely because https://github.com/epoberezkin/ajv/blob/master/package.json#L21 isn't a Windows executable. I think if you change ./scripts/ to node script/ it will work on Windows.\n. No.\n. Because the definition is already written and works with typescript. All you have to do is install the module. \n. This shouldn't be merged. It's not correct for TypeScript and work in the runtime. You can read the difference between ES6 export default and export = here: https://www.typescriptlang.org/docs/handbook/modules.html.\n. Also, changing it to a class instead of a function would completely break backward compatibility for people who do use it as a function currently. You should instead enable support for both ways.\n. You should change it to this instead:\ndeclare var ajv: { \n  (options?: ajv.Options): ajv.Ajv;\n  new (options?: ajv.Options): ajv.Ajv;\n}\n. @dalcib Just FYI, but you would usually update the PR instead. It helps maintainers keep track of the discussion and changes, and generally avoids unneeded churn. To update the PR, you can just keep working on the branch and the maintainers and anyone else subscribed to the PR would see updates.\n. @dalcib You would use a namespace, it's already used here.\n. LGTM \ud83d\udc4d \n. No strong arguments either way. Personally, I've built assert into my own validation library but it's used for type assertion (not validation - E.g. does the shape match, not the validations match).\nIt does look like the code is relying on the typeof check for the return to know whether it's async (I'm unfamiliar with the async API here to be honest, is that a promise return?). Is there a better way to do that? I realise most people should fix that immediately, but having side effects that might still be running while the function has thrown is iffy.\n. Ideally it would only exist in the libraries. I commented on @plantain-00's original PR, hope you don't mind \ud83d\ude04  Having it in two places is likely to cause confusion, and if releasing a new version is the concern you can actually just copy it locally and change typeRoots with TypeScript.\nOne thing to note about this PR - it breaks compatibility with TypeScript 1.x and should be released as a major version. As for removing the definition from DefinitelyTyped, the instructions are in https://github.com/DefinitelyTyped/DefinitelyTyped#removing-a-package.. Haven't tested it, but it looks good. If the next major version promotes using it only as a class, go for it! The var ajv form was mainly there to support the two different styles of creating the object (based on the docs a while back IIRC).. @epoberezkin It makes sense, added in TypeScript 2.2 (https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#object-type). It's much more useful than Object since pretty much everything extends from the type Object while object is a new type primitive (JavaScript primitives aren't assignable).. Sounds reasonable. There\u2019s only two reasons for the custom promise to exist:\n\nSupporting old TypeScript versions before the Promise type (like really old now)\nSupporting ES5 compilation without requiring promises. @krenor Phone typo, sorry. Was meant to say without. But TypeScript ported PromiseLike to the old definitions without Promise a while back anyway to support some browser APIs IIRC (https://github.com/Microsoft/TypeScript/blob/32c63a26284c0fcf6dfbdce709f3da680c2940d9/lib/lib.es5.d.ts#L1298) so this isn't a concern, it's a good change since they did that.\n\n@epoberezkin I don't think so. Pretty sure the version support is the same as other features your using, so all good. . @epoberezkin This should be good and all the parts were well documented above by @dcolthorp \ud83d\udc4d (just needs the generic param and default it to = any). I tend to have done this myself in the past by wrapping a function like const x = (x: any): x is Person => validate(x).. You're right, feel free to remove the hyper-schemas. By the way, maybe you could make a note about draft-03 compatibility in the README? I tried it (it was a pipe dream), but it failed to compile or work. I ended up using json-schema-compatibility to get it to work instead (https://github.com/mulesoft-labs/osprey-method-handler/blob/master/osprey-method-handler.js#L301-L305)\n. This breaks with noImplicitAny.\n. This breaks because this library is not an export default. You can read about what export default and export = means https://www.typescriptlang.org/docs/handbook/modules.html\n. ",
    "solsson": "@epoberezkin It looks like the current build in npm, 1.1.0, is broken, at least for use with webpack. I got errors like Error: Cannot resolve 'file' or 'directory' ../dotjs... when bundling. Fixed through cd node_modules//ajv/ && npm install. I guess the prepublish script should have done this but instead the dotjs folder had only the readme.\n. ",
    "simon-p-r": "Ok I use z-schema and it provides these hooks for you, if you are performing any meaningful validation you have to do IO to lookup up values\n. What about a format that requires a webservice to validate it?  Such as http://ec.europa.eu/taxation_customs/vies/faq.html\n. I see your unwilling to make change so will close issue, what is Q11?\n. Sure thanks for your comments, I like the speed and simplicity of your approach so may have to think about how to separate business logic from the initial schema validation you refer to.\n. $async keyword is good.  Can I use macro method with a callback as 3rd parameter?\n. @epoberezkin is the function registered for custom keyword synchronous and have to return a boolean to indicate it is valid?  What is this parentSchema that I can access as 3 parameter?  I build each key of my schema with z-schema from a definition so I can reuse each piece, will this help me?   \n. @ozum I have written a json schema based plugin for hapi, it uses z-schema currently which I want to replace with ajv in near future.\n. Yes node style callback, from what I understand from reading the docs it must be a promise resolving to true or false.\n. Ok thanks for the answer, the reason why I asked is because with callbacks I can get the context of why the validation fails as opposed to just the true or false value returned by the promise.  Are you open to callback style being implemented?\n. Ok thanks for your response\n. Thanks I will check it out, what problems were you encountering with code generation?\n. Ok thanks I will look at these suggested options\n. ",
    "trikadin": "@epoberezkin, how to add asynchronously compiled schema to the ajv instance? Something like that:\njs\najv.compileAsync(schema, (err, compiled) => {\n  if (err) {\n    return;\n  }\n  ajv.addSchema('testSchema', schema);\n})\nWill this works properly?\n. So, the only difference between compile and addSchema is the lazy compilation (and, well, associated key), am I right? Sounds kinda confusing, especially the last sentence. Any plans to refactor API?) Something like \njs\najv.addSchema(schema, options: {lazy: true, async: false, key: 'someSchema'})\nIn fact, I'm entusiastic to send some PRs, you don't mind?\n\nYou have the wrong order of parameters in your sample btw.\n\nYep, thank you)\n. > I am not sure why do you need it though. Are your schemas supplied at run time? \nYep, all of the schemas (except of core) stores externally, and it can change at runtime -- that's why I need extra logic to validate them.\n\nOne approach is to create your own meta-schema (that would have minProperties: 1, I guess), add it to ajv (with addMetaSchema) and to use its id as $schema property in your schemas. See validateSchema reference.\n\nSchemas without $schema will fallback to the default v4/v5 schema.\n. The problem is that I have A LOT of extra-logic for my external schemas (like root-only keywords, required properties, blacklisted properties for internal schemas) :C\n\nIf you really must change the default meta-schema nobody can stop you from using the option meta: false, then adding your own meta-schema with the same ID as the default one has, using addMetaSchema(schema, id, false) (the last false will prevent it from being validated regardless the lack of the option that prevents schema validation - there will be nothing to validate it against yet). I don't like it though as you could guess :). I think the first approach is cleaner.\n\nThat's what I do right now, but it's hacky and weird, and it means I use internal API, which one can be broken without updation major version.\nIs any plans to add an explicit way to set the default meta-schema?\n. @epoberezkin I've seen your proposition about the \"errors\" keyword -- why you don't support it? Waiting for something?\n. > I've just added this idea yesterday if you've noticed :) \nOh, sorry, I thought I didn't notice it before. \n\nThe motivation for the keyword is that that many bug reports and feature requests I saw were related to people trying to generate custom error messages based on some information from the schema. So I thought that having errors explicitly defined in the schema would make their life much easier.\n\nTotally agree --  for example, \"not\" keyword, in fact, says nothing about the reason of fail)\n. ",
    "rdsubhas": "Firstly thanks so much. ajv with custom keywords has helped us a lot with business logic validation in our backend. We consolidated a whole bunch of controller-level validations into JSON-Schema with custom keywords. The net effect is far far better than writing individual validation code.\nKeeping the standard aside, the value offered by the combination of ajv, JSON Schema and async keywords would be really big! But anyways, we are already thankful to ajv as it is.\nA hidden reason why I would personally like to see async keywords, is that it will also clear out the current error handling. The callback would be function(err, valid)  so I don't have to separately access the error object (even though its safe, its a bit disconcerting to see) :smiley: \n. @epoberezkin thank you so much! Sorry I couldn't follow up to your previous question, we do quite a bit of things like detecting duplicate entries, non-overlapping ranges, and a few more! I'll post a list of things very soon :+1: Thanks for the docs, inline functions look really interesting as we now have access to the parent, that opens up a new range of possibilities :)\n. ",
    "jonasfj": "One could probably forbid default under allOf branches... (I suspect allOf is rarely used too).\nBut to determine of anyOf can have multiple branches we would have to build static analysis tools for JSON schemas ... Wow, that got complex really fast :)\nOr you define that you choose the first anyOf branch... \n. Roll back seems hard.. Perhaps it's simplest (and possibly cheapest) to create a new object and\nreturn along with the result. That way you don't mutate the input object too...\n. Nice this looks good, if not a bug it's definitely a major footgun I would like to be without.\nIf not desired as default behavior for useDefault: true, it could be done with an option like useDefault: 'clone'. But it seems sane to have this as the only possible behavior.\n. +1 for useDefaults: 'clone' as having two options that can conflict is less fun...\n. I think almost anyone running into this is will call it a bug :)\nMaintaining this obscure \"feature\" in the name of backwards compatibility, is a bit extreme.. Similar to how Microsoft maintains bugs in Excel because people rely on them :)\nWe could do the 'clone' option, and then make it default in the next major release. But I doubt anyone is intentionally relying on this :)\nEspecially, considering that useDefault was only recently introduced.\n. ",
    "atrniv": "@jonasfj you might be interested in taking a look at the defaults implementation in Themis. One of the main reasons I wrote it was because of the lack of support for defaults in most existing validators. We've been using it in production quite successfully for quite a while.\n@epoberezkin, It is not a simple solution to implement and it does have a significant performance impact but ultimately it provides a level of convenience which makes up for the shortcomings.\n. ",
    "paglias": "@epoberezkin does default support passing a function that returns a value?\nFor example:\nproperties: {\n    id: {\n      type: 'uuid',\n      default: function () { return uuid.v4() }\n    },\n}\nIf it doesn't then it would be very useful\n. @epoberezkin thanks!\n. @epoberezkin would you mind pointing me to the implementation of default? I'm having some problem finding it,\nI came up with this but it's probably wrong:\nschemaValidator.addKeyword('uuid', {\n  type: 'uuid',\n  statements: true,\n  inline (it, keyword, schema) {\n    return `data || ${generateUUID()}`;\n  },\n});\n. @ngryman sorry but it's been a long time and I don't remember if I found the solution. I'm not using ajv now \n. ",
    "ngryman": "@paglias I have the exact same need to generate a uuid if not specified. Would you mind sharing your solution? Thanks!\n. @epoberezkin Sorry to revive this but what if you do need to reference external schemas in oneOf and can't really split them like your proposed solution?\nTo take the above example with ref:\njson\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"transfer\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"modes\": {\n          \"type\": \"array\",\n          \"minItems\": 1,\n          \"additionalItems\": false,\n          \"items\": {\n            \"oneOf\": [\n              { \"$ref\": \"ftp\" },\n              { \"$ref\": \"email\" }\n            ]\n          }\n        }\n      },\n      \"required\": [\n        \"modes\"\n      ],\n      \"additionalProperties\": false\n    }\n  },\n  \"additionalProperties\": false,\n  \"required\": [\n    \"transfer\"\n  ]\n}\nThanks!\n. @ppoo24 Could you shorten your code sample please? It makes the issue a pain to read \ud83d\ude05. Thanks!\n. ",
    "rondonjon": "Hello @epoberezkin,\nI just ran into this problem ...\n\nnot only the required code is complex to implement but also because the meaning of these defaults is very ambiguous.\n\nI don't quite understand.\nI am dealing with a property that can either be false or an object. If it is an object, AJV should check its child properties and use a default in case that a child property is missing. This is currently not working.\nSince AJV is treating both cases well during validation, the code that selects the correct schema subbranch must already be there and properly working. Shouldn't it then also be possible to load the default value from this particular schema subbranch and use it if no actual value is present?\nFrom your comment, I conclude that defaults are currently implemented elsewhere, but then my naive assumption would be that the problem could be solved by moving the \"default picking\" code to run right after the branch selection?. Thanks for the clarification, @epoberezkin !. ",
    "mnpenner": "Would it not make more sense to implement this in a similar fashion to $ref? e.g.\njs\n\"key\": {\n    \"type\": \"string\",\n    \"title\": \"Key\",\n    \"default\": {\"$uuid\": \"v4\"}\n}\n. Gahhh... I spent like an hour trying to figure out why my anyOf wasn't working -- because it wasn't switching on the \"constant\" like I was expecting it to :sob: . ",
    "abalmos": "\nWhat about referenced schemas that are missing? I think that is more common use case. I was going to solve it with throwing exceptions that contain missing schema inside.\n\nThis is actually the my motivating use case. Somehow, after all that, I didn't write a test case for missing refs and completely missed that my changes don't do what I really wanted after all...\nI think I actually prefer your suggestion of just throwing an exception that has the refs of the missing schema(s).. I'm not that comfortable with the code lib/compile yet. Is there an obvious place to add it?\nBelow are responses to your other questions for perspective.\n\nWhy it is needed to have multiple lookup functions? I think one would suffice per ajv instance, in cases when not, the loop can exist outside of ajv, inside the supplied function.\n\nMy particular use case is a library that has an unknown number of additional packages, each loaded at the will of the application programmer, that may or may not bring in additional schemas (some packages may even $ref schemas from other packages). There needs to be some way of loading them after the AJV object is instantiated.\n\nI would pass it via options, if anything\n\nThe same issues as above\n\nWhat about asynchronous loading? This is not covering it.\n\nIt doesn't appear asynchronous validation is supported by ajv. It is not clear to me how I could block ajv in an acceptable way while waiting for an async on-the-fly load.  If #40 results in asynchronous validating then I would gladly extend the lookup to support it as well.\n. @epoberezkin It looks like I can already sort of do what I need using the scheme you proposed. With options: { missingRefs: 'fail', verbose: true } ajv.validate returns false on a missing reference and ajv.errors indicates what schema id was missing.\nA couple of issues/questions:\n1. It would be nice if all the errors encountered were in the ajv.errors array. It looks like maybe that was the intention but only the last errors seems to survive?\n2. It would be nice if the ajv.errors array was attached to the Error object before it is thrown (assuming missingRefs is not set). \n3. {missingRefs: 'fail'} causes ajv to console.log the error message. With 2. this isn't an issue.\n4. The errors array is apparently lost (?) when calling the validate function returned by getSchema.\nMy apologizes if I am missing something obvious. I am new to dot.\n. @epoberezkin It looks like everything I need. I should get back to this soon and when I do I will report back.\nThanks for the getting it in for me.\n. With #51 and #52 compileAsync does exactly what I need!\n. ",
    "jmtoball": "exactly. I added a description. sorry about the confusion ;-)\n. That would be awesome! I can definitely provide you with the German messages then, yes.\n. Sure, I will look into it later today. Thank you, that was fast :+1: \n. ",
    "YChebotaev": "@blakeembrey Yes. I think it's better solution. Thanks.\n. ",
    "redben": "Thanks ! passing $ref works.\nBy the way I think I got confused by the signature in the docs:\n\n.validate(Object schema|String key|String ref, data) -> Boolean\n\nShouldn't it be this instead ?\n\n.validate(Object schema|String key|Object ref, data) -> Boolean\n. Would this be the right test for this feature?\n\njavascript\n    it('should validate against previously compiled schema by ref', function() {\n      ajv.compile({ id: '//e.com/defs.json', definitions: { def: { type: 'string'}} }) .should.be.a('function');\n      ajv.validate('//e.com/defs.json#/definitions/def', 'a') .should.equal(true);\n      ajv.validate('//e.com/defs.json#/definitions/def', 1) .should.equal(false);\n    });\n. Yes I saw that. I am actually using addSchema() then validate() or getSchema() because I have a bunch schemas scattered in different files, compile would complain if it can't resolve a ref to a schema that has not been added yet.\nI tried to dig through the code to see if I can help with a pull request. Is it getSchema that needs work? or do I need to go to sleep :) (late in here...)\nSomething like :\njavascript\n   function getSchema(keyRef) {\n        var parts = keyRef.match(/^([^#]+)(#\\/.+)?$/),\n            schemaObj = _getSchemaObj(parts[1]),\n            v;\n        switch (typeof schemaObj) {\n            case 'object': \n               v = schemaObj.validate || _compile(schemaObj);\n               break;\n            case 'string':\n               v =  getSchema(schemaObj);\n        }\n        return ( parts[2] ) ? v.refs[parts[2]] : v;\n    }\nAnd hey ajv rocks ! Thanks for this module.\n. ",
    "guymguym": ":+1: I would also like to be able to pass the JSON-pointer directly to getSchema, although the workaround to use getSchema({$ref:ref}) works. Thanks.\n. ",
    "AlbanMinassian": "Ho ... thanks\n. copileAsync ? not google found \n. thanks\n. ",
    "cartant": "No worries. Thanks.\n. ",
    "urlin": "The same problem:\njavascript\n[ { keyword: 'pattern',\n    dataPath: '.name',\n    message: 'should match pattern \"^w+$\"' } ]\n. I see, thank you\n. ",
    "marbemac": "I see the failing assertion.. if this change is accepted, then I suppose that assertion can be removed for the required validation. Happy to do that.\n. Fair enough! All set - let me know if I've missed anything.\n. Yup! Those are the ones. I can get them by running npm install & npm run build in the node_modules/ajv folder, but that seems less than ideal. All of my team members will need to do that on every new machine.\nI now see they're included in the .gitignore file so perhaps this is intentional?\n. Weird, just deleted the folder and re-installed and all is good. Closing, thanks!\n. I forked for this pull (https://github.com/epoberezkin/ajv/pull/55) and I guess pulling down from \"marbemac/ajv\" doesn't run the same compile step maybe? In any case, all good!\n. ",
    "sadiqhabib": "Hi @cemtopkaya did you implement ajv with redis ?. ",
    "nichtich": "Thanks for pointing to the sources and the second issue. My original bug report, however remains:\njson-schema-validation spec. section 7.3.6. defines validation of the uri format as following:\n\nA string instance is valid against this attribute if it is a valid URI, according to RFC3986\n\nRFC 3986 lists some examples of URIs, several of them not containing a /. The specification contains a detailed grammar. Any regular expression for testing URI should allow at least this formal language. Sure ajv does not need to implemented all of its complexity but use a simplified regular expression.\n. ",
    "johanlelan": "I found this regular expression for generics URI on Regular Expression Cookbook (https://github.com/shihyu/Regular_Expressions/blob/master/O'Reilly-Regular%20Expressions%20Cookbook(2nd%20Edition).pdf)\n^([a-z][a-z0-9+\\-.]*:(\\/\\/([a-z0-9\\-._~%!$&'()*+,;=]+@)?([a-z0-9\\-._~%]+|\\[[a-f0-9:.]+\\]|\\[v[a-f0-9][a-z0-9\\-._~%!$&'()*+,;=:]+\\])(:[0-9]+)?(\\/[a-z0-9\\-._~%!$&'()*+,;=:@]+)*\\/?|(\\/?[a-z0-9\\-._~%!$&'()*+,;=:@]+(\\/[a-z0-9\\-._~%!$&'()*+,;=:@]+)*\\/?)?)|([a-z0-9\\-._~%!$&'()*+,;=@]+(\\/[a-z0-9\\-._~%!$&'()*+,;=:@]+)*\\/?|(\\/[a-z0-9\\-._~%!$&'()*+,;=:@]+)+\\/?))(\\?[a-z0-9\\-._~%!$&'()*+,;=:@\\/?]*)?(#[a-zA-Z0-9\\-._~%!$&'()*+,;=:@\\/?]*)?$\nIt validates your urn @nichtich !\nIt validates the relatives URLs !\nAnd of course, classics URLs :)\nThere is just one improvement to think about: case sensitive URIs.\nFor me URI are case insensitive but in real life, it depends on web server implementation.\nSo if you want to manage case sensitive URIs, juste replace a-z by a-zA-Z in all occurences.\nHope that helps!\n. First of all, thanks for this useful library! \nI just want that your regular expression takes every URIs values. \nIn the section 3 \"Syntax component\" of RFC3896, the author underlines \"When authority is not present, the path cannot begin with two slash characters (\"//\").\"\n. ",
    "quilicicf": "Great ! \nLooks like I'm missing a bit of background to fix this myself but I'd be interested in testing your fixes against my use cases. Please let me know when you've looked into it :) \n. @epoberezkin works just fine thanks a lot !\n. I like that tool (tonicdev) thanks for sharing :)\n. Works like a charm thanks :)\n. OK, I knew it was a long shot. \nIt definitely deserves an npm package indeed. \nI'll do that thanks. \n. @marjan-georgiev @epoberezkin \nI've written a node module indeed, jp2p (JSON pointer to position). \nAnd I completely forgot to post it here, my bad. \nTell me if that helps!. ",
    "nielskrijger": "Fair enough. Thanks for the explanation.\nGood work!\n. ",
    "jayrylan": "This library and all the work by @epoberezkin is amazing, but this is a strange deviation from what most users expect. I'd love to submit a pull request if you're open to any of these suggestions:\n\n\nAllow .validate(data) to accept a second parameter which is a callback in the typical node.js style of (err, data) => void... so if err = null then you know your validation was successful.\n\n\nAllow .validate(data) to either return true or an instance of Error, then users would simply be able to do something like this following:\njs\nconst result = schema.validate(data)\nif (result === true) {\n  console.log('valid schema')\n} else if (result instanceof Error) {\n  console.log(result)\n}. @epoberezkin Apologies for the noise of the notification, my fault for missing the FAQ -- you've definitely had to address the issue plenty of times.\n\n\nLooks like the async validation is exactly what I need. Thank you so much!. ",
    "aaronshaf": "Bahhhh just discovered allErrors\n. Not sure if this is related, but multipleOf 0.01 fails to validate 4.18, etc.\n. {removeAdditional: true} was throwing it off.\n. ",
    "ghost": "It would be great to use the forked version of json-stable-stringify because there is no activity since 9 months on the original json-stable-stringify repo\n. ",
    "jsdmc": "Aha, I got it. Thanks. Maybe issue can be closed and referenced?\n. Any plans also to add possibility to specify \n- custom messages\n- custom validation functions which can validate property based on values of other properties ?\nThe use case is to to use validator not only on backend but also in frontend. So defining custom messages is really a nice feature (defining different messages even for the same keyword but for different properties).\nCheers\n. Yeah, I already played a bit with this repository. But I must admit for now creating custom messages looks a bit messy because you have to handle all keywords and other params. For example, for displaying in UI nice message ('Please select correct date format') that corresponds to 'format' keyword you have to create 2 matchers - 1 for processing keyword and second for possible format values\njavascript````\nformat: {\n    en: 'should match format \"{{=e.params.escaped}}\"'\n}\nRegarding custom messages - it's just nice to have all validation declared (including validation based on few fields)  in one place using one tool)\nThanks\n. ",
    "Santinell": "If use second variant we can wrote even something like:\nJSON\n      \"x-transform\": {\n        \"transformation\": \"json\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"field\": {\n            \"type\": \"string\"\n          },\n          \"operation\": {\n            \"type\": \"string\"\n          },\n          \"value\": {\n            \"oneOf\": [{\n              \"type\": \"string\"\n            }, {\n              \"type\": \"integer\"\n            }, {\n              \"type\": \"array\"\n            }]\n          }\n        }\n      }\nAnd validate it inside:\njavascript\najv.addKeyword('x-transform', function(opts, data, cb) {\n   if (opts.transformation === 'json') {\n     try {\n       var obj = JSON.parse(data);\n     } catch (err) {\n       return cb(err);\n     }\n     return ajv.validate(opts, obj, cb);\n   }\n   cb('Transformation '+opts.transformation+' not found');\n})\n. \u042d\u0445...\nMain purpose - is to give user a tool to modify data: sanitize, deserialize or prepare for next manipulating with them.\nExample - library is not for json-schema, but have modificators ('trim', 'upper' rules):\nhttps://github.com/Atinux/schema-inspector\n. tv4 not best example of json-schema validator, but can use custom validation keywords.\nAs can i see - the most fast way to make custom keywords - using rules, BUT - writing custom \".jst\" templates is not best way IMHO. I think better make it simplier\n. Cool :+1: \nThanks!\ntesting, testing :)\n. +1 for this feature. if I have enough time - I can try to create PR.\n. When i try to run tests - i get:\n\nmocha spec/*.spec.js -R spec\n\nmodule.js:340\n    throw err;\n    ^\nError: Cannot find module './JSON-Schema-Test-Suite/remotes/integer.json'\n. Thanks.\nI have some error on changind data:\nCannot assign to read only property 'typeId' of 12\nschema:\n...\ntypeId: {type: 'integer'},\n...\ndata:\n...\ntypeId: '12',\n...\nCode \n```\n{{? $typeSchema && !$typeChecked  }}\n  {{\n    var $schemaPath = it.schemaPath + '.type'\n      , $errSchemaPath = it.errSchemaPath + '/type'\n      , $isArray = Array.isArray($typeSchema)\n      , $method = $isArray ? 'checkDataTypes' : 'checkDataType'\n      , $propertyKey = it.util.getKey(it.schemaPath)\n      , $passData = $data + it.util.getProperty($propertyKey);\n  }}\nif ({{= it.util$method }}) {\n    {{? it.opts.coerceTypes && $propertyKey !==  undefined && {{=$passData}} !== undefined }}\n      {{= $passData}} = {{= it.util.coerceType($typeSchema, $passData)}};\n    {{??}}\n      {{# def.error:'type' }}\n    {{?}}\n  }\n{{?}}\n```\n. Full error message:\n```\nundefined:1\n validate = function (data, dataPath) { 'use strict'; var vErrors = null;  var errors = 0;      if ((data && typeof data === \"object\" && !Array.isArray(data))) {   var errs__0 = errors;var valid1 = true; for (var key0 in data) {  var isAdditional0 = !(false  || key0 == 'name'  || key0 == 'typeId'  || key0 == 'checked'  ); if (isAdditional0) {  delete data[key0];  }  }   var data1 = data.name;  if (data1 !== undefined) {   var errs_1 = errors; if (typeof data1 !== \"string\") {  data1.name = data1.name;  } var valid1 = errors === errs_1; }  var data1 = data.typeId;  if (data1 !== undefined) {   var errs_1 = errors; if ((typeof data1 !== \"number\" || (data1 % 1))) {  data1.typeId = parseInt(data1.typeId);  } var valid1 = errors === errs_1; }  var data1 = data.checked;  if (data1 !== undefined) {   var errs_1 = errors; if (typeof data1 !== \"boolean\") {  data1.checked = Boolean(data1.checked);  } var valid1 = errors === errs_1; }   }  else {  var err =  { keyword: 'type' , dataPath: (dataPath || '') + \nTypeError: Cannot assign to read only property 'typeId' of 12\n    at validate (eval at localCompile (/home/pavel/Documents/ajv/lib/compile/index.js:75:12), :1:685)\n    at Object. (/home/pavel/Documents/ajv/test.js:35:13)\n    at Module.compile (module.js:435:26)\n    at Object.Module._extensions..js (module.js:442:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:313:12)\n    at Function.Module.runMain (module.js:467:10)\n    at startup (node.js:136:18)\n    at node.js:963:3\n```\n. changed file validate.jst from line 104 to 115 \nAnd also i don't know how use coercion only for user schemas, and don't coerce data of internal schemas...\n. Looks like {{= $passData}} evaluetes to value of field, not to field name as i thinked...\ndotJS is very hardcore ^^\n. How get variable name to rewrite it value?\nfor example on root level for simple fields that simple:\n$propertyKey = it.schemaPath.split('.').pop();\nvar field = 'data.'+$propertyKey;\nbut when i use array or object...\nOr may be i do something wrong?\n. how we can coerce array?\narray can have several types in items...\n. Yes, i mean some schema like that:\n{\n  type: 'object',\n  properties: {\n    arr: {\n      type: 'array',\n      items: [{type: 'integer'}]\n    }\n  }\n}\nWe can coerce if array have one type of values. but can't if several\n{\n  arr: ['1', '2', '3']\n}\n->\n{\n  arr: [1, 2, 3]\n}\n. Because in arrays order of types is not guaranteed\nfor schema\ntype: 'array',\nitems: [{type: 'integer'},{type: 'boolean'},{type: 'string'}]\ndata can be\n[1,'false',true,6,'12', false, '0']\nand we don't know how cast this types\n. My mistake - i thinked that array in types is equal items: { oneOf: [...] }\n. Looks like I overestimated myself. It was too difficult for me...\n. Super! You are awesome!\n. ",
    "twhitbeck": "I found a workaround\n- npm install -g browserify\n- npm install\n- browserify lib/ajv.js -o ajv.standalone.js -s Ajv\nThen my requirejs module looks like\njs\ndefine(['ajv.standalone'], function(Ajv) {\n  var ajv = new Ajv();\n  ...\n});\nUsage of locally installed browserify would be possible. Another npm script could be added to package.json to do this.\nJust read that sometimes this approach would need to use derequire to prepare the module for consumption by require.js. Looks like it's not necessary with Ajv, but possibly if this is being attempted for other libraries.\n. ",
    "Duncan00": "Thanks~ i just use https://www.npmjs.com/package/json-schema-defaults before doing validation now.\nvar defaults = require('json-schema-defaults');\nvar default_json = defaults(validate.schema); // <~ cannot set default value to $ref properties\n_.defaultsDeep(payload, default_json);\n. Schema:\n``` javascript\n{\n  \"id\": \"/fail\",\n  \"properties\": {\n    \"status\": {\n      \"enum\": [\n        \"fail\"\n      ]\n    }\n  }\n}\n{\n  \"id\": \"/success\",\n  \"properties\": {\n    \"status\": {\n      \"enum\": [\n        \"success\"\n      ]\n    }\n    }\n}\n{\n   \"id\": \"/do_somethings\",\n   \"oneOf\": [\n    {$ref: \"/success\"},\n    {$ref: \"/fail\"}\n   ]\n}\n```\nData:\njavascript\n{\n  \"status\": \"neither_success_or_fail\"\n}\nIn errors, it would be nice to have one more field, say \"absolute_schema_path\", showing where the error come from:\n``` javascript\n[\n    {\n      \"dataPath\": \".status\"\n      \"keyword\": \"enum\"\n      \"message\": \"should be equal to one of values\"\n      \"schema\": [\n        \"success\"\n      ],\n      \"absolute_schema_path\": \"/success\"\n    },\n    {\n      \"dataPath\": \".status\"\n      \"keyword\": \"enum\"\n      \"message\": \"should be equal to one of values\"\n      \"schema\": [\n        \"fail\"\n      ],\n      \"absolute_schema_path\": \"/fail\"\n    },\n  {\n    \"extra\": {\n      \"dataPath\": \"\"\n      \"keyword\": \"oneOf\"\n      \"message\": \"should match some schema in oneOf\"\n      \"schema\": [\n        {\n          \"$ref\": \"/success\"\n        }\n        {\n          \"$ref\": \"/fail\"\n        }\n      ]\n    }\n  }\n]\n```\nThanks~\nIs there way to get the absolute_schema_path? or we would need to validate against each schema again separately to know more details of error of the data.\n. Thanks\nFor \"/success#/properties/status/enum\", in the second \"/fail#/properties/status/enum\", in the last related to oneOf, \"/do_somethings#/oneOf\", it helps.\nBecause we want to know which oneOf schema throw out which errors. \ne.g.\njavascript\n    {\n      \"dataPath\": \".status\"\n      \"keyword\": \"enum\"\n      \"message\": \"should be equal to one of values\"\n      \"schema\": [\n        \"success\"\n      ],\n      \"absolute_schema_path\": \"/success#/properties/status/enum\"\n    }\nWe can know this error thrown out because of not matching \"/success\" schema in oneOf.\nOr I have missed out somethings? Can \"keyword\" and \"schema\" give this information by some settings?\n. Thanks, would dig into it if I have time.\n. Thanks, \nbut when i try in 2.5.0, \"schemaPath\" is only showing \"#/properties/status/enum\" but not  \"success#/properties/status/enum\"? (where \"success\" is one of schema id of \"oneOf\" reference in current schema)\nIs it expected?\nActual:\njavascript\n{\n    \"keyword\": \"enum\",\n    \"dataPath\": \".status\",\n    \"schemaPath\": \"#/properties/status/enum\",\n    \"message\": \"should be equal to one of values\"\n}\n{\n    \"keyword\": \"oneOf\",\n    \"dataPath\": \"\",\n    \"schemaPath\": \"#/oneOf\",\n    \"params\": {},\n    \"message\": \"should match exactly one schema in oneOf\"\n}\n. Thanks, will check our codes.\n. I am only using v4 schemas, and only add v5: true config.\n``` javascript\nAjv({\n    v5: true,\nallErrors: true,\nremoveAdditional: false,\nverbose: true,\nformat: 'full',\nformats: {},\nschemas: _.values(schemas),\nuseDefaults: true,\nmeta: true,\nvalidateSchema: true,\ninlineRefs: true,\nmissingRefs: true,\nuniqueItems: true,\nunicode: true,\nbeautify: false,\njsonPointers: false,\nmessages: true\n\n})\n```\nThanks~\n. it is 4.1.0~ \ni will try~ \nThanks\n. ",
    "dancasey": "Interesting. I had been doing 1 but I checked and 2 works for me also. Thanks!\n. ",
    "niquola": "Thx, \nI've also terribly hacked it like:\njs\ninline: function (it, data){                                                                                                          \n    var $data = 'data' + (it.dataLevel || '');                                                                                        \n    var out = \"\"                                                                                                                      \n    var pairs = []                                                                                                                    \n    for(var k in data.schemas){                                                                                                       \n        var $refVal = it.resolveRef(it.baseId, data.schemas[k], it.isRoot)                                                            \n        $refVal =  $refVal.code || $refVal                                                                                            \n        if ($refVal === undefined) {                                                                                                  \n        throw new Error(\"Could not resolve\" + data.schemas[k])                                                                        \n        }                                                                                                                             \n        pairs.push([k, $refVal])                                                                                                      \n    }                                                                                                                                 \n    var attrs = pairs.map(function(p){                                                                                                \n        return p[0] + ':' + p[1];                                                                                                     \n    }).join(',')                                                                                                                      \n    return \"(function(){ var ref = {\" + attrs + \"}[\" + $data + \".resourceType]; \"                                                     \n        + \" var res = ref(\"+ $data +\", (dataPath || '')); \"                                                                           \n        + \" vErrors = ref.errors;\"                                                                                                    \n        + \" errors = ref.errors.lenght;\"                                                                                              \n        + \" return true; })()\" \n}\nit's similar to v5/switch, but little narrowed :)\nIs it good idea to submit it to v5 draft? Because, it looks useful.\n. Yes, $data would work.\nWhy not just\n{\n  id: 'http://myschemas.com/schema.json#',\n  definitions: {\n    schemas: {\n      key1: { id: \"key1\", ...},\n      key2: { id: \"key2\", ...}\n    }\n  }\n  type: { $ref: { $data: 'JSON path in data mapping to the key value } \n}\n?\n. In swagger spec i have found very similar idea:\ndiscriminator     Adds support for polymorphism. The discriminator is the schema property name that is used to differentiate between other schema that inherit this schema. The property name used MUST be defined at this schema and it MUST be in the required property list. When used, the value MUST be the name of this schema or any schema that inherits it.\n. :+1: \n. ",
    "naturalethic": "This does not appear to work with constant.  I'm using version 3.0.3.  My case is thus:\nlivescript\n    secret:\n      min-length: 6\n      max-length: 64\n    secret-repeat:\n      constant:\n        $data: '1/secret'\nI receive no validation error if secret-repeat does not match secret.  There is no unit test that I can see for using $data with constant.\n. First, thank you so much for the time spent on this.\n1. Yes, that's just a snippet, it is under properties.\n2. I'm using https://github.com/gkz/LiveScript\n3. I meant they should have the same value, as your example demonstrates.\n4. Nope!  Because the documentation here https://github.com/epoberezkin/ajv#options says it is defaulted true.\nSo, I turned that option on and my original code works without changes.\nAgain, thanks a ton for looking into it.  Does this project have a donation account I can put a couple dollars in?\n. Hey thanks.  Added $5.\n. ",
    "Reggino": "Managed to get it working by configuring Webpack properly - Just install the loader and add the following to your Webpack configuration:\n\"module\": {\n        \"loaders\": [{\n            \"test\": /\\.json$/,\n            \"loader\": \"json\"\n        }]\n    }\n. Thanks for this, it gives a lot of context to an issue i am experiencing right now.\n@epoberezkin i would like this behaviour in all validations on all my schemas and nested schemas. Is it in some way possible to use a (single) custom keyword for global ajv validation behaviour?. ",
    "Palisand": "For the following property:\n\"latitude\": {\n      \"type\": \"number\",\n      \"maximum\": 85,\n      \"minimum\": -85,\n      \"multipleOf\": 1e-8\n    }\nValidation will fail for the value 40.7593657 even when multipleOfPrecision is set to 8.. I read the option description in the docs before posting that comment. It makes no mention of 6 being the upper limit and states this option can be set \"to some positive integer N\". Did you get 6 from Math.abs(Math.round(division) - division) < 1e-N?. I am using Create React App which comes with Webpack and Babel preconfigured. As far as I can tell, the only way I would be able to use babel to transpile the sourceCode ajv generates is to use the standalone version. When I attempt to use nodent for transpiling via ajv-async, the following error is reported during the build process:\n./node_modules/nodent/nodent.js\nModule parse failed: Unexpected character '#' (1:0)\nYou may need an appropriate loader to handle this file type.\n| #!/usr/bin/env node\n|\n| 'use strict';. Yeah not babel, but it has to be related to webpack. As I've already stated, the build error is only reported when using ajv-async, and because custom loaders cannot be added to a Create React App app without ejecting, it looks like there are only 2 options when using CRA: (1) no async validation in IE environments, and (2) passing babel.transform from babel-standalone to processCode. I still have to test the feasibility of option 2. I've attempted to use ajv-async in the following way:\n```javascript\nimport AJV from 'ajv';\nimport ajvErrors from 'ajv-errors';\nimport ajvAsync from 'ajv-async';\nimport schemas from 'src/schemas';\nconst validator = ajvErrors(ajvAsync(new AJV({\n  allErrors: true,\n  jsonPointers: true,\n  schemas: [schemas.token.post, schemas.definitions],\n})));\n``. @epoberezkin I'm going to create a repo and see if I can reproduce this issue with the minimum required amount of code... which I should've done from the beginning!. Custom loader in webpack, to handle nodent apparently.. I'm trying to avoid having to write a custom loader because I do not want to eject from Create React App for a single issue.. I was able to reproduce the build issue with much less code, will create the repo and provide a link soon.\n. The truth is, I don't know if it can be considered an issue with any particular project given my current setup. I just want to provide an alternative that works for someone trying to use asynchronous validation in an IE 11 setting for a CRA app. [Here's a link to the repo](https://github.com/Palisand/ie-ajv-tester) if you want to take a look and reproduce the error locally.. @epoberezkin Is there anyway to programmatically disable asynchronous validation for JSON schemas that include$async: true`?. I've updated the repository with a solution using babel for transpilation. It's not the prettiest, but it'll have to do.. ",
    "Delagen": "For example 555555555555.22/0.01 = 55555555555521.99\nCause not works ((. Ready #606. OK fixed signature ). @epoberezkin OK ) Webstorm autoformat )). @epoberezkin You are welcome. Your project saves a lot of time in development. The only feature I still need is method of get a result schema with all macro resolved and all references included. I implemented some sort of this in my wrapper, but native method would be awesome. @epoberezkin I read this note already. Thanks.. ",
    "ozum": "Thank you for response. I tried to use combination of inlineRefs: false, inlineRefs: true with jsonPointers: true, I still cannot get #/definitions/macaddrin error object as below. In fact inlineRefs does not affect anything in my example code.\n[ { keyword: 'pattern',\n    dataPath: '/mac',\n    schemaPath: '.pattern',\n    params: { pattern: '^c' },\n    message: 'should match pattern \"^c\"' } ]\n. I'm trying to develop a Hapi.js validation plugin which would use ajv as validator. May I suggest this as a feature request then:\nBuilding referenced schemas inlined in the compiled code is a nice decision. In this case, I think it would be beneficial to store/provide referenced schema's original path as a string without compromising performance. During validation most of the time we already would have non-compiled original JSON schema at hand. So it is possible to get other details from original schema using this string path in case we need them. As a result references would still be compiled inline and we can access details from original schema. Is it viable or are there any pitfalls?\nBTW it would be much better if we can access details directly from error object, but I don't know if it would miss ajv's performance targets.\nThanks and regards,\n. Hi again,\nThat workaround would do the trick for me. However with Ajv v2.2.2, using id, verbose and even inlineRefs, I still cannot get any clue about which definition caused error:\n``` js\n'use strict';\nvar Ajv = require('ajv');\nvar schema = {\n    'type': 'object',\n    'additionalProperties': false,\n    'properties': {\n        'mac': {\n            '$ref': '#/definitions/macaddr'\n        }\n    },\n    'definitions': {\n        'macaddr': {\n            id: '#/definitions/macaddr',\n            type: 'string',\n            pattern: '^c'\n        }\n    }\n};\nvar data = {\n    mac: 'a'\n};\nvar ajv = Ajv({\n    allErrors:  true,\n    verbose: true,\n    format:     'full',\n    inlineRefs: true,\n    jsonPointers: true,\n    v5:         true\n});\nvar validate = ajv.compile(schema);\nvar valid    = validate(data);\nif (!valid) console.log(validate.errors);\n```\nI got:\n[ { keyword: 'pattern',\n    dataPath: '/mac',\n    schemaPath: '.pattern',\n    params: { pattern: '^c' },\n    message: 'should match pattern \"^c\"',\n    schema: '^c',\n    data: 'a' } ]\n. Thanks for your support and effort.\n. Awesome :) Thank you. This opens up way for custom error messages based on custom definitions such as \"mac address\", \"IBAN\" etc.\n. ",
    "seeden": "I found the ans. \nIt is feature. errorDataPath: 'property',\n. Thank you for detailed explanation\n. It is not acceptable solution because:\nWhen you will create a library and anybody use it. He will see these very ugly messages during the build and almost everybody will tell you that your library is probably broken.\n. @epoberezkin I am not talking about your library. But for example my library which is using your ajv library. I need to inform all my users about this problem because it looks like a bug in my library.  I do not want to complain but you know it is ugly\n. @epoberezkin I am generating schemas on demand because they are dynamic. I am using webpack 2 (modules false) with uglify as well. But as I told the final size is 196kb / 35kb minified gziped version.. Thanks. anyway I tried to override instanceof keyword but without any success. I have tried to override Error instead of String as well. Maybe this will be better idea. Allow string or Error object. I can create something like:\n```js\nclass TranslateError extends Error {\n  constructor(message: string, params?: Object) {\n    super(message);\nthis.params = params;\n\n}\ntranslate(t): string {\n    return t(this.message, this.params);\n  }\n}\nconst schema = {\n      type: 'object',\n      properties: {\n        id: {\n          type: 'integer',\n          minLength: 1,\n          errorMessage: {\n            minLength: new TranslateError(\"Name {name} is too short.\", { name: 'Adam' }),\n          },\n        },\n    }\n};\n```. Hi @epoberezkin.\nMaybe there is some miss understanding. I totally understand difference between string and String class.\nActually I need to use different type in errorMessage instead of string and I am not able to do that.\nIs it possible to use custom class or object instead of string as errorMessage?\nIf yes can you add some example? \nThis questions is more related to ajv-errors.\nThanks. ",
    "darrin": "The original idea was indeed to replace the string property with the correctly typed value\u2026 \n\nOn Jan 14, 2016, at 7:51 AM, Evgeny Poberezkin notifications@github.com wrote:\nyou need a previous level data + current property which is something like {{='data' + ((it.dataLvl-1)||'') + it.util.getProperty(it.dataPathArr[it.dataPathArr.length-1]) }} (assuming you are in validate.jst).\nOn the root level ($top is true) you simply can't do it (or maybe you can but the caller won't see the change, although maybe it's fine - it would still pass validation. In this case it's just data).\n\u2014\nReply to this email directly or view it on GitHub https://github.com/epoberezkin/ajv/issues/95#issuecomment-171649344.\n. I'm commenting on this:\n\nmaybe it's fine - it would still pass validation. In this case it's just data\nWhat I had in mind was that values either match the schema or need to be coerced to match the schema to pass validation. If it cannot be coerced for whatever reason it shouldn't pass validation. Just my $0.02.\n\nIt sounds like another way of getting around the level 0  shortcoming you're referring to above might be to shift everything down one level - e.g. wrap the current level 0 in an object. This would no doubt require a bigger change but should allow you to coerce level 0 properties. Just thinking aloud. \n. For example the schema is { type: 'number' } and you call var data = '0'; validate(data) \nthat should pass in case of coercion, but the caller's variable won't be updated.\nThanks @epoberezkin that case makes perfect sense. However I would want validation to fail bc we cannot change the data we cannot coerce to make the input match the schema. \nfunction increment (data) {\n   if (validate(data)) {\n       return data + 1;\n   } else {\n       throw new Error(\"Cannot increment \" + data);\n   }\n}\nAnother thought occurs to me as well... just as we have 'validate.errors' we could build a coerced object that might be accessible in 'validate.coerced' or 'validate.data'. In this way we could support coercion of primitives as well as objects as you suggest (at level-0)... but it would have to be understood that for primitives the top level value cannot change. Then that actual increment line of code would look like:\nreturn validate.data + 1;\nI don't love it by the way... but it might be a clever work-around if people needed coercion for level 0 primitives. Thoughts?\n\nmaybe you should be able to coerce array to object (together with length property), and object to array\nI definitely agree it could be used beyond strings... it just felt like the simplest 90% solution to my problem. By the way - my use case doesn't require the level-0 stuff you're talking about above. I'm perfectly happy to always pass in objects. I'm just continuing the discussion bc I realize this only makes sense for you if it's a clean general solution.\n. @epoberezkin +1 - Yes - you've nailed it.\nThe one thing that felt like we might disagree on was that I'd suggest that we don't allow coercion at the top level to indicate a pass. Rationale: the framework cannot 'correct'/coerce primitives (level-0) - therefore 'validate(data)' should be false unless type is already correct if any level-0 properties are of the wrong type.  Comments on that bit?\n. Actually on second read - a couple questions:\nstring <-> null ('null' <-> null, '' -> null, other not empty strings should fail to coerce to null)\nWhy bother with this one? Is null a type or a value? Does it hold special significance in the framework?  IMHO null is a valid value for any type - though I guess I'm not sure how this is handled in the JSON schema... so maybe this is a stupid question.\nnumber/integer <-> null (0 <-> null, not 0 should fail to coerce to null)\nI do like the idea of '' <-> null. \nBUT 0 is clearly NOT null rather '0' --> 0... right?\n. Gotcha wrt null... I still think 0 is not null... That said - I could see the case for '' - that's what I'd be faced with using this with a form most likely.\nI think you're right... coerce in order sounds like a very reasonable approach.\n. I'm looking at this through the lens of using it in web forms where I'll primarily be getting string data back. In that case - for the most part I'll be dealing with strings. This feature will be of no use to me without the basic string conversions you've laid out for boolean, number, integer and primitives in general.  \nAnd within that context\nstring<->null: '' <-> null - makes perfect sense to me.\nI struggle a bit more with this in a numeric sense: \ninteger<->null: 0<->null\nIt's self-centered but bc I don't see a use case for it... I simply wouldn't implement it.\nAs mentioned I could see many more use cases but I would forestall implementing those types of things until there was a clear story for them.\n. Evgeny - I think your proposed solution is just fine - Thank you!\n\nOn Jan 21, 2016, at 3:37 AM, Evgeny Poberezkin notifications@github.com wrote:\nI think the better approach than modifying the behaviour of the standard keyword pattern is to define the custom keyword https://github.com/epoberezkin/ajv#defining-custom-keywords, e.g. regexp, that would accept the JavaScript regular expression with flags as a string and convert it to RegExp instance:\nvar rx = str.match(/^\\/(.)\\/([gimy])$/);\nif (rx) var regexp = new RegExp(rx[1], rx[2]);\nWe also have such function in protojs http://milojs.github.io/proto/proto_string.js.html#toRegExp library.\nYou may even let it accept an object { pattern: '', flags: '' } so you neither have to worry about escaping '/' characters nor about parsing the string.\nI don't really like the option that would change the meaning of the standard JSON-schema keyword. I think using custom keyword is better for such situation.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/epoberezkin/ajv/issues/101#issuecomment-173516325.\n. \n",
    "goto100": "Thanks.\nbut I think this is a hack way, isn't there a function called getObjectByJsonPath or something...\nand I think it's impossible to get a part from current file like $ref: '#/definitions/a', I got \ncan't resolve reference #/definitions/base from id #\nerror\n. I found it, it's just stored in refs and refVal. sorry for bother you.\n. So efficient! Thank you!\n. ",
    "AVVS": "ok, ty.\n. ok, thx\n. ",
    "amcdnl": "I'm not entirely in love with this API, but this is kinda what I was thinking: https://github.com/bugventure/jsen#custom-errors\n. ",
    "Xamage": ":+1: \nThis feature would be very interesting to me, too bad it isn't handled in ajv... As amcdnl said, a format like (jsen) would be cool :\nvar schema = {\n    type: 'number',\n    minimum: 18,\n    messages: {\n        type: 'Must be a number',\n        minimum: 'No children...'\n    }\n}\nalso with the hability to provide a function :\nmessages: {\n     length: function(val, obj) {\n           return obj.otherProperty === true ? \"You're wrong\" : \"You're not right\";\n     }\n}\n. ",
    "joaoreynolds": "+1\n. Thank you! This is definitely a workaround I can live with.\nP.S. I LOVE ajv - thanks for everything!\n. Upgraded ajv to v5 and the errors went away. Thanks!. ",
    "claudio-viola": "hi @epoberezkin .  Just to add my voice.\nI believe this is a much needed feature. \nIf I understood right your  approach. If you get a validation error and if there is an invalidMessage  / requiredMessage defined for that property it will be added into the error object\nIs that so?\n. Isn't this already achievable using verbose:true  and accessing parentSchema.invalidMessage? \nWhat will the keyword add that cannot be done already?\n. hi epoberezkin. I believe I have already tried that without success\ncompile: function myValidation(bla,balb) {\n  return validation() {\n     validation.errors = []\n     validation.errors.push( .... )\n     return false;\n }\n}\nCan you provide a working example?\n. Hi there thanks for the prompt response!\nThe code was indeed partly as you showed in the end I finally realised where the issue was\nThis piece of code https://tonicdev.com/57710050b5157813007dd853/217/2.0.0  will explain better why I did not get the errors\nThe solution is to do the following  https://tonicdev.com/57710050b5157813007dd853/1\nThe code shown at https://tonicdev.com/57710050b5157813007dd853/217/2.0.0 is certainly partly my mistake in accessing the library api, there could be a slight issue as well though.\n What do you think?\n. Thanks. can be closed!\n. ",
    "crkepler": "+1. \nI'm writing an API that will use ajv (hopefully) and I need to have exact control over the messages for translation purposes. \nIdeally I'd provide a default error message for each property, sometimes not caring about what exactly caused the error (e.g. type or required).\nI'm currently using revalidator, which allows custom messages, but I'm looking forward to switching to ajv. Indeed, a much needed feature!\n. @epoberezkin: first, thanks so much for your amazing work done here. I agree, revalidator isn't standard and that's why I'm recommending our team to leave it and use ajv. Here's an example of how we implement custom messages in revalidator (FYI only, I don't necessarily suggest this approach, although it works for us):\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"organizationId\": {\n            \"type\": [\"string\", \"null\"],\n            \"required\": false,\n            \"allowEmpty\": false,\n            \"minLength\": 1,\n            \"maxLength\": 80,\n            \"message\": \"When supplied, 'organizationId' must be a string between 1 and 80 characters long.\"\n        },\n        \"name\": {\n            \"type\": \"string\",\n            \"required\": true,\n            \"allowEmpty\": false,\n            \"minLength\": 1,\n            \"maxLength\": 250,\n            \"message\": \"The organization 'name' can't be empty and it must be a string between 1 and 250 characters long.\"\n        },\nThanks for much for considering this feature, it'd be a tremendous help for us. Keep up the great work!\n. @epoberezkin all the approaches you're suggesting are flexible and easy to implement for us users. So, I have no preference for the implementation you choose. However, using a separate package seems to be less risky for development (and easier to test?), and also more extensible and decoupled from the existing code.\n. # PLEDGE: Contribute any amount to this project and I will match your contribution 100%, to reach the project goal of US$ 500.00.\nThere's still US$ 425.00 to go, so my needed match limit is US$ 212.50, which I'll happily contribute as others chip in. I prefer not to be the sole contributor and would like more people involved.\nMy pledge is valid until 4-July-2017, one year after the first contribution was made.\nPlease, contribute any amount you can:\nhttps://www.bountysource.com/issues/30029477-custom-error-messages\n. @epoberezkin: It looks awesome, exactly as I'd expect! \nI only have one suggestion, if that's OK. What do you think about adding a \"catch all\" message, for cases in which we don't want to specify an individual message for every single constraint? Using your example, see the \"message\" property I added below as an example:\n\"properties\": {\n    \"size\": {\n      \"type\": \"number\",\n      \"minimum\": 4,\n      \"multipleOf\": 2,\n      \"errorMessage\": {\n        \"type\": \"size should be a number\",\n        \"minimum\": \"size should be bigger or equal to 4\",\n        \"multipleOf\": \"size should be even\"\n        \"message\": \"size should be an even number, greater or equal than 4\"\n      }\n    }\n\"message\" in this case, is a \"catch all\" error message, with the lowest priority of them all. If there's a an errorMessage property for the violation, use it. If not, use \"message\". If there's no \"message\" defined, nothing is returned. Does this make sense? What do you think?\nThanks again for your thorough analysis on this issue. It's really exciting stuff!\n. @epoberezkin - What a privilege it was talking to you on Skype; a great pleasure to meet you. You're a first class person, not to mention one of the smartest developers I've ever met.\nThe bounty goal has been achieved and it was an honor for me to contribute to this project. I hope you get to implement this complex feature -- it looks so simple at first, but it is not.. ",
    "deragon": "Newbie to Ajv and JavaScript here...  For me, it is not clear what this issue is about.  Is it about adding custom keywords and having custom error messages associated to them?  Or is it about adding custom error messages to existing, Ajv provided keywords?\n. ",
    "crackcomm": "@epoberezkin is there a final standard that should be implemented?. ",
    "danielantelo": "hey guys, what is the right way to do this then? cannot find concrete examples in the doc. I just want to be able to change the default error messages for custom ones. thanks!. thanks @epoberezkin\nThat's a shame, as we are trying to share the schema between systems... not nice that each system then has to do work to override the validation messages :( is there a plan to integrate it into the actual json in the future?. ",
    "JaredCE": "Sorry to reopen an old issue, but does this not suggest that pattern should allow for flags? https://github.com/json-schema/json-schema/issues/188. I'd like to throw my hat in the ring and say that actually being able to get the info on why a schema was validated as correct would be useful.  . sorry for butting my nose in, but you really shouldn't try matching an email address with a regex... take a look at the wikipedia entry on email addresses to see why.. ",
    "pictin": "Ok, fair enough.\nI think adding a line or two to the documentation might help.\n\"Even if schema is referenced by other schemas it can be safely removed as dependent schemas have local references.\" - this should have given me a nice clue, but I still spent half a day poking around.\n. ",
    "marjan-georgiev": "@quilicicf did you ever get to implement this? If so, any pointers would be super helpful.. @vivekgalatage could you point me to an example on how you achieved that please?. ",
    "addexm": "@quilicicf Just used jp2p and it's awesome. Thanks!. ",
    "coderextreme": "Need to support leading . and ..\n. Or at least leading ../../ and so on\n. CC.txt\nSchema.txt\n. I see it in format.js now.  Is there someplace I can get  a URI regexp for JSON schema?\nJohn\n\nOn Jan 28, 2016, at 10:52 AM, Evgeny Poberezkin notifications@github.com wrote:\nYou can replace URI format with any regex using addFormat https://github.com/epoberezkin/ajv#api-addformat.\nOr you can change it in formats.js https://github.com/epoberezkin/ajv/blob/master/lib/compile/formats.js.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/epoberezkin/ajv/issues/108#issuecomment-176244905.\n. Ah, addFormat replaces the format, it doesn\u2019t add to it.  I will try again.\n\nJohn\n\nOn Jan 28, 2016, at 12:29 PM, John Carlson yottzumm@gmail.com wrote:\nJohn\n. Okay, here\u2019s what I did to get the files to validate.  No changes to Ajv (nearly the latest master).\n\nTo my script, I took URI out of acv/lib/compile/formats.js and put in my script, thus:\najv.addFormat(\"uri\", /^(?:[a-z][a-z0-9+-.]:)?(?:\\/?\\/(?:(?:[a-z0-9-.~!$&'()+,;=:]|%[0-9a-f]{2})@)?(?:[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?).){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+.[a-z0-9-.~!$&'()+,;=:]+)]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?).){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9-.~!$&'()+,;=]|%[0-9a-f]{2}))(?::\\d)?(?:\\/(?:[a-z0-9-.~!$&'()+,;=:@]|%[0-9a-f]{2}))|\\/(?:(?:[a-z0-9-.~!$&'()+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9-.~!$&'()+,;=:@]|%[0-9a-f]{2})_))?|(?:[a-z0-9-.~!$&'()+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9-.~!$&'()+,;=:@]|%[0-9a-f]{2})))(?:\\?(?:[a-z0-9-.~!$&'()+,;=:@\\/?]|%[0-9a-f]{2}))?(?:#(?:[a-z0-9-.~!$&'()+,;=:@\\/?]|%[0-9a-f]{2})_)?$/i);\nI did not make any changes to the regular expression.\nSo either you changed the URI code recently, or  I don\u2019t quite know what is going on.  There are other URI format issues that I will look into now.\nJohn\n. > On Jan 28, 2016, at 12:46 PM, John Carlson yottzumm@gmail.com wrote:\n\nThere are other URI format issues that I will look into now.\nSo far, it appears to be problems on our end.\n\nJohn\n. I was able to make one more thing optional in the uri format, which allowed\nhidewarning to pass as a uri.  Thanks.  There is also data with two ## but\nI think that's illegal and it's being flagged as illegal.  Thanks.\nOn Jan 28, 2016 4:23 PM, \"John Carlson\" yottzumm@gmail.com wrote:\n\nI figured out how to print data.\nUm.  We\u2019re still getting some bad URIs that look good, like\n\"#hideWarning1\u201d\nI am not sure if this is complete.  I believe it\u2019s a legal HREF attribute\nvalue though.\nJohn\nOn Jan 28, 2016, at 1:20 PM, John Carlson yottzumm@gmail.com wrote:\nWould it be possible to print out the offending URI  in the error?  We\nhave many in an array.  I know you print out the array index.   It\u2019s just\nthat we have several of these array indexes in deeply nested objects, and\nit would be easier to see the offending URI in the error output (perhaps\nI\u2019m missing a part of the API which reports the offending data)?  Yes, I\nrealize that printing out the data is bad for XSS.  Maybe there\u2019s a flag to\nturn it on?\nThanks,\nJohn\nOn Jan 28, 2016, at 12:27 PM, Evgeny Poberezkin notifications@github.com\nwrote:\nI don't think there is such thing... All the standard says it should\ncomply with RFC3986.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/epoberezkin/ajv/issues/108#issuecomment-176292458.\n. Adding \"N\" to schema fixed my issue.  Better error reporting desired.. Trying to achieve same effect with something else--any hints?   I believe I was given an example by someone developing with Altova. Why doesn't metaschema validation fail? Because you can't require one of \"properties\" or \"patternProperties\" (recursive problem)?\n\nJohn. Okay, here's my next try (should I take out the first type property??):\n\"ProtoInstance\" : {\n                        \"type\": \"object\",\n                        \"oneOf\": [\n                                {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                                \"@USE\": {\n                                                        \"type\": \"string\"\n                                                }\n                                        },\n                                        \"required\": [\n                                                \"@USE\"\n                                        ],\n                                        \"additionalProperties\": false\n                                },\n                                {\n                                        \"type\" : \"object\",\n                                        \"properties\" : {\n                                                \"#comment\": {\n                                                    \"type\": \"string\"\n                                                },\n                                                \"IS\": {\n                                                    \"$ref\": \"#/definitions/IS\"\n                                                },\n                                                \"fieldValue\" : {\n                                                        \"$ref\":\"#/definitions/fieldValue\"\n                                                },\n                                                \"-metadata\" : {\n                                                        \"$ref\":\"#/definitions/-metadata\"\n                                                },\n                                                \"@name\" : {\n                                                        \"type\":\"string\"\n                                                },\n                                                \"@DEF\" : {\n                                                        \"type\":\"string\"\n                                                },\n                                                \"@class\" : {\n                                                        \"type\":\"string\"\n                                                }\n                                        },\n                                        \"required\": [\n                                                \"@name\"\n                                        ],\n                                        \"additionalProperties\": false\n                                }\n                        ]\n                },\n\n```\n    { \"ProtoInstance\":\n            {\n              \"@name\":\"Camera\",\n              \"@DEF\":\"Camera.AimPointTest\",\n              \"fieldValue\": [\n                {\n                  \"@name\":\"description\",\n                  \"@value\":\"AimPointTest for moving camera tracking moving target\"\n                },\n                {\n                  \"@name\":\"position\",\n                  \"@value\":[4,4,10]\n                },\n                {\n```\n```\n keyword: additionalProperties\n dataPath: X3D > Scene > -children > 20 > ProtoInstance\n value: {\"@name\":\"Camera\",\"@DEF\":\"Camera.AimPointTest\",\"fieldValue\":\"|omitted|\"}\n message: should not have additional properties\n params: {\"additionalProperty\":\"@name\"}\n file: ../data/CameraExamples.json\n version: 3.3\nkeyword: additionalProperties\n dataPath: X3D > Scene > -children > 20 > ProtoInstance\n value: {\"@name\":\"Camera\",\"@DEF\":\"Camera.AimPointTest\",\"fieldValue\":\"|omitted|\"}\n message: should not have additional properties\n params: {\"additionalProperty\":\"@DEF\"}\n file: ../data/CameraExamples.json\n version: 3.3\nkeyword: additionalProperties\n dataPath: X3D > Scene > -children > 20 > ProtoInstance\n value: {\"@name\":\"Camera\",\"@DEF\":\"Camera.AimPointTest\",\"fieldValue\":\"|omitted|\"}\n message: should not have additional properties\n params: {\"additionalProperty\":\"fieldValue\"}\n file: ../data/CameraExamples.json\n version: 3.3\nkeyword: required\n dataPath: X3D > Scene > -children > 20 > ProtoInstance\n value: {\"@name\":\"Camera\",\"@DEF\":\"Camera.AimPointTest\",\"fieldValue\":\"|omitted|\"}\n message: should have required property @USE\n params: {\"missingProperty\":\"@USE\"}\n file: ../data/CameraExamples.json\n version: 3.3\n```\n--------------------------------------------------------------------------------------------------------. I either want to accept @USE or the other properties, but not both. @USE is like IDREF, and creates a reference to the corresponding @DEF propertied object, so I don't need additional properties alongside @USE.. sorry, above @'s should have capitalized word fragment after them. correctedschema.txt\nHere is the correct schema.  I want the bad schema (above) to produce fewer errors.   Thanks!. Thank god my schemas are not provided by users.   And I was just thinking about generating a schema based on data in the JSON document (profile, component).  Naughty users.\nMore about my use case.  I have certain objects that only appear under certain profiles (enumeration) and components (enumeration and integer level).   The combinatorics are such that generating all possible schemas is unlikely.  It is acceptable to accept a Full profile and check the entire schema, but that won't tell you if a certain profile or component is required for a given object.   Thus some objects in a full profile probably shouldn't be passed through a lesser profile.  Does something like this sound possible in draft-06?  Or even draft-04?  I know I can do oneOf's for profiles, but components that can be removed from documents at will that may cause some objects to become invalid seem much more difficult to validate.   This is the equivalent of providing different schema views of a schema, I think.. Here is the code that produces too many errors.  Note that the last line of output is collapsed.\nhttps://runkit.com/coderextreme/ajv-request\nIt should generate something like:\nAdding meta schema\nLoading schema\nParsing schema\nAdding schema\nSchema 3.3 added\nSchema 3.3 compiled\n================================================================================\nFile: C:/Users/coderextreme/X3DJSONLD/src/main/data/sample.json\nError reading: sample.json\nkeyword: additionalProperties\n dataPath: X3D > Scene > -children > 11 > Transform > -children > 0 > Shape > -appearance > Appearance > -material\n value: {\"ProtoInstance\":\"|omitted|\"}\n message: should not have additional properties\n params: {\"additionalProperty\":\"ProtoInstance\"}\n file: sample.json\n version: 3.3\nThe output is not exactly the same, because I ran it in my own environment.\nJohn\nSent from Mail for Windows 10\nFrom: Evgeny Poberezkin\nSent: Tuesday, September 5, 2017 4:12 PM\nTo: epoberezkin/ajv\nCc: John Carlson; Author\nSubject: Re: [epoberezkin/ajv] Reduce number of unnecessary error reportingfor nested oneOf's (#558)\nCould you please submit the working code sample to runkit.com, post the link here and the output that you propose it should generate instead of what it currently does.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I don't want any extra error processing.  I am handling thousands of JSON files, and I want to find any possible error that might crop up.  If you have a suggestion for some error processing, it would be welcome, but a simple filter not to report oneOf's will not work because there are likely some oneOf errors that I do want to report.  The oneOf's are the problem I think, but the symptom is lots of error messages.  The actual error is not a oneOf, but I think the oneOf's cause the number of errors to explode, including missingProperty and additionalProperty errors.  I want fewer error messages targeted at the actual problem, instead of wading through tons of semirelated, false positive errors. If you add \"ProtoInstance\" as a property on \"-X3DMaterialNodeSFNode\" in the schema you will see the errors disappear.  The error is in the schema.  I am working on the schema, but to debug the schema, I need accurate error messages, not error messages that go all over the schema and JSON file.  I have discovered that going to the deepest error message in the chain is often the source of the issue (in two cases), so it would be nice if ajv  found only that error automatically, and didn't report cumulative or bubbled errors.\nWe do have a handcrafted schema that works, but we are facing additional requirements, and a generated schema would be very useful.  That is what I am working on.\nIf you could suggest some kind of error processing that only reports deepest objects, or report the depth of nested errors, that would be very cool.\nI am dealing with 11 false positive errors for every actual error.. It's not removing error reports per se, it's just not generating another\nerror report when the subschema already has an error.\nJohn\nOn Sep 30, 2017 11:31 AM, \"Evgeny Poberezkin\" notifications@github.com\nwrote:\n\noneOf can fail in two cases:\n\nnone of the sub-schemas passes.\nmore than one sub-schema passes.\n\nThe second case will be differentiated by the implementation of #573\nhttps://github.com/epoberezkin/ajv/issues/573.\nThe suggestion to remove error reports for oneOf in the first case cannot\nbe accepted, as it break the general approach where a failing keywords\ngenerates an error.\nAdditional processing of errors to remove unnecessary errors (from the\napplication perspective) can be made either in code or using ajv-errors\nonce epoberezkin/ajv-errors#16\nhttps://github.com/epoberezkin/ajv-errors/issues/16 is implemented.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/epoberezkin/ajv/issues/558#issuecomment-333316038,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AArE9-ASvQNLQnb35Vitl8UomV8Vtml-ks5snl7ugaJpZM4PNNhV\n.\n. Here's the schema and sample which generates over 200 errors I believe.  I really need help reducing the number of errors.  How much will it cost to have you help?  I can pay via paypal.\n\nx3d-3.1-JSONSchema.json.txt\nsample.txt\n. Here is my repository:\nhttps://github.com/coderextreme/x3dschema\nYou should be able to run:\nsh validateone.sh sample.json\nThere may be some java errors, which you can comment out of the script.\nThanks,\nJohn. Adding a | to a definition creates an invalid URI. Does Ajv fail on invalid URIs in this case? Thanks.. You shouldn't allow illegal URI characters like | in $ref values use %7C. It's okay in definitions instead, use | there\nJohn. Okay. It was easier to change the schema generator.\nJohn\nSent from Mail for Windows 10\nFrom: Evgeny Poberezkin\nSent: Saturday, February 9, 2019 6:54 AM\nTo: epoberezkin/ajv\nCc: John Carlson; Mention\nSubject: Re: [epoberezkin/ajv] Bad URI in data for definitions does notgenerate corresponding error in errors. (#917)\nAlso see https://runkit.com/esp/5c5ec7c65448d1001534e273\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. ",
    "josdejong": "It's indeed automatically doing validation. That can get expensive for large documents, so being able to run asynchronously in a web worker would be awesome! Was on my wishlist for some future release, but it sounds like you're about to make this a no-brainer too :)\n. ah, ok, I misunderstood that. Makes sense.\n. ",
    "emanuelef": "never mind I read the documentation better:\nfull support of remote refs (remote schemas have to be added with addSchema or compiled to be available)\n. Thanks, I'll try that too.\nGreat tool!\n. ",
    "muffinresearch": "@epoberezkin thanks for the super fast patch!\n. ",
    "avindra": "Hi @epoberezkin : Thanks for the response.\nHow about moving the require statement into the opts.beautify check? I'm not sure if that would fix the issue (it wouldn't if Webpack is indeed resolving require statements statically. I can do a local test in a bit.\nTo answer your question, the build still passes, and is just a warning, but it pollutes the console with the aforementioned stack trace. Will report back in a bit.\n. Moving the require into self.opts.beautify doesn't fix it, so it looks like webpack is doing things statically. Hm.\n. Definitely don't want to go the route of hiding all warnings, as that will contain useful information for other modules. I'll try to find another way around this when I can.\n. @epoberezkin : AFAIK, browserify does not support code splitting, hot reloading or incremental builds. The latter two features completely change the game in terms of how productive you can be while writing javascript...\n@strax : thanks for the tip, will give it a shot \n. I believe the issue here is that the JavaScript community does not have a standard for loading modules dynamically.\nWebpack 2 will support System.import. I don't know what the spec is named, but  I'll definitely be testing it when it releases.\n. ",
    "idchlife": "Any luck using this for browser via webpack?\n. ",
    "strax": "I managed to suppress errors with the following plugin added to Webpack configuration: \njavascript\nnew IgnorePlugin(/regenerator|nodent|js\\-beautify/, /ajv/)\n. ",
    "jsrraman": "@strax, new IgnorePlugin(/regenerator|nodent|js-beautify/, /ajv/) worked for me. Thanks\n. ",
    "loris": "Hi, just saw that the issue has been closed. I might have missed it but latest release still generate the webpack errors. I suggest to keep it open until the warnings are removed (the IgnorePlugin trick is just a temporary workaround)\n. So what is the correct configuration to avoid This seems to be a pre-built javascript file. webpack warning?\n. ",
    "Oduig": "Hi there. I tried @strax's solution, but I'm still getting the three warnings. I ask because I am using request, which uses har-validator which uses ajv. It will take a while before the change propagates to request.\nWhat is the magic combination of words to ignore AJV webpack warnings without generating other errors?\nI apologize if this is not the right place, but I figure someone here might know the answer. Full question and fiddle on StackOverflow.. @epoberezkin Downgrading works for me. Thanks!. ",
    "d-winter": "Hey, does anybody has an idea why those warnings break my build? \nWhen I use google-cloud, which uses google-auto-auth which uses request, this crashes my webpack build:\n/Users/me/Development/MyProject/.webpack/handlers.js:243492\n    __webpack_require__(940) = function(ids, factory) {\nthis is my webpack.config.js\n```\nvar webpack = require('webpack');\nmodule.exports = {\n  entry: './handlers.js',\n  target: 'node',\n  devtool: 'source-map',\n  module: {\n    loaders: [\n      {\n        test: /.js$/,\n        loaders: ['babel'],\n        include: __dirname,\n        exclude: /node_modules/,\n      },\n      { test: /.json$/, loader: 'json-loader' },\n    ],\n    plugins: [\n      new webpack.IgnorePlugin(/regenerator|nodent|js-beautify/, /ajv/),\n    ],\n  },\n};\n```\nI am using serverless webpack.\nIs there any way to find out why this happens? Sorry, but I am not very familiar with webpack. Any help would be awesome.. ",
    "davidecarpini": "import nodeExternals worked for me, i added this rows to my server.webpack.config:\n`\nimport path from 'path';\n++++import nodeExternals from 'webpack-node-externals';\nconst CONTEXT = path.join( __dirname, \"../..\" ),\n  INPUT_SERVER_DIR = path.join( CONTEXT, \"server\" ),\n  OUTPUT_SERVER_DIR = path.join( CONTEXT, \"dist/server\" );\nexport default [\n  {\n    name: 'server',\n    target:  'node',\n    context: INPUT_SERVER_DIR,\n    node: {\n      __dirname: false\n    },\n    entry: './server',\n    devtool : 'source-map',\n    output: {\n      path: OUTPUT_SERVER_DIR,\n      filename: \"server.js\"\n    },\n    module: {\n      rules: [\n        {\n          test: /.js$/,\n          exclude: /node_modules/,\n          loader: \"babel-loader\"\n        }\n      ]\n    },\n    resolve: {\n      extensions: ['.js']\n    },\n    +++externals : [ nodeExternals() ]\n  }\n];\n`. ",
    "HugoMuller": "Hi,\nfirst of all, thanks for the work you've done. This lib is great :D\nIs this feature still in your roadmap?\nWith ajv@6.1.1, when an async custom format resolves whit false, the error contains the dataPath:\n```js\najv.addFormat('custom', {\n  async: true,\n  type: 'string',\n  validate: data => Promise.resolve(false)\n});\nconst schema = {\n  $async: true,\n  properties: {\n    foo: { type: 'string', format: 'custom' }\n  }\n};\najv.compile(schema)({ foo: 'a' }); // => data.foo should match format \"custom\"\n```\nThe validate method does not receive the dataPath, so when it rejects with a ValidationError, the dataPath is lost:\n```js\najv.addFormat('custom', {\n  async: true,\n  type: 'string',\n  validate: data => Promise.reject( new Ajv.ValidationError([{ message: 'oops' }]) )\n});\nconst schema = { foo: { type: 'string', format: 'custom' } };\najv.compile(schema)({ foo: 'a' }); // => dataundefined oops\n```\nAny chance of making a PR on this?\n. You're right, $async: true is missing in my example, but adding it does not solve the problem.\nMy example shows a custom format custom rejecting with a custom error oops. So it's related to to this issue, I think. Or maybe I misunderstand what \"custom errors\" stands for :(. ",
    "okbeng03": "I want the feature that support custom errors in custom formats\uff0cespecially when custom format function\uff0conly the error \"should match format ***\"\uff0ccan't explain more. ",
    "Nonemoticoner": "@epoberezkin ok\n. ",
    "conrad10781": "Thank you for the prompt response.\n\"what is the utility by the way?\"\n^-- It is a no-name custom utility that is a provided by a small company to\nhandle the \"shuttling\" of data from our platform to another. It's just big\nenough where it'd be annoying to write something to replace it to get the\nvalidation working as intended.\nRegarding the generic processor, that is the approach we were going to go\nprovided ajv didn't do this. Just didn't want to spend any time doing that\nif something was already available in ajv.\nThank you again for your time and the prompt response. We will move forward\nwith the pre-processor approach.\nOn Wed, Feb 17, 2016 at 1:14 PM, Evgeny Poberezkin <notifications@github.com\n\nwrote:\nI was thinking what would I do if I had such an issue... I would probably\nsimply use some templates (doT templates\nhttp://olado.github.io/doT/index.html in my case :) to generate two\ndifferent schemas - one with refs, another without.\nAnother alternative is to use code to merge them as objects... It's not\nthat difficult to write a generic processor that would replace $refs with\nactual schemas in case it is not recursive - you can even make a schema\nwith a custom keyword to do such processing:\nvar processingSchema = {\n  properties: {\n    $ref: {\n      replaceRef: true\n    }\n  },\n  additionalProperties: { $ref: '#' },\n  items: { $ref: '#' }\n}\nAll you need to do is to define a custom keyword replaceRef (that will\nresolve and replace the ref with object) and then pass your schema as data\nto this \"processing\" schema:\najv.addKeyword('replaceRef', { ... });\najv.validate(processingSchema, yourSchemaYouWantToMergeTheRefsIn);\nAt the moment you can only do it with inline keyword (as you need access\nto the parent object), but the next release which I am about to make will\nallow to use simpler validation/compiled keywords to do so.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/epoberezkin/ajv/issues/125#issuecomment-185330638.\n\n\nMatthew C. Rice\nRCS\nhttp://rcs.us\nmrice@rcs.us\nTF - 844-4-OLAINC Ext. 700\nTF - 844-465-2462 Ext. 700\n. @ro70 , it was some time ago, but we ended up just iterating through all the schema's first, so we had them all, then iterating again and replacing ref instances with the actual schema.. ",
    "ro70": "@conrad10781 Have you found a solution for the processing approach as @epoberezkin is proposing?. @conrad10781 Ok, I implemented something similar to your solution. My schemas had to be dereferenced and demerged. Thank you.\n. @jegj For my purpose the following code did it. My schemas each have an id like \"$id\": \"User.json#\". I use _lodash functions.\n```\nfunction dereference(obj, id = null) {\n  if(id == null) {\n    id = obj.$id\n  }\n  .forOwn(obj, (value, key, obj) => {\n    if(value.$ref) {\n      let schemaRef\n      if(.startsWith(value.$ref, '#')) {\n        schemaRef = id + value.$ref.substr(1)\n      } else {\n        schemaRef = value.$ref\n      }\n      obj[key] = ajv.getSchema(schemaRef).schema\n    }\n    if(_.isObject(value)) {\n      dereference(value, id)\n    }\n  })\n  return obj\n}\nlet schema = ajv.getSchema(${model}.json#)\nlet dereferencedObj = dereference(schema.schema)\n. @epoberezkin Please excuse me. I partly solved my problem. Now I have the following code\nvar schema = {\n  \"id\": \"test.json#\",\n  \"definitions\": {\n    \"body\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\"type\": \"string\"},\n      }\n    },\n    \"extendedBody\": {\n      \"$merge\": {\n        \"source\": {\"$ref\": \"#/definitions/body\"},\n        \"with\": {\n          \"properties\": {\n            \"age\": {\"type\": \"integer\"}\n          }\n        }\n      }\n    }\n  },\n  \"request\": {\n    \"properties\": {\n      \"user\": {\"$ref\": \"#/definitions/extendedBody\"}  // #/definitions/body works as expected.\n    }\n  }\n}\nvar Ajv = require('ajv')\nvar ajv = Ajv({\n  v5: true,\n  removeAdditional: 'all',\n  schemas: [schema]\n})\nvar data = {\n  user: {\n    \"name\": \"tom\",\n    \"age\": 1,\n    \"shouldBeRemovedByAJV\": true\n  }\n}\nvar valid = ajv.validate({$ref: \"test.json#/request\"}, data)\nconsole.log(data)\nwhich gives\n{ user: { name: 'tom', age: 1, shouldBeRemovedByAJV: true } }\n```\nIs removeAdditional not working with $merge?. @epoberezkin I appreciate your help. I'd like to validate (remove additional properties) the user object (in data1/data2) against the request1/request2 schema. data1 with request1 works as expected. data2 with request2 does not.\nExample. According to this the schemas extendedBody and extendedBody2 should be equivalent, shouldn't they?\nExample. @epoberezkin As we say here: In 99.9% of all cases it's not the computer... Thank you very much for spending your time to help me.. ",
    "jegj": "@ro70 could you please share your solution ?  . thanks !\n. @epoberezkin  That was the problem, i forgot to put the .js extension . Thank you so much !. ",
    "gtrindade": "Thanks for the suggestion, I didn't realize I could combine anyOf with required. I'll give it a try!\nI'm not sure if this is just me, but took me quite a while to understand this behavior of the removeAdditional option... To me, it feels like it should only remove whats not matching anything. In this case, it should wait until all the options on anyOf to be evaluated before removing anything. \nBut again, thanks for your quick response!\n. ",
    "sberan": "@epoberezkin would you accept a PR that removed the additional properties only after passing validation of the schema? That way, if a subschema fails validation for some other reason, the properties aren't removed.\nSomething like removeAdditional: 'afterValidation'? I think this would be more intuitive in these cases. . @epoberezkin I can go with removeAdditionalOnSuccess - I've implemented it in this PR and added tests for all the cases noted. What do you think?. @epoberezkin note that the diff is much easier to read if you ignore whitespace (?w=1) \ud83d\ude04 . @epoberezkin I think I found a bug in master. When additionalProperties is a schema, properties are not validated (and this test fails at this location \ud83d\ude2c .. (it's only a problem if you supply an invalid additional property with an additional properties schema, and removeAdditional: 'failing' ). @epoberezkin I figured out the issue. $nextValid was not being unset when the additional property was removed, which caused the function to exit with no errors.. setting this field to true fixed the bug I mentioned.. ",
    "bearmini": "OK, I'll drop this PR and create another with post-install way.\n. Reopen this PR.\nIn order to build bundle files, all users who want to install this package via bower should have npm installed on their environment. Can we assume all the bower users have npm command?\nI found this SO:\nhttp://stackoverflow.com/questions/17170500/how-make-bower-build-the-package\nAccording to this, \n\nBuilding on install is an anti-pattern and is strongly recommended against in Node. Like Node, Bower packages should be pre-built. This is because the end-user shouldn't have to care what preprocessor or build-system a package requires.\n\nShould we go 'post-install' option though? Just want to clarify.\n. I found an answer for my own question. Bower can be installed only using npm, so all bower users must have npm installed. We can go post-install option safely.\n. Reopen again.\nAs bower document, \n\nThese hooks are not intended to provide a post-installation build step for component authors. As such, the configuration for these hooks is provided in the .bowerrc file in the parent project\u2019s directory.\n\nThe postinstall script was not triggered even if I have .bowerrc in ajv repository. The 'postinstall' is for projects that uses ajv.\n. Thanks for your comments. For a short-term solution, I'll add instructions how to build bundles manually. I'll also look into whether we can publish a branch to bower or not. \nBy the way, we probably move to npm/require/browserify for our Angular project.\n. ",
    "rom1504": "Apparently this is not valid.\nWhy ? I can't find it in the spec ?\nWhy can't we have a type property in json ?\n. Yes it's indeed valid, I was making a mistake in https://github.com/epoberezkin/ajv/issues/137\n. Indeed. Thanks !\n. Just moved all my json schema tests from jsonschema to ajv. 43x speed up. Thanks for creating this package !\n. ",
    "powmedia": "Sorry it was a mistake; I closed the issue but should have commented too.\n. ",
    "mgendre": "When I remove the configuration  \"additionalProperties\": false from the type definition on \"oneOf\" the problem disappear.\n. You are right @epoberezkin !\nAJV is configured with removeAdditional -> true. The schema has been refactored to avoid multiple definitions inside oneOf, like you suggested and it's working.\nThank you @epoberezkin for your support !\n. ",
    "ribaptista": "I noticed the original schema would not validate an object containing both account and mailingList properties (that's expected), while the later refactored schema does.\nIs there any workaround for this?\n. ",
    "dnvyrn": "schema:\n\"items\": {\n  \"type\": \"object\",\n  \"properties\": {\n    \"mode\": { \"enum\": [  \"ftp\" ]\n    },\n    \"account\": { \"type\": \"string\" },\n    \"mailingList\": { \"type\": \"string\" },\n    \"otherProp\": { \"type\": \"string\" }\n  },\n  \"additionalProperties\": false,\n  \"oneOf\": [\n    { \"required\": [ \"mode\", \"account\" ] },\n    { \"required\": [ \"mode\", \"mailingList\", \"otherProp\" ] }\n  ]\n}\ndata:\n{\n  \"transfer\": {\n    \"modes\": [\n      {\n        \"mode\": \"ftp\",\n        \"account\": \"e69b3f54\",\n        \"mailingList\": \"c3d12752\",\n      },\n      {\n        \"mode\": \"email\",\n        \"mailingList\": \"c3d12752\",\n        \"otherProp\": \"fasfasfaf\"\n      }\n    ]\n  }\n}\nIt will validate pass. How to use { \"not\": { \"required\": [\"account\"] } } ?. ",
    "imbstack": "That all seems very reasonable. Just have a couple questions:\nShould we make the cloning behavior the default (occurs when the option is set to true) and make the faster version occur when the option is set to fast? That seems to align with other options in ajv currently and makes the default version do the less surprising thing.\nAlso, would you like it more if {{= it.opts.useDefaults == 'clone' ? JSON.stringify($sch.default) : it.useDefault($sch.default) }} gets wrapped into \n{{=$passData}} = {{= it.opts.useDefaults == 'clone'\n      ? JSON.stringify($sch.default)\n      : it.useDefault($sch.default) }};\nin the actual template? It's seems like a rather long line otherwise, but I'm not sure what the best taste for this sort of file is.\n. Awesome. I've updated this with the \"clone\" option and added info to the docs about it.\n. ",
    "tejasmanohar": "Does type as a top level field work? I'm having trouble with both jsonschema and ajv. Maybe I'm missing something?\n```js\nvar Ajv = require('ajv');\nvar ajv = new Ajv({allErrors: true});\nvar schema = {\n    \"type\": {\n       \"description\": \"Whether an effect is positive or negative\",\n       \"type\": { \"enum\": [ \"good\",\"bad\" ] }\n    }\n};\nvar validate = ajv.compile(schema);\ntest({\n  \"type\": \"good\"\n});\nfunction test(data) {\n  var valid = validate(data);\n  if (valid) console.log('Valid!');\n  else console.log('Invalid: ' + ajv.errorsText(validate.errors));\n}\n```\n\"Error: schema is invalid: data.type should be equal to one of the allowed values, data.type should be array, data.type should match some schema in anyOf\"\nTested in https://npm.runkit.com/ajv. Oops my bad. Sorry for the silly question @epoberezkin . ",
    "rohit-raj": "I had a doubt while keeping a type property for validation.\nI have a type property in body, which is of type string.\n{\n    \"type\": \"object\",\n    \"required\": [\"customer\"],\n    \"properties\": {\n        \"customer\": {\"type\": \"string\"},\n        \"type\" : {\"type\": \"string\"}\n    }\n}\nI am getting the error :\nError: schema is invalid: data.type should be equal to one of the allowed values, data.type should be array, data.type should match some schema in anyOf\nmy request has \n{\n    \"customer\":\"abcdefgh1234\",\n    \"type\":\"booking\",\n}\ncan you help me out debug this issue ?\n@epoberezkin \nTIA\nRohit. ",
    "OlivierCuyp": "@epoberezkin I have the same issue here.\nDoing :\nschema.json\njson\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"id\": \"#/s3Document\",\n  \"type\": \"object\",\n  \"additionalProperties\": true,\n  \"properties\": {\n    \"url\": {\n      \"type\": \"string\",\n      \"format\": \"uri\"\n    },\n    \"type\": {\n      \"type\": \"string\"\n    }\n  }\n}\nvalidate.js\n```js\nconst Ajv = require('ajv');\nconst ajv = new Ajv({\n  allErrors: true,\n  coerceTypes: true\n});\nconst schema = require('./schema.json');\nconst schemaValidator = ajv.compile(schema);\nmodule.exports = (data) => { \n  return schemaValidator(data);\n});\n```\nindex.js\n```js\nconst validate = require('./validate');\nconsole.log('Is valid:', validate({\n  \"url\": \"http://www.google.com\",\n  \"type\": \"site\"\n}));\n```\nRunning:\nsh\n$ node index.js\nI get this error:\nError: schema is invalid: data.type should be equal to one of the allowed values, data.type should be array, data.type should match some schema in anyOf\nI don't see how else I could express that type should be a string...\nCould you help ?. Changing the $schema to \"http://json-schema.org/draft-07/schema#\" and removing the id solved the issue...\nSorry for the bothering.. ",
    "shaunwarman": "Perfect, just missed that. Thanks!\n. ",
    "hatfinch": "additionalProperties doesn't work, though, when you're trying to combine different schema definitions (see https://spacetelescope.github.io/understanding-json-schema/reference/combining.html#allof, \"Unfortunately, now the schema will reject everything. This is because the Properties refers to the entire schema. And that entire schema includes no properties, and knows nothing about the properties in the subschemas inside of the allOf array\".)\nThat page goes on to say \"This shortcoming is perhaps one of the biggest surprises of the combining operations in JSON schema: it does not behave like inheritance in an object-oriented language. There are some proposals to address this in the next version of the JSON schema specification\". However, I can't find any indication of consensus within the json-schema community about how to move forward with this. A \"strict mode\" in AJV would bridge that gap.\n. Thank you for your response!\nI don't think any of the proposed solutions described at that link really fit my use case. \nI have something like the (simplified) following:\n{\n  \"definitions\": {\n    \"boat\": {\n      \"properties\": {\n        \"sail\": {\n          \"type\": \"boolean\"\n        }\n      }\n    },\n    \"car\": {\n      \"properties\": {\n        \"towbar\": {\n          \"type\": \"boolean\"\n        }\n      }\n    },\n    \"motorbike\": {\n      \"properties\": {\n        \"saddles\": {\n          \"type\": \"number\"\n        }\n      }\n    },\n    \"vehicle\": {\n      \"properties\": {\n        \"owner\": {\n          \"type\": \"string\"\n        }\n      },\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/wheeledVehicle\"\n        },\n        {\n          \"$ref\": \"#/definitions/boat\"\n        }\n      ]\n    },\n    \"wheeledVehicle\": {\n      \"properties\": {\n        \"numberOfWheels\": {\n          \"type\": \"number\"\n        }\n      },\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/bus\"\n        },\n        {\n          \"$ref\": \"#/definitions/car\"\n        }\n      ]\n    }\n  }\n}\nYour solution #1 at that link, \"don't worry about additionalProperties and simply allow them\", comes closest: I'm really only looking for strictness.\n(It's possible that $merge could be used, but I can't see how to go that route without it ending up more verbose than just defining numberOfWheels and owner in multiple places. It's not a question of whether we can express what we want to express, it's a question of how succinctly we can express it.)\nadditionalProperties tries to do more than that, though: Henry Andrews provides a good explanation of them at https://groups.google.com/forum/#!searchin/json-schema/additionalProperties|sort:relevance/json-schema/dDkozAUTxRk/YuqEvjXuAAAJ -- mine is #2.\nAs he says, \"First, we need to make it possible to distinguish between use cases #1 and #2.    Currently we do not have inheritance (allOf is more of an intersection operator).  So I would say that \u201cadditionalProperties: false\u201d on its own should indicate #2:  the desire for strict validation of property names.  That is it\u2019s most clear current effect, and many, many JSON Schema users have indicated that that is why they use \u201cadditionalProperties: false\u201d.\"\nIt seems to me that although it's difficult to obtain consensus on how to achieve strictness in the spec, the tools could allow it as a global option, and that this would be useful to \"many, many JSON Schema users\". \n. ",
    "sashkamal": "Thanks for the clarification. Since the definition is used in multiple places, Will talk to the team that owns the schema and move the additionalProperties: false and also the \"required\" section to the #/definition/interface section. I tested by moving and it works as expected.\n. Also found out that even if you use allOf to apply both $ref and some other schema, additonalProperties: false doesn't work as expected as the JSON schema doesn't support inheritance. So the only way is to replicate the whole properties.\n. Thanks. It helps.\n. ",
    "ksmithut": "@epoberezkin I know this has been closed for a while, but looking through the example in that issue, I couldn't find how to do custom coercion in that issue or the custom keywords docs. I was trying to figure it out using the \"inline\" option, but everything seemed to only have the use case of validating data, and not adding custom coercions.\nMy use case is that I'm trying to get ajv to handle parsing/validating/coercing data from a swagger schema. One of the pieces of swagger that I'm trying to support is the collectionFormat keyword. So when the value comes in, it's a string with some kind of delimiter. I'd like to take that string, and parse it into an array before validation. Is this supported with custom keywords? From your statement:\n\nYou can do all that and more with custom keywords.\n\nI suspect that it can, but I can't find any documentation on how to do this.. Thank you! That makes much more sense now. I'm fine with doing it that way, with the allOf. I'm transforming the swagger schema into an ajv schema, so transforming it in this way would work just fine.. @epoberezkin Aplogies, and if this belongs in a different place (like stack overflow or whatever), let me know. I can't get the following to do what I'd like it to:\n```js\n'use strict'\nconst Ajv = require('ajv')\nconst ajv = new Ajv({\n  allErrors: true,\n  removeAdditional: true,\n  useDefaults: true,\n  coerceTypes: 'array',\n  async: true,\n})\najv.addKeyword('collectionFormat', {\n  type: 'string',\n  async: true,\n  compile() {\n    return (data, dataPath, parentData, parentDataProperty) => {\n      parentData[parentDataProperty] = data.split(',')\n      console.log('split')\n      return Promise.resolve(true)\n    }\n  },\n  metaSchema: {\n    enum: [\n      'csv',\n    ],\n  },\n})\nconst validate = ajv.compile({\n  $async: true,\n  type: 'object',\n  properties: {\n    foo: {\n      allOf: [\n        { collectionFormat: 'csv' },\n        {\n          type: 'array',\n          items: { type: 'string' },\n        },\n      ],\n    },\n  },\n  additionalProperties: false,\n})\nconst obj = {\n  foo: 'foo,bar,hello',\n}\nvalidate(obj)\n  .then(() => {\n    console.log('final', obj)\n  })\n  .catch(console.log)\n```\nThe output of that is:\nfinal { foo: [ 'foo,bar,hello' ] }\nThe expected output is:\nfinal { foo: [ 'foo', 'bar', 'hello' ] }\nIt seems like the change I make to parentData doesn't actually mutate the original data. If I change the coerceTypes to true, it fails validation because when it gets to the type: 'array' validation, it's still the original string. Am I doing something wrong? Is it because of the async stuff?\nAgain, if there is a better place for these questions, let me know.. No, thank you for your patience. You owe me nothing, and you're work has already provided me with so much functionality. Do you have some sort of gittips or other kind of support \"tip jar\"? I'd love to contribute. Sweet, just pledged :) BTW, this pledge isn't for this mutation data stuff. As far as I'm concerned, you've already earned it, so don't feel beholden to improve upon what you've already done. I'm happy with the solutions you provided. Awesome! Thanks!. @epoberezkin Nice!. ",
    "thorinisme": "Maybe i don't understand how async works.\nIf 2 http request share the same instance of ajv\nif each use of \"ajv.getSchema(String key)\" return a \"validate\" function with a shared property \"errors\"\nSo there is a risk that \"validate.errors\" give me an error object for an other request\nAm i wrong ?\n. thanks a lot for answer !\nThat's the first time i use github (and git too) so i don't know if i can start it, but a short example with koa and other framework would be usefull for noob to fastly see how to use it.\n. because additionnalProperties only apply to properties declared at the same level. \nIn the following exemple, if my schema is a mix between 2 schema (part of each), i have no way currently to restrict to properties i require. The only way would be stictProperties.\njson\n{\n    \"$schema\": \"http://json-schema.org/schema#\",\n    \"id\": \"http://xy.com/schema/schemaC.json\",\n    \"allOf\": [{\n        \"$ref\": \"schemaA.json\"\n    }, {\n        \"$ref\": \"schemaB.json\"\n    }, {\n        \"required\": [\n            \"propA1\",\n            \"propA3\",\n            \"propA4\",\n            \"propA7\",\n            \"propB2\",\n            \"propB4\",\n            \"propB5\"\n        ],\n        \"strictProperties\": true\n    }]\n}\nWith \"stricProperties\" : true i can not have a additionnal property not visible in \"required\". If \"propA2\" or \"propC1\" is in my object, validation will fail.\n. it is not equivalent.\n\"has no other properties than the ones defined in properties, patternPropertyGroups and required.\"\nthat means if i use a shema with external properties using $ref and i use required in the parent shema with \"strictProperties\" it will require and only accept properties in \"required\" property. With external properties, the property \"additionalProperties\" will not work as i would like.\n. ",
    "xfg": "\nI see no reason to instantiate ajv every time.\n\n@epoberezkin what if need a custom keyword of the same name, but with a different validation function for different schemas? For example the model in MVC architecture may have its specific validation functions with the same name as in the other model. Does it make sense in this case use the new instance of ajv per request or ajv has another solution?\n. Can example? I don't understand.\n. Thanks, it work.\n. Thanks for your reply. It's work, but I want to send a client the errors in this format:\njson\n{\n  \"email\": [\n    \"error message 1\",\n    \"error message 2\",\n    \"error message N\"\n  ],\n  \"password\": [\n     \"error message 1\",\n     \"error message 2\",\n     \"error message N\"\n  ]\n}\nI create the my errors with this function\njavascript\n  function createValidationErrors(err) {\n    var errors = {};\n    err.errors.forEach(error => {\n      objectPath.push(errors, error.dataPath, error.message);\n    });\n    return errors;\n  }\nBut in the parent object my keyword validatePassword (and required too) have empty dataPath and I don't understand how can I assign the validatePassword error to my errors object for the password property.\nIs it real?\n. I don't understand too how I can create error messages to my html forms with ajv errors. I want to write the algorithm which will be display error messages nearby with input fields, but I can't understand how it do because within error object from ajv frequently unclear to which the field can be attributed this error. I must figure out it that from dataPath that from missingProperty for require keyword that from devil knows where for custom keyword errors for example validatePassword which I want to display nearby with the password input field.\nAnd the saddest that I can't find any articles how to use ajv for displaying errors for html forms at frontend.\n. @epoberezkin thanks for the reply I will try to use errorDataPath: 'property' maybe it really help me.\n. Thanks for reply. All I want is to display error messages nearby with my input fields. I asked you about this in https://github.com/epoberezkin/ajv/issues/255#issuecomment-243634731 and you suggested me to use errorDataPath: 'property'. It work for default ajv keywords but now I don't understand what me do with my own custom keywords.\n. As a switch I wanted to use dataPath with errorDataPath: 'property'. Maybe example? I don't understand how to solve this task gracefully without crutches.\n. You are absolutely right, but to handle errors within my own code I  must know somehow that this error belong to specific object property and if I can't use dataPath then I am forced to do it like that\njavascript\ngetUserErrors(ajvErrors) {\n  return ajvErrors.map(error => {\n    if (error.keyword === 'validatePassword') {\n      return {field: '.email', message: error.message};\n    }\n    if (error.keyword === 'otherMyCustomKeyword') {\n      return {field: '.otherField', message: error.message};\n    }\n    ...\n    return {field: error.dataPath, message: error.message};\n  });\n}\nbut it looks like ugly.\nIf I could set dataPath on Ajv.ValidationError then all it would have been easier. What are reason why it impossibly do for custom Ajv.ValidationError ? Such opportunity has within tv4\n\nvalidationFunction is a function that either returns:\n- an error object (containing some of: code/message/dataPath/schemaPath)\n. Yes I understand you. I just wanted tell that would be nice to give users some variants where they can specify dataPath manually (as optional property) if so required by their task or not to specify and then dataPath will be generated automaticly by ajv. It doesn't break current api and only gives additional opportunity.\n. \n",
    "roman-io": "Data is valid, but the schema is not correct. This schema doesn't have any of the following: 'type', 'definitions', 'properties'. Based on that information schema validator can warn the library user that he's doing wrong.\n. I'm not talking about the spec, but about the non-sense {} schema. Why would someone validate something against an empty schema? That may be only if the library user has some nasty bugs in the code, and schema validator can warn about such. This is definitely not a bug, but a suggestion to improve the UX of the lib.\n. Great, thanks!\n. ",
    "clouddra": "@epoberezkin Thanks for the clarification! Will close this issue.\n. ",
    "EricMCornelius": "I'm actually trying to figure out something similar right now - I want to use json-pointer (non-relative) references inside my data documents, and resolve/enforce those refs as part of validation.\nIt's unclear to me what the best approach is to handle this.  Should I piggyback on existing functionality by treating this as a meta-schema?\n. Essentially I just want to be able to resolve json-pointer references in my documents which are being validated:\nSample document:\nyaml\nexamples:\n  first:\n    field1: test\n    field2: test2\n  second:\n    field1: test3\n    field2: test4\nroutes:\n  example:\n    $ref: '#/examples/first'\nSample schema:\nyaml\ntype: object\nproperties:\n  routes:\n    type: object\n    properties:\n      example:\n        $ref: '#/definitions/example'\ndefinitions:\n  example:\n    type: object\n    properties:\n      field1:\n        type: string\n      field2:\n        type: string\nWhat I need here is to resolve the $ref at validation time, and check the resolved value against the schema expected at this node.  It would be easily doable if you provide a way to extend your type coercion rules.\n. I am currently pre-processing my input document and replacing the $ref keys with corresponding self-references as a workaround - but this makes generating inadvertent cyclic references a concern.\n. It is true that the value is not required when useDefaults is enabled, so I understand that view.\nAs I think is common for practical usage though, my aim is to avoid creating minorly different versions of the same schema for handling inbound sanitization vs backend strict validation.\nIt probably boils down to the same pain points that lead to your $merge and $patch implementations.\nIdeally, I want keywords related to sanitization and mutation/coercion to be enabled via flags when validating requests or preparing responses, and to use the same schema document to make strict assertions in the backend.\nThis feels achievable if we can control the execution order of the JSON schema core keywords vs. custom keywords, though I am very probably missing some roadblocks there.\nAnother example is the format keyword - defining custom format coercion during request validation and strict enforcement during backend invariant checks is very useful for things like flexible date-time parsing and sanitization.  Right now I'm achieving that by replacing the built-in format keyword entirely:\n``\nconst formats =  {\n  'date-time': data => {\n    const d = new Date(data);\n    if (isNaN(d)) {\n      throw new Error(Invalid date-time: ${data}`);\n    }\n    return d.toISOString();\n  }\n};\najv_instance.removeKeyword('format');\najv_instance.addKeyword('format', {\n  modifying: true,\n  errors: true,\n  compile(schema, parent) {\n    const format = formats[schema];\n    if (!format) {\n      console.log(Unsupported format: ${schema});\n      return () => true;\n    }\nconst validator = (data, path, parent, prop) => {\n  try {\n    parent[prop] = format(data);\n    return true;\n  }\n  catch(err) {\n    validator.errors = [{params: {keyword: 'format', format: schema, path, data}, message: err.message}];\n    return false;\n  }\n}\nreturn validator;\n\n}\n});\n```\nHowever, I can't do things like coerce an inbound integer ipv4 address representation to it's quad dotted format without some weirdness.  E.g.:\n```\nconst schema = {\n  \"type\": \"object\",\n  \"properties\": {\n    \"addr\": {\n      \"type\": \"string\",\n      \"format\": \"ipv4\"\n    }\n  }\n};\nconst data = {\n  addr: 3232235777\n}; // \"192.168.1.1\" in decimal format\n```\nThe only way I've been able to see to make this validation-time coercion work is for ajv to do type coercion from int => string, then have a custom keyword (or format replacement as above) do the coercion back into an integer and then figure out the proper dotted quad format.\nI'm not sure normalizing to the integer representation is even possible without somehow messing with the core schema \"type\" keyword assertions as well\n```\nconst schema = {\n  \"type\": \"object\",\n  \"properties\": {\n    \"addr\": {\n      \"type\": \"integer\"\n      \"format\": \"ipv4_int\"\n    }\n  }\n};\nconst data = {\n  addr: \"192.168.1.1\"\n};\n```\nIt seems that this will always assert that the type of addr is an integer (or can be coerced to one) before any custom keyword can modify the data?\nThe initial case above was really just about addressing the dynamic default assignment for mutation while keeping the required assertions during strict validation, but it seems like there's maybe a more general approach possible if we can customize the assertion execution order a bit.. ",
    "tmerlet": "Thanks for your answer.  sorry I'm still a little bit confused how to achieve this.  this is my current thinking, should this work? \najv.addKeyword('type', { validate: function (schema, data) {\n  return myCustomTypeValidation(data)\n}, errors: false });\nHow do I make sure that other types return their respective errors?\n. Thanks @epoberezkin, that really helped :+1: \n. ",
    "mbroadst": "Sorry to hijack the issue, but I think this is where my question belongs!\nI still think there is a use case for custom types themselves. In my case, I'm writing some validation schemas for RethinkDB entries, and they have a custom supported type \"point\" which represents a geo location. Understandably I could create a custom keyword and do something like:\n{\n   type: 'object',\n   properties: {\n     thing: { point: true },\n     or: { instanceOf: 'point' }\n  }\n}\nbut I feel like that will be quite unintuitive to the user who would expect a point to be a type just like everything else:\n{\n   type: 'object',\n   properties: {\n     thing: { type: 'point' }\n  }\n}\nIs there no room for adding this kind of functionality? I'm sure I've missed some crucial detail, but if it were possible it would greatly improve usability/readability imho\n. ~~oh hmm, it looks like just creating a schema for that and doing addSchema on the main ajv instance might suffice?~~\nGot it from reading through other issues:\n```\nlet PointSchema = {\n  id: 'point',\n  type: 'object',\n  properties: {\n    latitude: { type: 'number' },\n    longitude: { type: 'number' }\n  },\n  required: [ 'latitude', 'longitude' ]\n};\nlet PersonSchema = {\n  type: 'object',\n  properties: {\n    name: { type: 'string', minLength: 1, default: 'name' },\n    location: { $ref: 'point' }\n  },\n  required: [ 'name', 'location' ],\n  additionalProperties: false\n};\n```\nsorry for the noise, hth someone in the future \ud83d\ude04 \n. ~~@epoberezkin as a follow up question to that, is it possible in the above example to have the point schema accept either { latitude: 100, longitude: 200 } or [100, 200] (geojson format)? I've been wrestling a bit with anyOf can't seem to work it out~~\nmaybe I should turn this issue into a wiki for solutions :)\n{\n  id: 'point',\n  anyOf: [\n    {\n      type: 'object',\n      properties: {\n        latitude: { type: 'number' },\n        longitude: { type: 'number' }\n      },\n      required: [ 'latitude', 'longitude' ]\n    },\n    {\n      type: 'array',\n      items: { type: 'number' }\n    }\n  ]\n}\n. resolves #197\n. @epoberezkin gotcha, just wanted to see if you'd be interested in the feature, updates incoming\n. @epoberezkin agreed. In fact, I'm trying to retrofit an ODM, replacing its schema validation with ajv/json-schema. It's a common case in ORM/ODMs to have instance objects which represent the data but are also otherwise extended (event emitters, etc), so I was running into all sorts of pain there.\nI agree with your performance observations, but I figure I can get the implementation done first and optimize later :)\nOn another note, I've noticed you can probably speed up your code in a number of places by using the following pattern:\nfor (var i = 0; ii = <something>.length; i < ii; ++i)\nin most cases you're making a call to check length on every iteration it looks like. I can put together a PR for that as well, time permiting\n. @epoberezkin ah, very interesting! thanks for the link\n. @epoberezkin the only other place I see this being relevant is here: https://github.com/epoberezkin/ajv/blob/master/lib/dot/v5/patternRequired.jst#L14\nI modified the code, but I'm not sure how to add it to the v5 tests. I'm sure I could explicitly add it to the options tests - would that suffice?\nAlso, can you think of anywhere else this might be relevant?\n. @epoberezkin okay that should be it. It looks like vscode autocorrected (or at least modified) the smiley face UTF16 character there, but I'm not quite sure how to revert it tbh\n. @epoberezkin any idea what sort of timeline there might be for a patch/minor release including this feature? Definitely do not intend to be pushy, but I'm heavily dependent on it for this other work I'm doing and the nature of the build process leaves me manually linking my local builds to my node_modules folder - not an ideal process!\n. rad, much appreciated!\n. frankly my desire for the feature was just to maintain parity with the schema system I was replacing. They supported options on all levels, but I've never needed such behavior in my production code and considering I'm the only user of the new codebase so far I'm content to leave the feature out.\nThis was more of a question to discuss whether it was possible, and if so what the implications would be and I think that desire has been satisfied. I'll close the issue now pending future discussion where someone brings up a valid use case.\n. hm, I thought the solution might be to switch to oneOf (instead of anyOf, so we're only reporting errors for the path chosen), but that results in the following somewhat useless error:\ntesting:  { name: 'BadBob', location: [ 200 ] }\nvalid:  false\nerrors:  [ { keyword: 'oneOf',\n    dataPath: '.location',\n    schemaPath: 'point/oneOf',\n    params: {},\n    message: 'should match exactly one schema in oneOf' } ]\n. @epoberezkin thanks for the explanation, looks like I can use v5's switch to get the more specific errors I'm looking for!\n. @epoberezkin no you've been quite clear, I think it was I who was not so clear in the initial case. What I'm looking for here is to explicitly disallow baz in case the value of bar === testing. I haven't been able to sort out how to get that working yet, other than providing whole separate schemas and using oneOf\n. oh really? I had thought that would just remove it from the required list, that's a bit of a semantic misnomer I'd say as the negation of requirement isn't necessarily prohibition \ud83d\ude04 \nTotally works, thank you very much for your help\n. it might make sense to suggest an alias present for required (to the json-schema spec maintainers that is). This is far more readable imho:\nthen: { not: { present: [ 'baz' ] } }\n. gotcha, thanks\n. @epoberezkin so I'm using ajv to replace an existing home brewed schema system in an ODM (we've briefly discussed this via email), and it supports ReQL terms which are functions later evaluated by the database driver. For example, let's say I have the following schema:\nlet Model = test.thinkagain.createModel(test.table(0), {\n  type: 'object',\n  properties: {\n    id: { type: 'string' }\n  }\n});\nIt's reasonable for the user to want to do something like let m = new Model({ id: r.uuid() }), which will result in a string once processed by the server and returned, however on initial validation it will fail because r.uuid evaluates to a function. I'm trying to find a way to easily support that, instead of monkey-patching every schema provided to createModel to change a simple definition to e.g. oneOf: [ <schema they provided>, { myKeyword: 'that supports ReQL Terms' } ] which may make validation results a bit confusing. One solution that seemed reasonable to me was to patch the schemas to just add a keyword that might instead override the type in this special case.\nI totally understand this is a very special contortion that sort of exists outside the intentions of json-schema, but I figured it was worth the discussion!  I think this would improve the user experience, as adding the anyOf/oneOf is more of a non-trivial modification of the initial schema.\nThoughts?\n. @epoberezkin one of the main goals of using json-schema in my case is to actually be able to reuse the schema for the front and backend of my system. I'm trying to make the schema I use for this particular model as \"pure\" as possible, using such a keyword sort of completely defeats the purpose. Further, the goal here is to internally amend the given schema only in the case where you are going to actually use the rethinkdb driver (the backend), so you could still use the same schema for form generation on the front end (no need to accept functions here). \nI guess the real issue I have presently is that there is no way to bypass the default validation behavior at all. I could have, for instance, manually checked the schema and somehow omitted the property using a function from validaton as an alternative to the proposed keyword solution of bypassing the type check - if there had only been a way to do so. So I guess more to the point: is there some method you might find more palatable here for bypassing validation rules? (I'd also like to point out that I wasn't initially proposing we be allowed to override the type keyword itself, although that would work too, but instead allow another keyword to indicate that validation had succeeded and no other validation functions should be run - a potential optimization in some cases as well perhaps)\n. @epoberezkin ah very clever \ud83d\ude04 I'll give that a shot, as ever I appreciate the quick feedback\n. @epoberezkin if I'm not misunderstanding this would have to be done as an inline validator, because we don't have access to the aggregated errors in a plain compile right?\n. got it, at least an incredibly basic form of ignoring all errors;\nkeywords.ignoreErrors = {\n  errors: 'full',\n  statements: true,\n  inline: (it, keyword, schema) => {\n    return 'return true;';\n  }\n};\nI think I can get this working from here, cheers!\n. Okay, I'll start with the simple cases and move from there. If it's part of a subschema there's no real way to fully bypass validation though right?\n. @epoberezkin aye, I've seen it thanks! I've got an incredibly early preview of the work I've been doing over here: https://github.com/mbroadst/thinkagain, cheers!\n. @epoberezkin sorry it took a while to get back to this here. So my current use case for partial validation involves using ajv for form validation in a web app (using aurelia.io). Without the ability to validate a single property in a schema it is difficult to provide inline errors as the user is filling out the form. It seems like there are two options here as a result:\n1. run the validator each time a field is modified, make sure to validate with allErrors: true, and then match the resulting error object with the corresponding field element\n2. only validate the form once, before submit, and report the errors all at the same time\nThe first option seems like it would get the job done, but it also seems like a lot of validation overhead. There is another possible option: create schemas for each field, but that seems a bit much.\nIs the first option your proposed solution for this use case?\n. @epoberezkin lets say I have the following schema:\n{\n    type: 'object',\n    properties: {\n      firstName: { type: 'string' },\n      lastName: { type: 'string' },\n      email: { type: 'string', format: 'email' }\n    },\n    required: [ 'firstName', 'lastName', 'email' ]\n  }\nand for the sake of partial validation, I am splitting out each of the properties definitions into individual schemas - how would I maintain the concept of the value being required? This is a valid schema on its own { type: 'string' }, but there doesn't seem to be a way to mark it required in isolation (outside of the object definition)\n. so I tried your suggestion here: https://github.com/epoberezkin/ajv/issues/272#issuecomment-239605138, in what I think is the proper form:\n```\nlet schema = {\n  id: 'someSchema',\n  type: 'object',\n  properties: {\n    firstName: { type: 'string' },\n    lastName: { type: 'string' },\n    email: { type: 'string', format: 'email' }\n  },\n  required: [ 'firstName', 'lastName', 'email' ]\n};\nconst Ajv = require('ajv');\nlet ajv = Ajv();\nlet validate = ajv.compile(schema);\nlet valid = validate({ $ref: 'someSchema#firstName' }, 42);\nif (!valid) console.log(validate.errors);\n```\nBut the result is:\nmbroadst@retinoid:test-ajv$ node test3.js\n[ { keyword: 'required',\n    dataPath: '42',\n    schemaPath: '#/required',\n    params: { missingProperty: 'firstName' },\n    message: 'should have required property \\'firstName\\'' } ]\n. @epoberezkin are you simply against supporting partial validation from a an absolute standpoint, or is it that the implementation would be very difficult? Would you be willing to accept support for this feature if I were to attempt an implementation? \nWhile you are correct that its possible to support this functionality with the aforementioned solutions, this amount of working around the problem seems a bit much. Not only do I need to programmatically split up the existing schema into new one-off schemas, but those schemas themselves aren't even really \"correct\" in that I can't even validate the individual property anymore, I need to create a whole new object and superficially add a single property to it just to validate using the rules already present in the previously compiled validator.\nIt just seems like the original compiled validator should already have all the tools I need for what I'm trying to accomplish, but I'm sure you're coming from a far more informed position in your resistance to the feature.\n. @epoberezkin can you expand on what we need to change here? I'm getting this warning now and it pointed me here but I'm not quite sure what the implications are.\nI'm currently using $ref to reference a definition which is a oneOf a number of schemas with custom keywords in it - are you saying this will not be possible in the upcoming release?\n. Oh. I think this is a false positive for my case, after reading this more closely.  My schema looks like:\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"Schema\",\n  \"type\": \"object\",\n  \"definitions\": {\n    \"date\": {\n      \"oneOf\": [\n        { \"instanceOf\": \"Date\" },\n        { \"type\": \"string\", \"coerceTo\": \"Date\" },\n        { \"type\": \"number\", \"coerceTo\": \"Date\" }\n      ]\n    }\n  },\n  \"properties\": {\n      \"prop\": { \"$ref\": \"#/definitions/date\" }\n  }\n}\n\"coerceTo\" and \"instanceOf\" are custom keywords, but as far as the definition goes there is no other keyword other than $ref in my definition - yet the warning is popping up\n. ah! apologies after some deep diving I discovered I am indeed auto-generating some schema bits that use a custom keyword with $ref, is that not going to be possible in the next major version? \n. Is that just underspecified in the spec? It seems a natural assumption that defaults would apply wherever they are defined\n. Absolutely understandable. Could you expand on the proposed solution at the end there? Maybe I'm just not seeing how to do this in a supported fashion.\n. ",
    "webarthur": "I just made a module to simplify some AJV issues. It also includes a new function called .addType():\nGithub: https://github.com/webarthur/super-ajv\nNPM: https://www.npmjs.com/package/super-ajv\n```javascript\nconst ajv = new Ajv()\najv.addType('mongoid', {\n  compile: function () {\n    return function (data) {\n      const re = /^(?=[a-f\\d]{24}$)(\\d+[a-f]|[a-f]+\\d)/i\n      return re.test(data)\n    }\n  }\n})\nconst schema = {\n  properties: {\n    user_id: { type: 'mongoid' }\n  }\n}\n```\nYou can also:\njavascript\nconst schema = {\n  properties: {\n    '*name': 'string',\n    '*email': 'email',\n    'age': 'number',\n    '*message': 'string',\n  }\n}\nEnjoy!. ",
    "coveralls": "\nCoverage increased (+0.03%) to 99.831% when pulling 5c474ee4b398c55ca17c759a10395cc68bf52708 on mrchief:patch-1 into 7d7505b4428cd31eed074bf596f23713ad5a65b1 on epoberezkin:master.\n. \nCoverage increased (+0.03%) to 99.831% when pulling bb3549e9648c021059c578613254d79892d1fc58 on greenkeeper-karma-chrome-launcher-0.2.3 into 7d7505b4428cd31eed074bf596f23713ad5a65b1 on master.\n. \nCoverage increased (+0.03%) to 99.831% when pulling 98368bc36334acc4edf81337df83464f8a68715e on lyngaas:format-exclusive-names into 7d7505b4428cd31eed074bf596f23713ad5a65b1 on epoberezkin:master.\n. \nCoverage remained the same at 99.831% when pulling f413255529d319435a95e12c7a2127679377415e on greenkeeper-eslint-2.5.1 into 19f94a1cd3e4376dd84d5bf4af34d5b93bb142df on master.\n. \nCoverage remained the same at 99.831% when pulling 9031aa13f801cd5b206c2c46386564e9cfedc821 on greenkeeper-eslint-2.5.2 into 113372b930a18346f071a85e98cab5ee512db771 on master.\n. \nCoverage remained the same at 99.831% when pulling 6859cf28f1c689ba17af6e8e633db031df6d83c5 on garrows:master into b7c98396e588390b20466659dc93c5fe61de568e on epoberezkin:master.\n. \nCoverage remained the same at 99.831% when pulling 83427b8712bde4f5187a6c1a665cb670183e0f12 on blakeembrey:typings into d7300491843356a864949f958a41e74a2b513217 on epoberezkin:master.\n. \nCoverage decreased (-0.1%) to 99.732% when pulling 9fd6ac8044519e8b7adc4674c8628900827bf66f on v4.0 into 26964e4996d7566f1d06038b514fb5261f3a2e00 on master.\n. \nCoverage remained the same at 99.732% when pulling 76bdf0796e19ffa6d3af7aaa5bbadd2fc368231d on typescript into de23630ea1300a4f9eaef5bc513e63a8663d823f on master.\n. \nCoverage remained the same at 99.732% when pulling a954845be254c3436deff1a3893997e6e7156f2c on typescript into de23630ea1300a4f9eaef5bc513e63a8663d823f on master.\n. ",
    "mrchief": "@epoberezkin It was meant to be a starting point, not the final thing. Unfortunately, I didn't have more time to put into this but I'm glad @blakeembrey has this going. In light of his work, I would say don't bother merging this.\nWould love to see the typings getting added soon though!\n. ",
    "atfzl": "@epoberezkin Thank you\n. ",
    "willfarrell": "Not a problem, I have a working work around in place for now. Just looking for a more performant solution.\nI was using anyOf/oneOf keywords before moving to the solution I have in place now. I found this approach to be cleaner.\n. All three points are bang on for what I was thinking. coerceTypes: 'array' would be perfect.\n. Sorry got distracted by my own use case. Array to other types added, more tests added, and I hope I caught all the white space changes too. Thanks for reviewing the PR.\n. Array coercion was dropped? If I write another PR, can we get it back? As @jfstgermain mentioned super useful. I use it for API query params.\nFYI The docs still mention support for it: { coerceTypes: 'array' }.. Take a look at the PR itself, maybe a PR for extending it may be in order.. @mathieug Checkout https://github.com/epoberezkin/ajv-keywords/pull/64. @nbankin Checkout https://github.com/epoberezkin/ajv-keywords/pull/64. @msforest Checkout https://github.com/epoberezkin/ajv-keywords/pull/64. ",
    "turbobuilt": "personSchema:\njavascript\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"id\": \"/\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"first_name\": {\n            \"id\": \"first_name\",\n            \"type\": \"string\"\n        },\n        \"middle_name\": {\n            \"id\": \"middle_name\",\n            \"type\": \"null\"\n        },\n        \"last_name\": {\n            \"id\": \"last_name\",\n            \"type\": \"string\"\n        },\n        \"is_person\": {\n            \"id\": \"is_person\",\n            \"type\": \"boolean\"\n        },\n        \"title\": {\n            \"id\": \"title\",\n            \"type\": \"string\"\n        },\n        \"date_of_birth\": {\n            \"id\": \"date_of_birth\",\n            \"type\": \"string\"\n        },\n        \"addresses\": {\n            \"id\": \"addresses\",\n            \"type\": \"array\",\n            \"items\": {\n                \"id\": \"0\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"id\": \"type\",\n                        \"type\": \"string\"\n                    },\n                    \"line_1\": {\n                        \"id\": \"line_1\",\n                        \"type\": \"string\"\n                    },\n                    \"line_2\": {\n                        \"id\": \"line_2\",\n                        \"type\": \"string\"\n                    },\n                    \"city\": {\n                        \"id\": \"city\",\n                        \"type\": \"string\"\n                    },\n                    \"state\": {\n                        \"id\": \"state\",\n                        \"type\": \"string\"\n                    },\n                    \"zip\": {\n                        \"id\": \"zip\",\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"additionalItems\": false\n        },\n        \"emails\": {\n            \"id\": \"emails\",\n            \"type\": \"array\",\n            \"items\": {\n                \"id\": \"0\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"type\": {\n                        \"id\": \"type\",\n                        \"type\": \"string\"\n                    },\n                    \"email\": {\n                        \"id\": \"email\",\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"additionalItems\": false\n        },\n        \"phones\": {\n            \"id\": \"phones\",\n            \"type\": \"array\",\n            \"items\": {},\n            \"additionalItems\": false\n        }\n    },\n    \"additionalProperties\": false,\n    \"required\": [\n        \"last_name\"\n    ]\n}\njavascript\npersonToInsert= {\n    \"first_name\": \"barry\",\n    \"middle_name\": null,\n    \"last_name\": \"bob\",\n    \"is_person\": true,\n    \"title\":\"CEO\",\n    \"date_of_birth\":\"2012-12-12\",\n    \"addresses\":[{\n        \"type\":\"home\",\n        \"line_1\":\"1818 Bobby Lane\",\n        \"line_2\":\"Apt 444\",\n        \"city\":\"Chicago\",\n        \"state\":\"OH\",\n        \"zip\":\"24235\"\n    }],\n    \"emails\": [{\n        \"type\":\"home\",\n        \"email\": \"barry@bob.com\"\n    }],\n    \"phones\": []\n}\n. Man, it must have something to do with how meteor is including the library.  Thanks for taking the time to help though!\n. ",
    "nrotstan": "It's definitely a compatibility issue with Meteor. I have the same problem, and it works fine in a plain node.js app. I guess my question, though, is why it's trying to load any schemas at all if none are referenced? Is it the meta schema it's loading? I've even tried leaving out a $schema, but it makes no difference. I wonder if there's a way to work around the problem -- would love to use ajv. \n. Here's a minimal Meteor project that demonstrates the problem: https://github.com/nrotstan/meteor-ajv-incompatibility\n. Thank you for the fix, @epoberezkin -- it's much appreciated!\nI did run into one more issue with Meteor and ajv using 3.8.9: for invalid schemas, ajv.errors does not appear to be set (and if I pass true to validateSchema for the second parameter so that it throws an exception, I get \"[Error: schema is invalid:No errors]\"). It works fine on a plain node.js app. I've updated that meteor-ajv-incompatibility project to demonstrate the new issue. Thanks again!\n. ",
    "katmug": "I have edited the Json in my original comment for clarity.\nIm trying to validate a request to the schema Zone.  But Zone schema in-turn has a property \"coordinates\" of type Coordinate. Im not able to get this working.\nIn short, can i have another schema (which is Coordinate here) as type in my schema (i.e in Zone Schema)?\n. coordinates is not an array. It is just a property of type \"Coordinate\". \n\"Zone\": {\n\"id\": \"Coordinate\",\n\"required\":[\"name\",\"coordinate\"],\n\"properties\": {\n\"name\": { \"type\": \"string\" },\n\"coordinates\": { \"type\": \"Coordinate\" }\n}\n}\n I have separated the schema Coordinate as it is used in multiple other schema.\n. ",
    "manjudr": "@epoberezkin @katmug \nPlease need help on this since I am unclear.\n{\n  \"Iname\": \"xyz\",\n  \"Place1\": {\n    \"P1Name\": \"abc\",\n    \"Place2\": {\n      \"P2name\": \"pq\"\n    }\n  }\n}\nHow can I write a schema for this nested object structure? \n. ",
    "moshfeu": "\nvalidate.errors = [{keyword: 'auth', message: 'shoud be authenticated.', params: {keyword: 'auth'}}];\n\nPLEASE, add this to the docs it's not that clear there.. ",
    "pioneer32": "Thank you for the answer!\nMy default value is a number (timestamp). I agree with you at all that using custom keyword is the safest way, but nothing regarding dynamic default value is mentioned in the description of addKeyword. Probably, I tried to find the answer in the wrong section of the manual.\n. As far as understand, the custom validator isn't invoked for missed properties. So, there is no opportunity to modify the data, isn't there?\n. Ok. I got it. Thx you so much )\n. ",
    "modeswitch": "I just ran into this issue. Rather than use ajv-keywords, which doesn't work if your property is also required (from the docs: \"the properties used in dynamicDefaults should not be added to required keyword (or validation will fail), because unlike default this keyword is processed after validation\"), I do the following:\n\nAdd dynamicDefault: true to my schema wherever necessary. For example: { \"type\": \"string\", \"format\": \"uuid\", \"dynamicDefault\": true }.\nPre-process my schema to replace instances where dynamicDefault is true with a default property the is a simple object that has toJSON() implemented. For UUID, the class looks like this: class UUID { toJSON() { return uuid.v4() } }.\n\nWhen ajv sets default values, the class instance of UUID will return a new UUID each time it's invoked. This is handy because I can use a different class for each type/format. I'm using the same technique for date-time as well.\nThis is a bit of a hack, and will break if:\n\najv starts caching default values (maybe assuming that they are constant)\najv no longer invokes toJSON() on default values. \n",
    "enriched": ":+1:\n. ",
    "maciasello": "That was quick! Thanks! Confirmed working in my case!\n. ",
    "zetaj": "Thanks for pointing me to that discussion. Unfortunately, \"compiled ajv bundle on cdnjs\" will cause some effort to it keep up-to-data. Our Ember project has it's own asset compilation way and it depends on Bower to keep front-end dependencies up-to-date.(Import assets within bower_components) If ajv can provide a similar way like bootstrap does - https://github.com/twbs/bootstrap, it will benefit user a lot.\nBTW, I have a short-term solution for our Ember project. If this bower issue can be solved, I am happy to use it.\nI will close this PR and looking forward to seeing the solution.\n. It would be great if you can support this, or I am willing to help you on that.\n. ",
    "TBoonX": "OK. Would you provide the code for that? I don't know to access the property of my synchronous validating keyword. Perhaps adding this code snippet to the docs would also be nice.\n. With that the error array (var model = ajv.compile(myModel); model(data); model.errors) does not contain my error. \n. You example works on my machine.\nHere my full not working code:\n```\nvar Ajv = require('ajv');\nvar ajv = Ajv({\n  verbose: true,\n  allErrors: true\n    //v5: true  //enable v5 proposal of JSON-schema standard\n}); // options can be passed, e.g. {allErrors: true}\n//build schema\n//TODO added points to questions and check if the summation of all points are equals to maxPoints\najv.addKeyword('validateMaxPoints', {\n  errors: true,\n  async: false,\n  type:'object',\n  validate: function myValidation(value, dataObject) {\n    if (myValidation.errors === null)\n      myValidation.errors = [];\nmyValidation.errors.push({\n  keyword: 'validateMaxPoints',\n  message: 'maxPoints attribute should be ' + 0 + ', but is ' + 0,\n  params: {\n    keyword: 'validateMaxPoints'\n  }/*,\n  dataPath: '.maxPoints',\n  schemaPath: '#/validateMaxPoints',\n  schema: true*/\n});\n\nreturn false;\n\n}\n});\nconst test = {\n  type: 'object',\n  properties: {\n    user: objectid,\n    title: {\n      type: 'string'\n    },\n    timestamp: {\n      type: 'string'\n    },\n    maxPoints: {\n      type: 'number'\n    },\n    type: {\n      type: 'string',\n      enum: ['auto', 'list', 'exam']\n    },\n    limit: {\n      type: 'number'\n    },\n    /questions: {\n      type: 'array',\n      items: question\n    }/\n  },\n  required: ['user', 'timestamp', 'type'],\n  validateMaxPoints: true\n};\n//export\nmodule.exports = ajv.compile(test);\n```\nAfter that I do:\n```\n      const success = TestModel(slightlyWrongTest);\n  expect(success).to.equal(false);\n  console.log(TestModel.errors);\n\n```\nVersions: nodejs 6.0.0, npm 3.8.6\n. Please add this information to the docs if its a desired behavior.\n. ",
    "jtlapp": "I didn't grok what it might mean to add errors to the validator function until I saw @epoberezkin's example of doing so. Sure would have helped to see this in the documentation:\n\n```\najv.addKeyword(\"validateMaxPoints\", {\n  errors: true,\n  validate: function xyz(value, dataObject) {\n    xyz.errors = [];\nxyz.errors.push({\n  keyword: \"validateMaxPoints\",\n  message: \"maxPoints attribute should be \" + 0 + \", but is \" + 0,\n  params: {\n    keyword: \"validateMaxPoints\"\n  }\n});\n\nreturn false;\n\n}\n});\n```. \n",
    "QuotableWater7": "This is a pretty awkward API.... ",
    "benbuckman": "It shouldn't be supported \u2013 it's not a valid number, so it should fail.\n(FWIW the use case is using this module in a JS codebase where NaN can be produced, for example, by adding undefineds.)\n. I would expect that schema to fail with the input object, because the value, whatever it is, is not an integer. Wouldn't you expect the same?\n. > JSON.stringify { foo: NaN }\n\n'{\"foo\":null}'\n\nvalidator.validate(schema, {n: null}) is false (correctly), so validator.validate(schema, {n: NaN}) should be as well.\n. Thank you @epoberezkin !\n. ",
    "achrist": "@epoberezkin Could you elaborate a little more on why you chose to allow type: number to allow NaN? I understand that in Javascript NaN is considered a number but in JSON NaN is not an accepted value so my assumption would be that if I pass NaN to ajv and its expected type: number it would fail. \nIf I understand correctly I can use a min or max in order to get ajv to not accept NaN but that would mean I have to fill my schema with a bunch of cruft (meaningless mins or maxes) that might be confusing to anyone that looks at. For example I have properties that are of type: number but the allowed range is not an easily defined min or max. It can accept essentially -Infinity to Infinity so there is no clear min or max I could set that wouldn't look bazaar to anyone that crosses it.\nOne option I could see if you don't want to just flat out say NaN is invalid for type: number is maybe add an option to ajv where I could explicitly tell it to not allow NaN. This would allow consumers of ajv to toggle it on/off as they see fit.. ",
    "scottrippey": "I fully agree with @achrist on this!  If it's not a valid JSON value, like NaN or Infinity, then it should not be valid for type: number.\nIf there's any \"backwards compatibility\" concern, then this feature could certainly be introduced as an option, like allowNaN: false.. ",
    "vladyslav2": "@epoberezkin \nEvgeny first you are telling:\n\nusers use Ajv for a lot of validation scenarios beyond JSON validation.\n\nThen:\n\nA better approach is to prevent NaNs passed to Ajv in the first place.\n\nWhich mean that Ajv works only with valid JSON and your first statement then makes no sense. \nA problem that currently have is that I need to run NEW validation library on top of the Ajv just to convert non-JSON data to JSON data in order to be sure Ajv will catch all errors.\nI'm okay if that's a case but I would like to have some buildin function even if  I need to run it separately or some additional parameter for a constructor. \nMainly my problem that values like NaN, undefined and etc get passed when you are not expecting them to pass and the last place you are looking for a problem is ajv validation. @epoberezkin still no update for this issue?\najv looks like a nice package but it does not fit in restful patch/put methods. @agg23 \n\nMy current hack is to duplicate the current schema, remove the required property from each schema object, then add this new schema to AJV\n\nDo not forget about a case when one field depends on other fields so you need to check if a user passed field1 then field2 should become required. ",
    "tnrich": "Hey @epoberezkin , I think we're probably confused as to how type coercion is supposed to work in ajv. \nTo me, this line from the documentation suggests a different functionality to the one you just described:\n\nIf there are multiple types allowed in type keyword the coercion will only happen if none of the types match the data and some of the scalar types are present (coercion to/from object/array is not possible). \n\nCan you not have multiple allowed types and do type coercion with ajv?\nIf not, why not? If you can, how would we implement the above case?\nThanks for the help,\nThomas\n. Aha, thanks for the help! \n. ",
    "HolgerJeromin": "Good catch. I can adjust TS if it is desirable.\nAdding definition of the schema itself (for example this from @enriched) would be a benefit, too.\n. I meant ts. But adjusting jsdoc seems to be better, yes. \nPeople handling json schemas wants to have a meta schema for ts. Tv4 have one included. \nBut including is not really needed. \n. skipValidation in addMetaSchema is not in the README but not marked as internal Parameter in jsdoc. Perhaps this needs adjustment. I removed it. Same with throwOrLogError in validateSchema.\nI added errors?: Array<ErrorObject>; on the instance, which was missing.\n. Thanks for your answer. I will try tomorrow. \nSome code uses key and the id identically but I did not realized the difference in other parts. \nIs it possible to change ajv to support my code? tv4 worked with this schemas but is too slow for me, so I switched  :-)\n. I have added the suggested workaround\nif (schema.id === undefined) {\n    schema.id = schemaFullname;\n}\nin my code. Works very nice. Thank you!\nSo the Problem is solved for me right now.\n. ",
    "irmarod": "my company does not allow loading from cdn's unfortunately :( lame!\nthe npm run build task, did you mean to run it from the bower_components/ajv dir or create my own build task in my own app's package.json?  \nI looked at your build task in your package.json & it's running \"build\": \"node scripts/compile-dots.js\", That's what will build out the dist dir?\n. I ran into issues w/the npm install timing out trying to get phantomJS & consequently none of the other devDependencies installed after that.  As expected ran into issues with the npm run build && npm run bundle-all since the other devDependencies weren't installed.\nI gave up & included the ajv.min.js file into our app off of the node_modules/ajv/dist directory (instead of bower)\nOn a different note, in our build process we min all js files into one; as a result I get an error in the browsers console where ajv.min.js references dist/ajv.min.js.map.  I suppose we can fork and update.  \nBtw, your library rocks!  Thanks for your quick help! \ud83d\udc4d \ud83d\udc4d \n. ",
    "meticoeus": "One common strategy I've seen is to commit dist/*.js in the repo for the tagged release commit, then delete it afterwards in a followup commit. This keeps bower usage simple as long as you are using release commits. I think it will be a little while before bower dies off completely.\n. ",
    "dnfrolov": "Thank you. It's exactly what I need.\n. ",
    "dilipkumar2k6": "I tried to add keyword \"convert\", though its calling my function but not doing conversion. Any idea?\n```\nconst ajv = Ajv({coerceTypes: true, useDefaults: true, loadSchema: utils.loadSchemaHandler});\najv.addKeyword('convert',{\n  type: 'string',compile: function(sch,parentSchema) {\n    return parentSchema.format === 'date-time' && sch ? function(data) {\n      console.log('Converting data '+ data+' to Date object')\n      return new Date(data);\n    } : function(data) {\n      console.log('Not converting data '+ data)\n      return data;\n    }\n  }\n});\n```\nFollowing is my schema\n\"createdAt\": {\n    \"type\": \"string\",\n    \"format\": \"date-time\",\n    \"convert\": true\n  }\nAfter validation I still see the input createdAt type is string. \nconst validSchema    = schemaService.validateData(collectionName, document, true);\n  expect(validSchema).to.be.equal(true);\n  expect(typeof document.ts.createdAt).to.be.equal('Date');\n. Thank you for sharing more details. Finally it worked for me & I feel like to treat you :-). Following are details on the final code.\nSchema validation code excerpt: \n```\n// Configure AJV object\nconst ajv = Ajv({coerceTypes: true,loadSchema: utils.loadSchemaHandler});\n// Add convert keyword for date-time schema\najv.addKeyword('convert',{\n  type: 'string',\n  compile: function(sch,parentSchema) {\n    return parentSchema.format === 'date-time' && sch ? function(value,objectKey,object,key) {\n  // Update date-time string to Date object\n  object[key] = new Date(value);\n  return true;\n} : function() {\n  return true;\n}\n\n}\n});\n```\nSchema excerpt\n\"createdAt\": {      \n  \"type\": \"string\",\n  \"format\": \"date-time\",\n  \"convert\": true\n}\nMy test data excerpt\n\"createdAt\": \"2016-07-12T22:34:30.160Z\",\n\"updatedAt\": \"2016-07-12T22:34:30.160Z\"\nMy test code excerpt\n```\nit('should return true for valid json data',function() {    \n  const document = _.cloneDeep(require('user_profile.json'));\n  const validSchema = schemaService.validateData('user_profile',document,true);\nexpect(validSchema).to.be.equal(true);\n  expect(typeof document.ts.createdAt).to.be.equal('object');\n  expect(document.ts.createdAt).to.be.an.instanceOf(Date);\n});\nit('should return false for invalid json data',function() {    \n  const document = _.cloneDeep(require('user_profile.json'));\n  const validSchema = schemaService.validateData('user_profile',document,true);\n  expect(validSchema).to.be.equal(false);\n  expect(typeof document.ts.createdAt).to.be.equal('string');\n});\n``\n. One quick question, is it possible to change the data just before validation starts? For my use case, it might be possible thatts.createdAtcan haveDateobject or string. Since my schema hastypeas string andformatas date-time therefore value asDateobject fails. Can I add any function which will do quick check and if type isDatethen convert to string beforeajv` start validation?\nNote: Don't want to modify original date object bcz I need to pass date as an object into mongodb database. Using addKeyword I took care of modifying data to convert date string to object after validation. Not sure how to change date object to string just before validation without modifying the data?\n. ",
    "g00fy-": "thanks! \n. ",
    "colmaengus": "I would like to use a swagger definition where the body parameter for post uses a reference to a definition.\njson\n[{\n          \"name\": \"body\",\n          \"in\": \"body\",\n          \"description\": \"new device\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"object\",\n            \"additionalProperties\": false,\n            \"required\": [\"type\"],\n            \"properties\": {\n              \"$ref\": \"#/definitions/device/properties\"\n            }\n          }\n        }]\nThe reason for doing it this way is that we also have a PATCH method where the set of required properties are different to POST.\nI've loaded the full swagger.json as in your above example.\nI've tried using the following but its not resolving the reference:\n.validate({$ref: 'swagger.json#/paths/devices/post/parameters[0]'}, req.body)\nI'm getting the following error: \"can't resolve reference swagger.json#/paths/devices/post/parameters[0] from id #\"\n. Should have spent more time looking at the json pointer spec.\nThe following works: $ref: 'swagger.json#/paths/~1devices/post/parameters/0'\n. we ended up sending de-referencing the swagger.json using https://www.npmjs.com/package/json-schema-ref-parser and then fed the required schema part of the swagger to ajv for validation.. ",
    "dinvlad": "(Sorry, deleted previous comment since I found a solution). Nice, in my case I'd like to use compile() instead of addSchema() for idempotency, but compile() doesn't assign an 'id' (or rather, it uses an empty 'id' if I'm correct). To get it working with the validate({ $ref: ... syntax, I had to\najv.compile(Object.assign({$id: 'spec'}, swagger));\n...\najv.validate('spec#/parameters/BodyParameter/schema', body);\n// or ajv.validate('spec#/parameters/HeaderParameter', headerValue);\nHere I still used the full ajv.validate() instead of validate() returned from compile(), otherwise it 'succeeds' validation even for invalid inputs or parameter refs.\n. That simplifies testing, e.g. when I need to pass a fake schema I cannot just ajv.addSchema(swagger, 'spec') in the global context. I could do it in a function, but then we're back to square one :) Or maybe the solution is more obvious and I just don't see it :). Are there plans to apply defaults from references as well?. Thanks, I've tried that before but incorrectly (through allOf), which is why it wasn't working. IMO that's actually better than through Definitions.. Yep, that's exactly what I've tried. Thanks again - I think it's even cleaner without allOf.. For some reason, it still reports Cannot use 'new' with an expression whose type lacks a call or construct signature. for ValidationError when I try new ValidationError(ajv.errors). ",
    "pbelamkar": "\nThis will work:\nvar ajv = require('ajv')({ removeAdditional: true });\najv.addSchema(swagger, 'swagger.json')\nvar isValid = ajv.validate({ $ref: 'swagger.json#/definitions/Employee' }, {\n  name: \"John\"\n});\n\nIn this Case if i want compare whole schema with api response instead of only name :\"John\" then how to define this. Because i am defined like this but it's not validating. \nlet validate = ajv.validate({ $ref: 'swagger.json#/definitions/AccountUser' },responseData);\n. Hi epoberezkin, \nI am facing different issue, could you please help me for this. \nI have checked \"sunshinecotejo\" schema and as per your suggestion, i have checked Json Pointer in '/definitions/Pet but i think there is already Json Pointer is present. Or i am not able to understand this. \nSame type of json schema i have which not throwing any error and not validating key type. Could you please help me. \nUse Case : If i am passing wrong type in schema it should throw error but it's not throwing any error. . Please following updated schema \n{\n    \"swagger\": \"2.0\",\n    \"info\": {\n      \"title\": \"###\",\n      \"description\": \"###\",\n      \"version\": \"2.0.0\"\n    },\n    \"host\": \"localhost:8082\",\n    \"basePath\": \"/###/v2\",\n    \"schemes\": [\n      \"http\",\n      \"https\"\n    ],\n    \"definitions\": {\n      \"UsersReply\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"Users\": {\n            \"items\": {\n              \"$ref\": \"#/definitions/User\"\n            }\n          },\n          \"maxRecords\": {\n            \"type\": \"integer\",\n            \"description\": \"Unsigned integer represeting total number of users found.\"\n          }\n        }\n      },\n      \"User\": {\n        \"type\": \"object\",\n        \"required\": [\n            \"userId\",\n            \"email\",\n            \"fullName\",\n            \"isActive\",\n            \"accountId\"\n          ],\n        \"properties\": {\n          \"userId\": {\n            \"type\": \"string\",\n            \"description\": \"UUID represeting unique userId.\",\n            \"example\": \"CA761232-ED42-11CE-BACD-00AA0057B223\"\n          },\n          \"email\": {\n            \"type\": \"string\",\n            \"description\": \"Email of user.\"\n          },\n          \"primaryEmail\": {\n            \"type\": \"string\",\n            \"description\": \"primaryEmai of user.\"\n          },\n          \"fullName\": {\n            \"type\": \"string\"\n          },\n          \"contactNumber\": {\n            \"type\": \"string\"\n          },\n        }\n      }\n    },\n    \"paths\": {\n      \"/users\": {\n        \"get\": {\n          \"tags\": [\n            \"Users\"\n          ],\n          \"summary\": \"Get users.\",\n          \"description\": \"Used to get users\",\n          \"operationId\": \"getUsers\",\n          \"responses\": {\n            \"200\": {\n              \"description\": \"successful operation\",\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"statusCode\": {\n                    \"type\": \"string\"\n                  },\n                  \"statusMessage\": {\n                    \"type\": \"string\"\n                  },\n                  \"reply\": {\n                    \"$ref\": \"#/definitions/UsersReply\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"tags\": [\n      {\n        \"name\": \"Users\",\n        \"description\": \"user APIs.\"\n      }\n    ]\n  }\n. https://runkit.com/pbelamkar/5c3d41135318ea0012fa7fff\nNow above example if i am not passed this property \"\"foo\": { \"type\": \"number\" },\" in the schema, then it should give an error. Because \"foo\" as an required key in schema and i am giving this in data. . ",
    "BryanJacobs": "An example of this happening is if you have a schema object with \"properties\": { \"foo\": { \"type\": \"integer\" } }, and then \"patternProperties\": {\"^.*$\": { \"type\": \"string\" } }. Data with \"foo\": 3 will fail validation because it tries to match both the integer and string schemas, where it should stop when the integer constraint is satisfied.\n. Looked into the failing test in the json schema. Apparently the standard specifies tha both patternProperties and properties must be matched. Never mind!\n. ",
    "target-san": "I meant this as ajv's feature. The simplest case would be\najvInstance.addSchema(someSchema, '');\n// ...\nvar validator = ajvInstance.compile({ $ref: '#/path/in/someSchema' });\nHere, any local references in compiled schema are first resolved against schema itself and then against some registered schema with empty ID. This isn't something really important, just kind of sugar.\n. ",
    "gajus": "Features such as:\n- enumNames https://github.com/json-schema/json-schema/wiki/enumNames-(v5-proposal)\n- Custom errors, https://github.com/json-schema/json-schema/wiki/Custom-error-messages-(v5-proposal)\ncould be supported without breaking contract with v4.\n. Ignore. Didn't read the docs fully before commenting.\nhttps://github.com/epoberezkin/ajv#validation-keywords\n. @felixfbecker\n\nBut I think an assert method is something very basic every validation library should have.\n\nBut none of the competing libraries do have it:\n- https://github.com/geraintluff/tv4\n- https://github.com/mafintosh/is-my-json-valid\n- https://github.com/bugventure/jsen\n- https://github.com/AlexeyGrishin/schemasaurus\n- https://github.com/zaggino/z-schema\n- https://github.com/pandastrike/jsck\n- https://github.com/tdegrunt/jsonschema\nAPI familiarity is a valid argument. However, please provide more than one example when making a case.\n\nTo have this method, thousands of users have to all write their own wrapper, and write their own unit tests for it, update it etc. If it was in the library, a user can rely on it that it is well-tested.\n\nJust release an NPM package ajv-assert that provides a wrapper for the check.\n. Should this be not merged, it can be added by a user using:\n```js\n// For the source: https://gist.github.com/dperini/729294\n// For test cases: https://mathiasbynens.be/demo/url-regex\nconst URL_RULE = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S)?@)?(?:(?!(?:10|127)(?:.\\d{1,3}){3})(?!(?:169.254|192.168)(?:.\\d{1,3}){2})(?!172.(?:1[6-9]|2\\d|3[0-1])(?:.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-)[a-z\\u00a1-\\uffff0-9]+)(?:.(?:[a-z\\u00a1-\\uffff0-9]-)[a-z\\u00a1-\\uffff0-9]+)(?:.(?:[a-z\\u00a1-\\uffff]{2,})).?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;\najv.addFormat('url', URL_RULE);\n```. https://github.com/json-schema-org/json-schema-spec/issues/233. I have to disable the precommit hook to make the 625bed1 commit, because the tests are failing.\nHowever, the rule is valid and the test cases are valid. https://jsbin.com/cepeqab/1/edit?js,output\nHow is the regex test executed on Ajv?. Sorry, I forgot to remove 3 test cases that are not covered by the regex. That doesn't change the original problem.. Is there anything else that needs to be done for this to get merged? (or would you rather close it, given that it is unlikely to be added to json-schema standard).. > I would like to see this merged in :) Commenting so I get notifications \ud83d\udcaf\nThere is a subscribe button on the issue and \ud83d\udc4d to express your vote. Don't spam others on the issue.. As long as you validate the shape of the configuration object, then it is a good change.\nMy biggest grudge with using simple objects for configuration is when there are no assertions made about their content, e.g.\njs\nwebpack({\n  debug: true,\n  stirct: true,\n  rules: [\n    {\n      test: /\\.js$/,\n      loader: 'babel-loader'\n    }\n  ]\n});\nFor all you know by scanning the code this is valid configuration. If webpack does not throw an error about unknown configurations, then you'd not know that debug is not a valid configuration here, strict is a typo and therefore will have no effect, etc.\ni.e. If you do this, you need to use JSON schema to validate the shape of the validate instructions.\n\nAt least in part this can be avoided using type annotations (e.g. Flow). This has no runtime costs. Though the benefits are restricted to the few who are using static type checking.. > I think both positional arguments and objects are equally affected by the [lack of] validation.\n\nNo. You cannot make a typo in a parameter name when using positional arguments.\nYou can put them in a wrong order, sure, but thats likely to cause a runtime error.\nPutting an unknown property to the configuration object will go unnoticed.. > It also creates panic within the team. Sure i know its harmless, but when every one of my team mates pull the code down and see this new warning with the word 'critical', it creates a panic that the build lost stability.\nWhats the actual error? I don't see any error message referenced in this thread that'd say \"critical anything\".\n(I am not arguing against the issue. Just want to know whats the actual error.). > I'm curious to what even caused this issue, as 4.11.3 does not cause this, but 4.11.4 or 5 does.\nHave you tried looking into the changes introduced between the two tags to identify what @epoberezkin change triggered the warning?. Related issue https://github.com/webpack/webpack/issues/196.\nWhatever the change, Ajv is the subject of the recent discussion in that thread.. It does.\nThe issue here is \"localhost\". The current regex does not allow TLD-less domains.\nIdeally, this should be a configurable option.. See the note at:\n\nAssume that this regex will be used for a public URL shortener written in PHP, so URLs like http://localhost/, //foo.bar/, ://foo.bar/, data:text/plain;charset=utf-8,OHAI and tel:+1234567890 shouldn\u2019t pass (even though they\u2019re technically valid). Also, in this case I only want to allow the HTTP, HTTPS and FTP protocols.\n\n\u2013\u00a0https://mathiasbynens.be/demo/url-regex\nI'd say it shouldn't. In most cases it would produce unexpected result. It could even be used as an attack vector.\nI'd recommend that in the case user requires non-public URLs (such localhost, date URIs, tel, skype, etc.) it should be implemented in the user-space.. Localhost URLs are intentionally excluded.\nSee note at https://mathiasbynens.be/demo/url-regex\n\nAssume that this regex will be used for a public URL shortener written in PHP, so URLs like http://localhost/, //foo.bar/, ://foo.bar/, data:text/plain;charset=utf-8,OHAI and tel:+1234567890 shouldn\u2019t pass (even though they\u2019re technically valid). Also, in this case I only want to allow the HTTP, HTTPS and FTP protocols.\n\n. You can use pattern to define your own regex pattern.. > Doing this would create a precedent where validated data is used in error messages, creating a vulnerability (e.g., when ajv is used to validate API data/parameters and error messages are logged).\nHow could this be a security concern?\nAssuming that the concern is that it will reveal the schema, then it is not the case. If you have provided an additional property that is not allowed, then the error will identify the user supplied property, not the system property name.\nAssuming that the concern is that property name could include malicious content (e.g. attempted XSS injection), then a simple filter (e.g. /a-zA-Z_-\\./) can be used. This would exclude some valid properties \u2013 then the validation message could say something along the lines of \"1 property name excluded\".\nI run into this error a lot, and sometimes it is really unclear what property name the error is referring to (esp. when using oneOf schemas).. https://stackoverflow.com/questions/16468309/can-domain-name-have-two-continuous-hyphens\n\n4.2.3.1. Hyphen Restrictions\nThe Unicode string MUST NOT contain \"--\" (two consecutive hyphens) in the third and fourth character positions and MUST NOT start or end with a \"-\" (hyphen).\n\nHowever, it seems that you are able to register domain names such as http://a--a.com/\nRelated:\nhttps://twitter.com/kuizinas/status/1068112490557595648. @epoberezkin This shouldn't be closed, though.\nhttp://b--b.com/ is a valid domain name.. > Why it is marked as invalid in the test cases then I wonder?...\nI think it is mistake. Let's see what Mathias replies to that tweet that I have shared.. I have learned that I am wrong:\n\nIt is not a bug in ESLint. It is a configuration issue. https://github.com/eslint/eslint/issues/7983#issuecomment-275257540\nThis cannot be used in the code until general ES6 adoption.. \n",
    "sushant160185": "Yes. I'm trying it on windows.\nI tried two ways. First downloaded the zip and copied in into file system and then tried npm install. Then also tried to git cloned and then install, however the issue was same. \n. @epoberezkin Yes, all I did was create a clone of ajv (using git desktop), \"cd ajv\" and \"npm install ajv\" and I got this error. I haven't changed or added anything in the ajv repository. I'm trying it on windows 7 os. \n@ralphtheninja package.json is part of the ajv repository. No changes done in that.\nI'm new to this npm environment so if you can give me some steps on how should I do it on windows environment then it will be helpful for me.\nThanks.\n. Yes, I did. Seems it still gave same exception. Attached is the log.\nnpm-debug.txt\n. No, not to change anything in ajv. I wanted to try this in a simple browser based app. So at first I tried creating bundle from ajv package, however, \"npm run build\" script failed. I then tried to do installation first and then check the build process, however, that also failed. \nIn the meantime, I picked up the file from cdnjs site for my app so as such I'm not stuck but was just hoping that I should be able to install and/or create the bundle independently.\n. Thanks @blakeembrey. This copied the ajv and other dependencies inside my project app with some warnings.\nFor the package creation for web (\"npm run bundle\" mentioned in the browser documentation section), what should I do since there is no bundle script in this copied folder. Although as @epoberezkin mentiond, it already has those files inside dist folder. Still how to create the ajv bundle for browser usage? Can you give me the steps?\n. @epoberezkin  Thanks. I ran these commands. Everything ran fine except npm run bundle, which gave error \n\n'.' is not recognized as an internal or external command,operable program or batch file.\n. @blakeembrey I made the changes however it still failed with following error. \najv\\scripts\\bundle:9\nname=$(./scripts/info $package name)\n       ^\nSyntaxError: Unexpected token .\n    at Object.exports.runInThisContext (vm.js:53:16)\n    at Module._compile (module.js:513:28)\n    at Object.Module._extensions..js (module.js:550:10\n    at Module.load (module.js:458:32)\n    at tryModuleLoad (module.js:417:12)\n    at Function.Module._load (module.js:409:3)\n    at Function.Module.runMain (module.js:575:10)\n    at startup (node.js:160:18)\n    at node.js:456:3\n. I did that as well. The error this time was: \najv\\scripts\\bundle:9\nname=$(node scripts/info $package name)\n       ^^^^\nSyntaxError: missing ) after argument list\n. \n",
    "ralphtheninja": "@sushant160185 Can you provide us with a package.json of your project so we can try and reproduce this?\n. Works well on linux as well. I suspect something is fishy here ;)\n. > I'm new to this npm environment so if you can give me some steps on how should I do it on windows environment then it will be helpful for me.\nYou shouldn't need to do anything special. Unfortunately I don't have access to a windows machine at home :/ I can try tomorrow.\n. ",
    "jdthorpe": "Follow-up: is the fact that objects get serialized the reason that this fails validation:\najv.validate({\n    type: 'object',\n    properties: {\n       id: { type: [\"number\",\"null\"] }\n    },\n    required:[\"id\"]\n},\n{id:undefined})\n\ni.e. since JSON.stringify({id:undefined}) yields {}.  Sorry for the dumb question -- just trying to understand AJV a bit better.\n. ",
    "psunbury": "Yes but if I have it in the same file it works. It only doesn't work when I separate it into separate schema. So shouldn't what you are describing not work for either method?\n. Yep. I totally get what you are saying. The schema is more than 3k lines and I doubt I can share it. I was trying to make you a simple example to demonstrate it but I couldn't reproduce the error, so I must be missing something. I'll read your links and see what I can do, if I can't clear it up, I'll work more on a test case. \n. Can I email you the schema files?\n. Did you get the files? I sent them to your evgeny.poberezkin@mailonline.co.uk account. I want to make sure you go it because email with attached files sometimes don't always go through.\n. Sent.\n. Ok I added a tester file. It's not the same code we use but the code we are using has lots in it and probably would just take up more time and be confusing. I seem to be getting the same problem with the test code.\nIt works after removing \n            \"caption\": {\n              \"$ref\": \"def#/definitions/text_assets\"\n            }\nFrom basicAssets.json. Just like the code we have does, so I am pretty sure it is showing the same issue.\n. Tell me if you  need anything else from me.\n. Thanks a lot for looking into this. This is great.\nWhat is a rough time frame for an update to this bug (week, month, year?)? I just want to know if I should be using the workaround or just wait for the fix.\nThanks.\n. ",
    "sengkathir": "@epoberezkin, sorry to comment in the same thread. Could you explain, in your template example\n{\n  \"id\": \"someSchema\",\n  \"type\": \"object\",\n  \"properties\": {\n    {{~ it.properties:p:i }}\n      {{?i}},{{?}}\n      \"{{= p.name }}\": {{= JSON.stringify(p.schema) }}\n    {{~}}\n  },\n  \"required\": [\n    {{~ it.properties:p:i }}\n      {{?i}},{{?}}\n      \"{{= p.name }}\"\n    {{~}}\n  ]\n}\np is \n{\n  \"name\": \"email\",\n  \"schema\": { \"type\": \"string\", \"format\": \"email\" }\n}\nor \n{\n  \"name\": \"email\",\n  \"schema\": {\n      \"id\": \"#email\",\n      \"properties\": {\n        \"email\": { \"type\": \"string\", \"format\": \"email\" }\n      },\n      \"required\": [ \"email\" ]\n    }\n}\n?. @epoberezkin, following data structure is working\n{\n  \"name\": \"email\",\n  \"schema\": { \"type\": \"string\", \"format\": \"email\" }\n}\nis there any way to use fields with following data structure in dynamically generated templates?\n{\n  \"name\": \"email\",\n  \"schema\": {\n      \"id\": \"#email\",\n      \"properties\": {\n        \"email\": { \"type\": \"string\", \"format\": \"email\" }\n      },\n      \"required\": [ \"email\" ]\n    }\n}\nthanks!. ",
    "iamdanthedev": "@mbroadst Hi, I've just hit the same problem (validating just one field). \nIn my project I am using only a subset of json schema (only objects, no dependencies, etc)\nIt seems like in order to validate a single field you can simply tear out it's property out of the whole schema and provide to a validator\nIn the example below this._schema points to the json schema object and this._db.$ajv is a mere instance of Ajv\n``typescript\n  public validateProp(prop: string, value: any): boolean {\n    // const valid = this._validate(value,.${prop}`);\n    const valid = this._db.$ajv.validate(this._schema.properties[prop], value);\nif (valid === true) {\n  return true;\n}\nelse if (this._db.$ajv.errors) {\n  throw new ValidationError(this._db.$ajv.errors);\n}\nelse {\n  throw new Error('Unknown error occured');\n}\n\n}\n```\n. The only thing, I don't know whether ajv will compile a new schema on every run of this function for a single property. Maybe I should provide an $id or $ref to avoid recompilation? Maybe @epoberezkin could gracefully comment on this matter?\nThanks. Thanks for quick response!. ",
    "rayfoss": "@epoberezkin it seems most people want to check just one property.\nI'm trying to validate a patch call, which may have 20 different properties out of 50. I would really love an AJV option that ignores required\nThe way im working around it is duplicating the schema in memory and adding required to the schema on the copy. \nworkaround feathers psudo code\npartialSchema =  { ... }\nschema = Object.assign({}, partialSchema, {required: ['name', 'email']})\nhooks = {\n  create: validateSchema(schema, ajv)\n  update: validateSchema(schema, ajv)\n  patch: validateSchema(partialSchema, ajv) \n}. ",
    "agg23": "I'm another interested in using AJV for validating PATCHmethods, but any schema that has required properties breaks for that use case. My current hack is to duplicate the current schema, remove the required property from each schema object, then add this new schema to AJV:\n```\najvValidator.addSchema(schema, \"schema\");\najvValidator.addSchema(partialSchema(JSON.parse(JSON.stringify(schema))), \"partialSchema\");\nfunction partialSchema(dbschema: any) {\n    let partialSchema = Object.assign({}, dbschema);\n    for(let schemaName in partialSchema.definitions) {\n        let schemaEntry = partialSchema.definitions[schemaName];\n        if(\"required\" in schemaEntry) {\n            delete schemaEntry.required;\n        }\n    }\nreturn partialSchema;\n\n}\n```\nThis can then be referenced by:\najvValidator.validate(\"schema#/definitions/Item\", request.body) for POST or\najvValidator.validate(\"partialSchema#/definitions/Item\", request.body) for PATCH.. ",
    "gboysko": "Sorry, it looks like a user error. I had existing code that used ajv.validate(schema, data) and replaced it to use a compiled validate function, but failed to remove the schema as the first argument. While I would still expect dataPath to have something valid, I don't think that this is a valid use case. \nThanks for the other notes. Good points.\n. Great. I'll work up an example tomorrow and post.\n. I have a very simple test case that reproduces the problem. The schema I have supplied is the same one that I used originally. I could likely be pared down to a smaller version, but I haven't attempted yet.\nHope that this helps.\ncompileBug.zip\n. Does this mean that I can no longer cache my validation functions for re-use? I create validation functions for each schema, compiling each separately. I'm getting the error when I try to assemble my schemas (using Ajv.addSchema). This happens before I have any data to validate yet.. Thanks, @epoberezkin. Sorry for the confusion. I thought I had to supply the actual data object in the constructor. By using new Ajv({useDefaults: true, $data: true}), I was able to generate all of my schema validator functions.. ",
    "medez": "Thank's, i'll try it \n. ",
    "davidsimonboyd": "@epoberezkin \nWe've also encountered this issue. \nUnfortunately there are 4 other libs sitting between my code and ajv, none of which support passing options through.\nWould you accept a PR using a slightly stricter regex in the default fast mode?\nI have a working branch, and would like permissions to raise a PR if possible.   . I was hoping it could be something like this:\n(\\d\\d\\d\\d)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])\nwith the same change applied to date-time as well\nIt would catch many incorrect dates, and not affect performance too much ... ",
    "florianreinhart": "That's what I did. I have removed the debugging code.\n. Alright, thank you!\n. ",
    "brierel": "Ok... Can you detail why not? Is it because it declares a namespace, and for public use on DefinitelyTyped we would rather expect a module? This would not involve that much modifications.\n. Ok thank you, indeed it makes sense. \najv module has been effectively in my project dependencies for some time, so I have now to check why the definition file was not correctly detected by WebStorm.\n. ",
    "onury": "ok. it's in npm/@types. \ud83d\udc4d . That's even better bec. it'll also enable relational validation... Cases such as \"password cannot include username\"... Or \"company name is required if account type is corporate\".\nSo you'd return a value (re-formatted or not) to validate. void to invalidate, right?\n. Thanks for the custom-keywords suggestion.\nUntil this is built-in, this is how I reformat the validated data:\nreformat module that defines formatter methods:\njs\nconst reformat = {\n    // remove all non-numeric chars\n    numeric() {\n        return value.replace(/[^\\d]/g, '');\n    }\n};\nSchema validator:\n``` js\n // dep modules\nimport AJV from 'ajv';\nimport Notation from 'notation';\n// own modules\nimport reformat from './reformat';\nfunction _identity(v) {\n    return v;\n};\nlet ajv = new AJV(options);\najv.addKeyword('reformat', {\n    type: 'string',\n    compile(sch, parentSchema) {\n        // ref for formatter method\n        let format = reformat[sch];\n        // if invalid method, we'll have no errors, just return the value.\n        if (typeof format !== 'function') format = _identity;\n    return (data, dataPath, parentObject, propName, rootData) => {\n        // remove leading dot\n        let dPath = dataPath.slice(1);\n        // Using Notation to set/update the value on the parentObject\n        Notation.create(parentObject).set(dPath, format(data));\n        // always return true (for validation).\n        return true;\n    };\n},\nerrors: false,\nmetaSchema: {\n    type: 'string',\n    additionalItems: false\n}\n\n});\n```\nAnd in the schemas:\njs\n{\n    ...\n    \"mobile\": {\n        \"type\": \"string\",\n        \"maxLength\": 15,\n        \"reformat\": \"numeric\" // <\u2014\u00ab\n    },\n    ...\n}\n. Thanks, I treated parentObject as if it's the root object. \nI've updated accordingly.\njs\najv.addKeyword('reformat', {\n    type: 'string',\n    compile(sch, parentSchema) {\n        let format = reformat[sch];\n        return (data, dataPath, parentObject, propName, rootData) => {\n            parentObject[propName] = format(data);\n            return true;\n        };\n    },\n    errors: false,\n    metaSchema: {\n        type: 'string',\n        enum: Object.keys(reformat)\n    }\n});\nenum: Object.keys(reformat) helps but the error message is ambiguous: Fatal error: Error: keyword schema is invalid: data should be equal to one of the allowed values. Is there a way to modify this message to indicate which schema and give a pointer (to reformat keyword)?\n. I've improved this to both accept string or array (to apply multiple reformat methods in order). \njs\nlet methodNames = Object.keys(reformat);\najv.addKeyword('reformat', {\n    type: 'string',\n    compile(sch, parentSchema) {\n        // ensure array\n        let methods = !Array.isArray(sch) ? [sch] : sch;\n        return (data, dataPath, parentObject, propName, rootData) => {\n            // apply reformat methods in order\n            methods.forEach(method => {\n                data = reformat[method](data);\n            });\n            // update reformatted value\n            parentObject[propName] = data;\n            // always return true (for validation).\n            return true;\n        };\n    },\n    errors: false,\n    metaSchema: {\n        oneOf: [\n            {\n                type: 'string',\n                enum: methodNames\n            },\n            {\n                type: 'array',\n                items: {\n                    type: 'string',\n                    enum: methodNames\n                },\n                minItems: 1,\n                uniqueItems: true\n            }\n        ]\n    }\n});\n. Here is a runkit: https://runkit.com/onury/ajv-issue-339\n. I don't get it. How is number 10 alphabetic? It's not even a string.\n10 is not valid alphabetic format but it's a valid integer. So it's valid for exactly one sub-schema. \nI believe you should re-open this issue.\nIt works if I add \"type\": \"string\" but I still think this should not be mandatory, for 2 reasons:\n- format is already only for strings\n- My validator function already checks for that (already returns false)\n. fair enough.. thanks.\n. Fair enough. Thanks.. Thanks @epoberezkin. It was definitely throwing on chargingProfile part; so thought it was trying to validate an omitted property.\nA JSON-Schema could be tailored for validating options.. but would require maintenance with every new version of AJV. It'd be better if AJV auto-validates it..   \ud83e\udd15 \nEdit: At least the thrown error could be a bit less subtle, a huge code block is thrown with a too short message.. Error compiling schema message misleads you to think this is related to schema.\n. ",
    "skolmer": "Thanks for the fast response. Does it mean that you are planning to add support for special characters?\n. Looks right, thank you!\n. ",
    "yyscamper": "+1,  I am also looking forward to this feature.  In my case, the additionalProperties doesn't work as my  expectation when I use the allOf to merge two-schemas, but merge can.\n. ",
    "superczan": "Thank you very much for the prompt response. It was indeed mistake in my part. Apologies for the false alarm =).\n. ",
    "erotavlas": "I did try that as well, but the code did not work.  The new Ajv object that is created in that code example is not recognized.  (seems the script tag I tried adding got interpreted as a script, not as a code snippet - sort of fixed it int he original comment) \nWhat happens is it throws error on this line\nvar Ajv = require('ajv');\n\ndojo.js:15 Uncaught Error: undefinedModule\n\nRegardless I cannot use the cdnjs anyway because my program is required to run offline (no internet access)\nIn Dojo the require might be something like this\n```\n \n\n\n        //var Ajv = require('ajv');\n        require([\"ajv\"], function (Ajv) {\n            var ajv = Ajv({ allErrors: true });</p>\n<pre><code>        var schema = {\n            \"properties\": {\n                \"foo\": { \"type\": \"string\" },\n                \"bar\": { \"type\": \"number\", \"maximum\": 3 }\n            }\n        };\n\n        var validate = ajv.compile(schema);\n\n        test({ \"foo\": \"abc\", \"bar\": 2 });\n        test({ \"foo\": 2, \"bar\": 4 });\n\n        function test(data) {\n            var valid = validate(data);\n            if (valid) console.log('Valid!');\n            else console.log('Invalid: ' + ajv.errorsText(validate.errors));\n        }\n    });\n\n\n&lt;/script&gt;\n</code></pre>\n<p>```\n. What do you mean by the last comment?  'global ajv'</p>\n<p>Do you have a working example on JSFiddle?</p>\n<p>Here is my attempt with dojo, https://jsfiddle.net/pbq2yjxy/14/\nAnd without (just pure javascript) https://jsfiddle.net/501874ea/2/</p>\n<p>Both fail\n. The second fiddle works as you said, but when using in conjunction with Dojo, it is not possible.  It just does not work.  I do not know if it is even possible to make it work in a project that also uses Dojo.<br />\n. http://stackoverflow.com/q/38402021/1462656\n. I think you are right, I got it to work by loading the ajv bundle before I load dojo.js. My index.html looks like this.</p>\n<p>```\n&lt;!DOCTYPE html&gt;\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title></title></p>\n<pre><code>&lt;link rel=\"stylesheet\" href=\"./third_party/dojo-release-1.10.4/dijit/themes/claro/claro.css\" /&gt;\n</code></pre>\n<p></head>\n<body class=\"claro\" oncontextmenu=\"return false;\"></p>\n<pre><code>&lt;div id=\"app\" style=\"width: 100%; height: 100%;\" &gt;&lt;/div&gt;\n\n&lt;script&gt;\n    var dojoConfig = (function () {\n        return {\n            async: 1,\n            // Don't attempt to parse the page for widgets\n            parseOnLoad: false, //It is recommended that parseOnLoad be left at false (it defaults to false, so you can simply omit this property), and that developers explicitly require dojo/parser and call parser.parse().\n            tlmSiblingOfDojo: 0,\n            isDebug: 1,\n            baseUrl: '',\n            locale: 'en',  // need to set a locale when using string bundles and a build\n            packages: [\n                { name: 'dojo', location: 'third_party/dojo-release-1.10.4/dojo' },\n                { name: 'dijit', location: 'third_party/dojo-release-1.10.4/dijit' },\n                { name: 'dojox', location: 'third_party/dojo-release-1.10.4/dojox' },\n                { name: 'xstyle', location: 'third_party/xstyle-master' },\n                { name: 'dstore', location: 'third_party/dstore-1.1.1' },\n                { name: 'dmodel', location: 'third_party/dmodel-0.1.0' },\n                { name: 'json-schema', location: 'third_party/json-schema-0.2.1' }\n\n            ],\n            appConfig: {       // here is where you can set app level config by injecting on the server side\n                foo:1,\n                bar:0\n            },\n            // deps is an array of resource paths which should load immediately once Dojo has loaded\n            // Require `app`. This loads the main application module, `app/main.js`, since we registered the `app` package above.\n            deps: ['app']\n\n        };\n    })();\n&lt;/script&gt;\n</code></pre>\n<p><!--Load AJV-->\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/ajv/4.1.7/ajv.bundle.js\">\n load Dojo \n\n<script>\n\n        var ajv = Ajv({ allErrors: true });\n\n        var schema = {\n            \"properties\": {\n                \"foo\": { \"type\": \"string\" },\n                \"bar\": { \"type\": \"number\", \"maximum\": 3 }\n            }\n        };\n\n        var validate = ajv.compile(schema);\n\n        test({ \"foo\": \"abc\", \"bar\": 2 });\n        test({ \"foo\": 2, \"bar\": 4 });\n\n        function test(data) {\n            var valid = validate(data);\n            if (valid) console.log('Valid!');\n            else console.log('Invalid: ' + ajv.errorsText(validate.errors));\n        }\n\n\n\n</script>\n\n\n\n```\n. ",
    "tshelburne": "Makes sense - thanks for the quick response!\n. ",
    "zag2art": "Hm, how could I achieve the following behaviour without \"Ban unknown properties\":\njson\n{\n  \"definitions\": {\n    \"first\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"prop1\": {\"type\": \"string\"}\n      }\n    },\n    \"second\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"prop2\": {\"type\": \"string\"}\n      }\n    }\n  },\n  \"allOf\": [\n   {\"$ref\": \"#/definitions/first\"},\n   {\"$ref\": \"#/definitions/second\"}\n  ] \n}\nHere I want to mix two \"definitions\", and I don't want my json-object to have \"additionalProperties\". In the example, only \"prop1\" and \"prop2\" are allowed. \n. Actually I like ajv and I think that the performance is not the \"main\" feature. Additionally, you can take a look f.e. at https://github.com/geraintluff/tv4/tree/master/test/tests/12%20-%20banUnknownProperties and implement oneOf and not the way they did.\n. Thanks\n. How do I implement such a logic using $merge or $patch? For example I have more then two definitions of objects. lets say four with a few properties. And I want to 'merge' all the four together to get one. The other details as in the above example. The main restrictions: I don't want to have additional properties and I don't want to duplicate fields (even their names).\nI tried $merge. It works for two objects but I did not find a easy way to merge four object at once. Maybe $patch can help but I did not managed to get it working in the use case at all. Maybe I'm just missing something.. ",
    "stuartpb": "Wouldn't it be simplest for somebody to just implement a module that returns a copy of a given schema with object.additionalProperties = object.additionalProperties === undefined ? false : object.additionalProperties for every object that defines an object (ie. {\"type\": \"object\"}), and then anybody who wants \"ban additional properties\" mode in any engine that doesn't natively support it just wraps the schema validator in a step that transforms the schema in that fashion?. If I understand what you're saying, then I don't see how that isn't solved by recursively setting additionalProperties for the subschemas of items, oneOf, anyOf, and allOf (and not setting it for any object that has one of those defined).. I mean, I get the cases where it breaks allOf - two schemas defining different property sets being fundamentally irreconcilable - but I'm fine with that, as I don't use allOf this way in my schema (and, of course, it wouldn't be impossible to write a different function to basically pre-merge allOf that could run before this function to avoid that, if that's the desired interpretation).. Well, I don't see how another layer that copies the top-level properties into the subschemas of anyOf / oneOf (or allOf, for schemas where the cases wouldn't otherwise need to be merged) wouldn't solve that, for schemas that aren't written that way already.. Nope, it was in draft-06, that's why @handrews merged this upstream: https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.4. ",
    "jonah-williams": "Thanks for the quick response.\nYou're correct that I included those fragments only because it seemed reasonable when organizing the domain. I hadn't considered removing properties, it looks like that does validate but doesn't make the schemas very useful ;)\nSorry I'm not yet familiar enough with the project to offer a pull request with a fix instead of an issue.\n. @epoberezkin fantastic, I'm happily using 4.2.0 now and it's working great so far. I'll try to share the performance difference once the switch is deployed and gets some real traffic.\n. ",
    "ivawzh": "Very well explained. Thank you!\n. ",
    "suricactus": "It would be nice if we have something like this by default, I think. Thank you!\n. I believe that JSON Schema checks two different things in the same time:\n the schema - if the JSON is structured the correct way that an application or API understands\n the data - it conforms some less crucial validations, for example minimum and maximum\n// schema1.json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"relatives\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"age\": { \"type\": \"integer\", \"minimum\": 18 } \n  }\n}\nIf we pass:\n// data1.json\n{\n  \"relatives\": true,\n  \"age\": 20\n}\nThis is structure error, I expect relatives to be an array. All other errors does not make sense, because the JSON is not structured the way it should be.\n// data2.json\n{\n  \"relatives\": [\"Vladimir\", \"Ivan\"],\n  \"age\": 13\n}\nIn this second example, the structure is ok, but it does not validate the data. I would like to collect all errors that are connected with data validation, because the submitted data is wrong and the party which input the data should know it.\nThe main difference is who is responsible for not passing validation. If I have structure error, it should be the software which packaged and gave me this wrong data to validate. On the other hand if the structure is ok, but data validation does not pass, I have to blame the input - user, sensor etc.\nNow imagine we have extremely big JSON, let's say tens or hundreds of megabytes. If I put allErrors: true option, it will validate the whole JSON. If I have a callback, I would cancel the schema validator as soon as I encounter structure error. ",
    "jfstgermain": "It's unfortunate that non scalar coercion was dropped.  It's very useful when having to convert XML payloads to JSON.  In XML, Arrays of one object are converted to a simple object since there's no way of telling the intent of the markup eg: \n<users>\n      <name>Joe</name>\n   </users>\nIn our swagger file, users is an array but this gets transformed into:\n{users:{name:Joe}} instead of {users:[{name:Joe}]}\nFrom what I see it doesn't seem to be the case, but is there a way to add custom rules or override them?  \nThanks\n. I meant Array coercion for non scalar types.... Looking into how to achieve this.  I'm really impressed by the extensibility of the lib!  Great job @epoberezkin  :). ",
    "j-funk": "Thank you, grateful for the help.\n. ",
    "abritinthebay": "Yes... I know that. That's not what I asked. \nWill ajv load local files using that id method? I can do a local uri for the schema uri. I'm trying that now (it works if it's a remote uri) but I'm running into issues with a local uri and I'm wondering if I've screwed it up OR it's not supported.\neg:\n\"id\": \"./my/local/path/\"\n\"$ref\": \"some/other/file.json\"\nI'm not asking for clarity on the schema id property - I'm well aware of that.\n. ahh ok, I see. That makes sense. I have no idea how I have this working with remote files then! \ud83d\udc4d \n. ",
    "dalcib": "Ok. I understand. I going to make another PR fixing this.\n. @blakeembrey, with export =I can export only one thing. How could I to export another thing like 'Options'?\n. ",
    "foray1010": "it works!!!! Thanks, it is awesome for making API with\njs\n{\n  \"coerceTypes\": true, // convert type of request params\n  \"removeAdditional\": true // screening response object\n}\nSaved me a lot of work!!!\n. ",
    "reharik": "So this is a good explanation of what is happening, but it doesn't really address the issue that, as a property level validator, this is very difficult to use.  I can try and dig in and create a pull request if you'd be open to adding a property value to the error object that would provide a consistent ( between different types of errors ) user experience.\nThanks,\nr\n. So if I understand correctly there are basically only two paths.  One is\nfor the required rules, and the other is for the more specific type, format\netc rules.  You feel that the client can derive what the property is and\nthat is enough, and if it turns out to be pretty straightforward, then\nthat's cool.  I feel that the client should be presented with an easily\nconsumable ( no need for derived or constructed data ) payload, but that is\njust an opinion.\nI think perhaps my use case is not a frequent use of the product.  I'm\ntrying to use json-spec and ajv to validate my data in as many places as I\ncan, e.g. in an api middleware on the frontend and as client side\nvalidation on a property by property level.  It is the latter that I guess\nis not that common a use case and thus what I'm asking for is not that\ncommon.\nIn any case, thanks for engaging me and explaining how I can get what I\nneed.\nR\nOn Tue, Aug 2, 2016 at 8:34 AM, Evgeny Poberezkin notifications@github.com\nwrote:\n\nWhat I was trying to explain is that you mix two different concepts here -\nthe property of the data object in which the error happens (e.g. when you\nuse keywords type, minimum etc.) and the property to which the error is\nrelated (when you use required, additionalProperties, dependencies) - in\nwhich case the error happens on the object level, not on the property level.\ndataPath points to the point in the object where the error happens.\nproperty related to error is always available in error.params.\nI don't think we should add one more property in error object if it\ndoesn't add any additional information. I think it should be in the\napplication code that processes the errors... I will think about it.\nIn any case, the structure of error objects for all keywords is documented\nand it won't change, not without major version change, so you can rely on\nit in the code that processes errors.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/epoberezkin/ajv/issues/255#issuecomment-236905449,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA12zkIck3UGr-xhB9IhtImO46kU3niiks5qb0degaJpZM4JZKnO\n.\n. Hi, yes #100 does look interesting.  I'm so over booked.  But if you can give me a few pointers as to where in the code I should be looking and/or where you would like to put it as well as any caveats or concerns you may have I can take a look.\nIt seems like it might not be too difficult to implement, so any head start you could give me would be great.\nThanks,\nR\n. \n",
    "braco": "@epoberezkin: why isnt  { errorDataPath: 'property' } default, out of curiosity? The error format for missing fields was pretty baffling before I discovered that. The point of validation seems like it would almost always be directed at the object being validated, not the schema.\nThe fact that required is a parental array { required: [field] } and not a part of the property { field: { required: true } } seems like an implementation detail in JSON schema, more than anything.\nPS, great job on the ajv in general!\n. Thanks @epoberezkin, missed that.\nIsn't that a pretty big loss of separation of concerns? The schema itself is business logic, whereas the UI is merely circumstantial, and will be different across various platforms.\nAdditionally, the schema needs to define what elements are required for the eventual payload. Is that even possible with $ref? Each section would essentially be a ref plus a slice of the required array from the parent schema. One field $ref may be required in one section and not in another. \nI guess the alternative could be a slice function that chopped up the parental schema and compiled an instance for every section...?\n. @epoberezkin : Sorry about that. I rm'ed my node_modules, ran npm install again with the latest version and the error seems to have vanished. Must have been user error. Thank you for being so thorough as always.\n. ",
    "ashnur": "It's not just required that doesn't have correct dataPath and can not be processed. Everything that is conditional, or anything that is combined from multiple schemas is complicated beyond hope, each and every time in a different way. I am actually curious if this is by design? One would assume that coming up with the same error format multiple times would be easier and more efficient than coming up different error data structures of each different situation. . @StefJoynson that is quite ugly. Ideally I would like to use the same JSON pointers for my data and for the schema that describes the data and against which the data is validated. Now, based on your answer, I would have to manipulate my json pointers for each schema... . ",
    "whitfin": "Gigantic +1 for this, I don't understand the logic in attaching errors to an instance when the point of ajv is that it caches schemas, making it perfect for being used as a singleton.\nI have an application which may perform thousands of validations per second and it's unrealistic to expect to never hit a race condition in which ajv.errors has not changed since the validation call.\n. ",
    "Clemens85": "Thanks for your quick reply. You are of course right when speaking about JavaScript.\nWe have however a very special polygot case, where we call the JavaScript from a multithreaded environment (we use Java which provides its own JavaScript engine (\"nashorn\") and thus we can invoke JS functions from a running Java-Thread). This is of course sort of a mismatch (single-threaded environment called by a multi-threaded environment). I think however that by doing so it is indeed possible that JS functions are called concurrently (I am however not 100% sure). \nI thought that it might be anyway \"cleaner\" to return all validation result immedietaly and not writing it in the ajv (or compiled) instance variable. The current API design makes the error handling even in plain javascript a little bit more complicated when dealing with promises due to the error state in AJV. If you would just return it, it would be more \"clean\" for a caller. \nBut maybe there are implementation-specific reasons why the error-state needs to be written back to the ajv instance, but if this not the case and it's only the API design I would again challenge this API design decision.\nPlease correct me if I am wrong, but the compiled validation function has exactly the same behaviour in which the error result is written back to the compiled validation function instance. \nFrom my understanding the compiled validation functions improve performance, but when calling ajv.compile('schema') several times, I get always the same compiled validation function instance.\n. Sorry for my very late reply now, I have been on vacation and somehow I also forgot this issue ;-)\nBut anyway here are my remarks:\n\nThere are both historical reasons (other fast validators have the same api) and performance reasons not to return an object. Given that convenience is a subjective thing and also that the majority of users end up having their custom wrapper anyway (to retrieve schemas, to process validation errors, etc.) I am not convinced that convenience is strong enough reason to change or to extend the api.\n\nWe have also our own wrapper around AJV, so of course the convenience thing matters just inside the wrapper implementation ;-) Anyway it was more about being stateless vs having a state in general, independently of the single-thread model of javascript. To be honest, I never thought that returning a simple object vs returning a boolean would be a performance bottleneck (I thought this wouldn't even be measurable after all).\nBut I understand your concerns regarding an API change.\n\nInteresting... If the same JavaScript function (the same instance of function) is indeed used from multiple threads (not sure if that is possible) then changing Ajv instance API may not be enough to solve the problem. I would suggest checking if the validation function you access is the same instance (by marking it with some unique property e.g.). Even if it's the same function, it's worth checking if they are called concurrently. I would still expect there should be some locking mechanism in this case, that would prevent the same instance of function to be concurrently executed from multiple threads. Could you please check it?\n\nI know this is a little bit strange due to we have a very special scenario. \nEven by marking such an instance with a unique property, it is really quite hard to reproduce such a scenario with mutliple threads accessing the same instance concurrently. \nI link instead to an article about the whole issue: https://blogs.oracle.com/nashorn/entry/nashorn_multi_threading_and_mt\nIt clearly states that there exist no locking mechanism or something like that, so it might definitely happen that a javascript instance is accessed concurrently from our java environment, thus they strongly recommend to not share objects after all (or at least if doing so, having the objects stateless).\nBut at the end you are right, this might be more a general problem due to as soon we use an object with a state we cannot hold one object between several threads.\nWe solved the issue for now by creating a pool in our environment of such javascript-engine-objects  with each engine associated an own AJV instance. So evey thread gets its own exclusive AJV instance from the pool. This works, but adds of course also a bit extra complexity to our server-side application...\n. ",
    "emarkovskyi": "\nYou are right.\nAjv doesn't comply with this provision, it allows extending $refs with additional keywords.\nI was going to address it in the next major version change.\nI was also considering adding the option in the current version that would allow to choose between:\n\nfailing schema compilation (I think it should be the default to be honest)\nignoring extra keywords (as per spec, should log warning)\nusing extra keywords (current behaviour).\n\nIn this case the 1st or 2nd option could become the default in the next major version.\n\nDear @epoberezkin first of all thank you for so nice and powerful project,\nwe find weird issue wrt extending of $ref (BTW such extending is a great fetaure)\nWe trying to create some base schema inside definition and also extend this schema by extra fields inside the same definitions, e.g.\n{\n    '$schema': 'http://json-schema.org/draft-07/schema',\n    '$id': 'http://www.mydomain.com/definitions.json',\n    'type': 'object',\n    'definitions': {\n        \"basic-definition\": {\n         },\n        \"extended-basic-definition\": {\n          //reference to the basic, but extra properties are ignored\n          \"$ref\": \"http://www.mydomain.com/definitions.json#/definitions/basic-definition\"\n           \"properties\": {\n               extra properties....\n            }\n        }\n     }\n  }\nand AJV in this case just ignore extra filed and uses on properties from the basic.\nCould we achieve such extending somehow? \nIf $ref in properties e.g (below) everything works like a charm\n{\n    '$schema': 'http://json-schema.org/draft-07/schema',\n    '$id': 'http://www.mydomain.com/definitions.json',\n    'type': 'object',\n    'definitions': {\n        \"basic-definition\": {\n         },\n        \"extended-basic-definition\": {          \n           \"properties\": {\n              \"my-property\": {\n                  **//reference to the basic, works great**\n                   \"$ref\": \"http://www.mydomain.com/definitions.json#/definitions/basic-definition\"\n                    \"properties\": {\n                         extra properties....\n                     }\n               }\n            }\n        }\n     }\n}\nThank you in advanced.. > Ajv now ignores all siblings to $ref but it can be changed with options. See the docs.\n@epoberezkin, thank you for quick response, so TBH quite difficult to find correct option :-), I tried to play with extendRefs: true, inlineRefs: false}\nWhat option do you mean? Maybe it could be a specific option of add/compileSchema methods?\nThank you in advanced.. > Ajv now ignores all siblings to $ref but it can be changed with options. See the docs.\n@epoberezkin we still could not find proper options, tend to think that hierarchy described above (schema extending inside definitions) is impossible for now, but could you please give us a hint what  options do you mean?\nThank you in advanced.. ",
    "kroky": "Moved the guard to date_time function. If you think these commits gets messy, feel free to make the changes yourself, I don't mind.\n. ",
    "wilsoncook": "@epoberezkin in my example, it seems that Ajv matched the wrong schema, if with removeAdditional: \"all\", and delete other widgets schema to below:\njs\n\"widgets\": {\"type\":\"array\",\"default\":[],\"items\":{\"oneOf\":[{\"type\":\"object\",\"required\":[\"DATAREF_ID\"],\"properties\":{\"type\":{\"type\":\"string\",\"default\":\"widget\",\"enum\":[\"widget\"]},\"title\":{\"type\":\"string\",\"default\":\"\u827a\u672f\u5b57\"},\"widgetType\":{\"type\":\"string\",\"default\":\"artword\",\"enum\":[\"artword\"]},\"attr\":{\"type\":\"object\",\"default\":{},\"properties\":{\"text\":{\"type\":\"string\",\"default\":\"\u8bf7\u5728\u53f3\u4fa7\u66f4\u6539\u6587\u5b57\"},\"retUrl\":{\"type\":[\"string\",\"null\"],\"default\":\"\"}}},\"textStyle\":{\"type\":\"object\",\"default\":{},\"properties\":{\"color\":{\"type\":\"string\",\"default\":\"#000\"},\"font-family\":{\"type\":\"string\",\"default\":\"\u5fae\u8f6f\u96c5\u9ed1\"},\"font-size\":{\"type\":[\"number\",\"string\"],\"default\":\"24px\"},\"text-decoration\":{\"type\":\"string\",\"default\":\"none\"}}},\"style\":{\"type\":\"object\",\"default\":{},\"properties\":{\"z-index\":{\"type\":\"integer\",\"default\":1},\"left\":{\"type\":[\"number\"],\"default\":0},\"top\":{\"type\":[\"number\"],\"default\":0},\"width\":{\"type\":[\"number\"],\"default\":200},\"height\":{\"type\":[\"number\"],\"default\":100},\"background-color\":{\"type\":\"string\",\"default\":\"transparent\"},\"border-style\":{\"type\":\"string\"},\"border-width\":{\"type\":[\"number\"]},\"border-color\":{\"type\":\"string\"},\"border-radius\":{\"type\":[\"number\"]},\"transform\":{\"type\":\"string\",\"default\":\"none\"}}},\"single\":{\"type\":[\"number\"],\"default\":0},\"DATAREF_ID\":{\"type\":[\"number\"]},\"info\":{\"type\":\"object\",\"default\":{}}}}]}}\nit will not remove the textStyle property.\nAND if i put an textStyle property to every widget schema, it is also working (will not remove textStyle).\n. I also tested that it seems removeAdditional: \"all\" act as removeAdditional: true + additionalProperties: false, (can i consider that removeAdditional: \"all\" equals to removeAdditional: true +  all schemas with additionalProperties: false ?), so as u said \n\nit simply removes additional properties as each sub-schema is validated, whether this subschema is valid or not.\n\nit means this behavior is the oneOf's standard behavior in json schema draft, may i right?\nif that is, then oneOf will not properly for my needs, i will prefer the switch in v5 of your suggessions.\nThank u! :-)\n. @epoberezkin Got it, Thanks for your patient!\n. @epoberezkin i have tried switch, but a weird problem comes.\nsee schema below:\njs\n{\"type\":\"object\",\"required\":[\"idCounter\"],\"properties\":{\"LAYJSON_VERSION\":{\"type\":[\"number\"],\"default\":\"\"},\"idCounter\":{\"type\":[\"number\"]},\"components\":{\"type\":\"array\",\"default\":[],\"items\":{\"type\":\"object\",\"required\":[\"DATAREF_ID\"],\"properties\":{\"_id\":{\"type\":[\"number\",\"null\"]},\"_setting\":{\"oneOf\":[{\"type\":\"object\",\"properties\":{\"TagId\":{\"type\":[\"number\"],\"default\":null}}},{\"type\":\"null\"}]},\"title\":{\"type\":[\"string\"],\"default\":\"\u65b0\u5efa\u6a21\u5757\"},\"description\":{\"type\":[\"string\",\"null\"],\"default\":null},\"type\":{\"type\":\"string\",\"default\":\"component\",\"enum\":[\"component\"]},\"style\":{\"type\":\"object\",\"default\":{},\"properties\":{\"z-index\":{\"type\":\"integer\",\"default\":0},\"height\":{\"type\":[\"number\",\"string\"],\"default\":200},\"background-color\":{\"type\":[\"string\"],\"default\":\"transparent\"},\"background-size\":{\"type\":[\"string\"],\"default\":\"100% 100%\"},\"background-repeat\":{\"type\":\"string\",\"default\":\"no-repeat\",\"enum\":[\"no-repeat\",\"repeat\"]}}},\"show\":{\"type\":\"boolean\",\"default\":true},\"attr\":{\"type\":\"object\",\"default\":{},\"properties\":{\"bgUrl\":{\"type\":[\"string\",\"null\"],\"default\":\"\"}}},\"widgets\":{\"type\":\"array\",\"default\":[],\"items\":{\"switch\":[{\"if\":{\"properties\":{\"widgetType\":{\"constant\":\"artword\"}}},\"then\":{\"type\":\"object\",\"required\":[\"DATAREF_ID\"],\"properties\":{\"type\":{\"type\":\"string\",\"default\":\"widget\",\"constant\":\"widget\"},\"title\":{\"type\":\"string\",\"default\":\"\u827a\u672f\u5b57\"},\"widgetType\":{\"type\":\"string\",\"default\":\"artword\",\"constant\":\"artword\"},\"attr\":{\"type\":\"object\",\"default\":{},\"properties\":{\"text\":{\"type\":\"string\",\"default\":\"\u8bf7\u5728\u53f3\u4fa7\u66f4\u6539\u6587\u5b57\"},\"retUrl\":{\"type\":[\"string\",\"null\"],\"default\":\"\"}}},\"textStyle\":{\"type\":\"object\",\"default\":{},\"properties\":{\"color\":{\"type\":\"string\",\"default\":\"#000\"},\"font-family\":{\"type\":\"string\",\"default\":\"\u5fae\u8f6f\u96c5\u9ed1\"},\"font-size\":{\"type\":[\"number\",\"string\"],\"default\":\"24px\"},\"text-decoration\":{\"type\":\"string\",\"default\":\"none\"}}},\"style\":{\"type\":\"object\",\"default\":{},\"properties\":{\"z-index\":{\"type\":\"integer\",\"default\":1},\"left\":{\"type\":[\"number\",\"string\"],\"default\":0},\"top\":{\"type\":[\"number\",\"string\"],\"default\":0},\"width\":{\"type\":[\"number\",\"string\"],\"default\":200},\"height\":{\"type\":[\"number\",\"string\"],\"default\":100},\"background-color\":{\"type\":\"string\",\"default\":\"transparent\"},\"border-style\":{\"type\":\"string\"},\"border-width\":{\"type\":[\"number\",\"string\"]},\"border-color\":{\"type\":\"string\"},\"border-radius\":{\"type\":[\"number\",\"string\"]},\"transform\":{\"type\":\"string\",\"default\":\"none\"}}},\"single\":{\"type\":[\"number\"],\"default\":0},\"DATAREF_ID\":{\"type\":[\"number\"]},\"info\":{\"type\":\"object\",\"default\":{}}}}}]}},\"single\":{\"type\":[\"number\"],\"default\":0},\"DATAREF_ID\":{\"type\":[\"number\"]},\"info\":{\"type\":\"object\",\"default\":{}}}}}}}\nthe options includes:\njs\nvar ajv = new Ajv({\n    v5: true,\n    coerceTypes: true,\n    useDefaults: true,\n    removeAdditional: 'all'\n});\nthe json for validating:\njs\nvar json = ;\nthen validated failed with:\njs\n[{\"keyword\":\"required\",\"dataPath\":\".components[0].widgets[0]\",\"schemaPath\":\"#/properties/components/items/properties/widgets/items/switch/0/then/required\",\"params\":{\"missingProperty\":\"DATAREF_ID\"},\"message\":\"should have required property 'DATAREF_ID'\"}]\nBUT the DATAREF_ID is actually at there.\nAny suggestions? Thank u!\n. @epoberezkin I made a smaller testing scripts at: https://jsfiddle.net/ppoo24/fckyt5rm/ , i have formatted  and simplified the json and schema, the error happened as usual\n. @epoberezkin So when executing if, it is the time to validating already? i thought that if is just a judgement without other actions. now realized the removeAdditional: \"all\" is not a handy function but a dangerous evil.\ncan i consider that, if removeAdditional: \"all\", every schema Ajv meet, it will remove extra properties which not defined in the schema, whatever the schema is in switch or if or other special types ?\n. @epoberezkin appreciate your answer! i'm using additionalProperties: false now, :)\n. @ngryman sorry about that\n. ",
    "giladmatko": "Hi,\nThank you for your quick reply.\nSomehow I missed it.\nNow it works. \nThank you so much!!!\nHave a nice day\n. Thank you very much.\nI started using it a week ago... so i'm very new with this package.\nI highly appreciate your help\n. ",
    "tvsbrent": "Awesome, thank you so much!\n. ",
    "StefJoynson": "You can just do adj.validate(schema.properties.item, thingToValidate).. ",
    "felixfbecker": "I see your point. But I think an assert method is something very basic every validation library should have. Joi's validation API is very slim to, but it has assert, see https://github.com/hapijs/joi/blob/v9.0.4/API.md#assertvalue-schema-message. There definitely is a great use case, it's more than a nice-to-have but rather an essential interface for validation libraries.\nYou also have to admit that assigning on errors can be very error-prone.\n\nTo have this method in the application you need 1 line function (#274 (comment)). In the library it requires 100+ lines - test, docs, etc.\n\nWell first patching the prototype is a bad idea if a library may ever decide to implement the same function and use it internally. So a wrapper it would be. But I see it the other way around: To have this method, thousands of users have to all write their own wrapper, and write their own unit tests for it, update it etc. If it was in the library, a user can rely on it that it is well-tested.\nAnyway, sleep a night over it, let me know how you decided. This library is great \ud83d\ude42\n. I'm convinced that having this in core is not desirable, and async schemas are indeed a problem. I don't think I will publish (and maintain, test etc) a seperate NPM package for this, since I only need the very basic three-line assert method mentioned here. Thank you for your time.\n. ",
    "kapouer": "@epoberezkin you should document this (declare default next to anyOf/allOf/oneOf instead of inside), it's a life saver.\n. I meant the way you use v5 switch to have defaults inside \"then\" schemas applied.\n. Thinking of which, i'm surprised you don't use the schema id to build a cache key (if it exists of course).\nThis would work unless the schema is mutable, and would avoid the cost of building that key.\n. Using ajv@4.11.2. Thank you for the explanation.. oh ! thank you for the explanation.. @thejuan no it doesn't, unless you found some kind of bug, in which case you should document why you say that.. I set up a format or a pattern that does not allow empty string,\nso i expect the \"\" => null coercion to happen (because \"\" does not validate).\nBut as you state\n\nCoercion only changes the data in case it doesn\u2019t pass validation with the type keyword\n\nit cannot work like that.\nOr could it, eventually ?. ",
    "xbmono": "I have another question. I could have tested this but haven't got chance so far. If we have 2 schema files say a.json and b.json and in the example above instead of pointing to current sub-schema, can we point to sub-schema in a.json from b.json without absolute path?\nLet's say, a.json and b.json are both in folder /validation\nWhile initializing ajv we add both schemas to compile and b is referenced within a\nWill this work as expected:\n```\nvar schema = {\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n\"id\": \"a.json#\",\n\"type\": \"object\",\n\"definitions\": {\n    \"generalType\": {\n        \"id\" : \"#generalType\",\n        \"type\": \"string\",\n        \"enum\": [\n            \"test-address-prefix-types\", \"test-address-prefix-types-extended\"\n        ]\n    }\n},\n\"properties\": {\n    \"data\": {\n        \"oneOf\": [\n           {\n                \"$merge\": {\n                    \"source\": {\"$ref\": \"b.json#/base-create-test-address-prefix-types\"},\n                    \"with\": {\n                        \"properties\": {\n                            \"something\": { \"type\": \"string\", \"minLength\": 2 }\n                        }\n                    }\n                }\n\n            }\n        ]\n    }\n},\n\"required\": [\n    \"data\"\n]\n\n}\n```\n. Awesome... Thanks!\n. ",
    "HotelDon": "The proposals are all on the old repo and haven't been moved over, so I was a bit confused if anyone would have even noticed if I had changed it. Didn't want to ruffle too many feathers. \nI'll try to have a pull request/admission of failure ready by tomorrow. \n. Not sure where the test code for $data is located. \n. I can say definitively from my own manual testing, absolute pointers cannot go higher than the root of a $ref ($data: \"/\" will always resolve to the root of the $ref, not the entire document), which was an issue I was going to bring up once I got this commit fixed up. It looks like this limitation is handled on the $ref side of the code, not the $data side (or at least, not in any of the code I've touched so far). At least I know this was a side effect of something done intentionally, I was going a little crazy wondering some of my test schemas weren't working the way they should have. \nAs for everything else, I'll get those fixes and tests written up in a day or two. Thanks!\n. Alright, I finished putting together the tests. The last two tests in the file I added are set to skip: true, as they are testing the interaction between $ref and $data, which currently fails. The rest of the tests were copied over from other files and modified to use regular JSON pointers, and removing the tests that don't apply (the # sign has a completely different use in non-relative JSON pointers). If there's anything else I need to fix, let me know!\n. Oops. I forgot to take it out. The # sign at the start of a pointer DOES have a specific meaning for regular JSON pointers, but it's one that has no relevance to JSON schema, and I should have taken it out of the regex. \n. Oh jeeze, I had never actually noticed that $refs are also JSON pointers. Now that you've pointed that out, I have noticed something. A $data reference formatted like a URI (\"$data\": \"#/foo\") will be considered valid in the schema, but the data won't validate. Formatting $ref as a non-URI pointer has a similar effct: \"$ref\": \"/definitions/foo\" won't throw an error in the schema, but the data won't validate. \nAccording to the JSON-schema spec, a $ref has to be formatted as a URI, and the $data proposal doesn't mention URI support at all (while I can think of some uses for it, it sounds like a potential security nightmare).\n. Cool, I understand. \nThanks for all your help, by the way. This pull request solved a lot of headaches I was having. If you're ever near San Jose, I'll buy you a beer. \n. ",
    "TheRealWelshCJ": "The JSON Validation Schema: https://tools.ietf.org/html/draft-fge-json-schema-validation-00#page-12 Sections 5.4.4.4 & 5.4.4.5, suggest that items matching the 'properties' set should be validated and removed from the larger set before the 'patternProperties' is processed.\n. Related to: https://github.com/epoberezkin/ajv/pull/196\nAuthor closed that issue, but I do believe that it is an issue based on what the Validation Schema says in my above comment.\n. I understand, however, the example in 5.4.4.5 seems to suggest that you can have something that matches a 'properties' object which does not match a 'patternProperties' object, and the base schema example here: http://json-schema.org/example2.html states the following:\n\"\n- we have a properties keyword with only a / entry;\n- we use patternProperties to match other property names via a regular expression (note that it does not match /);\n- as additionalProperties is false, it constrains object properties to be either / or to match the regular expression\n  \"\nThis seems to suggest that you can have '/' as a valid property, even though it does not match the regular expression within the 'patternProperties'.\njson-schema.org also references the 'Space Telescope Science Institute' JSON Schema writing guide, which under 'patternProperties' states \"Any properties explicitly defined in the properties keyword are also accepted\".\nTo be fair, every online validator appears to do it the way that Ajv does, but I am struggling to see how this is correct behaviour given the above.\nThanks for the reply.\nBest regards,\nC.\n. The test here: https://github.com/json-schema-org/JSON-Schema-Test-Suite/blob/9723c8f2f5f7c471c5147d5d6d08f4aa10a89f83/tests/draft4/additionalProperties.json#L3 Also seems to suggest that properties is independent from pattern properties, although not quite in the same use case as my initial comment.\n. btw, I've echoed this concern in to the JSON test suite, as it appears it is more an issue with their testing rather than any specfic implementation.  If I understand this correctly.\n. ",
    "donaldpipowitch": "It correct that browserify uses the browser field just like webpack. But it should be the correct way to deploy the browser build. If the CI task breaks it probably means that dist/ajv.bundle.js would break in the same CI task, too.\nI'll try to run the tests locally.\nI could use a webpack field instead of browser. That also works for webpack users and probably wouldn't break your CI job. I'm not a browserify user, but as far as I understand browserify they would want a browser field, too?\n. Tests run locally when using webpack. It fixes the warnings with #117. We can definitely start with the webpack field and if any browserify user needs a browser field we can switch to it later and fix the CI tasks.\n. Isnt the bundle a UMD file? Than it would return the constructor. It must be that way as I can use Ajv just fine with the bundled file.\n\"why you need webpack at all if you use the bundle\" Well, I use the bundled file of Ajv, but my application has a lot of other dependencies and my own source code which wants to be bundled, too. Right? ;) And why would I want a prebundled file of one my dependencies? Well, to get rid of all the warnings from requires in try/catch-blocks for optional dependencies :)\n. Thank you!\n. Interesting. I don't get this warning. But it is a different warning and it is just one, not three. Hmm...\n. I'd like to not include framework specific configuration to my webpack configuration. I share between a lot of (compex) projects and so far it works without specific configurations. I thought the browsers field would be the idomatic way to load a browser specific build from a framework both for webpack and browserify. (I also thought This seems to be a pre-built javascript file. is mostly about minified files.)\n@sokra Is there a way to rewrite this line so it is ignored by webpack, but usable by browserify? (Sorry, for pinging you directly.)\n. Just searched for this as well and hoped ajv would offer an utility function like this. AFAIK there is no other big lib out there with draft-07 support and I'd like to know for a schema which uses if/else, if a certain field is required (given the schema and current data). (Something like const result = isRequired(schema, data, 'some.nested.prop'); // === true or false). ",
    "asprouse": "Webpack still complains \nWARNING in ./~/ajv/dist/ajv.bundle.js\nCritical dependencies:\n1:476-483 This seems to be a pre-built javascript file. Though this is possible, it's not recommended. Try to require the original source to get better results.\n @ ./~/ajv/dist/ajv.bundle.js 1:476-483\nSeems like the best way to solve this is just to pass these dependencies in via the options. \n. I think that at least for now there should be some documentation. I am not using the async features in my app so my workaround is to import Ajv from 'ajv/lib/ajv'; and to use the following in my webpack config:\njavascript\nnew webpack.IgnorePlugin(/^regenerator|nodent|js\\-beautify$/, /ajv/),\nI think that the choice of whether to include nodent or regenerator on the frontend is not one that should be hidden to the user because they are pretty large.  I almost abandoned using Ajv on the frontend (after using it on my backend) because I thought I need to add another ~300kb (uncompressed) to my bundle. I would propose the following to sidestep this problem all together:\n``` javascript\nimport Ajv from 'ajv';\nimport regenerator from 'regenerator';\nconst ajv = new Ajv({ regenerator });\n```\nThis would simplify the configuration over using transform: 'regenerator' and async: 'es7' and make it more explicit about what you are actually adding to your bundle when you use Ajv. Either way you still need to add it to package.json. Bundled dependencies only seem useful if you managing your dependencies with script tags.\nAnyway that's my 2 cents. Sorry if this is off topic to this pull request. \n. ",
    "sokra": "Use the browser field it you want different modules for browser and server.\n. ",
    "Aaronius": "In our case we did:\nmodule: {\n    // Without this webpack will log a warning.\n    noParse: /node_modules\\/ajv\\/dist\\/ajv.bundle.js/\n}\nAnd it seems to be working fine. From my understanding, ajv wants us to use dist/ajv.bundle.js when we're building for the browser and dist/ajv.bundle.js is built using webpack/browserify/whatever so using noParse seems appropriate. I guess.\n. ",
    "jeremykentbgross": "The \\w's was followed by a star, representing regex for matching a word, but it's not visible when posted.\n. ",
    "nimerritt": "Could you please reconsider this. We use JSON-Schema for model validation and Swagger for documenting our APIs. Since Swagger extends the interger and numeric with a custom format we would like to have it validated when we use ajv. http://swagger.io/specification/#dataTypeFormat\nGoogle also does this: https://developers.google.com/discovery/v1/type-format\nI suppose this could be accomplished by overriding the types with a custom keyword but it seems more appropriate to have the format applied to a whitelisted subset of types.\n. Thanks for the quick response! :)\n\"So the proposal is to allow defining custom formats that would apply to some chosen type, not necessarily a string, correct?\" -> Right on!\nI would like to be able to specify that it is only applicable to the integer type, otherwise I will have to duplicate the type checking in the validator. Something along the lines of:\n``` js\nconst int32_min = -1 * Math.pow(2, 31);\nconst int32_max = Math.pow(2, 31) - 1;\nfunction validateInt32(n) {\n  return n >= int32_min && n <= int32_max;\n}\najv.addFormat('int32', validateInt32, ['integer']);\n```\nwould be great! \n. I'll try to do a PR over the weekend :)\n. @epoberezkin Yes, I mostly finished it last weekend but need to figure out how to support type detection in the format-rule, when there is no type declaration. I'll push what I have tomorrow and may need to tag you for a tip if I can't figure it out. . Thanks for finishing this up for me :) Actually needed it again today, so \ud83d\udc4d . This could be an array according to JSON schema spec?. I think a reasonable approach to this is: If format is not explicitly declared in the schema then custom formatters should not be applied?. ",
    "pyramation": "Hi! I'm trying to shed light on this issue which was closed with https://github.com/epoberezkin/ajv/commit/7361f831fb0308aa8a3a7e34ea171fd6bb3b8e5d\nI think formats for any object is truly important, and seems that it was resolved, however since I've checked out the 5.0.0 branch, I cannot seem to get formats to validate for all data types, and looks as if the tests only covered type number.\nBefore finding this issue to make current problem issue/idea clear (looks as though others also stumbled into this and there's been some decisions made), I've created a failing test with a hypotheical example, say, if an object is an immutable List class of some sort: https://github.com/pyramation/ajv/commit/cc19a8be22c4104e763c8734b7866952e90fb877\nI think for simplicity sake, seems that every type having a format makes sense, does it not? String formats work well with RegExp and every other type just a naive validation function validate = f(x) ?\nOther json schema implementations allow formats for all data types, so I'm hoping this is something ajv would also support. I'm also willing to help if I can get some pointers on editing the format code generation.\n. yep, I believe instanceof and $ref can work. A case for format is that it is a nice shorthand way to keep your duck-typing scoped to only have to look at the type and format properties. But I think for now, my use case is solved :). ",
    "rf": "With a direct call to eval, the validate function you get back retains a reference to the sourceCode in its closure. That looks like this:\n\nThe blue edges are \"context\" references, which is what happens when a variable is closed over. Once you remove the explicit property, it looks like this:\n\nOnly blue context edges left. Once you remove those, by using an indirect eval:\n\nThe string is no longer retained.\nThese are heap dumps obtained with the heapdump module and viewed in Chrome's inspector, by the way.\n. The validate variable is declared because I passed it into the new Function() constructor on line 131 which makes it an argument to the function being created.\n. So it turns out that the strings will still be retained by the code object to support .toString() on the function.\nHowever, it may make sense to keep the new Function() change as it may make it easier to minify the generated javascript, which could potentially reduce the memory usage of the source strings. I'm going to investigate that tomorrow.\n. It is unusual to define the variable this way, but I wanted to make the change in the least intrusive way possible.\nSo in fact, there's one context created for the outer function compile and any functions inside it will refer to this context. So even though the generated validate function doesn't use the sourceCode variable, it will still retain it. This is precisely what Vyacheslav Egorov describes in this blog post.\nI'm working on my own heap dump analysis tool; before my changes here, we see this:\nvalidate =  (functi(28735) type:string size:2176 deepsize:-1 ownership:\n   retained as source type:internal in (code,28733)\n   retained as sourceCode type:context variable in (closure,32415)\n   retained as validateCode type:context variable in (closure,32415)\n   retained as sourceCode type:property in (closure,32415)\n   retained as (Compilation cache) type:hidden in system / Context(hidden,32517)\n   retained as (Builtins) type:hidden in system / Context(hidden,32517)\n   retained as (Extensions) type:hidden in (object properties)(array,32567)\nThere's a source edge, of type internal, from a code object. There's also a property edge from a closure, as well as context edges from that closure. So the string retained for toString() functionality is the same one that is used by eval() to compile the code.\nIt is most likely desirable to not create this closure at all. This indirect eval approach will likely save some amount of memory, though unfortunately it won't cause those strings to not be retained at all. After this change, I found this in the heap:\n(function(refVal,co,(29693) type:string size:2304 deepsize:-1 ownership:\n   retained as source type:internal in (code,29691)\nThis is the new Function() generated code; and there's still an internal edge from a code object. But at least no closure was created.\nFor information on new Function() vs eval() and why this matters, see this blog post. Essentially, any \"indirect\" call to eval() will cause the code to be executed in the global scope instead of in the current scope. This means you can't access any local variables (which is why I had to pass them in) and it also won't close over any variables in the current scope.\nI think it's beneficial to keep this change; it will create one less closure, and it also makes it easier to potentially minify the generated JS to save memory or create portable validation functions as was requested in #156.\n. Oh hey, I actually just finished addressing your comments, haha. But if you've done it already that's fine.\n. Nice article! Thanks for the shout out! \ud83d\udcaf \n. ",
    "nomi-ramzan": "I tried this code. It will overwrite codes in case of multi calls at the same time. Let suppose two calls came and  before sending errors of first call second call will overwrite errors then first call will send errors of second call instead of first call ( which i have lost now).\n. Can you please help me how can I clone deeply validate object ?\n. Thank you I got it.\n. ",
    "anhldbk": "@epoberezkin Thank you\n. ",
    "borisdiakur": "For anybody who runs into the same issue with v5 option set to true: Make sure your schema doesn\u2019t contain the following line:\n\"$schema\": \"http://json-schema.org/draft-04/schema#\",. @epoberezkin Thanks. ",
    "amiika": "Neat. I quess something like this could work then:\n\"title\": {\n            \"oneOf\":[\n              {\"type\":\"string\"},\n              {\"type\":\"object\",\n                \"patternProperties\":{\"^[a-z]{2,3}(?:-[A-Z]{2,3}(?:-[a-zA-Z]{4})?)?$\":{\"type\":\"string\"}},\n                \"additionalProperties\":false\n              }     \n              ]\n        }\nThis lang-object with the patternProperty could also be stored under definitions and reused for description.\n. Should there be additional primitive type for localized strings? For example:\n\"simpleTypes\": {\n            \"enum\": [ \"array\", \"boolean\", \"integer\", \"null\", \"number\", \"object\", \"string\", \"langString\"]\n},\n... and langString would be validated against:\n{\n  \"description\": \"localised strings\",\n  \"type\":\"object\",\n  \"additionalProperties\": {\"type\":\"string\"}\n}\n. Right. So the $ref is the only way to reference localized string \"type\".\n. ",
    "zandaqo": "Ok, little digging into the source code[1] points me to the fact that, surprisingly, only additionalProperties are removed by removeAdditional option. Now, the question is how to convince ajv that my \"optional\" properties are \"additional\" ones.\n. Thank you, Evgeny!\nI too like the second approach, the first one would make my already huge schemas enormous. Mimicking the removeAdditional code with my limited understanding of the library got me this implementation of that inline function:\njavascript\najv.addKeyword('removeIfFails', {\n  inline(it) {\n    return `if (!valid${(it.dataLevel || '')}) {\n      if (validate.errors !== null) {\n        if (errors) validate.errors.length = errors;\n        else validate.errors = null;\n      }\n      delete data[${it.dataPathArr[it.dataLevel]}];\n    }`;\n  },\n  statements: true,\n});\nIt seems to correctly compile and inline, but it neither removes the failing property nor stops ajv from invalidating the object. Can you give any pointers here?\nEDIT: Ok, found the code it generates. Firstly, I guess we cannot exit upon the first found mistake if we want to correct them with removeIfFails, so we have to use ajv option allErrors: true. Secondly, this code seems to work for me so far:\njavascript\najv.addKeyword('removeIfFails', {\n  inline(it) {\n    return `if (errs__${(it.dataLevel || '')}) { // check if there has been a mistake while checking the current property\n          vErrors.length = errs_${(it.dataLevel || '')}; // remove mistakes of the current property from the array of all found errors by redefining length to the size of previously found mistakes\n          errors = errs_${(it.dataLevel || '')}; // re-set current errors to errors found before the current property\n          delete data[${it.dataPathArr[it.dataLevel]}]; // and finally delete the property\n        }`;\n  },\n  statements: true,\n});\nEDIT2: Had to fix the above code to work in patternProperties too:\njavascript\najv.addKeyword('removeIfFails', {\n  inline(it) {\n    return `if (errors) { \n          vErrors.length = errs_${(it.dataLevel || '')};\n          errors = errs_${(it.dataLevel || '')};\n          delete data${(it.dataLevel - 1 || '')}[${it.dataPathArr[it.dataLevel]}];\n        }`;\n  },\n  statements: true,\n});\n. ",
    "stamler": "@zandaqo @epoberezkin What is the difference between errs_ and errs__ in this comment I've searched the repo for references and found some but the multiple levels of complexity created by the doT templates is difficult to make sense of.\nEDIT: my understanding is that errors and vErrors are the cumulative total and array of all errors for the entire schema tree, and that errs_ and errs__ are somehow a subset of that. Is that correct and if so how are the later two different? There isn't any documentation on this particular subject.. ",
    "kjs3": "@epoberezkin It's not directly related. I started using ajv to validate json in a POST body. If that body isn't valid according to my schema I'd like to return errors in the JSON API format.\n. That makes sense, I'll start working on a module.\n. @brendo, no sadly. I've failed you. :disappointed: \nThe API I was making was small and I just hand-rolled the errors. . ",
    "brendo": "@kjs3 did you ever start on that module? In the same boat \u26f5\ufe0f . Done @epoberezkin!. Thanks!. ",
    "binarymist": "+1\n. Same issue for me.. ",
    "henryjw": "That makes sense. Thanks for the clarification.\n. ",
    "cristianmtr": "It seems to stem from the fact that our schema contains a double quote in a definition. This is due to the tool we use to generate schema (https://github.com/YousefED/typescript-json-schema. But ajv should handle this, since other tools seem to work. But we don't want to switch to another tool for the validation, since we've spent a lot of time making sure ajv works with our pretty complex schema (not included here).\n. Error: Cannot find module '../dotjs/validate'\n    at Function.Module._resolveFilename (module.js:440:15)\n    at Function.Module._load (module.js:388:25)\n    at Module.require (module.js:468:17)\n    at require (internal/module.js:20:19)\n    at Object.<anonymous> (CLIPPED\\src\\node_modules\\ajv\\lib\\compile\\index.js:10:25)\n    at Module._compile (module.js:541:32)\n    at Object.Module._extensions..js (module.js:550:10)\n    at Module.load (module.js:458:32)\n    at tryModuleLoad (module.js:417:12)\n    at Function.Module._load (module.js:409:3)\nAnything I'm missing?\n. ",
    "dubiousdavid": "This gives a pretty definitive answer to the question:\nhttp://serverfault.com/a/516230\n. It shouldn't, which is why that fails to validate. I wanted at least one example of a proper failing case.. ",
    "eakarsu": "Thanks for quick update,\nCan you please give some hint on how I can implement sameItemsAs keyword?\nAny related example or code or any algorithm?\nRemember that each element of array can be object or another array.\n. Is it possible to use a value (key attribute) in sameArr  to index validated array \"arr\"?\nHere I validate only \"abc\" field of sameArr against a/b in second entry of \"arr\" array. The index of second entry is given by \"key\" field\nCan we use another value (key field) in another json pointer?\n```\n\"sameArr\": {\n            \"constant\": { \"$data\": \"/arr/\"+\"./key/\"+ \"a/b\"}\n        }\nvar data = {\n    \"arr\": [ \"1\":1, \"a\":{\"b\":\"abc\"}}, \"bar\":{\"foo\": \"bar\"} ],\n    \"sameArr\": [ \"1\":1, \"abc\":\"abc\", \"bar\",{\"foo\": \"bar\"} ,\"key\":1]\n};\n```\n. I have already started for custom keyword \"refdata\". Here I need 2  key values \"targetKey\" and \"key\". I assume that I should be able to fetch them v5 $data. But when validation function is called, $data is not being evaluated. How can I get those key values before my custom validation started?\nI appreciate your help\nscheme ={\n\"refdata\":{\n              \"basepath\":\"/tarray\",\n              \"relpath\":\"a/c\",\n              \"targetkey\":{\"$data\":\"/inputRecord/id\"},\n              \"key\":{\"$data\":\"1/accountReferenceId\"}\n          }\n}\n. I am sorry I have not got what you said\nWhich option will I choose for $data to be evaluated before compile phase?\n. ",
    "mmc41": "You are right! Thank your for the quick reply. Works now!\nP.S. I am using custom json schemes to construct GUI's so therefore the need to validate json schemas - not json documents. Hence, my use of validateSchema explicitly!\n. Nb. it does work when running from a unit test in the browser using jasmine - but not in the application itself.\n. Thank you very much for your quick response. \nI am not using synchronous validation as far as I know - at least not on purpose. I have attached a small reproducible angular 2 project for node v6 (where you can see how I use it fully). To reproduce, you can unzip, cd into the dir, type \"npm install\" followed by \"npm start\" + open chrome at localhost:4200. The ajv code I am using is in the file src/app/validation.service.ts. Be sure to notice the ajv related error output in the developer tools in the browser and on the console where \"npm start\" is issued.\nAngular 2 uses webpack rather than browserify (webpack is apparently the new \"black\" while browserify is on the way out). I have no idea if webpack may need some configuration to work with ajv. I am fairly new to JS tooling and things quickly gets complicated here.\nAnswers to compatibility questions:\nThe version of Ajv you are using = 4.8.0\nThe environment you have the problem with: MacOS 10.12, Chrome 54, Node v6.7.0, npm 3.10.3\nSee source for all other packages - have no idea about what order webpack/angular loads stuff.\nResults in node.js v4 - using Node v6.7.0 not v4.\nThe reproducible example actually produce two errors compared to my original. In addition to \"Module not found: Error: Can't resolve 'nodent\" it also reports \"Module not found: Error: Can't resolve 'js-beautify'\".\nNot sure why there are now two errors related to ajv in this new example?\najv-angular2-bugdemo.zip\n. FYI: I got Ajv working - barely - in my angular 2 - angular-cli project by adding \"ajv.min.js\" min to angular-cli.json (\"scripts\": [\"../node_modules/ajv/dist/ajv.min.js\"]) and to karma.conf.js (files: [\n      \"./node_modules/ajv/dist/ajv.min.js\" ... ]) + a \"declare var Ajv: any;\" in my typescript code + removed import statements for Ajv.\nUnfortunately, I than lose all type safety. I was unable to import Ajv's typescript file from node_modules (got internal errors if I tried). So it works but only barely so.\nSorry, I don't have enough grasp of how typescript, angular2, angular2-cli, webpack, module loaders, npm etc. works together in order to do a PR for a better fix. Quite a lot of  complicated technologies in play here.\n. Yes, sounds like the same workaround. I hope my more detailed outline of a solution can help other people though. On the long run it would be wonderful if Ajv works as is (with typescript) with angular 2 and other new web frameworks.\nBut thanks for your support in fixing this - it is nice to experience an OS project with such an impressive responsiveness on issues. Thanks.\n. @ValeryVS Great with a more detailed analysis of the problem. I have tried many things but so far been unable to get typescript working when using my ajv hack inside Angular 2.\n@epoberezkin Can ajv be updated in line with one of ValeryVS's suggestions above. Maybe copying the ajv.bundle.d.ts to dist is the easiest solution for now?. Thank you very much for the explanation. I think it is sufficient. Maybe a bit clarification of the docs for getSchema would be a good idea. I thought getSchema would only return something if already compiled.. Thanks. Much better indeed. Only minor issue is 3 warnings in console when testing but now the npm package works out of the box with angular 2.2.3 and angular cli 1.0.0-beta.21. :-)\n. ",
    "dfederm": "Most people see npm as server-side and bower as client side. In my scenario I'm hoping to use this in the browser, so we'd need to consume this package through bower.\n. ",
    "dcbrwn": "@epoberezkin If you don't want to scramble contribution statistics of this repo, I propose you to create new one exclusively for bundled bower version and setup any of CI/CD tools to build and push releases there. TravisCI and CircleCI both free for open source projects and are quite trivial to setup. I did similar thing for my project and it worked just great.\nSimply closing the issue is not a solution. There are still people out there, who are forced to use bower while it's still alive.. > How can people be \"forced to use bower\"? Why not use cdnjs instead?\nI've seen situations when external fonts were disallowed. Obviously CDN wasn't an option either. I don't know the reasoning behind this, but this was quite strict requirement.\n\nif you or somebody else created such a repo...\n\n@epoberezkin ok, I'll take a look. But some additional help might be needed from your side, since I don't have an access to TravisCI environment linked to this repo.. @epoberezkin I've messed around with this yesterday. Came up with a script that mirrors releases to separate repo. Tested it a few times and it works ok as a POC, but due to limitations of github permissions model, you must own the target repo.\n  . Alternatively I can just manually mirror major releases of ajv to my fork, which feels kinda lame but still is a solution.. Yep, it works for this repo too.. @epoberezkin I've pushed tag v6.0.0-publish-test-1 into my fork of ajv and it got published into the mirror. As for the repo, probably bower.json should point to the source, i. e. epoberezkin/ajv.\nI intentionally unregistered my ajv-dist package after I tested that all works smoothly, since all in all you're the owner of ajv :)\nUpdate:\n\"repository\" property in bower.json doesn't matter when one registers package. According to this it indeed should point to source code. List of requirements for bower packages from official docs, doesn't state that it's needed either.. @epoberezkin you think some additional testing or changes required? Let me know if so.. I thought that whole dist folder can be useful? or we should leave only ajv.min.js?. ",
    "mrhooray": "Yeah in a fork. We started using multiple Ajv instances and compiled functions exactly because of the simplicity but it's growing to heap limit due to the amount/size of schemas.\nFollowing seems to work but want to double check with you to see whether it's correct or there's better ways to do it.\nTemplate Change:\n```\n      {{? $noAdditional }}\n        {{? $removeAdditional }}\n           if (!validate.dryRun) {\n             delete {{=$data}}[key{{=$lvl}}];\n           }\n        {{??}}\n```\nBefore/after running validate function, recursively set/reset the flag to each validate function\n``` js\nvar ajv = new Ajv({removeAdditional: true});\nvar validate = ajv.compile(schema);\n// set dry run\nmarkDryRun(validate, true)\n// reset\nmarkDryRun(validate, undefined)\nfunction markDryRun(v, dryRun) {\n    if (v.dryRun === dryRun) {\n        return;\n    }\nvar i;\n\nv.dryRun = dryRun;\n\nfor (i = 0; i < v.refVal.length; i++) {\n    if (typeof v.refVal[i] === 'function') {\n        markDryRun(v.refVal[i], dryRun);\n    }\n}\n\n}\n```\n. Thanks for the hints and I'll do more digging among these options.\n\nIt is probably simpler to set this flag on the instance\nBut on the instance is probably cleaner\n\nI think the instance you mentioned here is instance of Ajv, via new Ajv(), right?\n. ",
    "ValeryVS": "It is not webpack or angular 2, it is typescript.\nhttps://www.typescriptlang.org/docs/handbook/module-resolution.html\nsee node section\nWhen you import\ntypescript\nimport * as Ajv from 'ajv';\ntypescript get script from package.json's \"main\" with typings from package.json's \"typings\".\nWhen you import\ntypescript\nimport * as Ajv from 'ajv/lib/ajv.js';\nyou get ajv/lib/ajv.jswith ajv/lib/ajv.d.ts typings.\nYou cant import ajv/dist/ajv.bundle.js because there is no ajv/dist/ajv.bundle.d.ts typings.\nYou can still require() it, but without typings.\n\nSummary.\nIf we copy typings file into dist/ajv.bundle.d.ts we can import /dist/ajv.bundle.js.\nAnd if we change package.json's \"main\" to dist/ajv.bundle.js, or make separate distributable package we import just ajv.. @epoberezkin Because I use it in angular 2 app, that builded with angular-cli. Which use webpack and print warnings with huge stacktrace in console.. Or may be we can ask angular-cli team how to make it realy optional. Without warnings.. @epoberezkin The example provided by @mmc41 also use angular-cli. So, yes, this is webpack issue.\nIt will be good to fix it some way, without warning suppression.\nI use ajv in validation library and suppress warning in all my projects, looks weird.. @epoberezkin \nI discover something interesting.\nThere is no warnings, if I type require path as variable instead of string.\nThere is strings from async.js and compile/index.js\n```javascript\n      var regeneratorPath = 'regenerator';\n      regenerator = require(regeneratorPath);\nvar nodentPath = 'nodent';\nif (!nodent) nodent = require(nodentPath)({ log: false, dontInstallRequireHook: true });\n\n\nvar jsBeautifyPath = 'js-beautify';\ntry { beautify = require(jsBeautifyPath).js_beautify; }\n\n```. @epoberezkin \nWorking on it.\nI'm still get warning while test.\nWARNING in ./~/ajv/lib/compile/index.js\n13:21 Critical dependency: the request of a dependency is an expression\nbut, at least, there no warnings in browser console.. ",
    "andrewsuzuki": "Not sure this is a great solution, I'm getting the same warning as above. A bit annoying as they're the only warnings in my build using webpack 2.1.0-beta.27.\n```\nWARNING in ./~/validators/~/ajv/lib/async.js\n96:20 Critical dependency: the request of a dependency is an expression\nWARNING in ./~/validators/~/ajv/lib/async.js\n119:15 Critical dependency: the request of a dependency is an expression\nWARNING in ./~/validators/~/ajv/lib/compile/index.js\n13:21 Critical dependency: the request of a dependency is an expression\n```\n. ",
    "EtaiG": "Cool, interesting to know \ud83d\udc4d \nI didn't know that code inside an IIFE is not optimized as part of the function either (meaning the optimization won't take a hit for unoptimized code there)\n. Also, can you let me know when the package.json is updated with a version I can use for this? \nThanks for the quick turnaround!\n. sure, on it.\n. ",
    "morsh": "@epoberezkin \nThat did some of the work, changing to #steps does the trick, but backtracking closer to my original schema, I get an error on the following schema:\njson\n{\n  \"type\": \"object\",\n  \"id\": \"dialog\",\n  \"properties\": {\n    \"steps\": { \"$ref\": \"#steps\" },\n  },\n  \"definitions\": {\n    \"steps\": {\n      \"id\": \"#steps\",\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"oneOf\": [\n          {\n            \"id\": \"step\",\n            \"type\": \"object\",\n            \"properties\": {\n              \"steps\": {\n                \"$ref\": \"#steps\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\nThe error:\n```\n        throw $error;\n        ^\nError: can't resolve reference #steps from id step\n    at Object.generate_ref [as code] (c:\\temp\\ajv-test\\node_modules\\ajv\\lib\\dotjs\\ref.js:62:22)\n    at Object.generate_validate [as validate] (c:\\temp\\ajv-test\\node_modules\\ajv\\lib\\dotjs\\validate.js:157:37)\n    at Object.generate_properties [as code] (c:\\temp\\ajv-test\\node_modules\\ajv\\lib\\dotjs\\properties.js:198:26)\n    at Object.generate_validate [as validate] (c:\\temp\\ajv-test\\node_modules\\ajv\\lib\\dotjs\\validate.js:230:37)\n    at Object.generate_oneOf [as code] (c:\\temp\\ajv-test\\node_modules\\ajv\\lib\\dotjs\\oneOf.js:31:27)\n    at Object.generate_validate [as validate] (c:\\temp\\ajv-test\\node_modules\\ajv\\lib\\dotjs\\validate.js:230:37)\n    at Object.generate_items [as code] (c:\\temp\\ajv-test\\node_modules\\ajv\\lib\\dotjs\\items.js:122:20)\n    at generate_validate (c:\\temp\\ajv-test\\node_modules\\ajv\\lib\\dotjs\\validate.js:230:37)\n    at Ajv.localCompile (c:\\temp\\ajv-test\\node_modules\\ajv\\lib\\compile\\index.js:98:22)\n    at Ajv.resolve (c:\\temp\\ajv-test\\node_modules\\ajv\\lib\\compile\\resolve.js:53:19)\n```\n. @epoberezkin changing to #step works, but I don't completely understand why\n. @epoberezkin thank you!\n. ",
    "marshall007": "@epoberezkin this seems especially bad in the case of $merge (see https://github.com/epoberezkin/ajv-merge-patch/issues/16). I was attempting to use ajv-merge-patch to avoid the subtleties in using $ref with things like additionalProperties and default. It was working great until I realized that default values weren't being applied.\nCan you explain why this is still an issue when using $merge/$patch? My assumption was that the internal representation would be flatly merged (and thus the default and dynamicDefaults keywords would behave as expected).\n\nExample Schema\n\n```js\n{\n  $id: 'activities.create',\n  $merge: {\n    source: {\n      $ref: 'base.create',\n    },\n    with: {\n      type: 'object',\n      required: [\n        'entitySubType',\n\n        'name',\n        'endDateTime',\n        'startDateTime',\n      ],\n      additionalProperties: false,\n      properties: {\n        attributes: {\n          type: 'object',\n          default: {},\n        },\n        entityType: {\n          type: 'string',\n          const: EntityType.ACTIVITY,\n          default: EntityType.ACTIVITY,\n        },\n        entitySubType: {\n          $ref: 'types#/definitions/activityType',\n        },\n        name: { type: 'string' },\n        endDateTime: {\n          type: 'string',\n          format: 'date-time',\n        },\n        startDateTime: {\n          type: 'string',\n          format: 'date-time',\n        },\n      },\n    },\n  },\n}\n```\n\n\nIn the above schema, neither the defaults from the referenced base.create schema nor the with block are applied.. @epoberezkin is there an existing workaround or recommended solution for the trivial case where we just want to copy values by reference?\nIn this example, I'm validating an express request object. I can successfully validate that the :forGroupId path param matches forGroupId in the request body, but I would like to also be able to assign the path param as the default if it is not specified in the body.\njs\n{\n  $id: 'group-members.create',\n  type: 'object',\n  properties: {\n    // req.params\n    params: {\n      type: 'object',\n      required: [\n        'forGroupId'\n      ],\n      properties: {\n        forGroupId: {\n          type: 'string',\n          format: 'uuid'\n        }\n      }\n    },\n    // req.body\n    body: {\n      type: 'object',\n      required: [\n        'forGroupId'\n      ],\n      properties: {\n        forGroupId: {\n          const: {\n            $data: '/params/forGroupId',\n          },\n          // default: {\n          //   $data: '/params/forGroupId',\n          // }\n        }\n      }\n    }\n  }\n}. @epoberezkin essentially, yes, but I don't really care about validating that req.body.forGroupId === req.params.forGroupId. I just always want to copy that property into req.body (whether or not it already exists).. @epoberezkin great, I'll have a PR up in the next day or two.. ",
    "alexkuz": "@epoberezkin is it possible to use schema itself as a cache key and move stableStringify in the default Cache object? That way one could replace Cache with WeakMapCache for example, that would use WeakMap with raw (immutable) schemas as keys.. I'm using ajv with huge schemas and it goes really slow - mostly because of json-stable-stringify (I compared it with JSON.stringify on simple test - the latter goes 5 times faster). Maybe it will be better after I refactor my own code, it's quite unoptimized right now, but I suspect this would be still a bottleneck, which I could avoid using WeakMap.. Ok, I'll try to implement new caching later.\nHere's the simple test I used:\n```js\n'use strict';\nvar getAjvInstances = require('./spec/ajv_instances');\nvar instances = getAjvInstances({\n  allErrors:    true,\n  verbose:      true,\n  inlineRefs:   false\n});\nvar i;\nvar schema = {\n  id: 'http://x.y.z/rootschema.json#',\n  properties: {\n    foo: { '$ref': '#/definitions/schema0' }\n  },\n  required: [ 'foo' ],\n  definitions: {}\n};\nfor (i = 0; i < 1000; i++) {\n  schema.definitions['schema' + i] = {\n    id: 'schema' + i,\n    type: 'integer'\n  };\n}\ninstances.forEach(function (ajv) {\n  for (i = 0; i < 1000; i++) {\n    var validate = ajv.compile(schema);\n    var data = { foo: 1 };\n    validate(data);\n  }\n});\n```\nIt runs for 30+ seconds, and it's just 5 seconds if I place return JSON.stringify(obj); in json-stable-stringify.. Sure, that was just to demonstrate the difference between two serialization methods.\nActually, I rewrote today https://github.com/dancasey/json-schema-default-instance, that I'm using to get default values, so that it's not using its own ajv instance - and it works much faster now, I think there was my main problem.\nBut still I think that rewrite would be useful, I'll give it a try. Thank you too!. @epoberezkin yeah, I saw that just moving it to cache wouldn't work, but hadn't look deeply into the code, that's why I asked if it is possible. I suppose it could be done with some refactoring though.. The easiest way I see is to add getKey method that would return stableStringify(schema) for default Cache and schema itself for WeakMapCache:\n```js\nvar Cache = {\n  getKey: schema => stableStringify(schema),\nget: key => ...,\nput: (key, value) => ...,\n...\n};\nvar WeakMapCache = {\n  getKey: schema => schema,\nget: key => ...,\nput: (key, value) => ...,\n...\n};\n```\nthis would require minimal changes in the rest of the code.. ",
    "STRML": "See also https://github.com/webpack/webpack/issues/3284\n. Is this more or less intended as ajv seems to be a JSON schema validator, and not so much of an 'arbitrary JS object' validator?\n. Could work - although why not just import an existing lib that can do deep object comparison?\n. If Ajv wants to move into more general arbitrary object comparisons, it's probably better to use a real deep-equality lib here; otherwise it's just going to be one edge case after another.\nI agree with the size/perf argument though. How about something much smaller than lodash.isequal, like https://github.com/substack/node-deep-equal/blob/master/index.js?\n. Yeah you're right. I'm investigating https://github.com/chaijs/deep-eql right now and writing up some test cases.\n. deep-eql works great, except for this blocker which fails the very last json-schema draft4 uniqueItems test: https://github.com/chaijs/deep-eql/issues/33\n. So, I ran a benchmark (https://gist.github.com/STRML/a16622ca49ea15c7b246ba8a89188569):\n- Lines without () are using deep-eql\n- (basic) is the current implementation in equal.js\n- Lines where no ops/sec are reported are where the existing implementation returns the wrong result\nThere are a decent few where deep-eql is faster, and many where the existing impl is just wrong. We should be focused on getting the correct result over speed in any case so this is a good change.\n. @epoberezkin Yeah, I have a PR in to fix it, appears they will accept it soon.\nI disagree with the extra option; the runtime/install penalty is minimal & it's not particularly intuitive to have \"breaks in many cases, unless you use this option\", especially since the default equality checker will work pretty well and fail in non-obvious ways. it's not particularly easy to track failures like this uniqueItems bug back to the equality checker.\n. ",
    "whitemalt": "here i check to \"a\" property have a unique value\n```\nvar Ajv = require('ajv');\nvar ajv = new Ajv();\nvar schema = {\n    type: \"array\",\n    uniqueItems: true\n}\nlet data = [{ a: 1 }, { a: 1, b: 2 }, { a: 1, c: 3 }];\nvar valid = ajv.validate(schema, data);\nif (!valid) console.log(ajv.errors);\nelse console.log('pass');// it say data pass\n```\ni have work around this case with\n```\nvar Ajv = require('ajv');\nvar ajv = new Ajv();\nvar schema = {\n    type: \"array\",\n    uniqueItems: true\n}\nlet data = [{ a: 1 }, { a: 1, b: 2 }, { a: 1, c: 3 }];\nvar valid = ajv.validate(schema, data);\nlet valueArr = data.map(function (item) { return item.a; });\nvalid = !valueArr.some(function (item, idx) {\n    return valueArr.indexOf(item, idx + 1) !== -1\n});\nif (!valid) console.log(\"fail\");\nelse console.log('pass');\n```\nany idea to use in ajv ?. ",
    "davidjamesstone": "Hey thanks for the quick reply.\nI was trying to achieve it by extending the list of properties rather than with $ref based composition. I had originally thought allOf was the right approach but additionalProperties: false doesn't work as I initially expected.\nIn regards to require overwriting, I swear this works in my example above. I'll try later when I'm back home but I thought I ended up with a union of 4 required fields. It's a shame it's not supposed to work like that.\nThe approach I had with $patch was to start with all 4 fields that represented the db resource, then using 2 remove 'op's, removed the 'id' property and the first item in the required array.\n{\n  \"type\": \"object\",\n  \"title\": \"Product schema\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"sku\": {\n      \"type\": \"string\"\n    },\n    \"price\": {\n      \"type\": \"number\",\n      \"minimum\": 0\n    }\n  },\n  \"additionalProperties\": false,\n  \"required\": [\"id\", \"name\", \"sku\", \"price\"]\n}\nThen\n\"$patch\": {\n  \"source\": {\n    \"$ref\": \"../db/product.json\"\n  },\n  \"with\": [\n    { \"op\": \"remove\", \"path\": \"/properties/id\" },\n    { \"op\": \"remove\", \"path\": \"/required/0\" }\n  ]\n}\nIs this what you mean by using $patch?\nThanks for looking into async loading with patch/merge too.. Thanks - you've been a great help.. ",
    "acheshkov": "Evgeny,\nas far as i understood keywords feature is about validation. In my case i have to validate + transform json document.. @epoberezkin please correct me. you suggest is \n\ndefine keyword and inside define custom validation function through  doT template or string\ninside validation function i have to push error inside vErrors array\neventually something in the library removes invalid data \n\nis it ? . I tried to declare simple keyword, that should remove data always\njavascript\najv.addKeyword('deleteAnyway', { inline: function (it, keyword, schema) {\n    return '(vErrors = (vErrors === null) ? [] : vErrors) && vErrors.push({\"keyword\": \"deleteAnyway\", \"message\": \"test\"}) && errors++ && false';\n    }, metaSchema: { type: 'boolean' } \n});\ni see the error in a validation results, but data is not removed.. @epoberezkin how i can use for statement inside inline string function ? I got error \"\"Unexpected token for\" during compilation. \nexample \nreturn \"for (var i=data2.length-1;i>=0; i--){i % 2 == 0 ? data2.splice(i,1) : void 0}\". @epoberezkin \nthe code snippet like this can not be compiled, i guess it because of \"function\"\nvalid3 = (function (d, s) { return true; })(data3, validate.schema.properties.data.filterRel)\nany workarounds ? . The message is\nSyntaxError: Unexpected token if  at localCompile ... node_modules/ajv/lib/compile/index.js:138:26\"\n. @epoberezkin the problem was a missing semicolon character. thank you !\n. ",
    "tsofist": "\nI sealed in SH3, sorry\nSH2 - is the current behavior with a required property\nDesired result of SH1 - empty source, because this property is not necessary, it can not contain null seamlessly and can be removed from the source (by new special coercive option). @epoberezkin thanks for your reply!. \n",
    "plantain-00": "When I used ajv, I didn't aware of there is a typings in the library.\nI'm OK with deleting the one in the DefinitelyTyped if this PR is merged.. One thing I'm worried about is that libraries' version is rarely updated just because it's typings is updated, so sometimes you want typings in the library updated, then you have to wait the library's next release.\nMaybe the one in DefnitelyTyped is still needed, just another option.\nThere is a library, it bundles typings, and the auther is still updating the typings in DefinitelyTyped(https://github.com/DefinitelyTyped/DefinitelyTyped/pull/12974 ).\nThe vuejs bundled typings and DefinitelyTyped has one too.. FYI: I started a PR to remove the types in DefinitelyTyped. https://github.com/DefinitelyTyped/DefinitelyTyped/pull/13028. ",
    "domoritz": "In this PR, I only merged the options properties. There may be more things missing from these typings. . Awesome. I think having the typings with the code and in only one place is better.. It looks like typeof is faster: https://jsperf.com/hdslfhdflkgh. . I can't take on another project right now. Sorry!. meant to write \"hash\". ",
    "angelowang": "Thanks for the response. \nOur Jenkins will scan all folders recursively and compile them one by one. And \nThese schema files are in various folders, and it's not clear which should be added in which order. Or maybe I am new to ajv, I don't need to care about the order?\nAn alternative is having a simple way to make my main process wait until the compileAsync() finishes, something like Promise.. ",
    "mkhazov": "4.10.0:\n```\nWARNING in ./~/ajv/lib/compile/index.js\n13:21 Critical dependency: the request of a dependency is an expression\nWARNING in ./~/ajv/lib/async.js\n96:20 Critical dependency: the request of a dependency is an expression\nWARNING in ./~/ajv/lib/async.js\n119:15 Critical dependency: the request of a dependency is an expression\n5.0.0-beta.1:\nWARNING in ./~/ajv/lib/compile/index.js\nModule not found: Error: Can't resolve 'js-beautify' in 'node_modules/ajv/lib/compile'\n @ ./~/ajv/lib/compile/index.js 13:21-48\n @ ./~/ajv/lib/ajv.js\nWARNING in ./~/ajv/lib/async.js\nModule not found: Error: Can't resolve 'regenerator' in 'node_modules/ajv/lib'\n @ ./~/ajv/lib/async.js 95:20-47\n @ ./~/ajv/lib/ajv.js\nWARNING in ./~/ajv/lib/async.js\nModule not found: Error: Can't resolve 'nodent' in 'node_modules/ajv/lib'\n @ ./~/ajv/lib/async.js 116:26-48\n @ ./~/ajv/lib/ajv.js\n. Thanks, it helpedjs\nnew webpack.IgnorePlugin(/regenerator|nodent|js-beautify/, /ajv/)\n``. Actually I still see these warnings at the end ofnpm installoryarn`. Is there a way to get rid of this?. ",
    "Kepro": "thanks ;) . ",
    "idangozlan": "Neither v5-beta / Webpack ignore is solving this issue. @epoberezkin can't you fix the module to work as webpack expected with the sources instead of the dist file?. [0] WARNING in ./~/ajv/dist/ajv.bundle.js\n[0] Critical dependencies:\n[0] 1:476-483 This seems to be a pre-built javascript file. Though this is possible, it's not recommended. Try to require the original source to get better results.\n[0]  @ ./~/ajv/dist/ajv.bundle.js 1:476-483. Nope.. it's creating another errors:\n```\n[0] WARNING in ./~/ajv/lib/async.js\n[0] Critical dependencies:\n[0] 96:20-33 the request of a dependency is an expression\n[0] 119:15-28 the request of a dependency is an expression\n[0]  @ ./~/ajv/lib/async.js 96:20-33 119:15-28\n[0]\n[0] WARNING in ./~/ajv/lib/compile/index.js\n[0] Critical dependencies:\n[0] 13:21-34 the request of a dependency is an expression\n[0]  @ ./~/ajv/lib/compile/index.js 13:21-34\n[0]\n[0] WARNING in ./~/ajv/lib/ajv.d.ts\n[0] Module parse failed: /home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/ajv/lib/ajv.d.ts Unexpected\ntoken (1:8)\n[0] You may need an appropriate loader to handle this file type.\n[0] SyntaxError: Unexpected token (1:8)\n[0]     at Parser.pp$4.raise (/home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/acorn/dist/acorn.js:2221:15)\n[0]     at Parser.pp.unexpected (/home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/acorn/dist/acorn.js:603:10)\n[0]     at Parser.pp.semicolon (/home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/acorn/dist/acorn.js:581:61)\n[0]     at Parser.pp$1.parseExpressionStatement (/home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/acorn/dist/acorn.js:966:10)\n[0]     at Parser.pp$1.parseStatement (/home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/acorn/dist/acorn.js:730:24)\n[0]     at Parser.pp$1.parseTopLevel (/home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/acorn/dist/acorn.js:638:25)\n[0]     at Parser.parse (/home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/acorn/dist/acorn.js:516:17)\n[0]     at Object.parse (/home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/acorn/dist/acorn.js:3098:39)\n[0]     at Parser.parse (/home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/webpack/lib/Parser.js:902:15)\n[0]     at DependenciesBlock. (/home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/webpack/lib/NormalModule.js:104:16\n)\n[0]  @ ./~/ajv/lib ^.\\/.*$\n[0]\n[0] WARNING in ./~/ajv/lib/dot/_limitProperties.jst\n[0] Module parse failed: /home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/ajv/lib/dot/_limitProperties.jst\nUnexpected character '#' (1:2)\n[0] You may need an appropriate loader to handle this file type.\n[0] SyntaxError: Unexpected character '#' (1:2)\n[0]     at Parser.pp$4.raise (/home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/acorn/dist/acorn.js:2221:15)\n[0]     at Parser.pp$7.getTokenFromCode (/home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/acorn/dist/acorn.js:2756:10)\n[0]     at Parser.pp$7.readToken (/home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/acorn/dist/acorn.js:2477:17)\n[0]     at Parser.pp$7.nextToken (/home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/acorn/dist/acorn.js:2468:15)\n[0]     at Parser.pp$7.next (/home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/acorn/dist/acorn.js:2413:10)\n[0]     at Parser.pp.eat (/home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/acorn/dist/acorn.js:536:12)\n[0]     at Parser.pp.expect (/home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/acorn/dist/acorn.js:597:10)\n[0]     at Parser.pp$1.parseBlock (/home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/acorn/dist/acorn.js:979:10)\n[0]     at Parser.pp$1.parseStatement (/home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/acorn/dist/acorn.js:709:33)\n[0]     at Parser.pp$1.parseBlock (/home/vagrant/sites/\naccount-local.metartnetwork.com/node_modules/acorn/dist/acorn.js:981:25)\n[0]  @ ./~/ajv/lib ^.\\/.*$\n```\nthis is not the full errors, but it's small part of it.\nI think it's should be the very top priority of this project to fit modern\nbuild modules.\nOn Sun, Jan 22, 2017 at 8:37 PM, Evgeny Poberezkin <notifications@github.com\n\nwrote:\nDoes removing the line above solve the issue?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/epoberezkin/ajv/issues/373#issuecomment-274349497,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AB5hbRPHwnB6EOqgYD3kevTyDaJmj3QMks5rU6IDgaJpZM4LJEhM\n.\n\n\n-- \nBest Regards,\n  Idan Gozlan, +972542251188.\nP Please consider the environment before printing this email.\n. that's right. thanks.. sure.. keep getting unsafe-eval error (tried reinstall ajv), I'm using ajv v5 if it's matter . ",
    "ricardolpd": "hi guys, \nI am having the same issue with webpack, it seems to be trying to parse jst files, as webpack attempts to parse all files in the require.\nIs there any way around this?. Webpack cant also ignore these files as they will be needed, probably loading them into \nI know its not really ajv fault for having this config issue, its just another one webpack issues however i hoped that @idangozlan maybe found a way around this, as i really haven't got time to do a jst loader for webpack, and i wanted to keep using ajv, thats all. As it stands i cant find a loader that will automatically load jst files in webpack, and that stops me from using ajv.. ",
    "Znarkus": "@epoberezkin Thank you for the quick response! \nBut if I manually run the numeric filter function with the data ['1', '2'], it returns false. What am I missing?\nconst v = ['1', '2']\nconsole.log(!isNaN(parseFloat(v)) && isFinite(v))\n-> false. Ah nevermind. Add custom  format to validate strings. ",
    "robertwbradford": "Thanks for the reply. Great module, btw. \nThat's what I was thinking too about the backwards compatibility. Of course, never say never, but it seems that most data objects would be a truthy value. Besides, a major release to 5.0.0 would mean some \"breaking\" changes anyway :)\nThanks again, look forward to the next release!. ",
    "farrago": "Thanks for the quick response!\nYou're right, it appears to be failing on compiled code.  If I comment out the if that checks for valid JS identifiers, then change custom.spec.js: testEvenKeyword() to use x-foo as the keyword instead of even, then all 6 tests that use testEvenKeyword() fail with errors that look like:\n1) Custom keywords custom rules rule with \"interpreted\" keyword validation should add and validate rule:\n     ReferenceError: foo is not defined\n      at validate (eval at localCompile (lib\\compile\\index.js:139:26), <anonymous>:3:397)\n      at shouldBeValid (spec\\custom.spec.js:863:5)\n      at spec\\custom.spec.js:692:7\n      at Array.forEach (native)\n      at testEvenKeyword (spec\\custom.spec.js:687:15)\n      at Context.<anonymous> (spec\\custom.spec.js:25:9)\nwhere compile\\index,js:139 is unsurprisingly var makeValidate = new Function(....\nMy assumption would therefore be that there is indeed some statement along the lines of  bar = x-foo;  (where \"x-foo\" is the keyword) being created in the code.  This also (as shown) applies to more than just the macro keywords and it's relation to that in the commit's message appears to be coincidental.\nI haven't had a look at the generated code yet but it sounds like it might be quite a bit bigger than my naive first look (if not impossible or at least too complex for a corner case).\nI'm on Windows where a lot of the npm scripts don't work, so I may run up a VM tomorrow and look a bit further.  Do you think there's much point in that, or does it look like something that's intrinsic to the design and not likely to be easily changeable?. I've added a pull request for this, though - assuming you're generally happy with the change - we need to agree the limitations you would like to keep on the keyword name.\nIn theory, I believe any string can be used in brackets notation, though I read a few rumours that some reserved words were not allowed by some older browser implementations.  \nSome suggestions might be:\n1. allow any string\n1.1 most flexible, but also most likely to allow names that might cause issues\n2. add - to the list of valid characters for all but the first char\n2.1 i.e. change  /^[a-z_$][a-z0-9_$]*$/i to  /^[a-z_$][a-z0-9_$\\-]*$/i\n2.2 minimum change that fixes the specific issue with swagger\n3. add a blacklist of reserved words (e.g. toString, switch, case, etc.)\n3.1 might give more flexibility with some protection, but blacklists are always wrong and/or incomplete and a maintenance nightmare.\n4. Something else?\nLet me know your thoughts and I'll update the pull request.\nAlso, I tested this by changing the keywords for some existing tests to not be valid identifiers.  If you prefer a different set of tests or I've missed some important cases then please let me know and I'll update.\n. I did try this, but it gets copied directly to the generate code rather than being interpreted first.\ni.e. you get a line in lib\\custom.js that looks like:\njavascript\nvar $schemaPath = it.schemaPath + it.utils.getProperty($keyword);\nwhen what we wanted is:\njavascript\nvar $schemaPath = it.schemaPath.foo; // or it.schemaPath['x-foo'] as appropriate\nI couldn't work out how to make it insert the result of getProperty() rather than the literal value. So I just used hardcoded brackets notation directly as done in custom.jst:\n23:   var {{=$definition}} = RULES.custom['{{=$keyword}}'].definition;\nCan you suggest how to make this work (I'm not very familiar with dotjs)?\nAs an aside, is there a reason to favour one over the other?  I did do a quick search for performance comparisons, and while there was nothing conclusive it seemed that for fixed strings, brackets and dots are very similar in terms of performance.  Using variables with brackets notation is obviously slower as it can't optimise the lookup, but we are using a hardcoded string so it should be ok.. Ahh, I was trying to use it as a template parameter (i.e. wrap it in {{}}) which was making all sorts of wrong results.  But just copying it in directly does the right thing!  Well that was an hour wasted to my confusion!\nI'll update with this and the other comments shortly.. ",
    "IBwWG": "Is https://github.com/epoberezkin/ajv/blob/7c95ec9fa83f707090d3103b8db97b1061130e6d/lib/compile/util.js#L48 the relevant line or am I looking in the wrong place?  I find it hard to believe I'd be the first one to notice this, though...?. OK, it is in that representation.  But this still holds true via CURL using -d 'count=1'. Is it not a normal context to be validating things on the server that were sent as parameters and are therefore strings by default (or arrays of strings)?. Thank you for mentioning coerceTypes, that does the trick perfectly.  I see now the distinction--apparently my app sends form data in parameters and only uses JSON for the response, rather than JSON both ways.  Makes sense.  Thanks for your help!. ",
    "tizmagik": "@epoberezkin I can't re-open but here's the edge-case that I brought up on Gitter. Let me know if you'd like me to open a new issue or if you can edit the original description here.\n```js\nconst Ajv = require('ajv');\nconst ajv = new Ajv();\nconst isValid = ajv.validateSchema({\n  $schema: {\n    thing: {\n      type: 'asdf',\n    },\n  },\n});\nconsole.log(isValid); // true ??\n``. This seems to still happen withajv@5.1.5. Sorry, I meant the build warning for a require statement as a result of an expression, but it looks like there was an issue on my end notajv@5` so never mind me! \ud83d\ude01 . ",
    "JanTvrdik": "I don't think I understand why do you need to reverse the coercion at all. Can't you just remember the original value?. > With your coercion idea it would fail WITH coercion turned on.\nNo, I always assumed that it would be properly implemented. https://github.com/justinrainbow/json-schema does not support coercion with multiple types at all, so it does not matter really.\n\ncoercion just mutates data in place\n\nBut you can remember the place (in PHP for example with reference to the value, in JS probably with reference to parent object and name of property).. ",
    "shmax": "@epoberezkin  I just tried it, and you're absolutely correct. Thanks very much for a very insightful and delicate point.. ",
    "wdullaer": "I'll try to open a PR shortly. So I've done some more research here.\nTurns out that hostnames can only contain letters/digits/hyphens.\nHowever domain names can have mare characters\nSee this stackoverflow post with some references to RFCs: http://stackoverflow.com/a/2183140\nSo if I'm understanding this correctly, this would be valid: \"foo@my_sub.domain.com\"\nBut this wouldn't be: \"foo@my_domain.com\"\nThe email RFC says that the domain part is either a hostname or a dns domain name or an IP in square brackets (it basically refers to those RFCs) \n. The more I read into this, the more confused I get.\n\"I am an email\"@email.com should be valid apparently, and you an IP in the domain using square brackets should also be allowed me@[127.0.0.1] (although wikipedia references some article that mentions this will trigger quite a lot of spam filters, so in practice people probably shouldn't be doing this)\nRegarding underscores: most registrars don't allow you to register something with an underscore in the root domain I've found, but eg AWS Route53 does allow you to put underscores in A records and CNAME records for subdomains (and applications can work with these without an issue)\n(I'll probably be a bit slower over the next days to reply, things are rather busy at the moment). I think RFC 5321 is the current version of the SMTP standard.\nSection 4.1.2 describes the structure of email addresses (among other things).\nHere's a relevant section\nTo promote interoperability and consistent with long-standing\n   guidance about conservative use of the DNS in naming and applications\n   (e.g., see Section 2.3.1 of the base DNS document, RFC 1035 [2]),\n   characters outside the set of alphabetic characters, digits, and\n   hyphen MUST NOT appear in domain name labels for SMTP clients or\n   servers.  In particular, the underscore character is not permitted.\n   SMTP servers that receive a command in which invalid character codes\n   have been employed, and for which there are no other reasons for\n   rejection, MUST reject that command with a 501 response (this rule,\n   like others, could be overridden by appropriate SMTP extensions).\nSo they explicitly prohibit the use of underscore's even in cases where DNS would actually accept them.\nAlso if you look at how domain names are defined:\nDomain         = sub-domain *(\".\" sub-domain)\n   sub-domain     = Let-dig [Ldh-str]\n   Let-dig        = ALPHA / DIGIT\n   Ldh-str        = *( ALPHA / DIGIT / \"-\" ) Let-dig\nA domain name cannot begin with a hypen, only a letter or digit\nI think the current regex is actually a good representation of the RFC.\nI have seen email addresses with underscores in subdomains which seem to work, but if the RFC explicitly rules them out, I don't think it's worth putting it in the regex. Servers that accept them must be considered faulty, and users that have these kind of email addresses will bump into problems sooner rather than later.\nIn short, after doing more research, I think it's probably best to close my PR and leave the regex as is.. ",
    "jasoniangreen": "I understand it a lot better with the example. I think it would be pretty cool feature, can you think of some really solid, real world examples where this would make a lot of difference?. ",
    "scothis": "Thanks @epoberezkin, reading the docs were more clear after a good nights sleep.\nFor the record, this is what I created:\njs\n/**\n * Coerce a string to another data type and validate as if it was that type\n *\n * Useful for numeric values that are transmitted as strings. Since HTTP is\n * text based, all params, query and header properties are strings.\n *\n * Example:\n *   {\n *     \"type\": \"string\",\n *     \"coerce\": {\n *       \"type\": \"number\",\n *       \"minimum\": 0,\n *       \"maximum\": 22\n *     }\n *   }\n */\nvalidator.addKeyword('coerce', {\n  type: 'string',\n  compile: function (schema) {\n    var validateCoerced = validator.compile(schema);\n    return function (data) {\n      if (schema.type === 'number' || schema.type === 'integer') {\n        data = parseFloat(data);\n      } else {\n        throw new Error(`Unable to coerce 'string' to '${schema.type}'`);\n      }\n      return validateCoerced(data);\n    };\n  }\n});. ",
    "objectiveSee": "I would like to see this merged in :) Commenting so I get notifications \ud83d\udcaf . ",
    "jdmswong": "'unsafe-eval' is preventing the use of ajv in my app.  how do I get around this? \nyou mentioned ajv-cli but that is for the command line.. is it still possible to dynamically validate dynamic data using static schemas using this tool; or will I have to pre-generate a module for each schema I use on the front end, then require and run it?. @epoberezkin I meant to add 'without specifically pre-compiling each one'.  Using pre-compilation it sounds as if I have to extract each of the schemas spread around my code into individual files, which would be a lot of overhead.  I also like to see the schema in the relevant code, for easy readability. . ",
    "TheKidCoder": "@jdmswong AJV uses the Function constructor to take your json-schema in the browser and compile a  function at \"run-time\". The idea with using ajv-cli is to to \"precompile\" the function before runtime. You can then store that function somewhere and pass it to AJV instead/along-side of your json-schema object. The real tool you would be using is: https://github.com/epoberezkin/ajv-pack. ",
    "bofcarbon1": "I will take a peak at #325 epoberezking.  I did get beyond this error by placing my new project inside of the default project that Cloud 9 builds when I select a node.js workspace.  I think I have to look for an empty project to start with so that I can scaffold it at the root the right way using angular2-cli.   Thanks. . I was able to solve this using node.js 6.5.0. \nThanks,. ",
    "miljan-aleksic": "Yeah, but loading manually the hyper-schema failed because the schema ref was missing. I didn't saw the upgrade steps. All ok. Thanks.. ",
    "sondrele": "I should note that what I want to acheive, is to only validate a subschema, without looking at the whole schema. \nIn my case, it is acceptable that the $data reference gets resolved to undefined, because I am not doing a full validation of schema, I'm only doing a partial validation of schema-frequency.\nI have added another example here that explains it better here: https://runkit.com/sondrele/589c819811ea6e0014d53f05\n. Thanks for your quick response!\n\nBut how can you define a parent object of the data that is passed to validation on the top level?\n\nI guess I've been looking at this from the wrong angle.\n\nThe documentation can be amended to say that $data can't point outside of root object passed to validation function and doing so results in schema compilation exception.\n\nThis makes sense, thanks :)\nHowever, my use case is that I want to validate a (possibly) deeply nested subschema, because validating the entire schema would an unnecessary heavy operation.\nWhat about a new API operation instead, let's call it validateAtPath(path, data) -> Boolean. The purpose of this function would be to only validate the schema that's referenced by the path, but in the context of the entire schema (and its data) that has been added to ajv with the addSchema method.\nIs that an API operation that makes sense to support?. I see, thank you for the quick reply!. Yeah. I generate my schemas from java classes, so the class names gets serialized to a URN that identifies the schemas. \nMy current workaround is to translate all id's and $ref's before validating the schemas with ajv, but this is obviously not optimal. \nIf support for URN's is not on top of your priority list (so that it will take a while before it's implemented), I would happy to look into the issue instead.\n. I was actually looking at it a little earlier today, and it is indeed the node-url package that's causing this.\nMy quick fix was to rename the url function on the object exported from the resolve module to uri, along with the following implementation:\n```javascript\n// in the file lib/compile/resolve.js\n// resolve.url = resolveUrl;\nresolve.uri = resolveUri;\n// ...\nfunction resolveUri(baseId, id) {\n  return /^urn:/i.test(id) ? id : resolveUrl(baseId, id);\n}\n//  the rest is like before...\nfunction resolveUrl(baseId, id) {\n  id = normalizeId(id);\n  return url.resolve(baseId, id);\n}\n```\nLooking at the URN syntax standard, it seems like it might be enough to check for whether the id starts with urn: to determine if it is a URN or a URL (depending on how thorough we want to be).\nIf you prefer to solve this with a library instead, it seams like the URI.js library is about the same size as node-url (a little smaller actually) and it looks like the API is fairly similar as well. I haven't gotten around to testing it out yet, but I will probably have some time to do it later this week if you think this is the better option :)\nAh, and I almost forgot.\nWe're currently extending the FasterXML jsonschema generator to support what we need for the draft v4/v5, it's not the prettiest, but it's working for the moment :) . @epoberezkin I understand your concerns, both about size, and about a possibly different behavior (although that could maybe be solved with a version bump). It's a little unfortunate that not all urn's are supported, but I guess it's fine as long as it's documented as a limitation.\nAs a curiosity (and side-note), have you considered looking into replacing the legacy url.parse() and url.resolve() functions from the node-url package, with the whatwg-url API instead? That should help decrease the bundle size even further (and maybe offer improved, native performance, for all I know), if url's are going to be the main concern for Ajv.\nAn option to configure the id resolving would work for my case above, and it might also allow for some other use-cases where opaque identifiers are all that's needed. What's your stance on the API?. > That would make it more difficult to allow supporting all URIs, no?\nProbably, but I thought I'd just throw it in as a different issue, since URL id's are going to be the main concern for Ajv. :)\nThe \"legacy\" part comes from this issue and comment on the node.js issue tracker. They seam to talk about deprecation of url.parse(), but not for the foreseeable future, judging from the comments.\nI'll get around looking into a uri option when time allows :). ",
    "adamtal3": "Updated ajv to 5.0.2-beta.0 and the error is gone (pretty sure the update fixed it, but not 100%),. ",
    "dvergeylen": ":+1: Thank you for this very quick response, I will adapt the schema accordingly (installing 5.0.2-beta).\nI know about the required attribute of type, present in my own schema but didn't pasted as guidelines asks for minimal schema to illustrate the problem.\nThank you again. Works like a charm now, awesome module!. ",
    "dvakatsiienko": "thank you!. ",
    "handrews": "\nIt's not sufficient I think. If Ajv were to support URNs it has to support URN resolution\n\nIt seems to me that there are two possible levels of support for any particular URI scheme (including non-URL schemes like urn: and tag:):\n\nUsage as opaque identifiers (required by the spec)\nSupport for automatic retrieval of the resource through scheme-specific resolution\n\nI'm quite possibly missing a subtlety, but 1 seems supportable independent of scheme and should be the first step anyway- presumably you don't fetch HTTP URLs over the network if you have already loaded the resource the URL identifies.\n@epoberezkin I gather your concern is to be able to clearly define the limitation, and it seems to me that if you document that 1 is supported but 2 is not, that is clear.  1 is completely independent of scheme (so it's not really \"URN support\" anyway), while 2 is scheme-specific.  For 2, it's completely reasonable (and I believe compliant with the spec) to document that they are not automatically retrieved.\nThis would (to me) be the expected behavior for any scheme that is unknown to an implementation, whether URL or URN (which includes more than just urn:).\nFragment resolution is identical for all schemes, so as long as you can parse the fragment off that part should also work regardless of scheme or URL vs URN.  If you have the resource, you can apply the fragment no matter how it was identified.. @epoberezkin no problem!  The vulnerability concern is an excellent point.\nWould the application-level change work in ajv-cli?  Perhaps under a flag if there is a security concern?  Could perhaps be done as an integration with ajv-errors?\nOtherwise I'll have to re-implement part of that (there is no way I'll be able to get schema authors to put up with a schema compile commit hook that doesn't say what actually caused the error).  Which is not your problem but... ick.\nI actually was originally trying to do this in ajv-cli originally but I couldn't figure out where to catch the error.  My first experience with the node debugger was not enjoyable :-P  JavaScript seems nearly unrecognizable compared to the last time I used it (when jquery was cutting edge...). What do you mean that I can see the property in params?  My use case is non-programmers (in addition to programmers) such as product managers or tech writers editing schemas.  A commit hook will keep non-compiling schemas from being checked in, but if the output from the actual command line doesn't pinpoint where the error occurs I'll have a revolt on my hands :-)  Telling them to use the npm debugger won't fly, if that's what you mean.\nI can, of course write my own tool for this, but that seems like a lot of work for better logging.  Although perhaps by re-wrapping most of ajv-cli somehow.... Also because of this use case, it uses a modified-meta-schema with additionalProperties: false everywhere to catch typos and the like.  Otherwise I avoid that usage like the plague.. @epoberezkin ah, now I see.  I should have been more clear: in this case I am only running \"ajv compile\", and hadn't gotten around to even trying data validation yet.  However, I could obviously run \"ajv validate\" by passing the meta-schema in -s and the schema in -d.  In which case that output is definitely sufficient!  I had just assumed that they used the same output format, thanks for walking me through it :-)\nAlso will keep an eye on that ajv-cli issue.  Fantastic ecosystem here!. Hmm... yeah, we should sort that out.  I like Julian's view that it's a meta-schema bug for \"id\" and should be treated as \"uri-ref\" in that case.  But I'm willing to bet that the vast majority of people did not catch that distinction and just treating draft-04 \"uri\" as \"uri-reference\" would be the more practical approach.  (now I need to go read that issue and see if I just contradicted myself)\nIn any event I'm not currently using \"id\" except at the root schema level, even when not using a custom meta-schema, and those are always absolute, so this will still work for my use case.  Thanks for the heads up.. @epoberezkin definitely draft-06 (https://tools.ietf.org/html/draft-wright-json-schema-validation-01#appendix-B).  No idea why it didn't make it to the meta-schema, although we kind of re-arranged how the meta-schema got published to the web site by removing the duplicate copies, and it's possible the duplicates were not actually duplicates.  But examples definitely belongs here.. ",
    "brandontom": "This package change has caused AJV to fail for me. \nI receive the following:\nSyntaxError: Unexpected token 'const'\n  at webpack:///node_modules/ajv/node_modules/uri-js/dist/esnext/uri.js:39:0 <- karma-test-shim.js:41043\nThe error goes away if i don't call new Ajv()   OR    use Ajv 6.2.x instead of 6.4.x\nfor now i'm just going to stick with Ajv 6.2.x :). ",
    "boenrobot": "Thanks. Turned out to be a wrong browserify require() call... I didn't realize the module name should be part of an object having an \"expose\" option until just now. And I also enabled warnings output (which is why the output was empty before, not because of files being empty or whatever).. ",
    "krishnanms": "@epoberezkin Thanks for the detailed response. I was able to work around this, by setting allErrors: true and using the first error object in the array, which shows a message with invalid format. Not sure if this is the right way to go about it, but works. . ",
    "deep9": "Now I've tested with https://pypi.python.org/pypi/jsonschema and the result is the same. As being new to json schema, how can I know which one is correct?. ",
    "Sintendo": "This SMTP standard extension does allow for non-ASCII characters: RFC 6531. ",
    "pavlelekic": "Thanks!. ",
    "nenti": "I have the same issue. Unable to resolve module 'url'.\nvar url = require('url');\nSeems as if core nodejs modules are not available in react-native and not related to this module.. ",
    "superandrew213": "@epoberezkin I can confirm that adding url as a dependency works.. @jsaucedo npm i --save url. ",
    "jsaucedo": "How do you add url as dependency of your React Native project?. ",
    "ryanmeador": "Thank you for your swift reply.  I'm not sure I understand why this is expected.  \"10\" is not a valid email address, so only one of the oneOf items should succeed.  Thus, according to the docs, it is the number entry that passes, and the coercion to number should happen.  Is it not fair to restate the method of applying coercion as this: after being successfully validated with coerceTypes == true, data will be left in a state such that it would successfully validate even if coerceTypes == false?  As it stands, the data I'm left with is invalid per the schema.. Now that I have a better understanding of the complexity, I agree it isn't a good use of time to prioritize fixing this :)  It probably would be worth a quick blurb in the docs to explain the limitation and the workaround, though.  If I can come up with something concise I'll submit a PR.  Thanks again.. Hmm, interesting example.  In an ideal world, I would the think the procedure would be to try validating without any coercion and only coerce if that fails.  Then it should pick a coercion and try to validate the entire thing again with that coercion, if that fails, try the next possible coercion, etc.  This avoids the problem of the same value being interpreted multiple ways where convenient, and I think the output is guaranteed to validate without type coercion.  It's certainly a lot more complex.. ",
    "daveisfera": "It segfaults so there's no output but if you look at dmesg, then this is the output:\n[708816.590968] V8 WorkerThread[26964]: segfault at 7f43b54bdff8 ip 000055e3d84c163e sp 00007f43b54be000 error 6 in node[55e3d7bff000+18d6000]. I added the backtrace from gdb in the docker-node issue.. It's generating a schema with 100 properties and then validates 500 rows of random data with it. I did some testing and it will work fine with 80 properties but crashes with 81. With 81 properties, I can lower the number of rows to 394 and it still crashes. I was using 100 properties and 500 rows before because they were round numbers that made the crash happen but those numbers are the smallest way that I've found to make it crash.\nAlso, this crash is happening in our actual software where the schema is not so simplistic/contrived, but I can't send you that, so I was just going for the simplest way to reproduce the crash and this was it. It's a completely self contained test in 79 lines with the bulk of that being setting up ajv so I'm not sure how I could make it any simpler.. I was able to reduce it to using the schema from above with 81 properties and then sending the same value of just empty strings 394 times and it still crashes.\n```\n!/usr/bin/env node\n'use strict';\nconst Ajv = require('ajv');\nconst validator = new Ajv({ allErrors: true, extendedRefs: false });\nconst STRING_KEY = {\n    id: '/StringKey',\n    type: 'string',\n    maxLength: 10000,\n};\nvalidator.addSchema(STRING_KEY);\nlet schema = {\n    type: 'object',\n    properties: {},\n};\nconst NUM_COLUMNS = parseInt(process.argv[2] || '81');\nconsole.log(Testing with ${NUM_COLUMNS} columns);\nlet c;\nfor (c=0; c<NUM_COLUMNS; c++) {\n    schema.properties[s${c}] = { $ref: '/StringKey'};\n}\nconsole.log('schema:', schema);\nconst validate = validator.compile(schema);\nlet value = {};\nfor (c=0; c<NUM_COLUMNS; c++) {\n    const cS = s${c};\n    value[cS] = '';\n}\nconsole.log('value:', value);\nconst NUM_ROWS = parseInt(process.argv[3] || '394');\nconsole.log(Testing with ${NUM_ROWS} rows);\nlet r;\nfor (r=0; r<NUM_ROWS; r++) {\n    validate(value);\n}\nconsole.log('Done');\n```\nOr here's a fixed version that does nothing but define schema, value and call ajv:\n```\n!/usr/bin/env node\n'use strict';                      \nconst Ajv = require('ajv');      \nconst validator = new Ajv({ allErrors: true, extendedRefs: false });\nconst STRING_KEY = {             \n    id: '/StringKey',            \n    type: 'string',              \n    maxLength: 10000,            \n};                                 \nvalidator.addSchema(STRING_KEY);\nconst schema = { type: 'object', \n  properties:                    \n   { s0: { '$ref': '/StringKey' }, \n     s1: { '$ref': '/StringKey' }, \n     s2: { '$ref': '/StringKey' }, \n     s3: { '$ref': '/StringKey' }, \n     s4: { '$ref': '/StringKey' }, \n     s5: { '$ref': '/StringKey' }, \n     s6: { '$ref': '/StringKey' }, \n     s7: { '$ref': '/StringKey' }, \n     s8: { '$ref': '/StringKey' }, \n     s9: { '$ref': '/StringKey' }, \n     s10: { '$ref': '/StringKey' },\n     s11: { '$ref': '/StringKey' },\n     s12: { '$ref': '/StringKey' },\n     s13: { '$ref': '/StringKey' },\n     s14: { '$ref': '/StringKey' },\n     s15: { '$ref': '/StringKey' },\n     s16: { '$ref': '/StringKey' },\n     s17: { '$ref': '/StringKey' },\n     s18: { '$ref': '/StringKey' },\n     s19: { '$ref': '/StringKey' },\n     s20: { '$ref': '/StringKey' },\n     s21: { '$ref': '/StringKey' },\n     s22: { '$ref': '/StringKey' },\n     s23: { '$ref': '/StringKey' },\n     s24: { '$ref': '/StringKey' },\n     s25: { '$ref': '/StringKey' },\n     s26: { '$ref': '/StringKey' },\n     s27: { '$ref': '/StringKey' },\n     s28: { '$ref': '/StringKey' },\n     s29: { '$ref': '/StringKey' },\n     s30: { '$ref': '/StringKey' },\n     s31: { '$ref': '/StringKey' },\n     s32: { '$ref': '/StringKey' },  \n     s33: { '$ref': '/StringKey' },\n     s34: { '$ref': '/StringKey' },      \n     s35: { '$ref': '/StringKey' },\n     s36: { '$ref': '/StringKey' },\n     s37: { '$ref': '/StringKey' },\n     s38: { '$ref': '/StringKey' },\n     s39: { '$ref': '/StringKey' },\n     s40: { '$ref': '/StringKey' },\n     s41: { '$ref': '/StringKey' },\n     s42: { '$ref': '/StringKey' },\n     s43: { '$ref': '/StringKey' },\n     s44: { '$ref': '/StringKey' },\n     s45: { '$ref': '/StringKey' },\n     s46: { '$ref': '/StringKey' },\n     s47: { '$ref': '/StringKey' },\n     s48: { '$ref': '/StringKey' },\n     s49: { '$ref': '/StringKey' },\n     s50: { '$ref': '/StringKey' },\n     s51: { '$ref': '/StringKey' },\n     s52: { '$ref': '/StringKey' },\n     s53: { '$ref': '/StringKey' },\n     s54: { '$ref': '/StringKey' },\n     s55: { '$ref': '/StringKey' },\n     s56: { '$ref': '/StringKey' },\n     s57: { '$ref': '/StringKey' },\n     s58: { '$ref': '/StringKey' },\n     s59: { '$ref': '/StringKey' },\n     s60: { '$ref': '/StringKey' },\n     s61: { '$ref': '/StringKey' },\n     s62: { '$ref': '/StringKey' },\n     s63: { '$ref': '/StringKey' },\n     s64: { '$ref': '/StringKey' },\n     s65: { '$ref': '/StringKey' },\n     s66: { '$ref': '/StringKey' },\n     s67: { '$ref': '/StringKey' },\n     s68: { '$ref': '/StringKey' },\n     s69: { '$ref': '/StringKey' },\n     s70: { '$ref': '/StringKey' },\n     s71: { '$ref': '/StringKey' },\n     s72: { '$ref': '/StringKey' },\n     s73: { '$ref': '/StringKey' },\n     s74: { '$ref': '/StringKey' },\n     s75: { '$ref': '/StringKey' },\n     s76: { '$ref': '/StringKey' },\n     s77: { '$ref': '/StringKey' },\n     s78: { '$ref': '/StringKey' },\n     s79: { '$ref': '/StringKey' },\n     s80: { '$ref': '/StringKey' } } };\nconst validate = validator.compile(schema);\nconst value = { s0: '',          \n  s1: '',                        \n  s2: '',                        \n  s3: '',                        \n  s4: '',                        \n  s5: '',                        \n  s6: '',                        \n  s7: '',                        \n  s8: '',                        \n  s9: '',                        \n  s10: '',                       \n  s11: '',                       \n  s12: '',                       \n  s13: '',                       \n  s14: '',                       \n  s15: '',                       \n  s16: '',                       \n  s17: '',                       \n  s18: '',                       \n  s19: '',                       \n  s20: '',                       \n  s21: '',                       \n  s22: '',                       \n  s23: '',                       \n  s24: '',                       \n  s25: '',                       \n  s26: '',                       \n  s27: '',                       \n  s28: '',                       \n  s29: '',                       \n  s30: '',                       \n  s31: '',                       \n  s32: '',                       \n  s33: '',                       \n  s34: '',                       \n  s35: '',                       \n  s36: '',                       \n  s37: '',                           \n  s38: '',                       \n  s39: '',                               \n  s40: '',                       \n  s41: '',                       \n  s42: '',                       \n  s43: '',                       \n  s44: '',                       \n  s45: '',                       \n  s46: '',                       \n  s47: '',                       \n  s48: '',                       \n  s49: '',                       \n  s50: '',                       \n  s51: '',                       \n  s52: '',                       \n  s53: '',                       \n  s54: '',                       \n  s55: '',                       \n  s56: '',                       \n  s57: '',                       \n  s58: '',                       \n  s59: '',                       \n  s60: '',                       \n  s61: '',                       \n  s62: '',                       \n  s63: '',                       \n  s64: '',                       \n  s65: '',                       \n  s66: '',                       \n  s67: '',                       \n  s68: '',                       \n  s69: '',                       \n  s70: '',                       \n  s71: '',                       \n  s72: '',                       \n  s73: '',                       \n  s74: '',                       \n  s75: '',                       \n  s76: '',                       \n  s77: '',                       \n  s78: '',                       \n  s79: '',                       \n  s80: '' };                       \nfor (let r=0; r<394; r++) {      \n    validate(value);             \n}                                  \nconsole.log('Done');\n```. > Can you try removing data and call to validate inside the loop in the end? Would it still crash?\nDoes not crash if call to validate() is commented out.\n\nAlso, after that, can you try using option inlineRefs: false?\n\nStill crashes.. > So crash is caused by call to validate, not by compiling schema.\nWe already knew that because the log after the schema being compiled was printed since the start of this issue.\n\nWould it crash if you call validate only once? Or you need to call it 394 times to crash and 393 is not enough?\n\nNo, 394 is minimum number of times for it to crash. If you run it 393 times or with less than 81 properties, then it completes without issue.\n\nDid you try using patternProperties in schema instead of properties as I suggested earlier?\n\nThis wouldn't help me because our actual code can't use patternProperties.\n\nYou really need to experiment more with the code to find the minimal amount of code that still crashes but when ANY further reduction stops it from crashing. From what you say it is not minimal yet...\n\nI've found it. 81 properties with 394 calls.\n\nAlso, the option is not extendedRefs, it's extendRefs and in your case it does nothing.\n\nOk, I removed it.\n\nAlso try changing ID to id: 'StringKey', not sure why you need this \"/\" in front. Unlikely it's what's causing the issue, but just in case.\n\nStill crashes.\n\nAlso, does switching to ajv 5.0.4-beta change anything?\n\nStill crashes.. The issue was with the smaller stack available in Apline Linux. You can see details here.. @epoberezkin Could this be added to the tests to verify that ajv works with very large schemas?. ",
    "pselden": "Thanks for the speedy response! That example was just a trivial distillation of what we were going to attempt to do with it, so unfortunately changing the keywords won't work because we'll have multiple of them.\nI'm working on a wrapper around a json schema validator that would be able to run on both front end and backend -- with the ability to specify server-side-only keywords for when we need to hit the DB. This requirement would essentially force all validation to need to be async.\nI think maybe what I could do to lessen the impact is to make it pass allErrors: false when running on the server, since \"live\" validation is only really useful on the client.\nEdit: actually no, wouldn't be able to do allErrors: false because it will still run the keywords synchronously.. ",
    "DAGapps": "@epoberezkin Thanks for your reply. Array.isArray is no problem. Unfortunately I can't say the QT version for now.  I asked the developer of this toolchain and awaiting the feedback. \nThe following example shows keywords that are not allowed as variable names.\nAll properties which \"clothed\" in quotes are not allowed without quotes.\nA comment behind is referenced to the ajv.js Linked here (Bundle, 4.11.5) Keywords from here.\nvar obj = {\n    abstract: 0,\n    arguments: 1,\n    await: 3,\n    boolean: 4,\n    \"break\": 5,\n    byte: 6,\n    \"case\": 7,\n    \"catch\": 8,\n    char: 9,\n    \"class\": 10,\n    \"const\": 11,\n    \"continue\": 12, // ajv.js @ 4263\n    \"debugger\": 13,\n    \"default\": 14, // ajv.js @ 3511, 4534, 4538, 4550, 4553, 4557, 4559\n    \"delete\": 15,\n    \"do\": 16,\n    double: 17,\n    \"else\": 18,\n    \"enum\": 19,\n    eval: 20,\n    \"export\": 21,\n    \"extends\": 22,\n    \"false\": 23,\n    final: 24,\n    \"finally\": 25,\n    float: 26,\n    \"for\": 27,\n    \"function\": 28,\n    goto: 29,\n    \"if\": 30, // ajv.js @ 4172, 4177\n    implements: 31,\n    \"import\": 32,\n    \"in\": 33,\n    \"instanceof\": 34,\n    int: 35,\n    interface: 36,\n    let: 37,\n    long: 38,\n    native: 39,\n    \"new\": 40,\n    \"null\": 41, // ajv.js @ 1291, 1293\n    package: 42,\n    private: 43,\n    protected: 44,\n    public: 45,\n    \"return\": 46,\n    short: 47,\n    static: 48,\n    \"super\": 49,\n    \"switch\": 50,\n    synchronized: 51,\n    \"this\": 52,\n    \"throw\": 53, // ajv.js @ 6939, 7068\n    throws: 54,\n    transient: 55,\n    \"true\": 56,\n    \"try\": 57,\n    \"typeof\": 58,\n    \"var\": 59,\n    \"void\": 60,\n    volatile: 61,\n    \"while\": 62,\n    \"with\": 63,\n    yield: 64,\n    array: 65,\n    isArray: 66,\n    undefined: 67\n};\nIn the latest chrome browser (57) all keywords are allowed. \nThanks you.\nFor me, you do not necessarily have to fix this issue. :-)\nI changed the ajv.bundle.js and the ajv throws no errors now. \nBut it says that my json is invalid for the schema (on embedded linux device). On chrome on windows PC it says valid. You see, I have another problem. I have to debug this first. \n. @epoberezkin Ajv prints \"Error: Error compiling schema, function code:\" (without code) while compiling the schema: \nvar ajv = new Ajv();\nvar validate= ajv.compile(schema); // error\nOn chrome, there are no problems. Ajv works great. But not for embedded system. Nevermind my issue. Currently I can't tell if we will use this library. Because it does not work with the QT Script Engine. \nYou do not need to adapt the library to out special purposes. Perhaps I will do. But not for sure.\nIt's a great Library. I will think on it, if I plan to validate json on browser or node side. \nThanks for your time, mate. \n. @epoberezkin  Thanks. The pre-compiled schema does work. Ok I had to adjust a few things. For example x.enum to x[\"enum\"]. Also I manually replaced the \"require(..)\" with source code. Like require('ajv/lib/compile/equal');\nBtw. I work on Qt 4.8.5. (upgrade is not possible). ",
    "aikar": "@epoberezkin that ignore line didn't seem to do anything for me in Webpack 2.3\nAlso, with the nature of webpack, unless you explicitly add code splitting to ajv, the files HAVE to be in the bundle if they were to work.\nCould you maybe deploy a bundle without these deps into dist folder as part of v4, and then we can use the webpack resolve.alias feature to remap ajv to ajv/dist/webpack-no-async.js ?. @epoberezkin i think you misunderstood my request. I was asking for a file that either didnt include these deps, or changes them in a way that tricks webpack.\nUltimately, it's important to not get too complacent with ignoring critical sounding warnings (you know, the warning message kind of says the word critical), putting you in the mindset that when a more serious issue does arise, you end up ignoring it.\nIt also creates panic within the team. Sure i know its harmless, but when every one of my team mates pull the code down and see this new warning with the word 'critical', it creates a panic that the build lost stability.\nI then have to explain everything about this to everyone. \nSometimes harmless messages cause more harm than expected.. Also per your suggestions, I am not a direct user of this, so I have no control how my dependencies load it. I ultimately need a build that doesn't trigger this that I can pin to bring the others into using it.\nI'm curious to what even caused this issue, as 4.11.3 does not cause this, but 4.11.4 or 5 does.\ncc @gajus, this issue is about why I asked for https://github.com/gajus/babel-plugin-react-css-modules/issues/74\n. @gajus \n```\nWARNING in ./~/ajv/lib/compile/index.js\n13:21 Critical dependency: the request of a dependency is an expression\nWARNING in ./~/ajv/lib/async.js\n96:20 Critical dependency: the request of a dependency is an expression\nWARNING in ./~/ajv/lib/async.js\n119:15 Critical dependency: the request of a dependency is an expression\n```\nnote: I copied those from another closed ticket, so line #'s might not be right, as I skipped updating React Css Modules for now to avoid it. but the error message is the same as what i'm seeing.\nBut no I could not figure it out, my only suspect is the major version update to browserify v14.. Ok now i'm confused. It doesn't appear to be between those versions.\nI rebuilt my yarn.lock even without updating BPRCM and locked ajv to 4.11.3 by adding it as a strict dependency to my project, and the issue came up still with this diff of versions:\nhttps://gist.github.com/aikar/a464defedad78b02c327867791420299\nI've verified I only have 1 copy of ajv in my node_modules.. ",
    "elrumordelaluz": "@epoberezkin first, congrats for the great and useful lib. \nDon't know if is related on this issue but I am using ajv@^5.0.4-beta as a separate chunk with webpack but obtains this: \n\nIf I require directly (so include in the main bundle) there's no error.. @epoberezkin where is exposed the file dist/ajv.bundle.js? \nFound here and if I use it directly from a bundle in a local clone works perfect.. ",
    "brainstormtrooper": "OK... I can get rid of the warnings, but i don't think webpack can bundle everything that ajv is looking for... I'm using version 6 and I have a line like this in ./node_modules/ajv/lib/async.js\nnodent = require(name)({ log: false, dontInstallRequireHook: true });...\nthe variable  gives no folder context for webpack to work with, so how can it be bundled?. ",
    "dsgill": "Ok, I feel kind of dumb. Operator error. Thanks.. ",
    "radio-miskovice": "sorry, I missed the validateSchema method in the documentation.. I can actually do the same with draft 04.  But the validateSchema() method seems not to be working either. I will check and post another issue if I can't tweak my parameters to get at least a validation run.. Yes, it works perfectly! As I wrote when closing the issue, I strangely missed the right method in documentation.\nI changed the $schema reference to draft-04 and everything is perfect :-)\nJindra\nFrom: Evgeny Poberezkin [mailto:notifications@github.com]\nSent: Friday, April 7, 2017 10:30 AM\nTo: epoberezkin/ajv ajv@noreply.github.com\nCc: Jind\u0159ich Vavru\u0161ka jindrich@vavruska.cz; Mention mention@noreply.github.com\nSubject: Re: [epoberezkin/ajv] Does not compile JSON schema metaschema, fails to validate schema files (#457)\ndraft-04 meta-schema is already bundled into the main version (not in beta though)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/epoberezkin/ajv/issues/457#issuecomment-292475390, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AE1K2Bw9KmChzT2Sw7JiR5TQhSwCEsGdks5rtfQggaJpZM4M1mGA.\n. ",
    "pravi": "@epoberezkin I'm packaging ajv for debian and I want to take tarballs from github corresponding to the npm versions. If they are tagged, the process is automated, ie, I can find and download new version without any manual step. If you are going to include tests in the npm dist tarballs, I could use them. I want to run tests to make sure the debian package is working as expected.. Thanks! Please do it for ajv-keywords too https://github.com/epoberezkin/ajv-keywords/issues/11. ",
    "jonathansp": "Hi @epoberezkin @seeden I believe we could have the compile module imported optionally since it's not necessary and by removing it the bundle's size would be reduced substantially.. My first thought was to remove ajv.compile function, but after going over the code I realized it is quite complex so it won't happen. The final bundle size is an issue sometimes. Our project has 5kb + 111kb from ajv. . ",
    "ehmicky": "I understand that supporting this would add a lot of complexity in the code, and probably degrade performance. I just thought I would bring it up, as this is being a problem for me right now, and you might be interested in knowing this issue arises for some users.\nMy use case is the following. I am working on an open-source library which generates an API server (both REST and GraphQL) using a single declarative file as input. This file describes each model, let's call it models.schema.json. Database CRUD, filtering, sorting, selecting, populating, validation, authorization, default attributes, etc. are automatically generated from parsing that file, without library users needing to write any other code.\nI chose JSON schema as the format of models.schema.json, as it is expressive, well-designed, standard and has a rich ecosystem.\nDatabase models often point to each other, or to themselves, creating circular references. I want to make sure models.schema.json is proper JSON schema before starting the server, so I validate it against JSON schema meta-schema (which has circular references too).\nA simplified version of models.schema.json to represent a User would be:\njson\n\"required\": [\"id\"],\n\"properties\": {\n   \"id\": {\n      \"type\": \"string\"\n   },\n   \"is_active\": {\n      \"type\": \"boolean\"\n   },\n   \"best_friend\": {\n      \"$ref\": \"#\"\n   }\n}\nA GraphQL query against this model, e.g. to find the best friend of a user's best friend, could look like this:\ngraphql\nfindUser(id: 1) {\n   best_friend {\n      best_friend {\n         id\n      }\n   }\n}\nI am dereferencing all JSON references prior to validation. I started by not doing so, but it turns out that most parts of my library are greatly simplified by having those JSON references dereferenced, except for ajv which crashes. An alternative for me is to not dereference me, but this would put back to other problems I encountered in my project by having to manually those JSON references every time some part of my system needs it.. I understand. I did read that part of the FAQ first, but still wanted to bring it up just in case.\nI think objects with circular references are still serializable, by first converting circular references to some kind of JSON-pointers-like string. This is e.g. what this library I am using is doing. One could also dereference JSON references on parsing, and re-create them on serialization.. I ended up following up your advice, and avoiding circular references.\nIf this issue is too complex to implement, I think I'll close it. What do you think?. Thanks for your response. It can definitely fix this problem.\nJust to make sure: isn't this something that could provide value to the core, instead of letting users do it themselves?. ",
    "bobby-brennan": "I'm working with a constantly changing list of schemas from the wild, so I can't whitelist. I'd like to completely ignore unknown formats, but validate the ones supported by JSON schema.\nformat: false helps, but I'm guessing that disables e.g. email validation.. ",
    "alirobe": "Because this came up while googling... \nAccording to this book, validators should ignore formats that aren't understood by default, so I was initially confused by this behaviour: \nhttps://json-schema.org/understanding-json-schema/reference/string.html#format\nBut actually the docs are pretty clear on this. That's not AJV's default way of dealing with unknown formats:\nhttps://ajv.js.org/#formats\nThe option requested here now exists, just set \"unknownFormats\" to \"ignore\", or [\"myformata\", \"myformatb\"] . ",
    "gunslingerfry": "So I'm not sure I actually understand the implication. If you wouldn't mind, can you show me a concrete example? My goal is DRY in validating our database and it seems the easiest to maintain by duplicating the class inheritance of the objects. e.g. an engineer updates the persistent data of a class, they can look at the analog in the schema to quickly identify where that change goes (and hopefully, create a migration script of some sort).. Yes. I'm trying to enforce the additionalProperties: false in all the inherited schemas (in addition to merging the required properties). . ",
    "LeviDooley": "Thank you. \ud83d\ude04 \nI had no idea that it updated recently. I was about to say, I wonder why the website is outdated, but then I saw that draft-06 was authored April 2017. I guess it makes sense.. I figured, but I'm just now making these schemas, so I might as well start with the latest version. Thanks again.. ",
    "admvx": "@mmc41 I had this issue too, but found the migration guide under the 5.0.0 release notes: https://github.com/epoberezkin/ajv/releases/tag/5.0.0 . ",
    "Domvel": "I do not understand why is the property $id with the url to the schema required for the schema? The property $schema is for the schema url, or not?\nI fixed the error no schema with key or ref by adding the $id with the url to the json-schema.\nNow my files looks like (snippet):\njson\n{\n  \"$id\": \"http://json-schema.org/draft-04/schema#\",\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n}\nI need $schema for the editor (VS Code). Why is id required? \n. @epoberezkin Why is not possible to use ajv without $id? Only with $schema. I just added the id property to work with.. @epoberezkin Thanks for your analysis. I added $id because ajv 6.x does not work without this property. In previous versions and all other for me known validators does not requires it. I expected that the $schema property is enough. \nIf I remove \"required\": [\"version\"] from the schema, it works. This required field is for the data properties not for the scheme. I do not understand. And why is $id required?\n. ",
    "PechenTreski": "Ok, I simplified the code. We have two types of genders: man and woman. Only women have boobs. I create two arrays of people. And I expect, that the element with \"boobs\" property will be woman through the conditions described in #/definitions/gender\nAjv options are same\n JSON Schema \njavascript\n{\n    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n    \"type\": \"object\",\n    \"additionalProperties\": false,\n    \"properties\": {\n        \"people\": {\n            \"type\": \"array\",\n            \"default\": [],\n            \"items\": {\n                \"oneOf\": [\n                    { \"$ref\": \"#/definitions/genders/man\" },\n                    { \"$ref\": \"#/definitions/genders/woman\" }\n                ]\n            }\n        }\n    },\n    \"required\": [\"people\"],\n    \"definitions\": {\n        \"boobs\": {\n            \"_comment\": \"Only for women\",\n            \"type\": \"string\",\n            \"enum\": [\"small\", \"big\"],\n            \"default\": \"small\"\n        },\n        \"gender\": {\n            \"type\": \"string\",\n            \"enum\": [\"man\", \"woman\"],\n            \"default\": \"man\"\n        },\n        \"genders\": {\n            \"man\": {\n                \"type\": \"object\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"kurwa\": {\n                        \"type\": \"string\",\n                        \"default\": \"1\"\n                    },\n                    \"gender\": {\n                        \"type\": \"string\",\n                        \"const\": \"man\"\n                    }\n                },\n                \"required\": [\"gender\"]\n            },\n            \"woman\": {\n                \"type\": \"object\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"kurwa\": {\n                        \"type\": \"string\",\n                        \"default\": \"2\"\n                    },\n                    \"boobs\": { \"$ref\": \"#/definitions/boobs\" },\n                    \"gender\": {\n                        \"type\": \"string\",\n                        \"const\": \"woman\"\n                    }\n                },\n                \"required\": [\"boobs\", \"gender\"]\n            }\n        }\n    }\n}\n The code \n```javascript\nvar validateInstructions = ajv.compile(schema);\nvar case1 = {\n    people: [{\n        boobs: 'small',\n        gender: 'woman'\n    }]\n};\nlet valid1 = validateInstructions(case1);\nconsole.log(case1, validateInstructions.errors);// fails with 3 errors, kurwa=2 (ok)\nvar case2 = {\n    people: [{\n        gender: 'man'\n    }]\n};\nlet valid2 = validateInstructions(case2);\nconsole.log(case2, validateInstructions.errors);// passes, but kurwa=2 (must be 1)\n```. ",
    "retorquere": "I think this is more about ajv.errorsText, which outputs data should NOT have additional properties without further information on what properties are the culprit; for other errors, the message is nicely descriptive.. Clear - sorry for not looking it up. . ",
    "oliverconstance": "So i've implemented the below\n```\nvar unique = require('array-unique');\najv.addMetaSchema(metaSchema, 'myMetaSchema');\ntry {ajv.addSchema(schema, 'mySchema');}\ncatch (err) {\n    var str = ajv.errorsText()\n    var arr = str.split(\",\")\n    var newArr = []\n    for (var a = 0; a <arr.length; a++)\n    {\n        if (arr[a].lastIndexOf(\"]\") == arr[a].split(' ')[1].length){\n            newArr.push(arr[a].split(' ')[1])\n        }\n    }\n    console.log(unique(newArr))\n}\n```\nSeems to at least uniquely identify properties where I have an issue, including parents, but not what is wrong with them. Given the enormous array of potential issues, this feels like a sensible mid-point\nAny other pointers welcome . Thank you for advice \nI assume you are referring to this: \nhttps://github.com/epoberezkin/ajv-keywords#ifthenelse\n(When you say it will be added to the next spec, which spec do you mean?)\nI will also look into the options for extending the schema in a cleaner way, cheers. https://github.com/json-schema-org/json-schema-spec/issues/180\n. ha, found it at the same time :). cool, in which case I guess it seems fair to close this issue, thanks for the help\n. ",
    "beeplin": "Thanks @epoberezkin , sorry for missing the FAQ.\nSo I moved all the properties above to the top-level , only keeping required in selectCases, and it worked. :). ",
    "nexinto-gmbh": "Hi,\nall the following stuff is based on\n```javascript\nvar inlineNullableTemplate = doT.compile(\"\\\n  {{ \\\n    if (it.schema.nullable) { \\\n      it.schema.type = Array.isArray(it.schema.type) ? it.schema.type : [it.schema.type]; \\\n      it.schema.type.push('null'); \\\n    } \\\n    var $data = 'data' + (it.dataLevel || '') \\\n      , $nullable = it.schema.nullable; \\\n  }} \\\n  {{=$nullable}} || ({{=$data}} !== null) \\\n\");\nvar ajv = new Ajv({allErrors: true});\najv.addKeyword('nullable', {\n  inline: inlineNullableTemplate,\n  errors: true,\n  metaSchema: { type: 'boolean' }\n});\nvar schema = {\"properties\": {\"foo\": { \"type\": \"string\", \"nullable\": true } } };\nvar validate = ajv.compile(schema);\nvalidate({\"foo\": null});\n```\nI've studied your sourcecode, the compilation process and the compiled validators also.\nBut it seems there is no chance to extend or avoid the type checking or something else to ignore the error\nInvalid: data.foo should be string\nif my nullable flag ist true.\nWhat I understand:\n1. With all 4 Keyword types (inline, compile, ...) a validation code will be generated before the typechecking starts.\njavascript\n...\n//myvalidationcode\nvar valid1;\nvalid1 = true || (data1 !== null);\n//default custom keyword error handler\nif (!valid1) {\n...\n}\n//the default type checking\nif (typeof data1 !== \"string\") {\n...\n}\nvar valid1 = errors === errs_1;\n...\n\n\nThere is no chance to effect the default type validation nor to manipulate the schema within a new keyword, so the schema type can't be changed / extended (or something else on the schema).\nI've tried this via the \nit.schema.type\nreference but I had to find out, that (only) the types has a special handling in your code.\nvar $typeSchema = it.schema.type,\n$typeIsArray = Array.isArray($typeSchema);\nSo I can't manipulate this in my code.\n\n\nI understand, that the main purpose for addKeyword is, to extend the validations, to harden it. But in my case it must be weaker than before.\n\n\nCurrently my only solution is to transform the schema from\n{\"type\":\"string\", \"nullable\":true\"}\nto\n{\"type\":[\"string\",\"null\"]}\nbefore the validation process start, but I will loose the correct error messages, based on \"nullable\".\nMaybe I misunderstood Improve type validation #485, but changing the order of validation or something like this, doesn't solve my requirement.\nEither I validate first and can't interfer the type validation after or I validate after the type and can't manipulate the error state.\nDid you have another idea?\nThank you for your response.\nChristian. Hi\nand sorry for answering so late.\nI stopped developing on this code 5 month ago but I think I have a solution.\nBased on Swagger Extentions in Swagger API 2 I named the field x-nullable to have a minimum gap to the nullable option in OAI 3.\nIt should also be compatible to OAI 3 nullable.\n{{\n  var $data = 'data' + (it.dataLevel || '')\n    , $valid = 'valid' + (it.dataLevel || '')\n    , $errs = 'errs__' + (it.dataLevel || '')\n    , $isValid = it.util'checkDataType'\n    , $isNullable = !!it.schema.nullable || !!it.schema.x-nullable\n    , $isOAI2 = it.schema.x-nullable !== undefined && it.schema.nullable === undefined\n    , $keyword = $isOAI2 ? 'x-nullable' : 'nullable';\n}}\nif({{=$isValid}}) {\n{{=$valid}} = true;\n} else if({{=$isNullable}} && {{=$data}} === null) {\nvar i{{=it.level}} = vErrors.findIndex(function(error) { return err.keyword === 'type' && err.dataPath === (dataPath || '') + {{=it.errorPath}}; });\n  if(i{{=it.level}} > -1) {\n    vErrors.splice(i{{=it.level}}, 1);\n    errors--;\n  }\n  {{=$valid}} = true;\n} else if({{=$data}} === null){\nvErrors.push({ keyword: '{{=$keyword}}', params: { type: 'boolean' }, message: 'should be true' });\n  errors++;\n  {{=$valid}} = false;\n} else {\n{{=$valid}} = false;\n}\nimport Ajv from 'ajv'\nimport nullable from './dotjs/nullable'\nconst ajv = new Ajv({ removeAdditional: true, allErrors: true })\najv.addKeyword('nullable', {\n  inline: nullable,\n  errors: true,\n  statements: true,\n  metaSchema: { type: 'boolean' }\n});\najv.addKeyword('x-nullable', {\n  inline: nullable,\n  errors: true,\n  statements: true,\n  metaSchema: { type: 'boolean' }\n});\nexport default ajv\nDo you need this for your own OAI 3 implementation?\nVon: Khusamov Sukhrob [mailto:notifications@github.com]\nGesendet: Freitag, 8. September 2017 05:24\nAn: epoberezkin/ajv ajv@noreply.github.com\nCc: Christian Kulbe Christian.Kulbe@nexinto.com; Mention mention@noreply.github.com\nBetreff: Re: [epoberezkin/ajv] Extend with custom keyword to support nullable based on Open API 3 Specification (#486)\n@nexinto-gmbhhttps://github.com/nexinto-gmbh Dear, but did you succeed in making a plugin to process the parameter \"nullable\"?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/epoberezkin/ajv/issues/486#issuecomment-327989030, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ASzHHaRUaRlU6AnwbuusRCvN2GMVUk0mks5sgLNQgaJpZM4NX8r0.\n. Yes and no.\nWe need some types and validation which doesn\u2019t exists in 2 but be a part of 3 like nullable.\nIf you have a working OAI 3 implementation in the near feature, I will use this instead of my modification.\nTHX\nVon: Khusamov Sukhrob [mailto:notifications@github.com]\nGesendet: Mittwoch, 13. September 2017 04:53\nAn: epoberezkin/ajv ajv@noreply.github.com\nCc: Christian Kulbe Christian.Kulbe@nexinto.com; Mention mention@noreply.github.com\nBetreff: Re: [epoberezkin/ajv] Extend with custom keyword to support nullable based on Open API 3 Specification (#486)\nThanks for answer!\nDo you need this for your own OAI 3 implementation?\nYes, it is.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/epoberezkin/ajv/issues/486#issuecomment-329042750, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ASzHHSB7ujRc3z8DyObV6deApXckO1yAks5sh0OKgaJpZM4NX8r0.\n. ",
    "khusamov": "@nexinto-gmbh Dear, but did you succeed in making a plugin to process the parameter \"nullable\"?. Thanks for answer!\n\nDo you need this for your own OAI 3 implementation?\n\nYes, it is.\nDid you write the keywords \"discriminator\" and \"readOnly\" handlers?. I'm now picking a validator that will add the keywords nullable and discriminator. But so far, unsuccessfully.. ",
    "TageNielsen": "There is an invalid unit test added as part of this commit\nit('\"nullable\" keyword must be \"true\" if present', function() {\n        should.throw(function() {\n          ajv.compile({nullable: false});\n        });\n      });\nnullable: false is a valid value for schemaNullable.   false is the default value, though it may be explicitly defined.. ",
    "ui-xp": "Still need help with this? \ud83d\ude04 . Could you contact them to let them know I'll be working on it incase they are still planning to start it?\nIt will take a few days for me to mock up and design, I will update you for Saturday with some ideas. Let me know if that's ok!. Hey @epoberezkin, I have done some basic wireframes, here are my thoughts.\nCurrently, nearly everything is on one single page. We could de-clutter it with essentials (getting started, features etc) and have a documentation section with sub-sections for all the things on the home page (Formats, $data references etc)\nHere are the wireframes:\nDesktop\nMobile\nThis is just to give you an idea, I was thinking of having a fixed menu as the sidebar which follows you along, and menu items are accordion based (so we can #link to sections within documentation).\nAgain it's rough, content is just placed there to get a visual idea and no design has been applied, let me know your thoughts!\n. Thanks, I'll take a look to see how this works.. Yeah, I'll just create a responsive template, keep the current structure and add some light styling, we are ok with using bootstrap 4?. Made a start on it at https://github.com/ui-xp/ajv-page\nNothing to really see yet, when I make some more progress I'll update you!. Hey @epoberezkin \nHaven't had much time but here is something you can checkout.\nhttps://github.com/ui-xp/ajv-page\nInstructions are on the page how to run it, it's more of a style guide also did a variation on the logo to brand it a bit better, but up to you if you want to use it. \nStyles should be easy to update and however you popular the site currently (readme?) just pop that content in the main white container, also site is now responsive!\nLet me know if you have any questions.. ",
    "jhohlfeld": "What about https://www.gitbook.com/? It's pretty much standard nowadays and looks great!\nCheck this option out (lowest effort possible): \n\n. I was searching for it ~30 mins. The docs could really be improved \ud83d\ude05. ",
    "bassundar": "Please correct my JSON schema in such a way for the below validation\n1. If I provide below phone request with out type Id, it should say 'typeid is required'\n{\n  \"phones\":\n    {\n      \"areaCode\":\"972\",\n}\n\n}\n2.Similarly If I provide below address request with out type Id, I should say 'typeid is request'\n{\n  \"addresses\": {\n  \"address1\": \"vin st\",\n  \"address2\": \"4444\",\n  \"countryId\": \"616\",\n  \"stateId\": \"55\"\n }\n}\nPlease help me on correcting my JSON schema, i really appreciate your help\n. ",
    "blainesch": "Thanks!. ",
    "rodrev": "okay thank you.. ",
    "ankitkothana": "Thanks.. ",
    "astitt-ripple": "I'm sorry, I was looking at the larger titled section, and not the smaller titled one right above it that you were actually citing. My apologies for the confusion, thank you for taking the time to reply.\nThat we can't put (potentially nasty) non-validated data from the input object into the error message makes sense.\nRegarding getting errorsText() to print an actionable message for this case, you're right I would need to modify the error.message fields before calling it. Not ideal, I was hoping to avoid mutating the error object, but that is workable.\nThanks.. ",
    "brettz9": "I'm having trouble with that approach as a simple valid schema (supplied as data) gets stripped to nothing when validated using removeAdditional set to all against the draft 4 schema: https://runkit.com/brettz9/59263cf6466ac600128cb264 .\nIf this is due to problems with removeAdditional with additionalProperties, it seems that the burden requiring refactoring is a heavy one, as schemas such as the JSON Schema meta-schema may not be under one's direct control.. Thanks! It looks like validateSchema: false is the critical piece here rather than the meta: false.. ",
    "akaibanana": "What a quick response! Thanks, I will use the workaround for now and I hope the issue will be fixed soon :). ",
    "bernharduw": "Thanks, that's correct \u2013 I was using ajv within react-native.. ",
    "dolphub": "Interesting, it seems to be working when it's just a validate. \nEssentially I'm implementing a mocking functionality to the API I'm building using json-schema-mocker.  I suspect it has something to do with how I'm getting the schema back out of AJV.  \n// getSchema with error handling removed:\nreturn ajv.getSchema('Animal').schema;\nwhich is then passed into the mocker library with that return result.\nconst schemaFaker = require('json-schema-faker');\nschemaFaker.sync(schema);. ",
    "joshuguessennd": "hi it's my first time using json schema and i get this issue \nUncaught Error: no schema with key or ref \"http://json-schema.org/draft-04/schema#\"\n    at Ajv.validate (ajv.js:95)\n    at Ajv.validateSchema (ajv.js:183)\n    at Ajv._addSchema (ajv.js:317)\n    at Ajv.validate (ajv.js:97)\n    at validateFormData (validate.js:196)\n    at Form.validate (Form.js:166)\n    at Form.js:87\n    at Form._this.onSubmit (Form.js:103)\n    at HTMLUnknownElement.boundFunc (ReactErrorUtils.js:63)\n    at Object.ReactErrorUtils.invokeGuardedCallback (ReactErrorUtils.js:69). ",
    "reywright": "Same. I'm trying to figure this out.. Be careful that the version of ajv you're using, matches the schema json file you use. That will also trigger this error.. ",
    "jorotenev": "I think the referenced instructions don't work for 6.x. With the same code and 5.5.2 I can successfully add a meta schema, with 6.x - I get a no schema with key or ref.\n@epoberezkin \nedit: oops, didn't notice the var ajv = new Ajv({schemaId: 'id'}); on top of the README.. ",
    "aapoalas": "I'm getting a similar problem but without any '#' or multiple schemas. I've a fairly large amount of definitions, some of them cross-referencing each other. One particular instance is a case where I have an object that can be one of two referenced definitions.\nOne of these definitions ('function') requires two properties, \"func\" and \"params\", while the other ('connection') requires \"location\" and \"type\".\nThe object being validated has only \"params\" defined, ie. it is lacking the \"func\" property. But as this is \"oneOf\" situation, I get errors from both. I get \"missingParameter: 'location'\" with schemaPath \"#/definitions/connection/required\" from 'connection but for the equivalent 'function' while I do get \"missingParameter: 'func'\", the schemaPath is \"#/required\"\nAny further information that you need, I'll be happy to provide to the best of my abilities.. Horrah, I actually managed to reproduce this! I was kind of expecting that to not happen with a simpler example but here it is: https://runkit.com/aapoalas/5941134ab79c0b00117f3137\nThe schema itself is still not too simple, about 60 lines, but the gist of it should be pretty understandable.\nIf you have any further questions, just ask.. ",
    "Mythili007": "I am trying to use the schema as below and getting the error as \"can't resolve reference device from id #\"\nschema:\n\"device\" : {\n        \"id\" : \"device\",\n        \"type\": \"object\",\n        \"additionalProperties\": false,\n        \"properties\": {\n            \"deviceId\": {\n                \"type\": 'string',\n                \"maxLength\": 50\n            }\n      }\n},\n\"deviceData\" : {\n        \"id\" : \"deviceData\",\n        \"type\": \"object\",\n        \"additionalProperties\": false,\n        \"properties\": {\n            \"deviceData\": {\n                \"type\": 'object',\n                \"items\": {\n                    \"$ref\": \"device\"\n                }\n            }\n        }\n    }\nCould you please tell me what part I am missing here?. ",
    "irvinlim": "I just found out that omitting the second parameter from compileAsync, i.e. doing validator.compileAsync(testSchema) will make it work. I suppose we can close this as a non-issue.\nI'm not 100% sure why this is the case though. The documentation says: \n\nYou can asynchronously compile meta-schema by passing true as the second parameter.\n\nMaybe I don't fully understand what a meta-schema is, but how does this change things?. Got it! Perhaps maybe we could add this in the documentation as well, because it's not exactly clear that meta-schemas should ignore useDefaults, and that setting the argument to true means that the schema is a meta-schema... \nI interpreted that line as to compiling the meta-schema defined in $schema, rather than saying that compileAsync(schema) will consider schema to be a meta-schema.. ",
    "jboavida": "Very neat. And it explains why the nesting of the custom keyword was working in similar scenarios (the keyword does a dynamic $ref, which really is sort of a non-inline $ref).\nBtw: thanks for your extremely quick answers. It's quite impressive how you seem to always get to everyone's questions super-fast.. I'd like it to work both inside of sync schemas invoking sync schemas, and inside async schemas invoking async schemas.\nThe first case is incompatible with being an async keyword, the second is incompatible with being a sync keyword. (I think with inline functions it would work without declaring the type of keyword, but I couldn't test it because I also need to resolve the referenced schema dynamically, which both goes against the spirit of the inline functions and would need it.self.getSchema to be in the closure.)\nMy current solution is to define\njs\najv.addKeyword('custom', { compile: same_function });\najv.addKeyword('asyncCustom', { compile: same_function });\nwhich works, but doesn't feel right.\nWhat I can't figure is whether this sort of dynamic $ref is an obscure corner case or is a special case of a broader pattern. It has made a huge difference for my use case.. About the use case: { custom_key: params } generates a schema id based on params and the current object, and invokes that id as in a $ref. The id can only be determined at validation time, because it's based on the object.\nIt's similar to a gigantic switch (with a few hundred alternatives), except the conditions that decide the id are not simple to express as schemas (maybe nested switch trees could work, but it would be hellish to update it everywhere each time a few alternatives are added to the list). (It does sound crazy, but it's being surprisingly manageable.)\nAlso, (the data described by) the invoked schemas are the primary driver; I tried to make them more similar to each other, but they are too different.\nAbout being the same function: most of the compiled function code handles the schema id generation and invoking the schema. I could simply return whatever the inner schema returns (boolean or promise), except that in the sync answer case I would lose the error details. So, I do split:\n\nif the invoked schema is sync called from a sync schema, copy innerSchema.errors to same_function.errors;\nif the invoked schema is sync called from an async schema, return a rejected promise based on innerSchema.errors;\nif the invoked schema is async, just pass the result along.\n\nThis is a little awkward, but in the async version of the keyword I have to deal with the last two cases anyways (I only get to know whether the inner schema is sync or async at run-time), so I may as well handle the first one too and use the same function (90% of it is shared code).\nAbout using the same keyword name: I suspect this comes up in any keyword that changes (so to say) the control flow of the schema validation. For example, anyOf needs to handle sync and async schemas differently, but for a user it makes more sense to always call it anyOf instead of having a separate asyncAnyOf.\nIt's true that generating a schema id at validation-time is potentially confusing (in terms of keeping track of what the computer is doing). For example, when the id points to a non-existing schema, I'm undecided between following the missingRefs option or rejecting always (because it would be way too easy to have silent failures). So, maybe forcing the user to actively choose between the sync or async version is safer. But it's strange not to simply work the same as anyOf, allOf, not and so on.. > Would allowing $data as the value of $ref cover this use case?\nFor the specific project in which I'm using the custom keyword, it wouldn't be enough (the ids are generated from several strings, like string templates in which the slots are the results of $data calls), but I can imagine different projects where $data inside $ref would be just the right amount of flexibility.\n\nI think in this case it can just return errors synchronously (copy innerSchema.errors to same_function.errors).\n\nWhen the keyword is sync yes. When the keyword is async, I'm not getting it to pass the errors to the top validator, and co is not ok with true/false (it doesn't yield scalars). I don't see how to avoid some check there, so it's ok to have one more.. I've been thinking about your question and have some sort of followup.\n\nWould allowing $data as the value of $ref cover this use case?\n\nIt would work if I could somehow intercept the $data result and work on it before passing it to the $ref.\nMy use case (you can check it at https://github.com/jboavida/ajv-refdata) would be very easy to implement with \u201cvalidation-time macros\u201d, where the validation function would generate a schema (at validation time) and that schema would be applied.\n$data and $ref (at least without the base id implications) are really special cases of validation-time macros, so maybe there's the germ of an useful idea.\nNow that I've finished the keyword implementation and it is consultable, it's easier to illustrate my original issue. The keyword, in my typical use case, takes\n{ \"$ref$data\": [\"/categories/\", \"/category\", \"/subitems/\", \"1/type\", \"#/definitions/\", \"0/group\"] }\nreplaces \"/category\", \"1/type\", \"0/group\" by the corresponding $data values (this would usually apply to properties of all items in an array), and turn it into something like\n{ \"$ref\": \"/categories/<cat-id>/subitems/<type-id>#/definitions/<group-id>\" }\nSo, the meaning really doesn't change if it's invoked in a synch vs async schema, but I need to implement the subvalidation call differently depending if I'm in a sync or async schema. The change I proposed makes it possible to define keywords that do subvalidations compatibly with both cases.\nI do realize that for practical purposes, $ref$data may be the only use case, and as the workaround ($ref$data in sync schemas, async$ref$data in async schemas) works fine, it's a problem-solved situation.\nThat said, if you think the flexibility would be good to have, or would prefer to see a pull request before deciding one way or the other, let me know. (It would probably take me another 3 week gap to get back to it, just to add a few more tests.). ",
    "JayChandler": "Yeah but i dont't know the correct syntax for that. Can you give me some help pls ?. ",
    "moshewe": "It validates in Runkit and I've also ran it though my tests and you're right, it validates successfully. This warning is misleading, though.. Excellent! Thanks a bunch!. ",
    "greenkeeper[bot]": "Version 4.1.1 just got published.\nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv4.1.1\n\nf307aa0 Fix: ensure configs from a plugin are cached separately (fixes #8792) (#8798) (Teddy Katz)\n8b48ae8 Docs: Add doc on parser services (fixes #8390) (#8795) (Victor Hom)\n0d041e7 Fix: avoid crashing when using baseConfig with extends (fixes #8791) (#8797) (Teddy Katz)\n03213bb Chore: improve comment explanation of indent internal functions (#8800) (Teddy Katz)\nd2e88ed Chore: Fix misleading comment in ConfigCache.js (#8799) (Teddy Katz)\n\n\n\nCommits\nThe new version differs by 7 commits.\n\n1df6a01 4.1.1\n79a4482 Build: changelog update for 4.1.1\nf307aa0 Fix: ensure configs from a plugin are cached separately (fixes #8792) (#8798)\n8b48ae8 Docs: Add doc on parser services (fixes #8390) (#8795)\n0d041e7 Fix: avoid crashing when using baseConfig with extends (fixes #8791) (#8797)\n03213bb Chore: improve comment explanation of indent internal functions (#8800)\nd2e88ed Chore: Fix misleading comment in ConfigCache.js (#8799)\n\nSee the full diff\n\n. ## Version 0.10.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 6 commits.\n\n30d3453 Publish\n0e1b449 Merge pull request #312 from loganfsmyth/export-name-7-only\nd2e0e58 Be extra careful about the radix: parseInt(version, 10).\nbe71e98 Use parseInt to test Babel major version.\ncdc517b Only export plugin name for Babel>=7.x\n30cf881 Regenerate docs/bundle.js with latest implementation.\n\nSee the full diff\n\n. ## Version 0.11.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 3 commits.\n\n3860530 Publish\n5ced26d Fix casing error: NPM > npm (#227)\n9c4a0c8 remove transform-runtime (#310)\n\nSee the full diff\n\n. After pinning to 1.6.14 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 1.7.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 8 commits.\n\nf74c394 1.7.2\nbea9bcf Python 1.7.2\n4630cde Bump version numbers in README.md\ndc0be5f 1.7.1\n5eec9f4 Python 1.7.1\n390ebda Bump version numbers in README.md\nd70aa3a Revert \"Don't publish unnessessary files.\"\n18c1331 Revert \"README, LICENSE, CHANGELOG and package.json are always added\"\n\nSee the full diff\n\n. ## Version 1.7.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 8 commits.\n\nbc64dfb 1.7.3\nc707ca1 Python 1.7.3\n626331e Bump version numbers in README.md\n9cc8f53 Update Changelog for 1.7.3\nf573e28 Fix npmignore (#1251)\n35343ce Really fixed setup.py\nf7fae1f Updated python setup.py\n019968c Updated python setup.py\n\nSee the full diff\n\n. After pinning to 3.1.3 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 0.12.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits ahead by 2, behind by 1.\n\n9bfb879 Publish\n63623cd Publish\n\nSee the full diff\n\n. After pinning to 4.13.1 your tests are passing again. Downgrade this dependency \ud83d\udccc.. After pinning to 3.2.2 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. ## Version 3.3.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.3.2\n\u00a0\n\n\nCommits\nThe new version differs by 2 commits.\n\n8660715 v3.3.2\n0fe259e parse LF & comment correctly (#2653)\n\nSee the full diff\n\n. ## Version 3.3.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.3.3\n\u00a0\n\n\nCommits\nThe new version differs by 10 commits.\n\n8ca4915 v3.3.3\nb95e333 fix pure_getters on AST_Binary (#2681)\ne40a0ee improve assignment variations (#2671)\ncb62bd9 fix function inlining within loops (#2675)\nf30790b fix dead_code on return assignments (#2668)\n5205dbc retain recursive function names (#2667)\n3ff625d fix bugs on substituted AST_Defun (#2661)\n4832bc5 replace single-use recursive functions (#2659)\n7f342cb suppress inline within substituted AST_Scope (#2658)\n05e7d34 improve unused over duplicate variable names (#2656)\n\nSee the full diff\n\n. ## Version 3.3.4 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.3.4\n\u00a0\n\n\nCommits\nThe new version differs by 3 commits.\n\ne2ec270 v3.3.4\ned7a0a4 fix dead_code on escaped return assignment (#2693)\nd819559 minor clean-ups (#2686)\n\nSee the full diff\n\n. After pinning to 3.3.4 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. ## Version 16.1.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 4 commits.\n\n61c1994 16.1.0\n7260e36 Merge pull request #1804 from browserify/cli-args\nb233840 Move bare and node options into API.\n38141f1 Add MIT license text, fixes #1069\n\nSee the full diff\n\n. After pinning to 3.3.9 your tests are passing again. Downgrade this dependency \ud83d\udccc.. After pinning to 5.0.0 your tests are passing again. Downgrade this dependency \ud83d\udccc.. After pinning to 3.3.12 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 4.2.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits.\n\ne75c90b Fixed schemes with custom components not resolving correctly.\n\nSee the full diff\n\n. ## Version 2.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 3 commits.\n\n8a9c22e 2.0.1\n00a6fcc test: node 9 & 10, remove 7\n787ba53 fix: null and object comparison\n\nSee the full diff\n\n. ## Version 12.0.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 3 commits.\n\nadb310c chore(release): 12.0.2\nddc9331 fix: stop bundling istanbul-lib-instrument due to npm issue on Node 6 (#854)\nb4c325b fix: don't bundle istanbul-lib-instrument due to Node 6 issues\n\nSee the full diff\n\n. After pinning to 2.0.3 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 5.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv5.0.1\n\n196c102 Fix: valid-jsdoc should allow optional returns for async (fixes #10386) (#10480) (Mark Banner)\n4c823bd Docs: Fix max-lines-per-function correct code's max value (#10513) (Rhys Bower)\n\n\n\nCommits\nThe new version differs by 4 commits.\n\ncaeb223 5.0.1\n125dc34 Build: changelog update for 5.0.1\n196c102 Fix: valid-jsdoc should allow optional returns for async (fixes #10386) (#10480)\n4c823bd Docs: Fix max-lines-per-function correct code's max value (#10513)\n\nSee the full diff\n\n. After pinning to 3.4.3 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 3.4.5 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nv3.4.5\n\u00a0\n\n\nCommits\nThe new version differs by 3 commits.\n\n8d4b534 v3.4.5\n34a0ab6 improve fuzzing on Travis CI\nbcebacb fix corner cases in preserve_line (#3212)\n\nSee the full diff\n\n. ## Version 3.4.6 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nv3.4.6\n\u00a0\n\n\nCommits\nThe new version differs by 8 commits.\n\n2a5277b v3.4.6\nd47547d fix corner case in join_vars (#3224)\n304db15 fix corner case in ie8 & rename (#3223)\n7cf72b8 fix corner case in global_defs (#3218)\ncea685f fix corner case in ie8 (#3216)\n8d4b534 v3.4.5\n34a0ab6 improve fuzzing on Travis CI\nbcebacb fix corner cases in preserve_line (#3212)\n\nSee the full diff\n\n. After pinning to 3.5.1 your tests are passing again. Downgrade this dependency \ud83d\udccc.. After pinning to 1.8.1 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 1.8.4 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nCommits\nThe new version differs by 7 commits.\n\n732c27b Release: 1.8.4\ne19bc32 Merge remote-tracking branch 'origin/master' into release\n930c050 Bump version numbers for 1.8.4\nae5c953 Update Changelog\n0ef7b81 Fix for unformatted and content_unformatted\nab54c74 Fix merge error\n886f6d3 Fixed unindent chained methods under-indent\n\nSee the full diff\n\n. ## Version 1.8.5 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nCommits\nThe new version differs by 23 commits.\n\n4b0a862 Release: 1.8.5\nc6bb41d Merge remote-tracking branch 'origin/master' into release\n082ffb6 Bump version numbers for 1.8.5\n928d849 Merge pull request #1545 from MacKLess/declare\n837226e Merge pull request #1546 from MacKLess/comments\nbae5a5a Fixes indentation in second comment on webpage\n677b0dc Fix formatting for Typescript declare\n5681ad4 Merge pull request #1543 from bitwiseman/io-move\n6469217 Merge branch 'master' into io-move\n5aec460 Merge pull request #1540 from bitwiseman/uri\nee99c9b Merge branch 'master' into io-move\n7f36731 Merge pull request #1541 from bitwiseman/issue-1469\ne287d16 Fixed #1408\n2d48af8 Move all references to beautifier.io\naadec2b Preserve new line at start of handlebars contents\n\nThere are 23 commits in total.\nSee the full diff\n\n. ## Version 1.8.6 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nCommits\nThe new version differs by 26 commits.\n\naa2ed90 Merge remote-tracking branch 'origin/master' into release\n04fab5b Bump version numbers for 1.8.6\nc0cd2e6 Update Changelog\n4b0a862 Release: 1.8.5\nc6bb41d Merge remote-tracking branch 'origin/master' into release\n082ffb6 Bump version numbers for 1.8.5\n928d849 Merge pull request #1545 from MacKLess/declare\n837226e Merge pull request #1546 from MacKLess/comments\nbae5a5a Fixes indentation in second comment on webpage\n677b0dc Fix formatting for Typescript declare\n5681ad4 Merge pull request #1543 from bitwiseman/io-move\n6469217 Merge branch 'master' into io-move\n5aec460 Merge pull request #1540 from bitwiseman/uri\nee99c9b Merge branch 'master' into io-move\n7f36731 Merge pull request #1541 from bitwiseman/issue-1469\n\nThere are 26 commits in total.\nSee the full diff\n\n. After pinning to 3.1.1 your tests are passing again. Downgrade this dependency \ud83d\udccc.. - The devDependency karma was updated from 3.1.2 to 3.1.3.\nYour tests are passing again with this update. Explicitly upgrade to this version \ud83d\ude80\n\nRelease Notes for v3.1.3\nBug Fixes\n\nadd missing dep flatted (#3223) (655d4d2)\n\n\n\nCommits\nThe new version differs by 3 commits.\n\n169f3a9 chore: release v3.1.3\n6f351a5 chore: update contributors\n655d4d2 fix: add missing dep flatted (#3223)\n\nSee the full diff\n\n. - The devDependency karma-sauce-launcher was updated from 1.2.0 to 2.0.1.\nUpdate to this version instead \ud83d\ude80. - The devDependency karma-sauce-launcher was updated from 1.2.0 to 2.0.2.\nUpdate to this version instead \ud83d\ude80. After pinning to 2.9.7 your tests are passing again. Downgrade this dependency \ud83d\udccc.. - The devDependency jshint was updated from 2.10.0 to 2.10.1.\nYour tests are still failing with this version. Compare changes\n\nRelease Notes for JSHint 2.10.1\n2.10.1 (2019-02-05)\nBug Fixes\n\nDo not add cls method names to env. record (036f085)\n\n\n\nCommits\nThe new version differs by 2 commits.\n\n0e85de5 v2.10.1\n036f085 [[FIX]] Do not add cls method names to env. record\n\nSee the full diff\n\n. - The devDependency mocha was updated from 5.2.0 to 6.0.1.\nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes for v6.0.1\n6.0.1 / 2019-02-21\nThe obligatory round of post-major-release bugfixes.\n\ud83d\udc1b Fixes\nThese issues were regressions.\n\n#3754 - Mocha again finds test.js when run without arguments (@plroebuck)\n#3756 - Mocha again supports third-party interfaces via --ui (@boneskull)\n#3755 - Fix broken --watch (@boneskull)\n#3759 - Fix unwelcome deprecation notice when Mocha run against languages (CoffeeScript) with implicit return statements; returning a non-undefined value from a describe callback is no longer considered deprecated (@boneskull)\n\n\ud83d\udcd6 Documentation\n\n#3738 - Upgrade to @mocha/docdash@2 (@tendonstrength)\n#3751 - Use preferred names for example config files (@Szauka)\n\n\n\nCommits\nThe new version differs by 9 commits.\n\n6d3d6b4 Release v6.0.1\n2146ece update CHANGELOG.md for v6.0.1\n7c9221d backout deprecation of value returned from suite; closes #3744\nb7cfceb fix --watch not finding any files to execute; closes #3748\nb836d73 Upgrade docdash version - issue #3663\n7926f47 fix --ui issues, closes #3746\n00f2ed9 dev dep upgrades from \"npm audit\" and \"npm upgrade\"\n34afb1a fix(cli/run.js): Revert default glob to match Mocha-5.2\n6d5a0db Bring the example congfiguration file in line with the documentation. (#3751)\n\nSee the full diff\n\n. After pinning to 2.0.1 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ",
    "sreekumarp": "What can be the new file name ? data.js is fine ?\n. ",
    "cgocgo": "I would suppose that data.js is fine. TFS is refusing to accept file names that starts with a $ for some reason. In other words: It is the leading $ that is the problem.. ",
    "corte": "Any progress on this?\nI really need to add this files to TFS and the leading $ is a complication.. ",
    "kietresolve": "what i have done in the mean time is replace all the \"$\" to \"dollar\" in this module while waiting for the 6.0. ",
    "GunslingerBara": "I am having issues with getting Pending Changes in Team Explorer on Eclipse (on a Mac) due to this issue. My Pending Changes list is always empty because it detects the $ and silently fails. What can I do in the meantime to resolve this?. ",
    "platinumazure": "@epoberezkin I'm running into this myself, so I could submit a pull request over the weekend. Would you mind giving me a quick primer on why this is a breaking change?. Thanks @epoberezkin, and sorry I couldn't get to this in a timely fashion.\nAnything I can subscribe to for watching for the official 6.0.0 release? Thanks!. Found the npm issue: npm/npm#19877 (specifically this comment). Hope this helps!. ",
    "Kirtlander": "I'm not sure why this would be considered a breaking change; I was able to\npatch this locally by simply renaming the file and the reference, removing\nthe leading \"$\" symbol.\nIdeally, I would like to install the package unpatched in the event I need\nto refresh my node_modules in my project prior to checking them into TFS.\nOur corporate build servers don't have access to the Internet; therefore\ncannot run npm install on the fly, necessitating checking in all the\ndependencies with the project.\nOn Fri, Oct 20, 2017 at 4:33 PM Kevin Partington notifications@github.com\nwrote:\n\n@epoberezkin https://github.com/epoberezkin I'm running into this\nmyself, so I could submit a pull request over the weekend. Would you mind\ngiving me a quick primer on why this is a breaking change?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/epoberezkin/ajv/issues/526#issuecomment-338315387,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ASVYZta0U_nFuzsFbrW1_73seCbs0PwZks5suQOMgaJpZM4OFdWS\n.\n. \n",
    "kobyl": "nm - just noticed the $data: true option for the constructor...works now.. ",
    "sunshinecotejo": "Hi @epoberezkin,\nPlease see https://runkit.com/timbuktuprincess/59560318379844001275b189.\nThanks. ",
    "Flo12345": "Additionally, is there a way of directly importing json schemes from a server to the ajv instance?. The second file, which I want to reference to, is in the folder definitions. That is why I have the definitions in the $ref argument. Do I have to put the whole URL to the file in the$ref argument?\nSent from my HUAWEI MHA-L29 using FastHub. Thank you so far for your support!!\nI now changed  my code to use compileAsync with the exact same function loadSchema as provided by your example, but I get the following error\nUnhandled Promise rejection: request.json is not a function ; Zone: ProxyZone ; Task: Promise.then ; Value: TypeError: request.json is not a function\n    at Object.loadSchema (VM124 main.bundle.js:2741)\n    at loadMissingSchema (VM123 vendor.bundle.js:688)\n    at _compileAsync (VM123 vendor.bundle.js:677)\n    at VM123 vendor.bundle.js:653\n    at ZoneDelegate.webpackJsonp.../../../../zone.js/dist/zone.js.ZoneDelegate.invoke (VM115 polyfills.bundle.js:2794)\n    at ProxyZoneSpec.webpackJsonp.../../../../zone.js/dist/proxy.js.ProxyZoneSpec.onInvoke (VM123 vendor.bundle.js:69461)\n    at ZoneDelegate.webpackJsonp.../../../../zone.js/dist/zone.js.ZoneDelegate.invoke (VM115 polyfills.bundle.js:2793)\n    at Zone.webpackJsonp.../../../../zone.js/dist/zone.js.Zone.run (VM115 polyfills.bundle.js:2544)\n    at VM115 polyfills.bundle.js:3221\n    at ZoneDelegate.webpackJsonp.../../../../zone.js/dist/zone.js.ZoneDelegate.invokeTask (VM115 polyfills.bundle.js:2827) TypeError: request.json is not a function\n    at Object.loadSchema (http://localhost:9876/_karma_webpack_/main.bundle.js:2741:24)\n    at loadMissingSchema (http://localhost:9876/_karma_webpack_/vendor.bundle.js:688:64)\n    at _compileAsync (http://localhost:9876/_karma_webpack_/vendor.bundle.js:677:48)\n    at http://localhost:9876/_karma_webpack_/vendor.bundle.js:653:34\n    at ZoneDelegate.webpackJsonp.../../../../zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/polyfills.bundle.js:2794:26)\n    at ProxyZoneSpec.webpackJsonp.../../../../zone.js/dist/proxy.js.ProxyZoneSpec.onInvoke (http://localhost:9876/_karma_webpack_/vendor.bundle.js:69461:39)\n    at ZoneDelegate.webpackJsonp.../../../../zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:9876/_karma_webpack_/polyfills.bundle.js:2793:32)\n    at Zone.webpackJsonp.../../../../zone.js/dist/zone.js.Zone.run (http://localhost:9876/_karma_webpack_/polyfills.bundle.js:2544:43)\n    at http://localhost:9876/_karma_webpack_/polyfills.bundle.js:3221:57\n    at ZoneDelegate.webpackJsonp.../../../../zone.js/dist/zone.js.ZoneDelegate.invokeTask (http://localhost:9876/_karma_webpack_/polyfills.bundle.js:2827:31)\nDo you have any idea what that could be?. ",
    "ahlusar1989": "@epoberezkin That is a request body used in Insomnia. I will work on a runkit example. thanks!. @epoberezkin It is successfully compiled. It successfully throws errors if name or the blocks property is missing. However, the nested types are not validated.  I apologize as I did not include this as an additional note. . I should also add that I also thought of doing this: https://stackoverflow.com/questions/44133426/ajv-schema-validation-for-array-of-objects. @epoberezkin I finally understand what I need to do. You explain this is effectively here: https://github.com/epoberezkin/ajv/issues/160\nI understand now what I should be doing. Thank you again for your time.. ",
    "yjaspar": "Thank you very much for your response!\nI will look into that!. ",
    "crystalnet": "sorry, just found another issue just solving that issue.. ",
    "pgp44": "Hello,\nMany thanks for your time looking into this. \nI tried to modify the schema as below\njson {\n    \"$schema\": \"http://json-schema.org/draft-06/schema\",\n    \"type\" : \"array\",\n    \"items\" : [{\n        \"type\" : \"object\",\n        \"default\" : [{\"name\" : \"FruitCalories\", \"values\" : [{\"x\":\"Apple\",\"y\":49},{\"x\":\"Banana\",\"y\":95},{\"x\":\"Pear\",\"y\":37},{\"x\":\"Orange\",\"y\":37}]}],\n        \"required\" : [\"name\",\"values\"],\n        \"properties\" : {\n            \"name\": {\n                \"type\": \"string\"\n            },\n            \"values\": {\n                \"type\": \"array\",\n                \"minLength\" : 1,\n                \"items\": {\n                    \"type\": \"object\",\n                    \"required\" : [\"x\",\"y\"],\n                    \"properties\": {\n                        \"x\": {\n                            \"$id\": \"x\",\n                            \"type\" : [\"string\",\"number\"]\n                        },\n                        \"y\": {\n                            \"$id\": \"y\",\n                            \"type\": \"number\"\n                        }\n                    }\n                }\n            }\n        }\n    }]\n}\nIf I now validate [], the default is indeed returned (as an array in the array), but there is also an error I do not understand\nError:[{\"keyword\":\"type\",\"dataPath\":\"[0]\",\"schemaPath\":\"#/items/0/type\",\"params\":{\"type\":\"object\"},\"message\":\"should be object\"}]\nIf I try to validate {}, I get\nError:[{\"keyword\":\"type\",\"dataPath\":\"\",\"schemaPath\":\"#/type\",\"params\":{\"type\":\"array\"},\"message\":\"should be array\"}]\nAll tips or guidance more than appreciated!\nTx\nPeter. Nm, the default should not be an array.\nWorks well now!\nPeter. Hello\nComing back to my original question and how until now I could work around it (use an object for the default value of an array). \nIs there not a way to specify a default array for something that is typed as an array? Seems it would make sense, no?\nTx\nPeter. Thanks for you quick reply\nIf I try that defaults are not used it seems. When I try \nlet ajv = new Ajv({allErrors: true, useDefaults: true}).addMetaSchema(DRAFT_06_JSON_SCHEMA).addSchema(DefinitionsSchema);\nlet validate = ajv.compile(schema);\nvalidate([]);\n\nOn the schema below, the array stays empty.\nAny tips?\nTx!\nPeter\n{\n     \"$schema\": \"http://json-schema.org/draft-06/schema\",\n     \"$id\": \"http://www.datylon.com/stackedbarchartdata.json\",\n     \"title\": \"Data schema\",\n     \"description\" : \"Datylon horizontal barchart data properties\",\n     \"type\" : \"array\",\n     \"minLength\" : 1,\n     \"default\" : [\n         {\"name\" : \"Apples\", \"visible\" : true, \"values\" : [\n             {\"group\": \"Group 1\", \"value\": 2.1},\n             {\"group\": \"Group 2\", \"value\": 3.2},\n             {\"group\": \"Group 3\", \"value\": 1.9},\n             {\"group\": \"Group 4\", \"value\": 2.9}\n           ]},\n         {\"name\" : \"Pears\", \"visible\" : true, \"values\" : [\n             {\"group\": \"Group 1\", \"value\": 4.9},\n             {\"group\": \"Group 2\", \"value\": 9.5},\n             {\"group\": \"Group 3\", \"value\": 3.7},\n             {\"group\": \"Group 4\", \"value\": 3.7}]},\n         {\"name\" : \"Bananas\", \"visible\" : true, \"values\" : [\n             {\"group\": \"Group 1\", \"value\": 0.8},\n             {\"group\": \"Group 2\", \"value\": 1.5},\n             {\"group\": \"Group 3\", \"value\":1.3},\n             {\"group\": \"Group 4\", \"value\":1.1}]}\n       ],\n     \"items\" : [{\n         \"type\" : \"object\",\n         \"required\" : [\"name\",\"values\"],\n         \"properties\" : {\n             \"name\": {\n                 \"$id\": \"name\",\n                 \"title\" : \"Name\",\n                 \"description\" : \"Data series name\",\n                 \"type\": \"string\"\n             },\n             \"visible\": {\n                 \"$id\": \"visible\",\n                 \"title\" : \"Visbile\",\n                 \"description\" : \"Visbility of data series on bar chart\",\n                 \"type\": \"boolean\",\n                 \"default\": true\n             },\n             \"values\": {\n                 \"$id\": \"values\",\n                 \"title\" : \"Values\",\n                 \"description\" : \"Data series values\",\n                 \"type\": \"array\",\n                 \"minLength\" : 1,\n                 \"items\": {\n                     \"type\": \"object\",\n                     \"required\" : [\"group\",\"value\"],\n                     \"properties\": {\n                         \"group\": {\n                             \"$id\": \"group\",\n                             \"type\" : [\"string\",\"number\"]\n                         },\n                         \"value\": {\n                             \"$id\": \"value\",\n                             \"type\": \"number\"\n                         },\n                         \"color\": {\n                             \"$id\": \"color\",\n                             \"title\" : \"Bar color\",\n                             \"description\" : \"Bar color\",\n                             \"type\": \"string\"\n                         }\n                     }\n                 }\n             }\n         }\n     }]\n . ",
    "HenrikGr": "Is this working with draft-07 as well?\nI'm struggling to with the same, setting default values to an array of objects.. I think I got it to work and have never used runkit. Need to test that as well.\nHowever, this is my schema, would appreciate your feedback.\n```\n{\n    \"$id\": \"http://hgc.se/users.json\",\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"definitions\": {},\n    \"type\": \"array\",\n    \"items\": [{\n        \"type\": \"object\",\n        \"definitions\": {},\n        \"default\": { \"username\": \"\", \"scope\": \"\", \"admin\": false, \"active\": false },\n        \"required\": [\"username\", \"scope\", \"admin\", \"active\"],\n        \"additionalProperties\": false,\n        \"properties\": {\n            \"_id\": {\n            \"$id\": \"/properties/_id\",\n            \"title\": \"ObjectId of user\",\n            \"type\": \"string\",\n            \"readOnly\": true\n        },\n        \"username\": {\n            \"$id\": \"/properties/username\",\n            \"title\": \"The Username Schema\",\n            \"type\": \"string\"\n        },\n        \"scope\": {\n            \"$id\": \"/properties/scope\",\n            \"title\": \"The Scope Schema\",\n            \"type\": \"string\"\n        },\n        \"admin\": {\n            \"$id\": \"/properties/admin\",\n            \"title\": \"The Admin Schema\",\n            \"type\": \"boolean\"\n        },\n        \"active\": {\n            \"$id\": \"/properties/active\",\n            \"title\": \"The Active Schema\",\n            \"type\": \"boolean\"\n        }\n    }\n}]}\n```\n. You are right, the intention is to validate any object in the array?\nShould it be \n```\n    \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n        ...\n        }\n    }\n```. I just thought about this as well and wonder if somebody could explain for me the difference of the required property and validation keywords.\nThe reason why I ask is that I'm trying to build a solution that generating an uiModel for input fields of different kind and started to use the required property in the schema to reflect the uiModel and the html inputs but I now think I need to check if a specific field has a validation keyword.\nHow do I check is a specific field has a validation keyword?. I started to use ajv last weekend in my create-react-app projects and stumbled on this as well. create-react-app can not minify uri-js.\nI'm using version 6.5 of ajv.\nWould be nice if this could be solved.. ",
    "joliejuke-orga": "Yes I understand that JSON Schema is language agnostic and should only know about JSON.\nYes I admit that you need to use the class name to do that.\nBut I would like to know if it's possible to accept a class argument during the instanciation of ajv instead of directly mutate the module (ajv-keyword) data?\n```\nconst MyClass = require('./MyClass.js');\nconst Ajv = require('ajv');\nconst AjvKeyword = require('ajv-keywords');\nlet ajv = new Ajv();\nlet ajvKeyword = new AjvKeyword(ajv, {\n  classConstructor: [{\n    'myClass': MyClass\n  }]\n});\najv.validate({instanceof: 'myClass', new MyClass());\n```\nThen only an ajvKeyword instance has the class constructor name. Therefore we can pass dynamic class constructor to an instance of AJV, and we don't need to initialize all the class constructor.\nThx for your fast answer btw :)\n. ",
    "sirugh": "Using ajv for schema compilation in the browser is proving difficult because of the use of the node url module. We're currently wrestling with rollup/webpack trying to figure out a way around it but I personally would love to see this issue/PR handled. This library's tag-line is \"The fastest JSON Schema validator for Node.js and browser\" but it can't run natively in the browser, at least not when used as a dependency of our own bundle.\n. You're right. I'm just at wits end here trying to figure it out. I'll try to come up with a reasonably simple use case that displays the error I'm talking about.. ",
    "gerardob": "done!! I make npm cache clean --force and solved!! thanks a lot!. ",
    "henriklundgren": "Sorry for the noise, I found why https://github.com/epoberezkin/ajv/releases/tag/5.0.0. @krenor By adding the version 4 meta schema. See the first paragraph on the README.. ",
    "krenor": "Could you please share how you managed to get it working?. @blakeembrey What exactly do you mean?\n\nwith requiring promises\n\nI'm using TS most of the time compiling down to ES5 without any adjustments necessary to use Promises.. ",
    "pedalpete": "@bcmyers did adding json-loader resolve this issue for you? Or did you find another solution? According to the creators of json-loader, webpack3 includes json natively, so specifying the json-loader is not necessary.\nHowever, in our webpack, I have tried with \n{\n        test: /\\.json$/,\n        use: 'json-loader'\n      },. ",
    "danny-andrews": "Thanks for the quick reply! That makes sense. Cheers!. ",
    "GeoffThorpeFT": "So, would your advice be to check the type of the params field before using its contents.\nSome context - we are using ajv to validate for required and pattern fields and wish to return json output that is an array of errors each of which identifies the field and the error.  I was aiming to use params to obtain the name of the field being validated.. ",
    "cristianstaicu": "```js\nfunction genstr(len, chr) {\n    var result = \"\";\n    for (i=0; i<=len; i++) {\n        result = result + chr;\n    }\n    return result;\n}\nvar Ajv = require('ajv');\nvar ajv = new Ajv;\nvar validate = ajv.compile({\n    \"type\": \"object\",\n    \"properties\": {\n        \"foo\": { \"type\": 'string',\n            \"oneOf\": [\n                {\"pattern\": genstr(12000, \"if(\") +\"x\" +  genstr(12000, \")\")  }\n            ]}\n    }\n});\n```\nThis code blocks the main Node.js event loop on my PC for 5 seconds. But if indeed the schema is never under the user's control, I agree this is not a problem. My only concern is that I am not sure if the 850 modules that depend on this module are aware of this assumption.. ",
    "StarpTech": "Hi @epoberezkin thanks for the feedback the reason was a nasty typo. \nBtw: thanks for the great lib!. ",
    "VladimirShestakov": "Nice idea, but I applied a closure. Thanks!. ",
    "yume-chan": "@epoberezkin as you declared https://github.com/epoberezkin/ajv/blob/28386786fd9f6229652829a673745a1563e097c7/lib/ajv.d.ts#L1-L7\nYou are declaring ValidationError field as an instance of the ValidationError class.\nYou can even do \nts\nimport ajv from 'ajv';\nconsole.log(ajv.ValidationError.ajv); // the docs say it's `true`, but it's actually `undefined`.\n\nThe correct way should be\nts\nValidationError: typeof ValidationError;\nThis allows you to do new ajv.ValidationError.\n\nBut, it still doesn't allow you to declare a variable as ajv.ValidationError type, because the type itself is now exported.\nts\nconst error: ajv.ValidationError; // nope\nTo resolve this, I found this strange way:\n``` ts\ndeclare namespace Errors {\n  class ValidationError extends Error { / ... / }\nclass MissingRefError extends Error { / ... / }\n}\ndeclare var ajv: {\n  (options?: ajv.Options): ajv.Ajv;\n  new(options?: ajv.Options): ajv.Ajv;\n  ValidationError: typeof Errors.ValidationError;\n  MissingRefError: typeof Errors.MissingRefError;\n  $dataMetaSchema: object;\n}\ndeclare namespace ajv {\n  type ValidationError = Errors.ValidationError;\ntype MissingRefError = Errors.MissingRefError;\n/ ... /\n}\n```\n\nNow you can write:\n``` ts\nimport ajv from 'ajv';\nconst validationError: ajv.ValidationError = new ajv.ValidationError([]);\nconst missingRefError: ajv.MissingRefError = new ajv.MissingRefError(\"\", \"\", \"\");\n```. @epoberezkin \n\nPromise result type is different from data type\n\nThe README reads:\n\nValidation result will be a promise that resolves with validated data or rejects with an exception Ajv.ValidationError that contains the array of validation errors in errors property.\n\nDoesn't it mean the Promise result will be the input data itself?\n\nThe FAQ reads:\n\nAjv also supports asynchronous validation (with custom asynchronous formats and keywords) that returns a promise that either resolves to true or rejects with an error.\n\nIs it wrong?\n\n\nFunction should be able to validate any data type, it's not limited to a specific data type\n\nWriting validate<T>(data: T): Promise<T> doesn't require the user to specify T, TypeScript will infer T from the input data. See my tests:\nhttps://github.com/epoberezkin/ajv/blob/95edb4958dd3a93b5dd2179aa71e517a386c7d12/spec/typescript/index.ts#L18-L32. ",
    "hansl": "It's been 15 months since that issue was open, with a direct ping December 2016. I don't think he's going to answer.. @epoberezkin \n\nIn any case, I don't think that forking a packing and sticking a license file on it makes it any more licensed than downloading the movie and writing it onto a disk with some license label.\n\nI am not a lawyer, so I cannot judge. As far as I understand it, it's okay to build a new library under a license that gives attribution/credit to the original author, such as Apache 2.0, or MIT. We are not stealing property, and it's not just copying the code over.\n\nThere is no need to include JSON indeed, ajv uses global JSON anyway, it also makes a browser bundle 3k smaller. @substack, is there any way there could be json-stable-stringify with license and without JSON?\n\nThis pull request: https://github.com/substack/json-stable-stringify/pull/12 along with 3 other PRs have been unanswered for more than a year. I don't believe @substack is active on these projects (or more likely doesn't care), and his github profile shows very few activities in the last 2 months.\nThe pull request above also has a comment from you in November 2016 approving the PR's usefulness.\nAt this point we're just kicking the can down the road while the licensing limbo is still there.\n. Just to add another note: I don't think you need json-stable-stringify in your library. It seems you're only using it to cache schemas so to reuse them if they're the same (I could be mistaken). This could very well be done using an option that, if missing, disable the caching.\nI'm curious; what's your cache hit rate with this feature? You're paying by basically keeping a stringified version of every schema and subschemas in memory. That's not cheap either.. > That's out of scope of this issue, but it's a bit more complex.\nI would say if you're looking to either replace or remove, it's (at least partially) in scope.\nWould you accept a PR to move to another stable stringify?. My original issue has been resolved; it's up to you if you want to go that route.. I though about those two solutions. One imply that the schema author is rigorous, which might not be the case. \nThe other is my fallback idea.  I\u2019d prefer undefined to null personally, as some values could actually be null. \nAdditional idea: it could be useful for AJV to have some sort of addPreprocessor API. . Closing this as the discussion should be in the issue #626 and this PR should be redone (it's too old for current rebase on master).. ",
    "realityking": "just a quick note, json-stable-stringify-without-jsonify is perfectly alright license wise. json-stable-stringify does include the MIT license, it's only jsonify that's missing a license.. ",
    "ahmadnassri": "@epoberezkin https://github.com/request/request/commit/baf9c1f2a6e3b0a78f017caa0e64259a5ecf40b5. ",
    "lagouyn": "Thank you for adding that to the docs.. ",
    "smeijer": "I was looking for this some time ago myself. But it turned out; AJV is doing this automatically for you when calling compile:\n\nreadme.md\nUnless the option validateSchema is false, the schema will be validated against meta-schema and if schema is invalid the error will be thrown. See options.\n. \n",
    "E314c": "I also understand if this might be better as a plugin under a separate repo, but if so, can I have some ideas on how one might do it?. Sorry, seems to have been a RTFM issue, you can implement the filtering I required by adding a keyword, using something like the following:\n```javascript\nconst filterLevel = 1;\najv.addKeyword('accLevel',{\n    modifying: true,\n    compile: function (sch, parentSchema) {\n        if(sch <= filterLevel){\n            return data => true;\n        } else {\n            return (data,path,obj,propName)=>{\n                //The data removal function\n                delete obj[propName];\n                return true;\n            }\n        }\n}\n\n});\n```\nI'll leave this pull request open as I still think it'd be nice to have a removeFailing option, which would allow a user to attempt to create a valid object by removing invalid, but non-required fields.. ",
    "SwapnilChidrawar": "Can anybody tell me how do i import draft-04.json file for angular 6 version ?. ",
    "Techniv": "Thanks for considering my request.\nrefVal should not be an Array<ValidateFunction> instead of Array<any> ?\nb6d35aa. ",
    "fboutin-pmc": "Why is that?. On Ajv README file,\n\nAjv version 6.0.0 that supports draft-07 is released.\n\nBut IRIs are part of the spec, http://json-schema.org/latest/json-schema-validation.html#rfc.section.7.3.5\nI mean, if it makes sense to implement IRIs as a plugin like you said, let's go. Until then, you cannot claim Ajv fully implement draft-07 because it is NOT.. > Implementations MAY support the \"format\" keyword as a validation assertion. Should they choose to do so:\n\n-they SHOULD implement validation for attributes defined below;\n\nhttp://json-schema.org/latest/json-schema-validation.html#rfc.section.7.2\nSo because Ajv implements validation for attributes and that 7.3.5 defines an IRI, then you SHOULD implement it.. @epoberezkin I'm not trying to prove you wrong. I'm only trying to understand what's your thinking on the issue.\nOff course, having something that is not feature-complete is better than nothing, we all agree on that. TBH you deserve to know that I think Ajv is a GREAT component, it works really well, is really fast and easy to use. IRI lack of support is literally the first limitation I encountered and sure I should contribute back to fix it.\nI don't want you to take my questions and reasoning personally.. Is there any way we could keep this issue (or a new one) open as a feature request - be it a plugin or a native support?. ",
    "sebdeckers": "What I came up with for idn-hostname in an hour of research. HTH. YMMV.\nFormat plugin:\n```js\nconst regex = require('idn-allowed-code-points-regex')\nmodule.exports.idnHostnameFormat =\nfunction idnHostnameFormat (input) {\n  if (typeof input !== 'string') return false\n  if (input.length > 253) return false\n  for (const part of input.split('.')) {\n    if (part.length > 63) return false\n    if (!regex.test(part)) return false\n  }\n  return true\n}\n```\nUnit tests:\n```js\nconst test = require('blue-tape')\nconst { domainToASCII: toASCII } = require('url')\nconst { idnHostnameFormat } = require('../formats/idnHostnameFormat')\ntest('valid simple hostname', async (t) => {\n  t.true(idnHostnameFormat('example.net'))\n})\n// https://www.verisign.com/en_US/channel-resources/domain-registry-products/idn/idn-policy/registration-rules/index.xhtml\n// https://unicode.org/reports/tr46/\ntest('valid IDN hostname', async (t) => {\n  for (const given of [\n    'fa\u00df.de',\n    '\u03b2\u03cc\u03bb\u03bf\u03c2.com',\n    '\u0dc1\u0dca\u200d\u0dbb\u0dd3.com',\n    '\u0646\u0627\u0645\u0647\u200c\u0627\u06cc.com',\n    '\uc2a4\ud0c0\ubc85\uc2a4\ucf54\ub9ac\uc544.com'\n  ]) {\n    t.true(idnHostnameFormat(given))\n  }\n})\n// https://tools.ietf.org/html/rfc5892\ntest('invalid IDN hostname', async (t) => {\n  const given = '\ud83d\udca9.example.net'\n  t.false(idnHostnameFormat(given))\n})\ntest('valid punycode hostname', async (t) => {\n  const given = ${toASCII('\ud83d\udca9')}.example.net\n  t.true(idnHostnameFormat(given))\n})\ntest('hostname must be a string', async (t) => {\n  for (const given of [123, null, true, {}, [], undefined]) {\n    t.false(idnHostnameFormat(given))\n  }\n})\ntest('hostname label length exceeds 63', async (t) => {\n  const given = 'w'.repeat(64) + '.example.net'\n  t.false(idnHostnameFormat(given))\n})\ntest('hostname length exceeds 253', async (t) => {\n  const given = '.example.net'.repeat(100).substring(1)\n  t.false(idnHostnameFormat(given))\n})\n```. ",
    "avanes": "Simple workaround for idn-email:\nconst ajv = new Ajv().addFormat('idn-email', /@/). ",
    "joshuaavalon": "This package is using uri-js. uri-js supports IRI. Why don't we delegate validation to it?\nOr this regex. ",
    "jcampanello": "Evgeny, really really sorry to have wasted your time. This certainly is candidate for stupid question of the month :-(\nIt turns out i was using another package (alpaca) to generate forms, that was actually receiving the schema and modifying it behind curtains so the schema was altered by the time i used it with AJV, hence the discrepancies.\nAgain, sorry for wasting your time and thanks for your rapid response to this non-issue!. ",
    "gj": "Most welcome @epoberezkin. Thanks for the awesome FOSS!. ",
    "Opticsponge": "thanx for feedback, will let you know how it turns out. one thing to think about when setting \"default\": null is that swagger doesn't support this and open api 3.0 requires you use new type boolean \"nullable\". ",
    "codyx": "Long story short: delete node_modules folder and package-lock.json file.\nDuplicate of https://github.com/npm/npm/issues/17858 and https://github.com/npm/npm/issues/18042. ",
    "mrpatel15": "same issues \n2018-02-16T03_32_06_898Z-debug.log\n. ",
    "prmichaelsen": "Also be sure that you are simply not running a build watch. That was my issue.. ",
    "goldytech": "Can you please elaborate, when I define same json as string constant it works, the issue is with reading schema from file.. ",
    "andrei-vaganov": "\u0421\u043f\u0430\u0441\u0438\u0431\u043e!\n\u0411\u044b\u043b \u043d\u0435\u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u0435\u043d.. . ",
    "snoopy83101": "why? why cannot?. @epoberezkin \nI need time-type data in my JSON because I want to create a time index in mongodb instead of a string. What do I do?\n. ",
    "mattbrunetti": "@mtalonen Where is that code?. ",
    "mtalonen": "I'm referencing to uniqueItems.jst file. Here's inefficient part:\nvar {{=$valid}} = true;\n  if ({{=$data}}.length > 1) {\n    var i = {{=$data}}.length, j;\n    outer:\n    for (;i--;) {\n      for (j = i; j--;) {\n        if (equal({{=$data}}[i], {{=$data}}[j])) {\n          {{=$valid}} = false;\n          break outer;\n        }\n      }\n    }\n  }\nIf we used sort before check, we could compare two consecutive values (just a draft):\nvar {{=$valid}} = true;\n  if ({{=$data}}.length > 1) {\n    var foo = {{=$data}}.sort();\n    var j;\n    outer:\n    for (var i=0;i<foo.length-1;i++) {\n        if (equal(foo[i], foo[i+1])) {\n          {{=$valid}} = false;\n          break outer;\n        }\n    }\n  }\n. ",
    "nick121212": "i tried to edit 'ref.js' in line 27. it worked well.\njavascript\n if (it.isRoot) {\n      $refVal.$async = it.async;\n    } else {\n      $refVal.$async = it.root.schema.$async === true;\n    }. # ref.jst \njst\n{{ var $async, $refCode; }}\n{{? $schema == '#' || $schema == '#/' }}\n  {{\n    if (it.isRoot) {\n      $async = it.async;\n      $refCode = 'validate';\n    } else {\n      $async = it.root.schema.$async === true;\n      $refCode = 'root.refVal[0]';\n    }\n  }}\n{{??}}\nthats why it worked.\n. Looking forward to the next version.. thanks.. ",
    "filipesilva": "Heya, I was looking at https://github.com/epoberezkin/ajv#merge-and-patch-keywords but according to https://github.com/epoberezkin/ajv-merge-patch, it needs v5: true.\nIs merge and patch not supported in Ajv v6+?. Oh cool, thanks for the clarification!. BTW the readme for ajv-merge-patch still mentions v5 is needed, I put up a PR for that https://github.com/epoberezkin/ajv-merge-patch/pull/22.. Heya, thanks for the quick reply!\n\nThe problem here is that the defaults in data should be cloned and there is no generic clone mechanism in JS (unlike schema that should be serialisable, data can be any JS structure).\n\nI'm not sure I follow this bit... Won't $data always point at a JSON Schema structure? Whatever it points at should be cloneable/serializable, no?. Oh I get it now. Thank you for the explanation. \nGoing through the list of supported keywords for $ref there really isn't anything that can be used as an example. All of those operate over the schema entities, not the data entities.\nI guess the options are:\n- use the reference and thus lose consistencies with defaults always being values\n- try to clone and run into odd corner cases\nI had a read through https://tools.ietf.org/html/rfc6901#section-4 and https://tools.ietf.org/html/draft-luff-relative-json-pointer-00#section-4, and these only seem to establish how the reference should be evaluated and not what it should evaluate to.\nMy instinct is to not try to clone since I can't imagine it always being correct. What do you think is the most appropriate approach?. Having the option between useDefaults: true do a simple clone and useDefaults: \"shared\" use the reference sounds like it would covers all bases. If you give me some pointers regarding where to look at to implement this feature I'll be happy to work on it.\nI also wanted to ask if the relative JSON pointers would work across $refs (subschemas). E.g. in my original example, would \"default\": { \"$data\": \"1/defaultNumber\" } work? \nI understand the current keywords supported in https://github.com/epoberezkin/ajv#data-reference just do not support this but thought it was worth it to ask since default seems to be a different case.. This seems similar to defaults also not working with merge (https://runkit.com/filipesilva/5a6b98558f3ceb0012877ec2), but that is reported in https://github.com/epoberezkin/ajv-merge-patch/issues/16 and is marked as a future enhancement.\n. I was trying $ref within the same document and it seems that doesn't fill in defaults as well: https://runkit.com/filipesilva/5a6b9bbd42f34400128620eb. Aw jeez, I didn't see that one. Thanks for directing me to the right issue!. ",
    "meirotstein": "HI @epoberezkin \nI like your suggestion - sounds better than just a simple boolean option.\nAs for the current logging - you can find a call for console.warn() here, here and here. Thanks!\nWhen do you expect it to be merged?. It seems to me that it is more safe to use the Logger class because:\n1. it is more testable - I was able to write a standalone tests for all the logger scenarios (logger.spec.js), if I move the logic into Ajv ctor it will be much harder as I will have to find specific scenarios with Ajv that leads to every console call (log, warn, error) - and anyhow it might change in the future\n2. partial custom logger implementation can leads to an error - this code checks for the log function existence before calling it. 1. I see what you mean - still we have to keep in mind that the test is a bit implied as we test a scenario that we knows that currently happen to write to the log - the test does not control it so it is less \"unit\" then we would want.\n\na real life scenario: my package it used by a site that in a certain page the global console object is overridden by oracle portal (they use their own implementation of console, apparently..), the oracle version does implement the warn method - nor I or the site owners were aware of this and it ends up with an exception from Ajv that prevents some capabilities to work.\nIMHO it is better to secure our code from such scenarios - if our code throws an exception due to bad input it is still our responsibility (unless it is part of the expected documented scenarios, of course..).\n\nAnyhow - sorry for my insistence - at the end it is your call :)  if I still wasn't able to convince I will change the implementation as you suggested.\n. this would not help with the scenario I described as at the initialization phase it was still the global console object, that was later changed by the oracle portal page.\nMy way to deal with it will be to disable the log once this change will be rolled out.. correct :)\nanyhow, it still throws an exception.. think of a package that uses a package that uses Ajv in an oracle page - quite a mess.... Let's agree to disagree then :)\nI will push a change soon.. ",
    "kmahalingpur": "Thanks @epoberezkin  i figured it out. is it possible to get value of other field in schema for validating current field ?. @epoberezkin if i try to print parent schema.. i am able to see the custom keyword data or same field data.\nfor example \nschema = {\n    \"$async\": true,\n    \"properties\": {\n        \"title\": {\n            \"async\": true,\n            \"type\": \"string\",\n            \"dropdown_check\": { \"prop\": \"SAL\" }\n        },\n        \"fname\": {\n            \"async\": true,\n            \"type\": \"string\",\n            \"conditional_check\":{\"title_data\":\"need to pass title data\"}\n        }\n}\nIs it possible ???\nFor parent schema in custome keyword i am able to print fname data only not title. Is that the correct way.. ",
    "pithu": "I am fine with the current naming prefix add* and remove*, because imo it's more explicit and better readable.. cool, thx for merging. You are right, i forgot the this at that place. Ok thx for your feedback, i will have a look and try to add something reasonable to the API doc.. ",
    "isTravis": "Forgive me if I've misunderstood the implementation of this, but it seems that addSchema is not chainable if an array of schemas is submitted.\nI made a quick pull-request: #640.. ",
    "colwynmyself": "Btw I am taking a look at this. I haven't been through the code base before so I'm working my way through. Hopefully I'll have some results in a day or two! I know that tlds likely won't be very long in practice, but in theory this could be abused by someone submitting data if they knew this was doing url validation behind the scenes. Or just if someone decided to test long tlds (like I did).. ",
    "fpenim": "@epoberezkin thank you very much! It's working perfectly now that I know how to use it \ud83d\udc4c . Thanks \ud83d\udc4d . Thanks for the feedback, I'll debug further and submit to runkit.. I have submitted my code on https://runkit.com/fpenim/json-schema-validator/branches/master\nI simplified it by removing the API call.\nEvery time the isChildTermOf is evaluated it always returns \nreject(new Ajv.ValidationError(errors));\nIt should always fail when the keyword is present in the schema, but it's not failing \ud83e\udd14 \nAny help is greatly appreciated!\n  . All working now, thanks!. ",
    "markchart": "I am ashamed.  You are correct (of course), \"it already works.\"  That is, it works when I do not make a stupid syntax error!  Thank you!. Thanks for explaining.  I agree that \"asynchronous validation\"\nis unlikely to be standardized, but I suspect that is because\nmost JSON Schema users would find the term meaningless.\nIn ajv the \"$async\" schema keyword is the only one that has\nnothing to do with the data in the JSON document to be\nvalidated.  That data is never more or less \"asynchronous.\"\nAll of the other keywords, including custom keywords (or\nformats) that I define, help test or affect that JSON data.\n(Well, the only one I've run into so far.)\nI want to do I/O in the context of validation with a custom\nkeyword (every dev comes to this sooner or later).  Thanks to\nthe !^?*% excellent design of the Javascript platform, I must\ngo async.  But that has nothing to do with the structure of\nthe data I want to specify and validate.  For me, adding a\ncustom keyword means I must run ajv in async mode just\nso my custom keyword will work-- I certainly don't want to\nturn asyncness on and off in sub-schemas when I use $ref\nto make my overall schema easier to build and maintain--\nI use my custom keyword(s) throughout.\nI grok that \"asyncness\" is a serious implementation/run-time\nconsideration for ajv, and ajv reads schemas so there is a\nstrong case for controlling ajv's behaviour with special\nkeywords in those schemas.  Then it is convenient to refer to\n\"asynchronous schemas\" when talking about ajv.  But with\nrespect to the data, I fear that term is not useful.\nJust for today I apply this code after I read a schema file:\njavascript\n// read in schema from external storage, then...\nschema[\"$async\"] = true;\nif (schema.hasOwnProperty(\"definitions\")) {\n    var defs = Object.keys(schema.definitions);\n    for (var x = 0; x < defs.length; x++) {\n        schema.definitions[defs[x]][\"$async\"] = true;\n    }\n}\nThat works for the moment, but obviously if I begin\nto allow more general use of $ref my $async-schema-\npatching code will become ugly.\nI do not much like this approach, but my other choice\nis to tell people writing extensions to my product to\ndecorate all of their schemas with \"$async\": true just\nso the validator won't choke.\n(There's also the \"come from\" problem-- since $ref\ncould refer to even a tiny portion of schema, it seems\nlike every property in every schema given to ajv\nmight need a prophylactic \"$async\": true in case it\nends up in a $ref chain.). The more I think about this, the more problematic \"$async\" seems.\nSuppose I define a schema like:\njson\n{\n    \"$async\": true,\n    \"properties\": {\n        \"p\": {\n            \"properties\": { \"blah\": \"blah\" },\n            \"additionalProperties\": { \"$ref\": \"#/definitions/a\" }\n        },\n        \"q\": {\n            \"properties\": { \"yada\": \"yada\" },\n            \"additionalProperties\": { \"$ref\": \"#/definitions/b\" }\n        }\n    },\n    \"definitions\": {\n        \"a\": { \"$async\": true, \"properties\": { \"foo\": { \"custom_keyword\": \"bar\" } } },\n        \"b\": { \"$async\": true, \"properties\": { \"whatever\": \"whatever\" } }\n    }\n}\nEverything works until someone tries to add another\nproperty extending the schema of one defined earlier\nby reference:\njson\n{\n    \"$async\": true,\n    \"properties\": {\n        \"p\": {\n            \"properties\": { \"blah\": \"blah\" },\n            \"additionalProperties\": { \"$ref\": \"#/definitions/a\" }\n        },\n        \"q\": {\n            \"properties\": { \"yada\": \"yada\" },\n            \"additionalProperties\": { \"$ref\": \"#/definitions/b\" }\n        },\n        \"x\": {\n            \"properties\": { \"new\": \"xxx\" },\n            \"if\": true,\n            \"then\": { \"$ref\": \"#/properties/p\" }\n        }\n    },\n    \"definitions\": {\n        \"a\": { \"$async\": true, \"properties\": { \"foo\": { \"custom_keyword\": \"bar\" } } },\n        \"b\": { \"$async\": true, \"properties\": { \"whatever\": \"whatever\" } }\n    }\n}\nBoom!\n```code\n...\\ajv\\lib\\dotjs\\validate.js:94\n    if ($async && !it.async) throw new Error('async schema in sync schema');\nError: async schema in sync schema\n```\n(If my example is slightly incorrect I apologize, I am pretty\nsure the basic problem exists.)\nThe only way to avert the crash is to put \"$async\": true into\nnearly every property, because someone might $ref to it in\nthe future.\nThat seems a bit awkward to me, considering that \"$async\"\nisn't doing any work with respect to the data, only telling\najv not to blow up mysteriously.. Actually, I just caught it-- and then discovered that you fixed it.  Thanks!. ",
    "NassiHarel": "So how can I use custom format instead?. ",
    "vjpr": "@epoberezkin I got the error while using https://github.com/Vincit/objection.js. I will look into it when I have some time.. ",
    "tony-kerz": "gotcha.\nwould you consider setting a boolean internally and making it available via something like validator.removed to avoid the overhead of cloning/comparing the data?. ",
    "btjones": "+1 on this, would be nice to have an easy way to do this with the overhead of doing it outside of ajv.. ",
    "chen6516": "Yes, Do you have any good Suggestions?. ",
    "bmfair": "Thanks for the quick reply and apologies for not finding the duplicate myself.  Really appreciate your work on ajv!. ",
    "Bgshanoams": "Where is my coins,I'm must Go to pls. for Donation.......... ",
    "manahga": "Ugh...sorry about that.  Somehow I overlooked it. . @epoberezkin Definitely room for simplification. I tend to leave my code less optimized for readability when submitting to these discussions.  . So, I found a nice drop in replacement for the getDecimalPlaces function which works off of regex pattern matching and is over twice as fast according to jsperf.\n```JavaScript\nfunction getDecimalPlaces(num) {\n  var match = (''+num).match(/(?:.(\\d+))?(?:eE)?$/);\n  if (!match) { return 0; }\n  return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));\n}\n```\nThe only thing to note with this function is that provided numbers within strings such as '1.00' will return 2.\nThe actual validation could be simplified to this:\n```JavaScript\nconst multiplier = Math.pow(\n     10, \n     Math.max(getDecimalPlaces(fieldValue), getDecimalPlaces(multipleOfValue))\n);\nreturn Math.round(fieldValue * multiplier) % Math.round(multipleOfValue * multiplier) === 0;\n```. ",
    "unhawkable": "Could be a related issue:\nhttps://github.com/tdegrunt/jsonschema/issues/187\nMaybe a fix could be ported from there?. ",
    "pateketrueke": "We're also suffering from this: https://github.com/json-schema-faker/json-schema-faker/issues/379. ",
    "godwinjoel": "Any updates on when this would be resolved?\nwould be really helpful.. ",
    "leomp12": "Maybe something like that should solve.\nIt's not an approach for all possible cases, but at least for the great majority (I guess), with no need to work with strings or loose much performance.. ",
    "MaximeGir": "Hi everyone, i'm using this lib currently, is there a dev release with a fix ? . ",
    "gpietro": "Of course, here is simpler one with the same issue. I agree with you but I wonder if I can make it work anyway, because I would like to use these schemas without the need of rewrite them again. Thanks for your help.. I did simplify my schemas like this and it works but I suppose that also validation of arrays with items $refs isn't supported :/. Because I made a script to rewrite all FHIR schemas (probably I still miss something) and try to make them compatible with ajv.\nIn this example, Patient's name property is set as required and to be an array. The array elements should be of type HumanName, and HumanName has given property has required. AJV does validate only that name must be an array but not the type of the array's elements.. I did solve the problem.\nIt was a mistake on my json schema.\nThis is the correct solution.\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"id\": \"http://localhost:3030/fhir/Patient.schema.json\",\n  \"allOf\": [{\n    \"description\": \"Demographics and other administrative information about an individual or animal receiving care or other health-related services.\",\n    \"properties\": {\n      \"name\": {\n        \"description\": \"A name associated with the individual.\",\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"$ref\": \"HumanName.schema.json\"\n        }\n      }\n    },\n    \"required\": [\"name\"]\n  }]\n}\n2018 starts well :satisfied:. Happy New Year!!! :beers:. $ref actually is a reference to another schema.\nWhat you mean when you say that other properties are ignored?\nI didn't change anything else. I had to specify the type of the $ref schema. In this case of type object.\n$ref can refer as an URI to a local or remote file or inside definitions with '#'.. ",
    "chharvey": "@gpietro It looks like the only change you made was add \"type\": \"object\", but I don't understand how that could've solved your problem. When an object schema has a \"$ref\" property, other properties are ignored.\n\nAll other properties in a \"$ref\" object MUST be ignored.\n\n~ JSON Schema Core Specification\nWhat else did you change to make it work?. ",
    "mikila85": "yes, but only after compiling the schema with the data (because the data might affect which fields are required). I tried adding to the code where it locates \"required\" and then tries to check if there is value to addError, just before it adding similar to ajv.errors to have ajv.required.\nhaving an array of dataPath+Property that is known to be required.\nunfortunately, I have never worked with Javascript Templates and didn't succeed.\nif you could help me with what to add where for this simple functionality it would solve us the problem at hand and be really grateful.. Exactly! schema+data should output required fields regardless of them being filled or not.\n(because data can result in a field being required or not like an option box above).\nIs this something you think can be added in a few lines of code (even dirty) just for it to work.\nwithout it, the form validation feature is not complete and the release is dead in the water.. Hi@bennieswart !\nThank you for taking the time to share this with us.\nWe have the exact needs that you have with form validation and the asterisk* for required fields and we needed allRequired too but AJV didnt supply.\nWe achieved it by running the AJV again and again each time emptying 1 field and seeing if it throws error of \"required field\". \nThis is a lame solution but it works.\nI wish AJV will merge the pull request from your fork,\nMeanwhile we will try to work straight on your fork.\nfrom what i understand it is not updated but your changes are limited to a small function and i think it wouldent be a problem to update.\nCan you let me know if you are going to update it?\n@epoberezkin, Are you willing to consider merging this valuable addition to the AJV?. Thank you!!!  :)\nbeen waiting for over a year for this and I know a lot of others who looked for this exact same thing!\nit seems clean and backward compatible thank you very much. \nI just hope it is merged and everyone can use this so needed functionality!!. @epoberezkin , please we really need such functionality, \nplease help us fix the gaps and merge.. ",
    "mikiTestim": "Complicated issue.\nI'm still convinced that there's a way to extract the active required-fields from the schema+data and I will keep trying to find the way.\nI will surely update if/when I solve it and how for future reference to other community members.\nIf you think of any idea how to solve this I would appreciate it dearly! . ",
    "Relequestual": "There may well be another library which does this! There are libraries which generate forms from JSON Schema files!. ",
    "bennieswart": "We have very similar requirements. Let me just restate our use case for clarity:\nWe have an html form to be filled out. The underlying data is validated using a json schema with ajv. We want to be able to dynamically, based on the current json schema and data, visually mark certain fields as required with an asterisk.\nThis is more complicated than simply scanning for required keywords, as certain json schema branches may become active/inactive based on the actual data. Whatever the current subset of the json schema being applied, we want to have a list of all the required fields, regardless of whether they empty/filled in, or valid/invalid.\nI created a patch some time ago which does this, which is available here: https://github.com/bennieswart/ajv/commit/4e73216e32840766633682bf7b28eed82bf623ee. The fork is outdated, but we have had no reason to upgrade yet. The same code might still work on the latest branch, you will have to check.\nWhen all is said and done, it basically allows you to access all the required fields through ajv.allrequired, just as you would access all the errors through ajv.errors.\n@epoberezkin if you think this is useful, give some feedback and I'll make a PR.. @mikila85 due to your request I decided to rebase the patch onto the latest master and make a preliminary PR here: https://github.com/epoberezkin/ajv/pull/933. If you want to see this functionality added then you can go cheer it on.\nIn the meantime, you should be able to build from that PR, although you might want to wait until changes are finalized.. @epoberezkin in the example you provided, which properties would be deemed required for each of allOf, anyOf, oneOf ?\nOne of the things we do (which my or may not be strictly correct) is to modify the dataPath of keyword: \"required\" errors to equal the full path of the property, for example:\njs\n    errors.forEach(error => {\n        error._dataPath = error.dataPath;\n        if (error.keyword === 'required') {\n            error.dataPath = [error.dataPath, error.params.missingProperty].join('.');\n        }\n    });\nUsing the above, the two keyword: \"required\" errors have dataPath properties of \".foo\" and \".bar\", respectively. Then, based on the compound keyword, either all the fields are required (allOf), or the first field is arbitrarily picked as required (oneOf or anyOf), which brings me back to my first question of what the expected output would be.\nUsing this, we can determine precisely which fields, with their paths, are required.\nPerhaps our cases are still simple enough for this to work. Maybe you can think of more advanced cases where this will fail.\nAny thoughts on this?. ",
    "lehni": "@epoberezkin ok, I understand. But is it strange that the error is then still should NOT have additional properties, instead of something like is an illegal additional property? The path does go to the additional property after all, so the message isn't correct anymore.\nIn the case of required properties, the message is already similarly changed from \"should have required property 'propertyName'\" to is a required property. Ok great. Could you point me to the other PR?. @epoberezkin I've created PR For it in #674, looking forward to your feedback.. This probably should need a test for it too, but I couldn't figure out where to put it, and couldn't find a similar one for the same behavior for required here. . @epoberezkin thanks for the pointer. Here now my added tests:\nhttps://github.com/epoberezkin/ajv/pull/674/commits/4a12ca3b9214d6df9caa7019d80a043b44c6c9b8#diff-831dd6f83c36a271e002b7770f3dbac9R67\nI hope these suffice?\nAlso, please let me know if 'is an invalid additional property' sounds like a good message to you. The wording can change. Alternatives to invalid are illegal or unsupported. I think the message should somehow state that additional properties aren't allowed. should NOT have additional properties implied that. But how to phrase it for the message that is directly attached to the property?. ",
    "gokul-toobler": "1 . What is the error message you receive?\n{\n  \"errorMessage\": \"Error while loading graphql\",\n  \"errorType\": \"SyntaxError\",\n  \"stackTrace\": [\n    \"SyntaxError: Unexpected token function\",\n    \"at localCompile (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/ajv/lib/compile/index.js:118:26)\",\n    \"at Ajv.compile (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/ajv/lib/compile/index.js:55:13)\",\n    \"at Ajv._compile (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/ajv/lib/ajv.js:353:27)\",\n    \"at Ajv.compile (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/ajv/lib/ajv.js:113:37)\",\n    \"at Object. (/home/toobler/Projects/boon/boon/backend-boon/backend/.webpack/service/graphql/index.js:612:23)\",\n    \"at webpack_require (/home/toobler/Projects/boon/boon/backend-boon/backend/.webpack/service/graphql/index.js:20:30)\",\n    \"at Object. (/home/toobler/Projects/boon/boon/backend-boon/backend/.webpack/service/graphql/index.js:262:23)\",\n    \"at webpack_require (/home/toobler/Projects/boon/boon/backend-boon/backend/.webpack/service/graphql/index.js:20:30)\",\n    \"at Object. (/home/toobler/Projects/boon/boon/backend-boon/backend/.webpack/service/graphql/index.js:904:14)\",\n    \"at webpack_require (/home/toobler/Projects/boon/boon/backend-boon/backend/.webpack/service/graphql/index.js:20:30)\",\n    \"at Object.defineProperty.value (/home/toobler/Projects/boon/boon/backend-boon/backend/.webpack/service/graphql/index.js:790:18)\",\n    \"at webpack_require (/home/toobler/Projects/boon/boon/backend-boon/backend/.webpack/service/graphql/index.js:20:30)\",\n    \"at Object.defineProperty.value (/home/toobler/Projects/boon/boon/backend-boon/backend/.webpack/service/graphql/index.js:764:15)\",\n    \"at webpack_require (/home/toobler/Projects/boon/boon/backend-boon/backend/.webpack/service/graphql/index.js:20:30)\",\n    \"at Object.defineProperty.value (/home/toobler/Projects/boon/boon/backend-boon/backend/.webpack/service/graphql/index.js:732:14)\",\n    \"at webpack_require (/home/toobler/Projects/boon/boon/backend-boon/backend/.webpack/service/graphql/index.js:20:30)\",\n    \"at Object. (/home/toobler/Projects/boon/boon/backend-boon/backend/.webpack/service/graphql/index.js:655:15)\",\n    \"at webpack_require (/home/toobler/Projects/boon/boon/backend-boon/backend/.webpack/service/graphql/index.js:20:30)\",\n    \"at Object.defineProperty.value (/home/toobler/Projects/boon/boon/backend-boon/backend/.webpack/service/graphql/index.js:63:18)\",\n    \"at Object. (/home/toobler/Projects/boon/boon/backend-boon/backend/.webpack/service/graphql/index.js:66:10)\",\n    \"at Module._compile (module.js:570:32)\",\n    \"at Object.Module._extensions..js (module.js:579:10)\",\n    \"at Module.load (module.js:487:32)\",\n    \"at tryModuleLoad (module.js:446:12)\",\n    \"at Function.Module._load (module.js:438:3)\",\n    \"at Module.require (module.js:497:17)\",\n    \"at require (internal/module.js:20:19)\",\n    \"at Object.createHandler (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/serverless-offline/src/functionHelper.js:35:21)\",\n    \"at handler (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/serverless-offline/src/index.js:499:40)\",\n    \"at Object.internals.handler (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/hapi/lib/handler.js:96:36)\",\n    \"at request._protect.run (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/hapi/lib/handler.js:30:23)\",\n    \"at internals.Protect.run (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/hapi/lib/protect.js:64:5)\",\n    \"at exports.execute (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/hapi/lib/handler.js:24:22)\",\n    \"at each (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/hapi/lib/request.js:384:16)\",\n    \"at iterate (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/items/lib/index.js:36:13)\",\n    \"at done (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/items/lib/index.js:28:25)\",\n    \"at internals.Auth.payload (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/hapi/lib/auth.js:223:16)\",\n    \"at each (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/hapi/lib/request.js:384:16)\",\n    \"at iterate (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/items/lib/index.js:36:13)\",\n    \"at done (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/items/lib/index.js:28:25)\",\n    \"at onParsed (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/hapi/lib/route.js:402:20)\",\n    \"at Subtext.parse (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/hapi/lib/route.js:423:20)\",\n    \"at next (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/subtext/lib/index.js:45:26)\",\n    \"at Wreck.read (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/subtext/lib/index.js:242:16)\",\n    \"at finish (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/subtext/node_modules/wreck/lib/index.js:374:20)\",\n    \"at wrapped (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/subtext/node_modules/hoek/lib/index.js:875:20)\",\n    \"at onReaderFinish (/home/toobler/Projects/boon/boon/backend-boon/backend/node_modules/subtext/node_modules/wreck/lib/index.js:449:16)\",\n    \"at g (events.js:292:16)\",\n    \"at emitNone (events.js:91:20)\",\n    \"at emit (events.js:185:7)\",\n    \"at finishMaybe (_stream_writable.js:512:14)\",\n    \"at endWritable (_stream_writable.js:522:3)\",\n    \"at Writable.end (_stream_writable.js:487:5)\",\n    \"at IncomingMessage.onend (_stream_readable.js:511:10)\",\n    \"at IncomingMessage.g (events.js:292:16)\",\n    \"at emitNone (events.js:91:20)\",\n    \"at IncomingMessage.emit (events.js:185:7)\",\n    \"at endReadableNT (_stream_readable.js:974:12)\",\n    \"at _combinedTickCallback (internal/process/next_tick.js:80:11)\"\n  ],\n  \"offlineInfo\": \"If you believe this is an issue with the plugin please submit it, thanks. https://github.com/dherault/serverless-offline/issues\"\n}\n\nOn what platform do you run Node.js?\n\nubuntu 14.04\nWas node.js installed using nvm or in some other way?\nnode installed using nvm. \nDoes the issue happen if you install node.js with nvm?\nyes\nWhat is the minimal code that allows to reproduce the issue? (e.g. would it happen with require('ajv')() - that already invokes Function constructor).\nimport Ajv from \"ajv\";\nconst ajv = new Ajv();\najv.compile(schema);. By function constructor , i mean this thing.\najv/lib/compile/index.js , line 118\nvar makeValidate = new Function(\n        'self',\n        'RULES',\n        'formats',\n        'root',\n        'refVal',\n        'defaults',\n        'customRules',\n        'equal',\n        'ucs2length',\n        'ValidationError',\n        sourceCode\n      );. import Ajv from \"ajv\";\nimport userModel from \"../model\";\nvar ajv = Ajv({allErrors: true});\najv.addKeyword(\"isEmailAlreadyExists\", {\n    async: true,\n    type: \"string\",\n    validate: isEmailAlreadyExists\n});\nconst schema = {\n    \"$async\": true,\n    \"type\": \"object\",\n    \"properties\": {\n        \"displayName\": {\n            \"type\": \"string\"\n        },\n        \"email\": {\n            \"type\": \"string\",\n            \"format\" : \"email\",\n            \"isEmailAlreadyExists\": {\n                \"collection\": \"users\"\n            }\n        },\n        \"password\": {\n            \"type\": \"string\"\n        },\n        \"status\": {\n            \"type\": \"boolean\"\n        }\n    },\n    \"required\": [\"displayName\", \"email\", \"password\", \"status\"]\n};\nasync function isEmailAlreadyExists(meta, data) {\n    return !userModel.count({\n        email: data\n    });\n}\nexport default ajv.compile(schema);. yes , it fixed with ajv-async.\nrequire(\"ajv-async\")(ajv);. ",
    "taylorzane": "Thanks, I must have skipped right over that when reading the documentation, I was able to accomplish what I wanted using that plus patternProperties \ud83d\udc4d . ",
    "scriptjs": "Hi Max @maxogden, have you tried pre-compiling your schema with the ajv cli and just including the compiled validate method. I hear what you're saying about the size. This had me concerned as well but this worked well for me for small bundles. You can write a script for your package.json to generate the code to include in your package. You still get access to the schema with validate.schema This is analogous to what @mafintosh did with protocol buffers by including the generated code instead of the entire validation lib. Check it out at https://github.com/jessedc/ajv-cli. ",
    "mhelvens": "I was about to file a feature request very similar to this one (I think), but regarding $ref instead of $data. For example, I want some defaults to reference other defaults, to avoid duplicating data:\n```js\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"rules\":   { \"$ref\": \"#/definitions/rules\" }\n  },\n  \"required\": [\"rules\"],\n\"definitions\": {\n    \"rules\": {\n      \"type\": \"array\",\n      \"items\": { \"$ref\": \"#/definitions/rule\" },\n      \"default\": [{ \"$ref\": \"#/definitions/rule/default\" }]\n    },\n\"rule\": {\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\":   { \"type\": \"string\" },\n    \"fields\": { \"$ref\": \"#/definitions/fields\" }\n  },\n  \"required\": [\"name\", \"fields\"],\n  \"default\": {\n    \"name\": \"\",\n    \"fields\": { \"$ref\": \"#/definitions/fields/default\" }\n  }\n},\n\n\"fields\": {\n  \"type\": \"array\",\n  \"items\": { \"$ref\": \"#/definitions/field\" },\n  \"minItems\": 1,\n  \"default\": [{ \"$ref\": \"#/definitions/field/default\" }]\n},\n\n\"field\": {\n  \"type\": \"object\",\n  \"properties\": { \"name\": { \"type\": \"string\" }},\n  \"required\": [\"name\"],\n  \"default\": { \"name\": \"Field Name\" }\n},\n\n}\n}\n```\nIt doesn't look like ajv is swallowing this. Is this issue close enough, or should I open a separate one?. Thanks for your reply!\nI guess I was making bad assumptions based on how I would implement json-schema validation, perhaps naively, with a simultaneous depth-first traversal of the trees, using a recursive function that distinguishes on shape. I wouldn't be keeping track of matched paths, as such, but they would still be on the call stack. It wouldn't require too many additional lines of code to then keep a record of every successful match, and upon encountering a mismatch, discard the current subtree of matches (rooted just below the nearest oneOf). Does ajv work fundamentally differently?\nYou mention one or two ways I could 'hack' this feature on top of the existing library? I'd like to try that. Could you possibly be a bit more specific, to help me get started? If it makes a difference, assume that my schema contains no $refs, because I can easily resolve those beforehand (there are no ref-cycles).. ",
    "jthomerson": "\nThanks.\n. Yeah, the Google results are hurting us here ... json schema constant results all pull up those previous proposals (for good reasons ... constant vs const). I should've looked at the actual spec, but that (ironically) is harder to find when you're searching by keywords. Sorry for the wasted time. Thanks for your work on the library!. ",
    "muayyad-alsadi": "\nNo keywords are triggered for non-existing properties. \n\n@epoberezkin my question, is this a requirement of jsonschema standard or an implementation choice?. > The spec: http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.5.4\n\nSo if property doesn't exist in the data, no schema gets applied to it.\n\nthank you for the follow up,\nwould you please quote the part of the spec that says if the property does not exists, no schema get applied, because this does not seem how I understand the linked section 6.5.4. I'm new to jsonschmea, but from what I understand the spec allow both and ajv choose to implement it that way.\n. ",
    "FloEdelmann": "The question is which of these rules has a higher priority: Should $comments be always ignored? Or should $refs always forbid sibling properties?\nMaybe an additional config option could solve this dilemma, as the user could decide.. Removing the option leads to other failing tests:\n```\n  1) Ajv Options\n       $comment\n         = true\n           should log the text from $comment keyword:\n  AssertionError: expected [] to deeply equal [ [ 'property foo' ] ]\n  + expected - actual\n\n  -[]\n  +[\n  +  [\n  +    \"property foo\"\n  +  ]\n  +]\n\n  at test (spec/options.spec.js:1300:30)\n  at /home/flo/www/ajv/spec/options.spec.js:1293:11\n  at Array.forEach (<anonymous>)\n  at Context.<anonymous> (spec/options.spec.js:1289:24)\n\n2) Ajv Options\n       $comment\n         function hook\n           should pass the text from $comment keyword to the hook:\n  AssertionError: expected [] to deeply equal [ Array(1) ]\n  + expected - actual\n\n  -[]\n  +[\n  +  [\n  +    \"property foo\"\n  +    \"#/properties/foo/$comment\"\n  +    {\n  +      \"properties\": {\n  +        \"bar\": {\n  +          \"$comment\": \"property bar\"\n  +          \"type\": \"integer\"\n  +        }\n  +        \"foo\": {\n  +          \"$comment\": \"property foo\"\n  +        }\n  +      }\n  +    }\n  +  ]\n  +]\n\n  at test (spec/options.spec.js:1341:31)\n  at /home/flo/www/ajv/spec/options.spec.js:1330:11\n  at Array.forEach (<anonymous>)\n  at Context.<anonymous> (spec/options.spec.js:1326:24)\n\n```. Sorry this took so long :see_no_evil:\nI've updated the code, but the same errors remain. I've short-circuited the precommit hook to show you my current version. Do you have any suggestions what could interfere with the $comment option working correctly?. I had one more look and sorted out what was still missing :tada: \nSo I think this is now ready to review @epoberezkin :). Any updates about this @epoberezkin?. ",
    "Teoxoy": "I would like to have this too. I think $comments should be ignored.. Are the tests passing now?. ",
    "BrettStrongEH": "So sorry ... it is working fine. Was an error on my part.\nPlease disregard. Closing issue.. Hi Guys,\nSorry for late reply. To be honest I can't remember what I was doing wrong.\nIn an effort to help you, here the code I am using now ... hopefully you can spot the difference that makes the difference :) ...\nconst Ajv = require('ajv');\nconst ajv = new Ajv(); // options can be passed, e.g. {allErrors: true}\n// const ajv = new Ajv({schemaId: 'id'});\najv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));\n// ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json'));\nconst assessChangesDtoSchema = require('./schemas/changeEventDto');\n// Validate the incoming assessmentChange DTO json schema ...\nvar validate = ajv.compile(assessChangesDtoSchema);\nvar valid = validate(assessmentChangesDto); \n//Where assessmentChangesDto is the posted json object to validate\nThe json schema file i have create an am using is as below ... \n{\n    \"type\": \"object\",\n    \"definitions\": {},\n    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n    \"required\": [ \"dateStamp\", \"isReversal\", \"editingSessionId\" ],\n    \"properties\": {\n      \"dateStamp\": {\n        \"$id\": \"/properties/dateStamp\",\n        \"type\": \"string\",\n        \"title\": \"The Datestamp Schema\",\n        \"description\": \"Date object in UTC string format.\",\n        \"default\": \"\",\n        \"examples\": [\n          \"2018-01-29T08:26:12.911Z\"\n        ]\n      },\n      \"isReversal\": {\n        \"$id\": \"/properties/isReversal\",\n        \"type\": \"boolean\",\n        \"title\": \"The Isreversal Schema\",\n        \"description\": \"A boolean value indicating whether this change event is a reversal. Reversals are only possible if the change being reversed was the last change saved\",\n        \"default\": false,\n        \"examples\": [\n          false\n        ]\n      },\n      \"editingSessionId\": {\n        \"$id\": \"/properties/editingSessionId\",\n        \"type\": \"string\",\n        \"title\": \"The Editingsessionid Schema\",\n        \"description\": \"The assessment editing session id.\",\n        \"default\": \"\",\n        \"examples\": [\n          \"a3c65ff7-ee67-44be-846a-7dc4441d96ca\"\n        ]\n      },\n      \"changeItems\": {\n        \"$id\": \"/properties/changeItems\",\n        \"type\": \"array\",\n        \"items\": {\n          \"$id\": \"/properties/changeItems/items\",\n          \"type\": \"object\",\n          \"required\": [\"changeType\", \"txnId\"],\n          \"properties\": {\n            \"changeType\": {\n              \"$id\": \"/properties/changeItems/items/properties/changeType\",\n              \"type\": \"integer\",\n              \"enum\": [0, 1, 2, 3, 4],\n              \"title\": \"The Changetype Schema\",\n              \"description\": \"ChangeType enum { ClassFrequency = 0,  ClassNessecity = 1,  Recatorisation = 2,  NAFlag = 3,  Note = 4 }.\",\n              \"default\": 0,\n              \"examples\": [\n                1\n              ]\n            },\n            \"txnId\": {\n              \"$id\": \"/properties/changeItems/items/properties/txnId\",\n              \"type\": [\"integer\", \"string\"],\n              \"title\": \"The Txnid Schema\",\n              \"description\": \"The insights core API transaction id reference.\",\n              \"default\": 0,\n              \"examples\": [\n                402128\n              ]\n            },\n            \"existingOverrideId\": {\n              \"$id\": \"/properties/existingOverrideId\",\n              \"type\": [\"string\", \"null\"],\n              \"title\": \"The existingOverrideId Schema\",\n              \"description\": \"The existing overide record id in the database. If \",\n              \"default\": \"\",\n              \"examples\": [\n                \"a3c65ff7-ee67-44be-846a-7dc4441d96ca\"\n              ]\n            },\n            \"applicantId\": {\n              \"$id\": \"/properties/applicantId\",\n              \"type\": [\"string\"],\n              \"title\": \"The applicantId Schema\",\n              \"description\": \"The applicantId id in the database.\",\n              \"default\": \"\",\n              \"examples\": [\n                \"a3c65ff7-ee67-44be-846a-7dc4441d96ca\"\n              ]\n            },\n            \"changedFrom\": {\n              \"$id\": \"/properties/changeItems/items/properties/changedFrom\",\n              \"type\": [\"integer\", \"string\", \"boolean\"],\n              \"title\": \"The Changedfrom Schema\",\n              \"description\": \"In case of a ClassNess change its the ClassNess enum value { Mandatory = 1, Discretionary = 2 }. In case of a ClassFreq change its the ClassFreq enum value { Recurring = 1, OnceOff = 2 }. In case of a Category change its the Sub Category ID. In case of a NAFlag change its a boolean value.\",\n              \"default\": 0,\n              \"examples\": [\n                2\n              ]\n            },\n            \"changedTo\": {\n              \"$id\": \"/properties/changeItems/items/properties/changedTo\",\n              \"type\": [\"integer\", \"string\", \"boolean\"],\n              \"title\": \"The Changedto Schema\",\n              \"description\": \"In case of a ClassNess change its the ClassNess enum value { Mandatory = 1, Discretionary = 2 }. In case of a ClassFreq change its the ClassFreq enum value { Recurring = 1, OnceOff = 2 }. In case of a Category change its the Sub Category ID. In case of a NAFlag change its a boolean value.\",\n              \"default\": 0,\n              \"examples\": [\n                1\n              ]\n            },\n            \"text\": {\n              \"$id\": \"/properties/changeItems/items/properties/changedTo\",\n              \"type\": \"string\",\n              \"title\": \"The Changedto Schema\",\n              \"description\": \"Only applicable to change of type 'Note'.\",\n              \"default\": 0,\n              \"examples\": [\n                1\n              ]\n            }\n          }\n        }\n      }\n    }\n  }\n. ",
    "rdiacenco": "@BrettStrongEH How did you manage to fix the error?. Hey guys,\nI figured out what was happening, in my case.\nI was sending the data for validation, in String format, instead of Object, this is why it complained, that the schema expected an Object type (\"type\": \"object\"), but in reality it was not an Object, it was a String.\nTo verify the type of your data (sent for validation), you could use typeof(data), to see if you are indeed sending an Object.. ",
    "aftabmj": "Yes, I am having the same issue. please say how you fixed it.. ",
    "jscharett": "I'm not sure I understand this.  I've run into this issue and can validate it with other validators, but not this one.  You say they are both valid?  Should it not match the first one but not the second, thus being valid?\nIn my case, if I change the order of the oneOf, it affects the validation. I'm not sure how to validate such a case with your tool.. ",
    "jyotivit": "oneOf means that only one sub-schema is valid, in your case - both are valid. it is the correct as i was stuck for 4 day before i got this post that resolved my issue  thanks . ",
    "igor-savin-ht": "@epoberezkin Huh, interesting, if it works that way, then it's great news. Is it a new behaviour, e. g. since version 6+ or 5.5.2 should already behave that way?\nWell, alternative to configureable behaviour would be major version bump, I wonder if that is what already happened. Then the only missing thing would be documentation update, I guess, which I would gladly do.. @epoberezkin I've figured out what's wrong, ajv works exactly as you have described when type 'number' is used; however, it is not working for 'integer' type, even though it most likely should. I'm trying to create a PR with failing test now.. @epoberezkin Sorry for rushing to conclusions, it was an insane week and I should have done more through investigation before raising an issue. You were right, Ajv works flawlessly in this case, problem was due to Swagger 2.0 limitations, generated Swagger YAML files that were used for validations didn't have original multiple-value JSON schema. I will try to resolve the issue within https://github.com/idanto/express-ajv-swagger-validation/issues/21.\nThank you for most helpful response and sorry for the inconvenience.. @epoberezkin Do you see any value in new test? I can un-skip and rebase this PR, or just close it.. And it probably was failing at first due to incorrect check that was removed in https://github.com/epoberezkin/ajv/pull/694/commits/a8a4ddc2fc8bb252839f9f1ea1a659f8edef5e1d and in a hurry I didn't check if test was still failing after I removed it. Sorry.. @epoberezkin Done.. ",
    "mmccool": "Actually, this is related to a problem I have: I want to know when part of a schema matches.  I think the solution to my problem would also solve THIS problem.\nBasically what I want is an \"on\" method that has two arguments: a \"path\" to the part of the schema I care about, and a function to call when that part matches (e.g. when the matcher returns from it with a \"success\" status, which it might do repeatedly for different parts of the schema, and whether or not the entire schema validation fails).\nSo to address the problem raised by this issue, you could use a bunch of \"on\" rules to collect the information you wanted as the validation progressed.   This might be aided by passing in extra data to the on function as optional (extra) parameters, like the part of the data that matched.. Anyway, this is very similar to \"match variables\" in regular expressions ($1, $2, and the like) that let you extract the parts of the input data that match, and would have a range of similar applications (eg to extract specific data from a JSON file, not just validate it).. Good point about the annotations, it does indeed look to be related.  The JSON spec for that also notes several complications to the implementation of this, namely dealing with \"not\" and failed branches of \"anyOf\", \"oneOf\", etc.   But it sounds like that to be compliant with draft-07/08 something like this will be necessary in ajv eventually.\nI should note that my ideal solution to this would not add any additional keywords to the schema to mark \"match\" points, although we (eg the standard validation use case I cited) could live with that if it were necessary.\nAs for the API, I personally think the callback (option 1) would be more flexible, but logging (option 2) might make it easier to deal with \"not\" etc (post-processing of the log could be used to remove \"negative\" matches, perhaps).   In general even if there are call-backs, it would be OK to defer the callbacks until processing is completed (eg after processing completes, ajv would scan the match log and trigger callbacks on the matches for which callbacks were requested).  I guess upon reflection the functionality of these options can be made equivalent, so the exact structure of the API is not a critical issue.. So I may have some time to work on this now.  As a first cut, I was thinking of just cloning how errors are handled when allErrors is turned on, except it should log things when a match succeeds, instead of when it fails.  This should give option 2, the logging approach, above.  Also, it seems to me that errors should also already be set up to deal with not, oneOf, etc. correctly already.. Well, I'm not sure I need annotation collection as defined in the spec for what I'm doing.  I just need an \"anti-error\" log (eg a log of successful matches, rather than unsuccessful ones).  So that's what I'm going  to do... but it might be a useful first step to supporting annotation collection.. Re assertions, I don\u2019t think we need full support as defined in the JSON spec.  The observation was just that a \u201cmatch callback\u201d (or log) would be useful for implementing them.\nRegarding your idea: that might work, if such a schema could be written.  Would it be possible to write a tool that could read in a schema and write out an anti-schema?  Also: there is a \u201cnot\u201d keyword supported in the spec (and by ajv).  Would an anti-schema simply involve putting a single \u201cnot\u201d at the very top?\nBasically, your idea is potentially useful, but we need a fast way to update the anti-schema when the schema changes.\n(From: Michael McCool)\nOn Dec 20, 2018, at 11:16, Michael McCool notifications@github.com<mailto:notifications@github.com> wrote:\nSo I may have some time to work on this now. As a first cut, I was thinking of just cloning how errors are handled when allErrors is turned on, except it should log things when a match succeeds, instead of when it fails. This should give option 2, the logging approach, above. Also, it seems to me that errors should also already be set up to deal with not, oneOf, etc. correctly already.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHubhttps://github.com/epoberezkin/ajv/issues/902#issuecomment-448833715, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADiceOwESzNHhhM0KF7ISiyneVA6jbRPks5u6vLpgaJpZM4ZRSxa.\n. ",
    "droganov": "I've found integer type in docs, which lowers the severity, but it's still strange to me, why same expression works differently.. ",
    "M-TGH": "~~Hey, it seems the format validation is only used on string types as per this part in the readme.~~\nEDIT: Statement was invalid, seems this README.md part is old/unupdated, see newer comment.\nAs per whether this should or shouldn't be the case, I'm not sure what AJV's owner his opinion on the matter is but the JSON-schema spec is a bit vague, see: this part of their docs on format\n\nA format attribute can generally only validate a given set of instance types. If the type of the instance to validate is not in this set, validation for this format attribute and instance SHOULD succeed.\n\nBut on the topic of a solution:\nIt looks to me like using the type \"integer\" would result in what you're trying to achieve (like you mentioned in your comment). Far as keeping it positive just keep the minimum on 0 (as per what you already have).\nOr does this just truncate numbers with decimals to ones without decimals? If so I guess it would assert to false when just using number and setting the \"multipleOf\" keyword to 1.\n. It seems the above mentioned part of the README.md is missing that format can be applied to integer.\nWhen further looking into formats I noticed that in the addFormat function used you can specify the type you want your format to be able to apply to (\"string\" or \"number\", other things not supported). \nHence changing your formats object around a bit might work: \nvar formats = {\n  positiveIntegerFormat: {\n    validate: /^[0-9]*$/,\n    type: 'number',\n  },\n};\nI haven't tested wether AJV will test numbers through regex however, although since JS supports it it shouldn't be a problem. In case AJV doesn't you might have to change validate to a function that does the check instead.. The addFormat function is for adding custom formats not custom types.\nAlso it seems that what you're trying to achieve doesn't need the whole format validation functions as you can just add $ref to combine these schema's.\nWARNING: psuedo code inbound; something along the lines of this should work:\n```\nimport Ajv from 'ajv';\nimport {\n    dateRangeSchema,\n    geoCircleSchema\n} from 'emp-admin-entity-administration-config-schema';\nexport const ajv = new Ajv({\n    allErrors: true,\n    verbose: true\n});\najv.addFormat('date', { / This would also need to be changed /\n    type: 'integer',\n    validate: () => false\n});\najv.addSchema(dateRangeSchema, 'DateRange');\najv.addSchema(geoCircleSchema, 'GeoCircle');\nconst validate = ajv.compile({\n    \"type\": \"object\",\n    \"properties\": {\n        \"title\": {\n            \"description\": \"\",\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\",\n        },\n        \"period\": {\n            \"$ref\": \"DateRange\"\n        },\n        \"geo\": {\n            \"$ref\": \"GeoCircle\"\n        },\n        \"message\": {\n            \"title\": \"\u0428\u0430\u0431\u043b\u043e\u043d \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\",\n            \"type\": \"string\"\n        },\n        \"precision\": {\n            \"type\": \"integer\"\n        },\n        \"repeatEmitting\": {\n            \"type\": \"boolean\"\n        }\n    }\n});\n```\nThis still leaves in the date one, not sure what kind of dates you're currently expecting (UNIX timestamps maybe? seeing how you had integer as it's type). Might want to look into using formatted datestrings, these are default formats that JSON Schema has in it's draft. The expected date format here looks like: 2002-07-01T13:50:05Z\nThis would look like something along the lines of:\n{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"string\",\n    \"format\": \"date-time\"\n  },\n  \"minItems\": 2,\n  \"maxItems\": 2,\n  \"additionalItems\": false\n}. @vankop Technically yes, however since format keywords only are applied to strings formally (or numbers if specifically assigned to) it won't.\nI'd suggest adding the schemas to your ajv instance with addSchema. Then referencing to the key you gave your schema's in your main schema, like this:\n```\nconst ajv = new Ajv();\najv.addSchema(dateRangeSchema, 'DateRange'); // You can either specify these keys here or add \"$id\" keywords to your schema's to reference to\najv.addSchema(geoCircleSchema, 'GeoCircle');\nconst validate = ajv.compile({\n    \"type\": \"object\",\n    \"properties\": {\n        \"period\": {\n            \"$ref\": \"DateRange\",  //Reference to the subschema you want to add-in here\n        },\n        \"geo\": {\n            \"$ref\": \"GeoCircle\",\n        },\n});\n```\nThis compiles to the types from your subschemas being applied in the places where the references are set. E.g. the compiled schema would look like:\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"period\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"date\" //Type \"date\" still is invalid, see my suggestion with using \"string\" and the date-time format\n            },\n            \"minItems\": 2,\n            \"maxItems\": 2,\n           \"additionalItems\": false\n        },\n        \"geo\": {\n            // Your geocircle one here\n        },\n}. ",
    "vankop": "@M-TGH so if I will specify keyword format instead of type it should work properly?. Got it thanks!. I'm using create-react-app. Problem with commonjs module described here. find out problem in uri-js package.json in module section.\nUPDATE: just seems like UglifyJsPlugin can not minimize es5 module. As described in uri-js related issue you need to manually modify node_modules/uri-js. May be fix uri-js version will be good solution for now.. ",
    "daniel-jozsef": "It would be nice to auto-generate the patch validation from the schema for the JSON it operates on. :). ",
    "43081j": "ok here's a JS reproduction:\n``javascript\n      const schema = {\n        \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n        anyOf: [ { $ref: '#/definitions/generic' } ],\n        definitions: {\n          generic: {\n            type: 'object',\n            anyOf: [\n              { $ref: '#/definitions/model1' }\n            ]\n          },\n          genericChildren: {\n            type: 'array',\n            items: { $ref: '#/definitions/generic' },\n            additionalItems: false\n          },\n          model1: {\n            type: 'object',\n            properties: {\n              type: {\n                type: 'string',\n                enum: [ 'model1']\n              },\n              model1_a: { type: 'string' },\n              model1_b: { type: 'string' },\n              children: { $ref: '#/definitions/genericChildren' }\n            },\n            required: ['type'],\n            additionalProperties: false\n          }\n        }\n      };\n      for (let i = 2; i < 20; i++) {\n        schema.definitions[model${i}] = {\n          type: 'object',\n          properties: {\n            type: {\n              type: 'string',\n              enum: [model${i}]\n            },\n            children: { $ref: '#/definitions/genericChildren' }\n          },\n          required: ['type'],\n          additionalProperties: false\n        };\n        schema.definitions.generic.anyOf.push({\n          $ref:#/definitions/model${i}`\n        });\n      }\n      const json = {\n        type: 'model1',\n        model1_a: 'foo',\n        model1_b: 'bar',\n        children: [{\n          type: 'model2',\n          nonExistent: null\n        }]\n      };\n  //editor.set(json);\n  const ajv = new Ajv({\n    allErrors: true\n  });\n  ajv.addMetaSchema(await getJSON('node_modules/ajv/lib/refs/json-schema-draft-06.json'));\n  const valid = ajv.validate(schema, json);\n\n```\nnonExistent: null invalidates the whole tree, and we then end up with 778 errors in ajv.errors. \nIf we instead pass the following data:\njson\n{\n  \"type\": \"model1\",\n  \"model1_a\": \"foo\",\n  \"model1_b\": \"bar\",\n  \"children\": [{\n    \"type\": \"model2\",\n    \"children\": [{\n      \"type\": \"model2\",\n      \"nonExistent\": null\n    }]\n  }]\n}\nIt is one level deeper, we now get 14,135 errors in ajv.errors.\nAs you can see, in this schema, if a very deep child is invalid we will easily reach chrome (or node's) maximum memory allocation.. yup I figured allErrors is what causes the explosion in error count, but you're right I do still get a rather large amount without it.\nI understand why it does it (because as you said, it can't know which of the anyOf it should be validating against). However, I didn't realise the if/then was in the spec now (assumed its still a proposal of some sort).\nI'll give that a go.. no worries, i'll try with allErrors: false, verbose: false.\nwhat spec is if/then in? is that draft 7?\nalso, just to confirm i understand this. allErrors: false will mean per object we return after the first error? and is that the first error of each of anyOf?\ni do get quite a few errors still but far, far less than with allErrors: true.\nso lets say i have 4 entries in my anyOf, i will get 1 error per entry for a given object? or i will get 1 error that nothing in the anyOf was matched?. yup sounds good to me.\ni did switch from oneOf to anyOf for performance reasons (better to quit early than have to test every branch, especially since all entries have a different type so we can't match two anyway).\nI totally didn't realise if/then was in one of the drafts already so i'll give that a go. \nSeems most of my problems are solved by allErrors: false, fortunately. \nThanks for the quick responses, i figured it would be schema related or config rather than a bug but wasn't sure.\nThe whole idea of branch selection is really what we need. To say \"based on the type, use this associated schema\".. ",
    "mathieug": "Thank you!\nDo you have a sample of a keyword that could allow multiple modifications? I could make a PR on ajv-keywords ;). Ok, I'll let you know for the keyword that would allow to define multiple string modifications.\nIt works with allOf and I've updated my keywords to a more concise way (validate instead of compile).\n```\n{\n  type: 'string',\n  errors: false,\n  modifying: true,\n  schema: false,\n  validate: (value, dataPath, object, key) => {\n    object[key] = _.toLower(value);\nreturn true;\n\n}\n}\n```. Great to know! It's a lot of small things.\ntrim:\n{\n  type: 'string',\n  errors: false,\n  modifying: true,\n  schema: false,\n  valid: true,\n  validate: (value, dataPath, object, key) => {\n    object[key] = _.trim(value);\n  }\n}\nMaybe you also got some tips for this keyword:\nobjectid:\n```\n{\n  type: 'string',\n  errors: false,\n  modifying: true,\n  schema: false,\n  validate: (value, dataPath, object, key) => {\n    if (!ObjectId.isValid(value)) {\n      return false;\n    }\nobject[key] = new ObjectId(value);\n\nreturn true;\n\n}\n}\n. Here is why I'm trying to achieve:javascript\nfunction validateProductData(productData, currentUser) {\n  const errors = {};\nif (!_.isString(productData.name)) {\n    // Set error\n  }\nif (currentUser.role === 'user') {\n    if (!_.isString(productData.companyId)) {\n      // Set error\n    }\n  } else {\n    productData.companyId = currentUser.companyId; // I can do this myself after the validation\n  }\nreturn errors;\n}\n``. It seems $data is a value coming from inside the object being validated?!\nI would like to use a value coming from outside the object being validated (for example, coming from my Express request) when callingajv.validate(). In my last message, the value iscurrentUser.role`.\nIn my example, companyId is a property and required only when current user is administrator and must not exist when current user is not administrator. I'd like a way to avoid to have two schemas depending my current user's role., one schema when the user is administrator and an other when the user is not administrator:\njavascript\nif (req.currentUser.type === 'administrator') {\n  isValid = ajv.validate('product-admin', { name: 'Abc', companyId: '1a2b3c' });\n  // Handle ajv.errors when user is admin\n} else {\n  isValid = ajv.validate('product-user', { name: 'Abc' });\n  // Handle ajv.errors when user is not admin\n}. I'm reading your comment here: https://github.com/epoberezkin/ajv/issues/411#issuecomment-278762517\nMaybe I could wrap my schema in an object with a required attribute schema and an optional attribute extraProperties?\njavascript\n{\n  \"title\": \"Product\",\n  \"type\": \"object\",\n  \"additionalProperties\": false,\n  \"required\": [\"schema\"],\n  \"properties\": {\n    \"schema\": {\n      \"additionalProperties\": false,\n      \"name\": { \"type\": \"string\" },\n      \"companyId\": { \"type\": \"string\" }\n    },\n    \"extraProperties\": {\n      \"additionalProperties\": false,\n      \"currentUserRole\": { \"type\": \"string\" }\n    }\n  }\n}\nI would have to find a trick to use $data to require and validate companyId depending value of extraProperties.currentUserRole.\nWhat do you think?. @epoberezkin How can I use $data to make a property required or not?. Hm, I don't see how to make it dynamic.\nLet's take a concrete example:\n```json\n{\n  \"title\": \"User\",\n  \"description\": \"User\",\n\"type\": \"object\",\n  \"additionalProperties\": false,\n  \"required\": [\"data\", \"params\"],\n  \"properties\": {\n    \"data\": {\n      \"type\": \"object\",\n      \"additionalProperties\": false,\n      \"required\": [\"email\", \"password\"],\n      \"properties\": {\n        \"companyId\": { \"type\": \"string\", \"objectid\": true },\n        \"email\": {\n          \"type\": \"string\",\n          \"allOf\": [\n            { \"lowercase\": true, \"trim\": true },\n            { \"format\": \"email\" }\n          ]\n        },\n        \"password\": { \"type\": \"string\", \"minLength\": 6 }\n      }\n    },\n    \"params\": {\n      \"type\": \"object\",\n      \"additionalProperties\": false,\n      \"required\": [\"role\"],\n      \"properties\": {\n        \"role\": { \"type\": \"string\", \"enum\": [\"administrator\", \"user\"] }\n      }\n    }\n  }\n}\n```\nI don't see how to make data.companyId required if params.role is administrator.\nIf I can achieve that, I'd like companyId to not exist if params.role is user.. Maybe with https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#ifthenelse but not sure if it works with $data?. I've tried without the async and ajv still tries to validate against all the allOf items.. json\n    \"companyId\": {\n      \"type\": \"string\",\n      \"if\": { \"objectid\": true },\n      \"then\": { \"exists\": { \"collection\": \"companies\", \"attribute\": \"_id\" } }\n    }\nThis way there is no error message when objectid fails.\njson\n    \"companyId\": {\n      \"type\": \"string\",\n      \"if\": { \"objectid\": true },\n      \"then\": { \"exists\": { \"collection\": \"companies\", \"attribute\": \"_id\" } },\n     \"else\": false\n    }\nAnd this way the error message when objectid fails is not explicit.. How can I set breakOnError to true (https://github.com/epoberezkin/ajv/blob/master/lib/dot/allOf.jst#L26)?\nNote that allErrors is set to true.. ",
    "DaTebe": "That may be true. But the question is, why does JSON Schema Lint, which is using ajv ^5.0.0 accept this schema? Why is it not accepted when I use ^5.0.0.\nI can alter the schema that is not the big deal. But I want to understand why this might happen. Just out of curiosity. \nAnd thanks for your reply! . ",
    "sbwfnyiiiu": "Hello, I have uploaded the \"npm ls\" output, please see the a.txt file\na.txt\n. I have tried on maccOS, ununtu 16.04. and always get the same result, \n...........\nnpm ERR! peer dep missing: ajv@^6.0.0, required by ajv-keywords@3.1.0\nnpm ERR! peer dep missing: ajv@^6.0.0, required by ajv-keywords@3.1.0. This happened when installing Angular/CLI, if downgrade the following  3 packages, seems to ok\najv-keywords v2.1.1,\nschema-utils: v0.4.3,\nwebpack: v0.4.3 ,\nbut when you run \"ng new NewProject\", the problem comes again, you have to manualy downgrade everytime when create new project.. ",
    "dputtick": "For reference, I think this might be an npm bug - seeing this problem with npm@5.3.0 and npm@3.10.10, but not with npm@5.6.0 or npm@2.15.11.. ",
    "jafin": "~~@dputtick thanks,  was on NPM 5.5.1 receiving this error, moving to npm@5.6.0 removed the ajv-keywords WARN.~~\nEDIT: Sorry must of been in placebo land, still happening. \ud83d\udc4e \n. ",
    "JACrazy": "@dputtick Weird, I still get the WARN on npm@5.6.0 and I even updated to npm@5.7.1 and still get it.. ",
    "bilegochir": "same error for node 8.9.4 and npm 5.7.1. ",
    "kurniawanw0194": "Same error for node 9.8.0 and npm 5.7.1. ",
    "WraithKenny": "...\n\u2502 \u251c\u2500\u2500 UNMET PEER DEPENDENCY ajv@6.2.1\n\u2502 \u251c\u2500\u2500 ajv-keywords@3.1.0\n...\nnpm ERR! peer dep missing: ajv@^6.0.0, required by ajv-keywords@3.1.0. This is fixed by adding ajv in your project. The problem is almost certainly with npm itself.. ",
    "silencieuxle": "Is the ajv required by every package? Cause I'm using react and everytime I install any package it tell me that ajv-keywords requires ajv to be installed. Annoying!!!!!. ",
    "eholland7080": "Hello everyone, if you are experiencing this issue (npm ERR! peer dep missing: ajv@^6.0.0, required by ajv-keywords@3.1.0) after using create-react-app and trying to npm install any package,  it is because ajv-keywords has devDependencies and peerDependencies on ajv ^6.0.0, but what is installed (assuming as part of the create-react-app process) is ajv 5.5.2.  So \"A\" way to resolve (work around) is to change those two lines in the ajv-keywords package.json from 6.0.0 to 5.5.2.  I did that and now I can npm install any package in my create-react-app .  Hope this helps.... @epoberezkin thank you!  how would you recommend as to the best way to upgrade ajv to 6.x?  I understand how I would do it if I had installed ajv myself using npm install.  not sure how I should do it if ajv was installed automatically by a tool like react-create-app.  learning a lot but still a little new so any direction / instructions you can give would be greatly appreciated.  thank you.... @silencieuxle are you still seeing this issue when using react?  if you're not, what did you do to fix?. We suggest that you begin by typing:\ncd my-app\n  npm start\nHappy hacking!\nErics-MacBook-Pro:prototype ericholland$ cd my-app/\nErics-MacBook-Pro:my-app ericholland$ npm list --depth 0\nmy-app@0.1.0 /Users/ericholland/Documents/work/development/react/prototype/my-app\n\u251c\u2500\u2500 react@16.3.0\n\u251c\u2500\u2500 react-dom@16.3.0\n\u2514\u2500\u2500 react-scripts@1.1.1\nnpm ERR! peer dep missing: ajv@^6.0.0, required by ajv-keywords@3.1.0\nErics-MacBook-Pro:my-app ericholland$ . @epoberezkin thank you!  thats good information there.  based on those comments looks like it is a problem with npm 3+ ?  so not sure what to do in the interim between now and when the npm folks fix the issue.. @epoberezkin using yarn now and the specific issue above does not occur. \nthank you\nEric. ",
    "MohammadShojaeinia": "Yeah you're right, but in this situation I need this pattern checking and\nmatching. Any idea why it does not work? Thanks a lot.\nOn Tue, Feb 20, 2018 at 7:11 PM, Jared Evans notifications@github.com\nwrote:\n\nsorry for butting my nose in, but you really shouldn't try matching an\nemail address with a regex... take a look at the wikipedia entry on email\naddresses to see why.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/epoberezkin/ajv/issues/710#issuecomment-367018386,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ARwDNkXZjavDUviU_CyhYwMa-c9uMeuIks5tWue8gaJpZM4SMGYv\n.\n. Eureka! Eureka!\nI got it. I should use \"format\":\"email\" to do that for me.\n\nThanks a lot.\nOn Tue, Feb 20, 2018 at 9:48 PM, Mohammad Hossein Shojaeinia \nmhs.shojaeinia@gmail.com wrote:\n\nYeah you're right, but in this situation I need this pattern checking and\nmatching. Any idea why it does not work? Thanks a lot.\nOn Tue, Feb 20, 2018 at 7:11 PM, Jared Evans notifications@github.com\nwrote:\n\nsorry for butting my nose in, but you really shouldn't try matching an\nemail address with a regex... take a look at the wikipedia entry on email\naddresses to see why.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/epoberezkin/ajv/issues/710#issuecomment-367018386,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ARwDNkXZjavDUviU_CyhYwMa-c9uMeuIks5tWue8gaJpZM4SMGYv\n.\n\n\n. \n",
    "btd": "hi again, sorry for some silence - i was need to finish prerequsite tasks.\nI was experimenting with such snippet:\n```js\n\"use strict\";\nconst Ajv = require(\"ajv\");\nconst SCHEMA = {\n  type: \"object\",\n  properties: {\n    lang: {\n      default: \"en\",\n      type: \"string\"\n    },\n    manual: {\n      type: \"string\"\n    }\n  },\n  additionalProperties: false,\n  required: [\"manual\"]\n};\nconst ajv = new Ajv({ allErrors: true });\najv.removeKeyword(\"default\");\najv.addKeyword(\"default\", {\n  compile(value, parentSchema) {\n    //console.log(\"VALUE\", value);\n    //console.log(\"parentSchema\", parentSchema);\n    return (data, currentDataPath, parentDataObject, propertyName, rootData) => {\n      console.log(\"data\", data);\n      //console.log(\"currentDataPath\", currentDataPath);\n      //console.log(\"parentDataObject\", parentDataObject);\n      console.log(\"propertyName\", propertyName);\n      //console.log(rootData);\n      if (value === data) {\n        delete parentDataObject[propertyName];\n      }\n      return true;\n    };\n  },\n  modifying: true,\n  errors: false\n});\nconst validate = ajv.compile(SCHEMA);\nconst json = { manual: \"\", lang: \"en\" };\nconsole.log(\"BEFORE\", json);\nvalidate(json);\nconsole.log(\"AFTER\", json);\n```\nThis script output such log:\n$ node test.js\ndata [ 'manual' ]\npropertyName required\ndata false\npropertyName additionalProperties\ndata { default: 'en', type: 'string' }\npropertyName lang\ndata { type: 'string' }\npropertyName manual\ndata { lang: { default: 'en', type: 'string' },\n  manual: { type: 'string' } }\npropertyName properties\ndata { type: 'object',\n  properties:\n   { lang: { default: 'en', type: 'string' },\n     manual: { type: 'string' } },\n  additionalProperties: false,\n  required: [ 'manual' ] }\npropertyName undefined\nBEFORE { manual: '', lang: 'en' }\ndata en\npropertyName lang\nAFTER { manual: '' }\nSo it looks keywords used when schema compiled. Can you please suggest me if i can break anything internally in ajv, when i override 'vanialla' keywords?\n. Sorry another question. If i use nested objects, i will get empty object, like:\njs\nconst SCHEMA = {\n  type: \"object\",\n  properties: {\n    lang: {\n      default: \"en\",\n      type: \"string\"\n    },\n    manual: {\n      type: \"string\"\n    },\n    texts: {\n      type: \"object\",\n      properties: {\n        en: {\n          type: \"object\",\n          properties: {\n            k1: {\n              type: \"string\",\n              default: \"a\"\n            }\n          }\n        }\n      }\n    }\n  },\n  additionalProperties: false,\n  required: [\"manual\"]\n};\nand i get:\nAFTER { manual: '', texts: { en: {} } }\nHow can i remove this?\nI am thinking i could just check in addKeyword that parentDataObject is empty. But how to convert string path to array of property names (and why it is not array really?) and just got by each path to remove each empty object.. Sorry for being noisy. I used json pointers to clear data path if empty object occurred at keyword function:\n```js\nconst ajv = new Ajv({ allErrors: true, jsonPointers: true });\nfunction isEmptyObject(obj) {\n  if (obj == null || typeof obj !== \"object\") return false;\nfor (const prop in obj) {\n    return false;\n  }\nreturn true;\n}\nfunction clearEmptyPath(obj, path) {\n  const parentObjects = [];\n  let _obj = obj;\n  for (let i = 0; i < path.length - 1; i++) {\n    parentObjects.push(_obj);\n    _obj = _obj[path[i]];\n  }\nfor (let i = path.length - 2; i >= 0; i--) {\n    if (isEmptyObject(parentObjects[i][path[i]])) {\n      delete parentObjects[i][path[i]];\n    }\n  }\n}\najv.removeKeyword(\"default\");\najv.addKeyword(\"default\", {\n  validate(value, data, parentSchema, currentDataPath, parentDataObject, propertyName, rootObject) {\n    if (value === data) {\n      delete parentDataObject[propertyName];\n      // parent object is empty\n      if (isEmptyObject(parentDataObject)) {\n        clearEmptyPath(rootObject, pointer.parse(currentDataPath));\n      }\n    }\n    return true;\n  },\n  modifying: true,\n  errors: false\n});\n```. ",
    "wla80": "Hello @epoberezkin , thanks for your feedback. By reading the paragraph, I thought null is one of the property. Sorry about this. Please let me know if my newest revision is inappropriate. . ",
    "kmathmann": "Same behavior.\nI used the same code, its the example from the $data documentation but instead of maximum i used exclusiveMaximum . \nThe only difference between my and HugoMuller's code is the \"$async\": true that i don't have.\nI use version 6.2.0 too.",
    "abdallahkadour": "Yes I know, I have just removed the other if statement. But could you please explain me why the data is valid against the schema in if. Since the variable code !== \u201801\u2019 or \u201802\u2019.. That is the point. The empty object should be valid. But I get the error.... Since the variable code is not  \u201801\u2019 the variable reason should not be required. But when the variable \u2018code\u2019 is missing, I expect that the variable reason should not be required.. Ok thank you.. ",
    "chintankshah": "Thanks @epoberezkin. I figured the same thing. Just had to add person to required in the schema object and it worked. Thanks for quick reply.. ",
    "philippefutureboy": "Thanks for the info!. ",
    "thejuan": "anyOf seems to be doing the same. I have coerceTypes enabled. I would expect AJV to try all types before trying coercion.\n. ",
    "Nehon": "Digging a bit more into it, it's seems not as straight forward as I thought.\n'typeof' on a TypedArray return 'object' which with hindsight makes a lot of sense.\nThe only way I could check the type is using the \"instanceof\" keyword on the specific type (cannot test instanceof TypedArray).\nSo basically you'd have to check against all TypedArray sub types... \nI realise I could declare my arrays as objects in the Json Schema, but I feel like it'd become very cumbersome.. ",
    "dcolthorp": "If it's helpful (or anyone else is interested), here's what we're doing to work around this issue currently:\n``ts\nexport function buildValidator<T>(ref: string): ValidateFunction<T> {\n  // we previously usedaddSchemato definemy-schema.jsonreturn ajv.compile({\n    $ref:my-schema.json#/definitions/${ref}`\n  });\n}\nexport interface ValidateFunction extends Ajv.ValidateFunction {\n  _t?: T; // stop linter from complaining about unused T variable\n}\nfunction isValid(\n  validator: ValidateFunction,\n  candidate: any\n): candidate is T {\n  return validator(candidate) === true;\n}\nconst validateFoo = buildValidator<{foo: number}>(\"asdf\");\nconst y: any = {};\nif(isValid(validateFoo, y) {\n  y // is treated as a {foo: number} here.\n}\n```. Hi @epoberezkin,\nI'm not looking for AJV to generate types or for any change to the run-time behavior of AJV or even the existing TypeScript API. I'm hoping we can enhance AJV's built-in typescript types to enable users opt into better leveraging AJV as a way to generate type testing functions, which is ultimately what JSON schema is all about.\nTypeScript supports a few features that are particularly relevant here:\n\nType Guards enable users to encode in the type of a function that it is a predicate that proves a value is a valid instance of some type. I'd like a way to invoke AJV which returns a validation function which is a type guard for a type which I provide. (The data is T bit from my example compile type signature above)\nA generic type definition for AJV would let users pass in a TypeScript type that corresponds to their schema at the time the schema is compiled, and TypeScript would henceforth know that that particular AJV validation function is a validator for the specified type. (ValidationFunction<T> above)\nA generic parameter default is one way we might be able to introduce this change without breaking the API for users who are not providing a TypeScript type. Another option may be providing an overload.\n\nThe two changes I suggested in my original message in this issue show an example of how that could be structured.\nWith those changes, I'd expect to be able to do the following:\n``ts\nconst isPerson = ajv.compile<Person>(\"person.schema.json\");\n// isPerson is a type guard that proves it's argument is a Person.\n// The return type of isPerson(data) isdata is Person`\nif (isPerson(someData)) {\n  // TypeScript type checks someData as a Person in this block\n  alert(${someData.firstName} ${someData.lastName});\n} else {\n // TypeScript knows that someData is not a person in this block;\n}\n```\nI believe these changes can be made a) without breaking the current TypeScript API, b) without changing any runtime behavior in AJV, and c) without adding additional machinery to e.g. generate types. This change is merely about better modeling the existing behavior of AJV with TypeScript's type system.\nIt's worth noting that there's nothing stopping users from inventing this machinery themselves. The workaround I posted in my follow-up message provides all of the same capabilities. However, this does seem like it should be a part of AJV, as the primary reason for using AJV is to check that data matches the set of contstraints for some type, so they can know they have a valid instance of that type. This is exactly what a type guard in TypeScript are for, so this seems like a more natural way to model validation functions in TypeScript.\nDoes this clarify the nature of the request? I'm happy to provide additional clarification as necessary.\nAlso, do you have concerns about making such a change? From my outside perspective, it seems like a win for users that is in the spirit of what AJV is already designed to do, but perhaps there are potential concerns I haven't considered.. ",
    "AndrewO": "I had this exact idea yesterday, so I'm glad I checked the issues first and found this. I agree with @dcolthorp that this seems like something that should be able to be done with no runtime changes or additional layers. But so far, I've been a bit confounded by the existing return type of ValidationFunction. I haven't found a good way of making it act as a type guard when called one way or a Promise returning function in another.\nAnother complication is that, as I read this at least, type guards need to be on the function declaration proper, and not just on the type definition due to the fact that they're contextually typed. I'm wondering if this is just a matter of generating some JSDoc or commented type annotations in the compiled function? That would be a slight runtime change, but I don't think it would be noticeable.\nHere's a TypeScript Playground link.\nHere's the final form of that experiment:\n```ts\ntype Validator4 =\n    T extends void ? (data: any) => boolean :\n    T extends Promise ? (data: any) => T :\n    (data: any) => data is T;\n// Example guard functions\nconst isStringBool = ((data: any) => typeof data === \"string\");\nconst isString = >((data: any) => typeof data === \"string\");\nconst eventuallyValidate = >>\n    ((data: any) => typeof data === \"string\" ? Promise.resolve(data) : Promise.reject())\n```\nSomething like this might work for ValidateFunction, but in trying to figure out how to get it to check, I may have strayed a bit from how people actually use AJV.\nA simpler interface would probably be easier to type check, so I might be leaning toward a smaller wrapper for TypeScript users with fewer union return types, either as an alternate interface or maybe a separate package.\nBut either way, having the compiled code generate an annotation (so that it could be more easily imported) would probably be a good idea (although that's probably a different ticket).. ",
    "shijiansu": "npm ls\nshell\n`-- ajv@6.3.0\n  +-- fast-deep-equal@1.1.0\n  +-- fast-json-stable-stringify@2.0.0\n  `-- json-schema-traverse@0.3.1\nThere is no other devDependencies in the project.\nOh, I retried and I noticed something:\nBelow code is working prefectly:\njavascript\nconst Ajv = require('ajv');\nconst ajv = new Ajv();\nfunction test() {\n    console.log('[test]')\n    const schema = {\n        \"$id\": \"http://example.com/example.json\",\n        \"type\": \"object\",\n        \"definitions\": {},\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        \"properties\": {\n          \"id\": {\n            \"$id\": \"/properties/id\",\n            \"type\": \"integer\",\n            \"title\": \"The Id Schema \",\n            \"default\": 0,\n            \"examples\": [\n              1\n            ]\n          }\n        }\n      }\n    const data = {\n        \"id\": 1000\n      }\n    const valid = ajv.validate(schema, data);\n    console.log('valid:', valid)\n    if (!valid) {\n        console.log(validate.errors);\n    }\n}\ntest()\nBut below code is not, showing the warning message,\n```javascript\nconst fs = require('fs');\nconst path = require('path');\nconst Ajv = require('ajv');\nconst ajv = new Ajv();\nfunction test() {\n    console.log('[test]')\n    const schema = readJson('example.json');\n    const data = readJson('example_schema.json');\nconst valid = ajv.validate(schema, data);\nconsole.log('valid:', valid)\nif (!valid) {\n    console.log(validate.errors);\n}\n\n}\nfunction readJson(fileName) {\n    return JSON.parse(fs.readFileSync(path.resolve(__dirname, './' + fileName), 'utf8'));\n}\ntest()\n```\nexample.json\njson\n{\n  \"id\": 1000\n}\nexample_schema.json\njson\n{\n  \"$id\": \"http://example.com/example.json\",\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"id\": {\n      \"$id\": \"/properties/id\",\n      \"type\": \"integer\",\n      \"title\": \"The Id Schema \",\n      \"default\": 0,\n      \"examples\": [\n        1\n      ]\n    }\n  }\n}. Yes, you are right! Thank you for pointing out this sloppy mistake~. ",
    "aschmach": "Hey I'm relatively new to coding and experiencing a similar error. Could you help me by pointing out what's causing the error in the above example? I would greatly appreciate it!. Thank you. ",
    "jehy": "Just in case someone else encounters this error - I spent several hours before I understood that I had id on top level of schema and not in properties.. ",
    "Drax35c2db": "@epoberezkin This bug actually exist with the following code (tested with Ajv v6.6.1)\n```javascript\nconst Ajv = require('ajv');\nconst ajv = new Ajv(});\najv.compile({\n  \"$id\": \"http://mydomain/schemas/node.json\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"description\": \"The unique identifier for a node\",\n      \"type\": \"string\"\n    },\n  },\n  \"required\": [ \"id\"],\n  \"example\": {\n    \"id\": \"test\"\n    }\n});\nThis outputs:\nschema id ignored test\n```\n. ",
    "nbankin": "I never intended to modify current flags/keywords. I was thinking of introducing a new one trimValues for example which can be applied to the Validator instance and will work for all string fields or be applied to specific fields if you want to enable/disable it for a particular field.\nI saw #705 but I have complex scheme and adding allOf on every field will double or triple my schema and add a lot of boilerplate to it. I was searching for a simpler solution.. ",
    "msforest": "@willfarrell thank you, I already have solved. ",
    "fogine": "Also this issue applies for dataset:\n```javascript\nlet data = {\n    contributors: JSON.parse(JSON.stringify(obj))\n};\n``. note: I see now thatdefaultproperty value is serialized becauseajvoptionserializeis not set tofalse.... Hmm, when thinking about it, it would be againstjson-schemaspecs to allow string value foradditionalPropertieskeyword. Thats not acceptable.  \nFor the time being will solve it by custom keyword. Would be nice to have the functionality build-in though because it would not introduce hassle with wrapping schema into {allOf: []} to make sure custom keywords are run first.. My apologies, at first I didn't realize that described behavior applies when AjvremoveAdditional=trueconstructor option is set.  \nOne, not really sensible way to solve it is by creating another ajv instance withremoveAdditional=falsealthough in my case its not possible. I'm developing a plugin for a generic library which uses singleAjvinstance for validation (makes sense). The plugin delegates validation to the parent library and in specific case I'd like to overwriteremoveAdditional=truebehavior so that it behaves likeremoveAdditional=false`...  \nI'm proposing a feature that would allow to set removeAdditional=false on schema level and overwrite validator instance default behavior.  \n```javascript\nconst Validator = require('ajv');\nconst validator = new Validator({\n    removeAdditional: true\n})\nconst result = validator.validate({\n    type: 'object',\n    additionalProperties: false,\n    removeAdditional: false,\n    properties: {\n        prop1: {type: 'string'}\n    }\n}, {prop2: 'val'});\n``` \nthe above example would fail with error \n\nshould NOT have additional properties. \n",
    "ESRogs": "Hmm. I found this behavior very surprising, but it does seem to match this part of the spec, so I guess you're right.\n\n3.2.1.  Assertions and Instance Primitive Types\nMost validation assertions only constrain values within a certain\n   primitive type.  When the type of the instance is not of the type\n   targeted by the keyword, the instance is considered to conform to the\n   assertion.\n\nhttps://tools.ietf.org/html/draft-handrews-json-schema-validation-00#section-3.2.1. ",
    "teppeis": "@epoberezkin yes, exit with an error is yarn's expected behavior (and it has --ignore-engines option for the workaround).\nBut also npm shows warning.\nhttps://travis-ci.org/epoberezkin/ajv/jobs/358014029#L462\nAnyway, punycode (and uri-js) dropped support for Node v4.\nhttps://github.com/bestiejs/punycode.js/pull/48\nBut according to README, ajv supports Node.js 0.10+.\n\nsupports browsers and Node.js 0.10-8.x. \n",
    "bradleyayers": "\nIt should be in the next major version then.\n\nI've amended the comment to include BREAKING CHANGE.. ",
    "thomasgwatson": "Yay, thanks for this. ",
    "CrispusDH": "any updates?. ",
    "debabrata100": "@epoberezkin Thanks for your reply. I got a solution for the issue.. ",
    "sabrehagen": "Added in #872 . ",
    "lukehedger": "Ah ok great - that makes sense. Are $data references maintained by these subschemas?\nSo the above example becomes:\njson\n{\n  \"properties\": {\n    \"username\": {\n      \"type\": \"string\"\n    },\n    \"userId\": {\n      \"type\": \"integer\",\n      \"lookup\": {\n        \"endpoint\": \"http://example.com/users\",\n        \"subschema\": {\n          \"title\": \"Lookup\",\n          \"type\": \"object\",\n          \"properties\": {\n            \"username\": {\n              \"const\": {\n                \"$data\": \"/username\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\njs\nconst lookup = (schema, data) => {\n  return fetch(`${schema.endpoint}/${data}`)\n    .then(res => res.json())\n    .then(json => {\n      return ajv.compile(schema.subschema)(json)\n    })\n}. ",
    "zsolt-dev": "Thank you.\nwas searching in the docu and issues menu for 30 minutes.\nThank you again\n. ",
    "zmullett": "Yes, I can confirm \"data.bar === undefined\" returns true here.. This looks to be a combination of two factors: 1) the generated validation function's interface takes advantage of the passing-by-reference of data, and 2) the IPC between Electron main/renderer processes assumes immutability of function inputs. There's a fairly simple hack to make this work (wrapping the validate function, explicitly returning the data mutated within this 'main' process), so feel free to close this issue now, unless you feel it's worth crafting some alternate function signature for this obscure use case :). ",
    "rolandjitsu": "@epoberezkin the issue is described in the create-react-app readme I referenced, the error is just a simple message.\nIt started happening after I added this lib as dep, so I investigated and figured out that adding the module property to this lib's package.json fixes it (as the create-react-app suggested it would).\nAfter digging deeper, I discovered it is caused by the uri-js dependency that this lib has (lib/compile/resolve.js#L3).\nFor some reason, create-react-app uses the esnext from uri-js and it fails.\nAdding the module prop to this lib's package.json seemed to have fixed the problem during build, but perhaps I should open an issue on the uri-js side or create-react-app.\n. I've just tried it out and the issue doesn't occur if I use 6.3.0.\nIt's a bit strange though, because the uri-js's main points to a compatible commonjs source, but for some reason, create-react-app picks up the other source (the esnext).\nI'll investigate further and keep you updated.\nIn any case, it might be a better idea if this package's main points to the dist ajv.bundle.js instead of the source in lib (because the bundle is compatible with both nodejs and common js envs). Or add a {\"browser\": \"dist/ajv.bundle.js\"} property which points to the bundle.. @epoberezkin Most likely yes, I will create a repo and report it.\nI agree with that the main should still point to the source, but adding the browser property is actually helpful for build systems that look for a bundle that's compatible in the browser. Check the specs for it.. ",
    "one19": "Just to chime in: we're using ajv in very standard webpacked and babeled environment.  The uri-js version used ends up importing with argument spread. It's a bit wild that the only module we need to include in transpilation is uri-js because of ajv and its incompatibility with ie11. Is anyone looking at this issue at the moment?\nuri-js has 2 open issues at the moment, both pertaining to this, but they haven't budged either in the 24 days the issue has been open.\nJust wanted to chime in, and say that this isn't just a create-react-app issue, it's a bit more widespread for anyone wanting interop with ie11. ",
    "Steffan-Ennis": "I would like this fixed too. I have to include /node_modules\\/uri-js/ in my webpack javascript rule when consuming this library. . ",
    "Punji": "Gary just released uri-js@^4.2.2 to fix this issue:\nhttps://github.com/garycourt/uri-js/issues/24\nCan you please update Ajv to use it?\n. Thanks for the tip @epoberezkin, Ajv is working fine with create-react-app now!. ",
    "jwalton": "(Tested on my local project via npm link). ",
    "Hsueh-Jen": "I change code ofwebpack.base.babel.js and it works.\nI add include: /node_modules/, in json-loader config to solve this problem. Thank you.\njsx\n{\n  test: /\\.json$/,\n  include: /node_modules/,\n  loader: 'json-loader',\n}. ",
    "vivekgalatage": "Thank you! The json-source-map works great for my requirement. :-). ",
    "DeepTom": "@vivekgalatage , Do you have any small example to share how you used json-source-map for custom errors.. ",
    "the-t-in-rtf": "Thanks for the explanation.  I was getting confused by the wording in the other ticket about \"returning from schema in it after the first error\".  I had to negate that in my head to understand that you meant that as soon as the validated material fails to match one of the rules in the not block, that check has succeeded.  I'll close this one out, as I now understand that all you can do is give me the information that's there.. ",
    "Vadorequest": "@epoberezkin My understanding was that anyOf/oneOf were for known values, can I use them in this case? I can allow '' but I don't know what's the URI that is gonna be used. If you have an example it'd be great! Thanks :). Indeed, it's one way to go:\nyaml\n  optionalUri: &optionalUri\n    anyOf:\n    - type: string\n      maxLength: 0\n    - type: string\n      format: uri. Just ran into the same issue, beware you need to update ajv-error-messages as well if you're using it, but it hasn't been updated yet.... ",
    "cvlab": "callValidate https://github.com/epoberezkin/ajv/blob/e88e5f53d71e11f94898fb9f7fe8bd0b0bd43692/lib/compile/index.js#L72\nif { passContext: true } callValidate is called as\nif (!refVal1.call(this, data.resources, ...\nif { passContext: false } callValidate is called as\nif (!refVal1(data.resources, ...\ncallValidate is always called in this way?\nIf yes, then inside callValidate, this is always undefined when passContext is false\nmy guess is safe to change var result = validate.apply(null, arguments); to var result = validate.apply(this, arguments);, null or undefined is the same for apply (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply#Parameters)\n. Ok. @epoberezkin Changes in ref.jst are optional. Idea is that in this code \n```javascript\n{{## def._validateRef:_v:\n  {{? it.opts.passContext }}\n    {{=_v}}.call(this,\n  {{??}}\n    {{=_v}}(\n  {{?}}\n    {{=$data}}, {{# def.dataPath }}{{# def.passParentData }}, rootData)\n}}\n``\nI want to make, that ifpassContextisfalse({{=_v}}(part) to sendundefinedasthis. This is optional, because, I think, called function anyway do not usethisvar, but it will be good thatthiswill beundefinedwhenpassContextisfalse`.\nCompiled sync function looks like this\njavascript\nif (!refVal1(data.resources, (dataPath || '') + '.resources', data, 'resources', rootData)) {\n...\n}\nor\njavascript\nif (!root.refVal[0](data[i0], (dataPath || '') + '[' + i0 + ']', data, i0, rootData)) {\n...\n}\nin second case, to function will be sent root.refVal as this, but it will be good to be undefined\nChanges in ref.jst copile sync function in this way\njavascript\nvar $refCodeFn = root.refVal[0];\nif (!$refCodeFn(data[i0], (dataPath || '') + '[' + i0 + ']', data, i0, rootData)) {\n...\n}\nand now function is called with undefined this. Anyway this is optional.. I checked all functions that are called from this line, none are using this var when passContext is false.\nI changed PR, now it's without ref.jst. Thank You!. ",
    "markcmueller": "Thanks for your help, Evgeny.  I can see that the code runs correctly in runkit.   Nevertheless the if/then/else logic is skill skipped when I run locally with an app I created using \u2018npx create-react-app\u2019.  Npm list shows only the latest version of ajv.\nnpm list\n/Users/Mark/React\n\u251c\u2500\u252c ajv@6.4.0\n\u2502 \u251c\u2500\u2500 fast-deep-equal@1.1.0\n\u2502 \u251c\u2500\u2500 fast-json-stable-stringify@2.0.0\n\u2502 \u251c\u2500\u2500 json-schema-traverse@0.3.1\n\u2502 \u2514\u2500\u252c uri-js@3.0.2\n\u2502   \u2514\u2500\u2500 punycode@2.1.0\n\u251c\u2500\u2500 json-loader@0.5.7\n\u251c\u2500\u252c json-pointer@0.6.0\n\u2502 \u2514\u2500\u2500 foreach@2.0.5\n\u251c\u2500\u2500 json-schema@0.2.3\n\u2514\u2500\u2500 jsonschema@1.2.4\nOff the top of your head can you think of anything that might be going wrong?   I\u2019ve scoured the web for hours without finding a clue.\nMark\nFrom: Evgeny Poberezkin notifications@github.com\nReply-To: epoberezkin/ajv reply@reply.github.com\nDate: Thursday, April 26, 2018 at 5:05 PM\nTo: epoberezkin/ajv ajv@noreply.github.com\nCc: \"Mueller, Mark\" Mark.Mueller@LibertyMutual.com, Author author@noreply.github.com\nSubject: Re: [epoberezkin/ajv] If/then/else doesn't seem to work correctly (#770)\nSee https://runkit.com/esp/5ae23d12d0320b001260cdb3\nYou must be running some old version that doesn't have if/then/else, as otherwise explicitly adding draft-07 meta-schema would throw an exception.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/epoberezkin/ajv/issues/770#issuecomment-384788342, or mute the threadhttps://github.com/notifications/unsubscribe-auth/Ak-MLwQ3yef7KvldJgbxXjsilJ58NQZ9ks5tsjY5gaJpZM4TnhJk.\n. FYI,\najv test -s schema.json -d testjson.json \u2013-invalid.   Works correctly.\nRunkit works correctly.\nBut running using npm gives me:\nError: no schema with key or ref \"http://json-schema.org/draft-07/schema#\"\nEven though I can\u2019t see how I could be getting the wrong version of ajv.\nMark\nFrom: Evgeny Poberezkin notifications@github.com\nReply-To: epoberezkin/ajv reply@reply.github.com\nDate: Thursday, April 26, 2018 at 5:05 PM\nTo: epoberezkin/ajv ajv@noreply.github.com\nCc: \"Mueller, Mark\" Mark.Mueller@LibertyMutual.com, Author author@noreply.github.com\nSubject: Re: [epoberezkin/ajv] If/then/else doesn't seem to work correctly (#770)\nSee https://runkit.com/esp/5ae23d12d0320b001260cdb3\nYou must be running some old version that doesn't have if/then/else, as otherwise explicitly adding draft-07 meta-schema would throw an exception.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/epoberezkin/ajv/issues/770#issuecomment-384788342, or mute the threadhttps://github.com/notifications/unsubscribe-auth/Ak-MLwQ3yef7KvldJgbxXjsilJ58NQZ9ks5tsjY5gaJpZM4TnhJk.\n. Thank you for all your help, Evgeney!   I have it working.  My problem was that I was using create-react-app and did not want to use yarn, but now it works.\nMark\nFrom: Evgeny Poberezkin notifications@github.com\nReply-To: epoberezkin/ajv reply@reply.github.com\nDate: Saturday, April 28, 2018 at 6:34 AM\nTo: epoberezkin/ajv ajv@noreply.github.com\nCc: \"Mueller, Mark\" Mark.Mueller@LibertyMutual.com, Author author@noreply.github.com\nSubject: Re: [epoberezkin/ajv] If/then/else doesn't seem to work correctly (#770)\nAlso, look at the full npm ls output - there can be two versions...\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/epoberezkin/ajv/issues/770#issuecomment-385163879, or mute the threadhttps://github.com/notifications/unsubscribe-auth/Ak-ML2Ik403Mz0Sos1O-1gFxsP4SfzK6ks5ttEVkgaJpZM4TnhJk.\n. ",
    "skn3": "Hey there thanks for replying. Although default value only works when the value does not already exist in the json. What if we want to override a value?\nI could apply an enum to the property, but this will fail validation. What If I simply want to always force that property to be \"1\"?\nOr does it fallback to default value when validation fails?. I have a use case where one might want this:\nIf property \"mode\" = \"bad\" then we force property \"option\" to \"false\".\nelse If property \"mode\" = \"good\" then we force property \"option\" to whatever is defined in json, or fallback to default \"false\".. ",
    "NoCopy": "I did look at the options but as docs clearly state it will log warnings or throw exceptions on either of these items no matter what. Defining a specific logger only produces the warning in a different logger unless I would transform it.\n\n\"$id\" (default) - only use $id keyword as schema URI (as specified in JSON Schema draft-06/07), ignore id keyword (if it is present a warning will be logged).\n\"id\" - only use id keyword as schema URI (as specified in JSON Schema draft-04), ignore $id keyword (if it is present a warning will be logged).\n\"auto\" - use both $id and id keywords as schema URI. If both are present (in the same schema object) and different the exception will be thrown during schema compilation.\n\nI am simply removing the id before validation now which I guess is the proper \"valid\" way of doing it anyways. Unfortunately, the DB requires \"id\" and it would be nice to suppress this particular as this is a common scenario; purely speculation but I am guessing that's one of the JSON Schema group made the change from id > $id in the first place.\nThat said, this is a fantastic library and quite frankly I wish I found it / used it some time ago. I do appreciate the hard work.. ",
    "ORESoftware": "tbh, perhaps a bad API decision, but it's too late, enjoying the library otherwise, thx. Got it, yeah I guess this usage is better:\njs\nvar ajv = new Ajv(); \nvar validate = ajv.compile(schema);  // can throw\nvar valid = validate(data); // only returns boolean\nas opposed to:\njs\nvar ajv = new Ajv(); \najv.validate(schema,data);\n. For reference here are the options that I do see:\n\n. crap, I forgot to create a new instance of Ajv(). my fault.\nbut perhaps compile can be a static method on ajv, idk.. ",
    "jota3": "My mistake, call to the validate function was wrong.  \nvar validate = ajv.compile(schema);\nvar valid = validate(schema, data);\nThanks. . ",
    "Legends": "Won't use it, easy as that... thanks for your support. ",
    "gregglind": "I have!  I appreciate you taking the time to explain it.  \nI use the 'schemas' key for instantiation in some projects. Refs within the same file are also confusing.  I realize this is an obscure / advanced use case.  \nPerhaps I need to look at how one of the 'deref' packages works, and write it out!. ",
    "swtarmey": "Seems you are correct.  On runkit it works fine when I define the object passed to validate.  The only difference I see is that in my code I am passing req.body to the validate method that is coming on the post.  Thanks for the quick response.. Should have done more investigating prior to posting here.  That specific API call mistakenly specified the body content as text instead of JSON.  That was the problem.  Sorry to waste your time man.. ",
    "Aleksandras-Novikovas": "Actually validating did not issue this warning.\nWarning issued by following console.log(data) (not present in code).\n. ",
    "Hirntoasted": "Works like a charm! Many thanks!. ",
    "Sutikshan": "Hi @sepehr500 Did u get your schemas ref each other correctly. I am trying following but still getting Ref Missing error by ajv.\nMy schemas are\n```\npersonal-info.json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"title\": \"Personal Info\",\n  \"description\": \"PersonalInfo defines a Personal Info payload, describing customer details for kyc purposes.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"name\"\n  ],\n  \"properties\": {\n    \"name\": {\n      \"$ref\": \"../common/restricted-name.json\"\n    },\n}\n}\n// restricted-name.json in relative folder as mentioned above \n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"title\": \"RestrictedName\",\n  \"description\": \"RestrictedName defines a restricted name.  It is considered restricted as it does not include the non-editable field 'lastName'\",\n  \"type\": \"object\",\n  \"required\": [\n    \"title\",\n    \"firstName\"\n  ],\n  \"properties\": {\n    \"title\": {\n      \"type\": \"string\"\n    },\n    \"firstName\": {\n      \"type\": \"string\",\n      \"maxLength\": 40\n    },\n    \"middleNames\": {\n      \"type\": \"string\",\n      \"maxLength\": 40\n    }\n  }\n}\nconst restrictedName = require('activation/common/restricted-name.json');\nconst personalInfoSchema = require('activation/personal-info/personal-info.json');\najv.addSchema(restrictedName, 'restricted-name').compile(restrictedName);\najv.addSchema(personalInfoSchema, 'restricted-name').compile(personalInfoSchema);\n```. ",
    "sepehr500": "@Sutikshan I ended up using https://github.com/BigstickCarpet/json-schema-ref-parser to deref, then passing it into ajv.. ",
    "jstewmon": "I'm not sure that this is the exact change necessary :-)\nI used a debugger with ajv-merge-patch to find that the difference between omitting/providing an $id is that the block is entered when an $id is given b/c refPath is always # for an internal ref and baseId will be # when $id is omitted.\nI also observed that root.schema is empty when resolveSchema is eventually called by getSchema in the macro.\nMy first attempt at resolving the issue was to check whether baseId === '#' || refPath !== baseId, but that resulted in some failing tests.\nSo, I debugged some additional tests and observed that root may be an instance of SchemaObject. That led me to try this fix, which passed all current tests as well as the case where getSchema is called in a macro with an internal ref.\nI'm not very familiar with the internals, so I'm open to investigating further. Do you have any ideas that I could leverage to look for an alternate fix?. Changing to Object.keys(root.schema).length === 0 || refPath !== baseId also fixes the test and only increases the block entrances from 241 to 249 in the fast test suite. The instanceof check raises the block entrances to 4397.\nI'll update the PR to reflect this, and we can go from there. . Also, if you think this is an appropriate fix but want to optimize the empty check, I can add an objectIsEmpty method to util as follows:\njs\nfunction objectIsEmpty(o) {\n  for (var key in o) {\n    if (o.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\nThat may help preserve Ajv's edge in the benchmarks for larger schemas.. I went back and reran the block entrance tracing with the new test skipped and found that the number of entrances is unaffected by the addition of the Object.keys(root.schema).length === 0 check. The increase from 241 to 249 is the result of the compile call succeeding in the test with the patch.. You\u2019re welcome! Thanks for your attention and for the excellent library! \ud83d\ude03. ",
    "KurtPreston": "@epoberezkin Heads up, looks like this is still an issue in the latest ajv (v6.9.2). The mentioned workaround no longer seems to work either.. @epoberezkin Heads up, I wrote a spec to reproduce the issue. I took a crack at solving it, but was having issues wrapping my head around how resolve.js works. If it's at all useful, here's the spec:\nhttps://github.com/epoberezkin/ajv/compare/master...KurtPreston:issue815_idSetsRefScope?expand=1. We have two circumstances where we're running into the issue:\n\nWe have several interrelated JSONSchema files. We currently resolve references as a build step during compilation and output the combined schema in our build directory so that at runtime, the compiled JSONSchema have complete definitions.\nAt runtime, we sometimes dynamically generate JSONSchema based upon UI state. These dynamically generated JSONSchemas frequently combine several other schemas. These schemas only exist in memory\u2014they are never saved to disk or served via URL.\n\nWe've also tried using named anchors (\"$id\": \"#myName\") which is supported by ajv, but the feature doesn't seem globally supported yet.. ",
    "Nadav-Ruskin": "I kept getting errors trying to bundle the library. But a simple install using npm had a file ready at dis\\ajv.bundle.js. I'm posting this for future users, this is probably the easiest way.. ",
    "crackloi": "K. K. ",
    "jonganc": "I don't understand. If I define the metaschema after I've defined the custom keywords and then manually specify $schema, everything seems to work how I want. Am I going to run into some problem with this? (I can't find an example of hyper-schema that seems relevant).\nIn particular, because of how removeAdditional works (the ultimate use-case), this seems to be the only way to add automatically properties to schema.. I think so. I guess, because of how AJV (or JSON-schema?) is set up, it doesn't make sense to define the default meta-schema after custom keywords are defined, which would be necessary if you wanted it to obey those keywords.\nSo, I think I'll just add a shim to automatically specify my custom meta-schema when calling compile.. ",
    "roccomuso": "Yeah my fault.\nIt was an empty string.\nThanks. ",
    "kevin-leptons": "Hello,\nSorry for delay. I have two examples\n\najv-specifed-protocol\najv-not-specified-protocol\n\nFirst example specifics protocol part in URI of $id of schema. Ajv works as well. \nSecond example does not specifics protocol part of $id of schema. Ajv will throw Error.. ",
    "mduu": "@epoberezkin Very good question. I'm not really a NPM/yarn expert but Yarn (and npm) both installed 4.2.1 of uri-js instead the latest one. I know that Nuget would do it like you described if it is only the third number (others will not auto-upgrade). When many packages have dependency on uri-js package-manager normally try to negotiate the version that matches best for all. This may be not the latest one but something in between. Not sure about this with NPM/yarn.\nAs we know that AJV has problems with 4.2.1 I suggest to upgrade its dependency to a version we know should be \"safe\" for AJV. This way AJV can guarantee it will work properly (even with ES5).. >Does it happen when you install from empty node_modules folder? The problem may be with your npm setup as well.\nI got 4.2.1 on a clean node_modules directory.\n\nWhere is this behaviour described? My understanding is that if the latest version is 4.2.2 than it is the only one that matches \u201c^4.2.1\u201d\n\nI searched the web quite a while but could not find any documentation how NPM negotiate the final version number.\nBut thinking of it its relatively clear that it will not just use the latest patch but it needs to check the dependencies of other packages to the same target package. Eg. ajv says ^4.2.1 but another package I have in package.json may say \"4.2.1\". Then I definitively get 4.2.1 which breaks things. If ajv knows that 4.2.1 results in problem and therefore specify ^4.2.2 then the above situation results in a error the developers have to check and solve manually which is correct.. ",
    "GochoMugo": "Doesn't the reference openapi.json#/components/schemas/StorageProductsResponse point at an object, not an array?. ",
    "smagrawal": "@epoberezkin, @GochoMugo , Thank you for your reply.\nI agree that the reference points to the object in the specification.But can you please clarify below question.\n1. If you take a close look at the specification above, data should be an array NOT object.Please see abstract below. so i cant change my response data from array to object.\n\"schema\": {\n  \"type\": \"array\",\n  \"items\": {\n    \"$ref\": \"#/components/schemas/StorageProductsResponse\"\n  }\n}\nSo what changes should i incorporate in my ajv validator code to take this into account and validate the response data correctly ?. ",
    "ionutmiftode": "Sorry for the late reply. by normalize I meant that each ErrorParameters interface e.g. RefParams, LimitParams etc should all have the same properties, but marked as optional which are not relevant.\nA better solution should be to export all the ErrorParameters interfaces to use them as type guards.\nhttps://www.typescriptlang.org/docs/handbook/advanced-types.html. ",
    "hokiedsp": "Ah, I see. Thank you for the clarification. . ",
    "atomictag": "many thanks I soon realized it was not a great solution - and definitely not an issue of this awesome lib!\nthank you for taking the time to look at this and keep up with the great job. I'm assuming you are using ajv-errors given the errorMessagekeyword.\nProperties in errorMessage.required must match exactly all required properties of the object otherwise ajv hangs. Related to https://github.com/epoberezkin/ajv-errors/issues/14. ",
    "natcl": "Thanks a lot !. ",
    "JaredProske": "@epoberezkin I don't think this is an explicit duplicate of 843.  These are different interfaces.. ",
    "molteber": "Hmm, tried this with else and additionalProperties which gives me the wanted result in the issue\njson\n{\n  \"$id\": \"http://example.com/schema.json\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"valid\": {\n      \"type\": \"boolean\"\n    }\n  },\n  \"required\": [\n    \"valid\"\n  ],\n  \"if\": {\n    \"properties\": {\n      \"valid\": {\n        \"const\": false\n      }\n    }\n  },\n  \"then\": {\n    \"properties\": {\n      \"unvalid\": {\n        \"type\": \"boolean\"\n      }\n    },\n    \"required\": [\n      \"unvalid\"\n    ]\n  },\n  \"else\": {\n    \"properties\": {\n      \"valid\": {}\n    },\n    \"additionalProperties\": false\n  }\n}\nIf I did not list properties inside else, it would remove all the fields. But if i listed the ones i wanted to keep they stayed. Is this the expected behavior, even if the property have been described outside the conditions?. Alright :+1: \nIt sort of makes sense when you think about it, just needs to wrap your head around it.\nThanks for the quick feedback!. ",
    "ossdev07": "I have updated with chrome as phantomjs browser is currently unmaintained. In aarch64 platform, there is no specific phantomjs binary. We need to build it from source, which takes more than 1 hour. Replacing with Headless chrome gives faster output too. Please revert if any queries. Thanks.. ",
    "jsdevel": "@epoberezkin anything else you'd like me to add?. ",
    "s-taylor": "Thanks so much for your help and quick response.\nI got it to work after some messing around. To anyone who needs it this fixed it...\nhttps://runkit.com/nizmox/5bd63c137ee3b70012ec1725\nIt'd be great if using $data automatically added it to any user provided schema \ud83d\udc4d . Sadly it seems I can't use the $dataMetaSchema function in typescript. Seems like it doesn't have proper type definitions?\ndeclare var ajv: {\n  (options?: ajv.Options): ajv.Ajv;\n  new (options?: ajv.Options): ajv.Ajv;\n  ValidationError: ValidationError;\n  MissingRefError: MissingRefError;\n  $dataMetaSchema: object;\n}\nCannot invoke an expression whose type lacks a call signature. Type '{}' has no compatible call signatures.. ",
    "roundtheworld": "I'd say that I close this, because for my needs options instead of enum is OK. . ",
    "YozhEzhi": "This is so weird :)\nCode: new Ajv({allErrors: true, schemaId: 'auto'});\nConstructor:\n\nThere is webpack-dev-server's images/index.js with code:\n\nI think that I'm doing something wrong using webpack + ajv.. ",
    "rklueber": "Hello epoberezkin,\nThanks for the fast reply. I am really sorry to bother you. How do I pass the data option on the cli?\nI tried all the following without success\najv validate -s s.json -d i.json --data\najv validate -s s.json -d i.json --$data\najv validate -s s.json -d i.json --data true\najv validate -s s.json -d i.json --$data true\nI feel really silly, but I dont get it.. I was able to solve the problem and created a pull request for jessedc/ajv-cli\nhttps://github.com/jessedc/ajv-cli/pull/56\nIt works now. \nepoberezkin/ajv-cli seems still broken.. ",
    "vlamic": "BTW: The validator fails not only with double dashes in the domain name, but also in a subdomain. @gajus @epoberezkin . ",
    "krnik": "Yup is terribly slow (compared to ajv of course), so it'd end up at the bottom of a chart anyways. Is there any reason to gather all slow libraries?. ",
    "abenchi": "I have this issue when I do  yarn install. When I do npm install I do not have this issue. Other solution is to add a manual resolution in the package.json:\n\"resolutions\": {\n    \"ajv\": \"6.5.5\"\n  },\nthen you can use both yarn or npm. ",
    "ikobe": "@epoberezkin just  revert it temporary. ",
    "csvan": "Temporary workaround for this is to add this to your package.json:\n\"resolutions\": {\n    \"ajv\": \"6.5.4\"\n  }\n. @ybiquitous it works for both. Seeing the same thing when using latest storybook 4.1, reproducible by simply running the bin build-storybook included in the same package. This entirely breaks a very large ecosystem.\n```\nError: custom keyword definition is invalid: data/errors should be boolean\n    at Ajv.addKeyword (/home/csvan/IdeaProjects/pros-ui-components/module/node_modules/ajv/lib/keyword.js:66:13)\n    at module.exports (/home/csvan/IdeaProjects/pros-ui-components/module/node_modules/ajv-errors/index.js:10:7)\n    at Object. (/home/csvan/IdeaProjects/pros-ui-components/module/node_modules/schema-utils/src/validateOptions.js:22:1)\n    at Module._compile (internal/modules/cjs/loader.js:734:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:745:10)\n    at Module.load (internal/modules/cjs/loader.js:626:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:566:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:558:3)\n    at Module.require (internal/modules/cjs/loader.js:663:17)\n    at require (internal/modules/cjs/helpers.js:20:18)\n```. @epoberezkin thanks for the fix!. ",
    "ybiquitous": "Is this resolutions workaround for yarn only? Not npm?. Is there resolutions description in NPM docs?\nhttps://docs.npmjs.com/files/package.json. I try resolutions via npm command:\nDockerfile:\n```Dockerfile\nFROM node:10\nRUN apt-get -y update && apt-get -y install jq\nRUN mkdir foo && \\\n    cd foo && \\\n    npm init -y && \\\n    cat package.json | jq '. + {resolutions: {ajv: \"6.5.4\"}}' > package.json.new && \\\n    mv package.json package.json.old && \\\n    mv package.json.new package.json && \\\n    cat package.json | jq . && \\\n    npm i stylelint && \\\n    echo '{}' > .stylelintrc && \\\n    echo 'a{}' > a.css\nRUN npx stylelint a.css\n```\nRun docker build . command on terminal:\n```\n$ docker build .\n...\n{\n  \"name\": \"foo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"resolutions\": {\n    \"ajv\": \"6.5.4\"\n  }\n}\nnpm WARN deprecated circular-json@0.3.3: CircularJSON is in maintenance only, flatted is its successor.\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN foo@1.0.0 No description\nnpm WARN foo@1.0.0 No repository field.\n\nstylelint@9.9.0\nadded 369 packages from 202 contributors and audited 2446 packages in 12.956s\nfound 0 vulnerabilities\n\nRemoving intermediate container 4f7a327976d5\n ---> c5752e2203f1\nStep 4/4 : RUN npx stylelint a.css\n ---> Running in 73ad541c7eff\nnpx: installed 369 in 5.828s\nCannot find module 'ajv/lib/compile/equal'\nThe command '/bin/sh -c npx stylelint a.css' returned a non-zero code: 1\n```\nThe result fails. Is npm support resolutions really? Or my verification is bad something?. My final Dockerfile.\nFor resolutions approach yarn works, but npm does NOT work. \ud83d\ude22 \n```Dockerfile\nFROM node:10\nRUN apt-get -y update && apt-get -y install jq\nRUN curl -o- -L https://yarnpkg.com/install.sh | bash\nRUN mkdir foo\nWORKDIR foo\nRUN npm init -y && \\\n    cat package.json | jq '. + {resolutions: {ajv: \"6.5.4\"}}' > package.json.new && \\\n    mv package.json package.json.old && \\\n    mv package.json.new package.json && \\\n    cat package.json | jq . && \\\n    npm install stylelint && \\\n    # yarn add stylelint && \\    #<=== It works!\n    npm ls ajv && \\\n    echo '{\"rules\":{}}' > .stylelintrc && \\\n    echo 'a{}' > a.css\nRUN ./node_modules/.bin/stylelint a.css\n```\nnpm case:\n\n. ### Temporary workaround summary\nAdd a below field to your package.json.\nYarn\njson\n{\n  \"resolutions\": {\n    \"ajv\": \"6.5.5\"\n  }\n}\nNPM\njson\n{\n  \"dependencies\": {\n    \"ajv\": \"6.5.5\"\n  }\n}. @epoberezkin Thank you so much!. ",
    "whevether": "@mcollina \nThe file was removed. Manual replacement\nhttp://www.pike.com/node_modules/localtunnel/node_modules/ajv/lib/compile/equal.js. ",
    "xiaohuoni": "Temporary workaround for this is to add this to your package.json:\nit works for  yarn and npm\n\"resolutions\": {\n    \"ajv\": \"@6.5.4\"\n  }. ",
    "patelmanjeet": "resolutions not support by npm.  \nFor npm you need to \"ajv\": \"6.5.4\" dependencies in package.json. ",
    "RomainMuller": "Yeah - I was looking at the problem in table (gajus/table#83), and it appears that this update needs to be a major version, as it otherwise could break validators generated from previous versions of the library (using ajv-cli, in the case of table).. ",
    "hiendv": "@epoberezkin Publish v6.6.1 please.. Everyday we break semver :laughing: \nJ/K. ",
    "armoj": "You will need to tell it to use draft 4.\nJS\n// ...\nconst Ajv = require('ajv');\n// cache the draft 4 json (included in the AJV module).\nconst JSONSchemaDraft4Definition = require('ajv/lib/refs/json-schema-draft-04.json');\n// ...\n// create an instance of ajv. note the 'schemaId' property below, it is\n// needed for ajv to interpret draft 4 correctly.\nconst ajv = new Ajv({\n    schemaId: 'id', // draft-04 support requirment.\n    allErrors: true,\n    jsonPointers: true\n});\n// add the schema to the instance.\najv.addMetaSchema(JSONSchemaDraft4Definition);\n// you can now use the AJV instance to validate against a draft 4 schema.\n// ...\nHope this helps!. ",
    "janjilek": "I know, that JSON schema spec is uri, but your library supports url as well. It's really hard to force people to add / to the url, if the url without / is perfectly valid. Uri format will pass quite a lot of cases and it's not suited well for urls. I would agree with removing url format from this packag, because it's really confusing. I am using custom url format definition right now. . ",
    "toymachiner62": "Ok great links to annotations and https://json-schema.org.. what if someone is still trying to get started and doesn't know to click the links to figure it out? \nSomeone told me to check out ajv for validating my api payloads and I did, got lost, made this suggestion, it got closed, i moved on from ajv.\nOne thing i learned a long time ago is to literally take a developer that doesn't know this space and watch them fumble through the docs. That will tell you how clear they are.. ",
    "wabiloo": "@mmccool - did you ever get to implement your idea?  I need something very similar (ability to decorate the JSON payload with info extracted from the schema on successful match). ",
    "angelsvirkov": "I would also love to have a feature where you could track (or apply some logic on) the passed matches.\nOne suggestion by @epoberezkin was to use the $comment keyword\n\nBtw, you could use $comment keyword - the hook it calls will need to be passed some extra parameters to expose the current validation state (e.g. errors collected so far and part of the data the schema was applied to), but it\u2019s an easy change.\nNevertheless, this does not scale very well when you have to maintain dozens / hundreds of JSON Schema files and make sure to include the $comment keyword on multiple places inside each file.\n\nMy suggestion would be to give a default behavior in this case. For example, call the match callback on each JSON Schema part which is not a keyword. In other words, each tested property is reported as a successful or fail match. This would be useful for business cases where you have non-technical people looking at UI which shows a percentage of passing matches or tests\n. ",
    "ttristan": "I totally agree with @angelsvirkov and would also love to see the feature for our use case. Adding $comment as a custom keyword would not be optimal, since I would have to pollute all definitions with an additional keyword. I think that would bloat the schema too much.\nIs there some way to hook into each test that Ajv run without adding something to the schema itself? This way I could keep track of passed tests. . ",
    "duxing": "thanks for building this great package!. seems like this is caused by the suggested meta schema:\najv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json'));\n```json\n{\n  \"id\": \"http://json-schema.org/draft-04/schema#\",\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"description\": \"Core schema meta-schema\",\n  \"definitions\": {\n    \"schemaArray\": {\n      \"type\": \"array\",\n      \"minItems\": 1,\n      \"items\": {\n        \"$ref\": \"#\"\n      }\n    },\n    \"positiveInteger\": {\n      \"type\": \"integer\",\n      \"minimum\": 0\n    },\n    \"positiveIntegerDefault0\": {\n      \"allOf\": [\n        {\n          \"$ref\": \"#/definitions/positiveInteger\"\n        },\n        {\n          \"default\": 0\n        }\n      ]\n    },\n    \"simpleTypes\": {\n      \"enum\": [\n        \"array\",\n        \"boolean\",\n        \"integer\",\n        \"null\",\n        \"number\",\n        \"object\",\n        \"string\"\n      ]\n    },\n    \"stringArray\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"minItems\": 1,\n      \"uniqueItems\": true\n    }\n  },\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\",\n      \"format\": \"uri\"\n    },\n    \"$schema\": {\n      \"type\": \"string\",\n      \"format\": \"uri\"\n    },\n    \"title\": {\n      \"type\": \"string\"\n    },\n    \"description\": {\n      \"type\": \"string\"\n    },\n    \"default\": {\n},\n\"multipleOf\": {\n  \"type\": \"number\",\n  \"minimum\": 0,\n  \"exclusiveMinimum\": true\n},\n\"maximum\": {\n  \"type\": \"number\"\n},\n\"exclusiveMaximum\": {\n  \"type\": \"boolean\",\n  \"default\": false\n},\n\"minimum\": {\n  \"type\": \"number\"\n},\n\"exclusiveMinimum\": {\n  \"type\": \"boolean\",\n  \"default\": false\n},\n\"maxLength\": {\n  \"$ref\": \"#/definitions/positiveInteger\"\n},\n\"minLength\": {\n  \"$ref\": \"#/definitions/positiveIntegerDefault0\"\n},\n\"pattern\": {\n  \"type\": \"string\",\n  \"format\": \"regex\"\n},\n\"additionalItems\": {\n  \"anyOf\": [\n    {\n      \"type\": \"boolean\"\n    },\n    {\n      \"$ref\": \"#\"\n    }\n  ],\n  \"default\": {\n\n  }\n},\n\"items\": {\n  \"anyOf\": [\n    {\n      \"$ref\": \"#\"\n    },\n    {\n      \"$ref\": \"#/definitions/schemaArray\"\n    }\n  ],\n  \"default\": {\n\n  }\n},\n\"maxItems\": {\n  \"$ref\": \"#/definitions/positiveInteger\"\n},\n\"minItems\": {\n  \"$ref\": \"#/definitions/positiveIntegerDefault0\"\n},\n\"uniqueItems\": {\n  \"type\": \"boolean\",\n  \"default\": false\n},\n\"maxProperties\": {\n  \"$ref\": \"#/definitions/positiveInteger\"\n},\n\"minProperties\": {\n  \"$ref\": \"#/definitions/positiveIntegerDefault0\"\n},\n\"required\": {\n  \"$ref\": \"#/definitions/stringArray\"\n},\n\"additionalProperties\": {\n  \"anyOf\": [\n    {\n      \"type\": \"boolean\"\n    },\n    {\n      \"$ref\": \"#\"\n    }\n  ],\n  \"default\": {\n\n  }\n},\n\"definitions\": {\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"$ref\": \"#\"\n  },\n  \"default\": {\n\n  }\n},\n\"properties\": {\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"$ref\": \"#\"\n  },\n  \"default\": {\n\n  }\n},\n\"patternProperties\": {\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"$ref\": \"#\"\n  },\n  \"default\": {\n\n  }\n},\n\"dependencies\": {\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"anyOf\": [\n      {\n        \"$ref\": \"#\"\n      },\n      {\n        \"$ref\": \"#/definitions/stringArray\"\n      }\n    ]\n  }\n},\n\"enum\": {\n  \"type\": \"array\",\n  \"minItems\": 1,\n  \"uniqueItems\": true\n},\n\"type\": {\n  \"anyOf\": [\n    {\n      \"$ref\": \"#/definitions/simpleTypes\"\n    },\n    {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/definitions/simpleTypes\"\n      },\n      \"minItems\": 1,\n      \"uniqueItems\": true\n    }\n  ]\n},\n\"allOf\": {\n  \"$ref\": \"#/definitions/schemaArray\"\n},\n\"anyOf\": {\n  \"$ref\": \"#/definitions/schemaArray\"\n},\n\"oneOf\": {\n  \"$ref\": \"#/definitions/schemaArray\"\n},\n\"not\": {\n  \"$ref\": \"#\"\n}\n\n},\n  \"dependencies\": {\n    \"exclusiveMaximum\": [\n      \"maximum\"\n    ],\n    \"exclusiveMinimum\": [\n      \"minimum\"\n    ]\n  },\n  \"default\": {\n}\n}\n```\nwhile compared to the actual draft-04schema:\n```json\n{\n  \"id\": \"http://json-schema.org/draft-04/schema#\",\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"description\": \"Core schema meta-schema\",\n  \"definitions\": {\n    \"schemaArray\": {\n      \"type\": \"array\",\n      \"minItems\": 1,\n      \"items\": {\n        \"$ref\": \"#\"\n      }\n    },\n    \"positiveInteger\": {\n      \"type\": \"integer\",\n      \"minimum\": 0\n    },\n    \"positiveIntegerDefault0\": {\n      \"allOf\": [\n        {\n          \"$ref\": \"#/definitions/positiveInteger\"\n        },\n        {\n          \"default\": 0\n        }\n      ]\n    },\n    \"simpleTypes\": {\n      \"enum\": [\n        \"array\",\n        \"boolean\",\n        \"integer\",\n        \"null\",\n        \"number\",\n        \"object\",\n        \"string\"\n      ]\n    },\n    \"stringArray\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"minItems\": 1,\n      \"uniqueItems\": true\n    }\n  },\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"$schema\": {\n      \"type\": \"string\"\n    },\n    \"title\": {\n      \"type\": \"string\"\n    },\n    \"description\": {\n      \"type\": \"string\"\n    },\n    \"default\": {\n},\n\"multipleOf\": {\n  \"type\": \"number\",\n  \"minimum\": 0,\n  \"exclusiveMinimum\": true\n},\n\"maximum\": {\n  \"type\": \"number\"\n},\n\"exclusiveMaximum\": {\n  \"type\": \"boolean\",\n  \"default\": false\n},\n\"minimum\": {\n  \"type\": \"number\"\n},\n\"exclusiveMinimum\": {\n  \"type\": \"boolean\",\n  \"default\": false\n},\n\"maxLength\": {\n  \"$ref\": \"#/definitions/positiveInteger\"\n},\n\"minLength\": {\n  \"$ref\": \"#/definitions/positiveIntegerDefault0\"\n},\n\"pattern\": {\n  \"type\": \"string\",\n  \"format\": \"regex\"\n},\n\"additionalItems\": {\n  \"anyOf\": [\n    {\n      \"type\": \"boolean\"\n    },\n    {\n      \"$ref\": \"#\"\n    }\n  ],\n  \"default\": {\n\n  }\n},\n\"items\": {\n  \"anyOf\": [\n    {\n      \"$ref\": \"#\"\n    },\n    {\n      \"$ref\": \"#/definitions/schemaArray\"\n    }\n  ],\n  \"default\": {\n\n  }\n},\n\"maxItems\": {\n  \"$ref\": \"#/definitions/positiveInteger\"\n},\n\"minItems\": {\n  \"$ref\": \"#/definitions/positiveIntegerDefault0\"\n},\n\"uniqueItems\": {\n  \"type\": \"boolean\",\n  \"default\": false\n},\n\"maxProperties\": {\n  \"$ref\": \"#/definitions/positiveInteger\"\n},\n\"minProperties\": {\n  \"$ref\": \"#/definitions/positiveIntegerDefault0\"\n},\n\"required\": {\n  \"$ref\": \"#/definitions/stringArray\"\n},\n\"additionalProperties\": {\n  \"anyOf\": [\n    {\n      \"type\": \"boolean\"\n    },\n    {\n      \"$ref\": \"#\"\n    }\n  ],\n  \"default\": {\n\n  }\n},\n\"definitions\": {\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"$ref\": \"#\"\n  },\n  \"default\": {\n\n  }\n},\n\"properties\": {\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"$ref\": \"#\"\n  },\n  \"default\": {\n\n  }\n},\n\"patternProperties\": {\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"$ref\": \"#\"\n  },\n  \"default\": {\n\n  }\n},\n\"dependencies\": {\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"anyOf\": [\n      {\n        \"$ref\": \"#\"\n      },\n      {\n        \"$ref\": \"#/definitions/stringArray\"\n      }\n    ]\n  }\n},\n\"enum\": {\n  \"type\": \"array\",\n  \"minItems\": 1,\n  \"uniqueItems\": true\n},\n\"type\": {\n  \"anyOf\": [\n    {\n      \"$ref\": \"#/definitions/simpleTypes\"\n    },\n    {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/definitions/simpleTypes\"\n      },\n      \"minItems\": 1,\n      \"uniqueItems\": true\n    }\n  ]\n},\n\"format\": {\n  \"type\": \"string\"\n},\n\"allOf\": {\n  \"$ref\": \"#/definitions/schemaArray\"\n},\n\"anyOf\": {\n  \"$ref\": \"#/definitions/schemaArray\"\n},\n\"oneOf\": {\n  \"$ref\": \"#/definitions/schemaArray\"\n},\n\"not\": {\n  \"$ref\": \"#\"\n}\n\n},\n  \"dependencies\": {\n    \"exclusiveMaximum\": [\n      \"maximum\"\n    ],\n    \"exclusiveMinimum\": [\n      \"minimum\"\n    ]\n  },\n  \"default\": {\n}\n}\n. very minor diff:\n--- draft04 2018-12-14 23:31:58.000000000 -0800\n+++ draft04_ajv 2018-12-14 23:32:29.000000000 -0800\n@@ -47,10 +47,12 @@\n   \"type\": \"object\",\n   \"properties\": {\n     \"id\": {\n-      \"type\": \"string\"\n+      \"type\": \"string\",\n+      \"format\": \"uri\"\n     },\n     \"$schema\": {\n-      \"type\": \"string\"\n+      \"type\": \"string\",\n+      \"format\": \"uri\"\n     },\n     \"title\": {\n       \"type\": \"string\"\n@@ -208,9 +210,6 @@\n         }\n       ]\n     },\n-    \"format\": {\n-      \"type\": \"string\"\n-    },\n     \"allOf\": {\n       \"$ref\": \"#/definitions/schemaArray\"\n     },\n```. so problem solved. \nin case anyone run into the same issue, the solution is:\ninstead of use the suggested meta schema for draft04, use the official one. in code:\nreplace ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json')); with something like this:\n```\n  const url = 'http://json-schema.org/draft-04/schema#';\n  const response = await axios.get(url);\n  if (response.status != 200) {\n    throw new Error(util.format('FAIL: could not load draft-04 schema. status=%s', response.status));\n  }\nconst draft04 = response.data;\n  ajv.addMetaSchema(draft04);\n```. PR: https://github.com/epoberezkin/ajv/pull/905. hi @epoberezkin \nthanks for getting back to me. I thought about doing that too but I wasn't sure if you had a good reason to pack in a slightly different version of draft-04 schema in the package.\nif you're fine with modifying the copy in the package, I'll submit another PR for it.. updated PR: #908 . ",
    "jabiinfante": "Yes, you are right @epoberezkin \nI finally got it working as I expected using this schema:\njson\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"propType\": {\n      \"enum\": [\n        \"n\",\n        \"s\"\n      ]\n    },\n    \"prop\": {}\n  },\n  \"if\": {\n    \"properties\": { \"propType\": { \"const\": \"s\" } }\n  },\n  \"then\": {\n    \"properties\": {\n      \"prop\": {\n        \"type\":\"string\"\n      }\n    }\n  },\n  \"else\": {\n    \"properties\": {\n      \"prop\": {\n        \"type\": \"number\"\n      }\n    }\n  },\n  \"additionalProperties\": false,\n  \"required\": [\n    \"propType\",\n    \"prop\"\n  ]\n};\nHope it helps someone!\nThanks for such an amazing software @epoberezkin :clap: :clap: :clap: . ",
    "B-Teague": "Also, what do you think about a new function that adds keywords to the default annotation to allow dynamic defaults?\naddDefaultKeyword(\"_currentDate\");\n{\n   Ticket: 12345,\n   Date: \"\"\n}\nDate: {\n   type: \"string\",\n   format: \"date\",\n   default: \"_currentDate\"\n}. Thank you for adding this functionality!  Will this automatically work for dynamic defaults as well in the ajv-keywords repo?\nDoes npm automatically update, or do you submit a new version?. ",
    "dlokman": "Error installing or unzipping data.js from ajv package. I get admin privileges error even though I\u2019m a local admin. I downloaded the ajv zip file from github and tried to unzip it but it fails due to data.js requiring admin privileges somehow . ",
    "GUIEEN": "I had the exactly same issue like this. ",
    "tomitrescak": "Nevermind. uniqueItems need to be defined on the containing object not in items.. ",
    "chris-branch": "User error.  Please disregard this issue; ajv is working exactly the way it's supposed to.\nAfter taking another look with a fresh set of eyes, I realized my schema is incorrect.  Once I fixed the schema, everything is fine.  The corrected schema is below:\nlet schema = \n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"properties\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"foo\": {}\n            },\n            \"required\": [\"foo\"]\n        },\n    },\n    \"required\": [\"properties\"]\n};\n. ",
    "jaliph": "As already discussed, we are not able to modify the schema in any way. This is a crucial.\nI know if we could modify the schema, it was straight forward, but could you help other wise in finding a solution.. As I had explained earlier, that we are consuming the JSONSchema in an intermediate step and can't modify that. Anyways thanks for this.\nIn case you find this relevant, and have a way in which we can override existing validation functions , it'll be of great help.. ",
    "akaNightmare": "@epoberezkin is there any way to get behavior what is needed for me?. @epoberezkin the use case is:\n```js\nconst Ajv = require('ajv');\nconst ajv = new Ajv({\n    allErrors: true,\n    coerceTypes: true,\n    removeAdditional: false,\n    useDefaults: 'empty',\n});\nconst obj = { a: '' };\nconst comp = ajv.compile({\n    type: 'object',\n    properties: {\n        a: { type: 'number', default: 0 },\n        b: { type: 'number', default: 0 },\n    },\n});\ncomp(obj);\nconsole.log(obj);\n```\nActual result:\n{ a: 0, b: 0 }\nExpected result:\n{ a: 0 } // b is absent in the source object and don't needed after validation\nThanks in advance. @epoberezkin \n\nAPI calls when the properties will be absent\n\nI need to validate an object (from POST request). One thing what is needed to decline comparison with undefined properties only with '' (empty string) and null. Why it's needed: in the code determined some business logic if one key is absent do not use another one, however, ajv creates a key with a default value, and it's to hard check if that key is passed through API or created by ajv.. ",
    "tridium": "npm run build deletes the file lib/dotjs/index.js. As a workaround, I did npm run build, restored that file, then ran npm run bundle. This is on Windows.. Sorry, I've tried to do this as a pull request but I can't get the pre-commit hooks to pass on my machine. But I've found that replacing the single quotes with double quotes, at least in the \"build\" script, allows npm install to complete successfully.\n\"build\": \"del-cli lib/dotjs/*.js \\\"!lib/dotjs/index.js\\\" && node scripts/compile-dots.js\",\n(Ajv 6.9.1, Node 10.15.0, npm 6.4.1, Windows 10). Thanks @epoberezkin, I have created PR #946 to resolve this issue. Hope it helps.. ",
    "mattpolzin": "Yeah, that page is not very clear. FWIW, having nullable support out of box like this was a huge draw to AJV. Thanks! Definitely a bummer to see OpenAPI and JSON Schema represent the same thing in such different ways, but I do see the benefit in considering null to be a value or more accurately the absence of a value (OpenAPI) rather than a type (JSON Schema). . I'm in agreement that it sucks for everyone to have the two standards diverge. I think a preference for one over the other is definitely a matter of opinion rather than correctness, though. My ultimate preference would be that libraries like this do not need to make exceptions or customizations to support standards like OpenAPI. That said, given the two options (one supported by OpenAPI and the other supported by JSON Schema), I do prefer the way OpenAPI encodes nullability. The problem I see with your comparison to falseable is that falseable only makes sense in the context of one type: Boolean. In other words, it would not make sense to see\n{\n  \"type\": \"string\",\n  \"falseable\": true\n}\nnullable, on the other hand, applies to all types (in the context of a standard where null is not itself a type, which is the case for OpenAPI).\nI don't think I am really prepared to say \"OpenAPI has this right and JSON Schema has it wrong\" but I can see the merits of the approach taken by OpenAPI -- Again, this is ignoring the really big disadvantage imposed by diverging from JSON Spec.. My background is mostly in C, C++, Objective-C, and now Swift. In C (and other languages with similar reference semantics), null is not a type anymore than a pointer is a type. A pointer can store the location in memory of an object and null is the absence of a memory location. Objective-C does have a NSNull type, but as far as I know, that type exists for the sole purpose of storing null in places where there does need to be a value (like Dictionaries) and for allowing nil (Objective-C's spelling of null) to be serialized. In this case, there is a difference between nil and NSNull, but the distinction is not important on the other side of serialization (i.e. to a different context that is deserializing something that was serialized from an Objective-C object. In Swift, nil (the null value) is just equivalent to the .none case of the Optional type (so null does not have it's own type here, either).\nBottom line is, if we are talking about a serialization standard being able to bridge the gap between languages with very different ideas of what \"null\" means, I think that introducing a nullable property that can apply to any object and introducing a null type that can be allowed alongside any other type make a similar amount of sense to me. At the very least, neither approach is the obvious winner in my book.\nAgain, I am not trying to argue that it is a good thing the two standards are different AND I am very grateful that you've found a convenient way to bridge the gap for people like myself who are finding that there are not yet any really well established OpenAPI data validators out there to choose from.. I immediately regret not throwing in a few more tests around the newly available opts.nullable = true but nullable property is false. I'll get those added tomorrow.. Added tests. These pass for me with test-fast but I get the same errors as CI is getting if I try to run the full tests. I did not have time to look into that further; it's a known issue on master, I imagine?. ",
    "MeenalYengul": "I have solved it by doing like this in schema :\n\"date\": {\"type\": \"string\",\"format\": \"date-time\", errorMessage:{type:'Date must be a \"mm-dd-yy\" format........', format:'Check Date format'}},\nbut now I want to write error message for array of number for checking its data type. I want custom message. ",
    "VytautasT": "Thanks for the idea, @epoberezkin.\nI'm not sure whether the performance would suffer much, since we could simply replace Object.keys({{=$data}}).length with something like Object.values({{=$data}}).filter(v => v !== undefined).length. And if we don't want to filter over all array elements, we could implement a slightly more efficient function, that would iterate over the array but would stop once it is clear that there's enough/too few properties (in the case of minProperties).\nAs for the inherited properties, minProperties does not currently respect them, and I don't think that should change.\nHowever, I totally agree that this is probably too obscure a use case to warrant a breaking change, and using an option seems the right choice. The users that really need this behavior could define a simple keyword of their own, but it would be better to reuse an existing one, and avoid the confusion.. I don't think there's an easy way to name it, so that the user easily gets it, without resorting to verbosity.\nA wild idea: to expand the meta schema of minProperties, so that it accepts not only numbers but\n{ oneOf: [\n  { type: 'number' },\n  { \n    type: object,\n    required: ['value'],\n    properties: {\n      value: { type: 'number' },\n      countUndefined: { type: 'boolean' }\n    }\n  }] }\nAs a user, I'd love that, since it would be clearly documented as a part of minProperties, and, more importantly, that would allow the flexibility of having different behaviors for minProperties and maxProperties, and for different schemas/subschemas. WDYT?. So if we choose a global option, then I believe countUndefinedProperties: false is a pretty good choice. It could be shortened to countUndefined: false without much loss of meaning, because counting properties is a term alien to the users (it's an internal term) and the documentation would have to explain it anyway.\nAlternatively, if some other inconsistency regarding undefined is likely to emerge (not related to counting) then we would need another option. In this case, something like normalizeUndefined: true would be better since it would be used to fix all undefined-related issues. But this situation might be too far fetched.. ",
    "svegalopez": "@epoberezkin  Thanks for the reply. Makes a lot of sense.\nOne more question if you don't mind.\nIf I use addSchema to add all referenced schemas, and I then use getSchema($id) to compile a validator lazily, will that validator get cached ? So If I then call getSchema for the same $id again, it wont compile it again ? \nThanks for the great library!. ",
    "yooouuri": "Same error for me #942 here using vue.js. I hope it get noticed fast. Add\n\"resolutions\": {\n    \"ajv\": \"6.8.1\"\n  }\nto your package.json will create a work around (I am using yarn, don't know if it will work for npm). @velocity-360 see my comment, use the work around! \ud83d\ude04 . @velocity-360 makes sense. @mmacheerpuppy ill close mine \ud83d\udc4d . ",
    "mmacheerpuppy": "Is there a workaround to use an earlier release?. This is certainly related to the latest changes made in the commit history.. @velocity-360 I'm trying to write a technical test for a job interview in React! :rofl: . @rickyTony I spent some time debugging and it seems like latest AJV is a dependency for ESLint which may produce a collision. You can use npm ls ajv to check this out.. @sky-coding  You say that as if we don't have dependency chains on the back-end! @andrewtet can you kindly show your package.json? . Can confirm for React users it's ESLint and ESLint addons which are causing the issue in the dependency chain. Removing these and running npm install && npm start  was sufficient to get me back on development.\njson\n{    \n    \"eslint\": \"5.6.0\",\n    \"eslint-config-airbnb\": \"^17.1.0\",\n    \"eslint-plugin-import\": \"^2.14.0\",\n    \"eslint-plugin-jsx-a11y\": \"^6.1.1\",\n    \"eslint-plugin-react\": \"^7.11.0\",\n}\nSo if you're in a hurry to get back on it, its time to get bare with React! . @ChuntaoLu yes, sorry!. I've opened an earlier ticket, but yeah this is a pretty big deal :package: . ",
    "tetreault": "Using nuxt for vue. My solve is doing npm i -d ajv@5.0.0 and i can run npm run dev again. This was a fresh nuxt project I started. . This also breaks simply running npm run dev in nuxt. Second time in a week new nuxt projects have been broken, last sunday it was a bad PR on terser that broke npm run generate :(. I commented in the main issue #941 but for nuxt doing npm i -d ajv@5.0.0 resolved this issue for me.. @aaaguirrep see my comment right above yours. Im using nuxt as well and my comment worked for me. Note, you dont need to use 5.0.0 but can use 6.8.1. . ",
    "mcrawshaw": "@epoberezkin can we roll back?. ",
    "velocity-360": "Can confirm, this is happening for me too when scaffolding Vue JS projects. Currently on Vue CLI 3.4.0, Mac OS 10.13.4. Please fix soon as this is causing serious delays.. > @velocity-360 see my comment, use the work around! \ud83d\ude04\n@yooouuri thank you however, I am currently contracted to create a Vue tutorial series for a large educational software company and do not think it would be wise to kick off the series with a work-around immediately on the first step. I will wait for resolution.. ",
    "Rickytony": "lol @mmacheerpuppy exact same situation for me. @mmacheerpuppy I kinda ran out of time for the day debugging, so hopefully it's fixed when I get back to it tomorrow. ",
    "viankakrisna": "workaround for yarn users:\nadd\njs\n  \"resolutions\": {\n    \"ajv\": \"6.5.5\"\n  }\nto your package.json and re run yarn install. looks like https://github.com/epoberezkin/ajv/issues/941#issuecomment-462087631 beat me to that \ud83d\ude05 . https://stackoverflow.com/questions/52416312/npm-equivalent-of-yarn-resolutions. i think npm users can use this workaround https://github.com/rogeriochaves/npm-force-resolutions. just add \n\"resolutions\": {\n    \"ajv\": \"6.8.1\"\n  }\nto your package.json\nif you use yarn:\nrun yarn install \nif you use npm:\nhttps://github.com/rogeriochaves/npm-force-resolutions TL;DR\nrm -rf node_modules\nnpx npm-force-resolutions\nnpm install\n. ",
    "gregoriB": "\"dependencies\": {\n    \"react\": \"^16.8.1\",\n    \"react-dom\": \"^16.8.1\",\n    \"react-scripts\": \"2.1.3\",\n    \"ajv\": \"6.8.1\"\n  }\nthis worked for me using npm. @andrewtet did you run npm install afterwards?\n. @andrewtet yeah I just did the it \"proper\" way too.  Not sure why the other way worked for me and not you though\n. ",
    "andrewtet": "@gregoriB I'm using create-react-app and unfortunately, I'm still getting the error after adding that \ud83d\ude1e . @gregoriB Yeah, I ran npm i after adding \"ajv\": \"6.8.1\" to my package.json and it didn't work.\nI tried again with \"ajv\": \"6.8.1\" in my package.json and ran rm -rf node_modules, npm cache clean --force, and then npm i and that did the trick. I've now got create-react app up and running.. ",
    "rusye": "I fixed this issue by resorting to an old version that I knew worked.  Ran this npm install --save ajv@6.6.2. ",
    "ChuntaoLu": "\n@ChuntaoLu You say that as if we don't have dependency chains on the back-end! @andrewtet can you kindly show your package.json?\n\nWrong @ ?. ",
    "aaaguirrep": "I have applied the workaround and it worked. Thanks.. I have created a new project in nuxtjs for spa and when i run \"yarn run dev\" it shows: ERROR  custom keyword definition is invalid: data/errors should be boolean. Hi, i have checked the issue #941 and i have fixed it.. ",
    "cenfun": "same issue \nnode_modules\\ajv\\lib\\keyword.js:65\n      throw new Error('custom keyword definition is invalid: '  + this.errorsText(validateDefinition.errors));\nmy solution is:\n\"dependencies\": {\n    \"ajv\": \"6.8.1\"\n  },\n\"resolutions\": {\n    \"ajv\": \"6.8.1\"\n  }\n. > released 6.9.1\nthanks, just test with ajv@6.9.1 and it works now.. ",
    "fkleuver": "@epoberezkin I proposed a temporary fix which, hopefully, fixes the problem in dependent packages and removes the need for a full rollback. Let me know if you see any other issues regarding this. Perhaps you prefer a different solution, that's fine too. I'm just trying to help speed up the resolution. Released right before going to bed, I figured as much. Typical :). Alright, I'll close this then :). ",
    "puiiyuen": "For vue.js, it still doesn't work. There are too many dependencies that we cannot fix them one by one. ",
    "audiolion": "it is 3:30am london time, so a few more hours before @epoberezkin wakes up and releases a new version, time to go do something else for a bit!. ",
    "TheLarkInn": "Hey @epoberezkin we have reported upstream workaround in our linked issue webpack/webpack#8768 so hopefully this reduces the chatter while this is being tackled by your team or other AJV contributors. \nIf there is anything we can do to help, let us know. - webpack team. @epoberezkin Appreciate it! If theres way's we can help also upstream provide support or feedback, please don't hesitate to do so! . ",
    "edorofeyev": "I can confirm the same issue.\nfile-loader@3.0.1 stopped working because it has ajv as dependency.. ",
    "fgarcia": "After writing my question I realized that actually I can modify existing schemas, but i am  not sure if this can have side effects. Here goes my example:\nhttps://gist.github.com/fgarcia/081a77518f33747fa61612a124c82d0b\n. I was concerned with the weight/cost of loading my app, specially in the browser.\nThere is still a lot I have to learn about how to use schemas in my code. I still have problems dealing with the verbosity of using schemas.\nRight now my objective is understanding better how to deal with the verbosity (which I see is totally justified). Since I wrote my post I realized that I need some type of factory/service object to manage some patterns in the definition of my schemas.\nThanks for long answer, now I've got something to chew around this concept. Looks like it will be a coordination of SchemaFactory, SchemaService and AppPartsLoadingService.. ",
    "jandolezal71": "Sure, there you go (it behave exactly as i decribed)\nhttps://runkit.com/jandolezal71/5c6fb3cd3c877f00138f1a40. Thank you.. ",
    "not-an-aardvark": "Thanks for the feedback. One question -- is there a reason we couldn't just remove the ignored default: true property from the meta-schema, since it ostensibly doesn't have any effect?  That would avoid the need to handle the option differently for meta-schema compilation.. Ok thanks, I'll start working on this.. Sure, no problem. Is there a name you would recommend instead? (Maybe something like unusedDefaults?). I think my confusion with ignoredDefaults is that while the defaults were previously being ignored before adding this option, they are now sometimes logging a warning or reporting an error, which intuitively doesn't seem like they're being ignored\nI'm certainly happy to change it to ignoredDefaults if you'd prefer -- I'm just mentioning this in case other people would be similarly confused.. Thanks!. ",
    "iam-merlin": "That was quick xD. Nice work btw.. @epoberezkin I purpose because ajv is about validation json schema validation and examples is a part of the spec. Nevermind, thx for the suggestion ;)\nHave a nice day ;). ",
    "masaeedu": "The document would look like this:\n{\n  \"input\": { \"type\": \"object\", \"properties\": { \"foo\": { \"type\": \"string\" } } },\n  \"defaults\": { \"foo\": 42 }\n}\nThe result I expect when validating the document above would be for the defaults property to be rejected, since it does not conform to the schema in the inputs property (42 is not a string).. ",
    "AndyOGo": "Sorry if I bother, but  either I have a bug locally or my reduced test case is wrong.\nAt  the moment my suggested reduced reproduction repo works \ud83e\udd14 \nhttps://codesandbox.io/s/yvp968ly89\nI will check and come back later.. Sorry for spamming, it was my fault.. ",
    "miguelzapaton": "ajv works as it should.\nNo issue here.  The cause was in another piece of software. Sorry...\nCLOSED. ",
    "epicfaace": "Actually, it looks like this problem can be isolated to the following: if additionalProperties is false, then adding a new property using \"dependencies\" is not recognized.\n(Sample JSFiddle: https://jsfiddle.net/epicfaace/y6ketmrp/)\nSample schema\n```\n{\n  \"type\": \"object\",\n  \"additionalProperties\": false,\n\"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"credit_card\": {\n      \"type\": \"number\"\n    }\n  },\n\"required\": [\"name\"],\n\"dependencies\": {\n    \"credit_card\": {\n        \"properties\": {\n          \"credit_card\": {\n            \"const\": 123\n          },\n          \"billing_address\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\"billing_address\"]\n    }\n  }\n}\n```\nSample data\n{\n  \"name\": \"abc\",\n  \"credit_card\": 123,\n  \"billing_address\": \"abc\"\n}\nI expect the data to be valid. However, the data is parsed as invalid.\nNote that when I set additionalProperties to true, then the data becomes valid again.. @epoberezkin this is particularly to solve https://github.com/mozilla-services/react-jsonschema-form/pull/1190 which is used in react-jsonschema-form -- we need to support schemas with the form dependencies and we can't really \"define the schema differently.\" Is there any way to use ajv's removeAdditional functionality to support this?\nSee https://github.com/mozilla-services/react-jsonschema-form/pull/1190#issuecomment-471121231. ",
    "VMBindraban": "Found a similar issue: https://github.com/epoberezkin/ajv/issues/255\nUsing errorDataPath: 'property', as option gives back the property in the dataPath.. Just noticed that errorDataPath is deprecated. \nIt does still work for me but is there an other way to get the property names?. ",
    "adziok": "I can add, when i replace $ref with code it`s work one level deeper.. ",
    "darcyparker": "Thanks @epoberezkin - I made that change.  You can squash the 2 commits if you want before you merge. I was guessing it had the same type as data because I saw https://github.com/epoberezkin/ajv/blob/master/lib/dot/validate.jst#L51 ...\nShould data be updated so it is Object | Array<any> too?\n. ",
    "acheronfail": "\nI think that the usage as constructor may have been lost?\n\nThe declare function ajv(options?: ajv.Options): ajv.Ajv; and export = ajv in the file ensure that the constructor type isn't lost.\n\nAlso the issue is to export only ErrorParameters interfaces to use them as type guards - why all interfaces should be exported?\n\nUnfortunately, the only way I found to combine the declare function ajv(...) type with the namespace ajv type was to export all the types inside. Otherwise the types themselves aren't exported as well. \nI tried various ways of fixing the issue, but the only way that worked and didn't break anything was following the typings guide https://github.com/typings/typings/blob/master/docs/examples.md#function--utility here, which says to declare function and namespace types (where all the types you need from the namespace are exported).. "
}