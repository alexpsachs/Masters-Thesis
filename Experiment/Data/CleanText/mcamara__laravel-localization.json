{
    "mcamara": "Thanks for taking your time looking at the package and for give suggestions to me.\nAbout the dropdown list, I will take in consideration for a new version (it's gonna be released soon, with tests and some other functions).\nAbout flags, I have read this article http://flagsarenotlanguages.com/blog/2013/08/language-menus-flags-symbolize-nations-not-languages/ that discourage you to use flags for languages because, as he says, flags symbolize nations, not languages.\nThanks again, and you are more than welcome to give your suggestions to make this plugin an useful tool for everybody \n. Good idea! Thanks!\n. Hi! I'm gonna implement an option to choose between saving the language in the session or not. \nAbout the problem you said at the first message, I think that your application is showing you spanish instead of english because your browser has spanish as a first option for web languages. Try to disable this option (useBrowserLanguage) and test it again (you should try in a different browser, or just activate private navigation). \nIf the problem persists, let me know!\n. I have added the 'useSessionLanguage' option to the config file. If false, the language will not be stored in a session variable nor get from there. Anyway, the default value for 'useSessionLanguage' is true.\nThanks for your suggestions! \nGr\u00e0cies! ;)\n. You are right, I was supposed to write MIT license in the README! \nThanks a lot, the README file is corrected and it shows the proper license.\n. Fixed! :+1: :)\n. Thanks! It's a good addition to the code!\n. I really like your idea so I'm gonna try to develop this filter through this weekend. Thanks for all your help, I really want to improve this plugin.\n. The piece of code you posted three days ago has been included into the package as a filter. If you want to use it, you just have to follow the readme instructions: https://github.com/mcamara/laravel-localization#filters\nThanks for you help, I want to hear your impressions and your suggestions for this plugin.\nGr\u00e0cies de nou :)\n. Have you added \n'LaravelLocalization'   => 'Mcamara\\LaravelLocalization\\Facades\\LaravelLocalization'\nto the aliases array in app.php?\n. Try to delete the app.php provider and aliases laravelLocalization keys and do a composer update because your picture show some errors with the installation of the package.\nThen, add both keys again and publish the configuration file. \n. It's not well added, it should be like this (inside require key):\n...\n\"require\": {\n    \"laravel/framework\": \"4.0.*\",\n    \"mcamara/laravel-localization\": \"dev-master\"\n},\n...\nThen, you should run a composer update (without adding anything in app.php yet).\n. Has the composer installed properly the package?\nIt should be on vendor/mcamara/\n. You should install it through composer, have you installed laravel properly? Try a php artisan serve and go to your localhost address.\n. Nice! :) If you have any other doubt, don't hesitate to open another issue!\n. No, you should create your own stylesheet for the language selector. Otherwise, it would be overwritten everytime an update is downloaded. \nAbout flags, I have read this article http://flagsarenotlanguages.com/blog/2013/08/language-menus-flags-symbolize-nations-not-languages/ that discourage you to use flags for languages because, as he says, flags symbolize nations, not languages.\nIf you need any help to improve the stylesheet, let me know. I have used this language bar for a project and I have styled it properly.\n. Hi!\nI have added two features that are going to fit to your requirements.\nFirst of all, the ability to edit and create your own language bar, you don't have to start it from scratch, you can publish the default one and edit it to fit it to your needs.\nSecond, if you don't want to edit the html of the bar, I have added an option in the config file that acts as a switch to show or not the current language in the language bar.\nI hope you like these new features and let me know if you have any other suggestion for the package :)\n. I really like your suggestion, I think I'm gonna work on it following the instructions the article you said has.\nThanks!\n. Hi! I have just pushed a piece of code that do what you suggested to me, the article you said is amazing and I have learnt a lot reading it. Thanks for sharing it!\nIf you want to test the code and give me some feedback I would appreciate it, but I have been testing it in some projects and it works like a charm :)\n. Thanks for your feedback!\n. Nice!! I haven't had this problem yet, but it could be a problem in the future!\nThanks again for your help! :)\n. Thanks a lot! \nGr\u00e0cies!!\n. Hi! \nIt's not possible to do that right now, if you unable the filter you can show the the url without any language, but it would redirect to the current language, not the default one.\nIt could be added in future versions of the plugin, thanks for the suggestion!\n. I have added a version of your code into the last commit. Publish the configuration file again and check the 'hideDefaultLanguageInRoute' config value, it's what you were asking for ;)\nThanks again for your suggestions, it's always a pleasure to hear them in order to improve this package.\n. Nice! :)\n. Wonderful! \nMoltes gr\u00e0cies!!\n. I have been trying the previous commit you uploaded and I haven't had this problem. Anyway, your commit is a really good way to prevent this problem if it happens.\nThanks again, you are a really good help! :)\n. Hi! \nI think that you don't need this plugin for that, just create a before filter that check the user language and set it with App::setLocale($userlanguage)\n. If I were you, I would do the language change through the user setup menu (like facebook). If you don't want to do that, you should change the database value of the user language every time the user defines a new language.\n. Have you solved it? I have done something similar in a project and have a possible solution for that.\n. You can change the url for any language you want to, read this section of the readme:\nhttps://github.com/mcamara/laravel-localization#translated-routes\n. Hi Fed03,\nI like your idea to customize the name of the view for the language bar but I think that the name of the view should be the second parameter of the function (and initialized to ''mcamara/laravel-localization/languagebar'') because it would provoke an error to everybody who currently uses the language bar function and don't change it. I'm gonna add this feature to the main repository and add it to the README file.\nThanks!\n. It has been added to the language bar function, check the new readme and test it. I was testing it and works like a charm :)\nThanks a lot for your idea, I hadn't thought about it before!\n. Is it in local development environment or in a webserver? I had some problems with safari and more than one development environment, because the cache and session files were overlapping one to another.\n. Sorry for the delay, I have been testing the cache without any problem. Have you found where was the error?\n. Have you updated the package and the config file to the last version?\nSend me an image of the error to let me guess what\u00b4s going on. Thanks!\n. If I have understood correctly your last message I think your problem can be solved with: \nURL::to(Lang::get('routes.about'))\nIs that right?\n. Since some days ago, you can use the setlanguage function to define the language of your application dynamically: https://github.com/mcamara/laravel-localization#set-language\n. Nice! Gr\u00e0cies de nou!\n. I have added a little improvement to your code, only a validation to be sure that $locale is a string. I am gonna update the readme too.\n. Nice! Thanks a lot!\nSembla ser que github est\u00e0 pl\u00e9 de catalans! :)\n. Hi drewjw81!\nFirst of all, thanks for your job, it was amazing! I have merged all your commits into the master branch. Watch out with path position on the array after parse_url(), it could not exist.\nAbout languages, it's a really good idea, I have used the english names because I don't know their names in their own languages. But I will start looking for them and change the config file (if someone does not agree with that, tell us).\nThanks again for your job and sorry for my delay answering your commits, I was out of the office for a few days.\n. But if we change the supportedLanguages array a multidimensional array, the old versions of the config file would fail with the new version of the code. Should we think another solution to that? \n. Nice! If you need help, let me know! I am going to sleep (it's 7 am here and I was coding all night!), but I would be here in a few hours.\nThanks!\n. mmm weird, which is your root address? localhost alone or localhost/mysite/public?\n. @Ulrira Can you post some pieces of your code to test this issue?\n. Your commit is totally right, the language should not be in the url is it the default. Thanks!\nI'm gonna check the session stuff.\n. mmm I don't completely understand your question. Why do you want to localize controller functions? The logic of the application should be the same despite the language the user wants to see.\n. You don't need to create two functions in order to do that, check translated routes: https://github.com/mcamara/laravel-localization#translated-routes. Using this, you can redirect http://example.com/de/autos/kompakt and http://example.com/en/cars/compact to the same controller.\nLet me know if you have a question about translated routes :)\n. My mistake copying the url in the last message, I meant http://example.com/de/autos/kompaktand http://example.com/en/cars/compact.\nBut you are right, there is still no support for Route::controller using translated routes. I'm gonna think about how to add this feature. \nThanks for your idea!\n. Nice! I have been reviewing your commit and it looks nice. I'm gonna test it deeper, but I think it solves the problem you had.\n. I had the same problem in a fresh setup and was looking for the solution. Thank you so much! \nBefore pulling it, I have to check how to not break Laravel vesions prior to 4.1.15.\n. I have checked the latest released version of laravel, and this fix is a must to not break it (4.1.14), do you have any idea to mantain both versions in order to not break any laravel setup?\n. I have updated the compatibility with Laravel 4.2 in the last commit.\nClosing issue, thanks @jaumesala \n. Nice! In the near future, I am going to merge the supported languages array with the one we discussed in this link: https://github.com/mcamara/laravel-localization/issues/30 .\nThanks, I have never thought about language direction!\n. This commit has some problems with languagesAllowed and supportedLocales, there are some parts of the class that the first one is declared and some others that ask for the second one. I'm gonna try to fix them, but if it's not possible I would pull an older version of the package.\n. I have fixed them, you can find the commits pushed into the main branch.\nI totally agree with you about the development branch, we cannot let any error go into the master branch! :)\nI have created it: https://github.com/mcamara/laravel-localization/tree/development\n. wow! Huge update! I am going to test it through all this weekend!\n. I'd suggest an overwrite option too, if there is a locale.php file inside the language folder, the system would overwrite the attributes. The priority would be always be the locale.php if it exists.\n. Done!\n. I really agree with you in creating than feature but I think it would be out of the main features of this plugin. What if we create another package, that executed in the terminal, create that sitemap being aware of all the languages that the application have?\n. +1 locale too, when I started to develop this package I used language, but now, I think that locale is the proper word for it.\n. Don\u00b4t worry and sorry for the inconvenience, I\u00b4m happy you have solved the problem.\n. This pull it has some conflicts with a previous commit. Can you take a look?\n. Nice! Thanks!\n. 1- There are some people who does not update config/view file, it's dangerous for them to just delete a function.\n2- Actually, we have to organize the number version better, right now, I just add a tag to every commit that adds some new functions. So, I think we are gonna follow the policy you have sent or a similar one.\n. Try to publish again the config file. If it does not work, let me know!\n. Nice! It solve a problem we had since some versions ago!\nThanks!\n. Have you updated the config file?\n. I have just fixed it, check 0.13.4 version and let me know if it solve your problem!\nThanks a lot for your feedback!\n. Actually, the package is tagged to 0.13.4 since it was uploaded. I don't know why packagist is not updating it. Anyway, I am gonna fix a little problem and re-tag it as a 0.13.4 .\n. It should be solved in the new release.\n. Lots of tests in the new release added, they cover the ones in this issue.\n. Wow, that was a huge mistake! Thanks @Steve-A-Orr !\n. Sorry for my english, I meant that the code that was before had mistakes, you fixed them ;)\n. I have fixed the compatibility in the last commit.\nClosing issue\n. Version 0.14.1, thanks!\n. https://github.com/mcamara/laravel-localization/blob/master/src/config/config.php -> 'useAcceptLanguageHeader' parameter\n// Should application use the locale stored in a session\n// if the locale is not defined in the url?\n// If false and locale not defined in the url, the system will\n// take the default locale (defined in config/app.php) or\n// the browser preferred language (if useAcceptLanguageHeader is true) or\n// the cookie locale (if useCookieLocale is true)\n'useSessionLocale' => true,\n. I don't understand the problem. Can you expose a real piece of code where you need that?\n. Yes, it fixes both of them. Thanks!\n. I checked the code, but why do you want to allow people to see unsupported languages? If you want them to look at unsupported languages, just add them as supported...\n. It should be solved in the new release\n. Fixed on the new commit (v 0.14.4). Thanks for the feedback!!\n. Has hecho un composer update despu\u00e9s de editar el composer.json ?\n. You were totally right so I quickly reverted changes in config file and versioned it as the same number (0.14.4).\nThanks for the feedback!\n. I like your commit, you are right we are repeating ourselves with 'dir' and 'script'.\nI am going to wait to pull this commit due to I am preparing a big update to the plugin, and this pull would deprecate the 'dir' key on the 'supportedLocales' array.\nThanks for the feedback and your help, I hope you understand my reason to delay the pull request.\n. I am going to integrate this into the new version, it would be on the development branch this week.\n. Added to the development branch.\n. @LoLFactor Thanks for your feedback. your improvement has been added on the latest version of the plugin.\nThank you so much! :+1: \n. Fixed! \nI changed that because in setRouteName, getLocalizedURL was required as a string.\nI have fixed setRouteName function to accept both arrays or strings.\nMuchas gracias!!\n. It should be fixed with the last commit :)\n. That's interesting, I will take a look at that as soon as possible and fix it.\n. It should be solved in the new release\n. Cool!! I like it!\nMoltes gr\u00e0cies!! :+1: \n. Please check the development version, it contains lots of tests and this bug should be fixed.\nI would be appreciate to have feedback from it.\n. It should be solved in the new release\n. LaravelLocalization::setLocale('en') function to solve this.\n. Done, sorry for the delay, being really busy at work.\n. It should be fixed with the version just tagged.\n. Cool! Thanks to @dimsav !\n. Yes! It's going to be available the day of Laravel 5 release.\nhttps://github.com/mcamara/laravel-localization/milestones\n. Thanks!\nI was working yesteday on it, and I think it's not going to be as difficult as expected. So I'm going to try to do it as soon as possible and push it to the development branch. I'm going to check your code to see if I'm doing it as expected.\nThanks again for your help!\n. I'm working on it but laravel 5 is changing often (as it's still in development) so the final version compatible with it would be delayed, at least, until laravel 5 become RC.\n. Hi guys,\nI have started updating the package to the latest version of Laravel 5 (check the development branch).\nStill a lot to do, I have to create middlewares and rewrite the documentation for the new ConfigServiceProvider functions but I will appreciate any help or guidance.\nThanks for your patience, I promise it will be ready when Laravel 5 is released but this is a good start :)\n. v 1.0 has been released! Enjoy!\n. hahahaha no worries! \n. Gr\u00e0cies!\n. Hi jfrabaute,\nI am doing a lot of improvements in the code, as long as tests and other issues related. I am sorry I am not going to pull your changes directly but I am going to integrate them on the current version I am developing.\nAgain, I am sorry and I hope you want to help this plugin again in the future.\n. I will do it! ;) \nThanks for the feedback\n. Check the tests done in the package, they test urls and can inspire you.\n. Fixed with v0.15.1 :)\n. Publish the configuration file using the command: php artisan config:publish mcamara/laravel-localization in your laravel root path. This will create the following file app/config/packages/mcamara/laravel-localization/config.php , containing the most common setting options, including accepted languages.\n. Jaume is totally right, this package doesn't handle views, the menu on the readme is something I forgot to delete (on previous versions, this plugin printed a language bar) and I'm going to delete it as soon as possible.\nAs Jaume says is not a good practice to have different views for different languages, you should use the built-in functions in order to translate any view on the system.\n. Hi Dimitri,\nSorry for the delay on my reply (I'm on holidays with restricted access to computers), I've been checking your commits and they look great but can you merge it in the development branch? I've done some changes there (deprecated code is deleted, the code is cleaner, new classes added etc.) and I'm not sure I can directly merge your code into there (I would try to do so on the 5th of January, when I'm back).\nThank you so much for your help and happy new year!\n. Most of these changes has been applied to the new version. Thanks!\n. Which package have you updated to 1.5.* version?\n. I think I know where the error is, is m_index an empty path? \"/\"\nIf so, I will try to fix it asap.\n. This wouldn't work with the actual version of the package, I've never though in this situation!\nLet me think about it and I would solve it for the next version of the package.\n. config/app.php file\n. Hi,\nI've changed the version number (Laravel has changed it) into the composer.json file. It should work now.\n. Fixed in the latest version 1.0.4\nThanks for your feedback!\n. Fixed in the latest version 1.0.4\nThanks for your feedback!\n. It's weird, I have tested with dozens of routes and they work, I will test it deeplier.\nAnyway, @jaumesala , your example is not valid, ref is mandatory so it's normal that the system leave it as {ref} in the final url if you don't provide the 'ref' value in the third attribute of the getURLFromRouteNameTranslated function.\nHaving a route as your home route works in my side too, but I will try to recreate your files. Can you share your Http/routes.php file?\nThanks for the feedback, I would try to sort this out asap!\n. If you ask for a route without needed parameters using route function Laravel doesn't raise any exception, it just leave the attribute between brackets as the package. \nI don't know what to do, should I raise an exception when an attribute is needed or should I just print the attribute between brackets as now?\n. Can you show me an example of a non-working config file? I tested it with the latest version (1.0.5) and the session is loaded perfectly.\n. Hi! I've never though in non-utf-8 characters, let me think about this and I will patch the package.\nI would appreciate any help! :)\nThanks!\n. You can just have the date format for every language in the language file and use it in the date() function like this:\nphp\ndate(trans('date.format'))\n. There are some issues with the session helper, I will try to sort it soon.\n. @MarcGuay You're totally right and I don't know how to handle it in laravel 5. I think the only way to solve this is creating a new middleware (as middleware is fired after the session has been initialized). What do you think about that solution?\n. Check the README, it should be fixed in version 1.0.7 :dancer: \nhttps://github.com/mcamara/laravel-localization#sessions\n. Which problem?\n. The session middleware should be inside the middleware key \n. I don't understand the question, you can set up multiples domains separately.\n. @Stonos This breaks other functionalities, like hiding the default locale.\n@neysi, this functionality works fine as I've tested it. Where is your config.php located?\n. Have you created the alias in the app.php file?\n. Don't worry, happy to see it's working for you! :)\n. As Annotations are finally an external feature of Laravel and not a core one I haven't worried about them (and I'm also in the group that hates annotations).\nIf you find a way to make the plugin work with annotations, I would be more than happy to merge your code and write it into the README.\n. Check laravel documentation for localization http://laravel.com/docs/master/localization\n. Check Laravel documentation for localization http://laravel.com/docs/master/localization\n. I have merged your PR and adapted it to version 1.1 and 1.0. Thanks for your help!\n. Done, sorry for the delay. I have plenty of work.\n. The latest version (1.0.8) should have support for 5.1 version, I cannot check it as I have too much work to do.\nSorry for the delay in all new features and fixing some bugs, but I will not have time to solve them until end of August. I can promise I will check pull requests more often and tag new versions faster than now.\n. I have applied your changes in v1.0.10.\nThanks for your help.\n. Can you fix the test? I will merge it then. Thanks!!\n. I fixed the circle.yml file so tests should pass now.\n. What about storing it in a session value?\n. Hi Bojan,\nI think your solution is good, if you create a pull request I will be more than glad to review it, create a new version and push it.\nPS: Just one thing, can you put the regional key the last one for any language?\n'de' => ['name' => 'German','script' => 'Latn', 'native' => 'Deutsch', 'regional' => 'de_DE.utf8']\n. I have also replied another solution on your stackoverflow issue. Let me know what do you think.\n. I have commented it, it looks good!\n. @fisharebest Thanks for your package, I really like the idea and it would be great to have it on this package.\n@BojanKogoj Merged to master branch. Thanks!\n. Thanks! I don't have any computer nearby right now as I'm on holidays, but I will try to merge it in few hours.\nThanks again for your help!\n. I will tag this release as 1.1\n. Thanks to @okaufmann and his pull request ( https://github.com/mcamara/laravel-localization/pull/271 ) there is a new version of the plugin (1.1) that supports Laravel 5.2 .\n. Fixed! Thanks @arcanedev-maroc  !\n. Looks perfect! I will merge it and update the package version as soon as I have access to a computer. Thanks!\n. Can you try to clean the cache and try it again?\nThanks!\n. Have you tried to update to the latest version of the plugin? It's working on my side...\nmy setup:\n// routes.php\nRoute::group([\n        'prefix' => LaravelLocalization::setLocale(),\n        'middleware' => [ 'localeSessionRedirect', 'localizationRedirect' ]\n], function()\n{\n    ...\n});\n// Http/Kernel.php\n    protected $routeMiddleware = [\n       ...\n        'localize' => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRoutes::class,\n        'localizationRedirect' => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRedirectFilter::class,\n        'localeSessionRedirect' => \\Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect::class\n    ];\n. @iwasherefirst2 yeah, I think it's a good idea and can be done in a new PR!\nThanks a lot for your help!. I've added a section in the README.md redirecting the user to czim's package. Thanks for your help!. To print a language switcher you just need to add this code to your blade template.\n@foreach (LaravelLocalization::getSupportedLocales() as $key => $language)\n    <a href=\"{{ LaravelLocalization::getLocalizedURL($key) }}\">\n        {{ $language['name'] }}\n    </a>\n@endforeach\nWhy are you using events for this?\n. \ud83d\udc4d \n. Thanks for your help! Merged!\n. cool, thanks!\n. We should not change the codebase to pass the tests, you can think of adding this as a helper in your project.\n. Hi @Xoshbin, thanks for your PRs. However, I don't think flags represent languages (e.g: Which flag would you use for english, USA, UK, Australia, Canada - but French is also spoken in Canada - or even Malta? )\nhttp://www.flagsarenotlanguages.com/blog/why-flags-do-not-represent-language/\nAgain, thanks for your PR. I really appreciate people helping to make this package bigger and better.\n. Hi @Xoshbin, thanks for your PRs. However, I don't think flags represent languages (e.g: Which flag would you use for english, USA, UK, Australia, Canada - but French is also spoken in Canada - or even Malta? )\nhttp://www.flagsarenotlanguages.com/blog/why-flags-do-not-represent-language/\nAgain, thanks for your PR. I really appreciate people helping to make this package bigger and better.\n. Closing this pr as tests haven't been fixed in 4 months.. @kkomelin thanks to you for your commit :). If you rebase with master, you will fix the errors in your branch.. Can you fix the tests please?. Thanks!!. Thank you! I'll take a look tomorrow and prepare the new version.. It's merged now! Thanks for your contribution!. Done :)\nThanks for your suggestion!. Can you add this function to the README.md? Thanks! \ud83d\udc4d . Thanks for the changes! I'll take a look to the tests. Can you provide more information about what your pr fixes? And don't forget to fix the tests!\nThanks!. If you rebase with master, you will fix the errors in your branch.. Hi @Okipa , can you lend me a hand on this please? If you create a PR fixing it I'll merge it into master and create a new version.\nThanks!. Closing this PR as it was fixed in the new docs.. Closing this issue as @sarotnem answer is right.. Closed because of inactivity. Can you rebase with master? It will fix the conflicts, thanks!. Closed because of inactivity . Thanks! ;). As I agree with @ashatrov , I'll close this PR.\nThanks @shalawani for you help anyway!. Really good PR @ashatrov, thanks for your help!. Hi @vanderb, thanks for your commit!\nCan you document the middleware on the readme, please?\nThanks again! :). Hi @mrcbk , if you fix the tests I'll merge it! Thanks for your help!. Hi @Omranic, thanks for your pr. Rebasing with master will fix the CI problem. Do it, and I will merge it.\nThanks again!. Closed because of #470 . Thanks @hedii !. Thanks for your commit @frantzmiccoli . The master branch (and 1.3.1 release) should fix all problems with Laravel 5.5.\nThanks all for your help!. Thanks for your help, I've added your code to the master branch (and to 1.3.x release)\nThanks again!. Thanks for your help, it has been fixed in the new release.. There is an option in the config file for this: https://github.com/mcamara/laravel-localization/blob/master/src/config/config.php#L302\n. Thanks!. Thanks for your commit!. @dreamid27 never never never change the config file inside the package, it will cause problems when the packages is updated or it will be overwritten. (And it's usually ignored by control version system).\nYou should run \nphp artisan vendor:publish --provider=\"Mcamara\\LaravelLocalization\\LaravelLocalizationServiceProvider\", it will create a new config file in your own folder. This should be the file to edit for your own project.\nHope it helps.\n. Thanks for your commit, it has been added to the latest version!. Reverted, thanks to both of you!. This will break all configuration files, why do you want to change the name?. Can we accept both names (the old and the new one) for now and deprecate the old one? The readme file should be updated as well.\nIn future releases we can drop support to the old name, but I don't think breaking old configurations from one day to another is a good thing to do.. I'm up to it as well, I think it's a good step forward.. This is a really nice update. Can you add it to the readme before I merge it?\nThanks!. Cool, thanks!. Hi! Can you update the README to have your changes?\nThanks for your PR!. Closed as README was not updated. Sure, check if everything is working and fix the conflicts and I will merge it :). Cool! Thanks a lot for your help, I'll merge it straightaway!\n. I like the idea of having a ENV variable for local environments, can you add it? :)\nThanks a lot!. Done! Thanks a lot for your help!. This is a really cool PR! Thanks a lot for your help!. Reopened! :). Thanks a lot, I'll merge it now!\nThanks for the tests!. Thanks a lot, this is going to be really helpful!. It should be fixed now thanks to @iwasherefirst2 . Can you confirm @romansidorov?. Cool! Thanks a lot @romansidorov !. yes, it works with 5.7 :) . Sorry for the delay and thanks for your help!. Thanks @fisharebest and @Te7a-Houdini  for your help, I'll merge it now.. hey! I think it's a good change but can you move \"Config\" up in the content list?\nThanks!. Nice! Thanks a lot!. Thanks a lot for your PR!. it fixes #585 as well, right?. Thanks a lot for your fix! I'll release a new version now\n. awesome! . Thanks for adding this!. No worries! It's always good to have better tests!\nThanks a lot!. Thanks a lot for your help, I'll create a new release straightaway!. hahaha yeah! I forgot that badge!\nThanks a lot!. Sorry for not seeing your PR before, I'll merge it straightaway!\nThanks for your help!. Yep, my mistake (I repeated a version number in the release description).\nIt should be fixed now, thanks for letting me know!. I've updated the package to be compatible with the newest version of Laravel :) Version 1.3.18 should be good to go.\nLet me know if you find any issue working with it!. Thanks for your change!. Will this piece of code break in other versions of Laravel?. Nice! I'll merge it and create a new version of the package.\nThanks a lot!. +1 @Rishats, can you reply to this?. ",
    "russoedu": "Thanks!!! I really missed Laravel 3 localization and your package just saved me a lot of time!!!\n. ",
    "sangar82": "Or another possibility is add in the config an option like\n$use_session = true | false\nI think that the plugin's behaviour in this case is wrong (if you want a default language without parameters in the URL) but with this variable, we have all the cases contemplated.\n. In my case useBrowserLanguage = false.\nSomething as this would be great:\nif(Session::has('language') && $this->configRepository->get('laravel-localization::useSessionOnStart') )\n{\n ...\n} else {\n ... \n}\nand add this line to config file:\n         'useSessionOnStart' => false,\nI tested this and works as expected!\n. +1!\nI have problems with this in L5 \n. Hi @mcamara ! I think this is the solution ;)\n. Hola @mcamara !!\nThis is not yet working, there are some problem with the session, it's not saved properly.\nI change the language when an users clicks the link of change language:\nphp\nLaravelLocalization::setLocale($locale)\nphp\nRoute::group(['prefix' => LaravelLocalization::setLocale(), 'middleware' => [ 'localeSessionRedirect']],  function()\n{\n    //Route::get('/', array('as' => 'index', 'uses' => 'HomeController@index'));\n    Route::get('/', array('as' => 'index', 'uses' => 'HomeController@home'));\nphp\n    /**\n     * The application's route middleware.\n     *\n     * @var array\n     */\n    protected $routeMiddleware = [\n        'auth' => 'App\\Http\\Middleware\\Authenticate',\n        'auth.basic' => 'Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth',\n        'guest' => 'App\\Http\\Middleware\\RedirectIfAuthenticated',\n        'csrf' => 'App\\Http\\Middleware\\VerifyCsrfToken',\n        'localize' => 'Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRoutes',\n        'localizationRedirect' => 'Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRedirectFilter',\n        'localeSessionRedirect' => 'Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect'\n    ];\nwhen clicks the link to change the language, it doesn't make nothing. continues with the last language. \n@mcamara I need your help, please!! I'm updating my platform to L5 \n. I use this function\n``` php\n    public function changeLanguage($locale)\n    {\n        $supported = LaravelLocalization::getSupportedLocales();\n    if (array_key_exists($locale,$supported))\n    {\n        LaravelLocalization::setLocale($locale);\n    }\n\n    return Redirect::to(LaravelLocalization::getNonLocalizedURL(URL::previous()));\n}\n\n```\nBecause i don't want that the users see the language in the url\n. ",
    "closca": "Yes. So is correct the way i have done? first composer run the composer command and after edit the app.php with provider and aliases key and after run the publish command?\n. Still i get the error. Any ideea what i could do? I am using laravel 4\n. Ok. One fast question. This is my composer.json. Is correct how i added \"mcamara/laravel-localization\": \"dev-master\" ?\n{\n    \"name\": \"laravel/laravel\",\n    \"description\": \"The Laravel Framework.\",\n    \"keywords\": [\"framework\", \"laravel\"],\n    \"license\": \"MIT\",\n    \"require\": {\n        \"laravel/framework\": \"4.0.*\"\n    },\n    \"autoload\": {\n        \"classmap\": [\n            \"app/commands\",\n            \"app/controllers\",\n            \"app/models\",\n            \"app/database/migrations\",\n            \"app/database/seeds\",\n            \"app/tests/TestCase.php\"\n        ]\n    },\n    \"scripts\": {\n        \"post-install-cmd\": [\n            \"php artisan optimize\"\n        ],\n        \"pre-update-cmd\": [\n            \"php artisan clear-compiled\"\n        ],\n        \"post-update-cmd\": [\n            \"php artisan optimize\"\n        ],\n        \"post-create-project-cmd\": [\n            \"php artisan key:generate\"\n        ]\n    },\n    \"config\": {\n        \"preferred-install\": \"dist\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"mcamara/laravel-localization\": \"dev-master\"\n}\n. Same error. \nI cleaned app.php i edited in the right way composer.json. I run composer command then edited the app.php adding what is needed into providers and aliases keys and run the publish and same error.\n. Nope. Into vendor is not present this folder. if i putt manualy from the git archive is ok?\n. I copied manual and still on artisan publish command get same error.\n. When i run composer command i get an warning:\nWarning: The lock file is not up to date with the latest changes in composer.jso\nn. You may be getting outdated dependencies. Run update to update them.\ni run composer update new/package and made what i was need. \n. All is ok now. Great plugin. Great work.\nThank you.\n. Actually i would need a simple idea how to costumize the language bar (i want flag image for each language)\n. Is correct to edit vendor\\mcamara\\laravel-localization\\src\\views\\languagebar.blade.php for styling?\n. Founded. Is because there are filters. I don't know why but by doing the routes group without filters seems to work.\nRoute::group(array('prefix' => LaravelLocalization::setLocale()), function()\n    {\n.....\n. ",
    "guilambert": "Thanks for the quick turnaround, this will certainly be of help, but not in my case :)\nActually LaravelLocalization::getURLLanguage is what I was looking for, so I can get the current page URL equivalent for the other language.\nOn another note, if I want to use different slugs for each language routes, the URL given by the package is only switching the lang string in the URL. It would be great if we could do:\nRoute::group(array('prefix' => LaravelLocalization::setLanguage()), function()\n{\n    Route::get(trans('routes.home'), array(\n        'as' => 'home',\n        'uses' => 'HomeController@showHome'\n    ));\n    Route::get(trans('routes.about'), array(\n        'as' => 'about',\n        'uses' => 'AboutController@showAbout'\n    ));\n});\nI had a similar setup working but with Laravel 3. \nLook at the following article on Medium, this may give you ideas https://medium.com/on-coding/26cdc75e4810 (\"Creating Multi-Language Routes\").\nIf I can find some time I will fork and see if I can help.\n. No problem for the suggestion. I will definitely update my fork and take a look when I have a moment.\nThanks again for your work man\n. Works like a charm indeed, thanks a bunch for this!\n. ",
    "Georgsius": "Sorry, my fault (\n. ",
    "nicogominet": "No worries, I really liked what you've done here, keep the good work!\n. De res!\n:-)\n. Weird, as this defenitively happened to me, no idea why then!\nYou're welcome, I'm jsut trying to help your amazing plugin for multilingual website with Laravel. You saved me a lot of time there Marc! :-)\n. hehe ;-)\nDe res de nou!\nYou might changed the doc a bit to reflect the changes (not sure how you want to handle this).\n. No worries, I just thought the in_array() was enough, but that's totally up to you ;)\nGr\u00e0cies!\n. ",
    "SergeyMiracle": "Whould be very nice, it will be more friendly for the SEO \n. This do a trick for me, but i'm not sure if it's a best aprouch for this task.\nRoute::filter('LaravelLocalizationDefaultLangRedirectFilter', function()\n{\n    global $app;\n    $params = explode('/', Request::path());\n    if(count($params) > 0){\n        $language = $params[0];\n        $defaultLanguage = $app['laravellocalization']->getDefault();\n        if($language === $defaultLanguage)\n        {\n            // If the current url contains default language\n            // The system redirects the user to the url\n            // without it\n            $url = str_replace($language,\"\",Request::path());\n            return Redirect::to($url, 301);\n        }\n    }\n});\n. And this one shoud be changed :\npublic function setLanguage()\n    {\n        $languages = $this->configRepository->get('laravel-localization::languagesAllowed');\n        $locale = Request::segment(1);\n        if(in_array($locale, $languages)){\n            App::setLocale($locale);\n            Session::put('language', $locale);\n            $this->configRepository->set('application.language',  $locale);\n        }\n        else\n        {\n            $locale = null;\n            $locale_app = $this->defaultLanguage; //set to deafault!\n            App::setLocale($locale_app);\n            $this->configRepository->set('application.language',  $locale_app);\n            if($this->configRepository->get('laravel-localization::useSessionLanguage'))\n            {\n                Session::put('language', $locale_app);\n            }\n        }\n        return $locale;\n    }\n. Nice :) Ok i'll try right away.\n. Greate, works as expected, thx :+1: \n. Its on my local serever in both environment. For now have no idea how to\nsolve it :)\n2013/12/19 Marc C\u00e1mara notifications@github.com\n\nIs it in local development environment or in a webserver? I had some\nproblems with safari and more than one development environment, because the\ncache and session files were overlapping one to another.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mcamara/laravel-localization/issues/20#issuecomment-30960293\n.\n\n\n\u0421 \u0443\u0432\u0430\u0436\u0435\u043d\u0438\u0435\u043c \u0421\u0435\u0440\u0433\u0435\u0439 \u0415\u0432\u0442\u0443\u0448\u0435\u043d\u043a\u043e\nsergeymiracle@gmail.com\nSkype - sergeymiracle\n. Not really, got lot of work, planing to do some tests after NY\n. hideDefaultLocaleInURL set to true\n. My oh my :) Guys u did hell of a job :) thx, now it works as expected...\n. This code u can see in language switch template\n@foreach(LL::getSupportedLocales() as $localeCode => $properties)\n{{{  $properties['name']  }}}\n@endif\nI guess there no methods like set, but u can play with css and $localeCode\n<a rel=\"alternate\" css=\"{{$localeCode}}\" href=\"{{$url}}\">{{{  $properties['name']  }}}</a>\n.en{\n   background: url(images/en_flag.png);\n}\nand so on...\n. I think u can do custom NotFoundHttpException behavior, like describe here for example...\n. ",
    "s-coder": "yeah, but i want that user by logging in will get his language from database, and after that he should be able to switch to another language. Because i am working on project that will be used in several different countries, but some contries like Switzerland have more then one official language. So i want to redirect user to a language from database, but after that he can switch to another language if he wants.\n. yes i am using something like that... my system works on this way, when user comes to my page your plugin will take the browser language and show him content based on browser language. When user logs in, i want to automatically switch the language based on language info from user profile DB table. Is there a function in your plugin that can do that? Something like this would be very nice: LaravelLocalization::setLanguage('de'); (but this does not work)\n. No, not yet...can you share it?\n. no, not yet :(\n. ",
    "drewjw81": "@s-coder is this still not working for you?\n. Sorry, just because I need to ask, is the default user language you're setting to in the supportLocales array in your config (languagesAllowed & supportedLanguages if pre v0.8)?\n. @s-coder After you set the locale to 'de' are you redirecting?  I think that might be the issue, and perhaps we need to add that in as an option.  If you're using the LaravelLocalizationRedirectFilter?\nIf the user is at\n/en/admin\nThen you call LaravelLocalization::setLocale('de'); you'll need to redirect the user to the localized URL or there settings will be overridden on the next request, if you're not Localizing the URLs in your HTML.\n. Two questions:\n- Does the problem persist if you upgrade to the latest version? (Wait for v0.10.1, pending merge, to do your tests.)\n- If the problem is still occurring, is hideDefaultLocaleInURL (hideDefaultLanguageInRoute) set to true or false?\n. Awesome.  Can you close the ticket?\n. I killed this commit and moved the changes in it to a different branch. \n. You welcome.  I found your library shortly after I started converting a localization class I wrote along time ago, better to add to yours than create a new one.\nYou're right about path sometimes parse_url thanks for catching that.\nI was thinking more about this and perhaps it's best to also merge languagesAllowed and supportedLanguages, and just leave the current list in the comments.  So developers can maintain a single list of just what they use.\n. I'm going to start hacking away on this after I get a few work things out of the way and some MeteorJS code I've been putting off.\n. I fairly certain I can code this in such a way that we can issue a deprecation warning leading up to v1.0 and maintain both options until then.\nMight not add the 639-2/T and 639-2/B options in the initial release of this update, and save that for a later date.\n. I'm about 85% with the array merger and native reading items.  Should hopefully get it fully tested over the weekend.\n. Completed this and sent a pull request.\nhttps://github.com/mcamara/laravel-localization/pull/40\n. @jaumesala adding the 639-2/T, 639-2/B options should now be possible.\n. Also, do you mind giving a short route code example that replicates the issue?\n. @nikosv @Ulrira Is this issue still occurring?  If so, can you create a quick Laravel project with the basic setup that's causing the issue?  Including if possible a vagrant configuration or a Apache or nginx setup for the vhost?  Thanks.\n. Is there a reason you're not running the public folder as the root?\nOn Fri, Jan 24, 2014 at 7:31 PM, nikosv notifications@github.com wrote:\n\nThe issue is still occuring.\nFor a setup in a folder like for example localhost/laravel/public\nThe generated link in the language bar is http://localhost/en/laravel/public instead of http://localhost/laravel/public/en\nReply to this email directly or view it on GitHub:\nhttps://github.com/mcamara/laravel-localization/issues/31#issuecomment-33212362\n. I'll look in to a nice way to work around that issue, but in general not having laravel's main index file in the root isn't a great idea. \u00a0If it's a limitation of your dev environment I recommend you look in to Vagrent, here's a nice Laravel Vagrant boilerplate \u00a0https://github.com/bryannielsen/Laravel4-Vagrant\n\nOn Fri, Jan 24, 2014 at 7:48 PM, nikosv notifications@github.com wrote:\n\nwell it's just something i am used to do in development environment. In production i am running the public folder as root.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mcamara/laravel-localization/issues/31#issuecomment-33213325\n. Like I said I'll look in to it, probably over the weekend.\n\nRegardless, I really recommend vagrant over wamp, mamp, or xammp. \u00a0Having used both you're going to have a better time with vagrant, even more so if you're working on a team.\nOn Fri, Jan 24, 2014 at 8:09 PM, nikosv notifications@github.com wrote:\n\nin codeigniter i used to get the base url independently of the folder structure using something like\n$base_url = 'http' . ((isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 's' : '').'://'.$_SERVER['HTTP_HOST'].str_replace('//','/',dirname($_SERVER['SCRIPT_NAME']).'/');\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mcamara/laravel-localization/issues/31#issuecomment-33214613\n. @nikosv sorry for the long delay, busy week.  I'm looking at your changes now.\n. There are a few issues with your implementation, I'm working on a fix for you and make it more useful in general I need to get a change made to the Laravel framework.\n\nHold up to see what happens with laravel/framework#3369\n(note I posted this in the wrong comment originally...)\n. @dedurus in v1.0 we're likely going to remove the getLanguageBar function and the template.  It doesn't provide anything that can't be easily done directly in your own templates, and is only useful for blade templates anyway.  I recommend you remove your usage of getLanugageBar and in place of it make your own;  heres some example, very simple, code to drop in.\n<ul class=\"your_class_here\">\n    @foreach(LaravelLocalization::getSupportedLocales() as $localeCode => $properties)\n        <li>\n            <a rel=\"alternate\" hreflang=\"{{$localeCode}}\" href=\"{{$url}}\">\n                {{{ $properties['native'] }}}\n            </a>\n        </li>\n    @endforeach\n</ul>\nIf you want to include it in multiple places, create a new template and just use the @include option \n. Pull request https://github.com/mcamara/laravel-localization/pull/76 should finally fix this issue.  Ended up not needing the change to Laravel, but it will still be useful for people who want to move the localization around so it's still being requested.\n. Branch is merged as of yesterday.  Please re-test and close this issue if we're good to go.\n. Sorry about my previous comments, I didn't fully understand the issue.  Lack of sleep.\nWhat about adding extending Illuminate\\Routing\\Controller and moving transRoute in to the controller itself, removing it from LaravelLocalization.  This would force the use of a new LocalizedController class that is capable of understanding localized routes and calls the correct function using something similar to the code @goosechaser mentioned above?\n. I like what you did here, but as mentioned in https://github.com/mcamara/laravel-localization/issues/30 I think the languages should be displayed in their native language not in the language that's currently being displayed.\n. This is ready to go.  Sorry about all the opens and closes.  To many ideas.\n. Thanks,  it's good to get a second pair of eyes on my code.  It's probably wise to move my code to a \"development\" branch for now and revert master until we test and work out any bugs.\nOn another note,  I'm going to take time this week to write up tests for all the code in this package.\n. This is good to go once https://github.com/mcamara/laravel-localization/pull/40 is merged.\n. I think an override option is great.  You folder structure is correct, but I didn't want to go as far as to have the full data for the current array in separate files, although that might be a good option.  I was more thinking that inside each locale.php we would have just the native name by default since the other data wouldn't really change.\n//es\narray (\n   'es' => \"Espa\u00f1ol\",\n);\nThen if someone wanted to override the languages  they could just create their own language file like below and use the function from https://github.com/mcamara/laravel-localization/pull/39 which I could merge in, but it's essentially just a wrapper for Lang::trans so I'm not sure about that.\n//es\narray (\n   'en' => 'Ingl\u00e9s',\n   'es' => 'Espa\u00f1ol',\n   'pt' => 'Portugu\u00e9s',\n   'it' => 'Italiano'\n);\n. @jaumesala thinking about this a bit more I like your structure suggestion a bit more than what I was thinking.  If everyone is on board with that idea I'll start implementing it this week.\n. @jaumesala thanks for the info.  I'll be sure to add this to the readme when this is completed.\n. Obviously only tagging once we're ready to increment.\nWe also need to be sure to update the composer.json with the current version number as well.\n. If you can, also tag some of the older versions.\nhttp://stackoverflow.com/questions/4404172/git-tag-older-commit\n. Your right. I'll create a fix and pull-request shortly.\n. Also, you're initial issue is valid.  I'll alter the function to deal with paths.\n. https://github.com/mcamara/laravel-localization/pull/49 should fix your issues.\n. @nikosv the fixes for this issue have been merged up in to the master branch.  Can you confirm if your issue is resolved or not?\n. I'll take a look at these tomorrow.\nOn Tue, Jan 21, 2014 at 10:19 PM, nikosv notifications@github.com wrote:\n\n@drewjw81 First of all some changes must be made to languagebar.blade.php whicj is still using LaravelLocalization::getCurrentLanguage().\nWhat is more getLocalizedUrl works great for 'hideDefaultLanguageInRoute' => false but behaviour doesn't seem to change for 'hideDefaultLanguageInRoute' => true.\nMoreover, even though it is not that important, it would be better if someone could just do LaravelLocalization::getLocalizedUrl(LaravelLocalization::getCurrentLocale(), 'route_name') instead of\nLaravelLocalization::getLocalizedURL(LaravelLocalization::getCurrentLocale(), '/route_name'\nwhile it makes sense as it is for the home route.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mcamara/laravel-localization/issues/47#issuecomment-32883912\n. Fixed the issues mentioned above in https://github.com/mcamara/laravel-localization/pull/55\n\nStaring work on suggested getLocalizedUrl changes.\n. All the above issues including one new one I discovered should be solved in v0.10.1 coming in pull request https://github.com/mcamara/laravel-localization/pull/55\n. @nikosv can you confirm if all the issues related to this are completed now?  If so please close off the ticket.\n. Pull request https://github.com/mcamara/laravel-localization/pull/76 should finally fix this issue.\n. Branch is merged as of yesterday.  Please re-test and close this issue if we're good to go.\n. What is the result?\n. Thanks for catching that.  I should always be stripping the trailing slashes.  https://github.com/mcamara/laravel-localization/pull/77 fixes this and one more minor issue.\n. That is by design, for localizing relative URLs.  If you want \"http://laravel.dev/contact/en\" you'll need to pass \"http://laravel.dev/contact\".\nLaravelLocalization::LocalizeURL('/contact') will return \"/contact/en\"\nLaravelLocalization::LocalizeURL('/contact/') will return \"/contact/en\" (v0.13.2)\nLaravelLocalization::LocalizeURL('http://laravel.dev/contact') will return \"http://laravel.dev/contact/en\"\nLaravelLocalization::LocalizeURL('http://laravel.dev/contact/') will return \"http://laravel.dev/contact/en\" (v0.13.2)\n. Or LaravelLocalization::LocalizeURL(Request::getSchemeAndHttpHost() . '/contact') would probably more appropriate if you need a full URL\n. I'll take a look at this tomorrow and issue a fix. \u00a0Time to finish off the test suite for this as well.\nOn Sat, Feb 22, 2014 at 6:53 PM, nikosv notifications@github.com wrote:\n\n@drewjw81 \ni am afraid i have to reopen the issue since since the \nLaravelLocalization::LocalizeURL('/')\nseems to localize the current url.\nis this normal behaviour? and how do i generate a localized url to the home page.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mcamara/laravel-localization/issues/47#issuecomment-35799074\n. @nikosv I'm not able to replicate this. Can you give any more detail?  I've tried with hideDefaultLocaleInURL true and false and with Laravel public as the root or in a subfolder.\n. It would be great if we could make a separate standalone sitemap package with options like \"lastmod\", \"changefreq\", and \"priority\".  And if the laravel-localization package is installed and in use then the localized URLs would also be generated.\n. If you merge this be sure to add a tag for v0.9\n. I'm also leaning toward locale for the same reasons.\n. Ok, I anticipated this.  I'm about 80% done reworking the code to use locale.  Will send a pull request soon.\n. Just a note, regeneration will no longer be required in v0.10.1 I've fixed the backward compatibility issues.\n. Please wait to merge this, one more fix coming down the pipe.\n. Ok goood to go. Please merge when able.\n. I added some changes to getLocalizedURL as well.\n- getLocalizedURL now returns URL paths in the same format as parameter inputted; trailing and leading slashes or lack of are respected.\n- getLocalizedURL now compatible with query strings\n- merged getNonLocalizedURL and getLocalizedURL\n- getNonLocalizedURL($url = null) is now a wrapper for getLocalizedURL(false, $url = null)\n. There should be no need to wrap in url() or have a leading slash. \u00a0I'll dig in to what's causing the doubled locale code as soon as I have a  opertunity.\n\nOn Wed, Jan 22, 2014 at 11:03 PM, nikosv notifications@github.com wrote:\n\nok...\nwhile LaravelLocalization::getLocalizedURL($lang, 'whatever') works fine\nLaravelLocalization::getLocalizedURL($lang, 'whatever1/whatever2') returns a url with the locale code twice\nReply to this email directly or view it on GitHub:\nhttps://github.com/mcamara/laravel-localization/pull/55#issuecomment-33024562\n. We're working on policy now.\n\nWe decided to keep the deprecated functions for now because we hadn't been previously versioning and a lot of people are using dev-master. \u00a0Once we get to v1.0 we'll stop depricating most likely.\nOn Wed, Jan 22, 2014 at 8:18 PM, Abdelrahman Omran\nnotifications@github.com wrote:\n\nYou are welcome, thanks to you for your awesome package :+1: \nQuestion 1: Why not deleting deprecated functions & keeping it until v1.0.0?\nQuestion 2: How do you manage version numbers? Do you've any internal policy for 'when & what' versions being updated? Suggestion: http://semver.org\nReply to this email directly or view it on GitHub:\nhttps://github.com/mcamara/laravel-localization/pull/57#issuecomment-33012979\n. Yeah, once we get all our ideas settled we'll most likely flip to semantic versioning. \u00a0We we did it now and didn't deprecate, we'd be in v11.0.0 by now.\n\nOn Wed, Jan 22, 2014 at 8:21 PM, Marc C\u00e1mara notifications@github.com\nwrote:\n\n1- There are some people who does not update config/view file, it's dangerous for them to just delete a function.\n2- Actually, we have to organize the number version better, right now, I just add a tag to every commit that adds some new functions. So, I think we are gonna follow the policy you have sent or a similar one.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mcamara/laravel-localization/pull/57#issuecomment-33013199\n. Can I get a clerification of the errors you're receiving?\n\nOn Wed, Jan 22, 2014 at 10:44 PM, nikosv notifications@github.com wrote:\n\n@Omranic yeap...sorry for that. i will repost it.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mcamara/laravel-localization/pull/57#issuecomment-33022634\n. Thanks, didn't see that post. I'll take care of this as soon as I can.\n\nOn Wed, Jan 22, 2014 at 11:08 PM, nikosv notifications@github.com wrote:\n\n@drewjw81 Already posted some info on #55\nReply to this email directly or view it on GitHub:\nhttps://github.com/mcamara/laravel-localization/pull/57#issuecomment-33025083\n. Doing this in v0.13.0\n. The problem is two fold.  First, you're probably not localizing the action in your form.  It should look like this.  It's messy at the moment so I'm going to make changes but currently you should call\n\n<form method=\"POST\" action=\"{{ LaravelLocalization::getLocalizedURL(LaravelLocalization::getCurrentLocale(), '/login') }}\" >\nI'm making it easier in pull request https://github.com/mcamara/laravel-localization/pull/63\n<form method=\"POST\" action=\"{{ LaravelLocalization::localizeURL('/login') }}\"\nThe second issue is we're using a 302 redirect on language redirect which is killing your post. It's causing this\nSubmit form to /login -> language incorrect 302 redirect to /de/login\nI'm also changing the 302 to a 307 this will solve the issue, but you'll still need to localize your URLS.\n. Yes, otherwise you're going to end up having double hits per localized request. And with posts you're going to end up annoying the user since most browsers ask if you want to resubmit data after a redirect. \nAs soon as https://github.com/mcamara/laravel-localization/pull/63 is merged you can use\nLaravelLocalization::localizeURL('/some_url')\n. I need to add that to the readme.\n. Basically yes, let's say the users locale is en.  If you use LaravelLocalizationRedirectFilter then hitting /home will first hit the server and it will redirect to /en/home hitting the server again.\nIf you wrap the URL in the blade template in LaravelLocalization::localizeURL('/home') then the output URL will be /en/home which will result in no redirect and only one hit.\n. No worries. There's a LOT to deal with when localizing via sub-directories.\nIf you use Redirect:to then you are going to need to localize the route.  However, I believe if you use named routes (http://laravel.com/docs/routing#named-routes) you can just call Redirect::route('route-name')\nYou don't need to change anything with return View::make('login.index')\nURLs for AJAX calls should be localized as well.\n. Not using 'before' => 'LaravelLocalizationRedirectFilter' is not going to turn off prefixing.  It will disable auto redirecting, so you'd have only one request, but then your going to have a whole new set of issues unless set hideDefaultLocaleInURL => true.\n. Is English an enabled language in your array of supportedLocales ?\n. You don't have any redirects your wrote yourself to force a user back to mypage.com/en do you?\n. Once pull request https://github.com/mcamara/laravel-localization/pull/76 is merged can you re-test to see if this issue is still occurring.  In theory it should now be fixed.\n. Branch is merged as of yesterday.  Please re-test and close this issue if we're good to go.\n. Not being saved in what context?  Session, Cookie?\n. Sorry I see what the issue is now.  Since you're hiding the default locale you're not going to be able to have redirection to the \"save\" locale.  Redirection only occurs when a browser visits a non-localized URL.  When you set hideDefaultLocaleInURL to true the naked URL itself is treated as a localize URL, with the default locale, and so when a user visits that URL the localization package assumes that they want to view the site in the default locale and does no redirect to the \"save\" language.\n. Tag as v0.12.1\n. If you don't mind submitting a pull request that would be great.\nOn Fri, Feb 14, 2014 at 11:44 PM, Greg Roach notifications@github.com\nwrote:\n\nFirstly, I realise that this is all config data, and I'm free to ignore the supplied data and provide my own...\nYou use the English names of scripts - e.g. \"Latin\" and \"Cyrillic\".\nThere are official 4-character codes for scripts, defined in http://www.unicode.org/iso15924/iso15924-codes.html\nThe codes for Latin and Cyrillic would be \"Latn\" and \"Cyrl\".\nThese are precise and unambiguous.  For example, you use the script name \"Chinese\".  There are actually two main Chinese (Han) scripts - traditional and simplified.  These have the ISO15934 codes \"Hant\" and \"Hans\" - and are used in the corresponding RFC4646 language codes, such as \"zh-Hans\".  There are also other Han scripts, used in Japan (\"Jpan\"), Korea (\"Kore\"), etc.  If we are going to specify them - we should get them right ;-)\n(And if I remember correctly, the symbol in the middle of Ge'ez) is not an apostrophe, but an actual character representing a \"click\" sound.....)\nSo, I am proposing that the current script names are replaced with ISO15924 codes.\nIf you're happy for the change, I can provide a pull-request.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mcamara/laravel-localization/issues/71\n. @fisharebest can you close this off?\n. If you don't mind submitting a pull request that would be great.\n\nOn Fri, Feb 14, 2014 at 11:56 PM, Greg Roach notifications@github.com\nwrote:\n\nFirstly, I realise that this is all config data, and I'm free to ignore the supplied data and provide my own...\nThe config data contains a list of endonyms - the names of languages in their own language.\nThese have been capitalised according the English grammar rules.\nEach language has its own rules for capitalisation.  For example, French and Polish use lower case for language names, and so should be \"fran\u00e7ais\" and \"polski\" instead of \"Fran\u00e7ais\" and \"Polski\".\nYou can see an example of this in the language menu at http://dev.webtrees.net/demo-dev\nCapitals may look \"correct\" to a native English speaker, but they look equally incorrect to speakers of other languages.\nThe \"official\" version of a languages name can be found in the CLDR at http://cldr.unicode.org\nI propose that the language names be changed to match the prefered capitialisation rules of each language.\nIf you are happy with the change, I can supply a pull-request.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mcamara/laravel-localization/issues/72\n. @fisharebest can you close this off?\n. Does calling LaravelLocalization::getCurrentLocale() not work for you?\n. This is an issue were aware of. \u00a0I think I found a way to fix it now thanks to your post. \u00a0I should have a fix out in the next 24hrs\n\nOn Sat, Feb 15, 2014 at 5:32 AM, Greg Roach notifications@github.com\nwrote:\n\nI have several laravel applications on my development server.  They have URLs such as http://localhost/foo/public/xxx and http://localhost/bar/public/xxx.\nThe redirect only works when the applications are installed in the root folder.\nSuppose I request http://localhost/foo/public/en/xxx and configure this default locale to be removed.  This condition is identified correctly, because line 933 is this:\n  $params = explode('/', Request::path());\nand Request::path() returns en/xxx\nHowever, in attempting to remove the path in function getLocalizedURL() the code looks at Request::fullUrl(), and tries to strip the leading en from foo/public/en/xxx.\nThis results in a redirect to an identical URL, and a redirect loop.\nInstead, this function should probably be working with something like Request::getBasePath() and Request::path()\nSimilarly, if we want to add the locale, our request for foo/public/xxx is redirected to en/foo/public/xxx instead of foo/public/en/xxx and unsurprisingly gives a 404.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mcamara/laravel-localization/issues/74\n. Pull request https://github.com/mcamara/laravel-localization/pull/76 should fix this issue.\n. Are you pulling it from my repository using the baseurl-fix branch?  Since it hasn't been merged in to this one yet.\n. Branch is merged as of yesterday.  Please re-test and close this issue if we're good to go.\n. Pull request submitted.\n. @jartaud Very sorry, I messed up the example.  Pull request was submitted for change.\n. @musixite @vishalmote @vishal989041 did the post by @jaumesala fix your issues?  Or are you still having them? \n. @jaumesala thanks for the thorough report while this may look like an issue it's actually a side effect of hideDefaultLocaleInURL being set to true.\n\nWhen useAcceptLanguageHeader = true is set the unlocalized url is treated as the default language.  So in the case where ca is the default http://example.com would always return ca as the language, even if the browsers preferred language is another supported language, negotiation will actually never occur in this case.\nI've added a warning to the README and the config to explain this behavior.  https://github.com/mcamara/laravel-localization/pull/86\n. I need to think about this a bit. I understand what you want, and I want to accommodate this, but there are a few thing we'll need to account for.\nThis would cause an issue if the user wanted to see the default language but their browser is set to preferrer another language;  in the case of you're original example where cookies and sessions are off and negotiation is true, or say the user doesn't store cookies or has opted out of cookie storage.\nI understand this is an edge case for a user, this might also cause an issue with a crawler that sends a preferred language and doesn't store cookies.\nEdited: my first post was incorrect.\n. @adamzwakk thanks for reporting this @mcamara fix appears to solve the problem.\n. Do you have a public or dev site I can look at?  You can email me (check my profile https://github.com/drewjw81) with the link if it's private.\n. Since there's a getPrefix option available on routes available as of Laravel v4.1.22 I think I can build a nice solution for this.  Give me a couple of days.\n. What version are you using? This should have been corrected in v0.13.4\n. @mcamara looks like we forgot to tag v0.13.4 can you do that as soon as you have a chance?\nOn Wed, Mar 26, 2014 at 5:12 PM, Rokela notifications@github.com wrote:\n\nHi!\nI have 0.13.3 version. \nI can't found 0.13.4 version.\np.s.\nThank you for the great work!\nReply to this email directly or view it on GitHub:\nhttps://github.com/mcamara/laravel-localization/issues/89#issuecomment-38658592\n. I might be able to add a callback option that would be run if setLocale successfully changes the locale.  That would theoretically create a place to make changes to the database ONLY when the locale actually changes.  I'll look in to it.  If anyone else has an idea please comment.\n. What about referencing from the root by adding a leading slash to the href?\n\n<link type=\"text/css\" rel=\"stylesheet\" href=\"/css/style.css\" />\n. What about just parsing the US from en-US?\n//Returns country code or null.\ngetCountry($code) {\n     $split = explode('-', $code);\n     return $split[1];\n}\n. ",
    "Fed03": "glad to help if I could^\n. ",
    "musixite": "Looks like I fixed it without really knowing what happened :/\nHowever, I'm wondering now how to get the proper url when I use {{{ URL::to('path-to-be-translated) }}}\nEx.\nIn English:\nAbout\nBecomes in French:\nA propos\nI tried using the helper getURLLanguage() without much success.\nI do have the correct path translated in each language.\nIt works fine with the language bar once I'm in the page.\nWhat I can't figure out is a link I'm generating myself in a blade.\n. You got it! So simple yet... ;)\n. same here.\n. ",
    "jaumesala": "Thanks to you for this package!\nGr\u00e0cies per la feina ben feta ;-)\n. I agree, I would say the easiest way is to modfify the \"supportedLanguages\" array and make it multidimensional and, as we add this, why we don't add the different standardized nomenclature from ISO 639? like so:\nPHP\n'supportedLanguages' => array(\n   //key (639-1) => array( Language name, Native name, 639-2/T, 639-2/B, ...? )\n   \"ja\" => array( \"Japanese\", \"\u65e5\u672c\u8a9e\", \"jpn\", \"jpn\" ),\n   ...\n   \"de\" => array( \"German\", \"Deutsch\", \"deu\", \"ger\" ),\n   ...\n   \"es\" => array( \"Spanish\", \"Espa\u00f1ol\", \"spa\", \"spa\" ),\n   ...\n)\nThen we can modify getLanguageBar() to accept a new parameter used to determine the output style...\nSee: http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n. I've just find out there's still something wrong. There's a problem with the session.\nIt looks like it's working as it should be, but if you wait some seconds the default language is changed \"supposedly\" by the session and then the default language changes to the current one, which generates wrong results.\nCan someone check it out?\n. If you don't understand my explanation, let me know it.\nI've tested the patch in a project I'm working on and it fixes the problem. \nStill, I'd like if more eyes can review my code ;-)\n. I've talked with Taylor Otwell, it seems Illuminate\\View\\Environment will be deprecated in 4.2 and it will work as of 4.1.15.\nDon't merge the commit until 4.1.15 is stable, at least. Or forget about it until 4.2 ;-)\n. Illuminate\\View\\Environment will exists until 4.2. now It basically extends Illuminate\\View\\Factory...\n//set up an alias to accommodate >=4.1 and <4.1\nPHP\nif ($this->app['laravel-localization.4.2'])\n   class_alias('Illuminate\\View\\Factory', 'IlluminateViewFactory');\nelse\n   class_alias('Illuminate\\View\\Environment', 'IlluminateViewFactory');\nso, then you only have to reference it like this:\nPHP\nuse IlluminateViewFactory as ViewFactory;\n. Looks we can forget about this. Taylor reverted the changes in 4.1.16\nIlluminate\\View\\Factory will be introduced in 4.2...\n. If I understand your explanation, you mean a file structure like this:\nlaravel-localization\n  lang\n    es\n      locale.php\n    en\n      locale.php\n    ...\nThen inside each locale.php\nPHP\n//es\narray (\n   \"name\" => \"Spanish\",\n   \"script\" => \"Latin\",\n   \"dir\" => \"ltr\",\n   \"native\" =>  \"Espa\u00f1ol\"\n);\nTo me it sounds good, but, I'd suggest to add a overwrite option, with this I mean that we should first check if there's a \"locale.native\" in the \"app/lang\" folder of the main app. If not, the one in the package \"lang\" folder should be used instead. This way, if somebody, like #39, wants to modify the native name it can be done without modifying the package files.\nBtw, if I'm not wrong, with this patch the \"supportedLocales\" array will look like this again, right?\nPHP\narray( \"en\", \"es\", ... );\nLet's see if @mcamara (or someone else) has something to say. \n. Take a look at this :smiley: \nhttp://laravel.com/docs/localization#overriding-package-language-files\n. I thought in that option, and I checked other sitemap-generators but I found that I really need to have access to laravel-localization methods to extract data, like route names, supported locales, etc...\nSo, this means we should create a sitemap-generator for (and only for) the laravel-localization package.\nI think it doesn't worth spending time in this feature by now, the package is changing very fast, and the api is not stable enough.\nLet's keep this thread in mind for a near future ;-)\n. Hi guys, as I started this thread a few years ago, here is the code I use for my projects. It is not very clean, but I've never had time to improve it (since 2014 hehe). This code is just to give you some ideas to start tinkering. \nBasically, the sitemapRepo filters all the routes in $excludedRoutes and $excludedPartials. Then I generate a multidimensional array to link each page with their alternate. And finally I send this array to the view.\nphp\n// app/routes/web.php\nRoute::get('sitemap.xml', ['uses' => 'SitemapController@index', 'as' => 'sitemap']);\n```php\n// app/Http/Controllers/SitemapController.php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nuse App\\Repositories\\SitemapRepository;\nclass SitemapController extends Controller\n{\n    protected $sitemapRepo;\npublic function __construct(SitemapRepository $sitemapRepo)\n{\n    $this->sitemapRepo = $sitemapRepo;\n}\n\npublic function index(Request $request)\n{\n    $excludedRoutes = [\n        \"\",\n        \"cookies\",\n        \"sitemap\",\n        \"legality\",\n        \"privacy\",\n        \"login\",\n        \"logout\",\n        \"register\",\n    ];\n\n    $excludedPartials = [\n        \"orders.\",\n        \"password.\",\n        \"admin.\",\n    ];\n\n    $routes = $this->sitemapRepo->getStaticRoutes($excludedRoutes, $excludedPartials, 1.0);\n\n    /* Here you can add custom parsers in case you want to generate \n     * routes for posts, products, profiles, etc. i.e. here is a custom \n     * method that should return the routes of all the posts in your web.\n     */\n\n    // $postsRoutes = $this->getPostRoutes('posts.show', 0.9);\n\n    $routes = array_merge($routes, $postsRoutes);\n\n    $data = compact('routes');\n\n    return response()\n        ->view('sitemap.xml', $data)\n        ->header('Content-Type', 'text/xml');\n}\n\n}\n```\n```php\n// app/Repositories/SitemapRepository.php\nnamespace App\\Repositories;\nuse Route;\nuse LaravelLocalization;\nclass SitemapRepository\n{\npublic function getStaticRoutes($excludedRoutes = [], $excludedPartials = [], $priority = 1.0)\n{\n    $routes = $this->getStaticRouteNames($excludedRoutes, $excludedPartials);\n    $locales = LaravelLocalization::getSupportedLanguagesKeys();\n    $staticRoutes = [];\n\n    foreach( $locales as $locale ){\n\n        foreach ( $routes as $route){\n            $r = [];\n            $loc = $this->getLocalizedURL( $locale, $route);\n            $r['loc'] = $loc ? $loc : \"\";\n            $r['priority'] = $priority;\n\n            foreach ($locales as $alternate) {\n                $alt = $this->getLocalizedURL( $alternate, $route);\n                $r['alternates'][$alternate] =  $alt ? $alt : \"\";\n            }\n            $staticRoutes[] = $r;\n        }\n    }\n    return $staticRoutes;\n}\n\npublic function getStaticRouteNames($excludedRoutes = [], $excludedPartials = [])\n{\n    $allRoutes = Route::getRoutes();\n\n    $staticRouteNames = array();\n\n    foreach ( $allRoutes as $route){\n\n        if(in_array(\"GET\", $route->methods))\n        {\n            if( ! in_array($route->getName(), $excludedRoutes )\n                && ! $this->strpos_array($route->getName(), $excludedPartials )\n                )\n            {\n                $staticRouteNames [] = $route->getname();\n            }\n        }\n    }\n\n    return $staticRouteNames;\n}\n\nprivate function strpos_array($haystack, $needle, $offset=0)\n{\n    if(!is_array($needle)) $needle = array($needle);\n\n    foreach($needle as $query) {\n        if(strpos($haystack, $query, $offset) !== false) return true; // stop on first true result\n    }\n\n    return false;\n}\n\npublic function getLocalizedURL($locale, $baseRouteName, $args = [])\n{\n    return LaravelLocalization::getURLFromRouteNameTranslated( $locale, 'routes.'.$baseRouteName, $args);\n}\n\npublic function getSupportedLocalesKeys()\n{\n    return LaravelLocalization::getSupportedLanguagesKeys();\n}\n\n}\n```\n```php\n// resources/views/sitemap/xml.blade.php\n{!! '<'.'?'.'xml version=\"1.0\" encoding=\"UTF-8\"?>' !!}\n\n@foreach($routes as $route)\n    \n{{ $route['loc'] }}\n        @foreach($route['alternates'] as $locale => $url)\n            \n        @endforeach\n        {{ $route['priority'] }}\n\n@endforeach\n\n``. +1 Locale\nIn fact Laravel use _locale_ to define the application language...\n. :+1: \n. This error line is part of functionbuildDeprecatedConfig()`, are you using the deprecated config file?\nTry to remove any old config file and then execute:\nphp artisan config:publish mcamara/laravel-localization\nFinally edit the new config file according to your needs.\n. Thanks @drewjw81 for your reply but IMHO, I think we should separate this two concepts.\nI don't believe it's a good idea to force a redirection in the root domain only because we want to ask the browser its preferred language. Don't you think?\nFirst of, we should check if we have to negotiate with the browser to find out the best language option for the user.\nThen, once we know the preferred language, the package should generate the URL according to the config parameters.\nSo, imagine this situation (app.locale = 'ca'):\nA. Browser's preferred locale = 'ca'\n1. Should I ask the browser? yes\n2. Ok browser, what's your preferred language? ca\n3. Do we have ca as a acceptedLocale? yes\n4. Is ca defaultLocale? yes\n   1. Do we have to hide default? yes -> http://example.com\n   2. Do we have to hide default? no -> http://example.com/ca\nB. Browser's preferred locale = 'es'\n1. Should I ask the browser? yes\n2. Ok browser, what's your preferred language? es\n3. Do we have es as a acceptedLocale? yes\n4. Is  es defaultLocale? no\n   1. Do we have to hide default? yes -> http://example.com/es\n   2. Do we have to hide default? no -> http://example.com/es\nOtherwise :\n1. Should I ask the browser? no\n2. Ok App, what's your default language? ca\n3. Do we have ca as a acceptedLocale? (Obvious)\n4. Is ca defaultLocale? (Obvious)\n   1. Do we have to hide default? yes -> http://example.com\n   2. Do we have to hide default? no -> http://example.com/ca\nWhat do you think?\n. @torocatala, I know this is not a real solution but, have you considered to use Sub-Domain Routing for your scenario?\nHaving http://mobile.example.com/whatever for you mobile site\nand http://example.com/whatever for your regular site?\n``` PHP\nRoute::group(array('domain' => '{prefix}.example.com'), function()\n{\n    Route::get('whatever', function($prefix)\n    {\n        if($prefix == 'mobile')\n        {\n            // return mobile view\n        }\n    //return regular view\n});\n\n});\n```\n. Maybe I'm wrong but this fix breaks getURLFromRouteNameTranslated().\nBefore the update, my environment was working perfectly. Given the following parameters:\nCurrent url: example.com\nCurrent locale: 'es'\nNavbar code to generate the translated route (team):\nLaravelLocalization::getURLFromRouteNameTranslated(Config::get('app.locale'), 'routes.team')\nThe link for the team section was:\nexample.com/es/equipo\nNow I get:\nexample.com/\nAs you can see it's not working anymore.\nDid this commit introduce an easy way to generate the translated routes of the navbar now???\n. What you want is to translate the route, in this case you should do this:\nin config.php\n'hideDefaultLocaleInURL' => true,\nin routes.php\nRoute::get(LaravelLocalization::transRoute('routes.news'), array('as' => 'news', function($slug = null)\n{ ... }\nin lang\\xx\\routes.php\n```\n\"news\" => \"news/{slug?}\", // this is the english version...\n\n\"news\" => \"noticias/{slug?}\", // this is the spanish version...\n```\nThen, to generate the href to the \"news\" route:\n{{ url(LaravelLocalization::getURLFromRouteNameTranslated(Config::get('app.locale'), ['routes.news'])) }}\nLet us know if it works for you.\n. I think I don't understand your problem. In my projects when I have to generate the alternative language urls I have this: LaravelLocalization::getLocalizedURL('XX') where XX is the locale.\nLaravelLocalization handles the rest... \nIn the example above would produce:\nhttp://domain.com/news\nhttp://domain.com/es/noticias\n. Oh wait I think I got you! So your main problem is when you need to translate an url with an slug right?\nHere's what I do, It's pretty straightforward in fact.\nI usually do it in routes.php but you can move the functionality to your controller.\nhere the route:\n```\nRoute::get(LaravelLocalization::transRoute('routes.news'), array('as' => 'news', function($slug = null)\n   {\n      if(is_null($slug))\n      { \n         $data['posts'] = Post::->simplePaginate(9);\n         return View::make('news.index', $data);\n      }\n  $slug_locale = \"slug_\" . LaravelLocalization::getCurrentLocale();\n  $data['post'] = Post::where($slug_locale, '=', $slug)->first();\n\n  if(is_null($data['post']))\n  {\n     return Redirect::route('news');\n  }\n\n  $data['urlLocale_es'] = url(LaravelLocalization::getURLFromRouteNameTranslated('es', ['routes.news']), $data['post']->slug_es);\n  $data['urlLocale_en'] = url(LaravelLocalization::getURLFromRouteNameTranslated('en', ['routes.news']), $data['post']->slug_en);\n\n  return View::make('news.show', $data);\n\n}));\n```\nThen in your language selector:\n<a href=\"{{ $urlLocale_es or LaravelLocalization::getLocalizedURL('es') }}\" hreflang=\"es\">es</a>\n<a href=\"{{ $urlLocale_en or LaravelLocalization::getLocalizedURL('en') }}\" hreflang=\"en\">en</a>\nIn the Post model you can have an scope to generate the slug everytime you save the title, like this:\n```\npublic function setTitleEsAttribute($value)\n{\n   $this->attributes['title_es'] = $value;\n   $this->attributes['slug_es'] =  Str::slug($value);\n}\npublic function setTitleEnAttribute($value)\n{\n   $this->attributes['title_en'] = $value;\n   $this->attributes['slug_en'] =  Str::slug($value);\n}\n```\nIs that what you need?\n. @jonasva did it work for you?\n. Well, if your problem is how to generate a url (translated) to the previous page you can do the following:\n1- Flash the current route name in each request\nPHP\nSession::flash('previousRoute', Route::currentRouteName());\n2- Once in the next request, retrieve this value\nPHP\n$prevoiusRoute = Session::get('previousRoute');\n3- Call LaravelLocalization::getURLFromRouteNameTranslated() in the view\nPHP\nurl(LaravelLocalization::getURLFromRouteNameTranslated('en', [$prevoiusRoute])\nAbout the handling and translation of the slug, I store the titles and slugs localized in my DDBB.\nI use the slug as a key to search into the DDBB table. If the current locale is \"en\" then I try to find a row where \"slug_en\" = \"title-of-the-post-in-english\".\nPHP\n...\n$slug_locale = \"slug_\" . LaravelLocalization::getCurrentLocale(); // If the locale is \"en\" then this var will be \"slug_en\"\n$data['post'] = Post::where($slug_locale, '=', $slug)->first();\n...\nWhat about now @jonasva ? \n. The package is made to translate/localize URLs, not a view.\nFor views, you must use Laravel's built-in localization methods.\nLaravel localization documentation\nIt is a good practice to keep your translations in files and not in a view.\nIf you keep a view for each language that you support you will have to edit all these files every time there's a change in the project...\nBut of course, you can always use a switch statement to return a different view...\nPHP\nswitch (LaravelLocalization::getCurrentLocale()) {\n   case 'en':\n      return View::make('en.contact');\n      break;\n   case 'es':\n      return View::make('es.contact');\n      break;\n   //...\n   default:\n      //...\n      break;\n}\nHope it helps you.\n. I agree. last update 1.0.4 doesn't fix the parameters bug. You can reproduce the problem with the next setup:\n``` PHP\n//config/laravelLocalization.php\n'supportedLocales' => array(\n   'ca', //...\n   'es', //...\n   'en', //...\n),\n'useAcceptLanguageHeader' => false,\n'useSessionLocale' => false,\n'useCookieLocale' => false,\n'hideDefaultLocaleInURL' => true,\n// lang/en/routes.php\n<?php\n   return array(\n      \"home\"         => \"/\",\n      \"products\"     => \"products/{ref}\"\n);\n// inside.a.view.blade.php\n{{ LaravelLocalization::getURLFromRouteNameTranslated(Config::get('app.locale'), 'routes.products') }}\n```\nI should get http://example.com/products/ but I get http://example.com/products/{ref}.\nAnd the same for other languages...\nThere's also a problem with the home route. With the same configuration, if I call\nPHP\n{{ LaravelLocalization::getURLFromRouteNameTranslated(Config::get('app.locale'), 'routes.home') }}\nI get // instead of http://example.com/\nI haven't had time to digg into the code, sorry :-/\n. I've just find out that getURLFromRouteNameTranslated() works as expected if the route has optional parameters (the ones with \"?\").\nMaybe there's something wrong with the method substituteAttributesInRoute() @mcamara?\n. But @mcamara , there are two type of routes in the system, the ones that resolve a route and the ones exposed in the view. Let me explain:\nGiven the next translation routes:\nPHP\n//resources/lang/en/routes.php\n\"home\"       => \"/\",\n\"products\"   => \"products/{slug}\",\n\"news\"       => \"news/{slug?}\",\nWith the following routes:\nPHP\n//app/Http/routes.php\nRoute::get(LaravelLocalization::transRoute('routes.home'),[ 'as' => 'home', function(){\n   return View::make('sections.home.index');\n}]);\nRoute::get(LaravelLocalization::transRoute('routes.products'),[ 'as' => 'products', function($slug){\n   return View::make('sections.products.index');\n}]);\nRoute::get(LaravelLocalization::transRoute('routes.news'),[ 'as' => 'news', function($slug = null){\n   return View::make('sections.news.index');\n}]);\nThe method LaravelLocalization::transRoute() should return the following strings:\nPHP\n\"/\"\n\"products/{slug}\"\n\"news/{slug?}\"\nBut, in a blade view, if we have this:\nPHP\nLaravelLocalization::getURLFromRouteNameTranslated(Config::get('app.locale'), 'routes.home')\nLaravelLocalization::getURLFromRouteNameTranslated(Config::get('app.locale'), 'routes.products')\nLaravelLocalization::getURLFromRouteNameTranslated(Config::get('app.locale'), 'routes.news')\nThe method LaravelLocalization::getURLFromRouteNameTranslated() should return the following strings (no attributes passed as third argument):\nPHP\n\"http://domain.dev/\"\n\"http://domain.dev/products/\"\n\"http://domain.dev/news/\"\nFrom my point of view, Laravel should be the one responsable to generate an exception if we call a route that requires a mandatory attribute and we haven't provided it. \nRight now the package, given the previous examples, generates this (in a view file): \nPHP\n\"//\"\n\"http://domain.dev/products/{slug}\"\n\"http://domain.dev/news/\"\nOMG, what a long comment! Hope it will help you. Otherwise let me know it, I'm open to help you.\nSalut! :-)\n. @mcamara I don't understand what you mean with:\n\nIf you ask for a route without needed parameters using route function Laravel doesn't raise any exception, it just leave the attribute between brackets as the package.\n\nWhat I meant with my previous comment is that, in a view when you want to generate a URL for an specific route,  LaravelLocalization::getURLFromRouteNameTranslated() should only return the fixed part specified in the translation route's file (resources/lang/XX/routes.php). So, i.e.:\n``` PHP\n//config/app.php\n'locale' => 'en',\n//config/laravelLocalization.php\n'supportedLocales' => [\n   'ca', //...\n   'en', //...\n],\n'useAcceptLanguageHeader' => false,\n'useSessionLocale' => false,\n'useCookieLocale' => false,\n'hideDefaultLocaleInURL' => true,\n//resources/lang/en/routes.php\nreturn [\n   'home'       =>  '/',\n   'products'   => 'products/{slug}',\n   'news'       => 'news/{slug?}',\n   'lorem'      => 'lorem/{ipsum}/{dolor?}'\n];\n//resources/lang/en/routes.php\nreturn [\n   'home'       =>  '/',\n   'products'   => 'productes/{slug}',\n   'news'       => 'noticies/{slug?}',\n   'lorem'      => 'lorem/{ipsum}/{dolor?}'\n];\n//app/Http/routes.php\nRoute::get(LaravelLocalization::transRoute('routes.home'),[ 'as' => 'home', function(){\n   return View::make('home.index');\n}]);\nRoute::get(LaravelLocalization::transRoute('routes.products'),[ 'as' => 'products', function($slug){\n   return View::make('products.index');\n}]);\nRoute::get(LaravelLocalization::transRoute('routes.news'),[ 'as' => 'news', function($slug = null){\n   return View::make('news.index');\n}]);\nRoute::get(LaravelLocalization::transRoute('routes.lorem'),[ 'as' => 'lorem', function($ipsum, $dolor = null){\n   return View::make('lorem.index');\n}]);\n```\nThe routes generated by the method LaravelLocalization::getURLFromRouteNameTranslated() (inside a view, of course) should be:\n```\n//without arguments\n// Routes en\nHome       => http://example.dev/\nProducts   => http://example.dev/products/\nNews       => http://example.dev/news/\nLorem      => http://example.dev/lorem/\n// Routes ca\nHome       => http://example.dev/\nProducts   => http://example.dev/ca/productes/\nNews       => http://example.dev/ca/noticies/\nLorem      => http://example.dev/ca/lorem/\n```\nPay attention to route \"lorem\", it expects 2 arguments, one of them mandatory, but nothing is printed!\nNow, if we call again the method LaravelLocalization::getURLFromRouteNameTranslated() but this time we supply the needed route arguments, we should get the complete routes, like so:\n```\n//with arguments\n// Routes en\nHome       => http://example.dev/\nProducts   => http://example.dev/products/laravel-localization\nNews       => http://example.dev/news/mcamara-rules\nLorem      => http://example.dev/lorem/foo/bar\n// Routes ca\nHome       => http://example.dev/\nProducts   => http://example.dev/ca/productes/laravel-localization\nNews       => http://example.dev/ca/noticies/mcamara-mola\nLorem      => http://example.dev/ca/lorem/foo/bar\n```\nSo, with your question, should you raise an exception if no arguments are passes, IMHO, absolutely no! Why? Because the rendered (HTML) view doesn't care about what's inside, you could even hard-code a link to a route (in a view) and make a mistake... Then, if you click the link, well, Laravel will throw a NotFoundHttpException exception.\nIf you still have any question let me know it!\nDamn, I should use the time spent writing the bug reviews in fixing the bugs indeed ^^'\n. What do you have in your config files? app.locale, app.fallback_locale package config file, translation routes? etc...\n. Well, first of all, get rid of the configServiceProvider code, use artisan vendor:publish instead (and check the config folder). Then in your routes.php, I'm not sure if this can be the problem, but I'd suggest to have only one Route::group(), just place both middlewares together, like so:\nPHP\nRoute::group(\n   [\n      'prefix' => LaravelLocalization::setLocale(),\n      'middleware' => [ 'localizationRedirect','localize' ]\n   ],\n   function(){\n      ...\n   }\nBtw, I assume your routes are correctly translated...\nLet us know if this solves your problem.\n. @KIVagant you can always generate a URL for a given named route using route() helper.\nIt will localize the route (with the current app.locale) according to the translation in the routes.php file\nPHP\n<form action=\"{{ route('name.route') }}\" > ... </form>\n. ",
    "nikosv": "i confirm this issue in development environment (localhost/mysite/public). However this is not the case when the application is on the server. It works fine there. However it still is a problem in development.\n. @mcamara The problem me and @Ulrira  are facing is occuring with the example code found here: http://packalyst.com/packages/package/mcamara/laravel-localization\nIt looks likes that the problem has something to do with the directory setup (i.e. localhost/project-directory/public). A workaround i used to solve my problem was to create a vhost to the apache (i.e. myproject.dev). By using the vhost domain, language bar works as expected generating the correct links myproject.dev/en and myproject.dev/es instead of the links @Ulrira mentions in his first post.\n. The issue is still occuring.\nFor a setup in a folder like for example localhost/laravel/public\nThe generated link in the language bar is http://localhost/en/laravel/public instead of http://localhost/laravel/public/en\n. well it's just something i am used to do in development environment. In production i am running the public folder as the root. Setting vhosts however solves my problem even locally.\n. well... if you are developing on windows running xampp or wamp then it's common practice to keep all your projects to localhost (localhost/project1, localhost/project2 etc). In that case the index file of lavavel is located in localhost/laravel/public.\n. in codeigniter i used to get the base url independently of the folder structure using something like\n$base_url = 'http' . ((isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 's' : '').'://'.$_SERVER['HTTP_HOST'].str_replace('//','/',dirname($_SERVER['SCRIPT_NAME']).'/');\n. @drewjw81 i have made an attempt to solve the issue. Although not that elegant it seems to work.  Take a look if you don't mind.\nhttps://github.com/nikosv/laravel-localization/commit/c9c12a0d7a56d19eaf53a447147d2c6f9ab90c1a\n. @drewjw81 no problems... i just noticed these lines in the code which look pretty stupid. Please ignore them.\nif (empty($root_url['path']))\n{\n$root_url['path'] ='';\n. hmm.. on a second look they are probably correct.. anyway.. \n. @Ulrira It is a known issue. @drewjw81 has already proposed a laravel change in laravel/framework#3369 that will help to fix this problem. You can always use vhost as a workaround.\n. My bad, I dug deeper into the code and looks like the correct way to generate links is as follows:\nLaravelLocalization::getLocalizedURL(LaravelLocalization::getCurrentLanguage(), url($category->category_slug))\n. However shouldn't the getLocalizedURL() function return a url with no language code for the default language if the 'hideDefaultLanguageInRoute' in config is set to TRUE? I think it makes more sense than redirecting from a localized url to a non-localized for the default language.\n. @drewjw81 First of all some changes must be made to languagebar.blade.php which is still using\nLaravelLocalization::getCurrentLanguage().\nWhat is more getLocalizedUrl works great for 'hideDefaultLanguageInRoute' => false but behaviour doesn't seem to change for 'hideDefaultLanguageInRoute' => true.\nMoreover, even though it is not that important, it would be better if someone could just do\nLaravelLocalization::getLocalizedUrl(LaravelLocalization::getCurrentLocale(), 'route_name')\ninstead of\nLaravelLocalization::getLocalizedURL(LaravelLocalization::getCurrentLocale(), '/route_name')\nwhile it makes sense as it is for the home route.\n. There is still the issue related to\nLaravelLocalization::getLocalizedUrl(LaravelLocalization::getCurrentLocale(), 'whatever1/whatever2')\nwhich produces links with twice the locale in the url like so\nen/en/whatever1/whatever2\nas i have described in #55 \n. @drewjw81 i am afraid we still have a problem with\nLaravelLocalization::LocalizeURL('/')\nwhich doesn't seem to work properly.\n. it produces a url with a slash in the end like \nhttp://localhost/laravel/public/en/ \nwhich redirects to \nlocalhost/en\ninstead of producing http://localhost/laravel/public/en (without the slash in the end)\n. i am not sure if this is due to the same issue but there where also problems in my vhost\nLaravelLocalization::LocalizeURL('contact')\ninstead of \"laravel.dev/contact\" returns just \"contact\"\n. ok... i guess everything looks good ... i am closing the issue.\n. @drewjw81 \ni am afraid i have to reopen the issue since the \nLaravelLocalization::LocalizeURL('/')\nseems to localize the current url instead of the home url for the default language with the language prefix hidden.\nany other language which the language prefix is present in the url works like a charm.\n. Now i am not able to replicate it either... so i guess it was my mistake...\nsorry for the trouble...\nissue closed.\n. So... after this merge i guess the getLocalizedURL should be used like so:\nLaravelLocalization::getLocalizedURL($lang, url('whatever'))\nor with a leading slash like so\nLaravelLocalization::getLocalizedURL($lang, '/whatever')\nand not like so\nLaravelLocalization::getLocalizedURL($lang, 'whatever')\nam i correct?\n. @drewjw81 \nwhile LaravelLocalization::getLocalizedURL($lang, 'whatever') works fine\nLaravelLocalization::getLocalizedURL($lang, 'whatever1/whatever2') returns a url with the locale code twice\nHowever LaravelLocalization::getLocalizedURL($lang, '/whatever1/whatever2') also works fine.\nIs this an issue? or it is just that the leading slash is mandatory?\n. @Omranic yeap...sorry for that. i deleted the post and reposted it to the correct merge.\n. @drewjw81 Already posted some info on #55 \n. The problem seems to be with the Request::url() which returns url without get variables.\n. The line below on line 250 seems to solve the problem but i am not sure if it the right or the most elegant way to do it.\n$url = Request::url().'?'.$_SERVER['QUERY_STRING'];\n. Request::fullUrl() does the trick. Merge request #60 \n. ",
    "Ulrira": "@mcamara The root code of application y localhosy/mysite\n@drewjw81 Is the \"example\" code\nI'm using WAMP if it helps\n. @mcamara is almost the \"default\" code.\ncreate new laravel project and print the languagebar with LaravelLocalization function. It will faill I guess.\nI fix the issue creating the languagebar's url manually (using some package's functions but not getLanguageBar).\n. Im trying version 0.12 and there are still issues, in my case, getLanguageBar generates this links\nMy root page is localhost/project\nit generates:\n'en' => localhost/en/project (instead of localhost/project/en)\n'es' => localhost/es/project (instead of localhost/project/es)\n. @nikosv ok, thx\n. fixed\n. fixed\n. Ok, i misunderstood the functionality of this option, so i'm clossing this \"issue\"\n. ",
    "dedurus": "You can solve this on local WinBox with xampp by cd-ing to the local htdocs folder in console and then run php artisan serve.\nAfter that, access the local website with http://localhost:8000, and the getLanguageBar works as expected.\nAnyway I still cannot find a way to change CSS class to custom in getLanguageBar although I tried with adding deprecated getLanguageBarClassName and adding  languageBarClass \nwith custom value in config without any success\n. That's true and I've already done that. I needed short locale code, and custom CSS class, so I made changes to the the view provided inside package, and it works fine.\nphp\n<ul class=\"language_bar_chooser nav navbar-nav navbar-right\">\n              @foreach(LaravelLocalization::getSupportedLocales() as $localeCode => $properties)\n                @if($localeCode == LaravelLocalization::getCurrentLocale())\n                  <li class=\"active\">\n                    {{{ strtoupper($localeCode) }}}\n                  </li>\n                @elseif($url = LaravelLocalization::getLocalizedURL($localeCode))\n                  <li>\n                    <a rel=\"alternate\" hreflang=\"{{$localeCode}}\" href=\"{{$url}}\">\n                      {{{ strtoupper($localeCode) }}}\n                    </a>\n                  </li>\n                @endif\n              @endforeach\n             </ul>\n. ",
    "goosechaser": "Here's an example: http://example.com/en/cars This URL is accessible from the following route:\nRoute::group(['prefix' => Localize::setLanguage(), 'before' => 'LaravelLocalizationRedirectFilter|LaravelLocalizationRoutes'], function()\n{\n            Route::controller(Localize::transRoute('routes.cars'), 'Cars\\Controller\\CarsController');\n});\nHowever, inside the CarsController I have getCompact and getMinivan methods that result in the following urls: http://example.com/en/cars/compact and http://example.com/en/cars/minivan. \nWell, compact is kompakt in German, so how do you get to http://example.com/de/autos/kompakt? \nRight now I always have to access the partially translated URL: http://example.com/de/autos/compact. \nMakes sense now?\n. Hmm, I need http://example.com/de/autos/kompakt, not .../compact. \nThe thing is, I would like to leverage functionality of Route::controller instead of spelling out every route. What if I have 20 car types? It only takes 1 route and 20 getCartype functions if I use ::controller. If I use Route::get, it will add additional 20 route entries. Same goes for all methods in Route::resource. The way your package is set up (including the demo that you linked to), I have to manually list all Route::get|post|put|delete routes. \n. Phew, took some time to make myself understood. Thanks for looking into this. \nPerhaps hooking up to Controller's missing method (http://laravel.com/docs/controllers#handling-missing-methods)? \n. Here's a quick solution that does the job but isn't that elegant:\npublic function missingMethod($request = [])\n    {\n        $method = strtolower ( Request::server('REQUEST_METHOD') );\n        $name = ucfirst( trans(\"routes.\".$request[0]) );\n        $function = $method.$name;\n        return $this->$function();\n    }\n. ",
    "Steve-A-Orr": "As I am not using Closures or named routes, is there still no support for Route::controller using translated routes?\n. Uh oh. What happened? Maybe you don't mean I made a mistake--you're probably commenting on what I fixed. I became anxious for a moment.\n\nOn May 1, 2014, at 2:21, Marc C\u00e1mara notifications@github.com wrote:\nWow, that was a huge mistake! Thanks @Steve-A-Orr !\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "fisharebest": "4.2 beta is now available via composer.\nIn composer.json, the dependency on \"laravel/framework\": \"4.*\" should probably change to \"laravel/framework\": \"4.1.*\".\nOtherwise anyone using \"minimum-stability\": \"beta\" will get incompatible versions of laravel and laravellocalization.\n. If this is being re-factored, then consider that the direction (ltr / rtl) is an attribute of the script, not the language.\nArabic script is always written RTL and latin script is always written LTR.\nAny language definition should simply indicate the script, and the directionality should be determined from that script.\nSee issue #71 for a related problem with script names - for which a PR will follow shortly.\n. It doesn't seem to make any difference.  I'll see if I can find some time later today to take another look.\n. Oops - my bad.  I thought I had.  Let me try again.\n. OK - right code, but in wrong folder :-(\nYup - the fix works great.  Thanks!\n. Looking good.\n. I don't think that laravel (or laravel-localization) call PHP::setlocale(...).\nAs far as I understand it, Carbon requires this.\n. The native names for shi-Tfng and vai are identical to the values given in the CLDR database.  (I'm looking at the version of the CLDR included with Zend Framework v1).\nThe others aren't included in the CLDR.  Wikipedia has a name for Divehi which appears to be similar (but a couple of characters shorter) than the one in the project.\nI'm struggling to find reliable sources for the other two.\nIf you think these are wrong, what do you think are the correct names?  Links/sources?\n. This simply means that your browser/editor/computer doesn't have the necessary fonts/scripts installed.\nYou are not seeing characters for four scripts: Thaana, Tifinagh, Vai and Javanese.\nHowever, the two computers in front of me (Mac and Win7) show characters in three of them: Thaana, Tifinagh and Vai - I'm just missing support for Javanese.\nAFAICT, these are the correct UTF-8 encodings for these characters/scripts.\n==EDIT==\nCorrection.  I see the characters on my Win7 machine - but not my Mac.\n. > Could you please tell me what's the supporting fonts/scripts for those that's working\nUsing Windows7 (enterprise) with default settings for everything, and looking at your first post at the top of this page\nFirefox32, IE11 - displays four out of five scripts - not Javanese\nChrome40 - diplays just one script - Thaana\nI don't know if that tells you anything.  But it seems to be an application issue.\n. > @fisharebest Do you think this issue is related with your edits in #130 ?\nIt would seem unlikely.  My change was simply in the derivation of the \"ltr\" or \"rtl\" attribute.  This is normally just used to create the <html lang=\"ar\" dir=\"rtl\"> tag.\n. This problem does not affect just arabic routes.  I see the same problem for any route with non-ascii characters.  e.g.\nen/hotel/4\nfr/h\u00f4tel/4\nLooking at the generated routes, it seems to be missing a url_decode() somewhere...\n. > btw the order of the link above is automatically changed since Arabic is RTL language, so I'm guessing if you change the order of URI segments when you testing such language you can avoid such error.\nThis is NOT a problem with the order of segments.  The URL is in the correct (byte) order - your browser is displaying it in a different (visual) order.\nConsider the URL /ar/ARABIC/3, where ARABIC is written in arabic text.\nThe browser's bidi (directional) algorithm breaks this into two \"directional runs\".\n/ar/ (left to right) followed by ARABIC/3 (right to left)\nSo, you get the following visual order:\n/ar/ followed by 3/CIBARA\n(The bidi algorithm is actually more complicated than this, but you get the idea).\n. I can't debug this any further until I have a solution for #212 \nIf I have the URL http://localhost/fr/h\u00f4tel/4, and a route hotel/{id}, then the attributes are being parsed as\n'id' => 'h\u00f4tel'\ninstead of \n'id' => '4'\n. What happens if you use:\njson\n\"require\": {\n  \"laravel/framework\": \"5.0.x-dev\",\n  \"mcamara/laravel-localzation\": \"1.*\"\n}\n. 5.0.x-dev is an alias for dev-master.  It gives me the latest commit.\n. > 5.1 is on develop not master :/\ndevelop?  I only see master at https://github.com/laravel/framework \n. > Laravel/Laravel is the framework for build app \nlaravel/laravel is a template application.  You install this once and then modify it.  You do not update it with composer-update.\n1) composer create-project laravel/laravel my-project dev-develop\n2) edit composer.json as above\n3) composer update\nYou now have the latest template application, the latest laravel/framework, and stable versions of everything else.\n. It is because English language rules are to capitalise the names of languages - while Spanish language rules are to use lower case.\n\"english\" would be wrong in English\n\"Espanol\" would be wrong in Spanish\n. FYI, I can get the language selector to work in two ways:\n1) Change my webserver config so that there is no path.  e.g. change http://localhost/webtrees/public/pl/osoba/123 to http://localhost/pl/osoba/123\n2) Remove the path myself.  e.g. change  $parse = explode(\"/\", $parse[ 'path' ]); to $parse = explode(\"/\", str_replace(Config::get('app.url'), '', $url));\nDoes this mean that I need to configure the path somewhere?\nDoes this mean that LaravelLocalization only works in the root folder?\n. I don't think this is correct.\nIf HTTP_ACCEPT_LANGUAGES is * then $matches will be ['*' => 1.0].\nSurely we want the first supported language (or the default language?)\n. Normally, you would set the HTTP_X_FORWARDED_* headers in your nginx config.  e.g. something like\nfastcgi_param HTTP_X_FORWARDED_PORT 80;\nfastcgi_param HTTP_X_FORWARDED_PROTO http;\nfastcgi_param HTTP_X_FORWARDED_HOST server;\nThis allows the symfony Reqeust component to generate the correct URL.\n. I don't understand.\nWhy would we want this URL?  Won't it just redirect to the URL without the locale?\n. See also #235\n. If it is helpful, I have created a localization database - https://github.com/fisharebest/localization\nInstead of 'regional' => 'de_DE.utf8', you could use a LocaleDe object.\nAs well as locale codes (de_DE), language tags (de), etc., it provides lots of other useful services, such as localization for numbers.\nOne way you could use it is\n'supported_locales' = [\n  new LocaleDe,\n  new LocaleEnUs,\n  new LocaleFr,\n]\n. ja is the Japanese language.\njp is the country Japan.\nzh is the Chinese language.\ncn is the country China.\nI think these are correct.. The existing scripts are all referenced using their ISO-15924 codes.  These codes are used in IETF language tags.  \nFarsi is not a valid ISO-15924 code.  Should we add it?. I am not an expert on Farsi - although I know quite a lot about I18N and standards....\nI think that Farsi is written using arabic script Arab - but with a different font, which affects kerning, styling, etc.. See my comment on #526 - Farsi is not a valid ISO-15924 script code.. I'm not sure I understand what you are asking?\nThis package is about language negotiation and route localisation.\nWhat are you trying to achieve?. Some fonts work better with different scripts.  For example, a font that works well for Latn may not work well for Japn.  An application may choose different fonts for different scripts.\nIn my application, I use it to prioritse results when searching for data.  I have user-submitted data in many langauges.  If a user has selected a language that uses the Cyrl script, then I will show results in Cyrillic ahead of results in Latin.\nBut I guess most people will not need to use it.. The locales are currently sorted in the order they would be displayed in a language-selector.\nThis is (mostly) alphabetical order of the native language name.\nI say \"mostly\", as language variants sort under the base language.  i.e. British English sorts as English, British and US English sorts as English, US.  Both are found between Ekegusii and espa\u00f1ol\nThis gives an intuitive sort order that allows users to find their own language quickly - especially in a long list of languages.. > I was not able to intuitively find the necessary localizations in the settings file.\nIntuitive for the user of the application, not the developer of the application.... > But that infomation should be in documentation...\nIt is!  It is on the front page of the project\nhttps://github.com/mcamara/laravel-localization#config-files\nWhen you have calmed down, perhaps you can apologise for your offensive language.\n. > I am using PHP 7.1.22\nThe ?? (null coalesce) operator was introduced in PHP 7.0.\nThe error message suggests that you are using PHP 5.6 (or earlier).. The existing pattern will match Laravel version 5.2 to  5.6\nYour updated pattern will also match Laravel version 5.7 to 5.9\nWe cannot claim to be compatible with versions of Laravel that do not exist yet.. > i think the existing pattern will still match to 5.9\nAh, yes!\nSo your PR will not change the existing logic - but the existing logic may be wrong..... Does the if need { and }\n. You use the expression ($urlQuery ? '?'.$urlQuery : '') many times.\nPerhaps it would be better to calculate it just once.. ",
    "Omranic": "Sorry, didn't notice that there was other updates/fixes in same files done before committing! Will merge & resend pull request..\n. ### Just to make it clear:\n- My main commit is 4803115 \"Added support for language script and direction\"\n- Since I've forgot to check for updates before my commit, I've forced to re-merge \"jaumesala/master\" into my repo\n- Last commit \"Cleaning trailing whitespaces & fixing returns\" only cleans trailing whitespaces, and fix linux line returns/carriages. No functionality or code changes actually..\n. Hello Marc, Well I see.. I'll merge the previous #55 pull request in mine & resend/update..\n. You are welcome, thanks to you for your awesome package :+1: \nQuestion 1: Why not deleting deprecated functions & keeping it until v1.0.0?\nQuestion 2: How do you manage version numbers? Do you've any internal policy for 'when & what' versions being updated? Suggestion: http://semver.org\n. Sounds great, keep up the good work. :+1: \n. @nikosv you probably mean the other merge #55\n. The issue is that it's not readable even with UTF-8 encoding...\n\n\n. Well, thank you for the clarification. Closed.\nCould you please tell me what's the supporting fonts/scripts for those that's working with you cause I couldn't get them working neither on mac nor on windows.\n. ",
    "dhiman252": "Hi Guys,\nIs there any update on the sitemap package?\nI am using  the laravel v5.2 and really don't know how to get the list of all the routs in all the different languages. any help would be appreciated.. Any progress on this issue ?\nI am using laravel v5.2.29 and the mcamara/laravel-localization v1.1.4 and not able to get what the issue is.\nWhen a user visits the website the default lacale is en and after successful login I change the language via LaravelLocalization::setLocale($user->locale); in the controller but it still diaplays the default language not the user selected.\nmoreover the link https://github.com/mcamara/laravel-localization#sessions is not working. the session content does not exists on the page.\n. I did some research on this issue and found that the problem is not with this package insted please do the following:\nin file app/Providers/AppServiceProvider.php\njust place the following code:\nif (App::environment('production')) {\n     $this->app['request']->server->set('HTTPS', true);\n}\nin the boot method\nHope that helps!!\n. I am using the laravel version 5.2.*. In the documentation it is also provided to make use of version 1.2 if using the laravel 5.2. ",
    "nmpribeiro": "Let's do it?. Hi @jaumesala that's awesome... I've just made my package, still not published.\nBut instantly I got a barrier: what if each user places routes on his own desired place? And how about 'auth.email.verify' routes and routes that the user doesn't translate? Need to think about, but we'll need to ask user for a config I suppose.\nIn my case, to translate routes, I have routes/web.php . We can argue this isn't needed, but nevertheless, it's a week link to make an 'all general purpose solution'.. initial commit: https://github.com/tachyonvfx/laravel-localization-sitemap and https://packagist.org/packages/tachyonvfx/laravel-localization-sitemap\nif you guys want to help, it would be awesome. ",
    "jasperjorna": "It's relatively easy to implement with a separate package like this one: https://github.com/Laravelium/laravel-sitemap\nI'm basically just looping through the routes and create an entry in the sitemap for each of them.\n```php\nforeach (array_keys(trans('routes')) as $route) {\n    foreach (LaravelLocalization::getSupportedLocales() as $code => $options) {\n        // Our default locale is 'en', so we skip it to set 'x-default' below.\n        if ($code !== 'en') {\n            $translations[$code] = [\n                'language' => $code,\n                'url'      => LaravelLocalization::getURLFromRouteNameTranslated($code, 'routes.'.$route),\n            ];\n        } else {\n            // Set 'x-default' for our default route to satisfy search engines.\n            $translations[$code] = [\n                'language' => 'x-default',\n                'url'      => LaravelLocalization::getURLFromRouteNameTranslated($code, 'routes.'.$route),\n            ];\n        }\n    }\nforeach ($translations as $translation) {\n    $sitemap->add($translation['url'], null, '0.7', 'hourly', [], null, $translations);\n}\n\n}\n```\n. Is this related? https://github.com/mcamara/laravel-localization/pull/418. ",
    "stevebauman": "Awesome thanks for the update!\n. Ok nevermind found an easy solution. When you need to redirect after a form post, just use the transRoute function to redirect to the translated route so it doesn't consume the post values with multiple redirects.\nIn my controller:\nreturn Redirect::to(LaravelLocalization::localizeUrl(LaravelLocalization::transRoute('routes.home.contact_us_online'), Request::segment(1)))->withErrors($validator)->withInput()->with('color', 'danger');\nIn my view:\n{{ Form::open(array('url'=>LaravelLocalization::transRoute('routes.home.contact_us_online'), 'class'=>'form-horizontal', 'role'=>'form')) }}\nAlso accidentally opened and closed, closing for good, thanks for the awesome package!!\n. ",
    "vanpet": "Thanks! Working now!\n. ",
    "ghost": "\"error\":{\"type\":\"ErrorException\",\"message\":\"Illegal string offset 'name'\",\"file\":\"\\/var\\/www\\/bectrokam\\/web\\/vendor\\/mcamara\\/laravel-localization\\/src\\/Mcamara\\/LaravelLocalization\\/LaravelLocalization.php\",\"line\":526}\nHey I am getting the same problem, but I dont understand publish again the config file , means to what to publish which config file. please could you clearify it. I am new to laravel\n. Thanks for your reply my site is here  http://monkeye.com right now my routes look like this \n  Route::group(array('prefix' => LaravelLocalization::setLocale(),\n        'before' => 'LaravelLocalizationRedirectFilter' // LaravelLocalization filter\n   )\nand  my config file has\n'hideDefaultLocaleInURL' => true\nyou can see that all the  link on pages are not redirecting to url with locale.\nBut if if do 'hideDefaultLocaleInURL' => false\nall the url  redirect to locale ,but  i want to hide the defualt locale in the url\n. I also see you have added some  notes in you latest commit \nIMPORTANT - When hideDefaultLocaleInURL is set to true, the unlocalized root is treated as the applications default locale app.locale. Because of this language negotiation using the Accept-Language header will NEVER occur when hideDefaultLocaleInURL is true.\nI think this is related to my issue  but i don't understand it completly (forgive me :) ).\n. Hehe, hello soluxima-erik.\nI did this for about hour ago.\nHere is the trick.\nopen vendor/mcamara/laravel-localization/src/Mcamara/LaravelLocalization/LaravelLocalization.php\n```\n            foreach ($transKeysNames as $transKeyName)\n            {\n                if ($this->translator->has($transKeyName,$locale))\n                {\n                        //$translation = $this->translator->trans($transKeyName,array(),array(),$locale);\n                        $route_clone = $transKeyName;\n                        $final_route = \"/\".$this->translator->trans($route_clone,array(),array(),$locale);\n                        while(strpos($route_clone, '/'))\n                        {\n                            $route2 = explode('.', $route_clone);\n                            $route_clone = $route2[0];\n                            $route_clone =  strrev(implode(strrev('.'), explode('/', strrev($route_clone), 2)));\n                            $final_route = \"/\".$this->translator->trans($route_clone,array(),array(),$locale).$final_route;\n                        }\n                        $final_route = substr($final_route,1);\n                        $translation = $final_route;\n\n                        $route = $route.\"/\".$translation;\n\n```\nhere you have a fragment of getURLFromRouteNameTranslated function. With this you can make nested route groups. Code need refactoring, when i will make it i will make pull request ;)\nP.S.\nI didn't pass the attributes to this routing yet, so if something will be wrong, tell me, i will try to fix it :)\n. ```\n    public function getRouteNameFromAPath($path)\n    {\n            $path = str_replace(url(), \"\", $path);\n            if ($path[0] !== '/')\n            {\n                    $path = '/' . $path;\n            }\n            $path = str_replace('/' . $this->currentLocale . '/', '', $path);\n            $path = trim($path,\"/\");\n            $routesNames = array();\nforeach ($this->translatedRoutes as $route)\n{\n    $route_clone = $route;\n    $final_route = \"/\".$this->translator->trans($route_clone);\n    while(strpos($route_clone, '/'))\n        {\n            $route2 = explode('.', $route_clone);\n            $route_clone = $route2[0];\n            $route_clone =  strrev(implode(strrev('.'), explode('/', strrev($route_clone), 2)));\n            $final_route = \"/\".$this->translator->trans($route_clone).$final_route;\n        }\n        $final_route = substr($final_route,1);\n    //if ($this->translator->trans($route) == $path)\n        if ($final_route == $path)\n    {\n        $routesNames[] = $route;\n    }\n}\n        return $routesNames;\n}\n\n```\nreplace this too and check. Here you have fragment of my routes.php\nRoute::group(\n    array(\n        'prefix' => LaravelLocalization::setLocale(),\n        'before' => 'LaravelLocalizationRoutes|LaravelLocalizationRedirectFilter' // Route translate filter\n    ),\n    function()\n    {\n        Route::group(\n            array(\n                'prefix' => LaravelLocalization::transRoute('routes.build'), //routes.php\n                'before' => 'LaravelLocalizationRoutes'\n            ),\n            function()\n            {\n                Route::group(\n                    array(\n                        'prefix' => LaravelLocalization::transRoute('routes/build.town'), //routes/build.php\n                        'before' => 'LaravelLocalizationRoutes'\n                    ),\n                    function()\n                    {\n                        Route::get('/', function()\n                        {\n                            return View::make('hello');\n                        });\n                        Route::get(LaravelLocalization::transRoute('routes/build/town.test'), function() //routes/build/town.php\n                        {\n                            return View::make('hello');\n                        });\n                    });\n. What is the solution?\n. My Session : http://i58.tinypic.com/34xlzc4.jpg\nMy Route\nRoute::group(\n    [\n        'prefix' => LaravelLocalization::setLocale(),\n        'middleware' => [ 'localizationRedirect' ]\n    ],\n    function()\n    {\nRoute::get('/', 'HomeController@index');\n      Route::get('/{slug}/{slug2?}', 'MainController@getview');\n});\nWhat is the problem?\nNeed to work session\n. thanks good job\n. it works very well\nadmin panel creates problems\nhttp://127.0.0.1/public/en/admin/setting\nprotected $middleware = [\n        'Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect'\n```\n];\n/\n * The application's route middleware.\n \n * @var array\n /\nprotected $routeMiddleware = [\n 'localize' => 'Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRoutes',\n\n];\n```\nif (Request::is('admin/*'))\n{\n    require DIR.'/admin_routes.php';\n}\nRoute::group(\n    [\n        'prefix' => LaravelLocalization::setLocale(),\n        'middleware' => [ 'localize' ] \n    ],\n    function()\n    {\n          Route::get('/', 'HomeController@index');\n          Route::get('/{slug}/{slug2?}', 'MainController@getview');\n});\n. administration panel URLs adds language\ntherefore gives the error page not found\n. Instead 'WorkAround' I just delete bootstrap cache and it was ok. ",
    "popouerk": "Doesn't seem that the fix is still there.\nI am running into the same problem with the latest version 1.3.9. ",
    "Sparo": "this is conf file:\n```\n    return array(\n    // List of all locales supported by your site.\n    // Add any supported to the supportedLocales array.\n    // A list of many locales has been added to the bottom of this file for your convenience.\n    'supportedLocales' => array(\n        \"en\" => array(\"name\" => \"English\",      \"script\" => \"Latin\",        \"dir\" => \"ltr\",     \"native\" => \"English\"),\n        \"de\" => array(\"name\" => \"German\",       \"script\" => \"Latin\",        \"dir\" => \"ltr\",     \"native\" => \"Deutsch\"),\n        // \"hu\" => array(\"name\" => \"Hungarian\", \"script\" => \"Latin\",        \"dir\" => \"ltr\",     \"native\" => \"Magyar\"),\n        // \"fr\" => array(\"name\" => \"French\",        \"script\" => \"Latin\",        \"dir\" => \"ltr\",     \"native\" => \"Fran\u00e7ais\"),\n        // \"es\" => array(\"name\" => \"Spanish\",       \"script\" => \"Latin\",        \"dir\" => \"ltr\",     \"native\" => \"Espa\u00f1ol\"),\n    ),\n\n    // Negotiate for the user locale using the Accept-Language header if it's not defined in the URL?\n    // If false, system will take app.php locale attribute\n    'useAcceptLanguageHeader' => true,\n\n    // Should application use the locale stored in a session\n    // if the locale is not defined in the url?\n    // If false and locale not defined in the url, the system will\n    // take the default locale (defined in config/app.php) or\n    // the browser preferred language (if useAcceptLanguageHeader is true) or\n    // the cookie locale (if useCookieLocale is true)\n    'useSessionLocale' => true,\n\n    // Should application use and store the locale stored in a cookie\n    // if the locale is not defined in the url or the session?\n    // If true and locale not defined in the url or the session,\n    // system will take the default locale (defined in config/app.php)\n    // or the browser preferred locale (if useAcceptLanguageHeader is true)\n    'useCookieLocale' => true,\n\n    // If LaravelLocalizationRedirectFilter is active and hideDefaultLocaleInURL\n    // is true, the url would not have the default application language\n    'hideDefaultLocaleInURL' => false,\n\n);\n\n.\n.\n.\n```\nin the app/conf/packages/mcamara/laravel-localization ...\n. Ok, just to understand correctly,  because I just started using this package couple days ago so maybe not full familiar with it... I need every button and link (like navigation links and stuff), including forms action, to manually set to \nLaravelLocalization::getLocalizedURL(LaravelLocalization::getCurrentLocale(), '/some_url')\nregardless I already grouped urls in the route.php file\nis that you told me?\n. hmm, that means that when user click, let's say /home link somewhere in the page and NOT LaravelLocalization::getLocalizedURL(LaravelLocalization::getCurrentLocale(), '/home') link, if 'before' => 'LaravelLocalizationRedirectFilter' is set, then request will be sent two times, one time with standard request and second time redirection with LaravelLocalization? but if I set this ::getLocalizedURL ... on all urls,  request will go only through LaravelLocalization module, so one time (one request) only...\n?\nand what about ajax calls? are they need localization?\n. Sorry if I am annoying but have to ask couple more questions :)\nWhat happens if I have\nreturn Redirect::to('login/direct') does this have to be localized? I quess not?\nand\nreturn View::make('login.index')\nand\nAjax calls, I guess I have to target localized route?\nthis is the last one for today, I promise...\n:)\n. And what if I choose to not to prefix routes ( not using 'before' => 'LaravelLocalizationRedirectFilter'), just to localize app but without prefix...\nis there going to be 2 requests or just one?\ntnx a lot...\n:+1: \n. Yes, I understand... tnx a lot for consultation...\n:+1: \nclosing issue now...\n. I did something similar.\nCreated filter that check is current locale same with logged users locale (user from session), if is then do a save locale into database, if not do nothing...\nand apply that filter to LaravelLocalization Route group...\nso I guess it's the least resource demanding way...\n. it would be great...\nwrite something in the readme so all can see new feature...\ntnx in advance...\n:+1: \n. ",
    "ingwet": "Drewjw81, what set of issues do you refer to in your last comment?\nI am having similar problem now with the latest version of laravel-localization on my localhost (it's fine on server though) - redirect is killing post data and so my login doesn't work. what can be wrong now? I try both redirects to non-localized and localized routes, none work(\n. ",
    "Gantorys": "same question here\nI think the solution is using \"localizeURL\" function, but it might be fail if Laravel is not installed in the webroot\nLaravelLocalization::localizeURL(LaravelLocalization::transRoute('routes.theRouteYouWant'))\n. ",
    "mohammadmojrian": "return Redirect::to(LaravelLocalization::LocalizeURL('User/login'))\n                            ->withErrors($validator)\n                            ->withInput();\n. ",
    "adamzwakk": "I did this and it worked for me \n$url = LaravelLocalization::getLocalizedURL($localeCode);\n. ",
    "jartaud": "Works great!, thnks a lot!\n. in the app file, there is a \"locale\" key so you can do something like this:\nConfig::get('app.locale')\nor\nApp::getLocale();\nhttp://laravel-recipes.com/recipes/253/getting-the-default-locale-being-used\n. @rbngzlv this works for me! +1\n. ",
    "vishalmote": "Hey thanks,\nActually I am working on this project in middle. So dont know what other developers made changes in it. We are having site in two languages. There was code need to tell what langauge should use.. so we got reslove. thanks\n. Hey, I got the solution from my senior. We are using two languges need to specify that language code those in error file.\n. ",
    "torocatala": "I \"solved\" it creating a second routes.php inside of each lang, but is kind of a dirty solution...\n. My \"solution\" creates aproblem with the language bar that i don't know how to solve, help would be appreciated\n. @drewjw81 Thanks, i'm working on \"patch\" but is quite shitty, I guess a proper solution would be nice for the community. Will look forward to your contribution! :+1: \n@jaumesala I had it in mind, but i'm kin of hand-tied in terms of subdomanins and DNS, so better stick with the usual. Thanks for giving another aproach ot solve the problem tho!\n. ",
    "Rokela": "Hi!\nI have 0.13.3 version. \nI can't found 0.13.4 version.\np.s.\nThank you for the great work!\n. I wrote \"mcamara/laravel-localization\" : \"dev-master\" in composer.json and I got a correct version (with 'en' in url). \nbash-4.1$ composer.phar update\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\n- Removing mcamara/laravel-localization (0.13.3)\n- Installing mcamara/laravel-localization (dev-master 99ad6c1)\n  Loading from cache\nWriting lock file\n\nWhen I write   \"mcamara/laravel-localization\" : \"\"  (or  \"mcamara/laravel-localization\" : \"0.13.\") I get an incorrect version (always 0.13.3).\nbash-4.1$ composer.phar update\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\n- Removing mcamara/laravel-localization (dev-master 99ad6c1)\n- Installing mcamara/laravel-localization (0.13.3)\n  Loading from cache\nWriting lock file\n. I have the same trouble.\nI can suggest you to use the 0.14.4 version. \np.s.\nIn 0.14.1 version this error was fixed, but in 0.14.6 version this error appeared again\n. ",
    "foxted": "+1\n. I just tried using the correct filter name \"LaravelLocalizationRoutes\" and the routes are translated perfectly (using the master branch).\n. I was definitely missing something. I was only using translated route key for the first part of the route and didn't include parameters in it directly. \nAlso, it would be nice to create a hook to allow translation of parameters before returning the localized URL, I'll try to work on it when I'll have some time.\nBut anyway, problem solved, sorry for the false issue. \n. I reopen this issue, I thought it was fixed but it is not. I tried to define routes like : view/{id} and voir/{id} (in french) and this is not working. \nIf I am on mywebsite.com/en/view/{id} and use getLocalizedURL, I got mywebsite.com/fr/view/{id} and not mywebsite.com/fr/voir/{id} as it supposed to be.\nAny thoughts on that ?\n. ",
    "gerardnll": "+1 I'm suffering the same problem. please fix ASAP! \nthanks for the hard work guys.\n. You can listen for changes using this code, place it for example on global.php:\nEvent::listen('locale.changed', function($locale)\n{\n    echo $locale // prints for example: 'en','es','fr'...\n});\nThe downfall i see is that the event is being called every request even if the user hasn't changed the locale, it may be because of a certain filter of this package.\n. Has this been fixed? Why is the issue getting closed?\n. This has been commented on another issue which i opened and got closed a few weeks ago and i still don't know why.\nI suffer the same problem and i followed exactly the instructions as explained on the readme.\n@mcamara Can you give an explanation about this? I find this issue quite important. Just some info in my case: I'm running on laravel 4.1 and the v0.13.8 of this package. Placing the code of your language selector gives me bad URLs as @Quanthir exposes.\n. ",
    "ajgallego": "Ok, thank you. It is a problem of the assets library I'm using.\n. ",
    "slinux": "It worked fine for me with the exception that I had to make the $prefix optional.\nThank you.\n$prefix = substr($router->current()->getPrefix(),3);\n$translation = $this->translator->trans($transKeyName,array(),array(),$locale);\nempty($prefix)\n    ? $route = $route.\"/\".$translation\n    :  $route = $route.\"/\".$prefix.\"/\".$translation;\n. ",
    "cihadgunduz": "I'm using Laravel v4.2, the problem continues.\ngetLocalizedURL function dont working\n. ",
    "thylo": "+1 Thanks @Steve-A-Orr  for the standardization\n. ",
    "osaris": "Same problem here, using Redirect::route fails for route inside the group but using Redirect::action is ok.\n. +1 this is really annoying to have all tests broken due to this package :-(\n. ",
    "moto0000": "Try this code:\nphp\nlink_to(Localizer::localizeURL(URL::route(Localizer::getCurrentLocale().'.users.index')), 'Users')\nYou forgot the dot before 'users.index'\n. ",
    "mindonwarp": "@moto0000 sure, thanks. It was a typo. But that's not what I was looking for anyway, I just wrote it down as an example of what I was trying to achieve. What I am looking for is a simpler, correct (and maybe already implemented) way to go about.\nSome additional method in the LaravelLocalization class like, for example, LaravelLocalization::localizeRoute($routeName, $params) aside from the existing ::localizeURL() would be nice.\nIt would just take the route name, check the provided locale and prefix it to the route name in the format locale.controller.action. It would also have to check the current locale first and leave everything as is, in case the current locale is the default locale and the option to omit it from URLs is enabled.\n. ",
    "ibolmo": "@moto0000 that's not working for me either. \n. ",
    "mabasic": "I have just noticed this also, it is a huge issue.\nThis happens only when using a resourceful route.\nRoute::resource('realestate', 'RealestateController', ['only' => ['index', 'show']]);\nIn my views, I am using URL::route('realestate.index') and it works, but if I change locale to something different than the default locale I get Route [realestate.index] not defined\nI am thinking of building a helper function to detect if the current locale is different then default locale and then append the locale to route name like stated above. But this is a dirty fix and requires that I change URL::route('name') to something like URL::route(localizeRoute('name'))\nMaybe there is a simple solution for this. I don't understand why this does not work when it works with named routes like so Route::get('/something', ['as' => 'something']);\nUPDATE:\nI have done some testing and it seems that the route name and URL get prefixed. Why is the route name getting prefixed only on resourceful route and not on other routes?\n. I think that I have found the pull request that could save our lives: https://github.com/laravel/framework/pull/4507\nThe problem is not in this package but in the way Laravel handles as in resource route.\n. Hi guys, I have created a package laravelista/loki where I have solved this issue. Let me know what you think.. ",
    "dennisoderwald": "+1\n. +1\n. +1\n. Yes, I can confirm.\n. dev-master dont change the issue, same message.\n. > Loading composer repositories with package information\n\nUpdating dependencies (including require-dev)\nYour requirements could not be resolved to an installable set of packages.\nProblem 1\n- Installation request for mcamara/laravel-localization dev-master -> satisfiable by mcamara/laravel-localization[dev-master].\n. Thanks @DarkaOnLine so far.\n. Thanks @mcamara! :) :+1: \n. +1\n. Awesome, thanks @mcamara! :+1: \n. +1\n. \n",
    "serhatsabuncu": "Hi!\nYou should define a language in your system.\napp/config/app.php \nfind this -> 'locale' => '',\nchange->  'locale' => 'en',\n. ",
    "MohammedAlzard": "locale_get_default()\nor\nLocale::getDefault(). ",
    "tomzx": "See #36, which does a better job of fixing this issue.\n. ",
    "soluxima-erik": "Unfortunately, that did not produce what I need. It still outputs all the same urls, only changing the 2-letter language portion. \nI am using a Controller@Method which is defined in the routes.php using your translated routes procedures, so somehow the output needs to be controller(trans:(blah))@method(trans:(foo)). Ill tinker with it too, might have a few ideas.\n. Actually to be more specific it would have to be like:\nlocalizedURL(controller(trans::('blah',$locale))@method(trans::('foo',$locale)))\nSo that it will get and replace the translated segment for every language as it loops through the array of possible languages \n. Sadly, that still does not produce translated route links. Its all still the exact same URL with only locale changed (yes, I made sure there are lang entries for each segment). The pages all work if you navigate to them by typing in the address bar.\n. ",
    "simdoor": "Hi Erik,\nI have been facing a similar problem and here's how I got around it.\nAs Invidian suggests, use 'getURLFromRouteNameTranslated' method instead of 'getLocalizedURL' in your language selector links.\nThis is what my links look like:\nhref=\"{{ LaravelLocalization::getURLFromRouteNameTranslated( $localeCode, [Route::currentRouteName()], Route::current()->parameters() ) }}\" > {{{ $localeCode }}} \nLaravelLocalization::getURLFromRouteNameTranslated receives 3 parameters:\n1. locale code, we are looping through the all registered locale to output the language selector\n2. current route name (passed as array)\n3. current route/url parameters (in case there is some)\nhope this helps, it seems to work for me\n. ",
    "mjmlvp": "Though this issue is closed I wonder if I can still mention something?\nThe reason for this error is nowhere mentioned. the reason is that the trans( ) laravel helper function in Laravel 5.2 and 5.3 has the definition\n\npublic function trans($id, array $parameters = [], $domain = 'messages', $locale = null)\n\n(which is not compatible with the calls from LaravelLocalization)\nwhereas starting from Laravel 5.4 the definition has become\n\npublic function trans($key, array $replace = [], $locale = null)\n\n(which IS compatible with the calls from LaravelLocalization)\nFor me a solution was to upgrade to laravel 5.4\nso the README.md line,\n\n5.2.x-5.4.x (PHP 7 not required) | 1.2.x\n\ndoes not tell the whole story.\nLaravel 5.2 and 5.3 work with  Laravellocalization v.1.2.0\nWhereas Laravel 5.4 works with work with  Laravellocalization v.1.2.1+\nIt took me alot of time to find this out, so I thought it would be good to share.\n. ",
    "Donny5300": "Ill explain. I found another \"issue\". Not really a issue, but more what could be helpfull\nFor my new items i use a array: 'en' => 'English'. Maybe you can create something that return a array with all active languages and return an array with country code and full country name. Some country names are using special characters like Siri\u00eb. So a land code is way helpfuller.\nThe second thing is: if i want to get the items from the database, i need something that return the current language code, not a full country code.\nWant we cant forget: i love your package, makes your life great for translation :+1: \nWould be perfect with the 2 features i told you :P\n. ",
    "brwnll": "The build failed on a a timeout of composer update. I don't believe it has anything to do with my code.\nThe command \"composer self-update\" failed and exited with 1 during .\n. Allow me to take a moment to explain. Localization !== translation. You should allow a use to select any localization as their preference, and handle that in a graceful degradation format that you prefer.\nFor example: If you have an ecommerce platform which is primarily used by US visitors, you should allow users to select their preferred localization (such as German) even if you do not support a German translation package for your site. This allows you to make other adjustments, such as ensuring all measurements are in metric instead of imperial, even without supporting the language pack.\nThe concept of 404-ing users when they attempt their local localization because you don't have their language pack is both incredibly lazy and a miserable user experience. \n. I feel like you are still ignoring the entire purpose of the pull request and my explanation of it. I particularly saw no point on you posting your comment on how you believe it should be handled, on a long closed pull request.\nThe entire purpose of this pull request was to enable the \"support\" of any language at the URL level. The setting of the localization should be independent of the language packs. \nI want to support store.com/cch/product123, even if I don't specifically support the cch language because language is not the only component of localization. For example I may be able to convert prices into the local currency, or even look up a different popular local language that I do support.\nAgain, throwing a 404 (or any error message) for an \"unsupported\" language, is the antithesis of this pull request. \nThe pull requests clearly states this as it's desired functionality: Instead of throwing a 404, load the page of unsupported languages in the default language. You coming along a month later to say +366 lines of code and -302, for something that couldve been handled in a 404. is nonsense.\n. ",
    "wisepotato": "+366 lines of code  and -302, for something that couldve been handled in a 404.\n. Please at least act professional. Do not get personal for any reason and act your age. Thank you.\nMaybe I was not clear enough for you. 404ing was not what I proposed, but giving alternative content if the selected language is not set seems decent enough. Laravel has this capability, what you are trying to do seems like a per-app kind of thing. As is demonstrated by your eCommerce example.\nas the documentation suggests:\nphp\nApp::missing(function($exception)\n{\n    return Response::view('errors.missing', array(), 404);\n});\nCould be edited to suit your needs.\n. I agree that my comment was nonsense. Sorry about that. It was merely me not understanding the purpose of the pull request. Again, sorry.\nHowever my point still stands. Instead of the code you wrote I would suggest a more general support, support for 'missing locale/language', where the user can use events (for example) to fill in the blank. Which could be used for your implementation, or any implementation whatsoever.\n(e.g.: locale not supported, give the user an option to translate pages via google translate? Wouldnt ever implement that, but the freedom to do so could be great.)\nI like your point of allowing unused locales, but a more general approach would maybe suit the package better? Up to package owner of course.\n. ",
    "Synapse-LAB": "Any news?\nI updated this package to the last version but nothing change.\n. ",
    "cdiazr": "Marc el tuto est\u00e1 bien y tu paquete creo que ser\u00e1 muy bueno pero nada mas terminar de instalarlo me dice que \"Class 'LaravelLocalization' not found\" como hago para solucionar eso? se supone que siguiendo las instrucciones de tu repositorio funcionar\u00eda, bien todo, no? d\u00f3nde tengo que poner los helpers que acompa\u00f1an a tu paquete ya que en tu paquete no los encuentro por ning\u00fan lado. Quedo a la espera de tu respuesta, gr\u00e1cias.\n. Si, incluso se me ocurrio cambiar todo donde ponia laravel-localization por LaravelLocalization desde el composer (incluso tratando de instalat asi) hasta la ultima linea del paquete que tuviese el nombre con el guion. Y nada, segui sin reconocer la clase, como si no existiese y ahi est\u00e1, en Fecades. \nNo se como arreglarlo, se me ha pasado por la cabeza hacer una copia de esa clase en Fecades y copiarla en la carpeta controllers pero aun no lo he hecho.. por probar....\nEnviado desde Yahoo Mail con Android\n. ",
    "LoLFactor": "You're very welcome! Thank YOU for this awesome plugin!\n. As per the documentation:\n```\n   Route::group(array('prefix' => LaravelLocalization::setLocale()), function()\n       {\n            / ADD ALL LOCALIZED ROUTES INSIDE THIS GROUP /\n            Route::get('/', function()\n            {\n                return View::make('hello');\n            });\n        Route::get('test',function(){\n            return View::make('test');\n        });\n});\n\n```\nThis will do what you want.\n. ",
    "f4ndor": "thanks but -- of course -- i tried this, and it didn't work. i get 404 pages. i'll try to figure it out.\n. solved it.. i actually had to nest the existing routes and groups, inside this new group.\n(again sorry, im completely new)\n. ",
    "cmoralesweb": "Thanks for the fast response!\n. ",
    "jonasva": "Thanks for the quick feedback @jaumesala \nI know about the possibility of using:\n{{ url(LaravelLocalization::getURLFromRouteNameTranslated(Config::get('app.locale'), ['routes.news'])) }}\nThe problem is that if I use a switch language function, I will not know the translation keys for my route. I will just know the original URL and the locale I want to switch to. \n. Thanks for the help @jaumesala, it's not exactly what I meant but it helps me out too.\nMy initial problem is actually that I can't use getLocalizedURL with Translated Routes if I use anything else but the current route. If I specify a URL parameter such as URL::previous(), getLocalizedURL will not give me the translated route, but just the original one with the locale segment changed. \nJust try the same as me in your own routes.php file:\n```\n$url = URL::previous();  \necho LaravelLocalization::getLocalizedURL('en', $url); // make sure you specify a locale here that is NOT your current locale\nexit;\n```\nBut your answer does help me out with my language switcher issue, as I suppose the handling and translation of the slug would all happen only after you click the language switch link? \n. Thanks @jaumesala, that solves my problem :). \n. ",
    "smgladkovskiy": "Laravel's URL::to() have a check for valid URL that was given to it . If check is failed it thinks that there is a app path given to it and adding base path before it. Maybe getLocalizedURL() method should also verify url and if verification fails, return only path - without base?\n. ",
    "brack11": "Thanks, it works in newest version\n. After update to 1.14.8 issue repeated. \n. But does that mean I have to manually correct the code after each update?\n. That is the thing - I updated with composer to 1.14.7 and everything started to work but after another update to 1.14.8 I've got old error back\n. ",
    "dimsav": "Pull request #145 is fixing the issue.\n. You just have to do a composer update. But only after the changes are merged in the master branch and a new minor version tag is created.\nPoke @mcamara to do it ;)\n. As expected, the tests failed because of some composer error in travis.\n@mcamara can you please merge? The fatal error bug mentioned in #144 is still live.\nThanks!\n. ",
    "SpyTec": "Should be noted that since pull request #147 there hasn't been a change in version so some people may still have the error, unless you remove it yourself or wait for the version number to change.\n. ",
    "nWidart": "Oh, so no laravel 5 branch until then? I'm already using laravel 5 for some personal projects.\n. I've forked the package to enable laravel 5 support. \nFor those who want to use it one L5 add this to your composer.json:\n``` json\n\"require\": {\n    \"mcamara/laravel-localization\": \"dev-Laravel5Support\"\n},\n\"repositories\": [\n    {\n        \"type\": \"vcs\",\n        \"url\": \"https://github.com/nWidart/laravel-localization\"\n    }\n],\n```\n. Okay.\nAll I did was changing the composer.json constraint on laravel:\njson\n\"laravel/framework\": \"~5\"\nAbout that, it's in general considered a very bad practise ton require the entire framework. You should only depend on some of its dependencies.\n. Oh, strange. It's remembering the session information here. I can reload / change page and the language is remembered. \n. I have that same issue now that the Spanish language stays in the currentLocales array, even it's commented in the config file.\nIt's very weird. I've tried renaming the 'supportedLocales' key in the publish configuration file, and then it read from the original configuration file. And when it has the correct key, it just adds spanish to it... Even if I only have:\nphp\n'supportedLocales' => array(\n        'en' => array('name' => 'English', 'script' => 'Latn', 'dir' => 'ltr', 'native' => 'English'),\n        'fr' => array('name' => 'French', 'script' => 'Latn', 'dir' => 'ltr', 'native' => 'fran\u00e7ais'),\n    ),\nFrom what I can see, it always takes the default config file merged with the exported one.\nI've updated my fork so they're now commented.\n. Turns out I was using the following code to set the locale:\n``` php\n$lang = Request::getPreferredLanguage(['fr', 'en', 'de', 'nl']);\nif (App::environment() == 'testing') {\n    $lang = 'fr';\n}\nApp::setLocale($lang);\n```\nBut which was overwriting the app.locale key. \nI now just use LaravelLocalization::setLocale(); which seems to have fixed it.\n. Did you tag this ?\n. Could you please tag this ? Thank you.\n. Awesome, thank you. No problem at all. :smiley: \n. Interesting! Will take a look at this asap For AsgardCms. Since this package isn't maintained anymore it seems.\nHopefully the api is similar, to have as few things to change. :)\n. You can install it on 5.5.\nHowever, I'm having issues where cookies aren't stored. I'm thinking it might be related to this package somehow.. ",
    "barryvanveen": "I've checked out the fork for L5. Basic routing and the filter seem to work but the chosen language is not remembered. In my case, both the cookie and session-variable are lost after reloading the page. \nProblem is I haven't been able to figure out why it doesn't work...\n. Another problem is that my supportedLanguages-array is not properly read. I have manually enabled English and Dutch and disable Spanish. Still, my language bar shows all three of them.\n. @nWidart: the problem arises when I first visit /en/foo and then /foo. Because I have visited /en/foo I should have a cookie and session-variable that indicate I want to use the English language. However, when I visit /foo I am redirected to /nl/foo (my browser language, not my default locale) instead of /en/foo. \n. ",
    "coveralls": "\nChanges Unknown when pulling 873d2fee89741a6d3837c017a1a6bc39507c81cd on dimsav:patch-3 into * on mcamara:master*.\n. ",
    "jfrabaute": "No worries ! Thanks for the great work and I'm looking forward for the next release.\n. ",
    "beregovoy": "Yeah. Thank you. By the way we have LaravelLocalization::getCurrentLocale() function for this too, but it's not documented. Will be good if both of this functions will be added to readme.\n. ",
    "ramyareye": "I checked setLocale function and it will read from segment(1) and my lang code is in segment(2), it's the problem \n. ",
    "MaxNozhkin": "I used version 14, after update to v.15 all okey, thank you :)\n. ",
    "cariboufute": "Had the same problem too. Maybe I'm wrong but what I see in the vendor tests is that you have to reproduce all the route mapping in the test class to make it work. With this, you don't test the actual route mapping but a replica, which is not what you need to do. We need to test the actual route map.\nWonder how we could do this though...\n. +1 for testing solution. I abandoned this package for the moment and made my own solution, which is less elegant, but can be tested. \n. I made an alternate solution to this package but I did not package it yet. I may try to publish an alpha version of a package soon. The routes of my solution are unit testable.\n. I am making my own localization routing project for Laravel here : https://github.com/cariboufute/locale-route. Their routes will be fully testable. It should be ready in a few weeks.\n. I have mostly finished making my own localization routing package for Laravel : https://github.com/cariboufute/locale-route. The version is an alpha, but is already functional and should be set to beta really soon. Please check it... and this one is fully testable with the usual testing methods.\n. ",
    "acaron": "+1 same problem with Behat.\n. After looking into the code, the function LaravelLocalization::setLocale() can return null or a locale. In the test case, it return null. If you force a value to always be return, all tests are ok but the redirection middleware is never hit since a null prefix can't happen anymore.\nSo, I looked in the request object and the test case was returning:\npathInfo: \"/\"\nrequestUri: \"/\"\ninstead of:\npathInfo: \"/en/login\"\nrequestUri: \"/en/login\"\nSo, the segment can never be fetch. We need a solution for testing! This way, we have to copy the routes like said previously.\nThis is my temporary fix until a better solution comes up:\n'prefix' => (env('APP_ENV') === 'acceptance' ? 'en' : LaravelLocalization::setLocale())\n. ",
    "okaufmann": "+1 have the same problem here. Is there already a fix for this ?\n. In view of a Laravel 5.2 Project this is a bugfix. So it make sense to tag a new release as well.\n. Thank's for your work guys ! And welcome ;)\n. You could use another package like https://github.com/rmariuzzo/Laravel-JS-Localization. But you have to set the locale by your own.. ",
    "dsamojlenko": "Anyone have any further thoughts/suggestions on this?  Same problem here...\n. ",
    "jaumeavila": "+1 I have the same problem. No solution yet?\n. ",
    "zachleigh": "+1 Anybody found a solution to this yet? This package seems great, but if its going to break all my tests, its pretty worthless.\n. Had this same problem. Fixed it by nesting the localization route group inside the web middleware route group. Originally, I had the localization route group as the top level group.\nThis works for me:\nphp\nRoute::group(['middleware' => ['web']], function () {\n    Route::group([\n        'prefix' => LaravelLocalization::setLocale(),\n        'middleware' => ['localeSessionRedirect', 'localizationRedirect'],\n    ], function () {\n        // Routes\n    });\n});\n. ",
    "da-n": "+1 Shame that there is no solution to this, has anybody found a workaround? This is an awesome package but totally breaks all tests.\n. ",
    "wtom": "https://github.com/wtom/laravel-localization/commit/452a1c2992b96580e14a5f8ada58d2a16262dc59\nis this a possible solution?\nI call it in my createApplication() method in my TestCase.php.\n```\npublic function createApplication()\n    {\n        $app = require DIR.'/../bootstrap/app.php';\n    $app->make(Illuminate\\Contracts\\Console\\Kernel::class)->bootstrap();\n    app('laravellocalization')->setUnitTestingRoutes();\n\n    return $app;\n}\n\n```\nI my test it's like this:\napp('laravellocalization')->setLocale('en');\n$url = app('laravellocalization')->getLocalizedURL('en', 'api/v1/test');\n$this->json('GET', $url)\n             ->seeJson([\n                 'msg' => 'Hello World!',\n             ]);\nRoute::group(['prefix' => LaravelLocalization::setLocale() ? LaravelLocalization::setLocale() : '/' , 'middleware' => [ 'localeSessionRedirect', 'localizationRedirect' ]], function() {\n. ",
    "JensJI": "This is a major problem. Using the localization plugin just broke our test suite for all http tests, and no of the proposed solutions seems applicable.\nMaybe you, @mcamara , could take a look at this issue as you can see the big picture of the code?\n. ",
    "aurawindsurfing": "For me different solution works:\nSet in app/config:\n'hideDefaultLocaleInURL' => env('LOCALIZATION_HIDE_DEFAULT_LOCALE', false)\nAnd then in phpunit.xml:\n<env name=\"LOCALIZATION_HIDE_DEFAULT_LOCALE\" value=\"true\"/>\nHope it helps someone!. Aby updates please?. ",
    "zedee": "\nFor me different solution works:\nSet in app/config:\n'hideDefaultLocaleInURL' => env('LOCALIZATION_HIDE_DEFAULT_LOCALE', false)\nAnd then in phpunit.xml:\n<env name=\"LOCALIZATION_HIDE_DEFAULT_LOCALE\" value=\"true\"/>\nHope it helps someone!\n\nThat workaround is not working for me :(\nI guess there's still no updates on this?. ",
    "goranata": "Hi,\ncould you please help me out here a bit.\nI was using 1.4.x version on a 4.2 version of Laravel, and I've updated it to the current 1.5.* version and this error has occured. Before the update, e.g. when I was using the 1.4.* version of this package, everything was in order.\nUndefined index: path (View: /home/mysite/app/views/home/index.blade.php)\nHere's routes:\n\nIn my config I must set hideDefaultLocaleInURL => false, in order to avoid the Undefined index: path error I get. I would love to have it set to true, as the default locale is not required in my URL.\nHere's my config:\n'useAcceptLanguageHeader' => true,\n'useSessionLocale' => true,\n'useCookieLocale' => true,\n'hideDefaultLocaleInURL' => false,\nHere's an example of the links I am using: LaravelLocalization::getLocalizedURL(LaravelLocalization::getCurrentLocale(), route('homepage'))\n. Sorry my bad, it's not 1.5.*, it's 0.15.1.\nL 4.2.* this should make the last 4.2.17, the current version of this package is \"version\": \"0.15.1\", according to the composer.json in the vendor/mcamara/laravel-localization/\nI'm not sure, if I've understood your questions correctly, althought.\nHere is the error I get, in order to provide more relevant information. I think that it is related because I used route(), instead of url parameters, but I was using the same linking structure on the entire website, before I updated the package and had not problems related. I had to update, as you know already, there was an error in Internet Explorer.\n\n. Could be, but still, I have been using this package (for at least 5 websites so far), and I still continue to use, but have to mention that before the update to 0.15., everything was working just fine before updating to the latest version for laravel 4.2..\nJust tested again and downgraded to version 0.14.9 of this package it works just fine (without the error of LOCALE that I had previously in IE.\nBut with the package 0.15.1, it still shows errors, with the same structure of all the links in the views. Tried almost everything, but I believe that there might be some bug in the 0.15.1 version.\n. Yes,  that the index, e. g.  homepage,  route('m_index') or url('/').  Makes the same error to both. \nYesterday i started a laravel 5 website,  with this package,  this is definetely the issue. Only on that route or url. \n. ",
    "tbuteler": "This happens when the URL you are trying to localize doesn't have a trailing slash. So if you attempt to localize \"http://example.com\" it will fail, but \"http://example.com/\" or \"http://example.com/path\" will go through fine.\n. ",
    "vsuta": "I love this package but I have same problem too.\nIm kind of suck here.\nProblem i have is when visitor change language from product detail page it  trows exception\nHttp://exampe.com/en/products/7 or slug\nCant change language to\nHttp://example.com/de/produkte/7 or slug\nProducts prefix is not translated. Even slug is not translated if used instead of id-s.\nLocale prefix works fine.\nFor  now my solution is if user change language it is redirected to homepage.\nWould like to find solution to stay on same page.\n. ",
    "dyial": "Any updates on this @mcamara?\n. ",
    "jorenvanhee": "I'm having the same issue.\nIt used to work in version 0.13.7 with laravel 4. I noticed it while upgrading a project to laravel 5.1.\n. ",
    "arcanedev-maroc": "Hi everybody,\nSorry about that, i'm feeling like i'm spamming here but it's for a good reason.\nYou can try my new package : https://github.com/ARCANEDEV/Localization\nFor translated routes usage : https://github.com/ARCANEDEV/Localization/blob/master/_docs/4-Usage.md#translated-routes\nAnd for your case:\n``` php\nRoute::localizedGroup(function () {\n    Route::group([\n        'prefix' => trans('routes.store')\n    ], function () {\n    Route::get('/', ['as' => 'store.home', 'uses' => 'Controller@home']);\n\n    Route::group([\n        'prefix' => trans('routes.products')\n    ], function () {\n\n        Route::get('/', ['as' => 'store.items', 'uses' => 'Controller@products']);\n\n    });\n\n});\n\n});\n```\n. Yep you're right @GregoryClaeyssens \n.To fix that:\n``` php\nEvent::listen('routes.translation', function ($attributes) {\n    $locale = LaravelLocalization::getCurrentLocale();\n// Translate your attributes...\n\nreturn $attributes;\n\n});\n```\n. The first locale is always the default locale (From) and the second locale is gonna be the current locale (To) selected by the user. \nSo you only need one locale to translate to a specific language.\nBy the way, i've found the bug : https://github.com/mcamara/laravel-localization/blob/master/src/Mcamara/LaravelLocalization/LaravelLocalization.php#L836\nAs you can see, there is no locale passed here.\n. I've fixed my ARCANEDEV/Localization package by editing this method : https://github.com/laravel/framework/blob/5.1/src/Illuminate/Routing/ResourceRegistrar.php#L212-L221\nThe issue: https://github.com/ARCANEDEV/Localization/issues/5\n. Replace $locale = 'fr'; by $locale = LaravelLocalization::getCurrentLocale();.\n. Check : https://github.com/mcamara/laravel-localization/issues/166\n. I'm going to test your case and try to find out a solution because i'm working on my own localization package.\nYou can look at it and try if it solves your problem: https://github.com/ARCANEDEV/Localization\nBon week end (French speaker here :+1: )\n. Hello @GregoryClaeyssens,\nCheck out my new translation event : https://github.com/ARCANEDEV/Localization/blob/master/_docs/4-Usage.md#events\nMore details: https://github.com/ARCANEDEV/Localization/pull/7\nHope this helps you.\n. @mxmtsk, try to make a PR to see if it's gonna pass all the tests or not.\n. @gjportegies, Yes this can solve your problem, but the issue is you must store all supported locales attributes into your database instead of using only the locales keys. \nAnd the config may change also (like the new regional attribute).\nTry to check this package : https://github.com/ARCANEDEV/Localization\nTo set the supported locales, you only need to specify the locales keys : https://github.com/ARCANEDEV/Localization/blob/master/config/localization.php#L8\nBonus : You can also use the locales entities to retrieve the locale attributes based on the config file.\n. Yeah, i totally agree with you @superdummy.\nThe source code is super messy, hard to read or to understand how it's work \nI loved this package but i'm a little bit 'OCD' about how the code is written and maintained, so i decided to made my own (inspired from mcamara/laravel-localization).\nThe repo : https://github.com/ARCANEDEV/Localization (Still WIP)\n. Of course i'm going to imporve it and i'm open to hear your suggestions and your pull requests. \nHope this package helps you in your projets.\n. This is caused by Route::group() + resource(), you can not access cars.create route name because its add the prefix from the group, the result {locale}.cars.create = replace the {locale} with the current locale.\nCheck this: https://github.com/illuminate/routing/blob/master/ResourceRegistrar.php#L211\nThis is how i fix it in my Localization package: https://github.com/ARCANEDEV/Localization/issues/9\n. I don't know if the problem is caused by using the model binding.\nYou need to edit your routes.php in lang folders, instead of using keys with /, try to do something like this :\n``` php\n// resources/lang/de/routes.php\nreturn [\n    'firma-abdeckung-id' => 'firma/abdeckung/{firma}',\n    // LaravelLocalization::transRoute('routes.firma-abdeckung-id')\n];\n// OR like this (I don't know if this package support it or not)\nreturn [\n    'firma' => [\n        'abdeckung' => [\n            'show' => 'firma/abdeckung/{firma}',\n            // LaravelLocalization::transRoute('routes.firma.abdeckung.show')\n        ],\n    ],\n];\n// Same thing for other locales\n```\nYou can also check your model binding by doing this:\n``` php\n$router->bind('firma', function($id) {\n    $record = \\App\\Firma::where('id', $id)->first();\ndd($record); // This is only to see if everything is OK.\n\nreturn $record;\n\n});\n```\n. I don't know exactly why this is not working but i'm curious about this issue.\nI've created my own localization package and i don't know if i've got the same issue.\nYou can try it if you want : https://github.com/ARCANEDEV/Localization\nI can assist you to find out the issue and also to improve my package.\nNOTE : My package was based on mcamara/laravel-localization, so they're gonna be only some minor changes to do.\n. You're welcome :+1: \n. I fixed the issue in my localization package.\nTo @mcamara, @BojanKogoj\nWhen we use route bindings, you need to be aware that you can have classes/models when you grab attributes from the request at this line.\nTo fix it, you need to update the substituteAttributesInRoute() method:\nhttps://github.com/mcamara/laravel-localization/blob/master/src/Mcamara/LaravelLocalization/LaravelLocalization.php#L546-L558\nThis is what i've done to fix it: https://github.com/ARCANEDEV/Localization/pull/21\n. @mcamara \nThe build is failing, you need to update this line.\nInstead of:\nphp\n$path = str_replace(url(), \"\", $path);\nTry this:\nphp\n$path = str_replace(url('/'), \"\", $path);\n. You're welcome :+1: \n. I think this may helps you: https://github.com/ARCANEDEV/Localization/issues/88. IMO, leaving hideDefaultLocaleInURL to false is good for Search Engine Optimization (SEO).\n. @mxmtsk, yep it is : https://github.com/mcamara/laravel-localization/issues/219\n. :+1: \n. Try the explicit routes: https://github.com/laravel/framework/blob/5.2/src/Illuminate/Routing/Router.php#L346-L361\n. Formated code:\n``` php\nRoute::group([\n    'prefix' => LaravelLocalization::setLocale(), \n    'middleware' => ['localeSessionRedirect', 'localizationRedirect', 'localize']\n], function () {\n    Route::get(LaravelLocalization::transRoute('routes.home'), [\n        'as' => 'home', \n        function () { \n            // this one works fine, even when I chang the language,\n            // it automatically goes from /en/home to /fr/accueil\n            return view('pages.main.main'); \n        }\n    ]);\nRoute::group([\n    'prefix' => LaravelLocalization::transRoute('routes.for-who')\n], function () {\n    Route::get(LaravelLocalization::transRoute('routes.other-businesses'), [\n        'as' => 'other-businesses', \n        function () { \n            // if i try to change the language from en to fr the url goes\n            // from /en/for-who/other-businesses to /fr/for-who/other-businesses\n            // instead of /fr/pour-qui/autres-entreprises\n            return view('pages.for-who.other-businesses'); \n        }\n    ]);\n});\n\n});\n```\nCan you show us the routes.php in your lang folder [en, fr] ?\n. Did you have a translated file for routes (resources/lang/fr/routes.php) ?\n. instead of using 'prefix' => LaravelLocalization::transRoute('routes.for-who'), why not simply using trans('routes.for-who').\nAnd note the fr/routes.php is not fully translated, especially the other-businesses.\n. Yes, but did you see the usage of transRoute() inside of Route::group() ??\n. You can try my Localization package: https://github.com/ARCANEDEV/Localization\nIt's based on mcamara/laravel-localization package, with more enhancements and features.\nI think this may helps you: https://github.com/ARCANEDEV/Localization/issues/19\n. The package : https://github.com/ARCANEDEV/Localization\n. Thanks @arielstt for using my localization package :+1:\n. BTW, if anyone want to know about this issue, check this: https://github.com/mcamara/laravel-localization/issues/260#issuecomment-159065103\n. Check this: #163\n. How about using the named routes ??\n. This is a known issue, you need to use a vhost like http://obtrs.dev instead of http://localhost/obtrs.. Try to use a vhost, like http://enngezshirt.dev/ instead of http://localhost/enngezshirt/public/.\n. ",
    "ovvessem": "@arcanedev-maroc I have created an issue on your own repo :)\n. ",
    "hgokturk": "i have some locale routes:\n\"about\"      => \"hakkimizda\",\n\"career\"       =>  \"kariyer\",\n\"contact\"        =>  \"iletisim\",\ndefault locale is 'tr'.\nwebsite.dev/hakkimizda is translated to website.dev/en/about without any problem.\nbut website.dev/hakkimizda/kariyer is translated to website.dev/en/hakkimizda/kariyer while it is supposed to be translated as website.dev/en/about/career\nThis is a big problem. Did you come up with any solution about this?\n. ",
    "BrunoMCTeixeira": "I'm having this issue as well, can't get the translated URL to contain the first level of depth if the route is defined inside a group. ",
    "sweet-greg": "Having same issue... \nActually, the docs say:\n     Event::listen('routes.translation', function($locale, $attributes){\n          return $attributes\n     });\nbut seems the $locale is never passed...?\n. Wouldn't getCurrentLocale() return the current locale (as is the name of the function). This would give me 'nl'.(translating from nl to fr). You need 2 locales to be able to translate a parameter. The current locale and the locale you are translating to. (except for the situation where you only have 2).\n. I'm having the same issue... URL parameters don't seem to work in all cases\n/* this works */\nRoute::get(LaravelLocalization::transRoute('routes.jobs_index'), array('as' => 'jobs.index', 'uses' => 'JobController@index')); \n/* this works */\nRoute::get(LaravelLocalization::transRoute('routes.jobs_show'), array('as' => 'jobs.show', 'uses' => 'JobController@show')); \n/* this doesn't work */\nRoute::get(LaravelLocalization::transRoute('routes.solicit_show'), array('as' => 'jobs.solicit', 'uses' => 'JobController@solicit'));\n/* this works */\nRoute::get(LaravelLocalization::transRoute('routes.news_index'), array('as' => 'news.index', 'uses' => 'NewsController@index')); \n/* this doesn't work */\nRoute::get(LaravelLocalization::transRoute('routes.news_show'),  array('as' => 'news.show', 'uses' => 'NewsController@show'));\nnl/routes.php\n'jobs_index'     => 'vacatures',\n'jobs_show'     => 'vacatures/{jobofferingsID}',\n'solicit_show'  => 'solliciteer/{jobofferingsID?}',\n'news_index'     => 'nieuws',\n'news_show'     => 'nieuws/{slug}',\nfr/routes.php\n'jobs_index'     => 'emplois',\n'jobs_show'     => 'emplois/{jobofferingsID}',\n'solicit_show'  => 'solicit/{jobofferingsID?}',\n'news_index'     => 'nouvelles',\n'news_show'   => 'nouvelles/{slug}',\nI tried making the attribute mandatory by removing the question mark, that didn't 'fix' it. \nWhen you visit the solicit_show page, without that jobofferingsID it does work.\nIt all seems quite random to me, what works what doesn't... Maybe i'm just overseeing something obvious?\nChecking for route translations seems to work fine, but when using the getLocalizedUrl() function it just changes /fr/ to /nl/ en leaves the url untranslated (as explained by @alkzzz)...\n. Simple workaround that seems to work in my case...\n<a rel=\"alternate\" hreflang=\"{{$locale}}\" href=\"{{  LaravelLocalization::getLocalizedURL( $locale, Request::url(), Route::current()->parameters()) }}\">{{ $locale }}</a>\nDownside is the event  for parameter translation is never called now, but yeah this was already broken(?)... See #200 \n. @MarcGuay This didn't seem to help. \n. Wouldn't getCurrentLocale() return the current locale (as is the name of the function). This would give me 'nl'.(translating from nl to fr). You need 2 locales to be able to translate a parameter. The current locale and the locale you are translating to. (except for the situation where you only have 2).\n. ",
    "subdesign": "Laravel hasn't all the methods in the docs too, but you can find as experienced coder lot of things in the API/source code. Same here.\n. same here. ",
    "armababy": ":+1: \n. Same problem over here, by the looks all translated routes are not utf-8 character friendly.\n. @FDiskas i do not think the issue here is with sanitizing(sluggifying in this case) user translation, package should be able find any translation user has set up even if it's incorrect and return it. That is more on the user side to pass correct url translations.\nWill check source later this week to see whats up.\n. ",
    "Thomas-Jensen": "Also I forgot to say it gives \"http://host-5:8888/en/home\" for other languages as well apart from en\n. Hi Azuron, \nSo just to be sure you are using the latest release? \nThe Laravel-Localization package always created it's own config file, in laravel 5 it's under \"vendor/mcamara/laravel-localization/src/config/config.php\" I don't recall the complete path in 4.2 but it was the exact same as in the new within the package. \nKind regards,\nThomas\n. Aah I see, I understand now, actually I had the same problem before (cause I didn't read that section /slaps head) but the command works for me:\n\nMaybe you have another package which is creating this error? \n. Oh but you have laravel 4.2 not the latest 5.0 and also the 'old' version of the package but that fits teh laravel install, so the problem is that vendor is a 5.0 thing afaik so you gotta look in the old files like this old readme: https://github.com/mcamara/laravel-localization/blob/855fbeae5d9d3d7ef421dd4d247a358cd2551d15/README.md#config\nthis was the old config option: \nConfig\nBy default only english and spanish are allowed but it can be changed using config.php file that is located at app/config/packages/mcamara/laravel-localization/config.php . If this file does not exist, use the following artisan command php artisan config:publish mcamara/laravel-localization in order to create it.\nLaravel itself is currently at 5.0 build release and laravel-localization at 1.0\n. Happy to help :) \n. Not sure I understand the problem, setting hideDefaultLocaleInURL to false should always show the locale in the urls ie: homepage.com/en with english being the default locale in this case. If you use manual links etc I understand you can end up with homepage.com but if you look there is a filter/middleware to account for this called localizationRedirect, if you use this it will always redirect to a localized version of the page. You should give it a go it's awesome, and it's great for SEO as well, as it can be quite tricky on multilingual apps. :) \n. Are you using laravel 5 or 4.2? and are you using 1.0 of laravel-localization or the sub 1.0 versions? \n. Then you do it like this: \n// app/Http/routes.php\n```\nRoute::group(\n[\n    'prefix' => LaravelLocalization::setLocale(),\n    'middleware' => [ 'localizationRedirect' ]\n],\nfunction()\n{\n    / ADD ALL LOCALIZED ROUTES INSIDE THIS GROUP /\n    Route::get('/', function()\n    {\n        return View::make('hello');\n    });\nRoute::get('test',function(){\n    return View::make('test');\n});\n\n});\n/ OTHER PAGES THAT SHOULD NOT BE LOCALIZED /\n```\nThe code changed some for laravel 5 and 1.0, imo it's cleaner and better now :)\n. No problem, I'm happy to hear it, glad to help :) \n. ",
    "oriceon": "yes, i confirm that too and i found where should be the problem..\nvendor\\mcamara\\laravel-localization\\src\\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRoutes.php\n$routeName = $app[ 'laravellocalization' ]->getRouteNameFromAPath($request->getUri());\nIf you have a route with optional parameter here, route name will be incorect filled.\n. Thanks for fix but is not working as expected.\ni did an echo on fixed substituteAttributesInRoute method from getRouteNameFromAPath() and it return cont/inregistrare/inregistrare for code parameter  ... 'register' => 'cont/inregistrare/{code?}', \nexpected to return only cont/inregistrare if i don`t have code parameter in url.\n$attributes = $this->extractAttributes($path); assign inregistrare to code parameter\n. I confirm now that my issue has been fixed in last version. Thanks!\n. ",
    "ntopulos": "I confirm that getLocalizedURL() does not work as it should.\nI am trying to generate a sitemap, and I get very strange results: third of my routes are translated but not the rest of them, and I see no correlation with anything that could explain this behavior.\nAll considered routes work just fine elsewhere with the action()-transRoute() couple.\n. All my routes use this filter: 'before' => 'LaravelLocalizationRedirectFilter'.\nIs that what you meant?\nNevertheless, assuming English is my default locale, when I go to /contact Laravel is not redirecting me to /en/contact.\nIn addition, without changing the locale on the page, none of the generated URLs is prefixed. Thus, user navigates the whole website without the locale in the URL.\n. Laravel 5 with laravel-localization 1.0.6\n. Thanks, it works perfectly!\n. ",
    "woltbit": "hi @mcamara is this working for laravel 5.1.* ?? thanks in advance\n. ",
    "dvlpp": "For me, this won't fix the bug: either I'm missing something, either locale Session is always set back to default. I mean, I just access the project with a localized URL, and then check the session (all OK). Then I access a non localized URL, and locale is set back to default. \nReason is what I mentioned in the bug report: Session value is checked (and set) by LaravelLocalization before the Laravel Middleware which inialize the Session object.\n. Of course, here's my config:\nreturn [\n    'supportedLocales' => array(\n        'de'          => array('name' => 'German', 'script' => 'Latn', 'native' => 'Deutsch'),\n        'en'          => array('name' => 'English', 'script' => 'Latn', 'native' => 'English'),\n        'fr'          => array('name' => 'French', 'script' => 'Latn', 'native' => 'fran\u00e7ais'),\n    ),\n    'useAcceptLanguageHeader' => true,\n    'useSessionLocale' => true,\n    'useCookieLocale' => true,\n    'hideDefaultLocaleInURL' => false,\n];\nHere's my L5 Http/Kernel file:\n```\nclass Kernel extends HttpKernel {\n/**\n * The application's global HTTP middleware stack.\n *\n * @var array\n */\nprotected $middleware = [\n    'Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode',\n    'Illuminate\\Cookie\\Middleware\\EncryptCookies',\n    'Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse',\n    'Illuminate\\Session\\Middleware\\StartSession',\n    'Illuminate\\View\\Middleware\\ShareErrorsFromSession',\n    'Maillon\\Http\\Middleware\\VerifyCsrfToken',\n    'Maillon\\Http\\Middleware\\LogSql',\n];\n\n/**\n * The application's route middleware.\n *\n * @var array\n */\nprotected $routeMiddleware = [\n    'auth' => 'Maillon\\Http\\Middleware\\Authenticate',\n    'auth.basic' => 'Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth',\n    'guest' => 'Maillon\\Http\\Middleware\\RedirectIfAuthenticated',\n    'sharp.auth' => 'Maillon\\Http\\Middleware\\SharpAuthenticate',\n    'keepCommandeEnCours' => 'Maillon\\Http\\Middleware\\KeepCommandeEnCours',\n];\n\n}\n```\nThing is: I can reproduce it very easily, and when I'm tracing Session \"locale\" value it's quite clear: it's well set, but next un-localized request will set it back to default because LaravelLocalization->getSessionLocale() method will return null as it's seems to be called before Session is valued.\n. I'm a bit lost... I think I might have done something wrong, because it seems that nobody else is experiencing this bug, which is, to me, very obvious. I think everything come form routes.php file, with the groupe prefix:\nRoute::group(['prefix' => LaravelLocalization::setLocale()], function()\n{\n   (...)\n}\nThis LaravelLocalization::setLocale() call always return the default lang (except if locale is present as a segment in the URL) and set it in the session, because Session::get(\"locale\"), at this moment, always returns nothing (session isn't started yet). I can't see how it can work...\nIf it's from me and I'm missing something obvious, please tell me!\nThanks.\n. ",
    "eickhardt": "+1\n. ",
    "mkwsra": "@mcamara What are your thoughts about this? any tip that could help me here?\n. Hey, @mcamara Thanks a lot, and I read the code trying to figure it out, I guess it's located in this function getURLFromRouteNameTranslated\nThe problem appears in the language chooser, when I click in translated route with Arabic character, i.e: \u0641\u0646\u0627\u062f\u0642 all the links in the language chooser will stick with this value as translated route: nl/\u0641\u0646\u0627\u062f\u0642 de/\u0641\u0646\u0627\u062f\u0642 ..etc nothing new here, but what I'd like to say is UTF-8 supports the Unicode, which means Arabic is supported in your code it's not about characterset/characterCoding.\nWorking on it hopefully to solve this out since my project is suspended because of this issue, I hope you could help me solving it.\nThanks for the great and clean code.\n. @armababy Thanks a lot worked like a charm!!\n. I'm sorry to re-open this, but I'm facing the same problem again, IFF I've hotels/{id}, the links will stuck for Arabic only!\nchangin from to the following links 100% works:\nde/zentren/3\nen/centers/3\nnl/gezondheidscentra/3\ntr/merkezleri/3\nExcept this one:\nar/\u0627\u0644\u0645\u0631\u0627\u0643\u0632/3\nbtw the order of the link above is automatically changed since Arabic is RTL language, so I'm guessing if you change the order of URI segments when you testing such language you can avoid such error.\nAppreciate any help guys @mcamara @armababy\n. btw mcamara, in the language choose it didn't work for hotels/{id} like this:\nhref=\"{{LaravelLocalization::getLocalizedURL($localeCode)}}\"\nuntil I made it like this:\nhref=\"{{LaravelLocalization::getLocalizedURL($localeCode,Request::url())}}\"\nis this normal ? or I\"m missing something ?\nrouts.php\nRoute::group([\n        'prefix' => LaravelLocalization::setLocale(),\n        'middleware'=>['localizationRedirect', 'localeSessionRedirect']\n    ],function() {\n        get('/', 'Front\\HomeController@index');\n        get(LaravelLocalization::transRoute('routes.centersID'), 'Front\\CentersController@show');\n        get(LaravelLocalization::transRoute('routes.centers'),'Front\\CentersController@index');\n });\nwhere routes.php in en folder:\n'centers'       => 'centers',\n    'centersID'    =>'centers/{id}',\n. @mcamara  I'd appreciate if you have any idea, or just let me know that you saw my issue\n. @fisharebest Do you think this issue is related with your edits in #130 ?\n. Okay thanks! its just that I'm desperate and I don't have time to take closer look, sorry for bothering\n. @mcamara Should I open a new issue ? please see this link, and try to change the language from English into Arabic and back then from Arabic to English \nhttp://52.17.68.31/en/packages/female-check-up-packages-under-40-years-old-1\n. I've solve it using urldecode() when I've to compare values other wise it won't find the intended value \n```\n$arrayOrm = Route::current()->parameters();\n            $orm = reset($arrayOrm);\n            $ex = explode(\"/\",Request::url());\n            $lastElement = end($ex);\n            $link = LaravelLocalization::getLocalizedURL($localeCode, Request::url(), Route::current()->parameters());\n            if(count($ex) >= 2){\n                foreach($ex as $e)\n                {\n                    if(urldecode($e) == trans('routes.packages') && $e != $lastElement){\n                        $link = Request::root() .\"/\". $localeCode .\"/\". trans('routes.packages',[],'',$localeCode) .\"/\". $orm->translations()->t($localeCode)->slug;\n                        break;\n                    }elseif(urldecode($e) == trans('routes.centers') && $e != $lastElement){\n                        $link = Request::root() .\"/\". $localeCode .\"/\". trans('routes.centers',[],'',$localeCode) .\"/\". $orm->translations()->t($localeCode)->slug;\n                        break;\n                    }\n                }\n            }\necho $links\n```\n. Indeed it should I still have problem\n. @Krato Thanks a lot for your answer, now I'm now working in that project anymore, and I'm using the other library that was forked out of this one, and so far I didn't reach a level where I've to implement same features in my current projects, but thanks again :smile: specially the translation, :+1: \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0441\u043f\u0430\u0441\u0438\u0431\u043e\n. @mcamara May I know that is in your mind ?\n. :+1: I've tried some stuff, but with no use! I'd really like to know if you got any thing to share\n. @fisharebest  Good to know\n. :+1:   but first I wish the other problems to be fixed\n. Hi there @Mdpproduction may I know what you ended up using ? \n. +1 indeed I just gave it a try, it will fallback to the default locale\nwww.healthtour.com\n. I'm going to test it in my next project, which is close.\nYou did the best by this move,  please keep improving it and stay open to others' pull requests.... eventually it's open source community. \n:+1: \n. ",
    "FDiskas": "I have same problem. I suggest you to use some helper http://laravel.com/docs/5.0/helpers#strings\nstr_slug()\nI hope the plugin author will use this function before returning translated url\n. @mcamara I tryed to fix that problem but - tests not passed. So the best solution for this is in your language file add the helper\n``` php\n<?php\nreturn [\n    'admin.home' => str_slug('\u0641\u0646\u0627\u062f\u0642')\n];\n```\nThen localized url will return something like http://localhost/nl/admin/fndk\n. Tests are not passed\n. ",
    "vinalys": "I believe this issue should be reopened?\n. ",
    "Krato": "@mkwsra Hi! Do you try with urlencode?\nI fix some russian url translations with that fix. \nI made a function that encodes the url after pass to getLocalizedURL function and works:\nThis is an example. Hope you get it!  !\u0623\u062a\u0645\u0646\u0649 \u0623\u0646 \u062a\u0641\u0639\u0644 \u062c\u064a\u062f\u0627\n``` php\nfunction translateRoute($locale){\n//Get the path type\n//http://www.example.com/en/hotels -> get hotels\n$req = \\URL::getRequest();\n$type = urldecode($req->segment(2));\n\n//Get the route translated for current locale\n$hotels = Lang::get('routes.menu.hotels');\n\nif(mb_strtolower($type) == mb_strtolower($products)){\n    //Get the localized route\n    $hotelsLocalized = Lang::get('routes.menu.hotels', [], $locale);\n    //Make the magic with urlencode php function ;)\n    return url(LaravelLocalization::getLocalizedURL($locale, urlencode($hotelsLocalized)));\n}\n//IF not hotel return normal translated route\nreturn urldecode(LaravelLocalization::getLocalizedURL($locale));\n\n}\n```\n. Yes, how to do it?\nI'm trying this: \nphp\n$this->visit('es/contacto')\nBut is not working. How to fix it?\n. But I want to test all locales....\n. ",
    "antondomratchev": "This will not work for Carbon generated dates. When I get around to extracting my implementation from my project I will fork and make a PR for this. Its useful even if you dont use Carbon.\n. ",
    "azuron": "I have the latest version of laravel and Laravel Localization. I already tried to make settings in this file vendor/mcamara/laravel-localization/src/config/config.php. But if I update the package all my settings are removed. I want to create a configuration file in the app directory as written on the website in the section of Config Files.\n. I have this error:\n\nI have an empty laravel and have not installed one package.\nMy file composer.json\n\"require\": {\n                \"laravel/framework\": \"4.2.\",\n                \"mcamara/laravel-localization\": \"0.15.\"\n        },\n. Thank you very much for your help and good advice!!! The command php artisan config:publish mcamara/laravel-localization has created the configuration file here app/config/packages/mcamara/laravel-localization/config.php Thank you it works great!\n. ",
    "jojimoreau": "+1, same issue here :/\n. ",
    "anasbud": "I think we have the same problem.\nThe user language is not saved into the cookie / session\n. ",
    "tanshiqi": "+1 , same issue\n. @intrepidtr \nSame problem, the route not in group also add language:\n```\nRoute::group(\n[\n    'prefix' => LaravelLocalization::setLocale(),\n    'middleware' => [ 'localizationRedirect' ]\n],\nfunction()\n{\n    Route::get('/', 'HomeController@index');\n    Route::controllers([\n        'auth'     => 'Auth\\AuthController',\n        'password' => 'Auth\\PasswordController',\n    ]);\n});\nRoute::get('/test', function(){\n    return 'Just Test';\n});\n```\n1. Visit http://localhost/     OK, English language\n2. Visit http://localhost/fr   Also OK\n3. Visit http://localhost/test  => Redirect to: http://localhost/fr/test  404 error\nPS: hideDefaultLocaleInURL=true\n. It's my kernel.php:\n```\nprotected $middleware = [\n    'Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode',\n    'Illuminate\\Cookie\\Middleware\\EncryptCookies',\n    'Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse',\n    'Illuminate\\Session\\Middleware\\StartSession',\n    'Illuminate\\View\\Middleware\\ShareErrorsFromSession',\n    'App\\Http\\Middleware\\VerifyCsrfToken',\n    'Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect'\n];\nprotected $routeMiddleware = [\n    'auth' => 'App\\Http\\Middleware\\Authenticate',\n    'auth.basic' => 'Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth',\n    'guest' => 'App\\Http\\Middleware\\RedirectIfAuthenticated',\n'localize' => 'Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRoutes',\n'localizationRedirect' => 'Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRedirectFilter',\n\n];\n```\n. ",
    "TeviSiat": "+1\nsame problem in Laravel 5\n. @MarcGuay sorry, I don't understand how\n. ",
    "MarcGuay": "Looks like 'prefix' => LaravelLocalization::setLocale() is firing before the session starts...\n. @mcamara Honestly I'm very new to Laravel and don't know enough to say.  Would it be possible to add the prefix inside the existing middleware?\nAh, I understand now that the prefix is being added to the route names, not doing the re-routing itself, which is inside the LaravelLocalizationRedirectFilter middleware...\n. @mcamara Something like this seems to partially work, although it creates a huge pile of duplicate routes...\nforeach (LaravelLocalization::getSupportedLocales() as $localecode=>$data){\n    Route::group(\n        [\n            'prefix' => $localecode,\n            'middleware' => [ 'localizationRedirect' ]\n. Not a solution to the technical problem itself, but a functional fix for those looking for it is to use getLocalizedURL() inside your templates like so\n<a href=\"{{ LaravelLocalization::getLocalizedURL(null, '/') }}\">\nWhere '/' is your route path.  That way the session is not used and the lang is always pulled from the URL.\nIf you want this to be compatible with localized routes (LaravelLocalization::transRoute), enter the default language's slug as the second parameter and it will be translated appropriately.\n. Just realized that this really isn't a feasible solution as anytime there's a redirect() in the code we want it to figure out the lang for us automatically...\n. @mcamara Might be some useful ideas in this thread: https://laracasts.com/discuss/channels/tips/example-on-how-to-use-multiple-locales-in-your-laravel-5-website in regards to how the routes are set up...\n. @mcamara Looks good to me. Thank you.\n. Can reproduce.  All routes are being redirected to /lang/ URLs by LocaleSessionRedirect.php line 34, regardless of whether or not they're in the group.  What works is moving the middleware to the $routeMiddleware array and then adding it to the group's middleware.  I'll post a fix for the docs.\n. @oguzcicek Have you looked at the updated docs?  You need to add it to the $routeMiddleware array and then include it in the route group's middleware.\n. @AlexVonB For the first issue, try switching the order of the middleware in your route declaration like so  'middleware' => [ 'localeSessionRedirect', 'localizationRedirect'].  I cannot reproduce the second issue.\n. See https://github.com/mcamara/laravel-localization/issues/191\n. I believe that this is the issue I've addressed here: https://github.com/mcamara/laravel-localization/pull/227\n. @tyler36 See https://github.com/mcamara/laravel-localization/issues/191\n. Show your setup, I believe this is the default setting if you followed the instructions to add the locale to the URL.\n. ",
    "oguzcicek": "is there any fix for this issue ? it doesnt work if i dont add it to $middleware \n. ",
    "AlexVonB": "Hi,\nI use 1.0.7 on Laravel 5.0.27, with this in my $routeMiddleware\nphp\n'localize' => 'Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRoutes',\n'localizationRedirect' => 'Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRedirectFilter',\n'localeSessionRedirect' => 'Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect'\nthis as my route:\nphp\nRoute::group(\n[\n    'prefix' => LaravelLocalization::setLocale(),\n    'middleware' => [ 'localizationRedirect', 'localeSessionRedirect' ]\n], function()\n{\n    Route::get('/', 'FrontendController@index');\n    Route::get('/about', 'FrontendController@about');\n    ...\n}\nand this config:\nphp\nconfig([\n    'laravellocalization.supportedLocales' => [\n        'de' => ['name' => 'German', 'script' => 'Latn', 'native' => 'Deutsch'],\n        'en' => ['name' => 'English', 'script' => 'Latn', 'native' => 'English'],\n    ],\n]);\nHowever, when I go to domain.com/en and then to domain.com, it redirects me to my default locale, domain.com/de. It seems that the locale is neither stored in a cookie nor a session.\nI also testet changing my preferred locale in Firefox, but it gets ignored.\nI also tried visiting domain.com/about, which redirects (301) me to /, which redirects me to /about which redirects me to / and so on. Firefox will finally stop following the redirects and show an error message.\nAny updates or ideas?\n. That solved all problems, merge request regarding Readme here: #210 \n. Do you use <a rel=\"alternate\" hreflang=\"en\" href=\"{{LaravelLocalization::getLocalizedURL('en') }}\">EN</a> as link to the other language? Maybe try adding the second middleware, 'localizationRedirect', after 'localeSessionRedirect':\n``` php\nRoute::group(\n[\n    'prefix' => LaravelLocalization::setLocale(),\n    'middleware' => [ 'localeSessionRedirect', 'localizationRedirect' ]\n], function()\n{\nRoute::get(...\n\n``\n. Yep, when i deliberately misspellLaravelLocalizationit saysClass LaravelLocalizatio not found`.\n. Well, nevermind, did not use the Facade, but the normal class. My bad, thank you!\n. ",
    "illuminate3": "Issue https://github.com/mcamara/laravel-localization/issues/192  shows the steps that I took to debug the issue I was having.\nHere is the code that I'm using for the middleware.\nCrude and Ugly but it works.\n```\n<?php\nnamespace Mcamara\\LaravelLocalization\\Middleware;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Contracts\\Routing\\Middleware;\nuse Closure;\nuse Config;\nuse Session;\nclass LocaleSessionRedirect implements Middleware {\n/\n * Handle an incoming request.\n \n * @param  \\Illuminate\\Http\\Request $request\n * @param  \\Closure $next\n * @return mixed\n /\npublic function handle(\n    $request,\n    Closure $next\n    )\n{\n// explode and grab URL data\n        $params = explode('/', $request->path());\n// Check for hideDefaultLocaleInURL and if we have not Locale in the url\n        if ( (app('laravellocalization')->hideDefaultLocaleInURL() == true) && (count($params) > 0) ) {\n// Use Larvel to set locale for session\n            Session::put('locale', Config::get('app.locale'));\n            return $next($request);\n        }\n// grab locale from URL\n        if ( app('laravellocalization')->checkLocaleInSupportedLocales($params[0]) == true ) {\n// put URL locale into session\n            Session::put('locale', $params[0]);\n            return $next($request);\n        }\n}\n}\n```\nI hope that this works for some of you!\n. Hi!\nNote: neysi's code above is not the same as the readme. Possibly changes have been made to the readme.\nI'm getting similar issues with latest update.\nI'm using middleware and have only activated \"en\" and \"es\".\nI'm also only looking at what the language selector is doing. I haven't even changed the CSS for what is posted in the readme. I followed the readme and not the code above.\n'hideDefaultLocaleInURL' => true,\nI can't get out of Espanol ..\n\"barryvdh/laravel-debugbar\": \"~2.0\",\nreports local as \"es\"\n'hideDefaultLocaleInURL' => false,\nlink shows \"/en\" and debug bar shows locale as \"en\"\nYes, I have also turned off debugging to see if Barry's debug bar is an issue.\n. I tried forcing the en/es to the url\n<ul class=\"language_bar_chooser\">\n    @foreach(LaravelLocalization::getSupportedLocales() as $localeCode => $properties)\n        <li>\n            <a rel=\"alternate\" hreflang=\"{{ $localeCode }}\" href=\"/{{{ $localeCode }}}/\">\n                {{{ $properties['native'] }}} 123\n            </a>\n        </li>\n    @endforeach\n</ul>\nStill stuck in spanish.\nI will keep digging.\n. Somewhere there is a conflict!\nconfig/app.php\n'locale' => 'ca',\nBlocks me from returning to Catalan. When set to any language, session locale is not being set.\n. Lavel 5.0.28\nFresh install of laravel and laravel-localization\nI set the language to \"es\" using the selector code in the readme. Try to return to English and Even tried to hard code as below.\nLaravelLocalization::setLocale('en');\ndd(Session::all());\nlocale still in \"es\" ... :frowning: \n. Here is the code that I'm using for the middleware.\nCrude and Ugly but it works.\n```\n<?php\nnamespace Mcamara\\LaravelLocalization\\Middleware;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Contracts\\Routing\\Middleware;\nuse Closure;\nuse Config;\nuse Session;\nclass LocaleSessionRedirect implements Middleware {\n/\n * Handle an incoming request.\n \n * @param  \\Illuminate\\Http\\Request $request\n * @param  \\Closure $next\n * @return mixed\n /\npublic function handle(\n    $request,\n    Closure $next\n    )\n{\n// explode and grab URL data\n        $params = explode('/', $request->path());\n// Check for hideDefaultLocaleInURL and if we have not Locale in the url\n        if ( (app('laravellocalization')->hideDefaultLocaleInURL() == true) && (count($params) > 0) ) {\n// Use Larvel to set locale for session\n            Session::put('locale', Config::get('app.locale'));\n            return $next($request);\n        }\n// grab locale from URL\n        if ( app('laravellocalization')->checkLocaleInSupportedLocales($params[0]) == true ) {\n// put URL locale into session\n            Session::put('locale', $params[0]);\n            return $next($request);\n        }\n}\n}\n```\nI hope that this works for some of you!\n. Check out these:\nhttps://github.com/mcamara/laravel-localization/issues/192\nhttps://github.com/mcamara/laravel-localization/issues/182\n. ",
    "MarcGaumont": "this still seems broken\n. @Pawlox  Can you post an example of your auth routes ? I tried moving my post paths out of the localized routes and still I get no saved session ! \n. Im having the same problem... \nIts like as if the localeSessionRedirect does not work.\nIf im in my french language login screen and login, Im redirected to the english home page...\n. Im wondering if @arcanedev-maroc package that is based on this works.\n. @arcanedev-maroc Any issues with storing the session ? My redirections to the homepage when logging in from french are always back to the EN.  https://laracasts.com/discuss/channels/laravel/localesessionredirect-mcamara\n. @arcanedev-maroc Merci beaucoup je vais v\u00e9rifier le tout ce soir en esp\u00e9rant \u00e7a fonctionne ;)\n. @SolveSoul\nI seem to have gotten this working, but using @arcanedev-maroc  package... His last comments in my Laracasts thread seem to have helped but I only had 20 min last night to check it out havent officially replied yet.\nIn my case I needed for sure to exclude the home '/' route from the translated routes. Also needed to extract register / login POSTs from the translated routes. Maybe theres a way around this but for now its the only way I manage to get this working.\nSo lets say I hover over the \"Login\" button, in the bottom left of my browser I see website.app/login ... but If I click it I am successfully redirected to website.app/fr/connexion ... and when I login I get redirect back to the home page in french. So I guess thats a big WIN :)\nBut Ill be following up posting my working routes file for his package. Now I dont know how this translates back to the mcamara package but I will try to get that one working as well. \nThe only problem I see with this is SEO wise... If the crawler in French crawls the site and is seeing duplicate links Im not sure how thats all going to workout... Ill be posting about it tonight on laracasts\nhttps://laracasts.com/discuss/channels/laravel/localesessionredirect-mcamara\n. ",
    "samiles": "Has this been fixed? Everything works as expected for site.com/en and site.com/de, but when a user clicks a link on site.com/de to site.com/home, it redirects to site.com/en/home not site.com/de/home. Is this fixed, am I doing something wrong? How can I stop links breaking the user's selected option...?\n. This commit fixed this for me. It wasn't reflected in my Composer installed version, but I manually changed the file as specified in the commit and everything worked.\n. ",
    "yaofong": "@samiles your way works for me too!\nwonder why this commit is reflected in composer\n. ",
    "shane3xsds": "Got the same problem. All middlewares in kernel, both middlewares in route group and in correct order ('localeSessionRedirect', 'localizationRedirect'). Seem to continually default to the app.local rather than the last select language. Checked the commit above and it is apparent in the code. No idea.\n. Not working for me. Spent a couple of hours on it. Reading all these comments and trying what I can. If I remove the redirection middlewares and just use the 'localize' middleware the selected language is not saved. Each page displays the default after setting with \\LaravelLocalization::setLocale($code). I also save a cookie at this point and the cookie is accurate but LaravelLocalization is always default. When the redirection middlewares are added to the route group the site works find if the language code is in the URL. If the code is removed from the URL it is always redirected to a URL with the default code rather than the last select code. Seems it is not being stored.\n. I also had a search URL which is causing issues. Is use LaravelLocalization::transRoute('routes.search') to translate the route. However it does not add any language code to the URL. The search is run using get URL parameters. So the search is run and the localizsation picks it up as missing a language code then redirects it to the default. The extra problem here is that the parameters are missing. So the language is not the last selected and the search parameters disappear. The only way I can see to fix this is to manually add in the language code the URL. However I would expect the transRoute to add in the code if one existed.\n. ",
    "k-zakhariy": "Anyone has problem in 2018 that @shane3xsds described above ? :). +1 is there way to get page translated with last applied language, and not use fallback language ?\nfor example why i need to prefix such routes: /login .   /checkout .  /account \nactually translation is needed, but without prefixes. i am searching solution for specific routes to be translated without prefixes , for example: \n/login, /checkout , /account - all these routes could be without prefix but still translated with current locale, instead of reseting it to fallback locale, any idea have to implement this ?. ",
    "core45": "when I add 'middleware' => [ 'localizationRedirect' ]\nI have an error\nClass localizationRedirect does not exist. ",
    "MartijnThomas": "Isn't this a duplicate of #182\n. ",
    "jrean": "I found...\nUse {!! !!} instead of {{ ... }}\n. ",
    "Riesjart2": "+1\n. +1\n. Any plans to fix this (major) bug? Thanks!\n. @fisharebest \nCorrect. This makes it possible to change to the default locale even if hideDefaultLocaleInURL === true. \nI'm not exactly sure about what this means for SEO by the way. Any thoughts on this are welcome.\n. ",
    "jp7carlos": "This is closed. Does it mean it's fixed? I still have the same problem. Error when calling route('foo.bar') \n. ",
    "vahidahmad": "same problem in laravel 5.3 when changing route from \"/\"  to \"/fr\"  french language. ",
    "neysi": "My app config file:\n\n'locale' => 'en',\n'fallback_locale' => 'en',\n\nMy routes.php file:\n\nRoute::group(\n    [\n        'prefix' => LaravelLocalization::setLocale(),\n        'middleware' => [ 'localizationRedirect' ]\n    ],\n    function()\n    {\n        Route::get('/', function()\n        {\n            return View::make('home');\n        });\n        Route::get('test',function(){\n            return \"Test\";\n        });\n });\n Route::group(\n            [\n                'prefix' => LaravelLocalization::setLocale(),\n                'middleware' => [ 'localize' ] \n            ],\n            function()\n            {\n              Route::get(LaravelLocalization::transRoute('routes.about'),function(){\n                    //return View::make('about');\n                    return View::make('languageselector');\n              });\n              Route::get(LaravelLocalization::transRoute('routes.view'),function($id){\n                    // return View::make('view');\n                     return View::make('languageselector');\n              });\n });\n\nConfigServiceProvider.php\n\nUsing: php artisan --version  ( Laravel Framework version 5.0.17) \nThanks.\n. Thank you for your help.\nI have applied this:\nand\nNow it does not show all languages.\n\nConfig.php\n\nMy routes.php file: \n\nRoute::group(\n    [\n        'prefix' => LaravelLocalization::setLocale(),\n        'middleware' => [ 'localizationRedirect',  'localize' ] \n    ],\n\n    function()\n    {\n        Route::get('/', function()\n        {\n            return View::make('home');\n        });\n        Route::get('test',function(){\n                return \"Testing\";\n        });\n        Route::get(LaravelLocalization::transRoute('routes.about'),function(){\n                return \"About\";\n        });\n\n        Route::get(LaravelLocalization::transRoute('routes.view'),function($id){\n                  return \"Show: \".$id;\n       });\n });\n\nAnd lang/en/routes,php\n\nreturn [\n      \"about\"       =>  \"about\",\n      \"view\"        =>  \"view/{id}\", \n];\n. ",
    "Stonos": "The problem seems to be in line 278 of LaravelLocalization.php.\nIf you change it from:\nphp\nif ( !empty( $locale ) && ( $locale != $this->defaultLocale || !$this->hideDefaultLocaleInURL() ) )\n{\n    $parsed_url[ 'path' ] = $locale . '/' . ltrim($parsed_url[ 'path' ], '/');\n}\nto:\nphp\nif ( !empty( $locale ) )\n{\n    $parsed_url[ 'path' ] = $locale . '/' . ltrim($parsed_url[ 'path' ], '/');\n}\nit works fine.\n. ",
    "rbngzlv": "Hi,\nI'm newbie in Laravel development, but I want to share a little change that worked fine for me.\nI have added an else condition to the first if in the LocaleSessionRedirect middleware.\n/src/Mcamara/LaravelLocalization/Middleware/LocaleSessionRedirect.php\nFrom:\n``` php\n// ln 20\nif ( count($params) > 0 && $locale = app('laravellocalization')->checkLocaleInSupportedLocales($params[ 0 ]) )\n{\n    session([ 'locale' => $params[ 0 ] ]);\nreturn $next($request);\n\n}\n```\nto:\n``` php\n// ln 20\nif ( count($params) > 0 && $locale = app('laravellocalization')->checkLocaleInSupportedLocales($params[ 0 ]) )\n{\n    session([ 'locale' => $params[ 0 ] ]);\nreturn $next($request);\n\n}\nelse if(app('laravellocalization')->hideDefaultLocaleInURL()) { // Added\n    session([ 'locale' => app('laravellocalization')->getDefaultLocale() ]); // Added\n} // Added\n```\nSomeone have any thoughts if this change can break other functionalities?\n. ",
    "kaidoj": "@rbngzlv this works for me too! +1\nLittle problem is that now url's that do not have locale in url will be set back to default too. \nSo u need to go over url's that u want to have locale and add them locale code. \nusing LaravelLocalization::getLocalizedUrl etc.\n. This method is slow. I can confirm.. Anyone has a fix for this or a replace method?. ",
    "hotgeart": "This bug is still present. Why this issue is closed?. ",
    "dnisk": "Hi, don't know if someone still has this problem, I'm working on a project at the moment and this is my fix, maybe will help someone, I commented the changes I made, the edited file is: LaravelLocalization\\Middleware\\LocaleSessionRedirect.php\nThe changes are in the last if Block\nEDIT: Don't know whats wrong with the code format, sorry\n` \n    if ($locale && app('laravellocalization')->checkLocaleInSupportedLocales($locale) && !(app('laravellocalization')->getDefaultLocale() === $locale && app('laravellocalization')->hideDefaultLocaleInURL())) {\n        app('session')->reflash();\n        $new_locale = app('laravellocalization')->getDefaultLocale(); //New Local (Default)\n        session(['locale' => app('laravellocalization')->getDefaultLocale()]); //Setting the session locale to Default\n        $redirection = app('laravellocalization')->getLocalizedURL($new_locale); //Getting the Localized URL for the default locale\n        //$redirection = app('laravellocalization')->getLocalizedURL($locale); //Old URL\n        return new RedirectResponse($redirection, 302, ['Vary' => 'Accept-Language']);\n    }`.\n",
    "Bouhnosaure": "Hello !\nYes i thing about the same thing :+1: , \nIs it possible to change the composer.json to accept the version 5.1 of laravel ?\nin another branch or in the current branch,\nthat would be cool ! \nI think the current version of laravel-localization work on Laravel 5.1\nThank you for your great work with translations !\n. Hello !\ni'ts for Laravel 5.1\nin the composer.json of laravel develop its 5.1 \njson\n\"name\": \"laravel/laravel\",\n....\n\"require\": {\n    \"laravel/framework\": \"5.1.*\"\n}\nyour proposition would be: \njson\n\"require\": {\n  \"laravel/framework\": \"5.x-dev\",\n  \"mcamara/laravel-localzation\": \"1.*\"\n}\n. For master branch, you will use a dev-master version. For develop branch, you will use dev-develop version\n5.1 is on develop not master :/\n. See here ! \nhttps://github.com/laravel/laravel\n. Laravel/framework is the core\nLaravel/Laravel is the framework for build app \n. ",
    "monkeyC": "Hi,\nI will also be glad if composer.json could be change to accept this version of laravel.\nThank you very much and keep up the good work !\n. ",
    "rbruhn": "Looking for this to work with 5.1 as well.\n. Actually, the solution I found is not difficult at all. It also allows continuing use of existing routes in the routes.php file if you like. I can keep my normal routes until I upgrade everything.\nExample of my /HTTP/routes.php\n``` php\n$router->pattern('id', '[0-9]+');\n$router->group([ 'prefix' => Local::setLocale(), 'before' => 'LocalRedirectFilter'], function ($router) {\n    if (File::exists(storage_path('framework/routes.scanned.php')))\n        require_once storage_path('framework/routes.scanned.php');\n\n    $router->get('phpinfo', ['as' => 'phpinfo', 'uses' => 'ServerInfoController@showPhpInfo']);\n    /** ... continuation of other routes **/\n}\n\n);\n```\n. ",
    "KIVagant": "I vote for this too.\n. ",
    "simplenotezy": "I definitely vote for this too. @mcamara what do you think?\n. Thanks @lucasff \n. That is awesome @mgarciadelojo.\nCan you somehow disable the prefix, if it is the default language? I.e.\nhttp://domain.com/about-us (for english)\nhttp://domain.com/da/om-os (for danish)\nAlso; I'm a bit curious to this implementation, what about session? I'm pretty sure Gettext set/getLocale methods require session.\n. Nice. I have already followed the instructions in Laravel gettext. It works more or less, except I have some issues with some strange caching (a current open issue).\nDo you think that setting locale both in the RouteServiceProvider and then as middleware will have any technical overhead/performance issues? Since technically language is set twice.\n. I am trying to implement your solution, but first thing I stumble into is on routes using Route::ressource, the name of the route is: en_US.admin.crm.pages.store instead of admin.crm.pages.store. That will cause the app to say that the route is not defined, because I call them like this route('admin.crm.pages.store').\nIs there a way to prevent the prefix from being prepended when using Route::ressource?\n. Hi @mgarciadelojo great - where do you want me to include this provider? I guess I need to put it in App/Providers. Then I tried to include it into the providers array at config/app.php but that causes the app to crash with a white screen.\n. I checked the laravel.log and this is what I found: \n```\n[2016-03-09 19:04:05] local.ERROR: Symfony\\Component\\Debug\\Exception\\FatalThrowableError: Type error: Argument 1 passed to MyApp\\Providers\\ResourceNoPrefixRegistrar::__construct() must be an instance of Illuminate\\Routing\\Router, instance of Illuminate\\Foundation\\Application given, called in /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Foundation/ProviderRepository.php on line 146 in /home/vagrant/Projects/myApp/app/Providers/ResourceNoPrefixRegistrar.php:9\nStack trace:\n0 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Foundation/ProviderRepository.php(146): MyApp\\Providers\\ResourceNoPrefixRegistrar->__construct(Object(Illuminate\\Foundation\\Application))\n1 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Foundation/ProviderRepository.php(114): Illuminate\\Foundation\\ProviderRepository->createProvider('MyApp\\Provide...')\n2 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Foundation/ProviderRepository.php(60): Illuminate\\Foundation\\ProviderRepository->compileManifest(Array)\n3 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(507): Illuminate\\Foundation\\ProviderRepository->load(Array)\n4 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Foundation/Bootstrap/RegisterProviders.php(17): Illuminate\\Foundation\\Application->registerConfiguredProviders()\n5 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(203): Illuminate\\Foundation\\Bootstrap\\RegisterProviders->bootstrap(Object(Illuminate\\Foundation\\Application))\n6 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php(232): Illuminate\\Foundation\\Application->bootstrapWith(Array)\n7 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php(127): Illuminate\\Foundation\\Http\\Kernel->bootstrap()\n8 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php(99): Illuminate\\Foundation\\Http\\Kernel->sendRequestThroughRouter(Object(Illuminate\\Http\\Request))\n9 /home/vagrant/Projects/myApp/public/index.php(52): Illuminate\\Foundation\\Http\\Kernel->handle(Object(Illuminate\\Http\\Request))\n10 {main}\n[2016-03-09 19:04:05] local.ERROR: ReflectionException: Class view does not exist in /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Container/Container.php:738\nStack trace:\n0 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Container/Container.php(738): ReflectionClass->__construct('view')\n1 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Container/Container.php(633): Illuminate\\Container\\Container->build('view', Array)\n2 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(674): Illuminate\\Container\\Container->make('view', Array)\n3 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Container/Container.php(1178): Illuminate\\Foundation\\Application->make('view')\n4 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Routing/RoutingServiceProvider.php(144): Illuminate\\Container\\Container->offsetGet('Illuminate\\Cont...')\n5 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Container/Container.php(735): Illuminate\\Routing\\RoutingServiceProvider->Illuminate\\Routing{closure}(Object(Illuminate\\Foundation\\Application), Array)\n6 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Container/Container.php(633): Illuminate\\Container\\Container->build(Object(Closure), Array)\n7 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(674): Illuminate\\Container\\Container->make('Illuminate\\Cont...', Array)\n8 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Foundation/helpers.php(105): Illuminate\\Foundation\\Application->make('Illuminate\\Cont...', Array)\n9 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Foundation/helpers.php(594): app('Illuminate\\Cont...')\n10 /home/vagrant/Projects/myApp/app/Exceptions/Handler.php(100): response()\n11 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Foundation/Exceptions/Handler.php(112): MyApp\\Exceptions\\Handler->convertExceptionToResponse(Object(Symfony\\Component\\Debug\\Exception\\FatalThrowableError))\n12 /home/vagrant/Projects/myApp/app/Exceptions/Handler.php(67): Illuminate\\Foundation\\Exceptions\\Handler->render(Object(Illuminate\\Http\\Request), Object(Symfony\\Component\\Debug\\Exception\\FatalThrowableError))\n13 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php(291): MyApp\\Exceptions\\Handler->render(Object(Illuminate\\Http\\Request), Object(Symfony\\Component\\Debug\\Exception\\FatalThrowableError))\n14 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php(107): Illuminate\\Foundation\\Http\\Kernel->renderException(Object(Illuminate\\Http\\Request), Object(Symfony\\Component\\Debug\\Exception\\FatalThrowableError))\n15 /home/vagrant/Projects/myApp/public/index.php(52): Illuminate\\Foundation\\Http\\Kernel->handle(Object(Illuminate\\Http\\Request))\n16 {main}\n[2016-03-09 19:04:05] local.ERROR: Symfony\\Component\\Debug\\Exception\\FatalErrorException: Uncaught ReflectionException: Class view does not exist in /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Container/Container.php:738\nStack trace:\n0 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Container/Container.php(738): ReflectionClass->__construct('view')\n1 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Container/Container.php(633): Illuminate\\Container\\Container->build('view', Array)\n2 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(674): Illuminate\\Container\\Container->make('view', Array)\n3 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Container/Container.php(1178): Illuminate\\Foundation\\Application->make('view')\n4 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Routing/RoutingServiceProvider.php(144): Illuminate\\Container\\Container->offsetGet('Illuminate\\Cont...')\n5 /home/vagrant/Projects/myApp/vendor/laravel/framework/src/ in /home/vagrant/Projects/myApp/vendor/laravel/framework/src/Illuminate/Container/Container.php:738\nStack trace:\n0 {main}\n``\n. I found the issue. I needed to add it inside the AppServiceProvider.php underregister()` like this:\n$this->app->bind(\n        'Illuminate\\Routing\\ResourceRegistrar',\n        'App\\Providers\\ResourceNoPrefixRegistrar'\n    );\nThis link helped me: http://laravel.io/forum/06-21-2014-resource-route-names-without-prefix\nHowever, that removes prefixes from ALL my other routes. I.e. I have a route group that looks like this:\nRoute::group(['prefix => 'api'], function() {....\n. I solved it. I just had to read the full answer at http://laravel.io/forum/06-21-2014-resource-route-names-without-prefix\nSo solution would be to do:\nRoute::group(['prefix => 'api', 'as' => 'api.'], function() {....\nAnd that will solve it.\nThank you so much @mgarciadelojo for your help!\n. I have created this middleware, with a lot of inspiration from: LaravelLocalizationRedirectFilter and LocaleSessionRedirect. I don't understand why it is disabled when hideDefaultLocaleInUrl is true -- but maybe I'll find out?\nUpon initial testing it seems to be working just fine. Will report if I notice it breaks anything:\n```\n<?php\nnamespace App\\Http\\Middleware;\nuse Closure;\nuse Mcamara\\LaravelLocalization\\LanguageNegotiator;\nuse LaravelLocalization;\nuse Illuminate\\Http\\RedirectResponse;\nclass Locale\n{\n/**\n * Handle an incoming request.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @param  \\Closure  $next\n * @return mixed\n */\npublic function handle($request, Closure $next)\n{\n\n    /**\n     * Auto redirect\n     */\n\n        if(!session('dont_do_locale_redirect', false)) {\n            $negotiator = new LanguageNegotiator(LaravelLocalization::getDefaultLocale(), LaravelLocalization::getSupportedLocales(), $request);\n            $locale = $negotiator->negotiateLanguage();\n\n            session(['dont_do_locale_redirect' => true]);\n            app('session')->reflash();\n\n            $redirection = app('laravellocalization')->getLocalizedURL($locale);\n\n            return new RedirectResponse($redirection, 302, [ 'Vary' => 'Accept-Language' ]);\n        }\n\n\n    /**\n     * The package need to be initialized, the locale will\n     * be available after first method call. If you have\n     * async calls in your project, this filter starts the \n     * locale environment before each request.\n     */\n\n    $locale = \\LaravelGettext::getLocale();\n\n\n    return $next($request);\n}\n\n}\n```\n. No unfortunately not. \n. ",
    "dsampaolo": "I have the same error today on a fresh Laravel 5.2 install. My default locale is set to 'en' and this language is enabled in config/laravellocalization.php\nFor some reason, $this->configRepository->get('app.locale') (in LaravelLocalization.php, line 114) returns null.\n. ",
    "xitude": "I too have this issue, been pulling my hair out trying to get past it.\n. I opened a new issue #341 could you help detail it out with stack traces and any more information you have?\n. I agree with @fisharebest, @lotestudio do you need to wrap your if statement.\n. @floodedcodeboy If you could that would be brilliant. I know quite a few people are having this issue and I couldn't find it (and didn't have the time to hunt it).\nCheers.\n. Im wondering if it's possible to join multiple languages into a main one. So i can generalize the EU countries as /eu/ . Soooo I guess thats a no?. ",
    "floodedcodeboy": "So I have this issue too. \nI'm using a vagrant box (via phansible.com, it's quick and easy, ubuntu 14.04) \nany chance that the server needs locales installed?!? \ni actually installed ALL possible locales and  briefly got rid of the error message.  but then I ran the migrations for this 'plugin' and it's back .. ffs.. \nwent back up the chain and deleted the vendor folder and did the composer install again and got the same error towards the end of it.\nplease for the love of >insert deity here<. help.\n. So I've managed to figure this out. \nIt appears that this package does not take into account the 'app.fallback_locale' value, and relies solely on the app.locale value. \nI'll try make an update and submit a PR with checks added in. \n. ",
    "gitsakil09": "I think I have found a solution.I am not 100% sure but it works perfectly for me. :) :) you can check it. As I said I am not a pro so just give a try.Could help you.\njust replace line number 114 in laravellocalization.php as follow\n$this->defaultLocale = $this->configRepository->get('app.locale');\nline is replaced by \n$this->defaultLocale = $this->configRepository->get('app.fallback_locale');\nTnks. ",
    "diegodss": "I had the same error, but for me it was a silly mistake: I added the some code on route.php\n`    // app/Http/routes.php\nRoute::group(['prefix' => LaravelLocalization::setLocale()], function()`\n\nBefore run the publish command:\nphp artisan vendor:publish --provider=\"Mcamara\\LaravelLocalization\\LaravelLocalizationServiceProvider\"\nI obviously needed to first publish the plugin, config the supportedLocales, and then add any code that I want.\n. ",
    "spygibas": "Test to comment  throw error line and run site test swap language 1 time and uncomment\n//throw new UnsupportedLocaleException('Laravel default locale is not in the supportedLocales array.');\nafter change language\nand uncomment again. ",
    "engvie": "For me it was because the value in config/app.php | 'locale' was set to a language that was no activated.. ",
    "azamat96": "I'm enable unsupported locales from this file /vendor/mcamara/laravel-localization/src/config/config.php . ",
    "rrudowski": "@azamat96  great solution Thanks!. ",
    "juukie": "I'm having the same issues as mentioned above :(.\n. ",
    "tomzmtl": "I'm having the same issue right now.\nRoute declaration\nRoute::get( Localize::transRoute('routes.products.sections') . '/{slug}', 'ProductsController@sections' );\nUsing this code to switch locales (only 2 locales)\nLocalize::getLocalizedURL( $altLocale )\nWill only translate the /{currentLocale}/ bit of the URL and leave everything else untranslated.\n. ",
    "javidalpe": "Same here :(\n. ",
    "nickbr5": "Hi All,\nI'm still experiencing the same problem as above. Is this one solved or not?\nthx\n. @afontcu Yes, i also tried {{LaravelLocalization::getLocalizedURL(null,'partners',array('confirmed'=>1)}}.\nThis gives the same result => dev.localhost/fr/partners, no translation took place.\n. ",
    "kazak71": "I have the same problem, but I found a workaround.\nSee my post in https://github.com/mcamara/laravel-localization/issues/448\nGood Luck. Yes, I have same problem.\nI found a workaround.\nSee my post https://github.com/mcamara/laravel-localization/issues/448\nGood Luck!. Yes, I have the same problem.\nWhen I made some deeper debug into the code I found that function getLocalizedURL returns wrong results when routes (in lang routes.php) are declared with parameters. When routes are clean (without parameters) everything is fine and working as desired.\nI found problem is really in function extractAttributes - it returns wrong results when routes are declared with parameters.\nWORKAROUND :):\n1. declare ALL routes as NAMED ROUTES in file app/routes/web.php (for laravel 5.3 or 5.4)\n2. instead getLocalizedURL you may use getURLFromRouteNameTranslated if it is possible\n3. change function handle(...) in file LaravelLocalizationRoutes.php like this:\npublic function handle($request, Closure $next)\n    {\n        // If the URL of the request is in exceptions.\n        if ($this->shouldIgnore($request)) {\n            return $next($request);\n        }\n        $app = app();\n        if (app()->router->currentRouteName() !== '') {\n            $routeName = 'routes.'.app()->router->currentRouteName();\n        } else {\n            $routeName = $app['laravellocalization']->getRouteNameFromAPath($request->getUri());\n        }\n        $app['laravellocalization']->setRouteName($routeName);\n        return $next($request);\n    }\nWith these changes getLocalizedURL should be working.\nI think this will help you!\nGood Luck!. take a look at this:\nhttps://stackoverflow.com/questions/42527880/laravel-5-4-translate-routes\nI think it may be useful with some changes but idea is clear.\nYou may have to use named routes in route definitions.\nGood luck!. fede91it, this is great!\nThank you!. ",
    "christiaan-lombard": "Not sure if it will work with sessions and route translations, but try this:\nIn your routes.php, set the localized group prefix to '{locale?}', instead of Localization::setLocale(), and add set_locale middleware before other localization middlewares:\n``` php\nRoute::group(\n[\n    'middleware' => ['set_locale', 'localizationRedirect', 'localeSessionRedirect'],\n    'prefix' => '{locale?}'\n  ],\nfunction()\n  {\n      Route::get('/',         'HomeController@getIndex');\n  }\n);\n```\nThe set_locale middleware, added to your kernel, will grab the locale? parameter and set it as the current locale:\n``` php\nclass SetLocale implements Middleware {\npublic function handle($request, Closure $next)\n  {\n$locale = $request->route('locale');\nLocalization::setLocale($locale);\nreturn $next($request);\n\n}\n}\n```\n. Yeah, I can see how this solution could break a few things. A workaround is to send the current locale as a parameter to the url generator.\n``` php\nURL::route( 'profile', [ 'locale' => LaravelLocalization::getCurrentLocale() ] )\n```\nI made this helper function to get a localized URL:\n``` php\nfunction route_local($name, $parameters = array(), $absolute = true, $route = null)\n  {\n$parameters = array_merge($parameters, ['locale' => (string) LaravelLocalization::getCurrentLocale()]);\n\nreturn app('url')->route($name, $parameters, $absolute, $route);\n\n}\n```\n. ",
    "Casinelli": "Thanks! It works for setting up the routes correctly, but now using URL::route() gives the link without including the locale. For example using the 'it' language, and doing URL::route('profile'), I get /profile, instead of /it/profile. Trying to override the UrlGenerator now, though not sure it's the best way to go about it.\n. ",
    "arjankapteijn": "I'm having the same problem but change the route generates an error. \"Class set_locale does not exist\". \n. ",
    "Cyrille37": "For cross reference :\n- https://github.com/mcamara/laravel-localization#caching-routes\n- https://github.com/czim/laravel-localization-route-cache. ",
    "antsliivat": "Hello!\nI am experiencing the same issue. Checked the documentation but no help. I am using Laravel Spark (bought license). Still having trouble with getting validation lines translated - everything else works fine.\nCould you please help?\n. Hello!\nThank you for your answer!\nActually, adding PUT routes under Localized Routes Group in routes.php did the trick. Also, I activated the hiding of abbreviation of default language in the URL. I hope that this answer helps somebody else as well with this kind of issue.\n. ",
    "timbertens": "I'm can't recall exactly, but I believe adding \nuse lang;\nto your requests does the trick.  With 'lang' being an alias to Illuminate\\Support\\Facades\\Lang\n. ",
    "elv1ss": "Hello, may as well use this code\nif ( count($params) > 0 && app('laravellocalization')->checkLocaleInSupportedLocales($params[ 0 ]) )\n{\n      return $next($request)->withCookie(cookie()->forever('locale', $params[ 0 ]));\n}\nif you need cookie live long time.\n. ",
    "philmarc": "Does it support Lumen in the end?. You can use Route::domain\nhttps://laravel.com/docs/5.8/routing#route-group-sub-domain-routing. ",
    "ozanmuyes": "Hi,\nCheck your \"Accept-Language\" header value (since useAcceptLanguageHeader was set to true in the config/laravellocalization.php file) and/or check your Laravel's fallback_locale in the config/app.php file to see if it's/they're the right one/ones.\nIf you re-read the Usage section carefully and fully understand it (which is very clear in my opinion) you can achieve your goal. Sticking with selected language or switching to new one can be tricky since they are depends on much variable; the way you define your routes, your Laravel configuration, your plugin configuration etc.\nHope this helps.\n. ",
    "grrnikos": "Thanks :+1: \n. ",
    "tyler36": "@jaumesala that doesn't seem to work for me.\nI have the following in my view\n<a href=\"{{ route('news.index) }}\">link</a>\nIf I visit the page, '/home', no problem; if I visit '/en/home' I get an error:\nRoute [news.show] not defined\nI'm not sure why, but the following works:\n<a href=\"{{ action('NewsController@index) }}\">link</a>\nDoes this mean I have to change all my 'route' commands to ugly 'action' commands to use this plugin?\n. ",
    "texnika01": "+1\n. ",
    "c2pdev": "+1\n. ",
    "sandrodz": "+1 this is annoying bug :)\n. ",
    "thoth3x": "+1\n. ",
    "mxmtsk": "+1\n. I think I fixed it by changing LocaleSessionRedirect.php to this:\nhttps://gist.github.com/mxmtsk/308badf0b9553aabe86e\nIt works for me, if you guys could try it also. I basically put line 26 before line 19 because $locale was undefined in the first if statement.\n. I guess it's just a bug, I hope @mcamara can say something about it! \n. ",
    "DanDvoracek": "It looks like an exception went through that fix, at least for me. When setting hideDefaultLocaleInUrl to true I had trouble switching language through the url.\nLet's say I was on the page /en/events and replaced that bit of the url by /evenements (fr), it would redirect me to /en/events. My default locale is indeed set in french as you can see\nTherefore I stumbled on this post that gave me the direction for where to look at.\nI found that adding this snippet on line 33 of the LocalSessionRedirect.php class does the trick for me:\nif (count($params) === 1 &&  !(app('laravellocalization')->checkLocaleInSupportedLocales($params[0])) ) {\n          session([ 'locale' => App::getLocale() ]);\n          return $next($request);\n        }\nSo far I could not find any issue with it. If that makes sense for it to be implemented by default, I'm more than happy to do a PR. By the way, if there would be anything wrong with this snippet, feel free to let me know. I just tried the package for the first time today.\n\u2764\ufe0f . ",
    "slave2anubis": "I made a fork, and made the changes.\n. ",
    "Rikcon": "There is a commit \nhttps://github.com/mcamara/laravel-localization/commit/1ea7695cc7cc36914b2b8ff0dbb05929f17f63b8\nBut composer still wants version 5.0.x \n. \"mcamara/laravel-localization\": \"dev-master\"\nWorked for me ! \nBut there is still a need for a release @mcamara \n. ",
    "DarkaOnLine": "You need to change dist to dev-master (hope temporally), because  where are no release with this commit :(\n\"mcamara/laravel-localization\": \"dev-master\"\n@mcamara  can you make new release with 5.1 support ?\n. strange, for me worked perfectly\n. Try to add these two lines at the end of coposer.json\n\"minimum-stability\" : \"dev\",\n\"prefer-stable\": true\n. ",
    "acacha": "Please update README.met to clarify Laravel 5.1 support\n. ",
    "bogdan8": "\nWhat shall I do?\n. @rtucek thank you\n. ",
    "rtucek": "@bogdan8 \ncomposer require mcamara/laravel-localization 1.0.*\nrather than\ncomposer require mcamara/laravel-localization 1.1.*\nv1.1 and above drops compatibility to older Laravel versions see Laravel compatibility.\n. @bogdan8 \nOnce again... don't use version 1.1.* IF you're not running Laravel 5.2\ncomposer remove mcamara/laravel-localization 1.1.*\ncomposer require mcamara/laravel-localization 1.0.*\ncomposer install\n. Having the same issue here.\nI guess you and I are trying to send a post request to an unlocalized URL and hopping for the proper redirection. Well, it took me an hour to remember that we can't \"just redirect\" post requests. Especially not with a HTTP 301/302. So the client ignores the redirect an Laravel throws a MethodNotAllowedHttpException.\nRedirecting a POST request requires a HTTP 307 (which isn't technically a \"follow the rabbit\" redirect. It tells the client to resend his request to different URI).\nBy glancing over the source code and the issues, this package had support for 307 HTTP responses at some point as mentioned in the Changelog v0.12.0, #62, #63 and #215, but now it's missing for some reason.\n@mcamara may you bring back HTTP 307 response support. Why has it been removed?\n. Ok, I did some research on W3.org.\nYou may mind this quote:\n\"If the 307 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user, since this might change the conditions under which the request was issued.\"\n. No it's definitely not a must have and the workaround is simple (at least it was for me in Laravel).\nHowever, I believe it's worth mentioning in the documentation at least. There are enough issues here, complaining about broken post requests.\n. @commandantp - sry for responding so late.\nFrom Drupal, I was able to pass PHP variables to JavaScript on pageload.\nSo ported this functionality into my Laravel app.\nSo in Javascript prefixed all my urls with settings.language (no matter what request type they perform) in order to match the route.\njavascript\nurl = settings.language + '/ajax/...';\nUnfortunately, I haven't noticed an already existing repo on Github by the time.\nhttps://github.com/laracasts/PHP-Vars-To-Js-Transformer\n. I guess this is related to my comment in #257 \n. Your trying to installing mcamara/laravel-localization on v1.1.*\nThis version is dedicated to laravel/framework v5.2.* (which you obviously don't have).\nCheck out this table and install the appropriate version for your Laravel framework. You'll get the version of your current Laravel app either by looking into your composer.json file or by typing php artisan --version.\nIn case of using Laravel v5.0.* or v5.1.* you'll have to run composer require mcamara/laravel-localization:1.0.*.\n. Don't worry - we all started from scratch sometime.\nIf you rely on opensource software, distributed via Github or packagist, in PHP you should definitely learn to understand composer. This is a mandatory tool.\nI'd recommend you to read the https://getcomposer.org/doc/. At least the first 4 chapters (Introduction, Basic usage, Libraries and CLI).\nSame goes for npm in the JavaScript world and git in context of Github.\nYou don't need to study the whole material, but at least you should know the basics and follow a common convention/workflow.\n. @mgarciadelojo what do you exactly mean by:\n\nHow can I change the route attributes in my controllers?\n\nIt sound's like you would like to alter the route on runtime (after the framework's bootstrapping process).\n. TL;DR\nA controller is the answer to a (resolved) route (from a HTTP request) and not meant for defining routes.\nAnd the full explanation...\nIt's technically possible to declare anywhere a route (just so by using the Route facade), however that's a very, very, very bad practice and it's not the way how Laravel should be used. There are only 2 places, where you should place your routes:\n1. If a route is part of your Laravel app, than keep it in the Laravel's routes.php (using the common Route facade).\n2. If (and only if) you're route is a part of a service container, than you can define the route within the boot method of the service provider. This is what Laravel package developer should do.\nYou may ask yourself, why a route should not be defined like the way as described for package devs IN a controller?\nThat's simple: on every page request, any framework (Wordpress, Laravel, Drupal, Symphony, CodeIgnitor and whatsoever) is loading it's own core source code files and preparing a proper environment and API for developers to interact with. Such a process is called bootstrapping. At the very end of the bootstrapping process, Laravel is loading the routes file and all service provider, defined in your config/app.php. There is actually a lot going on before anything from your source code will be executed, but it's just happening in a blink of an eye.\nSo when the framework is ready and your routes are loaded in place, Laravel's router will dispatch the request, according to your previously defined routes, to a specific controller (more precise to a specific controller method).\nSo if you've read my words closely you may understand why it's useless to define a route in your Controller. A controller is never ever part of a bootstrapping process (no matter how many you have, just one of them will be executed by the router).\nSee request lifecycle.\nI guess your controller is handling some logic and will decide if a user is permitted to access a route or not (right?). If that's the case, than you could use so many different approaches. One quick working solution is to attach a middleware to the route and hardcode your logic there if a client is permitted to proceed further OR should be redirected somewhere else... yeah, truly a quick solution but ugly and not sustainable.\nThe best way is to look at those pages in the documentation authentication and authorization.\nOr are you trying to achieve something else?\n. No it's not possible in its current implementation.\nThe problem resists in that part of code in our routes file:\n``` php\nRoute::group([\n    'prefix' => LaravelLocalization::setLocale(),\n    'middleware' => [\n        'localeSessionRedirect',\n        'localizationRedirect',\n    ],\n\n], function () {\n    ...\n}\n\n];\n```\nSo when a HTTP request arrives, Laravellocalization::setLocale() will return something dynamically to prefix (a language code like 'en' for example). And depending on the next HTTP request you may get a different language code. So the prefix gets dynamically resolved.\nIf you call php artisan route:cache Laravel will only try to resolve once every route in one language combination and caches that result.\nIn order to achieve this we would need to generate every route combination foreach language.\nSomething like that would work possibly.\n``` php\nforeach(LaravelLocalization::getLanguageList() as $language) {\nRoute::group([\n\n        'prefix' => $language,\n        'middleware' => [\n            'localeSessionRedirect',\n            'localizationRedirect',\n        ],\n\n    ], function () {\n        ...\n    }\n];\n\n}\n```\nAnd obviously such an implementation would require a major version update.\n. ",
    "renege": "@mcamara or is it not possible?\n. ",
    "meduzen": "I think a full support of the language_TERROTORY format would be great to match with the Open Graph Protocol. The config file is properly built to host one more column with that.\n. Hi, here\u2019s my (temporary for the project I'm working on) solution.\nPlease carefully read the commented documentation, and note that my fellow back-end developer colleague still has to review it.. ",
    "fzhan": "@jeroenbourgois I've tried your fix, however it will raise another issuer with \nMcamara\\LaravelLocalization\\Exceptions\\UnsupportedLocaleException\non line 218 where $locale is actually null/empty on:\n#line 216  vendor/mcamara/laravel-localization/src/Mcamara/LaravelLocalization/LanguageNegotiator.php\n        if ( !$this->checkLocaleInSupportedLocales($locale) )\nError message:\nERROR: exception 'Mcamara\\LaravelLocalization\\Exceptions\\UnsupportedLocaleException' with message 'Locale '' is not in the list of supported locales.'\n. I found it here:\nLaravelLocalizationRedirectFilter.php\nwhere $request->path() should be $request->fullUrl()\n. This turns out to be a multiple issue:\n1. after upgrading to 5.2.39, some how redirect won't remember the correct url.intend:\n2. See here: mcamara/laravel-localization when using localization on oauth/authorize, the request parameter was lost during the redirect from oauth/authorize to  /en/oauth/authorize.\n3. /en/oauth/authorize is asking to check the auth middleware, without carrying the correct request (client_id etc.) redirect to login, causing 'url.intende' to record only '/en/oauth/authorize'\nI'm not entirely sure what's causing the issue here. It seems the logic in middleware has changed after 5.2.39. I'm posting my findings in all three package.\n. ",
    "rafaelsnts": "I wanted to know this too, anyone?\n. ",
    "gjportegies": "I'm looking for a solution too on this. I have a table with Languages that can be managed from the admin panel. It would be great to have the option to load/set the supported locales from this database table. Does someone already have a workaround for this?\n. I found a workaround for this. I did the following things. \nCreated a language service class\n``` php\nnamespace Admin\\Services;\nuse App\\Repositories\\Contracts\\LanguageRepository;\nclass LanguageService\n{\n    /*\n     * @var LanguageRepository\n     /\n    protected $repository;\npublic function __construct(LanguageRepository $repository)\n{\n    $this->repository = $repository;\n}\n\n/**\n * Get the supported locales/languages\n *\n * @return mixed\n */\npublic function getSupportedLocales()\n{\n    $locales = [];\n    $languages = $this->repository->findByField('active', 1);\n\n    foreach ($languages as $lang) {\n        $locales[$lang->code] = [\n            'name' => $lang->name,\n            'script' => 'Latn',\n            'native' => $lang->translate($lang->code)->name\n        ];\n    }\n\n    return $locales;\n}\n\n}\n```\nCreated a facade\n``` php\nnamespace Admin\\Facades;\nuse Illuminate\\Support\\Facades\\Facade;\nclass LanguageFacade extends Facade\n{\n    protected static function getFacadeAccessor()\n    {\n        return 'language';\n    }\n}\n```\nBinding with ServiceProvider\n``` php\nnamespace Admin\\Providers;\nuse Illuminate\\Support\\ServiceProvider;\nclass LanguageServiceProvider extends ServiceProvider\n{\n    /\n     * Register the service provider.\n     \n     * @return void\n     /\n    public function register()\n    {\n        $this->app->bind('language', 'Admin\\Services\\LanguageService');\n    }\n}\n```\nConfiguration\nphp\n'providers' => [\n    ...\n    'App\\Providers\\AppServiceProvider',\n    ...\n    'Admin\\Providers\\LanguageServiceProvider',\n],\nphp\n'aliases' => [\n    ...\n    'Locale' => Admin\\Facades\\LanguageFacade::class,\n],\nSetup/configuration for localization\nI created a config service provider like mentioned in the description of laravel-localization.\n``` php\nnamespace App\\Providers;\nuse Illuminate\\Support\\ServiceProvider;\nuse Locale;\nclass ConfigServiceProvider extends ServiceProvider\n{\n    public function boot()\n    {\n        config([\n            'laravellocalization.supportedLocales' => Locale::getSupportedLocales(),\n            'laravellocalization.useAcceptLanguageHeader' => true,\n            'hideDefaultLocaleInURL' => true\n        ]);\n    }\n/**\n * Register the service provider.\n *\n * @return void\n */\npublic function register()\n{\n    //\n}\n\n}\n```\n. It was working before. Is it possible that you moved this stuff from the latest 1.0.* version to the 1.1.* versions that is only available for laravel ^5.2?\n. ",
    "neoighodaro": "You could catch the thrown exception if you can in the mean time.\n. +1\n. @mcamara can you confiirm why the app disables this because its also beyond me\n. @canfiax and what if you visit with a prespecified language in the url? Your code does not account for that does it?\n. ",
    "scil": "Thank you. I use proxy_set_header and everything is ok.\n. ",
    "g4b0": "I'm having the same issue with apache, which Proxy directive can solve? Thanks\n. ",
    "DimiMikadze": "Same here\n. ",
    "mhammami": "Ok I will do it. Thanks for replying\n. ",
    "bs-thomas": "I've added a fix to this, not sure if I have done it correctly.\nPerhaps could you please help and check if my change was a valid change?  And if so, merge it into the next release?\nThank you very much!\n. Hmm it's awkward the test is failing.\n\nThis package requires php >=5.4.0 but your PHP version (5.3.10) does not satisfy that requirement.\n\nIt says it my PHP version is 5.3.  I'm not too familiar with circleci, but all I did was forking from your repository master, and then made that one change.\n. Cool, thanks!\n. @arcanedev-maroc That would be a pretty stupid limitation.  Btw, I'm having the same problem ever since 1.1.3 (it was still working fine in 1.1.2).  So there was something fishy going on.\n. I wonder what this is for as well.  Quite curious.. Btw I also noticed that the tests do not include this case yet.\nBut I'm not quite sure how the unit test works.  Tried looking, but couldnt quickly understand  and underght schedule.\nWould any kind person be able to add this test in?  Thanks a bunch!!. @mcamara Nice, thanks for the merge!  Btw, do we not need any unit tests?  Notice I haven't included them.. ",
    "BojanKogoj": "Is there a reason why you would want to POST to unlocalized URL?\n. Hi mcamara, I only put regional key as the first one for StackOverflow users since it would be partially hidden there.\nI also need to make sure it works correctly on windows devices, no idea how locale works there\n. Let me know if you like the changes before I make a pull request https://github.com/BojanKogoj/laravel-localization/commit/12dad5d93c8245738a19face8a5d2f4b6b1a8b85\n. Test added, replied on the default issue\n. Doesn't work? What doesn't work? What happens? Any errors?\n. Under 'Translated Routes' you can find an example\n. // resources/lang/es/routes.php\n    return [\n      \"about\"       =>  \"acerca\",\n      \"view\"        =>  \"ver/{id}\", //we add a route parameter\n      // other translated routes\n    ];\nand in route\nRoute::get(LaravelLocalization::transRoute('routes.about'),...\n. I think that should be it, yeah. \nExcept maybe I saw somewhere that route should not start with /, unless for root (index). So it should be\n\"view\" => \"firma/profil/ansicht\",\nBut I haven't tried this yet, as my project doesn't require it\n. @foreach(LaravelLocalization::getSupportedLocales() as $localeCode => $properties)\n<a href=\"{{LaravelLocalization::getLocalizedURL($localeCode) }}\">{{$localeCode}}</a><br />\n@endforeach\nThis should translate current URL completely\n. How about \nLaravelLocalization::getURLFromRouteNameTranslated('en', \\Request::route()->getName())\n. Localization only works for those you set. Show your route\n. I'm having the same problem, unfortunately your solution won't work for me. If I figure it out I'll let you know\n. ",
    "commandantp": "what was your work around @rtucek ? Sending the POST with a /en/  ?\n. did you figure it out @lucaslimasouza  ?\n. @lucaslimasouza did you find the solution to your problem? :)\n. ",
    "clifmo": "Simple workaround? please share.\nMy AJAX POSTs just turned in to GETs.\n. ",
    "camel-chased": "same here, all ajax request are 405 Method Not Allowed\n. @galhardi yes but Moreover, this package includes a middleware object to redirect all \"non-localized\" routes to the corresponding \"localized\".\n. ",
    "galhardi": "POST method dont need localization\nEm 05/07/2016 12:30, \"camel-chased\" notifications@github.com escreveu:\n\nsame here, all ajax request are 405 Method Not Allowed\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mcamara/laravel-localization/issues/257#issuecomment-230513270,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/ANImSU-8TuFhPHXe6frEKcPdgLLo8XUoks5qSnijgaJpZM4Ggc3F\n.\n. I dont remember exactly but I think that I used two differents midlewares\nin route config\nEm 05/07/2016 13:03, \"camel-chased\" notifications@github.com escreveu:\n\n@galhardi https://github.com/galhardi yes but Moreover, this package\nincludes a middleware object to redirect all \"non-localized\" routes to the\ncorresponding \"localized\".\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/mcamara/laravel-localization/issues/257#issuecomment-230522839,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/ANImSYU71UdkOIwYL2RyHmGhOIEyyuT1ks5qSoA6gaJpZM4Ggc3F\n.\n. ",
    "altafhussain10": "The easiest way to fix it is to use full url in your ajax request. To do so, define a JS variable called url like below  \nvar url \"{!! url('/').'/'.\\Mcamara\\LaravelLocalization\\Facades\\LaravelLocalization::getCurrentLocale() !!}\"\nAnd then in your JS (also works in Vue.js components), use them as below \nurl + '/customer/login'\nI am using it this way in vue.js components in Laravel 5.3 and it works like a charm.. ",
    "Propaganistas": "Unfortunately the session is initiated in the StartSessionmiddleware, hence session values aren't available in routes.php or in a Service Provider's boot method...\nAny other thoughts?Unfortunately the session is initiated in the StartSessionmiddleware, hence session values aren't available in routes.php or in a Service Provider's boot method...\nAny other thoughts?\n. Ok I managed to get this working. It was necessary to override a middleware of this package though.\nFor future reference, here's what I've done:\n1. The user's language is fetched and flashed to the session using the language key during login and save.\n``` php\n   public function boot()\n   {\n       // On user login: takes care of proper redirection to a user's preferred language upon login.\n       $this->app['events']->listen('auth.login', function() {\n           $this->app['session']->flash('language', auth()->user()->language);\n       });\n   // Redirection to a user's preferred language after saving.\n   User::saved(function($user) {\n       $this->app['session']->flash('language', $user->language);\n   });\n\n}\n   ``\n2. TheLocaleSessionRedirectmiddleware is overridden to check for the newly implementedlanguage` key.\n``` php\n   use Illuminate\\Http\\RedirectResponse;\n   use Closure;\nclass LocaleSessionRedirect\n   {\n   /**\n    * Handle an incoming request.\n    *\n    * @param  \\Illuminate\\Http\\Request $request\n    * @param  \\Closure                 $next\n    * @return mixed\n    */\n   public function handle($request, Closure $next)\n   {\n       $params = explode('/', $request->path());\n\n       // If no new language was requested and the URL has a language prefix, use that one.\n       if (!session()->has('language') && count($params) > 0 && $locale = app('laravellocalization')->checkLocaleInSupportedLocales($params[0])) {\n           session(['locale' => $params[0]]);\n\n           return $next($request);\n       }\n\n       // If a new language was requested, use that one and pull it so we don't end up in a loop;\n       // otherwise we don't have a language prefix in the URL, so fall back to the previous\n       // known language in session\n       $locale = session()->pull('language', false) ?: session('locale', false);\n\n       // Redirect to localized.\n       if ($locale && app('laravellocalization')->checkLocaleInSupportedLocales($locale) && !(app('laravellocalization')->getDefaultLocale() === $locale && app('laravellocalization')->hideDefaultLocaleInURL())) {\n           session()->reflash();\n           $redirection = app('laravellocalization')->getLocalizedURL($locale);\n\n           return new RedirectResponse($redirection, 302, ['Vary' => 'Accept-Language']);\n       }\n\n       return $next($request);\n   }\n\n}\n   . php\nuse Illuminate\\Http\\Request;\nclass HomeController extends Controller\n{\n    public function index(Request $request)\n    {\n        $locale = $request->segment(1);\n    return view('welcome');\n }\n\n}\n```\n. ",
    "PMK": "You need to add this in the http/Kernel.php:\nphp\nprotected $routeMiddleware = [\n'localizationRedirect' => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRedirectFilter::class,\n        'localeSessionRedirect' => \\Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect::class,\n];\n. ",
    "loranger": "Is there a simple way to use this package with route names without editing Illuminate methods ?\n. Any clue @mcamara ?\n. ",
    "pionas": "Hi.\nI'm sorry, but I was in the hospital.\nI forgot about example.\nwhen i'm editing article ( http://locahost/en/article/edit/1 )\nand if no any errors they should redirect to:\nhttp://localhost/en/article/show/first-article\nbut now redirect to:\nhttp://localhost/en/article/show/{slug}\n. I found an answer ;)\nI should change it:\nreturn redirect(\n            LaravelLocalization::localizeURL(\n                LaravelLocalization::transRoute('routes.article_show')\n            )\n        )->with('slug', $slug);\nto:\nreturn redirect()->route('article_show', ['slug' => $slug]);\nIt works for routes with the name\nClosed,\nThanks\n. ",
    "ndberg": "Hmm no? which one do you mean?\n. So for my example I would use in lang/en/routes.php:\n\nreturn [\n      \"view\"       =>  \"/company/profile/view\",\n    ];\n\nand in my lang/de/routes.php:\n\nreturn [\n      \"view\"       =>  \"/firma/profil/ansicht\",\n    ];\n\nand in my route File\n\nRoute::get(LaravelLocalization::transRoute('routes.view')\n\nNot really? I'm soory if I'am a bit obtuse.\n. Wow, you're right.. that works. Thank you very much.\n. Great thanks a lot, works like a charm\n. sorry, I was to fast.. I forgot to reactivate the model binding in the service provider.. It's still not working..\n. Does no one of you guys use model binding?\n. Thanks for your response, I appreciate it.\nI'm pretty shure that it's caused by the model binding, because if I take it out, it all works great.. I tried your suggestion with using keys without '/', but it doesn't matter. And if I take the model binding out, it also works with keys with '/'.\nThanks for your check code for the model binding. Yes it works all great. \nIt's just that this function:\n@foreach(LaravelLocalization::getSupportedLocales() as $localeCode => $properties)\n<a href=\"{{LaravelLocalization::getLocalizedURL($localeCode) }}\">{{$localeCode}}</a><br />\n@endforeach\nreturns the false URL:\n\nen/firma/abdeckung/2\n\ninstead of the translated\n\nen/company/coverage/2\n\nThe Routing itself, works with all translated routes, means:\n\nen/company/coverage/2\nde/firma/abdeckung/2\n. I tried something..\n\nIf I call \nLaravelLocalization::getURLFromRouteNameTranslated('en', 'routes.firma-abdeckung-bindFirma')\nResult:\n\nhttp://torebuild1.local/en/company/coverage/{firma} \n\nSo this translation works, even with model binding.. this one not:\nLaravelLocalization::getLocalizedURL('en')\nResult:\n\nURL: http://torebuild1.local/en/firma/abdeckung/2 \n\nSo perhaps I can make a work-around with other functions from the package..\n. Thanks, but it's not working, Result:\n\nwww.domain.com/en\n\nI managed the links in the nav with this:\n<a href=\"{{ LaravelLocalization::getLocalizedURL(LaravelLocalization::getCurrentLocale(), 'firma/abdeckung/{firma}', ['firma' => $firma->id]) }}\">Gebiet</a>\nBut I still couldn't find a usable solution for the Language switcher, because of different model binding parameters in different routes.. Then I would have to get dynamically the name of the model binding parameter, I don't like that.. I'm sorry i've read my posts again and realized that I didn't wrote clearly that the problem is just with the language switcher.\nThank you all for any help\n. Wow great, thank you very much for your support. I'll take a look at your package.\n. Thanks, your package works great.\n. ",
    "nivv": ":+1:  Wondering this too\n. ",
    "ingria": "404 if using route:cache. Please, fix!\n. ",
    "datashaman": "Not possible - the route cache does not allow closures.\nFrom https://laravel.com/docs/5.2/controllers#route-caching\n\nNote: Route caching does not work with Closure based routes.\nTo use route caching, you must convert any Closure routes to use controller classes.\n\nNow I know they are not controller closures, but they are closures nonetheless. Laravel caches the route table, which must be deterministic, not dependent on external variables or runtime state. Closures make caching impossible with caching done this way.\n. The only way this could be made to work with route:cache  is to remove the dynamic routing, loop through each configured locale and generate explicit routes for each.\nExplicit static routes for each language will result in better performance. Context-dependant routing (as is done here) can be a tricky beast.\n. You shouldn't be using resource/lang files in that way, IMO. You're going to wedge yourself into a very specific non-Laravel way of dealing with routes and translations. You have already run into incompatibilities with your approach and are looking for workarounds. Your approach is the problem, change it.\n. @mindeleven the results you're getting are expected for what you're sending. You're using localized URLs without translation files for the routes.\nAs with any translation in Laravel: if no translation is available, it falls back to using the translation key, which is literally 'posts.create'.\ngetLocalizedURL does exactly that, it works with URLs, not Laravel route names. You could try turning the route name into a URL first:\nLaravelLocalization::getLocalizedURL('en', route('posts.create'))\n. It would be way easier to help you if you formatted your code correctly. Indent it by four spaces (or select it and press the <> button in the toolbar).\n. I am experiencing a similar issue, lurking to see what happens. Also, English -> French. It looks like you are not a native speaker either. LOL. :P\n. From the source:\ntransRoute: Translate routes and save them to the translated routes array\n(used in the localize route filter)\nIt does more than just translate.\n. @arcanedev-maroc i see, but I think @samfrjn11 has a point. I think examining the output of artisan route:list will be useful. The issue (I think) is the dynamic nature of the routing, only the current language's routes get created. I suspect this will work better (and be a lot easier to understand and debug) if you loop through each language and create static routes, so all languages routes exist (to be redirected to). This will also allow you to use route caching.\nDisclaimer: I'm a noob to this package.\n. Hmm, transRoute uses the app translator which is set to the current locale, it doesn't look easy to parameterize that so you can translate for another language besides the current. Perhaps something like this would help:\n```\n$locale = LaravelLocalization::getCurrentLocale();\nforeach (LaravelLocalization::getSupportedLanguagesKeys() as $lang) {\n    LaravelLocalization::setLocale($lang);\nRoute::group([\n    'prefix' => $lang,\n    'middleware' => ['localeSessionRedirect', 'localizationRedirect', 'localize']\n], function () {\n    Route::get(LaravelLocalization::transRoute('routes.home'), [\n        'as' => 'home', \n        function () { \n            // this one works fine, even when I chang the language,\n            // it automatically goes from /en/home to /fr/accueil\n            return view('pages.main.main'); \n        }\n    ]);\n\n    Route::group([\n        'prefix' => trans('routes.for-who')\n    ], function () {\n        Route::get(LaravelLocalization::transRoute('routes.other-businesses'), [\n            'as' => 'other-businesses', \n            function () { \n                // if i try to change the language from en to fr the url goes\n                // from /en/for-who/other-businesses to /fr/for-who/other-businesses\n                // instead of /fr/pour-qui/autres-entreprises\n                return view('pages.for-who.other-businesses'); \n            }\n        ]);\n    });\n});\n\n}\nLaravelLocalization::setLocale($locale);\n```\nI don't like the context switching but it is necessary to get each language's routes defined. This should help, I think, since all the routes (in every language) will now exist. You probably want to add another layer for the routes which do not have a lang prefix (but I'd imagine the package does this already). I have not tested it.\nI suspect you may have to manually add translated route names to LaravelLocalization::compiledRoutes collection as well.\n. ",
    "MikeElghali": "Hi,\nAny way to resolve this issue ?\nRegards.\n. ",
    "lucasff": "+1 here too!\n. https://laravel.com/docs/5.3/routing#route-group-sub-domain-routing\n. This is a must. I'm having the same problem.\n. You can override 'route' function declaration so it gets loaded before the core one. Should be better this way.\n. I had a lot of this problems and ended up doing a very dirty hackish solution. We need to help this package!\n. If you're not using vhosts, you're doing it wrong. In production you need to deploy to public anyway. \n. Please merge this @mcamara! I'm having problems because of that.\n. I found out that we have 70000 calls to preg_match in a pretty normal Laravel application (eCommerce). We generate around 400~ links each request. This means after we implemented another thing to generate links, we got down 50% of request time because getLocalizedURL takes ages to do its thing.. You need to use both App::setLocale() and LaravelLocalization::setLocale(). Are you using cPanel?. should use mb_*?. You're doing it wrong. Your web server should be responsible for redirecting HTTP -> HTTPS traffic. It is too much time until it hits the PHP application and thus the RedirectFilter. When you do it right, any response sent from the Filter will be HTTPS.. I'm mentioning again, redirection from HTTP to HTTPS should be done Apache or nginx level, not at application! It is faster for the end user!. @dhiman252 the same thing can be achieved in the webserver configuration.. your entry for the path of the provider is wrong... also. ",
    "kovalc0mrade": "+1\n. ",
    "DigitalCoder": "ok It works with this architecture\nresources/lang/fr/elements/layouts/homepage/home-banner.php\nresources/lang/en/elements/layouts/homepage/home-banner.php\nand in my element resources/views/elements/layouts/homepage/home-banner.blade.php\nI just have to use this syntax {{ trans('elements/layouts/homepage/home-banner.banner_title') }}\nI hope that my initial problem and this solution could help somebody !\nLet's go ! for a good coding night !\n. hi!\nany solutions ?. Thx\nI'm going to try !. ",
    "mundiir": "Merge, please!\n. ",
    "pawlox": "Is this problem also affecting standard authentication in Laravel 5.2? Because with localization redirect middleware logining in and registering don't work for me :/\nEdit\nOk, I fixed it by move my POST paths from localization middleware group\n. @MarcGaumont I have something like that:\n```\nRoute::group([\n    'prefix' => LaravelLocalization::setLocale(), \n    'middleware' => [ 'localeSessionRedirect', 'localizationRedirect' ]\n    ], function () {\n        Route::group([\n            'middleware' => ['auth']\n            ], function () {\n                Route::get('/', 'PagesController@home');\n                (...)\n            });\n        Route::get('/register', 'Auth\\AuthController@getRegister');\n        Route::get('/login', 'Auth\\AuthController@getLogin');\n        Route::get('/logout', 'Auth\\AuthController@logout');\n    });\nRoute::post('/login', 'Auth\\AuthController@postLogin');\nRoute::post('/register', 'Auth\\AuthController@postRegister');\n```\n. I have the same problem and I think it's got something with\n\nIMPORTANT - When hideDefaultLocaleInURL is set to true, the unlocalized root is treated as the applications default locale app.locale. Because of this language negotiation using the Accept Language header will NEVER occur when hideDefaultLocaleInURL is true.\n\nfrom the documentation, but I don't know how to fix it yet.\nEdit\nIt's also something with middleware - if I remove localization middleware from routes\n'middleware' => [ 'localeSessionRedirect', 'localizationRedirect' ]\nthen switching to default works but it breaks my other links (no redirection for bad links) :/\n. ",
    "4unkur": "@Pawlox Thanks, man.\n. ",
    "koichirose": "Anyone?\n. ",
    "mindeleven": "I also would like to know how to use named routes in a blade template.\n{{ LaravelLocalization::getLocalizedURL('en', 'posts.create') }} translates to \n/en/posts.create\nnot to \n/en/posts/create\nas expected.\nRoutes definition:\n`Route::group(\n```\n[\n    'prefix' => LaravelLocalization::setLocale(),\n    'middleware' => [ 'localeSessionRedirect', 'localizationRedirect' , 'web'], \n], \nfunction () {\nRoute::resource('posts', 'Posts\\PostsController', ['names' => [\n    'index' => 'posts.index',\n    'create' => 'posts.create',\n    'store'  => 'posts.store' \n]]);\n\n```\n});`\nI'm not using translation files with routes.\n. @datashaman thank you for your answer. I'm rather new to Laravel (coming from Symfony) and had some misconceptions about named routes in Laravel. My mistake. \nTurning the route name in a URL first (with route() or URL::route()) is a solution that works quite well. Thanks again.\n. ",
    "kamil-kielczewski": "here is helper function for case when user has lang column: https://stackoverflow.com/q/50569893/860099\n```\nfunction localRoute($routeName, $locale = null)\n{\n    if (!$locale && Auth::user())  $locale = Auth::user()->lang;\nreturn $locale ? LaravelLocalization::getLocalizedURL($locale, route($routeName)) : route($routeName);\n\n}\n``. Sorry, I was frustrated because I push \"CTRL+F\" in browser, typesupportedLocales` and cannot find any connection with configuration... so I think currently in this element docummentation Is Highly User unfriendly :( .\nMy proposition: Cange text below header Config file:  \n\nIn order to edit the default configuration for this package you may execute:\n\nto:\n\nIn order to edit the default configuration (where for e.g. you can find supportedLocales) for this package you may execute:\n\nIt will be good also to move Config file section directly below Installation section. @mcamara I forgot about content list - now is ok. ",
    "ballaevi": "This is the route group with localization:\nRoute::group(['prefix' => LaravelLocalization::setLocale(), 'middleware' => [ 'localeSessionRedirect', 'localizationRedirect' ]], function()\n{\n    /* Home */\n    Route::get('/', 'HomeController@index');\n```\n/ Contact /\nRoute::get('/contact', 'HomeController@contact');\n/ About /\nRoute::get('/about', 'HomeController@about');\nRoute::get('/admin/login', 'Auth\\AuthController@getLogin');\nRoute::get('/admin/logout', 'Auth\\AuthController@getLogout');\n/ Category Frontend /\nRoute::get('/category/{slug}', 'CategoryController@show');\nRoute::get('/categories', 'CategoryController@view');\nRoute::get('/{category}/{post}',[\n    'as'            => 'category.post',\n    'uses'          => 'PostController@show',\n]);\n/ Brochure Frontend /\nRoute::get('/brochure/{slug}', 'BrochureController@show');\n```\n});\nHere are the API routes\n/* API */\nRoute::get('/api/iataSearch', 'BaseController@iataSearch');\nRoute::get('/api/hotelDestinationSearch', 'BaseController@hotelDestinationSearch');\n. ",
    "megadola": "i've the same problem here, and i didn't see any asnwers and you closed the issue!\n. @ballaevi !!\n. up!\n. ",
    "asisti2-pruebas": "Thanks it works!! \nSorry I just started with Laravel 5.2 no experience with previous versions. I am used to work with Rails.\n. Thanks!\n. ",
    "lucaslimasouza": "@commandantp I didn't undertand. \n. @commandantp no\n. I put out of:\nRoute::group( [\n'prefix' => LaravelLocalization::setLocale(),\n'middleware' => [ 'localeSessionRedirect', 'localizationRedirect' ]\n],function(){}\nand work\n. ",
    "StefanNeuser": "yes please fix this!\n@InToSSH is there already a pullrequest?\n. ",
    "InToSSH": "@stefan-neuser I haven't created a pull request yet as I didn't have time to verify if it doesn't affect the package with other settings than I am currently using. For now I created my local copy of LocaleSessionRedirect middleware with the if corrected as specified above. I should be able to test it today and make a pull request.\nEDIT: Oh.. I see you have already done that second ago.. Thanks :)\n. Hi, I don't have problem with this, installed the most recent version, and if the asset does exist, it doesn't change the url to one with locale, only if the asset doesn't exist or I have typo in URL. (tested with URL of asset which otherwise would get caught in a translated route)\n. ",
    "gkhachidze": "Same problem on me. \n. ",
    "gitllermopalafox": "Lv5.1.28\n+1\n. ",
    "aligator28": "Have the same problem\n. I just implemented localization from this article: http://mydnic.be/post/laravel-5-and-his-fcking-non-persistent-app-setlocale\nVery simple and absolutely working example.\n. ",
    "m7ammad7assan": "the sam problem but in my case it get the browser lanuage\n. ",
    "PLaRoche": "@mcamara was this closed due to it being supported?\n. ",
    "alexandcote": "+1\n. I found a temporary fix into a other issue #161. \n'prefix' => (env('APP_ENV') === 'acceptance' ? 'en' : LaravelLocalization::setLocale())\n. @mcamara any update on this ? Could we help to something ?\n. ",
    "fcaivano": "+1\n. See #356 \nProbably the same fix will apply... If not, let me know your Laravel version.\n. Read the docs \"Middleware\" section:\nhttps://github.com/mcamara/laravel-localization#middleware\nAdding:\n'localizationRedirect' => 'Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRedirectFilter',\n'localeSessionRedirect' => 'Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect'\nTo app/Http/Kernel.php\nRun composer dump-autoload afterwards just in case\nWill probably solve your issue\n. This has probably nothing to do with this package...\nHave you tried without the package first, does it work?\nIf not, can you check if the StartSession class is inside the \"web\" middleware route.\nAnd check, depending on your Laravel vesion, if you need to manually add the \"web\" middleware... if it's not being applies, then probably that's the issue.\nWhere's the code that actually echo's the flashed \"message\"? Maybe that's your issue.\n. ",
    "SeoFood": "+1\n. ",
    "xoco70": "+1. I'm stuck!\n. Solved removing:\nRoute::group(['prefix' => LaravelLocalization::setLocale(), 'middleware' => ['localeSessionRedirect', 'localizationRedirect']], function () {\nfrom routes.php\nrunning composer install, and then adding again\n. ",
    "biblicalph": "@alexandcote I went with LaravelLocalization::setLocale() ?? 'en' for now. I'll look around into the code to see if I can come up with a fix. ",
    "swingingtom": "+1. ",
    "zarapico": "+1. @fede91it the problem is in the file\nLaravelLocalization.php # L855\nhttps://github.com/mcamara/laravel-localization/blob/3c14c66df8de72b612d9eaffba23438ee52f5e67/src/Mcamara/LaravelLocalization/LaravelLocalization.php#L855\nThe event is triggered only with an argument when the documentation says they are two $ locale, $ attributes\n@mcamara hopefully can fix the bug please!\n. @fede91it @mcamara pull request https://github.com/mcamara/laravel-localization/pull/362\n. +1. ",
    "grund3g": "+1. ",
    "timkolm": "+1. ",
    "samfrjn11": "```\n<?php\n/*\n * Created by PhpStorm.\n * User: Sam Smekens\n * Date: 9/02/2016\n * Time: 9:57\n * routes.php [en]\n /\nreturn [\n    'home' => 'home',\n    'for-who' => 'for-who',\n    'advantages' => 'advantages',\n    'features' => 'features',\n    'software' => 'software',\n    'hardware' => 'hardware',\n    'contact' => 'contact/{ref?}',\n'territories' => 'territories',\n\n'cattle-slaughterhouses' => 'cattle-slaughterhouses',\n'food-production' => 'food-production',\n'food-trading' => 'food-trading',\n'fresh-meat-production' => 'fresh-meat-production',\n'meat-products' => 'meat-products',\n'pig-slaughterhouses' => 'pig-slaughterhouses',\n'poultry-slaughterhouses' => 'poultry-slaughterhouses',\n'other-businesses' => 'other-businesses',\n\n];\n```\n. yes, of course\n```\n<?php\n/*\n * Created by PhpStorm.\n * User: Sam Smekens\n * Date: 9/02/2016\n * Time: 9:57\n /\nreturn [\n    'home' => 'accueil',\n    'for-who' => 'pour-qui',\n    'advantages' => 'advantages',\n    'features' => 'applications',\n    'software' => 'logiciel',\n    'hardware' => 'materiels',\n    'contact' => 'contact/{ref?}',\n'territories' => 'territoires',\n\n'cattle-slaughterhouses' => 'cattle-slaughterhouses',\n'food-production' => 'food-production',\n'food-trading' => 'food-trading',\n'fresh-meat-production' => 'fresh-meat-production',\n'meat-products' => 'meat-products',\n'pig-slaughterhouses' => 'pig-slaughterhouses',\n'poultry-slaughterhouses' => 'poultry-slaughterhouses',\n'other-businesses' => 'other-businesses',\n\n];\n```\nIt just doesn't redirect to the correct page. It discards the prefixes\n. I am indeed not a native speaker :P I'm from Belgium :) One of my customers needed a website with 12 different languages including translated routes. mcamara's laravel-localization does its job, but fails while redirecting to another language when using prefixes.\nI am not using 'prefix' => trans('routes.for-who') because otherwise mcamara's laravel-localization won't recognize the 'for-who' prefix to be translated into 'pour-qui' or whatever translation it has to be.\nI am aware that not everything was/is translated, but that's not the problem. Translations are doing fine, but if your are on /en/for-who/cattle-slaughterhouses and you change your language to french it redirects to /fr/for-who/cattle-slaughterhouses which then gets again redirected to '/fr' (main page) because the route supposedly does not exist since on 'fr' the routes are waiting for a request from /fr/pour-qui/...\n. For anyone having similar issues as I have, I think this might be a fix:\nThanks to some kind of repost from @mtx-z (https://github.com/ARCANEDEV/Localization/issues/68) it seems that the probleem is using translated routes in a translated route prefix. If you remove the translated prefix and hardcode the translated route name, it should work.. ",
    "mtx-z": "Anybody found something about this ?. Re-confirmed.\nTested with Laravel 5.5 and latest laravel-localization.\nSame issue, cannot use translated prefix. The full URL need to be provided in the translated value, including the prefix. \nSo, you still cannot group your routes by translated prefix (not tried with non-translated prefix, hardcoded one).\n . @ctf0, does LaravelLocalization::setLocale(optional string $locale) change the default locale ? The default local is taken from app.locale ? thx. New issue opened #448 . Same issue on Laravel 5.5. \nIt works with 1 parameter, not with more: only locale is changing.\n```\nen/routes.php\n'post' => [\n        'index' => 'post',\n        'show' => 'post/{post}',\n    ]\nfr/routes.php\n'post' => [\n        'index' => 'post-fr',\n        'show' => 'post-fr/{post}',\n    ]\nroute/web.php\nRoute::name( 'post.' )\n                  ->group( function () {\n                      Route::get( LaravelLocalization::transRoute( 'routes.post.index' ), 'PostController@dashboard' )->name( 'index' );\n                      Route::get( LaravelLocalization::transRoute( 'routes.post.show' ), 'PostController@show' )->name( 'show' )->where( 'post', '[0-9]+' );\n                  } );\n```\n(Note that the \"post\" (\"post-fr\" in french) segment in english version would normally be implemented as a Route group translated prefix, but it does not work as of #290 - prefix is so directly included in all routes translations values when needed).\ngetLocalizedURL() is working great for \"index\" route, but not working for \"show\" route. \nIndex route output:\nEN: http://domain.com/en/post\nFR: http://domain.com/fr/post-fr\nShow route output:\nLocale is EN ->\nEN: http://domain.com/en/post/1\nFR: http://domain.com/fr/post/1 (should be http://domain.com/fr/post-fr/1)\nLocale is FR ->\nEN: http://domain.com/en/post-fr/1 (should be http://domain.com/en/post/1)\nFR; http://domain.com/fr/post-fr/1 \nIn the end, we can \"tweak\" it by setting same naming pattern on Route names and Route translated names. \nBeing able to do something like : \nLaravelLocalization::getURLFromRouteNameTranslated($localeCode, 'routes.' . Route::currentRouteName(), Route::current()->parameters, false);\nas getURLFromRouteNameTranslated() is working great if you pass the URL parameters to the method. In this case, just be careful with Laravel Route model binding. As the Parameter value will not be the ID (int/string) anymore, but the found model instance (ID based if not overided). I made a quick helper to send back the ID if the model as replaced the real URL parameter value.\nThis is not perfect and have limitations (translated route naming), but as getLocalizedURL() is \"not safe enough\", it's a way to achieve a dynamic language switcher.\nRelated at ARCANEDEV/Localization#68, but not tested again this specific issue route name settings (2 translated parameter all from route translation file, here i have 1 variable wich is the ID).. What's wrong with getUrlFromRouteTranslated()?\nYou need to provide the route name from the translation file, not the one from laravel router. . You also matched router route name and translated route name? . @stefkes I think you should use another package. \nI use myself mcamara/laravel-localization for route translations, and dimsav/laravel-translatable for model translations (slug, and all fields that you want translated).. ",
    "jeroennoten": "@mcamara Could you please release a new version that includes this PR? Otherwise I cannot install it without specifying the master branch. Thank you!\n. ",
    "ittikorns": "+1\n== Workaround ==\nI found this workaround for temporary fix the problem by getting current url and pulling out its path, then manually add prefix of the default language\n<?php\n    $current_url = parse_url(LaravelLocalization::getNonLocalizedURL(Request::url()));\n?>\n<a href=\"#\" data-menu=\"languageSwitcher\">\n    LANGUAGES\n</a>\n<ul id=\"languageSwitcher\" class=\"language_bar_chooser\">\n@foreach(LaravelLocalization::getSupportedLocales() as $localeCode => $properties)\n    // Manually modify the url\n    @if ($localeCode == 'th') \n        <li>\n            <a rel=\"alternate\" hreflang=\"<% $localeCode %>\" href=\"<% url('/th'.$current_url['path']) %>\">\n                {{{ $properties['native'] }}}\n            </a>\n        </li>\n    @else\n        <li>\n            <a rel=\"alternate\" hreflang=\"<% $localeCode %>\" href=\"<% LaravelLocalization::getLocalizedURL($localeCode) %>\">\n                {{{ $properties['native'] }}}\n            </a>\n        </li>\n    @endif\n@endforeach\n. I solved it by getting current locale by using Session::get('locale'), let me know if anyone has a better method or else you can close this issue.\n. ",
    "herzzanu": "Thank you @ittikorns Having the same problem and this workaround works great. +1\n. Thank you @kusmierz. I have these settings in place but for some reason it doesn't redirect. I still think that something is missing.\n. ",
    "stgalkin": "Have the same problem. \nThis is nice solution for language select, but what will be if someone change locale from '/' to '/en' and after what try to get url without locale:\n1. join homestead.com/about\n2. change locale  homestead.com/ to homestead.com/en\n3. Join homestead.com/about get homestead.com/en/about\nI have an idea how to fix it. \nUPD. \nI found what Session::get('locale') contains old locale when i get homestead.com/ \nSo the solution which works:\nIn your Middleware file which uses in routes.php with locale prefix (you can create a new file and include it in config/app.php, i changed LocaleMiddleware.php )  put:\n// The arr of your languages\n        $lang_arr = ['ua', 'en'];\n       //Get the current prefix, if prefix NULL set the default locale. \n        $route_prefix = $request->route()->getPrefix();\n        if (empty($route_prefix)) {\n            \\Session::put('locale', $request->getPreferredLanguage($lang_arr));\n            app()->setLocale(\\Session::get('locale'));\n        }\n. ",
    "denniskoster": "Having the same issue, would be nice to have the option to force the locale in the generated URL from getLocalizedURL(). After that you're being redirected to the URL without the locale in it anyway, but then the locale is stored in the session.\n. ",
    "ctf0": "@ittikorns a better fix\nopen LaravelLocalization.php and go to line 300 then add\nphp\nelseif ( !empty( $locale ) && ( $locale != $this->defaultLocale || $this->hideDefaultLocaleInURL() ) ) {\n    $parsed_url[ 'path' ] = $this->getDefaultLocale() . '/' . ltrim($parsed_url[ 'path' ], '/');\n}\nand it will work as it should, if all good i can make a PR.. found a solution\n``` php\n// view\n// it doesn't matter how u format your nav, just make sure that \n// the $lang equal the new one u want\n\n\n\n// route\nRoute::get('switchTo={lang}', [\n    'as'   => 'ChangeLang',\n    'uses' => 'PageController@switchLang',\n]);\n// controller\npublic function switchLang($lang)\n{\n    $url   = url()->previous();\n    $redir = str_replace('/'.LaravelLocalization::getCurrentLocale(), '/'.$lang, $url);\nreturn redirect()->to($redir);\n\n}\n```\nEdit:\nneeds a better way to only change the locale part so something like\nxyz.com/en/entitle woudltn become xyz.com/fr/frtitle\n. here is the solution\n``` php\npublic function switchLang($lang)\n{\n  // so we can redir back to where the user was\n  $url   = url()->previous();\n  $url_explode = explode(\"/\",$url);\n  $url_explode[3] = $lang;\n  $redir = implode('/',$url_explode);\nreturn redirect($redir);\n}\n```\n. yeap that could work, but if u r using something like route resource, or even the route auth that come with laravel by default, it will be kinda messy to have names for them \n. there must be something stopping the session from being saved, i also have the same problem from time to time and believe it or not the solution was\n1- create a clean laravel project\n2- make sure the validation msgs are working (the default is enough)\n3- clean browser cache & session data for the localhost\n4- clean the (project in question) session store (file or db)\nand it should work again. . a simpler solution \"not tested\"\n``` php\n// because this fires after the user is logged in so the \"auth()->user()\" is ready to be used\n// the package by default makes the urls like \"abc.com/{locale}\"\n// so all we have to do is to just append the user locale to the root url\n// and the \"LaravelLocalization::setLocale()\" will be changed automatically \nprotected $redirectTo = '/'.auth()->user()->language // the column u save the user locale;\n``\n. already install in here without any issues, we just need to updatecomposer.json. nop. @nkvorn this is not related to the package, the protocol is handled by ur server , this package only change the value that comes after the first/exwww.abc.com/en.'hideDefaultLocaleInURL' => true,from its name it means that the default lang which isenwill be hidden, which mean that any other locale will be visible **except** the defaulten`. Yes, this is currently a prob with the package & there is more than one pr\nmade to fix it but no response from @mcamara on any yet\nOn Jan 18, 2017 6:28 AM, \"Humberto Lidio Antonelli\" \nnotifications@github.com wrote:\n\nI can not get back to the default language when I use 'hideDefaultLocaleInURL'\n=> true\nThe system language remains with the one that was previously selected.\nHow to solve this problem?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/mcamara/laravel-localization/issues/364#issuecomment-273379946,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHC7uDABN_bA4qfiHzyUiKJ98J3YiIMOks5rTZTygaJpZM4KL3po\n.\n. @alex0082ass u can instead get the session key that gets changed by the middleware https://github.com/mcamara/laravel-localization/blob/master/src/Mcamara/LaravelLocalization/Middleware/LaravelLocalizationRedirectFilter.php#L44 session('locale')\n\nso maybe u can create a new middleware that on each request check that session key and apply its value to the user table\n```php\n$user_lang = $request->user()->default_language;\nif (session('locale') != $user_lang )\n{\n    return $request->user()->update(['default_language' => session('locale')]);\n}. i believe ur web middleware should be BEFORE the other middlewares , because that's the one responsible for applying the session/auth/etc.... oh my bad, even though it still wont work because LaravelLocalization::setLocale() use session, so instead try \n```php\nRoute::group(['middleware' => 'web'], function () {\n// all ur routes should be inside here\n\nRoute::group(['prefix' => LaravelLocalization::setLocale(),'middleware' => ['localeSessionRedirect', 'localizationRedirect']], function () {\n\n    // any localized routes should be here\n\n    Route::group(['namespace' => 'Frontend'], function() {\n        Route::get('newsletter', ['as' => 'newsletter', 'uses' => 'SubscriberController@create']);\n        Route::post('newsletter', ['as' => 'newsletter_store', 'uses' => 'SubscriberController@store']);\n    });\n\n});\n\n});\n```\nin v5.3 the web issue was solved through applying it to the whole routes.php file. the validation exception is handled by default, but if u r using https://github.com/GrahamCampbell/Laravel-Exceptions , then u do need the extra line as its not supported out of the box. maybe because you havent add it to the route middleware in ur routes.php ?, the global middleware means it gets applied on each request.. @dzung1nguyen actually this is included but not documented https://github.com/mcamara/laravel-localization/search?utf8=%E2%9C%93&q=cookie. a couple of small edits\n1. use the syntax formatting feature in md for better demonstrating of the code\n2. for the route pattern u can instead use https://laravel.com/docs/5.3/routing#parameters-global-constraints\n3. for the failed translation, can u give more info so we can re-produce . there is a way around it \n1- don't use the translated routes option in this package\n2- make a table that hold ur routes names + translation\n3- in ur routes.php make a loop that go through that table and creates the routes dynamically according to the names in it\nthe good thing about this is that u can save/edit ur route translation as u want and its dynamic because its being generated through the loop, however the only drawback is you will have to create the controller methods manually or come up with a way to append them to the controller each time you have a new route. . here is a sample of what i meant\nhttps://gist.github.com/ctf0/001342eb07eb513659507c84f9b1271b you can also use https://github.com/spatie/laravel-translatable instead of making a bazillion columns for different langs. oh okay, by the  bazillion columns i meant the old way of having column for each localized field \ud83d\udc4e .\nalso i prefer the spatie package more as all u need is to only include the trait and specify the attribute that will be localized & thats about it (no migration, no extra method call). @moakkaya hi there, honestly i cant remember what exactly was it but maybe you can tell me what u r after and i can help you \ud83d\udc4d . maybe thats what u r after https://github.com/ctf0/SimpleMenu ?\nfor the slug its like any other input, if you need support for arabic slug check the last part. lol , certainly didnt mean to \ud83c\udf2e \n\nanyhow the slug will be returned depend on the app current local.\nfor the route link, thats one of the reasons i made the above package but if you are fine with the current option LL offer then you should go with it.\n\nhere is how spatie/laravel-translatable works\n```php\nNewsItem::create([\n   'name' => [\n      'en' => 'translated-slug-for-en'\n      'fr' => 'translated-slug-for-fr'\n   ],\n]);\n$name = NewsItem::first()->name\n// if app()->getLocale(); == 'en' \n// $name = translated-slug-for-en\n// if app()->getLocale(); == 'fr' \n// $name = translated-slug-for-fr\n```\n. either go manually with https://github.com/mcamara/laravel-localization#translated-routes\nor go automatically through db with https://github.com/ctf0/SimpleMenu/blob/master/src/database/seeds/PagesTableSeeder.php#L41\nbtw for the slug you can create a one point getter in the model, and you dont even need to save it to the db, ex\n```php\npublic function getSlugAttribute() {\n   return str_slug($this->title);\n}\n// to access it\nNewsItem::first()->slug\n. u can do it on ur own by simply wrapping all in a route prefixphp\nRoute::group(['prefix' => 'b2b'], function () {\n    // all ur routes goes in here\n});\n```\nhttps://laravel.com/docs/5.3/routing#route-group-prefixes. @mcamara i think we can add a new config for this so it gets prepended to the locales. i dont think its possible to have an array, cuz now you will need to have somthing that define which prefix you want to use at which time/case. the reason this package is made this way is for better seo, however if u prefer to solely depend on the session keys without the url prefix, u can easily do it ur self, a simple workflow would be\n1. create a lang switcher link\n2. this link call a method that set a session key equal to the switcher value\n3. then set the app locale to the switcher value\nnow everywhere in ur app , u simply rely on the app.locale to serve ur data. @mcamara not sure what exactly is the error with travis to fix. i've merged the master changes back to my copy, but still no difference made, u can review it and tell me what to change to get it fixed and i'll do it. what happens is that the package reads the segment out of the url and add it to a session key, so maybe u can make a middleware that check what is the user pref and redirect to the localized version of that pref, this ofcourse is needed once as from next request on , the package will save that into the session. u can use one page that include other according to current locale\nphp\nclass PagesController extends Controller\n{\n    public function index()\n    {\n        return view('pages.home');\n    }\n}\nblade\n// pages.home\n@if (LaravelLocalization::getCurrentLocale() == 'en')\n    @include('partial.home_en')\n@else\n    @include('partial.home_nl')\n@endif\nor even better\nblade\n// pages.home\n@include('partial.home_'.LaravelLocalization::getCurrentLocale()). maybe try \nblade\n{{ LaravelLocalization::getLocalizedURL(App::getLocale(), \"register/activation/\", ['token' => $user->token]) }}\nor \nblade\n{{ LaravelLocalization::getLocalizedURL(App::getLocale(), \"register/activation/\".$user->token) }}. i think to dynamically get the slug according to current locale, u can try https://github.com/spatie/laravel-translatable so in ur view $post->slug and it will change automatically.. u can use LaravelLocalization::setLocale(optional string $locale). @mtx-z it changes the session locale, then the middleware check the session on each request and update the app.local accordingly. not sure if it would work or not, but have u tried \nphp\n{!! LaravelLocalization::getLocalizedURL('en', route('frontend.tips.show'), ['slug'=>$tip->slug]) !!}. this is probably because the view is using the url not the route name for login.\nto get the most of this package u should avoid using urls and always use route names.. this is strange, its working without issues on my machine, can u make a repo with ur current copy ?. @mcamara any news on this ?. this is an old issue, atm the middleware add the locale as the first segment, so whatever solution u'll come up with u'll always get the focken not found error. so the usage have to be as the doc says\nphp\nRoute::group([\n    'prefix' => LaravelLocalization::setLocale(),\n    'middleware' => [ 'localeSessionRedirect', 'localizationRedirect' ]\n], function() {\n    /** ADD ALL LOCALIZED ROUTES INSIDE THIS GROUP **/\n});. ",
    "phivk": "@ashatrov Thank you for #439 ! \nWith this fix in place, could I suggest updating the example language selector given in the readme?. ",
    "ashatrov": "@phillchill I created PR with updated README.md.. + Tests improvement\n+ Translation method fixed after tests added :). One extension shouldn't configure other extensions.. It is module, and module shouldn't change something in other module cos it is not transperent, it is additional dependency etc. \nThis module set application locale, but locales in other places shoud be set with this application locale, not directly from here. In this case it will be abstracted enough to keep flexibility. . 1) I think here should be Language name, not Country Name.\nLanguage name 'name' => 'Kyrgyz', not 'name' => 'Kyrgyzstan'\n2) Based on list of locales it should be 'regional' => 'kk_KZ'\nbash$ locale -a\n...\nkk_KZ\nkk_KZ.PT154\nkk_KZ.UTF-8\n...\n3. And key of this array element should be 'ky', because of key for the Kyrgyz Language in ISO 639-1 is ky. ",
    "Morinohtar": "Ok, after a couple more tests the problem is this: the translation doesn't work if the route has parameters that have a model binding.\nRoutes with \"normal\" parameters work fine. Routes that have parameters that are binded to models don't work.\n. Ok, thanks, im going to check that.\n. ",
    "pablocrs": "+1\n. ",
    "mgarciadelojo": "Here you can find my RouteServiceProvider.php file in order to get it working with Laravel Gettext:\n```\n<?php\nnamespace App\\Providers;\nuse Gettext;\nuse Illuminate\\Routing\\Router;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Foundation\\Support\\Providers\\RouteServiceProvider as ServiceProvider;\nuse LaravelLocalization;\nclass RouteServiceProvider extends ServiceProvider\n{\n    /\n     * This namespace is applied to the controller routes in your routes file.\n     \n     * In addition, it is set as the URL generator's root namespace.\n     \n     * @var string\n     */\n    protected $namespace = 'App\\Http\\Controllers';\n/**\n * Define your route model bindings, pattern filters, etc.\n *\n * @param  \\Illuminate\\Routing\\Router  $router\n * @return void\n */\npublic function boot(Router $router)\n{\n    //\n\n    parent::boot($router);\n}\n\n/**\n * Define the routes for the application.\n *\n * @param  \\Illuminate\\Routing\\Router  $router\n * @return void\n */\npublic function map(Router $router, Request $request)\n{\n    $groupOptions = [\n        'namespace' => $this->namespace,\n        'prefix' => LaravelLocalization::setLocale(),\n    ];\n\n    $regionalCode = LaravelLocalization::getCurrentLocaleRegional();\n    Gettext::setLocale($regionalCode);\n\n    $router->group($groupOptions, function ($router) {\n        require app_path('Http/routes.php');\n    });\n}\n\n}\n```\n. Sure, in one hand, you need to follow the instructions when installing LaravelLocalization. Execute the following command in order to publish the config file for your project.\nphp artisan vendor:publish --provider=\"Mcamara\\LaravelLocalization\\LaravelLocalizationServiceProvider\"\nAs you could see, a file is created in your config directory called laravellocalization.php. Modify it to fit your needs. Refer to the documentation for more info. \nhttps://github.com/mcamara/laravel-localization#config-files\nOn the other hand, this is my Kernel.php file. You can see that I added the Gettext middleware after starting the session:\n```\n<?php\nnamespace App\\Http;\nuse Illuminate\\Foundation\\Http\\Kernel as HttpKernel;\nclass Kernel extends HttpKernel\n{\n    /\n     * The application's global HTTP middleware stack.\n     \n     * These middleware are run during every request to your application.\n     \n     * @var array\n     */\n    protected $middleware = [\n        \\Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class,\n    ];\n/**\n * The application's route middleware groups.\n *\n * @var array\n */\nprotected $middlewareGroups = [\n    'web' => [\n        \\App\\Http\\Middleware\\EncryptCookies::class,\n        \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n        \\Illuminate\\Session\\Middleware\\StartSession::class,\n        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n        \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n        \\Xinax\\LaravelGettext\\Middleware\\GettextMiddleware::class,\n    ],\n\n    'api' => [\n        'throttle:60,1',\n    ],\n];\n\n/**\n * The application's route middleware.\n *\n * These middleware may be assigned to groups or used individually.\n *\n * @var array\n */\nprotected $routeMiddleware = [\n    'auth' => \\App\\Http\\Middleware\\Authenticate::class,\n    'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n    'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n    'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n];\n\n}\n```\nHope this helps you to find the right solution :)\n. About caching, you just need to restart your homestead/machine to clear the gettext cache. That's the best method I tried. It's a bit annoying but convenient.\nWell, performance. That's a good question I faced a few weeks ago, and I did realize that the Gettext Middleware only gets the locale in session. In our case, we need to override it... You can check if an override is needed by reading the session first, but, I measured it using DebugBar and I didn't find any advantage from it...\nIf you feel that your questions have been answered, please, close this thread :)\n. Ouch, I forgot to mention you need to create the file ResourceNoPrefixRegistrar.php and add it to the list of providers:\n```\n<?php\nnamespace app\\Providers;\nuse Illuminate\\Routing\\ResourceRegistrar;\nuse Illuminate\\Routing\\Router;\nclass ResourceNoPrefixRegistrar extends ResourceRegistrar\n{\n    public function __construct(Router $router)\n    {\n        parent::__construct($router);\n    }\n/**\n * Get the resource name for a grouped resource.\n * Don't add prefix to the route name, if you want a prefix added\n * to the route name add 'as' => 'prefix.' to the group options.\n *\n * @param  string  $prefix\n * @param  string  $resource\n * @param  string  $method\n * @return string\n */\nprotected function getGroupResourceName($prefix, $resource, $method)\n{\n    return trim(\"{$prefix}{$resource}.{$method}\", '.');\n}\n\n}\n```\n. I am glad you found the solution :)\nCheers,\n. Well, what I have done is, passing the route attributes to my layout template where the language switcher is rendering.\nFor example, in one show.blade.phpI have:\n@extends('layouts.app', [\n    'route_attributes' => [\n        'route_name' => 'routes.showPost',\n        'es' => ['slug' => $post->slug_es],\n        'en' => ['slug' => $post->slug_en],\n    ],\n])\nAnd in the app.blade.php...\n@foreach(LaravelLocalization::getSupportedLocales() as $localeCode => $properties)\n    {{--*/\n        $localizedUrl = isset($route_attributes)\n            ? LaravelLocalization::getURLFromRouteNameTranslated(\n                $localeCode,\n                $route_attributes['route_name'],\n                $route_attributes[$localeCode])\n            : LaravelLocalization::getLocalizedURL($localeCode)\n    /*--}}\n    <li>\n        <a rel=\"alternate\" hreflang=\"{{ $localeCode }}\" href=\"{{ $localizedUrl }}\">\n            <span class=\"flag_{{ $localeCode }}\"></span> {{ $properties['native'] }}\n        </a>\n    </li>\n@endforeach\nI don't like to be defining this in every single view, but, at least my controllers don't get dirty.\nHope this helps many of you.\n. Could you provide more info or code example?\n. Yes, that's it, but I found out another solution I shared above :)\n. Hi @rtucek, and thanks for the great explanation,\nUnfortunately, I think you didn't understand my question well. If you read it carefully, I was trying to ask how to transalate slugs for items in my database. That's what this package calls route attributes if you look at the code of the class LaravelLocalization.php.\nWhat I did to solve this situation, is passing to my layout both slugs, so, if a variable route_attributes exists in the layout, then, the language switcher will use it and call the function getURLFromRouteNameTranslated instead of getLocalizedURL.\nI do understand what you were trying to explain, and really appreciate it. Maybe will help other devs to understand the laravel's bootstrapping process.\nCheers,\n. I tried with no luck before your message... the thing is I am translating the routes as well using the transRoute function...\n. ",
    "SolveSoul": "Any updates on this issue?\n. ",
    "hectorsc": "Hi guys, Is this problem solved?, because I have the same problem. In Laravel 5.1 works, but not in laravel 5.2. \nDoes anyone know how to fix it? :(\n. ",
    "elboudi": "i have the same probleme solution is change your midllware LaravelLocalizationRedirectFilter\nif ( !empty( $locales[ $localeCode ] ) )\n            {\n                if ( $localeCode === $defaultLocale && $hideDefaultLocale )\n                {\n                    $redirection = app('laravellocalization')->getNonLocalizedURL();\n                }\n            } else if ( $currentLocale !== $defaultLocale || !$hideDefaultLocale )\n            {\n                // If the current url does not contain any locale\n                // The system redirect the user to the very same url \"localized\"\n                // we use the current locale to redirect him\n                $redirection = app('laravellocalization')->getLocalizedURL(session('locale'),$request->path());\n            }\n. ",
    "Luddinus": "I'm having a similar problem but I don't know how to fix.\nI'd like to save the language in the session, so if I'm in the url \"/home/es\" and I'm going to \"/home\", I want to redirect to \"home/es\" again, but it redirects always to default language (\"home/en\").\nThis is important because I have a facebook login, and facebook redirects to \"/home\", what can I do? I try middlewares etc but id does not work.\nping @mcamara \n. Any ideas?\n. Are you using model binding? I had the same issue\n. ",
    "cescgie": "@zachleigh code works for me. Thank you!\n. ",
    "Indexo-Git": "@mcamara your answer works for me. Thanks. ",
    "kusmierz": "+1\n. https://github.com/mcamara/laravel-localization#middleware\n. ",
    "GarryOne": "+1\n. ",
    "athamid": "yes :100: \nmy laravel version is  v5.1.*  \nthis is :  composer require mcamara/laravel-localization:1.0.* worked :)\nim sorry for open this issues and thanks for your response.\n. ",
    "iwasherefirst2": "Thats a good workaround @simplenotezy but it will redirect you the first time always to the browser language even if you have something like mydomain.com/fr/ where you do not want auto-redirecting to browser language. This could be easily fixed by simply checking if a valid locale is given in the url.\nThe problem why you can't use useAcceptLanguageHeader and hideDefaultLocaleInURL\nin the method setLocale from LaravelLocalization (its called in your Route group).  here is the problematic line:\n// if we reached this point and hideDefaultLocaleInURL is true\n            // we have to assume we are routing to a defaultLocale route.\n            if ($this->hideDefaultLocaleInURL()) {\n                $this->currentLocale = $this->defaultLocale;\n            }\n            // but if hideDefaultLocaleInURL is false, we have\n            // to retrieve it from the browser...\n            else {\n                $this->currentLocale = $this->getCurrentLocale();\n            }\nThe problem is that one cannot tell from the domain yourdomain.com by its own, if it is supposed to retrieve the language from the browser or to fall back to default locale.\nI think the best way how to make useAcceptLanguageHeader and hideDefaultLocaleInURL work by default, would be to fix the simplenotezy snippet and integrate it in LocaleSessionRedirect.\nWhat do you think about this @mcamara ? I could make a PR if you want.\n. Are you using the redirecting middleware as stated in the docs?\nRoute::group(\n[\n    'prefix' => LaravelLocalization::setLocale(),\n    'middleware' => [ 'localeSessionRedirect', 'localizationRedirect', 'localeViewPath' ]\n],. Is this still an issue?\nI just measured the execution time for\n$alternate = [];\nforeach (LaravelLocalization::getSupportedLocales() as $alternate_locale => $prop) {\n    $alternate[] = \"    <xhtml:link rel='alternate' hreflang='$alternate_locale' href='\" . LaravelLocalization::getLocalizedURL($alternate_locale, route('test', ['slug' => $page->translate($alternate_locale)->slug])) . \"' />\";\n}\nand it took 0.0096086101531982 seconds with 50 activated languages.\nIf you just worry about the fact that your code isn't pretty you could move \nurl($alternate_locale . '/' . str_replace(['{slug}'], [$page->translate($alternate_locale)->slug], trans('routes.pages.show', [], $alternate_locale)) into a helper function?\n. Maybe, I am new to this package so I can't tell. . Its already a build in feature. If you want instead of http://myapp/fr/about the translated route http://myapp/fr/a-propos then just define them in  /resources/lang/fr/route.php as explained at https://github.com/mcamara/laravel-localization#translated-routes . If your translated routes are stored in DB or json doesn't matter, you can just iterate them whereever they come from with PHP and add to your array.. You have to write in /en/routes.php \n```\nreturn [\n     'prodotti_with_slug' => 'products / {category} / {slug}',\n];\n```\nAnd in in /it/routes.php \n```\nreturn [\n     'prodotti_with_slug' => 'prodotto / {category} / {slug}',\n];\n```\nIn your App/route/web.php your need something like this:\nRoute::group(\n[\n    'prefix' => LaravelLocalization::setLocale(),\n    'middleware' => [ 'localize' ] // Route translate middleware\n],\nfunction() {\n    /** ADD ALL LOCALIZED ROUTES INSIDE THIS GROUP **/\n        Route::get(LaravelLocalization::transRoute('prodotti_with_slug'), 'ProductCategoryController@index');. Can you specify your problem? Mabye https://github.com/mcamara/laravel-localization/issues/580 helps. > > But that infomation should be in documentation...\n\nIt is! It is on the front page of the project\nhttps://github.com/mcamara/laravel-localization#config-files\nWhen you have calmed down, perhaps you can apologise for your offensive language.\n\nThank you! That helped. \nI would also recommend to add a link in the section https://github.com/mcamara/laravel-localization#usage to  https://github.com/mcamara/laravel-localization#config-files since it says you have to edit supportedLocales but its only explained at the very bottom of the page how to actually do that.. Maybe your browser language is en and not ar ? By default, if no locale is given in the url, the app will try to get your default language from browser. If you want everyone to be redirected to ar despite your browser language you need to disable useAcceptLanguageHeader in config\\laravelocalization.php \n// Negotiate for the user locale using the Accept-Language header if it's not defined in the URL?\n// If false, system will take app.php locale attribute\n'useAcceptLanguageHeader' => false,. Yes this was also a fix to #585 ! :). Use the following setting in config/laravellocalization.php : \n// Negotiate for the user locale using the Accept-Language header if it's not defined in the URL?\n    // If false, system will take app.php locale attribute\n    'useAcceptLanguageHeader' => true,\nThis detects the language automatically from browser (note that this is more complicated then just $lang = substr($_SERVER['HTTP_ACCEPT_LANGUAGE'], 0, 2); you can set multiple languages for a single browser and rank them). This stores the language in the session, not as a cookie.\nYou may store and load it in a cookie with a custom middleware and use the SessionRedirect Middleware. Something like this:\n```\n  public function handle($request, Closure $next)\n    {\n  $params           = explode('/', $request->path());\n\n if (\\count($params) > 0 && Language::isAllowed($params[0])) {\n      $requestedLocale  = $params[0];\n      session(['locale' => $requestedLocale]);\n      Cookie::queue('locale', $requestedLocale , (60 * 24 * 30 * 12), '/');\n  }\n\n $lang = session('locale', false);\n\n    if(empty($lang) && Cookie::has('locale'))\n    {\n        if(Language::isAllowed(Cookie::get('locale')))\n        {\n            $lang = Cookie::get('locale');\n      $request->session()->put('locale', $lang);\n        }\n        else{\n      Cookie::queue(\n                 Cookie::forget('locale')\n      );\n        }\n    }\n\n    if(empty($lang))\n    {\n        $allowed_langs = \\Config::get('constants.lang')[getOrga()];\n        $lang = $this->detectLangFromBrowser($allowed_langs);\n$request->session()->put('locale', $lang);\n\n    }\n\n```\n. ",
    "nadj": "Hi, I have some similar problem. \nI'm using getLocalizedURL for creating the lang selector. The problem appears when it needs to create translated route with a parameter (slug). I'm using the routes.translation event listener but in there I have no access to the locale sent by getLocalizedURL and because of that I don't know to which language to translate the slug.\nI found one solution in an older thread, but that looks not that elegant.\nhttps://github.com/mcamara/laravel-localization/issues/135\n. ",
    "encodia": "We've got the same identical issue here.\nI'd like to use: \n@foreach(LaravelLocalization::getSupportedLocales() as $localeCode => $properties)\n        <link rel=\"alternate\" href=\"{{LaravelLocalization::getLocalizedURL($localeCode) }}\" hreflang=\"{{$localeCode}}\" />\n    @endforeach\nin my header  view, but it returns the current not translated slug. Anyone here? \nThank you\n. @canfiax did you find any solution for you?\nThank you\n. ",
    "j0k3rabg": "Does anyone have a solution for the bug?\n. ",
    "richestsoft": "Has anybody find the solution for above issue?. ",
    "riccardo993": "I have the same problem.\nIf I dump the $url variable in the getLocalizedURL static method:\nif ($this->checkUrl($url)) {\n     return $url;\n}\nIt dumps a correct url (except for the missing locale) but when it echoes in the view, the url is totally different. I can't understand what goes wrong in the middle.. Any idea on how to fix this?. Hello guys,\nI've found my mistake. Well, I don't know why but even if you are looping it in your blade view, you need to add the localize middleware in your route file:\n`Route::group(['prefix' => LaravelLocalization::setLocale(), \n'middleware' => [ 'localize', 'localeSessionRedirect', 'localizationRedirect' ]\n], function()\n{ \n    Route::get(LaravelLocalization::transRoute('routes.groups'), 'PostController@showByGroup');\n});`\nNow it works! Hope it helps!\nByee. ",
    "rjsworking": "@mgarciadelojo See this old issue #201 \n. Hi. You should not change core files. See the solution in #201. \nCheers \n. @czim Tried your solution but found a problem.\nWhen a user types site.com he's redirected to site.com/en or whatever the default locale is. With your soltution the redirect doesn't happen. It only works ok if the user types site.com/en. \nCheers\n. @czim Thank you. Sure I will. Let me get some time to perform another test with a fresh project and then I create the issue if needed.\nCheers\n. ",
    "scorpionick": "I found a fix!!!!\nroutes.php\n```\nforeach(LaravelLocalization::getSupportedLocales() as $language => $properties) {\nRoute::group(\n[\n  'as' => $language.\".\",\n  'middleware' => ['localeSessionRedirect', 'localizationRedirect'],\n  'prefix' => $language,\n],\nfunction () use ($language){\n...\n});\n}\n```\nController.php\nclass Controller extends BaseController\n{\n    use AuthorizesRequests, AuthorizesResources, DispatchesJobs, ValidatesRequests;\n    public function __construct()\n    {\n      \\LaravelLocalization::setLocale();\n    }\n}\nvendor\\laravel\\framework\\src\\Illuminate\\Foundation\\helpers.php\nif (! function_exists('route')) {\n    /**\n     * Generate a URL to a named route.\n     *\n     * @param  string  $name\n     * @param  array   $parameters\n     * @param  bool    $absolute\n     * @return string\n     */\n    function route($name, $parameters = [], $absolute = true)\n    {\n        return app('url')->route(LaravelLocalization::getCurrentLocale().'.'.$name, $parameters, $absolute);\n    }\n}\nAfterward php artisan route:cache  works like a charm! ENJOY!\n. ",
    "czim": "If anyone's interested, I wrote a simple solution that works fine for our company's projects:\nhttps://github.com/czim/laravel-localization-route-cache\nThis allows you to use artisan route:trans:cache to set a cache for all supported locales in separate files, and it loads the cached file corresponding to the relevant locale. \nAdditionally, you can list the routes for a specific locale with artisan route:trans:list {locale}.\nIt's not pretty, a bit of a hack-job (using a putenv() trick), but it doesn't mess with core files and it should be transparent to the rest of the app. \nYour mileage may vary, but I very much welcome feedback & suggestions.\n. Can you make an issue out of it in my repo, with some snippets from the routes file, so I know how you've set it up? I'll try to reproduce and fix it then.\n. The problem mentioned by rsdev000 has been fixed in a new version, thanks to MrVokia. \n. ",
    "nicklasos": "@mcamara Hey! You should merge this package https://github.com/czim/laravel-localization-route-cache\nWhat do you think about it?. ",
    "arielstt": "+1 in Laravel 5.2\n. Hi Everyone,I've ended up using arcanedev/localization which works OK with Laravel 5.2.\n. Just in case anyone is interested, I'm using https://github.com/micheleangioni/laravel-js-lang-converter to handle Laravel messages from javascript.\n. ",
    "francoisdusautoir": "+1  please  :)\n. I have the same problem, with the getLocalizedURLfunction. What is the issue to solve it ?. ",
    "WeltonLSantos": "Gracias.\n. ",
    "hamzstramgram": "I'm having the same issue, did you find a solution?\n. I'm having the same issue. Anyone found a solution ?\n. I commented the middleware \"\\App\\Http\\Middleware\\LocaleMiddleware::class,\" in Kernel.php\nNow it is working fine but is it safe to do that ? Might break something else ?\n. ",
    "BafS": "I have the same error but your fix does not work for me. In route.php $this->app['laravellocalization']; is not found but I have follow the instructions and added LaravelLocalizationServiceProvider.\n. I have the same bug, any news about this issue ?\n. ",
    "cona88": "in the file Kernel.php, i don't find \"\\App\\Http\\Middleware\\LocaleMiddleware::class,\", can you attached the Kernel.php?\n. thanks @hamzstramgram , you suggest me solution, my root cause: before i created middle locale so it impact with this. I remove it, system working ok.\n. ",
    "pascalbaljet": "Use named routes.\n. ",
    "myleskadusale": "Sorry found the answer :)\n\\App::getLocale()\n. ",
    "insp3": "Route.php file have something like this:\n```\nRoute::group(['prefix' => 'b2b', 'as' => 'b2b::'], function () {\n    Route::group(\n        [\n            'prefix' => LaravelLocalization::setLocale(),\n            'middleware' => [ 'localeSessionRedirect', 'localizationRedirect' ]\n        ],\n        function()\n        {\n            Route::get('/', array('as' => 'b2b-dashboard','uses' => 'B2bController@getDashboard'));\n});\n\n});\n```\nbut www.example.com/b2b/en/ doesnt work:\n\nNotFoundHttpException in RouteCollection.php line 161:\n. Thank you for your response. I know how prefixes works. \n\nIf i just wrap and use localization then url will be redirected to:\nwww.example.com/en/b2b/\nbut i want\nwww.example.com/b2b/en/\nIt looks more natural and right.. If we can define in config file our prefixes where we like to use localization then it will be create. Like in array ['b2b', 'admin', 'etc']. Its simple enough.. I think i and arquadrado are not the only one who needs this prefix support.. ",
    "bm2ilabs": "Update: i think this problem is the same as #174 but it works in first level ex: \nproducts.app/fr/product\nbut not in \nproducts.app/fr/product/product-01\n. ",
    "fede91it": "+1\n. I am using the event because I have to translate the parameters present in the URL, as well as the routes themselves.\nWe are in /gasoline/cars and through the LaravelLocalization::getLocalizedURL('it') I want to generate the right translated URL in Italian (which is /benzina/macchine). The routes are:\n/resources/lang/en/routes.php\nphp\nreturn [\n    'cars' => '{fuel}/cars'\n];\n/resources/lang/it/routes.php\nphp\nreturn [\n    'cars' => '{fuel}/macchine'\n];\nThe strange behaviors are two.\n1. If there is no listener for routes.translation event, the routes are translated correctly but not the parameters (as expected): /it/gasoline/macchine\n2. If the listener exists, not only the translated parameters returned by it are ignored, nor the routes are translated but the prefix of the language is added: /it/gasoline/cars instead of /it/benzina/macchine as expected.\nMorover, the routes.translation event is fired with only one parameter, the attributes, so I really don't understand how the listener should know which locale use to translate the attributes (now I forced to italian)\n. Any news here? I debugged the code but I some help to fix this issue\n. +1 please, I need to solve the problem and I can pay for an help!\n. Same here, both with Laravel 5.4 and 5.5.\nMore precisely, it doesn't work only for the last parameter of the route. If my route has two parameterers, only the first is localized. If it has three parameters only first two are translated, etc.\nAnyone has found where is located that issue? \nTo @mtx-z, also LaravelLocalization::getURLFromRouteNameTranslated doesn't work fine for me.. Yes, I use the routes name from the translation file but both getLocalizedURL and getURLFromRouteNameTranslated work as described in my previous comment.. I found a working workaround:\nphp\n$routeName = 'routes.' . Route::currentRouteName();\n$translatedParameters = current(event('routes.translation', [$localeCode, Route::current()->parameters]));\n$translatedUrl = LaravelLocalization::getURLFromRouteNameTranslated($localeCode, $routeName, $translatedParameters);. The workaround I found does not work with routes defined as resources.\nA small variation is needed:\n```php\n$routeName = 'routes.' . Route::currentRouteName();\n$translatedParameters = current(event('routes.translation', [$localeCode, Route::current()->parameters]));\nif (!empty($translatedParameters)) {\n    $itemUrl = LaravelLocalization::getURLFromRouteNameTranslated($localeCode, $routeName, $translatedParameters);\n} else {\n    $itemUrl = LaravelLocalization::getLocalizedURL($localeCode);\n}\n```\n@mcamara Could we find a definitive solution to this problem?. @Grupa-Leonardo any suggestion? . Unfortunately it is too minimal a solution, I have more specific needs that currently only mcamara can satisfy.\nI found this other project, which looks like an improved mcamara clone:\nhttps://github.com/ARCANEDEV/Localization . I'm on 1.3.16 and doesn't work\nAny ideas?. ",
    "marcbelletre": "I have the exact same problem as @fede91it.\nI'm trying to use the event listener in order to translate slugs when using getLocalizedUrl. For example I would like to have the following routes:\n- /fr/programmation/spectacles\n- /en/program/shows\nIn my routes translation file I have the following line:\nphp\nreturn [\n   'program' => 'programmation/{category?}',\n];\nI'm displaying the language switcher using this:\nhtml\n@foreach( LaravelLocalization::getSupportedLocales() as $localeCode => $properties )\n   <li>\n      <a rel=\"alternate\" hreflang=\"{{ $localeCode }}\" href=\"{{ LaravelLocalization::getLocalizedURL($localeCode) }}\"{!! LaravelLocalization::getCurrentLocale() === $localeCode ? 'class=\"active\"' : '' !!}>{{ $localeCode }}</a>\n   </li>\n@endforeach\nAnd finally my event listener in EventServiceProvider.php\n```php\nEvent::listen('routes.translation', function($locale, $attributes) {\n   if( array_key_exists('category', $attributes) ) {\n      $category = Category::whereTranslation('slug', $attributes['category'])->first();\n  if( $category && $category->hasTranslation($locale) ) {\n     $attributes['category'] = $category->translate($locale)->slug;\n  }\n\n}\n   return $attributes;\n});\n```\nI know the event is firing because I can dump my Category model. However it doesn't change anything in the localized URL.\nI get the same behaviors described by @fede91it here. Without the event listener I get:\n- /fr/programmation/spectacles\n- /en/program/spectacles\nBut I get these results with the event listener whatever I write in it:\n- /fr/programmation/spectacles\n- /en/programmation/spectacles\nI know this issue has been closed but it looks like it still hasn't been solved. Or maybe I'm doing something wrong?\nI'm using the lastest version (1.3.4) with Laravel 5.5.34.\nUPDATE\nUnfortunately I didn't manage to solve this issue but I found the origin of the problem.\nIn the function findTranslatedRouteByUrl, there is a loop going through all translated routes and checking for each one if the corresponding URL is equal to the URL we are trying to translate.\n```php\n$routeName = $this->getURLFromRouteNameTranslated($locale, $translatedRoute, $attributes);\nif ($this->getNonLocalizedURL($routeName) == $this->getNonLocalizedURL($url)) {\n   return $translatedRoute;\n}\n```\nIn my case, $url is equal to /programmation/spectacles but $routeName is equal to /programmation/shows because the attributes have been replaced by its english translation.\nI guess my only solution here is to overwrite this function so it can look for the attributes translations.. ",
    "Jordy-A": "See #324 \n. ",
    "workzentre": "I am not sure this was a good idea, sometimes permanent redirects are needed, I believe there should be a way to declare the status on the config file instead, than forcing all requests to status 302.. ",
    "amenk": "Why don't you use de-CH and fr-CH for the path ?. ",
    "mexme": "I ended up using de-CH and fr-CH. Question originated from a clients' request, I personally didn't mind. :). ",
    "ncarreno": "I have the same problem. I have a website that is running under Laravel 5.2.31 and this package is working fine. However I have problems with another website that is running under Laravel 5.2.39. If I change the language from mydomain.com to mydomain.com/en and then I try to change the language again it doesn't work and the website redirect me to mydomain.com/en version every time. It only works if I remove localeSessionRedirect middleware from my route but I think this is not the best solution\n. ",
    "maunoxyd": "Same here!\n. ",
    "cmarfil": "+1\n. I found a solution:\nIn Kernel.php remove middlewares from $routeMiddleware and create new middleware group, then put the package middlewares in the new group, named \"localized\" for example.\n``` php\n    protected $middlewareGroups = [\n        'web' => [\n            \\App\\Http\\Middleware\\EncryptCookies::class,\n            \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n            \\Illuminate\\Session\\Middleware\\StartSession::class,\n            \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n            \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n            \\Xinax\\LaravelGettext\\Middleware\\GettextMiddleware::class,\n        ],\n    'localized' => [\n        'localize' => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRoutes::class,\n        'localizationRedirect' => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRedirectFilter::class,\n        'localeSessionRedirect' => \\Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect::class\n    ],\n\n    'api' => [\n        'throttle:60,1',\n    ],\n];\n\n```\nThen, in your routes.php put the middleware group:\nphp\nRoute::group(['prefix' => LaravelLocalization::setLocale(), 'middleware' => ['localized', 'web']], function() {\n...\n}\nRegards.\n. I found the solution, the problem is in Middleware LaravelLocalizationRedirectFilter, override it and filter for file extension.\n``` php\n        //Fix 4 no redirect if extension is file\n        $lastParam = end($params);\n        $fileRegex = '/^.*.(jpg|jpeg|png|gif|bmp|tiff|pdf|)$/i';\n        $isFile = (preg_match($fileRegex, $lastParam));\n    if ( count($params) > 0 && !$isFile){\n       ...\n\n```\nComplete solution:\nCreate file app/Htpp/Middleware/LaravelLocalizationRedirectFilter.php\n``` php\n<?php //namespace Mcamara\\LaravelLocalization\\Middleware;\nnamespace App\\Http\\Middleware;\nuse Closure;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nclass LaravelLocalizationRedirectFilter {\n/**\n * Handle an incoming request.\n *\n * @param  \\Illuminate\\Http\\Request $request\n * @param  \\Closure $next\n * @return mixed\n */\npublic function handle( $request, Closure $next )\n{\n\n    $currentLocale = app('laravellocalization')->getCurrentLocale();\n    $defaultLocale = app('laravellocalization')->getDefaultLocale();\n    $params = explode('/', $request->path());\n\n    //Fix 4 no redirect if extension is file\n    $lastParam = end($params);\n    $fileRegex = '/^.*\\.(jpg|jpeg|png|gif|bmp|tiff|pdf|)$/i';\n    $isFile = (preg_match($fileRegex, $lastParam));\n\n    if ( count($params) > 0 && !$isFile)\n    {\n        $localeCode = $params[ 0 ];\n        $locales = app('laravellocalization')->getSupportedLocales();\n        $hideDefaultLocale = app('laravellocalization')->hideDefaultLocaleInURL();\n        $redirection = false;\n\n        if ( !empty( $locales[ $localeCode ] ) )\n        {\n            if ( $localeCode === $defaultLocale && $hideDefaultLocale )\n            {\n                $redirection = app('laravellocalization')->getNonLocalizedURL();\n            }\n        } else if ( $currentLocale !== $defaultLocale || !$hideDefaultLocale )\n        {\n            // If the current url does not contain any locale\n            // The system redirect the user to the very same url \"localized\"\n            // we use the current locale to redirect him\n            $redirection = app('laravellocalization')->getLocalizedURL(session('locale'), $request->path());\n        }\n\n        if ( $redirection )\n        {\n            // Save any flashed data for redirect\n            app('session')->reflash();\n\n            return new RedirectResponse($redirection, 302, [ 'Vary' => 'Accept-Language' ]);\n        }\n    }\n\n    return $next($request);\n}\n\n}\n```\nSet the Middleware in app/Http/Kernel.php\nphp\n'localizationRedirect' => \\App\\Http\\Middleware\\LaravelLocalizationRedirectFilter::class,\nNow redirect is working fine \ud83d\udc4d \n. ",
    "Ossuary": "I still can't get NonLocalizedURL to work... the /en, or whatever language i use, messes my paths and I really don't want it to show.\nI tryed @cmarfil 's solution but i either didn't understand it or i'm messing something up...\nI thought all i had to do was change getLocalizedURL to getNonLocalizedURLon my language selection menu, that atm is like this: \n<ul class=\"lang-select\">\n    @foreach(LaravelLocalization::getSupportedLocales() as $localeCode => $properties)\n        <li>\n            <a rel=\"alternate\" hreflang=\"{{$localeCode}}\" href=\"{{ LaravelLocalization::getLocalizedURL($localeCode) }}\">\n                {{ $properties['native'] }}\n            </a>\n        </li>\n    @endforeach\n</ul>\nAm i totally wrong?\nCan anybody explain or give a working solution please? \n. ",
    "mikenolimits": "I'm having a similar problem, have you found a solution to this @fzhan fzhan?. ",
    "diegorodriguezvidal": "Hi, I think there are some problems with version 1.1.4. This morning I run composer update so mcamara/laravel-localization was update from 1.1.2 to 1.1.4. This update broke my routes and I couldn't get my default locale having 'hideDefaultLocaleInURL' set to true. I installed again version 1.1.2 and everything worked fine again.\nAnother solution: have a look at the bottom of this: (https://github.com/mcamara/laravel-localization/issues/192), this solution also works.\n. ",
    "atouzard": "This solution works fine for me, thanks pal\n. ",
    "allantatter": "Same issue here.. ",
    "vvatitv": "Hello, i'm know that been so much time from date post, but I have the same problem, and I haven't found a solution, so this my test solution:\nI'm using laravel 5.3\nIn routes/web.php\n\n```\nRoute::group(\n[\n    'prefix' => LaravelLocalization::setLocale(),\n    'middleware' => [ 'localize', 'localeSessionRedirect', 'localizationRedirect' ]\n],\nfunction()\n{\n    $current_language = ''; // hideDefaultLocaleInURL => true\nif(LaravelLocalization::getCurrentLocale() != config('app.locale')){\n    $current_language = '/'.LaravelLocalization::getCurrentLocale();\n}\n\n.......\n\n// Registration Routes...\nRoute::post($current_language.'/register', [\n    'as' => 'post.registration',\n    'uses' => 'Auth\\RegisterController@newregistration'\n]);\n\n.......\n\n});\n```\n\nPS. Sorry for my bad english... :)\n. Check in .env \"SESSION_DOMAIN\"\n\nI had the same problem, for example, when i have url: \"/en/login\" and click on link \"home\", i have just \"/home\" without \"/en\". I'm use hidden default language.\n\nSorry for my bad english ;)\n. No, no no... \nI don't change routes... \nIn .env file, you must check params \"SESSION_DOMAIN\", that she \"identical\" your domain...\nExample:\nMy local domain name is: demo.com\nmy .env:\n\nSESSION_DOMAIN=demo.com\n\nAnd I use links how its:\n<a href=\" {{ url( route('home') ) }}\">Home</a>\nIn rotes i'm nothing write..\nI had the same problem on last week, when I tested multilanguage on laravel 5.3, and forgot change this params in .env file, and later two hours i'm just reinstall all progect. Because I thought that it packages conflict...  xD\nSorry for my bad english ;))))\n. If you want, you can change \"boot\" function in your app\\Providers\\AppServiceProvider.php:\npublic function boot()\n    {\n        if (!\\App::environment('local')) {\n            \\URL::forceSchema('https');\n        }\n    }\nand you can control urls with .env file\nAPP_ENV=local - http\nand \nAPP_ENV=production - https\nBut, you needs use links with \"url()\"\nExample: \n<a href=\"{{ url( route('/home') ) }}\"> or <a href=\"{{ url('/home') }}\"> \n. ",
    "antoine1003": "I am getting the same problem and still looking for and answer :/. ",
    "ana-lisboa": "Same here :s. Hi, to anyone with this problem, as ctf0 suggested, I resolved it this way (probably not the best, but it works).\nI am using dimsav/laravel-translatable, and there is a slug field on my page_translations table.\nOn my web routes:\n```\n//localized routes\nRoute::group(['prefix' => LaravelLocalization::setLocale(), 'middleware' => ['localize', 'localeSessionRedirect', 'localizationRedirect'] \n        ], function() {\nRoute::get('/', 'FrontController@index');\n\nRoute::get('/{slug}', 'FrontController@resolver');\n\nRoute::get('/{parent}/{slug}', 'FrontController@resolver2levels');\n\nRoute::get('{grandparent}/{parent}/{slug}', 'FrontController@Resolver3levels');\n\n});\n```\n(we'll only accept 3 levels of subpages)\nOn my FrontController:\n```\npublic function resolver($slug) {\n    //trying to find translation on current locale\n    $translation = \\App\\PageTranslation::with('page.menu.menuItems')->where('slug', $slug)->where('locale', \\App::getLocale())->first();\n\n    if (is_null($translation) || !$translation->page->isActive()) {\n        abort(404);\n    }\n\n    $page = Page::findOrFail($translation->page_id);\n\n    $view = $this->getViewName($page->view_id);\n\n    return XXX;\n}\n\npublic function resolver2levels($parent, $slug) {\n\n    return $this->resolver($parent . '/' . $slug);\n}\n\npublic function resolver3levels($grandparent, $parent, $slug) {\n\n    return $this->resolver($grandparent . '/' . $parent . '/' . $slug);\n}\n\npublic function notificationsTest() {\n    $page = Page::first();\n\n    Auth::user()->notify(new \\App\\Notifications\\NewPage($page));\n}`\n\n```. I will take a look, thanks!!\nAnd btw there are no bazillion columns, i use dimsav/laravel-translatable, witch seems to be similar to spatie/laravel-translatable.\nMy page-translations table:\n\n. That's what I figured you where saying ;)\nHumm, nice, when I was browsing for a translation package I also saw spatie's, but went for dimsav's.. perhaps on another project!. ",
    "alex90badea": "I have the same issue https://github.com/mcamara/laravel-localization/issues/344\nWhen the url has locale segment, the post routes do not work..\n. Thank you, but it does not help me. I need to know when an user changes the language.\n. ",
    "LuciusCaesar": "Same for me... \nIt seems like using 'action()' method when opening the form makes it work while the \"url()\" method makes it bug...\nI have found a work around for when you open a form... But ajax requests are still a real problem.\nThe radical solution I see is to refactor routes file and take all Post request from translations... :/\nWorkaround in opening forms:\n{!! Form::open([\n    'method' => 'POST', \n    'url' => action('SomeController@store'), \n    'class' => 'form-horizontal'\n]) !!}\ninstead of \n{!! Form::open([\n    'method' => 'POST', \n    'url' => url('/some-url'), \n    'class' => 'form-horizontal'\n]) !!}\nor equivalent if you're not using LaravelCollective/html package...\nThough I have no idea about the root cause\nI hope it will work for you too.\n. ",
    "spitfire64": "I had the same problem I tried to put this line first in routes.php\n   App::setLocale('en');\n...and it works, english is my fallback language.\n. ",
    "tomvo": "I'm also hitting this error, almost half a year later, is there already a fix for this? Or any pointers so that we might be able to make a PR? Somebody has some workarounds other than @spitfire64 because that doesn't seem to work for us.. So I checked the code and it seems this might do the trick: https://github.com/mcamara/laravel-localization/compare/master...tomvo:fix-redirect-to-fallback-locale?expand=1\nWould be great if some of the maintainers could chime in on this. ",
    "ZedanLab": "@mcamara \n. ",
    "kvlknctk": "is there another solution without vhost?\n. ",
    "AmrAlfoly": "i had the same problem and let me explain why it is behaving like this :\nin the login view the form method is pointed to '/login'\nand this route is not accessible if the Route::Auth() is inside the localization group\nand you can't hack into the Auth routes to give it a name so you can point the form to\nso it leaves you with one only solution which worked with me \njust get the Route::Auth(); out of the \n`Route::group(['prefix' => LaravelLocalization::setLocale(), 'middleware' => [ 'localeSessionRedirect', \ndoing so will make the Auth routes work just fine using the default language for these routes\nor even another option is that you replace the Route::Auth() inside your routes file with the contents of the auth method :\n// Authentication Routes...\n        Route::get('login', 'Auth\\AuthController@showLoginForm');\n        Route::post('login', 'Auth\\AuthController@login')->name('signIn');\n        Route::get('logout', 'Auth\\AuthController@logout');\n        // Registration Routes...\n        Route::get('register', 'Auth\\AuthController@showRegistrationForm');\n        Route::post('register', 'Auth\\AuthController@register')->name('signUp');\n        // Password Reset Routes...\n        Route::get('password/reset/{token?}', 'Auth\\PasswordController@showResetForm');\n        Route::post('password/email', 'Auth\\PasswordController@sendResetLinkEmail');\n        Route::post('password/reset', 'Auth\\PasswordController@reset');\nnow you can name your routes as you like and uses the names in your forms \nthat's my 2 solutions for this problem \nand i think you will find it in every route used as url not route name like url('/login') you should use URL::route('signIn') and add that name to the route\n. ",
    "zeravcic": "Look at my base MY\\PACKAGE\\App\\Http\\Controllers\\Auth\\LoginController.php controller file:\n``` php\n<?php \nnamespace MY\\PACKAGE\\App\\Http\\Controllers\\Auth;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Foundation\\Auth\\AuthenticatesUsers;\nuse Mcamara\\LaravelLocalization\\Facades\\LaravelLocalization;\nclass LoginController extends Controller \n{\n    use AuthenticatesUsers;\nprotected $redirectTo = \"/admin\";\nprotected $locale;\n\npublic function __construct()\n{\n    $this->middleware('guest', ['except' => 'logout']);\n    $this->locale = LaravelLocalization::setLocale() ? \"/\" . LaravelLocalization::setLocale() : \"\";\n\n}\n\npublic function showLoginForm()\n{\n    $title = trans('bytenet-admin-base::base.login'); // set the page title\n    return view('bytenet-admin-base::auth.login', compact('title'))\n        ->with('locale', $this->locale);\n}\n\npublic function redirectTo()\n{\n    return $this->locale . $this->redirectTo;\n}\n\n// public function login()\n// {}\n\n}\n**Pay attention at redirectTo() method!**\n(linked to trait code Illuminate\\Foundation\\Auth\\RedirectsUsers ``` lines 14-16)\nAnd of course, /path/to/route/file/web.php route file:\n``` php\n<?php\nRoute::group([\n    'middleware' => [ 'localeSessionRedirect', 'localizationRedirect' ],\n    'prefix' => LaravelLocalization::setLocale(),\n    'as' => LaravelLocalization::setLocale() ? LaravelLocalization::setLocale() . \".\" : \"\",\n], function() {\nRoute::group([\n    'middleware' => 'web',\n    'prefix' => 'admin',\n    'namespace' => 'MY\\PACKAGE\\app\\Http\\Controllers',\n    'as' => 'admin::',\n], function ($router) {\n\n    Route::auth();\n    Route::get('logout', 'Auth\\LoginController@logout');\n\n    Route::get('dashboard', 'AdminController@dashboard');\n    Route::get('/', function () {\n        // The '/admin' route is not to be used as a page, because it breaks the menu's active state.\n        return redirect(\n            (LaravelLocalization::setLocale() ? LaravelLocalization::setLocale() . \"/\" : \"\")\n            . 'admin/dashboard'\n        );\n    });\n});\n\n});\n```\nI have hideDefaultLocaleInURL = true \nIt seems to be working fine...\nIm new to laravel so please help me solve - is this correct solution? \n. ",
    "alexleonard": "I've been having issues with this as well. Having the default Auth::routes() in my routes/web.php just results in login POST redirecting back to login GET somewhere in the middleware end of things.\nI found the solution was \n\nSplit all the auth routes out into manual declarations as suggested by AmrAlfoly\nCreate an auth.php routes file and place the POSTed routes into that\nKeep the GET auth routes in your web file (which has the localization middleware). \n\nThis seems to be working well for me.\nApp\\Http\\Kernel\nprotected $middlewareGroups = [\n        'web' => [\n            \\App\\Http\\Middleware\\EncryptCookies::class,\n            \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n            \\Illuminate\\Session\\Middleware\\StartSession::class,\n            \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n            \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n            \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n        ],\n        'allLocalize' => [\n            \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRoutes::class,\n            \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRedirectFilter::class,\n            \\Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect::class,\n        ],\n    ];\nApp\\Providers\\RouteServiceProvider\n```\n    public function map()\n    {\n        $this->mapAuthRoutes();\n        $this->mapWebRoutes();\n    }\nprotected function mapAuthRoutes()\n{\n    Route::group(\n        [\n            'middleware' => ['web'],\n            'namespace' => $this->namespace,\n        ],\n        function ($router) {\n            require base_path('routes/auth.php');\n        }\n    );\n}\n\nprotected function mapWebRoutes()\n{\n    Route::group(\n        [\n            'middleware' => ['web', 'allLocalize'],\n            'namespace' => $this->namespace,\n            'prefix' => LaravelLocalization::setLocale(),\n        ],\n        function ($router) {\n            require base_path('routes/web.php');\n        }\n    );\n}\n\n```\nroutes/auth.php\nRoute::post('login', 'Auth\\LoginController@login')->name('login.post');\nRoute::post('logout', 'Auth\\LoginController@logout')->name('logout.post');\nRoute::post('register', 'Auth\\RegisterController@register')->name('register.post');\nRoute::post('password/email', 'Auth\\ForgotPasswordController@sendResetLinkEmail');\nRoute::post('password/reset', 'Auth\\ForgotPasswordController@reset');\nroutes/web.php\nRoute::get('login', 'Auth\\LoginController@showLoginForm')->name('login');\nRoute::get('register', 'Auth\\RegisterController@showRegistrationForm')->name('register');\nRoute::get('password/reset/{token?}', 'Auth\\ResetPasswordController@showResetForm');\nI haven't actually gotten around to testing whether this separation of GET/POST is required for forgot password etc, but it certainly worked straight off on the login POST.. ",
    "cihankusmez": "After digging google i got some ideas. And i build the redirection method. I want to share.\nIn AuthController we should override redirectPath method. You can write code below. It redirects user to different language depends on user's language choice in database.\n\npublic function redirectPath()\n    {\n        if (property_exists($this, 'redirectPath')) {\n            return $this->redirectPath;\n        }\n        if(auth()->check())\n        {\n            LaravelLocalization::setLocale(auth()->user()->language);\n            return LaravelLocalization::getLocalizedURL();\n        }\n        return route('home');\n    }\n. \n",
    "screenager": "That won't work, you can't set dynamic values in a protected field\nHowever, in Laravel 5.3, you can add this method to app/Http/Controllers/LoginController.php \npublic function redirectTo() {\n    return auth()->user()->language;\n}\nThen the $redirectTo property will be ignored. ",
    "eanoriega20": "great job ealfonso, now is working to me too after that fix\n. ",
    "jerik": "Did you activate the middleware from laravel-localization? \n\nSo, if a user navigates to http://url-to-laravel/test and the system has this middleware active and 'en' as the current locale for this user, it would redirect (301) him automatically to http://url-to-laravel/en/test.\n\nIf, is the localeavailable in your session?\n\nOnce the locale is defined, the locale variable will be stored in a session (if the middleware is enabled), so it is not necessary to write the /lang/ section in the url after defining it once, using the last known locale for the user. If the user accesses to a different locale this session value would be changed, translating any other page he visits with the last chosen locale.\n. \n",
    "emil126a": "I'm keen to know response as well.\n. ",
    "difuse": "Obviously, everything works well under 5.3. I think some adaptations are necessary. Can do we rely on maintenance of this version ? (Sorry for my approximately english ! \ud83d\ude04 )\n. ",
    "goowikns": "Do we need to modify any files to support Laravel 5.3? . Thanks! I might be using this method as there are a few identical sections (+ I can translate the forms).\nStill if anyone has a different method/take on this, do share :). ",
    "Christophvh": "This error is ocuring before model binding. This is just the routes and translations only, not getting to the controller part yet.\n. ",
    "aFluxx": "Is there a way to solve this issue?. Hello there,\nI'm wondering.\nI'm also using these $routeMiddleware (Laravel 5.7 and laravel-localization 1.3\nI'm not having this issue?\nI am subbed to these issues and I saw this one pop up, just wondering.... I'm not sure but I think you should put your routes in \\routes\\web.php not in routes.php, so the clue is to make sure that you put them in the web.php file.\nMaybe you could try that?\nEDIT: I think http/routes.php is from older version then Laravel 5.7. Also ran into this problem, removing the post route from the group:prefix solves the issue.\nBut it's not best practice.. How exactly? This might be better then how I did it . Thanks, stashing this away for when I refactor, thanks for helping me out!. Silly me, I just had to call the route helper method.\n\nhref=\"{{ route('pigeon.create') }}\"\n. Have you implemented these two things:\nhttps://github.com/mcamara/laravel-localization#laravel-compatibility\n\nFirst you have to register the four redirection middleware in Kernel.php\n```\n'localize' => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRoutes::class,\n        'localizationRedirect' => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRedirectFilter::class,\n        'localeSessionRedirect' => \\Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect::class,\n                'localeViewPath' => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationViewPath::class\n```\nAnd after that you have to specify the right prefix and middleware for the routes:\nRoute::group(['prefix' => LaravelLocalization::setLocale(), 'middleware' => [ 'localeSessionRedirect', 'localizationRedirect', 'localeViewPath' ]], function () {\n   // Here be all your routes that you want automatically redirected.\n});\nI've implemented it like this and this works for me, hope this could shed you some light!. Try updating to laravel-localization 1.3, I can see in the docs that 1.1x is not supported for laravel 5.7\nhttps://github.com/mcamara/laravel-localization#laravel-compatibility. ",
    "brada1703": "Thanks @fcaivano for your suggestion, but I'm still having the same issue. Does anyone else know what this could be?\nBy the way, I'm using Laravel 5.4. \nThanks!. ",
    "budgetteknologies-spree-contrib": "hi i am having a same issue with same problem what is the solution\ni even ran  composer dump-autoload. ",
    "edurodriguesdias": "I have the same issue :(\nI'm using Laravel 5.4. I had the same error, but my mistake was a locale seted on config/app.php file that was not equal the locale alias from laravellocalization.php file. \nFor brazilians programmers, change the index 'pt-BR' for 'pt-br' on the line 147 of laravellocalization.php file or check your locale in config/app.php and change it.. ",
    "hsntngr": "same here +1 laravel 5.7. @aFluxx actually in my stuation, debugbar caused that error, I run php artisan debugbar:clear  and now its ok. But still I'm having crucial issues. My routes under the app/http/routes.php can not recognize by laravel localization either laravel. I tried with empty laravel project and laravel localization and got same error again. So I moved all routes under to /routes directory..Probably I made serious mistake in somewhere but still I couldn't figure out where it is. . @aFluxx as I know routes directory has been using since 4.2 (or may be more than that) and in the docs it says all localized routes should be in routes.php (// app/Http/routes.php just above it specify the routes.php path). But it doesn't work at all for me.\nAlso instead of stucking all routes in web.php I use separate files in /routes directory.. I created new middleware group in App\\Http\\Kernel::$middlewareGroups called by localized, and added localization middlewares here.. I think this is more clean with that way\nphp\n//Kernel.php::$middlewareGroups\n        'translate' => [\n            \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRoutes::class,\n            \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRedirectFilter::class,\n            \\Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect::class,\n        ],\n//RouteServiceProvider::mapWebRoutes();\n        Route::group([\n            'middleware' => [\"web\",\"localized\"],\n            'namespace' => $this->namespace,\n        ], function ($router) {\n            require base_path('routes/store.php');\n            require base_path('routes/posts.php');\n            require base_path('routes/users.php');\n        });. @tatgv I think it should be in Http/Kernel.php where the route middlewares stored in . @aFluxx  I made a typo, it's 1.3.16 . ",
    "tatgv": "These might be silly of me but this problem happened in my project when I added the lines in the wrong Kernel.php from the consolefolder\nHave to add these:\n'localize' => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRoutes::class,\n        'localizationRedirect' => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRedirectFilter::class,\n        'localeSessionRedirect' => \\Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect::class,\n        'localeViewPath' => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationViewPath::class\nin\nApp\\Http\\Kernel.php. @hsntngr Exactly, that's what I'm saying. I didn't pay attention and put it in the wrong Kernel file. . ",
    "MathieuDoyon": "@thusfar7 You can change hideDefaultLocaleInURl to tru in your config.\nhttps://github.com/mcamara/laravel-localization/blob/master/src/config/config.php#L310\n. ",
    "aidanayala": "Thank you.\nSo you just replace your in page links with <a href=\"{{url(SESSION_DOMAIN . '/about')}}\">About</a>\nFor example?\n. Ah, brilliant thank you!\n. ",
    "chadidi": "You can fix it by going to this file\n/vendor/mcamara/laravel-localization/src/Mcamara/LaravelLocalization/LaravelLocalization.php\nand search for\n$parsed_url[ 'path' ] = $locale . '/' . ltrim($parsed_url[ 'path' ], '/'); \nyou will find something like this\nif ( !empty( $locale ) && ( $locale != $this->defaultLocale || !$this->hideDefaultLocaleInURL() ) )\n        {\n            $parsed_url[ 'path' ] = $locale . '/' . ltrim($parsed_url[ 'path' ], '/');\n        }\n        $parsed_url[ 'path' ] = ltrim(ltrim($base_path, '/') . '/' . $parsed_url[ 'path' ], '/');\nreplace the code with this\n$parsed_url[ 'path' ] = $locale . '/' . ltrim(ltrim($base_path, '/') . '/' . $parsed_url[ 'path' ], '/');\n* Soory for my bad english *\n. ## You can fix it by going to this file\n/vendor/mcamara/laravel-localization/src/Mcamara/LaravelLocalization/LaravelLocalization.php\nand search for\n$parsed_url[ 'path' ] = $locale . '/' . ltrim($parsed_url[ 'path' ], '/'); \nyou will find something like this\nif ( !empty( $locale ) && ( $locale != $this->defaultLocale || !$this->hideDefaultLocaleInURL() ) )\n        {\n            $parsed_url[ 'path' ] = $locale . '/' . ltrim($parsed_url[ 'path' ], '/');\n        }\n        $parsed_url[ 'path' ] = ltrim(ltrim($base_path, '/') . '/' . $parsed_url[ 'path' ], '/');\nreplace the code with this\n$parsed_url[ 'path' ] = $locale . '/' . ltrim(ltrim($base_path, '/') . '/' . $parsed_url[ 'path' ], '/');\n* Soory for my bad english *\n. ## You can fix it by going to this file\n/vendor/mcamara/laravel-localization/src/Mcamara/LaravelLocalization/LaravelLocalization.php\nand search for\n$parsed_url[ 'path' ] = $locale . '/' . ltrim($parsed_url[ 'path' ], '/'); \nyou will find something like this\nif ( !empty( $locale ) && ( $locale != $this->defaultLocale || !$this->hideDefaultLocaleInURL() ) )\n        {\n            $parsed_url[ 'path' ] = $locale . '/' . ltrim($parsed_url[ 'path' ], '/');\n        }\n        $parsed_url[ 'path' ] = ltrim(ltrim($base_path, '/') . '/' . $parsed_url[ 'path' ], '/');\nreplace the code with this\n$parsed_url[ 'path' ] = $locale . '/' . ltrim(ltrim($base_path, '/') . '/' . $parsed_url[ 'path' ], '/');\n* Soory for my bad english *\n. ## replace this .\nif ( !empty( $locale ) && ( $locale != $this->defaultLocale || !$this->hideDefaultLocaleInURL() ) ) { $parsed_url[ 'path' ] = $locale . '/' . ltrim($parsed_url[ 'path' ], '/'); } $parsed_url[ 'path' ] = ltrim(ltrim($base_path, '/') . '/' . $parsed_url[ 'path' ], '/');}\nwith this\nif ( !empty( $locale ){\n$parsed_url[ 'path' ] = $locale . '/' . ltrim(ltrim($base_path, '/') . '/' . $parsed_url[ 'path' ], '/');\n}. @phpspider and remove the line you are talking about. ### it's working i tested but you can add this instead to check if it's not empty\nif ( !empty( $locale ) )\n        {\n            $parsed_url[ 'path' ] = $locale . '/' . ltrim(ltrim($base_path, '/') . '/' . $parsed_url[ 'path' ], '/');\n        }\n. @sangnguyenplus did it happend to you when you added my code or before cause it's working correctly with me, check your routes and your apache configurations .\n. @mcamara can you please upgrade this package to work with laravel 5.4.* thanks.. ",
    "lordantonelli": "I can not get back to the default language when I use 'hideDefaultLocaleInURL' => true\nThe system language remains with the one that was previously selected.\nHow to solve this problem?. ",
    "macikgoz25": "Session::set('lang',\"en/es/tr/etc\");\n. ",
    "letschke": "Hello ctf0,\nthanks for the hint but unfortunately changing order of the middlewares didn't fix the error. Still the same. Do you have another idea?\nHere my current routes info:\nphp\nRoute::group(['prefix' => LaravelLocalization::setLocale(),'middleware' => ['web', 'localeSessionRedirect', 'localizationRedirect']], function () {\n    Route::group(['namespace' => 'Frontend'], function() {\n        Route::get('newsletter', ['as' => 'newsletter', 'uses' => 'SubscriberController@create']);\n        Route::post('newsletter', ['as' => 'newsletter_store', 'uses' => 'SubscriberController@store']);\n    });\n});. Hello ctf0,\nhad the same issue on Laravel 5.3.\nI have now added handling of validation errors in the render function of the app/Exceptions/Handler.php in order to return to the view directly and show possible validation errors to the user.\nif ($exception instanceof ValidationException) {\n    return parent::render($request, $exception);\n}\nThis has resolved the issue in Laravel 5.2 as well as 5.3\nThanks for your help!. ",
    "Scarwolf": "Whoops, sorry. It was a bit unclear that getLocalizedURL converts the current URL\n. ",
    "mttmzr": "It seems that you have to visit http://your-domain.com/en to change to your default locale despite having set the hideDefaultLocaleInURL to true. You will be redirected immediately to http://your-domain.com.\n\nJust as a note:\nI had the same problem when I added the middlewares in wrong order.\nContrary to the docs I copy&pasted the middleware directly to the web middleware group and removed the array keys:\n``` php\nclass Kernel extends HttpKernel {\n    // Taken from the docs:\n    // protected $routeMiddleware = [\n    //     /* OTHER MIDDLEWARE /\n    //     'localize' => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRoutes::class,\n    //     'localizationRedirect' => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRedirectFilter::class,\n    //     'localeSessionRedirect' => \\Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect::class\n    //     // REDIRECTION MIDDLEWARE\n    // ];\n    //\n    // How I did it (Laravel 5.3):\n    protected $middlewareGroups = [\n        'web' => [\n            /* OTHER MIDDLEWARE /\n            // \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRoutes::class,\n            //\n            // The following two are in the wrong order:\n            \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRedirectFilter::class,\n            \\Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect::class,\n        ],\n        'api' => [\n            // ...\n        ]\n}\n```\nWhen I changed the order of the two middlewares to the order stated in the docs it worked:\nphp\n// Docs: 'middleware' => [ 'localeSessionRedirect', 'localizationRedirect' ]\n\\Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect::class,\n\\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRedirectFilter::class,\nTo change to the default language (en), you have to visit http://your-domain.com/en, though.\n. Yes, I guess this behavior is intentional. Otherwise, your user's preferred language would be set to English every time they hit your home page. (I guess almost everybody likes enter a site on the home page and then get redirected to the preferred language)\nTo switch back to en, try inputting http://your-domain.com/en, just to switch the language. You should be redirected to http://your-domain.com/ then. \n. ",
    "congkevin": "Thanks for the opinion.\nI tried changing the order of Kernel.php, but still doesnot work.\n\\Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect::class,\n\\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRedirectFilter::class,\nmy default langauge is en. When I access indonesia page http://your-domain.com/id, i can access it well. However, when i change language back to default language by inputting url http://your-domain.com, it still redirect me to http://your-domain.com/id\n. aa, finally i got what you mean! this solves the problem.\nThank you very much for your suggestion. It really helped!!!\nHowever I am looking for solution of fixing 'hideDefaultLocaleInURL' => true  session problem.\nSeems this is this package bug and not yet been resolved yet.\nI will you your suggestion until this issue been solved\n. @chadidi \nThank you for your suggestion!\nYour suggestion is okay is the document root is in public.\nHowever if the document root is not in public, it will route to \neg. \"id/.../public/file\"\nHowever, I think I found the solution.\njust change code below\nif ( !empty( $locale ) && ( $locale != $this->defaultLocale || !$this->hideDefaultLocaleInURL() ) )\ninto\nif ( !empty( $locale ) )\nI have checked and it solved my problem\n. please see my previous comment\n\ncongkevin commented on Nov 18, 2016. i dont know how to fix your problem. meanwhile, you can use other solution.\nHappy coding. > I would like to simply visit a link like http://your-domain.com/ (without /en inside the URL) and switch language to en.\n\nRegarding your problem, as i mentioned in previous comment, it should be solved.\n\njust change code below\nif ( !empty( $locale ) && ( $locale != $this->defaultLocale || !$this->hideDefaultLocaleInURL() ) )\ninto\nif ( !empty( $locale ) )\n\neg. http://test.com/id/item  -> when you click english button, it should return into http://test.com/item.\nI just tried with my codes and it works.. ",
    "aries84ct": "Hello @congkevin,\nI have the same problem...\nDid you find a way to switch the language to default (en) without visiting the page containing '/en'?\neg. I'm on http://your-domain.com/id -> I visit http://your-domain.com/ -> Language switches to en\nThanks. Thanks, I saw it and it works, but I want to switch the language to default (en) without visiting the page containing '/en'.\nUsing your solution, I have to visit a link containing \"/en\", in order to switch the language to en.\nI would like to simply visit a link like  http://your-domain.com/ (without /en inside the URL) and switch language to en.. Thanks, I'm trying to solve it :)\nHappy coding to you. Yes I know, but I thought there might be problems with Google webmaster tools and hreflang attribute, but I verified and it's not that case, so I will use your solution :)\nRegards. ",
    "afontcu": "Have you tried passing null or empty values as optional parameter? Can't find where I used it but I recall doing it.\nHope it helps.\n. Hi wipit,\nYour question is quite broad, so you could youse CurrentLocale() to get your current language code.\nIf you need any other language information (such as name, regional...) check out the docs.\nHope it helps.. Hi there,\nYou may find an answer in this issue.. ",
    "lukasfiala": "Same problem like @nickbr5.  I'm using the latest version of the Laravel 5.3.\n. ",
    "phpspider": "Mentioned line is already there after the if condition. Still not working.. ",
    "David-Kurniawan": "doesn't work if url like this:\nhttp://localhost:8000/en/search\nswitch to default language, eg: id:\nhttp://localhost:8000/cari\n. Nice, now work perfect,,, Thank you\n. ",
    "sangnguyenplus": "Hi Chadidi, \nIt's not fixed yet, when you change from another locale to default locale, it got error \"too many loop redirect\".\n. ",
    "monurakkaya": "@ctf0 Hi,\nCan you share your gist again? . @ctf0 You did recommend the spatie's package but it has no support for translated slug & route binding. so i have to move on with dimsav's package.. Now my models have translated but i have to do that on static strings, routes etc. I'm trying to find a compact way to merge two packages. \nI saw this issue but dist has removed. ( Thanks to Murphy! ) \nWhen you have time, a real example would be appreciated :) \n. @ctf0 \njust i need \n/news/translated-slug-for-en\n/nouvelles/translated-slug-for-fr\nslugs coming from database but 'news' and 'nouvelles' are static strings. They located in anywhere. I just wanted to achieve that problem.\nPS. arabic suggestion made me upset :) \n. @ctf0 Ah, okay. Then i will handle the binded slugs in RouteServiceProvider, nice. \nBut what about 'news' and 'nouvelles' prefix.. Where should i keep them and can this package help me on this ?  \nThis was the last question i promise :) \nThanks. . ",
    "seltix5": "https://github.com/mcamara/laravel-localization/pull/389\ni create a pull request so i'm closing this issue.. np ^^. ",
    "arquadrado": "I can't figure out how to wrap route group that already has a prefix, say 'admin', with localization. Can anyone tell me how, please?\n. ",
    "MohamedSR": "in www.example.com/b2b/en/ to get 'en' just App::setLocale($request->segment(2));\n. ",
    "satvheck": "Any update on this issue yet? I'm having the same problem for a site completely deployed behind another site's sub-path. Thanks. ",
    "fpalamour": "Same issue here.. Same issue, still no workaround about this ?. ",
    "AbdulBasit510": "Same issue here , I want to get Additional Prefix Parameter dynamically from database and language as it is , if any update please let me know Sir.. Does anyone have solution for getting language parameter from database dynamically , instead of flat array file statically,. ",
    "kkomelin": "Implemented the proposed change https://github.com/mcamara/laravel-localization/pull/386. The new version of the package includes the proposed improvement.\nRead how to use the new feature on my blog.. Thank you @emilv. I've corrected the link in my comment.. Thank you very much @mcamara for reviewing and merging the PR.. The problem should be solved in the package in my opinion, so let's think of a solution.. ",
    "emilv": "The blog article is moved.. ",
    "manticorp": "It should be setLocale. ",
    "itxp2008": "Correction i need 'hideDefaultLocaleInURL' => true. ",
    "svkmedia": "same problem. localesOrder is not working for getSupportedLocales(). Had the same issue. I solved it by reorder supportedLocales array. This caused reorder also in getSupportedLocales().. ",
    "sasin91": "Since it's a shared instance, i suggest using singleton, like so:\n$this->app->singleton(LaravelLocalization::class); :). ",
    "MohammedAl-Mahdawi": "Any help please?. ",
    "villeneuve-michael": "I also have an issue with this. Any ideas ? . ",
    "sarotnem": "Quick workaround is to go to config/laravellocalization.php and from there select the enabled locales and sort them as you want. \nI think it would be nice if in this file there is a field for example 'localesOrder' and then we can set the order without messing with the order in 'supportedLocales'. Something like: \n'localesOrder' => [el, en, pl]. Custom order is now supported in the new version! Be sure to update to the newest version and check the documentation.. For some reason Travis is failing with 5.6 and hhvm... Nothing but the readme.md was changed. I reproduced your problem and you are right. However notice that localesOrder are there ONLY for the order the locales are displayed in the language selector. This has nothing to do with the default locale at all.. ",
    "bertheyman": "@mcamara as I user, I expected getSupportedLocales() to follow the specified order by default.\nI now did it by using getLocalesOrder().\nWould you accept a pull request to have getSupportedLocales() follow the custom order by default? I'd like to help if this is useful.. ",
    "Okipa": "Any news on this guys ?. Shouldn't this PR change the line 325 from the LaravelLocalization.php from $this->translator->trans($transKeyName, [], $locale) to $this->translator->trans($transKeyName, [], null, $locale) rather than $this->translator->trans($transKeyName, [], '', $locale) ?\n(Same idea for the line 635).. After investigations, I think I found the problem, which is not linked to your code but to the readme that is not accurate about which version of the package use with which version of Laravel.\nI didn't find the logic but what is sure is that I had to install the version 1.1.* of your package with Laravel 5.2 to make the routes translations work and not the 1.0.* one as it is specified (it does not work with the 1.2.*either).. Oops, it seems that we opened the same issue : https://github.com/mcamara/laravel-localization/issues/410. Have considered a pull request to fix this ?. This issue is referenced in a pull request : https://github.com/mcamara/laravel-localization/pull/407. You're right, but the PR to fix this is still waiting for approval.\nWaiting for this fix !. I couldn't tell you right now, I will need to re-implement this soon for a client so it will be a good opportunity to check this. It may have been optimized since april 2017 ?. ",
    "TheOneWhoKnokks": "There is one error in LaravelLocalization file, line 327.\nMissing one parameter, must be \n$translation = $this->translator->trans($transKeyName, [], null, $locale);\nactually there is,\n $translation = $this->translator->trans($transKeyName, [], $locale);. Somebody already make a pull request #407 . ",
    "bouldrini": "Hey folks, I ran into the same Issue, and solved the problem.\nTo fix this you got to do changes in your LaravelLocalization.php file.\nProblem is, that for calls to $this->translator->trans() functions are given 3 instead of 4 parameters in some cases.\nYou got to pass 'null' or anything else to these functioncalls als third parameter.\nfor example:\n$this->translator->trans($transKeyName, [], null, $locale)\ninstead of\n$this->translator->trans($transKeyName, [], $locale) \nThis worked for me so far.. ",
    "szabizs": "@bouldrini excellent, that did the trick, thank you!. Here it is, run this in your console: \nphp artisan vendor:publish --provider=\"Mcamara\\LaravelLocalization\\LaravelLocalizationServiceProvider\". ",
    "qerim": "+1. ",
    "RasmusStougaard": "For those reading this and having the same problem, an obvious temp. fix for this would be to write in your routes file something like this:\nRoute::get('/', function () {\n        return redirect('/da');\n    });. Ahh okay good to know :). The problem was the fallback locale not working either. Haven't used this package since back then so i assume that part is fixed also . ",
    "yclaes": "+1. ",
    "S4Mi": "Maybe it's because of your browser language and Accept-Language config.. ",
    "Cyber-host": "@ctf0 it doesn't work after register LaravelLocalization in the container. I use container resolving event for it. ",
    "Luis-Goncalves-Searchprof": "Yeap, i did, but it doens't work either.. ",
    "dviluk": "409 .",
    "phandevit": "I realized that I have to change (remove 'localize') the middleware to:\n'middleware' => ['localeSessionRedirect', 'localizationRedirect']\nto fix that issue. Any ideas why?. ",
    "icodeforyou": "+1. ",
    "mattbartel": "Which view are you referring to?  The login view?  All the default auth routes are named.  I've also updated the home route to be named and it didn't help: \nRoute::get('/', 'HomeController@index')->name('home');\nIt seems to me that the locale is never being set before the auth middleware redirects to the login page.  If my locale is set to English and I'm not logged in, then I try to browse to /es, I get redirected to the /en/login page.  What should happen is that browsing to /es should set my locale to Spanish, then direct me to the login route, which would render in Spanish, given that my locale had changed. What am I missing? . ",
    "pleone": "I've got the same issue.\n. ",
    "leanderlindahl": "Using Laravel 5.4.36 and macamara/laravel-localization 1.3.10 I had this problem too, but once I put Auth::routes(); inside my Route::group it worked as expected:\n```\nRoute::group(\n    [\n        'prefix' => LaravelLocalization::setLocale(),\n        'middleware' => [ 'localeSessionRedirect', 'localizationRedirect', 'localeViewPath' ]\n    ],\n    function()\n{\n    / ADD ALL LOCALIZED ROUTES INSIDE THIS GROUP /\n        Route::get('/', 'ContentsController@home')->name('home');\n        Auth::routes();\n});\n/ OTHER PAGES THAT SHOULD NOT BE LOCALIZED /\n```. ",
    "luisdiaswiz": "Hi,\nI am having the exact same issue, did you manage to get a workaround?. My bad, please ignore this issue.\nI did not check the latest versions requirements and as we are still using laravel 5.3 we should stick, for now, to 1.1.*. ",
    "andycansdale": "This seems to be related to issue 422. The session and cookie check was removed in 1.0 and the docs were not updated.. The docs seem not to have been updated since version 0.15  at which time the cookie and session functionality was indeed there. The functionality disappeared in 0.1, although it's not clear why. I'm beginning to think I may have to roll my own localisation solution.. ",
    "Jeroenvanderholst": "Bummer, I was looking for an update that did just that. Can we turn it back on again?. ",
    "mafftor": "I solved this problem by adding 'use_cookies' => false to the configuration file. Author, when we choose a different language, we get old translations, the selected language will be written into the cookie queue, after the page is reloaded a second time, we get the necessary translations of the selected language.\nI could rewrite the code, but this is not the solution to this problem.\nPlease tell me how to fix it.. ",
    "Rishats": "Close ^) I fix it. Now i write domen.com/en/slug  - url - ( voyager menu ) . I don't know ! In our country all sites have xxx.kg and in KZ - xxx.kz\nYou may see there https://hoster.kg/. ",
    "tontonsb": "You should implement it yourself, it's easy if you don't want anything in the routes.\nJust save the chosen locale in session or even in the database if you only have registered users. For example, you could Session::put('locale, '$locale); on change\nThen add middleware to set locale according to the session: App::setLocale(Session::get('locale'));.. ",
    "elephantux": "I found solution:\nLaravelLocalization::setSupportedLocales($langs);. ",
    "lex111": "@mcamara maybe we'll switch from tabs to spaces?. ",
    "Doomkyn": "BUMP I got an header with localizedurls and it takes forever.... I managed to handle it by putting this at the start of my web.php\nphp\nRoute::prefix('it')->group(function () {\n    Route::any('{any}', function() {\n        abort(404);\n    })->where('any', '.*');\n});. ",
    "StanBarrows": "any updates on this?. ",
    "poldixd": "Same issue here... Any updates?. ",
    "bnymn": "Any updates?. ",
    "linxinemily": "Any update?. ",
    "mokhosh": "so is there a best practice for this? where should we manually set carbon's locale?. ",
    "karneaud": "+1. ",
    "gerardreches": "@aghayeff Did you find out what caused your problem?. @aghayeff And everything is working for you in Laravel 5.4? I get the NotFoundHttpException for all my translated routes. Which package version are you using? Thanks.. @adileo Why $this->translator->trans($translatedRoute, [], '', $url_locale) has four parameters if Translator class public function trans($key, array $replace = [], $locale = null) only takes three?. Ok, this PR must not be merged, because it's trying to resolve a conflict with laravel-translation-manager package, but the original problem comes from the other package, who are changing the order of the parameters for the trans() method.. Nevermind, this PR is trying to revert the use of the trans() method back to Laravel 5.3, but this would make it incompatible with Laravel 5.4. That workaround doesn't work for me, and I'm experiencing the problem without having parameterized routes.. @mrcbk Are you using laravel-translation-manager package at the time you found that fix? There was an issue in the other package.\nLaravel trans function has 3 parameters, not 4:\npublic function trans($key, array $replace = [], $locale = null)\n{\n    return $this->get($key, $replace, $locale);\n}\n\nSo your pull request is invalid, same as #447.\nIssue in vsch/laravel-translation-manager (fork of barryvdh/laravel-translation-manager, both can have this problem). Uhm.. Then the package will need a breakpoint between Laravel 5.3 and 5.4.. ",
    "aghayeff": "Yes. my index route wasn't inside route group with middleware [ 'localeSessionRedirect', 'localizationRedirect' ]. @gerardreches  Be sure that you added middleware to your routes.. ",
    "adileo": "447 .",
    "rizwandogar111": "Thanks @szabizs \n. ",
    "quaidesbalises": "Any help ... ?. ",
    "mrcbk": "I had this issue as well and created a pull request: here. no, actually it's vanilla laravel 5.3: https://github.com/laravel/framework/blob/5.3/src/Illuminate/Translation/Translator.php#L235\nSo i guess for 5.4 it's invalid. Still if you are on 5.3.. ",
    "thisprojectworks": "I have the same issue in laravel 5.4. ",
    "andrelegault": "Experiencing the same issue (5.4). You're using Laravel 5.3 whose trans function has 4 parameters. The package assumes its users are using Laravel 5.4 which, in this version, has 3 parameters.. ",
    "Grupa-Leonardo": "The author apparently is no longer interested in further development of the package - it's time to look for something else.. @fede91it At this moment - nothing, but for next projects I'll look for somethink different. Now I must make it more 'statically' -.-. ",
    "stefkes": "Just out of curiosity, how would this package be able to fetch the translation of a slug from the database?\nAs far as I can tell this package only talks to the routes file and the files that hold the translations of named routes, for example resources/lang/fr/routes.php\nAnyone?. ",
    "viktorivanov": "The namespace in LaravelLocalizationViewPath.php is set to App\\Http\\Middleware but should be Mcamara\\LaravelLocalization\\Middleware. ",
    "Sebi94nbg": "Hey,\njust remove the web middleware from your route group. Laravel adds it autom. to every route:\n\nOut of the box, the web middleware group is automatically applied to your  routes/web.php file by the RouteServiceProvider. Laravel 5.4 Documentation: Middleware\n\nFor me it's working fine - even with Laravel 5.5.14. :). Hey,\nall settings in each config file within the config/ directory are cached by Laravel.\nSo if you change any setting there, make sure, that you update your application cache:\n$ php artisan config:cache\nFurther information regarding configuration caching: https://laravel.com/docs/5.3/configuration#configuration-caching. When I var_dump($supportedLocales); in the __construct() function of vendor/mcamara/laravel-localization/src/Mcamara/LaravelLocalization/LaravelLocalization.php, I still get the vendor supported locales.\nSo it looks like, as it would not use my config/laravellocalization.php. But why?. Ok, I was able to fix this problem. I'm not sure, if I did just something wrong or if there is an issue in this package.\nThe configuration cache of Laravel did just cache the vendor published config settings.\nUnfortunately, due of this Laravel default locale is not in the supportedLocales array. error, I was unable to rebuild the cache:\n```\n$ php artisan config:clear\n[Mcamara\\LaravelLocalization\\Exceptions\\UnsupportedLocaleException]\n  Laravel default locale is not in the supportedLocales array.\n```\nAs workaround, I've simply commented the related code in order to disable it quickly:\n```\n    /\n     * Creates new instance.\n     \n     * @throws UnsupportedLocaleException\n     /\n    public function __construct()\n    {\n        $this->app = app();\n    $this->configRepository = $this->app['config'];\n    $this->view = $this->app['view'];\n    $this->translator = $this->app['translator'];\n    $this->router = $this->app['router'];\n    $this->request = $this->app['request'];\n    $this->url = $this->app['url'];\n\n    // set default locale\n    $this->defaultLocale = $this->configRepository->get('app.locale');\n    $supportedLocales = $this->getSupportedLocales();\n\n    /*if (empty($supportedLocales[$this->defaultLocale])) {\n        throw new UnsupportedLocaleException('Laravel default locale is not in the supportedLocales array.');\n    }*/\n}\n\n```\nAfter this, I were able to rebuild the cache:\n$ php artisan config:cache\nConfiguration cache cleared!\nConfiguration cached successfully!\nAfter config:cache I've uncommented the above mentioned code again like it was before.\nSince this it's using the correct supportedLocales and I also don't get any error anymore.. Sorry @mcamara, but I left this issue open, because I had this issue regarding caching and this exception.\nDid I something wrong while setting up this package? I think, that the code needs to be improved.. I read it as it is applied by default:\n\nMoreover, this package includes a middleware object to redirect all \"non-localized\" routes to the corresponding \"localized\".. Does really nobody have any idea? :(. Which code do you use to switch the language?\n\nIn this projects README.md, you can find a sample code for a language switcher, which is just working out of the box, when you've configured everything like Middlewares correct: https://github.com/mcamara/laravel-localization#creating-a-language-selector\nSo, in your case, you need something like this:\n<a rel=\"alternate\" hreflang=\"id\" href=\"{{ LaravelLocalization::getLocalizedURL(\"id\", null, [], true) }}\">Bahasa Indonesia</a>\n|\n<a rel=\"alternate\" hreflang=\"en\" href=\"{{ LaravelLocalization::getLocalizedURL(\"en\", null, [], true) }}\">English</a>\nWhen you hit one of these links, laravel-localization does automatically apply the selected language to your application. You don't have to refresh the page after it, because the language switch happens in the middleware, so even before you're redirected to the page.. Did you configure the Middlewares? https://github.com/mcamara/laravel-localization#middleware\nInstead of app/Http/routes.php it's maybe routes/web.php. Depends on your Laravel version.. You also need to configure them in your app/Http/Kernel.php at protected $routeMiddleware. Did you?\nprotected $routeMiddleware = [\n        /**** OTHER MIDDLEWARE ****/\n        'localize' => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRoutes::class,\n        'localizationRedirect' => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRedirectFilter::class,\n        'localeSessionRedirect' => \\Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect::class,\n                'localeViewPath' => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationViewPath::class\n        // REDIRECTION MIDDLEWARE\n    ];\nPlease take care about the comments. Otherwise it may not work properly.\nIn my case, it looks like this:\nprotected $routeMiddleware = [\n        'auth' => \\Illuminate\\Auth\\Middleware\\Authenticate::class,\n        'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n        'bindings' => \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n        'can' => \\Illuminate\\Auth\\Middleware\\Authorize::class,\n        'localize' => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRoutes::class,\n        'localizationRedirect' => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRedirectFilter::class,\n        'localeSessionRedirect' => \\Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect::class,\n        'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n        'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n    ];. No problem. I'm familiar with your English - I have colleagues in Kathmandu. ;)\n@dreamid27 please take a look at my last mentioned example how it looks like in my case. This is, how it should look like for you.\n// Ok, you changed it. :D\nIs it maybe cached?\nphp artisan clear-compiled\nphp artisan cache:clear\nphp artisan route:clear. You can check, if it's even changing your locale.\nJust add this code to your view:\n{{ LaravelLocalization::getCurrentLocale() }}\nThis should return id or en.\nWhen you switch to EN, it should display en for example.\nDoes it always return the correct one? If yes, it's working fine and you may have a different issue.. Hey,\nYou would like to change from a prefix to a suffix.\nThis is not supported as far as I know. I've also tried to build such a solution, but at the end I just used the prefix solution.\nAny solutions are welcome.. ",
    "hedii": "@Dagiral I had the same use case. Put the required local in an header field on your ajax request (for this example X-App-Locale header) and setup a middleware on your api routes.\nThis way, your api requests can be localized, and we also have a default locale if the locale header field is not provided with the ajax request\n/app/Http/Middleware/LocalizeApiRequests.php\n````php\n<?php\nnamespace App\\Http\\Middleware;\nuse Closure;\nuse LaravelLocalization;\nclass LocalizeApiRequests\n{\n    /\n     * Handle an incoming request.\n     \n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return mixed\n     /\n    public function handle($request, Closure $next)\n    {\n        // default to app.locale if no locale header is set on the request\n        LaravelLocalization::setLocale($request->header('X-App-Locale') ?: config('app.locale'));\n    return $next($request);\n}\n\n}\n````\n/app/Http/Kernel.php\nphp\n/**\n * The application's route middleware groups.\n *\n * @var array\n */\nprotected $middlewareGroups = [\n    'web' => [\n        // ...\n    ],\n    'api' => [\n        // ...\n        \\App\\Http\\Middleware\\LocalizeApiRequests::class,\n    ],\n];\n. ",
    "marijoo": "Problem here is that LaravelLocalization::setLocale() will take the first request url segment to detect the locale, which is undesirable in some cases.\nThis approach will work with urls like /api/v1/en/some/action where locale is the third parameter.\n```\nRoute::prefix('v1')->group(function() {\nRoute::prefix((function() {\n    $locale = request()->segment(3); // use third segment as locale\n    return LaravelLocalization::setLocale($locale);\n})())->group(function() {\n\n    \u2026\n\n```. ",
    "kskrlin": "The issue I ran into is that getLocalizedURL() doesn't return the exact translation when I am using route model binding.\nroute: http://localhost:8000/en/news/1\nIf I have in my controller something like this:\npublic function article(News $news)\n{\n...\n}\nthe route won't be translated (I get wrong result: http://localhost:8000/hr/news/1),\nbut when I don't use model binding\npublic function article($id)\n{\n$news = News::findOrFail($id);\n...\n}\nthe route will be translated into http://localhost:8000/hr/novosti/1. ",
    "zyfcjtc": "my bad, didn't read docs clearly. ",
    "alifattahi": "I find the solution : set \nuseAcceptLanguageHeader = false;\n. ",
    "hugofabricio": "Solved, bug in frontend.. I am having the same problem, when redirecting to the directory, of error 404. ",
    "coppee": "Someone found a solution ?. ",
    "viewplatgh": "I was hit by this issue too, and I solved it.\nThe solution to me is to change the nginx config, not to use the default one but refer to this one: https://github.com/laradock/laradock/blob/v5.9.0/nginx/sites/default.conf. ",
    "tylerteh": "I encountered the same issue and I solved it by following the suggestion at:\nhttps://stackoverflow.com/questions/45105261/laravel-localization-deployment-the-requested-url-en-was-not-found-on-this-se/47528589#47528589. ",
    "jnvsor": "No, I mean if you have a path /v\u00e9hicule then $this->getNonLocalizedURL($routeName) will equal /v\u00e9hicule and $this->getNonLocalizedURL($url) will equal /v%C3%A9hicule. ",
    "BonBonSlick": "If this way, you are right, but i want to notice that:\nsteamdb.info, steam api calls, and other many websites use cn/jp modificators. Some  use something like that /?___store=japanese  or else, it seems it prefered. \nThanks anyway for good package. . ",
    "bionicmaster": "It's happening to me as well (I just enter to issues to report this), and this happens in this way:\n- Some user enters https://your-site.com\n- Localization redirects user to http://your-site.com/en with redirect 302 (for example)\n- Localization redirects user again from http://your-site.com/en to https://your-site.com/en with a redirect 301. @dhiman252 it helped me, thanks (I don't know why the new instruction that replaces this, didn't work)\n@lucasff the trouble was not exactly that, we already had http -> https redirection into the server, the trouble was that when some hit HTTPS://example.com it redirected it to HTTP://example.com/en and later to HTTPS://example.com/en because laravel was forcing the redirection to http automatically and again to HTTPS, but was done by laravel directly, not by us or something that we did. ",
    "NadhirBoukhenifra": "i found this package https://github.com/ARCANEDEV/Localization \nits better then this and i can now change the direction.\nps its based on this package.\nthank you all.. ",
    "ilgala": "Tell me if I have to open a new issue\nThis function doesn't care about route prefixes. And I was wondering how from a default route with prefix get the correct translation. For example, I have a route like this:\nhttp://my.app/{locale}/{admin_prefix}/my_admin_route\nbut when I use this method I receive back this URL:\nhttp://my.app/{locale}/my_translated_admin_route. ",
    "KaiserFrederick": "First my English is bad hehe but, You need to put in your routes like the next code:\nRoute::get(LaravelLocalization::transRoute('routes.categories'), 'CategoryController@index')->name('categories') ;\nNext in your Blade you have to put this:\n<a href=\"{{ route('categories') }}\">{{ trans('routes.categories) }}</a>\nAnd that's all, LaravelLocalization it's going to do the else.\nYou don't need to put the LaravelLocalization in your links in Blade, only put the name of the route.. Thank you so much, it's works. ",
    "DCdeBrabander": "I have this issue as well. Primariliy by using XHTTP requests.\nIs there an solution for this? \nThus far I only found this:\nhttps://komelin.com/articles/laravel-localization-middlewares-now-support-route-exceptions\nThis could solve my problem (if it works) but it needs every 'except' defined seperately and I just want to exclude a whole group at once (all POST and XHTTP requests). Mostly because application is set up that 'need-to-localize'-content are pages, thus behind GET routes.. We have the exact same problem here. Is there any solution to this?\nCurrently we are forced to disable caching to have a functional application. \nIf this isn't getting fixed (soon) we'll be forced to use a substitute package like: https://github.com/laravelista/loki. ",
    "leMaur": "Have you added the middleware in your route group?\nLook the installation guide here: https://github.com/mcamara/laravel-localization#middleware\nLet me know if this helps... Hi @CicciMTS,\ntry to import the facade on top of your routes.php file, like this:\n```\n<php\nuse \\Mcamara\\LaravelLocalization\\Facades\\LaravelLocalization;\n... the rest of the code ...\nor you can try to call the facade name with path like this:\n['prefix' => \\Mcamara\\LaravelLocalization\\Facades\\LaravelLocalization::setLocale()]\n```\nThis should resolve your issue!\nSometimes happens that the alias is not well loaded at first installation time.\nBy the way, it's always good to double check the installation files. \nCheck this paragraph: https://github.com/mcamara/laravel-localization#installation and to be sure, try to run $ composer dump-autoload from your terminal (or Cmd), this reload the autoloader collection.\nHope this help you. \nBye. Sorry, the commit \"ffee670\" was not wanted. I did some test/experiment and I made a PR for error.. ",
    "Nuada26": "I have did that , but route \"Sorry, the page you are looking for could not be found.\".. it's not works.. ",
    "PatrikValkovic": "I had same issue and I finally realize that language parameter must be first in URL. So instead of http://127.0.0.1/laravel/public/api/es/accelerometerref you need http://127.0.0.1/es/laravel/public/api/accelerometerref. That also mean, that group with LaravelLocalization::setLocale() must be the outer one.. ",
    "flofloflo": "I've had the same problem with the api routing and fixed it with the following workaround:\nFirst create a class which extends LaravelLocalization and override the setLocale function:\n<?php\nnamespace App\\Localization;\n\nuse Mcamara\\LaravelLocalization\\LaravelLocalization as McamaraLocalization;\n\nclass LaravelLocalization extends McamaraLocalization\n{\n    public function setLocale($locale = null, int $segment = 1)\n    {\n        if (empty($locale) || !is_string($locale)) {\n            $locale = $this->request->segment($segment);\n        }\n        return parent::setLocale($locale);\n    }\n}\n\nRegister the new class in the register() function of the AppServiceProvider: \n$this->app->alias(LaravelLocalization::class, 'laravellocalization');\n\nNow you can define the segment of the locale in the routing config:\nRoute::group(['prefix' => LaravelLocalization::setLocale(null, 2)], function () {\n /** ADD ALL LOCALIZED ROUTES INSIDE THIS GROUP **/\n});. @johnef Are you using PHP 7.0 or higher?\n\nIf not, try removing the int:\npublic function setLocale($locale = null, $segment = 1). ```php\n<?php\nnamespace App\\Localization;\nuse Mcamara\\LaravelLocalization\\LaravelLocalization as McamaraLocalization;\nclass LaravelLocalization extends McamaraLocalization\n{\n    public function setLocale($locale = null, $segment = 1)\n    {\n        if (empty($locale) || !is_string($locale)) {\n            $locale = $this->request->segment($segment);\n        }\n        return parent::setLocale($locale);\n    }\n}\n```\n. ",
    "johnef": "@flofloflo I try your solution but\nHere is my class\n```\n<?php\nnamespace App\\Models;\nuse Mcamara\\LaravelLocalization\\LaravelLocalization as McamaraLocalization;\nclass LaravelLocalization extends McamaraLocalization\n{\n    public function setLocale($locale = null, int $segment = 1)\n    {\n        if (empty($locale) || !is_string($locale)) {\n            $locale = $this->request->segment($segment);\n        }\n        return parent::setLocale($locale);\n    }\n}\n```\nint $segment = 1 Undefined class int and Default value for parameters with a class type can only be NUL.\nand I still getting 404 not found. @flofloflo Thanks for replaying here, but what should the code looks like if I removed this part public function setLocale($locale = null, $segment = 1) it will be just the class?\nplease give a full code after removing the mention. . @balakan what if I don't want drop down list of languages I just need the English or Arabic\nthanks. @dreamid27  thanks very much it helped. Hi @KaiserFrederick I try this and it's working fine with me\n```\nRoute::auth();\nRoute::get( 'admin', 'HomeController@index' );\nRoute::group(\n    [\n        'prefix'     => LaravelLocalization::setLocale(),\n        'middleware' => [ 'localeSessionRedirect', 'localizationRedirect', 'localeViewPath' ]\n    ],\n    function () {\n             Route::group( [ 'prefix' => 'admin', 'as' => 'admin.' ], function () {\n            Route::resource( 'route', 'Controller' );\n             } );\n} );\n```\n  . Same here . @mcamara you are very good at one thing just closing issues as soon as some one says how to do it without double check if it's working fine or not!!  . DIDN'T WORK FOR ME. ",
    "KrisBobLea": "It became a get method after redirection.. ",
    "harunB10": "How can I \"force\" it not to become GET?. Works fine! Thx!. ",
    "Datalink-Wouter": "I think the easiest solution is naming your routes.\nhttps://laravel.com/docs/5.5/routing#named-routes\nIf you call {{route('your-route')}} in the form action, you won't redirect because the language would stay in the URL.\n. ",
    "balakan": "In laravellocalization.php config file there is a 'hideDefaultLocaleInURL' key. Set it to false (by default). It should work?. Try using the getLocalizedUrl() method... like this:\n{{ url(LaravelLocalization::getLocalizedURL($localeCode))\u00a0}} on your href attribute.. ",
    "mts88": "Thank you! That's worked for me! It was the use of facade. . ",
    "n00el": "I get this message with this package in laravel 5.5 \nErrorException (E_ERROR)\narray_merge(): Argument #2 is not an array\nBold lines are errors in this file:\n/var/www/laravel/vendor/laravel/framework/src/Illuminate/Translation/FileLoader.php\nprotected function loadJsonPaths($locale)\n    {\n        return collect(array_merge($this->jsonPaths, [$this->path]))\n            ->reduce(function ($output, $path) use ($locale) {\n                return $this->files->exists($full = \"{$path}/{$locale}.json\")\n                    **? array_merge($output,\n                        json_decode($this->files->get($full), true)\n                    ) : $output;**\n            }, []);\n    }\nAny future plan to update package to Laravel 5.5? It work really well in 5.4, and I love it :)\n. ",
    "Dalamar": "You are welcome!\nOn Mon, Sep 11, 2017 at 2:54 PM, Marc C\u00e1mara notifications@github.com\nwrote:\n\nClosed #491 https://github.com/mcamara/laravel-localization/issues/491.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mcamara/laravel-localization/issues/491#event-1243101824,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAToYDoIlBYhbbe3DAnNoyPRmJfsuSeYks5shR9fgaJpZM4PNcy3\n.\n\n\n-- \nBest regards,\nAlexey Pikulik\nMob: +357 96874807\nSkype: a.pikulik\n. ",
    "Digital87": "It appears that no routes work after caching - not only Route:view. Before making any fixes i found that this package https://github.com/czim/laravel-localization-route-cache appears to get it going. . #308 problem discussion \n . ",
    "dorinesinenco": "+1, Subscribe to this issue.\nSame goes in my case, we have 2 projects where \n/test/{param}\n/ru/\u0442\u0435\u0441\u0442/{param} works on default language\nbut when switching to the translated counterpart the route becomes\n/\u0442\u0435\u0441\u0442/{param}\n/ru/\u0442\u0435\u0441\u0442/{param}\nlaravel 5.5\nLaravel-localization 1.3.2. ",
    "emielmolenaar": "Make sure you don't cache routes. The web/routes.php has to be evaluated on each request, to run the localization logic (or check out https://github.com/czim/laravel-localization-route-cache) .. ",
    "ptnhuan": "Copy all routes in my-routes into routes/web.php\nRun is so good. ",
    "czagalaca": "Anotherway in a new project: \nFirst to set the  vendor\\mcamara\\laravel-localization\\src\\config\\config.php and after publish!. ",
    "AymanElshehawy": "I had the same error, but for me it was a silly mistake: I added the some code on route.php\n` // app/Http/routes.php\nRoute::group(['prefix' => LaravelLocalization::setLocale()], function()`\nBefore run the publish command:\nphp artisan vendor:publish --provider=\"Mcamara\\LaravelLocalization\\LaravelLocalizationServiceProvider\"\nI obviously needed to first publish the plugin, config the supportedLocales, and then add any code that I want.. ",
    "Daidalos117": "Did you solve this? So simple thing and I cant figure out how to do it.. Nothing? Noone? So basic funcionality and noone solved this?. ",
    "Nuranto": "Same question here oO\nI agree, it's the base, should be native ? oO. Interested in this too.. Actual solution, in a Provider of my App : \n$urls = ['my-car.com'=>'en', 'ma-voiture.com'=>'fr', .....];\n$host = $this->app->request->getHost();\nforeach($urls as $domain => $lang) {\n            if($host == ((env('APP_ENV') == 'production') ? 'www' : 'ww2') . '.' . $domain) {\n               config(['app.locale' => $lang]);\n            }\n        }\nNot sexy, but it works (if hideDefaultLocaleInURL is true). Of course, the switching urls have to be generated manually.... ",
    "ansata2001": "Also, there is no the \"lang\" property in any line of the the bundled config.php https://github.com/mcamara/laravel-localization/blob/master/src/config/config.php although the languageNegotiator is trying to check if it matches with the key. Maybe it makes sense to to add the \"lang\" property on the fly when doing the negotiation, taking the Locale::canonizalize() of the key? If the property is not set manually.. There was an accepted pull request addressing this issue: https://github.com/mcamara/laravel-localization/pull/507. @erdmenchen I don't think so. @marlongichie No it wasn't removed. Do you have the intl extension installed and enabled?. Not sure if intl is installed by default, I think it's not. And it's not hard to install it and activate.\nIf you're not up to the intl solution - feel free to implement it the way you like. Laravel is not like to obviously.\nSuggestion - check if the intl is up and running. php -i | grep intl from the command line from within the vagrant box. . ",
    "erdmenchen": "Thank you very much @ansata2001. \nI have not yet tested your fix, but it looks promising what I see in the pull request.. Does this also fix #505 ?. ",
    "marlongichie": "Was this fix removed? And if so, is there another solution to get this to work properly?\nI'm using \"mcamara/laravel-localization\": \"^1.3\" and en-US does NOT match en_US as discussed here.. I've been testing using the vagrant homestead box. I believe the intl extension comes installed and active out of the box.\nSo far NOT able to get this feature to work. \nDoesn't seem like this should be so complex to get working and would probably be more Laravel like to implement it off the shelf with this package, without needing to modify the environment, no??? \nAny suggestions or workarounds?. ",
    "dreamid27": "The problem is with your cookie,,\nyou active 2middleware database and cookie to set your locale....\nand when your set locale with database, that not getting effect because will override with cookies.\nyou have to deactive cookies in Middleware or You Need run Middleware 'SetLocale with Database' after 'SetLocaleWithCookies' . and make some condition.. Can i see your route with middleware ?. @Sebi94nbg \ni just follow the instruction, and this is my code for get link of localization.. tell me if i wrong :) .. thank brother.\n\n. @Sebi94nbg i do same trick and code in my new project,.. and not problem..hahaha..\nmaybe something wrong with project or another composer and make conflict ?\n\n. @Sebi94nbg  of course\n\n. @Sebi94nbg \n\nsure brother :) ..\ni'm sure not skip anything the tutorial..\nAnd i'm sorry if my word is incomprehensible\ni'm beginner and not very good at english. \ni try to change position like , you say, but issue still going.  .. but thank :) . \nOhh haha okey..\nI try to clear cache, but hehehe still going... you know what different if i type in browser address and if i click on tag  a href\nmaybe i think need to know how this work in laravel.. and maybe i can find where this mistakes...\n. @Sebi94nbg i think not problem about that,,\ni get mywebsite/en and mywebsite/id when i change localization....\nhahaha, but thank brother for your help :).\n. @Sebi94nbg thanks brother,  this is fix :) ..\nnot problem in composer, but problem with my Custom Middleware make this happen !\n\n. @mikepgc u mention me ?. u need uncomment,, part of 'ar' in that's files.. or This @johnef \n\nEdit: never change the config file inside the package code.\n. in Vendor->Mcamara. @mcamara ahh i'm so sorry, i'm not read fully the tutorial..\nfor suggestion, i think you need change  part tutorial of 'Config' to the top. it will be easy to read. \n. ",
    "ardiwirawan": "@Jimmylet have you found the solution about this question?  i also search the solution, im facing same issue with you. . ",
    "martin-ro": "I'd be interested in a solution as well.. ",
    "simar88": "Any news about it? :). Hi @AmirAmin ,\ni wrote minutes ago how i'm using cookies for this.\nYou can find it here #613 \nI hope can be useful for you! :). ",
    "indecenti": "I'm also facing the problem, and I solve with escamotage but I do not find a correct and sensible way to proceed. Can someone help us?. in the routes.php file in the lang folder:\nreturn [\n\u00a0\u00a0\u00a0\u00a0 'prodotti_with_slug' => 'products / {category} / {slug}',\n];\nSlug is in the database table called products where I have the slug in one language.\nCategory is in the category table where I have the slug of the category both in Italian and in English.\nHow can I translate category when I'm in a route products / category_1 / product_1.\nthe problem occurs when from the \nproducts/category_1/ product_1\nroute I pass to the italian version or vice versa and macamara translates\nprodotto/category_1/product_1\nthank you. ",
    "andrii-trush": "@Briareos17  look at #439. ",
    "mikepgc": "thankss @balakan \ndo you know also the issue that you have to refresh to get on the right locale?. the problem found. \nadded some mistake in cumstom middleware:\nclass language\n{\n    /\n     * Handle an incoming request.\n     \n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return mixed\n     /\n    public function handle($request, Closure $next)\n    {\n    if (Session::has('locale')) {\n\n        $locale = Session::get('locale', Config::get('app.locale'));\n    } else{\n        $locale = 'nl';\n      // $locale = 'en';\n       // $locale = 'fr';\n      //  $locale = 'du';\n    }\n\n    App::setLocale($locale); <==============================THIS ONE HAS TO BE REMOVED\n\n\n\n    return $next($request);\n}\n\n}\n. ",
    "dehumanise": "just set this in the laravellocalization.php config file :)\n'useAcceptLanguageHeader' => false. ",
    "chriys": "Thanks for mentionning. Here to help. . ",
    "OGhawsi": "@DineeshDS in Config folder App.php just set 'locale' => 'ar'. I have done the same for Pashto and Persian which has Arabic script.. Have you activated Arabic in localization file...check the docs... publish vender files . ",
    "DineeshDS": "Yes , same way i have tried . I put  'locale' => 'ar' in App.php but first time site is loaded language is marked as English(default). Yes i have activated arabic , Language is changing english to arabic when enter ar in the url , both language switching is working but i can't change default from english to arabic. ",
    "ahmedalmulki": "Hi did you find a solution for your problem , I can't make the Arabic language default .. ",
    "Ahmadgoma": "just set this in the laravellocalization.php config file \n// If false, system will take app.php locale attribute\n'useAcceptLanguageHeader' => false. ",
    "wilfalken": "Ok I found a solution...\nI've kept prefixed the Auth routes, but I've escaped the password reset route as this :  \n```\nRoute::group(['prefix' => LaravelLocalization::setLocale(),\n            'middleware' => [ 'localeSessionRedirect', 'localizationRedirect', 'localeViewPath' ]\n        ], function()\n\n{\n    // .................... many routes lol\n    Auth::routes();\n    Route::get('/home', 'HomeController@index')->name('home');\n});\nRoute::get('password/reset', 'Auth\\ForgotPasswordController@showLinkRequestForm')->name('password.request');\nRoute::post('password/email', 'Auth\\ForgotPasswordController@sendResetLinkEmail')->name('password.email');\nRoute::get('password/reset/{token}', 'Auth\\ResetPasswordController@showResetForm')->name('password.reset');\n```\nthat seems to work now....\nBy the way I love so much your package I've something to share. If you have only two languages on your App, here is a little \"Language Switcher\", with no [t much] javascript (enough JS with all packages + Bootstrap + admin and so on ...) only the 'onChange=' here, no controller (yes it is possible !!!), only this great Localization package : \n\nSo, in App.blade.php (the layout to control them all ... ), In the navbar (for me, but do what you want / need) : \n<div class=\"switch mt-1 mr-5\">\n                    @if ( LaravelLocalization::getCurrentLocale() == 'fr')\n                        <form action=\"{{ LaravelLocalization::getLocalizedURL('en', null, [], true) }}\">\n                            <label>\n                                <img src=\"{{  asset('storage/') }}/logos/USA.png\">\n                                <input type=\"checkbox\" class=\"form-check-input\" name=\"langselect\" onChange=\"this.form.submit()\" checked>\n                                <span class=\"lever\" style=\"margin-left: 0; margin-right: 0;\"></span>\n                                <img src=\"{{  asset('storage/') }}/logos/France.png\">\n                            </label>\n                        </form>\n                    @else\n                        <form action=\"{{LaravelLocalization::getLocalizedURL('fr', null, [], true) }}\"> {{-- {{ LaravelLocalization::setLocale('fr') }} --}}\n                            <label>\n                                <img src=\"{{  asset('storage/') }}/logos/USA.png\">\n                                <input type=\"checkbox\" class=\"form-check-input\" name=\"langselect\" onChange=\"this.form.submit()\" unchecked>\n                                <span class=\"lever\" style=\"margin-left: 0; margin-right: 0;\"></span>\n                                <img src=\"{{  asset('storage/') }}/logos/France.png\">\n                            </label>\n                        </form>\n                    @endif\n                </div>\nAnd for the CSS (I let you find flag images, your own colors and so on... and sorry for so much code in this post) : \n```\n/ Switch\n   ========================================================================== /\n.switch,\n.switch {\n  -webkit-tap-highlight-color: transparent;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n.switch label {\n  cursor: pointer;\n}\n.switch label input[type=checkbox] {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n.switch label input[type=checkbox]:checked + .lever {\n  background-color: #84c7c1;\n}\n.switch label input[type=checkbox]:checked + .lever:before, .switch label input[type=checkbox]:checked + .lever:after {\n  left: 18px;\n}\n.switch label input[type=checkbox]:checked + .lever:after {\n  background-color: rgb(84, 231, 204);\n}\n.switch label .lever {\n  content: \"\";\n  display: inline-block;\n  position: relative;\n  width: 36px;\n  height: 14px;\n  background-color: rgba(0, 0, 0, 0.38);\n  border-radius: 15px;\n  margin-right: 10px;\n  -webkit-transition: background 0.3s ease;\n  transition: background 0.3s ease;\n  vertical-align: middle;\n  margin: 0 16px;\n}\n.switch label .lever:before, .switch label .lever:after {\n  content: \"\";\n  position: absolute;\n  display: inline-block;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  left: 0;\n  top: -3px;\n  -webkit-transition: left 0.3s ease, background .3s ease, -webkit-box-shadow 0.1s ease, -webkit-transform .1s ease;\n  transition: left 0.3s ease, background .3s ease, -webkit-box-shadow 0.1s ease, -webkit-transform .1s ease;\n  transition: left 0.3s ease, background .3s ease, box-shadow 0.1s ease, transform .1s ease;\n  transition: left 0.3s ease, background .3s ease, box-shadow 0.1s ease, transform .1s ease, -webkit-box-shadow 0.1s ease, -webkit-transform .1s ease;\n}\n.switch label .lever:before {\n  background-color: rgba(38, 166, 154, 0.15);\n}\n.switch label .lever:after {\n  background-color: #F1F1F1;\n  -webkit-box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n          box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n}\ninput[type=checkbox]:checked:not(:disabled) ~ .lever:active::before,\ninput[type=checkbox]:checked:not(:disabled).tabbed:focus ~ .lever::before {\n  -webkit-transform: scale(2.4);\n          transform: scale(2.4);\n  background-color: rgba(38, 166, 154, 0.15);\n}\ninput[type=checkbox]:not(:disabled) ~ .lever:active:before,\ninput[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before {\n  -webkit-transform: scale(2.4);\n          transform: scale(2.4);\n  background-color: rgba(0, 0, 0, 0.08);\n}\n.switch input[type=checkbox][disabled] + .lever {\n  cursor: default;\n  background-color: rgba(0, 0, 0, 0.12);\n}\n.switch label input[type=checkbox][disabled] + .lever:after,\n.switch label input[type=checkbox][disabled]:checked + .lever:after {\n  background-color: #949494;\n}\n```\nThanks a lot for the package, bye\n. ",
    "dmarcoFC": "I'm also looking for a solution, did you find something ?. ",
    "perffy": "I found the problem.\nI was calling getLocalizedURL() in the AppProvider and that causes the problem. If i call it in the view, it works. I will post a link to check it live: http://www.betandgetrich.com. i found the problem. Here is the solution if anybody have the same issue:\nBolierplatte creates in the config folder a file locale.php. You need to set the status to false. That's it :). ",
    "sornbarang": "```\nRoute::group(\n[\n    'prefix' => LaravelLocalization::setLocale(),\n    'middleware' => [ 'localize' ] // Route translate middleware\n],\nfunction()\n{\nRoute::group(['namespace' => 'Front'], function () {\n\n    Route::get(LaravelLocalization::transRoute('routes.casinos'), ['as' => 'casino.index', 'uses' => 'CasinosController@index']);\n\n});\n\n});\n```. ",
    "user0017": "it already covered in the documentation\nsetLocal_function. I think that you have to define translated column on your post table\ntitle_en, title_fr, title_es  (it recommanded to use separete table like translated_post_table )\nor in json file (it would be fast)\nand use function that detect the localization to get the tanslated params ,  such as title , body.\nand for common words,pragraphs is already defined on your /lang/es.json file or /lang/es/something.php. ",
    "ronrun": "If the user's language setting is es, but the url is http://xxx.com/en/product/1, obviously you should not provide es content, because the current url is en. I think you can redirect.. Maybe you forgot to set the value for $this->lang. ",
    "jeremy379": "I got the same issue.\nIt was caused by the value of APP_URL I setup in my .env. This value can't finished by a /.\nRemoving it fixed my issue.. ",
    "dev-itbinc": "i guess, It was implemented with #457 . ",
    "wotta": "@mcamara could you please take a look at this?. To stay consistent with the way how laravel calls them. I would definitely not want to break all other configurations.\nMaybe this can be merged to a new version which is semver compliant to not break lower versions.. You know if that is what he wants I can just as easily update this pr right :). Yes i will update the pr, but that will be tomorrow in the evening.\nHopefully that is no problem.\nI will be driving up to my vacation address where I will do the fixes.. If you could please :),\nThe internet here is terrible.\nI have been thinking about using both configs but I really seems like something I wouldn't do.\nI would stick with the new config and maybe use the old one as a fallback.\nLet me know your thoughts.. That sounds like a good idea.\nI thought about merging the existing config to the new file and basically don't use the old one anymore.\nHowever I see some problems with my method.\nI would love to see your solution in a PR where we could discuss it further if needed :).\nI will close this one and will wait till I see yours.\nCould you tag me in a comment?\nAlso thank you for your understanding.\nHoped that the internet would be better\ud83d\ude02. @NBZ4live thanks for thinking along and showing another way to do so.\nI think that your solution will come the closest to what we want/need to achieve.\n@mcamara @semyonchetvertnyh any thought's on this or can we agree on the approach that @NBZ4live showed?. ",
    "semyonchetvertnyh": "In my opinion, it's much better to rename config file from laravellocalization.php to localization.php. Why we need \"laravel\" prefix?\n@mcamara let me know, please, what do you think about it? If you don't mind, I will prepare PR.\n. of course, why not :) I just hope he'll approve this idea! I think it would be great to remove \"laravel\" prefix also from service provider and facade, to make them shorter and more informative.. @mcamara thank you for fast answer! what do you think about remove prefix also from service provider and facade?. @mcamara I think so too :)\n@wotta will you update the PR?. @wotta hi! how it's going? do you need some help maybe?. I can make PR by myself if you are on vacation and it's uncomfortable to work :)\nI think the best way to avoid breaking change and support 2 configuration files is just check one time which file exists \u2014 config/laravel-localization.php or config/localization.php, use the first anywhere.. If @mcamara is ok with breaking changes, I would prefer to:\n\nRename config file from laravel-localization.php to localization.php\nRename all config variables to more Laravel-style (e.g. supportedLocales -> supported_locales; useAcceptLanguageHeader -> use_accept_language_header; etc)\nRemove Laravel prefix from class names such as facade, service provider, middlewares, etc\nCreate a new version branch of package \u2014 1.4\nDescribe breaking changes in update guide from 1.3 to 1.4\n\nI think it's better way and it's good step forward. We'll avoid to maintaining and merging two versions of config files. For example, it's how Spatie (most respectable creating open-source packages company in Laravel community) handle with it.\n@mcamara let me know please, if you're ok with this approach and I'll prepare PR.\n@NBZ4live @wotta what do you guys think?. ",
    "NBZ4live": "This will not really work with mergeConfig.\nIf you change the file name, you need to change the namespace in all calls to config()/config repository, too.\nThe best way, imho, is to:\n1. Rename the file and all calls in the package\n2. In the service provider first mergeConfig(DIR.'/../../config/config.php', 'localization')\n3. Check if config('laravellocalization') exists and if yes, merge it to config('localization')\n. You should call it statically only on the Facade, not the real class.\nJust use \\Mcamara\\LaravelLocalization\\Facades\\LaravelLocalization or \\LaravelLocalization. ",
    "masabni": "this issue is referred here #457 but in a different solution. . ",
    "woodspire": "ok ... but since it's expected to work this way, the readme entry would simply specify that route binding works when querying the library to a route in another language ?\nI can also add a link to Laravel Route Model Binding documentation.. Readme updated.. ",
    "andrey-helldar": "\nThis gives an intuitive sort order that allows users to find their own language quickly - especially in a long list of languages.\n\nI do not agree with this statement, because I was not able to intuitively find the necessary localizations in the settings file.\nHere's an example: I needed to activate the ru and de locals. Instead of scrolling through the list, found in the ru andde keys, I had to launch a search on the file and enter ru first, and thende. It is very uncomfortable.. Maybe you're right, but as a developer it was completely incomprehensible to me.. ",
    "Flobbos": "While I was writing this bug report my colleague found a possible fix:\nLaravelLocalization.php line 785\nif($this->currentLocale == $this->defaultLocale && $url[0] != $this->defaultLocale) {\n    array_unshift($url, $this->defaultLocale);\n}\nAfter adding this everything finally worked.. ",
    "addorange": "Hi mcamara,\nunfortunately I did not get the notifications on this thread. Is it possible to re-open this pull request? Will update the readme then and check, if it's still working like expected.\nCheers\nChris. Ok. Thanks :-).. Hi @mcamara,\nI did resolve the conflicts and updated the README.md to reflect the options coming along with localesMapping.\nWould be great, if you would merge it.\nCheers\nChris\n. Yeah, thanks!. ",
    "tombutterworth": "This was solved by making sure everything thing that was locale relevant was in its own locale folder and then adding to the error handler class to catch none existent views and throw as 404s.. ",
    "borealsmith": "Hi, \nI noticed this issue. \nI assume that instead of getLocalizedUR one should use the getURLFromRouteNameTranslated helper function.\nThe subsequent issue of doing so is that when using getURLFromRouteNameTranslated along with Route Model Binding the JSON version of the Model will be inserted in the url instead of model id valie.\nCheers,. ",
    "dadaismus": "Did you verify that mod_rewrite is enabled on your server?. ",
    "igerslike": "Obviously, it is :) \nThe problem is getLocalizedUrl doesn't ignore the routes that are not in the localized group, trying to get a route for /en/blog when this route doesn't exist, so will throw a 404.\nThe only solution I found was to place the translated routes at the end of the file ( web.php ), but definitely, getLocalizedURL should evaluate if the current URL is on the middleware group \"localize\" or others in order to ignore these non-localized routes.\nMy approach was a creating a specific controller for switching languages without relying on getLocalizedUrl to actually switch the language.\n. My workaround is to add the slash directly into the translation, I know it might confuse you if you are organized but its a temporary workaround for this issue\n<?php \nreturn [\n    # Hosting\n    'hosting-web' => 'web-hosting-linux-hosting',\n    # Services\n    'services-websites' => 'services/web-design-create-websites',\n]\nThis is an example of how you can bypass this by adding the slashes directly into the translation.\nI have created also a new Middleware as an alternative to Language Switcher\n```\n<?php\n        # Get the Localized URL\n        $redirect = LaravelLocalization::getLocalizedURL($lang,$url,[],true);\n    # Check if we have found a route by the URL Name\n    $isTranslatedRoute = LaravelLocalization::getRouteNameFromAPath($redirect) !== false;\n\n    # Route is not a translated one, so we we will just redirect back since the language is set\n    # we also here make sure to ignore the home url or trailing slashes compare\n    $nonLocalizedUrl = rtrim(LaravelLocalization::getNonLocalizedURL($redirect),'/');\n    if (!$isTranslatedRoute && $nonLocalizedUrl !== url()->to('/')) {\n        return redirect()->back();\n    }\n    # Redirect to the localized URI\n    return redirect()->to($redirect);\n\n```\nThis will make sure if a NON-Translated URL is not available for this language it will redirect back to his page and not throw a 404. This used to provide a translation option at all pages even if they are not in the localized group. The previous solution was still trying to build a URL even if the URL is not in the translations group.\n. ",
    "YellowFish085": "Hello there,\nI have the same \"issue\" using the latest (1.3.9) version.\nIn the (simplified) routes/web.php file I have:\n```php\n<?php\nRoute::group([\n    'prefix' => LaravelLocalization::setLocale(),\n    'middleware' => [\n        'localize',\n        'localizationRedirect',\n        'localeSessionRedirect',\n        'localeViewPath'\n]], function() {\n// fr/tableau-de-bord\n// en/dashboard\nRoute::prefix(LaravelLocalization::transRoute('routes.dashboard'))\n    ->group(function () {\n\n    // fr/tableau-de-bord/compte\n    // en/dashboard/account\n    Route::get(LaravelLocalization::transRoute('routes.dashboard_account', 'DashboardController@account')\n        ->name('dashboard.account');\n    });\n\n});\n```\nand in the lang files:\n```php\n<?php\n// resources/lang/en/routes.php\nreturn [\n    'dashboard'         => 'dashboard',\n    'dashboard_account' => 'account',\n];\n// resources/lang/fr/routes.php\nreturn [\n    'dashboard'         => 'tableau-de-bord',\n    'dashboard_account' => 'compte',\n];\n```\nThe default language used is fr.\nhttp://localhost/fr/tableau-de-bord/compte and http://localhost/en/dashboard/account both works IF I access them directly in the browser.\nBut if I try to change the language using the language switcher the route is not translated correctly:\n- If I'm currently in fr, the links will be http://localhost/fr/tableau-de-bord/compte and http://localhost/en/tableau-de-bord/compte\n- It I'm currently in en the links will be http://localhost/fr/dashboard/account and http://localhost/en/dashboard/account\nThis issue seems to be a duplicate of #290, where other users points to a limitation in the getLocalizedURL() method that can't translate routes that are in a group using a translated prefix.\nIs this a real issue or just limitation of the package?\nEdit\nIf it's a limitation it could be nice to have a little note on the README next to the language switcher example code to alert the devs of this behaviour :). ",
    "pmochine": "I see... I'm I came with laravel 5.4... so it was before that... am I right? (After that I'm closing). @philmarc thanks but that won't really help so I created my own package https://github.com/pmochine/Laravel-Tongue\nThanks nonetheless :). ",
    "zedentox": "routes.php was replaced by web.php and api.php in newer versions of Laravel.. ",
    "coding-sunshine": "I am facing the same issue. Did you find the solution?. ",
    "DmitrySkibitsky": "Similar problem. . This parameter is not taken into account. And get duplicate URL. SEO is not good at all. How to fix?. Here's the solution #585. Solved the problem this way\n\n\nI don't know why it works like that. But it is very strange.\n. In the end I had to add the crutches. As I have shown above works only if the sessions has a record of localization. And if not, the default localization is not displayed.\n\n. @romansidorov, \u0438\u0437\u0432\u0438\u043d\u044f\u044e\u0441\u044c. \u042f \u043f\u043e\u0441\u043f\u0435\u0448\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u043b \u0432\u044b\u0432\u043e\u0434 \u0447\u0442\u043e \u044d\u0442\u043e \u0440\u0435\u0448\u0430\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443. \u0412 \u0438\u0442\u043e\u0433\u0435 \u0435\u0441\u043b\u0438 \u0432 \u0441\u0435\u0441\u0441\u0438\u0438 \u043d\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u0438 \u043e \u043b\u043e\u043a\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u0442\u043e \u043e\u043d\u043e \u0432\u0441\u0435 \u0442\u0430\u043a \u0436\u0435 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u043e\u0439 \u043b\u043e\u043a\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438. \u041d\u043e \u0435\u0441\u043b\u0438 \u0432 \u0441\u0435\u0441\u0441\u0438\u044f\u0445 \u0435\u0441\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u044c \u043e \u043b\u043e\u043a\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0442\u044b \u043d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0448\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0440\u043e\u0443\u0442\u0435 \u043a\u0430\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043b\u043e\u043a\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0430 \u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u043b\u043e\u043a\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f = \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u0430\u044f \u043b\u043e\u043a\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u043e \u0435\u0441\u043b\u0438 \u0441\u0442\u0430\u0432\u0438\u043c localeSessionRedirect \u0432 \u0441\u0430\u043c\u044b\u0439 \u043a\u043e\u043d\u0435\u0446 \u0446\u0435\u043f\u043e\u0447\u043a\u0438 \u043c\u0438\u0434\u0434\u043b\u0432\u0430\u0440\u043e\u0432 (\u043a\u0430\u043a \u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0435) \u0432 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u0443\u044e \u043b\u043e\u043a\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e (\u043b\u0438\u0447\u043d\u043e \u0443 \u043c\u0435\u043d\u044f. \u042f \u0438\u0437-\u0437\u0430 \u044d\u0442\u043e\u0433\u043e \u0440\u0435\u0448\u0438\u043b \u0447\u0442\u043e \u0432\u0441\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043b\u043e\u0441\u044c, \u043d\u043e \u043f\u043e\u0442\u043e\u043c \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043e\u0447\u0438\u0441\u0442\u0438\u043b \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u0438 \u0441\u0442\u043e\u043b\u043a\u043d\u0443\u043b\u0441\u044f \u0441 \u0442\u0435\u043c \u0447\u0442\u043e \u0443\u0436\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0435 \u0442\u0430\u043a \u043a\u0430\u043a \u043d\u0430\u0434\u043e. \u041f\u043b\u044e\u043d\u0443\u043b \u0438 \u0431\u044b\u0434\u043b\u043e\u043a\u043e\u0434\u0438\u0442\u044c \u043d\u0430\u0447\u0430\u043b). \n\u041c\u043e\u0436\u043d\u043e \u0432 \\App\\Providers\\AppServiceProvider::boot \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0447\u0442\u043e-\u0442\u043e \u0442\u0438\u043f\u0430 \nphp\nif (session('locale') === null) {\n    session('locale', app()->getLocale());\n}\n\u041d\u0443 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043c\u0438\u0434\u0434\u043b\u0432\u0430\u0440\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0435 \n\n\u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u0443\u044e \u043b\u043e\u043a\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e.\n\u0410 \u0445\u043e\u0442\u044f... \u042f \u0441\u0435\u0439\u0447\u0430\u0441 \u0442\u043e\u0447\u043d\u043e \u043d\u0435 \u043f\u043e\u043c\u043d\u044e \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044e \u043a\u043e\u0433\u0434\u0430 \u043e\u043d\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c. \u041d\u0435 \u043c\u043e\u0433\u0443 \u0432\u0441\u043f\u043e\u043c\u043d\u0438\u0442\u044c.. ",
    "raiika": "Just found a duplication on https://github.com/mcamara/laravel-localization/issues/268\nThe solution is to switch to another git that inspired by this git.. ",
    "lidoma": "@Lorigel I think you set current locale as view-base-path by using the localeViewPath middleware. Remove this middleware and try again.\nMore information: https://github.com/mcamara/laravel-localization#set-current-locale-as-view-base-path. Any help here!. ",
    "PawelDmochowskiDRAST": "Done.. Hello, I there a chance this PR could be merged anytime soon? (there's an app waiting for it...) :). ",
    "kalessil": "Thanks for merging!. ping @mcamara . Thank you for merging and a great extension :1st_place_medal: . ",
    "daniel-de-wit": "Support for translated route caching is included since 1.3.11.\nAdd the LoadsTranslatedCachedRoutes trait to your RouteServiceProvider, like so:\n```php\nclass RouteServiceProvider extends ServiceProvider\n{\n    use \\Mcamara\\LaravelLocalization\\Traits\\LoadsTranslatedCachedRoutes;\n...\n\n}\n```\nThen use php artisan route:trans:cache instead of php artisan route:cache.\n\nBefore 1.3.11 you can use: https://github.com/czim/laravel-localization-route-cache.. ",
    "jonathanpel": "Sorry I missed the first notification, could it be possible to open the pull request again? I will make the requested changes.. I made the changes and conflicts have been resolved.. ",
    "neochief": "Unfortunately, these changes break existing code. Here's an assertion (not added into tests yet) that will not pass with the current changes:\nphp\n        $this->assertEquals(\n            $this->test_url.'test?a=1',\n            app('laravellocalization')->getLocalizedURL('en', $this->test_url.'test?a=1')\n        );\n1) LocalizerTests::testGetLocalizedURL\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'http://localhost/test?a=1'\n+'http://localhost/test?a=1?a=1'. I'm working on the fix right now.. All right, the fix is here: https://github.com/mcamara/laravel-localization/pull/602. ",
    "xlcrr": "This works with French\n{{ utf8_encode(__('messages.welcome1')) }}\nBut it messes up Spanish.\nIn my /fr/messages.php file this seems to work\n'welcome1' => utf8_encode('En Fran\u00e7ais . . . '),. ",
    "evgeny92": "Thanks for your answer, I solved the problem in this way,  I added it to the controller App::setLocale($request->get('lang', 'en'));. Add to the form  <input type=\"hidden\" name=\"lang\" value=\"{{ App::getLocale() }}\">\nand add this in controller  App::setLocale($request->get('lang', 'en'));\npublic function contact(Request $request){\n      App::setLocale($request->get('lang', 'en'));\n      $validator = Validator::make($request->all(), [\n         'name' => 'required|min:2|max:15|',\n         'email' => 'required|email',\n         'message' => 'required|min:10|max:300'\n      ]);\n      if ($validator->passes()) {\n         Mail::to(@gmail.com')->send(new Contact($request));\n         return response()->json(['success'=>'Message sent successfully!']);\n      }\n      return response()->json(['error'=>$validator->errors()->all()]);\n   }. ",
    "Fredwared": "If you are using jQuery you can do this.\n<html lang=\"{{ app()->gelLocale() }}\"> => <html lang=\"en\">\nwindow.locale = $('html').attr('lang');\nand when you call ajax function you can set prefix to your ajax url\n$.ajax({\n   url: locale + '/ajax/route/',\n...\n}) => '/en/ajax/route/' \ud83d\udd22 \nor we can make life easier when we setup Ajax requests\nvar baseUrl = document.domain + '/' + $('html').attr('lang') => https://domain.com/en\n$.ajaxSetup({\n    beforeSend: function(xhr, options) {\n        options.url = baseUrl + options.url;\n    }\n}) \nas resurl $.ajax({ url: '/we/solved/our/problem' })  => https://domain.com/en/we/solved/our/problem \ud83d\ude04 \n. ",
    "romansidorov": "\nSolved the problem this way\n\n\nI don't know why it works like that. But it is very strange.\n\nTried your solution, but redirect from non-localized url to localized still not working. Have you found something else?. Hm. I found out that if I use v. 1.3.9 of this package it works nice, but with 1.3.13 not.. \u0414\u0443\u043c\u0430\u044e, \u044d\u0442\u043e \u0431\u0430\u0433, \u0440\u043e\u0434\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u0441 \u0430\u043f\u0434\u0435\u0439\u0442\u043e\u043c \u043b\u0438\u0431\u044b. \u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043f\u043e \u0444\u0438\u043a\u0441\u0443 :). > Hm. I found out that if I use v. 1.3.9 of this package it works nice, but with 1.3.13 not.\n@mcamara Could you check it please?. > It should be fixed now thanks to @iwasherefirst2 . Can you confirm @romansidorov?\nYes, with 1.3.14 it works as expected. Thanks :). ",
    "Waguilar33": "Will the current version work on 5.7?. ",
    "min1mal": "It is working on 5.7. ",
    "Astatroth": "There's nothing wrong with this package, it's wrong with your PHP version/. ",
    "Hervera": "I am using PHP 7.1.22. I am seeing 2 different versions of PHP, when i put phpinfo() in test.php file i created in public folder, I see that the webserver has php 5.6.37, but in putty terminal using ssh the php version is 7.1.22\nThe php version being used by the webserver is different version to the terminal. I've even chosen the version that i want in cpanel but the same problem occurs again, What can i do?. ",
    "koarng": "@Hervera you should disable php5.6 by : sudo a2dismod php5.6\nhttps://askubuntu.com/questions/761713/how-can-i-downgrade-from-php-7-to-php-5-6-on-ubuntu-16-04. ",
    "AmirAmin": "Hi @simar88,\nThanks and I really appreciate your reply.\nLet me give a try with your solution and I will let you know the results :).\nRegards,. ",
    "Te7a-Houdini": "@fisharebest  aha got your point , but i think the existing pattern will still match to 5.9 , as if we needed to match only 5.6 for example then we should do this , ~5.6.0 , this is mentioned in the composer documentation  or here's an example of other package. @fisharebest  yes exactly. @fisharebest i have pushed a commit to support exactly till version 5.7.*. ",
    "merlinresponse": "Seemed to be a cached route issue. Followed the cache instructions and used the artisan cache/trans feature on the server. Perfect fix.. ",
    "singhpappu": "Thanks @aFluxx.. ",
    "plamenst": "Hello, thanks.\nJust one more thing, would you update the package version in packagist.org, because the version currently is 1.3.16 and can't be installed or updated to 1.3.17.\nThanks.. Hello,\nYou should use:\n{{ LaravelLocalization::getLocalizedURL($locale, $url, $attributes) }}\n(take a look at the documentation)\nFor example in your case:\n<a href=\"{{ LaravelLocalization::getLocalizedURL(LaravelLocalization::getCurrentLocale(), '/tutorials/ubuntu-first-login-via-ssh') }}\">\nOr even better solution would be to put names on the routes and use them to generate URLs.. ",
    "malde11": "I fixed it like this:\nhref=\"{{ App::isLocale('de') ? '/de/tutorials/ubuntu-erster-login-via-ssh' : '/en/tutorials/ubuntu-first-login-via-ssh' }}\"\nCan I use the same for hreflang?\nhreflang=\"{{ App::isLocale('de') ? 'de' : 'en' }}\". ",
    "slowas": "I'am have same problem... ",
    "ahmeddabak": "I have a problem with the package dependencies.\nThe requested package laravel/framework (locked at v5.7.28, required as 5.8.*) is satisfiable by laravel/framework[v5.7.28] but these conflict with your requirements or minimum-sta\nbility.\ni will try to make a pr, after i am done upgrading. ",
    "nikazooz": "@mcamara No. The callback is called only if the ROUTING_LOCALE environment variable is not available otherwise, which is the case with v5.8. For previous versions the usual execution of env function returns wanted result so it is not called, but would return correct result anyway. I've tested it on versions 5.7 and 5.6 just in case.. Thank you for this package! \ud83d\ude42 I've been using it for a while and I'm glad I could help out at least a bit.. ",
    "Briareos17": "Okay, the problem was found in .env APP_URL. There ending \"/\" in uri.\nMay be you can cover this problem somehow to ignore only one \"/\" in baseUrl.. ",
    "lotestudio": "Uf, fixed! Thanks!\n. ",
    "shalawani": "Sorry, but why.\ncould you explain why ?. Ok I got it thanks for your explaining. "
}