{
    "kriswallsmith": "Hi Penny! Thanks for the report, I'll look into it\u2026\n. Added error handling to FileGetContents client (closed by 2b01c00d88179d0497e991c07bd6261dd5da2447).\n. Hm, I wasn't notified about this PR for some reason, but have addressed the issue. Thanks guys!\n. Thanks @fabian. I would rather the check be if (null !== $this->proxy).\n. Would you mind moving the new client class into its own PR?\n. I am adding profiling in the browser-refactor branch via the new listener mechanism.\n. I'm curious -- what is it if it's not a resource?\n. I like this too but I'm not sure about the removeHeader() method. In what cases will that be necessary?\n. I realize that, I'm wondering why.\n. What do you think about this implementation?\nhttps://github.com/kriswallsmith/Buzz/compare/master...form-request\n. That would require a more sophisticated request factory inside the browser, which probably isn't worth the trouble. If you want one line, ->send($request) is probably the way to go. Maybe we tweak the FormRequest constructor to get close to what you've asked for?\n. Hm, why is that?\n. Yes, interfaces need to be added to the library. It's just a bit tricky to do that after the fact.\n. I'm not sure I understand. What isn't working how you expect it to?\n. I didn't realize the Cookie header worked like this. I'll have to\nthink on what the proper solution is\u2026\nThanks for the report,\nKris\nOn Jun 11, 2011, at 3:25 PM, ejrowley\nreply@reply.github.com\nwrote:\n\nI was testing a web at which sets 3 cookies, when I tried to submit the cookies back to the site they came through incorrectly. I sniffed the traffic and found that the 3 cookies where being sent back as individual cookie headers. The patch concatenates the cookie headers and sends them over as a single header. The cookies where then correctly interpreted by the site. To illustrate:\nBefore patch:\nCookie: name1=value1\nCookie: name2=value2\nCookie: name3=value3\non the site I would see\nprint_r($_COOKIE);\nArray\n(\n   [name1] => value1\n   [0] => name2=value2\n   [1] => name3=value3\n)\nafter patch\nCookie: name1=value1; name2=value2; name3=value3\nprint_r($_COOKIE);\nArray\n(\n   [name1] => value1\n   [name2] => value2\n   [name3] => value3\n)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/kriswallsmith/Buzz/pull/11#issuecomment-1353136\n. Thanks!\n. This sort of convenience method should go on the browser, not the client.\n. If this is an issue it should be fixed. How does ZHC address this?\n\nOn Thursday, August 25, 2011, ricardclau \nreply@reply.github.com\nwrote:\n\nHi\nI am trying to get rid of Zend_HTTP_Client in order to use Buzz but I am\nhaving this problem.\nIf one of my POST Parameters contains character '+' it gets converted to '\n' instead of passing it correctly.\n'+' character is always a dirty bitch on HTTP Requests, if you use it on\nGET you must pass it urlencoded and in POST it leads to problems most of the\ntimes.\nI have tried Client\\Curl and Client\\FileGetContents, both having same\nproblems\nHave you got any solution for that? If it is impossible to fix it I will\nhave to switch back to Zend_HTTP_Client as we need the '+' character to be\nsent.\nThanks for your time\nBest regards\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/kriswallsmith/Buzz/issues/20\n. I've added a test for this issue and haven't been able to reproduce it. Please fork and create a test that fails if possible.\n. Glad everything worked out!\n. The switch statement is very confusing. Can you just call the necessary curl_* functions inside of each case block?\n. Would you mind reviewing the curlopts branch?\n. Here's my wish list\u2026\n1. Remove the Mock classes\n2. Remove the noop interface\n3. Add a functional test or two\n\nPossible?\n. The multicurl client has been rewritten. Please see if it fits your needs. Thanks!\n. I'm not sure about this implementation. Basic authentication should just be a method on the request object. The client is not the right place. Digest authentication is a bit more complicated because of the nonce. I'm going to close this for now, but create a ticket for supporting authentication.\n. We should disable autoloading on the class_exists call. \n. You can do this easily enough by adding an Authorization header:\n$request->addHeader('Authorization: Basic '.base64_encode($username.':'.$password));\nThat is good enough for the core request class. Any sort of convenience layer for authentication should go on Browser.\n. I just noticed this today and will probably end up adding the @.\n. This is one of those magic variables php sets after you call file_get_contents()\u2026 not sure why it's not there for you. What version of php are you running? Are you able to access http pages using file_get_contents()?\n. Do you mean if a response is 500, for instance?\n. Yeah, a valid http response shouldn't throw an exception. If there are client errors such as timeout or connection problems, those should throw some sort of Buzz exception. \n. Fixed in 8cbbbc81ae266b2d98bde24332dc94ef2dfac7d8.\n. Did you benchmark and see this is faster?\n. Would you mind rebasing and adding a failing test in FunctionalTest.php?\n. Hm, it looks like the cURL extension defaults to verifying the peer, while the streams default to not verifying the peer. I'm not sure how we should handle that discrepancy, but defaulting to not verifying doesn't seem right. I don't want users to assume that security is in place when in fact it is not...\n. I decided to go with a default of true.\n. I would rather not add a static utility class. This is not done anywhere else in Buzz. Can ProxyUtil be merged into AbstractClient since that's the only place it's used?\n. @simensen Please take a look at what I've done in #58 and post any feedback you have. Thanks!\n. Thanks!\n. Have you confirmed it works? I'm having trouble getting a functional test running.\n. Thanks!\n. I've rebase my branch, which is why your PR looks funny now. I've been able to get functional tests running also, but they're not all passing. I'm travelling today but will get back into this later this week.\n. @simensen Please take a look at FunctionalTest in the proxy branch. I've created a test case to run all the various possibilities but haven't had any luck getting them all to pass. Maybe you'll do better?\n. Will the error_get_last() call still work?\n. Please break this into smaller PRs.\n. The change to how PHPUnit sets up autoloading should be a separate PR.\n. I should also say I'm hesitant to merge the new client. I would rather introduce a stream client than integrate with a vendor for that.\n. There is logic similar to this in the Curl client. Do you see any possibility for reuse?\n. Fixed in 4b0c0865f7db5a744c9bec64f154536cab7dfcf7\n. If you want to add that option you also need to set it under every other method in case the connection is reused for different request methods.\n. I've been able to reproduce this issue but your fix doesn't appear to address it. Can you update Buzz\\Test\\Client\\FunctionalTest to prove your fix works?\n. I'm open to creating a new instance for each request. I was only assuming instances could be reused.\n. Can you say more about this case? If swapping out the storage mechanism is a legit use case I would like to also look at other implementation options.\n. Thanks, Captain Obvious\u2026 In your opinion, should we create a storage interface and inject that into the cookie jar? Designing for inheritance doesn't seem right here.\n. Thanks!\n. Thanks for the pings :) Looking at this now.\n. Please look at #74 and let me know what you think. Your patch prevents users from setting custom options on the resource.\n. I think FormRequest is the solution you're looking for. \n. No plans. I'd be happy with either readthedocs.org or GH pages. \n. I'm curious why this works. Would you mind explaining your change in a bit more detail?\n. :+1: Sounds like a good patch.\n. :+1:\n. RequestException is not useful?\nOn Mon, Feb 18, 2013 at 4:15 PM, Joseph Bielawski\nnotifications@github.comwrote:\n\n@kriswallsmith https://github.com/kriswallsmith This can be closed as\nnew exceptions were introduced.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/kriswallsmith/Buzz/issues/79#issuecomment-13750354.\n. This makes the cookie jar unable to store cookies of the same name from multiple domains.\n. I would rather make the associative array work than throw an exception.\n. Thanks @Seldaek!\n\nThis change should be made in AbstractMessage too, so anywhere you provide an array of headers it can be either indexed or associative.\n. Merged. Thanks again!\n. Take out the new docblocks? Those methods are self-explanatory.\n. What is the difference between the two exception classes?\n. I would rather do this using composition using a new ClientInterface that will issue a new request if the response comes back a redirect.\n``` php\n<?php\n$client = new RedirectClient(new CurlClient(), new MessageFactory());\n```\n. I don't see anything in the spec that says the reason phrase is optional, only that the client is not required to display it.\nI am open to removing the change in error handling if it makes it easier to debug issues, but can't merge only that change because you've submitted two changes here.\n. Thank you. Would you mind writing a functional test to demonstrate this defect?\n. Thanks!\n. I would rather not pollute runtime with dependency checks\u2026\n. According to the PHP manual curl_init() will return \"FALSE on errors.\" This is not a check to see if the extension is installed.\n. Thanks @lmammino!\n. Are you checking the status code before reading the response content?  \nOn Wednesday, January 9, 2013 at 1:46 PM, Gr\u00e9goire Pineau wrote:\n\nCan you copy/paste the full request (as text/plain) ?\nThanks.  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/kriswallsmith/Buzz/issues/101#issuecomment-12068449).\n. @ryancastle good point. want to add that interface?\n. The client does not create the response. When you use the client you must pass in a response object. It is your responsibility to hold into that response, same as any other client. \n. Done!\n. @TitanKing buzz is not dead\n. Thanks!\n. Thanks, but these should be @return MessageInterface The response to match send().\n. This is currently a client-level concern. The Curl client relies on Curl to do this. The FileGetContents client uses the PHP cookie jar. I don't see a design flaw, but docs could be updated.\n. The Curl client creates a new handle for each request, so you need to use the CURLOPT_COOKIEJAR option.\n. I'm open to it. Could it be added as a listener?\n. This sounds like something that could be implemented as a listener?\n. Thank you for this. I'm wondering why we need both batch and async interfaces? Can they be merged into one?\n. multi_curl is still a mystery to me. Can you write some tests to prevent regression? The codebase isn't the place for the example file\u2026 maybe add a blurb to the README for now?\n. I made a few tweaks. Please provide any feedback here. Thanks again for your work!\n. Is there anything like response location in the HTTP spec?\n. I want to keep the scope of the client classes very limited. If we are going to implement auto-redirect in PHP I would rather see it in the browser.\n. (in the browser you can use getLastRequest() to determine the response location)\n. Thanks!\n. Thanks!\n. Hm, this should already be handled in AbstractCurl::populateResponse(). Would you mind debugging there to see what's going on?\n. Thanks!\n. The multi curl client has been rewritten. Please let me know if this issue persists.\n. I agree with @stof.\n. Thanks!\n. Why should listeners be moved to the client level?\n. Thank you!\n. Can someone create a PR that addresses this?\n. This can be done with a listener. I'd rather not add more to the browser.\n. I wonder if it would be better to throw an exception in this case?\n. After having read your description, it doesn't sound like you're using Buzz to make an HTTP request in this case, which isn't something I intended to support with this library.\n. #136 has been merged.\n. The multicurl client has been rewritten. Please let me know if it suits your needs.\n. No. I'll be able to put more time toward open source soon.\n\nOn Saturday, March 15, 2014, Ryan White notifications@github.com wrote:\n\n@kriswallsmith https://github.com/kriswallsmith Has this repo been\nabandoned? Should someone else be added as a collaborator (@stofhttps://github.com/stof?)\nto get some of the pull requests merged here? It looks like it's been about\n6 months since any commits have been merged. There are active discussions\nabout the issues/pulls that are for this repo. Hate to see it fragmented.\n\nReply to this email directly or view it on GitHubhttps://github.com/kriswallsmith/Buzz/issues/147\n.\n. Thanks for your patience.\n. This should be moved to AbstractCurl if we can't implement it on any of the other clients.\n. see #195 \n. A file:// request is not an HTTP request.\n. I just pushed a v0.11 tag.\n. Thank you for all the work you've put into this!\n\nThis should be implemented as a browser listener. You should be able to accomplish resend() by injecting the client into the listener's constructor. That isn't a real solution, however\u2026\nWhat if I changed the listener interface to something like this?\nphp\ninterface ListenerInterface\n{\n    public function preSend(Browser $browser, RequestInterface $request);\n    public function postSend(Browser $browser, RequestInterface $request, MessageInterface $response);\n}\nWould that give you everything you need?\n. Would you mind squashing this down to one commit?\n. I'm not sure it would be usable with the fix. Having a response object with no headers is not okay. I don't think it should fail silently. Thoughts?\n@doublejosh Can you use the Curl client instead?\n. Does 2 mean that one redirect is followed?\n. Cool, thanks.\n. Thanks!\n. @adampiotrowski unless there's a justification i'm not aware of, yes please\n. see #195 \n. Thanks!\n. Can you please write a test to demonstrate this defect?\n. If someone can add a test I will look at this. I'm not sure how to reproduce. \n. Thanks!\n. Thanks!\n. The request interface is an expression of the HTTP spec for request messages, which (AFAIK) does not include any mention of proxies. Proxies are a feature of the client.\n. See #189.\n. Thanks!\n. Thanks!\n. What is the justification for this change?\n. see #195 \n. No process, just need to get my attention. Thanks!\n. The default HTTP protocol version was changed from 1.0 to 1.1\u2026 maybe that's causing some behavior to change somewhere in your stack? Please try your test suite with 0.14 and the protocol version set to 1.0 and see if that makes a difference.\n. Everyone here is experiencing this issue while using Behat?\n. If you change the default HTTP protocol from 1.1 back to 1.0 does that fix\nthe issue?\nOn Sun, 26 Jul 2015 at 14:57 peroumal1 notifications@github.com wrote:\n\nHello,\nI also experienced a speed issue with the last stable version (v0.15) and\nhad to downgrade to 0.13.\nIn my case, I am not using Behat but I am doing a HTTP request to an\nexternal site in a Symfony controller. The URL requested and what it\nreturns is static (so it cannot come from the URL).\nI was able to pinpoint the exact place where the client is taking more\ntime from one version to another.\nIt looks like it comes from the file_get_contents call in\nlib/Buzz/Client/FileGetContents.php, which, from my current observations\ntake less than 200ms in 0.13 and around 6s (!) in 0.15.\nSince I am pretty new to this library, did something change on the\nparameters passed to this function from a version to another ?\nThanks !\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kriswallsmith/Buzz/issues/196#issuecomment-125043739.\n. Thanks!\n. Thanks!!\n. These are headers, not content...\n. Exploding into one piece is the same as not exploding at all...\n. What is this pattern? Can we use parse_url() instead?\n. Cool, thanks for humoring me :)\n. This is a proper noun and should be capitalized.\n. Why this change? The HTTP spec specifies \\r\\n.\n. Again, why this change? Is it related to the purpose of the PR?\n. \n",
    "mjollnir": "wow, that was super fast! Thanks! :)\n. ",
    "rndstr": "Ok I actually think this solution is much more elegant than mine :) Wasn't aware of the explode limit argument and missed this open pull request.\n. ",
    "fabian": "Agreed.\n. Okay, I've moved the changes into a custom Browser class.\n. MultiCurlAsync now in #27\n. ",
    "lsmith77": "Seems like an expensive 2 calls, maybe a specialized Browser class makes more sense for your given use case?\n. Hmm .. not so good that this is now mixed together. We should always send pulls from a branch and not master. Anyway, @kriswallsmith how should we best handle things now?\n. ok will do.\n. +1 .. @paschke also stumbled over this ..\n. @kriswallsmith: should this rather go into https://github.com/kriswallsmith/BuzzExtension ?\n. @mtdowling indeed quite a hack .. @chregu what do you think of the above suggestion?\n. fyi .. i just rebased the PR on top of current master\n. ok .. not sure when i will have time do work on this .. so in case someone else needs this feature .. feel free to \"fork\" and improve my PR\n. we are storing the cookies to send in requests inside the session\n. dunno ... i don't think that many people will need to do something like this .. but this didn't feel like all that bad to do with inheritance and the changes are not all that drastic.\nof course for example for sessions in Symfony2 core we have this separation, but it seems a bit like overkill for this use case.\n. no .. i guess this is rather a typo .. it should be array_shift here\n. ",
    "choult": "Given that it can only be set by the Curl class or its subclasses - in my instance, it's the Curl class directly - it can only be one of two things - a curl resource or a dead curl resource.\nThis might be my environment and combination of php libs, rather than purely code, but a couple of sanity checks never go amiss ;)\n. ",
    "marcw": "Fixed.\n. It's because your request must contains the Content-Type and Content-Length headers.\nEach time you add fields, the headers must be recomputed. \nI realize that I forgot to add the computation in the setFormData method. \nBeside that, removeHeaders makes the job of setPostHeaders easier.\n. :+1: \nIt looks much more neat to me.\n. I think it's a best practice to not use these methods. \n. Rebasing is done but I don't get what you want for the functional test. By the way, tests is failing for PUT method.\n1) Buzz\\Test\\Client\\FunctionalTest::testRequestMethods with data set #8 (Buzz\\Client\\FileGetContents, 'PUT')\nFailed asserting that null matches expected 'PUT'.\n. Damn. I was totally confused by Firebug.\n. ",
    "ornicar": "You know what? I :+1: this PR\n. There still is an effort to make in term of API.\n$browser->post($url, $data); // would be neat\n. The point of\n$browser->post($url, $data);\nis that I don't have to instanciate the request and the response myself\n. hey, I like one liners. I like to receive a simple instance of Browser (BrowserInterface would be even better) and be able to do my stuff without making assumptions about the internal classes.\n. ",
    "stof": "@kriswallsmith The PostRequest uses it.\n. For POST request, they simply rely on http_build_query\n. There's one thing I don't understand here. You reported having an issue for POST requests and you are now providing a test with GET requests (and the result is the right one for these GET requests btw)\n. is there some news about this ? The basic auth seems to be the last missing piece for Goutte (not supporting digest auth is not an issue for Goutte as Zend Http Client does not support it either so it will not remove feature)\n. a simple implementation has been merged in #93\n. It is not enabled by default on windows so you need to check if it is available\n. This fixes #35\n. it is also part of the fileinfo extension so they are either both available, either none :)\n. and it is deprecated\n. ah no, it seems like it is not part of fileinfo. it is simply documented in the fileinfo section on php.net\n. @kriswallsmith ping\n. done\n. Ok, I fixed it: I was setting the content directly (because I'm generating it) but was not setting the filename. Adding the filename produces the expected result.\n. @kriswallsmith shouldn't it be documented somewhere that letting the filename empty will not lead to a file upload but to a standard post variable when using FormUpload ?\n. @kriswallsmith do you have time to review it ?\n. @kriswallsmith ping\n. As it saves a method call, it is likely to be faster when using XDebug (which makes method call more costly) but I doubt there is much difference without XDebug\n. @simensen they will appear in the current PR only once they are merged into the proxy branch as this PR is about incorporating the proxy branch, not pending PRs to the proxy branch\n. I don't like the way your library handles errors: it does not handle them and break the whole app in such case. die when the response is invalid is a no-go IMO\n. @Burgov you should implement the ignore_error in the adapter then.\nAnd btw, does your library follow redirections ? If no, the adapter need to handle it\n. @kriswallsmith smaller PRs ? This only adds one new client implementation, and its tests\n. The issue is that this makes the behavior of Buzz inconsistent if you have an error handler turning warning into exceptions (which is the case in Symfony in debug mode for instance): you would get a different exception in debug mode and in non-debug mode, making it hard to catch them.\n. It even recommends omitting it when using a VCS repository to avoid mistakes when tagging\n. The send method returns a Response object. Simply call the getter for the status code: https://github.com/kriswallsmith/Buzz/blob/master/lib/Buzz/Message/Response.php#L30\n. I would add a marker ExceptionInterface implemented on the exceptions to allow catching easily all exceptions coming from Buzz (similar to what Symfony and ZF are doing for instance)\n. update Buzz as this has already been fixed\n. can you check what curl_version() is returning ?\n. duplicate of #111\n. Currently, cookies are supported only when using the FileGetContents client. All you need to do to use it is to pass a CookieJar when creating the client (or to inject it after that through the setter).\nOther clients don't support it.\n@kriswallsmith I think it is a design flaw. Cookies should be supported when using curl too. Wouldn't it be better implemented with a listener registered in the Browser instead of putting this in the client and making each implementation responsible to call it ?\n. RequestInterface::getContest is expected to return a string. If you want to allow using an castable object as content when creating a request, the cast should be done in the Request instead\n. @rybakit What I mean is that your PR should implement the casting in the Request class rather than in places calling the getter.\n. I don't think this is a good idea. The getter should stick to the interface IMO.\n. @Koc It failed, but not because of an error while installing composer. It is now a real test failure\n. @kriswallsmith ping. Are you still maintaining Buzz ?\n. use the $browser->post() method: https://github.com/kriswallsmith/Buzz/blob/master/lib/Buzz/Browser.php#L34\n``` php\n$payload = array(); // Build your payload\n$headers = array(\n    'Content-Type' => 'application/json',\n    // Add any other header needed by the API\n);\n$browser->post($url, $headers, json_encode($data));\n``\n. what is the error you get ?\n. the Travis setup should be updated to use php-fpm instead (PHP 5.3 is not able to compile php-cgi and php-fpm at the same time, which is why only one of the is available). 5.4+ is able to provide both php-cgi and php-fpm\n. I thinkk you should separate the Travis setup fixes to a separate PR to make the review easier\n. sure it is. This is whatsetContent` is about in the Request object\n. Can you send a pull request with the fix ?\n. the query string is part of the URL, so you should handle them when building the URL.\nFor POST params, you have 2 solutions:\n- build the request content by hand\n- use the Buzz\\Message\\Form\\FormRequest subclass, which allows you to set params and will build the body for you.\nI strongly recommend you to use the second way (especially if you need to post a form upload, and so build a multipart body, which is much more complex)\n. btw, the Buzz\\Browser class has a submit method to handle form upload easily\n. the line you reference is in Payum, not in Buzz. Please report the issue to Payum.\n. Buzz is totally unrelated to Laravel, so this issue should be closed. file_get_contents should work with https URLs as long as you have the openssl extension (and that it has the proper configuration for its CA file).\nWhat is the error you are getting ?\n. being able to install php5-curl without libcurl looks weird to me. The package manager should be handling dependencies.. Well, the SSL certificate is on the server you are contacting with Buzz (so probably a Google server in your case). you should report it to the owner of the website which you try to access. Buzz is not the source of the issue here. It is the one telling you that the SSL certificate of the target server is not valid.. The list is also confusing. Using PSR-4 is not a wish anymore. The composer.json already uses it.. @Nyholm the rule should generally be that your own non-deprecated code should not call your own deprecated code though (and CI can ensure that btw). @Nyholm the issue here is that all the existing high-level API of the Browser still relies on the Buzz Request and Response layer rather than on the PSR-7 layer (which is totally separate on the side). So the existing release is too early to deprecate the non-PSR-7 way IMO.. @Nyholm if you make a BC-breaking release changing all the return values for the high-level API, you should just drop the old Request/Response stuff at once in favor of PSR-7.\nIf you want a progressive way, a solution could be to make this in multiple steps:\n\nmake Browser::send convert the Buzz request to PSR-7, then use the PSR-7 client API and convert back the response (similar to what https://github.com/symfony/psr-http-message-bridge does).\napply middlewares in Browser::send in the PSR-7 layer\nconvert all existing listeners to middlewares\nmake a bridge allowing to wrap listeners into a middleware (so that they can move from the Buzz Message layer to the PSR-7 one), and deprecate registering listeners in favor of middlewares (the bridge middleware being the BC layer)\nconvert the high-level APIs at this point only (which is the BC break) and drop the Buzz Message layer. The readme of https://github.com/php-http/buzz-adapter should be updated to mention that Buzz 0.17+ does not require the adapter anymore, as it implements the interface directly.. Well, if you have a Docker container with PHP installed in it, you could as well run the 3 commands inside the container. version 2.0 does not exist yet on the HTTPlug side, right ?. The commit history looks weird though, as it still talks a lot about server push. PUT requests don't have the content anymore\n. you should not restrict it IMO. People may want to use the PATCH method for instance with Buzz\n. yeah, but only POST, not custom methods.\nAnd in my previous comment, I said the issue was for PUT, not for POST :)\n. why typehinting \\Closure here ? the PHP documentation says it should not be used to typehint and without this typehint, any callable could work for this listener, not only closures.\n. how are we supposed to access the journal in such case ? there is no setter for it.\n\nSo you should either add a setter, either makes it mandatory to inject it as the instantiated one is simply useless currently\n. you should suggest ext-curl\n. you should not change the indentation here\n. please remove all trailing whitespaces you added\n. protected methods should be defined after public ones, not before them\n. youo should simply use if instead of elseif as the if returns\n. Buzz is using the Symfony2 CS\n. I don't think you should suggest dev-master explicitly as this version will change. You should either use a constraint targeting releases (if there is any) or * IMO\n. you should remove the second argument as it is its default value\n. missing empty line between the use statement and the class definition\n. you should set the timeout according to the value configured in the client (inherited from AbstractClient)\n. this is wrong. The timeout is set by a setter, so after the constructor\n. this is wrong. This file is deprecated and triggers an E_USER_DEPRECATED error, which makes PHPUnit fial due to its error reporting. And the file will be removed in a few days. You should use vendor/autoload.php which is the new location since more than a month\n. This should be removed.\nIf you want to keep the author annotation, put it in the phpdoc of the interface\n. I would even document it as a Response, so that the IDE can autocomplete the Response methods properly\n. This comment is useless. __construct is always the constructor.\n. Well, none of the phpdoc you are adding is describing the purpose of the methods. they are only documenting the signature.\n. Well, it should be changed in the factory too. createResponse always creates a response. It cannot create a Request. Documenting it as MessageInterface means you will have a crappy autocompletion as you will miss all the response methods\n. @gnutix But then we would need a ResponseInterface for the Response. It does not make any sense to return an object implementing only MessageInterface as you would not be able to use the status code related methods in any code without doing an instanceof check first to be sure that you really have a Response.\n. this is already part of the parent interface so it cannot be redeclared here (it is useless and it is a PHP Fatal error on old PHP 5.3 versions at least)\n. Please write the phpdoc multiline instead of as a one-line comment\n. no need to duplicate the phpdoc of the interface. It only adds more work when maintaining it\n. 5.4 only complains if you redefine it with a different signature. This change is considered as a new feature\n. Please use camelcased variabled names.\nAnd the braces are useless\n. the braces you added are useless\n. same here\n. the curly brace should be on its own line\n. This should be removed (authorship is kept in the class docblock, which is already set in this PR too)\n. I suggest switching it to the latest 5.3 instead of 5.3.3, so that we can have a PHP setup with openssl\n. yes\n. could you also add 5.6 ? It is available on Travis now\n. why changing it to protected ?\n. array should be lowercased\n. this should be reverted IMO. It makes more sense to test on uptodate 5.3 than on old 5.3\n. please use spaces for the indentation, not tabs (everywhere)\n. does it need to be public ? couldn't it be protected ?\n. should be InvalidArgumentException IMO\n. shouldn the adapter really be stateful ? this can create issues IMO\n. this does not make sense. 5.3 is using 5.3.27 currently on Travis: https://travis-ci.org/symfony/symfony/jobs/27470343\nIf you get an error, it is probably something else\n. This does not make any sense. Why should the constructor throw such fatal error when making preSend protected ?\n. It needs to be \\InvalidArgumentException. There is no Buzz\\Adapter\\InvalidArgumentException class\n. given that my previous comment disappeared because of the indentation change, I'm asking again:\ncan we avoid making the adapter stateful ? This can create issues when sending several requests\n. why Adapter ? There is not Adapter namespace in Buzz\n. But what if you send requests to different servers ? You will use the wrong authentication\n. Why putting it in an Adapter subnamespace ? This class is not an adapter. It is a client\n. AbstractAdapter is a wrong name. There is no adapter in Buzz. This is a AbstractDecoratorClient\n. DigestAuthClient\n. no need to install php-fpm. It is installed by Travis for the right version og PHP already\n. The nginx config is expecting PHP to listen on the TCP sock on port 8888 currently, not on a Unix socket\n. wrong indentation (for the whole test). Please use spaces for the indentation\n. this is wrong, because there is several clients in Buzz. You are not forced to use the curl-based one\n. no need to make it public (I don't even think it deserve its own method)\n. using self:: to access an instance method is a bad practice\n. this check should be performed in the constructor actually if you want to check it explicitly\n. This does not make any sense. You are testing PHPUnit here, not Buzz\n. This is a BC break because you are changing the signature of existing extension points\n. please don't advocate the usage of the * constraint (I suggest keeping the composer require way only)\n. This should be reverted IMO\n. Do you really need to rely on a global state ?\n. Well, a global state is a very bad idea.\nAnd btw, in case of MultiCurl, it is totally broken as you will share the same global state among all the requests being performed\n. this will not close the curl handles, which is a leak\n. this does not allow altering the request anymore, as the PSR-7 one is immutable.\nYou should allow the callback to return a modified request and use it for the next call (if the return value is null, use the original one, or throw if you want to mandate returning a request). same here. The callback cannot alter the response. why commenting this ?. you should allow using stable releases, otherwise it becomes a pain. why is it nullable here ? This does not make it a PSR-18 implementation. accepting anything ? really. should it actually be mutable ?. unused. can you do ^3.4 || ^4.0 to be compatible with the Symfony 3.4 LTS ? 4.0 does not add any new features compared to 3.4. The client looks like a service to me, so making it clonable looks weird to me. that's actually wrong, as your clients don't implement the HTTPlug interface, but only the PSR one (and so they are not php-http client implementations). typo: posting. typo: FormRequest. typo in the class name (and I suggest adding the use statement to show the FQCN somewhere). and it should even be FormRequestBuilder. hmm, I indeed missed it.. why 2.0.* and not ^2.0. It 2.0.* is working, next 2.x versions will work too (unless you stop following semver in httplug, but please don't do that). as 2.0 is a highest version that 1.x, that's useless. The normal job will already be using it on supported PHP versions.. ",
    "ejrowley": "I was testing a web app which sets 3 cookies, when I tried to submit the cookies back to the site they came through incorrectly. I sniffed the traffic and found that the 3 cookies where being sent back as individual cookie headers. The patch concatenates the cookie headers and sends them over as a single header. The cookies where then correctly interpreted by the site. To illustrate:\nBefore patch:\nCookie: name1=value1\nCookie: name2=value2\nCookie: name3=value3\non the site I would see\nprint_r($_COOKIE);\nArray\n(\n    [name1] => value1\n    [0] => name2=value2\n    [1] => name3=value3\n)\nafter patch\nCookie: name1=value1; name2=value2; name3=value3\nprint_r($_COOKIE);\nArray\n(\n    [name1] => value1\n    [name2] => value2\n    [name3] => value3\n)\n. ",
    "vkartaviy": "Hi, Kris!\nWhen you gonna fix it? I am also encountered this problem when have been working with remote service.\nThank you!\n. ",
    "jfsimon": "\nAdded AbstractClient abstract class wich is inherited by Curl and FileGetContents client classes.\n. \n",
    "stloyd": "@kriswallsmith What do you think about this version ?\n. #21 ;-)\n. @CEikermann Then you should consider #18 & #33 as @kriswallsmith is changing his mind quite often... ;-)\n. You need to have fileinfo enabled. FileInfo is part of PHP 5.3 and it's enabled by default.\n. What about giving a try for mime_content_type() if fileinfo is not available ? (not sure it's available on 5.3, can't check right now)\n. No, this function is not a part of this extension. Yes I know that this is deprecated but probably should work when silented @. Also  usage of extension_loaded() wouldn't be proper ?\n. @kriswallsmith This can be closed as new exceptions were introduced.\n. You have set ClientException which covers this needs I would say.\n. It's not true, Composer never required version attribute.\nProbably you defined it wrongly somewhere.\n. Yes, I know what you mean. I'm working on a little refactoring of those three \"gets\" to skip all of those explode() calls. I will try to submit some code tomorrow.\nps. Feedback like your comment is more than appreciated, because I know which way to choose in changes ;-)\n. \\ is unnecessary here.\n. AFAIK when you already added use Buzz\\Message;, you don't need do declare it here.\n. This function is identical with that in LIFO and IMO could be moved to Abstract class.\n. \\ is unnecessary here.\n. \\ is unnecessary here.\n. Typo here =)\n. Did you tried: curl_setopt($curl, CURLOPT_PROXYPORT, $proxy->getPort(); ?\n. ",
    "fabpot": ":+1:\n. ",
    "ricardclau": "Just to note that I \"quickfixed\" in my environment by doing this str_replace\nIn Buzz\\Browser -> call\n$content = str_replace('+', '%2B', $content);\nwhich is absolutely dirty although it works\nLooking forward to your comments\n. I am looking at the Zend_Http_Client different adapters and although I haven't looked any deep, I don't see any '+' character processing.\nI've always used ZHC without specifying an adapter (actually never wondered), and it seems it uses by default the fsockopen approach. Your library uses curl or file_get_contents.\nI did some checking and the stream_context created in your library had the '+' character  before calling file_get_contents but on the other site '+' character is missing.\nCould this be a php internals issue between how these libraries handle http data (I mean fsockopen VS file_get_contents)?\nI will look a little deeper and come back if I see anything else strange\n. What it actually does is\nif ($this->config['rfc3986_strict']) {\n                    $query = str_replace('+', '%20', $query);\n                }\nBut just for GET params, not for POST... any ideas? :S\n. Sorry I didn't reply before, I have been on my honeymoon holidays and haven't got back to work until today.\nI will fork Buzz, test all that and come back to you with the results, please let me some days to catch up at work as well :)\nBest regards\n. Sorry for the long time not replying to this, it is no excuse but I've been really busy\nI've done some testings simulating a \"real\" call from Buzz to an apache and problems are still the same as stated\nBelow I paste some code to reproduce\nInside test Folder, create a call.php file with:\n\n\nrequire_once('bootstrap.php');\n\n$urls = array(\n        'http://localhost/Buzz/test/receive.php?math=1+1',\n        'http://localhost/Buzz/test/receive.php?math=1%2B1',\n        );\n\nforeach ($urls as $url) {\n    $request = new Buzz\\Message\\Request('GET', '/', $url);\n    $response = new Buzz\\Message\\Response();\n\n    $client = new Buzz\\Client\\FileGetContents();\n    $client->send($request, $response);\n\n    echo $request;\n    echo $response;\n}\n\n(Server paths should match)\nAnd on the other side receive.php has just\n\n\nvar_dump($_GET);\n\n\nOutput is (my setup is php5.3.2 ubuntu lucid lynx and apache):\n\nGET / HTTP/1.0\nHost: http://localhost/Buzz/test/receive.php?math=1+1\nHTTP/1.1 200 OK\nDate: Wed, 01 Feb 2012 16:39:32 GMT\nServer: Apache/2.2.14 (Ubuntu)\nX-Powered-By: PHP/5.3.2-1ubuntu4.11\nVary: Accept-Encoding\nContent-Length: 45\nConnection: close\nContent-Type: text/html\n\narray(1) {\n  [\"math\"]=>\n  string(4) \"1 1/\"\n}\n\nGET / HTTP/1.0\nHost: http://localhost/Buzz/test/receive.php?math=1%2B1\nHTTP/1.1 200 OK\nDate: Wed, 01 Feb 2012 16:39:32 GMT\nServer: Apache/2.2.14 (Ubuntu)\nX-Powered-By: PHP/5.3.2-1ubuntu4.11\nVary: Accept-Encoding\nContent-Length: 45\nConnection: close\nContent-Type: text/html\n\narray(1) {\n  [\"math\"]=>\n  string(4) \"1+1/\"\n}\n\n\nIt seems that this is related to an enhancement to be done in PHP5.4 with http_build_query $enctype parameter\nCan you confirm that the issue is reproduced on your setup or another way of performing such call?\nI guess it is difficult to unittest it as this happens when interacting not when unit testing the library.\nWaiting for your comments on this issue\nThanks and regards\n. Sorry, my original issue was on POST but it happens both ways. As you say, this is correct following RFC_1738, in RFC_3986 this should behave differently. As I posted before, in Zend FW, they do\n\nif ($this->config['rfc3986_strict']) {\n$query = str_replace('+', '%20', $query);\n}\n\nMaybe an optional param to choose one RFC or the other should do the trick\nAnyway, I changed my code to POST and...\n\n\nrequire_once('bootstrap.php');\n\n$qs = array(\n        'math=1+1',\n        'math=1%2B1',\n        );\n\nforeach ($qs as $q) {\n    $request = new Buzz\\Message\\Request('POST', '/', 'http://localhost/Buzz/test/receive.php');\n    $request->setContent($q);\n    $response = new Buzz\\Message\\Response();\n\n    $client = new Buzz\\Client\\FileGetContents();\n    $client->send($request, $response);\n\n    echo $request;\n    echo $response;\n}\n\nResponses for $_POST\n\nPOST / HTTP/1.0\nHost: http://localhost/Buzz/test/receive.php\nmath=1+1\nHTTP/1.1 200 OK\nDate: Wed, 01 Feb 2012 17:01:30 GMT\nServer: Apache/2.2.14 (Ubuntu)\nX-Powered-By: PHP/5.3.2-1ubuntu4.11\nVary: Accept-Encoding\nContent-Length: 44\nConnection: close\nContent-Type: text/html\n\narray(1) {\n  [\"math\"]=>\n  string(3) \"1 1\"\n}\n\nPOST / HTTP/1.0\nHost: http://localhost/Buzz/test/receive.php\nmath=1%2B1\nHTTP/1.1 200 OK\nDate: Wed, 01 Feb 2012 17:01:30 GMT\nServer: Apache/2.2.14 (Ubuntu)\nX-Powered-By: PHP/5.3.2-1ubuntu4.11\nVary: Accept-Encoding\nContent-Length: 44\nConnection: close\nContent-Type: text/html\n\narray(1) {\n  [\"math\"]=>\n  string(3) \"1+1\"\n}\n\n. Just a quick comment to end this discussion, as it was all my fault.\nRegarding Wikipedia about HTTP POST\nWhen a web browser sends a POST request from a web form element, the default Internet media type is \"application/x-www-form-urlencoded\".[1] This is a format for encoding key-value pairs with possibly duplicate keys. Each key-value pair is separated by an '&' character, and each key is separated from its value by an '=' character. Keys and values are both escaped by replacing spaces with the '+' character and then using URL encoding on all other non-alphanumeric[2] characters.\nSo, basically, it is my responsability to escape all characters with http_build_query or whatever, and Buzz behaves absolutely correct, as Stof said.\nMy mistake was that I was used to Zend_HTTP_Client who does the http_build_query stuff internally and Buzz expects it to be done before sending content to the library.\nAnyway, thanks for your time and comments\n. Great! I guess there are still many production environments with <= 5.3.2 so for the moment this might be the best solution.\nBest regards and all the best for you and your family. Keep up the great work and big support!\n. ",
    "marijn": "Yeah, I just saw that. Sorry for that. I'm in the habit of correcting stuff as I see it, sometimes not checking if there is an existing PR for it.\n. ",
    "dragoon": "I think I have the same issue with a message:\nCall to a member function getContent() on a non-object in ...\nThe message is very obscure but it is preceded with:\nGot error 'PHP message: Operation timed out after 5000 milliseconds with 0 bytes received\nSo I assume there is a timeout indeed.\n. Exactly, by default the client ignores timeouts but my application cannot work without the data obtained from the external request.\nI am not sure what causes the timeout since I don't have a control over the external system, but I was wondering if I can manually restart the request if it is hanging for more than X seconds?\nOr may be I should switch to the Curl client and see if it's better?\nThank you for help.\n. Yes thanks, but I was wondering if I can abandon the request faster than in 5 seconds and start a new one?\n. Thanks for the help.\nIt's strange, but for some reason setTimeout does not work and timeout always occurs after 5000ms, I've created a small timeout script to test locally, and I can confirm that the client does not care about value set with setTimeout. I tried with both default client and curl.\n. It's funny (or not), but when I set the timeout on a client just before passing it to the Browser constructor, then it does not work, but when I set it like you did in the test case ($this->browser->getClient()->setTimeout(2)), it works.\n. Thank you for the help! If you want to take a look at the code, it's here:\nhttps://github.com/dragoon/Transport/blob/master/lib/Transport/API.php#L61\n. Oh yes, you are right, didn't notice that. Sorry for bothering and many thanks :)\n. ",
    "egeloen": "The timeout is configurable though the client. You can use $browser->getClient()->setTimeout($timeout) where timeout can be a float representing seconds. Additionally, you don't get an exception when the timeout is exceeded because by default the client ignore errors but one more time it can be configured through the client with $browser->getClient()->setIgnoreErrors(false).\n. Do you get an exception if you configure the client to not ignore errors? If yes, you can create a recursive method in your app which retry a given number of time when it fails something like:\n``` php\nfunction send($request, $try = 1) {\n    try {\n        // send the request and return the response.\n    } catch (\\Exception $e) {\n        if ($try > 5) {\n            throw $e;\n        }\n    return send($request, $try + 1);\n}\n\n}\n```\nA good alternative would be to have a native exception event in Buzz, then we would be able to add a listener which retry (something like there is in guzzle).\n. You can control the timeout with setTimeout on the client and set a value lower to 5 but if the server timeouts, you will need to wait the time the timeout is exceeded...\n. As you said it is strange. I have created a library around buzz (and other http clients) and it works for me. This test is executed for Buzz and works (it timeouts according to my configured value). Here, I configure the timeout. Do you configure it in seconds (the timeout should be defined in seconds and not in milliseconds)?\n. Nice to see it working! For you issue, I can't see why it does not work... The client is directly set on the browser when it is instantiated and then, nothing is changed in the client... I have checked and there is no internal call to setTimeout or via $this->timeout, so I can't figure out what is causing this.\n. Maybe I have figured it out why it does not work and potentially other issue in the code you have linked. Here, a client is instantiated and passed to the browser but what about if the browser is passed to the transport constructor? In this case the custom client (Curl) is not passed to the browser and so everything configured on it will never happen...\n. @kriswallsmith IMO, this issue can be closed as the timeout feature works well!\n. Posting an array of data is not possible with the file_get_contents adapter because the stream context does not support it only curl does. To fix it, you need to convert it to an url encoded format with the http_build_query method.\n@kriswallsmith What about converting it when it is passed to stream_context_create in case it is an array? It should fix the issue mentionned by @denisvmedia about the Browser::submit method.\n. IMO, a strictredirects option should be introduce as sometime you want to follow the RFC strictly and sometime you just want to do what a browser does.\n. @kriswallsmith Any news? There is an huge numbers of PR which needs a little of your time :)\n. Any news on this? The last tag is one year old and master adds a compat layer about CurlFile for PHP >= 5.5\n. :+1: Thx!\n. > $http_response_header is not defined while 4xx or 5xx responses\n@doublejosh Are your sure about your comment? Basically, I use this library in order to fetch 4xx or 5xx response in egeloen/ivory-http-adapter and the headers are well returned. The behavior is tested here for both (file_get_contents and curl buzz adapters).\n. Yes... Basically, it can be exposed as redirects < max_redirects.\n. ping @kriswallsmith \n. Thank you too! :)\n. Btw, there is something I don't understand in your code. Can you explain why do you remove the callback options and then check if it is present in order to call it? Shouldn't it never present as it is always removed?\n. This repository is the PHP library whereas your report refers to a bundle. If you're using the SensioBuzzBundle, then it seems there is a client_timeout option (See https://github.com/sensiolabs/SensioBuzzBundle/blob/master/DependencyInjection/Configuration.php#L30).\n. Sorry, I misread your issue. If you're using the RMSPushNotificationsBundle bundle, you're a little bit stuck since the bundle author instantiates itself the buzz client (See https://github.com/richsage/RMSPushNotificationsBundle/blob/master/Service/OS/MicrosoftNotification.php#L22). IMO, a better choice would be to open an issue on the RMSPushNotificationsBundle and explain your issue with timeout and there is no real entry where you can configure it easily...\n. You can change the timeout thought the client (See https://github.com/kriswallsmith/Buzz/blob/master/lib/Buzz/Client/AbstractClient.php#L9)\n. ",
    "willdurand": "I suppose I can close this issue...\n. ",
    "mtdowling": "I don't think comparing Content-Length vs download size to see if a handle has completed is a good idea.  Responses using chunked encoding won't return a Content-Length header, and requests can encounter errors in transit.  You can check if a handle has encountered an error or completed by calling curl_multi_info_read.\n. ",
    "chregu": "Yes, I know it's a hack, it worked for our usecase and any other more proper approach I tried didn't.\nBut I'm not sure if I tried curl_multi_info_read, I can give it a whirl\n. ",
    "CEikermann": "Hello, i'm working currently on a solution for this enhancement ;)\n. Maybe you can assign me this issue ticket\n. @stloyd, thanks for your notice. I think, the right place for HTTP authentication is the Request class. In the next days I will push the first stuff to my Buzz fork. Maybe @kriswallsmith and you can look up into the code\n. Here my pull request https://github.com/kriswallsmith/Buzz/pull/39\n. Any update for this pull request?\n. Any chance to merge this pull request? :)\n. ",
    "igorw": "You can use any PSR-0 compatible autoloader. The Symfony2 ClassLoader is quite a popular one. You can use it like this (after downloading the package to vendor/symfony):\nrequire_once __DIR__.'/vendor/symfony/src/Symfony/Component/ClassLoader/UniversalClassLoader.php';\n$loader = new Symfony\\Component\\ClassLoader\\UniversalClassLoader();\n$loader->registerNamespace('Symfony\\Component\\ClassLoader', __DIR__.'/vendor/buzz/lib'); // assuming buzz is in vendor/buzz\n$loader->register();\n. Not sure if 4xx/5xx responses should result in an exception or not. But it should be consistent, and it should not give PHP notices.\nThe other issue is things like failed connection. This currently also results in notices with the FileGetContents driver.\n. ",
    "outlawscumbag": "Thanks, I added an autoloader just for symfony2. I just couldnt remember... I reinstalled the bundle and it was missing so I added it again and forked the repo so could get it again.\n. ",
    "davidwinter": "+1\n. ",
    "elnur": "I need this. :P\n. ",
    "spy23": "I'm spotting the same issue. Does a workaround exist?\n. ",
    "juliendidier": "With the PR, I made the manuel test, after adding open_dir conf.\nIt works with a redirected response.\n. It's not Buzz, but file_get_contents: http://php.net/manual/en/function.file-get-contents.php (see the Warning message).\nOtherwise, you can use a cURL client:\nerror_reporting(E_ALL);\nini_set('display_errors', true);\n$browser = new Buzz\\Browser(new Buzz\\Client\\Curl());\n$response = $browser->get(\"https://www.google.com\");\n. cURL is the only class which throws Exceptions.\n. Could you make a PR for that ?\n. :thumbsup:\n. Great !\nCould you test exceptions ?\n. Does not work properly.\n. Commit edited. Now it works.\n. You can delete this part of code (and above), no ?\n. Yep, but it's the job to AbstractMessage on addHeader, like your PR for addHeaders (which may call addHeader recursively, same for setHeaders).\nIn this case, calling only $request->addHeaders($headers) doesn't duplicate the code.\n. Sorry, not addHeader, this method must accept only one string.\n. ",
    "lineke": "Any plans on fixing this? Or any workarounds?\n. ",
    "Nyholm": "Closing this since it is super old. \n. Closing because of inactivity. . Closing this since it is super old. We will move towards PSR18 which specify how errors should be handled. . Closing this since it is super old. \nFor reference: Use StackOverflow to get help. If you have any issues or feature request, please write an issue. Or, even better, submit a PR. . Closing this since it is super old. \n. Oh, I see that the fork is removed.. This commit is already merged. . This looks great.. however. It is super old. Im going to close this now. Feel free to open it again if you want a new review. . I think this could be done with Middlewares. \nIm closing this issue since it is super old. . Closing because of inactivity. . Thank you for this PR. \nI will close this one in favor of #277 . We will implement PSR-18 exceptions. \nIm closing this because it is super old =). Closing because of inactivity. Also, PSR18 specifies that we should not follow redirects. Closing this since it is super old. \n(And because object oriented PHP is way nicer :). Closing because of inactivity. . Closing this since it is super old. \n. I think the very latest master support this. =)\nClosing this since it is super old. \n. Closing this since it is super old. \n. The php-http/mock-client could be interesting for you. \nIm closing this since it super old. . Closing this since it is super old. \nFor the record: Browser::submitForm(). Closing because of inactivity. . I\u2019m closing this. This is now handled by the psr7 implementation . We do not longer have a request object. Closing this because it is super old. . Thank you. I've rebased and merged this PR. . I would be happy to review a PR with updated docs. \nIm going to close this due inactivity. . That is cool. But as Kris said almost 5 years ago: A middleware is the way to go =). Closed by #279. Closing this since it is super old. \nAlso, we do not have a Request object anymore. . Closing this since it is super old. \n. Closing because of inactivity. . Closing this since it is fixed. . Closing because of inactivity. . Closing because of inactivity. . Closed by #172. Closing because of inactivity. . Is this still an issue with the latest version?. Isn't this an issue with the server? The server takes too long to respond any that is you get a timeout. . Thank you for getting back with a solution that worked for you. I'm going to close this issue since it is not related to buzz. Closing because of inactivity. . This is fixed in master. . Closing because of inactivity. . This is what guzzle calls \"sink\". It is a real nice feature but it does not fit to a lightweight client like Buzz. Closing because of inactivity. . Thank you. Awesome. Thank you. The response object are about to be removed. This should be a lightweight client. Consider something more advanced like Guzzle if you need to customize it more. . Thank you @rande for explaining the problem and thanks @markusguenther for a workaround. \n@poizon001, please see previous answers. . Thank you for this PR. . I've done some testing with version 0.13, 0.14 and master. I've been using Blackfire, PHP 7.1, local PHP server and remote server. I've been using both CurlClient and FileGetContents.\nI cannot find the performance issue mentioned here. I can only find smaller variation in performance where the biggest is 20%. Which sounds massive but when 20 requests on average takes 800ms or 950ms it is kind of the same... It is anyhow not the same issue as mentioned here.. Im closing this due inactivity. . This could be done in a middleware. Closing because of inactivity. . Could someone send a PR with a fix to this?. Hey. \nIm sorry for the super late response. I do appreciate this suggestion but I do not think it this syntactic sugar belongs in the library. Doing !$response->isOk() is actually shorter than $response->isNotOk(). And also !$response->isNotOk() will be hard to read. . 303 is not a redirect. \nClosing because of inactivity. . We are soon to adapt the PSR18 standard. In that standard it specifies that no redirects or 303 should be automatically followed. That is the job of the calling library. . Closing because of inactivity. . Oh, this is interesting. I'll see what I can do. . The browser should be able to do a \u201cproxy\u201d call to the client\u2019s withAddedOptions. . Okey. So this is how we should do it: We should allow a second parameter on Browser::sendRequest() to allow $settings. \nPing @georgosXL, is that something you can look at?. Closed by #285. Thank you for this contribution. Can you explain what is in this PR and why we need it?. Closed because of inactivity. Closing because of inactivity. . This is fixed in master. . Closing because of inactivity. . Sorry for the late response. Could you give me a reason you you need this?. Thanks. Would you mind adding a small test for this? . Thank you. . Yes. \nI'm on vacation now. I'll be back in the end of the month. I will prioritize Buzz for the rest of the year. . Thank you. Hey. \nSorry for the super old response. I hope you managed to do plenty of other contributions since this one. \nEverything looks good but this is a feature that I do not think belong in a lightweight http client. . Fixed by #224. Thank you. . Thank you Vincent. \nI see your name showing up on more an more projects lately. \ud83d\udc4d . Yes. Sure. I will work a lot with this library for the rest of the year. I will put in some work this weekend. . Fixed. . Sorry for the slow response. PSR-18 specifies that redirects should not be followed at all. So this PR is a move in the wrong direction. \n. Thank you. But is this related to Buzz? Do we specify that we must use SSLv3?\n. Closing because of inactivity. . Thank you for this issue. \nThis is fixed in the latest release tagged a few days ago. . 1) You cannot get a 5xx response if the process timed out... Because a timeout means \"no response\". \n2) I think so, yes. It is however unclear. I will introduce a NetworkException that is used for timeouts. . Not atm. We are soon (in December) to implement psr18 which require such exception. . I think you sent the issue to the wrong repository. We do not use the Symfony\\Yaml component at all.. \nYou should investigate more closely what is happening at /~/src/IGA/UserBundle/Services/OauthManager.php(115). Thank you @greg0ire and @tarlepp. Very true. But this is not only a wish list.  It it also a \u201clook which psrs we support\u201d-list. Tests added. Very true. There will be updates during next week. Those updates will break BC so I thought it was a good idea to add some deprecation notices before. . Yeah. In retrospect I agree with you. \nI suggest the next release should make sure that those high level functions uses the new code and returns PSR-7 response. What do you think about that?. We would like to be compatible with psr7. So this client would be compatible with any psr7 implementation. Ill try to put in some work on buzz during next week. \n\nOn 11 Mar 2018, at 21:58, LegendOfGIT notifications@github.com wrote:\nI would be great if you merge my pull request.\nIt does not really matter if the class Response will be dropped in the future, since developers still using older versions of this package.\nIf it will be dropped, it will be dropped.\nTil then, it won't hurt adding this constants ;)\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thank you for this. I do not see the harm in merging this. \n\nBut FYI: This class will be removed within near future. . Thank you for the review. \nIm sorry these PRs are massive and big. I will try to do smaller from now on. . TODO: \n- [x] When validating the options we need to exclude all the integer/curl options. \n- [x] Update the tests\n- [x] Write change log. . I see that you are using dev-master. Listeners are replaced by Middlewares. See https://github.com/kriswallsmith/Buzz/tree/master/lib/Buzz/Middleware. Yeah that would be better. \nThere are quite a few changes from 0.16.1 to 0.17.0. They will be properly documented before we release a new version. . Also, this gives support for HTTP2.0. This will remove the deprecated code marked in #328 . This is fixed in master. Wohoo!. Im waiting for admin (@kriswallsmith) to activate Scrutnizer. . Wohoo, it is enabled now. Thank you for PR and the comment. \nI\u2019m not sure removing the section in the readme is a good way forward. I\u2019ve tried to clearly highlight how Semver works. Any improvements would be apprichiated. \nAbout a stable release: I know the 0.17 release had quite a few breaking changes. I expect 0.17 to be the last release before 1.0.0. . Thank you for the review!\nI've added the fixes in #313 . You are correct. 0.17.0 removed the Buzz\\Message\\Response. Instead we use PSR7 requests and responses. Until PSR17 (message factories) are stable we use nyholm/psr7 as default implementation. \nWe also removed all setters for options. Instead all clients takes an array as first constructor argument. See https://github.com/kriswallsmith/Buzz/blob/master/doc/client.md\nAlso, see the flex recipe: https://github.com/symfony/recipes-contrib/blob/master/kriswallsmith/buzz/0.17/config/packages/buzz.yaml. Thank you!. Hey. \nYou may set timeout in 0.17.0.  =) It is even a featured example in the docs. See https://github.com/kriswallsmith/Buzz/blob/master/doc/client.md\n\nOtherwise, can you approximate the date of release for version 0.17.0?\n\nIt was released earlier this week. \n. No worries. \nThe link you are giving me is to the v0.17 version of the docs. =) Check the master version of the docs. \n\nIf i update via composer, \"kriswallsmith/buzz\": \"> 0.6\" updates only on version 0.16.1.\n\nIt may be other things preventing you from upgrading. Version 0.17 is requiring PHP7.1 or above. . Yeah, I understand that. \nSure, I do not see a reason why we could not do a 0.16.2. I've created a 0.16.x branch. Feel feel free to submit a PR. . Thank you for the feedback. \nI do not use docker so I cannot give you any guidance there. Running the tests on an non-docker environment is very straight forward, isn't it? You just run these three commands: \nphp\nvendor/bin/http_test_server > /dev/null 2>&1 &\nphp -S 127.0.0.1:8080 tests/server.php  &\ncomposer test\nAny PRs to improve the tests are appreciated. Or open an issue to come with a suggestion. \n\n\nI would genuinely be thankful if you take a bit of you're time to apply the try..catch improvement on version 0.16.1\n\nI'm actually not sure of how I should do this. The curl_exec does not throw exceptions as far as I know. Also, if one caught any exception, that could not be silently ignored. \nI suggest you make an initial PR and let Travis run the tests and we could work from there. . I've added a docker image for testing. See readme in in master. \n. This is not a perfect replacement for dunglas/symfony-lock. \nLooking at the Travis builds you see that symfony/force-lowest: ^3 will install symfony 4 packages...\nThis PR could of course be improved by adding --prefer-stable --prefer-lowest but that would not test the latest patch version of sf 3.4. \nIm closing this. \nFYI @nicolas-grekas. >  mixed with symfony/lts it provides exactly what dunglas/symfony-lock does\nOkey. Of course. I'll see what I can do. \nThank you. Fixed by #328. Thank you. This looks good. \nHowever, you have to update the tests. PSR7 states that if the port is standard it should be omitted. Could you not change the current tests and add a new test for this bugfix?. Restarted. . Correct. This is a bit premature. . Our cURL clients do support HTTP/2.0. See source. \nHowever, this does not support \"server push\". \n@dshafik, can you use CURLOPT_HEADERFUNCTION and CURLOPT_WRITEFUNCTION together with CURLMOPT_PUSHFUNCTION?  I want to avoid calling curl_multi_getcontent(). Blocked by https://bugs.php.net/bug.php?id=76675 and https://github.com/travis-ci/travis-ci/issues/9924. Add a period \u201c.\u201d At the end of the line. That should do the trick :). I just meant \"Request For Change\". Oh, thank you for the review. \nYeah, it looks weird. But I squashed the commits and will now rebase #331. . Replaced by #354 . You are correct. Thank you. Can you submit a PR?. Excellent. Would you mind adding a small test that make sure we do not make this mistake in the future?. Ping? I would really love a test. Do you have any plans adding one?. Ping @gpietoso maybe can help finishing this PR?. I've added a tests and merged in #358 \nThank you @n0n0n0n0 . Hey. \nThat would be great. \nCouldn't you set cainfo with curl_opt?\nIe: https://github.com/kriswallsmith/Buzz/blob/master/doc/client.md#curl. Thank you for this PR. Can you elaborate why using the existing option is not good enough?\nphp\n$request = new PSR7Request('GET', 'https://example.com');\n$client->sendRequest($request, array('curl' => [\n    CURLOPT_CAINFO => $caFile,\n]));\n. I understand that. \nThe mission of Buzz is not to cover advanced features like this. If you need something complex, then use Guzzle or some other client. \nI think this is a good feature but we do not strive to be a competitor to more advanced http clients. . Thank you for a detailed error description. I turned your example code into a test case. . Thank you for this issue. \nI've spent a few hours yesterday working on this. Currently, proceed works as flush. This is indeed breaking change. \nHowever, can you explain the use case for a non-blocking proceed function? \nI will document the methods better and resolve this. . Thank you. I will fix these issues of yours this week. If you give up Buzz or not is irrelevant. =)\n\nDo you know if there is something existing that could fit my use case?\n\nHm.. I dont think php-http/curl-client or Guzzle have a similar proceed() function. Maybe https://github.com/clue/reactphp-buzz could be worth looking into. . I've got a fix for your already. See the diff: https://github.com/kriswallsmith/Buzz/pull/356/files?utf8=%E2%9C%93&diff=split&w=1#diff-f07f8f3af40548280b3046caf5c568bfL119\nIt is super simple to provide fixes when you done half the work and written test code. Thank you!. Can you try master to see if it is working?\nIf so, I'll tag beta2.. https://github.com/kleiram/transmission-php/blob/1.0.0/composer.json#L14. The library you refer to does not have the proper version constraints. Make sure you install another version of buzz and you will be fine. Try with 0.9.0 . Sure. Or just add something like that in your application\u2019s composer.json. Try a different version then. Try 0.15 or something between that and 0.9. \nI don\u2019t know that library you are using. Sorry :/. We need to update the docs before merging. Excellent. I tagged beta 2. I dont see the issue. \nWhen I'm running the code I get: \nphp test.php                                                       \n.............../Buzz/test.php:15:\narray(4) {\n  'run' =>\n  string(1) \"A\"\n  'time' =>\n  double(0.57032704353333)\n  'hasResponse' =>\n  bool(true)\n  'hasException' =>\n  bool(false)\n}\n...../Buzz/test.php:25:\narray(4) {\n  'run' =>\n  string(1) \"B\"\n  'time' =>\n  double(1.5703270435333)\n  'hasResponse' =>\n  bool(false)\n  'hasException' =>\n  bool(true)\n}\n/Buzz/test.php:34:\narray(4) {\n  'run' =>\n  string(1) \"C\"\n  'time' =>\n  double(1.5703270435333)\n  'hasResponse' =>\n  bool(false)\n  'hasException' =>\n  bool(true)\n}\n........................................................^C\nTimeouts are also handled by cUrl (and the exception). \nAre you referring to the time is 1.57... and not 2?\nI get the same result with the following: \n```php\n<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, \"http://httpbin.org/delay/3\");\ncurl_setopt($ch, CURLOPT_TIMEOUT, 2);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n$output = curl_exec($ch);\nvar_dump(time() - $_SERVER['REQUEST_TIME_FLOAT']);\ncurl_close($ch);\n```\nphp test2.php\n/Buzz/test2.php:10:\ndouble(1.6773159503937). Also, big thank you for testing and reporting this. . Are you sure about $_SERVER['REQUEST_TIME_FLOAT']?\n```php\n<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, \"http://httpbin.org/delay/3\");\ncurl_setopt($ch, CURLOPT_TIMEOUT, 2);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n$start = microtime(true);\n$output = curl_exec($ch);\nvar_dump(microtime(true) - $start);\nvar_dump(time() - $_SERVER['REQUEST_TIME_FLOAT']);\ncurl_close($ch);\n```\n```\n% php test.php\ntest.php:11:\ndouble(2.0062310695648)\ntest.php:12:\ndouble(1.7235679626465)\n```. Excellent idea. Thanks!. Thank you. \nI like this feature and I think it is something we should support. However, I dont like that we add more configuration options. \nThe idea of buzz is to be as small and simple as possible. If you really need out of the box support for max_filesize, then maybe Guzzle is the library you should use. Especially for options not used by 60% of the users. \nI suggest you revert the changes in AbstractCurl but you keep everything related to CallbackException. Then you can still achieve the same result but with more code in your app. What do you think about that?. Im happy you contributed. Thank you\n\nI really don't want to use guzzle. It became so complicated / complex / over-engineered. Buzz is a really cool lib!\n\nAnd that is part of a reason why Buzz should be minimal. \n\nAs the patch is really small, is it an issue to have it in the core? You already support timeout. IMHO, this deserves to be in the core.\n\nThe few options we currently have are chosen carefully. I dont think a max_filesize option will be used by more that 3% of the users. \nI think the CallbackException is good and I think the anonymous function should be added to the docs. . Yeah, I see that. \nThanks for trying. . I like this feature, I really like the simple implementation. \nI've been looking at this PR 5 times now. I wish to make this feature opt-in. Do you have a suggestion how we can make it so?. I was considering adding this in a Plugin or enable via configuration options. . Thank you. \nCouldn't you do this with the CurlClient?. The purpose of Buzz it to keep it simple. The FileGetContents is useful for the ones with no curl extension installed. \nI do understand if you have the argument \"But this is a small change, it is pretty simple\". Even though I could agree with that, it goes against the goal of the project. \nIm happy to that you found a workaround by using the cUrl client. I will close this PR. . Okey. Would you mind making a PR?. Thank you. For fixing this. . I released 1.0.0 not. Try it out :). Good. Could you also assert status code and protocol here?. Because I was using dev-master of psr/http-client. This might be a mistake. Thanks!. Naturally. There were no package at the time. It is fixed here: https://github.com/kriswallsmith/Buzz/pull/272\n. Yeah.. Awful. We should do the new BuzzClientInterface introduced here: https://github.com/kriswallsmith/Buzz/pull/270. No. It should be immutable when we release this. See https://github.com/kriswallsmith/Buzz/issues/246. Yes, of course. Thank you!. Yeah, you are correct. I should remove \"withOptions\" and \"withAddedOptions\". A client should only be configured when we construct the object, right?. I think you are mistaken. We do implement the HTTPluginterface\nhttps://github.com/kriswallsmith/Buzz/blob/v0.17.0/lib/Client/BuzzClientInterface.php. This should be ResponseFactory. . Maybe rename this variable. . Hm... This factory is used for both the request and response. . One idea is to split them up into two variables. . Sorry, you are correct. But this should also be passed to the new FileGetContentsClient, right?. What is the difference between ?ResponseFactoryInterface $messageFactory = null and ResponseFactoryInterface $messageFactory = null?. Rather throw an exception then silently correct the mistake. . Rather throw an exception then silently correct the mistake. . Yeah, We do want to avoid BC breaks. \nIf $responseFactory is null then we add the $requestFactory = new MessageFactory();. If it is not null and if it is not an instance of HTTPlug message factory or Iterop, then we have to throw an exception. This is just for debugging. . These options do not seam to have much effect. \nDoing curl_setopt($pushed, CURLOPT_WRITEFUNCTION, null); does not help... . If you reverse this if statement you will not use so much indentation. . This could be removed . This could be removed. Use elseif. I\u2019m not sure about this line. \nHowever, shouldn\u2019t this be one of first thing we do? Checking for \u201cskipDetection\u201d?. This will never be true. I suspect a bug in PHP or Curl. . These options do not seam to have much effect.\nDoing curl_setopt($pushed, CURLOPT_WRITEFUNCTION, null); does not help.... Do if ($this->skipDetection && $request->hasHeader('Content-Type')). \nThat would be cleaner (shorter). How about: \nif (empty($streamSize) || $streamSize >= $this->sizeLimit || !$stream->isSeekable())?. Should be logic \u201cor\u201d, right?. Oh. Sorry my bad. Travis suggest to remove it . I have a hard time making the branch alias work for HTTPlug. We got a 2.x branch with branch alias: https://github.com/php-http/httplug/blob/2.x/composer.json\nI read composer docs and I thought I could do like this...\nThe current status is: Travis will not install php-http/httplug 2.x. \n. Yeah, I know it not perfect. I did work so I was happy with it =)\nIm happy to review a fix. . This has changed in dev-master. It was correct before your fix. . ",
    "ronnylt": "php -v\nPHP 5.3.8 with Suhosin-Patch (cli) (built: Nov 15 2011 15:33:15) \nCopyright (c) 1997-2011 The PHP Group\nZend Engine v2.3.0, Copyright (c) 1998-2011 Zend Technologies\n    with Xdebug v2.1.2, Copyright (c) 2002-2011, by Derick Rethans\n. I just switched to the \\Buzz\\Client\\Curl() client, so I did not get the error any more. \nThanks for replying to the issue.\n. ",
    "docteurklein": "same here, using php 5.5.18 in the CLI environement.\nphp -r \" var_dump(file_get_contents('http://php.net'));\"\nworks just fine.\nEDIT: I forgot to say my urls actually are filesystem urls.\nI surely badly use the FileGetContents adapter, my goal is to mock a real http response.\n. ",
    "polmabri": "maybe throw \"no valid url\" exception?\n. ",
    "rybakit": "So far I see no reason to call Request::setMethod(), since the property 'method' of the Request object can be set during object creation.\nActually, before this change the property was set twice - firstly in Request::__construct(), and secondly by the Request::setMethod() call.\nI didn't do benchmarks, but it should be faster because it does -1 method call.\n. But then you need to write something like this:\n``` php\nuse Buzz\\Message\\Request;\nclass MyRequest extends Request\n{\n    private $requestContent;\npublic function setRequestContent(RequestContent $content)\n{\n    $this->requestContent = $content;\n}\n\npublic function getRequestContent()\n{\n    return $this->requestContent;\n}\n\npublic function setContent($content)\n{\n    throw new \\BadMethodCallException('It is not permitted to set the content.');\n}\n\npublic function getContent()\n{\n    return (string) $this->requestContent;\n}\n\n}\n```\nor\n``` php\nuse Buzz\\Message\\Request;\nclass MyRequest extends Request\n{\n    public function getContent()\n    {\n        return (string) parent::getContent();\n    }\npublic function getContentRaw()\n{\n    return parent::getContent();\n}\n\n}\n```\nwhich is a bit cumbersome and requires you to create a new class.\n. Yeah, but then you will be unable to retrieve raw value of the $content and do this:\nphp\n$request->getContent()->setFoo($bar);\nI tried to avoid such limitation, that is why I do the casting outside the Request class.\n. btw, using the mixed $content type allows to create handy listeners like this one: https://gist.github.com/rybakit/6610129\n. My original intent was to separate concerns. Listeners are not required for a fundamental baseline of functionality of the browser and can therefore be placed in a separate class. But now I have mixed feelings on this, so I withdrawn the PR.\n. :+1: \n. I also wonder why it's uppercased. The php documentation uses boolean everywhere. And in Java uppercased  Boolean means object, which is not the php case:\n\npublic boolean booleanValue()\nReturns the value of this Boolean object as a boolean primitive.\n. btw, PhpStorm generates \"bool\" in PHPDoc comments\n. It should be @return \\Buzz\\Message\\Form\\FormRequestInterface\n. \n",
    "simensen": "@kriswallsmith Yeah, it is a tough call. As a common API, it would be nice to normalize the assumption on this, though, so people can worry less about what is backing the Client. I figured it was easier to take a stand, whether right or wrong, and start a discussion. :)\nIf the default becomes false, stream is already defaulting to this (with no easy way to actually make it verify) so some number of users are likely already accepting this fact. It is hard to say if anyone is relying on cURL's default behavior, though.\nIf the default becomes true, cURL clients will behave as they were before and stream users will see an uptick in exceptions stemming from accessing certificates that cannot be validated. At least it would be clear that a change was made.\nIf the default becomes whatever the underlying backing service defaults to then cURL could default to true and stream to false. Would make things work exactly like they are now. Swapping out client implementations would mean swapping out the default behavior, though. Maybe not an issue?\n. Updated per notes from @stof.\n. @kriswallsmith Let me know if you want me to tweak this or if you want to discuss doing this differently. I'm open to changing it if needed.\n. @kriswallsmith This solution is definitely more simple than the one I proposed in #54 and I'd be happy to KISS. :) This looks great!\nThere are a few things that #54 supported that I would love to see added eventually, though:\n- If detected, the system proxy (http_proxy or HTTP_PROXY) should be enabled by default.\n- Should be able to explicitly enable and disable the use of a proxy. (mainly a requirement because system proxy sometimes needs to be bypassed for certain requests)\nI'd be happy to see this merged as-is for now, though. It supports proxies (yay!) and provides enough flexibility to let me configure the use of the system proxy externally. :)\nIf I eventually send a PR that does something like this, how would you feel about it? I'm not sure what names you'd use for a bool like this. :) Happy to get some feedback on that.\nphp\n<?php\n// Probably in something like configureSystemProxy() in AbstractClient?\n// Would be called by constructors of clients that can support proxies.\nif (isset($_SERVER['HTTP_PROXY']) || isset($_SERVER['http_proxy'])) {\n    $this->proxy = new Util\\Url(\n        isset($_SERVER['HTTP_PROXY'])\n            ? $_SERVER['HTTP_PROXY']\n            : $_SERVER['http_proxy']\n    );\n    $this->useProxy = true;\n}\n. @kriswallsmith Any chance this might be able to be merged today? Or would you like to solicit more feedback before doing so?\nThanks again for looking at this and simplifying it. :)\n. Let me double check.\n. @Seldaek Sure, I was following Composer's lead here. :) Thanks for letting me know it has been changed there.\n. @kriswallsmith Yeah, I'm having some issues here. I'll see if I can patch it up and send a PR.\n. @kriswallsmith I've made some fixes to this code in #60. For some reason I thought that sending a PR against this PR's branch would link them so maybe I've doen something wrong. :) In any event, #60 works for me. I've noted the changes on there and documented some of them in comments.\nHappy to work through this more if I'm doing anything in there you aren't liking. Just let me know how you'd like to see me change things. Thanks!\n. It might be worth noting that my proxy does not support auth so I have not been able to actually test out the auth stuff. I can verify that this works with an actual HTTP proxy on a network that will not allow web traffic so I know that it is working.\n. @kriswallsmith Have you been able to try this? Also, it looks like maybe I botched the branch. It looks like this is includes your d215894 change for some reason. Let me know if you want me to rebase this and/or send another PR.\n. @kriswallsmith I am sure you have your hands full, but let me know if you have time to work on this more this week. I'm happy to continue to make changes as you need me to make them. :)\n. @kriswallsmith I'll see what i can do. I'll rebase against your recent changes and see if I can get it to work. Thanks. =)\n. I'm happy to change this. I was following precedent in other files in this project as I wasn't sure what standards were followed here. I guess I should have just assumed. :)\n. Until you wrote this I was pretty much parse_url() ignorant. :) I'll try to keep it in mind for future URL parsing needs.\n. Nice. :)\n. Actually, yeah, that would make more sense. Also, I should have done getHostname() instead of getHost() anyway. Thanks.\n. ",
    "82rules": ":+1: \n. ",
    "Seldaek": "@simensen if you do that PR please use http_proxy before HTTP_PROXY since it seems to be the way other tools do it (git, curl supports only lowercase, I changed composer to do it that way too now).\n. @kriswallsmith done.\n. Ok, now I think it's complete, simpler, and more tested.\n. Nope, addHeader() takes a full header string, so you can't really give it a key and a value.\n. ",
    "GromNaN": "Yes it does.\n. ",
    "Burgov": "@stof: you're right. I'll create an issue right away and fix it soon. Actually I wrote the script over a year ago and ported it into the library you see now, but I haven't had time to really polish it up yet. Hopefully I will be able to do it this evening\n. the die is now replaced by a proper exception\n. I've looked in to it, but I think the header output from curl and file_get_contents differ too much to be able to parse both using one method, at least without casting either of the two into the other, which might become only more expensive.\nCurl: https://gist.github.com/d8c68e02737b3d50d1a6\nfile_get_contents: https://gist.github.com/2502064\nThe first difference is that curl contains both headers and content, and while they are delimited by two newlines, so are the headers from different request and possibly content is so as well, which makes it really different. The second difference is that using file_get_contents, headers and body are already split\nHowever, while I was trying to figure out a way to do this, I did run into another issue, for which I will make a PR right away\n. How'd I miss this... Cherry picked it from my old PR, completely forgot to change it, thanks\n. ",
    "Baachi": "I agree with @kriswallsmith. \nI would also prefer a stream or socket client without a vendor.\n. ``` php\n$browser = new Buzz\\Browser();\n$response = $browser->get('http://example.org/myfile.txt');\nif (!$response->isSuccessful()) {\n    throw new \\Exception('File could not be downloaded');\n}\nfile_put_contents('/path/to/myfile', $response->getContent());\n``\n.ClientInterface|null. This is useless. \n. @stof  @kriswallsmithintvsinteger?\n. This is wrong, it should beMessageInterface, because the comment fromFactoryInterface::createResponsesays it will return aMessageInterface`.\n. You are right.  @gnutix can you update the comment from the FactoryInterface?\n. ",
    "mauris": "@juliendidier I have debugged for the past two hours and came to the conclusion that this error isn't described in the PHP manual as you've mentioned.\nI observed that if I were to make a simple file_get_contents('https://...');, the file loads. However with the stream context Buzz has created, somehow the error \"failed to open stream: operation failed\" shows up. I cannot figure out what's wrong with the stream context. Maybe the developers can help?\n. It is due to the \"ssl => verify_peer => true\" part. Seems like SSL certification check failed. Still can't get it fixed though.\nI made a minimal script that tests stream_context_create with verify_peer set to true and false. false works. \n```\nC:\\wamp\\www>php testfgc.php\nPHP Warning:  file_get_contents(): SSL operation failed with code 1. OpenSSL Err\nor messages:\nerror:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify faile\nd in C:\\wamp\\www\\testfgc.php on line 20\nPHP Stack trace:\nPHP   1. {main}() C:\\wamp\\www\\testfgc.php:0\nPHP   2. file_get_contents() C:\\wamp\\www\\testfgc.php:20\nWarning: file_get_contents(): SSL operation failed with code 1. OpenSSL Error me\nssages:\nerror:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify faile\nd in C:\\wamp\\www\\testfgc.php on line 20\nCall Stack:\n    0.0004     634760   1. {main}() C:\\wamp\\www\\testfgc.php:0\n    0.0005     639480   2. file_get_contents() C:\\wamp\\www\\testfgc.php:20\nPHP Warning:  file_get_contents(): Failed to enable crypto in C:\\wamp\\www\\testfg\nc.php on line 20\nPHP Stack trace:\nPHP   1. {main}() C:\\wamp\\www\\testfgc.php:0\nPHP   2. file_get_contents() C:\\wamp\\www\\testfgc.php:20\nWarning: file_get_contents(): Failed to enable crypto in C:\\wamp\\www\\testfgc.php\n on line 20\nCall Stack:\n    0.0004     634760   1. {main}() C:\\wamp\\www\\testfgc.php:0\n    0.0005     639480   2. file_get_contents() C:\\wamp\\www\\testfgc.php:20\nPHP Warning:  file_get_contents(https://raw.github.com/imsky/holder/v1.9/holder.\njs): failed to open stream: operation failed in C:\\wamp\\www\\testfgc.php on line\n20\nPHP Stack trace:\nPHP   1. {main}() C:\\wamp\\www\\testfgc.php:0\nPHP   2. file_get_contents() C:\\wamp\\www\\testfgc.php:20\nWarning: file_get_contents(https://raw.github.com/imsky/holder/v1.9/holder.js):\nfailed to open stream: operation failed in C:\\wamp\\www\\testfgc.php on line 20\nCall Stack:\n    0.0004     634760   1. {main}() C:\\wamp\\www\\testfgc.php:0\n    0.0005     639480   2. file_get_contents() C:\\wamp\\www\\testfgc.php:20\n```\n. The only alternative is to use the CURL client and set the cacert.pem file to CURL for SSL verification, or turn off SSL verification. \n. +1 merge please.\n. ",
    "sattes-faction": "Is there any solution for this? I'm having the same issue.\n. ",
    "JayRem": "I'm having the same issue too.\n. ",
    "chriha": "Even if this issue is quite old, I had the same problem with a local dev env and self signed certificates. Adding 'allow_self_signed' => true after this line resp. adding it to the SSL options of Buzz\\Client\\AbstractStream::getStreamContextArray(...) resolved it for me. But this is more of a local dev env fix, I wouldn't use it in production with sensitive data.\n. ",
    "SendDerek": "Appologies for commenting on such an old issue, but I figured out how to set verify_peer to false to get around this issue without needing to modify Buzz source files by using setVerifyPeer() (source):\n$browser = new Browser();\n$browser->getClient()->setVerifyPeer(false);\n$response = $browser->get(\"https://www.google.com\");\nMy last grief is why it seems to take so darn long (up to 5 minutes) to receieve a response when verify_peer is set to false.  Any hints would be appreciated.\nEdit:  Actually, I just ended up ditching setting setVerifyPeer() and used $browser->setClient(new Buzz\\Client\\Curl()) instead.  Much faster and I didn't get any errors about the certificate.\n. ",
    "suxxes": "Hope this is the right way to fix now.\n. ",
    "asm89": "@kriswallsmith Can you merge this? I've been conquering the same bug today.\n. For the GET case this PR fixes the issue. It would still be wise to add functional tests for it though.\n@kriswallsmith Why doesn't every request get a new curl instance? Performance reasons I think? I'm asking because it seems to me that this curl internal state stuff is quite tricky.\n. @kriswallsmith Any news on this? :)\n. @kriswallsmith ping\nThe bug it fixes is blocking some features of our bundle that depends on Buzz. :)\n. @kriswallsmith ping\n. Ah, I missed the option setting (isn't tested? ;) ). Looks fine to me! :+1:\n. Hm, the tests are failing? :/\n. @juliendidier No, the FileGetContents and the MultiCurl class also throw exceptions.\n. :+1: nice @stloyd \n. In the old config the CONTENT_TYPE directive would always be set even if it was empty. In the test case you adapted you checked with assertArrayNotHasKey(), which would fail because fastcgi would always set this param. Starting from nginx 1.1.1 the if_not_empty directive was added.\nThe default nginx install that ships with ubuntu is 1.0.5, that's why I add the nginx ppa and install from that source instead (@ .travis.yml).\nHope it is more clear now! :)\n. Glad I was able to and thanks for all the great libs. :+1:\n. ",
    "skl": "I'll take a look, thanks. What's your plan for docs? Anything I can help with?\n. ",
    "Avtonom": "I have the same problem.\nI'm making requests in the cycle and after 6 iteration me back: \"400 Request Header Or Cookie Too Large\"\nI have read all issues. As I understand it, if I have to overwrite an existing member of the cookies with the same name.\nI can only do this by creating full his class \\Buzz\\Listener\\CookieListener because  \"private $cookieJar\" and overriding \\Buzz\\Util\\CookieJar::addCookie ?\n. ",
    "Haehnchen": "i also want to see socket usage. whats about porting the heavy drupal_http_request from drupal?\nhttp://api.drupal.org/api/drupal/core!includes!common.inc/function/drupal_http_request/8\n. ",
    "johannac": "That seems ok to me. That is the built in functionality of Symfony, to have warnings turned into exceptions when in debug mode, so the user should expect different exceptions in each mode. Its not something that Buzz can control, and I don't think it should try to control it. Since Buzz is a library, and has no bootstrapping or global error handler, I think those things should all be left up to the framework/library using Buzz. I am using it in Behat by btw. \n. Per the HTTP spec, here http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html the response message is not required in the response headers, yet Buzz\\Message\\Response was requiring it. \n. I can't actually remember why I added that bit about the reason phrase... may have been a rage commit. Have reverted now. \nRegarding the error reporting, I'm not actually using Buzz anymore as I've left that project I used it on. So if its better for the symfony integration/the project as a whole to leave the error handling in then please feel free to just close this. \n. ",
    "lyrixx": "I rebased against master ;)\nping @kriswallsmith \n. I rebased against master ;)\nping @kriswallsmith\n. Hello.\nYou can have a look to this : https://github.com/lyrixx/Series/blob/master/Series/Tests/Provider/Upstream/DailyTvTorrentProviderTest.php\nThere, I mock the response.\n. Can you copy/paste the full request (as text/plain) ?\nThanks.\n. Thanks. You're so fast.\n:cocktail: \n. @TitanKing The last tag v0.8  was released recently\n. I will try to explain what I do with multi-curl:\nI have built a Crawler that rely on AMQP, MultiCurl and other things.\nBasically, I have a worker that grab URLs from AMQP. As soon as I fetch an URL, I init the HTTP Request (if I have enough room in my \"HTTP Queue\" (it's just an SplObjectStorage with a $maxItem property))\nWhen the queue is full, I proceed the HTTP Queue to see if some request have finished.\nIf it's the case, I analyse the response(s) and so I free a place(s) for a next AMQP message(s) (it will create a new HTTP Request(s) that will be placed in the HTTP Queue.\nHere is an extract of what I did (I removed some code, but the main idea is here):\n```php\nwhile (true) {\n    // Listen for AMQP message: trigger HTTP request for them\n    while (!$httpQueue->isFull() && false !== $amqpEnvelope = $amqpQueue->get()) {\n        $resource = $this->startMessage($amqpEnvelope, $httpQueue, $crawl);\n    $httpQueue->add($resource, [\n        'amqpEnvelope' => $amqpEnvelope,\n        'amqpQueue' => $amqpQueue,\n    ]);\n}\n\n// Check if HTTP request are finished\n$this->crawler->tick(); // Will call $buzz->proceed();\n\n// Process finished HTTP request\nforeach ($httpQueue->popFinished() as [$resource, $data]) {\n    $this->processResponse($resource, $data['amqpEnvelope'], $data['amqpQueue']);\n}\n\n}\n```\nAs you can guess, I do not want to wait until all response are available. As soon as I get a response after the tick I proceed it and free a slot in the HTTP Queue.\nWith this workflow, I get really high performance, and almost everything is async. @Nyholm BTW, I think I will have to use another HTTP Client because I have very specific needs (as you can see)  and because of this issue and #351\nDo you know if there is something existing that could fit my use case? I think I will have to implement a new one :/ . sure. I do that :). Thanks. It works well.. Thanks :+1: Works like a charm. Yes I was talking about the 1.57 instead of 2.xxx\nThis is a bit strange. When I curl (cli) the httpbin server, delay are well respected. \nHere the first response comes too early. And then there is an issue with 1.57 instead of 2.xx\nMay be it's the way I count elapsed time.. Good catch. I was using time() instead of microtime(true) :+1: \nSorry for the noise.\nAnd again thank you for what did on this lib (and other) :clap: :clap: . Hmm. At first I thought about implementing this in my code.\nBut I said to myself: let's contribute. The patch is quite small, and it could help someone else.\nI really don't want to use guzzle. It became so complicated / complex / over-engineered. Buzz is a really cool lib!\nAs the patch is really small, is it an issue to have it in the core? You already support timeout. IMHO, this deserves to be in the core.. Here we go. I have updated the PR. Failures are not related. I tried to fixed it, but heu .... We could set a header in the resquest to enable the feature. WDYT?. Here we go, a new option has been added . No problem \nThanks for merging. this is useless, right ?. ",
    "travisbot": "This pull request passes (merged 4cee0eb2 into 2ba5da13).\n. ",
    "acidChrist": "I did a fast fix for the problem. Solution is:\nhttps://github.com/kriswallsmith/Buzz/blob/master/lib/Buzz/Client/AbstractCurl.php\nLine start 53:\n```\nstatic private function setOptionsFromRequest($curl, RequestInterface $request)\n{\n    $options = array(\n//Remove CURLOPT_CUSTOMREQUEST for all\n        CURLOPT_URL           => $request->getHost().$request->getResource(),\n        CURLOPT_HTTPHEADER    => $request->getHeaders(),\n    );\nswitch ($request->getMethod()) {\n....\n\n//Add CURLOPT_CUSTOMREQUEST to every method except POST\n$options[CURLOPT_CUSTOMREQUEST] = $request->getMethod();\n\n....\n\n```\n. just use as example $request->submit('url', params, array('Content-type: multipart/form-data))\n. Sory, sumit looks like: public function submit($url, array $fields, $method = Message\\Request::METHOD_POST, $headers = array())\nSo instruction should be:\n$request->submit($url, $fields, Message\\Request::METHOD_POST, array('Content-type: multipart/form-data))\n. ",
    "rejinka": "This does not seem to work. http://posttestserver.com/ can't decode the http body correctly. In fact i don't see anything in the code, that adding the header, would have an effect of how the body is encoded.\n. ",
    "lmammino": "I haven't dug on the code but I think this discussion may be helpful How to post data in PHP using file_get_contents?\n. @kriswallsmith, I may agree with you but IMHO if you want to do so you should remove the whole check (instead having a partially functional check)\n. Ok, now I truly got your point of view. So you can consider the issue closed and reject the pull request.\n. No need to say thanks @kriswallsmith ! \nMe and the whole PHP community should say thanks to you for giving us Assetic, Buzz and Spork :+1: \nKeep coding with such brilliance, man!\n. :+1: for this! \nJust reported a bug few days ago (see #146)\n. I've made a quick n' simple comparison with Artax (who provides a similar multi-request functionalitiy).\nSee the tests here: https://gist.github.com/lmammino/9503406\nIn my dev environment both tests (Artax and Buzz) works fine.\nInstead, in my prod environment, Artax works but Buzz hangs forever. \nAnyway I've just discovered that Artax does not use curl but sockets, so probably I should adopt another library to provide a fair comparison.\n. Ok, I've added the lib jyggen/curl to the test and it works fine both in dev and in production. \nSo, I can confirm it may be a Buzz bug.\n. Thanks a lot @troelskn.\nCurrently I switched to Guzzle (that seems to have a pretty good support for multi curl too).\nAnyway Buzz is my favorite library for HTTP and I would be really glad if they will merge your PR to solve this problem.\nI just voted your PR and I hope it will be merged soon :wink: \n. ",
    "denisvmedia": "If we check the code:\n```\npublic function post($url, $headers = array(), $content = '')\n{\n    return $this->call($url, RequestInterface::METHOD_POST, $headers, $content);\n}\n/\n * Sends a request.\n \n * @param string $url     The URL to call\n * @param string $method  The request method to use\n * @param array  $headers An array of request headers\n * @param string $content The request content\n \n * @return MessageInterface The response object\n */\npublic function call($url, $method, $headers = array(), $content = '')\n{\n    // ...\n}\n```\nWe'll see that Browser::post() expects string and not array. Can this be the cause of the problem?\nP.S. It seems that also only Curl client supports getFields() in the request object. And thus Browser::submit() will fail as well with any bundled client except Curl.\n. ",
    "akaramires": "Thank you!\n. ",
    "rapsli": "kriswallsmith: how would a read the status code?\n. I must have missed this somehow. Everything fine now. Thanks a lot.\n. ",
    "ryancastle": "It looks like send() actually returns a MessageInterface object, which doesn't necessarily implement getStatusCode(). Although by default the factory does return a Response, it's not guaranteed. Any reason why send() doesn't return a [non-existent] ResponseInterface instead?\n. I've submitted a pull request (https://github.com/kriswallsmith/Buzz/pull/129). Not sure where it's at.\n. I've made those changes. Travis seems to fail on PHP 5.3.3, but it looks like it's a problem with the setup.\n. @kriswallsmith Are you still interested in this PR?\n. ",
    "micronax": "Would also appreciate that!\n. ",
    "dellamowica": "Yes, I can't figure how to get multi-requests content either. After looking a the source it seems like the results never get stored. \n. ",
    "gggeek": "indeed it seems that usage of array_shift here is not ideal.\nIt should possibly be replaced with a plain loop which leaves queue intact, and a new call added to reset the queue before a new call (or an internal pointer kept to the last sent request), or a new member variable added to store the responses...\n. ",
    "TitanKing": "mmm this project seems dead, no pull requests committed to in almost a year.\n. ",
    "herrsebi": "Good idea! Will do!\nOn Mon, Feb 18, 2013 at 10:35 AM, Christophe Coevoet \nnotifications@github.com wrote:\n\nI would add a marker ExceptionInterface implemented on the exceptions to\nallow catching easily all exceptions coming from Buzz (similar to what\nSymfony and ZF are doing for instance)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/kriswallsmith/Buzz/pull/106#issuecomment-13713423.\n. oh dear, how very embarassing! fixed :)\n. and so it should be.. got confused with the file templates :)\n\nAm 18.02.2013 um 11:27 schrieb Christophe Coevoet notifications@github.com:\n\nIn lib/Buzz/Exception/BuzzException.php:\n\n@@ -0,0 +1,14 @@\n+<?php\n+/*\n- * Declares BuzzException\n- * @author Sebastian Pleschko sebastian.pleschko@finanzcheck.de\n- /\n  This should be removed.\n\nIf you want to keep the author annotation, put it in the phpdoc of the interface\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "troelskn": "This could presumably be combined with the redirect code from my branch at https://github.com/kriswallsmith/Buzz/pull/124 to provide support for redirects under these circumstances.\n. I've corrected the errors as per your instructions.\n. They can and they probably should. I left it there to leave the code as BC as possible.\n. The example code should really just be a test case. I've moved it in to functional tests now, as well as enabling MultiCurl for the other functional tests. And yeah, multi_curl is a bit hairy. \n. OK - I managed to get a working functional test for MultiCurl. It failed initially because fastcgi wasn't configured to allow concurrent requests.\n. I've been using this feature for a few months now and it works as advertised. Is there anything I can do to get it merged?\n. @hadidas I use an object to capture state and pass it for the callback. E.g.:\n``` php\nclass BuzzHttpCallback {\n  protected $context;\n  protected $page;\n  public $callback;\n  public $errback;\nfunction __construct($context, $page) {\n    $this->context = $context;\n    $this->page = $page;\n    $this->callback = array($this, 'success');\n    $this->errback = array($this, 'error');\n  }\nfunction success($request, $response, $options) {\n    $this->context->handleResponse($response, $this->page);\n  }\nfunction error($request, $transport_error, $curl_error_code) {\n    $this->context->handleTransportError($transport_error, $this->page);\n  }\n}\n...\nclass HttpAdapter {\n  protected $client;\n  protected $max_queue_size;\nfunction __construct($client = null, $max_queue_size = 10) {\n    $this->client = $client ?: new Buzz\\Client\\MultiCurl();\n    $this->max_queue_size = $max_queue_size;\n  }\nfunction makeCallback($context, $page) {\n    $closure = new BuzzHttpCallback($context, $page);\n    return array($closure->callback, $closure->errback);\n  }\nfunction get($href, $context, $page) {\n    if (!preg_match('~^(https?://[^/]+)(/.)?$~', $href, $matches)) {\n      throw new \\Exception(\"Malformed URL: {$href}\");\n    }\n    list($callback, $errback) = $this->makeCallback($context, $page);\n    $host = $matches[1];\n    $resource = isset($matches[2]) ? $matches[2] : '/';\n    $request = new Buzz\\Message\\Request('GET', $resource, $host);\n    $request->addHeader('User-Agent: php-'.phpversion());\n    $request->addHeader('Accept: /*');\n    $response = new Buzz\\Message\\Response();\n    $options = array('callback' => $callback, 'errback' => $errback);\n    $this->client->send($request, $response, $options);\n    while ($this->client->queueSize() >= $this->max_queue_size) {\n      $this->client->proceed();\n    }\n  }\nfunction proceed() {\n    $this->client->proceed();\n  }\n}\n```\nOr you could simply pass a closure.\n. :thumbsup: \n. No, but it seems to be the most logical place to put the information. Do you have a different thing in mind?\n. getLastRequest doesn't help much. That would return the last requested url, but if a request is met by a redirect, the final destination will be different from the request location. I guess the redirect logic could be moved to a browser component, but since the curl driver provides this logic natively, I think it makes sense to keep it at the http driver level. Plus this information could be usable outside of a browser scope.\n. @lmammino You might want to give my multicurl branch a try, if you need concurrency support. The current implementation in Buzz is bit buggy/lacking. See: https://github.com/kriswallsmith/Buzz/pull/123\n. Obviously an error on my part, but peculiar that the behaviour was changed from 5.3 to 5.4 - Any idea why?\n. ",
    "jvanbouchaute": "Hi,\ndid an update to the latest version, but we still see the error : \n- Installing kriswallsmith/buzz (dev-master 03642f8)\n  Cloning 03642f8a6e33f33ccf93fb95a93b0ed171fa7f83\n- Installing sensio/buzz-bundle (dev-master 942546e)\n  Cloning 942546e209514740c973097450fc6ff2e03d76af\nErrorException: Notice: Use of undefined constant CURLOPT_PROTOCOLS - assumed 'CURLOPT_PROTOCOLS' in /data/jenkins_home/jobs/mockserver-integration-head/workspace/vendor/kriswallsmith/buzz/lib/Buzz/Client/AbstractCurl.php line 23\nRgds.\nJurgen.\n. Array\n(\n    [version_number] => 463623\n    [age] => 3\n    [features] => 1597\n    [ssl_version_number] => 0\n    [version] => 7.19.7\n    [host] => x86_64-suse-linux-gnu\n    [ssl_version] => OpenSSL/0.9.8j\n    [libz_version] => 1.2.3\n    [protocols] => Array\n        (\n            [0] => tftp\n            [1] => ftp\n            [2] => telnet\n            [3] => dict\n            [4] => ldap\n            [5] => http\n            [6] => file\n            [7] => https\n            [8] => ftps\n        )\n)\n. ",
    "LegendOfGIT": "In order to clean up the list of pull-requests, just delete this request as the author hasn't replied for several years ;). The class Response will be removed soon?\nWhat is the future concept of this package?. When will the master fullfill psr7 standards?. I would be great if you merge my pull request.\nIt does not really matter if the class Response will be dropped in the future, since developers still using older versions of this package.\nIf it will be dropped, it will be dropped.\nTil then, it won't hurt adding this constants ;). Very nice.\nThank you in advance :). Sorry.\nI am confused.\nIn the Release Notes of 0.17.0, you are saying that 0.17.0 is not released yet:\nhttps://github.com/kriswallsmith/Buzz/blob/v0.17.0/CHANGELOG.md\nIf i update via composer, \"kriswallsmith/buzz\": \"> 0.6\" updates only on version 0.16.1.. Ok.\nThis is definitly a show stopper.\nWe can't update our product on PHP7.1 from one day to the other.\nIn this case, it would be pretty neat, if you release a hotfix of version 0.16.1 with the try..catch for curl_exec.. Allright.\nThx.\nI will prepare a PR.. To be honest.\nThis test-server for integration tests is a huge obstacle for contributors on your project.\nIt's absolutely painful to setup the execution with docker.\nI would genuinely be thankful if you take a bit of you're time to apply the try..catch improvement on version 0.16.1. Jep.\nHad the same travis thought.\nI will think about an alternative for the test-server.\nI know this is straight forward.\nBut one have to perform a trickshot to use it in docker without php installation.. @stof\nI tried man.\nBut sadly i hadn't had the time to finish the setup.\nCould you add a docker-compose.yml to this repository?. ",
    "relo-san": "Fixed. :)\n. ",
    "dominikzogg": "https://github.com/dominikzogg/Buzz/blob/socketclient/lib/Buzz/Client/Socket.php\n. ",
    "gnutix": "@kriswallsmith Could you please take a look at this PR before it rots ? :)\n. @kriswallsmith ping\n. @kriswallsmith ping\n. @kriswallsmith ping...\n. Both are \"accepted\" values and are used in your code already (see Cookie.php line 33 in this PR for example), so I wasn't quite sure which one you preferred, but thought we should settle for one. I personally often think about a class when I see an uppercase as a first letter, explaining why I've gone this way (also you use (boolean) $variable in PHP in some places too).\nBut if you'd like the uppercase better I'll change it. I'll update my second PR as well. Just confirm it, please.\n. @rybakit +1 on your arguments\n@kriswallsmith what do you think?\n. Sure, a better textual comment about the utility of this destruct method would be a lot better! But I won't dare to write this myself as I'm not the author of the code.\n. Thanks, missed that one !\n. Agree, just wanted to stick with the purpose of the PR: document every public method... But sure it's not really helpful. :/\n. Fair point. Just removed it.\n. Another heated debate! :) One argument may be the output of a var_dump(1); = int(1), or the fact that is_integer() is an alias to is_int() (and not the reverse), or that int is just smaller... Whatever, I don't think it's a really important topic, someone should just decide the standard for this code base and we'll stick to it. :P\n. The annotation for Factory::createResponse is already @return Response. See https://github.com/gnutix/Buzz/blob/0a18a3432e243e42c236ac382699931084c13db7/lib/Buzz/Message/Factory/Factory.php#L35 .\n. I'm kind of reluctant to do that. From what I've understood of the good practice of \"designing by contracts\", the interfaces (like FactoryInterface) should be as broad as possible in the methods signature, and any actual implementation of it (like Factory) could chose to describe a more specific return value if it's needed. However, I might have misunderstood / be wrong.\n. Hmm... Is there a reason why there's no ResponseInterface btw (or a reason not to add one) ?\n. @stof What do you think ?\n. @kriswallsmith Any thoughts about this?\n. ",
    "hd-deman": "@kriswallsmith ping. what did you think?\n. ",
    "qweluke": "@kriswallsmith plase update the docs. Yesterday I spent a few hours to figure it out.\nIf you want to use buzz and share cookie between pages (ex. do login request) use this\n```\n    $uri = '/j_security_check';\n$params = [\n    'j_username' => 'username'\n    'j_password' => 'password\n];\n\n$curl = new Curl();\n$curl->setTimeout(60);\n\n$this->_browser = new Browser();\n$this->_browser->setClient($curl);\n\n$this->_browser->getClient()->setOption(CURLOPT_COOKIEFILE, 'cookies.txt');\n$this->_browser->getClient()->setOption(CURLOPT_COOKIEJAR, 'cookies.txt');\n\n$url = self::API_HOST . $uri;\n\n$response = $this->_browser->submit($url, $params);\n\n```\nthis won't work\n```\n    $this->_browser = new Browser();\n    $this->_browser->setClient($curl);\n$listener = new CookieListener();\n$cokie = new Cookie('cookie.txt');\n$listener->addCookie($cokie);\n\n$this->_browser->addListener($listener);\n\n```\n. ",
    "steve228uk": "This is awesome, was having big problems with it timing out. There seems to be an error on line 57 of the MultiCurl.php\nhttps://github.com/kriswallsmith/Buzz/pull/123/files#L2R57\n. I had to add an isset() here as it errored.\n. ",
    "richsage": "I'd really like this merged as well if possible - I use Buzz to handle concurrent connections to Google's GCM service (for push notifications), and I've had to temporarily back out from using MultiCurl sadly. @kriswallsmith is there any progress on this? Thanks :-)\n. ",
    "hadidas": "Nice work, i'm just start using it today. \n@troelskn what do you think about adding params to the callback function ?\nHope it will be merged too ;) For the moment using a fork\n. Thank you @troelskn for your answer.\n. ",
    "rcatlin": ":+1: \nWould like to see MultiCurl fixed. \n. @kriswallsmith Awesome! I'll definitely take a look. Thank you!\n. ",
    "ivoba": ":+1: \nare we waiting on reactions on stof's notes here?\n. ",
    "jaswrks": "Done :-) Thank you.\n. ",
    "FlorianKoerner": "ping @kriswallsmith\n. ",
    "sveriger": "No, it isn't handled there. I debugged. It just splits header from content, but unfortunately at the wrong position since CURLINFO_HEADER_SIZE delivers the header size without the extra Proxy-Header.\nI agree to put the code in the populateResponse method but it is static and the proxy-Property is not accessable there.\n. ",
    "bburnichon": "This is linked to #156.\nRoot cause of this https://github.com/bagder/curl/pull/60\n. I'm afraid that with curl < 7.30.0, there is no way to correctly determine header size. One way to solve the issue would be to detect whether there is a proxy or not and tell about incompatibility with gzipped content.\nCould you try doing something like?\nphp\nif ( !empty($this->proxy) && version_compare($version['version'], '7.30.0', '<')) {\n    $pos = strlen($raw) - curl_getinfo($curl, CURLINFO_SIZE_DOWNLOAD);\n} else {\n    $pos = curl_getinfo($curl, CURLINFO_HEADER_SIZE);\n}\nThe above would only apply the trick if request has a proxy.\n@kriswallsmith A warning should be added to read me to inform users of the incompatibility.\n. ",
    "Strate": "What about this?\n. ",
    "oblogic7": "After further testing, I have figured out that the problem is only happening with https requests.\n. Pretty confident that I'm having the same issue as #67.\n. ",
    "makasim": "@kriswallsmith ping\n. typo here?\n. ",
    "RSully": "usleep 100 seems kind of arbitrary\nedit: Yeah, the thread over at php.net gets into much depth and has some better samples near the end. They still use a usleep of 50 though. Feels hacky. \n. :+1: \n. ",
    "Crazymad": "same problem for me :+1: \n. ",
    "Koc": "Travis fails because https://github.com/travis-ci/travis-ci/issues/1385\n. @stof done, but anyway travis failed\n. Please revert .gitignore. There is global config for folders like this.\n. how to do it? just replace 5.3.3 with 5.3?\n. ",
    "aik099": "Please rerun tests, because they failed due Travis error.\n. Travis build failed not due changes in this PR, but due incorrect Travis instance configuration (see \"openssl\" message in Travis logs). \n. @kriswallsmith ping.\n. @kriswallsmith ping.\n. Awesome. Thanks for the merging.\n. ",
    "GerritHoekstra": "Is there already a fix (or hotfix) for this issue? I'm also having problems with this and because there is another POST request made I get a \"Maximum redirects followed\" error.\n. ",
    "cmbuckley": "Closing as no longer relevant\n. ",
    "spolischook": ":+1: \n. ",
    "ZloeSabo": "@stof seems like not yet ready for 5.6\n. ",
    "raul782": "We're trying to post json payload to a bitbucket api\n. ",
    "owenBeresford": "Undefined variable: http_response_header\n$rootdir/vendor/kriswallsmith/buzz/lib/Buzz/Client/FileGetContents.php:66\nI am raising this (rather than submitting a patch), as the variable is defined somehow when using a standard HTTP request.   This is a local var to the function scope.  This doesn't make sense.  The only thing I can think, is that the underlying library is injecting a variable into the callers space...?\n. This is dup of #144 \n. True, but many http implementations support it.\n. ",
    "peterfrankjohnson": "The travis build failed when I changed the version to 5.3\nrbenv: php-cgi: command not found\nThe `php-cgi' command exists in these Ruby versions:\n5.2\n5.2.17\n5.3.3\n5.4\n5.4.27\n5.5\n5.5.11\n5.6\n5.6.0beta1\n. @stof I have changed the travis configuration to use php5-fpm, but there is a \"File not found.\" error whenever the php script is accessed.\nI'm not really that great with nginx, I tend to use apache. I'm pretty certain that the problem is simply an incorrect path in one of the config files, either php-fpm.conf or nginx.conf, but I can't figure out where.\nCould you take a look for me? Thanks.\n. The Auth Digest can work as a Listener and I looked at doing it that way at first. I however went down the route of the Decorator as I also needed to make the Browser return the Cookie headers if required as well.\nIf you take a look at my repository I have created a few branches with the Decorator, Cookie and Auth Digest extensions as separate branches (these are all merged in the development branch). I simply did it this way as it seemed better for my own use case.\nHowever I am happy to change this if required.\nSome test code for the development branch is posted below to give an example of how this would be used.\n```\n<?php\nrequire('vendor/autoload.php');\nuse Buzz\\Browser;\nuse Buzz\\Client\\Curl;\nuse Buzz\\Client\\Decorator\\DigestAuthClientDecorator;\nuse Buzz\\Client\\Decorator\\CookieClientDecorator;\n// Create Curl Client\n$curl = new Curl();\n$browser = new Browser();\n$browser->setClient($curl);\n$browser->addDecorator(new CookieClientDecorator());\n// Create DigestAuthClientDecorator\n$decorator = new DigestAuthClientDecorator();\n$decorator->setUsername('user1');\n$decorator->setPassword('user1');\n$browser->addDecorator($decorator);\n//$response = $browser->get('http://test.webdav.org/auth-digest/');\n$response = $browser->get('http://httpbin.org/digest-auth/auth-int/user1/user1');\necho $response;\n```\n. Hi @kriswallsmith \nSorry about the late response with this, I have refactored the code to use preSend and postSend and rewritten it as a Listener as requested.\nI have also included a Test and a file showing an example of how this class is used.\nIf you don't want the example then I will delete it, or I could include it in the comments in the DigestAuthListener class file. It isn't exactly obvious how to use this class so I felt an example was necessary.\nKind Regards,\nPeter\n. On a related note, although this doesn't fix #69 the features inside that pull request are already in the current codebase so I don't think it serves any purpose being open any more.\nI could be wrong, but just thought I would mention it.\n. Just tried and got a fatal error.\nPHP Fatal error:  Call to protected Buzz\\Adapter\\AbstractAdapter::__construct() from invalid context in /home/peter/Documents/Sycamore Consulting/Buzz/test.php on line 11\n. This is only to make the travis build pass, travis thinks that 5.3 specifies version 5.3 exactly (not the latest 5.3 version) and throws an error. As the next available version that travis is able to use is 5.3.3 I simply bumped the version up to enable the tests to pass.\n. I agree, I have changed it now.\n. I've changed the indentation to spaces in both files.\n. Unfortunately not, the nonce value from the server needs to be stored as we are unable to calculate the response value without it.\nIf we don't store at least this value then for every request we send the server will send a 401 response and we will then have to re-authenticate. This would mean twice as many http requests.\nThe problem that you highlighted is alluded to in RFC 2617 as they point out that pipelining could cause problems if the server changes the nonce value.\n. I will move it to Buzz\\Client\\Adapter that makes more sense as it can't work with anything other than a Client.\n. ",
    "oleg-andreyev": "Wrong positions determined with buzz v0.13 and curl 7.19.7\ncurl 7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.16.2.3 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2\nProtocols: tftp ftp telnet dict ldap ldaps http file https ftps scp sftp\nFeatures: GSS-Negotiate IDN IPv6 Largefile NTLM SSL libz\nResult:\nstrlen($raw) == 41500\ncurl_getinfo($curl, CURLINFO_SIZE_DOWNLOAD) == 10721\nstrlen($raw) - curl_getinfo($curl, CURLINFO_SIZE_DOWNLOAD) == 30779\ncurl_getinfo($curl, CURLINFO_HEADER_SIZE) == 1261 (correct)\nClient config:\n$this->client->setVerifyPeer(false);\n$this->client->setIgnoreErrors(true);\n$this->client->setMaxRedirects(0);\n$this->client->setOption(CURLOPT_ENCODING, '') //support all encodings\nCURLINFO_SIZE_DOWNLOAD returning size that was downloaded with Content-Encoding: gzip\n. Done in old fashioned way:\n/**\n         * @bug https://github.com/kriswallsmith/Buzz/pull/156\n         * @issue https://github.com/kriswallsmith/Buzz/issues/181\n         */\n        if (strpos($proxiedResponse->getHeader('content-encoding'), 'gzip') !== false) {\n            $content = gzdecode($proxiedResponse->getContent());\n        } else {\n            $content = $proxiedResponse->getContent();\n        }\n+1 for adding this incompatibility to README\n. ",
    "doublejosh": "The library is unusable for me without this fix.\n. I did end up using the Curl client instead.\nphp\n$client = new Client(NULL, 'Buzz\\Client\\Curl', $myToken);\n. :+1: please\n. ",
    "devantoine": "+1\nPlease merge this!\n. ",
    "Gregoire-M": "+1\n. ",
    "neemzy": "+1\n. ",
    "ewgRa": "+1\n. This is not merged, because @kriswallsmith is right. According to specs headers can be LF, but it is evil and something like support BC.\nThe line terminator for message-header fields is the sequence CRLF.\n. @adampiotrowski ping, will you revert this changes?\n. ",
    "adampiotrowski": "@kriswallsmith Do you want me to remove those 2 changes? \n. ",
    "sverraest": "+1 to merge.\nCurrently not having this option is causing issue with a Load Balancer for testing purposes.\nAny reason this has not been merged yet? \n. I've also updated the HWIOAuthBundle to work with this update but this should be merged before I can open a PR there.\n. Hi @kriswallsmith what's the policy on merging PR? I've now seen this feature implemented in a few other PR's but none of them have made it to main repository. Let me know if you have any feedback on this PR.\n. ",
    "misilot": "Thanks, i must of looked over that :) Thanks!\n. ",
    "maryo": "@egeloen The callback is removed from the options because it's a custom - additional option. It's removed from the options copy only (since it's unset from value inside foreach). The options copy is then passed to curl_setopt_array which accepts only CURLOPT_XXX constants. But the original options (including the callback option) are kept inside $this->queue and that's the property which is read before the callback is called.\n. ",
    "tacconthommy": "@kriswallsmith Any chance to get this merged in?\n. ",
    "ptatoud": "Hi @kriswallsmith !\nI've the same error than @tacconthommy.  I 've just write \n$pj1 = new FormUpload($pj1); and $pj1 is an Symfony\\Component\\HttpFoundation\\File\\UploadedFile.\nIs it possible to merge this fix ?\nThx\n. @kriswallsmith : Any chance to get this merged in ?\n. @kriswallsmith, i can write a test but you can't instanciate and verify a var in if.\nIn fact, it's easier to detect an error (for exemple \"=\" instead of \"==\") in a condition.\nIn this case, if $value->getFile() is not a file but not empty, your condition will always be true but should not :)\n. ",
    "honzatrtik": "here it is - https://github.com/kriswallsmith/Buzz/pull/172\n. ",
    "jsmirnov": "same for me on php 5.5 -> increasing timeout seems to do work, but returning back breaks.\n@JonnyD \nThis is how you can alter timeout for client.\n``` yaml\napp/config/config.yml\nhwi_oauth:\n    http_client:\n        timeout:       10 # Time in seconds, after library will shutdown request, by default: 5\n```\n. ",
    "marcu87": "I still have this problem, is there any fix? (other than the timeout workaround). Finally I found the solution: \nThe problem was that on my server I had ipv6 enabled, but not working... so CURL tried to connect to the facebook api using ipv6, and sometimes it switched automatically to ipv4 and worked just fine, but some other times it didn't work...\nWhat I just did was enable ipv6 on my server, and now everything works perfect.\nHope this will help somebody.. ",
    "enekochan": "I was having a similar problem with timeouts while trying to connect to Facebook with HWIOAuthBundle. It had been working for months but suddenly stopped working.\nThe exception:\n```\nrequest.CRITICAL:\nUncaught PHP Exception HWI\\Bundle\\OAuthBundle\\OAuth\\Exception\\HttpTransportException: \"Error while sending HTTP request\" at /var/www/vhosts/domain.com/httpdocs/vendor/hwi/oauth-bundle/OAuth/ResourceOwner/AbstractResourceOwner.php line 255\n{\n\"exception\":\"[object]\n(HWI\\Bundle\\OAuthBundle\\OAuth\\Exception\\HttpTransportException(code: 7):\nError while sending HTTP request at /var/www/vhosts/domain.com/httpdocs/vendor/hwi/oauth-bundle/OAuth/ResourceOwner/AbstractResourceOwner.php:255, Buzz\\Exception\\RequestException(code: 7):\nFailed to connect to graph.facebook.com port 443: Connection timed out at /var/www/vhosts/domain.com/httpdocs/vendor/kriswallsmith/buzz/lib/Buzz/Client/Curl.php:29)\"\n} []\n```\nIn resume the error message:\nFailed to connect to graph.facebook.com port 443: Connection timed out\nHave tried increasing all the timeout values I could find (in configurable parameters and overwriting fixed values in code), overwriting the HTTP client in HWIOAuthBundle, and everything I could think of but nothing worked. It worked fine in my development machine but not in production server. What worked for me was enabling IPv6 in my CentOS server :) Followed this guide: https://www.cyberciti.biz/faq/rhel-redhat-fedora-centos-ipv6-network-configuration/\nHope it helps :). @blackarcanis Then you may try forcing IPv4 in cURL at least to discard it's an IPv6 vs IPv4 error:\ncurl_setopt($ch, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4);. ",
    "blackarcanis": "@marcu87 I don't have IPv6 enabled on my server :/\nAnd I can't enable it (I'm on a Google Cloud Compute Engine, no IPv6 support for now...).\nBut if my server request only from an IPv4, there's no reason to get a response on IPv6 right ?. @enekochan Could be an idea... but how can I force this option (CURL_IPRESOLVE_V4) with HWIOAuthBundle ?. ",
    "mlivan": "Need to install curl\nsudo apt-get install php5-curl\n. ",
    "utkarsh2k2": "I get the same error.\nTried mlivan's solution but I still get the same error\n. ",
    "otjutt": "@mlivan Thanks man! :+1: \n@utkarsh2k2 Try:\nsudo apt-get install php-curl. ",
    "GolubovicM": "In my case I was getting error message that curl package was not found so I had to add repo like this:\nsudo add-apt-repository ppa:ondrej/php\nsudo apt update\nAnd then install curl from that repo like @mlivan explained.. ",
    "arnaud-lb": "Guzzle seems to be using CURLOPT_HEADERFUNCTION / CURLOPT_WRITEFUNCTION in order to receive the header and the body separately: https://github.com/guzzle/guzzle/blob/b65cdda6b0d237f7a47c25414599c5a400fc4b83/src/Handler/CurlFactory.php#L53\n. https://github.com/kriswallsmith/Buzz/pull/207 is using CURLOPT_HEADERFUNCTION too\n. Related: https://github.com/kriswallsmith/Buzz/pull/156, https://github.com/kriswallsmith/Buzz/issues/181, https://github.com/kriswallsmith/Buzz/pull/128\n. ping :). ",
    "MikaelLarsson": "It turned out that I had my applications routing and filters set up in a way that made the request time out. It would however be nice with an error to be thrown in case of timeout or bad request etc.\n. ",
    "joaovcarvalho": "How do you solved this problem ? I'm using Laravel and have no idea how to increase the time of the request.\n. Thanks @egeloen !\n. ",
    "arall": "+1\n. ",
    "nicdnepr": "but exception i get in kriswallsmith/buzz/lib/Buzz/Client/Curl.php\n. ",
    "n1c01a5": "same error \n. For information, if I disable SSL in\nhttps://github.com/kriswallsmith/Buzz/blob/master/lib/Buzz/Client/AbstractCurl.php#L226&L227 with\ncurl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);\ncurl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);\nit's works.\nIs there a better way ?\n. The issue is OpenSSL is not update\n```\nopenssl version\nOpenSSL 1.0.1e 11 Feb 2013\n```\nI'm using the sid main of debian to update this package.\n```\ndeb http://ftp.debian.org/debian sid main\ndeb-src http://ftp.debian.org/debian sid main\napt-get update\napt-get upgrade\n```\nAfter that doesn't forgotten to remove the sid repository in the sources list :p .\n. ",
    "armetiz": "Hi team;\nMaybe this PR could be merged ? \n. ",
    "ingro": "Yep I noticed that too, thanks for the heads-up!\n. ",
    "gubarazer": ":+1:\n. ",
    "axiac": "It seemed like a nice idea to let cUrl separate the header from the body instead of hacking the raw response based on the cUrl version. On a second thought it doesn't look that great anymore; it replaces a 4 lines of code hack with much more code needed to handle the header file.\nApparently the cUrl extension handles the file in an unusual way and right after curl_exec(), ftell() returns 0 and fstat() also returns 0 for file size (but the file pointer is at the end of file and the file is not empty). \nI discovered now that a call to fseek($file, 0, SEEK_END) fixes the behaviour of both ftell() and fstat() but it is still too much code for almost nothing.\nAll in all, it does not fix anything and it does not bring any improvement to the existing code. It only shows an alternative way to split the header and the body of the response.\n. ",
    "dem3trio": "file_get_contents(https://i.ytimg.com/vi/Tj75Arhq5ho/hqdefault.jpg): failed to open stream: operation failed\nbut if I try to use file_get_contents(http://i.ytimg.com/vi/Tj75Arhq5ho/hqdefault.jpg) it works\n. There is a related issue opened in sonata-media: https://github.com/sonata-project/SonataMediaBundle/issues/759\n. ",
    "rande": "I found out the related issue. The capath must be set. See https://github.com/sonata-project/SonataMediaBundle/issues/759#issuecomment-103472614\n. ",
    "markusguenther": "I used a different client and that was a easy workaround for me. Curl is a bit better in such things.\nphp\n    $browser = new Browser();\n    $browser->setClient(new Curl());\nHope that helps some other guys too.\n. ",
    "poizon001": "Hi,\nI am using buzz browser to make patch call and getting the same error\nfile_get_contents(https://www.xyz.com/health/121.json): failed to open stream: operation failed.\nI tried to use file_get_contents(http://www.xyz.com/health/121.json) still it does not works.\nPlease help\n. ",
    "royopa": "Hi @ged15! I updated the readme.\nRegards!\n. Ok, I updated the readme\n. ",
    "beberlei": "Having the same issue, it seems with Buzz v0.15 all my http requests take exactly 5 seconds.\n. ",
    "Hezion": "Thank God, i found this issue. After downgrading from dev-master to 0.13 i noticed a massive speedup. This really needs to be addressed.\n. ",
    "peroumal1": "Hello, \nI also experienced a speed issue with the last stable version (v0.15) and had to downgrade to 0.13. \nIn my case, I am not using Behat but I am doing a HTTP request to an external site in a Symfony controller. The URL requested and what it returns is static (so it cannot come from the URL). \nI was able to pinpoint the exact place where the client is taking more time from one version to another. \nIt looks like it comes from the file_get_contents call in lib/Buzz/Client/FileGetContents.php, which, from my current observations take less than 200ms in 0.13 and around 6s (!) in 0.15. \nSince I am pretty new to this library, did something change on the parameters passed to this function from a version to another ? \nThanks ! \n. ",
    "MinerCrafter": "I confirm.\nFor a simple request with the version 0.15 (FileGetContents()) :\nHTTP 1.1 : Request takes 10 seconds.\nHTTP 1.0 : Request takes less than 500 ms.\nThanks.\n. ",
    "vinniecent": "If I'm not mistaken, the HTTP 1.1 protocol uses a persistent connection by default (Connection: Keep-Alive). So the connection has to be explicitly closed or else the connection waits until it is timed-out. I think this can explain why the request is taking so long to complete.\nAdding the header 'Connection: close' fixes this issue for me:\n$headers = array('Connection' => 'close');\n. ",
    "designgrill": "Not sure if 'Connection' header is needed here. A simple command line curl call to resources with such a header completes without any such latencies.\n. I think curl and other libraries will try to understand the Content-Length or Transfer-Encoding: chunked response and will terminate the connection when the complete body is received without waiting for time out.\nIn that case, the easiest option is indeed using 'Connection: close' as you suggested\n. ",
    "viscat": "I'm having the same issue, It can be fixed replacing this method by:\nphp\nlist($header, $body) = preg_split(\"/\\R\\R/\", $raw, 2);\n$response->setHeaders(static::getLastHeaders(rtrim($header)));\n$response->setContent($body);\nPD: I realized that it brokes when there are redirections. Sorry \n. ",
    "xoza": "We've faced the same problem. I've MR a possible solution.\nI hope it helps.\n. That's my best shot so far. It supports multicurl too.\n. I've seen the => aligned in other parts of the code. But I could change it.\n. Actually not, and I don't like it so much, but I've tried to respect as much as possible the current project architecture and I think that handle the headers in other class would be odd.\n. You're right. Let me find a better solution.\nThanks!\n. ",
    "nike-17": "I can also update test https://github.com/kriswallsmith/Buzz/blob/master/test/Buzz/Test/Message/ResponseTest.php \nBut i don't think it is required\n. ",
    "enzolutions": "Thanks\n. ",
    "theTechGuyy": "You're right, it's not a redirect - bad choice of words on my part.\nNevertheless, a POST request to a server, which responds with 303 and a Location header, should be followed by a GET request to the new location instead of keeping the request method for the subsequent request.. ",
    "GeorgosXL": "@Nyholm yes, definitely \ud83d\udc4d . ",
    "Hast": "Can you provide a snippet of code you run?\n. ",
    "IzaacJ": "It's when using bitbucket-api: https://bitbucket.org/gentlero/bitbucket-api\nGot Buzz and the bitbucket-api to work flawlessly on a VM with the same setup (initial AMP stack), which is kind of weird.\nWill search for any packages that might differ between the setups.\nEDIT: Solved it by running this: sudo apt-get install curl libcurl3 libcurl3-dev php5-curl . For some reason the libcurl libraries wasn't installed.\nFeel free to close this issue.\n. ",
    "dontub": "The Apple Push Notification service just returns a status code, but no reason phrase.. ",
    "artursvonda": "@Nyholm Any plans to release this soon? We've run into an issue where we needs this.. Thanks! Enjoy the vacation!. ",
    "severin-bruhat": "what is weird is that it is working on my production (live) environment, and it is the same source code. and i don't find anything on google, it is like I am the only one having this issue..... I found the solution here : http://stackoverflow.com/questions/41581507/curl-error-60-ssl-certificate-problm-certificate-is-not-yet-valid-lemp-wordpr\nMy server's date/time was not correct, so i installed NTP\n. ",
    "vinkla": "@Nyholm I follow you on GitHub and Twitter. That is probably why \ud83d\ude04 . ",
    "staabm": "@Nyholm could you create a new release including this change? atm the latest release contains test/server.php which allows to passin a SLEEP timeout via GET parameter.\nusually the vendor files should not be public accessible,... but sometimes it is and this renders a DOS vector in this situations ;).. Thanks!. ",
    "PezCoder": "Ah, you're right 5xx shouldn't be the response, 28 works for now.\nIs there a pr or issue where I can track the progress of NetworkException ? \n@Nyholm . ",
    "craigcarnell": "@Nyholm Thanks - now using a release instead of master. ",
    "gsdevme": "Thats great to hear (about 1.0.0). If 1.0 is soon then its ok. I was just thinking its redundant to suggest semver without a 1.0 really... its more a \"Id like to have\" or an open issue. ",
    "hjanuschka": "@Nyholm thx - seems to work. would have been nice if the changelog - that mentions the BC changes, showed some samples on how to use it from now on!\nanyway keep up the good work  \ud83c\udf7a . ",
    "nicolas-grekas": "force-lowest should be used with an exact version, which is the minimum.\nE.g. \"symfony/force-lowest\": \"=4.1\"\nmixed with symfony/lts it provides exactly what dunglas/symfony-lock does. Fix merged: https://github.com/php/php-src/pull/3744\nWill require PHP >= 7.2.15 & libcurl >= 7.61.0\n. ",
    "sunkan": "Removed the dependency on php-http/message. For 1.0.0 it makes sense to require the client argument. And then we could remove the response factory from Browser. What I could find it's only used once on line 254\nAnd it's docblock is type hinted as RequestFactory. Should I remove the message factory completely or just create it if $responseFactory is null?\nI was thinking to create it so we don't break BC. ",
    "DemonTPx": "The tests with ports are now separate. It seems that Travis CI has failed because it times out and not because of the tests... Could you restart the build or something?. ",
    "gpietoso": "Still getting /home/travis/build/kriswallsmith/Buzz/lib/Middleware/ContentTypeMiddleware.php (phpdoc_annotation_without_dot) even though the exact line is correct in the commit.\nAny insights?. Curiosity: which RFC?. Seems so. By the way, after checking \"skipDetection\", couldn't all the other size/null validations be in one if statement using \"or\"?\nphp\nif (null === $streamSize || $streamSize >= $this->sizeLimit || 0 === $streamSize) \n{\n      return $next($request);\n}. Ok.. Ops, my distraction.. Travis output:\n--- Original\n+++ New\n@@ @@\n      \n-     *     @var bool $skip_detection True skip detection if stream size is bigger than $size_limit.\n+     *     @var bool $skip_detection true skip detection if stream size is bigger than $size_limit\n      *     @var int $size_limit size stream limit for which the detection as to be skipped.\n      * }\n      /\nIsn't in this line the period should be in? Its there :(. ",
    "n0n0n0n0": "sure, #342 . ",
    "MartinSadovy": "~It is impossible for Browser::submitForm (and others).~ Client (e.g. Curl) has default options, there is way how to do it.\nI will prepare it this week.. Unify it, because $client can be instance of BuzzClientInterface. If you use FileGetsContent as client, there is no way how to change CA file.. ",
    "carlosnewmusic": "\nhttps://github.com/kleiram/transmission-php/blob/1.0.0/composer.json#L14\n\nI know, that is installed but still gives error in your module. > \n\nThe library you refer to does not have the proper version constraints. Make sure you install another version of buzz and you will be fine. Try with 0.9.0\nWould it be something like that, no?\n\n. > Sure. Or just add something like that in your application\u2019s composer.json\nit keeps giving the same error\n\n. > \nTry a different version then. Try 0.15 or something between that and 0.9.\nI don\u2019t know that library you are using. Sorry :/\n\n\n\n\n. ",
    "creatissimo": "You are right .. We could use CurlClient instead.\nBut then we've and all others have to remember this and wouldn't it be consequent then to remove the fileGetContents client if curlClient should be used in any case?. ",
    "ondrejmirtes": "The problem is that with this regex, you\u2019re running level 6 basically, not\n7. Because of the unescaped |.\nOn Mon, 4 Feb 2019 at 19:55, Tobias Nyholm notifications@github.com wrote:\n\n@Nyholm commented on this pull request.\nIn phpstan.neon.dist\nhttps://github.com/kriswallsmith/Buzz/pull/376#discussion_r253597753:\n\npaths:\n     - lib\n\nignoreErrors:\n+    - '#Method Buzz\\Client\\MultiCurl::sendRequest() should return Psr\\Http\\Message\\ResponseInterface but returns Psr\\Http\\Message\\ResponseInterface|null#'\nYeah, I know it not perfect. I did work so I was happy with it =)\nIm happy to review a fix.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/kriswallsmith/Buzz/pull/376#discussion_r253597753,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAGZuBVIWmljJDEzaT68oytQZUijxM2Aks5vKIIJgaJpZM4afnml\n.\n-- \n\nOnd\u0159ej Mirtes\n. Nope, sorry, I don't feel like I'd add any value in adding \\\\ myself, I'm busy improving PHPStan itself :). Be careful here, this is a regexp, you need to escape the \\, the (, the ) and also |.. ",
    "dol": "It's in the POST section for (line 32)\n. I agree, makes more sense not to restrict the method. I thought the Message\\Request object is checking the method.\nRemoved the exception in my second commit.\n. Sorry, my fault. You are right. Reading is a serious issue.\n. ",
    "missinglink": "Tabs and spaces: sed -i 's/[ \\t]$//' /.php\nTrailing whitespace: perl -i.bak -pe 'if (defined $x && /\\S/) { print $x; $x = \"\"; } $x .= \"\\n\" x chomp; s/\\s_?$//; 1 while s/^(\\t_)    /$1\\t/; if (eof) { print \"\\n\"; $x = \"\"; }' /*.php\nref: http://stackoverflow.com/questions/5011630/how-to-clean-a-codebase-trailing-whitespace-new-lines-etc\n. ",
    "ged15": "why not just composer require \"kriswallsmith/buzz\"? Composer resolves the best version automatically.\n. http://blog.doh.ms/2014/10/13/installing-composer-packages/ :)\n. ditto\n. ",
    "nick-zh": "Ah ok perfect, sry must have missed it :)\nEDIT: ah silly me, doc is already for 1.0.0 thats why :smile: . "
}