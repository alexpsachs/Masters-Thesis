{
    "steipete": "Great, thanks!\n. Thanks. You need to give me access to your PSCollectionView branch so I can actually see the pull request :)\nAlso not sure if \"next run loop\" is a good idea. In 99% of all cases, it's more a cheap solution and backfires in the future. This already worked; maybe you just missed a [self layoutSubviews] ?\n. If scrollToItemAtIndexPath:atScrollPosition:animated wouldn't work, I would get quite some angry emails of PSPDFKit customers ;) So it definitely works; but if you don't call layoutSubviews the contentSize is 0 initially, thus no scrolling is possible.\n. great, thanks!\n. Oh yes, it was a last minute rename because someone created another PSCollectionView :/\n. I'll gonna do my best to keep this lib in sync with PSPDFKit. Extra namespacing the PSPDFKit-version is too painful.\n. PinterestLayout  - awesome! Can you add the MIT license of Peter Shih to all relevant files?\n. Then you should work in a branch and just re-submit fix #29 and submit the PintrestLayout once that is done.\n. I'm gonna close that one. Would be great if you could add a PintrestLayout example with a new pull request!\n. Great, thanks!\n. Daniel, thanks for that! \n. Interesting idea!\nI'm not quite sure if I should add that - this would be a feature not available in UICollectionView. (And we would also have to prefix the BlockClassHost class). \n@All: Any comments on that?\n. I believe it would be better if you would publish those categories in a separate repository. And possibly also with a variant for UICollectionView. This project has the focus of being highly compatible with UICollectionView - If I start taking custom modifications we loose that focus. Thanks for your pull request though, appreciate it!\n. Thanks!\n. Thanks for the pull request, appreciate it! Just fixed the other defaults.\n. Wow, thank you!\n. Thanks! Looks good! What was the reasoning on the second commit, where you moved the delegate setup away from awakeFromNib?\n. Perfect, thanks!\n. Hi Kent, thanks for the fixes! Great work!\nI've cherry-picked all changes except the merge commit to keep the history clean.\n. Thanks!\n. Thanks! I'll cherry-pick that one since there's a merge commit in there. (use git fast-forward to stop making those in the future)\nAnd I've reformatted the code a bit (I do { on the same line as the function name :)\n. Thanks! Merged c3caf71c9d3071e640579ac0a3d4b9b7fd93a317.\n. Thanks!\nMerge commits are getting messy now. I just took your changes and committed it as a fresh commit. Could you do a force-update on your side so we're at the same history for future changes?\n. awesome, thanks!\n. Thanks for the pull request!\nCareful! We cannot change the ivar layout - any additional ivars you need have to be implemented via associated objects. Can you update that? (else we'll break UICollectionView)\nthe addSubview/sendSubviewToBack can be combined to a insertSubview:atIndex call.\n. Hmm. I've just fixed the flow layout restoration - see how your implementation gets the touches too soon? I believe Apple uses a UITapGestureRecognizer - that one behaves nicely with a scrollview (doesn't select when we are trying to scroll).\n. Hmm. What's the default on delaysContentTouches for UICollectionView?\n. Thanks! All merged in. I've set delaysContentTouches to YES, so it's now like UICollectionView again.\n. Thanks!\n. Are you sure that this doesn't cause other layouts to fail? I've just recently changed this from left to justify.\n. Indeed. Keep in mind that Apple's UICollectionView doesn't expose the rowOrdering - they see this as an implementation detail. And there's quite a lot more logic involved than just left/justified.\n. How's the status on this? What should I merge? I'll gonna do a clean cut, since you also checked in lots of changes in PinchIt and NSLogs.\n. I'm closing this in favor of Issue #101 which should fix those issues (hopefully)\n. Thanks, that's a start :+1: \n. Thanks!\n. Great, thanks!\n. Wow, this is some seriously great work. Thank you!\n. Had to fix one small crash related to an indexPath, but now it works fine!\n. @BarryHaanstra can you make a pull request reverting 6b4dba5 and adding your change? I'll just wait for Beau G. Bolle to tell us what he thinks about it.\n. So, should be all working now! Thanks everyone for the code/feedback!\n. Ha, that probably wasn't discovered yet because dataSource/delegate are the same in the examples. Thanks!\n. Thanks, Kent!\n. Thanks, I already pushed that fix yesterday :)\n. I was talking about ddb32f6a9a5ed591c3c8cd7f4d1199321bc6c094.\n. Thank you!\n. Thanks!\n. Thanks!\n. Thanks! That one was long overdue :+1: \n. And I should test stuff before actually merging it, not afterwards :) Thanks for the quick fix!\n. Thanks! I'm still amused that it's that easy to break the scrollbar indicator :)\n. I'm all for more examples, they help quite a lot during development. Thanks!\n. Awesome, thanks for the code! I've reformatted it a bit to be more concise, but didn't changed any of the code itself. Keep up the great work!\nThe LineExample seems not perfect yet - but it's a good start!\n. Uh, this dreaded code again. Have you tested this with the other examples? Seems everytime we change something at this code, some other use case breaks.\n. Thanks for helping at this. I've pushed a small fix which rixes the CircleLayout example (although this shouldn't be effected by the flowLayout changes)\nCan you help with commenting the calculation code a bit more? This is some tricky code and needs more explanation, and it's been a while since I wrote the original code.\n. Thank you! Can you open a new pull request for those?\n. Thanks!\n. Thanks!\n. Thanks!\n. Thanks! I merged this manually to not get the merge commit (you can remove those with using git fast-forward merges)\n. Every little helps. Thx!\n. Some great changes in there, thanks! Can you fix that lne view gotcha? Then i'll merge it.\n. Thanks! \n. No problem... having a UICollectionView on AppKit is seriously exciting. :+1: \n. This change wasn't made by me - it was part of the bigger change that added animation support. Not sure either. Lets change it back and see if sth breaks.\n. This change was added in https://github.com/steipete/PSTCollectionView/pull/108. Hmm. Not sure If I fully understand what his problem is.\n. Thanks!\n. Both seems valid. Thanks!\n. You're referring to 70f9de5 only, right?\n. Done! Thanks!\n. Great, thanks!\n. Thanks!\n. Hi Christopher,\ni tried to model it closely to the original, but there sure are some shortcuts and differences - don't think there was any reasoning behind this, other then \"let's get this working\". So go ahead and update it to be more similar, I welcome the change!\n. Oh, totally missed that pull request. Thanks!\n. Thanks!\n. :+1: Thanks!\n. Thanks!\n. Thanks!\n. Wow, that's a great one! I've noticed that touch/highlight selection is quite complex in UICollectionView - this is a good step forward. Thanks!\n. correct, thanks!\n. Interesting fix - but we need to figure out another way or relay the delegate. I assume many UICollectionViewDelegate implementations also rely on the fact that UIScrollView events are also relayed - my code certainly does. \n. Looks right. It's annoying that we have to proxy the delegate, but I can't think of an easier way for now.\n. I'm honestly not quite sure about the fix in #117 since my use case didn't expose that bug. So lets merge this here. Thanks for your work!\n. Yes, seems like an oversight. Thanks.\n. Looks good! Thanks!\n. Thanks!\n. Looks really good, thanks!\n. Should we make that UIControl to be more generic?\n. Can you make that change? The I'm mergin' :) Thx!\n. Snowboardin' here :+1: \n. UICollectionViewCell indeed queries the view hierarchy - that's the same behavior as UITableViewCell. Not sure how it handles buttons though.\n. I think thats really a stntax complete \"typo\". Thanks!\n. Thanks!\n. Thanks!\n. Not sure if synthesizing right away is a good idea. Better query the rect where the cell should be from the layout.\n. Looking good, thanks!\n. Thanks!\n. Thanks!\n. Perfect, thanks!\n. Thanks! Looks good!\n. Thanks for the crash fix!\n. Does the latest commit fix your issue?\n. Thanks!\n. Glad to hear that :)\n. Thank you!\n. Perfect, thanks!\n. Thanks!\n. Thanks, i'll take it :+1: \n. Thanks! What are the other two changes about?\n. Would you mind spending some more time to getting this highlight fixes to work? Maybe also discuss this with @taiyangc \n. (Closing this, since I already cherry-picked d2e2a9a) \n. Perfect, thanks!\n. We should figure out why those changes were made in the first place. @Christopher-A?\n. Can you guys add a test case/project for that? Let's get this right, else the next pull request reverts the revert of the pull request :)\n. Well I can merge this but a test case from @Christopher-A and also from you @PhilipKram  would be ideal, so we can find a fix that works for both use cases.\n. @Christopher-A is now working at Apple. @PhilipKram can you provide a test case for this? (Simple example project)?\n. Is this still an issue with latest master?\n. Merged, thanks!\n. Ha, thanks for tracking that down.\n. One thing Sergey, can you please add a short prefix why that CATrransation is there? Else that's super confusing for future people who look at that code. Thanks!\n. Looks good - thanks!\n. Thanks!\n. Thanks again!\n. @taiyangc Do you have an ETA on that? Then I'll leave that pull request open for now.\n. Closing this since #245 fixes this as well. Thanks everyone!\n. Wonderful, thanks Sergey!\n. thx!\n. Great fix! Does the same code work in iOS6 UICollectionView? \n. Looks good, thanks David!\n. I'm curious about your solution and will definitely look into it if you can cook up a pull request. (Don't forget to prefix the delegate proxy)\n. Hey Scott, thanks so much, that looks great! I'll merge it. Can you create separate issues for the two issues above? NIB loading has probably less priority, but we should figure out the size calculations.\n. Just wanted to do a shout-out on Twitter to thank you, what's your account there?\n. This project is no longer supported. It was built for iOS 5.\n. Feel free to maintain this in a fork.\n(And poor soul having to write stuff for iOS 5, I don't envy you :)\n. Most awesome pull request ever! Thanks for fixing that horrible workaround!\n. rfc?\n. Sorry that it took me so long to review this, totally missed it the first time. Your fix looks correct, just tried this with your testcase (thanks!) and it works now.\n. Looks good, thanks! \n. Thanks Alexander, good work. Need to do some testing if this doesn't break anything. @gavrix recently worked on the previouslyVisibleViewsDict (before animations were even more trouble). Seems that we can get rid of that variable altogether now.\n. The examples definitely need some work, especially to better test the animation features - would appreciate any time you put into that.\n. Alex, could you rebase to latest master? No longer merges cleanly.\n. Great, thank you!\n. Hmmm.... so technically we're using private API here? Can you add a comment around this so that it's clear that there's no \"official\" way?\n. Looks all good to me - thanks!\n. :+1: \n. Looks great to me, thanks!\n. Thanks!!\n. Hi Julian,\nthanks for the pull request. Do I miss something or is transform3D now no longer used at all?\n. Oh,  badoo! :) Been at your party at NSConf 2013. that was fun!\nMost stuff here looks good. Looks like it won't merge right now, are you on master? Also please see my comments.\n. Daniel,\nthe pull request became very messy will all those merge commits, so I performed a manual sync. Please check with latest master if all works now and If I didn't forget anything. Thanks again for sharing your fixes!\n. Thanks! Will definitely do that! :)\n. Perfect, just had this issue in another pull request as well. Thanks!\n. Thanks a lot!\n. Thanks! \n. I see. This is basically a tradeoff to don't have this big section/item loop and instead calculate those manually when needed. Will merge, looks good!\n. Thanks for digging this up. Looking forward for any further performance tweaks.\nI know that UICollectionView also calculates the flow layout on the fly, but that seemed to annoying at the time I wrote it...\n. Ha, yes, it's sad that Apple chooses to now downport more fixes for UICollectionView. From what i've heard they fixed lots of issues already, but it all will come in iOS7 - and until we can drop iOS6 there'll be a lot time. So totally understand your reasoning of using PST instead.\nMy initial goal was simply to have the same API. PDF pages rarely have > 5000 items and for that speed wasn't the issue, so I haven't even used Instruments on this so far to make it faster. There are definitely some areas that can be tweaked or improved (especially the data class :)\n. Great, thanks!\n. Hi Alex, can you bring your fork up to master? Can't merge this right now.\n. Are you on latest master with your fork? Can't merge this. There's been some other change on the supplementary views.\n. But it's not up to date... you need to pull the latest changes, GitHub doesn't allow an automatic merge otherwise.\n. All merged via #324. Thanks!\n. All merged - sorry that it took so long.\n. Makes sense - thanks!\n. Thanks! Sorry that it took so long on merging, being really busy creating the next major version of PSPDFKit...\n. Thanks!\n. Ha, thanks!\n. Already fixed in master. Thanks!\n. Ah, good fix, thanks!\n. Not necessarily all quirks :)\n. Thanks, all merged. I've only taken the relevant part of your final commit (the autoreleasepool doesn't seem necessary)\n. So the only relevant commit is e4323d9aaab448d5b06be7585de7edb06f662fe5 here. Will cherry-pick. Thanks!\n. Both seems correct, thanks!\n. Thanks!\n. Great, thanks!\n. I'll merge some more fixes and then tag 1.1\n. All ready for the 1.1 release, can you update the remote pod?\n. Thanks!\n. Thanks!\n. I really hate this hack, but it's a workable solution and use otherwhere as well. Thanks!\n. Great, didn't know about RTLD_DEFAULT! Thanks!\n. Thanks!\n. Ha, that's why I casted it to int. Thanks!\n. Great, thanks!\n. Thanks!\n. We can't just omit that and then call self.view ;) this would give an endless loop.\n. We tried to replicate what UICollectionViewController does - even though it might look weird.\n. Hi, can't access GateGuru/ta-flights-ios#493 - can you make that public or copy over?\n. Hmmm - I really want to stay with fmax() - just add an import for tgmath.h to fix the 64 bit errors. MAX() is way inferior and can't deal with things like NaN.\n. Commit c1de4d2 seems good though! :+1: \n. merged.\n. Great - thanks!\n. Looks good, thanks!\n. Looks good to me. I'll merge this, but haven't actually tested it - I don't have any project with iOS 5 anymore. But I'll trust you on this - thanks!\n. Thanks!\n. Are you at WWDC btw?\n. Puh, this repo is sunsetted, I don't do pods anymore but will merge PRs.\n. Thanks, pushed and tagged!\n. Great analysts and change. And I thought the 200 byte buffer would be more than enough.\nAre you still supporting iOS 5?\n. Just pushed tw\u00f6 updates. One with your change, the second with the other open PRs included.\n. Thanks for the PR! This project basically isn't maintained anymore, and I can't justify adding new features that are not in UICollectionView - even if your PR is interesting. You can still maintain your own branch with the extra-features. Thanks for submitting this though - interesting!\n. Why was this commented out?\n. Could we conditionalize this? Simply commenting this out would break a lot of existing code.\n. Seems ok. Can you completely remove that exception line and add what you just wrote as comment? So we don't get puzzled about this in 5 months :)\n. I'm curious why this crashed in the first place. Was it called twice?\n. Are you using PSTCollectionView on iOS6 as well? This addition isn't in Apple's API and might be trouble. Isn't there another way to do this?\n. What's the point of this part?\n. ",
    "mbinna": "Will update pull request to remove commit a3a0a79.\n. You are right. The reason it was not working for me is probably a bug in my code that uses PSCollectionView. I will resolve this issue in my code first and then have a look if scrollToItemAtIndexPath:atScrollPosition:animated: works.\nI will also arrange that you can access the forked PSCollectionView to see future pull requests. Sorry for the inconvenience. ;-)\n. You were right. A call to layoutIfNeeded at the appropriate location made it work without scrolling only in the \"next run loop\". Thank you.\n. You now have access to moviepilot/PSCollectionView.\n. ",
    "ksuther": "I just realized I missed a PS -> PST conversion. I'm not sure how Xcode let me compile that...\nSending another pull request :)\n. ",
    "viking2009": "I'm new for Github collaboration\n- modified files:\n  PSBroView.\n  PSCollectionViewCell.\n- some code used in\n  ViewController.m\n  PinterestLayout.*\nIt's not real layout. Need more work (conform to MVC, extend dataSources, etc)\nEspecially height for cell calculation not implemented, fake height used\n. could you check my branch https://github.com/viking2009/PSTCollectionView/tree/PinterestLayout\nfor licensing issue?\nused AFNetworking for image download\nnot the best way for coding standards but it works\n. ",
    "scriptease": "Ok thanks for the answer, never mind :-)\n. ",
    "tapi": "Damn habit, tried to make sure I conformed to the existing style.\n. This is causing an issue for me when using KVO on the collectionView's properties. \nFor some reason the collectionView is getting released (havent found where yet)\n- I register as an observer in viewDidLoad ([self.collectionView addObserver:self forKeyPath:@\"contentSize\" options:NSKeyValueObservingOptionNew context:nil]; )\n- Sometime later collection view is being released\n- When dealloc is called I remove the observer ([self.collectionView removeObserver:self forKeyPath:@\"contentSize\"]; )\nPreviously this causes no issue as I end up sending an message to nil, with the lazy loaded collection view im removing myself as an observer for an object im not observing and the app crashes.\nEDIT:\nthe collectionView is not being released, we create an array of child controllers. Sometimes the children are deallocated without ever having triggered viewDidLoad:\n. I spotted the fragile bit friday after I had submitted and haven't had time to fix it. Are you still aiming for parity with UICollectionView quirks and all? \n. So should the Collection view controller lazy loading trigger viewDidLoad or not.\nNear as I can figure from stack traces UICollectionViewController adds the collectionView as a subview to it's view property during lazy loading which is triggering viewDidLoad. \nIt also appears a though the collectionView property is never the same as the view property when loaded from code, haven't tried xib loading yet.\nTrying to get this right cause the change to lazy loading really bit us.\n. That's cool, I added it because I was getting over released objects in my example app I was using which is weird considering it was using ARC.\nSent from my iPhone\n\nOn Jul 16, 2013, at 11:57 AM, Peter Steinberger notifications@github.com wrote:\nThanks, all merged. I've only taken the relevant part of your final commit (the autoreleasepool doesn't seem necessary)\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "rromanchuk": "[self.collectionView reloadItemsAtIndexPaths:[NSArray arrayWithObject:[NSIndexPath indexPathForItem:0 inSection:0]]];\nIsn't working in ios6 when 0,0 is a supplementary view like a header. Working fine in 5. \n. hmmm, my Supplementary header isn't working (ios5 only) when my nsfetchedresults returns 0 objects. Will investigate\n. duplicate #112\n. ",
    "inamiy": "OK. How about this fix?\n. Cell's touch response is too fast due to PSTCollectionViewCommonSetup\nwhich sets delaysContentTouches = NO as default.\nAccording to Apple's UIScrollView Reference, the default is YES.\n(By the way, you can also check by NSLogging that Apple doesn't use any other gesture recognizers both in collectionView & collectionViewCell)\nThe only left issue with regard to \"doesn't select when we are trying to scroll (=re-selects after touch cancelled then ended)\" can probably be solved by overriding UIScrollView's -handlePan: and update selection on UIGestureRecognizerStateEnded.\nBut since -handlePan: is a private method, I didn't want to do that :(\n. Same as UIScrollView. UICollectionView also returns YES on delaysContentTouches.\n. ",
    "aceisScope": "This only affects the last row, I suppose, which make sense to lay items from left to right, won't have chance to affect other rows. And for other problems caused by inset and itemSpacing, I guess still need to run more tests to find out why. This change is only the first step. If you've still got doubt, you might want to hold this request. I'll try to look deeper into it  tomorrow  (sorry, need to sleep now, already midnight...)\n. I suppose UsedItemCount may be not suggesting how many items in the last row, but how many items can be put into a row. Now it seems right for the last row, no matter what the miniItemInterstice or insetForSection is.\n. No worries. I've cleaned up all the logs and changes in PinchIt. Also return the alignment for last row to the original \"justify\" mode. Now the only change from your original source is line 97-107 in PSTGridLayoutRow.m, which is done to make interItemSpacing work better.\nIn other case, if a clean cut seems necessary, how about  git checkout source_branch <paths>..., then git commit merge-changes , to merge specific files? Maybe this could help avoid merging changes in examples into master branch.\n. btw, i think my last commit is a solution to issue#71\n. @taiyangc I'm totally okay with that, we just learn from each other's codes and make them better. It would be nice if your solution can fix both our issues and then @steipete won't need to check&merge for two pullrequest.\n. ",
    "BarryHaanstra": "Thanks for this fix!\nI had to fix one more thing to get it working in my project; I'm using the NSFetchedResultsController, which crashes if you feed it a normal NSIndexPath (the ones created with [NSIndexPath indexPathWithIndex:sectionIndex]).\nI changed the calls to [NSIndexPath indexPathForItem:0 inSection:sectionIndex]. This seems to work in my case, but I don't know if the zero is going to break something somewhere else...\n. I should really be thanking you for this awesome project! So... thanks! :)\n. ",
    "beaugbolle": "@steipete Good catch. Thanks.\n@BarryHaanstra Changing those to [NSIndexPath indexPathForItem:0 inSection:sectionIndex] should be fine. I wasn't sure which way to go there; now that there's a concrete example where it's necessary, the switch makes sense.\n. ",
    "hezi": "I'm still experiencing crashes with the fix in 6b4dba5d26cd5a57eaa175e3f6c95d514104b31e \nPlease have a look at lines 138, 179 and 226 of my commit. \nUsing [NSIndexPath indexPathWithIndex:sectionIndex] instead of [NSIndexPath indexPathForRow:0 inSection:sectionIndex] still causes crashes. \n. ",
    "orta": "Oh, and I fixed a typo in the readme\n. ",
    "gavrix": "Thanks man! When I started adding animations there was no support of MenuItems, so there might be problems with this as well, we need to check that.\n. you can close original issue #138 now\n. It seems like they do that intentionally, according to this stack trace\n\n. ",
    "taiyangc": "You're right. Out of all the examples:\n1. CircleLayout: I couldn't build this ... complains about PSTCollectionViewUpdateItem not found.\n2. LineLayout: Is not pixel perfect on either master or this fix, somehow related to animation and other alignment issues. But the fix did make it look a little nicer.\n3. SelectionDelegateExample: This one breaks my attempted fix. I realized UICollectionView's 'justify' justifies the centers of the items, not the inter-spacings.\nWill try again...\n. Tested on all examples again. Besides LineLayout's animation problems it shouldn't break anything (well let me know if it does). And I sort of just stole ideas from #69 ... I'm sorry @aceisScope ...\n. Hi @steipete sorry about the delay, I added more comments here would you check and merge?  https://github.com/taiyangc/PSTCollectionView/commit/cdcbbfff455eff4c3abf03f228041fe9efb53eab\nAnd @aceisScope please help us check if the current master has any more problems on your side. Thanks!\n. @larcus94 Try a UILabel :) It doesn't have any default highlighting behavior but you can explicitly print its highlighted value before and after. What prompted the isUserInteractionEnabled check was meant to cover cases like UIButton... I'm surprised it doesn't work. Could you double-check under the same code, iOS6 UICollectionView does not highlight your UIButtons?\n. That's what I thought until others proved me wrong (#175). Please check with the SelectionDelegateExample on how/when the UILabel within a cell gets highlighted.\n. @alextud Do you have a case that behaves differently in iOS6 UICollectionView? A simple description could help. You can also check with SelectionDelegateExample behavior output.\n. Sorry I am still confused. The setHighlighted method was intentionally overwritten to exhibit highlight behavior. What exactly is different? Screenshot comparison side by side would be appreciated.\n. Thanks! That's why I couldn't understand #220. It's the same issue. Should be a quick fix.\n. Good catch. In fact I am working on a larger fix that will address some more UICollectionView highlighting voodoo. I am testing some more edge cases before submitting a pull request @steipete.\n. @steipete Should have pushed that out yesterday but had a weekend trip. Tomorrow the latest.\n. ",
    "alvinsj": "ok changed\n. yea in landscape mode, convertRect:fromView will get the wrong value if we don't swap.\n. ",
    "jwilling": "Apologies, the way GH handles upstream pull requests is less than ideal. This wasn't meant to merge here \u2013\u00a0it was meant for a fork. Sorry!\n. @galaxas0 The development is on a brief hold right now as we are busy working on a different framework, but it will hopefully resume soon.\n. @galaxas0 At this time there are only three people working on the source, and we're keeping it closed until we think it's ready for a public beta.\n. ",
    "avaidyam": "@jwilling @indragiek What was the status on the mac port of PSTCollectionView? I can't seem to find its existence on the interwebs anymore...\n. Is there a way I can retrieve the latest updated version of its source? \n. ",
    "danthorpe": "Yeah, sorry, I'm referring to 70f9de5 only. The other commits are just merges from your master into our fork.\n. Hi @steipete, @DarthMike has cleaned up our commits, and hopefully addressed your comments. Lets me know what you think, or if there is anything else you want addressed.\nCheers!\n. Thanks Pete,\nI've updated our fork's master to upstream master, and will do further QA on this Monday and Tuesday. So, our next release should contain an up-to-date PSTCollectionView!\nAnd, please know, whenever you are next in London - you're more than welcome to come and visit our office. Friday's are the best days to drop in!\nCheers,\nDan\n. When deleting the \"newModel\" key is just and empty Data instance.....\n. Good point, will do.\n. ",
    "twentyforty": "@steipete \n. ",
    "jkubicek": "No, thank you!\n. ",
    "toco": "According to the documentation UICollectionViewDelegate conforms to UIScrollViewDelegate.\nIf we use the collectionView as a UIScrollViewDelegate we would have to forward all UIScrollViewDelegate calls to the PSTCollectionViewDelegate.\n. If the prefix is unchanged and some other library uses HTDelegateProxy we provoke name clashes:\nhttp://stackoverflow.com/questions/178434/what-is-the-best-way-to-solve-an-objective-c-namespace-collision\n. Why are you doing this?\n. Shouldn't setting -[UIScrollView alwaysBounceHorizontal] and [UIScrollView alwaysBounceVertical] to YES achieve the same?\n. ",
    "lono175": "Any thoughts?\n. ",
    "lbrndnr": "Yes that might be better. \n. Sure, I'll do it in the evening. Skiing right now ;)\n. Yeah I've meant snowboarding with \"skiing\" :) Well now that I'm looking at my code, I think it's the best to just skip highlighting the subviews since UIControl implements highlighting. Also I haven't observed a case where the subviews of a cell are highlighted with the cell at all. What do you think?\n. Of course it doesn't. A cell that was pressed shows a red cross button. It always appears pressed/highlighted using PSTCollectionView. I think it's redundant to highlight thw subviews. I've never observed this behavior. \n. So as I supposed, UICollectionViewCell does nothing but highlighting the backgroundView. You can see this examining this otx output.\nSo I suggest we just ditch the highlighting part except of adjusting the backgroundView to the current status.\n. Okay so I took a closer look to the highlighting behavior of the cells. \nIt does highlight all views in the contentView but UIButtons. It doesn't  take account of the userInteractionEnabled property. However, I don't whether the cell only skips UIButton classes. It might be possible that it omits other classes as well (e.g. UISwitch). What I know for sure is that the cell isn't supposed to highlight the contentView's subviews when it gets selected.\n. ",
    "loganmoseley": "The autoresizing mask is already FlexibleWidth | FlexibleHeight, so this particular setting didn't really matter. Alternatively, maybe it's supposed to be backgroundView.autoresizesSubviews = YES?\n. ",
    "cysp": "It looks like none of that actually needed to be conditional on having already created the cell.\n. Sure, I'll file those soon. I'm cyspio on twitter.\n. No, #265 did not fix this issue.\nThis commit https://github.com/cysp/PSTCollectionView/commit/44b6fe2036c9bf6a687ebabaceef25d4f2469dee is at least a step along the way though. @steipete any thoughts about the direction of this?\n. RFC!\n. Request for comment.\nI'm not certain about this solution but it appears to work for my purposes. (As evidenced by the testcase at https://github.com/cysp/PSTCollectionView/tree/testcase/decorationview-layout)\n. ",
    "thomasjoulin": "this seems to break for me : my footers just don't appear anymore (even at launch). Reverting the commit makes it work again. You can check it out here (based on project demo for issue #203, uncomment line 94, and comment lines 95-97 of PSTCollectionViewData\nhttps://www.dropbox.com/s/3l1pnsrwwqpw2b4/PSTCollectionViewIssue207.zip\n. Yes, indeed. Thanks!\n. ",
    "guykogus": "Thank you, Peter! This project has done a lot of people a lot of good.\n. How's that? :)\n. ",
    "Crabman": "Thanks a lot ! that were my 2 main Issues !\n. ",
    "alextud": "I didn't know how to include only the last commit in this \"Pull Request\". \nThose two changes were a quick fix for highlighted cell state to have same behaviour as the collection cell in iOS 6. But I didn't tested all the edge cases.\n. I will take a look in the following days.\n. When a cell is highlighted the 'selectedBackgroundView' is visible, and all it's subviews (UIImageViews) are set to highlighted state.\nFor the 'SelectionDelegateExample', the cell method - (void)setHighlighted:(BOOL)highlighted is overwritten. You can comment that method to see different behaviours from UICollectionView vs PSTCollectionView\n. True, but I'm talking about default behaviour in UICollectionViewCell, when you don't overwrite that method.\nSteps to reproduce on 'SelectionDelegateExample':\n1. comment  - (void)setHighlighted:(BOOL)highlighted method\n2. on iOS 6 - touch a cell for a couple of seconds ---> the selected background is visible, drag the scroll view --> selection will disapear.\n3. on iOS 5 do the same ---> the selected background is not visible.\n. ",
    "Christopher-A": "We were running into the opposite problem- layout attributes were being applied too late, essentially after the collectionView asks for the the cell/reusableview from the datasource. This was definitely an inconsistency with UICollectionView.\nI wonder if it could be both? the UICollectionView could technically try to apply layout attributes to the dequeued cell/reusableview and then if that failed (ie, there was nothing dequeued) then it would apply them after asking the delegate for it.\n. ",
    "PhilipKram": "At the project that i am working on, The SupplementaryView appears when the page is displayed. After that i reload (after the data is loaded) the SupplementaryView disappears. When i'm scrolling the page the SupplementaryView appears again (after the third page)\n. @steipete Any update on this issue?\n. I will check this, and update you asap.\n. ",
    "Macjon": "I just tested the change and it works perfectly. So is it possible to merge this to master?\n. ",
    "streeter": "This works for me. Though I have no idea why.\n. ",
    "sibljon": "That would certainly be simpler, but the UICollectionView's delegate must conform to UICollectionViewDelegate, UIScrollViewDelegate, and UICollectionViewDelegateFlowLayout.  Do you plan on implementing any UICollectionViewDelegate or UICollectionViewDelegateFlowLayout methods in PSTCollectionView in the future?  If not, your solution seems the best.\n. I just assumed your answer to my previous question is \"no\", and made the appropriate changes.\nSince I reverted the original commit, there are three commits.  Let me know if this is annoying, and I can remove the first two commits.\n. After discussing with a colleague, we're thinking this is not a good fix at all.  The commit I made here (0483d7d) would break any existing implementations the PSTCollectionView's delegate being self (in order for the existing implementations to work, they currently have to override all of the UIScrollViewDelegate methods).\nTo allow the PSTCollectionView to be its own delegate, we am planning on making a change in my fork to use a HTDelegateProxy (https://github.com/hoteltonight/HTDelegateProxy) as self.extVars.collectionViewDelegate and remove the UIScrollViewDelegate method forwarding from PSTCollectionView.  We're unsure how HTDelegateProxy handles the inout type, so this might not be a viable solution after all.\nAlso, I think we should revert efc4f9948db0a89435627bde32d2232efc04d020 (#242).\n. Sounds good.  Do you mean use the PST prefix on the delegate proxy?\n. Got it.  Will do.  Thanks!\nOn Wed, Mar 6, 2013 at 12:55 AM, toco notifications@github.com wrote:\n\nIf the prefix is unchanged and some other library uses HTDelegateProxy we\nprovoke name clashes:\nhttp://stackoverflow.com/questions/178434/what-is-the-best-way-to-solve-an-objective-c-namespace-collision\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/steipete/PSTCollectionView/pull/251#issuecomment-14488735\n.\n. \n",
    "alexanderedge": "Good question. I'll report back later today.\nAlex\nOn Friday, 1 March 2013, Peter Steinberger wrote:\n\nGreat fix! Does the same code work in iOS6 UICollectionView?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/steipete/PSTCollectionView/pull/248#issuecomment-14289311\n.\n\n\nAlexander Edge\niOS Developer\n+44 (0) 7732 077337\nhttp://www.alexedge.co.uk\n. It seems that performing the above snippet in viewDidLoad has the same behaviour with UICollectionView. Therefore, this fix isn't valid - closing.\n. One thing that I've noticed is that since the simple example sets images based on indexPath, when one deletes an item and redisplays the cell the image changes - not great to illustrate that an item has been deleted.\nPerhaps it might be better to create basic objects in the dataset which the cell could use to set, for example, colour.\nI don't mind doing that if you think that it's a good idea.\nAlex  \n\nAlexander Edge\niOS Developer\n+44 (0) 7732 077337\nhttp://www.alexedge.co.uk\nOn Thursday, 14 March 2013 at 17:14, Peter Steinberger wrote:\n\nThanks Alexander, good work. Need to do some testing if this doesn't break anything. @gavrix (https://github.com/gavrix) recently worked on the previouslyVisibleViewsDict (before animations were even more trouble). Seems that we can get rid of that variable altogether now.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/steipete/PSTCollectionView/pull/275#issuecomment-14915652).\n. @umairnow While I can't be sure that you have the same problem as the one that this pull request purports to fix, it sounds similar. You could download my fork and test that it a) doesn't break anything and b) fixes your issue\n. I've rebased accordingly.\n. Hi Pete, should be good to go now.\n. \n",
    "zengsq": "when I call reloadItemsAtIndexPaths: method, the decorationViews are added to collectionView again and again, any ideas how to solve this?\n. Yes, I know it is not supported any more, but our product still needs to support iOS5, :(\nI have found the root cause, and fix it successfully, maybe I should submit an update. \nthe fix is very simple, below method does not handle the DecorationView kind correctly:\n- (void)updateWithItems:(NSArray *)items\n. ",
    "fduch2k": "I were glad to help you fix this hack\n. ",
    "umairnow": "Hi,\nI am new to this library, can anyone tell me that is there any bug in deleteItemsAtIndexPaths: method, When I delete an item from center, it deletes that item but also deletes the last item.\n. ",
    "quake": "This pull resolve my similar issue, thank you @alexanderedge , @steipete could you help to merge it to master?\n. ",
    "rhult": "I've tested this patch in a project of mine and it fixes an issue of the same kind that I've been seeing and I haven't seen any regressions.\n. ",
    "advantis": "Yes, you're right. Comment added. \nAlternatively, to be extra safe, we could comment out the whole method body and mention somewhere in the wiki that \"you have to be brave enough and uncomment the -[PSTCollectionViewCell performSelectionSegue] implementation to use storyboard segues in iOS < 6.0\".\n. ",
    "emreozanalkan": "Today I downloaded the library and have same issue, my segues don't get triggered. Should I download another branch or something ?\n. ",
    "aburgel": "I added a test app based off the CircleLayout app. It runs random batches of inserts, moves, reloads, and deletes.\nIts not very well written and since its random, it can be hard to reproduce specific issues, so maybe its not all that useful ;-). But it does show the bugs, especially when you run it using Apple's code, which doesn't crash, but still shows some weird behavior.\n. ",
    "sneakyness": ":+1: \n. ",
    "jlnr": "@guykogus - Does this also work for your app?\n. It is still being applied to the layer: https://github.com/jlnr/PSTCollectionView/commit/3e41350a4e65d9cb5ba54f897ed8dc41ca9a877f#L0L61\n. ",
    "DarthMike": "Hi @steipete all is ready. Sorry about the bunch of commits. Have been doing this on two different computers and my test environments weren't exactly the same. Hope all is fine.\n. Hi last thing, I've seen that b28a081e2d probably fixes same thing on constructor.\n. After deleting cells in sections, when a section is deleted, this exception was thrown in an unreliable manner. The exception was triggered after deleting 2 sections. On endItemAnimations, an asssert calls that method, which caused a data reload from dataSource, making data inconsistent with current update, thus exception was thrown.\nOn endItemAnimations there are all necessary asserts to check data consistency, so I thought having an additional exception on this class (it's the only one) was unnecessary.\n. Makes perfect sense, will do that.\n. That's a hack on our side :) I'm removing it right now. @toco you are totally right. @steipete We will add this to our view setup code, not on PSTCollectionView\n. Related to previous comment. I'm removing it so it won't be a change anymore. We can do this on our view setup code, and can achieve the same [UIScrollView alwaysBounceHorizontal] and [UIScrollView alwaysBounceVertical]\n. ",
    "mattjgalloway": "@steipete Yeh, so basically without this speed-up, if you had a massive dataset, so tens of thousands of cells, then the NSArray you had for _globalItems, obviously, had tens of thousands of NSIndexPaths in it. indexOfObject: is O(n) so certain operations were incredibly slow on these huge datasets. This commit makes it O(1) instead.\nThat's just background anyway. As we find more things, we'll fix them like I say. For instance, PST is displaying our layout completely differently to UI at the moment! Not entirely sure why at the moment, but we're getting to the bottom of it.\nInterestingly (or probably not, actually!) we are using PST because UI has so many bugs in it (see my radars for them here - https://github.com/mattjgalloway/cocoabugs ). So we'll hopefully use PST even on iOS 6+ :-). Although obviously we hope those radars will be fixed in iOS !\n. ",
    "atreat": "I am on master in my fork. It was forked about a month ago.\n. ",
    "montreux": "Sure, the change was mostly what was done for 317 so I have the same comments as there.\nPSTCollectionViewLayout doesn't meet the UICollectionViewLayout contract for the methods:\n+ (instancetype)layoutAttributesForCellWithIndexPath:(NSIndexPath *)indexPath {\n+ (instancetype)layoutAttributesForSupplementaryViewOfKind:(NSString *)elementKind withIndexPath:(NSIndexPath *)indexPath \n+ (instancetype)layoutAttributesForDecorationViewOfKind:(NSString *)elementKind withIndexPath:(NSIndexPath *)indexPath\nA UICollectionViewLayoutAttributes class or subclass has representedElementKind and representedElementCategory properties and you have to use the methods above to create an instance. The user sets the kind and the library sets the category based on the method you called. When you read the representedElementKind property of the layout attributes it should match what you set it to. This is true for UICollectionViewLayout but not for PSTCollectionViewLayout. This results in a number of issues when you try to use decoration views, including the wrong classes being instantiated.\nThe fix is simply to meet the contract. The representedElementCategory is set based on which of the 3 methods you call. The representedElementKind is exactly was the user passes in. All other changes are side effects of this.\n. I don't believe I have added a new publicly visible variable. All that has changed is the internal representation of the representedElementKind and representedElementCategory properties.\n. Hi Peter, are you going to accept these changes? Is there anything more you need?\n. ",
    "Soph": "I've created a pull request on the cocoa pods spec repo for the 1.1.0 podspec: https://github.com/CocoaPods/Specs/pull/3010\n. ",
    "343max": ":)\n. ",
    "hfossli": "Barf!! Hahaha! You're totally right. \nAnyway, wouldn't it be better to move the code to viewDidLoad then? The reason I wanted to notice you about this is that I was experiencing weird behavior when calling loadView myself. So I was searching for every occurance in my project and this was one of them. \n. ",
    "Kurry": "This is related to this issue https://github.com/GateGuru/ta-flights-ios/issues/493\n. @steipete sorry pushed to wrong upstream branch. We removed it because we wanted it to behave more like a UITableView\n. ",
    "pkclsoft": "Thanks for that.  Glad to be of some help.\n. ",
    "floriankrueger": "any plans on releasing this change through cocoapods within the next hours?\n. damnit sorry, then just ignore it or flip a coin ^^--\nOn Thu, Jun 5, 2014 at 6:09 PM, Daren Desjardins notifications@github.com\nwrote:\n\nPR already exists here: https://github.com/steipete/PSTCollectionView/pull/400\nReply to this email directly or view it on GitHub:\nhttps://github.com/steipete/PSTCollectionView/pull/401#issuecomment-45239627\n. \n",
    "kejinlu": "I found that If set CLANG_ENABLE_MODULES to NO, also can solve the problem! \n. ",
    "DeepFriedTwinkie": "I guess this really won't work without a 'pod trunk push' really. I understand @steipete is no longer supporting this repo; so I certainly understand if the request is ignored.\n. ",
    "darend": "@steipete Do you own the podspec? Need to find someone capable of doing a pod trunk push: http://guides.cocoapods.org/making/getting-setup-with-trunk.html\n. PR already exists here: https://github.com/steipete/PSTCollectionView/pull/400\n. ",
    "ryanstew": "Thanks, and thanks for the quick response. Yeah, we're currently still supporting iOS 5 (and PSTCollectionView is high on the list of things that enables us to do so without much pain).\nIf possible, what's the easiest way to push an updated pod for this change? Would you prefer a follow-up pull request with a podspec update?\n. @devlvpw: Just to be clear, is the paranoid fallback code that was introduced in this PR working for you? That is, are you seeing a crash as was the original symptom of this issue, or just a failure to inject the PST versions of the control in 8.3?\n. ",
    "lvpengwei": "This problem reappears. iOS8.3 in 64bit....UICollectionView is larger than PSUICollectionView_.\n. @ryanstew There is no crash, but PST running in 8.3 just has some anomalies(the indexPath collectionView:didSelectItemAtIndexPath: was no correct in 8.3 64bit[5s/6/6p]) in my app, may be i using the wrong way. You'd better test your app.\n. ",
    "ba01ei": "Thanks. I can totally understand that.\n. ",
    "valdyr": "@toco Yes, you're right. This was a quick hack, will be fixed.\n. @toco Not required, will be removed.\n. "
}