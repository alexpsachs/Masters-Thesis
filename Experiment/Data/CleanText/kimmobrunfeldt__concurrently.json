{
    "kimmobrunfeldt": "I ended up using small tmux script to handle this: https://github.com/kimmobrunfeldt/busse-web/blob/master/tools/tmux \n. Done here: https://github.com/kimmobrunfeldt/concurrently/pull/43\n. Nothing we can do about this. NPM officially states: \n\nThat said, and taking into account everybody's feedback, I'm going to close this feature request now, because this isn't something that the team is going to have time to get to in the next 6-12 months. npm start / npm stop / npm restart are handy and convenient, but they're not substitutes for a dedicated process manager. If somebody wants to submit a patch that handles this behavior for both UNIXy systems and Windows, we'll land it, but the team isn't going to do it themselves. Thanks to everybody for their feedback!\n. Nice!! Thanks for reporting\n. I agree but at least for now, I prefer less characters in the name. If others find this as an issue, then reconsidering.\n. New release now deprecates the concurrent command. New recommendation is concurrently.\n. SIGINT is now passed to children: https://github.com/kimmobrunfeldt/concurrently/pull/43. Will be released as 3.0.0. \n\nFor now, you can test this by installing 3.0.0-dev version: npm i -g concurrently@3.0.0-dev.\n. Do you have ideas of how this could be fixed? \n. I guess this is related to the way we are piping stdout/stderr when using child_process.spawn function.\n. Yeah I will do a release in a moment after testing all new features.\n. Ok so the issue is now partly fixed in the newest release: https://github.com/kimmobrunfeldt/concurrently/releases/tag/2.0.0\nThe reason why this happens is explained in these Stack Overflow answers:\n- http://stackoverflow.com/questions/18825493/retaining-output-colors-when-shelling-out-to-node\n- http://stackoverflow.com/questions/9135579/node-js-spawn-with-colors\nThe new release fixes the problem so that --raw will use stdio: 'inherit' which makes the colors work. In   other cases you can use e.g. --color flag for the command to force it to use color output even though the stdout is a pipe instead of a tty.\nSummary, use one of:\n- concurrently --raw ...\n- concurrentl \"mycommand --color\" note: this is just e.g. chalk's convention to force coloring in output\n. Sorry, somehow I wasn't watching this repository and Github didn't send a notification about this PR.\n. I'll try to test and release this at some point.\n. I couldn't test this fix myself since I have just OS X available now, but released it anyway as 0.1.0 version . https://www.npmjs.com/package/concurrently\n. Now merged and released, sorry that it took so long. https://github.com/kimmobrunfeldt/concurrently/releases/tag/1.0.0\n. Thanks for the pull request, I especially enjoyed watching the screencast!\nWhile I like the refactoring in this PR, I'm not sold to the idea of handling race conditions with concurrently. This sounds like a bit hackish way to achieve reliable build pipe. I would suggest that instead of using --next-signal option, you should make the underlying commands to be safe of race-conditions. For example in a web project: \n1. Build task which makes sure the tasks are run sequentially. \n2. Watcher task which watches for file changes and runs the build task on changes. \n3. File serving task which just serves the files for browser\nThe you can use concurrently to run 2. and 3. tasks. \nI can't find the other library which is very similar to concurrently, but also provides --sequential option. I liked the API in that library. If we are adding sequential support for concurrently, I'd go with a new option like that instead of relying to finding strings from process' stdout. What do you think?\n. Here's the other library I was talking about: https://github.com/mysticatea/npm-run-all\n. Inactive. Closing.\n. Thanks for the PR, I've thought about this functionality at some point too.\nCould you format the code to be consistent with existing code? 4 space indentation etc. After that, this is ready to be merged.\n. Now merged and released, sorry that it took so long. https://github.com/kimmobrunfeldt/concurrently/releases/tag/1.0.0\n. The error seems to be happening inside eslint code, and it seems to be some file resolve/path problem. Not much I can do to this with this knowledge. \n. Ok that's not good. I'm afraid I don't have time to investigate in the near future. If you find the underlying issue, please post it here.\nIt might be simply that the CWD is incorrect when concurrently runs the eslint/karma.\n. @nkbt Did you find out what was the underlying issue here?\n. Closing because of inactivity.\n. That would be possible yeah. I'm not sure how much more informative the prefix becomes if instead of 0, you have client:0. Anyways, I'm happy to merge a pull request for this feature if someone wants to implement it. I would prefer this to be implemented so that the --prefix option would have to be one of these: index, pid, command, none, and in any other case, it would try to fill a template, where each of those values are given as variables. That would allow users to specify for example: --prefix \"client:{{index}}\"\n. This is possible in the new release: https://github.com/kimmobrunfeldt/concurrently/releases/tag/2.0.0\nFor example: concurrently --prefix \"client:{index}\" ..\n. Could you post the full stack trace or output of the error?\n. Closed because of lack of error details\n. I'm ready to accept a PR if someone implements this. Don't have time to do it currently.\n. This is possible in the new release: https://github.com/kimmobrunfeldt/concurrently/releases/tag/2.0.0\nYour example can be achieved with custom prefix:\nconcurrently --prefix \"[{time}] [{index}]\" \"start-dev\" \"..\"\n. Why did you close this? \n. Sorry this branch has now a few conflicts, I have been too late for merging this in. Could you rebase this branch with the new master?\n. All these issues should be fixed in master now.\n. These issues should be now fixed in 3.0.0-rc1. You can test by installing it: npm i -g concurrently@3.0.0-rc1. Please open a new issue to concurrently repo if this is not the case. I'll release the 3.0.0 soonish.\n. That's not possible currently. As a workaround you could create two shell scripts which make sure they are running in given directory\n. This is the same issue as this: https://github.com/kimmobrunfeldt/concurrently/issues/8\nIt's embarrassing that it has been around for a year now. It is a bug, but I haven't looked in to it. \n. Fix for this is released: https://github.com/kimmobrunfeldt/concurrently/releases/tag/2.0.0\nYou need to use --raw mode to get colors working.\n. I really appreciate the effort, but I ended up doing the support for this in another commit: https://github.com/kimmobrunfeldt/concurrently/commit/2c785cb9743bc643dab83cfa248573c79d5e1549 because it solved another issue too.\nI'm going to close this, but you will get a support for time stamps in next release.\n. How would you want the silent mode to work? Nothing to stdout or stderr? Or just silence stdout?\n. This is duplicate to #8. Let's continue there.\n. Fixed in new release: https://github.com/kimmobrunfeldt/concurrently/releases/tag/2.0.0\nSee issue #8 for the explanation.\n. Not possible in the current implementation. That --custom CLI argument seems also quite decent to me, if someone does a PR with this I can merge it. Otherwise I can look into this later.\n. Closing as this functionality is nowadays available thanks to @OlsonDev.\n. I thought to update it at somepoint and at latest when the concurrent will be dropped. Thanks for the notice :) I'll leave this open until fixed.\n. Fixed.\n. Sorry for taking so long to review this. Could you remove the version bump of concurrently in package.json? The bump is automated in my release process. Otherwise looks good.\n. Released as 2.1.0 https://github.com/kimmobrunfeldt/concurrently/releases/tag/2.1.0\n. What solved this issue?\n. Yeah this sucks and should be fixed. We should have all shell capabilities in the commands but haven't found a good way to do it well cross-platform. I'll try to peak what parallelshell does. If someone has a fix, I'll merge a PR.\n. Could you test if this has been fixed by installing 3.0.0-dev version: npm i -g concurrently@3.0.0-dev ? \nIt should be better now because it is using https://github.com/kimmobrunfeldt/spawn-default-shell for spawning shell.\n. What do you mean by \"is still incorrectly passing\"?\nTo me this behaviour seems to be correct:\nbash\n\u279c  concurrently git:(master) \u2717 concurrently 'echo 1 && exit 1' 'echo 2 && exit 2'\n[0] 1\n[1] 2\n[1] echo 2 && exit 2 exited with code 2\n[0] echo 1 && exit 1 exited with code 1\n\u279c  concurrently git:(master) \u2717 echo $?\n1\nconcurrently returns with exit code 1. \n. @rweng also now concurrently 'sleep 1 && echo hello' works fine:\nbash\n\u279c  concurrently git:(master) \u2717 concurrently 'sleep 1 && echo hello'\n[0] hello\n[0] sleep 1 && echo hello exited with code 0\n(with the dev version: npm i -g concurrently@3.0.0-dev)\n. Are you sure you uninstalled the old one and used 3.0.0-dev version? Also are you sure that your platform shell is compatible with those commands?(just making sure, I know that most probably it is compatible) Which OS are you running? E.g in Macs, spawn-default-shell will use the shell defined in SHELL env or /bin/bash -c \"...\" to run the given commands. I also made a test case for this - it passed on my Mac but I can double check on Travis CI too.\n. Ok I'll commit the test case to master later today too.\n. The test case is here https://github.com/kimmobrunfeldt/concurrently/blob/master/test/test-functional.js#L78 and it is passing in Travis: https://travis-ci.org/kimmobrunfeldt/concurrently\n. These issues should be now fixed in 3.0.0-rc1. You can test by installing it: npm i -g concurrently@3.0.0-rc1. Please open a new issue to concurrently repo if this is not the case. I'll release the 3.0.0 soonish.\n. I haven't used devtool, if you mean this: https://github.com/Jam3/devtool. Could you provide a short example how to reproduce the bug? Which version of concurrently are you using? \n. Inactive.\n. if someone has time to create a PR, I'll merge it. Sorry for the delayed response.\n. If someone wants to implement this, let's do the simpler way first and think about the fancy tricks later. I don't like the --0 and --1 that much as it complicates the usage.\n. Thanks for the addition!\n. Sorry but I don't understand how this is related to concurrently. Please provide more details. What version of concurrently are you running, what is the command etc?\n. Closing because of inactivity.\n. @qapi Do you mean this PR https://github.com/kimmobrunfeldt/concurrently/pull/39 ?\n\nOn 05 Jul 2016, at 19:22, Vedran Stankovic notifications@github.com wrote:\nUnfortunately this new PR breaks my CI script on Jenkins. Before I didn't had any problems but now process hangs on \"Sending SIGTERM to other processes...\"\nI will revert back to older version (2.1.0) but I guess this could be problem at some point in future... \ud83d\ude26\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Ok I'll look into this asap.\n. Which OS are you running jenkins on?\n. Also, see this issue: https://github.com/kimmobrunfeldt/concurrently/issues/4. It might be an npm problem too.\n. Closing because of inactivity. \n. If others could confirm this works, I can merge and release it. Sorry I don't have time to test it.\n. Now released as 2.2.0 https://github.com/kimmobrunfeldt/concurrently/releases/tag/2.2.0\nThanks for everyone\n. Looks otherwise good but this PR has now some conflicts after #39 was merged. Also, I would prefer the flag to be killTree instead of killAll\n. I recreated this functionality here: https://github.com/kimmobrunfeldt/concurrently/pull/58 but instead of having it a separate flag, I made it the default behvior. Thanks.\n. Hi, \n\nThis is happening because the underlying implementation how these are fed to the system shell is not very good. If you happen to know a good cross-platform library which would spawn \"the best\" available shell with support for piping etc, I'd be glad to start using it in concurrently.\n. Could you test if this has been fixed by installing 3.0.0-dev version: npm i -g concurrently@3.0.0-dev ? \nIt should be better now because it is using https://github.com/kimmobrunfeldt/spawn-default-shell for spawning shell.\n. These issues should be now fixed in 3.0.0-rc1. You can test by installing it: npm i -g concurrently@3.0.0-rc1. Please open a new issue to concurrently repo if this is not the case. I'll release the 3.0.0 soonish.\n. Thanks\n. Could you confirm that this works by installing 3.0.0-dev version: npm i -g concurrently@3.0.0-dev ? \n. Looks good to me, anything to consider before releasing?\n. Could you test if this has been fixed by installing 3.0.0-dev version: npm i -g concurrently@3.0.0-dev ? \n. I appreciate the effort but why have two CI setups in the same repository? There is already Travis CI running tests.\n. Oh ok, cool! Thanks for the PR. \n. I like the idea, but I'm not sure if concurrently would be the best place to build this functionality. Open to hear others' comments.\n. Thanks!\n. I agree this could be useful. I'm open to a PR for this.\n. This isn't so easy because to preserve original colors output by webpack, we need to directly pipe webpack stdout without modifying it in between.\nI'm open to a separate --no-colors flag if someone figures out how to preserve the original colors and modify the output. Last time when I investigated this, I couldn't find a reliable way for it. \n. Meanwhile you can try to find if webpack has a --color flag which forces it to use colors in output and remove the --raw attribute. See: https://github.com/kimmobrunfeldt/concurrently/issues/8#issuecomment-184901271\n. Concurrently is using cross-spawn library to run the commands, apparently it doesn't know how to run ts or ./bin/www: https://github.com/kimmobrunfeldt/concurrently/blob/master/src/main.js#L10\nThe command running has been an issue all the time. I'm happy to accept a PR which would use a better library than cross-spawn.\nbtw, I'm currently on my vacation so I don't have time to maintain this repository that much.\n. I missed this bug when reading the issue for the first time. If commands are only partially parsed, that's a very bad bug. Could you test this with 3.0.0-dev version with npm i concurrently@3.0.0-dev\n. These issues should be now fixed in 3.0.0-rc1. npm i -g concurrently@3.0.0-rc1. Please open a new issue to concurrently repo if this is not the case. I'll release the 3.0.0 soonish.\n. Hi @gustavohenke! Sounds awesome. I've been very inactive in Github for the last few months, sorry for the late response.\nI added you as a member now.. @filipesilva Added you as a contributor. . @filipesilva What is your NPM account so I could add you as a contributor there too?\n. Added you both as collaborators to https://github.com/kimmobrunfeldt/spawn-default-shell repo too. It's very closely tied to concurrently. Good question, I thought environment variables would be available in the commands. This should be fixed.\n. Could you test if this has been fixed by installing 3.0.0-dev version: npm i -g concurrently@3.0.0-dev ? \nIt should be better now because it is using https://github.com/kimmobrunfeldt/spawn-default-shell for spawning shell. At least simple echo worked for me.\n. These issues should be now fixed in 3.0.0-rc1. You can test by installing it: npm i -g concurrently@3.0.0-rc1. Please open a new issue to concurrently repo if this is not the case. I'll release the 3.0.0 soonish.\n. Thanks, however please add this example to here too: https://github.com/kimmobrunfeldt/concurrently/blob/e6274c5d5be32bc4a5f7b3cab6e5358545839e39/src/main.js#L126\nand then I can merge it.\n. Ok I added an example of this by myself. Thank you anyways for the PR. \ud83d\ude47\n. Would this work for you: concurrently \"cd foo && ncu -a\" \"cd bar && ncu -a\" \"cd baz && ncu -a\"?\n. Closing because of inactivity. The above solution should work.\n. Good idea. I'm open for a PR.\n. Accidentally used the old version. Fixed in concurrently@3.0.0-rc1\n. Which terminal are you using? What are your SHELL and COMSPEC environment variables? This module is now used for the shell spawning: https://github.com/kimmobrunfeldt/spawn-default-shell\n. Ah ok so it seems that /usr/bin/bash /c command is being run. For now you can fix it by either reverting back to concurrently@2.2.0 version or setting SHELL_EXECUTE_FLAG =-c environment variable manually. On windows platform the default flag is /c even though. \nIt should be changed to decide the execution flag based on shell, not platform.\n. I created this issue here: https://github.com/kimmobrunfeldt/spawn-default-shell/issues/1 and will fix it pretty soon.\n. This should be now fixed in 3.1.0: https://github.com/kimmobrunfeldt/concurrently/releases/tag/3.1.0\n. Sounds like a problem with PATH. Could you run\nbash\nnpm i spawn-default-shell && node -e \"console.log(require('spawn-default-shell/src/get-shell')())\"\nand paste the last line of the output here? That will tell which shell concurrently is spawning to get forward with this. It may be that the spawned shell doesn't read configuration from .bash_profile or similar env files.\n. Ok I have the same shell, and I can correctly use the node version but I'm using nvm. Could you run concurrently 'which node && node -v' and concurrently 'echo $PATH'. You could then try to resolve why the spawned shell is using the wrong node binary.\n. For me theses commands return:\n\u279c  ~ concurrently 'which node && node -v'\n[0] /Users/kbru/.nvm/versions/node/v6.3.1/bin/node\n[0] v6.3.1\n[0] which node && node -v exited with code 0\n\u279c  ~ concurrently 'echo $PATH'\n[0] /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/Users/kbru/.gem/bin:/Applications/Postgres.app/Contents/Versions/latest/bin:/Users/kbru/.nvm/versions/node/v6.3.1/bin:/Users/kbru/.rvm/bin\n[0] echo $PATH exited with code 0\n. Ok thanks for reporting this bug. It seems that when we are running commands with /bin/zsh -c \"...\", profile files are not read. If anyone knows a flag to enable the profile file reading, I'm interested to know.\n. Ok found it from man bash, we need to invoke the shells as a login shell (use -l flag). Read more from https://github.com/kimmobrunfeldt/spawn-default-shell README.\n. @aaronjensen Ok this is now fixed in spawn-default-shell, it will by default use -l flag when running shell. E.g. with bash: /bin/bash -l -c \"...\". This will invoke bash as a login shell and it will execute ~/.bash_profile before running the command. With zsh the same flag will read ~/.zprofile correctly. \nTo my mind this is the expected behaviour of concurrently, but could there be some unwanted side-effects? Should I make the -l flag default in concurrently, or should it be an optional flag(e.g. --invoke-login-shell) for concurrently?\n. @aaronjensen I'm not sure if I understand what you mean. Concurrently does already share the environment as well as possible. Running concurrently \"x\" in your current shell is from environment variable perspective same as running bash -c \"x\". I think PATH is an exception to this and running bash -c \"x\" some how resets the PATH variable, but e.g. the env variables set by your CI are available at that new shell.\nI don't know any better way to \"use a shell that shares the same exact environment as the shell running it.\" than the current solution. If you have an idea please share.\n\nIn short, concurrently should behave as running bash -c ... or zsh -c ... from an existing shell. It should not have its environment reset at all.\n\nThere is no special \"reset\" done by concurrently or spawn-default-shell. So it is as close to running these commands from an existing shell as possible. It's just the way bash -c ... and others work. E.g. see this output:\n``` bash\n\u279c  ~ bash -c \"nvm\"\nbash: nvm: command not found\n\u279c  ~ nvm\nNode Version Manager\n...\n```\nnvm is available in my \"normal\" shell, but not when using bash -c \"nvm\". The only way I know to fix this is to use bash -l -c \"nvm\", which correctly reads my .bashrc and makes nvm available.\n. Thanks for reporting. This seems to be the same issue as https://github.com/kimmobrunfeldt/concurrently/issues/60. Let's continue the discussion there. \n. Thanks for sharing!\n. Thanks for the effort! \nDo you think package.json is the correct place for this information? Most projects are using an .projectrc file to store this information.\n. Which version of NPM are you using? Have you seen this issue https://github.com/kimmobrunfeldt/concurrently/issues/4\n. Can you upgrade to version 3.1.0 and try again?\n. 3.0.0 changed the way shells are spawned to allow more flexibility. Check https://github.com/kimmobrunfeldt/spawn-default-shell#spawn-default-shell README for more how it is spawned. It seems that somehow this detection code: https://github.com/kimmobrunfeldt/spawn-default-shell/blob/master/src/get-shell.js#L11 thinks that your shell is indeed /bin/bash but it's not. \nYou can override this by setting a SHELL=/bin/bash and SHELL_EXECUTE_FLAGS=-l -c (execute flag must be last) environment variables\n. I debugged this in a virtual machine. See this issue for more details: https://github.com/kimmobrunfeldt/spawn-default-shell/issues/5.\nTemporary workaround for now is to use SHELL=bash concurrently <arguments>.\n. Could you provide an example what is incorrect behaviour and how this fixes it? I might be just too tired but I didn't yet get the problem this PR solves, thanks.. Can you try manually setting export SHELL_EXECUTE_FLAG=-l -c ? Sounds like a bug if the flags are not decided based on the shell. Good improvement, thanks. I've been defaulting to Bluebird promises for a while and I use it as a habit sometimes for no benefits.. Thanks for the fix.. ",
    "elliottsj": ":+1: Also seeing messy output\n. ",
    "aecz": "I rewrote the logWithPrefix function to have a cleaner output (almost the same as without concurrently).\nBasically, you need to have lastChar variable available outside of the function so you know if you are a at the beginning of a new line or not. This covers most of the edge cases when the stdout moves the cursor or delete characters.\n``` javascript\nvar lastChar;\nfunction logWithPrefix(prefix, prefixColor, text, color) {\n if (config.raw) {  \n    process.stdout.write(text);\n    return;\n}\n\ntext = text.replace(/\\u2026/g,'...'); // Ellipsis\n\nvar lines = text.split('\\n');\n// Do not bgColor trailing space\nvar coloredPrefix = colorText(prefix.replace(/ $/, ''), prefixColor) + ' ';\nvar paddedLines = _.map(lines, function(line, index) {\n    var coloredLine = color ? colorText(line, color) : line;\n    if (index !== 0 && index !== (lines.length - 1)) {\n        coloredLine = coloredPrefix + coloredLine;\n    }\n    return coloredLine;\n});\n\nif (!lastChar || lastChar == '\\n' ){\n    process.stdout.write(coloredPrefix);\n}\n\nlastChar = text[text.length - 1];\n\nprocess.stdout.write(paddedLines.join('\\n'));\n\n}\n. Sorry, didnt link the PR. Here it is #70 \nI included a repo and command lines to reproduce.. If child process uses chalk, just set FORCE_COLOR=1 (using cross-env for example).\nAlso you can set NPM_CONFIG_COLOR=always.\nConcurrently could set those variables automatically. Adding a flag --force-colors would be nice.\n. Here is some steps to reproduce the issue:\ngit clone https://github.com/callemall/material-ui-webpack-example.git\ncd material-ui-webpack-example\nnpm i\nnpm i concurrently\nnode_modules/.bin/concurrently \"npm start\"\n``\nComparing the output with \"npm start\", we can see that many lines are not cleared but added. This is due to manually adding a line break to stdout when we should instead let the process add them.. Please check the issues, there is already an issue about this #2 and a PR #70 which is 3 months old by the way and no new comments :(. With the--rawoption you do not get theprefixes `so no way of knowing which command wrote each line which almost defeats the purpose of using this package.\nPR #70 solves this issue for non raw mode and #2 or this issue should be marked as duplicate.. @wesamco Did you try with #70 ? It is merged but not yet released and should fix the output. If yes, please provide more info to reproduce.. @fernandosouza please post your steps to reproduce. You have an example in #70.. ",
    "JuanCaicedo": "Has this been fixed, perhaps by the move to node v4? I'm running the latest version of concurrently on node v4.4.5 and don't experience this.\n@kimmobrunfeldt @elliottsj what commands were you running? Just wondering if I can repro. I think @kimmobrunfeldt's thought is that concurrently shouldn't be node specific in usage? I agree with that, but I also think it could be possible to implement this in a more abstract way that would be useful regardless of what you're running. GNU parallel uses a syntax like \nbash\nparallel npm run ::: task-1 task-2\nMaybe what concurrently could do is something like\nbash\nconcurrently --command \"npm run\" -p task-1 task-2\n--command isn't a very good name, open to suggestions \ud83d\ude04 . Bluebird is great, but I agree that it's probably not needed right now. Wondering if anyone has any thoughts on this? I'm willing to make a PR, but want to make sure it would be a feature that would get accepted \ud83d\ude03 . Also, the build is currently failing because it is testing node v0.12, which doesn't support arrow functions, which are used in test/test-functional.js. Tests are failing because of node v0.12, mentioned in https://github.com/kimmobrunfeldt/concurrently/issues/76. Does the bug maybe have to do with the fact that merge is also used on line 280? If I try changing that use concat though, all output of later commands gets swallowed. My current thought right now is that this has to do with RX not handling back pressure out of the box. Here is a link with more information. @gustavohenke thanks for your work, excited to see this project moving forward! Yes, that's what I mean . @gustavohenke I have a some more time over these next few weeks to work on this, I'll take another stab at it \ud83d\ude03 . @alerkesi Do you want to prototype an approach like @gustavohenke mentioned above? Or if you can think of a different way to do it, that would be good too (I'm also not too experienced with Rx). Travis is passing with the exclusion of node v0.12, like a few other PRs. I mentioned this in https://github.com/kimmobrunfeldt/concurrently/issues/76. \nThis PR looks good \ud83d\ude03 . Though the config is available as a global, I chose to pass it as a parameter to this new function. I prefer this style, but I'm open to changing it. ",
    "gustavohenke": "Sorry for the delay on releasing this, folks! Check v3.5.1 \ud83d\udea2 . Hi @thaggie and @MadLittleMods, I reviewed both PRs.\nI'll place my thoughts here as well: isn't it better if we skip any option, and simply pass arguments through if we find --?\nHowever, if you have examples of programs that work similarly, we could review the need of such option.. So isn't it better if you directly specify those args for the process that will use it?. It isn't released yet @shtanton . Well, that's now possible since v3.6.0, thanks to amazing efforts by @pgraham!\nconcurrently npm:watch-js npm:watch-css npm:server. Implemented by #100. Hey guys, check #86 for some context on how this was fixed.. Published v3.2.0!. @swjain @jens-duttke can you guys please try v4, and open a new issue with more details?\nI'm afraid that that problem happens because Windows doesn't support single quotes.. Hi!\nIt looks like it's been a while since you first posted this.\nSo, finally! I'm raising my hand \ud83d\udd90 \nI'm readily available to help you by triaging issues and reviewing/accepting PRs.\nI'm usually able to find some hours every week to push some new code, too.\nThis is basically how I'm operating at ctavan/express-validator, which I have been happily maintaining.\nSomething about my background is available at my profile here and at npm \ud83d\ude01 . Thanks!. \ud83c\udf89 since Kimmo added another (very) active OSS contributor, I'll close this issue!. Published v3.3.0.\nCould you try it, @aaronjensen?. Due to no interaction at all in the last 2 years... I'm closing this issue, but feel free to open a new one!. I think that the best of both worlds would be to use something like rc + package.json, so one could provide configs via:\n\nCLI args\nEnvironment variables\nlocal .concurrentlyrc file\n.concurrentlyrc file in your home directory\npackage.json\netc.. Since this PR is now very outdated (the codebase was completely rewritten), it can be discarded without further considerations.\n\nNew attempts to build this configuration loading will likely use Yargs' built-in features, eg\n- http://yargs.js.org/docs/#api-configkey-description-parsefn\n- http://yargs.js.org/docs/#api-pkgconfkey-cwd. Published v3.2.0!. Codebase changed significantly and this PR has been inactive for a good time. \nI'm closing it; feel free to open an issue to discuss the approach before starting over.. Published v3.3.0 with the fix by @kentcdodds.\nCould you try it, @rdettai, @phsstory?. Sure! I should have done this before. v3.5.1 is on its way! \ud83d\udea2 . I fixed the problem of node 0.12 tests with #83.\nAlso, as stated in the npm docs link you posted, engines will not really \"enforce\" anything by default, it'll only warn you that you're using incorrect node version:\n\nNote that, unless the user has set the engine-strict config flag, this field is advisory only.`\n\nAnyway, I'll add this flag to our package.json.. Published v3.2.0!. Hi @JuanCaicedo!\nOur tests are indeed using this function called run, but it's just a wrapper to use some defaults when dealing with the child_process module. Every test spawns src/main.js passing different CLI args, eg:\njs\nreturn run('node ./src/main.js \"echo test\" \"nosuchcmd\" \"echo test\"')...\nThis is because concurrently can't be used if it's not as a CLI program.. Hi @JuanCaicedo! Thanks for this PR. As you may have noted, I'm getting started here as a maintainer :)\nThe node v0.12 build problem was fixed. If you push something new, the status will be green.\nRegarding the tests for this feature... if you could emulate the example given at #75, I guess it would be enough.\nAnd what do you mean by the output being \"swallowed\"? Does this means it will never show up?. Okay, so I might have found a way to fix that problem.\nA process with index i needs to buffer until all processes from index 0 to i (inclusive) close.\nThis means:\n- Process 0 buffers until 0 closes;\n- Process 1 buffers until 0 and 1 close;\n- Process 2 buffers until 0, 1 and 2 close;\n- ...and so on.\nPossible with some wise usage of buffer operator together with the close streams.. Of course, there may be easier/simpler ways. I'm not a heavy user of Rx.... Hi @HansHammel! Have you tried using concurrently@v3.3.0?\nWe changed the underlying dependency used to spawn commands.\nUsing it, the process exited with 0 on Ctrl + C (I tried the same code as you on my Windows 10 system).\nRegarding SIGTERM and Windows, v3.3.0 got exit code 1 too \ud83d\ude22 . Hi @karimsa!\nNode exits with null code when it receives SIGTERM/SIGKILL, etc.\nAFAIK, there's nothing we can do about it.\nTherefore, concurrently will exit with code 1, as one of your processes exited without success.\nYou can control this behavior with the (rather limited) --success flag.. Update 1.5 years later: this will be fixed on v4. \ud83d\ude42 . (which has just been released, of course).. Since #83 dropped support for node v0.12, I'll accept this PR, no need to worry about if it's working in that old version!. Published v3.2.0!. Just to be clear: I think it's better if we always pass the args to all processes.\nHowever, if you have examples of programs that work similarly, we could review the need of such option.. Hmm, if I'm not mistaken, Webpack is using the readline module for this.\nWe'll need to find a way to work with this module, perhaps flagging each process as \"readline\"-able.... Sorry for the delay on releasing this, folks! Check v3.5.1 \ud83d\udea2 . Hi @kentcdodds! Thanks for the report.\nAfter some research, I think that this is a standard behavior of Node itself.\nSee:\n- http://stackoverflow.com/questions/18825493/retaining-output-colors-when-shelling-out-to-node\n- http://stackoverflow.com/questions/7725809/preserve-color-when-executing-child-process-spawn\nYou can, however, use the --raw flag. Under the hoods, the behavior of --raw is to simply use stdio: \"inherit\", when spawning the child process.\nI was able to always retain the colors when using it, even though the output is less cooler :). Hmm, yes, this makes more sense \ud83d\ude01 \nbtw, I just  checked the other issues, and... #49 is a duplicate, and this exact solution has been proposed there.\nI think it's better if we don't force colors everytime.\nInstead, we should test whether colors are supported by the terminal running concurrently in order to set FORCE_COLOR env.\nThis way we can avoid strange ASCII chars in some cases.. Exactly what I thought \ud83d\udc4d \nIf you have the time to send such PR, please go ahead.\nOtherwise I'll do it later and push a new version.. Published v3.2.0!. Yeah, it seems like a problem with the upgrade:  https://gitlab.com/gustavohenke/test2/builds/10175508#down-build-trace. Do you have more details on the second error? How should I reproduce it?. Published v3.3.0.\nCan you try it, @Maistho?. What a shame that Kimmo won't be eating his own dog food anymore :(. Published v3.3.0!. Published v3.3.0.\nCan you guys try it?. What's your reason to want that?\nTalking about features, I would always prefer spawn-default-shell over spawn-command.\nBut I'm having a hard time to accept that we'll have fewer headaches in the long run by sticking to a simpler dependency like spawn-command.. Hi @kentcdodds, while adapting #64, I started reflecting on your solution, and I found some problems.\nBecause we subscribe to the close stream (with a one second delay) inside of the close stream, killing other processes will only take effect after the 2nd process closes.\nHere are some options for us now:\n1. Set up a naive setTimeout timer instead of using RxJS (kill delay functionality is kept)\n1. Remove kill delay completely, so no further headaches around this\n1. Figure out the real reason behind null exit code, and fix it considering the code before this PR.. > I can't think of any use cases for delay\nThe comments in the code speak about exiting cleanly. The only reference about it is a comment on #7.\n\nThe reason is because that's the exit code when a process has been closed with SIGTERM\n\nFrom what you mentioned here, I understand that SIGTERM will result in processes exiting with code null.\nIs that correct?. Ah, cool. I finally discovered that this is documented behavior, but probably only on Unix machines - I own a Windows PC, and always get exit code 1.... I forgot to notify you, @kentcdodds... v3.4.0 is published \ud83d\ude09 . Why not? \ud83d\ude03 . @jseminck sure, go ahead!. @RichDonnellan @jeremejevs @enaeseth this was just published as v3.5.0.\nI'm so sorry for taking this long to publish, folks!. Given the codebase has changed significantly and this PR didn't see any activity in the last 1.5 years, I'm closing it.. Yep. This would be a great addition \ud83d\udc4d . Programmatic API now available with v4.0.0! \ud83d\udea2 . Since this PR is now very outdated (the codebase was completely rewritten), it can be discarded without further considerations.\nNew attempts to build this configuration loading will likely use Yargs' built-in features, eg\n- http://yargs.js.org/docs/#api-configkey-description-parsefn\n- http://yargs.js.org/docs/#api-pkgconfkey-cwd. Perhaps like this?\nconcurrently --kill-others-on-fail \"echo foo\" \"echo bar\" || echo \"someone died\". Okay. If you want to try to tackle this, please go ahead!. Great that you found a solution, @Maistho.\nBut if there's something feasible we could do on our side, it would be great to let us know.\nBy the way, you could try concurrently v3.2 or older; they used another dependency to spawn commands: spawn-default-shell. I'll need you to expand this issue a little bit.\n- What OS are you using?\n- What your foo.js file looks like?\n- Are you running it simply concurrently \"node foo.js\", or are there any other flags involved?. Heya @kolodny,\nSorry for this looong delay. I think v4 solved this (at least I tried on a Windows VM, and I couldn't reproduce it anymore).\nPlease try it and open a new issue otherwise!. @filipesilva, do you have any ideas?\nI like the combination of CLI args + package.json or .concurrentlyrc.\nIn the past, I liked the idea of using rc, but it adds a configuration surface area that is too large.. Something like bgGreen.black?. You'll inevitably have concurrency problems here, because you're telling your OS to run delsrc and makesrc at the same time. One of them may \"win\" and actually do its task.\nYou should probably look into not using concurrently for this.\nFor example, npm run delsrc && npm run makesrc should be enough.\nI'm not sure however if this syntax works on Windows by default \ud83d\ude10 . Thanks!!. Hello folks! I'm sorry for taking this long to reply \ud83d\ude0a \nAny commands that are killed via signals will exit with code null; this is Node's behaviour and we can't change it. Perhaps we could log the right thing instead.. Since this issue saw no further comments, I'm closing it.\nLet me know in case you think we still can reach consensus, so I can reopen it.. @peterjwest you can control such behaviour with --success arg.. Thanks!. Hello folks,\nSorry for not looking at this before. We now have a programmatic API built into concurrently. See v4 changelog for the details.\nWhile this PR was heading towards the right direction, it still had a huge gap in terms of what I would consider necessary for folks that would like to contribute more to this project... me included \ud83d\ude05 \nPlease feel free to port any missing features to the new codebase, though!\n. Hi @jrmcdona, can you please isolate this issue into a repository I could look into, please?. Yes, we are currently doing nothing to the stdin pipe of the child processes.\nIf you use --raw, however, stdin will work.. @rotexhawk it's not a nodemon flag, it's a concurrently one.\nAlso make sure to check #128, it will bring stdin handling.. Can you provide an example that doesn't work?\nI tried with some project of my own, using the same env as you, and I saw no issues at all.. Can you try reinstalling concurrently? It seems like something broke its dependencies chain.. Hi @derickkemp, thanks for letting us know.\nI'll check such behaviour in a Windows machine as soon as possible and post any updates here.. @derickkemp - have you got any news?\nUnfortunately I haven't organised my time to test this in a VM :(. Given no one commented on this issue for the past year, I'm closing it (yes, I'm also guilty of it).\nIf you still find these bugs while using concurrently, please open a new issue providing a self-enclosed example.\nThanks!. Hello folks, I'm so sorry I'm replying so late!\nCan any of you isolate the problem somehow, using simple commands that don't require installing anything apart from node/npm packages?\nI couldn't replicate it on a Windows 10 VM with Node 8/10.. Thanks @kingluddite, so you no longer have issues while using v4?. Unfortunately, concurrently does nothing to the processes' stdin.\nThat's why typing rs won't work - it's never sent to the nodemon process!. Released, finally \ud83d\ude4c install v3.6.0 now to get this and other goodness!. \u261d\ufe0f also if you have another point of view, let me know!. Since this PR is now very outdated (the codebase was completely rewritten), it can be discarded without further considerations.\nNew attempts to build this configuration loading will likely use Yargs' built-in features, eg\n- http://yargs.js.org/docs/#api-configkey-description-parsefn\n- http://yargs.js.org/docs/#api-pkgconfkey-cwd. Hey @PowerSupply, your suggestion makes sense.\nI'm labelling this issue as an enhancement for the next version!. @rotemdan that's fine, a new major version is underway, aiming at easier maintenance time for us and lower issue turnaround time, so it could finally include this change.\nAny PR open today is going to be outdated very soon.. Yep. wait-on is way more robust.\nThanks for the hint @PeterKottas, I use it at work and didn't even remember \ud83d\ude04 . Thanks for helping each other, folks!. Released, finally \ud83d\ude4c install v3.6.0 now to get this and other goodness!. @tyscorp not really; if I was to dedicate more time to evolve concurrently, it would be for fixing existing issues.\nHowever, now that we have npm as a base, it might be easier to get yarn support, so I'm not opposed to someone contributing it \ud83d\ude42 . Hello folks,\nIs this still a problem for any of you? If yes, do you mind trying v4 (which has just been released)?\nThanks in advance!. @karlhiramoto what about v4.0.1? \ud83d\ude03 . Nope, that's correct @KingScooty. Your processes were killed, so they must exit with a non-0 code.\nAnd since you are using --success first, concurrently should be exiting with 0, as the first process to exit had success.\nReading the issue better, it doesn't sound like an issue still remains, as it was more like a usage issue, so I'm closing it.. > why are the rest of the processes exiting with 1 despite the first process exiting with 0?\nYou are using --kill-others, meaning the processes will be killed when one of them exits.\n\nThe code 1's are breaking my pipeline, despite all the tests passing.\n\nWhy would this be case? Are you parsing the output of the command?\nconcurrently itself will have exited with 0, so that means a success, according to the flags passed.. Yes, it does, @konoufo, thanks for heads up.\nI'm looking to release this as soon as possible \ud83c\udfc3 \u23f3 \ud83d\udd59 . Duplicate of #33. We have no mention of the name \"dezalgo\" anywhere in our codebase.. This issue is probably a duplicate of #150, which is to be fixed by #164.\nSo the null you see from grunt watch is likely the SIGINT that wasn't handled by the grunt process, while nodemon handles it.\nThis is a bug of concurrently, as SIGINT/Ctrl+C is not a problem in the commands executed, but just a normal interruption caused by the user, which shouldn't cause concurrently to exit with non-0 code.\nYou shouldn't need to apply workarounds like --success flag for this to work.\nI'm closing the issue as it will be fixed as soon as the next release happens.\nWill post here when I do so.. I think this is quite related to #75 and its PR #79.\nUnfortunately that PR was never looked very deeply into by me :(. Heya, do you mind giving v4 a try?\nIt fixed a similar case of processes hanging (#105).. @tfritsch-km are you able to isolate this issue in a small repo that I could clone and test?. @redaxmedia can you isolate this issue in a small repo that I could clone and test?. Yes @DmitryGG, since v3.6.0 you can do this.\nBy default all input goes to the first process, but you can control this with --default-input-target and by prefixing the input with the index/name: \nconcurently \"tsc --watch\" \"firebase experimental:functions:shell\"\n1:someinput\nFor more info, please refer to concurrently --help.. Wow. This was opened some good months ago... I'm sorry for such delay of mine \ud83d\ude1e \nI'm assuming that the code that listens for SIGINT/SIGTERMs is inherently broken on Windows, as signals don't exist there.\nhttps://github.com/kimmobrunfeldt/concurrently/blob/ba6f25a6c190b321de86e39c73b38d74ec403f01/src/main.js#L286-L292\nSome context: https://stackoverflow.com/a/14861513/2083599:. So, some further reading tells me that this may be an issue with old Node.js versions that didn't cope with this Windows limitation.\nThis reminded me that processes spawned by concurrently on Windows do run in non-detached mode though, so they should be killed when the parent process is terminated.\nI will have to do some investigation on this.. Thanks for the suggestion, @kopach!\nI imagine something like --hide <index|name> would make for a good flag, what do you think?. Duplicate of #25. Released, finally \ud83d\ude4c install v3.6.0 now to get this and other goodness!. concurrently has been capable of doing this since v3.6.0.\nBy default all input goes to the first process, but you can control this with --default-input-target and by prefixing the input with the index/name: \nconcurently \"tsc --watch\" \"nodemon\"\n1:rs\nFor more info, please refer to concurrently --help.. What's the concurrently version you're using?. Hi folks, can any of you isolate the issue, please?\nAlso provide Node, npm and Windows versions so that I can run it locally and find a fix, unless you can submit a PR.. Thanks for the heads up! \ud83d\ude05 . Released in v3.6.0!. Hey folks,\nI'm so sorry for the oversight on detecting these kinds of problems! It should really have been a major release.\n@voxpelli: you seem to have some good context of the problem, are you up for fixing this? I might not be so free any time soon.\n@wintercounter: So processes spawned by concurrently are likely inheriting the I/O from the parent... so your fix could be as easy as changing the stdio option of your spawn call (note the emphasis).. Wow, nice investigation skills @wintercounter! Thanks for looking so deeply into this \ud83d\ude00 \n@voxpelli let's make it an opt-in, then I will cut a new major release, so that we don't get 2 breaking changes in a row.... v3.5.0 had no support for stdin, if that's fine for you @hyperknot  \ud83d\ude42 . Hiya folks! v4.0.0 is out with a breaking change relating to this! \ud83d\udea2 \nYou know have to specify --handle-input in order to opt into the input handling feature.. Can clarify yourself?\nWhat is not working for you? Do you get any errors? What is the output?\nPlease provide as much details as you can.. Can you provide a reproducible project/gist?. No worries, glad you found the root of your problem!. Hello folks,\nFirst of all, sorry for the delay.\nSecondly, the problem with the null exit code is a known one. It probably means a SIGINT, as you pressed Ctrl + C.\nFinally, I think you get the error code 1 because the scripts didn't finish with code 0 (success). This is the default behaviour, which can be tweaked a bit with the use of --success flag.\nI acknowledge there's space for concurrently to not fail in these cases, as they are an interruption caused by the user, not by something wrong that happened in the process.\n. Reference from CLI tools: https://github.com/ember-cli/ember-cli/issues/6421. Hm, that's a great idea!\nCan you please provide more input on the following questions:\n- Is the tailing global, per command, or both?\n- Do event logs, like [lint] npm run lint exited with code 0, count towards the maximum number of lines?\n- How should processes that get restarted (--allow-restart/--restart-tries) behave?. Because it was fixed in c8bbe55. v3.6.1 published to npm with the fix.. Duplicate of #33 . Heya, do you mind giving v4 a try?\nIt fixed a similar case of processes hanging (#105).. Not possible.\nDo you want to have all the output plainly written using some colour?\nI imagine processes can still override colours on their own.. Hello @joelzimmer,\nUnfortunately there is no way to limit the parallelism. concurrently just spawns all of the passed commands at the same time.\nHowever, I'm open to suggestions on how to tackle this, taking in consideration existing features such as restarting, killing other processes, etc.. Hello @drschwabe,\nUnfortunately there is some conflict with concurrently sending input to the child commands. I'm accepting ideas on how to solve this conflict, though.\nAlso, concurrently v4 will feature a programmatic API, so you will be able to do what you want just fine.. Ah, v4 is out already! Sorry I didn't let you know.. Yes!\nBut:\nWhat do you think of something stricter, like --pad-prefix*..?\nSo concurrently automatically finds the command with the lengthiest prefix and pads the others with spaces. Would require less maintenance for users, too.\n* I'm not sure if it sounds good for native english speakers, so feel free to suggest something else!. Probably not.\nThis is likely an OS/Node.js limitation -- you can use single quotes on Unix, but not on Windows --, and the CLI framework we use seems to respect that.. Oh, sorry. You are correct.\nI probably got this impression from the tests, as they are using npm-tailored commands (with --). Therefore your improvement looks good to me :). Published on v4.1.0! \ud83d\udea2 . So did you figure it out by yourself?. Thanks for the request, @abdulkareemnalband! It sounds like a reasonable one \ud83d\udc4d . --success last is just telling that the last process to exit will determine if concurrently itself will exit with code 0 or not.\nIt doesn't stop any running processes.\nWhat you probably want to do is to pass the flag --kill-others --success first, so the test exits first (killing the server process) and its exit code is concurrently's.. What do you mean? concurrently has nothing to do with React.. It's okay :). The --kill-others flag states \"kill other processes if one exits or dies\".\nSo testing the exit code should probably not be done, otherwise we may cause breakage.. If you can undo the exit code test, I'll adapt #64 and merge it. By updating the flag here, you're preventing --kill-others-on-fail to work when the first process exits with success. 1. concurrently is run with --kill-others-on-fail set;\n2. First process exits with success. Sets othersKilled to true, but doesn't kill others because exit code is 0;\n3. Second process crashes. --kill-others-on-fail does nothing, because the control flag othersKilled is true.. What if we mentioned both defaults? Too fancy?. We should just note that the default is concurrently.json. By applying the change suggested in https://github.com/kimmobrunfeldt/concurrently/pull/122/files#r144599446 we can remove this one (or at least fix it - it's => its!). What was the reason for this change?\nI see onErrorLine isn't used at all, but don't think we should get rid of it.. Would it still work for you if \\n\\r was replaced directly, instead of removing all \\r?. The right property is name. missing semicolon. will have to fix the property here too to name (see above). I rolled this line back to what it is on master, as some other information will exist on commandInfo. There are quite a few whitespace changes here, maybe because your editor was configured to trim lines?. ",
    "jeffbski": "+1\n. +1 I noticed browser-sync and mocha also end up with no color, however nodemon's color still works\n. I noticed that https://github.com/keithamus/parallelshell a similar child process runner doesn't have this issue so parallel children's output retains its color, maybe there is a clue in its code? It could be that it shares the original out stream and doesn't pipe it.\n. ",
    "louy2": "+1\n. ",
    "dsernst": "A fix for this landed in npm@3.8.1\n. ",
    "dchambers": "I've asked a question about Linux support on the upstream issue since this fix doesn't appear to be working for me on Linux right now.\n. ",
    "paulerickson": ":+1:  but it would be nice to have an option for the --kill-others flag to do the same - pass SIGINT to the children and then only SIGTERM after the kill delay.\nFor example: I start up an http server and run tests -  concurrent -k http-server protractor - the tests succeed (exit 0) and so concurrently sends SIGTERM to http-server (exit 143) and returns a final exit code of 1 as if the tests had failed :frowning: \nFor my case, I was originally thinking of a new option to return the first exit code as the ultimate exit code.  I might make a separate issue or PR for that, but I think this would also fit the bill.\n. Does it still hang without the --status flag?  I would think it has no effect, and the process simply isn't responding to SIGTERM, but maybe I'm overlooking something.\n. Sure thing, @kimmobrunfeldt .  I think it was just the indentation in main.js (blame vim), but correct me if I missed any other formatting points.\n. Thanks!\n. ",
    "danilosterrapid7": "Well, according to your comment, I have something that would solve the problem. You might define \"-k -s last\". In this case, you are saying to the script just take into account the last child process' exit code status.\nWhat I am facing is a bit different. Using this option concurrently is sending \"--> Sending SIGTERM to other processes..\", but it hangs there without exit it properly. \n. But, is it hanging there as a message and does not stop the children tasks? that is what happens in my case.\n. No clue about what is that, I am checking the source code.\n. I've just realised one thing... I am using -k with -s (first|last|all) but the second part is not related to the order of execution like concurrently \"task1\" \"task2\" \"task3\"... They are related to the first to exist or last or all... I thought they were based on the call. But, it seems not to be...\nBtw, I got your point.\n. @qapi although it had worked for me previously, on another machine kept hanging there. I will have a look if might improve and, firstly, understand why.\n. @filipesilva could you check if it is fine for you as well? Thanks!\n. Definitely, this fixes the problem on mac osx cause I tested it. I just need confirmation for windows version. Btw, I am the same as @daniloster... This is my company's user.\n. I've just tested on Mac osx!\n. Could someone please test on Linux environment? Thanks!\n. @niieani could you test it on Linux, please? \ud83d\ude03 \n. I have just run the tests on Linux and they've passed! I think it is good to go.\n@kimmobrunfeldt @filipesilva @niieani \n. \n. ",
    "ilkka": "Apparently a Linux tool called script does this. Dunno yet how but it's an interesting problem, might take a look at the source :D\n. ",
    "ArnaudRinquin": "Same with Karma\n. ",
    "adamreisnz": "Also happens with gulp task runner, colors of that child process are lost, even when running with --raw. Will use parallelshell until this is fixed.\n. Thanks for the fix, is this going to be included in an upcoming release?\n. Alright I'll take it for a spin\n. ",
    "devboell": "Thanks, --raw fixed it for me: mocha colors are there and cursor doesn't disappear\n. ",
    "Nexxado": "Thank you for the fix @kimmobrunfeldt.\non Windows, when using the \"command --color\" fix, it wont show colors if i run webpack via npm script, but it works if i run webpack using webpack ... command.\nat least for me.\n. ",
    "cwbutler": "+1, Have to use Windows machine at work and this will pull request will solve another Windows compatibility issue.\n. ",
    "Semigradsky": "@kimmobrunfeldt  could you merge?\n. Nice! Now it's working on Windows.\n. ",
    "msikma": "Very cool! I had forgotten about this :) :+1: \n. ",
    "duro": "This is a problem on my end...closing\n. ",
    "nkbt": "@kimmobrunfeldt all scripts are working properly one by one with or without concurrently. Only combination of these two with concurrently breaks. If you wish, you can try it with https://github.com/nkbt/react-component-template\n. Just in case, I tried GNU parallel http://www.gnu.org/software/parallel/ and it worked ok\n\u2714 ~/nkbt/react-component-template [master|\u2714] \n23:49 $ echo -ne \"npm run lint -s\\nnpm run build -s\\nnpm run test:cov -s\" | parallel\nsrc/Component.js -> lib/Component.js\nsrc/index.js -> lib/index.js\nHash: a64fb6c37360b5188cc3\nVersion: webpack 1.12.2\nTime: 473ms\n                          Asset     Size  Chunks             Chunk Names\n    react-component-template.js  3.13 kB       0  [emitted]  main\nreact-component-template.js.map  3.06 kB       0  [emitted]  main\n    + 3 hidden modules\nHash: 691877f4066bdd521306\nVersion: webpack 1.12.2\nTime: 1290ms\n        Asset       Size  Chunks             Chunk Names\n    bundle.js     607 kB       0  [emitted]  main\nbundle.js.map     734 kB       0  [emitted]  main\n   index.html  185 bytes          [emitted]  \n    + 154 hidden modules\nHash: c026f8c83672b2f634d8\nVersion: webpack 1.12.2\nTime: 5ms\nwebpack: bundle is now VALID.\nwebpack: bundle is now INVALID.\nHash: 95583aaf2ae88eb15123\nVersion: webpack 1.12.2\nTime: 1308ms\n        Asset    Size  Chunks             Chunk Names\ntest/index.js  675 kB       0  [emitted]  test/index.js\nchunk    {0} test/index.js (test/index.js) 605 kB [rendered]\nwebpack: bundle is now VALID.\n27 09 2015 23:49:51.241:INFO [karma]: Karma v0.13.10 server started at http://localhost:9876/\n27 09 2015 23:49:51.245:INFO [launcher]: Starting browser PhantomJS\n27 09 2015 23:49:52.090:INFO [PhantomJS 1.9.8 (Mac OS X 0.0.0)]: Connected on socket tLhnfsu8nsaS-ZxEAAAA with id 88018931\n---------------|----------|----------|----------|----------|----------------|\nFile           |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |\n---------------|----------|----------|----------|----------|----------------|\n src/          |    88.89 |      100 |       50 |    66.67 |                |\n  Component.js |    88.89 |      100 |       50 |    66.67 |              6 |\n---------------|----------|----------|----------|----------|----------------|\nAll files      |    88.89 |      100 |       50 |    66.67 |                |\n---------------|----------|----------|----------|----------|----------------|\n. I'll debug it more, seems pretty interesting issue\n. Somehow I don't have this problem anymore, but what exactly fixed it - not sure. I do not use karma anymore, switched to tape, also updated node, and switched to parallelshell. Works pretty well.\nIt might be also related to some cross-OS env tooling (which used child processes). Now I use cross-env which seems to not cause any problems.\nSo basically I changed my stack quite a bit, and do not have this issue anymore, but did not fix it directly.\n. ",
    "benjick": "The reasoning for this i launch two concurrent, one for the server and one for the client from a Makefile, this gives me two processes named 0, two named 1 etc etc.\n. Thanks!\n. ",
    "manubamba": "I have a similar problem. Here's the stacktrace.\n`> react-redux-universal-hot-example@0.9.0 start /Users/manu/Work/Projects/markt/reduxEx\n\nconcurrently --kill-others \"npm run start-prod\" \"npm run start-prod-api\" \"/Users/manu/Work/Projects/markt/reduxEx/\"\nError occured when executing command: /Users/manu/Work/Projects/markt/reduxEx/\nError: spawn EACCES\n    at exports._errnoException (util.js:856:11)\n    at ChildProcess.spawn (internal/child_process.js:298:11)\n    at Object.exports.spawn (child_process.js:362:9)\n    at spawn (/Users/manu/Work/Projects/markt/reduxEx/node_modules/cross-spawn/index.js:87:19)\n    at /Users/manu/Work/Projects/markt/reduxEx/node_modules/concurrently/src/main.js:182:21\n    at arrayMap (/Users/manu/Work/Projects/markt/reduxEx/node_modules/concurrently/node_modules/lodash/index.js:1377:25)\n    at Function.map (/Users/manu/Work/Projects/markt/reduxEx/node_modules/concurrently/node_modules/lodash/index.js:5891:14)\n    at run (/Users/manu/Work/Projects/markt/reduxEx/node_modules/concurrently/src/main.js:172:22)\n    at main (/Users/manu/Work/Projects/markt/reduxEx/node_modules/concurrently/src/main.js:50:5)\n    at Object. (/Users/manu/Work/Projects/markt/reduxEx/node_modules/concurrently/src/main.js:390:1)\n    at Module._compile (module.js:413:34)\n    at Object.Module._extensions..js (module.js:422:10)\n    at Module.load (module.js:357:32)\n    at Function.Module._load (module.js:314:12)\n    at Function.Module.runMain (module.js:447:10)\n    at startup (node.js:139:18)\nnpm ERR! Darwin 15.4.0\nnpm ERR! argv \"/Users/manu/.nvm/v5.5.0/bin/node\" \"/Users/manu/.nvm/v5.5.0/bin/npm\" \"run\" \"start\" \"/Users/manu/Work/Projects/markt/reduxEx/\"\nnpm ERR! node v5.5.0\nnpm ERR! npm  v3.3.12\nnpm ERR! code ELIFECYCLE\nnpm ERR! react-redux-universal-hot-example@0.9.0 start: 'concurrently --kill-others \"npm run start-prod\" \"npm run start-prod-api\" \"/Users/manu/Work/Projects/markt/reduxEx/\"'\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the react-redux-universal-hot-example@0.9.0 start script 'concurrently --kill-others \"npm run start-prod\" \"npm run start-prod-api\" \"/Users/manu/Work/Projects/markt/reduxEx/\"'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the react-redux-universal-hot-example package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     concurrently --kill-others \"npm run start-prod\" \"npm run start-prod-api\" \"/Users/manu/Work/Projects/markt/reduxEx/\"\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls react-redux-universal-hot-example\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/manu/Work/Projects/markt/reduxEx/npm-debug.log\nerror: Forever detected script exited with code: 1`\n. \n",
    "lapanoid": "Checked again and looks like it does not solve the problem at all. Closing\n. ",
    "danibram": "I added the functionality in this pull request: #24 \n. ",
    "knight-bubble": "@kimmobrunfeldt, this PR didn't pass the tests on linux.\n. @filipesilva unfortunately I couldn't find a solution to fix that. But if you can find a way, then great! \n. Did you check it on linux? I pretty sure that there was a issue with that.\n. ",
    "Spike2050": "+1\n. ",
    "filipesilva": "@kimmobrunfeldt any chance of getting this merged in? I'm really missing the windows support for a couple of projects I'm working in. Cheers!\n. @hirtie-maxim I tried your PR on Windows 10 and it works great. \nA question though... is enforcing 'detached': true for the processes necessary? That way it's not possible to read through the output in logs, which is a bit problematic for automation.\nPerhaps it could be made an option? I'm happy enough to do that after merge, if you don't have time. I could really use this PR in.\n. I tried just setting detached:false and it worked well. What was the case where detached needed to be set to true?\n. I did not, no. But I thought concurrently was already working correctly on Linux, and that this PR only fixed the windows issues.\n. @daniloster @kimmobrunfeldt can confirm it works for windows :D\nkamik@T460p MINGW64 /D/sandbox/concurrently (pr/39)\n$ concurrently \"hs\" \"echo 'hello'\" --kill-others\n[1] 'hello'\n[1] echo 'hello' exited with code 0\n[0] Starting up http-server, serving ./\n[0] Available on:\n[0]   http://192.168.0.17:8080\n[0]   http://127.0.0.1:8080\n[0] Hit CTRL-C to stop the server\n--> Sending SIGTERM to other processes..\n[0] hs exited with code 1\n. I'd like to help as well. I use concurrently a lot and think it's great, so would like to give back.. Heya @kimmobrunfeldt, thanks for adding me! I'm subscribed to the notifications so I can try to fix stuff when it comes up. If you have some specific issues you'd like me to look at, let me know. I work on Windows so can debug general windows stuff easily.\nMy npm acc is the same name as the github one, filipesilva: https://www.npmjs.com/~filipesilva. I think I'm getting this, but not on when using CMD. Only when using gitbash (mingw).. Awesome, thanks @gustavohenke!. It's the least I can do, I use concurrently a lot!. @wesamco as an aside, you can use --no-progress to not get the progress report at all.. @kimmobrunfeldt @gustavohenke I haven't yet contributed much to the repo, I think I'll start by implementing this. I've personally had the need for it as well.. An implementation of https://github.com/kimmobrunfeldt/concurrently/issues/101 would allow for this usage pattern (and others).. I think having a config file makes sense in general, but realistically the only flags that would be shared across several commands are the general options (--no-color, --name-separator, --prefix-colors, --timestamp-format and --prefix-length).\nThe other options (--kill-others, --kill-others-on-fail, etc) are always going to be specific to the script being used, so it's likely enough that there would be more than one config file. That or we allow config merging.. Heya, just wanted to say that I had started on something a few months ago, but never really progressed much with it. If there's anything you can use from https://github.com/filipesilva/concurrently/tree/node-api (just the one commit), feel free to take it.\nAlso nice work on the typings!. Yeah it's related to this bit of your script: PORT=3001 yarn start. It's not related to concurrently proper.. @derickkemp can you try using escaped double quotes? I've had some trouble with that in the past as well, single quotes aren't truly supported cross platform in npm scripts:\n\"server\": \"concurrently \\\"lite-server -c bs-config.json\\\" \\\"webpack\\\"\",\n. ",
    "Toilal": "Thanks for quick answer.\nI finally wrote something like this in package.json:\n\"scripts\": {\n    \"test\": \"gulp test\",\n    \"all\": \"concurrent 'npm run bilan' 'npm run gp2'\",\n    \"bilan\": \"gulp serve\",\n    \"gp2\": \"cd ../third-party/gp2/gp2-webapp && gulp serve\"\n  },\nAnd running npm run all just run both commands. Thanks !\n. In fact, it seems concurrently drops colors from underlying process.\n. same issue with -p none\n. Sorry, i close this one then !\n. ",
    "gaggle": "I'd love a \"silent stdout\" arg that works like name, color, etc. So I can run multiple processes but silence those I don't care about.\n. ",
    "0xcaff": "If you don't care about cross compatibility, you can do the following with modern bash:\n(npm run testrpc >& /dev/null) & npm run test.\n",
    "PowerSupply": "It would be great to be able to specify the processes (by name/index) to silence stdout of. I would expect:\n--prefix none\n...to not print any prefix, bu instead it prints an empty prefix for every line:\n[]. ",
    "Christilut": "Same here. Running tsc --watch and ava --watch at the same time, I don't care about the typescript compilation spam. Would be great if I can select only one command to be silent. Or even better, only show error output.\nMaybe such options are nice to add to #102 ?. ",
    "OlsonDev": "I'm currently working on this and the ability to color the prefixes separately.\n. This will close #27 and goes above and beyond by providing prefix-coloring. This is how I'm using it:\nconcurrently -p \"[{index}:{name}]\" -n \"main,server,browser\" -c \"bgBlue.bold,bgMagenta.bold,bgGreen.bold\" \"npm run build-main\" \"npm run build-server\" \"npm run build-browser\"\n. I renamed it to prefixColors instead of nameColors (like you suggested) because the color applies to the entire prefix, not just the name.\n. @JakeGinnivan If you want to use it while we wait for @kimmobrunfeldt, you can change your package.json to have \"devDependencies\" of \"concurrently\": \"OlsonDev/concurrently#master\". That's what I've been doing, anyway.\n. That work?\n. ",
    "Sicria": "LGTM :+1: Thank you.\n. Could this be changed to nameColors to be a bit more descriptive?\n. ",
    "JakeGinnivan": "Any chance of this being merged/released? It would be quite handy.\n. ",
    "RiazAhamed": "I give executable premission to make my project folder and files in it recursively\nchmod -R <permissionsettings> <dirname>\nas a <permissionsettings> i give 777\nand it works very well for me.\nFor more help: How to set chmod for a folder and all of its subfolders and files in Linux Ubuntu Terminal?\n. ",
    "almeidacavalcante": "RiazAhamed, works for me as well. Thank you.. ",
    "rweng": "In some cases, running things in parallel is not enough. e.g, i fire up a docker container and then I want to run some integration tests against it. Thus, I thought I'd just sleep a short time before before starting the tests, when they are done -k should take care of stopping the container.\n``` bash\nRW-MBP-15:  ~\n\u2192 sleep 1 && echo hello\nhello\nRW-MBP-15:  ~\n\u2192 concurrently 'sleep 1 && echo hello'\n[0] usage: sleep seconds\n[0] sleep 1 && echo hello exited with code 1\n```\n. ",
    "jonkri": "+1\nSeparating different commands with semi-colon doesn't seem to work either.\n. ",
    "ljharb": "@kimmobrunfeldt concurrently 'echo 1 && exit 1' 'echo 2 && exit 2' is still incorrectly passing with 3.0.0-dev - that seems to be a simple test case. That's actually worse imo than previous, because now it's silently and erroneously passing.\n. On my machine i was getting a zero exit code.\n. It's a Mac, stock, using bash. I'll try again this evening, just in case something went wrong with my install.\n. Hmm, I must have made a mistake, because I definitely have 3.0.0-dev installed, didn't change anything, and got the proper exit codes. Thanks!\n. ",
    "MadLittleMods": "@matt1991 Try adding --raw\nRelated to https://github.com/kimmobrunfeldt/concurrently/issues/23\n. Implemented as --argument-passthrough option here in https://github.com/kimmobrunfeldt/concurrently/pull/68, still need to figure out testing for this new option.\n. @kimmobrunfeldt Friendly ping for thoughts and timeline. @gustavohenke Having no option seems fine. Any thoughts on how to test?. ",
    "andreieftimie": "@MadLittleMods have you found any workaround for this?\nI can't use concurrently because I need to pass some configs along to each invoked script.\n. ",
    "thaggie": "My PR is an alternative implementation where the arguments are either passed to the first command (default) or all the commands (--all option).\nThe unit test has not been tested on windows.. My use case is for npm test, I run the unit tests and linting (css, js and jsx) at the same time - they're different programs that want different arguments. I want to be able to pass arguments through to just the unit test script.. After a little thought it might be better to default to the last command as that's the one closest to the --.. Not sure what you mean.\nI want to be able to:\nnpm test -- --reporters progress,junit\nor\nnpm test -- --reporters mocha\nor any other commands I want to pass down to karma\nand have --reporters progress,junit just go to my unit test command not my linting commands.\nFrom package.json:\n\"test\": \"concurrently \\\"karma start karma.conf.js\\\" \\\"eslint src --ext js\\\" --\". ",
    "csvan": "Any news on this? My use case is the same as @thaggie . ",
    "carlosasj": "An alternative would be use bash or sh to \"build\" the command before concurrently starts its execution. For example:\njs\n\"myScript\": \"bash -c 'concurrently \\\"npm run start\\\" \\\"npm run _wait-for-server-up && npm run _run-subset-tests -- ${0} && npm run open-report\\\"'\",\nSo you can use like:\nbash\nnpm run myScript -- --myArgument\nIt's not the best solution, but could help someone while we don't have an official implementation of this feature.\nI read it here: https://github.com/npm/npm/issues/9627. ",
    "timster": "I created a run.js file as a workaround. This lets me pass args to whichever process(es) I want.\n```javascript\nconst concurrently = require('concurrently')\nconst args = process.argv.slice(2).join(' ')\nconcurrently(\n  [\n    { command: 'npm:dev:server', prefixColor: 'blue', name: 'server' },\n    { command: 'npm:dev:client -- ' + args, prefixColor: 'magenta', name: 'client' }\n  ],\n  {\n    killOthers: ['failure', 'success']\n  }\n)\n```\nThen I can do:\nnode run.js --arg1=value\nAnd as an npm script:\njson\n\"scripts\": {\n  \"dev\": \"node run.js\",\n}\nnpm run dev -- --arg1=value. ",
    "stocks29": "While it's not ideal, env vars are pretty easy to use as a short term workaround:\njson\n  \"scripts\": {\n    \"dev:support\": \" // some other proc here\",\n    \"test:only\": \"truffle test $TRUFFLE_TEST\",\n    \"test\": \"concurrently --kill-others --success first npm:dev:support npm:test:only\"\n  },\nThen you can run the script as:\nbash\nTRUFFLE_TEST=./test/MyTest.js npm test. ",
    "jakereps": "Found out this is actually a python issue where it knows when it is sharing a pipe and buffers any output. Putting a -u on the python command will let it run perfectly.\n. ",
    "karlhorky": "Nice find, was trying to debug this issue today.\nAnother way that I found to disable the buffering is to set the PYTHONUNBUFFERED environment variable to a non-empty string.\nExample:\nsh\nPYTHONUNBUFFERED=1 python manage.py runserver. ",
    "niieani": "Yes, children tasks are have already stopped, but concurrently is hanging there after displaying that message.  It's like it's trying to SIGTERM processes which are already dead.\n. I think the problem is here: https://github.com/kimmobrunfeldt/concurrently/blob/master/src/main.js#L282\nThat function is only called when closeStream triggers a 'close'. When both processes are already closed, that event never happens. This is a bug when killOthers is set to true.\n. Just to confirm, the latest version works for me with the above usage under *nix:\nsh\n$ concurrently --kill-others --success \"first\"  \"echo one\" \"sleep 20\"\n[0] one\n[0] echo one exited with code 0\n--> Sending SIGTERM to other processes..\n[1] sleep 20 exited with code null\n. Did anybody test if it fixes the issue on Linux/OS X? I can't test right now.\n. @danilosterrapid7 it's on my todo. I'll try to today.\n. ",
    "daniloster": "@niieani I have added a PR to fix the problem. It worked for me. I might include the windows fix after it gets merged.\nPull request:\nhttps://github.com/kimmobrunfeldt/concurrently/pull/39\n. @niieani btw, the other user is my user for the company which I am working on. ;)\n. I am closing it to add the windows fix together.\n. @niieani could you check if it is fine for you as well? Thanks!\n. Havd you tried to send both signals, @marcioj?\n. ",
    "vsrc": "Unfortunately this new PR breaks my CI script on Jenkins. Before I didn't had any problems but now process hangs on \"Sending SIGTERM to other processes...\" \nI will revert back to older version (2.1.0) but I guess this could be problem at some point in future... \ud83d\ude26 \n. @kimmobrunfeldt yeah that one.\n. That machine runs on CentOS 7.2.1511 but it even didn't work on my MacBook. Command that I was running in script was:\nconcurrently --kill-others --success \"first\" \"npm start\" \"npm run e2e\"\nMaybe I was doing something wrong?\nThanks a lot for help! Cheers!\n. ",
    "marcioj": "Unfortunately this change just works for me if I change child.kill('SIGINT'); to child.kill('SIGTERM');.\nDoes make sense to trigger both signals or use a more aggressive signal?\n. Hi @kimmobrunfeldt. I'm without a OSX to test, but a friend that have one just confirmed to me.\n. ",
    "OliverJAsh": "Let me know how you think this needs to be fixed, happy to contribute :-)\n. ",
    "steve-todorov": "The same thing happens with ampersand &\n`\n$ concurrently \"sleep 5s && npm run protractor\"\n sleep: invalid time interval '&&'\n sleep: invalid time interval 'npm'\nsleep: invalid time interval 'run'\n sleep: invalid time interval 'protractor'\n Try 'sleep --help' for more information.\n sleep 5s && npm run protractor exited with code 1\n`\nping @kimmobrunfeldt \n. Hi, \nSorry for the late response, but I was busy at work. I've tested the rc version and it seems to be working fine. Thanks for the great work and fast response! \n. ",
    "julienw": "Hey,\nHonestly I think this would just work :)\n. any update ?\n. ",
    "amilajack": "Appveyor is a CI for windows only. By adding appveyor support, we can ensure that concurrently works cross-platform.\n. ",
    "carusology": "This is how I organize my concurrently-ran scripts as well, though I think any solution here should be forward thinking in how to support passing arguments to any given npm script.\n. ",
    "xaviergonz": "I recently made a tool to make running parallel npm-scripts easier (among other things) - https://www.npmjs.com/package/makfy\nHope it is useful to any of you.. ",
    "remcohaszing": "I've switched to npm-run-all instead. It basically does what this issue describes.. ",
    "pgraham": "I, like @remcohaszing recohaszing tried npm-run-all but found that it is not as robust at handling output \u2014 the Rollup.js watch command in particular tripped it up.\nMy suggestion for supporting this feature, but still allowing non-npm commands, is to support anpm:cmd format for individual command that is translated to npm run cmd:\nbash\n$ concurrently \"npm:watch-node\" \"npm:watch-js\" \"npm:watch-css\"\nwould be equivalent to:\nbash\n$ concurrently -n \"watch-node,watch-js,watch-css\" \"npm run watch-node\" \"npm run watch-js\" \"npm run watch-css\". I had previously added this option to log any output on stderr for specific tests but decided it would be better to always do this and so removed the options since it was now unused. But I agree, it would be useful to keep so I've re-added it.. ",
    "shtanton": "When I try to use this feature, I get:\nyarn run v1.1.0\n$ concurrently 'npm:dev-bsb' 'npm:dev-babel'\n[0] /bin/sh: npm:dev-bsb: command not found\n[1] /bin/sh: npm:dev-babel: command not found\n[1] npm:dev-babel exited with code 127\n[0] npm:dev-bsb exited with code 127\nerror Command failed with exit code 1.\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\n. ",
    "gcca": "Currently someone is working on this feature? I open a PR for this.. Count on me to develop new code and review PRs.. ",
    "georgeedwards": "Having installed globally and run directly in cmd, I get the same result, so it isn't an npm thing. \n. @kimmobrunfeldt The issue I don't understand is that ts isn't the command, it's tsc --watch why isn't it interpreting the inputs correctly?\n. ",
    "benbroadley88": "I've been having this same issue today and it seems to be an issue with single vs. double quotes. When run on the command line concurrently 'npm run min-js' seems to be parsed as np run min-js which for obvious reasons wouldn't run correctly. However the command was parsed correctly when double quotes were used, so: concurrently \"npm run min-js\" runs fine. \nFor me, the problem with running this via npm was that the script itself is wrapped in double quotes when written in the package.json file (and therefore I had exchanged the inner quotes for single quotes which were causing the parsing bug to be encountered) - A simple work around was to revert back to double quotes but escape them with \\ and this now appears to work as expected. e.g:\n\"scripts\": {\n    \"build\": \"concurrently --kill-others \\\"npm run scriptTwo\\\" \\\"npm run scriptOne\\\"\"\n}\n. ",
    "jens-duttke": "I'm using version 3.6.0 and have the exactly same problem.. ",
    "swjain": "Issue still exists on 3.6.1. ",
    "Alex0007": "@kimmobrunfeldt \nLinux\nNode 7.9.0\n$ concurrently \"cd ./server && npm run dev\" \"npm run watch:client\" \n Error occured when executing command: cd ./server && npm run dev\n Error: spawn cd ENOENT\n     at exports._errnoException (util.js:1050:11)\n     at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)\n     at onErrorNT (internal/child_process.js:367:16)\n     at _combinedTickCallback (internal/process/next_tick.js:80:11)\n     at process._tickCallback (internal/process/next_tick.js:104:9)\n     at Module.runMain (module.js:607:11)\n     at run (bootstrap_node.js:423:7)\n     at startup (bootstrap_node.js:147:9)\n     at bootstrap_node.js:538:3\nIt can be resolved by moving cd && somestuff commands into separate npm tasks though. ",
    "seangwright": "I'm using MINGW64 (https://git-for-windows.github.io) wrapped by ConEmu (https://conemu.github.io). Most recent versions for both.\n```\n$ echo $SHELL\n/usr/bin/bash\n$ echo $COMSPEC\nC:\\WINDOWS\\system32\\cmd.exe\n```\n. ",
    "simoneb": "@kimmobrunfeldt confirmed. thanks\n. ",
    "Chowarmaan": "Still broken on Windows with 3.1.0, using Git Bash shell.  The commands work on their own but not with concurrently. Moving back to concurrently@2.2.0 does resolve the issue.\nNode: 6.9.1\nnpm: 3.10.8\nconcurrenlt: 3.1.0\nWindows 7\nnpm-debug.log.txt\n. ",
    "n0f3": "@Chowarmaan seems to be fixed in their latest version 3.4.0. ",
    "dragosrusu": "Doesn't work for me in Windows with 3.4.0 version. Manual or in npm scripts.\n==\n\n\n\nconcurrently 'webpack-dev-server --config conf/webpack.config' 'gulp watch'\n\n\n\n[0] 'webpack-dev-serve' is not recognized as an internal or external command,\n[0] operable program or batch file.\n[1] 'gul' is not recognized as an internal or external command,\n[1] operable program or batch file.\n[2] 'watch'' is not recognized as an internal or external command,\n[2] operable program or batch file.\n[2] watch' exited with code 1\n[1] gul exited with code 1\n[0] webpack-dev-serve exited with code 1\n===. ",
    "steadycoding": "Updating to 3.5.0 fixed it for me. . ",
    "aaronjensen": "{ shell: '/bin/zsh', executeFlag: '-c' }\n. $ concurrently 'which node && node -v'\n[0] node is /usr/local/bin/node\n[0] node is /usr/local/bin/node\n[0] v0.10.35\n[0] which node && node -v exited with code 0\n$ concurrently 'echo $PATH'\n[0] /usr/local/heroku/bin:/Users/aaronjensen/Library/Haskell/bin:/usr/local/bin:/usr/local/sbin:/usr/local/mysql/bin:/opt/local/bin:/opt/local/sbin:/usr/local/share/npm/bin:/Users/aaronjensen/.bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin\n[0] echo $PATH exited with code 0\nMy setup for asdf is in my zprofile\n. @kimmobrunfeldt now that I've thought about this some more, I think that this method won't actually work, even with -l.\nWhat concurrently should do is use a shell that shares the same exact environment as the shell running it.\nHere's why:\nLet's say you are using concurrently in continuous integration. You also have some secrets that you keep in environment variables associated with your build. Your CI server injects those environment variables via a script it runs to execute your build. This enables anything run within that script to have access to them. It does not update your profile or anything along those lines. This would mean that any shell started to run things that require those environment variables must share that environment. Starting a totally fresh shell would be bad, and making it a login shell would not bring those environment variables in. As a matter of fact, even if you inherited the environment and made it a login shell your login shell scripts may be overriding things that were exported in the parent environment. \nIn short, concurrently should behave as running bash -c ... or zsh -c ... from an existing shell. It should not have its environment reset at all.\n. You're right, bash/zsh will exec the rc files regardless, which will usually override PATH.\nIf you want to maintain all env vars, I think bash -fc \"...\" will work, but that won't copy over functions or aliases. Since it will maintain path it may be exactly what concurrently needs. \nI guess one thing I don't understand is why does concurrently need to run each thing in its own shell? I don't understand it well enough to know that.\nThe other option would be to do something like bash -lc \"PATH=$PATH ...\" which would copy your current path over to any command you ran, but that's fragile since a command could have && in it or the like. Maybe there's another way, I'm not sure. \n. This works. Thank you @kentcdodds and @gustavohenke!. @gustavohenke thanks for merging this, this cleans up the output for us quite a bit. If you get a chance could you please release a new version? We're happy to pull from git from now, but a new version would be great. Thanks! /cc @kimmobrunfeldt . FWIW, #70 fixed it for me. Any chance of a package release? Thanks!. ",
    "kentcdodds": "Anyone here want to try out my fork and comment back if it worked? I think that'll fix the issue.\nconsole\nnpm install https://github.com/kentcdodds/concurrently.git#pr/use-spawn-command. I opened up a PR that resolves the conflicts in this PR: #93\n. Does anyone here want to try my fork and let us know whether that works?\nconsole\nnpm install https://github.com/kentcdodds/concurrently.git#pr/use-spawn-command. Ah! I found this which explains what's going on quite nicely.\nI think that a solution could be to simply add FORCE_COLOR = 1 to the env that you spawn the script with. Right around here we could probably change that to:\njavascript\nvar spawnOpts = config.raw\n  ? {stdio: 'inherit'}\n  : {\n      env: Object.assign({FORCE_COLOR: 1}, process.env)\n    };\nI'd be happy to make a PR to do this!. We could just use https://www.npmjs.com/package/supports-color :) That's the same thing that chalk uses.\njavascript\nvar spawnOpts = config.raw\n  ? {stdio: 'inherit'}\n  : {\n      env: Object.assign({FORCE_COLOR: Boolean(supportsColor)}, process.env)\n    };. Writing tests for this is pretty difficult and would require a bit of a rewrite of how tests work. So I'm not going to add tests to my changes.. You can use squash and merge feature and change the commit message yourself right in the github ui: https://github.com/blog/2141-squash-your-commits. Updated. I think this is correct.... This may actually solve #69 and I just noticed #61! Looks like this was a pre-existing issue!. Using my fork fixes my issue. And it looks like the windows build passes.. Awesome! Thanks!. Well, I opened a PR to fix it and it was merged/released. Maybe what you're seeing is unrelated to what I experienced. You may need to dig deeper.. I've verified this fixes my use case here: https://github.com/kentcdodds/nps/pull/111. Passing build: https://travis-ci.org/kentcdodds/nps/builds/202938500. Updated. I'm super excited to get this and #64 merged!. I vote for option 2. I can't think of any use cases for delay...\n\nFigure out the real reason behind null exit code, and fix it considering the code before this PR.\n\nThe reason is because that's the exit code when a process has been closed with SIGTERM which will be resolved when #64 is merged I believe.. > From what you mentioned here, I understand that SIGTERM will result in processes exiting with code null.\nCorrect.. Cool. Ok, let me know what I can do to help get #64 merged. I really want this behavior. Thanks!\nOh, and just for a use case for that... I have a pre-commit hook on many of my projects that run linting, build, tests, etc. concurrently. If any of those fail then my hook fails. I don't want to wait until they all finish before I see that one failed, so I want to kill all processes as soon as the first fails.. \ud83c\udf89 wahoo! Thanks! Can't wait to use this!. Thanks! I've already put it to good use! Works great :D . Thanks @maxogden. Someone correct me if I'm wrong, but because this project is using RxJS, this actually should be fairly straightforward to implement with just RxJS.. Good as a reference maybe. Concurrently has a bunch of really nice features that I enjoy (like colored labels) :smile:. I'm trying to clean up my issues, so I'm going to go ahead and close this. If I need this again I'll reopen this (or you can reopen if you'd like).. I opted for this if statement rather than what we talked about in the issue because it makes the intent a little more clear.. The problem was that this was outside of the closeStream.subscribe and there was no check as to whether the exit code was non-zero. This basically meant that --kill-others would kill all other commands after the first exits.\nI've moved this to inside of closeStream.subscribe with a check against the exitCode (also had to add a check for whether othersKilled was set because async (don't want to sigterm other commands twice).. I see, in that case it sounds like we need a new feature that will allow us to say we should kill processes if one of them exits with a non-zero exit code. If you're interested in a future like that then I'm happy to make a port request for that. What would you like the flag to be called?. Sure!. Hmmm... Could you elaborate? I don't think I follow. One of the tests demonstrates that this is not the case (unless I'm mistaken). What should the code look like?. Ah, got it \ud83d\udc4d. Updated!. ",
    "jcrben": "This is such a complementary feature. I suggest adding this suggestion to the readme.\nI also think that a tool which can handle both makes sense.. ",
    "joshuapinter": "@dchambers Thanks for sharing this! Exactly what I needed and saved me time looking for a solution. \ud83d\ude4f . For those looking for how to implement this, look at https://github.com/kimmobrunfeldt/concurrently/issues/65.\nThe short answer is: \nnpm install --save-dev wait-on\nAnd then just prefix your command with something to wait for, like: \n\"app\": \"wait-on http://localhost:3000/ && node app.js\". ",
    "ahmednuaman": "I updated the README too.\n. Sure, but that's a bit overkill, eg see: https://github.com/avajs/ava\n. What we thinking?\n. Ok, on it.. ",
    "NonPolynomial": "hey here is my npm version output:\njson\n{\n  \"npm\": \"3.10.6\",\n  \"ares\": \"1.10.1-DEV\",\n  \"http_parser\": \"2.7.0\",\n  \"icu\": \"57.1\",\n  \"modules\": \"48\",\n  \"node\": \"6.3.0\",\n  \"openssl\": \"1.0.2h\",\n  \"uv\": \"1.9.1\",\n  \"v8\": \"5.0.71.52\",\n  \"zlib\": \"1.2.8\"\n}\nOS: I noticed this bug on Win7, Win8.1 and Win10.\n. > I think I'm getting this, but not on when using CMD. Only when using gitbash (mingw).\nStrange.. I tried it with cmd, powershell, mingw and mingw inside powershell, but tasgmanager said, the watch task ist runnning, even after break (ctrl + c)...\nI need to check it again\n\nHappy new Year \ud83c\udf86 . Sorry for my late response!\nI tried v3.5.0 and it seems to be fixed.\nThanks!. ",
    "jonaskello": "I have the same problem on Windows 10. Tried both yarn 0.18.0 and npm 3.10.9.. ",
    "JoshMoxey": "I'm using concurrently v3.5.1 & gitbash (MINGW) on Windows 10. After trying to cancel w/ ctrl + c, it appears to cancel, but then when I make any file changes there's still output from nodemon/react hot reload. \nPS, I'm new to reporting bugs, so bare with me. :). ",
    "stereokai": "Also happening to me, latest version, npm 3, Win 10. ",
    "ilearnio": "Same here. Ctrl+c exits but the process is still ongoing. Even everything I have after && runs after concurrently finishes. ",
    "rdettai": "I tried it and had the same issue!\nLe 31 oct. 2016 12:59 PM, \"Kimmo Brunfeldt\" notifications@github.com a\n\u00e9crit :\n\nCan you upgrade to version 3.1.0 and try again?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/kimmobrunfeldt/concurrently/issues/69#issuecomment-257243302,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHi_g_k-UR0Fnj8xCnBUxuf9cYhE0pw-ks5q5a4OgaJpZM4Kktek\n.\n. \n",
    "phsstory": "as a workaround, 2.2.0 still works \nas an aside, the error message is incorrect when using multiple commands, it repeats the same message for all commands.\nmain.js:~326: var command = childrenInfo[event.child.pid].command;\nevent.child.pid is undefined and childrenInfo[undefined] exists\nThis will likely resolve once process spawning is working\n. in cygwin, our shell is /bin/bash (or others) and spawning should be similar to linux and not require an implicit shell\nI personally use babun which is a prepacked no hassle cygwin (http://babun.github.io/)\n. ",
    "marcoso": "I tried with v3.3.0 and I was still having the issue, as @phsstory mentioned installing v2.2.0 was the only workaround. . ",
    "mikew": "Yeah spawn-command does nothing to check the SHELL variable, and the logic that was in spawn-default-shell would still error on Windows if your SHELL is really bash.exe.. ",
    "iamjosan": "I tried to use the latest version of concurrently today and got the same error. Installing version 2.2 did the trick.. ",
    "vhpoet": "Weirdly it works after setting SHELL=/bin/bash, must be a systemd service thing. Closing the issue for now, thanks!. ",
    "STRML": "Amended and rebased.. ",
    "alerkesi": "Guys, which status for this PR? How can I help something to push this faster?. ",
    "karimsa": "I can reproduce.\nI am using concurrently on Linux x64 (via Travis CI) and on my local machine (macOS Sierra). Both are running node v7.7 with concurrently (3.4.0 - though I also tested with 3.3.0 after reading this thread). It seems that if one of the two processes fail or one exits (and the other receives SIGTERM), concurrently exits with code null (not sure how?) and this causes my build to fail.\nHere is my build: https://travis-ci.org/karimsa/delish/builds/213052516. ",
    "pmowrer": "Seems to work like expected if you pass the raw (-r) flag to concurrently. ",
    "aaronbeall": "@pmowrer Nice, that works for me! Thanks. @aecz The main reason I use concurrently is so I don't have to have multiple terminal tabs open. Yes, I'm that lazy. :) Is PR #70 going to be merged soon?. ",
    "leonardofaria": "+1 curious to see this PR merged. ",
    "rickcnagy": "I was having this issue when running ng serve (which builds and serves via Webpack in the Angular CLI). Adding --progress false to ng serve worked without needing to add --raw to concurrently:\njson\n\"start\": \"concurrently \\\"ng serve --progress false\\\"\"\n+1 on #70 merging!. ",
    "wis": "@gustavohenke @kimmobrunfeldt pls give this issue (#2/#85) the highest priority. thanks for making concurrently btw\u2764\nhere's my output case with the Angular CLI\n[0]   0% compiling\n[0]  10% building modules 0/1 modules 1 active ...ten\\src\\backpage\\app\\app.component.ts\n[0]  40% building modules 1/2 modules 1 active ...ten\\src\\backpage\\app\\app.component.ts\n[0]  70% building modules 2/2 modules 0 active\n[0]  71% sealing\n[0]  75% advanced module optimization\n[0]  76% basic chunk optimization pass 3\n[0]  76% basic chunk optimization pass 4\n[0]  78% advanced chunk optimization\n[0]  80% module reviving                                                                                                                                                                                                       81% module order optimization\n[0]  82% module id optimization\n[0]  85% chunk id optimization\n[0]  86% hashing\n[0]  88% chunk assets processing\n[0]  89% additional chunk assets processing\n. ",
    "fernandosouza": "Hey, @aecz. #70 didn't solve the problem to me.. Hey, @aecz. I'm using webpack-dev-server and a tool that I've written to watch .soy files and compile them. I'm using both to create a hot reload since webpack doesn't know that .soy files exist.\nThis is the line I'm running: \"concurrently -k -r \\\"npm run soy:watch\\\" \\\"npm run start\", where npm run start is webpack-dev-server --open\nThat causes a long webpack log as the issue mentions. But, during my debug, I realized that it can be a Webpack problem. I can reproduce the issue without concurrently, using only the & statement to call both npm tasks.\nSorry for the previous comment. I will let you know when I make sure where the problem is.\nThx.. ",
    "okonet": "You can check if it's TTY and only force colors in this case. This solved CI and similar cases:\nhttps://github.com/okonet/lint-staged/blob/master/src/index.js#L18. ",
    "boneskull": "Ha, I just ran into a corner case here, where we're launching Mocha as a subprocess and asserting  it's not dumping colors into a non-tty session.  I had to explicitly unset FORCE_COLOR.\nIs it not possible to consume the --color flag that supports-color detects?  Granted, I don't love the idea of a library looking for a flag in this manner.... ",
    "Maistho": "I think the second error is because I try to run angular-cli (ng) which is\ninstalled locally. It could be dependent on the first error. I can make a\npublic repo in an hour or so to reproduce.\nOn Thu, 9 Feb 2017, 12:12 Gustavo Henke, notifications@github.com wrote:\n\nDo you have more details on the second error? How should I could reproduce\nit?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/kimmobrunfeldt/concurrently/issues/88#issuecomment-278613177,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACJ9UYsdUEmN4-cwMfebIEV36cMBV3bLks5ravSygaJpZM4L7x29\n.\n. Seems to work as it should! =)\n\nOn Sun, 12 Feb 2017, 18:41 Gustavo Henke, notifications@github.com wrote:\n\nPublished v3.3.0\nhttps://github.com/kimmobrunfeldt/concurrently/releases/tag/3.3.0.\nCan you try it, @Maistho https://github.com/Maistho?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/kimmobrunfeldt/concurrently/issues/88#issuecomment-279234629,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACJ9UXWQHA51cjgtAhHALpQ47FXn6_thks5rb0RJgaJpZM4L7x29\n.\n. Oh, just when I've filed an issue I find out what the problem is, as always.\n\nApparently alpine uses busybox as /bin/sh, and spawn-command always uses /bin/sh to launch commands, and busybox shell forks all commands.\nSolution? I'm not sure. Perhaps spawn-command shouldn't wrap in /bin/sh? Or perhaps I should just replace busybox shell?. So just when I've made an issue I find out what the problem is, as always.\nalpine uses busybox ash for /bin/sh, which is the shell that spawn-command will always use.\nBusybox ash will fork any commands given by -c, so the pid changes.\nSolution?\nReplace /bin/sh with something else, e.g. bash\nOr change spawn-command to not spawn inside a shell\nNot sure which would be the best idea.\nNot a concurrently issue, but may be related to other issues here. @cuipengfei yup, you'll need to use bash instead of the builtin shell in alpine.\nI have a docker image that uses bash instead, kadadev/node-small, that you might use. If you want to run your own image you can take a look at my dockerfile to see how to switch to bash\nhttps://github.com/KadaDev/node-small/blob/master/Dockerfile. ",
    "hakatashi": "I also have the same PATH issue when running scripts in Travis-CI after upgrading concurrently 3.1.0 to 3.2.0.\nSince Travis uses nvm's PATH system to control node version, this break version management in Travis-CI using concurrently module.\n\nrelated issue: https://github.com/tsg-ut/mnemo/pull/230\necho $PATH in npm script: https://travis-ci.org/tsg-ut/mnemo/builds/200683019#L1462\necho $PATH in concurrently in npm script: https://travis-ci.org/tsg-ut/mnemo/builds/200683019#L1520\n. It seems to work quite well. Thank you!. \n",
    "ilivit": "It seems that spawn-command always uses cmd.exe when running on windows. \nI've created a PR (https://github.com/mmalecki/spawn-command/pull/7) to fix that. . I'm running npm and node from git-bash shell, so I would prefer to run all processes started by them within one environment. Messing up the shells could introduce new bugs and glitches like an encoding inconsistency.. ",
    "Wildhoney": "Was there a resolution @kentcdodds?\nI get the same issue when running a node.js app (even when the node.js app is an empty file) and any other command, such as an echo:\nbash\nconcurrently -k 'node app.js' 'echo \"hello world\"'\nIf I replace the node app.js with anything else such as echo then the exit code is 0.\nHowever with node I receive an exit code of null:\n\n[1] echo \"...\" exited with code 0\n--> Sending SIGTERM to other processes..\n[0] npm run start exited with code null. \n",
    "maxogden": "I also would like this feature! This module would make it pretty easy to implement: https://www.npmjs.com/package/run-parallel-limit. ",
    "sandinmyjoints": "A possible alternative to doing this in concurrently is https://www.npmjs.com/package/parallel, a JS implementation of GNU parallel, which allows setting a max number of processes to run.. ",
    "jseminck": "If this one is still up for grabs, then I'd like to take a look!. ",
    "jeremejevs": "@gustavohenke You should release this \ud83d\ude42 Took me a couple of minutes to realize that the latest release is older than this PR.. Thanks for the fix! :slightly_smiling_face: . ",
    "RichDonnellan": "@gustavohenke I agree with @jeremejevs. I spent far too much time debugging only to realize that master isn't the same as the 3.4.0 release. \ud83d\ude15 . ",
    "fabiosantoscode": "Closing this, as my issue was with docker not having a pid 0 and me leaving a zombie process behind. I'll reopen a PR for the first commit here though. ",
    "borislemke": "I came across this requirement too, the scripts in package.json would become to long and made the file look polluted, this would be a superb addition. I need to launch multiple apps (up to 10) to work on my micro-service app locally. For now, I copied the main.js file and modified it do something like:\n```javascript\nimport concurrently from 'concurrently'\nconst commands = [\n    \"nodemon script.js --someReallyLongParamtersMaybeEvenMultiple\",\n    \"nodemon script2.js --someReallyLongParamtersMaybeEvenMultiple\",\n    ... and so on\n]\nconcurrently(commands)\n```\nBy the way, thanks a lot for making this module, been much help!. ",
    "CzBuCHi": "@filipesilva  i sah no progress on this so i did make my own pull request #112 ... . i like foreman appropach ... in this case it would be something like this:\nconfig params --kill-others, --kill-others-on-fail, --success, --prefix, --timestamp-format, --prefix-length, --color, --raw, --allow-restart, --restart-after and --restart-tries would be defined in package.json or by cli. \nparams --names, --prefix-colors and commands would be moved to 'Procfile'\nso instead of:\nconcurrently --kill-others --success last --names \\\"server,client\\\" --prefix-colors \\\"white.bgBlue,white.bgMagenta\\\"  \\\"npm run watch\\\" \\\"npm run electron-start\\\"\ni would have this:\nconcurrently --kill-others --success last and in 'Procfile'\nserver:white.bgBlue:npm run watch\nclient:white.bgMagenta:npm run electron-start\n. just found a bug :( ... starting investigation.... ",
    "phra": "@gustavohenke yeah, but my goal is to remain agnostic about the shell, e.g. the || bash operator is not available in fish, so that echo someone died should be launched from concurrently itself to avoid using shell-specific operators.. if i have spare time i will do it! @gustavohenke . ",
    "cuipengfei": "Hi, \nI am seeing the same behavior when running in a alpine docker container.\nThe same npm script, same node_modules directory, just mapped into a ubuntu docker container, will kill the other process.. ",
    "kolodny": "To clarify, the callbacks work when I run node foo.js file as a standalone, yet don't run when the file is run with concurrently \"node foo.js\". I'm using windows, here's an example repo\nhttps://github.com/kolodny/concurrently-example\nIt works when I run node foo.js but doesn't when I run npm run go\n```\n$ node foo.js\nexitHandler\nexitHandler\nclean\n$ npm run go\n$\n``. I'm using MINGW64 from the git-preview binary, not the command line prompt. I just discovered that this issue only manifests when I exit the program withcrtl+c, when the program exits on it's own accord it prints the messages correctly, seenpm run go-works`. ",
    "dziamid": "That's confusing me as well. \nWith & operator:\nnpm run start:test & cypress run\nexit code is 0\nWith concurrenly:\nconcurrently -k \"npm run start:test\" \"cypress run\"\nexit code is 1 and the output is like this:\n```\n...\n[1] cypress run exited with code 0\n--> Sending SIGTERM to other processes..\n[0] npm run start:test exited with code null\n```. ",
    "berlin-sky": "We are facing the same issue. Does anyone know how to overcome this? We do not need a null exit status.. Thanks @gustavohenke.. ",
    "nrebhun": "My solution was to remove the offending command from parallelization. That is, part of the original set of parallelized tasks involved a process which received a SIGTERM.\nThe signal was also issued during the parallelization, but I suspect that was not the problem.\nWhen I figured this out, I moved the code which issued a SIGTERM signal outside of the set of parallelized processes, so that no process received that signal while concurrently was keeping an eye on things, and I think this is why my solution worked. . ",
    "peterjwest": "So, in the case a process exits with 0, and then concurrently terminates the other processes which exit with code null, should the exit code of concurrently be 0?\nIt seems to be non-zero for me, which is breaking my test suite.. Awesome, thanks!. ",
    "jrmcdona": "I think it may be because I am on Windows.  Trying to find another option.. Created an .env file https://github.com/facebookincubator/create-react-app/issues/1083  and moved PORT to there and seems to be working now. Odd.  I edited server.js with a console.log at the top of the file for debugging purposes.  Saved the file and tried again.   Seems to work.   Not sure why but glad it is working!. Sorry, that only worked once.  I am trying the kill other processes but that isn't working either.. ",
    "kosmotaur": "brilliant, that worked, thanks!. ",
    "rotexhawk": "I am running into the same operation. Can you please elaborate what you by mean by --raw. I don't see this option in the nodemon config. . Awesome. Thanks for clarifying it. Hopefully #128 will be merged soon. . ",
    "guilhermevrs": "Perhaps it's related with the spawn-command package you guys are using.\nI will fork the repo and try to use cross-spawn instead (since spawn-command seems to be deprecated). Indeed, I can't reproduce in a simple example. I tried:\n\"build:src\": \"echo \\\"This is build one\\\"\",\n\"build:template\": \"echo \\\"This is build two\\\"\",\n\"build\": \"concurrently -r \\\"npm run build:src\\\" \\\"npm run build:template\\\"\",\nAnd it worked. But in my real project it does not.\nWhile removing the concurrently -r and using npm run build:src && npm run build:template, it works.\nI will try to increment the sample one and will get back to you when I can reproduce it.\n. Hi\nThis was not related to Concurrently, but related to ConEmu and npm.\nI am closing the issue. ",
    "opsydev": "Hey,\nSorry I didn't respond earlier. My GH email notifications were disabled. I found the issue. For some reason my package-lock.json was fixed on an earlier version of stuff. Had to delete the lock file. I had tried running npm upgrade earlier but it looks like it didn't actually upgrade anything.\nIt's fine now. Thank you for the quick reply.\n. ",
    "derickkemp": "Hi @filipesilva.\nI'll give it a spin tonight.. @gustavohenke sorry not yet.\nI haven't touched my windows box in weeks. I'll set a reminder.. ",
    "harrymitchinson": "I was experiencing this issue on Windows today but haven't done any real investigation into it. \npackage.json\n\"scripts\": {\n    \"start\": \"concurrently \\\"npm run lint\\\" \\\"webpack --watch\\\" \\\"npm run serve\\\"\",\n    \"build\": \"npm run lint && webpack\",\n    \"serve\": \"nodemon --watch dist/index.js\",\n    \"test\": \"jest --forceExit\",\n    \"lint\": \"tslint -c tslint.json -p tsconfig.json\",\n    \"debug\": \"npm run build && node --debug-brk=3000 dist/index.js\"\n}\noutput\n[2] [0] 'np' is not recognized as an internal or external command,\n[2] [0] operable program or batch file.\n[2] [1] 'run' is not recognized as an internal or external command,\n[2] [1] operable program or batch file.\n[2] [2] 'lint\"' is not recognized as an internal or external command,\n[2] [2] operable program or batch file.\n[2] [3] 'webpac' is not recognized as an internal or external command,\n[2] [3] operable program or batch file.\n[2] [4] 'run' is not recognized as an internal or external command,\n[2] [4] operable program or batch file.\n[2] [5] 'serve\"' is not recognized as an internal or external command,\n[2] [5] operable program or batch file.\n[2] [4] run exited with code 1\n[2] [3] webpac exited with code 1\n[2] [2] lint\" exited with code 1\n[2] [1] run exited with code 1\n[2] [0] np exited with code 1\n[2] [5] serve\" exited with code 1\nI did manage to get it working again by changing my package.json scripts around\n\"scripts\": {\n    \"serve\": \"concurrently \\\"npm run lint\\\" \\\"webpack --watch\\\" \\\"nodemon\\\"\",\n    \"build\": \"npm run lint && webpack\",\n    \"test\": \"jest --forceExit\",\n    \"lint\": \"tslint -c tslint.json -p tsconfig.json\",\n    \"debug\": \"npm run build && node --debug-brk=3000 dist/index.js\"\n  },\nAnd now starting my app with npm run serve instead of npm start.. ",
    "atdiff": "@kimmobrunfeldt @gustavohenke - Any thoughts on this?. ",
    "jstrother": "Also having this issue.  Even the most recent version (3.6.0) only runs first task in line.  I really need a reliable way to run multiple tasks in my npm scripts.. ",
    "kingluddite": "$ npm run dev would only run Express server and not React server\n  - I experiences this on 3 different computers and just adding this as it may help others\n  - My fix is to revert to an older version of concurrently with $ npm i concurrently@3.6.0 and then install the latest version with $ npm i concurently@latest. That seemed to jump start it to work again\nI am running Express and React and here are my scripts\npackage.json\n// more code\n  \"scripts\": {\n    \"precommit\": \"pretty-quick --staged\",\n    \"server\": \"nodemon server.js\",\n    \"client\": \"cd client && npm start\",\n    \"dev\": \"concurrently --names \\\"server,client\\\" \\\"npm run server --silent\\\" \\\"npm run client --silent\\\"\"\n  },\n// more code\n. Correct. And I haven't been able to replicate it again on another computer.\nOn Sun, Sep 23, 2018, 6:12 AM Gustavo Henke notifications@github.com\nwrote:\n\nThanks @kingluddite https://github.com/kingluddite, so you no longer\nhave issues while using v4?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/kimmobrunfeldt/concurrently/issues/119#issuecomment-423815572,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAvXFW0X81oU4je0-1CEehTZbnsujMSRks5ud4i3gaJpZM4O1PEO\n.\n. \n",
    "MidnightP": "I'll see if I can manage to make a PR and post here if I'll start working on it.. is worth?\nOn Fri, 13 Oct 2017 at 13:56, Saar Levy notifications@github.com wrote:\n\nI would also have loved to see this feature, but I guess the hassle this\nmodule saves is work typing in Ctrl +c + npm start\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/kimmobrunfeldt/concurrently/issues/121#issuecomment-336431648,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AVepSqW05t6ET6S1bmP_3GZ2YurQ8jZzks5sr0_0gaJpZM4PAelK\n.\n. \n",
    "SaarLevy": "I would also have loved to see this feature, but I guess the hassle this module saves is work typing in Ctrl +c + npm start. ",
    "Jackclarify": "@pgraham https://github.com/kimmobrunfeldt/concurrently/pull/128, this pr works without '-r'(--row), concurrently -k -r \"ng build -w -dop=false\" \"gulp run-dev\",it throw error: \n```\nC:\\pj\\node_modules\\concurrently\\src\\main.js:305\n            target.stdin.write(line);\n                        ^\nTypeError: Cannot read property 'write' of null\n    at Socket.process.stdin.on (C:\\pj\\node_modules\\concurrently\\src\\main.js:305:25)\n    at emitOne (events.js:115:13)\n    at Socket.emit (events.js:210:7)\n    at addChunk (_stream_readable.js:266:12)\n    at readableAddChunk (_stream_readable.js:253:11)\n    at Socket.Readable.push (_stream_readable.js:211:10)\n    at Pipe.onread (net.js:585:20)\nnpm ERR! code ELIFECYCLE\n```\nhttps://github.com/kimmobrunfeldt/concurrently/issues/115, this answer solve my question.. ",
    "demisx": "I am running the latest 3.6.0 and node 10.4.1. Have this npm script that launches a few watch jobs in parallel:\nsh\n$ concurrently --raw 'npm run watch:build' 'npm run watch:apidoc' 'npm run watch:test:unit' 'npm run watch:server'`\nThe watch mode starts fine for all. However typing \"rs\" to restart nodemon and hitting \"Enter\" (or simply hitting \"Enter\") started to crash with the same type of error and leaving npm/node zombie processes behind that I need to kill manually:\n```sh\nTypeError: Cannot read property 'write' of null\n    at ReadStream.process.stdin.on (/Users/dmoore/projects/api/node_modules/concurrently/src/main.js:306:26)\n    at ReadStream.emit (events.js:182:13)\n    at addChunk (_stream_readable.js:283:12)\n    at readableAddChunk (_stream_readable.js:264:11)\n    at ReadStream.Readable.push (_stream_readable.js:219:10)\n    at TTY.onread (net.js:635:20)\n[dmoore (test-add-condition-to-relation)]$ rsevents.js:167\n      throw er; // Unhandled 'error' event\n      ^\nError: read EIO\n    at TTY.onread (net.js:656:25)\nEmitted 'error' event at:\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! api@0.1.0 watch:server: nodemon --delay 1000ms './dist/index.js' --watch './dist' --ext 'js'\nnpm ERR! Exit status 1\n```\n. ",
    "dfadev": "OK, seems to merge args now.  Could possibly be smarter about merging args but I think command line arguments should override the config file.. ",
    "perry-mitchell": "Isn't -r or --raw what you're looking for? For instance, my tests use concurrently.. using regular flags:\n\nAnd with --raw:\n\nNote: Both screenshots taken up against the left side of the terminal. Using --raw removed the prefix.. ",
    "rotemdan": "This behavior/bugfix is essential to allow the standard VSCode problem matchers to parse the process' output correctly (which may apply to other editors as well), see an example in this issue:\nhttps://github.com/Microsoft/vscode/issues/50982\nFor instance to run multiple TypeScript watchers at the same time:\ntasks.json:\njson\n...\n        \"command\": \"concurrently\",\n        \"args\": [\n            \"\\\"tsc --project A --watch\\\"\",\n            \"\\\"tsc --project B --watch\\\"\",\n            \"\\\"tsc --project C --watch\\\"\",\n        ],\n...\nRight now I've resorted to the primitive/possibly broken solution of commenting out this line in main.js\nAnd replacing it with:\nconsole.log(event.data.toString());\nI can definitely try to make a pull request for a more proper solution (#131 seems to have been abandoned - which is very unfortunate), but I'm afraid I don't have the time to write tests etc. at the moment.. I would also suggest to a consider a --no-prefix flag as an alternative as it wouldn't be a breaking change and seems easier to implement. Right now I simply don't have the time to go through the code and figure out what needs to be done, but it doesn't seem very hard.. @gustavohenke That's great news! Actually I'm basically done with the PR (which includes a test I adapted from the previous PR) but I'm getting strange errors in the tests. I keep getting:\nmemo.replace is not a function\nSeems like the reason is adding the flag iself and not the rest of the code. Something unexpected in the way the following is interpreted by commander maybe?\njs\n       .option(\n           '--no-prefix',\n           'suppress the display of prefixes in log messages.\\n'\n       )\nMaybe it sets prefix to true by default just by having the flag?\n(this might help you if you come across it in the future)\n(edit: I have verified it sets it to true just by having this flag, this makes it non-trivial for me to make a simple PR unfortunately). ",
    "PeterKottas": "I think that's not the best approach. Take a look at this, it wait-on appears to be much more reliable approach. Problem with delay would be how long you want to delay to ensure the files were created.. ",
    "7agustibm": "Try this:\n\"test\": \"concurrently --kill-others --success first \\\"mocha **/*.spec.js\\\" \\\"node ./express-mock.js\\\"\",\nI have had the same problem and if you change the order, it should work correctly.. ",
    "utatti": "I had the same problem and @7agustibm 's answer actually works!\nFor me, the problem seems like only happening in Ubuntu. In macOS, -s last also works with no problem.. ",
    "lydell": "Any chance this could be released on npm?. ",
    "tyscorp": "Any plans for the same shortcuts for yarn?. ",
    "StefH": "I found a workable solution here: https://stackoverflow.com/questions/26814034/silencing-errors-on-failures-for-npm-run-script\nMy solution is:\n- install https://www.npmjs.com/package/cash-true\nAnd full command is now:\n``` js\n\"coverage\": \"concurrently --names \\\"TestRPC,Coverage\\\" --kill-others \\\"node_modules\\.bin\\testrpc-sc --port 8555\\\" \\\"node_modules\\.bin\\solidity-coverage\\\" || true\",\n```. ",
    "acristu": "Use concurrently --success first, this will make only the exit status of coverage (first child that exited) matter. I'm am running e2e tests, || true solution does not work because it hides all errors.. ",
    "adrian-moisa": "I am trying to run two scripts at once with concurrently. The basic command looks something like this:\nconcurrently -k --success first \"node ./tools/mock-webapi/mock-webapi.js\" \"npm run test-single-run\"\n\nWhich in turn calls (local):\n\"test-single-run\": \"karma start --single-run --browsers ChromeHeadless\"\n\nOr on remote (teamcity host):\n\"test-teamcity\": \"karma start --reporters teamcity --single-run --browsers ChromeHeadless\",\n\nThe tests run just fine (local & remote). However, I keep getting exit code 1. Even if I use concurrently -k --success first I still get a code 1 even with --success first.\n[1] 09 05 2018 17:56:54.032:WARN [launcher]: ChromeHeadless was not killed in 2000 ms, sending SIGKILL.\n[1] npm run test-single-run exited with code 0\n--> Sending SIGTERM to other processes..\n[0] node ./tools/mock-webapi/mock-webapi.js exited with code 1\n\nI tried various ways for json-server to gracefully receive this signal. Nothing seems to work.\nmock-webapi.js\nprocess.on('SIGTERM', function (code) {\n    console.log('Handle SIGTERM', process.pid, code);\n    exitCode = 0;\n    server.close(function () {\n        process.exit(0);\n    });\n});\n\nprocess.on('SIGKILL', function (code) {\n    console.log('SIGKILL received...', code);\n    exitCode = 0;\n    server.close(function () {\n        process.exit(0);\n    });\n});\n\nprocess.on('SIGINT', function (code) {\n    console.log('SIGINT received...', code);\n    exitCode = 0;\n    server.close(function () {\n        process.exit(0);\n    });\n});\n\n. Finally found a solution to this problem. I wrote a little script that runs the mock webapi and the karma tests as child processes. More details on stackoverflow. ",
    "gorgos": "Strangely --success first works while -- success last does not.. ",
    "karlhiramoto": "I still see same issue\n[1] [19:02:19] I/launcher - 0 instance(s) of WebDriver still running\n[1] [19:02:19] I/launcher - chrome #01 passed\n[1] [19:02:19] I/launcher - firefox #11 passed\n[1] Closing report\n[1] ng e2e front-e2e exited with code 0\n--> Sending SIGTERM to other processes..\n[0] npm run start-mock-api exited with code SIGTERM\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! client@0.0.0 e2e-ci-updated: `concurrently --kill-others --success first \"npm run start-mock-api\" \"ng e2e front-e2e\"`\nnpm ERR! Exit status 1\nnpm ERR!. Sorry I ended up just not using concurrently  using a simple bash script to run two  jobs in parallel and check the exit code of the 1st job.  . ",
    "KingScooty": "I'm using 4.0.1 and --success first/last still isn't working for me.\nI always get exit codes of 1, regardless:\nconcurrently --kill-others --success first 'yarn dev:stub-proxy' 'yarn dev:stub-server' 'yarn start' 'yarn cypress run --spec cypress/integration/brandLogos.spec.js'\n[3]     All specs passed!                           699ms        3        3        -        -        -  \n[3] \n[3] yarn cypress run --spec cypress/integration/brandLogos.spec.js exited with code 0\n--> Sending SIGTERM to other processes..\n[0] yarn dev:stub-proxy exited with code 1\n--> Sending SIGTERM to other processes..\n[1] yarn dev:stub-server exited with code 1\n--> Sending SIGTERM to other processes..\n[2] yarn start exited with code 1\n\u2728  Done in 11.60s.. @gustavohenke am i doing anything wrong with the above? I'd really like to use this tool, but i can't see what i'm doing wrong for everything to exit code 1 despite the first process exiting code 0.. Hi @gustavohenke. I'm a bit confused then. \nIf i'm not doing something wrong, why are the rest of the processes exiting with 1 despite the first process exiting with 0? Isn't --success first supposed to force the other processes to exit with code 0? The code 1's are breaking my pipeline, despite all the tests passing.. ",
    "JaKXz": "This makes sense to me at a high level and would be great for #121 and others like it.. ",
    "reohjs": "Hi, is this ready to merge?. ",
    "densk1": "Would be great to see this committed. Very handy for re-running tests etc.. ",
    "konoufo": "So does this supposedly solve #121 ?\n. ",
    "JoshuaKGoldberg": "Will do!. I'm not seeing these test failures locally :(\nEdit: oh, am now; will work on them.... Yeah I don't have the time to push this through. Visually it's more pleasing, but not truly \"necessary\".\nHopefully if someone does have a real need for the feature, this PR can serve as a reference.. ",
    "rowlandekemezie": "@Zakini Did you find a work around for this?\n. ",
    "mindplay-dk": "By the way, the extra ^C in the output was me unnecessarily pressing CTRL+C, because I wasn't getting a command prompt... it's not that concurrently is still hanging, it does stop after the last process terminates, pressing ENTER will do, as you can see here:\n```\n$ ps -a\n  PID TTY          TIME CMD\n 1723 tty1     00:00:00 node\n 1867 tty1     00:00:06 node-sass\n 5220 tty2     00:00:00 sudo\n 5221 tty2     00:00:03 caddy\n 5504 tty1     00:00:00 node\n 5648 tty1     00:02:16 node-sass\n 6043 tty1     00:00:00 ps\n$ kill -9 1867\n$ [1] npm run watch-sass exited with code null\n$ ps -a\n  PID TTY          TIME CMD\n 5220 tty2     00:00:00 sudo\n 5221 tty2     00:00:03 caddy\n 5504 tty1     00:00:00 node\n 5648 tty1     00:02:16 node-sass\n 6044 tty1     00:00:00 ps\n``\n. In my case, I think I've isolated it tonode-sass- it seems to be the cause of the hang-up every time. Maybe. Or maybe I've just been doing more SASS work lately. Either way, I supposeconcurrently` ought to have a timeout setting of some sort? And if the process gets terminated, ideally, should never leave hanging processes in the background. (?)\n. I haven't experienced it in a while (a few months, probably) so maybe this was due to bugs in earlier versions of WSL? It's hard to say, since there are so many different moving pieces when running a bunch of scripts/commands from different vendors concurrently.\nSounds like @tfritsch-km is still having problems though.\nI'll be sure to chime in if I encounter any problems again.\n. ",
    "RDeluxe": "I've been having a similar problem. Launching tsc -w + docker-compose up, and after pressing ctrl+c it stuck there : \n\nIf I press ctrl+c again, it seems to stop tsc -w but my docker-compose is still up.  . ",
    "tfritsch-km": "@gustavohenke same problem here with v4.0.1 (windows 10) \nAt first I thought as @mindplay-dk  did, that it was node-sass related but problem occurs with webpack alone too.\nAnyway, I use git bash (inside vscode) but noticed the problem doesn't happen in Cmder nor in cmd (you still have to press \"O\" to confirm exit and return to prompt, wich is quite boring but it doesn't hang as in bash). I hope it will help to solve this, until this is fixed I go back to parallelshell (so sad \ud83d\ude22 ) . ",
    "crusoexia": "same issue here, concurrently run babel and nodemon, after press command + c, the nodemon still running.. ",
    "whymarrh": "You may need to trap SIGTERM in your script and gracefully kill the child processes you've started.. @gustavohenke thanks, I'll try to take a look this week. ",
    "tgoyer": "Disregard.  I uninstalled and then reinstalled.  It's now working.. ",
    "SpencerKaiser": "@gustavohenke that's exactly what I needed! Thank you for the help and thanks for the awesome tool!. ",
    "Kenya-West": "```\n{\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"~0.6.3\",\n    \"@angular/cli\": \"6.0.3\",\n    \"concurrently\": \"^3.5.1\", // this\n    \"webpack\": \"^4.7.0\",\n    \"webpack-cli\": \"^2.1.3\",\n    \"webpack-watch-server\": \"^1.2.1\"\n  }\n}. ",
    "cawalch": "Same issue here (webpack 4). Using raw fixes it, but at the loss of the prefix option.\n. ",
    "enricoreich": "Unfortunately same issue here with webpack 4.16.3 and concurrently 3.6.1 but without angular-cli on Windows cmd and powershell.. ",
    "kopach": "Unfortunately I do have a problem when using --raw option on Windows OS. If used with angular cli (e.g. ng serve or ng build, etc) it's getting stuck and command never gets executed. So, temporary workaround for me it's to add --no-progress to the ng command and do not use --raw option for concurrently.. Issue seems not to be reproducible anymore in angular CLI 6.1.3. However it's reproducible in angular cli 6.0.0. Here is a project generated with angular cli v 6.0.0\nIn order to reproduce issue:\n1. Clone repo\n1. run npm install\n1. run npm run start:concurrently. ",
    "wintercounter": "Same issue here. I have to explicit define --default-input-target to work at least for the default one.\nEDIT\nI logged out target and here is what I get:\nChildProcess {\n  _events:\n   { close: [Function: innerHandler],\n     error: [Function: innerHandler] },\n  _eventsCount: 2,\n  _maxListeners: undefined,\n  _closesNeeded: 1,\n  _closesGot: 0,\n  connected: false,\n  signalCode: null,\n  exitCode: null,\n  killed: false,\n  spawnfile: 'cmd.exe',\n  _handle: Process { owner: [Circular], onexit: [Function], pid: 25712 },\n  spawnargs:\n   [ 'cmd.exe',\n     '/s',\n     '/c',\n     '\"node C:\\\\......\\\\node_modules\\\\jest-cli\\\\bin\\\\jest.js -o --watch --passWithNoTests --config=C:\\\\......\\\\config\\\\jest\\\\index.js\"' ],\n  pid: 25712,\n  stdin: null,\n  stdout: null,\n  stderr: null,\n  stdio: [ null, null, null ] }\nI have a feeling that jest is causing the issue here somehow.\nEDIT 2\nI think my case is not related to the original topic even tho it's the same error. I think my issue is that I'm running concurrently with spawn.\njs\nspawn('node', [\n    path.resolve(__dirname, 'node_modules/concurrently/src/main.js'),\n    '-k',\n    '-n',\n    Object.keys(eco).join(','),\n    ...Object.values(eco).map(({command}) => `\"${command.join(' ')}\"`),\n    '-r',\n    '--default-input-target',\n    Object.keys(eco)[0]\n], { shell: true, stdio: 'inherit' })\nSee https://stackoverflow.com/questions/27786228/node-child-process-spawn-stdout-returning-as-null\nI think it's the same issue. Should I open a new issue for this? Any idea for a workaround?. @gustavohenke I tried every possible combo, even tried to tweak concurrently's main.js, couldn't make it work. Stdin is either null or no output otherwise. Concurrently is spawing the process with inherit in raw mode (which is essential for most of the things I'm trying to use here) and from that point it cannot write to stdin on it's own. Docs should be updated to reflect that using -r will disable input forward and as @voxpelli stated, condition should be added to prevent errors.\nMaybe with -r it would be possible to simply not have any custom code to handle commands but simply rely on node, inherint stdio and each process would get the input. Again, -r would completely disable that feature as it cannot work with it anyway.\nEDIT\nI have tested the above. I have webpack-serve and jest running alongside. Jest's output is fully swallowed while webpack's output appears fine.\nEDIT 2\nI managed to get output work but after first input everything acts like it's being completely frozen :S I can only close the terminal, CTRL+C doesn't work either. Oh well, i guess my cases are too much of an edge case to be address for a fix.\nEDIT 3\nCreated a repo to test Jest. These are the only settings (simply inherit) that will correctly pass output. However after first input it dies. https://github.com/wintercounter/concurrently-jest-test\nnpm install\nnpm test\nPlease note I'm testing this on Windows 10\nEDIT 4\nI've tested on Mac, same issue.\nI also added npm run test-concurrently-cli and npm run test-jest-cli\nFirst one fails, last one runs fine. Seems like it's not related to spawning concurrently manually, issues with input are there even if I run concurrently from CLI.\n(Sry for edits, I don't want to spam ur inbox).\nEDIT 5\nInvestigation ended. See https://github.com/facebook/jest/issues/5017. @voxpelli Just to have something topic related here :)\njs\nif (target) {\n    if (target.stdin) {\n        // write\n    }\n}\nWith target && target.stdin it'll still log error when it shouldn't.. ",
    "voxpelli": "@gustavohenke Sure, I can try to find some time for it. Which of the mentioned solution would you prefer? A new opt-out for stdin or changing it to an opt-in?. I'll try to look at it asap after my deadline today \ud83d\udc4d . ",
    "hyperknot": "I'm having problems with target.stdin.write(line): Cannot read property 'write' of null as well on 3.6.1. What was the latest stable version without this problem?. Thanks, 3.5.x works perfectly.. ",
    "mastilver": "I think I'm having the same problem with names\nIt use to be that the wildcard was the name suffix:\nhttps://github.com/kimmobrunfeldt/concurrently/pull/140/files#diff-7da21ee57c9bb94e0425929d61b38d5eR128\nhttps://github.com/kimmobrunfeldt/concurrently/pull/140/files#diff-7da21ee57c9bb94e0425929d61b38d5eR154\nwhereas right now the name is the full command name\n\nSo on the latest version\nconcurrently \"npm:watch-*\"\nis equivalent to\nconcurrently -n watch-js,watch-css,watch-node \"npm run watch-js\" \"npm run watch-css\" \"npm run watch-node\"\nand\nconcurrently -n w: npm:watch-*\nis equivalent to\nconcurrently -n watch-js,watch-css,watch-node \"npm run watch-js\" \"npm run watch-css\" \"npm run watch-node\"\nnotice they are both the same as it's not looking at the name anymore\nI will try to have a look at the code and submit a PR. My bad, should be all fixed now :). ",
    "mikeharder": "I'm hitting the same issue, and I prefer the behavior in #165 to the current behavior.. ",
    "reintroducing": "Sure, give me a few days, I'm currently out of town for work. Please don't close the issue in the meantime, I will definitely do that as this is holding us up from using concurrently effectively so i'd really love to get it solved.. @gustavohenke So I finally got some time to put together a small reproducible project which immediately made me realize that the error was not in concurrently at all and I was able to get everything working as expected. Apologies for the noise but that was a helpful exercise to finally help me track this down. Many thanks.. ",
    "sant123": "I get errno 130 \ud83d\ude1e . ",
    "i0natan": "Per command.\n.Start simple, then enrich: 1st version will just output the last n lines of each process run (=each restart will show additional n lines). Then once it's ready, let's see what enhancements people are asking for\nConsider a CI spin-off of your project where we constantly run quality tasks (lint, license check, test, etc) and show only meaningful notice to the developers. ",
    "ghost": "@gustavohenke if it's a bug as you labeled this issue; why did you close it?. Oh. thanks @gustavohenke . ",
    "chrisdel101": "I am not sure how I posted this question without any input. Apologies for that. The output in mocha is different that the terminal default. Running concurrently it is all white, and hard to distinguish. . ",
    "joelzimmer": "@gustavohenke This is no longer a problem for us anymore (we're using slightly different build tactics in an upgraded system), but I'd look at parallel-webpack for inspiration - it'd be nice to pass in a limit of how many processes run and then queue which processes run.. ",
    "drschwabe": "Ok np!  In the meantime I might try a more elaborate batch script for my particular use-case or just tough it out by manually entering each script to package.json\nLooking forward to v4!  Will close this for now - and will keep an eye out for when your v4 branch is available ;)\n. Wow great work, np, will try this out!!. ",
    "coveralls": "Pull Request Test Coverage Report for Build 318\n\n0 of 0   changed or added relevant lines in 0 files are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage increased (+0.8%) to 99.183%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 314: |  0.8% |\n| Covered Lines: | 239 |\n| Relevant Lines: | 239 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 319\n\n0 of 0   changed or added relevant lines in 0 files are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage remained the same at 99.178%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 317: |  0.0% |\n| Covered Lines: | 239 |\n| Relevant Lines: | 239 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 321\n\n2 of 2 (100.0%)  changed or added relevant lines in 2 files are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage remained the same at 99.178%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 320: |  0.0% |\n| Covered Lines: | 239 |\n| Relevant Lines: | 239 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 324\n\n2 of 2 (100.0%)  changed or added relevant lines in 2 files are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage remained the same at 99.178%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 320: |  0.0% |\n| Covered Lines: | 239 |\n| Relevant Lines: | 239 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 322\n\n0 of 0   changed or added relevant lines in 0 files are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage remained the same at 99.178%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 320: |  0.0% |\n| Covered Lines: | 239 |\n| Relevant Lines: | 239 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 322\n\n0 of 0   changed or added relevant lines in 0 files are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage remained the same at 99.178%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 320: |  0.0% |\n| Covered Lines: | 239 |\n| Relevant Lines: | 239 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 325\n\n3 of 3 (100.0%)  changed or added relevant lines in 1 file are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage increased (+0.02%) to 99.198%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 323: |  0.02% |\n| Covered Lines: | 242 |\n| Relevant Lines: | 242 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 325\n\n3 of 3 (100.0%)  changed or added relevant lines in 1 file are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage increased (+0.02%) to 99.198%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 323: |  0.02% |\n| Covered Lines: | 242 |\n| Relevant Lines: | 242 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 327\n\n3 of 3 (100.0%)  changed or added relevant lines in 1 file are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage increased (+0.02%) to 99.198%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 323: |  0.02% |\n| Covered Lines: | 242 |\n| Relevant Lines: | 242 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 328\n\n0 of 0   changed or added relevant lines in 0 files are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage remained the same at 99.178%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 326: |  0.0% |\n| Covered Lines: | 239 |\n| Relevant Lines: | 239 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 328\n\n0 of 0   changed or added relevant lines in 0 files are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage remained the same at 99.178%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 326: |  0.0% |\n| Covered Lines: | 239 |\n| Relevant Lines: | 239 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 332\n\n1 of 1 (100.0%)  changed or added relevant line in 1 file are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage increased (+0.004%) to 99.183%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 331: |  0.004% |\n| Covered Lines: | 238 |\n| Relevant Lines: | 238 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 332\n\n1 of 1 (100.0%)  changed or added relevant line in 1 file are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage increased (+0.004%) to 99.183%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 331: |  0.004% |\n| Covered Lines: | 238 |\n| Relevant Lines: | 238 |\n\n\ud83d\udc9b  - Coveralls\n. ## Pull Request Test Coverage Report for Build 332\n\n1 of 1 (100.0%)  changed or added relevant line in 1 file are covered.\nNo unchanged relevant lines lost coverage.\nOverall coverage increased (+0.004%) to 99.183%\n\n\n|  Totals |  |\n| :-- | --: |\n| Change from base Build 331: |  0.004% |\n| Covered Lines: | 238 |\n| Relevant Lines: | 238 |\n\n\ud83d\udc9b  - Coveralls\n. ",
    "igrayson": "I may not fully understand the concern. When I look at how our tool builds commands, I don't see a scenario where we add --s. To my understanding, concurrently would only execute yarn test:watch -- home if the input from the user included the double-dash. \nE.g. concurrently \"yarn:test:* -- home\" -> yarn test:watch -- home, and\nconcurrently \"yarn:test:* home\" -> yarn test:watch home. To me, this behavior seems like what we want?. That's correct! The file seemed inconsistent about it, so I didn't think I was disrupting an existing pattern.\nIf this is a problem, I can re-add the whitespaces.. ",
    "firoxer": "\nWhat else do you think should be covered by your PR?\n\nI was just pointing out that I'm not confident that all use cases have been covered. :) If you feel it's complete then it's all good.\nI added some functional tests and they seem to work fine. While doing that, I noticed that because --hide uses the yargs array type, it makes it necessary to use -- after the final hideable index/name when --hide is the last option because otherwise yargs won't know where stop parsing indices/names and where to start parsing commands. In other words, if the first and the third process of bin/concurrently.js 'echo 1' 'echo 2' 'echo 3' should be hidden, the command should look like bin/concurrently.js --hide 0 2 -- 'echo 1' 'echo 2' 'echo 3'. I expanded the usage notes to include this.\nHowever, I was left wondering if this kind of behaviour is fine, because it kind of conflits with --names which works with comma-separated values instead of spaces (e.g. --names foo,bar, no following -- needed). The problem is in that by telling yargs to use array, we get automatic casting to numbers (i.e. --hide 1 foo 2 bar results in an array of [1, 'foo', 2, 'bar']) which works really well with the rest of the code. By making --hide work like --names we lose this nicety, but we gain usage consistence. Which way do you prefer?. Sure. I just went with \"hide\" since it was suggested in #138. I guess CLI tools usually use -q or --quiet with zero arguments so --quiet [number] would deviate from that, but on the other hand I don't think it's that big of a deal. If you want me to change it, I'll do it.. ",
    "AntonNiklasson": "Awesome job, I would love to see this merged. However, I would expect the name of the flag to be \"quiet\" and not \"hide\". Thoughts?. ",
    "viganzeqiri": "yes, i forgot to change the port for node.js script\nThanks. I dont know why the error was so unclear\n. ",
    "mtford90": "Plus one to this - I had to search for a different solution after having crashed my computer a couple times - ideally i'd want to match the num. cpu cores.. ",
    "ChrisBAshton": "Thanks - that's what I wanted.. ",
    "eparizzi": "Sorry, wrong repo!\nClose it.\nOn Tue, Dec 11, 2018, 21:30 Gustavo Henke <notifications@github.com wrote:\n\nWhat do you mean? concurrently has nothing to do with React.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/kimmobrunfeldt/concurrently/issues/178#issuecomment-446415923,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAZLSfOwYAfTncks73rt16H9w9RVBB93ks5u4E5BgaJpZM4ZOIvH\n.\n. \n",
    "mawhidby": "I guess one way around this would be to have restart-process.js explicitly check for the SIGTERM, but I'm not sure about the side-effects this may cause\n```\nhandle(commands) {\n        if (this.tries === 0) {\n            return commands;\n        }\n    commands.map(command => command.close.pipe(\n        take(this.tries),\n        takeWhile(code => code !== 0 && code !== 'SIGTERM')\n\n...\n```. ",
    "mrmurphy": "@Waltari10 I don't think it's possible for a script utility like this to manipulate your terminal windows or tabs. Concurrently would have to implement its own windowing system using a terminal UI builder like \"curses\" or something. Or the user would have to use some terminal app that offered APIs allowing child processes to manipulate its windows and tabs. . ",
    "qraynaud": "@pgraham do you have some time to look into this? I can't wait for this change to happen ^^ ;-). "
}